
start_usb_composite.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007274  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08007404  08007404  00008404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074b4  080074b4  00009304  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080074b4  080074b4  000084b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074bc  080074bc  00009304  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074bc  080074bc  000084bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080074c0  080074c0  000084c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000304  20000000  080074c4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009304  2**0
                  CONTENTS
 10 .bss          0000a2e4  20000308  20000308  00009308  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000a5ec  2000a5ec  00009308  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009304  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002b0cf  00000000  00000000  00009334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006ade  00000000  00000000  00034403  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00013c0b  00000000  00000000  0003aee1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000018c0  00000000  00000000  0004eaf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001d3d  00000000  00000000  000503b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00027a2d  00000000  00000000  000520ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002f4ce  00000000  00000000  00079b1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d6b62  00000000  00000000  000a8fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0017fb4a  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000048d4  00000000  00000000  0017fb90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000059  00000000  00000000  00184464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000308 	.word	0x20000308
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080073ec 	.word	0x080073ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000030c 	.word	0x2000030c
 80001cc:	080073ec 	.word	0x080073ec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	0000      	movs	r0, r0
	...

080005b0 <HAL_CAN_MspInit>:
  /* USER CODE END CAN1_Init 2 */

}

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80005b0:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(canHandle->Instance==CAN1)
 80005b2:	4b1f      	ldr	r3, [pc, #124]	@ (8000630 <HAL_CAN_MspInit+0x80>)
 80005b4:	6802      	ldr	r2, [r0, #0]
{
 80005b6:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b8:	2400      	movs	r4, #0
  if(canHandle->Instance==CAN1)
 80005ba:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005bc:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80005c0:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80005c4:	9406      	str	r4, [sp, #24]
  if(canHandle->Instance==CAN1)
 80005c6:	d001      	beq.n	80005cc <HAL_CAN_MspInit+0x1c>
//    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80005c8:	b009      	add	sp, #36	@ 0x24
 80005ca:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005cc:	f503 33ea 	add.w	r3, r3, #119808	@ 0x1d400
 80005d0:	9400      	str	r4, [sp, #0]
 80005d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005d4:	4817      	ldr	r0, [pc, #92]	@ (8000634 <HAL_CAN_MspInit+0x84>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005d6:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 80005da:	641a      	str	r2, [r3, #64]	@ 0x40
 80005dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80005de:	f002 7200 	and.w	r2, r2, #33554432	@ 0x2000000
 80005e2:	9200      	str	r2, [sp, #0]
 80005e4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80005e6:	9401      	str	r4, [sp, #4]
 80005e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005ea:	f042 0208 	orr.w	r2, r2, #8
 80005ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80005f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80005f2:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8000628 <HAL_CAN_MspInit+0x78>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80005f6:	f003 0308 	and.w	r3, r3, #8
 80005fa:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005fc:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005fe:	2309      	movs	r3, #9
 8000600:	2203      	movs	r2, #3
 8000602:	e9cd 2305 	strd	r2, r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000606:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800060a:	9d01      	ldr	r5, [sp, #4]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800060c:	f001 fd98 	bl	8002140 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000610:	4622      	mov	r2, r4
 8000612:	4621      	mov	r1, r4
 8000614:	2014      	movs	r0, #20
 8000616:	f001 fb19 	bl	8001c4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800061a:	2014      	movs	r0, #20
 800061c:	f001 fb52 	bl	8001cc4 <HAL_NVIC_EnableIRQ>
}
 8000620:	b009      	add	sp, #36	@ 0x24
 8000622:	bd30      	pop	{r4, r5, pc}
 8000624:	f3af 8000 	nop.w
 8000628:	00000003 	.word	0x00000003
 800062c:	00000002 	.word	0x00000002
 8000630:	40006400 	.word	0x40006400
 8000634:	40020c00 	.word	0x40020c00

08000638 <HAL_CAN_MspDeInit>:

void HAL_CAN_MspDeInit(CAN_HandleTypeDef* canHandle)
{
 8000638:	b508      	push	{r3, lr}

  if(canHandle->Instance==CAN1)
 800063a:	6802      	ldr	r2, [r0, #0]
 800063c:	4b0a      	ldr	r3, [pc, #40]	@ (8000668 <HAL_CAN_MspDeInit+0x30>)
 800063e:	429a      	cmp	r2, r3
 8000640:	d000      	beq.n	8000644 <HAL_CAN_MspDeInit+0xc>
    HAL_NVIC_DisableIRQ(CAN1_RX1_IRQn);
  /* USER CODE BEGIN CAN1_MspDeInit 1 */

  /* USER CODE END CAN1_MspDeInit 1 */
  }
}
 8000642:	bd08      	pop	{r3, pc}
    __HAL_RCC_CAN1_CLK_DISABLE();
 8000644:	4a09      	ldr	r2, [pc, #36]	@ (800066c <HAL_CAN_MspDeInit+0x34>)
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1);
 8000646:	480a      	ldr	r0, [pc, #40]	@ (8000670 <HAL_CAN_MspDeInit+0x38>)
    __HAL_RCC_CAN1_CLK_DISABLE();
 8000648:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800064a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800064e:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1);
 8000650:	2103      	movs	r1, #3
 8000652:	f001 fe91 	bl	8002378 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(CAN1_RX0_IRQn);
 8000656:	2014      	movs	r0, #20
 8000658:	f001 fb42 	bl	8001ce0 <HAL_NVIC_DisableIRQ>
}
 800065c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_DisableIRQ(CAN1_RX1_IRQn);
 8000660:	2015      	movs	r0, #21
 8000662:	f001 bb3d 	b.w	8001ce0 <HAL_NVIC_DisableIRQ>
 8000666:	bf00      	nop
 8000668:	40006400 	.word	0x40006400
 800066c:	40023800 	.word	0x40023800
 8000670:	40020c00 	.word	0x40020c00

08000674 <HAL_CAN_RxFifo0MsgPendingCallback>:
CAN_RxHeaderTypeDef g_CanRxHeader;
static  uint8_t g_au8UsbFrame[HID_FRAME_SIZE] = {0};
HID_FrameFIFO_t g_HIDFrameFIFO_Tranfer;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000674:	b538      	push	{r3, r4, r5, lr}
    //memset(g_au8UsbFrame, 0, sizeof(g_au8UsbFrame));
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &g_CanRxHeader, &g_au8UsbFrame[6]) == HAL_OK)
 8000676:	4d13      	ldr	r5, [pc, #76]	@ (80006c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000678:	4c13      	ldr	r4, [pc, #76]	@ (80006c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 800067a:	462b      	mov	r3, r5
 800067c:	4622      	mov	r2, r4
 800067e:	2100      	movs	r1, #0
 8000680:	f001 f8e0 	bl	8001844 <HAL_CAN_GetRxMessage>
 8000684:	b9e8      	cbnz	r0, 80006c2 <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
    {
    	g_CanRxHeader.Timestamp = TIM5->CNT;
 8000686:	4b11      	ldr	r3, [pc, #68]	@ (80006cc <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
        // Byte 0: CMD
        g_au8UsbFrame[0] = 0x03;
        // Byte 1: DLC (4-bit high), FrameType (4-bit low)
        g_au8UsbFrame[1] = (g_CanRxHeader.DLC << 4) | (g_CanRxHeader.IDE & 0x0F);
 8000688:	6920      	ldr	r0, [r4, #16]
    	g_CanRxHeader.Timestamp = TIM5->CNT;
 800068a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800068c:	6163      	str	r3, [r4, #20]
        g_au8UsbFrame[0] = 0x03;
 800068e:	1fa9      	subs	r1, r5, #6
 8000690:	2203      	movs	r2, #3
 8000692:	ba1b      	rev	r3, r3
 8000694:	f805 2c06 	strb.w	r2, [r5, #-6]
        // Byte 2~5: CAN ID (big-endian)
        uint32_t l_u32CanID = (g_CanRxHeader.IDE == CAN_ID_STD) ? g_CanRxHeader.StdId : g_CanRxHeader.ExtId;
 8000698:	e9d4 5200 	ldrd	r5, r2, [r4]
        g_au8UsbFrame[2] = (l_u32CanID >> 24) & 0xFF;
        g_au8UsbFrame[3] = (l_u32CanID >> 16) & 0xFF;
        g_au8UsbFrame[4] = (l_u32CanID >> 8) & 0xFF;
        g_au8UsbFrame[5] = l_u32CanID & 0xFF;

		g_au8UsbFrame[14] = (g_CanRxHeader.Timestamp >> 24) & 0xFF;
 800069c:	f8c1 300e 	str.w	r3, [r1, #14]
        g_au8UsbFrame[1] = (g_CanRxHeader.DLC << 4) | (g_CanRxHeader.IDE & 0x0F);
 80006a0:	68a3      	ldr	r3, [r4, #8]
        uint32_t l_u32CanID = (g_CanRxHeader.IDE == CAN_ID_STD) ? g_CanRxHeader.StdId : g_CanRxHeader.ExtId;
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	bf08      	it	eq
 80006a6:	462a      	moveq	r2, r5
        g_au8UsbFrame[1] = (g_CanRxHeader.DLC << 4) | (g_CanRxHeader.IDE & 0x0F);
 80006a8:	f003 030f 	and.w	r3, r3, #15
 80006ac:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 80006b0:	ba12      	rev	r2, r2
 80006b2:	704b      	strb	r3, [r1, #1]
        g_au8UsbFrame[2] = (l_u32CanID >> 24) & 0xFF;
 80006b4:	f8c1 2002 	str.w	r2, [r1, #2]
		g_au8UsbFrame[15] = (g_CanRxHeader.Timestamp >> 16) & 0xFF;
		g_au8UsbFrame[16]= (g_CanRxHeader.Timestamp >> 8) & 0xFF;
		g_au8UsbFrame[17] = (g_CanRxHeader.Timestamp ) & 0xFF;
        HID_Frame_Write(&g_HIDFrameFIFO_Tranfer,g_au8UsbFrame);
    }
}
 80006b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HID_Frame_Write(&g_HIDFrameFIFO_Tranfer,g_au8UsbFrame);
 80006bc:	4804      	ldr	r0, [pc, #16]	@ (80006d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 80006be:	f000 bdfd 	b.w	80012bc <HID_Frame_Write>
}
 80006c2:	bd38      	pop	{r3, r4, r5, pc}
 80006c4:	20004356 	.word	0x20004356
 80006c8:	20004370 	.word	0x20004370
 80006cc:	40000c00 	.word	0x40000c00
 80006d0:	2000034c 	.word	0x2000034c

080006d4 <Can2Usb_Tranfer>:

uint8_t Can2Usb_Tranfer(HID_FrameFIFO_t *fifo, uint8_t *dest_buf)
{
 80006d4:	b570      	push	{r4, r5, r6, lr}
    // Kiểm tra có frame không
    if(fifo->head == fifo->tail)
 80006d6:	f500 4480 	add.w	r4, r0, #16384	@ 0x4000
{
 80006da:	4602      	mov	r2, r0
    if(fifo->head == fifo->tail)
 80006dc:	7825      	ldrb	r5, [r4, #0]
 80006de:	7860      	ldrb	r0, [r4, #1]
 80006e0:	4285      	cmp	r5, r0
 80006e2:	d02c      	beq.n	800073e <Can2Usb_Tranfer+0x6a>
        return 0;  // FIFO rỗng

    // Copy frame ra buffer tạm
    memcpy(dest_buf, fifo->frame[fifo->tail], HID_FRAME_SIZE);
 80006e4:	f894 e001 	ldrb.w	lr, [r4, #1]

    // Thử gửi USB
    if(USBD_CUSTOM_HID_SendReport(&hUsbDevice, dest_buf, HID_FRAME_SIZE) == USBD_OK)
 80006e8:	4816      	ldr	r0, [pc, #88]	@ (8000744 <Can2Usb_Tranfer+0x70>)
    memcpy(dest_buf, fifo->frame[fifo->tail], HID_FRAME_SIZE);
 80006ea:	eb02 1c4e 	add.w	ip, r2, lr, lsl #5
 80006ee:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
 80006f2:	f8dc 600c 	ldr.w	r6, [ip, #12]
 80006f6:	f852 500e 	ldr.w	r5, [r2, lr]
 80006fa:	f8dc e004 	ldr.w	lr, [ip, #4]
 80006fe:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8000702:	608a      	str	r2, [r1, #8]
 8000704:	60ce      	str	r6, [r1, #12]
 8000706:	600d      	str	r5, [r1, #0]
 8000708:	f8c1 e004 	str.w	lr, [r1, #4]
 800070c:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8000710:	f8dc 5010 	ldr.w	r5, [ip, #16]
 8000714:	f8dc e014 	ldr.w	lr, [ip, #20]
 8000718:	f8dc 601c 	ldr.w	r6, [ip, #28]
 800071c:	61ce      	str	r6, [r1, #28]
 800071e:	618a      	str	r2, [r1, #24]
 8000720:	610d      	str	r5, [r1, #16]
 8000722:	f8c1 e014 	str.w	lr, [r1, #20]
    if(USBD_CUSTOM_HID_SendReport(&hUsbDevice, dest_buf, HID_FRAME_SIZE) == USBD_OK)
 8000726:	2220      	movs	r2, #32
 8000728:	f005 fbe0 	bl	8005eec <USBD_CUSTOM_HID_SendReport>
 800072c:	b928      	cbnz	r0, 800073a <Can2Usb_Tranfer+0x66>
    {
        // Gửi thành công → đánh dấu frame đã đọc
        fifo->tail = (fifo->tail + 1) % HID_FRAME_BUFFER_SIZE;
 800072e:	7863      	ldrb	r3, [r4, #1]
        return 1;
 8000730:	2001      	movs	r0, #1
        fifo->tail = (fifo->tail + 1) % HID_FRAME_BUFFER_SIZE;
 8000732:	4403      	add	r3, r0
 8000734:	b2db      	uxtb	r3, r3
 8000736:	7063      	strb	r3, [r4, #1]
    else
    {
        // USB bận → không thay đổi tail, frame sẽ gửi lại lần sau
        return 2;  // Trạng thái gửi chưa thành công
    }
}
 8000738:	bd70      	pop	{r4, r5, r6, pc}
        return 2;  // Trạng thái gửi chưa thành công
 800073a:	2002      	movs	r0, #2
}
 800073c:	bd70      	pop	{r4, r5, r6, pc}
        return 0;  // FIFO rỗng
 800073e:	2000      	movs	r0, #0
}
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	bf00      	nop
 8000744:	20008b64 	.word	0x20008b64

08000748 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000748:	b510      	push	{r4, lr}
 800074a:	b082      	sub	sp, #8

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800074c:	2400      	movs	r4, #0
 800074e:	4b0f      	ldr	r3, [pc, #60]	@ (800078c <MX_DMA_Init+0x44>)
 8000750:	9401      	str	r4, [sp, #4]
 8000752:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000754:	f441 1100 	orr.w	r1, r1, #2097152	@ 0x200000
 8000758:	6319      	str	r1, [r3, #48]	@ 0x30
 800075a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 0);
 8000760:	4622      	mov	r2, r4
 8000762:	2101      	movs	r1, #1
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000764:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 0);
 8000766:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000768:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 0);
 800076a:	f001 fa6f 	bl	8001c4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800076e:	200b      	movs	r0, #11
 8000770:	f001 faa8 	bl	8001cc4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 1, 0);
 8000774:	4622      	mov	r2, r4
 8000776:	2101      	movs	r1, #1
 8000778:	202f      	movs	r0, #47	@ 0x2f
 800077a:	f001 fa67 	bl	8001c4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800077e:	202f      	movs	r0, #47	@ 0x2f

}
 8000780:	b002      	add	sp, #8
 8000782:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000786:	f001 ba9d 	b.w	8001cc4 <HAL_NVIC_EnableIRQ>
 800078a:	bf00      	nop
 800078c:	40023800 	.word	0x40023800

08000790 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000790:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000792:	2200      	movs	r2, #0
{
 8000794:	b08c      	sub	sp, #48	@ 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000796:	e9cd 2206 	strd	r2, r2, [sp, #24]
 800079a:	e9cd 2208 	strd	r2, r2, [sp, #32]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079e:	4b23      	ldr	r3, [pc, #140]	@ (800082c <MX_GPIO_Init+0x9c>)
 80007a0:	9201      	str	r2, [sp, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a2:	920a      	str	r2, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80007a6:	4c22      	ldr	r4, [pc, #136]	@ (8000830 <MX_GPIO_Init+0xa0>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a8:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 80007ac:	6319      	str	r1, [r3, #48]	@ 0x30
 80007ae:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80007b0:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 80007b4:	9101      	str	r1, [sp, #4]
 80007b6:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b8:	9202      	str	r2, [sp, #8]
 80007ba:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80007bc:	f041 0101 	orr.w	r1, r1, #1
 80007c0:	6319      	str	r1, [r3, #48]	@ 0x30
 80007c2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80007c4:	f001 0101 	and.w	r1, r1, #1
 80007c8:	9102      	str	r1, [sp, #8]
 80007ca:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007cc:	9203      	str	r2, [sp, #12]
 80007ce:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80007d0:	f041 0104 	orr.w	r1, r1, #4
 80007d4:	6319      	str	r1, [r3, #48]	@ 0x30
 80007d6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80007d8:	f001 0104 	and.w	r1, r1, #4
 80007dc:	9103      	str	r1, [sp, #12]
 80007de:	9903      	ldr	r1, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007e0:	9204      	str	r2, [sp, #16]
 80007e2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80007e4:	f041 0108 	orr.w	r1, r1, #8
 80007e8:	6319      	str	r1, [r3, #48]	@ 0x30
 80007ea:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80007ec:	f001 0108 	and.w	r1, r1, #8
 80007f0:	9104      	str	r1, [sp, #16]
 80007f2:	9904      	ldr	r1, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f4:	9205      	str	r2, [sp, #20]
 80007f6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80007f8:	f041 0102 	orr.w	r1, r1, #2
 80007fc:	6319      	str	r1, [r3, #48]	@ 0x30
 80007fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000800:	f003 0302 	and.w	r3, r3, #2
 8000804:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000806:	4620      	mov	r0, r4
 8000808:	21c0      	movs	r1, #192	@ 0xc0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080a:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800080c:	f001 fe6e 	bl	80024ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000810:	22c0      	movs	r2, #192	@ 0xc0
 8000812:	2301      	movs	r3, #1
 8000814:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000818:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800081a:	2200      	movs	r2, #0
 800081c:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081e:	4620      	mov	r0, r4
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000820:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000824:	f001 fc8c 	bl	8002140 <HAL_GPIO_Init>

}
 8000828:	b00c      	add	sp, #48	@ 0x30
 800082a:	bd10      	pop	{r4, pc}
 800082c:	40023800 	.word	0x40023800
 8000830:	40020000 	.word	0x40020000

08000834 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000834:	b510      	push	{r4, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000836:	480b      	ldr	r0, [pc, #44]	@ (8000864 <MX_I2C1_Init+0x30>)
 8000838:	4c0b      	ldr	r4, [pc, #44]	@ (8000868 <MX_I2C1_Init+0x34>)
  hi2c1.Init.ClockSpeed = 400000;
 800083a:	490c      	ldr	r1, [pc, #48]	@ (800086c <MX_I2C1_Init+0x38>)
 800083c:	2300      	movs	r3, #0
 800083e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000842:	e9c0 4100 	strd	r4, r1, [r0]
 8000846:	e9c0 3302 	strd	r3, r3, [r0, #8]
 800084a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800084e:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8000852:	6203      	str	r3, [r0, #32]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000854:	f001 fe4e 	bl	80024f4 <HAL_I2C_Init>
 8000858:	b900      	cbnz	r0, 800085c <MX_I2C1_Init+0x28>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800085a:	bd10      	pop	{r4, pc}
 800085c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8000860:	f000 b8ba 	b.w	80009d8 <Error_Handler>
 8000864:	20004390 	.word	0x20004390
 8000868:	40005400 	.word	0x40005400
 800086c:	00061a80 	.word	0x00061a80

08000870 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000870:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(i2cHandle->Instance==I2C1)
 8000872:	4b18      	ldr	r3, [pc, #96]	@ (80008d4 <HAL_I2C_MspInit+0x64>)
 8000874:	6802      	ldr	r2, [r0, #0]
{
 8000876:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000878:	2400      	movs	r4, #0
  if(i2cHandle->Instance==I2C1)
 800087a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000880:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8000884:	9406      	str	r4, [sp, #24]
  if(i2cHandle->Instance==I2C1)
 8000886:	d001      	beq.n	800088c <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000888:	b009      	add	sp, #36	@ 0x24
 800088a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800088c:	4d12      	ldr	r5, [pc, #72]	@ (80008d8 <HAL_I2C_MspInit+0x68>)
 800088e:	9400      	str	r4, [sp, #0]
 8000890:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8000892:	f043 0302 	orr.w	r3, r3, #2
 8000896:	632b      	str	r3, [r5, #48]	@ 0x30
 8000898:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800089a:	f003 0302 	and.w	r3, r3, #2
 800089e:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008a0:	22c0      	movs	r2, #192	@ 0xc0
 80008a2:	2312      	movs	r3, #18
 80008a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a8:	9800      	ldr	r0, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008aa:	480c      	ldr	r0, [pc, #48]	@ (80008dc <HAL_I2C_MspInit+0x6c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ac:	2203      	movs	r2, #3
 80008ae:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b0:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b6:	f001 fc43 	bl	8002140 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008ba:	9401      	str	r4, [sp, #4]
 80008bc:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 80008be:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80008c2:	642b      	str	r3, [r5, #64]	@ 0x40
 80008c4:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 80008c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008ca:	9301      	str	r3, [sp, #4]
 80008cc:	9b01      	ldr	r3, [sp, #4]
}
 80008ce:	b009      	add	sp, #36	@ 0x24
 80008d0:	bd30      	pop	{r4, r5, pc}
 80008d2:	bf00      	nop
 80008d4:	40005400 	.word	0x40005400
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40020400 	.word	0x40020400

080008e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e0:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008e2:	2300      	movs	r3, #0
{
 80008e4:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008e6:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
 80008ea:	e9cd 330c 	strd	r3, r3, [sp, #48]	@ 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008ee:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80008f2:	e9cd 3305 	strd	r3, r3, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f6:	4921      	ldr	r1, [pc, #132]	@ (800097c <SystemClock_Config+0x9c>)
 80008f8:	9301      	str	r3, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008fa:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fc:	6c08      	ldr	r0, [r1, #64]	@ 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008fe:	4a20      	ldr	r2, [pc, #128]	@ (8000980 <SystemClock_Config+0xa0>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000900:	f040 5080 	orr.w	r0, r0, #268435456	@ 0x10000000
 8000904:	6408      	str	r0, [r1, #64]	@ 0x40
 8000906:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000908:	f001 5180 	and.w	r1, r1, #268435456	@ 0x10000000
 800090c:	9101      	str	r1, [sp, #4]
 800090e:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000910:	9302      	str	r3, [sp, #8]
 8000912:	6813      	ldr	r3, [r2, #0]
 8000914:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000918:	6013      	str	r3, [r2, #0]
 800091a:	6813      	ldr	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800091c:	2001      	movs	r0, #1
 800091e:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000922:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000926:	e9cd 0108 	strd	r0, r1, [sp, #32]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800092a:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800092c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000930:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000932:	e9cd 410e 	strd	r4, r1, [sp, #56]	@ 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000936:	9802      	ldr	r0, [sp, #8]
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000938:	2107      	movs	r1, #7
 800093a:	2002      	movs	r0, #2
 800093c:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000940:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000942:	23a8      	movs	r3, #168	@ 0xa8
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000944:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000946:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000948:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800094a:	f002 fc43 	bl	80031d4 <HAL_RCC_OscConfig>
 800094e:	b108      	cbz	r0, 8000954 <SystemClock_Config+0x74>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000950:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000952:	e7fe      	b.n	8000952 <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000954:	220f      	movs	r2, #15
 8000956:	4603      	mov	r3, r0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000958:	e9cd 2403 	strd	r2, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800095c:	f44f 55a0 	mov.w	r5, #5120	@ 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000960:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000964:	a803      	add	r0, sp, #12
 8000966:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000968:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800096c:	9207      	str	r2, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800096e:	f002 fe47 	bl	8003600 <HAL_RCC_ClockConfig>
 8000972:	b108      	cbz	r0, 8000978 <SystemClock_Config+0x98>
 8000974:	b672      	cpsid	i
  while (1)
 8000976:	e7fe      	b.n	8000976 <SystemClock_Config+0x96>
}
 8000978:	b015      	add	sp, #84	@ 0x54
 800097a:	bd30      	pop	{r4, r5, pc}
 800097c:	40023800 	.word	0x40023800
 8000980:	40007000 	.word	0x40007000

08000984 <main>:
{
 8000984:	b508      	push	{r3, lr}
  HAL_Init();
 8000986:	f000 fd49 	bl	800141c <HAL_Init>
  SystemClock_Config();
 800098a:	f7ff ffa9 	bl	80008e0 <SystemClock_Config>
  MX_GPIO_Init();
 800098e:	f7ff feff 	bl	8000790 <MX_GPIO_Init>
  MX_DMA_Init();
 8000992:	f7ff fed9 	bl	8000748 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000996:	f000 fae5 	bl	8000f64 <MX_USB_OTG_FS_PCD_Init>
  MX_UART5_Init();
 800099a:	f000 fa07 	bl	8000dac <MX_UART5_Init>
  MX_I2C1_Init();
 800099e:	f7ff ff49 	bl	8000834 <MX_I2C1_Init>
  MX_TIM1_Init();
 80009a2:	f000 f8ab 	bl	8000afc <MX_TIM1_Init>
  MX_TIM2_Init();
 80009a6:	f000 f8e5 	bl	8000b74 <MX_TIM2_Init>
  MX_TIM4_Init();
 80009aa:	f000 f91d 	bl	8000be8 <MX_TIM4_Init>
  MX_TIM5_Init();
 80009ae:	f000 f955 	bl	8000c5c <MX_TIM5_Init>
  MX_USB_DEVICE_Init();
 80009b2:	f004 facf 	bl	8004f54 <MX_USB_DEVICE_Init>
  HAL_TIM_Base_Start_IT(&htim4);
 80009b6:	4805      	ldr	r0, [pc, #20]	@ (80009cc <main+0x48>)
	  Can2Usb_Tranfer(&g_HIDFrameFIFO_Tranfer, g_au8UsbFrameTranfer);
 80009b8:	4d05      	ldr	r5, [pc, #20]	@ (80009d0 <main+0x4c>)
 80009ba:	4c06      	ldr	r4, [pc, #24]	@ (80009d4 <main+0x50>)
  HAL_TIM_Base_Start_IT(&htim4);
 80009bc:	f002 ff2e 	bl	800381c <HAL_TIM_Base_Start_IT>
	  Can2Usb_Tranfer(&g_HIDFrameFIFO_Tranfer, g_au8UsbFrameTranfer);
 80009c0:	4629      	mov	r1, r5
 80009c2:	4620      	mov	r0, r4
 80009c4:	f7ff fe86 	bl	80006d4 <Can2Usb_Tranfer>
  while (1)
 80009c8:	e7fa      	b.n	80009c0 <main+0x3c>
 80009ca:	bf00      	nop
 80009cc:	20004450 	.word	0x20004450
 80009d0:	200043e4 	.word	0x200043e4
 80009d4:	2000034c 	.word	0x2000034c

080009d8 <Error_Handler>:
 80009d8:	b672      	cpsid	i
  while (1)
 80009da:	e7fe      	b.n	80009da <Error_Handler+0x2>

080009dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009dc:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009de:	4b0c      	ldr	r3, [pc, #48]	@ (8000a10 <HAL_MspInit+0x34>)
 80009e0:	2100      	movs	r1, #0
 80009e2:	9100      	str	r1, [sp, #0]
 80009e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80009e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80009ea:	645a      	str	r2, [r3, #68]	@ 0x44
 80009ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80009ee:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80009f2:	9200      	str	r2, [sp, #0]
 80009f4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f6:	9101      	str	r1, [sp, #4]
 80009f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009fa:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80009fe:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a06:	9301      	str	r3, [sp, #4]
 8000a08:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a0a:	b002      	add	sp, #8
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	40023800 	.word	0x40023800

08000a14 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a14:	e7fe      	b.n	8000a14 <NMI_Handler>
 8000a16:	bf00      	nop

08000a18 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <HardFault_Handler>
 8000a1a:	bf00      	nop

08000a1c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <MemManage_Handler>
 8000a1e:	bf00      	nop

08000a20 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <BusFault_Handler>
 8000a22:	bf00      	nop

08000a24 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <UsageFault_Handler>
 8000a26:	bf00      	nop

08000a28 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop

08000a2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop

08000a34 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a34:	f000 bd0c 	b.w	8001450 <HAL_IncTick>

08000a38 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8000a38:	4801      	ldr	r0, [pc, #4]	@ (8000a40 <DMA1_Stream0_IRQHandler+0x8>)
 8000a3a:	f001 baab 	b.w	8001f94 <HAL_DMA_IRQHandler>
 8000a3e:	bf00      	nop
 8000a40:	20004528 	.word	0x20004528

08000a44 <CAN1_RX0_IRQHandler>:
void CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000a44:	4801      	ldr	r0, [pc, #4]	@ (8000a4c <CAN1_RX0_IRQHandler+0x8>)
 8000a46:	f000 bfab 	b.w	80019a0 <HAL_CAN_IRQHandler>
 8000a4a:	bf00      	nop
 8000a4c:	20000324 	.word	0x20000324

08000a50 <CAN1_RX1_IRQHandler>:
}

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
 8000a50:	4801      	ldr	r0, [pc, #4]	@ (8000a58 <CAN1_RX1_IRQHandler+0x8>)
 8000a52:	f000 bfa5 	b.w	80019a0 <HAL_CAN_IRQHandler>
 8000a56:	bf00      	nop
 8000a58:	20000324 	.word	0x20000324

08000a5c <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a5c:	4801      	ldr	r0, [pc, #4]	@ (8000a64 <TIM1_UP_TIM10_IRQHandler+0x8>)
 8000a5e:	f002 bfe1 	b.w	8003a24 <HAL_TIM_IRQHandler>
 8000a62:	bf00      	nop
 8000a64:	200044e0 	.word	0x200044e0

08000a68 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a68:	4801      	ldr	r0, [pc, #4]	@ (8000a70 <TIM2_IRQHandler+0x8>)
 8000a6a:	f002 bfdb 	b.w	8003a24 <HAL_TIM_IRQHandler>
 8000a6e:	bf00      	nop
 8000a70:	20004498 	.word	0x20004498

08000a74 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000a74:	4801      	ldr	r0, [pc, #4]	@ (8000a7c <TIM4_IRQHandler+0x8>)
 8000a76:	f002 bfd5 	b.w	8003a24 <HAL_TIM_IRQHandler>
 8000a7a:	bf00      	nop
 8000a7c:	20004450 	.word	0x20004450

08000a80 <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8000a80:	4801      	ldr	r0, [pc, #4]	@ (8000a88 <DMA1_Stream7_IRQHandler+0x8>)
 8000a82:	f001 ba87 	b.w	8001f94 <HAL_DMA_IRQHandler>
 8000a86:	bf00      	nop
 8000a88:	20004588 	.word	0x20004588

08000a8c <UART5_IRQHandler>:
void UART5_IRQHandler(void)
{
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000a8c:	4801      	ldr	r0, [pc, #4]	@ (8000a94 <UART5_IRQHandler+0x8>)
 8000a8e:	f003 bb2f 	b.w	80040f0 <HAL_UART_IRQHandler>
 8000a92:	bf00      	nop
 8000a94:	200045e8 	.word	0x200045e8

08000a98 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a98:	4801      	ldr	r0, [pc, #4]	@ (8000aa0 <OTG_FS_IRQHandler+0x8>)
 8000a9a:	f001 be81 	b.w	80027a0 <HAL_PCD_IRQHandler>
 8000a9e:	bf00      	nop
 8000aa0:	20004630 	.word	0x20004630

08000aa4 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000aa4:	490c      	ldr	r1, [pc, #48]	@ (8000ad8 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aa6:	4a0d      	ldr	r2, [pc, #52]	@ (8000adc <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8000aa8:	680b      	ldr	r3, [r1, #0]
{
 8000aaa:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aac:	4c0c      	ldr	r4, [pc, #48]	@ (8000ae0 <_sbrk+0x3c>)
 8000aae:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8000ab0:	b12b      	cbz	r3, 8000abe <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ab2:	4418      	add	r0, r3
 8000ab4:	4290      	cmp	r0, r2
 8000ab6:	d807      	bhi.n	8000ac8 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000ab8:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000abe:	4b09      	ldr	r3, [pc, #36]	@ (8000ae4 <_sbrk+0x40>)
 8000ac0:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8000ac2:	4418      	add	r0, r3
 8000ac4:	4290      	cmp	r0, r2
 8000ac6:	d9f7      	bls.n	8000ab8 <_sbrk+0x14>
    errno = ENOMEM;
 8000ac8:	f006 f81a 	bl	8006b00 <__errno>
 8000acc:	230c      	movs	r3, #12
 8000ace:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000ad0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	bd10      	pop	{r4, pc}
 8000ad8:	20004404 	.word	0x20004404
 8000adc:	20020000 	.word	0x20020000
 8000ae0:	00000400 	.word	0x00000400
 8000ae4:	2000a5f0 	.word	0x2000a5f0

08000ae8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ae8:	4a03      	ldr	r2, [pc, #12]	@ (8000af8 <SystemInit+0x10>)
 8000aea:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8000aee:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000af2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af6:	4770      	bx	lr
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000afc:	b500      	push	{lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000afe:	481b      	ldr	r0, [pc, #108]	@ (8000b6c <MX_TIM1_Init+0x70>)
 8000b00:	4a1b      	ldr	r2, [pc, #108]	@ (8000b70 <MX_TIM1_Init+0x74>)
{
 8000b02:	b087      	sub	sp, #28
  htim1.Instance = TIM1;
 8000b04:	6002      	str	r2, [r0, #0]
  htim1.Init.Prescaler = 167;
 8000b06:	22a7      	movs	r2, #167	@ 0xa7
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b08:	2300      	movs	r3, #0
  htim1.Init.Prescaler = 167;
 8000b0a:	6042      	str	r2, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 999;
 8000b0c:	f240 32e7 	movw	r2, #999	@ 0x3e7
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b10:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8000b14:	e9cd 3304 	strd	r3, r3, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b18:	e9cd 3300 	strd	r3, r3, [sp]
  htim1.Init.Period = 999;
 8000b1c:	e9c0 3202 	strd	r3, r2, [r0, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
 8000b20:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000b24:	6183      	str	r3, [r0, #24]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b26:	f003 f889 	bl	8003c3c <HAL_TIM_Base_Init>
 8000b2a:	b998      	cbnz	r0, 8000b54 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b30:	480e      	ldr	r0, [pc, #56]	@ (8000b6c <MX_TIM1_Init+0x70>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b32:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b34:	a902      	add	r1, sp, #8
 8000b36:	f002 fec3 	bl	80038c0 <HAL_TIM_ConfigClockSource>
 8000b3a:	b998      	cbnz	r0, 8000b64 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b40:	480a      	ldr	r0, [pc, #40]	@ (8000b6c <MX_TIM1_Init+0x70>)
 8000b42:	4669      	mov	r1, sp
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b44:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b48:	f003 f8a6 	bl	8003c98 <HAL_TIMEx_MasterConfigSynchronization>
 8000b4c:	b928      	cbnz	r0, 8000b5a <MX_TIM1_Init+0x5e>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b4e:	b007      	add	sp, #28
 8000b50:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000b54:	f7ff ff40 	bl	80009d8 <Error_Handler>
 8000b58:	e7e8      	b.n	8000b2c <MX_TIM1_Init+0x30>
    Error_Handler();
 8000b5a:	f7ff ff3d 	bl	80009d8 <Error_Handler>
}
 8000b5e:	b007      	add	sp, #28
 8000b60:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000b64:	f7ff ff38 	bl	80009d8 <Error_Handler>
 8000b68:	e7e8      	b.n	8000b3c <MX_TIM1_Init+0x40>
 8000b6a:	bf00      	nop
 8000b6c:	200044e0 	.word	0x200044e0
 8000b70:	40010000 	.word	0x40010000

08000b74 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b74:	b500      	push	{lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b76:	481b      	ldr	r0, [pc, #108]	@ (8000be4 <MX_TIM2_Init+0x70>)
 8000b78:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
{
 8000b7c:	b087      	sub	sp, #28
  htim2.Instance = TIM2;
 8000b7e:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 83;
 8000b80:	2253      	movs	r2, #83	@ 0x53
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b82:	2300      	movs	r3, #0
  htim2.Init.Prescaler = 83;
 8000b84:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 3000;
 8000b86:	f640 32b8 	movw	r2, #3000	@ 0xbb8
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b8a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8000b8e:	e9cd 3304 	strd	r3, r3, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b92:	e9cd 3300 	strd	r3, r3, [sp]
  htim2.Init.Period = 3000;
 8000b96:	e9c0 3202 	strd	r3, r2, [r0, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b9a:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b9c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b9e:	f003 f84d 	bl	8003c3c <HAL_TIM_Base_Init>
 8000ba2:	b998      	cbnz	r0, 8000bcc <MX_TIM2_Init+0x58>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ba4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ba8:	480e      	ldr	r0, [pc, #56]	@ (8000be4 <MX_TIM2_Init+0x70>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000baa:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bac:	a902      	add	r1, sp, #8
 8000bae:	f002 fe87 	bl	80038c0 <HAL_TIM_ConfigClockSource>
 8000bb2:	b998      	cbnz	r0, 8000bdc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bb8:	480a      	ldr	r0, [pc, #40]	@ (8000be4 <MX_TIM2_Init+0x70>)
 8000bba:	4669      	mov	r1, sp
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bbc:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bc0:	f003 f86a 	bl	8003c98 <HAL_TIMEx_MasterConfigSynchronization>
 8000bc4:	b928      	cbnz	r0, 8000bd2 <MX_TIM2_Init+0x5e>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bc6:	b007      	add	sp, #28
 8000bc8:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000bcc:	f7ff ff04 	bl	80009d8 <Error_Handler>
 8000bd0:	e7e8      	b.n	8000ba4 <MX_TIM2_Init+0x30>
    Error_Handler();
 8000bd2:	f7ff ff01 	bl	80009d8 <Error_Handler>
}
 8000bd6:	b007      	add	sp, #28
 8000bd8:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000bdc:	f7ff fefc 	bl	80009d8 <Error_Handler>
 8000be0:	e7e8      	b.n	8000bb4 <MX_TIM2_Init+0x40>
 8000be2:	bf00      	nop
 8000be4:	20004498 	.word	0x20004498

08000be8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000be8:	b500      	push	{lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000bea:	481a      	ldr	r0, [pc, #104]	@ (8000c54 <MX_TIM4_Init+0x6c>)
 8000bec:	4a1a      	ldr	r2, [pc, #104]	@ (8000c58 <MX_TIM4_Init+0x70>)
{
 8000bee:	b087      	sub	sp, #28
  htim4.Instance = TIM4;
 8000bf0:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 83;
 8000bf2:	2253      	movs	r2, #83	@ 0x53
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bf4:	2300      	movs	r3, #0
  htim4.Init.Prescaler = 83;
 8000bf6:	6042      	str	r2, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 980;
 8000bf8:	f44f 7275 	mov.w	r2, #980	@ 0x3d4
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bfc:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8000c00:	e9cd 3304 	strd	r3, r3, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c04:	e9cd 3300 	strd	r3, r3, [sp]
  htim4.Init.Period = 980;
 8000c08:	e9c0 3202 	strd	r3, r2, [r0, #8]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c0c:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c0e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000c10:	f003 f814 	bl	8003c3c <HAL_TIM_Base_Init>
 8000c14:	b998      	cbnz	r0, 8000c3e <MX_TIM4_Init+0x56>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000c1a:	480e      	ldr	r0, [pc, #56]	@ (8000c54 <MX_TIM4_Init+0x6c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c1c:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000c1e:	a902      	add	r1, sp, #8
 8000c20:	f002 fe4e 	bl	80038c0 <HAL_TIM_ConfigClockSource>
 8000c24:	b998      	cbnz	r0, 8000c4e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c26:	2200      	movs	r2, #0
 8000c28:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c2a:	480a      	ldr	r0, [pc, #40]	@ (8000c54 <MX_TIM4_Init+0x6c>)
 8000c2c:	4669      	mov	r1, sp
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c2e:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c32:	f003 f831 	bl	8003c98 <HAL_TIMEx_MasterConfigSynchronization>
 8000c36:	b928      	cbnz	r0, 8000c44 <MX_TIM4_Init+0x5c>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000c38:	b007      	add	sp, #28
 8000c3a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000c3e:	f7ff fecb 	bl	80009d8 <Error_Handler>
 8000c42:	e7e8      	b.n	8000c16 <MX_TIM4_Init+0x2e>
    Error_Handler();
 8000c44:	f7ff fec8 	bl	80009d8 <Error_Handler>
}
 8000c48:	b007      	add	sp, #28
 8000c4a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000c4e:	f7ff fec3 	bl	80009d8 <Error_Handler>
 8000c52:	e7e8      	b.n	8000c26 <MX_TIM4_Init+0x3e>
 8000c54:	20004450 	.word	0x20004450
 8000c58:	40000800 	.word	0x40000800

08000c5c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8000c5c:	b500      	push	{lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000c5e:	481b      	ldr	r0, [pc, #108]	@ (8000ccc <MX_TIM5_Init+0x70>)
 8000c60:	4a1b      	ldr	r2, [pc, #108]	@ (8000cd0 <MX_TIM5_Init+0x74>)
{
 8000c62:	b087      	sub	sp, #28
  htim5.Instance = TIM5;
 8000c64:	6002      	str	r2, [r0, #0]
  htim5.Init.Prescaler = 8399;
 8000c66:	f242 02cf 	movw	r2, #8399	@ 0x20cf
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c6a:	2300      	movs	r3, #0
  htim5.Init.Prescaler = 8399;
 8000c6c:	6042      	str	r2, [r0, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim5.Init.Period = 0xffffffff;
 8000c6e:	f04f 32ff 	mov.w	r2, #4294967295
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c72:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8000c76:	e9cd 3304 	strd	r3, r3, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c7a:	e9cd 3300 	strd	r3, r3, [sp]
  htim5.Init.Period = 0xffffffff;
 8000c7e:	e9c0 3202 	strd	r3, r2, [r0, #8]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c82:	6103      	str	r3, [r0, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c84:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000c86:	f002 ffd9 	bl	8003c3c <HAL_TIM_Base_Init>
 8000c8a:	b998      	cbnz	r0, 8000cb4 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000c90:	480e      	ldr	r0, [pc, #56]	@ (8000ccc <MX_TIM5_Init+0x70>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c92:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000c94:	a902      	add	r1, sp, #8
 8000c96:	f002 fe13 	bl	80038c0 <HAL_TIM_ConfigClockSource>
 8000c9a:	b998      	cbnz	r0, 8000cc4 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000ca0:	480a      	ldr	r0, [pc, #40]	@ (8000ccc <MX_TIM5_Init+0x70>)
 8000ca2:	4669      	mov	r1, sp
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ca4:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000ca8:	f002 fff6 	bl	8003c98 <HAL_TIMEx_MasterConfigSynchronization>
 8000cac:	b928      	cbnz	r0, 8000cba <MX_TIM5_Init+0x5e>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000cae:	b007      	add	sp, #28
 8000cb0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000cb4:	f7ff fe90 	bl	80009d8 <Error_Handler>
 8000cb8:	e7e8      	b.n	8000c8c <MX_TIM5_Init+0x30>
    Error_Handler();
 8000cba:	f7ff fe8d 	bl	80009d8 <Error_Handler>
}
 8000cbe:	b007      	add	sp, #28
 8000cc0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000cc4:	f7ff fe88 	bl	80009d8 <Error_Handler>
 8000cc8:	e7e8      	b.n	8000c9c <MX_TIM5_Init+0x40>
 8000cca:	bf00      	nop
 8000ccc:	20004408 	.word	0x20004408
 8000cd0:	40000c00 	.word	0x40000c00

08000cd4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000cd4:	b500      	push	{lr}

  if(tim_baseHandle->Instance==TIM1)
 8000cd6:	4a31      	ldr	r2, [pc, #196]	@ (8000d9c <HAL_TIM_Base_MspInit+0xc8>)
 8000cd8:	6803      	ldr	r3, [r0, #0]
 8000cda:	4293      	cmp	r3, r2
{
 8000cdc:	b085      	sub	sp, #20
  if(tim_baseHandle->Instance==TIM1)
 8000cde:	d01a      	beq.n	8000d16 <HAL_TIM_Base_MspInit+0x42>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM2)
 8000ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ce4:	d02d      	beq.n	8000d42 <HAL_TIM_Base_MspInit+0x6e>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM4)
 8000ce6:	4a2e      	ldr	r2, [pc, #184]	@ (8000da0 <HAL_TIM_Base_MspInit+0xcc>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d040      	beq.n	8000d6e <HAL_TIM_Base_MspInit+0x9a>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM5)
 8000cec:	4a2d      	ldr	r2, [pc, #180]	@ (8000da4 <HAL_TIM_Base_MspInit+0xd0>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d002      	beq.n	8000cf8 <HAL_TIM_Base_MspInit+0x24>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8000cf2:	b005      	add	sp, #20
 8000cf4:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000cf8:	4b2b      	ldr	r3, [pc, #172]	@ (8000da8 <HAL_TIM_Base_MspInit+0xd4>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	9203      	str	r2, [sp, #12]
 8000cfe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d00:	f042 0208 	orr.w	r2, r2, #8
 8000d04:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d08:	f003 0308 	and.w	r3, r3, #8
 8000d0c:	9303      	str	r3, [sp, #12]
 8000d0e:	9b03      	ldr	r3, [sp, #12]
}
 8000d10:	b005      	add	sp, #20
 8000d12:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d16:	4b24      	ldr	r3, [pc, #144]	@ (8000da8 <HAL_TIM_Base_MspInit+0xd4>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	9200      	str	r2, [sp, #0]
 8000d1c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8000d1e:	f041 0101 	orr.w	r1, r1, #1
 8000d22:	6459      	str	r1, [r3, #68]	@ 0x44
 8000d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 2);
 8000d26:	2101      	movs	r1, #1
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d28:	400b      	ands	r3, r1
 8000d2a:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 2);
 8000d2c:	2202      	movs	r2, #2
 8000d2e:	2019      	movs	r0, #25
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d30:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 2);
 8000d32:	f000 ff8b 	bl	8001c4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000d36:	2019      	movs	r0, #25
}
 8000d38:	b005      	add	sp, #20
 8000d3a:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000d3e:	f000 bfc1 	b.w	8001cc4 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d42:	f503 330e 	add.w	r3, r3, #145408	@ 0x23800
 8000d46:	2200      	movs	r2, #0
 8000d48:	9201      	str	r2, [sp, #4]
 8000d4a:	6c19      	ldr	r1, [r3, #64]	@ 0x40
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 1);
 8000d4c:	2201      	movs	r2, #1
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d4e:	4311      	orrs	r1, r2
 8000d50:	6419      	str	r1, [r3, #64]	@ 0x40
 8000d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d54:	4013      	ands	r3, r2
 8000d56:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 1);
 8000d58:	4611      	mov	r1, r2
 8000d5a:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d5c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 1);
 8000d5e:	f000 ff75 	bl	8001c4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d62:	201c      	movs	r0, #28
}
 8000d64:	b005      	add	sp, #20
 8000d66:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000d6a:	f000 bfab 	b.w	8001cc4 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d6e:	2200      	movs	r2, #0
 8000d70:	4b0d      	ldr	r3, [pc, #52]	@ (8000da8 <HAL_TIM_Base_MspInit+0xd4>)
 8000d72:	9202      	str	r2, [sp, #8]
 8000d74:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8000d76:	f041 0104 	orr.w	r1, r1, #4
 8000d7a:	6419      	str	r1, [r3, #64]	@ 0x40
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d7e:	f003 0304 	and.w	r3, r3, #4
 8000d82:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000d84:	4611      	mov	r1, r2
 8000d86:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d88:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000d8a:	f000 ff5f 	bl	8001c4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000d8e:	201e      	movs	r0, #30
}
 8000d90:	b005      	add	sp, #20
 8000d92:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000d96:	f000 bf95 	b.w	8001cc4 <HAL_NVIC_EnableIRQ>
 8000d9a:	bf00      	nop
 8000d9c:	40010000 	.word	0x40010000
 8000da0:	40000800 	.word	0x40000800
 8000da4:	40000c00 	.word	0x40000c00
 8000da8:	40023800 	.word	0x40023800

08000dac <MX_UART5_Init>:
DMA_HandleTypeDef hdma_uart5_tx;
DMA_HandleTypeDef hdma_uart5_rx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8000dac:	b510      	push	{r4, lr}
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000dae:	480b      	ldr	r0, [pc, #44]	@ (8000ddc <MX_UART5_Init+0x30>)
 8000db0:	4c0b      	ldr	r4, [pc, #44]	@ (8000de0 <MX_UART5_Init+0x34>)
  huart5.Init.BaudRate = 115200;
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000db2:	2300      	movs	r3, #0
  huart5.Init.BaudRate = 115200;
 8000db4:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
  huart5.Init.StopBits = UART_STOPBITS_1;
  huart5.Init.Parity = UART_PARITY_NONE;
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000db8:	220c      	movs	r2, #12
  huart5.Init.BaudRate = 115200;
 8000dba:	e9c0 4100 	strd	r4, r1, [r0]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000dbe:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000dc2:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dc6:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000dca:	f003 f83f 	bl	8003e4c <HAL_UART_Init>
 8000dce:	b900      	cbnz	r0, 8000dd2 <MX_UART5_Init+0x26>
  }
  /* USER CODE BEGIN UART5_Init 2 */
 // HAL_UART_Receive_IT(&huart5, &uart5_rx_byte, UART5_RX_BUF_LEN);
  /* USER CODE END UART5_Init 2 */

}
 8000dd0:	bd10      	pop	{r4, pc}
 8000dd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8000dd6:	f7ff bdff 	b.w	80009d8 <Error_Handler>
 8000dda:	bf00      	nop
 8000ddc:	200045e8 	.word	0x200045e8
 8000de0:	40005000 	.word	0x40005000

08000de4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000de4:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==UART5)
 8000de6:	4b44      	ldr	r3, [pc, #272]	@ (8000ef8 <HAL_UART_MspInit+0x114>)
 8000de8:	6802      	ldr	r2, [r0, #0]
{
 8000dea:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	2400      	movs	r4, #0
  if(uartHandle->Instance==UART5)
 8000dee:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8000df4:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8000df8:	9408      	str	r4, [sp, #32]
  if(uartHandle->Instance==UART5)
 8000dfa:	d001      	beq.n	8000e00 <HAL_UART_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8000dfc:	b00b      	add	sp, #44	@ 0x2c
 8000dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_UART5_CLK_ENABLE();
 8000e00:	f503 33f4 	add.w	r3, r3, #124928	@ 0x1e800
 8000e04:	9401      	str	r4, [sp, #4]
 8000e06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e08:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8000e0c:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e10:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8000e14:	9201      	str	r2, [sp, #4]
 8000e16:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e18:	9402      	str	r4, [sp, #8]
 8000e1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000e1c:	f042 0204 	orr.w	r2, r2, #4
 8000e20:	631a      	str	r2, [r3, #48]	@ 0x30
 8000e22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000e24:	f002 0204 	and.w	r2, r2, #4
 8000e28:	9202      	str	r2, [sp, #8]
 8000e2a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e2c:	9403      	str	r4, [sp, #12]
 8000e2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000e30:	f042 0208 	orr.w	r2, r2, #8
 8000e34:	631a      	str	r2, [r3, #48]	@ 0x30
 8000e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e38:	f003 0308 	and.w	r3, r3, #8
 8000e3c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e3e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e42:	2608      	movs	r6, #8
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e44:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e46:	2703      	movs	r7, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e48:	a904      	add	r1, sp, #16
 8000e4a:	4605      	mov	r5, r0
 8000e4c:	482b      	ldr	r0, [pc, #172]	@ (8000efc <HAL_UART_MspInit+0x118>)
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e4e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e52:	e9cd 7607 	strd	r7, r6, [sp, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e56:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e58:	f001 f972 	bl	8002140 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5c:	2204      	movs	r2, #4
 8000e5e:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e60:	4827      	ldr	r0, [pc, #156]	@ (8000f00 <HAL_UART_MspInit+0x11c>)
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000e62:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e64:	a904      	add	r1, sp, #16
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8000e66:	4e27      	ldr	r6, [pc, #156]	@ (8000f04 <HAL_UART_MspInit+0x120>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e68:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e70:	f001 f966 	bl	8002140 <HAL_GPIO_Init>
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8000e74:	4a24      	ldr	r2, [pc, #144]	@ (8000f08 <HAL_UART_MspInit+0x124>)
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e76:	6274      	str	r4, [r6, #36]	@ 0x24
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8000e78:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000e7c:	e9c6 2300 	strd	r2, r3, [r6]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e84:	2240      	movs	r2, #64	@ 0x40
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e86:	6133      	str	r3, [r6, #16]
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8000e88:	4630      	mov	r0, r6
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000e8a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e8e:	e9c6 2402 	strd	r2, r4, [r6, #8]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e92:	e9c6 4405 	strd	r4, r4, [r6, #20]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000e96:	e9c6 4307 	strd	r4, r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8000e9a:	f000 ff4d 	bl	8001d38 <HAL_DMA_Init>
 8000e9e:	bb20      	cbnz	r0, 8000eea <HAL_UART_MspInit+0x106>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8000ea0:	4c1a      	ldr	r4, [pc, #104]	@ (8000f0c <HAL_UART_MspInit+0x128>)
 8000ea2:	4a1b      	ldr	r2, [pc, #108]	@ (8000f10 <HAL_UART_MspInit+0x12c>)
 8000ea4:	6022      	str	r2, [r4, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8000ea6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000eaa:	2300      	movs	r3, #0
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 8000eac:	63ae      	str	r6, [r5, #56]	@ 0x38
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8000eae:	6062      	str	r2, [r4, #4]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000eb0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000eb4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8000eb8:	4620      	mov	r0, r4
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eba:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ebe:	e9c4 1304 	strd	r1, r3, [r4, #16]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8000ec2:	e9c4 3306 	strd	r3, r3, [r4, #24]
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 8000ec6:	63b5      	str	r5, [r6, #56]	@ 0x38
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000ec8:	6222      	str	r2, [r4, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000eca:	6263      	str	r3, [r4, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8000ecc:	f000 ff34 	bl	8001d38 <HAL_DMA_Init>
 8000ed0:	b970      	cbnz	r0, 8000ef0 <HAL_UART_MspInit+0x10c>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 1);
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	2100      	movs	r1, #0
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8000ed6:	63ec      	str	r4, [r5, #60]	@ 0x3c
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 1);
 8000ed8:	2035      	movs	r0, #53	@ 0x35
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8000eda:	63a5      	str	r5, [r4, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 1);
 8000edc:	f000 feb6 	bl	8001c4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000ee0:	2035      	movs	r0, #53	@ 0x35
 8000ee2:	f000 feef 	bl	8001cc4 <HAL_NVIC_EnableIRQ>
}
 8000ee6:	b00b      	add	sp, #44	@ 0x2c
 8000ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8000eea:	f7ff fd75 	bl	80009d8 <Error_Handler>
 8000eee:	e7d7      	b.n	8000ea0 <HAL_UART_MspInit+0xbc>
      Error_Handler();
 8000ef0:	f7ff fd72 	bl	80009d8 <Error_Handler>
 8000ef4:	e7ed      	b.n	8000ed2 <HAL_UART_MspInit+0xee>
 8000ef6:	bf00      	nop
 8000ef8:	40005000 	.word	0x40005000
 8000efc:	40020800 	.word	0x40020800
 8000f00:	40020c00 	.word	0x40020c00
 8000f04:	20004588 	.word	0x20004588
 8000f08:	400260b8 	.word	0x400260b8
 8000f0c:	20004528 	.word	0x20004528
 8000f10:	40026010 	.word	0x40026010

08000f14 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==UART5)
 8000f14:	4b0f      	ldr	r3, [pc, #60]	@ (8000f54 <HAL_UART_MspDeInit+0x40>)
 8000f16:	6802      	ldr	r2, [r0, #0]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d000      	beq.n	8000f1e <HAL_UART_MspDeInit+0xa>
 8000f1c:	4770      	bx	lr
  {
  /* USER CODE BEGIN UART5_MspDeInit 0 */

  /* USER CODE END UART5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART5_CLK_DISABLE();
 8000f1e:	4a0e      	ldr	r2, [pc, #56]	@ (8000f58 <HAL_UART_MspDeInit+0x44>)
 8000f20:	6c13      	ldr	r3, [r2, #64]	@ 0x40
{
 8000f22:	b510      	push	{r4, lr}
    __HAL_RCC_UART5_CLK_DISABLE();
 8000f24:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8000f28:	4604      	mov	r4, r0
 8000f2a:	6413      	str	r3, [r2, #64]	@ 0x40

    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12);
 8000f2c:	480b      	ldr	r0, [pc, #44]	@ (8000f5c <HAL_UART_MspDeInit+0x48>)
 8000f2e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f32:	f001 fa21 	bl	8002378 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_2);
 8000f36:	2104      	movs	r1, #4
 8000f38:	4809      	ldr	r0, [pc, #36]	@ (8000f60 <HAL_UART_MspDeInit+0x4c>)
 8000f3a:	f001 fa1d 	bl	8002378 <HAL_GPIO_DeInit>

    /* UART5 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8000f3e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8000f40:	f000 ff8e 	bl	8001e60 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8000f44:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8000f46:	f000 ff8b 	bl	8001e60 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspDeInit 1 */

  /* USER CODE END UART5_MspDeInit 1 */
  }
}
 8000f4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(UART5_IRQn);
 8000f4e:	2035      	movs	r0, #53	@ 0x35
 8000f50:	f000 bec6 	b.w	8001ce0 <HAL_NVIC_DisableIRQ>
 8000f54:	40005000 	.word	0x40005000
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40020800 	.word	0x40020800
 8000f60:	40020c00 	.word	0x40020c00

08000f64 <MX_USB_OTG_FS_PCD_Init>:
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000f64:	480b      	ldr	r0, [pc, #44]	@ (8000f94 <MX_USB_OTG_FS_PCD_Init+0x30>)
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000f66:	2304      	movs	r3, #4
{
 8000f68:	b510      	push	{r4, lr}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000f6a:	f44f 7100 	mov.w	r1, #512	@ 0x200
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000f6e:	f04f 44a0 	mov.w	r4, #1342177280	@ 0x50000000
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f72:	2202      	movs	r2, #2
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000f74:	7103      	strb	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000f76:	2300      	movs	r3, #0
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000f78:	6004      	str	r4, [r0, #0]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000f7a:	80c1      	strh	r1, [r0, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f7c:	f8c0 2009 	str.w	r2, [r0, #9]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000f80:	81c3      	strh	r3, [r0, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000f82:	f001 fb7f 	bl	8002684 <HAL_PCD_Init>
 8000f86:	b900      	cbnz	r0, 8000f8a <MX_USB_OTG_FS_PCD_Init+0x26>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000f88:	bd10      	pop	{r4, pc}
 8000f8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8000f8e:	f7ff bd23 	b.w	80009d8 <Error_Handler>
 8000f92:	bf00      	nop
 8000f94:	20004630 	.word	0x20004630

08000f98 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000f98:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(pcdHandle->Instance==USB_OTG_FS)
 8000f9a:	6803      	ldr	r3, [r0, #0]
{
 8000f9c:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9e:	2400      	movs	r4, #0
  if(pcdHandle->Instance==USB_OTG_FS)
 8000fa0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000fa8:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8000fac:	9406      	str	r4, [sp, #24]
  if(pcdHandle->Instance==USB_OTG_FS)
 8000fae:	d001      	beq.n	8000fb4 <HAL_PCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000fb0:	b009      	add	sp, #36	@ 0x24
 8000fb2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb4:	4d17      	ldr	r5, [pc, #92]	@ (8001014 <HAL_PCD_MspInit+0x7c>)
 8000fb6:	9400      	str	r4, [sp, #0]
 8000fb8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8000fba:	f043 0301 	orr.w	r3, r3, #1
 8000fbe:	632b      	str	r3, [r5, #48]	@ 0x30
 8000fc0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000fc8:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8000fcc:	2302      	movs	r3, #2
 8000fce:	e9cd 2302 	strd	r2, r3, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd2:	9800      	ldr	r0, [sp, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd4:	4810      	ldr	r0, [pc, #64]	@ (8001018 <HAL_PCD_MspInit+0x80>)
 8000fd6:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd8:	2203      	movs	r2, #3
 8000fda:	230a      	movs	r3, #10
 8000fdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe0:	f001 f8ae 	bl	8002140 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000fe4:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8000fe6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fea:	636b      	str	r3, [r5, #52]	@ 0x34
 8000fec:	9401      	str	r4, [sp, #4]
 8000fee:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8000ff0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ff4:	646b      	str	r3, [r5, #68]	@ 0x44
 8000ff6:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8000ff8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 1, 0);
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	4622      	mov	r2, r4
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001000:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 1, 0);
 8001002:	2043      	movs	r0, #67	@ 0x43
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001004:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 1, 0);
 8001006:	f000 fe21 	bl	8001c4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800100a:	2043      	movs	r0, #67	@ 0x43
 800100c:	f000 fe5a 	bl	8001cc4 <HAL_NVIC_EnableIRQ>
}
 8001010:	b009      	add	sp, #36	@ 0x24
 8001012:	bd30      	pop	{r4, r5, pc}
 8001014:	40023800 	.word	0x40023800
 8001018:	40020000 	.word	0x40020000

0800101c <find_best_timing>:
 *                 - So sánh sai số với desired_sample_point_scaled
 *                 - Nếu sai số nhỏ hơn trước đó → lưu lại cấu hình tốt nhất
 *   [3] Trả về cấu hình có sai số nhỏ nhất với sample point mong muốn
 */
CAN_TimingConfig find_best_timing(uint32_t baudrate, uint16_t desired_sample_point_scaled)
{
 800101c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001020:	2600      	movs	r6, #0
 8001022:	ed2d 8b04 	vpush	{d8-d9}
 8001026:	4680      	mov	r8, r0
    CAN_TimingConfig best_config = {0};
    best_config.sample_point_error = FLT_MAX;
 8001028:	eddf 8a33 	vldr	s17, [pc, #204]	@ 80010f8 <find_best_timing+0xdc>
    CAN_TimingConfig best_config = {0};
 800102c:	ed9f 9a33 	vldr	s18, [pc, #204]	@ 80010fc <find_best_timing+0xe0>
            for (int tseg2 = 1; tseg2 <= 8; tseg2++) {
                if (1 + tseg1 + tseg2 != tq_total)
                    continue;

                float actual_sp = (1.0f + tseg1) / tq_total;
                uint16_t actual_sp_scaled = (uint16_t)(actual_sp * SAMPLE_POINT_SCALE);
 8001030:	ed9f 8a33 	vldr	s16, [pc, #204]	@ 8001100 <find_best_timing+0xe4>
{
 8001034:	460f      	mov	r7, r1
 8001036:	4615      	mov	r5, r2
 8001038:	46b1      	mov	r9, r6
 800103a:	46b3      	mov	fp, r6
 800103c:	46b2      	mov	sl, r6
    for (int tq_total = 8; tq_total <= 25; tq_total++) {
 800103e:	2408      	movs	r4, #8
 8001040:	e002      	b.n	8001048 <find_best_timing+0x2c>
 8001042:	3401      	adds	r4, #1
 8001044:	2c1a      	cmp	r4, #26
 8001046:	d049      	beq.n	80010dc <find_best_timing+0xc0>
        if ((HAL_RCC_GetPCLK1Freq() / baudrate) % tq_total != 0)
 8001048:	f002 fb7e 	bl	8003748 <HAL_RCC_GetPCLK1Freq>
 800104c:	fbb0 f0f7 	udiv	r0, r0, r7
 8001050:	fbb0 f3f4 	udiv	r3, r0, r4
 8001054:	fb04 0013 	mls	r0, r4, r3, r0
 8001058:	2800      	cmp	r0, #0
 800105a:	d1f2      	bne.n	8001042 <find_best_timing+0x26>
        int prescaler = (HAL_RCC_GetPCLK1Freq() / baudrate) / tq_total;
 800105c:	f002 fb74 	bl	8003748 <HAL_RCC_GetPCLK1Freq>
 8001060:	2101      	movs	r1, #1
                float actual_sp = (1.0f + tseg1) / tq_total;
 8001062:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
        int prescaler = (HAL_RCC_GetPCLK1Freq() / baudrate) / tq_total;
 8001066:	fbb0 f0f7 	udiv	r0, r0, r7
 800106a:	fbb0 f0f4 	udiv	r0, r0, r4
            for (int tseg2 = 1; tseg2 <= 8; tseg2++) {
 800106e:	2201      	movs	r2, #1
 8001070:	ee06 1a10 	vmov	s12, r1
 8001074:	4411      	add	r1, r2
                if (1 + tseg1 + tseg2 != tq_total)
 8001076:	1853      	adds	r3, r2, r1
 8001078:	42a3      	cmp	r3, r4
 800107a:	d127      	bne.n	80010cc <find_best_timing+0xb0>
                float actual_sp = (1.0f + tseg1) / tq_total;
 800107c:	eeb8 7ac6 	vcvt.f32.s32	s14, s12
 8001080:	ee07 4a90 	vmov	s15, r4
 8001084:	ee37 7a25 	vadd.f32	s14, s14, s11
 8001088:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800108c:	eec7 6a27 	vdiv.f32	s13, s14, s15
                uint16_t actual_sp_scaled = (uint16_t)(actual_sp * SAMPLE_POINT_SCALE);
 8001090:	ee66 7a88 	vmul.f32	s15, s13, s16
 8001094:	eefc 7ae7 	vcvt.u32.f32	s15, s15

                float error = fabsf((float)(actual_sp_scaled - desired_sample_point_scaled) / SAMPLE_POINT_SCALE);
 8001098:	ee17 3a90 	vmov	r3, s15
 800109c:	b29b      	uxth	r3, r3
 800109e:	1b5b      	subs	r3, r3, r5
 80010a0:	ee07 3a90 	vmov	s15, r3
 80010a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010a8:	ee87 7a88 	vdiv.f32	s14, s15, s16
 80010ac:	eef0 7ac7 	vabs.f32	s15, s14

                if (error < best_config.sample_point_error) {
 80010b0:	eef4 7ae8 	vcmpe.f32	s15, s17
 80010b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b8:	d508      	bpl.n	80010cc <find_best_timing+0xb0>
 80010ba:	ee16 6a10 	vmov	r6, s12
                    best_config.tq_total = tq_total;
                    best_config.prescaler = prescaler;
                    best_config.tseg1 = tseg1;
                    best_config.tseg2 = tseg2;
                    best_config.actual_sample_point = actual_sp;
                    best_config.sample_point_error = error;
 80010be:	eef0 8a67 	vmov.f32	s17, s15
                    best_config.actual_sample_point = actual_sp;
 80010c2:	eeb0 9a66 	vmov.f32	s18, s13
 80010c6:	4691      	mov	r9, r2
                if (error < best_config.sample_point_error) {
 80010c8:	46a3      	mov	fp, r4
 80010ca:	4682      	mov	sl, r0
            for (int tseg2 = 1; tseg2 <= 8; tseg2++) {
 80010cc:	3201      	adds	r2, #1
 80010ce:	2a09      	cmp	r2, #9
 80010d0:	d1d1      	bne.n	8001076 <find_best_timing+0x5a>
        for (int tseg1 = 1; tseg1 <= 16; tseg1++) {
 80010d2:	2911      	cmp	r1, #17
 80010d4:	d1cb      	bne.n	800106e <find_best_timing+0x52>
    for (int tq_total = 8; tq_total <= 25; tq_total++) {
 80010d6:	3401      	adds	r4, #1
 80010d8:	2c1a      	cmp	r4, #26
 80010da:	d1b5      	bne.n	8001048 <find_best_timing+0x2c>
                }
            }
        }
    }

    return best_config;
 80010dc:	ed88 9a04 	vstr	s18, [r8, #16]
 80010e0:	edc8 8a05 	vstr	s17, [r8, #20]
}
 80010e4:	ecbd 8b04 	vpop	{d8-d9}
 80010e8:	4640      	mov	r0, r8
    return best_config;
 80010ea:	e9c8 ba00 	strd	fp, sl, [r8]
 80010ee:	e9c8 6902 	strd	r6, r9, [r8, #8]
}
 80010f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80010f6:	bf00      	nop
 80010f8:	7f7fffff 	.word	0x7f7fffff
 80010fc:	00000000 	.word	0x00000000
 8001100:	447a0000 	.word	0x447a0000

08001104 <SendCanConfigBaud>:
uint8_t SendCanConfigBaud(uint8_t *data){
 8001104:	b510      	push	{r4, lr}
	uint32_t baudrate = ((data[2] << 8) | data[1]) * 1000;
 8001106:	f8b0 3001 	ldrh.w	r3, [r0, #1]
    CAN_TimingConfig config = find_best_timing(baudrate, desired_sample_point);
 800110a:	f8b0 2003 	ldrh.w	r2, [r0, #3]
	hcan1.Instance = CAN1;
 800110e:	4c12      	ldr	r4, [pc, #72]	@ (8001158 <SendCanConfigBaud+0x54>)
uint8_t SendCanConfigBaud(uint8_t *data){
 8001110:	b086      	sub	sp, #24
	uint32_t baudrate = ((data[2] << 8) | data[1]) * 1000;
 8001112:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
    CAN_TimingConfig config = find_best_timing(baudrate, desired_sample_point);
 8001116:	fb03 f101 	mul.w	r1, r3, r1
 800111a:	4668      	mov	r0, sp
 800111c:	f7ff ff7e 	bl	800101c <find_best_timing>
	hcan1.Init.TimeSeg2 = (config.tseg2 - 1 ) << 20;
 8001120:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
	hcan1.Instance = CAN1;
 8001124:	480d      	ldr	r0, [pc, #52]	@ (800115c <SendCanConfigBaud+0x58>)
	hcan1.Init.TimeSeg1 = (config.tseg1 - 1 ) << 16;
 8001126:	3a01      	subs	r2, #1
	hcan1.Init.TimeSeg2 = (config.tseg2 - 1 ) << 20;
 8001128:	3b01      	subs	r3, #1
	hcan1.Instance = CAN1;
 800112a:	6004      	str	r4, [r0, #0]
	hcan1.Init.Prescaler = config.prescaler;
 800112c:	9c01      	ldr	r4, [sp, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 800112e:	2100      	movs	r1, #0
	hcan1.Init.TimeSeg1 = (config.tseg1 - 1 ) << 16;
 8001130:	0412      	lsls	r2, r2, #16
	hcan1.Init.TimeSeg2 = (config.tseg2 - 1 ) << 20;
 8001132:	051b      	lsls	r3, r3, #20
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001134:	e9c0 4101 	strd	r4, r1, [r0, #4]
	hcan1.Init.TimeSeg1 = (config.tseg1 - 1 ) << 16;
 8001138:	e9c0 1203 	strd	r1, r2, [r0, #12]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 800113c:	e9c0 3105 	strd	r3, r1, [r0, #20]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001140:	8381      	strh	r1, [r0, #28]
	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001142:	f000 f9a9 	bl	8001498 <HAL_CAN_Init>
 8001146:	b910      	cbnz	r0, 800114e <SendCanConfigBaud+0x4a>
}
 8001148:	2001      	movs	r0, #1
 800114a:	b006      	add	sp, #24
 800114c:	bd10      	pop	{r4, pc}
		Error_Handler();
 800114e:	f7ff fc43 	bl	80009d8 <Error_Handler>
}
 8001152:	2001      	movs	r0, #1
 8001154:	b006      	add	sp, #24
 8001156:	bd10      	pop	{r4, pc}
 8001158:	40006400 	.word	0x40006400
 800115c:	20000324 	.word	0x20000324

08001160 <CanTx_init>:
	return 1;
}

void CanTx_init(uint32_t id, uint8_t DlcAndType, uint8_t *data){
	//uint32_t txMailbox;
    switch(DlcAndType & 0x0F){
 8001160:	f011 030f 	ands.w	r3, r1, #15
void CanTx_init(uint32_t id, uint8_t DlcAndType, uint8_t *data){
 8001164:	b410      	push	{r4}
 8001166:	4c0a      	ldr	r4, [pc, #40]	@ (8001190 <CanTx_init+0x30>)
    switch(DlcAndType & 0x0F){
 8001168:	d00f      	beq.n	800118a <CanTx_init+0x2a>
 800116a:	2b04      	cmp	r3, #4
    case CAN_ID_EXT:
    	g_CanTxHeader.IDE = CAN_ID_EXT;
    	g_CanTxHeader.ExtId = id;
 800116c:	bf08      	it	eq
 800116e:	e9c4 0301 	strdeq	r0, r3, [r4, #4]
    case CAN_ID_STD:
    	g_CanTxHeader.IDE = CAN_ID_STD;
    	g_CanTxHeader.StdId = id;
    	break;
    }
	g_CanTxHeader.RTR = CAN_RTR_DATA;
 8001172:	2000      	movs	r0, #0
	g_CanTxHeader.DLC = (DlcAndType >> 4);
 8001174:	0909      	lsrs	r1, r1, #4
	g_CanTxHeader.TransmitGlobalTime = DISABLE;
 8001176:	7520      	strb	r0, [r4, #20]
	g_CanTxHeader.DLC = (DlcAndType >> 4);
 8001178:	e9c4 0103 	strd	r0, r1, [r4, #12]
	if(HAL_CAN_AddTxMessage(&hcan1, &g_CanTxHeader, data, &g_u32TxMailbox) != HAL_OK){
 800117c:	4b05      	ldr	r3, [pc, #20]	@ (8001194 <CanTx_init+0x34>)
 800117e:	4904      	ldr	r1, [pc, #16]	@ (8001190 <CanTx_init+0x30>)
 8001180:	4805      	ldr	r0, [pc, #20]	@ (8001198 <CanTx_init+0x38>)
		//GPIOA->ODR ^= (1 << 7);
	}
	else{
		//GPIOA->ODR ^= (1 << 6);
	}
}
 8001182:	f85d 4b04 	ldr.w	r4, [sp], #4
	if(HAL_CAN_AddTxMessage(&hcan1, &g_CanTxHeader, data, &g_u32TxMailbox) != HAL_OK){
 8001186:	f000 bb0b 	b.w	80017a0 <HAL_CAN_AddTxMessage>
    	g_CanTxHeader.IDE = CAN_ID_STD;
 800118a:	60a3      	str	r3, [r4, #8]
    	g_CanTxHeader.StdId = id;
 800118c:	6020      	str	r0, [r4, #0]
    	break;
 800118e:	e7f0      	b.n	8001172 <CanTx_init+0x12>
 8001190:	20008b48 	.word	0x20008b48
 8001194:	20008b18 	.word	0x20008b18
 8001198:	20000324 	.word	0x20000324

0800119c <SendCanMessage>:
uint8_t SendCanMessage(uint8_t *data){
 800119c:	b508      	push	{r3, lr}
 800119e:	f8d0 3001 	ldr.w	r3, [r0, #1]
	CanTx_init(id, data[5], &data[6]);
 80011a2:	7941      	ldrb	r1, [r0, #5]
 80011a4:	1d82      	adds	r2, r0, #6
 80011a6:	ba18      	rev	r0, r3
 80011a8:	f7ff ffda 	bl	8001160 <CanTx_init>
}
 80011ac:	2001      	movs	r0, #1
 80011ae:	bd08      	pop	{r3, pc}

080011b0 <CanRx_FilterRange>:

void CanRx_FilterRange(uint32_t start_id, uint32_t end_id, uint8_t is_extended)
{
 80011b0:	b538      	push	{r3, r4, r5, lr}
    uint32_t range = end_id - start_id + 1;
 80011b2:	1a0b      	subs	r3, r1, r0
 80011b4:	f103 0c01 	add.w	ip, r3, #1

    // Kiểm tra range có phải là lũy thừa của 2
    if ((range & (range - 1)) != 0) {
 80011b8:	ea1c 0f03 	tst.w	ip, r3
 80011bc:	d12c      	bne.n	8001218 <CanRx_FilterRange+0x68>
        return; // Không phải lũy thừa của 2
    }

    uint32_t mask, id_filter;

    if (is_extended == 0) {
 80011be:	ea41 0300 	orr.w	r3, r1, r0
 80011c2:	bb32      	cbnz	r2, 8001212 <CanRx_FilterRange+0x62>
        // Standard ID (11-bit)
        if (start_id > 0x7FF || end_id > 0x7FF) return;
 80011c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80011c8:	d226      	bcs.n	8001218 <CanRx_FilterRange+0x68>

        mask = 0x7FF & ~(range - 1);
 80011ca:	1e43      	subs	r3, r0, #1
 80011cc:	1a5b      	subs	r3, r3, r1
 80011ce:	f3c3 030a 	ubfx	r3, r3, #0, #11

        if ((start_id & ~mask) != 0) return;
 80011d2:	ea30 0203 	bics.w	r2, r0, r3
 80011d6:	d11f      	bne.n	8001218 <CanRx_FilterRange+0x68>

        id_filter = start_id << 5;
        mask <<= 5;

        g_CanFilter.FilterIdHigh = (uint16_t)(id_filter);
 80011d8:	0140      	lsls	r0, r0, #5
 80011da:	b280      	uxth	r0, r0
        g_CanFilter.FilterIdLow  = 0x0000;
        g_CanFilter.FilterMaskIdHigh = (uint16_t)(mask);
 80011dc:	015b      	lsls	r3, r3, #5
        g_CanFilter.FilterMaskIdLow  = 0x0000;
 80011de:	4614      	mov	r4, r2
    }

    g_CanFilter.FilterBank = 0;
    g_CanFilter.FilterMode = CAN_FILTERMODE_IDMASK;
    g_CanFilter.FilterScale = CAN_FILTERSCALE_32BIT;
    g_CanFilter.FilterFIFOAssignment = CAN_RX_FIFO0;
 80011e0:	ed9f 7b17 	vldr	d7, [pc, #92]	@ 8001240 <CanRx_FilterRange+0x90>
        g_CanFilter.FilterIdHigh = (uint16_t)(id_filter);
 80011e4:	491a      	ldr	r1, [pc, #104]	@ (8001250 <CanRx_FilterRange+0xa0>)
    g_CanFilter.FilterFIFOAssignment = CAN_RX_FIFO0;
 80011e6:	ed81 7b04 	vstr	d7, [r1, #16]
 80011ea:	ed9f 7b17 	vldr	d7, [pc, #92]	@ 8001248 <CanRx_FilterRange+0x98>
        g_CanFilter.FilterIdHigh = (uint16_t)(id_filter);
 80011ee:	6008      	str	r0, [r1, #0]
    g_CanFilter.FilterActivation = ENABLE;
 80011f0:	2501      	movs	r5, #1

    HAL_CAN_ConfigFilter(&hcan1, &g_CanFilter);
 80011f2:	4818      	ldr	r0, [pc, #96]	@ (8001254 <CanRx_FilterRange+0xa4>)
    g_CanFilter.FilterActivation = ENABLE;
 80011f4:	620d      	str	r5, [r1, #32]
        g_CanFilter.FilterMaskIdHigh = (uint16_t)(mask);
 80011f6:	e9c1 4301 	strd	r4, r3, [r1, #4]
    g_CanFilter.FilterFIFOAssignment = CAN_RX_FIFO0;
 80011fa:	ed81 7b06 	vstr	d7, [r1, #24]
        g_CanFilter.FilterMaskIdLow  = 0x0000;
 80011fe:	60ca      	str	r2, [r1, #12]
    HAL_CAN_ConfigFilter(&hcan1, &g_CanFilter);
 8001200:	f000 f9ca 	bl	8001598 <HAL_CAN_ConfigFilter>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO0_OVERRUN | CAN_IT_ERROR|  CAN_IT_TX_MAILBOX_EMPTY   );
}
 8001204:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO0_OVERRUN | CAN_IT_ERROR|  CAN_IT_TX_MAILBOX_EMPTY   );
 8001208:	4812      	ldr	r0, [pc, #72]	@ (8001254 <CanRx_FilterRange+0xa4>)
 800120a:	f248 010b 	movw	r1, #32779	@ 0x800b
 800120e:	f000 bb9d 	b.w	800194c <HAL_CAN_ActivateNotification>
        if (start_id > 0x1FFFFFFF || end_id > 0x1FFFFFFF) return;
 8001212:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001216:	d300      	bcc.n	800121a <CanRx_FilterRange+0x6a>
}
 8001218:	bd38      	pop	{r3, r4, r5, pc}
        mask = 0x1FFFFFFF & ~(range - 1);
 800121a:	1e43      	subs	r3, r0, #1
 800121c:	1a5b      	subs	r3, r3, r1
 800121e:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
        if ((start_id & ~mask) != 0) return;
 8001222:	ea30 0203 	bics.w	r2, r0, r3
 8001226:	d1f7      	bne.n	8001218 <CanRx_FilterRange+0x68>
        id_filter = (start_id << 3) | (1 << 2);  // IDE bit = 1 in ID field
 8001228:	00c4      	lsls	r4, r0, #3
        mask = (mask << 3) | (1 << 2);           // Mask includes IDE match
 800122a:	00da      	lsls	r2, r3, #3
        g_CanFilter.FilterIdHigh = (uint16_t)(id_filter >> 16);
 800122c:	b2a4      	uxth	r4, r4
 800122e:	b292      	uxth	r2, r2
 8001230:	f3c0 304f 	ubfx	r0, r0, #13, #16
        g_CanFilter.FilterIdLow  = (uint16_t)(id_filter & 0xFFFF);
 8001234:	f044 0404 	orr.w	r4, r4, #4
        g_CanFilter.FilterMaskIdHigh = (uint16_t)(mask >> 16);
 8001238:	0b5b      	lsrs	r3, r3, #13
        g_CanFilter.FilterMaskIdLow  = (uint16_t)(mask & 0xFFFF);
 800123a:	f042 0204 	orr.w	r2, r2, #4
 800123e:	e7cf      	b.n	80011e0 <CanRx_FilterRange+0x30>
	...
 800124c:	00000001 	.word	0x00000001
 8001250:	20008b20 	.word	0x20008b20
 8001254:	20000324 	.word	0x20000324

08001258 <SendCanConfigFilter>:
uint8_t SendCanConfigFilter(uint8_t *data){
 8001258:	b508      	push	{r3, lr}
	CanRx_FilterRange(start_id, end_id, data[5]);
 800125a:	7942      	ldrb	r2, [r0, #5]
 800125c:	f8d0 100a 	ldr.w	r1, [r0, #10]
 8001260:	f8d0 0006 	ldr.w	r0, [r0, #6]
 8001264:	f7ff ffa4 	bl	80011b0 <CanRx_FilterRange>
}
 8001268:	2001      	movs	r0, #1
 800126a:	bd08      	pop	{r3, pc}

0800126c <SendCanConfig>:
uint8_t SendCanConfig(uint8_t *data){
 800126c:	b510      	push	{r4, lr}
	switch(data[1]){
 800126e:	7843      	ldrb	r3, [r0, #1]
 8001270:	b95b      	cbnz	r3, 800128a <SendCanConfig+0x1e>
	  HAL_TIM_Base_Stop(&htim5);
 8001272:	4810      	ldr	r0, [pc, #64]	@ (80012b4 <SendCanConfig+0x48>)
 8001274:	f002 fabe 	bl	80037f4 <HAL_TIM_Base_Stop>
	  if (HAL_CAN_DeInit(&hcan1) != HAL_OK)
 8001278:	480f      	ldr	r0, [pc, #60]	@ (80012b8 <SendCanConfig+0x4c>)
 800127a:	f000 fa7b 	bl	8001774 <HAL_CAN_DeInit>
 800127e:	b9a8      	cbnz	r0, 80012ac <SendCanConfig+0x40>
	  HAL_CAN_Stop(&hcan1);
 8001280:	480d      	ldr	r0, [pc, #52]	@ (80012b8 <SendCanConfig+0x4c>)
 8001282:	f000 fa47 	bl	8001714 <HAL_CAN_Stop>
}
 8001286:	2001      	movs	r0, #1
 8001288:	bd10      	pop	{r4, pc}
	  if(HAL_TIM_Base_Start(&htim5) != HAL_OK){
 800128a:	4604      	mov	r4, r0
 800128c:	4809      	ldr	r0, [pc, #36]	@ (80012b4 <SendCanConfig+0x48>)
 800128e:	f002 fa7b 	bl	8003788 <HAL_TIM_Base_Start>
 8001292:	2800      	cmp	r0, #0
 8001294:	d1f7      	bne.n	8001286 <SendCanConfig+0x1a>
	  SendCanConfigBaud(data);
 8001296:	4620      	mov	r0, r4
 8001298:	f7ff ff34 	bl	8001104 <SendCanConfigBaud>
	  SendCanConfigFilter(data);
 800129c:	4620      	mov	r0, r4
 800129e:	f7ff ffdb 	bl	8001258 <SendCanConfigFilter>
	  HAL_CAN_Start(&hcan1);
 80012a2:	4805      	ldr	r0, [pc, #20]	@ (80012b8 <SendCanConfig+0x4c>)
 80012a4:	f000 fa08 	bl	80016b8 <HAL_CAN_Start>
}
 80012a8:	2001      	movs	r0, #1
 80012aa:	bd10      	pop	{r4, pc}
	     Error_Handler();
 80012ac:	f7ff fb94 	bl	80009d8 <Error_Handler>
 80012b0:	e7e6      	b.n	8001280 <SendCanConfig+0x14>
 80012b2:	bf00      	nop
 80012b4:	20004408 	.word	0x20004408
 80012b8:	20000324 	.word	0x20000324

080012bc <HID_Frame_Write>:


uint8_t HID_Frame_Write(HID_FrameFIFO_t *fifo, uint8_t *data)
{
    uint8_t nextHead = (fifo->head + 1) % HID_FRAME_BUFFER_SIZE;
 80012bc:	f500 4c80 	add.w	ip, r0, #16384	@ 0x4000
 80012c0:	f89c 2000 	ldrb.w	r2, [ip]

    // Kiểm tra tràn bộ đệm
    if (nextHead == fifo->tail) {
 80012c4:	f89c 3001 	ldrb.w	r3, [ip, #1]
    uint8_t nextHead = (fifo->head + 1) % HID_FRAME_BUFFER_SIZE;
 80012c8:	3201      	adds	r2, #1
 80012ca:	b2d2      	uxtb	r2, r2
    if (nextHead == fifo->tail) {
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d01d      	beq.n	800130c <HID_Frame_Write+0x50>
{
 80012d0:	b5f0      	push	{r4, r5, r6, r7, lr}
        // Buffer đầy
    	//GPIOA->ODR ^= (1 << 7);
        return 0;
    }

    memcpy(fifo->frame[fifo->head], data, HID_FRAME_SIZE);
 80012d2:	f89c 3000 	ldrb.w	r3, [ip]
 80012d6:	680d      	ldr	r5, [r1, #0]
 80012d8:	684c      	ldr	r4, [r1, #4]
 80012da:	f8d1 e008 	ldr.w	lr, [r1, #8]
 80012de:	68ce      	ldr	r6, [r1, #12]
 80012e0:	015f      	lsls	r7, r3, #5
 80012e2:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80012e6:	51c5      	str	r5, [r0, r7]
 80012e8:	605c      	str	r4, [r3, #4]
 80012ea:	f8c3 e008 	str.w	lr, [r3, #8]
 80012ee:	60de      	str	r6, [r3, #12]
 80012f0:	690d      	ldr	r5, [r1, #16]
 80012f2:	694c      	ldr	r4, [r1, #20]
 80012f4:	f8d1 e018 	ldr.w	lr, [r1, #24]
 80012f8:	69ce      	ldr	r6, [r1, #28]
 80012fa:	61de      	str	r6, [r3, #28]
 80012fc:	611d      	str	r5, [r3, #16]
 80012fe:	615c      	str	r4, [r3, #20]
 8001300:	f8c3 e018 	str.w	lr, [r3, #24]
    fifo->head = nextHead;
 8001304:	f88c 2000 	strb.w	r2, [ip]
    return 1;
 8001308:	2001      	movs	r0, #1
}
 800130a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return 0;
 800130c:	2000      	movs	r0, #0
}
 800130e:	4770      	bx	lr

08001310 <Usb2Can_Tranfer>:
 *  0: FIFO rỗng
 *  1: frame đã gửi thành công
 *  2: frame chưa gửi (CAN bận hoặc lỗi)
 */
uint8_t Usb2Can_Tranfer(HID_FrameFIFO_t *fifo)
{
 8001310:	b510      	push	{r4, lr}
    uint8_t l_au8DataUsb[HID_FRAME_SIZE];

    // Kiểm tra FIFO rỗng
    if(fifo->head == fifo->tail)
 8001312:	f500 4480 	add.w	r4, r0, #16384	@ 0x4000
{
 8001316:	b088      	sub	sp, #32
    if(fifo->head == fifo->tail)
 8001318:	7822      	ldrb	r2, [r4, #0]
 800131a:	7863      	ldrb	r3, [r4, #1]
 800131c:	429a      	cmp	r2, r3
 800131e:	d029      	beq.n	8001374 <Usb2Can_Tranfer+0x64>
        return 0;

    // Copy frame ra buffer tạm
    memcpy(l_au8DataUsb, fifo->frame[fifo->tail], HID_FRAME_SIZE);
 8001320:	7863      	ldrb	r3, [r4, #1]
 8001322:	eb00 1e43 	add.w	lr, r0, r3, lsl #5
 8001326:	015b      	lsls	r3, r3, #5
 8001328:	f8de 1004 	ldr.w	r1, [lr, #4]
 800132c:	58c0      	ldr	r0, [r0, r3]
 800132e:	f8de 2008 	ldr.w	r2, [lr, #8]
 8001332:	f8de 300c 	ldr.w	r3, [lr, #12]
 8001336:	46ec      	mov	ip, sp
 8001338:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800133c:	f8de 0010 	ldr.w	r0, [lr, #16]
 8001340:	f8de 2018 	ldr.w	r2, [lr, #24]
 8001344:	f8de 301c 	ldr.w	r3, [lr, #28]
 8001348:	f8de 1014 	ldr.w	r1, [lr, #20]
 800134c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}

    // Gọi hàm gửi CAN tương ứng
    uint8_t sendResult = g_PtrFunc_SendCan[l_au8DataUsb[0]](l_au8DataUsb);
 8001350:	4b0a      	ldr	r3, [pc, #40]	@ (800137c <Usb2Can_Tranfer+0x6c>)
 8001352:	f89d 2000 	ldrb.w	r2, [sp]
 8001356:	4668      	mov	r0, sp
 8001358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800135c:	4798      	blx	r3

    if(sendResult) {
 800135e:	b130      	cbz	r0, 800136e <Usb2Can_Tranfer+0x5e>
        // Gửi thành công → đánh dấu đã đọc
        fifo->tail = (fifo->tail + 1) % HID_FRAME_BUFFER_SIZE;
 8001360:	7863      	ldrb	r3, [r4, #1]
        return 1;
 8001362:	2001      	movs	r0, #1
        fifo->tail = (fifo->tail + 1) % HID_FRAME_BUFFER_SIZE;
 8001364:	4403      	add	r3, r0
 8001366:	b2db      	uxtb	r3, r3
 8001368:	7063      	strb	r3, [r4, #1]
    } else {
        // Gửi chưa thành công → tail giữ nguyên
        return 2;
    }
}
 800136a:	b008      	add	sp, #32
 800136c:	bd10      	pop	{r4, pc}
        return 2;
 800136e:	2002      	movs	r0, #2
}
 8001370:	b008      	add	sp, #32
 8001372:	bd10      	pop	{r4, pc}
        return 0;
 8001374:	2000      	movs	r0, #0
}
 8001376:	b008      	add	sp, #32
 8001378:	bd10      	pop	{r4, pc}
 800137a:	bf00      	nop
 800137c:	20000004 	.word	0x20000004

08001380 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001380:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013b8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001384:	f7ff fbb0 	bl	8000ae8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001388:	480c      	ldr	r0, [pc, #48]	@ (80013bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800138a:	490d      	ldr	r1, [pc, #52]	@ (80013c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800138c:	4a0d      	ldr	r2, [pc, #52]	@ (80013c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800138e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001390:	e002      	b.n	8001398 <LoopCopyDataInit>

08001392 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001392:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001394:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001396:	3304      	adds	r3, #4

08001398 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001398:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800139a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800139c:	d3f9      	bcc.n	8001392 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800139e:	4a0a      	ldr	r2, [pc, #40]	@ (80013c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013a0:	4c0a      	ldr	r4, [pc, #40]	@ (80013cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80013a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013a4:	e001      	b.n	80013aa <LoopFillZerobss>

080013a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013a8:	3204      	adds	r2, #4

080013aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013ac:	d3fb      	bcc.n	80013a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013ae:	f005 fbad 	bl	8006b0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013b2:	f7ff fae7 	bl	8000984 <main>
  bx  lr    
 80013b6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80013b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013c0:	20000304 	.word	0x20000304
  ldr r2, =_sidata
 80013c4:	080074c4 	.word	0x080074c4
  ldr r2, =_sbss
 80013c8:	20000308 	.word	0x20000308
  ldr r4, =_ebss
 80013cc:	2000a5ec 	.word	0x2000a5ec

080013d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013d0:	e7fe      	b.n	80013d0 <ADC_IRQHandler>
	...

080013d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013d4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013d6:	4a0e      	ldr	r2, [pc, #56]	@ (8001410 <HAL_InitTick+0x3c>)
 80013d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001414 <HAL_InitTick+0x40>)
 80013da:	7812      	ldrb	r2, [r2, #0]
{
 80013dc:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013de:	6818      	ldr	r0, [r3, #0]
 80013e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80013e8:	fbb0 f0f3 	udiv	r0, r0, r3
 80013ec:	f000 fc8a 	bl	8001d04 <HAL_SYSTICK_Config>
 80013f0:	b908      	cbnz	r0, 80013f6 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013f2:	2d0f      	cmp	r5, #15
 80013f4:	d901      	bls.n	80013fa <HAL_InitTick+0x26>
    return HAL_ERROR;
 80013f6:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80013f8:	bd38      	pop	{r3, r4, r5, pc}
 80013fa:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013fc:	4602      	mov	r2, r0
 80013fe:	4629      	mov	r1, r5
 8001400:	f04f 30ff 	mov.w	r0, #4294967295
 8001404:	f000 fc22 	bl	8001c4c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001408:	4b03      	ldr	r3, [pc, #12]	@ (8001418 <HAL_InitTick+0x44>)
 800140a:	4620      	mov	r0, r4
 800140c:	601d      	str	r5, [r3, #0]
}
 800140e:	bd38      	pop	{r3, r4, r5, pc}
 8001410:	20000010 	.word	0x20000010
 8001414:	20000000 	.word	0x20000000
 8001418:	20000014 	.word	0x20000014

0800141c <HAL_Init>:
{
 800141c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800141e:	4b0b      	ldr	r3, [pc, #44]	@ (800144c <HAL_Init+0x30>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001426:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800142e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001436:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001438:	2003      	movs	r0, #3
 800143a:	f000 fbf5 	bl	8001c28 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800143e:	200f      	movs	r0, #15
 8001440:	f7ff ffc8 	bl	80013d4 <HAL_InitTick>
  HAL_MspInit();
 8001444:	f7ff faca 	bl	80009dc <HAL_MspInit>
}
 8001448:	2000      	movs	r0, #0
 800144a:	bd08      	pop	{r3, pc}
 800144c:	40023c00 	.word	0x40023c00

08001450 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001450:	4a03      	ldr	r2, [pc, #12]	@ (8001460 <HAL_IncTick+0x10>)
 8001452:	4b04      	ldr	r3, [pc, #16]	@ (8001464 <HAL_IncTick+0x14>)
 8001454:	6811      	ldr	r1, [r2, #0]
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	440b      	add	r3, r1
 800145a:	6013      	str	r3, [r2, #0]
}
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	20008b60 	.word	0x20008b60
 8001464:	20000010 	.word	0x20000010

08001468 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001468:	4b01      	ldr	r3, [pc, #4]	@ (8001470 <HAL_GetTick+0x8>)
 800146a:	6818      	ldr	r0, [r3, #0]
}
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	20008b60 	.word	0x20008b60

08001474 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001474:	b538      	push	{r3, r4, r5, lr}
 8001476:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001478:	f7ff fff6 	bl	8001468 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800147c:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800147e:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8001480:	d002      	beq.n	8001488 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001482:	4b04      	ldr	r3, [pc, #16]	@ (8001494 <HAL_Delay+0x20>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001488:	f7ff ffee 	bl	8001468 <HAL_GetTick>
 800148c:	1b40      	subs	r0, r0, r5
 800148e:	42a0      	cmp	r0, r4
 8001490:	d3fa      	bcc.n	8001488 <HAL_Delay+0x14>
  {
  }
}
 8001492:	bd38      	pop	{r3, r4, r5, pc}
 8001494:	20000010 	.word	0x20000010

08001498 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001498:	2800      	cmp	r0, #0
 800149a:	d07b      	beq.n	8001594 <HAL_CAN_Init+0xfc>
{
 800149c:	b538      	push	{r3, r4, r5, lr}
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800149e:	f890 3020 	ldrb.w	r3, [r0, #32]
 80014a2:	4604      	mov	r4, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d072      	beq.n	800158e <HAL_CAN_Init+0xf6>
    HAL_CAN_MspInit(hcan);
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80014a8:	6822      	ldr	r2, [r4, #0]
 80014aa:	6813      	ldr	r3, [r2, #0]
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014b2:	f7ff ffd9 	bl	8001468 <HAL_GetTick>
 80014b6:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80014b8:	e004      	b.n	80014c4 <HAL_CAN_Init+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014ba:	f7ff ffd5 	bl	8001468 <HAL_GetTick>
 80014be:	1b40      	subs	r0, r0, r5
 80014c0:	280a      	cmp	r0, #10
 80014c2:	d85b      	bhi.n	800157c <HAL_CAN_Init+0xe4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80014c4:	6823      	ldr	r3, [r4, #0]
 80014c6:	685a      	ldr	r2, [r3, #4]
 80014c8:	07d1      	lsls	r1, r2, #31
 80014ca:	d5f6      	bpl.n	80014ba <HAL_CAN_Init+0x22>
      return HAL_ERROR;
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	f022 0202 	bic.w	r2, r2, #2
 80014d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014d4:	f7ff ffc8 	bl	8001468 <HAL_GetTick>
 80014d8:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80014da:	e004      	b.n	80014e6 <HAL_CAN_Init+0x4e>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014dc:	f7ff ffc4 	bl	8001468 <HAL_GetTick>
 80014e0:	1b40      	subs	r0, r0, r5
 80014e2:	280a      	cmp	r0, #10
 80014e4:	d84a      	bhi.n	800157c <HAL_CAN_Init+0xe4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80014e6:	6823      	ldr	r3, [r4, #0]
 80014e8:	685a      	ldr	r2, [r3, #4]
 80014ea:	0792      	lsls	r2, r2, #30
 80014ec:	d4f6      	bmi.n	80014dc <HAL_CAN_Init+0x44>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80014ee:	7e22      	ldrb	r2, [r4, #24]
 80014f0:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	bf0c      	ite	eq
 80014f6:	f042 0280 	orreq.w	r2, r2, #128	@ 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80014fa:	f022 0280 	bicne.w	r2, r2, #128	@ 0x80
 80014fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001500:	7e62      	ldrb	r2, [r4, #25]
 8001502:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	bf0c      	ite	eq
 8001508:	f042 0240 	orreq.w	r2, r2, #64	@ 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800150c:	f022 0240 	bicne.w	r2, r2, #64	@ 0x40
 8001510:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001512:	7ea2      	ldrb	r2, [r4, #26]
 8001514:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	bf0c      	ite	eq
 800151a:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800151e:	f022 0220 	bicne.w	r2, r2, #32
 8001522:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001524:	7ee2      	ldrb	r2, [r4, #27]
 8001526:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	bf0c      	ite	eq
 800152c:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001530:	f042 0210 	orrne.w	r2, r2, #16
 8001534:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001536:	7f22      	ldrb	r2, [r4, #28]
 8001538:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	bf0c      	ite	eq
 800153e:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001542:	f022 0208 	bicne.w	r2, r2, #8
 8001546:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001548:	7f62      	ldrb	r2, [r4, #29]
 800154a:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	bf0c      	ite	eq
 8001550:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001554:	f022 0204 	bicne.w	r2, r2, #4
 8001558:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800155a:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
 800155e:	6921      	ldr	r1, [r4, #16]
 8001560:	4302      	orrs	r2, r0
 8001562:	430a      	orrs	r2, r1
 8001564:	6960      	ldr	r0, [r4, #20]
 8001566:	6861      	ldr	r1, [r4, #4]
 8001568:	4302      	orrs	r2, r0
 800156a:	3901      	subs	r1, #1
 800156c:	430a      	orrs	r2, r1
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800156e:	2000      	movs	r0, #0

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001570:	2101      	movs	r1, #1
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001572:	61da      	str	r2, [r3, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001574:	6260      	str	r0, [r4, #36]	@ 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8001576:	f884 1020 	strb.w	r1, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 800157a:	bd38      	pop	{r3, r4, r5, pc}
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800157c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 800157e:	2205      	movs	r2, #5
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001580:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001584:	6263      	str	r3, [r4, #36]	@ 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8001586:	f884 2020 	strb.w	r2, [r4, #32]
    return HAL_ERROR;
 800158a:	2001      	movs	r0, #1
}
 800158c:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 800158e:	f7ff f80f 	bl	80005b0 <HAL_CAN_MspInit>
 8001592:	e789      	b.n	80014a8 <HAL_CAN_Init+0x10>
    return HAL_ERROR;
 8001594:	2001      	movs	r0, #1
}
 8001596:	4770      	bx	lr

08001598 <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001598:	f890 2020 	ldrb.w	r2, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 800159c:	3a01      	subs	r2, #1
 800159e:	2a01      	cmp	r2, #1
 80015a0:	d906      	bls.n	80015b0 <HAL_CAN_ConfigFilter+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015a2:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 80015a4:	4603      	mov	r3, r0
 80015a6:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000

    return HAL_ERROR;
 80015aa:	2001      	movs	r0, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015ac:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 80015ae:	4770      	bx	lr
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80015b0:	4b40      	ldr	r3, [pc, #256]	@ (80016b4 <HAL_CAN_ConfigFilter+0x11c>)
 80015b2:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80015b6:	2001      	movs	r0, #1
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80015b8:	4302      	orrs	r2, r0
{
 80015ba:	b430      	push	{r4, r5}
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80015bc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80015c0:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80015c4:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 80015c8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80015cc:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80015d0:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 80015d2:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 80015d6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80015da:	694a      	ldr	r2, [r1, #20]
 80015dc:	f002 041f 	and.w	r4, r2, #31
 80015e0:	40a0      	lsls	r0, r4
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80015e2:	f8d3 421c 	ldr.w	r4, [r3, #540]	@ 0x21c
 80015e6:	ea24 0400 	bic.w	r4, r4, r0
 80015ea:	f8c3 421c 	str.w	r4, [r3, #540]	@ 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80015ee:	69cd      	ldr	r5, [r1, #28]
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80015f0:	43c4      	mvns	r4, r0
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80015f2:	2d00      	cmp	r5, #0
 80015f4:	d145      	bne.n	8001682 <HAL_CAN_ConfigFilter+0xea>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80015f6:	f8d3 520c 	ldr.w	r5, [r3, #524]	@ 0x20c
 80015fa:	4025      	ands	r5, r4
 80015fc:	f8c3 520c 	str.w	r5, [r3, #524]	@ 0x20c
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001600:	00d2      	lsls	r2, r2, #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001602:	68cd      	ldr	r5, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001604:	888b      	ldrh	r3, [r1, #4]
 8001606:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800160a:	f502 42c8 	add.w	r2, r2, #25600	@ 0x6400
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800160e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001612:	f8c2 3240 	str.w	r3, [r2, #576]	@ 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001616:	688d      	ldr	r5, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001618:	880b      	ldrh	r3, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800161a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800161e:	f8c2 3244 	str.w	r3, [r2, #580]	@ 0x244
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001622:	698b      	ldr	r3, [r1, #24]
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001624:	4a23      	ldr	r2, [pc, #140]	@ (80016b4 <HAL_CAN_ConfigFilter+0x11c>)
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001626:	bb33      	cbnz	r3, 8001676 <HAL_CAN_ConfigFilter+0xde>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001628:	f8d2 3204 	ldr.w	r3, [r2, #516]	@ 0x204
 800162c:	4023      	ands	r3, r4
 800162e:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001632:	690b      	ldr	r3, [r1, #16]
 8001634:	b9c3      	cbnz	r3, 8001668 <HAL_CAN_ConfigFilter+0xd0>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001636:	4b1f      	ldr	r3, [pc, #124]	@ (80016b4 <HAL_CAN_ConfigFilter+0x11c>)
 8001638:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800163c:	4014      	ands	r4, r2
 800163e:	f8c3 4214 	str.w	r4, [r3, #532]	@ 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001642:	6a0b      	ldr	r3, [r1, #32]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d105      	bne.n	8001654 <HAL_CAN_ConfigFilter+0xbc>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001648:	4a1a      	ldr	r2, [pc, #104]	@ (80016b4 <HAL_CAN_ConfigFilter+0x11c>)
 800164a:	f8d2 321c 	ldr.w	r3, [r2, #540]	@ 0x21c
 800164e:	4303      	orrs	r3, r0
 8001650:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001654:	4a17      	ldr	r2, [pc, #92]	@ (80016b4 <HAL_CAN_ConfigFilter+0x11c>)
 8001656:	f8d2 3200 	ldr.w	r3, [r2, #512]	@ 0x200
 800165a:	f023 0301 	bic.w	r3, r3, #1
    return HAL_OK;
 800165e:	2000      	movs	r0, #0
}
 8001660:	bc30      	pop	{r4, r5}
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001662:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
}
 8001666:	4770      	bx	lr
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001668:	4a12      	ldr	r2, [pc, #72]	@ (80016b4 <HAL_CAN_ConfigFilter+0x11c>)
 800166a:	f8d2 3214 	ldr.w	r3, [r2, #532]	@ 0x214
 800166e:	4303      	orrs	r3, r0
 8001670:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214
 8001674:	e7e5      	b.n	8001642 <HAL_CAN_ConfigFilter+0xaa>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001676:	f8d2 3204 	ldr.w	r3, [r2, #516]	@ 0x204
 800167a:	4303      	orrs	r3, r0
 800167c:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204
 8001680:	e7d7      	b.n	8001632 <HAL_CAN_ConfigFilter+0x9a>
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001682:	2d01      	cmp	r5, #1
 8001684:	d1cd      	bne.n	8001622 <HAL_CAN_ConfigFilter+0x8a>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001686:	f8d3 520c 	ldr.w	r5, [r3, #524]	@ 0x20c
 800168a:	4305      	orrs	r5, r0
 800168c:	f8c3 520c 	str.w	r5, [r3, #524]	@ 0x20c
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001690:	00d2      	lsls	r2, r2, #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001692:	680d      	ldr	r5, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001694:	888b      	ldrh	r3, [r1, #4]
 8001696:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800169a:	f502 42c8 	add.w	r2, r2, #25600	@ 0x6400
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800169e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80016a2:	f8c2 3240 	str.w	r3, [r2, #576]	@ 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80016a6:	688d      	ldr	r5, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80016a8:	898b      	ldrh	r3, [r1, #12]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80016aa:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80016ae:	f8c2 3244 	str.w	r3, [r2, #580]	@ 0x244
 80016b2:	e7b6      	b.n	8001622 <HAL_CAN_ConfigFilter+0x8a>
 80016b4:	40006400 	.word	0x40006400

080016b8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80016b8:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80016ba:	f890 3020 	ldrb.w	r3, [r0, #32]
 80016be:	2b01      	cmp	r3, #1
{
 80016c0:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 80016c2:	d005      	beq.n	80016d0 <HAL_CAN_Start+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80016c4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80016c6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80016ca:	6243      	str	r3, [r0, #36]	@ 0x24
        return HAL_ERROR;
 80016cc:	2001      	movs	r0, #1

    return HAL_ERROR;
  }
}
 80016ce:	bd38      	pop	{r3, r4, r5, pc}
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80016d0:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 80016d2:	2302      	movs	r3, #2
 80016d4:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80016d8:	6813      	ldr	r3, [r2, #0]
 80016da:	f023 0301 	bic.w	r3, r3, #1
 80016de:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80016e0:	f7ff fec2 	bl	8001468 <HAL_GetTick>
 80016e4:	4605      	mov	r5, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80016e6:	e004      	b.n	80016f2 <HAL_CAN_Start+0x3a>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016e8:	f7ff febe 	bl	8001468 <HAL_GetTick>
 80016ec:	1b43      	subs	r3, r0, r5
 80016ee:	2b0a      	cmp	r3, #10
 80016f0:	d807      	bhi.n	8001702 <HAL_CAN_Start+0x4a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80016f2:	6823      	ldr	r3, [r4, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f013 0301 	ands.w	r3, r3, #1
 80016fa:	d1f5      	bne.n	80016e8 <HAL_CAN_Start+0x30>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016fc:	6263      	str	r3, [r4, #36]	@ 0x24
    return HAL_OK;
 80016fe:	4618      	mov	r0, r3
}
 8001700:	bd38      	pop	{r3, r4, r5, pc}
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001702:	6a63      	ldr	r3, [r4, #36]	@ 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8001704:	2205      	movs	r2, #5
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001706:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800170a:	6263      	str	r3, [r4, #36]	@ 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 800170c:	f884 2020 	strb.w	r2, [r4, #32]
        return HAL_ERROR;
 8001710:	e7dc      	b.n	80016cc <HAL_CAN_Start+0x14>
 8001712:	bf00      	nop

08001714 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8001714:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8001716:	f890 3020 	ldrb.w	r3, [r0, #32]
 800171a:	2b02      	cmp	r3, #2
{
 800171c:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_LISTENING)
 800171e:	d005      	beq.n	800172c <HAL_CAN_Stop+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8001720:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001722:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001726:	6243      	str	r3, [r0, #36]	@ 0x24
        return HAL_ERROR;
 8001728:	2001      	movs	r0, #1

    return HAL_ERROR;
  }
}
 800172a:	bd38      	pop	{r3, r4, r5, pc}
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800172c:	6802      	ldr	r2, [r0, #0]
 800172e:	6813      	ldr	r3, [r2, #0]
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001736:	f7ff fe97 	bl	8001468 <HAL_GetTick>
 800173a:	4605      	mov	r5, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800173c:	e004      	b.n	8001748 <HAL_CAN_Stop+0x34>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800173e:	f7ff fe93 	bl	8001468 <HAL_GetTick>
 8001742:	1b43      	subs	r3, r0, r5
 8001744:	2b0a      	cmp	r3, #10
 8001746:	d80c      	bhi.n	8001762 <HAL_CAN_Stop+0x4e>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001748:	6823      	ldr	r3, [r4, #0]
 800174a:	685a      	ldr	r2, [r3, #4]
 800174c:	07d2      	lsls	r2, r2, #31
 800174e:	d5f6      	bpl.n	800173e <HAL_CAN_Stop+0x2a>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001750:	681a      	ldr	r2, [r3, #0]
    hcan->State = HAL_CAN_STATE_READY;
 8001752:	2101      	movs	r1, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001754:	f022 0202 	bic.w	r2, r2, #2
 8001758:	601a      	str	r2, [r3, #0]
    hcan->State = HAL_CAN_STATE_READY;
 800175a:	f884 1020 	strb.w	r1, [r4, #32]
    return HAL_OK;
 800175e:	2000      	movs	r0, #0
}
 8001760:	bd38      	pop	{r3, r4, r5, pc}
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001762:	6a63      	ldr	r3, [r4, #36]	@ 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8001764:	2205      	movs	r2, #5
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001766:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800176a:	6263      	str	r3, [r4, #36]	@ 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 800176c:	f884 2020 	strb.w	r2, [r4, #32]
        return HAL_ERROR;
 8001770:	e7da      	b.n	8001728 <HAL_CAN_Stop+0x14>
 8001772:	bf00      	nop

08001774 <HAL_CAN_DeInit>:
  if (hcan == NULL)
 8001774:	b188      	cbz	r0, 800179a <HAL_CAN_DeInit+0x26>
{
 8001776:	b510      	push	{r4, lr}
 8001778:	4604      	mov	r4, r0
  (void)HAL_CAN_Stop(hcan);
 800177a:	f7ff ffcb 	bl	8001714 <HAL_CAN_Stop>
  HAL_CAN_MspDeInit(hcan);
 800177e:	4620      	mov	r0, r4
 8001780:	f7fe ff5a 	bl	8000638 <HAL_CAN_MspDeInit>
  SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 8001784:	6821      	ldr	r1, [r4, #0]
 8001786:	680a      	ldr	r2, [r1, #0]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001788:	2300      	movs	r3, #0
  SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 800178a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800178e:	600a      	str	r2, [r1, #0]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001790:	6263      	str	r3, [r4, #36]	@ 0x24
  hcan->State = HAL_CAN_STATE_RESET;
 8001792:	f884 3020 	strb.w	r3, [r4, #32]
  return HAL_OK;
 8001796:	4618      	mov	r0, r3
}
 8001798:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800179a:	2001      	movs	r0, #1
}
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop

080017a0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80017a0:	b430      	push	{r4, r5}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80017a2:	f890 c020 	ldrb.w	ip, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80017a6:	6805      	ldr	r5, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80017a8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80017ac:	f1bc 0f01 	cmp.w	ip, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80017b0:	68ac      	ldr	r4, [r5, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 80017b2:	d839      	bhi.n	8001828 <HAL_CAN_AddTxMessage+0x88>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80017b4:	f014 5fe0 	tst.w	r4, #469762048	@ 0x1c000000
 80017b8:	d106      	bne.n	80017c8 <HAL_CAN_AddTxMessage+0x28>
      return HAL_OK;
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80017ba:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80017bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80017c0:	6243      	str	r3, [r0, #36]	@ 0x24

      return HAL_ERROR;
 80017c2:	2001      	movs	r0, #1
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 80017c4:	bc30      	pop	{r4, r5}
 80017c6:	4770      	bx	lr
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80017c8:	f3c4 6401 	ubfx	r4, r4, #24, #2
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80017cc:	2001      	movs	r0, #1
 80017ce:	40a0      	lsls	r0, r4
 80017d0:	6018      	str	r0, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 80017d2:	688b      	ldr	r3, [r1, #8]
 80017d4:	b36b      	cbz	r3, 8001832 <HAL_CAN_AddTxMessage+0x92>
                                                           pHeader->IDE |
 80017d6:	68c8      	ldr	r0, [r1, #12]
 80017d8:	4303      	orrs	r3, r0
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80017da:	6848      	ldr	r0, [r1, #4]
                                                           pHeader->IDE |
 80017dc:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80017e0:	f104 0018 	add.w	r0, r4, #24
 80017e4:	0100      	lsls	r0, r0, #4
 80017e6:	502b      	str	r3, [r5, r0]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80017e8:	eb05 1c04 	add.w	ip, r5, r4, lsl #4
 80017ec:	690b      	ldr	r3, [r1, #16]
 80017ee:	f8cc 3184 	str.w	r3, [ip, #388]	@ 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 80017f2:	7d0b      	ldrb	r3, [r1, #20]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	ea4f 1104 	mov.w	r1, r4, lsl #4
 80017fa:	d105      	bne.n	8001808 <HAL_CAN_AddTxMessage+0x68>
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80017fc:	f8dc 3184 	ldr.w	r3, [ip, #388]	@ 0x184
 8001800:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001804:	f8cc 3184 	str.w	r3, [ip, #388]	@ 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001808:	186b      	adds	r3, r5, r1
 800180a:	6851      	ldr	r1, [r2, #4]
 800180c:	f8c3 118c 	str.w	r1, [r3, #396]	@ 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001810:	6812      	ldr	r2, [r2, #0]
 8001812:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001816:	f8dc 3180 	ldr.w	r3, [ip, #384]	@ 0x180
 800181a:	f043 0301 	orr.w	r3, r3, #1
      return HAL_OK;
 800181e:	2000      	movs	r0, #0
}
 8001820:	bc30      	pop	{r4, r5}
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001822:	f8cc 3180 	str.w	r3, [ip, #384]	@ 0x180
}
 8001826:	4770      	bx	lr
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001828:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800182a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800182e:	6243      	str	r3, [r0, #36]	@ 0x24
    return HAL_ERROR;
 8001830:	e7c7      	b.n	80017c2 <HAL_CAN_AddTxMessage+0x22>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001832:	68cb      	ldr	r3, [r1, #12]
 8001834:	6808      	ldr	r0, [r1, #0]
 8001836:	ea43 5040 	orr.w	r0, r3, r0, lsl #21
 800183a:	f104 0318 	add.w	r3, r4, #24
 800183e:	011b      	lsls	r3, r3, #4
 8001840:	50e8      	str	r0, [r5, r3]
 8001842:	e7d1      	b.n	80017e8 <HAL_CAN_AddTxMessage+0x48>

08001844 <HAL_CAN_GetRxMessage>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8001844:	f890 c020 	ldrb.w	ip, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001848:	f10c 3cff 	add.w	ip, ip, #4294967295
 800184c:	f1bc 0f01 	cmp.w	ip, #1
 8001850:	d86b      	bhi.n	800192a <HAL_CAN_GetRxMessage+0xe6>
{
 8001852:	b570      	push	{r4, r5, r6, lr}
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001854:	6804      	ldr	r4, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001856:	b941      	cbnz	r1, 800186a <HAL_CAN_GetRxMessage+0x26>
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001858:	68e5      	ldr	r5, [r4, #12]
 800185a:	07ad      	lsls	r5, r5, #30
 800185c:	d108      	bne.n	8001870 <HAL_CAN_GetRxMessage+0x2c>
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800185e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001860:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001864:	6243      	str	r3, [r0, #36]	@ 0x24
        return HAL_ERROR;
 8001866:	2001      	movs	r0, #1
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8001868:	bd70      	pop	{r4, r5, r6, pc}
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800186a:	6925      	ldr	r5, [r4, #16]
 800186c:	07ae      	lsls	r6, r5, #30
 800186e:	d0f6      	beq.n	800185e <HAL_CAN_GetRxMessage+0x1a>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001870:	eb04 1c01 	add.w	ip, r4, r1, lsl #4
 8001874:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 8001878:	f8dc 51b0 	ldr.w	r5, [ip, #432]	@ 0x1b0
 800187c:	f005 0504 	and.w	r5, r5, #4
 8001880:	6095      	str	r5, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001882:	2d00      	cmp	r5, #0
 8001884:	d057      	beq.n	8001936 <HAL_CAN_GetRxMessage+0xf2>
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001886:	f8dc 51b0 	ldr.w	r5, [ip, #432]	@ 0x1b0
 800188a:	08ed      	lsrs	r5, r5, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800188c:	6055      	str	r5, [r2, #4]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800188e:	f8dc 51b0 	ldr.w	r5, [ip, #432]	@ 0x1b0
 8001892:	f005 0502 	and.w	r5, r5, #2
 8001896:	60d5      	str	r5, [r2, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001898:	f8dc 51b4 	ldr.w	r5, [ip, #436]	@ 0x1b4
 800189c:	072d      	lsls	r5, r5, #28
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800189e:	bf58      	it	pl
 80018a0:	f8dc 51b4 	ldrpl.w	r5, [ip, #436]	@ 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80018a4:	f8dc 61b4 	ldr.w	r6, [ip, #436]	@ 0x1b4
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80018a8:	bf54      	ite	pl
 80018aa:	f005 050f 	andpl.w	r5, r5, #15
      pHeader->DLC = 8U;
 80018ae:	2508      	movmi	r5, #8
 80018b0:	6115      	str	r5, [r2, #16]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80018b2:	4474      	add	r4, lr
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80018b4:	f8dc 51b4 	ldr.w	r5, [ip, #436]	@ 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80018b8:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80018bc:	6196      	str	r6, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80018be:	0c2d      	lsrs	r5, r5, #16
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80018c0:	f8d4 61b8 	ldr.w	r6, [r4, #440]	@ 0x1b8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80018c4:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80018c6:	701e      	strb	r6, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80018c8:	6802      	ldr	r2, [r0, #0]
 80018ca:	4472      	add	r2, lr
 80018cc:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 80018d0:	0a12      	lsrs	r2, r2, #8
 80018d2:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80018d4:	6802      	ldr	r2, [r0, #0]
 80018d6:	4472      	add	r2, lr
 80018d8:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 80018dc:	0c12      	lsrs	r2, r2, #16
 80018de:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80018e0:	6802      	ldr	r2, [r0, #0]
 80018e2:	4472      	add	r2, lr
 80018e4:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 80018e8:	0e12      	lsrs	r2, r2, #24
 80018ea:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80018ec:	6802      	ldr	r2, [r0, #0]
 80018ee:	4472      	add	r2, lr
 80018f0:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 80018f4:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80018f6:	6802      	ldr	r2, [r0, #0]
 80018f8:	4472      	add	r2, lr
 80018fa:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 80018fe:	0a12      	lsrs	r2, r2, #8
 8001900:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001902:	6802      	ldr	r2, [r0, #0]
 8001904:	4472      	add	r2, lr
 8001906:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 800190a:	0c12      	lsrs	r2, r2, #16
 800190c:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800190e:	6802      	ldr	r2, [r0, #0]
 8001910:	4472      	add	r2, lr
 8001912:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 8001916:	0e12      	lsrs	r2, r2, #24
 8001918:	71da      	strb	r2, [r3, #7]
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800191a:	6802      	ldr	r2, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800191c:	b981      	cbnz	r1, 8001940 <HAL_CAN_GetRxMessage+0xfc>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800191e:	68d3      	ldr	r3, [r2, #12]
 8001920:	f043 0320 	orr.w	r3, r3, #32
 8001924:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8001926:	2000      	movs	r0, #0
}
 8001928:	bd70      	pop	{r4, r5, r6, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800192a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800192c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001930:	6243      	str	r3, [r0, #36]	@ 0x24
        return HAL_ERROR;
 8001932:	2001      	movs	r0, #1
}
 8001934:	4770      	bx	lr
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001936:	f8dc 51b0 	ldr.w	r5, [ip, #432]	@ 0x1b0
 800193a:	0d6d      	lsrs	r5, r5, #21
 800193c:	6015      	str	r5, [r2, #0]
 800193e:	e7a6      	b.n	800188e <HAL_CAN_GetRxMessage+0x4a>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001940:	6913      	ldr	r3, [r2, #16]
 8001942:	f043 0320 	orr.w	r3, r3, #32
 8001946:	6113      	str	r3, [r2, #16]
 8001948:	e7ed      	b.n	8001926 <HAL_CAN_GetRxMessage+0xe2>
 800194a:	bf00      	nop

0800194c <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 800194c:	f890 2020 	ldrb.w	r2, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001950:	3a01      	subs	r2, #1
 8001952:	2a01      	cmp	r2, #1
{
 8001954:	4603      	mov	r3, r0
  if ((state == HAL_CAN_STATE_READY) ||
 8001956:	d905      	bls.n	8001964 <HAL_CAN_ActivateNotification+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001958:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 800195a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000

    return HAL_ERROR;
 800195e:	2001      	movs	r0, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001960:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8001962:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001964:	6802      	ldr	r2, [r0, #0]
 8001966:	6953      	ldr	r3, [r2, #20]
 8001968:	430b      	orrs	r3, r1
    return HAL_OK;
 800196a:	2000      	movs	r0, #0
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800196c:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 800196e:	4770      	bx	lr

08001970 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @brief  Transmission Mailbox 0 complete callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop

08001974 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @brief  Transmission Mailbox 1 complete callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop

08001978 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @brief  Transmission Mailbox 2 complete callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop

0800197c <HAL_CAN_TxMailbox0AbortCallback>:
  * @brief  Transmission Mailbox 0 Cancellation callback.
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop

08001980 <HAL_CAN_TxMailbox1AbortCallback>:
  * @brief  Transmission Mailbox 1 Cancellation callback.
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop

08001984 <HAL_CAN_TxMailbox2AbortCallback>:
  * @brief  Transmission Mailbox 2 Cancellation callback.
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop

08001988 <HAL_CAN_RxFifo0FullCallback>:
  * @brief  Rx FIFO 0 full callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop

0800198c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @brief  Rx FIFO 1 message pending callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop

08001990 <HAL_CAN_RxFifo1FullCallback>:
  * @brief  Rx FIFO 1 full callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop

08001994 <HAL_CAN_SleepCallback>:
  * @brief  Sleep callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop

08001998 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @brief  WakeUp from Rx message callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop

0800199c <HAL_CAN_ErrorCallback>:
  * @brief  Error CAN callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop

080019a0 <HAL_CAN_IRQHandler>:
{
 80019a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80019a4:	6803      	ldr	r3, [r0, #0]
 80019a6:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80019a8:	f8d3 8004 	ldr.w	r8, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80019ac:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80019ae:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80019b2:	f8d3 9010 	ldr.w	r9, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80019b6:	f8d3 a018 	ldr.w	sl, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80019ba:	f014 0601 	ands.w	r6, r4, #1
{
 80019be:	4605      	mov	r5, r0
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80019c0:	d01f      	beq.n	8001a02 <HAL_CAN_IRQHandler+0x62>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80019c2:	07f9      	lsls	r1, r7, #31
 80019c4:	f100 8089 	bmi.w	8001ada <HAL_CAN_IRQHandler+0x13a>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80019c8:	2600      	movs	r6, #0
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80019ca:	05f9      	lsls	r1, r7, #23
 80019cc:	d50b      	bpl.n	80019e6 <HAL_CAN_IRQHandler+0x46>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80019ce:	682b      	ldr	r3, [r5, #0]
 80019d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019d4:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80019d6:	05ba      	lsls	r2, r7, #22
 80019d8:	f100 80db 	bmi.w	8001b92 <HAL_CAN_IRQHandler+0x1f2>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80019dc:	057b      	lsls	r3, r7, #21
 80019de:	f140 80ce 	bpl.w	8001b7e <HAL_CAN_IRQHandler+0x1de>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80019e2:	f446 5600 	orr.w	r6, r6, #8192	@ 0x2000
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80019e6:	03f9      	lsls	r1, r7, #15
 80019e8:	d50b      	bpl.n	8001a02 <HAL_CAN_IRQHandler+0x62>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80019ea:	682b      	ldr	r3, [r5, #0]
 80019ec:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80019f0:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80019f2:	03ba      	lsls	r2, r7, #14
 80019f4:	f100 80d1 	bmi.w	8001b9a <HAL_CAN_IRQHandler+0x1fa>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80019f8:	037b      	lsls	r3, r7, #13
 80019fa:	f140 80c5 	bpl.w	8001b88 <HAL_CAN_IRQHandler+0x1e8>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80019fe:	f446 4600 	orr.w	r6, r6, #32768	@ 0x8000
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001a02:	0721      	lsls	r1, r4, #28
 8001a04:	d502      	bpl.n	8001a0c <HAL_CAN_IRQHandler+0x6c>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001a06:	f01b 0f10 	tst.w	fp, #16
 8001a0a:	d160      	bne.n	8001ace <HAL_CAN_IRQHandler+0x12e>
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001a0c:	0762      	lsls	r2, r4, #29
 8001a0e:	d502      	bpl.n	8001a16 <HAL_CAN_IRQHandler+0x76>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001a10:	f01b 0f08 	tst.w	fp, #8
 8001a14:	d16c      	bne.n	8001af0 <HAL_CAN_IRQHandler+0x150>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001a16:	07a3      	lsls	r3, r4, #30
 8001a18:	d504      	bpl.n	8001a24 <HAL_CAN_IRQHandler+0x84>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001a1a:	682b      	ldr	r3, [r5, #0]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	079f      	lsls	r7, r3, #30
 8001a20:	f040 8086 	bne.w	8001b30 <HAL_CAN_IRQHandler+0x190>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001a24:	0660      	lsls	r0, r4, #25
 8001a26:	d502      	bpl.n	8001a2e <HAL_CAN_IRQHandler+0x8e>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001a28:	f019 0f10 	tst.w	r9, #16
 8001a2c:	d149      	bne.n	8001ac2 <HAL_CAN_IRQHandler+0x122>
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001a2e:	06a1      	lsls	r1, r4, #26
 8001a30:	d502      	bpl.n	8001a38 <HAL_CAN_IRQHandler+0x98>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001a32:	f019 0f08 	tst.w	r9, #8
 8001a36:	d162      	bne.n	8001afe <HAL_CAN_IRQHandler+0x15e>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001a38:	06e2      	lsls	r2, r4, #27
 8001a3a:	d503      	bpl.n	8001a44 <HAL_CAN_IRQHandler+0xa4>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001a3c:	682b      	ldr	r3, [r5, #0]
 8001a3e:	691b      	ldr	r3, [r3, #16]
 8001a40:	079b      	lsls	r3, r3, #30
 8001a42:	d16a      	bne.n	8001b1a <HAL_CAN_IRQHandler+0x17a>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001a44:	03a7      	lsls	r7, r4, #14
 8001a46:	d502      	bpl.n	8001a4e <HAL_CAN_IRQHandler+0xae>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001a48:	f018 0f10 	tst.w	r8, #16
 8001a4c:	d169      	bne.n	8001b22 <HAL_CAN_IRQHandler+0x182>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001a4e:	03e0      	lsls	r0, r4, #15
 8001a50:	d502      	bpl.n	8001a58 <HAL_CAN_IRQHandler+0xb8>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001a52:	f018 0f08 	tst.w	r8, #8
 8001a56:	d159      	bne.n	8001b0c <HAL_CAN_IRQHandler+0x16c>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001a58:	0421      	lsls	r1, r4, #16
 8001a5a:	d52e      	bpl.n	8001aba <HAL_CAN_IRQHandler+0x11a>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001a5c:	f018 0f04 	tst.w	r8, #4
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001a60:	682b      	ldr	r3, [r5, #0]
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001a62:	d028      	beq.n	8001ab6 <HAL_CAN_IRQHandler+0x116>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001a64:	05e2      	lsls	r2, r4, #23
 8001a66:	bf44      	itt	mi
 8001a68:	f00a 0201 	andmi.w	r2, sl, #1
 8001a6c:	4316      	orrmi	r6, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001a6e:	05a7      	lsls	r7, r4, #22
 8001a70:	d516      	bpl.n	8001aa0 <HAL_CAN_IRQHandler+0x100>
 8001a72:	f01a 0f02 	tst.w	sl, #2
 8001a76:	d013      	beq.n	8001aa0 <HAL_CAN_IRQHandler+0x100>
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001a78:	0560      	lsls	r0, r4, #21
        errorcode |= HAL_CAN_ERROR_EPV;
 8001a7a:	f046 0602 	orr.w	r6, r6, #2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001a7e:	f404 6200 	and.w	r2, r4, #2048	@ 0x800
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001a82:	d55e      	bpl.n	8001b42 <HAL_CAN_IRQHandler+0x1a2>
 8001a84:	f01a 0f04 	tst.w	sl, #4
 8001a88:	d159      	bne.n	8001b3e <HAL_CAN_IRQHandler+0x19e>
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001a8a:	b98a      	cbnz	r2, 8001ab0 <HAL_CAN_IRQHandler+0x110>
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001a8c:	2204      	movs	r2, #4
 8001a8e:	605a      	str	r2, [r3, #4]
    hcan->ErrorCode |= errorcode;
 8001a90:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8001a92:	4333      	orrs	r3, r6
    HAL_CAN_ErrorCallback(hcan);
 8001a94:	4628      	mov	r0, r5
    hcan->ErrorCode |= errorcode;
 8001a96:	626b      	str	r3, [r5, #36]	@ 0x24
    HAL_CAN_ErrorCallback(hcan);
 8001a98:	f7ff ff80 	bl	800199c <HAL_CAN_ErrorCallback>
}
 8001a9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001aa0:	0561      	lsls	r1, r4, #21
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001aa2:	f404 6200 	and.w	r2, r4, #2048	@ 0x800
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001aa6:	d502      	bpl.n	8001aae <HAL_CAN_IRQHandler+0x10e>
 8001aa8:	f01a 0f04 	tst.w	sl, #4
 8001aac:	d147      	bne.n	8001b3e <HAL_CAN_IRQHandler+0x19e>
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001aae:	b112      	cbz	r2, 8001ab6 <HAL_CAN_IRQHandler+0x116>
 8001ab0:	f01a 0a70 	ands.w	sl, sl, #112	@ 0x70
 8001ab4:	d14a      	bne.n	8001b4c <HAL_CAN_IRQHandler+0x1ac>
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001ab6:	2204      	movs	r2, #4
 8001ab8:	605a      	str	r2, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001aba:	2e00      	cmp	r6, #0
 8001abc:	d1e8      	bne.n	8001a90 <HAL_CAN_IRQHandler+0xf0>
}
 8001abe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001ac2:	682b      	ldr	r3, [r5, #0]
 8001ac4:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001ac6:	f446 6680 	orr.w	r6, r6, #1024	@ 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001aca:	611a      	str	r2, [r3, #16]
 8001acc:	e7af      	b.n	8001a2e <HAL_CAN_IRQHandler+0x8e>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001ace:	682b      	ldr	r3, [r5, #0]
 8001ad0:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001ad2:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001ad6:	60da      	str	r2, [r3, #12]
 8001ad8:	e798      	b.n	8001a0c <HAL_CAN_IRQHandler+0x6c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001ada:	2201      	movs	r2, #1
 8001adc:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001ade:	07ba      	lsls	r2, r7, #30
 8001ae0:	d42a      	bmi.n	8001b38 <HAL_CAN_IRQHandler+0x198>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001ae2:	077b      	lsls	r3, r7, #29
 8001ae4:	d448      	bmi.n	8001b78 <HAL_CAN_IRQHandler+0x1d8>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001ae6:	073e      	lsls	r6, r7, #28
 8001ae8:	d56a      	bpl.n	8001bc0 <HAL_CAN_IRQHandler+0x220>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001aea:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
 8001aee:	e76c      	b.n	80019ca <HAL_CAN_IRQHandler+0x2a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001af0:	682b      	ldr	r3, [r5, #0]
 8001af2:	2208      	movs	r2, #8
 8001af4:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001af6:	4628      	mov	r0, r5
 8001af8:	f7ff ff46 	bl	8001988 <HAL_CAN_RxFifo0FullCallback>
 8001afc:	e78b      	b.n	8001a16 <HAL_CAN_IRQHandler+0x76>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001afe:	682b      	ldr	r3, [r5, #0]
 8001b00:	2208      	movs	r2, #8
 8001b02:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001b04:	4628      	mov	r0, r5
 8001b06:	f7ff ff43 	bl	8001990 <HAL_CAN_RxFifo1FullCallback>
 8001b0a:	e795      	b.n	8001a38 <HAL_CAN_IRQHandler+0x98>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001b0c:	682b      	ldr	r3, [r5, #0]
 8001b0e:	2208      	movs	r2, #8
 8001b10:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001b12:	4628      	mov	r0, r5
 8001b14:	f7ff ff40 	bl	8001998 <HAL_CAN_WakeUpFromRxMsgCallback>
 8001b18:	e79e      	b.n	8001a58 <HAL_CAN_IRQHandler+0xb8>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001b1a:	4628      	mov	r0, r5
 8001b1c:	f7ff ff36 	bl	800198c <HAL_CAN_RxFifo1MsgPendingCallback>
 8001b20:	e790      	b.n	8001a44 <HAL_CAN_IRQHandler+0xa4>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001b22:	682b      	ldr	r3, [r5, #0]
 8001b24:	2210      	movs	r2, #16
 8001b26:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8001b28:	4628      	mov	r0, r5
 8001b2a:	f7ff ff33 	bl	8001994 <HAL_CAN_SleepCallback>
 8001b2e:	e78e      	b.n	8001a4e <HAL_CAN_IRQHandler+0xae>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001b30:	4628      	mov	r0, r5
 8001b32:	f7fe fd9f 	bl	8000674 <HAL_CAN_RxFifo0MsgPendingCallback>
 8001b36:	e775      	b.n	8001a24 <HAL_CAN_IRQHandler+0x84>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001b38:	f7ff ff1a 	bl	8001970 <HAL_CAN_TxMailbox0CompleteCallback>
 8001b3c:	e744      	b.n	80019c8 <HAL_CAN_IRQHandler+0x28>
        errorcode |= HAL_CAN_ERROR_BOF;
 8001b3e:	f046 0604 	orr.w	r6, r6, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b42:	2a00      	cmp	r2, #0
 8001b44:	d0a2      	beq.n	8001a8c <HAL_CAN_IRQHandler+0xec>
 8001b46:	f01a 0a70 	ands.w	sl, sl, #112	@ 0x70
 8001b4a:	d09f      	beq.n	8001a8c <HAL_CAN_IRQHandler+0xec>
        switch (esrflags & CAN_ESR_LEC)
 8001b4c:	f1ba 0f40 	cmp.w	sl, #64	@ 0x40
 8001b50:	d046      	beq.n	8001be0 <HAL_CAN_IRQHandler+0x240>
 8001b52:	d826      	bhi.n	8001ba2 <HAL_CAN_IRQHandler+0x202>
 8001b54:	f1ba 0f20 	cmp.w	sl, #32
 8001b58:	d05d      	beq.n	8001c16 <HAL_CAN_IRQHandler+0x276>
 8001b5a:	f1ba 0f30 	cmp.w	sl, #48	@ 0x30
 8001b5e:	d051      	beq.n	8001c04 <HAL_CAN_IRQHandler+0x264>
 8001b60:	f1ba 0f10 	cmp.w	sl, #16
 8001b64:	d137      	bne.n	8001bd6 <HAL_CAN_IRQHandler+0x236>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001b66:	699a      	ldr	r2, [r3, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001b68:	2104      	movs	r1, #4
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001b6a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001b6e:	619a      	str	r2, [r3, #24]
            errorcode |= HAL_CAN_ERROR_STF;
 8001b70:	f046 0608 	orr.w	r6, r6, #8
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001b74:	6059      	str	r1, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001b76:	e78b      	b.n	8001a90 <HAL_CAN_IRQHandler+0xf0>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001b78:	f44f 6600 	mov.w	r6, #2048	@ 0x800
 8001b7c:	e725      	b.n	80019ca <HAL_CAN_IRQHandler+0x2a>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001b7e:	0538      	lsls	r0, r7, #20
 8001b80:	d525      	bpl.n	8001bce <HAL_CAN_IRQHandler+0x22e>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001b82:	f446 4680 	orr.w	r6, r6, #16384	@ 0x4000
 8001b86:	e72e      	b.n	80019e6 <HAL_CAN_IRQHandler+0x46>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001b88:	0338      	lsls	r0, r7, #12
 8001b8a:	d51c      	bpl.n	8001bc6 <HAL_CAN_IRQHandler+0x226>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001b8c:	f446 3680 	orr.w	r6, r6, #65536	@ 0x10000
 8001b90:	e737      	b.n	8001a02 <HAL_CAN_IRQHandler+0x62>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001b92:	4628      	mov	r0, r5
 8001b94:	f7ff feee 	bl	8001974 <HAL_CAN_TxMailbox1CompleteCallback>
 8001b98:	e725      	b.n	80019e6 <HAL_CAN_IRQHandler+0x46>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001b9a:	4628      	mov	r0, r5
 8001b9c:	f7ff feec 	bl	8001978 <HAL_CAN_TxMailbox2CompleteCallback>
 8001ba0:	e72f      	b.n	8001a02 <HAL_CAN_IRQHandler+0x62>
        switch (esrflags & CAN_ESR_LEC)
 8001ba2:	f1ba 0f50 	cmp.w	sl, #80	@ 0x50
 8001ba6:	d024      	beq.n	8001bf2 <HAL_CAN_IRQHandler+0x252>
 8001ba8:	f1ba 0f60 	cmp.w	sl, #96	@ 0x60
 8001bac:	d113      	bne.n	8001bd6 <HAL_CAN_IRQHandler+0x236>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001bae:	699a      	ldr	r2, [r3, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001bb0:	2104      	movs	r1, #4
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001bb2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001bb6:	619a      	str	r2, [r3, #24]
            errorcode |= HAL_CAN_ERROR_CRC;
 8001bb8:	f446 7680 	orr.w	r6, r6, #256	@ 0x100
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001bbc:	6059      	str	r1, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001bbe:	e767      	b.n	8001a90 <HAL_CAN_IRQHandler+0xf0>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001bc0:	f7ff fedc 	bl	800197c <HAL_CAN_TxMailbox0AbortCallback>
 8001bc4:	e700      	b.n	80019c8 <HAL_CAN_IRQHandler+0x28>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001bc6:	4628      	mov	r0, r5
 8001bc8:	f7ff fedc 	bl	8001984 <HAL_CAN_TxMailbox2AbortCallback>
 8001bcc:	e719      	b.n	8001a02 <HAL_CAN_IRQHandler+0x62>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001bce:	4628      	mov	r0, r5
 8001bd0:	f7ff fed6 	bl	8001980 <HAL_CAN_TxMailbox1AbortCallback>
 8001bd4:	e707      	b.n	80019e6 <HAL_CAN_IRQHandler+0x46>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001bd6:	699a      	ldr	r2, [r3, #24]
 8001bd8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001bdc:	619a      	str	r2, [r3, #24]
 8001bde:	e76a      	b.n	8001ab6 <HAL_CAN_IRQHandler+0x116>
 8001be0:	699a      	ldr	r2, [r3, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001be2:	2104      	movs	r1, #4
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001be4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001be8:	619a      	str	r2, [r3, #24]
            errorcode |= HAL_CAN_ERROR_BR;
 8001bea:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001bee:	6059      	str	r1, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001bf0:	e74e      	b.n	8001a90 <HAL_CAN_IRQHandler+0xf0>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001bf2:	699a      	ldr	r2, [r3, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001bf4:	2104      	movs	r1, #4
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001bf6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001bfa:	619a      	str	r2, [r3, #24]
            errorcode |= HAL_CAN_ERROR_BD;
 8001bfc:	f046 0680 	orr.w	r6, r6, #128	@ 0x80
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001c00:	6059      	str	r1, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001c02:	e745      	b.n	8001a90 <HAL_CAN_IRQHandler+0xf0>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001c04:	699a      	ldr	r2, [r3, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001c06:	2104      	movs	r1, #4
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001c08:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001c0c:	619a      	str	r2, [r3, #24]
            errorcode |= HAL_CAN_ERROR_ACK;
 8001c0e:	f046 0620 	orr.w	r6, r6, #32
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001c12:	6059      	str	r1, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001c14:	e73c      	b.n	8001a90 <HAL_CAN_IRQHandler+0xf0>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001c16:	699a      	ldr	r2, [r3, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001c18:	2104      	movs	r1, #4
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001c1a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001c1e:	619a      	str	r2, [r3, #24]
            errorcode |= HAL_CAN_ERROR_FOR;
 8001c20:	f046 0610 	orr.w	r6, r6, #16
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001c24:	6059      	str	r1, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001c26:	e733      	b.n	8001a90 <HAL_CAN_IRQHandler+0xf0>

08001c28 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c28:	4907      	ldr	r1, [pc, #28]	@ (8001c48 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001c2a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c2c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c2e:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c32:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c36:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c38:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c3a:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001c42:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c4c:	4b1b      	ldr	r3, [pc, #108]	@ (8001cbc <HAL_NVIC_SetPriority+0x70>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c54:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c56:	f1c3 0e07 	rsb	lr, r3, #7
 8001c5a:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c5e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c62:	bf28      	it	cs
 8001c64:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c68:	f1bc 0f06 	cmp.w	ip, #6
 8001c6c:	d91c      	bls.n	8001ca8 <HAL_NVIC_SetPriority+0x5c>
 8001c6e:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c72:	f04f 33ff 	mov.w	r3, #4294967295
 8001c76:	fa03 f30c 	lsl.w	r3, r3, ip
 8001c7a:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c82:	fa03 f30e 	lsl.w	r3, r3, lr
 8001c86:	ea21 0303 	bic.w	r3, r1, r3
 8001c8a:	fa03 f30c 	lsl.w	r3, r3, ip
 8001c8e:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c90:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8001c92:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c94:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8001c96:	db0a      	blt.n	8001cae <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c98:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001c9c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8001ca0:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001ca4:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ca8:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001caa:	4694      	mov	ip, r2
 8001cac:	e7e7      	b.n	8001c7e <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cae:	4a04      	ldr	r2, [pc, #16]	@ (8001cc0 <HAL_NVIC_SetPriority+0x74>)
 8001cb0:	f000 000f 	and.w	r0, r0, #15
 8001cb4:	4402      	add	r2, r0
 8001cb6:	7613      	strb	r3, [r2, #24]
 8001cb8:	f85d fb04 	ldr.w	pc, [sp], #4
 8001cbc:	e000ed00 	.word	0xe000ed00
 8001cc0:	e000ecfc 	.word	0xe000ecfc

08001cc4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001cc4:	2800      	cmp	r0, #0
 8001cc6:	db07      	blt.n	8001cd8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cc8:	4a04      	ldr	r2, [pc, #16]	@ (8001cdc <HAL_NVIC_EnableIRQ+0x18>)
 8001cca:	0941      	lsrs	r1, r0, #5
 8001ccc:	2301      	movs	r3, #1
 8001cce:	f000 001f 	and.w	r0, r0, #31
 8001cd2:	4083      	lsls	r3, r0
 8001cd4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	e000e100 	.word	0xe000e100

08001ce0 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001ce0:	2800      	cmp	r0, #0
 8001ce2:	db0c      	blt.n	8001cfe <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ce4:	0943      	lsrs	r3, r0, #5
 8001ce6:	4906      	ldr	r1, [pc, #24]	@ (8001d00 <HAL_NVIC_DisableIRQ+0x20>)
 8001ce8:	f000 001f 	and.w	r0, r0, #31
 8001cec:	3320      	adds	r3, #32
 8001cee:	2201      	movs	r2, #1
 8001cf0:	4082      	lsls	r2, r0
 8001cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001cf6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001cfa:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8001cfe:	4770      	bx	lr
 8001d00:	e000e100 	.word	0xe000e100

08001d04 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d04:	3801      	subs	r0, #1
 8001d06:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8001d0a:	d301      	bcc.n	8001d10 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d0c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001d0e:	4770      	bx	lr
{
 8001d10:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d12:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d16:	4c07      	ldr	r4, [pc, #28]	@ (8001d34 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d18:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d1a:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 8001d1e:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d22:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d24:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d26:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d28:	619a      	str	r2, [r3, #24]
}
 8001d2a:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d2e:	6119      	str	r1, [r3, #16]
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	e000ed00 	.word	0xe000ed00

08001d38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d38:	b538      	push	{r3, r4, r5, lr}
 8001d3a:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8001d3c:	f7ff fb94 	bl	8001468 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d40:	2c00      	cmp	r4, #0
 8001d42:	d06b      	beq.n	8001e1c <HAL_DMA_Init+0xe4>

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d44:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 8001d46:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d48:	2102      	movs	r1, #2
 8001d4a:	f884 1035 	strb.w	r1, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 8001d4e:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	f022 0201 	bic.w	r2, r2, #1
 8001d58:	4605      	mov	r5, r0
 8001d5a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d5c:	e005      	b.n	8001d6a <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d5e:	f7ff fb83 	bl	8001468 <HAL_GetTick>
 8001d62:	1b43      	subs	r3, r0, r5
 8001d64:	2b05      	cmp	r3, #5
 8001d66:	d837      	bhi.n	8001dd8 <HAL_DMA_Init+0xa0>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d68:	6823      	ldr	r3, [r4, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	07d1      	lsls	r1, r2, #31
 8001d6e:	d4f6      	bmi.n	8001d5e <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d70:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8001d74:	68e1      	ldr	r1, [r4, #12]
 8001d76:	4302      	orrs	r2, r0
 8001d78:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d7a:	e9d4 5104 	ldrd	r5, r1, [r4, #16]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d7e:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d80:	432a      	orrs	r2, r5
 8001d82:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d84:	69e1      	ldr	r1, [r4, #28]
  tmp = hdma->Instance->CR;
 8001d86:	681d      	ldr	r5, [r3, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d88:	4302      	orrs	r2, r0
 8001d8a:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d8c:	4931      	ldr	r1, [pc, #196]	@ (8001e54 <HAL_DMA_Init+0x11c>)
 8001d8e:	4029      	ands	r1, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d90:	6a25      	ldr	r5, [r4, #32]
 8001d92:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d94:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d96:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001d98:	2904      	cmp	r1, #4
 8001d9a:	d024      	beq.n	8001de6 <HAL_DMA_Init+0xae>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d9c:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d9e:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001da0:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001da4:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001da6:	b2d8      	uxtb	r0, r3
 8001da8:	4a2b      	ldr	r2, [pc, #172]	@ (8001e58 <HAL_DMA_Init+0x120>)
  hdma->Instance->FCR = tmp;
 8001daa:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001dac:	3810      	subs	r0, #16
 8001dae:	fba2 5200 	umull	r5, r2, r2, r0
 8001db2:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001db4:	4929      	ldr	r1, [pc, #164]	@ (8001e5c <HAL_DMA_Init+0x124>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001db6:	f36f 0309 	bfc	r3, #0, #10
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001dba:	5c89      	ldrb	r1, [r1, r2]
 8001dbc:	65e1      	str	r1, [r4, #92]	@ 0x5c
  if (stream_number > 3U)
 8001dbe:	285f      	cmp	r0, #95	@ 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001dc0:	bf88      	it	hi
 8001dc2:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dc4:	223f      	movs	r2, #63	@ 0x3f
 8001dc6:	408a      	lsls	r2, r1
 8001dc8:	65a3      	str	r3, [r4, #88]	@ 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dca:	2000      	movs	r0, #0
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dcc:	609a      	str	r2, [r3, #8]
  hdma->State = HAL_DMA_STATE_READY;
 8001dce:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dd0:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001dd2:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
}
 8001dd6:	bd38      	pop	{r3, r4, r5, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001dda:	2220      	movs	r2, #32
 8001ddc:	6562      	str	r2, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dde:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      return HAL_TIMEOUT;
 8001de2:	4618      	mov	r0, r3
}
 8001de4:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001de6:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	@ 0x2c
 8001dea:	4329      	orrs	r1, r5
 8001dec:	4311      	orrs	r1, r2
  hdma->Instance->CR = tmp;  
 8001dee:	6019      	str	r1, [r3, #0]
  tmp = hdma->Instance->FCR;
 8001df0:	6959      	ldr	r1, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 8001df2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001df4:	f021 0107 	bic.w	r1, r1, #7
 8001df8:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 8001dfa:	f041 0104 	orr.w	r1, r1, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001dfe:	2d00      	cmp	r5, #0
 8001e00:	d0d1      	beq.n	8001da6 <HAL_DMA_Init+0x6e>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e02:	b968      	cbnz	r0, 8001e20 <HAL_DMA_Init+0xe8>
  {
    switch (tmp)
 8001e04:	2a01      	cmp	r2, #1
 8001e06:	d021      	beq.n	8001e4c <HAL_DMA_Init+0x114>
 8001e08:	f032 0202 	bics.w	r2, r2, #2
 8001e0c:	d1cb      	bne.n	8001da6 <HAL_DMA_Init+0x6e>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e0e:	01ea      	lsls	r2, r5, #7
 8001e10:	d5c9      	bpl.n	8001da6 <HAL_DMA_Init+0x6e>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e12:	2240      	movs	r2, #64	@ 0x40
        hdma->State = HAL_DMA_STATE_READY;
 8001e14:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e16:	6562      	str	r2, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001e18:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    return HAL_ERROR;
 8001e1c:	2001      	movs	r0, #1
}
 8001e1e:	bd38      	pop	{r3, r4, r5, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e20:	f5b0 5f00 	cmp.w	r0, #8192	@ 0x2000
 8001e24:	d004      	beq.n	8001e30 <HAL_DMA_Init+0xf8>
    switch (tmp)
 8001e26:	2a02      	cmp	r2, #2
 8001e28:	d9f3      	bls.n	8001e12 <HAL_DMA_Init+0xda>
 8001e2a:	2a03      	cmp	r2, #3
 8001e2c:	d0ef      	beq.n	8001e0e <HAL_DMA_Init+0xd6>
 8001e2e:	e7ba      	b.n	8001da6 <HAL_DMA_Init+0x6e>
    switch (tmp)
 8001e30:	2a03      	cmp	r2, #3
 8001e32:	d8b8      	bhi.n	8001da6 <HAL_DMA_Init+0x6e>
 8001e34:	a001      	add	r0, pc, #4	@ (adr r0, 8001e3c <HAL_DMA_Init+0x104>)
 8001e36:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8001e3a:	bf00      	nop
 8001e3c:	08001e13 	.word	0x08001e13
 8001e40:	08001e0f 	.word	0x08001e0f
 8001e44:	08001e13 	.word	0x08001e13
 8001e48:	08001e4d 	.word	0x08001e4d
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e4c:	f1b5 7fc0 	cmp.w	r5, #25165824	@ 0x1800000
 8001e50:	d1a9      	bne.n	8001da6 <HAL_DMA_Init+0x6e>
 8001e52:	e7de      	b.n	8001e12 <HAL_DMA_Init+0xda>
 8001e54:	f010803f 	.word	0xf010803f
 8001e58:	aaaaaaab 	.word	0xaaaaaaab
 8001e5c:	0800741c 	.word	0x0800741c

08001e60 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 8001e60:	2800      	cmp	r0, #0
 8001e62:	d035      	beq.n	8001ed0 <HAL_DMA_DeInit+0x70>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001e64:	f890 2035 	ldrb.w	r2, [r0, #53]	@ 0x35
 8001e68:	2a02      	cmp	r2, #2
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	b2d0      	uxtb	r0, r2
 8001e6e:	d02e      	beq.n	8001ece <HAL_DMA_DeInit+0x6e>
  __HAL_DMA_DISABLE(hdma);
 8001e70:	681a      	ldr	r2, [r3, #0]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e72:	4918      	ldr	r1, [pc, #96]	@ (8001ed4 <HAL_DMA_DeInit+0x74>)
 8001e74:	b2d0      	uxtb	r0, r2
 8001e76:	3810      	subs	r0, #16
{
 8001e78:	b430      	push	{r4, r5}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e7a:	fba1 4100 	umull	r4, r1, r1, r0
 8001e7e:	0909      	lsrs	r1, r1, #4
  __HAL_DMA_DISABLE(hdma);
 8001e80:	6814      	ldr	r4, [r2, #0]
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e82:	4d15      	ldr	r5, [pc, #84]	@ (8001ed8 <HAL_DMA_DeInit+0x78>)
  __HAL_DMA_DISABLE(hdma);
 8001e84:	f024 0401 	bic.w	r4, r4, #1
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e88:	5c6d      	ldrb	r5, [r5, r1]
  __HAL_DMA_DISABLE(hdma);
 8001e8a:	6014      	str	r4, [r2, #0]
  hdma->Instance->CR   = 0U;
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	6011      	str	r1, [r2, #0]
  hdma->Instance->NDTR = 0U;
 8001e90:	6051      	str	r1, [r2, #4]
  hdma->Instance->PAR  = 0U;
 8001e92:	6091      	str	r1, [r2, #8]
  hdma->Instance->M0AR = 0U;
 8001e94:	60d1      	str	r1, [r2, #12]
  hdma->Instance->M1AR = 0U;
 8001e96:	6111      	str	r1, [r2, #16]
  hdma->Instance->FCR  = 0x00000021U;
 8001e98:	2121      	movs	r1, #33	@ 0x21
 8001e9a:	6151      	str	r1, [r2, #20]
  if (stream_number > 3U)
 8001e9c:	285f      	cmp	r0, #95	@ 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e9e:	f36f 0209 	bfc	r2, #0, #10
 8001ea2:	bf88      	it	hi
 8001ea4:	3204      	addhi	r2, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ea6:	243f      	movs	r4, #63	@ 0x3f
  hdma->XferCpltCallback = NULL;
 8001ea8:	2100      	movs	r1, #0
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001eaa:	40ac      	lsls	r4, r5
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001eac:	65dd      	str	r5, [r3, #92]	@ 0x5c
  hdma->XferHalfCpltCallback = NULL;
 8001eae:	e9c3 110f 	strd	r1, r1, [r3, #60]	@ 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 8001eb2:	e9c3 1111 	strd	r1, r1, [r3, #68]	@ 0x44
  hdma->XferErrorCallback = NULL;
 8001eb6:	e9c3 1113 	strd	r1, r1, [r3, #76]	@ 0x4c
 8001eba:	659a      	str	r2, [r3, #88]	@ 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ebc:	6094      	str	r4, [r2, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ebe:	6559      	str	r1, [r3, #84]	@ 0x54
  __HAL_UNLOCK(hdma);
 8001ec0:	f883 1034 	strb.w	r1, [r3, #52]	@ 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 8001ec4:	f883 1035 	strb.w	r1, [r3, #53]	@ 0x35
  return HAL_OK;
 8001ec8:	4608      	mov	r0, r1
}
 8001eca:	bc30      	pop	{r4, r5}
 8001ecc:	4770      	bx	lr
 8001ece:	4770      	bx	lr
    return HAL_ERROR;
 8001ed0:	2001      	movs	r0, #1
 8001ed2:	4770      	bx	lr
 8001ed4:	aaaaaaab 	.word	0xaaaaaaab
 8001ed8:	0800741c 	.word	0x0800741c

08001edc <HAL_DMA_Abort>:
{
 8001edc:	b570      	push	{r4, r5, r6, lr}
 8001ede:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ee0:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  uint32_t tickstart = HAL_GetTick();
 8001ee2:	f7ff fac1 	bl	8001468 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ee6:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d006      	beq.n	8001efc <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eee:	2380      	movs	r3, #128	@ 0x80
 8001ef0:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8001ef8:	2001      	movs	r0, #1
}
 8001efa:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001efc:	6823      	ldr	r3, [r4, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	f022 0216 	bic.w	r2, r2, #22
 8001f04:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f06:	695a      	ldr	r2, [r3, #20]
 8001f08:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f0c:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f0e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001f10:	4605      	mov	r5, r0
 8001f12:	b342      	cbz	r2, 8001f66 <HAL_DMA_Abort+0x8a>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	f022 0208 	bic.w	r2, r2, #8
 8001f1a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	f022 0201 	bic.w	r2, r2, #1
 8001f22:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f24:	e005      	b.n	8001f32 <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f26:	f7ff fa9f 	bl	8001468 <HAL_GetTick>
 8001f2a:	1b43      	subs	r3, r0, r5
 8001f2c:	2b05      	cmp	r3, #5
 8001f2e:	d810      	bhi.n	8001f52 <HAL_DMA_Abort+0x76>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f30:	6823      	ldr	r3, [r4, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f013 0301 	ands.w	r3, r3, #1
 8001f38:	d1f5      	bne.n	8001f26 <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f3a:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8001f3c:	223f      	movs	r2, #63	@ 0x3f
 8001f3e:	408a      	lsls	r2, r1
  return HAL_OK;
 8001f40:	4618      	mov	r0, r3
    hdma->State = HAL_DMA_STATE_READY;
 8001f42:	2101      	movs	r1, #1
    __HAL_UNLOCK(hdma);
 8001f44:	2300      	movs	r3, #0
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f46:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8001f48:	f884 1035 	strb.w	r1, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8001f4c:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 8001f50:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f54:	2220      	movs	r2, #32
 8001f56:	6562      	str	r2, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 8001f58:	4618      	mov	r0, r3
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f5a:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8001f5e:	2300      	movs	r3, #0
 8001f60:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 8001f64:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f66:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8001f68:	2a00      	cmp	r2, #0
 8001f6a:	d1d3      	bne.n	8001f14 <HAL_DMA_Abort+0x38>
 8001f6c:	e7d6      	b.n	8001f1c <HAL_DMA_Abort+0x40>
 8001f6e:	bf00      	nop

08001f70 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f70:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d003      	beq.n	8001f80 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f78:	2380      	movs	r3, #128	@ 0x80
 8001f7a:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8001f7c:	2001      	movs	r0, #1
 8001f7e:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8001f80:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f82:	2305      	movs	r3, #5
 8001f84:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 8001f88:	6813      	ldr	r3, [r2, #0]
 8001f8a:	f023 0301 	bic.w	r3, r3, #1
  return HAL_OK;
 8001f8e:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8001f90:	6013      	str	r3, [r2, #0]
}
 8001f92:	4770      	bx	lr

08001f94 <HAL_DMA_IRQHandler>:
{
 8001f94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f96:	b083      	sub	sp, #12
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f98:	4a67      	ldr	r2, [pc, #412]	@ (8002138 <HAL_DMA_IRQHandler+0x1a4>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f9a:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f9c:	6816      	ldr	r6, [r2, #0]
  __IO uint32_t count = 0U;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fa2:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
  tmpisr = regs->ISR;
 8001fa4:	683d      	ldr	r5, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fa6:	2208      	movs	r2, #8
 8001fa8:	409a      	lsls	r2, r3
 8001faa:	422a      	tst	r2, r5
{
 8001fac:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fae:	d003      	beq.n	8001fb8 <HAL_DMA_IRQHandler+0x24>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001fb0:	6801      	ldr	r1, [r0, #0]
 8001fb2:	6808      	ldr	r0, [r1, #0]
 8001fb4:	0740      	lsls	r0, r0, #29
 8001fb6:	d478      	bmi.n	80020aa <HAL_DMA_IRQHandler+0x116>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fb8:	2201      	movs	r2, #1
 8001fba:	409a      	lsls	r2, r3
 8001fbc:	422a      	tst	r2, r5
 8001fbe:	d003      	beq.n	8001fc8 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001fc0:	6821      	ldr	r1, [r4, #0]
 8001fc2:	6949      	ldr	r1, [r1, #20]
 8001fc4:	0608      	lsls	r0, r1, #24
 8001fc6:	d46a      	bmi.n	800209e <HAL_DMA_IRQHandler+0x10a>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fc8:	2204      	movs	r2, #4
 8001fca:	409a      	lsls	r2, r3
 8001fcc:	422a      	tst	r2, r5
 8001fce:	d003      	beq.n	8001fd8 <HAL_DMA_IRQHandler+0x44>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001fd0:	6821      	ldr	r1, [r4, #0]
 8001fd2:	6809      	ldr	r1, [r1, #0]
 8001fd4:	0789      	lsls	r1, r1, #30
 8001fd6:	d45c      	bmi.n	8002092 <HAL_DMA_IRQHandler+0xfe>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001fd8:	2210      	movs	r2, #16
 8001fda:	409a      	lsls	r2, r3
 8001fdc:	422a      	tst	r2, r5
 8001fde:	d003      	beq.n	8001fe8 <HAL_DMA_IRQHandler+0x54>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001fe0:	6821      	ldr	r1, [r4, #0]
 8001fe2:	6808      	ldr	r0, [r1, #0]
 8001fe4:	0700      	lsls	r0, r0, #28
 8001fe6:	d441      	bmi.n	800206c <HAL_DMA_IRQHandler+0xd8>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001fe8:	2220      	movs	r2, #32
 8001fea:	409a      	lsls	r2, r3
 8001fec:	422a      	tst	r2, r5
 8001fee:	d014      	beq.n	800201a <HAL_DMA_IRQHandler+0x86>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001ff0:	6821      	ldr	r1, [r4, #0]
 8001ff2:	6808      	ldr	r0, [r1, #0]
 8001ff4:	06c0      	lsls	r0, r0, #27
 8001ff6:	d510      	bpl.n	800201a <HAL_DMA_IRQHandler+0x86>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001ff8:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001ffa:	f894 2035 	ldrb.w	r2, [r4, #53]	@ 0x35
 8001ffe:	2a05      	cmp	r2, #5
 8002000:	d063      	beq.n	80020ca <HAL_DMA_IRQHandler+0x136>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002002:	680b      	ldr	r3, [r1, #0]
 8002004:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002008:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800200a:	d07e      	beq.n	800210a <HAL_DMA_IRQHandler+0x176>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800200c:	0319      	lsls	r1, r3, #12
 800200e:	f140 8089 	bpl.w	8002124 <HAL_DMA_IRQHandler+0x190>
        if(hdma->XferCpltCallback != NULL)
 8002012:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002014:	b10b      	cbz	r3, 800201a <HAL_DMA_IRQHandler+0x86>
          hdma->XferCpltCallback(hdma);
 8002016:	4620      	mov	r0, r4
 8002018:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800201a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800201c:	b323      	cbz	r3, 8002068 <HAL_DMA_IRQHandler+0xd4>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800201e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002020:	07da      	lsls	r2, r3, #31
 8002022:	d51a      	bpl.n	800205a <HAL_DMA_IRQHandler+0xc6>
      __HAL_DMA_DISABLE(hdma);
 8002024:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002026:	4945      	ldr	r1, [pc, #276]	@ (800213c <HAL_DMA_IRQHandler+0x1a8>)
      hdma->State = HAL_DMA_STATE_ABORT;
 8002028:	2305      	movs	r3, #5
 800202a:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 800202e:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002030:	fba1 1606 	umull	r1, r6, r1, r6
      __HAL_DMA_DISABLE(hdma);
 8002034:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8002038:	0ab6      	lsrs	r6, r6, #10
      __HAL_DMA_DISABLE(hdma);
 800203a:	6013      	str	r3, [r2, #0]
 800203c:	e002      	b.n	8002044 <HAL_DMA_IRQHandler+0xb0>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800203e:	6813      	ldr	r3, [r2, #0]
 8002040:	07db      	lsls	r3, r3, #31
 8002042:	d504      	bpl.n	800204e <HAL_DMA_IRQHandler+0xba>
        if (++count > timeout)
 8002044:	9b01      	ldr	r3, [sp, #4]
 8002046:	3301      	adds	r3, #1
 8002048:	42b3      	cmp	r3, r6
 800204a:	9301      	str	r3, [sp, #4]
 800204c:	d9f7      	bls.n	800203e <HAL_DMA_IRQHandler+0xaa>
      hdma->State = HAL_DMA_STATE_READY;
 800204e:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 8002050:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 8002052:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8002056:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 800205a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800205c:	b123      	cbz	r3, 8002068 <HAL_DMA_IRQHandler+0xd4>
      hdma->XferErrorCallback(hdma);
 800205e:	4620      	mov	r0, r4
}
 8002060:	b003      	add	sp, #12
 8002062:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8002066:	4718      	bx	r3
}
 8002068:	b003      	add	sp, #12
 800206a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800206c:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800206e:	680a      	ldr	r2, [r1, #0]
 8002070:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002074:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002076:	d122      	bne.n	80020be <HAL_DMA_IRQHandler+0x12a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002078:	05d2      	lsls	r2, r2, #23
 800207a:	d403      	bmi.n	8002084 <HAL_DMA_IRQHandler+0xf0>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800207c:	680a      	ldr	r2, [r1, #0]
 800207e:	f022 0208 	bic.w	r2, r2, #8
 8002082:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8002084:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002086:	2a00      	cmp	r2, #0
 8002088:	d0ae      	beq.n	8001fe8 <HAL_DMA_IRQHandler+0x54>
          hdma->XferHalfCpltCallback(hdma);
 800208a:	4620      	mov	r0, r4
 800208c:	4790      	blx	r2
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800208e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002090:	e7aa      	b.n	8001fe8 <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002092:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002094:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002096:	f042 0204 	orr.w	r2, r2, #4
 800209a:	6562      	str	r2, [r4, #84]	@ 0x54
 800209c:	e79c      	b.n	8001fd8 <HAL_DMA_IRQHandler+0x44>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800209e:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80020a2:	f042 0202 	orr.w	r2, r2, #2
 80020a6:	6562      	str	r2, [r4, #84]	@ 0x54
 80020a8:	e78e      	b.n	8001fc8 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80020aa:	6808      	ldr	r0, [r1, #0]
 80020ac:	f020 0004 	bic.w	r0, r0, #4
 80020b0:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80020b2:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80020b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80020b6:	f042 0201 	orr.w	r2, r2, #1
 80020ba:	6562      	str	r2, [r4, #84]	@ 0x54
 80020bc:	e77c      	b.n	8001fb8 <HAL_DMA_IRQHandler+0x24>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020be:	0311      	lsls	r1, r2, #12
 80020c0:	d5e0      	bpl.n	8002084 <HAL_DMA_IRQHandler+0xf0>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80020c2:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 80020c4:	2a00      	cmp	r2, #0
 80020c6:	d1e0      	bne.n	800208a <HAL_DMA_IRQHandler+0xf6>
 80020c8:	e78e      	b.n	8001fe8 <HAL_DMA_IRQHandler+0x54>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020ca:	680a      	ldr	r2, [r1, #0]
 80020cc:	f022 0216 	bic.w	r2, r2, #22
 80020d0:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020d2:	694a      	ldr	r2, [r1, #20]
 80020d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80020d8:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020da:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80020dc:	b33a      	cbz	r2, 800212e <HAL_DMA_IRQHandler+0x19a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020de:	680a      	ldr	r2, [r1, #0]
 80020e0:	f022 0208 	bic.w	r2, r2, #8
 80020e4:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020e6:	223f      	movs	r2, #63	@ 0x3f
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
        if(hdma->XferAbortCallback != NULL)
 80020ec:	6d21      	ldr	r1, [r4, #80]	@ 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020ee:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 80020f0:	2201      	movs	r2, #1
        __HAL_UNLOCK(hdma);
 80020f2:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_READY;
 80020f4:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 80020f8:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 80020fc:	2900      	cmp	r1, #0
 80020fe:	d0b3      	beq.n	8002068 <HAL_DMA_IRQHandler+0xd4>
          hdma->XferAbortCallback(hdma);
 8002100:	4620      	mov	r0, r4
}
 8002102:	b003      	add	sp, #12
 8002104:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferAbortCallback(hdma);
 8002108:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800210a:	f413 7380 	ands.w	r3, r3, #256	@ 0x100
 800210e:	d180      	bne.n	8002012 <HAL_DMA_IRQHandler+0x7e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002110:	680a      	ldr	r2, [r1, #0]
 8002112:	f022 0210 	bic.w	r2, r2, #16
 8002116:	600a      	str	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8002118:	2201      	movs	r2, #1
 800211a:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 800211e:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 8002122:	e776      	b.n	8002012 <HAL_DMA_IRQHandler+0x7e>
          if(hdma->XferM1CpltCallback != NULL)
 8002124:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002126:	2b00      	cmp	r3, #0
 8002128:	f47f af75 	bne.w	8002016 <HAL_DMA_IRQHandler+0x82>
 800212c:	e775      	b.n	800201a <HAL_DMA_IRQHandler+0x86>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800212e:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8002130:	2a00      	cmp	r2, #0
 8002132:	d1d4      	bne.n	80020de <HAL_DMA_IRQHandler+0x14a>
 8002134:	e7d7      	b.n	80020e6 <HAL_DMA_IRQHandler+0x152>
 8002136:	bf00      	nop
 8002138:	20000000 	.word	0x20000000
 800213c:	1b4e81b5 	.word	0x1b4e81b5

08002140 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002144:	2300      	movs	r3, #0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002146:	680c      	ldr	r4, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002148:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8002360 <HAL_GPIO_Init+0x220>
{
 800214c:	b085      	sub	sp, #20
    ioposition = 0x01U << position;
 800214e:	f04f 0b01 	mov.w	fp, #1

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002152:	4689      	mov	r9, r1
 8002154:	e003      	b.n	800215e <HAL_GPIO_Init+0x1e>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002156:	3301      	adds	r3, #1
 8002158:	2b10      	cmp	r3, #16
 800215a:	f000 8092 	beq.w	8002282 <HAL_GPIO_Init+0x142>
    ioposition = 0x01U << position;
 800215e:	fa0b f203 	lsl.w	r2, fp, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002162:	ea02 0804 	and.w	r8, r2, r4
    if(iocurrent == ioposition)
 8002166:	43a2      	bics	r2, r4
 8002168:	d1f5      	bne.n	8002156 <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800216a:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800216e:	f001 0c03 	and.w	ip, r1, #3
 8002172:	005a      	lsls	r2, r3, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002174:	2503      	movs	r5, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002176:	f10c 36ff 	add.w	r6, ip, #4294967295
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800217a:	4095      	lsls	r5, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800217c:	2e01      	cmp	r6, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800217e:	ea6f 0505 	mvn.w	r5, r5
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002182:	f240 8081 	bls.w	8002288 <HAL_GPIO_Init+0x148>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002186:	f1bc 0f03 	cmp.w	ip, #3
 800218a:	f040 80d9 	bne.w	8002340 <HAL_GPIO_Init+0x200>
      temp = GPIOx->MODER;
 800218e:	6806      	ldr	r6, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002190:	fa0c f202 	lsl.w	r2, ip, r2
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002194:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002196:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002198:	f411 3f40 	tst.w	r1, #196608	@ 0x30000
      GPIOx->MODER = temp;
 800219c:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800219e:	d0da      	beq.n	8002156 <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021a0:	2200      	movs	r2, #0
 80021a2:	9203      	str	r2, [sp, #12]
 80021a4:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 80021a8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80021ac:	f8ca 2044 	str.w	r2, [sl, #68]	@ 0x44
 80021b0:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 80021b4:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80021b8:	9203      	str	r2, [sp, #12]
 80021ba:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 80021bc:	f023 0203 	bic.w	r2, r3, #3
 80021c0:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021c4:	f003 0603 	and.w	r6, r3, #3
 80021c8:	270f      	movs	r7, #15
 80021ca:	f502 329c 	add.w	r2, r2, #79872	@ 0x13800
 80021ce:	00b6      	lsls	r6, r6, #2
 80021d0:	fa07 fc06 	lsl.w	ip, r7, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021d4:	4f5f      	ldr	r7, [pc, #380]	@ (8002354 <HAL_GPIO_Init+0x214>)
        temp = SYSCFG->EXTICR[position >> 2U];
 80021d6:	6895      	ldr	r5, [r2, #8]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021d8:	42b8      	cmp	r0, r7
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021da:	ea25 050c 	bic.w	r5, r5, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021de:	d027      	beq.n	8002230 <HAL_GPIO_Init+0xf0>
 80021e0:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 80021e4:	42b8      	cmp	r0, r7
 80021e6:	f000 8087 	beq.w	80022f8 <HAL_GPIO_Init+0x1b8>
 80021ea:	4f5b      	ldr	r7, [pc, #364]	@ (8002358 <HAL_GPIO_Init+0x218>)
 80021ec:	42b8      	cmp	r0, r7
 80021ee:	f000 8089 	beq.w	8002304 <HAL_GPIO_Init+0x1c4>
 80021f2:	f8df c170 	ldr.w	ip, [pc, #368]	@ 8002364 <HAL_GPIO_Init+0x224>
 80021f6:	4560      	cmp	r0, ip
 80021f8:	f000 808a 	beq.w	8002310 <HAL_GPIO_Init+0x1d0>
 80021fc:	f8df c168 	ldr.w	ip, [pc, #360]	@ 8002368 <HAL_GPIO_Init+0x228>
 8002200:	4560      	cmp	r0, ip
 8002202:	f000 808b 	beq.w	800231c <HAL_GPIO_Init+0x1dc>
 8002206:	f8df c164 	ldr.w	ip, [pc, #356]	@ 800236c <HAL_GPIO_Init+0x22c>
 800220a:	4560      	cmp	r0, ip
 800220c:	f000 808c 	beq.w	8002328 <HAL_GPIO_Init+0x1e8>
 8002210:	f8df c15c 	ldr.w	ip, [pc, #348]	@ 8002370 <HAL_GPIO_Init+0x230>
 8002214:	4560      	cmp	r0, ip
 8002216:	f000 808d 	beq.w	8002334 <HAL_GPIO_Init+0x1f4>
 800221a:	f8df c158 	ldr.w	ip, [pc, #344]	@ 8002374 <HAL_GPIO_Init+0x234>
 800221e:	4560      	cmp	r0, ip
 8002220:	bf0c      	ite	eq
 8002222:	f04f 0c07 	moveq.w	ip, #7
 8002226:	f04f 0c08 	movne.w	ip, #8
 800222a:	fa0c f606 	lsl.w	r6, ip, r6
 800222e:	4335      	orrs	r5, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002230:	6095      	str	r5, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002232:	4a4a      	ldr	r2, [pc, #296]	@ (800235c <HAL_GPIO_Init+0x21c>)
 8002234:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002236:	02ce      	lsls	r6, r1, #11
        temp &= ~((uint32_t)iocurrent);
 8002238:	ea6f 0508 	mvn.w	r5, r8
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 800223c:	4e47      	ldr	r6, [pc, #284]	@ (800235c <HAL_GPIO_Init+0x21c>)
        temp &= ~((uint32_t)iocurrent);
 800223e:	bf54      	ite	pl
 8002240:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8002242:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->RTSR = temp;
 8002246:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR;
 8002248:	68f2      	ldr	r2, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 800224a:	4e44      	ldr	r6, [pc, #272]	@ (800235c <HAL_GPIO_Init+0x21c>)
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800224c:	028f      	lsls	r7, r1, #10
        temp &= ~((uint32_t)iocurrent);
 800224e:	bf54      	ite	pl
 8002250:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8002252:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR = temp;
 8002256:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR;
 8002258:	6872      	ldr	r2, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800225a:	038e      	lsls	r6, r1, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 800225c:	4e3f      	ldr	r6, [pc, #252]	@ (800235c <HAL_GPIO_Init+0x21c>)
        temp &= ~((uint32_t)iocurrent);
 800225e:	bf54      	ite	pl
 8002260:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8002262:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->EMR = temp;
 8002266:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002268:	6832      	ldr	r2, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800226a:	03c9      	lsls	r1, r1, #15
  for(position = 0U; position < GPIO_NUMBER; position++)
 800226c:	f103 0301 	add.w	r3, r3, #1
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8002270:	493a      	ldr	r1, [pc, #232]	@ (800235c <HAL_GPIO_Init+0x21c>)
        temp &= ~((uint32_t)iocurrent);
 8002272:	bf54      	ite	pl
 8002274:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8002276:	ea48 0202 	orrmi.w	r2, r8, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 800227a:	2b10      	cmp	r3, #16
        EXTI->IMR = temp;
 800227c:	600a      	str	r2, [r1, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800227e:	f47f af6e 	bne.w	800215e <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 8002282:	b005      	add	sp, #20
 8002284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 8002288:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800228a:	ea06 0e05 	and.w	lr, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800228e:	f8d9 600c 	ldr.w	r6, [r9, #12]
 8002292:	4096      	lsls	r6, r2
 8002294:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->OSPEEDR = temp;
 8002298:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800229a:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800229c:	ea26 0e08 	bic.w	lr, r6, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022a0:	f3c1 1600 	ubfx	r6, r1, #4, #1
 80022a4:	409e      	lsls	r6, r3
 80022a6:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->OTYPER = temp;
 80022aa:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 80022ac:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022ae:	ea06 0e05 	and.w	lr, r6, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022b2:	f8d9 6008 	ldr.w	r6, [r9, #8]
 80022b6:	4096      	lsls	r6, r2
 80022b8:	ea46 060e 	orr.w	r6, r6, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022bc:	f1bc 0f02 	cmp.w	ip, #2
        GPIOx->PUPDR = temp;
 80022c0:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022c2:	f47f af64 	bne.w	800218e <HAL_GPIO_Init+0x4e>
        temp = GPIOx->AFR[position >> 3U];
 80022c6:	08de      	lsrs	r6, r3, #3
 80022c8:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 80022cc:	9601      	str	r6, [sp, #4]
 80022ce:	6a37      	ldr	r7, [r6, #32]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022d0:	f8d9 6010 	ldr.w	r6, [r9, #16]
        temp = GPIOx->AFR[position >> 3U];
 80022d4:	9700      	str	r7, [sp, #0]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022d6:	f003 0e07 	and.w	lr, r3, #7
 80022da:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80022de:	270f      	movs	r7, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022e0:	fa06 f60e 	lsl.w	r6, r6, lr
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022e4:	fa07 fe0e 	lsl.w	lr, r7, lr
 80022e8:	9f00      	ldr	r7, [sp, #0]
 80022ea:	ea27 0e0e 	bic.w	lr, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 80022ee:	9f01      	ldr	r7, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022f0:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->AFR[position >> 3U] = temp;
 80022f4:	623e      	str	r6, [r7, #32]
 80022f6:	e74a      	b.n	800218e <HAL_GPIO_Init+0x4e>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022f8:	f04f 0c01 	mov.w	ip, #1
 80022fc:	fa0c f606 	lsl.w	r6, ip, r6
 8002300:	4335      	orrs	r5, r6
 8002302:	e795      	b.n	8002230 <HAL_GPIO_Init+0xf0>
 8002304:	f04f 0c02 	mov.w	ip, #2
 8002308:	fa0c f606 	lsl.w	r6, ip, r6
 800230c:	4335      	orrs	r5, r6
 800230e:	e78f      	b.n	8002230 <HAL_GPIO_Init+0xf0>
 8002310:	f04f 0c03 	mov.w	ip, #3
 8002314:	fa0c f606 	lsl.w	r6, ip, r6
 8002318:	4335      	orrs	r5, r6
 800231a:	e789      	b.n	8002230 <HAL_GPIO_Init+0xf0>
 800231c:	f04f 0c04 	mov.w	ip, #4
 8002320:	fa0c f606 	lsl.w	r6, ip, r6
 8002324:	4335      	orrs	r5, r6
 8002326:	e783      	b.n	8002230 <HAL_GPIO_Init+0xf0>
 8002328:	f04f 0c05 	mov.w	ip, #5
 800232c:	fa0c f606 	lsl.w	r6, ip, r6
 8002330:	4335      	orrs	r5, r6
 8002332:	e77d      	b.n	8002230 <HAL_GPIO_Init+0xf0>
 8002334:	f04f 0c06 	mov.w	ip, #6
 8002338:	fa0c f606 	lsl.w	r6, ip, r6
 800233c:	4335      	orrs	r5, r6
 800233e:	e777      	b.n	8002230 <HAL_GPIO_Init+0xf0>
        temp = GPIOx->PUPDR;
 8002340:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002342:	ea06 0e05 	and.w	lr, r6, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002346:	f8d9 6008 	ldr.w	r6, [r9, #8]
 800234a:	4096      	lsls	r6, r2
 800234c:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->PUPDR = temp;
 8002350:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002352:	e71c      	b.n	800218e <HAL_GPIO_Init+0x4e>
 8002354:	40020000 	.word	0x40020000
 8002358:	40020800 	.word	0x40020800
 800235c:	40013c00 	.word	0x40013c00
 8002360:	40023800 	.word	0x40023800
 8002364:	40020c00 	.word	0x40020c00
 8002368:	40021000 	.word	0x40021000
 800236c:	40021400 	.word	0x40021400
 8002370:	40021800 	.word	0x40021800
 8002374:	40021c00 	.word	0x40021c00

08002378 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800237c:	2300      	movs	r3, #0
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800237e:	4f53      	ldr	r7, [pc, #332]	@ (80024cc <HAL_GPIO_DeInit+0x154>)
{
 8002380:	b083      	sub	sp, #12
    ioposition = 0x01U << position;
 8002382:	2601      	movs	r6, #1
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002384:	f04f 090f 	mov.w	r9, #15
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002388:	f04f 0a03 	mov.w	sl, #3
 800238c:	e002      	b.n	8002394 <HAL_GPIO_DeInit+0x1c>
  for(position = 0U; position < GPIO_NUMBER; position++)
 800238e:	3301      	adds	r3, #1
 8002390:	2b10      	cmp	r3, #16
 8002392:	d076      	beq.n	8002482 <HAL_GPIO_DeInit+0x10a>
    ioposition = 0x01U << position;
 8002394:	fa06 f203 	lsl.w	r2, r6, r3
    if(iocurrent == ioposition)
 8002398:	ea32 0401 	bics.w	r4, r2, r1
    iocurrent = (GPIO_Pin) & ioposition;
 800239c:	ea02 0c01 	and.w	ip, r2, r1
    if(iocurrent == ioposition)
 80023a0:	d1f5      	bne.n	800238e <HAL_GPIO_DeInit+0x16>
      tmp = SYSCFG->EXTICR[position >> 2U];
 80023a2:	f023 0503 	bic.w	r5, r3, #3
 80023a6:	f105 4580 	add.w	r5, r5, #1073741824	@ 0x40000000
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80023aa:	f003 0403 	and.w	r4, r3, #3
 80023ae:	00a4      	lsls	r4, r4, #2
 80023b0:	f505 359c 	add.w	r5, r5, #79872	@ 0x13800
 80023b4:	fa09 f804 	lsl.w	r8, r9, r4
 80023b8:	9401      	str	r4, [sp, #4]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80023ba:	4c45      	ldr	r4, [pc, #276]	@ (80024d0 <HAL_GPIO_DeInit+0x158>)
      tmp = SYSCFG->EXTICR[position >> 2U];
 80023bc:	f8d5 e008 	ldr.w	lr, [r5, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80023c0:	42a0      	cmp	r0, r4
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80023c2:	ea08 0e0e 	and.w	lr, r8, lr
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80023c6:	d020      	beq.n	800240a <HAL_GPIO_DeInit+0x92>
 80023c8:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80023cc:	42a0      	cmp	r0, r4
 80023ce:	d05b      	beq.n	8002488 <HAL_GPIO_DeInit+0x110>
 80023d0:	4c40      	ldr	r4, [pc, #256]	@ (80024d4 <HAL_GPIO_DeInit+0x15c>)
 80023d2:	42a0      	cmp	r0, r4
 80023d4:	d05c      	beq.n	8002490 <HAL_GPIO_DeInit+0x118>
 80023d6:	4c40      	ldr	r4, [pc, #256]	@ (80024d8 <HAL_GPIO_DeInit+0x160>)
 80023d8:	42a0      	cmp	r0, r4
 80023da:	d05f      	beq.n	800249c <HAL_GPIO_DeInit+0x124>
 80023dc:	4c3f      	ldr	r4, [pc, #252]	@ (80024dc <HAL_GPIO_DeInit+0x164>)
 80023de:	42a0      	cmp	r0, r4
 80023e0:	d062      	beq.n	80024a8 <HAL_GPIO_DeInit+0x130>
 80023e2:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 80024e0 <HAL_GPIO_DeInit+0x168>
 80023e6:	4558      	cmp	r0, fp
 80023e8:	d064      	beq.n	80024b4 <HAL_GPIO_DeInit+0x13c>
 80023ea:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 80024e4 <HAL_GPIO_DeInit+0x16c>
 80023ee:	4558      	cmp	r0, fp
 80023f0:	d066      	beq.n	80024c0 <HAL_GPIO_DeInit+0x148>
 80023f2:	f8df b0f4 	ldr.w	fp, [pc, #244]	@ 80024e8 <HAL_GPIO_DeInit+0x170>
 80023f6:	9c01      	ldr	r4, [sp, #4]
 80023f8:	4558      	cmp	r0, fp
 80023fa:	bf0c      	ite	eq
 80023fc:	f04f 0b07 	moveq.w	fp, #7
 8002400:	f04f 0b08 	movne.w	fp, #8
 8002404:	fa0b f404 	lsl.w	r4, fp, r4
 8002408:	e000      	b.n	800240c <HAL_GPIO_DeInit+0x94>
 800240a:	2400      	movs	r4, #0
 800240c:	45a6      	cmp	lr, r4
 800240e:	d113      	bne.n	8002438 <HAL_GPIO_DeInit+0xc0>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002410:	683c      	ldr	r4, [r7, #0]
 8002412:	ea24 040c 	bic.w	r4, r4, ip
 8002416:	603c      	str	r4, [r7, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002418:	687c      	ldr	r4, [r7, #4]
 800241a:	ea24 040c 	bic.w	r4, r4, ip
 800241e:	607c      	str	r4, [r7, #4]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002420:	68fc      	ldr	r4, [r7, #12]
 8002422:	ea24 040c 	bic.w	r4, r4, ip
 8002426:	60fc      	str	r4, [r7, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002428:	68bc      	ldr	r4, [r7, #8]
 800242a:	ea24 040c 	bic.w	r4, r4, ip
 800242e:	60bc      	str	r4, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002430:	68ac      	ldr	r4, [r5, #8]
 8002432:	ea24 0408 	bic.w	r4, r4, r8
 8002436:	60ac      	str	r4, [r5, #8]
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002438:	6804      	ldr	r4, [r0, #0]
 800243a:	005d      	lsls	r5, r3, #1
 800243c:	fa0a f505 	lsl.w	r5, sl, r5

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002440:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002444:	ea24 0405 	bic.w	r4, r4, r5
 8002448:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 800244c:	6004      	str	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800244e:	f003 0407 	and.w	r4, r3, #7
 8002452:	f8dc e020 	ldr.w	lr, [ip, #32]
 8002456:	00a4      	lsls	r4, r4, #2
 8002458:	fa09 f404 	lsl.w	r4, r9, r4
 800245c:	ea2e 0404 	bic.w	r4, lr, r4
 8002460:	f8cc 4020 	str.w	r4, [ip, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002464:	68c4      	ldr	r4, [r0, #12]
 8002466:	ea24 0405 	bic.w	r4, r4, r5
 800246a:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800246c:	6844      	ldr	r4, [r0, #4]
 800246e:	ea24 0202 	bic.w	r2, r4, r2
 8002472:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002474:	6882      	ldr	r2, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002476:	3301      	adds	r3, #1
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002478:	ea22 0205 	bic.w	r2, r2, r5
  for(position = 0U; position < GPIO_NUMBER; position++)
 800247c:	2b10      	cmp	r3, #16
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800247e:	6082      	str	r2, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002480:	d188      	bne.n	8002394 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002482:	b003      	add	sp, #12
 8002484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002488:	9c01      	ldr	r4, [sp, #4]
 800248a:	fa06 f404 	lsl.w	r4, r6, r4
 800248e:	e7bd      	b.n	800240c <HAL_GPIO_DeInit+0x94>
 8002490:	9c01      	ldr	r4, [sp, #4]
 8002492:	f04f 0b02 	mov.w	fp, #2
 8002496:	fa0b f404 	lsl.w	r4, fp, r4
 800249a:	e7b7      	b.n	800240c <HAL_GPIO_DeInit+0x94>
 800249c:	9c01      	ldr	r4, [sp, #4]
 800249e:	f04f 0b03 	mov.w	fp, #3
 80024a2:	fa0b f404 	lsl.w	r4, fp, r4
 80024a6:	e7b1      	b.n	800240c <HAL_GPIO_DeInit+0x94>
 80024a8:	9c01      	ldr	r4, [sp, #4]
 80024aa:	f04f 0b04 	mov.w	fp, #4
 80024ae:	fa0b f404 	lsl.w	r4, fp, r4
 80024b2:	e7ab      	b.n	800240c <HAL_GPIO_DeInit+0x94>
 80024b4:	9c01      	ldr	r4, [sp, #4]
 80024b6:	f04f 0b05 	mov.w	fp, #5
 80024ba:	fa0b f404 	lsl.w	r4, fp, r4
 80024be:	e7a5      	b.n	800240c <HAL_GPIO_DeInit+0x94>
 80024c0:	9c01      	ldr	r4, [sp, #4]
 80024c2:	f04f 0b06 	mov.w	fp, #6
 80024c6:	fa0b f404 	lsl.w	r4, fp, r4
 80024ca:	e79f      	b.n	800240c <HAL_GPIO_DeInit+0x94>
 80024cc:	40013c00 	.word	0x40013c00
 80024d0:	40020000 	.word	0x40020000
 80024d4:	40020800 	.word	0x40020800
 80024d8:	40020c00 	.word	0x40020c00
 80024dc:	40021000 	.word	0x40021000
 80024e0:	40021400 	.word	0x40021400
 80024e4:	40021800 	.word	0x40021800
 80024e8:	40021c00 	.word	0x40021c00

080024ec <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024ec:	b902      	cbnz	r2, 80024f0 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024ee:	0409      	lsls	r1, r1, #16
 80024f0:	6181      	str	r1, [r0, #24]
  }
}
 80024f2:	4770      	bx	lr

080024f4 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024f4:	2800      	cmp	r0, #0
 80024f6:	f000 80b8 	beq.w	800266a <HAL_I2C_Init+0x176>
{
 80024fa:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024fc:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002500:	4604      	mov	r4, r0
 8002502:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002506:	2b00      	cmp	r3, #0
 8002508:	f000 8098 	beq.w	800263c <HAL_I2C_Init+0x148>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800250c:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800250e:	2224      	movs	r2, #36	@ 0x24
 8002510:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	f022 0201 	bic.w	r2, r2, #1
 800251a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002522:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800252a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800252c:	f001 f90c 	bl	8003748 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002530:	4b4f      	ldr	r3, [pc, #316]	@ (8002670 <HAL_I2C_Init+0x17c>)
 8002532:	6865      	ldr	r5, [r4, #4]
 8002534:	429d      	cmp	r5, r3
 8002536:	d84f      	bhi.n	80025d8 <HAL_I2C_Init+0xe4>
 8002538:	4b4e      	ldr	r3, [pc, #312]	@ (8002674 <HAL_I2C_Init+0x180>)
 800253a:	4298      	cmp	r0, r3
 800253c:	d97c      	bls.n	8002638 <HAL_I2C_Init+0x144>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800253e:	4b4e      	ldr	r3, [pc, #312]	@ (8002678 <HAL_I2C_Init+0x184>)
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002540:	006a      	lsls	r2, r5, #1
  freqrange = I2C_FREQRANGE(pclk1);
 8002542:	fba3 3500 	umull	r3, r5, r3, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002546:	1e43      	subs	r3, r0, #1
 8002548:	fbb3 f3f2 	udiv	r3, r3, r2
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800254c:	6822      	ldr	r2, [r4, #0]
 800254e:	6851      	ldr	r1, [r2, #4]
 8002550:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8002554:	ea41 4195 	orr.w	r1, r1, r5, lsr #18
 8002558:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800255a:	6a11      	ldr	r1, [r2, #32]
  freqrange = I2C_FREQRANGE(pclk1);
 800255c:	ea4f 4c95 	mov.w	ip, r5, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002560:	f10c 0c01 	add.w	ip, ip, #1
 8002564:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8002568:	ea41 010c 	orr.w	r1, r1, ip
 800256c:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800256e:	69d1      	ldr	r1, [r2, #28]
 8002570:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8002574:	3301      	adds	r3, #1
 8002576:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 800257a:	4203      	tst	r3, r0
 800257c:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8002580:	d161      	bne.n	8002646 <HAL_I2C_Init+0x152>
 8002582:	2304      	movs	r3, #4
 8002584:	430b      	orrs	r3, r1
 8002586:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002588:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 800258c:	6811      	ldr	r1, [r2, #0]
 800258e:	4303      	orrs	r3, r0
 8002590:	f021 01c0 	bic.w	r1, r1, #192	@ 0xc0
 8002594:	430b      	orrs	r3, r1
 8002596:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002598:	6891      	ldr	r1, [r2, #8]
 800259a:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 800259e:	f421 4103 	bic.w	r1, r1, #33536	@ 0x8300
 80025a2:	4303      	orrs	r3, r0
 80025a4:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 80025a8:	430b      	orrs	r3, r1
 80025aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80025ac:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 80025b0:	68d1      	ldr	r1, [r2, #12]
 80025b2:	4303      	orrs	r3, r0
 80025b4:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 80025b8:	430b      	orrs	r3, r1
 80025ba:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025bc:	6811      	ldr	r1, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025be:	2300      	movs	r3, #0
  __HAL_I2C_ENABLE(hi2c);
 80025c0:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 80025c4:	2020      	movs	r0, #32
  __HAL_I2C_ENABLE(hi2c);
 80025c6:	6011      	str	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025c8:	6423      	str	r3, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025ca:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025ce:	6323      	str	r3, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025d0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e

  return HAL_OK;
 80025d4:	4618      	mov	r0, r3
}
 80025d6:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025d8:	4b28      	ldr	r3, [pc, #160]	@ (800267c <HAL_I2C_Init+0x188>)
 80025da:	4298      	cmp	r0, r3
 80025dc:	d92c      	bls.n	8002638 <HAL_I2C_Init+0x144>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025de:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80025e0:	4b25      	ldr	r3, [pc, #148]	@ (8002678 <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025e2:	4e27      	ldr	r6, [pc, #156]	@ (8002680 <HAL_I2C_Init+0x18c>)
  freqrange = I2C_FREQRANGE(pclk1);
 80025e4:	fba3 3c00 	umull	r3, ip, r3, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025e8:	1e43      	subs	r3, r0, #1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025ea:	6850      	ldr	r0, [r2, #4]
 80025ec:	f020 003f 	bic.w	r0, r0, #63	@ 0x3f
 80025f0:	ea40 409c 	orr.w	r0, r0, ip, lsr #18
 80025f4:	6050      	str	r0, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 80025f6:	ea4f 419c 	mov.w	r1, ip, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025fa:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80025fe:	fb00 f101 	mul.w	r1, r0, r1
 8002602:	fba6 6101 	umull	r6, r1, r6, r1
 8002606:	6a10      	ldr	r0, [r2, #32]
 8002608:	0989      	lsrs	r1, r1, #6
 800260a:	f020 003f 	bic.w	r0, r0, #63	@ 0x3f
 800260e:	3101      	adds	r1, #1
 8002610:	4301      	orrs	r1, r0
 8002612:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002614:	69d1      	ldr	r1, [r2, #28]
 8002616:	68a0      	ldr	r0, [r4, #8]
 8002618:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 800261c:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8002620:	b9a0      	cbnz	r0, 800264c <HAL_I2C_Init+0x158>
 8002622:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002626:	fbb3 f3f5 	udiv	r3, r3, r5
 800262a:	3301      	adds	r3, #1
 800262c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002630:	b1cb      	cbz	r3, 8002666 <HAL_I2C_Init+0x172>
 8002632:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002636:	e7a5      	b.n	8002584 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8002638:	2001      	movs	r0, #1
}
 800263a:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800263c:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8002640:	f7fe f916 	bl	8000870 <HAL_I2C_MspInit>
 8002644:	e762      	b.n	800250c <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002646:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800264a:	e79b      	b.n	8002584 <HAL_I2C_Init+0x90>
 800264c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8002650:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8002654:	fbb3 f3f5 	udiv	r3, r3, r5
 8002658:	3301      	adds	r3, #1
 800265a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800265e:	b113      	cbz	r3, 8002666 <HAL_I2C_Init+0x172>
 8002660:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002664:	e78e      	b.n	8002584 <HAL_I2C_Init+0x90>
 8002666:	2301      	movs	r3, #1
 8002668:	e78c      	b.n	8002584 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 800266a:	2001      	movs	r0, #1
}
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	000186a0 	.word	0x000186a0
 8002674:	001e847f 	.word	0x001e847f
 8002678:	431bde83 	.word	0x431bde83
 800267c:	003d08ff 	.word	0x003d08ff
 8002680:	10624dd3 	.word	0x10624dd3

08002684 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002684:	b570      	push	{r4, r5, r6, lr}
 8002686:	b082      	sub	sp, #8
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002688:	b300      	cbz	r0, 80026cc <HAL_PCD_Init+0x48>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800268a:	f890 3495 	ldrb.w	r3, [r0, #1173]	@ 0x495
  USBx = hpcd->Instance;
 800268e:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002690:	4604      	mov	r4, r0
 8002692:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002696:	2b00      	cmp	r3, #0
 8002698:	d05a      	beq.n	8002750 <HAL_PCD_Init+0xcc>
 800269a:	4628      	mov	r0, r5
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800269c:	2303      	movs	r3, #3

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800269e:	f1b5 4fa0 	cmp.w	r5, #1342177280	@ 0x50000000
  hpcd->State = HAL_PCD_STATE_BUSY;
 80026a2:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  {
    hpcd->Init.dma_enable = 0U;
 80026a6:	bf04      	itt	eq
 80026a8:	2300      	moveq	r3, #0
 80026aa:	71a3      	strbeq	r3, [r4, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80026ac:	f001 ffae 	bl	800460c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026b0:	7c23      	ldrb	r3, [r4, #16]
 80026b2:	f88d 3000 	strb.w	r3, [sp]
 80026b6:	1d25      	adds	r5, r4, #4
 80026b8:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80026bc:	6820      	ldr	r0, [r4, #0]
 80026be:	f001 fedb 	bl	8004478 <USB_CoreInit>
 80026c2:	4601      	mov	r1, r0
 80026c4:	b130      	cbz	r0, 80026d4 <HAL_PCD_Init+0x50>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026c6:	2302      	movs	r3, #2
 80026c8:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 80026cc:	2501      	movs	r5, #1
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 80026ce:	4628      	mov	r0, r5
 80026d0:	b002      	add	sp, #8
 80026d2:	bd70      	pop	{r4, r5, r6, pc}
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80026d4:	6820      	ldr	r0, [r4, #0]
 80026d6:	f001 ffa1 	bl	800461c <USB_SetCurrentMode>
 80026da:	4601      	mov	r1, r0
 80026dc:	2800      	cmp	r0, #0
 80026de:	d1f2      	bne.n	80026c6 <HAL_PCD_Init+0x42>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026e0:	7926      	ldrb	r6, [r4, #4]
 80026e2:	b306      	cbz	r6, 8002726 <HAL_PCD_Init+0xa2>
 80026e4:	4623      	mov	r3, r4
 80026e6:	4622      	mov	r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 80026e8:	f04f 0c01 	mov.w	ip, #1
    hpcd->IN_ep[i].num = i;
 80026ec:	7511      	strb	r1, [r2, #20]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80026ee:	85d1      	strh	r1, [r2, #46]	@ 0x2e
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026f0:	3101      	adds	r1, #1
 80026f2:	42b1      	cmp	r1, r6
    hpcd->IN_ep[i].xfer_buff = 0U;
 80026f4:	e9c2 0007 	strd	r0, r0, [r2, #28]
    hpcd->IN_ep[i].is_in = 1U;
 80026f8:	f882 c015 	strb.w	ip, [r2, #21]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80026fc:	7610      	strb	r0, [r2, #24]
    hpcd->IN_ep[i].xfer_len = 0U;
 80026fe:	f842 0f24 	str.w	r0, [r2, #36]!
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002702:	d1f3      	bne.n	80026ec <HAL_PCD_Init+0x68>
 8002704:	2100      	movs	r1, #0
    hpcd->OUT_ep[i].is_in = 0U;
 8002706:	460a      	mov	r2, r1
    hpcd->OUT_ep[i].num = i;
 8002708:	f883 1254 	strb.w	r1, [r3, #596]	@ 0x254
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800270c:	3101      	adds	r1, #1
 800270e:	42b1      	cmp	r1, r6
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002710:	e9c3 2297 	strd	r2, r2, [r3, #604]	@ 0x25c
    hpcd->OUT_ep[i].is_in = 0U;
 8002714:	f883 2255 	strb.w	r2, [r3, #597]	@ 0x255
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002718:	f883 2258 	strb.w	r2, [r3, #600]	@ 0x258
    hpcd->OUT_ep[i].xfer_len = 0U;
 800271c:	f8c3 2264 	str.w	r2, [r3, #612]	@ 0x264
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002720:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8002724:	d1f0      	bne.n	8002708 <HAL_PCD_Init+0x84>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002726:	7c20      	ldrb	r0, [r4, #16]
 8002728:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800272c:	f88d 0000 	strb.w	r0, [sp]
 8002730:	6820      	ldr	r0, [r4, #0]
 8002732:	f001 fff9 	bl	8004728 <USB_DevInit>
 8002736:	4605      	mov	r5, r0
 8002738:	2800      	cmp	r0, #0
 800273a:	d1c4      	bne.n	80026c6 <HAL_PCD_Init+0x42>
  hpcd->State = HAL_PCD_STATE_READY;
 800273c:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 800273e:	7460      	strb	r0, [r4, #17]
  (void)USB_DevDisconnect(hpcd->Instance);
 8002740:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 8002742:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  (void)USB_DevDisconnect(hpcd->Instance);
 8002746:	f002 fb8b 	bl	8004e60 <USB_DevDisconnect>
}
 800274a:	4628      	mov	r0, r5
 800274c:	b002      	add	sp, #8
 800274e:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8002750:	f880 2494 	strb.w	r2, [r0, #1172]	@ 0x494
    HAL_PCD_MspInit(hpcd);
 8002754:	f7fe fc20 	bl	8000f98 <HAL_PCD_MspInit>
  __HAL_PCD_DISABLE(hpcd);
 8002758:	6820      	ldr	r0, [r4, #0]
 800275a:	e79f      	b.n	800269c <HAL_PCD_Init+0x18>

0800275c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800275c:	b510      	push	{r4, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  __HAL_LOCK(hpcd);
 800275e:	f890 3494 	ldrb.w	r3, [r0, #1172]	@ 0x494
 8002762:	2b01      	cmp	r3, #1
{
 8002764:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002766:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8002768:	d017      	beq.n	800279a <HAL_PCD_Start+0x3e>
 800276a:	2301      	movs	r3, #1
 800276c:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002770:	68c3      	ldr	r3, [r0, #12]
 8002772:	065b      	lsls	r3, r3, #25
 8002774:	d502      	bpl.n	800277c <HAL_PCD_Start+0x20>
 8002776:	7b63      	ldrb	r3, [r4, #13]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d009      	beq.n	8002790 <HAL_PCD_Start+0x34>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }

  __HAL_PCD_ENABLE(hpcd);
 800277c:	f001 ff3e 	bl	80045fc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002780:	6820      	ldr	r0, [r4, #0]
 8002782:	f002 fb5d 	bl	8004e40 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002786:	2300      	movs	r3, #0
 8002788:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494

  return HAL_OK;
 800278c:	4618      	mov	r0, r3
}
 800278e:	bd10      	pop	{r4, pc}
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002790:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8002792:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002796:	6383      	str	r3, [r0, #56]	@ 0x38
 8002798:	e7f0      	b.n	800277c <HAL_PCD_Start+0x20>
  __HAL_LOCK(hpcd);
 800279a:	2002      	movs	r0, #2
}
 800279c:	bd10      	pop	{r4, pc}
 800279e:	bf00      	nop

080027a0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80027a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027a4:	6806      	ldr	r6, [r0, #0]
{
 80027a6:	b089      	sub	sp, #36	@ 0x24
 80027a8:	4604      	mov	r4, r0
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80027aa:	4630      	mov	r0, r6
 80027ac:	f002 fb96 	bl	8004edc <USB_GetMode>
 80027b0:	b110      	cbz	r0, 80027b8 <HAL_PCD_IRQHandler+0x18>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
    }
  }
}
 80027b2:	b009      	add	sp, #36	@ 0x24
 80027b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80027b8:	4605      	mov	r5, r0
 80027ba:	6820      	ldr	r0, [r4, #0]
 80027bc:	f002 fb60 	bl	8004e80 <USB_ReadInterrupts>
 80027c0:	2800      	cmp	r0, #0
 80027c2:	d0f6      	beq.n	80027b2 <HAL_PCD_IRQHandler+0x12>
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80027c4:	f8d6 3808 	ldr.w	r3, [r6, #2056]	@ 0x808
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80027c8:	6820      	ldr	r0, [r4, #0]
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80027ca:	f3c3 230d 	ubfx	r3, r3, #8, #14
 80027ce:	f8c4 34d4 	str.w	r3, [r4, #1236]	@ 0x4d4
 80027d2:	f506 6300 	add.w	r3, r6, #2048	@ 0x800
 80027d6:	9303      	str	r3, [sp, #12]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80027d8:	f002 fb52 	bl	8004e80 <USB_ReadInterrupts>
 80027dc:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80027e0:	6820      	ldr	r0, [r4, #0]
 80027e2:	bf1e      	ittt	ne
 80027e4:	6943      	ldrne	r3, [r0, #20]
 80027e6:	f003 0302 	andne.w	r3, r3, #2
 80027ea:	6143      	strne	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80027ec:	f002 fb48 	bl	8004e80 <USB_ReadInterrupts>
 80027f0:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027f4:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80027f6:	d014      	beq.n	8002822 <HAL_PCD_IRQHandler+0x82>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027f8:	6983      	ldr	r3, [r0, #24]
 80027fa:	f023 0310 	bic.w	r3, r3, #16
 80027fe:	6183      	str	r3, [r0, #24]
      RegVal = USBx->GRXSTSP;
 8002800:	6a37      	ldr	r7, [r6, #32]
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002802:	f407 13f0 	and.w	r3, r7, #1966080	@ 0x1e0000
 8002806:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800280a:	f007 080f 	and.w	r8, r7, #15
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800280e:	f000 82bb 	beq.w	8002d88 <HAL_PCD_IRQHandler+0x5e8>
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002812:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002816:	f000 8262 	beq.w	8002cde <HAL_PCD_IRQHandler+0x53e>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800281a:	6983      	ldr	r3, [r0, #24]
 800281c:	f043 0310 	orr.w	r3, r3, #16
 8002820:	6183      	str	r3, [r0, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002822:	f002 fb2d 	bl	8004e80 <USB_ReadInterrupts>
 8002826:	f410 2f00 	tst.w	r0, #524288	@ 0x80000
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800282a:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800282c:	f040 81f6 	bne.w	8002c1c <HAL_PCD_IRQHandler+0x47c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002830:	f002 fb26 	bl	8004e80 <USB_ReadInterrupts>
 8002834:	0347      	lsls	r7, r0, #13
 8002836:	f100 8151 	bmi.w	8002adc <HAL_PCD_IRQHandler+0x33c>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800283a:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800283c:	f002 fb20 	bl	8004e80 <USB_ReadInterrupts>
 8002840:	2800      	cmp	r0, #0
 8002842:	f2c0 80c2 	blt.w	80029ca <HAL_PCD_IRQHandler+0x22a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002846:	6820      	ldr	r0, [r4, #0]
 8002848:	f002 fb1a 	bl	8004e80 <USB_ReadInterrupts>
 800284c:	0502      	lsls	r2, r0, #20
 800284e:	d47e      	bmi.n	800294e <HAL_PCD_IRQHandler+0x1ae>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002850:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002852:	f002 fb15 	bl	8004e80 <USB_ReadInterrupts>
 8002856:	04c7      	lsls	r7, r0, #19
 8002858:	f100 80e1 	bmi.w	8002a1e <HAL_PCD_IRQHandler+0x27e>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800285c:	6820      	ldr	r0, [r4, #0]
 800285e:	f002 fb0f 	bl	8004e80 <USB_ReadInterrupts>
 8002862:	f410 5f00 	tst.w	r0, #8192	@ 0x2000
      (void)USB_ActivateSetup(hpcd->Instance);
 8002866:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002868:	f040 80c2 	bne.w	80029f0 <HAL_PCD_IRQHandler+0x250>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800286c:	f002 fb08 	bl	8004e80 <USB_ReadInterrupts>
 8002870:	0700      	lsls	r0, r0, #28
 8002872:	f100 812a 	bmi.w	8002aca <HAL_PCD_IRQHandler+0x32a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002876:	6820      	ldr	r0, [r4, #0]
 8002878:	f002 fb02 	bl	8004e80 <USB_ReadInterrupts>
 800287c:	0601      	lsls	r1, r0, #24
 800287e:	d51d      	bpl.n	80028bc <HAL_PCD_IRQHandler+0x11c>
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002880:	69b3      	ldr	r3, [r6, #24]
 8002882:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002886:	61b3      	str	r3, [r6, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002888:	7923      	ldrb	r3, [r4, #4]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d916      	bls.n	80028bc <HAL_PCD_IRQHandler+0x11c>
 800288e:	4627      	mov	r7, r4
 8002890:	2501      	movs	r5, #1
 8002892:	e004      	b.n	800289e <HAL_PCD_IRQHandler+0xfe>
 8002894:	3501      	adds	r5, #1
 8002896:	42ab      	cmp	r3, r5
 8002898:	f107 0724 	add.w	r7, r7, #36	@ 0x24
 800289c:	d90e      	bls.n	80028bc <HAL_PCD_IRQHandler+0x11c>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800289e:	f897 227b 	ldrb.w	r2, [r7, #635]	@ 0x27b
 80028a2:	2a01      	cmp	r2, #1
 80028a4:	d1f6      	bne.n	8002894 <HAL_PCD_IRQHandler+0xf4>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028a6:	eb05 01c5 	add.w	r1, r5, r5, lsl #3
 80028aa:	eb04 0181 	add.w	r1, r4, r1, lsl #2
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80028ae:	6820      	ldr	r0, [r4, #0]
 80028b0:	f501 7115 	add.w	r1, r1, #596	@ 0x254
 80028b4:	f002 f9d6 	bl	8004c64 <USB_EPStopXfer>

  return ret;
 80028b8:	7923      	ldrb	r3, [r4, #4]
 80028ba:	e7eb      	b.n	8002894 <HAL_PCD_IRQHandler+0xf4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80028bc:	6820      	ldr	r0, [r4, #0]
 80028be:	f002 fadf 	bl	8004e80 <USB_ReadInterrupts>
 80028c2:	02c2      	lsls	r2, r0, #11
 80028c4:	d541      	bpl.n	800294a <HAL_PCD_IRQHandler+0x1aa>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028c6:	7923      	ldrb	r3, [r4, #4]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d920      	bls.n	800290e <HAL_PCD_IRQHandler+0x16e>
 80028cc:	f506 6812 	add.w	r8, r6, #2336	@ 0x920
 80028d0:	4627      	mov	r7, r4
 80028d2:	2501      	movs	r5, #1
 80028d4:	e006      	b.n	80028e4 <HAL_PCD_IRQHandler+0x144>
 80028d6:	3501      	adds	r5, #1
 80028d8:	42ab      	cmp	r3, r5
 80028da:	f108 0820 	add.w	r8, r8, #32
 80028de:	f107 0724 	add.w	r7, r7, #36	@ 0x24
 80028e2:	d914      	bls.n	800290e <HAL_PCD_IRQHandler+0x16e>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80028e4:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80028e8:	f8d8 1000 	ldr.w	r1, [r8]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80028ec:	2a01      	cmp	r2, #1
 80028ee:	d1f2      	bne.n	80028d6 <HAL_PCD_IRQHandler+0x136>
 80028f0:	2900      	cmp	r1, #0
 80028f2:	daf0      	bge.n	80028d6 <HAL_PCD_IRQHandler+0x136>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028f4:	2324      	movs	r3, #36	@ 0x24
 80028f6:	f005 010f 	and.w	r1, r5, #15
 80028fa:	fb03 4101 	mla	r1, r3, r1, r4
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80028fe:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002900:	f887 203b 	strb.w	r2, [r7, #59]	@ 0x3b
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002904:	3114      	adds	r1, #20
 8002906:	f002 f9ad 	bl	8004c64 <USB_EPStopXfer>
  return ret;
 800290a:	7923      	ldrb	r3, [r4, #4]
 800290c:	e7e3      	b.n	80028d6 <HAL_PCD_IRQHandler+0x136>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800290e:	6820      	ldr	r0, [r4, #0]
 8002910:	6943      	ldr	r3, [r0, #20]
 8002912:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002916:	6143      	str	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002918:	f002 fab2 	bl	8004e80 <USB_ReadInterrupts>
 800291c:	0283      	lsls	r3, r0, #10
 800291e:	d421      	bmi.n	8002964 <HAL_PCD_IRQHandler+0x1c4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002920:	6820      	ldr	r0, [r4, #0]
 8002922:	f002 faad 	bl	8004e80 <USB_ReadInterrupts>
 8002926:	0040      	lsls	r0, r0, #1
 8002928:	f100 80c6 	bmi.w	8002ab8 <HAL_PCD_IRQHandler+0x318>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800292c:	6820      	ldr	r0, [r4, #0]
 800292e:	f002 faa7 	bl	8004e80 <USB_ReadInterrupts>
 8002932:	0741      	lsls	r1, r0, #29
 8002934:	f57f af3d 	bpl.w	80027b2 <HAL_PCD_IRQHandler+0x12>
      RegVal = hpcd->Instance->GOTGINT;
 8002938:	6823      	ldr	r3, [r4, #0]
 800293a:	685d      	ldr	r5, [r3, #4]
      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800293c:	076a      	lsls	r2, r5, #29
 800293e:	f100 8244 	bmi.w	8002dca <HAL_PCD_IRQHandler+0x62a>
      hpcd->Instance->GOTGINT |= RegVal;
 8002942:	685a      	ldr	r2, [r3, #4]
 8002944:	432a      	orrs	r2, r5
 8002946:	605a      	str	r2, [r3, #4]
 8002948:	e733      	b.n	80027b2 <HAL_PCD_IRQHandler+0x12>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800294a:	6820      	ldr	r0, [r4, #0]
 800294c:	e7e4      	b.n	8002918 <HAL_PCD_IRQHandler+0x178>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800294e:	9b03      	ldr	r3, [sp, #12]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	07db      	lsls	r3, r3, #31
 8002954:	f100 8235 	bmi.w	8002dc2 <HAL_PCD_IRQHandler+0x622>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002958:	6820      	ldr	r0, [r4, #0]
 800295a:	6943      	ldr	r3, [r0, #20]
 800295c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002960:	6143      	str	r3, [r0, #20]
 8002962:	e776      	b.n	8002852 <HAL_PCD_IRQHandler+0xb2>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002964:	f894 c004 	ldrb.w	ip, [r4, #4]
 8002968:	f1bc 0f01 	cmp.w	ip, #1
 800296c:	d927      	bls.n	80029be <HAL_PCD_IRQHandler+0x21e>
 800296e:	f506 6232 	add.w	r2, r6, #2848	@ 0xb20
 8002972:	4623      	mov	r3, r4
 8002974:	2101      	movs	r1, #1
 8002976:	e003      	b.n	8002980 <HAL_PCD_IRQHandler+0x1e0>
 8002978:	4561      	cmp	r1, ip
 800297a:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 800297e:	d01e      	beq.n	80029be <HAL_PCD_IRQHandler+0x21e>
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002980:	f893 027c 	ldrb.w	r0, [r3, #636]	@ 0x27c
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002984:	6815      	ldr	r5, [r2, #0]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002986:	2801      	cmp	r0, #1
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002988:	f101 0101 	add.w	r1, r1, #1
 800298c:	f102 0220 	add.w	r2, r2, #32
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002990:	d1f2      	bne.n	8002978 <HAL_PCD_IRQHandler+0x1d8>
 8002992:	2d00      	cmp	r5, #0
 8002994:	daf0      	bge.n	8002978 <HAL_PCD_IRQHandler+0x1d8>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8002996:	f8d4 74d4 	ldr.w	r7, [r4, #1236]	@ 0x4d4
 800299a:	ea87 4715 	eor.w	r7, r7, r5, lsr #16
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800299e:	07ff      	lsls	r7, r7, #31
 80029a0:	d4ea      	bmi.n	8002978 <HAL_PCD_IRQHandler+0x1d8>
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80029a2:	f883 027b 	strb.w	r0, [r3, #635]	@ 0x27b
          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80029a6:	69b0      	ldr	r0, [r6, #24]
 80029a8:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 80029ac:	61b0      	str	r0, [r6, #24]
          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80029ae:	6970      	ldr	r0, [r6, #20]
 80029b0:	0605      	lsls	r5, r0, #24
 80029b2:	d4e1      	bmi.n	8002978 <HAL_PCD_IRQHandler+0x1d8>
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80029b4:	9a03      	ldr	r2, [sp, #12]
 80029b6:	6853      	ldr	r3, [r2, #4]
 80029b8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029bc:	6053      	str	r3, [r2, #4]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80029be:	6820      	ldr	r0, [r4, #0]
 80029c0:	6943      	ldr	r3, [r0, #20]
 80029c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029c6:	6143      	str	r3, [r0, #20]
 80029c8:	e7ab      	b.n	8002922 <HAL_PCD_IRQHandler+0x182>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80029ca:	9a03      	ldr	r2, [sp, #12]
 80029cc:	6853      	ldr	r3, [r2, #4]
 80029ce:	f023 0301 	bic.w	r3, r3, #1
 80029d2:	6053      	str	r3, [r2, #4]
      if (hpcd->LPM_State == LPM_L1)
 80029d4:	f894 34cc 	ldrb.w	r3, [r4, #1228]	@ 0x4cc
 80029d8:	2b01      	cmp	r3, #1
 80029da:	f000 8179 	beq.w	8002cd0 <HAL_PCD_IRQHandler+0x530>
        HAL_PCD_ResumeCallback(hpcd);
 80029de:	4620      	mov	r0, r4
 80029e0:	f003 ff90 	bl	8006904 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80029e4:	6820      	ldr	r0, [r4, #0]
 80029e6:	6943      	ldr	r3, [r0, #20]
 80029e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80029ec:	6143      	str	r3, [r0, #20]
 80029ee:	e72b      	b.n	8002848 <HAL_PCD_IRQHandler+0xa8>
      (void)USB_ActivateSetup(hpcd->Instance);
 80029f0:	f002 fa78 	bl	8004ee4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80029f4:	6820      	ldr	r0, [r4, #0]
 80029f6:	f001 ff71 	bl	80048dc <USB_GetDevSpeed>
 80029fa:	71e0      	strb	r0, [r4, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80029fc:	6825      	ldr	r5, [r4, #0]
 80029fe:	f000 fe9d 	bl	800373c <HAL_RCC_GetHCLKFreq>
 8002a02:	79e2      	ldrb	r2, [r4, #7]
 8002a04:	4601      	mov	r1, r0
 8002a06:	4628      	mov	r0, r5
 8002a08:	f001 fd7e 	bl	8004508 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8002a0c:	4620      	mov	r0, r4
 8002a0e:	f003 ff4d 	bl	80068ac <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002a12:	6820      	ldr	r0, [r4, #0]
 8002a14:	6943      	ldr	r3, [r0, #20]
 8002a16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a1a:	6143      	str	r3, [r0, #20]
 8002a1c:	e726      	b.n	800286c <HAL_PCD_IRQHandler+0xcc>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a1e:	9a03      	ldr	r2, [sp, #12]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002a20:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a22:	6853      	ldr	r3, [r2, #4]
 8002a24:	f023 0301 	bic.w	r3, r3, #1
 8002a28:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002a2a:	2110      	movs	r1, #16
 8002a2c:	f001 fe2e 	bl	800468c <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a30:	7920      	ldrb	r0, [r4, #4]
 8002a32:	b1d8      	cbz	r0, 8002a6c <HAL_PCD_IRQHandler+0x2cc>
 8002a34:	f506 6310 	add.w	r3, r6, #2304	@ 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002a38:	f64f 317f 	movw	r1, #64383	@ 0xfb7f
 8002a3c:	6099      	str	r1, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8002a44:	601a      	str	r2, [r3, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002a46:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002a4a:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8002a4e:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8002a52:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002a56:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a5a:	3501      	adds	r5, #1
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002a5c:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a60:	4285      	cmp	r5, r0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002a62:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a66:	f103 0320 	add.w	r3, r3, #32
 8002a6a:	d1e7      	bne.n	8002a3c <HAL_PCD_IRQHandler+0x29c>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002a6c:	9a03      	ldr	r2, [sp, #12]
 8002a6e:	69d3      	ldr	r3, [r2, #28]
 8002a70:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002a74:	61d3      	str	r3, [r2, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002a76:	7be3      	ldrb	r3, [r4, #15]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f040 811d 	bne.w	8002cb8 <HAL_PCD_IRQHandler+0x518>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002a7e:	9a03      	ldr	r2, [sp, #12]
 8002a80:	6953      	ldr	r3, [r2, #20]
 8002a82:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002a86:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002a8a:	6153      	str	r3, [r2, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002a8c:	6913      	ldr	r3, [r2, #16]
 8002a8e:	f043 030b 	orr.w	r3, r3, #11
 8002a92:	6113      	str	r3, [r2, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002a94:	f8d6 3800 	ldr.w	r3, [r6, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002a98:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002a9a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002a9e:	f8c6 3800 	str.w	r3, [r6, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002aa2:	79a1      	ldrb	r1, [r4, #6]
 8002aa4:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8002aa8:	f002 fa2c 	bl	8004f04 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002aac:	6820      	ldr	r0, [r4, #0]
 8002aae:	6943      	ldr	r3, [r0, #20]
 8002ab0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ab4:	6143      	str	r3, [r0, #20]
 8002ab6:	e6d2      	b.n	800285e <HAL_PCD_IRQHandler+0xbe>
      HAL_PCD_ConnectCallback(hpcd);
 8002ab8:	4620      	mov	r0, r4
 8002aba:	f003 ff2f 	bl	800691c <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002abe:	6820      	ldr	r0, [r4, #0]
 8002ac0:	6943      	ldr	r3, [r0, #20]
 8002ac2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002ac6:	6143      	str	r3, [r0, #20]
 8002ac8:	e731      	b.n	800292e <HAL_PCD_IRQHandler+0x18e>
      HAL_PCD_SOFCallback(hpcd);
 8002aca:	4620      	mov	r0, r4
 8002acc:	f003 feea 	bl	80068a4 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002ad0:	6820      	ldr	r0, [r4, #0]
 8002ad2:	6943      	ldr	r3, [r0, #20]
 8002ad4:	f003 0308 	and.w	r3, r3, #8
 8002ad8:	6143      	str	r3, [r0, #20]
 8002ada:	e6cd      	b.n	8002878 <HAL_PCD_IRQHandler+0xd8>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002adc:	6820      	ldr	r0, [r4, #0]
 8002ade:	f002 f9db 	bl	8004e98 <USB_ReadDevAllInEpInterrupt>
      while (ep_intr != 0U)
 8002ae2:	4681      	mov	r9, r0
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002ae4:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
 8002ae6:	f1b9 0f00 	cmp.w	r9, #0
 8002aea:	f43f aea7 	beq.w	800283c <HAL_PCD_IRQHandler+0x9c>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002aee:	e9cd 6504 	strd	r6, r5, [sp, #16]
 8002af2:	f506 6710 	add.w	r7, r6, #2304	@ 0x900
 8002af6:	46a0      	mov	r8, r4
      epnum = 0U;
 8002af8:	f04f 0a00 	mov.w	sl, #0
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002afc:	4606      	mov	r6, r0
 8002afe:	e009      	b.n	8002b14 <HAL_PCD_IRQHandler+0x374>
      while (ep_intr != 0U)
 8002b00:	ea5f 0959 	movs.w	r9, r9, lsr #1
        epnum++;
 8002b04:	f10a 0a01 	add.w	sl, sl, #1
      while (ep_intr != 0U)
 8002b08:	f108 0824 	add.w	r8, r8, #36	@ 0x24
 8002b0c:	f107 0720 	add.w	r7, r7, #32
 8002b10:	f000 80f8 	beq.w	8002d04 <HAL_PCD_IRQHandler+0x564>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002b14:	f019 0f01 	tst.w	r9, #1
 8002b18:	d0f2      	beq.n	8002b00 <HAL_PCD_IRQHandler+0x360>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b1a:	fa5f fb8a 	uxtb.w	fp, sl
 8002b1e:	4659      	mov	r1, fp
 8002b20:	4630      	mov	r0, r6
 8002b22:	f002 f9cb 	bl	8004ebc <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002b26:	07c1      	lsls	r1, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b28:	4605      	mov	r5, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002b2a:	d512      	bpl.n	8002b52 <HAL_PCD_IRQHandler+0x3b2>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b2c:	9803      	ldr	r0, [sp, #12]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b2e:	2101      	movs	r1, #1
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b30:	6b43      	ldr	r3, [r0, #52]	@ 0x34
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b32:	f00a 020f 	and.w	r2, sl, #15
 8002b36:	fa01 f202 	lsl.w	r2, r1, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b3a:	ea23 0302 	bic.w	r3, r3, r2
 8002b3e:	6343      	str	r3, [r0, #52]	@ 0x34
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002b40:	60b9      	str	r1, [r7, #8]
            if (hpcd->Init.dma_enable == 1U)
 8002b42:	79a1      	ldrb	r1, [r4, #6]
 8002b44:	2901      	cmp	r1, #1
 8002b46:	f000 8145 	beq.w	8002dd4 <HAL_PCD_IRQHandler+0x634>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002b4a:	4659      	mov	r1, fp
 8002b4c:	4620      	mov	r0, r4
 8002b4e:	f003 fe9f 	bl	8006890 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002b52:	072a      	lsls	r2, r5, #28
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002b54:	bf44      	itt	mi
 8002b56:	2308      	movmi	r3, #8
 8002b58:	60bb      	strmi	r3, [r7, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002b5a:	06eb      	lsls	r3, r5, #27
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002b5c:	bf44      	itt	mi
 8002b5e:	2310      	movmi	r3, #16
 8002b60:	60bb      	strmi	r3, [r7, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002b62:	066e      	lsls	r6, r5, #25
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002b64:	bf44      	itt	mi
 8002b66:	2340      	movmi	r3, #64	@ 0x40
 8002b68:	60bb      	strmi	r3, [r7, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002b6a:	07a8      	lsls	r0, r5, #30
 8002b6c:	f100 8101 	bmi.w	8002d72 <HAL_PCD_IRQHandler+0x5d2>
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002b70:	0629      	lsls	r1, r5, #24
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b72:	6826      	ldr	r6, [r4, #0]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002b74:	d5c4      	bpl.n	8002b00 <HAL_PCD_IRQHandler+0x360>
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 8002b76:	e9d8 5309 	ldrd	r5, r3, [r8, #36]	@ 0x24
 8002b7a:	42ab      	cmp	r3, r5
 8002b7c:	d8c0      	bhi.n	8002b00 <HAL_PCD_IRQHandler+0x360>
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b7e:	f506 6110 	add.w	r1, r6, #2304	@ 0x900
  if (len > ep->maxpacket)
 8002b82:	f8d8 001c 	ldr.w	r0, [r8, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b86:	9607      	str	r6, [sp, #28]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b88:	eb01 114a 	add.w	r1, r1, sl, lsl #5
  len = ep->xfer_len - ep->xfer_count;
 8002b8c:	eba5 0c03 	sub.w	ip, r5, r3
  if (len > ep->maxpacket)
 8002b90:	4584      	cmp	ip, r0
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b92:	698a      	ldr	r2, [r1, #24]
  if (len > ep->maxpacket)
 8002b94:	bf28      	it	cs
 8002b96:	4684      	movcs	ip, r0
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b98:	fa1f fe82 	uxth.w	lr, r2
  len32b = (len + 3U) / 4U;
 8002b9c:	f10c 0c03 	add.w	ip, ip, #3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002ba0:	ebbe 0f9c 	cmp.w	lr, ip, lsr #2
 8002ba4:	f0c0 814d 	bcc.w	8002e42 <HAL_PCD_IRQHandler+0x6a2>
 8002ba8:	f8cd a018 	str.w	sl, [sp, #24]
 8002bac:	468a      	mov	sl, r1
 8002bae:	e021      	b.n	8002bf4 <HAL_PCD_IRQHandler+0x454>
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;

    if (len > ep->maxpacket)
 8002bb0:	f8d8 301c 	ldr.w	r3, [r8, #28]
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002bb4:	f8d8 1020 	ldr.w	r1, [r8, #32]
    if (len > ep->maxpacket)
 8002bb8:	429d      	cmp	r5, r3
 8002bba:	bf28      	it	cs
 8002bbc:	461d      	movcs	r5, r3
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002bbe:	79a3      	ldrb	r3, [r4, #6]
 8002bc0:	9300      	str	r3, [sp, #0]
 8002bc2:	465a      	mov	r2, fp
 8002bc4:	b2ab      	uxth	r3, r5
 8002bc6:	4630      	mov	r0, r6
 8002bc8:	f002 f896 	bl	8004cf8 <USB_WritePacket>
                          (uint8_t)hpcd->Init.dma_enable);

    ep->xfer_buff  += len;
 8002bcc:	f8d8 3020 	ldr.w	r3, [r8, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002bd0:	f8da 2018 	ldr.w	r2, [sl, #24]
    ep->xfer_buff  += len;
 8002bd4:	442b      	add	r3, r5
 8002bd6:	f8c8 3020 	str.w	r3, [r8, #32]
    ep->xfer_count += len;
 8002bda:	f8d8 3028 	ldr.w	r3, [r8, #40]	@ 0x28
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002bde:	b292      	uxth	r2, r2
    ep->xfer_count += len;
 8002be0:	442b      	add	r3, r5
    len32b = (len + 3U) / 4U;
 8002be2:	3503      	adds	r5, #3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002be4:	ebb2 0f95 	cmp.w	r2, r5, lsr #2
    ep->xfer_count += len;
 8002be8:	f8c8 3028 	str.w	r3, [r8, #40]	@ 0x28
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002bec:	f0c0 8124 	bcc.w	8002e38 <HAL_PCD_IRQHandler+0x698>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002bf0:	f8d8 5024 	ldr.w	r5, [r8, #36]	@ 0x24
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002bf4:	429d      	cmp	r5, r3
    len = ep->xfer_len - ep->xfer_count;
 8002bf6:	eba5 0503 	sub.w	r5, r5, r3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002bfa:	d8d9      	bhi.n	8002bb0 <HAL_PCD_IRQHandler+0x410>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002bfc:	f8dd a018 	ldr.w	sl, [sp, #24]
 8002c00:	6826      	ldr	r6, [r4, #0]
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c02:	9b07      	ldr	r3, [sp, #28]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c04:	f00a 050f 	and.w	r5, sl, #15
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c08:	f503 6100 	add.w	r1, r3, #2048	@ 0x800
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c0c:	2201      	movs	r2, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c0e:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c12:	40aa      	lsls	r2, r5
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c14:	ea23 0302 	bic.w	r3, r3, r2
 8002c18:	634b      	str	r3, [r1, #52]	@ 0x34
 8002c1a:	e771      	b.n	8002b00 <HAL_PCD_IRQHandler+0x360>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002c1c:	f002 f934 	bl	8004e88 <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 8002c20:	4607      	mov	r7, r0
 8002c22:	6820      	ldr	r0, [r4, #0]
 8002c24:	2f00      	cmp	r7, #0
 8002c26:	f43f ae03 	beq.w	8002830 <HAL_PCD_IRQHandler+0x90>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002c2a:	9504      	str	r5, [sp, #16]
 8002c2c:	f506 6830 	add.w	r8, r6, #2816	@ 0xb00
 8002c30:	46a3      	mov	fp, r4
      epnum = 0U;
 8002c32:	f04f 0a00 	mov.w	sl, #0
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002c36:	4625      	mov	r5, r4
 8002c38:	e007      	b.n	8002c4a <HAL_PCD_IRQHandler+0x4aa>
      while (ep_intr != 0U)
 8002c3a:	087f      	lsrs	r7, r7, #1
        epnum++;
 8002c3c:	f10a 0a01 	add.w	sl, sl, #1
      while (ep_intr != 0U)
 8002c40:	f108 0820 	add.w	r8, r8, #32
 8002c44:	f10b 0b24 	add.w	fp, fp, #36	@ 0x24
 8002c48:	d060      	beq.n	8002d0c <HAL_PCD_IRQHandler+0x56c>
        if ((ep_intr & 0x1U) != 0U)
 8002c4a:	07fc      	lsls	r4, r7, #31
 8002c4c:	d5f5      	bpl.n	8002c3a <HAL_PCD_IRQHandler+0x49a>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c4e:	fa5f f48a 	uxtb.w	r4, sl
 8002c52:	4621      	mov	r1, r4
 8002c54:	f002 f928 	bl	8004ea8 <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002c58:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c5c:	4681      	mov	r9, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002c5e:	d169      	bne.n	8002d34 <HAL_PCD_IRQHandler+0x594>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002c60:	f019 0f08 	tst.w	r9, #8
 8002c64:	d155      	bne.n	8002d12 <HAL_PCD_IRQHandler+0x572>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002c66:	f019 0f10 	tst.w	r9, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002c6a:	bf1c      	itt	ne
 8002c6c:	2210      	movne	r2, #16
 8002c6e:	f8c8 2008 	strne.w	r2, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002c72:	f019 0f02 	tst.w	r9, #2
 8002c76:	d00f      	beq.n	8002c98 <HAL_PCD_IRQHandler+0x4f8>
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002c78:	6972      	ldr	r2, [r6, #20]
 8002c7a:	0610      	lsls	r0, r2, #24
 8002c7c:	d504      	bpl.n	8002c88 <HAL_PCD_IRQHandler+0x4e8>
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002c7e:	9b03      	ldr	r3, [sp, #12]
 8002c80:	685a      	ldr	r2, [r3, #4]
 8002c82:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002c86:	605a      	str	r2, [r3, #4]
            if (ep->is_iso_incomplete == 1U)
 8002c88:	f89b 2257 	ldrb.w	r2, [fp, #599]	@ 0x257
 8002c8c:	2a01      	cmp	r2, #1
 8002c8e:	f000 80dc 	beq.w	8002e4a <HAL_PCD_IRQHandler+0x6aa>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002c92:	2302      	movs	r3, #2
 8002c94:	f8c8 3008 	str.w	r3, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002c98:	f019 0f20 	tst.w	r9, #32
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c9c:	bf1c      	itt	ne
 8002c9e:	2320      	movne	r3, #32
 8002ca0:	f8c8 3008 	strne.w	r3, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002ca4:	f419 5f00 	tst.w	r9, #8192	@ 0x2000
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002ca8:	bf18      	it	ne
 8002caa:	f44f 5300 	movne.w	r3, #8192	@ 0x2000
 8002cae:	6828      	ldr	r0, [r5, #0]
 8002cb0:	bf18      	it	ne
 8002cb2:	f8c8 3008 	strne.w	r3, [r8, #8]
 8002cb6:	e7c0      	b.n	8002c3a <HAL_PCD_IRQHandler+0x49a>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002cb8:	9a03      	ldr	r2, [sp, #12]
 8002cba:	f8d2 3084 	ldr.w	r3, [r2, #132]	@ 0x84
 8002cbe:	f043 030b 	orr.w	r3, r3, #11
 8002cc2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002cc6:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8002cc8:	f043 030b 	orr.w	r3, r3, #11
 8002ccc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cce:	e6e1      	b.n	8002a94 <HAL_PCD_IRQHandler+0x2f4>
        hpcd->LPM_State = LPM_L0;
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	f884 14cc 	strb.w	r1, [r4, #1228]	@ 0x4cc
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002cd6:	4620      	mov	r0, r4
 8002cd8:	f000 fa7a 	bl	80031d0 <HAL_PCDEx_LPM_Callback>
 8002cdc:	e682      	b.n	80029e4 <HAL_PCD_IRQHandler+0x244>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002cde:	2208      	movs	r2, #8
 8002ce0:	f204 419c 	addw	r1, r4, #1180	@ 0x49c
 8002ce4:	4630      	mov	r0, r6
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ce6:	eb08 08c8 	add.w	r8, r8, r8, lsl #3
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002cea:	f002 f81b 	bl	8004d24 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002cee:	eb04 0288 	add.w	r2, r4, r8, lsl #2
 8002cf2:	f3c7 130a 	ubfx	r3, r7, #4, #11
 8002cf6:	f8d2 1268 	ldr.w	r1, [r2, #616]	@ 0x268
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002cfa:	6820      	ldr	r0, [r4, #0]
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002cfc:	440b      	add	r3, r1
 8002cfe:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
 8002d02:	e58a      	b.n	800281a <HAL_PCD_IRQHandler+0x7a>
 8002d04:	4630      	mov	r0, r6
 8002d06:	9d05      	ldr	r5, [sp, #20]
 8002d08:	9e04      	ldr	r6, [sp, #16]
 8002d0a:	e597      	b.n	800283c <HAL_PCD_IRQHandler+0x9c>
 8002d0c:	462c      	mov	r4, r5
 8002d0e:	9d04      	ldr	r5, [sp, #16]
 8002d10:	e58e      	b.n	8002830 <HAL_PCD_IRQHandler+0x90>
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d12:	6829      	ldr	r1, [r5, #0]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002d14:	2208      	movs	r2, #8
 8002d16:	f8c8 2008 	str.w	r2, [r8, #8]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002d1a:	6c08      	ldr	r0, [r1, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002d1c:	f501 6230 	add.w	r2, r1, #2816	@ 0xb00

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d20:	496b      	ldr	r1, [pc, #428]	@ (8002ed0 <HAL_PCD_IRQHandler+0x730>)
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002d22:	eb02 124a 	add.w	r2, r2, sl, lsl #5
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d26:	4288      	cmp	r0, r1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002d28:	6893      	ldr	r3, [r2, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d2a:	d866      	bhi.n	8002dfa <HAL_PCD_IRQHandler+0x65a>

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002d2c:	4628      	mov	r0, r5
 8002d2e:	f003 fd9f 	bl	8006870 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002d32:	e798      	b.n	8002c66 <HAL_PCD_IRQHandler+0x4c6>
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d34:	6828      	ldr	r0, [r5, #0]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002d36:	2201      	movs	r2, #1
 8002d38:	f8c8 2008 	str.w	r2, [r8, #8]
  if (hpcd->Init.dma_enable == 1U)
 8002d3c:	79a9      	ldrb	r1, [r5, #6]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002d3e:	f8d0 e040 	ldr.w	lr, [r0, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002d42:	f500 6230 	add.w	r2, r0, #2816	@ 0xb00
 8002d46:	eb02 124a 	add.w	r2, r2, sl, lsl #5
  if (hpcd->Init.dma_enable == 1U)
 8002d4a:	2901      	cmp	r1, #1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002d4c:	6893      	ldr	r3, [r2, #8]
  if (hpcd->Init.dma_enable == 1U)
 8002d4e:	d066      	beq.n	8002e1e <HAL_PCD_IRQHandler+0x67e>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002d50:	4960      	ldr	r1, [pc, #384]	@ (8002ed4 <HAL_PCD_IRQHandler+0x734>)
 8002d52:	458e      	cmp	lr, r1
 8002d54:	f000 8081 	beq.w	8002e5a <HAL_PCD_IRQHandler+0x6ba>
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002d58:	f1ba 0f00 	cmp.w	sl, #0
 8002d5c:	d104      	bne.n	8002d68 <HAL_PCD_IRQHandler+0x5c8>
 8002d5e:	f8d5 2264 	ldr.w	r2, [r5, #612]	@ 0x264
 8002d62:	2a00      	cmp	r2, #0
 8002d64:	f000 80a7 	beq.w	8002eb6 <HAL_PCD_IRQHandler+0x716>
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d68:	4621      	mov	r1, r4
 8002d6a:	4628      	mov	r0, r5
 8002d6c:	f003 fd86 	bl	800687c <HAL_PCD_DataOutStageCallback>
 8002d70:	e776      	b.n	8002c60 <HAL_PCD_IRQHandler+0x4c0>
            (void)USB_FlushTxFifo(USBx, epnum);
 8002d72:	9804      	ldr	r0, [sp, #16]
 8002d74:	4651      	mov	r1, sl
 8002d76:	f001 fc89 	bl	800468c <USB_FlushTxFifo>
            if (ep->is_iso_incomplete == 1U)
 8002d7a:	f898 3017 	ldrb.w	r3, [r8, #23]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d072      	beq.n	8002e68 <HAL_PCD_IRQHandler+0x6c8>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002d82:	2302      	movs	r3, #2
 8002d84:	60bb      	str	r3, [r7, #8]
 8002d86:	e6f3      	b.n	8002b70 <HAL_PCD_IRQHandler+0x3d0>
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002d88:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002d8c:	421f      	tst	r7, r3
 8002d8e:	f43f ad44 	beq.w	800281a <HAL_PCD_IRQHandler+0x7a>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d92:	eb08 08c8 	add.w	r8, r8, r8, lsl #3
 8002d96:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 8002d9a:	f3c7 120a 	ubfx	r2, r7, #4, #11
 8002d9e:	f8d8 1260 	ldr.w	r1, [r8, #608]	@ 0x260
 8002da2:	4630      	mov	r0, r6
 8002da4:	4617      	mov	r7, r2
 8002da6:	f001 ffbd 	bl	8004d24 <USB_ReadPacket>
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002daa:	f8d8 3260 	ldr.w	r3, [r8, #608]	@ 0x260
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002dae:	6820      	ldr	r0, [r4, #0]
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002db0:	443b      	add	r3, r7
 8002db2:	f8c8 3260 	str.w	r3, [r8, #608]	@ 0x260
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002db6:	f8d8 3268 	ldr.w	r3, [r8, #616]	@ 0x268
 8002dba:	443b      	add	r3, r7
 8002dbc:	f8c8 3268 	str.w	r3, [r8, #616]	@ 0x268
 8002dc0:	e52b      	b.n	800281a <HAL_PCD_IRQHandler+0x7a>
        HAL_PCD_SuspendCallback(hpcd);
 8002dc2:	4620      	mov	r0, r4
 8002dc4:	f003 fd86 	bl	80068d4 <HAL_PCD_SuspendCallback>
 8002dc8:	e5c6      	b.n	8002958 <HAL_PCD_IRQHandler+0x1b8>
        HAL_PCD_DisconnectCallback(hpcd);
 8002dca:	4620      	mov	r0, r4
 8002dcc:	f003 fdaa 	bl	8006924 <HAL_PCD_DisconnectCallback>
      hpcd->Instance->GOTGINT |= RegVal;
 8002dd0:	6823      	ldr	r3, [r4, #0]
 8002dd2:	e5b6      	b.n	8002942 <HAL_PCD_IRQHandler+0x1a2>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002dd4:	e9d8 2307 	ldrd	r2, r3, [r8, #28]
 8002dd8:	4413      	add	r3, r2
 8002dda:	f8c8 3020 	str.w	r3, [r8, #32]
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002dde:	f1ba 0f00 	cmp.w	sl, #0
 8002de2:	f47f aeb2 	bne.w	8002b4a <HAL_PCD_IRQHandler+0x3aa>
 8002de6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f47f aeae 	bne.w	8002b4a <HAL_PCD_IRQHandler+0x3aa>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002dee:	6820      	ldr	r0, [r4, #0]
 8002df0:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8002df4:	f002 f886 	bl	8004f04 <USB_EP0_OutStart>
 8002df8:	e6a7      	b.n	8002b4a <HAL_PCD_IRQHandler+0x3aa>
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002dfa:	041b      	lsls	r3, r3, #16
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002dfc:	bf44      	itt	mi
 8002dfe:	f44f 4100 	movmi.w	r1, #32768	@ 0x8000
 8002e02:	6091      	strmi	r1, [r2, #8]
  HAL_PCD_SetupStageCallback(hpcd);
 8002e04:	4628      	mov	r0, r5
 8002e06:	f003 fd33 	bl	8006870 <HAL_PCD_SetupStageCallback>
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002e0a:	79a9      	ldrb	r1, [r5, #6]
 8002e0c:	2901      	cmp	r1, #1
 8002e0e:	f47f af2a 	bne.w	8002c66 <HAL_PCD_IRQHandler+0x4c6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e12:	6828      	ldr	r0, [r5, #0]
 8002e14:	f205 429c 	addw	r2, r5, #1180	@ 0x49c
 8002e18:	f002 f874 	bl	8004f04 <USB_EP0_OutStart>
 8002e1c:	e723      	b.n	8002c66 <HAL_PCD_IRQHandler+0x4c6>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002e1e:	0719      	lsls	r1, r3, #28
 8002e20:	d52a      	bpl.n	8002e78 <HAL_PCD_IRQHandler+0x6d8>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e22:	492b      	ldr	r1, [pc, #172]	@ (8002ed0 <HAL_PCD_IRQHandler+0x730>)
 8002e24:	458e      	cmp	lr, r1
 8002e26:	f67f af1b 	bls.w	8002c60 <HAL_PCD_IRQHandler+0x4c0>
 8002e2a:	0418      	lsls	r0, r3, #16
 8002e2c:	f57f af18 	bpl.w	8002c60 <HAL_PCD_IRQHandler+0x4c0>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e30:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002e34:	6091      	str	r1, [r2, #8]
 8002e36:	e713      	b.n	8002c60 <HAL_PCD_IRQHandler+0x4c0>
  if (ep->xfer_len <= ep->xfer_count)
 8002e38:	f8dd a018 	ldr.w	sl, [sp, #24]
 8002e3c:	f8d8 5024 	ldr.w	r5, [r8, #36]	@ 0x24
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002e40:	6826      	ldr	r6, [r4, #0]
  if (ep->xfer_len <= ep->xfer_count)
 8002e42:	42ab      	cmp	r3, r5
 8002e44:	f4ff ae5c 	bcc.w	8002b00 <HAL_PCD_IRQHandler+0x360>
 8002e48:	e6db      	b.n	8002c02 <HAL_PCD_IRQHandler+0x462>
              ep->is_iso_incomplete = 0U;
 8002e4a:	2200      	movs	r2, #0
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002e4c:	4621      	mov	r1, r4
              ep->is_iso_incomplete = 0U;
 8002e4e:	f88b 2257 	strb.w	r2, [fp, #599]	@ 0x257
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002e52:	4628      	mov	r0, r5
 8002e54:	f003 fd5a 	bl	800690c <HAL_PCD_ISOOUTIncompleteCallback>
 8002e58:	e71b      	b.n	8002c92 <HAL_PCD_IRQHandler+0x4f2>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002e5a:	0418      	lsls	r0, r3, #16
 8002e5c:	d4e8      	bmi.n	8002e30 <HAL_PCD_IRQHandler+0x690>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e5e:	0699      	lsls	r1, r3, #26
 8002e60:	d582      	bpl.n	8002d68 <HAL_PCD_IRQHandler+0x5c8>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e62:	2120      	movs	r1, #32
 8002e64:	6091      	str	r1, [r2, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e66:	e77f      	b.n	8002d68 <HAL_PCD_IRQHandler+0x5c8>
              ep->is_iso_incomplete = 0U;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	f888 3017 	strb.w	r3, [r8, #23]
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002e6e:	4659      	mov	r1, fp
 8002e70:	4620      	mov	r0, r4
 8002e72:	f003 fd4f 	bl	8006914 <HAL_PCD_ISOINIncompleteCallback>
 8002e76:	e784      	b.n	8002d82 <HAL_PCD_IRQHandler+0x5e2>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002e78:	0699      	lsls	r1, r3, #26
 8002e7a:	d502      	bpl.n	8002e82 <HAL_PCD_IRQHandler+0x6e2>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e7c:	2120      	movs	r1, #32
 8002e7e:	6091      	str	r1, [r2, #8]
 8002e80:	e6ee      	b.n	8002c60 <HAL_PCD_IRQHandler+0x4c0>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e82:	4913      	ldr	r1, [pc, #76]	@ (8002ed0 <HAL_PCD_IRQHandler+0x730>)
 8002e84:	458e      	cmp	lr, r1
 8002e86:	d901      	bls.n	8002e8c <HAL_PCD_IRQHandler+0x6ec>
 8002e88:	041b      	lsls	r3, r3, #16
 8002e8a:	d4d1      	bmi.n	8002e30 <HAL_PCD_IRQHandler+0x690>
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002e8c:	6911      	ldr	r1, [r2, #16]
 8002e8e:	f8db 2274 	ldr.w	r2, [fp, #628]	@ 0x274
 8002e92:	f3c1 0112 	ubfx	r1, r1, #0, #19
 8002e96:	1a52      	subs	r2, r2, r1
 8002e98:	f8cb 2268 	str.w	r2, [fp, #616]	@ 0x268
        if (epnum == 0U)
 8002e9c:	f1ba 0f00 	cmp.w	sl, #0
 8002ea0:	f47f af62 	bne.w	8002d68 <HAL_PCD_IRQHandler+0x5c8>
          if (ep->xfer_len == 0U)
 8002ea4:	f8d5 1264 	ldr.w	r1, [r5, #612]	@ 0x264
 8002ea8:	b159      	cbz	r1, 8002ec2 <HAL_PCD_IRQHandler+0x722>
            ep->xfer_buff += ep->xfer_count;
 8002eaa:	f8d5 1260 	ldr.w	r1, [r5, #608]	@ 0x260
 8002eae:	4411      	add	r1, r2
 8002eb0:	f8c5 1260 	str.w	r1, [r5, #608]	@ 0x260
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002eb4:	e758      	b.n	8002d68 <HAL_PCD_IRQHandler+0x5c8>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002eb6:	f205 429c 	addw	r2, r5, #1180	@ 0x49c
 8002eba:	4651      	mov	r1, sl
 8002ebc:	f002 f822 	bl	8004f04 <USB_EP0_OutStart>
 8002ec0:	e752      	b.n	8002d68 <HAL_PCD_IRQHandler+0x5c8>
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ec2:	f205 429c 	addw	r2, r5, #1180	@ 0x49c
 8002ec6:	2101      	movs	r1, #1
 8002ec8:	f002 f81c 	bl	8004f04 <USB_EP0_OutStart>
 8002ecc:	e74c      	b.n	8002d68 <HAL_PCD_IRQHandler+0x5c8>
 8002ece:	bf00      	nop
 8002ed0:	4f54300a 	.word	0x4f54300a
 8002ed4:	4f54310a 	.word	0x4f54310a

08002ed8 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8002ed8:	f890 2494 	ldrb.w	r2, [r0, #1172]	@ 0x494
 8002edc:	2a01      	cmp	r2, #1
 8002ede:	d00d      	beq.n	8002efc <HAL_PCD_SetAddress+0x24>
{
 8002ee0:	b510      	push	{r4, lr}
 8002ee2:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8002ee4:	2201      	movs	r2, #1
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002ee6:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8002ee8:	f884 2494 	strb.w	r2, [r4, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002eec:	7461      	strb	r1, [r4, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002eee:	f001 ff97 	bl	8004e20 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  return HAL_OK;
 8002ef8:	4618      	mov	r0, r3
}
 8002efa:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8002efc:	2002      	movs	r0, #2
}
 8002efe:	4770      	bx	lr

08002f00 <HAL_PCD_EP_Open>:
{
 8002f00:	b510      	push	{r4, lr}
 8002f02:	f001 0e0f 	and.w	lr, r1, #15
 8002f06:	eb0e 0cce 	add.w	ip, lr, lr, lsl #3
  if ((ep_addr & 0x80U) == 0x80U)
 8002f0a:	0609      	lsls	r1, r1, #24
{
 8002f0c:	4604      	mov	r4, r0
 8002f0e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
  if ((ep_addr & 0x80U) == 0x80U)
 8002f12:	d427      	bmi.n	8002f64 <HAL_PCD_EP_Open+0x64>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f14:	f50c 7115 	add.w	r1, ip, #596	@ 0x254
 8002f18:	4401      	add	r1, r0
    ep->is_in = 0U;
 8002f1a:	eb0e 00ce 	add.w	r0, lr, lr, lsl #3
 8002f1e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8002f22:	f04f 0c00 	mov.w	ip, #0
 8002f26:	f880 c255 	strb.w	ip, [r0, #597]	@ 0x255
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002f2a:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8002f2e:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 8002f30:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f32:	f881 e000 	strb.w	lr, [r1]
  ep->type = ep_type;
 8002f36:	710b      	strb	r3, [r1, #4]
  if (ep->is_in != 0U)
 8002f38:	b10a      	cbz	r2, 8002f3e <HAL_PCD_EP_Open+0x3e>
    ep->tx_fifo_num = ep->num;
 8002f3a:	f8a1 e01a 	strh.w	lr, [r1, #26]
  if (ep_type == EP_TYPE_BULK)
 8002f3e:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8002f40:	bf04      	itt	eq
 8002f42:	2300      	moveq	r3, #0
 8002f44:	714b      	strbeq	r3, [r1, #5]
  __HAL_LOCK(hpcd);
 8002f46:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d016      	beq.n	8002f7c <HAL_PCD_EP_Open+0x7c>
 8002f4e:	2301      	movs	r3, #1
 8002f50:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002f54:	6820      	ldr	r0, [r4, #0]
 8002f56:	f001 fccd 	bl	80048f4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  return ret;
 8002f60:	4618      	mov	r0, r3
}
 8002f62:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f64:	f10c 0114 	add.w	r1, ip, #20
 8002f68:	4401      	add	r1, r0
    ep->is_in = 1U;
 8002f6a:	eb0e 00ce 	add.w	r0, lr, lr, lsl #3
 8002f6e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8002f72:	f04f 0c01 	mov.w	ip, #1
 8002f76:	f880 c015 	strb.w	ip, [r0, #21]
 8002f7a:	e7d6      	b.n	8002f2a <HAL_PCD_EP_Open+0x2a>
  __HAL_LOCK(hpcd);
 8002f7c:	2002      	movs	r0, #2
}
 8002f7e:	bd10      	pop	{r4, pc}

08002f80 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8002f80:	f001 030f 	and.w	r3, r1, #15
 8002f84:	f001 020f 	and.w	r2, r1, #15
{
 8002f88:	b510      	push	{r4, lr}
 8002f8a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8002f8e:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8002f90:	0609      	lsls	r1, r1, #24
    ep->is_in = 1U;
 8002f92:	eb02 00c2 	add.w	r0, r2, r2, lsl #3
 8002f96:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002f9a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  if ((ep_addr & 0x80U) == 0x80U)
 8002f9e:	d416      	bmi.n	8002fce <HAL_PCD_EP_Close+0x4e>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fa0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002fa4:	18e1      	adds	r1, r4, r3
    ep->is_in = 0U;
 8002fa6:	f04f 0c00 	mov.w	ip, #0
 8002faa:	f880 c255 	strb.w	ip, [r0, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fae:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8002fb0:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d015      	beq.n	8002fe4 <HAL_PCD_EP_Close+0x64>
 8002fb8:	2301      	movs	r3, #1
 8002fba:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002fbe:	6820      	ldr	r0, [r4, #0]
 8002fc0:	f001 fce0 	bl	8004984 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  return HAL_OK;
 8002fca:	4618      	mov	r0, r3
}
 8002fcc:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fce:	3314      	adds	r3, #20
 8002fd0:	18e1      	adds	r1, r4, r3
    ep->is_in = 1U;
 8002fd2:	f04f 0c01 	mov.w	ip, #1
 8002fd6:	f880 c015 	strb.w	ip, [r0, #21]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fda:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8002fdc:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d1e9      	bne.n	8002fb8 <HAL_PCD_EP_Close+0x38>
 8002fe4:	2002      	movs	r0, #2
}
 8002fe6:	bd10      	pop	{r4, pc}

08002fe8 <HAL_PCD_EP_Receive>:
{
 8002fe8:	b510      	push	{r4, lr}
 8002fea:	f001 0e0f 	and.w	lr, r1, #15
  ep->xfer_buff = pBuf;
 8002fee:	eb0e 0cce 	add.w	ip, lr, lr, lsl #3
 8002ff2:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
{
 8002ff6:	4614      	mov	r4, r2
  ep->xfer_len = len;
 8002ff8:	f8cc 3264 	str.w	r3, [ip, #612]	@ 0x264
  ep->xfer_count = 0U;
 8002ffc:	2300      	movs	r3, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ffe:	f88c e254 	strb.w	lr, [ip, #596]	@ 0x254
  ep->xfer_buff = pBuf;
 8003002:	f8cc 2260 	str.w	r2, [ip, #608]	@ 0x260
  ep->xfer_count = 0U;
 8003006:	f8cc 3268 	str.w	r3, [ip, #616]	@ 0x268
  ep->is_in = 0U;
 800300a:	f88c 3255 	strb.w	r3, [ip, #597]	@ 0x255
  if (hpcd->Init.dma_enable == 1U)
 800300e:	7982      	ldrb	r2, [r0, #6]
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003010:	2124      	movs	r1, #36	@ 0x24
 8003012:	fb01 010e 	mla	r1, r1, lr, r0
  if (hpcd->Init.dma_enable == 1U)
 8003016:	2a01      	cmp	r2, #1
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003018:	f501 7115 	add.w	r1, r1, #596	@ 0x254
    ep->dma_addr = (uint32_t)pBuf;
 800301c:	bf08      	it	eq
 800301e:	f8cc 4270 	streq.w	r4, [ip, #624]	@ 0x270
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003022:	6800      	ldr	r0, [r0, #0]
 8003024:	f001 fd10 	bl	8004a48 <USB_EPStartXfer>
}
 8003028:	2000      	movs	r0, #0
 800302a:	bd10      	pop	{r4, pc}

0800302c <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800302c:	f001 010f 	and.w	r1, r1, #15
 8003030:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8003034:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 8003038:	f8d0 0268 	ldr.w	r0, [r0, #616]	@ 0x268
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop

08003040 <HAL_PCD_EP_Transmit>:
{
 8003040:	b510      	push	{r4, lr}
 8003042:	f001 0e0f 	and.w	lr, r1, #15
  ep->xfer_buff = pBuf;
 8003046:	eb0e 0cce 	add.w	ip, lr, lr, lsl #3
 800304a:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
{
 800304e:	4614      	mov	r4, r2
  ep->xfer_len = len;
 8003050:	f8cc 3024 	str.w	r3, [ip, #36]	@ 0x24
  ep->xfer_count = 0U;
 8003054:	2300      	movs	r3, #0
 8003056:	f8cc 3028 	str.w	r3, [ip, #40]	@ 0x28
  ep->is_in = 1U;
 800305a:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800305c:	f88c e014 	strb.w	lr, [ip, #20]
  ep->xfer_buff = pBuf;
 8003060:	f8cc 2020 	str.w	r2, [ip, #32]
  ep->is_in = 1U;
 8003064:	f88c 3015 	strb.w	r3, [ip, #21]
  if (hpcd->Init.dma_enable == 1U)
 8003068:	7982      	ldrb	r2, [r0, #6]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800306a:	2124      	movs	r1, #36	@ 0x24
 800306c:	fb01 010e 	mla	r1, r1, lr, r0
  if (hpcd->Init.dma_enable == 1U)
 8003070:	429a      	cmp	r2, r3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003072:	f101 0114 	add.w	r1, r1, #20
    ep->dma_addr = (uint32_t)pBuf;
 8003076:	bf08      	it	eq
 8003078:	f8cc 4030 	streq.w	r4, [ip, #48]	@ 0x30
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800307c:	6800      	ldr	r0, [r0, #0]
 800307e:	f001 fce3 	bl	8004a48 <USB_EPStartXfer>
}
 8003082:	2000      	movs	r0, #0
 8003084:	bd10      	pop	{r4, pc}
 8003086:	bf00      	nop

08003088 <HAL_PCD_EP_SetStall>:
{
 8003088:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800308a:	7903      	ldrb	r3, [r0, #4]
 800308c:	f001 050f 	and.w	r5, r1, #15
 8003090:	42ab      	cmp	r3, r5
 8003092:	d332      	bcc.n	80030fa <HAL_PCD_EP_SetStall+0x72>
  if ((0x80U & ep_addr) == 0x80U)
 8003094:	060b      	lsls	r3, r1, #24
 8003096:	4604      	mov	r4, r0
 8003098:	d41c      	bmi.n	80030d4 <HAL_PCD_EP_SetStall+0x4c>
    ep->is_in = 0U;
 800309a:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 800309e:	2224      	movs	r2, #36	@ 0x24
 80030a0:	fb02 0101 	mla	r1, r2, r1, r0
    ep->is_in = 0U;
 80030a4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->OUT_ep[ep_addr];
 80030a8:	f501 7115 	add.w	r1, r1, #596	@ 0x254
    ep->is_in = 0U;
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 2255 	strb.w	r2, [r3, #597]	@ 0x255
  ep->is_stall = 1U;
 80030b2:	2301      	movs	r3, #1
 80030b4:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030b6:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 80030b8:	f894 2494 	ldrb.w	r2, [r4, #1172]	@ 0x494
 80030bc:	429a      	cmp	r2, r3
 80030be:	d01a      	beq.n	80030f6 <HAL_PCD_EP_SetStall+0x6e>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80030c0:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80030c2:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80030c6:	f001 fe51 	bl	8004d6c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80030ca:	b1c5      	cbz	r5, 80030fe <HAL_PCD_EP_SetStall+0x76>
  __HAL_UNLOCK(hpcd);
 80030cc:	2000      	movs	r0, #0
 80030ce:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 80030d2:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 80030d4:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030d8:	2124      	movs	r1, #36	@ 0x24
 80030da:	fb01 0105 	mla	r1, r1, r5, r0
    ep->is_in = 1U;
 80030de:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80030e2:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030e4:	3114      	adds	r1, #20
    ep->is_in = 1U;
 80030e6:	755a      	strb	r2, [r3, #21]
  ep->is_stall = 1U;
 80030e8:	2301      	movs	r3, #1
 80030ea:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030ec:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 80030ee:	f894 2494 	ldrb.w	r2, [r4, #1172]	@ 0x494
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d1e4      	bne.n	80030c0 <HAL_PCD_EP_SetStall+0x38>
 80030f6:	2002      	movs	r0, #2
}
 80030f8:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80030fa:	2001      	movs	r0, #1
}
 80030fc:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80030fe:	79a1      	ldrb	r1, [r4, #6]
 8003100:	6820      	ldr	r0, [r4, #0]
 8003102:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8003106:	f001 fefd 	bl	8004f04 <USB_EP0_OutStart>
 800310a:	e7df      	b.n	80030cc <HAL_PCD_EP_SetStall+0x44>

0800310c <HAL_PCD_EP_ClrStall>:
{
 800310c:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800310e:	7903      	ldrb	r3, [r0, #4]
 8003110:	f001 020f 	and.w	r2, r1, #15
 8003114:	4293      	cmp	r3, r2
 8003116:	d32e      	bcc.n	8003176 <HAL_PCD_EP_ClrStall+0x6a>
  if ((0x80U & ep_addr) == 0x80U)
 8003118:	4604      	mov	r4, r0
 800311a:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
    ep->is_in = 1U;
 800311e:	eb02 00c2 	add.w	r0, r2, r2, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 8003122:	0609      	lsls	r1, r1, #24
 8003124:	ea4f 0383 	mov.w	r3, r3, lsl #2
    ep->is_in = 1U;
 8003128:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  if ((0x80U & ep_addr) == 0x80U)
 800312c:	d416      	bmi.n	800315c <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800312e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003132:	18e1      	adds	r1, r4, r3
    ep->is_in = 0U;
 8003134:	2500      	movs	r5, #0
 8003136:	f880 5255 	strb.w	r5, [r0, #597]	@ 0x255
  ep->is_stall = 0U;
 800313a:	2500      	movs	r5, #0
 800313c:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800313e:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8003140:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8003144:	2b01      	cmp	r3, #1
 8003146:	d014      	beq.n	8003172 <HAL_PCD_EP_ClrStall+0x66>
 8003148:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800314a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800314c:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003150:	f001 fe3a 	bl	8004dc8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003154:	f884 5494 	strb.w	r5, [r4, #1172]	@ 0x494
  return HAL_OK;
 8003158:	4628      	mov	r0, r5
}
 800315a:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800315c:	3314      	adds	r3, #20
 800315e:	18e1      	adds	r1, r4, r3
    ep->is_in = 1U;
 8003160:	2501      	movs	r5, #1
 8003162:	7545      	strb	r5, [r0, #21]
  ep->is_stall = 0U;
 8003164:	2500      	movs	r5, #0
 8003166:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003168:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 800316a:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 800316e:	2b01      	cmp	r3, #1
 8003170:	d1ea      	bne.n	8003148 <HAL_PCD_EP_ClrStall+0x3c>
 8003172:	2002      	movs	r0, #2
}
 8003174:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003176:	2001      	movs	r0, #1
}
 8003178:	bd38      	pop	{r3, r4, r5, pc}
 800317a:	bf00      	nop

0800317c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800317c:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800317e:	6804      	ldr	r4, [r0, #0]

  if (fifo == 0U)
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003180:	0412      	lsls	r2, r2, #16
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003182:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  if (fifo == 0U)
 8003184:	b929      	cbnz	r1, 8003192 <HAL_PCDEx_SetTxFiFo+0x16>
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003186:	431a      	orrs	r2, r3
 8003188:	62a2      	str	r2, [r4, #40]	@ 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 800318a:	2000      	movs	r0, #0
 800318c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003190:	4770      	bx	lr
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003192:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 8003194:	3901      	subs	r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003196:	eb03 4c10 	add.w	ip, r3, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800319a:	d00a      	beq.n	80031b2 <HAL_PCDEx_SetTxFiFo+0x36>
 800319c:	2300      	movs	r3, #0
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800319e:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 80031a2:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    for (i = 0U; i < (fifo - 1U); i++)
 80031a6:	3301      	adds	r3, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80031a8:	6840      	ldr	r0, [r0, #4]
    for (i = 0U; i < (fifo - 1U); i++)
 80031aa:	4299      	cmp	r1, r3
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80031ac:	eb0c 4c10 	add.w	ip, ip, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80031b0:	d1f5      	bne.n	800319e <HAL_PCDEx_SetTxFiFo+0x22>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80031b2:	3140      	adds	r1, #64	@ 0x40
 80031b4:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80031b8:	ea42 020c 	orr.w	r2, r2, ip
 80031bc:	6062      	str	r2, [r4, #4]
}
 80031be:	2000      	movs	r0, #0
 80031c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop

080031c8 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 80031c8:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 80031ca:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 80031cc:	6259      	str	r1, [r3, #36]	@ 0x24
}
 80031ce:	4770      	bx	lr

080031d0 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop

080031d4 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031d4:	2800      	cmp	r0, #0
 80031d6:	f000 81d8 	beq.w	800358a <HAL_RCC_OscConfig+0x3b6>
{
 80031da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031de:	6803      	ldr	r3, [r0, #0]
 80031e0:	07dd      	lsls	r5, r3, #31
{
 80031e2:	b082      	sub	sp, #8
 80031e4:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031e6:	d52f      	bpl.n	8003248 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80031e8:	499d      	ldr	r1, [pc, #628]	@ (8003460 <HAL_RCC_OscConfig+0x28c>)
 80031ea:	688a      	ldr	r2, [r1, #8]
 80031ec:	f002 020c 	and.w	r2, r2, #12
 80031f0:	2a04      	cmp	r2, #4
 80031f2:	f000 80ec 	beq.w	80033ce <HAL_RCC_OscConfig+0x1fa>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031f6:	688a      	ldr	r2, [r1, #8]
 80031f8:	f002 020c 	and.w	r2, r2, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80031fc:	2a08      	cmp	r2, #8
 80031fe:	f000 80e2 	beq.w	80033c6 <HAL_RCC_OscConfig+0x1f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003202:	6863      	ldr	r3, [r4, #4]
 8003204:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003208:	f000 80eb 	beq.w	80033e2 <HAL_RCC_OscConfig+0x20e>
 800320c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003210:	f000 8173 	beq.w	80034fa <HAL_RCC_OscConfig+0x326>
 8003214:	4d92      	ldr	r5, [pc, #584]	@ (8003460 <HAL_RCC_OscConfig+0x28c>)
 8003216:	682a      	ldr	r2, [r5, #0]
 8003218:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800321c:	602a      	str	r2, [r5, #0]
 800321e:	682a      	ldr	r2, [r5, #0]
 8003220:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003224:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003226:	2b00      	cmp	r3, #0
 8003228:	f040 80e0 	bne.w	80033ec <HAL_RCC_OscConfig+0x218>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800322c:	f7fe f91c 	bl	8001468 <HAL_GetTick>
 8003230:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003232:	e005      	b.n	8003240 <HAL_RCC_OscConfig+0x6c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003234:	f7fe f918 	bl	8001468 <HAL_GetTick>
 8003238:	1b80      	subs	r0, r0, r6
 800323a:	2864      	cmp	r0, #100	@ 0x64
 800323c:	f200 8100 	bhi.w	8003440 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003240:	682b      	ldr	r3, [r5, #0]
 8003242:	039f      	lsls	r7, r3, #14
 8003244:	d4f6      	bmi.n	8003234 <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003246:	6823      	ldr	r3, [r4, #0]
 8003248:	079d      	lsls	r5, r3, #30
 800324a:	d528      	bpl.n	800329e <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800324c:	4a84      	ldr	r2, [pc, #528]	@ (8003460 <HAL_RCC_OscConfig+0x28c>)
 800324e:	6891      	ldr	r1, [r2, #8]
 8003250:	f011 0f0c 	tst.w	r1, #12
 8003254:	f000 809b 	beq.w	800338e <HAL_RCC_OscConfig+0x1ba>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003258:	6891      	ldr	r1, [r2, #8]
 800325a:	f001 010c 	and.w	r1, r1, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800325e:	2908      	cmp	r1, #8
 8003260:	f000 8091 	beq.w	8003386 <HAL_RCC_OscConfig+0x1b2>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003264:	68e3      	ldr	r3, [r4, #12]
 8003266:	2b00      	cmp	r3, #0
 8003268:	f000 810c 	beq.w	8003484 <HAL_RCC_OscConfig+0x2b0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800326c:	4b7d      	ldr	r3, [pc, #500]	@ (8003464 <HAL_RCC_OscConfig+0x290>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800326e:	4e7c      	ldr	r6, [pc, #496]	@ (8003460 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 8003270:	2201      	movs	r2, #1
 8003272:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003274:	f7fe f8f8 	bl	8001468 <HAL_GetTick>
 8003278:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800327a:	e005      	b.n	8003288 <HAL_RCC_OscConfig+0xb4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800327c:	f7fe f8f4 	bl	8001468 <HAL_GetTick>
 8003280:	1b40      	subs	r0, r0, r5
 8003282:	2802      	cmp	r0, #2
 8003284:	f200 80dc 	bhi.w	8003440 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003288:	6833      	ldr	r3, [r6, #0]
 800328a:	079f      	lsls	r7, r3, #30
 800328c:	d5f6      	bpl.n	800327c <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800328e:	6833      	ldr	r3, [r6, #0]
 8003290:	6922      	ldr	r2, [r4, #16]
 8003292:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003296:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800329a:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800329c:	6823      	ldr	r3, [r4, #0]
 800329e:	071a      	lsls	r2, r3, #28
 80032a0:	d45c      	bmi.n	800335c <HAL_RCC_OscConfig+0x188>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032a2:	075d      	lsls	r5, r3, #29
 80032a4:	d53a      	bpl.n	800331c <HAL_RCC_OscConfig+0x148>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032a6:	4a6e      	ldr	r2, [pc, #440]	@ (8003460 <HAL_RCC_OscConfig+0x28c>)
 80032a8:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80032aa:	f013 5380 	ands.w	r3, r3, #268435456	@ 0x10000000
 80032ae:	f040 8088 	bne.w	80033c2 <HAL_RCC_OscConfig+0x1ee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032b2:	9301      	str	r3, [sp, #4]
 80032b4:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80032b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80032bc:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80032be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032c2:	9301      	str	r3, [sp, #4]
 80032c4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80032c6:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c8:	4e67      	ldr	r6, [pc, #412]	@ (8003468 <HAL_RCC_OscConfig+0x294>)
 80032ca:	6833      	ldr	r3, [r6, #0]
 80032cc:	05d8      	lsls	r0, r3, #23
 80032ce:	f140 80a7 	bpl.w	8003420 <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032d2:	68a3      	ldr	r3, [r4, #8]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	f000 80b7 	beq.w	8003448 <HAL_RCC_OscConfig+0x274>
 80032da:	2b05      	cmp	r3, #5
 80032dc:	f000 811d 	beq.w	800351a <HAL_RCC_OscConfig+0x346>
 80032e0:	4e5f      	ldr	r6, [pc, #380]	@ (8003460 <HAL_RCC_OscConfig+0x28c>)
 80032e2:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 80032e4:	f022 0201 	bic.w	r2, r2, #1
 80032e8:	6732      	str	r2, [r6, #112]	@ 0x70
 80032ea:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 80032ec:	f022 0204 	bic.w	r2, r2, #4
 80032f0:	6732      	str	r2, [r6, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f040 80ad 	bne.w	8003452 <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032f8:	f7fe f8b6 	bl	8001468 <HAL_GetTick>

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032fc:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8003300:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003302:	e005      	b.n	8003310 <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003304:	f7fe f8b0 	bl	8001468 <HAL_GetTick>
 8003308:	1bc0      	subs	r0, r0, r7
 800330a:	4540      	cmp	r0, r8
 800330c:	f200 8098 	bhi.w	8003440 <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003310:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8003312:	079b      	lsls	r3, r3, #30
 8003314:	d4f6      	bmi.n	8003304 <HAL_RCC_OscConfig+0x130>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003316:	2d00      	cmp	r5, #0
 8003318:	f040 80f9 	bne.w	800350e <HAL_RCC_OscConfig+0x33a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800331c:	69a3      	ldr	r3, [r4, #24]
 800331e:	b1cb      	cbz	r3, 8003354 <HAL_RCC_OscConfig+0x180>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003320:	4d4f      	ldr	r5, [pc, #316]	@ (8003460 <HAL_RCC_OscConfig+0x28c>)
 8003322:	68aa      	ldr	r2, [r5, #8]
 8003324:	f002 020c 	and.w	r2, r2, #12
 8003328:	2a08      	cmp	r2, #8
 800332a:	f000 80bc 	beq.w	80034a6 <HAL_RCC_OscConfig+0x2d2>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800332e:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003330:	4b4c      	ldr	r3, [pc, #304]	@ (8003464 <HAL_RCC_OscConfig+0x290>)
 8003332:	f04f 0200 	mov.w	r2, #0
 8003336:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003338:	f000 80f9 	beq.w	800352e <HAL_RCC_OscConfig+0x35a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800333c:	f7fe f894 	bl	8001468 <HAL_GetTick>
 8003340:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003342:	e004      	b.n	800334e <HAL_RCC_OscConfig+0x17a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003344:	f7fe f890 	bl	8001468 <HAL_GetTick>
 8003348:	1b00      	subs	r0, r0, r4
 800334a:	2802      	cmp	r0, #2
 800334c:	d878      	bhi.n	8003440 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800334e:	682b      	ldr	r3, [r5, #0]
 8003350:	019b      	lsls	r3, r3, #6
 8003352:	d4f7      	bmi.n	8003344 <HAL_RCC_OscConfig+0x170>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8003354:	2000      	movs	r0, #0
}
 8003356:	b002      	add	sp, #8
 8003358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800335c:	6963      	ldr	r3, [r4, #20]
 800335e:	b1fb      	cbz	r3, 80033a0 <HAL_RCC_OscConfig+0x1cc>
      __HAL_RCC_LSI_ENABLE();
 8003360:	4b40      	ldr	r3, [pc, #256]	@ (8003464 <HAL_RCC_OscConfig+0x290>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003362:	4e3f      	ldr	r6, [pc, #252]	@ (8003460 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_LSI_ENABLE();
 8003364:	2201      	movs	r2, #1
 8003366:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 800336a:	f7fe f87d 	bl	8001468 <HAL_GetTick>
 800336e:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003370:	e004      	b.n	800337c <HAL_RCC_OscConfig+0x1a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003372:	f7fe f879 	bl	8001468 <HAL_GetTick>
 8003376:	1b40      	subs	r0, r0, r5
 8003378:	2802      	cmp	r0, #2
 800337a:	d861      	bhi.n	8003440 <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800337c:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 800337e:	079b      	lsls	r3, r3, #30
 8003380:	d5f7      	bpl.n	8003372 <HAL_RCC_OscConfig+0x19e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003382:	6823      	ldr	r3, [r4, #0]
 8003384:	e78d      	b.n	80032a2 <HAL_RCC_OscConfig+0xce>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003386:	6852      	ldr	r2, [r2, #4]
 8003388:	0251      	lsls	r1, r2, #9
 800338a:	f53f af6b 	bmi.w	8003264 <HAL_RCC_OscConfig+0x90>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800338e:	4a34      	ldr	r2, [pc, #208]	@ (8003460 <HAL_RCC_OscConfig+0x28c>)
 8003390:	6812      	ldr	r2, [r2, #0]
 8003392:	0792      	lsls	r2, r2, #30
 8003394:	d538      	bpl.n	8003408 <HAL_RCC_OscConfig+0x234>
 8003396:	68e2      	ldr	r2, [r4, #12]
 8003398:	2a01      	cmp	r2, #1
 800339a:	d035      	beq.n	8003408 <HAL_RCC_OscConfig+0x234>
    return HAL_ERROR;
 800339c:	2001      	movs	r0, #1
 800339e:	e7da      	b.n	8003356 <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_LSI_DISABLE();
 80033a0:	4a30      	ldr	r2, [pc, #192]	@ (8003464 <HAL_RCC_OscConfig+0x290>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033a2:	4e2f      	ldr	r6, [pc, #188]	@ (8003460 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_LSI_DISABLE();
 80033a4:	f8c2 3e80 	str.w	r3, [r2, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 80033a8:	f7fe f85e 	bl	8001468 <HAL_GetTick>
 80033ac:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033ae:	e004      	b.n	80033ba <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033b0:	f7fe f85a 	bl	8001468 <HAL_GetTick>
 80033b4:	1b40      	subs	r0, r0, r5
 80033b6:	2802      	cmp	r0, #2
 80033b8:	d842      	bhi.n	8003440 <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033ba:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 80033bc:	079f      	lsls	r7, r3, #30
 80033be:	d4f7      	bmi.n	80033b0 <HAL_RCC_OscConfig+0x1dc>
 80033c0:	e7df      	b.n	8003382 <HAL_RCC_OscConfig+0x1ae>
    FlagStatus       pwrclkchanged = RESET;
 80033c2:	2500      	movs	r5, #0
 80033c4:	e780      	b.n	80032c8 <HAL_RCC_OscConfig+0xf4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033c6:	684a      	ldr	r2, [r1, #4]
 80033c8:	0251      	lsls	r1, r2, #9
 80033ca:	f57f af1a 	bpl.w	8003202 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033ce:	4a24      	ldr	r2, [pc, #144]	@ (8003460 <HAL_RCC_OscConfig+0x28c>)
 80033d0:	6812      	ldr	r2, [r2, #0]
 80033d2:	0392      	lsls	r2, r2, #14
 80033d4:	f57f af38 	bpl.w	8003248 <HAL_RCC_OscConfig+0x74>
 80033d8:	6862      	ldr	r2, [r4, #4]
 80033da:	2a00      	cmp	r2, #0
 80033dc:	f47f af34 	bne.w	8003248 <HAL_RCC_OscConfig+0x74>
 80033e0:	e7dc      	b.n	800339c <HAL_RCC_OscConfig+0x1c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033e2:	4a1f      	ldr	r2, [pc, #124]	@ (8003460 <HAL_RCC_OscConfig+0x28c>)
 80033e4:	6813      	ldr	r3, [r2, #0]
 80033e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033ea:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80033ec:	f7fe f83c 	bl	8001468 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033f0:	4e1b      	ldr	r6, [pc, #108]	@ (8003460 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 80033f2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033f4:	e004      	b.n	8003400 <HAL_RCC_OscConfig+0x22c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033f6:	f7fe f837 	bl	8001468 <HAL_GetTick>
 80033fa:	1b40      	subs	r0, r0, r5
 80033fc:	2864      	cmp	r0, #100	@ 0x64
 80033fe:	d81f      	bhi.n	8003440 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003400:	6833      	ldr	r3, [r6, #0]
 8003402:	039b      	lsls	r3, r3, #14
 8003404:	d5f7      	bpl.n	80033f6 <HAL_RCC_OscConfig+0x222>
 8003406:	e71e      	b.n	8003246 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003408:	4915      	ldr	r1, [pc, #84]	@ (8003460 <HAL_RCC_OscConfig+0x28c>)
 800340a:	6920      	ldr	r0, [r4, #16]
 800340c:	680a      	ldr	r2, [r1, #0]
 800340e:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 8003412:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8003416:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003418:	071a      	lsls	r2, r3, #28
 800341a:	f57f af42 	bpl.w	80032a2 <HAL_RCC_OscConfig+0xce>
 800341e:	e79d      	b.n	800335c <HAL_RCC_OscConfig+0x188>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003420:	6833      	ldr	r3, [r6, #0]
 8003422:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003426:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003428:	f7fe f81e 	bl	8001468 <HAL_GetTick>
 800342c:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800342e:	6833      	ldr	r3, [r6, #0]
 8003430:	05d9      	lsls	r1, r3, #23
 8003432:	f53f af4e 	bmi.w	80032d2 <HAL_RCC_OscConfig+0xfe>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003436:	f7fe f817 	bl	8001468 <HAL_GetTick>
 800343a:	1bc0      	subs	r0, r0, r7
 800343c:	2802      	cmp	r0, #2
 800343e:	d9f6      	bls.n	800342e <HAL_RCC_OscConfig+0x25a>
            return HAL_TIMEOUT;
 8003440:	2003      	movs	r0, #3
}
 8003442:	b002      	add	sp, #8
 8003444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003448:	4a05      	ldr	r2, [pc, #20]	@ (8003460 <HAL_RCC_OscConfig+0x28c>)
 800344a:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 800344c:	f043 0301 	orr.w	r3, r3, #1
 8003450:	6713      	str	r3, [r2, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8003452:	f7fe f809 	bl	8001468 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003456:	4f02      	ldr	r7, [pc, #8]	@ (8003460 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8003458:	4606      	mov	r6, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800345a:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800345e:	e00a      	b.n	8003476 <HAL_RCC_OscConfig+0x2a2>
 8003460:	40023800 	.word	0x40023800
 8003464:	42470000 	.word	0x42470000
 8003468:	40007000 	.word	0x40007000
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800346c:	f7fd fffc 	bl	8001468 <HAL_GetTick>
 8003470:	1b80      	subs	r0, r0, r6
 8003472:	4540      	cmp	r0, r8
 8003474:	d8e4      	bhi.n	8003440 <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003476:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003478:	079a      	lsls	r2, r3, #30
 800347a:	d5f7      	bpl.n	800346c <HAL_RCC_OscConfig+0x298>
    if (pwrclkchanged == SET)
 800347c:	2d00      	cmp	r5, #0
 800347e:	f43f af4d 	beq.w	800331c <HAL_RCC_OscConfig+0x148>
 8003482:	e044      	b.n	800350e <HAL_RCC_OscConfig+0x33a>
        __HAL_RCC_HSI_DISABLE();
 8003484:	4a42      	ldr	r2, [pc, #264]	@ (8003590 <HAL_RCC_OscConfig+0x3bc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003486:	4e43      	ldr	r6, [pc, #268]	@ (8003594 <HAL_RCC_OscConfig+0x3c0>)
        __HAL_RCC_HSI_DISABLE();
 8003488:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800348a:	f7fd ffed 	bl	8001468 <HAL_GetTick>
 800348e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003490:	e004      	b.n	800349c <HAL_RCC_OscConfig+0x2c8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003492:	f7fd ffe9 	bl	8001468 <HAL_GetTick>
 8003496:	1b40      	subs	r0, r0, r5
 8003498:	2802      	cmp	r0, #2
 800349a:	d8d1      	bhi.n	8003440 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800349c:	6833      	ldr	r3, [r6, #0]
 800349e:	0799      	lsls	r1, r3, #30
 80034a0:	d4f7      	bmi.n	8003492 <HAL_RCC_OscConfig+0x2be>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034a2:	6823      	ldr	r3, [r4, #0]
 80034a4:	e6fb      	b.n	800329e <HAL_RCC_OscConfig+0xca>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	f43f af78 	beq.w	800339c <HAL_RCC_OscConfig+0x1c8>
        pll_config = RCC->PLLCFGR;
 80034ac:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034ae:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034b0:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034b4:	4291      	cmp	r1, r2
 80034b6:	f47f af71 	bne.w	800339c <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ba:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034bc:	f003 013f 	and.w	r1, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034c0:	4291      	cmp	r1, r2
 80034c2:	f47f af6b 	bne.w	800339c <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034c6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80034c8:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 80034cc:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034ce:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80034d2:	f47f af63 	bne.w	800339c <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034d6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80034d8:	0852      	lsrs	r2, r2, #1
 80034da:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 80034de:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034e0:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80034e4:	f47f af5a 	bne.w	800339c <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034e8:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80034ea:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034ee:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80034f2:	bf14      	ite	ne
 80034f4:	2001      	movne	r0, #1
 80034f6:	2000      	moveq	r0, #0
 80034f8:	e72d      	b.n	8003356 <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034fa:	4b26      	ldr	r3, [pc, #152]	@ (8003594 <HAL_RCC_OscConfig+0x3c0>)
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003502:	601a      	str	r2, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800350a:	601a      	str	r2, [r3, #0]
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800350c:	e76e      	b.n	80033ec <HAL_RCC_OscConfig+0x218>
      __HAL_RCC_PWR_CLK_DISABLE();
 800350e:	4a21      	ldr	r2, [pc, #132]	@ (8003594 <HAL_RCC_OscConfig+0x3c0>)
 8003510:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8003512:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003516:	6413      	str	r3, [r2, #64]	@ 0x40
 8003518:	e700      	b.n	800331c <HAL_RCC_OscConfig+0x148>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800351a:	4b1e      	ldr	r3, [pc, #120]	@ (8003594 <HAL_RCC_OscConfig+0x3c0>)
 800351c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800351e:	f042 0204 	orr.w	r2, r2, #4
 8003522:	671a      	str	r2, [r3, #112]	@ 0x70
 8003524:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003526:	f042 0201 	orr.w	r2, r2, #1
 800352a:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800352c:	e791      	b.n	8003452 <HAL_RCC_OscConfig+0x27e>
        tickstart = HAL_GetTick();
 800352e:	f7fd ff9b 	bl	8001468 <HAL_GetTick>
 8003532:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003534:	e005      	b.n	8003542 <HAL_RCC_OscConfig+0x36e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003536:	f7fd ff97 	bl	8001468 <HAL_GetTick>
 800353a:	1b80      	subs	r0, r0, r6
 800353c:	2802      	cmp	r0, #2
 800353e:	f63f af7f 	bhi.w	8003440 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003542:	682b      	ldr	r3, [r5, #0]
 8003544:	0199      	lsls	r1, r3, #6
 8003546:	d4f6      	bmi.n	8003536 <HAL_RCC_OscConfig+0x362>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003548:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 800354c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800354e:	430b      	orrs	r3, r1
 8003550:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003554:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	@ 0x28
 8003558:	0852      	lsrs	r2, r2, #1
        __HAL_RCC_PLL_ENABLE();
 800355a:	490d      	ldr	r1, [pc, #52]	@ (8003590 <HAL_RCC_OscConfig+0x3bc>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800355c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8003560:	3a01      	subs	r2, #1
 8003562:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8003566:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003568:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800356a:	660a      	str	r2, [r1, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800356c:	f7fd ff7c 	bl	8001468 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003570:	4d08      	ldr	r5, [pc, #32]	@ (8003594 <HAL_RCC_OscConfig+0x3c0>)
        tickstart = HAL_GetTick();
 8003572:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003574:	e005      	b.n	8003582 <HAL_RCC_OscConfig+0x3ae>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003576:	f7fd ff77 	bl	8001468 <HAL_GetTick>
 800357a:	1b00      	subs	r0, r0, r4
 800357c:	2802      	cmp	r0, #2
 800357e:	f63f af5f 	bhi.w	8003440 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003582:	682b      	ldr	r3, [r5, #0]
 8003584:	019a      	lsls	r2, r3, #6
 8003586:	d5f6      	bpl.n	8003576 <HAL_RCC_OscConfig+0x3a2>
 8003588:	e6e4      	b.n	8003354 <HAL_RCC_OscConfig+0x180>
    return HAL_ERROR;
 800358a:	2001      	movs	r0, #1
}
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	42470000 	.word	0x42470000
 8003594:	40023800 	.word	0x40023800

08003598 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003598:	4916      	ldr	r1, [pc, #88]	@ (80035f4 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 800359a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800359c:	688b      	ldr	r3, [r1, #8]
 800359e:	f003 030c 	and.w	r3, r3, #12
 80035a2:	2b04      	cmp	r3, #4
 80035a4:	d01b      	beq.n	80035de <HAL_RCC_GetSysClockFreq+0x46>
 80035a6:	2b08      	cmp	r3, #8
 80035a8:	d001      	beq.n	80035ae <HAL_RCC_GetSysClockFreq+0x16>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035aa:	4813      	ldr	r0, [pc, #76]	@ (80035f8 <HAL_RCC_GetSysClockFreq+0x60>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80035ac:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035ae:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035b0:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035b2:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035b4:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035b8:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035bc:	d111      	bne.n	80035e2 <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035be:	480e      	ldr	r0, [pc, #56]	@ (80035f8 <HAL_RCC_GetSysClockFreq+0x60>)
 80035c0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80035c4:	fba1 0100 	umull	r0, r1, r1, r0
 80035c8:	f7fc fe5a 	bl	8000280 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80035cc:	4b09      	ldr	r3, [pc, #36]	@ (80035f4 <HAL_RCC_GetSysClockFreq+0x5c>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80035d4:	3301      	adds	r3, #1
 80035d6:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 80035d8:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80035dc:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035de:	4807      	ldr	r0, [pc, #28]	@ (80035fc <HAL_RCC_GetSysClockFreq+0x64>)
}
 80035e0:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035e2:	4806      	ldr	r0, [pc, #24]	@ (80035fc <HAL_RCC_GetSysClockFreq+0x64>)
 80035e4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80035e8:	2300      	movs	r3, #0
 80035ea:	fba1 0100 	umull	r0, r1, r1, r0
 80035ee:	f7fc fe47 	bl	8000280 <__aeabi_uldivmod>
 80035f2:	e7eb      	b.n	80035cc <HAL_RCC_GetSysClockFreq+0x34>
 80035f4:	40023800 	.word	0x40023800
 80035f8:	00f42400 	.word	0x00f42400
 80035fc:	007a1200 	.word	0x007a1200

08003600 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003600:	2800      	cmp	r0, #0
 8003602:	f000 8087 	beq.w	8003714 <HAL_RCC_ClockConfig+0x114>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003606:	4a48      	ldr	r2, [pc, #288]	@ (8003728 <HAL_RCC_ClockConfig+0x128>)
 8003608:	6813      	ldr	r3, [r2, #0]
 800360a:	f003 0307 	and.w	r3, r3, #7
 800360e:	428b      	cmp	r3, r1
{
 8003610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003614:	460d      	mov	r5, r1
 8003616:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003618:	d209      	bcs.n	800362e <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800361a:	b2cb      	uxtb	r3, r1
 800361c:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800361e:	6813      	ldr	r3, [r2, #0]
 8003620:	f003 0307 	and.w	r3, r3, #7
 8003624:	428b      	cmp	r3, r1
 8003626:	d002      	beq.n	800362e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8003628:	2001      	movs	r0, #1
}
 800362a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800362e:	6823      	ldr	r3, [r4, #0]
 8003630:	0798      	lsls	r0, r3, #30
 8003632:	d514      	bpl.n	800365e <HAL_RCC_ClockConfig+0x5e>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003634:	0759      	lsls	r1, r3, #29
 8003636:	d504      	bpl.n	8003642 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003638:	493c      	ldr	r1, [pc, #240]	@ (800372c <HAL_RCC_ClockConfig+0x12c>)
 800363a:	688a      	ldr	r2, [r1, #8]
 800363c:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 8003640:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003642:	071a      	lsls	r2, r3, #28
 8003644:	d504      	bpl.n	8003650 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003646:	4939      	ldr	r1, [pc, #228]	@ (800372c <HAL_RCC_ClockConfig+0x12c>)
 8003648:	688a      	ldr	r2, [r1, #8]
 800364a:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 800364e:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003650:	4936      	ldr	r1, [pc, #216]	@ (800372c <HAL_RCC_ClockConfig+0x12c>)
 8003652:	68a0      	ldr	r0, [r4, #8]
 8003654:	688a      	ldr	r2, [r1, #8]
 8003656:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800365a:	4302      	orrs	r2, r0
 800365c:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800365e:	07df      	lsls	r7, r3, #31
 8003660:	d521      	bpl.n	80036a6 <HAL_RCC_ClockConfig+0xa6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003662:	6862      	ldr	r2, [r4, #4]
 8003664:	2a01      	cmp	r2, #1
 8003666:	d057      	beq.n	8003718 <HAL_RCC_ClockConfig+0x118>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003668:	1e93      	subs	r3, r2, #2
 800366a:	2b01      	cmp	r3, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800366c:	4b2f      	ldr	r3, [pc, #188]	@ (800372c <HAL_RCC_ClockConfig+0x12c>)
 800366e:	681b      	ldr	r3, [r3, #0]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003670:	d94d      	bls.n	800370e <HAL_RCC_ClockConfig+0x10e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003672:	0799      	lsls	r1, r3, #30
 8003674:	d5d8      	bpl.n	8003628 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003676:	4e2d      	ldr	r6, [pc, #180]	@ (800372c <HAL_RCC_ClockConfig+0x12c>)
 8003678:	68b3      	ldr	r3, [r6, #8]
 800367a:	f023 0303 	bic.w	r3, r3, #3
 800367e:	4313      	orrs	r3, r2
 8003680:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8003682:	f7fd fef1 	bl	8001468 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003686:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 800368a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800368c:	e004      	b.n	8003698 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800368e:	f7fd feeb 	bl	8001468 <HAL_GetTick>
 8003692:	1bc0      	subs	r0, r0, r7
 8003694:	4540      	cmp	r0, r8
 8003696:	d844      	bhi.n	8003722 <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003698:	68b3      	ldr	r3, [r6, #8]
 800369a:	6862      	ldr	r2, [r4, #4]
 800369c:	f003 030c 	and.w	r3, r3, #12
 80036a0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80036a4:	d1f3      	bne.n	800368e <HAL_RCC_ClockConfig+0x8e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036a6:	4a20      	ldr	r2, [pc, #128]	@ (8003728 <HAL_RCC_ClockConfig+0x128>)
 80036a8:	6813      	ldr	r3, [r2, #0]
 80036aa:	f003 0307 	and.w	r3, r3, #7
 80036ae:	42ab      	cmp	r3, r5
 80036b0:	d906      	bls.n	80036c0 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036b2:	b2eb      	uxtb	r3, r5
 80036b4:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036b6:	6813      	ldr	r3, [r2, #0]
 80036b8:	f003 0307 	and.w	r3, r3, #7
 80036bc:	42ab      	cmp	r3, r5
 80036be:	d1b3      	bne.n	8003628 <HAL_RCC_ClockConfig+0x28>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036c0:	6823      	ldr	r3, [r4, #0]
 80036c2:	075a      	lsls	r2, r3, #29
 80036c4:	d506      	bpl.n	80036d4 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036c6:	4919      	ldr	r1, [pc, #100]	@ (800372c <HAL_RCC_ClockConfig+0x12c>)
 80036c8:	68e0      	ldr	r0, [r4, #12]
 80036ca:	688a      	ldr	r2, [r1, #8]
 80036cc:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 80036d0:	4302      	orrs	r2, r0
 80036d2:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036d4:	071b      	lsls	r3, r3, #28
 80036d6:	d507      	bpl.n	80036e8 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036d8:	4a14      	ldr	r2, [pc, #80]	@ (800372c <HAL_RCC_ClockConfig+0x12c>)
 80036da:	6921      	ldr	r1, [r4, #16]
 80036dc:	6893      	ldr	r3, [r2, #8]
 80036de:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80036e2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80036e6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036e8:	f7ff ff56 	bl	8003598 <HAL_RCC_GetSysClockFreq>
 80036ec:	4a0f      	ldr	r2, [pc, #60]	@ (800372c <HAL_RCC_ClockConfig+0x12c>)
 80036ee:	4c10      	ldr	r4, [pc, #64]	@ (8003730 <HAL_RCC_ClockConfig+0x130>)
 80036f0:	6892      	ldr	r2, [r2, #8]
 80036f2:	4910      	ldr	r1, [pc, #64]	@ (8003734 <HAL_RCC_ClockConfig+0x134>)
 80036f4:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80036f8:	4603      	mov	r3, r0
 80036fa:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick(uwTickPrio);
 80036fc:	480e      	ldr	r0, [pc, #56]	@ (8003738 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036fe:	40d3      	lsrs	r3, r2
  HAL_InitTick(uwTickPrio);
 8003700:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003702:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
 8003704:	f7fd fe66 	bl	80013d4 <HAL_InitTick>
  return HAL_OK;
 8003708:	2000      	movs	r0, #0
}
 800370a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800370e:	0198      	lsls	r0, r3, #6
 8003710:	d4b1      	bmi.n	8003676 <HAL_RCC_ClockConfig+0x76>
 8003712:	e789      	b.n	8003628 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8003714:	2001      	movs	r0, #1
}
 8003716:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003718:	4b04      	ldr	r3, [pc, #16]	@ (800372c <HAL_RCC_ClockConfig+0x12c>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	039e      	lsls	r6, r3, #14
 800371e:	d4aa      	bmi.n	8003676 <HAL_RCC_ClockConfig+0x76>
 8003720:	e782      	b.n	8003628 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 8003722:	2003      	movs	r0, #3
 8003724:	e781      	b.n	800362a <HAL_RCC_ClockConfig+0x2a>
 8003726:	bf00      	nop
 8003728:	40023c00 	.word	0x40023c00
 800372c:	40023800 	.word	0x40023800
 8003730:	0800740c 	.word	0x0800740c
 8003734:	20000000 	.word	0x20000000
 8003738:	20000014 	.word	0x20000014

0800373c <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 800373c:	4b01      	ldr	r3, [pc, #4]	@ (8003744 <HAL_RCC_GetHCLKFreq+0x8>)
}
 800373e:	6818      	ldr	r0, [r3, #0]
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	20000000 	.word	0x20000000

08003748 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003748:	4b04      	ldr	r3, [pc, #16]	@ (800375c <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 800374a:	4905      	ldr	r1, [pc, #20]	@ (8003760 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	4a05      	ldr	r2, [pc, #20]	@ (8003764 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003750:	6808      	ldr	r0, [r1, #0]
 8003752:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003756:	5cd3      	ldrb	r3, [r2, r3]
}
 8003758:	40d8      	lsrs	r0, r3
 800375a:	4770      	bx	lr
 800375c:	40023800 	.word	0x40023800
 8003760:	20000000 	.word	0x20000000
 8003764:	08007404 	.word	0x08007404

08003768 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003768:	4b04      	ldr	r3, [pc, #16]	@ (800377c <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 800376a:	4905      	ldr	r1, [pc, #20]	@ (8003780 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	4a05      	ldr	r2, [pc, #20]	@ (8003784 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003770:	6808      	ldr	r0, [r1, #0]
 8003772:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003776:	5cd3      	ldrb	r3, [r2, r3]
}
 8003778:	40d8      	lsrs	r0, r3
 800377a:	4770      	bx	lr
 800377c:	40023800 	.word	0x40023800
 8003780:	20000000 	.word	0x20000000
 8003784:	08007404 	.word	0x08007404

08003788 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003788:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800378c:	2b01      	cmp	r3, #1
 800378e:	d12c      	bne.n	80037ea <HAL_TIM_Base_Start+0x62>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003790:	6803      	ldr	r3, [r0, #0]
 8003792:	4a17      	ldr	r2, [pc, #92]	@ (80037f0 <HAL_TIM_Base_Start+0x68>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003794:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003796:	4293      	cmp	r3, r2
  htim->State = HAL_TIM_STATE_BUSY;
 8003798:	f880 103d 	strb.w	r1, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800379c:	d01a      	beq.n	80037d4 <HAL_TIM_Base_Start+0x4c>
 800379e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037a2:	d017      	beq.n	80037d4 <HAL_TIM_Base_Start+0x4c>
 80037a4:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d013      	beq.n	80037d4 <HAL_TIM_Base_Start+0x4c>
 80037ac:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d00f      	beq.n	80037d4 <HAL_TIM_Base_Start+0x4c>
 80037b4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d00b      	beq.n	80037d4 <HAL_TIM_Base_Start+0x4c>
 80037bc:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d007      	beq.n	80037d4 <HAL_TIM_Base_Start+0x4c>
 80037c4:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d003      	beq.n	80037d4 <HAL_TIM_Base_Start+0x4c>
 80037cc:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d104      	bne.n	80037de <HAL_TIM_Base_Start+0x56>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037d4:	689a      	ldr	r2, [r3, #8]
 80037d6:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037da:	2a06      	cmp	r2, #6
 80037dc:	d003      	beq.n	80037e6 <HAL_TIM_Base_Start+0x5e>
    {
      __HAL_TIM_ENABLE(htim);
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	f042 0201 	orr.w	r2, r2, #1
 80037e4:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 80037e6:	2000      	movs	r0, #0
 80037e8:	4770      	bx	lr
    return HAL_ERROR;
 80037ea:	2001      	movs	r0, #1
}
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	40010000 	.word	0x40010000

080037f4 <HAL_TIM_Base_Stop>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80037f4:	6803      	ldr	r3, [r0, #0]
 80037f6:	6a19      	ldr	r1, [r3, #32]
 80037f8:	f241 1211 	movw	r2, #4369	@ 0x1111
 80037fc:	4211      	tst	r1, r2
 80037fe:	d108      	bne.n	8003812 <HAL_TIM_Base_Stop+0x1e>
 8003800:	6a19      	ldr	r1, [r3, #32]
 8003802:	f240 4244 	movw	r2, #1092	@ 0x444
 8003806:	4211      	tst	r1, r2
 8003808:	d103      	bne.n	8003812 <HAL_TIM_Base_Stop+0x1e>
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	f022 0201 	bic.w	r2, r2, #1
 8003810:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003812:	2301      	movs	r3, #1
 8003814:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
}
 8003818:	2000      	movs	r0, #0
 800381a:	4770      	bx	lr

0800381c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800381c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003820:	2b01      	cmp	r3, #1
 8003822:	d12f      	bne.n	8003884 <HAL_TIM_Base_Start_IT+0x68>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003824:	6803      	ldr	r3, [r0, #0]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003826:	4918      	ldr	r1, [pc, #96]	@ (8003888 <HAL_TIM_Base_Start_IT+0x6c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003828:	2202      	movs	r2, #2
 800382a:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800382e:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003830:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003832:	f042 0201 	orr.w	r2, r2, #1
 8003836:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003838:	d019      	beq.n	800386e <HAL_TIM_Base_Start_IT+0x52>
 800383a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800383e:	d016      	beq.n	800386e <HAL_TIM_Base_Start_IT+0x52>
 8003840:	4a12      	ldr	r2, [pc, #72]	@ (800388c <HAL_TIM_Base_Start_IT+0x70>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d013      	beq.n	800386e <HAL_TIM_Base_Start_IT+0x52>
 8003846:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800384a:	4293      	cmp	r3, r2
 800384c:	d00f      	beq.n	800386e <HAL_TIM_Base_Start_IT+0x52>
 800384e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003852:	4293      	cmp	r3, r2
 8003854:	d00b      	beq.n	800386e <HAL_TIM_Base_Start_IT+0x52>
 8003856:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800385a:	4293      	cmp	r3, r2
 800385c:	d007      	beq.n	800386e <HAL_TIM_Base_Start_IT+0x52>
 800385e:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8003862:	4293      	cmp	r3, r2
 8003864:	d003      	beq.n	800386e <HAL_TIM_Base_Start_IT+0x52>
 8003866:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800386a:	4293      	cmp	r3, r2
 800386c:	d104      	bne.n	8003878 <HAL_TIM_Base_Start_IT+0x5c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800386e:	689a      	ldr	r2, [r3, #8]
 8003870:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003874:	2a06      	cmp	r2, #6
 8003876:	d003      	beq.n	8003880 <HAL_TIM_Base_Start_IT+0x64>
    {
      __HAL_TIM_ENABLE(htim);
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	f042 0201 	orr.w	r2, r2, #1
 800387e:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 8003880:	2000      	movs	r0, #0
 8003882:	4770      	bx	lr
    return HAL_ERROR;
 8003884:	2001      	movs	r0, #1
}
 8003886:	4770      	bx	lr
 8003888:	40010000 	.word	0x40010000
 800388c:	40000400 	.word	0x40000400

08003890 <HAL_TIM_Base_Stop_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003890:	6803      	ldr	r3, [r0, #0]
 8003892:	68da      	ldr	r2, [r3, #12]
 8003894:	f022 0201 	bic.w	r2, r2, #1
 8003898:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800389a:	6a1a      	ldr	r2, [r3, #32]
 800389c:	f241 1111 	movw	r1, #4369	@ 0x1111
 80038a0:	420a      	tst	r2, r1
 80038a2:	d108      	bne.n	80038b6 <HAL_TIM_Base_Stop_IT+0x26>
 80038a4:	6a19      	ldr	r1, [r3, #32]
 80038a6:	f240 4244 	movw	r2, #1092	@ 0x444
 80038aa:	4211      	tst	r1, r2
 80038ac:	d103      	bne.n	80038b6 <HAL_TIM_Base_Stop_IT+0x26>
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	f022 0201 	bic.w	r2, r2, #1
 80038b4:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80038b6:	2301      	movs	r3, #1
 80038b8:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
}
 80038bc:	2000      	movs	r0, #0
 80038be:	4770      	bx	lr

080038c0 <HAL_TIM_ConfigClockSource>:
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038c0:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80038c4:	2a01      	cmp	r2, #1
 80038c6:	d06e      	beq.n	80039a6 <HAL_TIM_ConfigClockSource+0xe6>
 80038c8:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038ca:	6802      	ldr	r2, [r0, #0]
{
 80038cc:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 80038ce:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80038d0:	2402      	movs	r4, #2
  __HAL_LOCK(htim);
 80038d2:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80038d6:	f883 403d 	strb.w	r4, [r3, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80038da:	6894      	ldr	r4, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038dc:	f424 447f 	bic.w	r4, r4, #65280	@ 0xff00
 80038e0:	f024 0477 	bic.w	r4, r4, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 80038e4:	6094      	str	r4, [r2, #8]

  switch (sClockSourceConfig->ClockSource)
 80038e6:	680c      	ldr	r4, [r1, #0]
 80038e8:	2c60      	cmp	r4, #96	@ 0x60
 80038ea:	d076      	beq.n	80039da <HAL_TIM_ConfigClockSource+0x11a>
 80038ec:	d811      	bhi.n	8003912 <HAL_TIM_ConfigClockSource+0x52>
 80038ee:	2c40      	cmp	r4, #64	@ 0x40
 80038f0:	d05b      	beq.n	80039aa <HAL_TIM_ConfigClockSource+0xea>
 80038f2:	d82e      	bhi.n	8003952 <HAL_TIM_ConfigClockSource+0x92>
 80038f4:	2c20      	cmp	r4, #32
 80038f6:	d004      	beq.n	8003902 <HAL_TIM_ConfigClockSource+0x42>
 80038f8:	f200 8088 	bhi.w	8003a0c <HAL_TIM_ConfigClockSource+0x14c>
 80038fc:	f034 0110 	bics.w	r1, r4, #16
 8003900:	d11f      	bne.n	8003942 <HAL_TIM_ConfigClockSource+0x82>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003902:	6891      	ldr	r1, [r2, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003904:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003908:	4321      	orrs	r1, r4
 800390a:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800390e:	6091      	str	r1, [r2, #8]
}
 8003910:	e016      	b.n	8003940 <HAL_TIM_ConfigClockSource+0x80>
  switch (sClockSourceConfig->ClockSource)
 8003912:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
 8003916:	d013      	beq.n	8003940 <HAL_TIM_ConfigClockSource+0x80>
 8003918:	f5b4 5f00 	cmp.w	r4, #8192	@ 0x2000
 800391c:	d033      	beq.n	8003986 <HAL_TIM_ConfigClockSource+0xc6>
 800391e:	2c70      	cmp	r4, #112	@ 0x70
 8003920:	d10f      	bne.n	8003942 <HAL_TIM_ConfigClockSource+0x82>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003922:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8003926:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003928:	4328      	orrs	r0, r5
 800392a:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800392c:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003930:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 8003934:	4308      	orrs	r0, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003936:	6090      	str	r0, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 8003938:	6891      	ldr	r1, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800393a:	f041 0177 	orr.w	r1, r1, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 800393e:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003940:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003942:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8003944:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8003946:	f883 103d 	strb.w	r1, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800394a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800394e:	bc30      	pop	{r4, r5}
 8003950:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8003952:	2c50      	cmp	r4, #80	@ 0x50
 8003954:	d1f5      	bne.n	8003942 <HAL_TIM_ConfigClockSource+0x82>
                               sClockSourceConfig->ClockPolarity,
 8003956:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8003958:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 800395a:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800395c:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8003960:	4308      	orrs	r0, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003962:	6a11      	ldr	r1, [r2, #32]
 8003964:	f021 0101 	bic.w	r1, r1, #1
 8003968:	6211      	str	r1, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 800396a:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800396c:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003970:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003974:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8003976:	6210      	str	r0, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8003978:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800397a:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800397e:	f041 0157 	orr.w	r1, r1, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 8003982:	6091      	str	r1, [r2, #8]
}
 8003984:	e7dc      	b.n	8003940 <HAL_TIM_ConfigClockSource+0x80>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003986:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800398a:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800398c:	4328      	orrs	r0, r5
 800398e:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003990:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003994:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 8003998:	4308      	orrs	r0, r1
  TIMx->SMCR = tmpsmcr;
 800399a:	6090      	str	r0, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800399c:	6891      	ldr	r1, [r2, #8]
 800399e:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 80039a2:	6091      	str	r1, [r2, #8]
      break;
 80039a4:	e7cc      	b.n	8003940 <HAL_TIM_ConfigClockSource+0x80>
  __HAL_LOCK(htim);
 80039a6:	2002      	movs	r0, #2
}
 80039a8:	4770      	bx	lr
                               sClockSourceConfig->ClockPolarity,
 80039aa:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80039ac:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 80039ae:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039b0:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80039b4:	4308      	orrs	r0, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039b6:	6a11      	ldr	r1, [r2, #32]
 80039b8:	f021 0101 	bic.w	r1, r1, #1
 80039bc:	6211      	str	r1, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039be:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039c0:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039c4:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80039c8:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 80039ca:	6210      	str	r0, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 80039cc:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80039ce:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039d2:	f041 0147 	orr.w	r1, r1, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 80039d6:	6091      	str	r1, [r2, #8]
}
 80039d8:	e7b2      	b.n	8003940 <HAL_TIM_ConfigClockSource+0x80>
                               sClockSourceConfig->ClockPolarity,
 80039da:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80039dc:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 80039de:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039e0:	f021 01a0 	bic.w	r1, r1, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80039e4:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039e8:	6a10      	ldr	r0, [r2, #32]
 80039ea:	f020 0010 	bic.w	r0, r0, #16
 80039ee:	6210      	str	r0, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039f0:	6990      	ldr	r0, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039f2:	f420 4070 	bic.w	r0, r0, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039f6:	ea40 3004 	orr.w	r0, r0, r4, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80039fa:	6190      	str	r0, [r2, #24]
  TIMx->CCER = tmpccer;
 80039fc:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 80039fe:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a00:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a04:	f041 0167 	orr.w	r1, r1, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8003a08:	6091      	str	r1, [r2, #8]
}
 8003a0a:	e799      	b.n	8003940 <HAL_TIM_ConfigClockSource+0x80>
  switch (sClockSourceConfig->ClockSource)
 8003a0c:	2c30      	cmp	r4, #48	@ 0x30
 8003a0e:	f43f af78 	beq.w	8003902 <HAL_TIM_ConfigClockSource+0x42>
 8003a12:	e796      	b.n	8003942 <HAL_TIM_ConfigClockSource+0x82>

08003a14 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop

08003a18 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop

08003a1c <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop

08003a20 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop

08003a24 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 8003a24:	6803      	ldr	r3, [r0, #0]
{
 8003a26:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8003a28:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003a2a:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003a2c:	07a9      	lsls	r1, r5, #30
{
 8003a2e:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003a30:	d501      	bpl.n	8003a36 <HAL_TIM_IRQHandler+0x12>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003a32:	07b2      	lsls	r2, r6, #30
 8003a34:	d451      	bmi.n	8003ada <HAL_TIM_IRQHandler+0xb6>
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003a36:	0769      	lsls	r1, r5, #29
 8003a38:	d501      	bpl.n	8003a3e <HAL_TIM_IRQHandler+0x1a>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003a3a:	0772      	lsls	r2, r6, #29
 8003a3c:	d43a      	bmi.n	8003ab4 <HAL_TIM_IRQHandler+0x90>
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003a3e:	072b      	lsls	r3, r5, #28
 8003a40:	d501      	bpl.n	8003a46 <HAL_TIM_IRQHandler+0x22>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a42:	0730      	lsls	r0, r6, #28
 8003a44:	d424      	bmi.n	8003a90 <HAL_TIM_IRQHandler+0x6c>
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003a46:	06ea      	lsls	r2, r5, #27
 8003a48:	d501      	bpl.n	8003a4e <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003a4a:	06f3      	lsls	r3, r6, #27
 8003a4c:	d410      	bmi.n	8003a70 <HAL_TIM_IRQHandler+0x4c>
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003a4e:	07e8      	lsls	r0, r5, #31
 8003a50:	d501      	bpl.n	8003a56 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003a52:	07f1      	lsls	r1, r6, #31
 8003a54:	d457      	bmi.n	8003b06 <HAL_TIM_IRQHandler+0xe2>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003a56:	062a      	lsls	r2, r5, #24
 8003a58:	d501      	bpl.n	8003a5e <HAL_TIM_IRQHandler+0x3a>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003a5a:	0633      	lsls	r3, r6, #24
 8003a5c:	d45b      	bmi.n	8003b16 <HAL_TIM_IRQHandler+0xf2>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003a5e:	0668      	lsls	r0, r5, #25
 8003a60:	d501      	bpl.n	8003a66 <HAL_TIM_IRQHandler+0x42>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003a62:	0671      	lsls	r1, r6, #25
 8003a64:	d45f      	bmi.n	8003b26 <HAL_TIM_IRQHandler+0x102>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003a66:	06aa      	lsls	r2, r5, #26
 8003a68:	d501      	bpl.n	8003a6e <HAL_TIM_IRQHandler+0x4a>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003a6a:	06b3      	lsls	r3, r6, #26
 8003a6c:	d442      	bmi.n	8003af4 <HAL_TIM_IRQHandler+0xd0>
}
 8003a6e:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003a70:	6823      	ldr	r3, [r4, #0]
 8003a72:	f06f 0210 	mvn.w	r2, #16
 8003a76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a78:	2208      	movs	r2, #8
 8003a7a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a7c:	69db      	ldr	r3, [r3, #28]
 8003a7e:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8003a82:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a84:	d063      	beq.n	8003b4e <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8003a86:	f7ff ffc7 	bl	8003a18 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	7723      	strb	r3, [r4, #28]
 8003a8e:	e7de      	b.n	8003a4e <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003a90:	6823      	ldr	r3, [r4, #0]
 8003a92:	f06f 0208 	mvn.w	r2, #8
 8003a96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a98:	2204      	movs	r2, #4
 8003a9a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a9c:	69db      	ldr	r3, [r3, #28]
 8003a9e:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8003aa0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003aa2:	d151      	bne.n	8003b48 <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aa4:	f7ff ffb6 	bl	8003a14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aa8:	4620      	mov	r0, r4
 8003aaa:	f7ff ffb7 	bl	8003a1c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	7723      	strb	r3, [r4, #28]
 8003ab2:	e7c8      	b.n	8003a46 <HAL_TIM_IRQHandler+0x22>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003ab4:	6823      	ldr	r3, [r4, #0]
 8003ab6:	f06f 0204 	mvn.w	r2, #4
 8003aba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003abc:	2202      	movs	r2, #2
 8003abe:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8003ac6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ac8:	d13b      	bne.n	8003b42 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aca:	f7ff ffa3 	bl	8003a14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ace:	4620      	mov	r0, r4
 8003ad0:	f7ff ffa4 	bl	8003a1c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	7723      	strb	r3, [r4, #28]
 8003ad8:	e7b1      	b.n	8003a3e <HAL_TIM_IRQHandler+0x1a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003ada:	f06f 0202 	mvn.w	r2, #2
 8003ade:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	079b      	lsls	r3, r3, #30
 8003ae8:	d025      	beq.n	8003b36 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8003aea:	f7ff ff95 	bl	8003a18 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aee:	2300      	movs	r3, #0
 8003af0:	7723      	strb	r3, [r4, #28]
 8003af2:	e7a0      	b.n	8003a36 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003af4:	6823      	ldr	r3, [r4, #0]
 8003af6:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8003afa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003afc:	611a      	str	r2, [r3, #16]
}
 8003afe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 8003b02:	f000 b909 	b.w	8003d18 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003b06:	6823      	ldr	r3, [r4, #0]
 8003b08:	f06f 0201 	mvn.w	r2, #1
 8003b0c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b0e:	4620      	mov	r0, r4
 8003b10:	f001 fbfe 	bl	8005310 <HAL_TIM_PeriodElapsedCallback>
 8003b14:	e79f      	b.n	8003a56 <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003b16:	6823      	ldr	r3, [r4, #0]
 8003b18:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003b1c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003b1e:	4620      	mov	r0, r4
 8003b20:	f000 f8fc 	bl	8003d1c <HAL_TIMEx_BreakCallback>
 8003b24:	e79b      	b.n	8003a5e <HAL_TIM_IRQHandler+0x3a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003b26:	6823      	ldr	r3, [r4, #0]
 8003b28:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003b2c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003b2e:	4620      	mov	r0, r4
 8003b30:	f7ff ff76 	bl	8003a20 <HAL_TIM_TriggerCallback>
 8003b34:	e797      	b.n	8003a66 <HAL_TIM_IRQHandler+0x42>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b36:	f7ff ff6d 	bl	8003a14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b3a:	4620      	mov	r0, r4
 8003b3c:	f7ff ff6e 	bl	8003a1c <HAL_TIM_PWM_PulseFinishedCallback>
 8003b40:	e7d5      	b.n	8003aee <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8003b42:	f7ff ff69 	bl	8003a18 <HAL_TIM_IC_CaptureCallback>
 8003b46:	e7c5      	b.n	8003ad4 <HAL_TIM_IRQHandler+0xb0>
        HAL_TIM_IC_CaptureCallback(htim);
 8003b48:	f7ff ff66 	bl	8003a18 <HAL_TIM_IC_CaptureCallback>
 8003b4c:	e7af      	b.n	8003aae <HAL_TIM_IRQHandler+0x8a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b4e:	f7ff ff61 	bl	8003a14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b52:	4620      	mov	r0, r4
 8003b54:	f7ff ff62 	bl	8003a1c <HAL_TIM_PWM_PulseFinishedCallback>
 8003b58:	e797      	b.n	8003a8a <HAL_TIM_IRQHandler+0x66>
 8003b5a:	bf00      	nop

08003b5c <TIM_Base_SetConfig>:
{
 8003b5c:	b470      	push	{r4, r5, r6}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b5e:	4e34      	ldr	r6, [pc, #208]	@ (8003c30 <TIM_Base_SetConfig+0xd4>)
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b60:	694a      	ldr	r2, [r1, #20]
  tmpcr1 = TIMx->CR1;
 8003b62:	6803      	ldr	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b64:	688d      	ldr	r5, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 8003b66:	680c      	ldr	r4, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b68:	42b0      	cmp	r0, r6
 8003b6a:	d045      	beq.n	8003bf8 <TIM_Base_SetConfig+0x9c>
 8003b6c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003b70:	d034      	beq.n	8003bdc <TIM_Base_SetConfig+0x80>
 8003b72:	f5a6 467c 	sub.w	r6, r6, #64512	@ 0xfc00
 8003b76:	42b0      	cmp	r0, r6
 8003b78:	d030      	beq.n	8003bdc <TIM_Base_SetConfig+0x80>
 8003b7a:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8003b7e:	42b0      	cmp	r0, r6
 8003b80:	d02c      	beq.n	8003bdc <TIM_Base_SetConfig+0x80>
 8003b82:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8003b86:	42b0      	cmp	r0, r6
 8003b88:	d028      	beq.n	8003bdc <TIM_Base_SetConfig+0x80>
 8003b8a:	f506 4678 	add.w	r6, r6, #63488	@ 0xf800
 8003b8e:	42b0      	cmp	r0, r6
 8003b90:	d032      	beq.n	8003bf8 <TIM_Base_SetConfig+0x9c>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b92:	4e28      	ldr	r6, [pc, #160]	@ (8003c34 <TIM_Base_SetConfig+0xd8>)
 8003b94:	42b0      	cmp	r0, r6
 8003b96:	d025      	beq.n	8003be4 <TIM_Base_SetConfig+0x88>
 8003b98:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8003b9c:	42b0      	cmp	r0, r6
 8003b9e:	d021      	beq.n	8003be4 <TIM_Base_SetConfig+0x88>
 8003ba0:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8003ba4:	42b0      	cmp	r0, r6
 8003ba6:	d01d      	beq.n	8003be4 <TIM_Base_SetConfig+0x88>
 8003ba8:	f5a6 3698 	sub.w	r6, r6, #77824	@ 0x13000
 8003bac:	42b0      	cmp	r0, r6
 8003bae:	d033      	beq.n	8003c18 <TIM_Base_SetConfig+0xbc>
 8003bb0:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8003bb4:	42b0      	cmp	r0, r6
 8003bb6:	d015      	beq.n	8003be4 <TIM_Base_SetConfig+0x88>
 8003bb8:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8003bbc:	42b0      	cmp	r0, r6
 8003bbe:	d011      	beq.n	8003be4 <TIM_Base_SetConfig+0x88>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bc0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bc4:	62c5      	str	r5, [r0, #44]	@ 0x2c
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bc6:	431a      	orrs	r2, r3
  TIMx->PSC = Structure->Prescaler;
 8003bc8:	6284      	str	r4, [r0, #40]	@ 0x28
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003bca:	6803      	ldr	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 8003bcc:	2101      	movs	r1, #1
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003bce:	f043 0304 	orr.w	r3, r3, #4
 8003bd2:	6003      	str	r3, [r0, #0]
}
 8003bd4:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_EGR_UG;
 8003bd6:	6141      	str	r1, [r0, #20]
  TIMx->CR1 = tmpcr1;
 8003bd8:	6002      	str	r2, [r0, #0]
}
 8003bda:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8003bdc:	684e      	ldr	r6, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003be2:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003be4:	68c9      	ldr	r1, [r1, #12]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003be6:	62c5      	str	r5, [r0, #44]	@ 0x2c
    tmpcr1 &= ~TIM_CR1_CKD;
 8003be8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bec:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003bf2:	431a      	orrs	r2, r3
  TIMx->PSC = Structure->Prescaler;
 8003bf4:	6284      	str	r4, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bf6:	e7e8      	b.n	8003bca <TIM_Base_SetConfig+0x6e>
    tmpcr1 |= Structure->CounterMode;
 8003bf8:	684e      	ldr	r6, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003bfe:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c00:	68ce      	ldr	r6, [r1, #12]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c02:	62c5      	str	r5, [r0, #44]	@ 0x2c
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c08:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
  TIMx->PSC = Structure->Prescaler;
 8003c0e:	6284      	str	r4, [r0, #40]	@ 0x28
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c10:	431a      	orrs	r2, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8003c12:	690b      	ldr	r3, [r1, #16]
 8003c14:	6303      	str	r3, [r0, #48]	@ 0x30
 8003c16:	e7d8      	b.n	8003bca <TIM_Base_SetConfig+0x6e>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c18:	68c9      	ldr	r1, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c1e:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c20:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c24:	431a      	orrs	r2, r3
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c26:	4b04      	ldr	r3, [pc, #16]	@ (8003c38 <TIM_Base_SetConfig+0xdc>)
 8003c28:	62dd      	str	r5, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003c2a:	629c      	str	r4, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c2c:	e7cd      	b.n	8003bca <TIM_Base_SetConfig+0x6e>
 8003c2e:	bf00      	nop
 8003c30:	40010000 	.word	0x40010000
 8003c34:	40014000 	.word	0x40014000
 8003c38:	40001800 	.word	0x40001800

08003c3c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8003c3c:	b350      	cbz	r0, 8003c94 <HAL_TIM_Base_Init+0x58>
{
 8003c3e:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8003c40:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003c44:	4604      	mov	r4, r0
 8003c46:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003c4a:	b1f3      	cbz	r3, 8003c8a <HAL_TIM_Base_Init+0x4e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c4c:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8003c4e:	2302      	movs	r3, #2
 8003c50:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c54:	f851 0b04 	ldr.w	r0, [r1], #4
 8003c58:	f7ff ff80 	bl	8003b5c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c62:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8003c66:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003c6a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003c6e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c72:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003c76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003c7a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003c7e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003c82:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8003c86:	2000      	movs	r0, #0
}
 8003c88:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003c8a:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003c8e:	f7fd f821 	bl	8000cd4 <HAL_TIM_Base_MspInit>
 8003c92:	e7db      	b.n	8003c4c <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8003c94:	2001      	movs	r0, #1
}
 8003c96:	4770      	bx	lr

08003c98 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c98:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8003c9c:	2a01      	cmp	r2, #1
 8003c9e:	d037      	beq.n	8003d10 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8003ca0:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ca2:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca4:	2002      	movs	r0, #2
{
 8003ca6:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca8:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 8003cac:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cae:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8003cb0:	6894      	ldr	r4, [r2, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cb2:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cb6:	4328      	orrs	r0, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cb8:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cba:	4816      	ldr	r0, [pc, #88]	@ (8003d14 <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
 8003cbc:	4282      	cmp	r2, r0
 8003cbe:	d01a      	beq.n	8003cf6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8003cc0:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8003cc4:	d017      	beq.n	8003cf6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8003cc6:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 8003cca:	4282      	cmp	r2, r0
 8003ccc:	d013      	beq.n	8003cf6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8003cce:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8003cd2:	4282      	cmp	r2, r0
 8003cd4:	d00f      	beq.n	8003cf6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8003cd6:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8003cda:	4282      	cmp	r2, r0
 8003cdc:	d00b      	beq.n	8003cf6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8003cde:	f500 4078 	add.w	r0, r0, #63488	@ 0xf800
 8003ce2:	4282      	cmp	r2, r0
 8003ce4:	d007      	beq.n	8003cf6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8003ce6:	f500 5070 	add.w	r0, r0, #15360	@ 0x3c00
 8003cea:	4282      	cmp	r2, r0
 8003cec:	d003      	beq.n	8003cf6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8003cee:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 8003cf2:	4282      	cmp	r2, r0
 8003cf4:	d104      	bne.n	8003d00 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cf6:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cf8:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cfc:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cfe:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8003d00:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8003d08:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8003d0c:	bc30      	pop	{r4, r5}
 8003d0e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003d10:	2002      	movs	r0, #2
}
 8003d12:	4770      	bx	lr
 8003d14:	40010000 	.word	0x40010000

08003d18 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop

08003d1c <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop

08003d20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d20:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d22:	f102 030c 	add.w	r3, r2, #12
 8003d26:	e853 3f00 	ldrex	r3, [r3]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d2a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d2e:	f102 0c0c 	add.w	ip, r2, #12
 8003d32:	e84c 3100 	strex	r1, r3, [ip]
 8003d36:	2900      	cmp	r1, #0
 8003d38:	d1f3      	bne.n	8003d22 <UART_EndRxTransfer+0x2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3a:	f102 0314 	add.w	r3, r2, #20
 8003d3e:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d42:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d46:	f102 0c14 	add.w	ip, r2, #20
 8003d4a:	e84c 3100 	strex	r1, r3, [ip]
 8003d4e:	2900      	cmp	r1, #0
 8003d50:	d1f3      	bne.n	8003d3a <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d52:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d005      	beq.n	8003d64 <UART_EndRxTransfer+0x44>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d58:	2220      	movs	r2, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d5a:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8003d5c:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d60:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8003d62:	4770      	bx	lr
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d64:	f102 030c 	add.w	r3, r2, #12
 8003d68:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d6c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d70:	f102 0c0c 	add.w	ip, r2, #12
 8003d74:	e84c 3100 	strex	r1, r3, [ip]
 8003d78:	2900      	cmp	r1, #0
 8003d7a:	d1f3      	bne.n	8003d64 <UART_EndRxTransfer+0x44>
 8003d7c:	e7ec      	b.n	8003d58 <UART_EndRxTransfer+0x38>
 8003d7e:	bf00      	nop

08003d80 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d80:	6802      	ldr	r2, [r0, #0]
 8003d82:	6911      	ldr	r1, [r2, #16]
{
 8003d84:	b538      	push	{r3, r4, r5, lr}
 8003d86:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d88:	68c0      	ldr	r0, [r0, #12]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d8a:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d8c:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 8003d90:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d92:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d94:	6111      	str	r1, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d96:	4303      	orrs	r3, r0
 8003d98:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8003d9a:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d9c:	4303      	orrs	r3, r0
 8003d9e:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8003da0:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
 8003da4:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003da8:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8003daa:	430b      	orrs	r3, r1
 8003dac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003dae:	6953      	ldr	r3, [r2, #20]
 8003db0:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003db2:	4923      	ldr	r1, [pc, #140]	@ (8003e40 <UART_SetConfig+0xc0>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003db4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003db8:	4303      	orrs	r3, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003dba:	428a      	cmp	r2, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003dbc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003dbe:	d005      	beq.n	8003dcc <UART_SetConfig+0x4c>
 8003dc0:	4b20      	ldr	r3, [pc, #128]	@ (8003e44 <UART_SetConfig+0xc4>)
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d002      	beq.n	8003dcc <UART_SetConfig+0x4c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003dc6:	f7ff fcbf 	bl	8003748 <HAL_RCC_GetPCLK1Freq>
 8003dca:	e001      	b.n	8003dd0 <UART_SetConfig+0x50>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003dcc:	f7ff fccc 	bl	8003768 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dd0:	69e2      	ldr	r2, [r4, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003dd2:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dd4:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003dd8:	e9d4 5300 	ldrd	r5, r3, [r4]
 8003ddc:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003de0:	d013      	beq.n	8003e0a <UART_SetConfig+0x8a>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003de2:	009a      	lsls	r2, r3, #2
 8003de4:	0f9b      	lsrs	r3, r3, #30
 8003de6:	f7fc fa4b 	bl	8000280 <__aeabi_uldivmod>
 8003dea:	4a17      	ldr	r2, [pc, #92]	@ (8003e48 <UART_SetConfig+0xc8>)
 8003dec:	fba2 1300 	umull	r1, r3, r2, r0
 8003df0:	095b      	lsrs	r3, r3, #5
 8003df2:	2164      	movs	r1, #100	@ 0x64
 8003df4:	fb01 0013 	mls	r0, r1, r3, r0
 8003df8:	0100      	lsls	r0, r0, #4
 8003dfa:	3032      	adds	r0, #50	@ 0x32
 8003dfc:	fba2 2000 	umull	r2, r0, r2, r0
 8003e00:	011b      	lsls	r3, r3, #4
 8003e02:	eb03 1350 	add.w	r3, r3, r0, lsr #5
 8003e06:	60ab      	str	r3, [r5, #8]
  }
}
 8003e08:	bd38      	pop	{r3, r4, r5, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e0a:	18da      	adds	r2, r3, r3
 8003e0c:	f04f 0300 	mov.w	r3, #0
 8003e10:	415b      	adcs	r3, r3
 8003e12:	f7fc fa35 	bl	8000280 <__aeabi_uldivmod>
 8003e16:	4a0c      	ldr	r2, [pc, #48]	@ (8003e48 <UART_SetConfig+0xc8>)
 8003e18:	fba2 3100 	umull	r3, r1, r2, r0
 8003e1c:	0949      	lsrs	r1, r1, #5
 8003e1e:	2364      	movs	r3, #100	@ 0x64
 8003e20:	fb03 0311 	mls	r3, r3, r1, r0
 8003e24:	00db      	lsls	r3, r3, #3
 8003e26:	3332      	adds	r3, #50	@ 0x32
 8003e28:	fba2 2303 	umull	r2, r3, r2, r3
 8003e2c:	f3c3 1242 	ubfx	r2, r3, #5, #3
 8003e30:	091b      	lsrs	r3, r3, #4
 8003e32:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003e36:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003e3a:	4413      	add	r3, r2
 8003e3c:	60ab      	str	r3, [r5, #8]
}
 8003e3e:	bd38      	pop	{r3, r4, r5, pc}
 8003e40:	40011000 	.word	0x40011000
 8003e44:	40011400 	.word	0x40011400
 8003e48:	51eb851f 	.word	0x51eb851f

08003e4c <HAL_UART_Init>:
  if (huart == NULL)
 8003e4c:	b370      	cbz	r0, 8003eac <HAL_UART_Init+0x60>
{
 8003e4e:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8003e50:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8003e54:	4604      	mov	r4, r0
 8003e56:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003e5a:	b313      	cbz	r3, 8003ea2 <HAL_UART_Init+0x56>
  __HAL_UART_DISABLE(huart);
 8003e5c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003e5e:	2324      	movs	r3, #36	@ 0x24
 8003e60:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8003e64:	68d3      	ldr	r3, [r2, #12]
 8003e66:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  UART_SetConfig(huart);
 8003e6a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8003e6c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003e6e:	f7ff ff87 	bl	8003d80 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e72:	6823      	ldr	r3, [r4, #0]
 8003e74:	6919      	ldr	r1, [r3, #16]
 8003e76:	f421 4190 	bic.w	r1, r1, #18432	@ 0x4800
 8003e7a:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e7c:	6959      	ldr	r1, [r3, #20]
 8003e7e:	f021 012a 	bic.w	r1, r1, #42	@ 0x2a
 8003e82:	6159      	str	r1, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8003e84:	68d9      	ldr	r1, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e86:	2200      	movs	r2, #0
  huart->gState = HAL_UART_STATE_READY;
 8003e88:	f04f 0c20 	mov.w	ip, #32
  __HAL_UART_ENABLE(huart);
 8003e8c:	f441 5100 	orr.w	r1, r1, #8192	@ 0x2000
 8003e90:	60d9      	str	r1, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e92:	6462      	str	r2, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e94:	f884 c041 	strb.w	ip, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e98:	f884 c042 	strb.w	ip, [r4, #66]	@ 0x42
  return HAL_OK;
 8003e9c:	4610      	mov	r0, r2
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e9e:	6362      	str	r2, [r4, #52]	@ 0x34
}
 8003ea0:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8003ea2:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8003ea6:	f7fc ff9d 	bl	8000de4 <HAL_UART_MspInit>
 8003eaa:	e7d7      	b.n	8003e5c <HAL_UART_Init+0x10>
    return HAL_ERROR;
 8003eac:	2001      	movs	r0, #1
}
 8003eae:	4770      	bx	lr

08003eb0 <HAL_UART_DeInit>:
  if (huart == NULL)
 8003eb0:	b1b8      	cbz	r0, 8003ee2 <HAL_UART_DeInit+0x32>
  __HAL_UART_DISABLE(huart);
 8003eb2:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003eb4:	2324      	movs	r3, #36	@ 0x24
{
 8003eb6:	b510      	push	{r4, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8003eb8:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8003ebc:	68d3      	ldr	r3, [r2, #12]
 8003ebe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ec2:	4604      	mov	r4, r0
 8003ec4:	60d3      	str	r3, [r2, #12]
  HAL_UART_MspDeInit(huart);
 8003ec6:	f7fd f825 	bl	8000f14 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	6463      	str	r3, [r4, #68]	@ 0x44
  __HAL_UNLOCK(huart);
 8003ece:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8003ed2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 8003ed6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  return HAL_OK;
 8003eda:	4618      	mov	r0, r3
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003edc:	6323      	str	r3, [r4, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ede:	6363      	str	r3, [r4, #52]	@ 0x34
}
 8003ee0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003ee2:	2001      	movs	r0, #1
}
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop

08003ee8 <HAL_UART_Transmit>:
{
 8003ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003eec:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8003eee:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
 8003ef2:	2820      	cmp	r0, #32
 8003ef4:	d14e      	bne.n	8003f94 <HAL_UART_Transmit+0xac>
    if ((pData == NULL) || (Size == 0U))
 8003ef6:	4688      	mov	r8, r1
 8003ef8:	b109      	cbz	r1, 8003efe <HAL_UART_Transmit+0x16>
 8003efa:	4616      	mov	r6, r2
 8003efc:	b912      	cbnz	r2, 8003f04 <HAL_UART_Transmit+0x1c>
      return  HAL_ERROR;
 8003efe:	2001      	movs	r0, #1
}
 8003f00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f04:	461f      	mov	r7, r3
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f06:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f0a:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f0c:	f8c4 9044 	str.w	r9, [r4, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f10:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8003f14:	f7fd faa8 	bl	8001468 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f18:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize = Size;
 8003f1a:	84a6      	strh	r6, [r4, #36]	@ 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 8003f20:	4605      	mov	r5, r0
    huart->TxXferCount = Size;
 8003f22:	84e6      	strh	r6, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f24:	d039      	beq.n	8003f9a <HAL_UART_Transmit+0xb2>
    while (huart->TxXferCount > 0U)
 8003f26:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f28:	6823      	ldr	r3, [r4, #0]
    while (huart->TxXferCount > 0U)
 8003f2a:	b292      	uxth	r2, r2
 8003f2c:	b1aa      	cbz	r2, 8003f5a <HAL_UART_Transmit+0x72>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	0616      	lsls	r6, r2, #24
 8003f32:	d404      	bmi.n	8003f3e <HAL_UART_Transmit+0x56>
    if (Timeout != HAL_MAX_DELAY)
 8003f34:	1c79      	adds	r1, r7, #1
 8003f36:	d11e      	bne.n	8003f76 <HAL_UART_Transmit+0x8e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	0612      	lsls	r2, r2, #24
 8003f3c:	d5fc      	bpl.n	8003f38 <HAL_UART_Transmit+0x50>
      if (pdata8bits == NULL)
 8003f3e:	f1b8 0f00 	cmp.w	r8, #0
 8003f42:	d021      	beq.n	8003f88 <HAL_UART_Transmit+0xa0>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f44:	f818 2b01 	ldrb.w	r2, [r8], #1
 8003f48:	605a      	str	r2, [r3, #4]
      huart->TxXferCount--;
 8003f4a:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8003f4c:	3a01      	subs	r2, #1
 8003f4e:	b292      	uxth	r2, r2
 8003f50:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003f52:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8003f54:	b292      	uxth	r2, r2
 8003f56:	2a00      	cmp	r2, #0
 8003f58:	d1e9      	bne.n	8003f2e <HAL_UART_Transmit+0x46>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	0652      	lsls	r2, r2, #25
 8003f5e:	d404      	bmi.n	8003f6a <HAL_UART_Transmit+0x82>
    if (Timeout != HAL_MAX_DELAY)
 8003f60:	1c78      	adds	r0, r7, #1
 8003f62:	d120      	bne.n	8003fa6 <HAL_UART_Transmit+0xbe>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	0651      	lsls	r1, r2, #25
 8003f68:	d5fc      	bpl.n	8003f64 <HAL_UART_Transmit+0x7c>
    huart->gState = HAL_UART_STATE_READY;
 8003f6a:	2320      	movs	r3, #32
 8003f6c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8003f70:	2000      	movs	r0, #0
}
 8003f72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f76:	f7fd fa77 	bl	8001468 <HAL_GetTick>
 8003f7a:	1b40      	subs	r0, r0, r5
 8003f7c:	4287      	cmp	r7, r0
 8003f7e:	d31b      	bcc.n	8003fb8 <HAL_UART_Transmit+0xd0>
 8003f80:	b1d7      	cbz	r7, 8003fb8 <HAL_UART_Transmit+0xd0>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f82:	6823      	ldr	r3, [r4, #0]
 8003f84:	68da      	ldr	r2, [r3, #12]
 8003f86:	e7d2      	b.n	8003f2e <HAL_UART_Transmit+0x46>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f88:	f839 2b02 	ldrh.w	r2, [r9], #2
 8003f8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f90:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f92:	e7da      	b.n	8003f4a <HAL_UART_Transmit+0x62>
    return HAL_BUSY;
 8003f94:	2002      	movs	r0, #2
}
 8003f96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f9a:	6923      	ldr	r3, [r4, #16]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1c2      	bne.n	8003f26 <HAL_UART_Transmit+0x3e>
      pdata16bits = (const uint16_t *) pData;
 8003fa0:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
 8003fa2:	4698      	mov	r8, r3
 8003fa4:	e7bf      	b.n	8003f26 <HAL_UART_Transmit+0x3e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fa6:	f7fd fa5f 	bl	8001468 <HAL_GetTick>
 8003faa:	1b43      	subs	r3, r0, r5
 8003fac:	429f      	cmp	r7, r3
 8003fae:	d303      	bcc.n	8003fb8 <HAL_UART_Transmit+0xd0>
 8003fb0:	b117      	cbz	r7, 8003fb8 <HAL_UART_Transmit+0xd0>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003fb2:	6823      	ldr	r3, [r4, #0]
 8003fb4:	68da      	ldr	r2, [r3, #12]
 8003fb6:	e7d0      	b.n	8003f5a <HAL_UART_Transmit+0x72>
        huart->gState = HAL_UART_STATE_READY;
 8003fb8:	2320      	movs	r3, #32
 8003fba:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8003fbe:	2003      	movs	r0, #3
}
 8003fc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08003fc4 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8003fc4:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8003fc8:	2b20      	cmp	r3, #32
 8003fca:	d103      	bne.n	8003fd4 <HAL_UART_Receive_IT+0x10>
    if ((pData == NULL) || (Size == 0U))
 8003fcc:	b101      	cbz	r1, 8003fd0 <HAL_UART_Receive_IT+0xc>
 8003fce:	b91a      	cbnz	r2, 8003fd8 <HAL_UART_Receive_IT+0x14>
      return HAL_ERROR;
 8003fd0:	2001      	movs	r0, #1
}
 8003fd2:	4770      	bx	lr
    return HAL_BUSY;
 8003fd4:	2002      	movs	r0, #2
 8003fd6:	4770      	bx	lr
{
 8003fd8:	b410      	push	{r4}
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003fda:	6904      	ldr	r4, [r0, #16]
  huart->pRxBuffPtr = pData;
 8003fdc:	6281      	str	r1, [r0, #40]	@ 0x28
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fde:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003fe0:	2122      	movs	r1, #34	@ 0x22
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fe2:	6303      	str	r3, [r0, #48]	@ 0x30
  huart->RxXferSize = Size;
 8003fe4:	8582      	strh	r2, [r0, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003fe6:	85c2      	strh	r2, [r0, #46]	@ 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fe8:	6443      	str	r3, [r0, #68]	@ 0x44
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003fea:	6803      	ldr	r3, [r0, #0]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003fec:	f880 1042 	strb.w	r1, [r0, #66]	@ 0x42
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003ff0:	b11c      	cbz	r4, 8003ffa <HAL_UART_Receive_IT+0x36>
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003ff2:	68da      	ldr	r2, [r3, #12]
 8003ff4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ff8:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003ffa:	695a      	ldr	r2, [r3, #20]
}
 8003ffc:	f85d 4b04 	ldr.w	r4, [sp], #4
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004000:	f042 0201 	orr.w	r2, r2, #1
 8004004:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004006:	68da      	ldr	r2, [r3, #12]
 8004008:	f042 0220 	orr.w	r2, r2, #32
    return (UART_Start_Receive_IT(huart, pData, Size));
 800400c:	2000      	movs	r0, #0
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800400e:	60da      	str	r2, [r3, #12]
}
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop

08004014 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop

08004018 <UART_DMAAbortOnError>:
{
 8004018:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800401a:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0x00U;
 800401c:	2300      	movs	r3, #0
 800401e:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  HAL_UART_ErrorCallback(huart);
 8004020:	f7ff fff8 	bl	8004014 <HAL_UART_ErrorCallback>
}
 8004024:	bd08      	pop	{r3, pc}
 8004026:	bf00      	nop

08004028 <HAL_UARTEx_RxEventCallback>:
}
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop

0800402c <UART_Receive_IT.isra.0>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800402c:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8004030:	2b22      	cmp	r3, #34	@ 0x22
 8004032:	d157      	bne.n	80040e4 <UART_Receive_IT.isra.0+0xb8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004034:	6883      	ldr	r3, [r0, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004036:	6801      	ldr	r1, [r0, #0]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004038:	6a82      	ldr	r2, [r0, #40]	@ 0x28
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800403a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800403e:	d044      	beq.n	80040ca <UART_Receive_IT.isra.0+0x9e>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004040:	2b00      	cmp	r3, #0
 8004042:	d14b      	bne.n	80040dc <UART_Receive_IT.isra.0+0xb0>
 8004044:	6903      	ldr	r3, [r0, #16]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d148      	bne.n	80040dc <UART_Receive_IT.isra.0+0xb0>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800404a:	684b      	ldr	r3, [r1, #4]
 800404c:	b2db      	uxtb	r3, r3
 800404e:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8004050:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8004052:	3201      	adds	r2, #1
    if (--huart->RxXferCount == 0U)
 8004054:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
      huart->pRxBuffPtr += 2U;
 8004056:	6282      	str	r2, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 8004058:	3b01      	subs	r3, #1
 800405a:	b29b      	uxth	r3, r3
 800405c:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 800405e:	2b00      	cmp	r3, #0
 8004060:	d140      	bne.n	80040e4 <UART_Receive_IT.isra.0+0xb8>
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8004062:	b500      	push	{lr}
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004064:	6802      	ldr	r2, [r0, #0]
 8004066:	68d1      	ldr	r1, [r2, #12]
 8004068:	f021 0120 	bic.w	r1, r1, #32
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 800406c:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800406e:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004070:	68d1      	ldr	r1, [r2, #12]
 8004072:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 8004076:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004078:	6951      	ldr	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800407a:	f04f 0c20 	mov.w	ip, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800407e:	f021 0101 	bic.w	r1, r1, #1
 8004082:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8004084:	f880 c042 	strb.w	ip, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004088:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800408a:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 800408c:	2901      	cmp	r1, #1
 800408e:	d12a      	bne.n	80040e6 <UART_Receive_IT.isra.0+0xba>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004090:	6303      	str	r3, [r0, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004092:	f102 030c 	add.w	r3, r2, #12
 8004096:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800409a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409e:	f102 0c0c 	add.w	ip, r2, #12
 80040a2:	e84c 3100 	strex	r1, r3, [ip]
 80040a6:	2900      	cmp	r1, #0
 80040a8:	d1f3      	bne.n	8004092 <UART_Receive_IT.isra.0+0x66>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80040aa:	6813      	ldr	r3, [r2, #0]
 80040ac:	06db      	lsls	r3, r3, #27
 80040ae:	d506      	bpl.n	80040be <UART_Receive_IT.isra.0+0x92>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040b0:	2300      	movs	r3, #0
 80040b2:	9301      	str	r3, [sp, #4]
 80040b4:	6813      	ldr	r3, [r2, #0]
 80040b6:	9301      	str	r3, [sp, #4]
 80040b8:	6853      	ldr	r3, [r2, #4]
 80040ba:	9301      	str	r3, [sp, #4]
 80040bc:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040be:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 80040c0:	f7ff ffb2 	bl	8004028 <HAL_UARTEx_RxEventCallback>
}
 80040c4:	b003      	add	sp, #12
 80040c6:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040ca:	6903      	ldr	r3, [r0, #16]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d1bc      	bne.n	800404a <UART_Receive_IT.isra.0+0x1e>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80040d0:	684b      	ldr	r3, [r1, #4]
 80040d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040d6:	f822 3b02 	strh.w	r3, [r2], #2
      huart->pRxBuffPtr += 2U;
 80040da:	e7bb      	b.n	8004054 <UART_Receive_IT.isra.0+0x28>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80040dc:	684b      	ldr	r3, [r1, #4]
 80040de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040e2:	e7b4      	b.n	800404e <UART_Receive_IT.isra.0+0x22>
 80040e4:	4770      	bx	lr
        HAL_UART_RxCpltCallback(huart);
 80040e6:	f001 f92d 	bl	8005344 <HAL_UART_RxCpltCallback>
}
 80040ea:	b003      	add	sp, #12
 80040ec:	f85d fb04 	ldr.w	pc, [sp], #4

080040f0 <HAL_UART_IRQHandler>:
{
 80040f0:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80040f2:	6805      	ldr	r5, [r0, #0]
 80040f4:	682b      	ldr	r3, [r5, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040f6:	68ee      	ldr	r6, [r5, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040f8:	6969      	ldr	r1, [r5, #20]
  if (errorflags == RESET)
 80040fa:	f013 0f0f 	tst.w	r3, #15
{
 80040fe:	b082      	sub	sp, #8
 8004100:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004102:	462a      	mov	r2, r5
  if (errorflags == RESET)
 8004104:	d172      	bne.n	80041ec <HAL_UART_IRQHandler+0xfc>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004106:	069d      	lsls	r5, r3, #26
 8004108:	d502      	bpl.n	8004110 <HAL_UART_IRQHandler+0x20>
 800410a:	06b1      	lsls	r1, r6, #26
 800410c:	f100 80c6 	bmi.w	800429c <HAL_UART_IRQHandler+0x1ac>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004110:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004112:	2901      	cmp	r1, #1
 8004114:	d00b      	beq.n	800412e <HAL_UART_IRQHandler+0x3e>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004116:	0618      	lsls	r0, r3, #24
 8004118:	d502      	bpl.n	8004120 <HAL_UART_IRQHandler+0x30>
 800411a:	0631      	lsls	r1, r6, #24
 800411c:	f100 8094 	bmi.w	8004248 <HAL_UART_IRQHandler+0x158>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004120:	065b      	lsls	r3, r3, #25
 8004122:	d502      	bpl.n	800412a <HAL_UART_IRQHandler+0x3a>
 8004124:	0675      	lsls	r5, r6, #25
 8004126:	f100 80ae 	bmi.w	8004286 <HAL_UART_IRQHandler+0x196>
}
 800412a:	b002      	add	sp, #8
 800412c:	bd70      	pop	{r4, r5, r6, pc}
      && ((isrflags & USART_SR_IDLE) != 0U)
 800412e:	06d8      	lsls	r0, r3, #27
 8004130:	d5f1      	bpl.n	8004116 <HAL_UART_IRQHandler+0x26>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8004132:	06f1      	lsls	r1, r6, #27
 8004134:	d5ef      	bpl.n	8004116 <HAL_UART_IRQHandler+0x26>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004136:	2300      	movs	r3, #0
 8004138:	9301      	str	r3, [sp, #4]
 800413a:	6813      	ldr	r3, [r2, #0]
 800413c:	9301      	str	r3, [sp, #4]
 800413e:	6853      	ldr	r3, [r2, #4]
 8004140:	9301      	str	r3, [sp, #4]
 8004142:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004144:	6951      	ldr	r1, [r2, #20]
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004146:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004148:	064d      	lsls	r5, r1, #25
 800414a:	f140 810c 	bpl.w	8004366 <HAL_UART_IRQHandler+0x276>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800414e:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004150:	6801      	ldr	r1, [r0, #0]
 8004152:	6849      	ldr	r1, [r1, #4]
 8004154:	b289      	uxth	r1, r1
      if ((nb_remaining_rx_data > 0U)
 8004156:	2900      	cmp	r1, #0
 8004158:	f000 8148 	beq.w	80043ec <HAL_UART_IRQHandler+0x2fc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800415c:	4299      	cmp	r1, r3
 800415e:	f080 8145 	bcs.w	80043ec <HAL_UART_IRQHandler+0x2fc>
        huart->RxXferCount = nb_remaining_rx_data;
 8004162:	85e1      	strh	r1, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004164:	69c1      	ldr	r1, [r0, #28]
 8004166:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800416a:	d036      	beq.n	80041da <HAL_UART_IRQHandler+0xea>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416c:	f102 030c 	add.w	r3, r2, #12
 8004170:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004174:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004178:	f102 050c 	add.w	r5, r2, #12
 800417c:	e845 3100 	strex	r1, r3, [r5]
 8004180:	2900      	cmp	r1, #0
 8004182:	d1f3      	bne.n	800416c <HAL_UART_IRQHandler+0x7c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004184:	f102 0314 	add.w	r3, r2, #20
 8004188:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800418c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004190:	f102 0514 	add.w	r5, r2, #20
 8004194:	e845 3100 	strex	r1, r3, [r5]
 8004198:	2900      	cmp	r1, #0
 800419a:	d1f3      	bne.n	8004184 <HAL_UART_IRQHandler+0x94>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419c:	f102 0314 	add.w	r3, r2, #20
 80041a0:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a8:	f102 0514 	add.w	r5, r2, #20
 80041ac:	e845 3100 	strex	r1, r3, [r5]
 80041b0:	2900      	cmp	r1, #0
 80041b2:	d1f3      	bne.n	800419c <HAL_UART_IRQHandler+0xac>
          huart->RxState = HAL_UART_STATE_READY;
 80041b4:	2320      	movs	r3, #32
 80041b6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ba:	6321      	str	r1, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041bc:	f102 030c 	add.w	r3, r2, #12
 80041c0:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041c4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c8:	f102 050c 	add.w	r5, r2, #12
 80041cc:	e845 3100 	strex	r1, r3, [r5]
 80041d0:	2900      	cmp	r1, #0
 80041d2:	d1f3      	bne.n	80041bc <HAL_UART_IRQHandler+0xcc>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80041d4:	f7fd fe82 	bl	8001edc <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80041d8:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80041da:	2202      	movs	r2, #2
 80041dc:	6362      	str	r2, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80041de:	8de1      	ldrh	r1, [r4, #46]	@ 0x2e
 80041e0:	1a59      	subs	r1, r3, r1
 80041e2:	4620      	mov	r0, r4
 80041e4:	b289      	uxth	r1, r1
 80041e6:	f7ff ff1f 	bl	8004028 <HAL_UARTEx_RxEventCallback>
 80041ea:	e79e      	b.n	800412a <HAL_UART_IRQHandler+0x3a>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80041ec:	f011 0101 	ands.w	r1, r1, #1
 80041f0:	d176      	bne.n	80042e0 <HAL_UART_IRQHandler+0x1f0>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80041f2:	f416 7f90 	tst.w	r6, #288	@ 0x120
 80041f6:	d08b      	beq.n	8004110 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80041f8:	07da      	lsls	r2, r3, #31
 80041fa:	d50a      	bpl.n	8004212 <HAL_UART_IRQHandler+0x122>
 80041fc:	05f0      	lsls	r0, r6, #23
 80041fe:	f140 80ec 	bpl.w	80043da <HAL_UART_IRQHandler+0x2ea>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004202:	6c62      	ldr	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004204:	0758      	lsls	r0, r3, #29
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004206:	f042 0201 	orr.w	r2, r2, #1
 800420a:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800420c:	d54f      	bpl.n	80042ae <HAL_UART_IRQHandler+0x1be>
 800420e:	2900      	cmp	r1, #0
 8004210:	d16a      	bne.n	80042e8 <HAL_UART_IRQHandler+0x1f8>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004212:	0798      	lsls	r0, r3, #30
 8004214:	d55a      	bpl.n	80042cc <HAL_UART_IRQHandler+0x1dc>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004216:	0719      	lsls	r1, r3, #28
 8004218:	f100 80a2 	bmi.w	8004360 <HAL_UART_IRQHandler+0x270>
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800421c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800421e:	2a00      	cmp	r2, #0
 8004220:	d083      	beq.n	800412a <HAL_UART_IRQHandler+0x3a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004222:	069a      	lsls	r2, r3, #26
 8004224:	d502      	bpl.n	800422c <HAL_UART_IRQHandler+0x13c>
 8004226:	06b3      	lsls	r3, r6, #26
 8004228:	f100 80db 	bmi.w	80043e2 <HAL_UART_IRQHandler+0x2f2>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800422c:	696b      	ldr	r3, [r5, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800422e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004230:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004234:	f002 0208 	and.w	r2, r2, #8
 8004238:	ea53 0602 	orrs.w	r6, r3, r2
        UART_EndRxTransfer(huart);
 800423c:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800423e:	d15c      	bne.n	80042fa <HAL_UART_IRQHandler+0x20a>
        HAL_UART_ErrorCallback(huart);
 8004240:	f7ff fee8 	bl	8004014 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004244:	6466      	str	r6, [r4, #68]	@ 0x44
 8004246:	e770      	b.n	800412a <HAL_UART_IRQHandler+0x3a>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004248:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800424c:	2b21      	cmp	r3, #33	@ 0x21
 800424e:	f47f af6c 	bne.w	800412a <HAL_UART_IRQHandler+0x3a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004252:	68a1      	ldr	r1, [r4, #8]
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004254:	6a23      	ldr	r3, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004256:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 800425a:	f000 80d0 	beq.w	80043fe <HAL_UART_IRQHandler+0x30e>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800425e:	1c59      	adds	r1, r3, #1
 8004260:	6221      	str	r1, [r4, #32]
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	6053      	str	r3, [r2, #4]
    if (--huart->TxXferCount == 0U)
 8004266:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8004268:	3b01      	subs	r3, #1
 800426a:	b29b      	uxth	r3, r3
 800426c:	84e3      	strh	r3, [r4, #38]	@ 0x26
 800426e:	2b00      	cmp	r3, #0
 8004270:	f47f af5b 	bne.w	800412a <HAL_UART_IRQHandler+0x3a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004274:	68d3      	ldr	r3, [r2, #12]
 8004276:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800427a:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800427c:	68d3      	ldr	r3, [r2, #12]
 800427e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004282:	60d3      	str	r3, [r2, #12]
 8004284:	e751      	b.n	800412a <HAL_UART_IRQHandler+0x3a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004286:	68d3      	ldr	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 8004288:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800428a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800428e:	60d3      	str	r3, [r2, #12]
  HAL_UART_TxCpltCallback(huart);
 8004290:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 8004292:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 8004296:	f000 ffc7 	bl	8005228 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 800429a:	e746      	b.n	800412a <HAL_UART_IRQHandler+0x3a>
}
 800429c:	b002      	add	sp, #8
 800429e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80042a2:	f7ff bec3 	b.w	800402c <UART_Receive_IT.isra.0>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80042a6:	05f0      	lsls	r0, r6, #23
 80042a8:	d4ab      	bmi.n	8004202 <HAL_UART_IRQHandler+0x112>
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042aa:	075a      	lsls	r2, r3, #29
 80042ac:	d41c      	bmi.n	80042e8 <HAL_UART_IRQHandler+0x1f8>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042ae:	0798      	lsls	r0, r3, #30
 80042b0:	d50c      	bpl.n	80042cc <HAL_UART_IRQHandler+0x1dc>
 80042b2:	2900      	cmp	r1, #0
 80042b4:	d0af      	beq.n	8004216 <HAL_UART_IRQHandler+0x126>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80042b6:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80042b8:	f042 0204 	orr.w	r2, r2, #4
 80042bc:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80042be:	071a      	lsls	r2, r3, #28
 80042c0:	d5ac      	bpl.n	800421c <HAL_UART_IRQHandler+0x12c>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042c2:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80042c4:	f042 0208 	orr.w	r2, r2, #8
 80042c8:	6462      	str	r2, [r4, #68]	@ 0x44
 80042ca:	e7a7      	b.n	800421c <HAL_UART_IRQHandler+0x12c>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80042cc:	0718      	lsls	r0, r3, #28
 80042ce:	d5a5      	bpl.n	800421c <HAL_UART_IRQHandler+0x12c>
 80042d0:	f006 0220 	and.w	r2, r6, #32
 80042d4:	430a      	orrs	r2, r1
 80042d6:	d1f4      	bne.n	80042c2 <HAL_UART_IRQHandler+0x1d2>
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042d8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1a6      	bne.n	800422c <HAL_UART_IRQHandler+0x13c>
 80042de:	e724      	b.n	800412a <HAL_UART_IRQHandler+0x3a>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80042e0:	07da      	lsls	r2, r3, #31
 80042e2:	d4e0      	bmi.n	80042a6 <HAL_UART_IRQHandler+0x1b6>
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042e4:	0758      	lsls	r0, r3, #29
 80042e6:	d538      	bpl.n	800435a <HAL_UART_IRQHandler+0x26a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042e8:	6c62      	ldr	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042ea:	0799      	lsls	r1, r3, #30
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042ec:	f042 0202 	orr.w	r2, r2, #2
 80042f0:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042f2:	d4e0      	bmi.n	80042b6 <HAL_UART_IRQHandler+0x1c6>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80042f4:	071a      	lsls	r2, r3, #28
 80042f6:	d4e4      	bmi.n	80042c2 <HAL_UART_IRQHandler+0x1d2>
 80042f8:	e790      	b.n	800421c <HAL_UART_IRQHandler+0x12c>
        UART_EndRxTransfer(huart);
 80042fa:	f7ff fd11 	bl	8003d20 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042fe:	696b      	ldr	r3, [r5, #20]
 8004300:	065e      	lsls	r6, r3, #25
 8004302:	d526      	bpl.n	8004352 <HAL_UART_IRQHandler+0x262>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004304:	f105 0314 	add.w	r3, r5, #20
 8004308:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800430c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004310:	f105 0114 	add.w	r1, r5, #20
 8004314:	e841 3200 	strex	r2, r3, [r1]
 8004318:	b162      	cbz	r2, 8004334 <HAL_UART_IRQHandler+0x244>
 800431a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800431c:	f102 0314 	add.w	r3, r2, #20
 8004320:	e853 3f00 	ldrex	r3, [r3]
 8004324:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004328:	f102 0014 	add.w	r0, r2, #20
 800432c:	e840 3100 	strex	r1, r3, [r0]
 8004330:	2900      	cmp	r1, #0
 8004332:	d1f3      	bne.n	800431c <HAL_UART_IRQHandler+0x22c>
          if (huart->hdmarx != NULL)
 8004334:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004336:	b160      	cbz	r0, 8004352 <HAL_UART_IRQHandler+0x262>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004338:	4b36      	ldr	r3, [pc, #216]	@ (8004414 <HAL_UART_IRQHandler+0x324>)
 800433a:	6503      	str	r3, [r0, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800433c:	f7fd fe18 	bl	8001f70 <HAL_DMA_Abort_IT>
 8004340:	2800      	cmp	r0, #0
 8004342:	f43f aef2 	beq.w	800412a <HAL_UART_IRQHandler+0x3a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004346:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004348:	6d03      	ldr	r3, [r0, #80]	@ 0x50
}
 800434a:	b002      	add	sp, #8
 800434c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004350:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8004352:	4620      	mov	r0, r4
 8004354:	f7ff fe5e 	bl	8004014 <HAL_UART_ErrorCallback>
 8004358:	e6e7      	b.n	800412a <HAL_UART_IRQHandler+0x3a>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800435a:	0799      	lsls	r1, r3, #30
 800435c:	d4ab      	bmi.n	80042b6 <HAL_UART_IRQHandler+0x1c6>
 800435e:	e7c9      	b.n	80042f4 <HAL_UART_IRQHandler+0x204>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004360:	06b2      	lsls	r2, r6, #26
 8004362:	d4ae      	bmi.n	80042c2 <HAL_UART_IRQHandler+0x1d2>
 8004364:	e7b8      	b.n	80042d8 <HAL_UART_IRQHandler+0x1e8>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004366:	8de0      	ldrh	r0, [r4, #46]	@ 0x2e
      if ((huart->RxXferCount > 0U)
 8004368:	8de1      	ldrh	r1, [r4, #46]	@ 0x2e
 800436a:	b289      	uxth	r1, r1
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800436c:	b280      	uxth	r0, r0
      if ((huart->RxXferCount > 0U)
 800436e:	2900      	cmp	r1, #0
 8004370:	f43f aedb 	beq.w	800412a <HAL_UART_IRQHandler+0x3a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004374:	1a1b      	subs	r3, r3, r0
 8004376:	b299      	uxth	r1, r3
          && (nb_rx_data > 0U))
 8004378:	2900      	cmp	r1, #0
 800437a:	f43f aed6 	beq.w	800412a <HAL_UART_IRQHandler+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800437e:	f102 030c 	add.w	r3, r2, #12
 8004382:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004386:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438a:	f102 050c 	add.w	r5, r2, #12
 800438e:	e845 3000 	strex	r0, r3, [r5]
 8004392:	2800      	cmp	r0, #0
 8004394:	d1f3      	bne.n	800437e <HAL_UART_IRQHandler+0x28e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004396:	f102 0314 	add.w	r3, r2, #20
 800439a:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800439e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a2:	f102 0514 	add.w	r5, r2, #20
 80043a6:	e845 3000 	strex	r0, r3, [r5]
 80043aa:	2800      	cmp	r0, #0
 80043ac:	d1f3      	bne.n	8004396 <HAL_UART_IRQHandler+0x2a6>
        huart->RxState = HAL_UART_STATE_READY;
 80043ae:	2320      	movs	r3, #32
 80043b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043b4:	6320      	str	r0, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b6:	f102 030c 	add.w	r3, r2, #12
 80043ba:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043be:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c2:	f102 050c 	add.w	r5, r2, #12
 80043c6:	e845 3000 	strex	r0, r3, [r5]
 80043ca:	2800      	cmp	r0, #0
 80043cc:	d1f3      	bne.n	80043b6 <HAL_UART_IRQHandler+0x2c6>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80043ce:	2302      	movs	r3, #2
 80043d0:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80043d2:	4620      	mov	r0, r4
 80043d4:	f7ff fe28 	bl	8004028 <HAL_UARTEx_RxEventCallback>
 80043d8:	e6a7      	b.n	800412a <HAL_UART_IRQHandler+0x3a>
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043da:	075a      	lsls	r2, r3, #29
 80043dc:	f53f af19 	bmi.w	8004212 <HAL_UART_IRQHandler+0x122>
 80043e0:	e765      	b.n	80042ae <HAL_UART_IRQHandler+0x1be>
        UART_Receive_IT(huart);
 80043e2:	4620      	mov	r0, r4
 80043e4:	f7ff fe22 	bl	800402c <UART_Receive_IT.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80043e8:	6825      	ldr	r5, [r4, #0]
 80043ea:	e71f      	b.n	800422c <HAL_UART_IRQHandler+0x13c>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80043ec:	4299      	cmp	r1, r3
 80043ee:	f47f ae9c 	bne.w	800412a <HAL_UART_IRQHandler+0x3a>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80043f2:	69c3      	ldr	r3, [r0, #28]
 80043f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043f8:	f47f ae97 	bne.w	800412a <HAL_UART_IRQHandler+0x3a>
 80043fc:	e7e7      	b.n	80043ce <HAL_UART_IRQHandler+0x2de>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043fe:	6921      	ldr	r1, [r4, #16]
 8004400:	2900      	cmp	r1, #0
 8004402:	f47f af2c 	bne.w	800425e <HAL_UART_IRQHandler+0x16e>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004406:	f833 1b02 	ldrh.w	r1, [r3], #2
 800440a:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800440e:	6051      	str	r1, [r2, #4]
      huart->pTxBuffPtr += 2U;
 8004410:	6223      	str	r3, [r4, #32]
 8004412:	e728      	b.n	8004266 <HAL_UART_IRQHandler+0x176>
 8004414:	08004019 	.word	0x08004019

08004418 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004418:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800441a:	2300      	movs	r3, #0
 800441c:	9301      	str	r3, [sp, #4]
 800441e:	e002      	b.n	8004426 <USB_CoreReset+0xe>

    if (count > HAL_USB_TIMEOUT)
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004420:	6903      	ldr	r3, [r0, #16]
 8004422:	2b00      	cmp	r3, #0
 8004424:	db09      	blt.n	800443a <USB_CoreReset+0x22>
    count++;
 8004426:	9b01      	ldr	r3, [sp, #4]
 8004428:	3301      	adds	r3, #1
 800442a:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 800442c:	9b01      	ldr	r3, [sp, #4]
 800442e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004432:	d9f5      	bls.n	8004420 <USB_CoreReset+0x8>
      return HAL_TIMEOUT;
 8004434:	2003      	movs	r0, #3
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);

  return HAL_OK;
}
 8004436:	b002      	add	sp, #8
 8004438:	4770      	bx	lr
  count = 10U;
 800443a:	230a      	movs	r3, #10
 800443c:	9301      	str	r3, [sp, #4]
  while (count > 0U)
 800443e:	9b01      	ldr	r3, [sp, #4]
 8004440:	b12b      	cbz	r3, 800444e <USB_CoreReset+0x36>
    count--;
 8004442:	9b01      	ldr	r3, [sp, #4]
 8004444:	3b01      	subs	r3, #1
 8004446:	9301      	str	r3, [sp, #4]
  while (count > 0U)
 8004448:	9b01      	ldr	r3, [sp, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1f9      	bne.n	8004442 <USB_CoreReset+0x2a>
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800444e:	6903      	ldr	r3, [r0, #16]
 8004450:	f043 0301 	orr.w	r3, r3, #1
 8004454:	6103      	str	r3, [r0, #16]
 8004456:	e003      	b.n	8004460 <USB_CoreReset+0x48>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004458:	6903      	ldr	r3, [r0, #16]
 800445a:	f013 0301 	ands.w	r3, r3, #1
 800445e:	d007      	beq.n	8004470 <USB_CoreReset+0x58>
    count++;
 8004460:	9b01      	ldr	r3, [sp, #4]
 8004462:	3301      	adds	r3, #1
 8004464:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8004466:	9b01      	ldr	r3, [sp, #4]
 8004468:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800446c:	d9f4      	bls.n	8004458 <USB_CoreReset+0x40>
 800446e:	e7e1      	b.n	8004434 <USB_CoreReset+0x1c>
  return HAL_OK;
 8004470:	4618      	mov	r0, r3
}
 8004472:	b002      	add	sp, #8
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop

08004478 <USB_CoreInit>:
{
 8004478:	b084      	sub	sp, #16
 800447a:	b510      	push	{r4, lr}
 800447c:	f10d 0c0c 	add.w	ip, sp, #12
 8004480:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004484:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8004488:	2b01      	cmp	r3, #1
{
 800448a:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800448c:	d124      	bne.n	80044d8 <USB_CoreInit+0x60>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800448e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
    if (cfg.use_external_vbus == 1U)
 8004490:	f89d 2018 	ldrb.w	r2, [sp, #24]
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004494:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004498:	6383      	str	r3, [r0, #56]	@ 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800449a:	68c3      	ldr	r3, [r0, #12]
 800449c:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80044a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044a4:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80044a6:	68c3      	ldr	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 80044a8:	2a01      	cmp	r2, #1
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80044aa:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80044ae:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 80044b0:	d025      	beq.n	80044fe <USB_CoreInit+0x86>
    ret = USB_CoreReset(USBx);
 80044b2:	4620      	mov	r0, r4
 80044b4:	f7ff ffb0 	bl	8004418 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 80044b8:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d107      	bne.n	80044d0 <USB_CoreInit+0x58>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80044c0:	68a3      	ldr	r3, [r4, #8]
 80044c2:	f043 0306 	orr.w	r3, r3, #6
 80044c6:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80044c8:	68a3      	ldr	r3, [r4, #8]
 80044ca:	f043 0320 	orr.w	r3, r3, #32
 80044ce:	60a3      	str	r3, [r4, #8]
}
 80044d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044d4:	b004      	add	sp, #16
 80044d6:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80044d8:	68c3      	ldr	r3, [r0, #12]
 80044da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80044de:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 80044e0:	f7ff ff9a 	bl	8004418 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 80044e4:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80044e8:	b923      	cbnz	r3, 80044f4 <USB_CoreInit+0x7c>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80044ea:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80044ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044f0:	63a3      	str	r3, [r4, #56]	@ 0x38
 80044f2:	e7e1      	b.n	80044b8 <USB_CoreInit+0x40>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044f4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80044f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044fa:	63a3      	str	r3, [r4, #56]	@ 0x38
 80044fc:	e7dc      	b.n	80044b8 <USB_CoreInit+0x40>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80044fe:	68c3      	ldr	r3, [r0, #12]
 8004500:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004504:	60c3      	str	r3, [r0, #12]
 8004506:	e7d4      	b.n	80044b2 <USB_CoreInit+0x3a>

08004508 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8004508:	2a02      	cmp	r2, #2
{
 800450a:	4603      	mov	r3, r0
  if (speed == USBD_FS_SPEED)
 800450c:	d00a      	beq.n	8004524 <USB_SetTurnaroundTime+0x1c>
 800450e:	f44f 5110 	mov.w	r1, #9216	@ 0x2400
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004512:	68da      	ldr	r2, [r3, #12]
 8004514:	f422 5270 	bic.w	r2, r2, #15360	@ 0x3c00
 8004518:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800451a:	68da      	ldr	r2, [r3, #12]
 800451c:	430a      	orrs	r2, r1
}
 800451e:	2000      	movs	r0, #0
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004520:	60da      	str	r2, [r3, #12]
}
 8004522:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004524:	4a26      	ldr	r2, [pc, #152]	@ (80045c0 <USB_SetTurnaroundTime+0xb8>)
 8004526:	4827      	ldr	r0, [pc, #156]	@ (80045c4 <USB_SetTurnaroundTime+0xbc>)
 8004528:	440a      	add	r2, r1
 800452a:	4282      	cmp	r2, r0
 800452c:	d932      	bls.n	8004594 <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800452e:	4a26      	ldr	r2, [pc, #152]	@ (80045c8 <USB_SetTurnaroundTime+0xc0>)
 8004530:	4826      	ldr	r0, [pc, #152]	@ (80045cc <USB_SetTurnaroundTime+0xc4>)
 8004532:	440a      	add	r2, r1
 8004534:	4282      	cmp	r2, r0
 8004536:	d930      	bls.n	800459a <USB_SetTurnaroundTime+0x92>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004538:	4825      	ldr	r0, [pc, #148]	@ (80045d0 <USB_SetTurnaroundTime+0xc8>)
 800453a:	f5a1 0274 	sub.w	r2, r1, #15990784	@ 0xf40000
 800453e:	f5a2 5210 	sub.w	r2, r2, #9216	@ 0x2400
 8004542:	4282      	cmp	r2, r0
 8004544:	d92c      	bls.n	80045a0 <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004546:	4823      	ldr	r0, [pc, #140]	@ (80045d4 <USB_SetTurnaroundTime+0xcc>)
 8004548:	f1a1 7283 	sub.w	r2, r1, #17170432	@ 0x1060000
 800454c:	f5a2 42e7 	sub.w	r2, r2, #29568	@ 0x7380
 8004550:	4282      	cmp	r2, r0
 8004552:	d328      	bcc.n	80045a6 <USB_SetTurnaroundTime+0x9e>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004554:	4a20      	ldr	r2, [pc, #128]	@ (80045d8 <USB_SetTurnaroundTime+0xd0>)
 8004556:	4821      	ldr	r0, [pc, #132]	@ (80045dc <USB_SetTurnaroundTime+0xd4>)
 8004558:	440a      	add	r2, r1
 800455a:	4282      	cmp	r2, r0
 800455c:	d926      	bls.n	80045ac <USB_SetTurnaroundTime+0xa4>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800455e:	4a20      	ldr	r2, [pc, #128]	@ (80045e0 <USB_SetTurnaroundTime+0xd8>)
 8004560:	4820      	ldr	r0, [pc, #128]	@ (80045e4 <USB_SetTurnaroundTime+0xdc>)
 8004562:	440a      	add	r2, r1
 8004564:	4282      	cmp	r2, r0
 8004566:	d324      	bcc.n	80045b2 <USB_SetTurnaroundTime+0xaa>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004568:	4a1f      	ldr	r2, [pc, #124]	@ (80045e8 <USB_SetTurnaroundTime+0xe0>)
 800456a:	4820      	ldr	r0, [pc, #128]	@ (80045ec <USB_SetTurnaroundTime+0xe4>)
 800456c:	440a      	add	r2, r1
 800456e:	4282      	cmp	r2, r0
 8004570:	d3cd      	bcc.n	800450e <USB_SetTurnaroundTime+0x6>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004572:	481f      	ldr	r0, [pc, #124]	@ (80045f0 <USB_SetTurnaroundTime+0xe8>)
 8004574:	f1a1 72b7 	sub.w	r2, r1, #23986176	@ 0x16e0000
 8004578:	f5a2 5258 	sub.w	r2, r2, #13824	@ 0x3600
 800457c:	4282      	cmp	r2, r0
 800457e:	d31b      	bcc.n	80045b8 <USB_SetTurnaroundTime+0xb0>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004580:	4a1c      	ldr	r2, [pc, #112]	@ (80045f4 <USB_SetTurnaroundTime+0xec>)
 8004582:	481d      	ldr	r0, [pc, #116]	@ (80045f8 <USB_SetTurnaroundTime+0xf0>)
 8004584:	440a      	add	r2, r1
 8004586:	4282      	cmp	r2, r0
 8004588:	bf2c      	ite	cs
 800458a:	f44f 51c0 	movcs.w	r1, #6144	@ 0x1800
 800458e:	f44f 51e0 	movcc.w	r1, #7168	@ 0x1c00
 8004592:	e7be      	b.n	8004512 <USB_SetTurnaroundTime+0xa>
 8004594:	f44f 5170 	mov.w	r1, #15360	@ 0x3c00
 8004598:	e7bb      	b.n	8004512 <USB_SetTurnaroundTime+0xa>
 800459a:	f44f 5160 	mov.w	r1, #14336	@ 0x3800
 800459e:	e7b8      	b.n	8004512 <USB_SetTurnaroundTime+0xa>
 80045a0:	f44f 5150 	mov.w	r1, #13312	@ 0x3400
 80045a4:	e7b5      	b.n	8004512 <USB_SetTurnaroundTime+0xa>
 80045a6:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80045aa:	e7b2      	b.n	8004512 <USB_SetTurnaroundTime+0xa>
 80045ac:	f44f 5130 	mov.w	r1, #11264	@ 0x2c00
 80045b0:	e7af      	b.n	8004512 <USB_SetTurnaroundTime+0xa>
 80045b2:	f44f 5120 	mov.w	r1, #10240	@ 0x2800
 80045b6:	e7ac      	b.n	8004512 <USB_SetTurnaroundTime+0xa>
 80045b8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80045bc:	e7a9      	b.n	8004512 <USB_SetTurnaroundTime+0xa>
 80045be:	bf00      	nop
 80045c0:	ff275340 	.word	0xff275340
 80045c4:	000c34ff 	.word	0x000c34ff
 80045c8:	ff1b1e40 	.word	0xff1b1e40
 80045cc:	000f423f 	.word	0x000f423f
 80045d0:	00124f7f 	.word	0x00124f7f
 80045d4:	0013d620 	.word	0x0013d620
 80045d8:	fee5b660 	.word	0xfee5b660
 80045dc:	0016e35f 	.word	0x0016e35f
 80045e0:	feced300 	.word	0xfeced300
 80045e4:	001b7740 	.word	0x001b7740
 80045e8:	feb35bc0 	.word	0xfeb35bc0
 80045ec:	002191c0 	.word	0x002191c0
 80045f0:	00387520 	.word	0x00387520
 80045f4:	fe5954e0 	.word	0xfe5954e0
 80045f8:	00419ce0 	.word	0x00419ce0

080045fc <USB_EnableGlobalInt>:
{
 80045fc:	4603      	mov	r3, r0
}
 80045fe:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004600:	689a      	ldr	r2, [r3, #8]
 8004602:	f042 0201 	orr.w	r2, r2, #1
 8004606:	609a      	str	r2, [r3, #8]
}
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop

0800460c <USB_DisableGlobalInt>:
{
 800460c:	4603      	mov	r3, r0
}
 800460e:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004610:	689a      	ldr	r2, [r3, #8]
 8004612:	f022 0201 	bic.w	r2, r2, #1
 8004616:	609a      	str	r2, [r3, #8]
}
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop

0800461c <USB_SetCurrentMode>:
{
 800461c:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800461e:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8004620:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004622:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
{
 8004626:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004628:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800462a:	d018      	beq.n	800465e <USB_SetCurrentMode+0x42>
  else if (mode == USB_DEVICE_MODE)
 800462c:	b9a9      	cbnz	r1, 800465a <USB_SetCurrentMode+0x3e>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800462e:	68c3      	ldr	r3, [r0, #12]
 8004630:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
  uint32_t ms = 0U;
 8004634:	460c      	mov	r4, r1
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004636:	60c3      	str	r3, [r0, #12]
 8004638:	e001      	b.n	800463e <USB_SetCurrentMode+0x22>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800463a:	2cc8      	cmp	r4, #200	@ 0xc8
 800463c:	d00d      	beq.n	800465a <USB_SetCurrentMode+0x3e>
      HAL_Delay(10U);
 800463e:	200a      	movs	r0, #10
 8004640:	f7fc ff18 	bl	8001474 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8004644:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004646:	07db      	lsls	r3, r3, #31
      ms += 10U;
 8004648:	f104 040a 	add.w	r4, r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800464c:	d4f5      	bmi.n	800463a <USB_SetCurrentMode+0x1e>
  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800464e:	f1a4 00c8 	sub.w	r0, r4, #200	@ 0xc8
 8004652:	fab0 f080 	clz	r0, r0
 8004656:	0940      	lsrs	r0, r0, #5
}
 8004658:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800465a:	2001      	movs	r0, #1
}
 800465c:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800465e:	68c3      	ldr	r3, [r0, #12]
 8004660:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
  uint32_t ms = 0U;
 8004664:	2400      	movs	r4, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004666:	60c3      	str	r3, [r0, #12]
 8004668:	e001      	b.n	800466e <USB_SetCurrentMode+0x52>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800466a:	2cc8      	cmp	r4, #200	@ 0xc8
 800466c:	d0f5      	beq.n	800465a <USB_SetCurrentMode+0x3e>
      HAL_Delay(10U);
 800466e:	200a      	movs	r0, #10
 8004670:	f7fc ff00 	bl	8001474 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8004674:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004676:	07da      	lsls	r2, r3, #31
      ms += 10U;
 8004678:	f104 040a 	add.w	r4, r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800467c:	d5f5      	bpl.n	800466a <USB_SetCurrentMode+0x4e>
  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800467e:	f1a4 00c8 	sub.w	r0, r4, #200	@ 0xc8
 8004682:	fab0 f080 	clz	r0, r0
 8004686:	0940      	lsrs	r0, r0, #5
 8004688:	e7e6      	b.n	8004658 <USB_SetCurrentMode+0x3c>
 800468a:	bf00      	nop

0800468c <USB_FlushTxFifo>:
{
 800468c:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800468e:	2300      	movs	r3, #0
 8004690:	9301      	str	r3, [sp, #4]
 8004692:	e002      	b.n	800469a <USB_FlushTxFifo+0xe>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004694:	6903      	ldr	r3, [r0, #16]
 8004696:	2b00      	cmp	r3, #0
 8004698:	db09      	blt.n	80046ae <USB_FlushTxFifo+0x22>
    count++;
 800469a:	9b01      	ldr	r3, [sp, #4]
 800469c:	3301      	adds	r3, #1
 800469e:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 80046a0:	9b01      	ldr	r3, [sp, #4]
 80046a2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80046a6:	d9f5      	bls.n	8004694 <USB_FlushTxFifo+0x8>
      return HAL_TIMEOUT;
 80046a8:	2003      	movs	r0, #3
}
 80046aa:	b002      	add	sp, #8
 80046ac:	4770      	bx	lr
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80046ae:	0189      	lsls	r1, r1, #6
  count = 0U;
 80046b0:	2300      	movs	r3, #0
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80046b2:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
 80046b6:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80046b8:	6101      	str	r1, [r0, #16]
 80046ba:	e003      	b.n	80046c4 <USB_FlushTxFifo+0x38>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80046bc:	6903      	ldr	r3, [r0, #16]
 80046be:	f013 0320 	ands.w	r3, r3, #32
 80046c2:	d007      	beq.n	80046d4 <USB_FlushTxFifo+0x48>
    count++;
 80046c4:	9b01      	ldr	r3, [sp, #4]
 80046c6:	3301      	adds	r3, #1
 80046c8:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 80046ca:	9b01      	ldr	r3, [sp, #4]
 80046cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80046d0:	d9f4      	bls.n	80046bc <USB_FlushTxFifo+0x30>
 80046d2:	e7e9      	b.n	80046a8 <USB_FlushTxFifo+0x1c>
  return HAL_OK;
 80046d4:	4618      	mov	r0, r3
}
 80046d6:	b002      	add	sp, #8
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop

080046dc <USB_FlushRxFifo>:
{
 80046dc:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80046de:	2300      	movs	r3, #0
 80046e0:	9301      	str	r3, [sp, #4]
 80046e2:	e002      	b.n	80046ea <USB_FlushRxFifo+0xe>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80046e4:	6903      	ldr	r3, [r0, #16]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	db09      	blt.n	80046fe <USB_FlushRxFifo+0x22>
    count++;
 80046ea:	9b01      	ldr	r3, [sp, #4]
 80046ec:	3301      	adds	r3, #1
 80046ee:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 80046f0:	9b01      	ldr	r3, [sp, #4]
 80046f2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80046f6:	d9f5      	bls.n	80046e4 <USB_FlushRxFifo+0x8>
      return HAL_TIMEOUT;
 80046f8:	2003      	movs	r0, #3
}
 80046fa:	b002      	add	sp, #8
 80046fc:	4770      	bx	lr
  count = 0U;
 80046fe:	2200      	movs	r2, #0
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004700:	2310      	movs	r3, #16
  count = 0U;
 8004702:	9201      	str	r2, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004704:	6103      	str	r3, [r0, #16]
 8004706:	e003      	b.n	8004710 <USB_FlushRxFifo+0x34>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004708:	6903      	ldr	r3, [r0, #16]
 800470a:	f013 0310 	ands.w	r3, r3, #16
 800470e:	d007      	beq.n	8004720 <USB_FlushRxFifo+0x44>
    count++;
 8004710:	9b01      	ldr	r3, [sp, #4]
 8004712:	3301      	adds	r3, #1
 8004714:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8004716:	9b01      	ldr	r3, [sp, #4]
 8004718:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800471c:	d9f4      	bls.n	8004708 <USB_FlushRxFifo+0x2c>
 800471e:	e7eb      	b.n	80046f8 <USB_FlushRxFifo+0x1c>
  return HAL_OK;
 8004720:	4618      	mov	r0, r3
}
 8004722:	b002      	add	sp, #8
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop

08004728 <USB_DevInit>:
{
 8004728:	b084      	sub	sp, #16
 800472a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800472c:	ac07      	add	r4, sp, #28
 800472e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8004732:	2300      	movs	r3, #0
 8004734:	f89d 501c 	ldrb.w	r5, [sp, #28]
 8004738:	f89d 6026 	ldrb.w	r6, [sp, #38]	@ 0x26
{
 800473c:	4604      	mov	r4, r0
    USBx->DIEPTXF[i] = 0U;
 800473e:	4619      	mov	r1, r3
 8004740:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8004744:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 8004748:	3301      	adds	r3, #1
 800474a:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 800474c:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 800474e:	d1f7      	bne.n	8004740 <USB_DevInit+0x18>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004750:	f504 6700 	add.w	r7, r4, #2048	@ 0x800
  if (cfg.vbus_sensing_enable == 0U)
 8004754:	2e00      	cmp	r6, #0
 8004756:	f040 809f 	bne.w	8004898 <USB_DevInit+0x170>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f043 0302 	orr.w	r3, r3, #2
 8004760:	607b      	str	r3, [r7, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004762:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004764:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004768:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800476a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800476c:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8004770:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004772:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004774:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004778:	63a3      	str	r3, [r4, #56]	@ 0x38
  USBx_PCGCCTL = 0U;
 800477a:	2300      	movs	r3, #0
 800477c:	f8c4 3e00 	str.w	r3, [r4, #3584]	@ 0xe00
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004780:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 8004784:	2b01      	cmp	r3, #1
 8004786:	f000 8097 	beq.w	80048b8 <USB_DevInit+0x190>
  USBx_DEVICE->DCFG |= speed;
 800478a:	f8d4 3800 	ldr.w	r3, [r4, #2048]	@ 0x800
 800478e:	f043 0303 	orr.w	r3, r3, #3
 8004792:	f8c4 3800 	str.w	r3, [r4, #2048]	@ 0x800
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004796:	2110      	movs	r1, #16
 8004798:	4620      	mov	r0, r4
 800479a:	f7ff ff77 	bl	800468c <USB_FlushTxFifo>
 800479e:	4601      	mov	r1, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80047a0:	4620      	mov	r0, r4
 80047a2:	f7ff ff9b 	bl	80046dc <USB_FlushRxFifo>
 80047a6:	ea41 0e00 	orr.w	lr, r1, r0
 80047aa:	fa5f fe8e 	uxtb.w	lr, lr
  USBx_DEVICE->DIEPMSK = 0U;
 80047ae:	2200      	movs	r2, #0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80047b0:	f1be 0e00 	subs.w	lr, lr, #0
  USBx_DEVICE->DIEPMSK = 0U;
 80047b4:	613a      	str	r2, [r7, #16]
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80047b6:	bf18      	it	ne
 80047b8:	f04f 0e01 	movne.w	lr, #1
  USBx_DEVICE->DOEPMSK = 0U;
 80047bc:	617a      	str	r2, [r7, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80047be:	61fa      	str	r2, [r7, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047c0:	b305      	cbz	r5, 8004804 <USB_DevInit+0xdc>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80047c2:	f8d4 1900 	ldr.w	r1, [r4, #2304]	@ 0x900
 80047c6:	2900      	cmp	r1, #0
 80047c8:	f504 6310 	add.w	r3, r4, #2304	@ 0x900
 80047cc:	db15      	blt.n	80047fa <USB_DevInit+0xd2>
      USBx_INEP(i)->DIEPCTL = 0U;
 80047ce:	2100      	movs	r1, #0
 80047d0:	6019      	str	r1, [r3, #0]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 80047d2:	2000      	movs	r0, #0
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80047d4:	f64f 317f 	movw	r1, #64383	@ 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047d8:	3201      	adds	r2, #1
 80047da:	42aa      	cmp	r2, r5
    USBx_INEP(i)->DIEPTSIZ = 0U;
 80047dc:	6118      	str	r0, [r3, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80047de:	6099      	str	r1, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047e0:	f103 0320 	add.w	r3, r3, #32
 80047e4:	d036      	beq.n	8004854 <USB_DevInit+0x12c>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80047e6:	f8d3 c000 	ldr.w	ip, [r3]
 80047ea:	f1bc 0f00 	cmp.w	ip, #0
 80047ee:	daee      	bge.n	80047ce <USB_DevInit+0xa6>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80047f0:	f04f 4c90 	mov.w	ip, #1207959552	@ 0x48000000
 80047f4:	f8c3 c000 	str.w	ip, [r3]
 80047f8:	e7ee      	b.n	80047d8 <USB_DevInit+0xb0>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80047fa:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 80047fe:	f8c4 1900 	str.w	r1, [r4, #2304]	@ 0x900
 8004802:	e7e6      	b.n	80047d2 <USB_DevInit+0xaa>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800480a:	613b      	str	r3, [r7, #16]
  USBx->GINTMSK = 0U;
 800480c:	2200      	movs	r2, #0
  if (cfg.dma_enable == 0U)
 800480e:	f89d 301e 	ldrb.w	r3, [sp, #30]
  USBx->GINTMSK = 0U;
 8004812:	61a2      	str	r2, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004814:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004818:	6162      	str	r2, [r4, #20]
  if (cfg.dma_enable == 0U)
 800481a:	b91b      	cbnz	r3, 8004824 <USB_DevInit+0xfc>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800481c:	69a3      	ldr	r3, [r4, #24]
 800481e:	f043 0310 	orr.w	r3, r3, #16
 8004822:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004824:	69a2      	ldr	r2, [r4, #24]
 8004826:	4b2c      	ldr	r3, [pc, #176]	@ (80048d8 <USB_DevInit+0x1b0>)
 8004828:	4313      	orrs	r3, r2
  if (cfg.Sof_enable != 0U)
 800482a:	f89d 2022 	ldrb.w	r2, [sp, #34]	@ 0x22
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800482e:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8004830:	b11a      	cbz	r2, 800483a <USB_DevInit+0x112>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004832:	69a3      	ldr	r3, [r4, #24]
 8004834:	f043 0308 	orr.w	r3, r3, #8
 8004838:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800483a:	2e01      	cmp	r6, #1
 800483c:	d105      	bne.n	800484a <USB_DevInit+0x122>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800483e:	69a3      	ldr	r3, [r4, #24]
 8004840:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004844:	f043 0304 	orr.w	r3, r3, #4
 8004848:	61a3      	str	r3, [r4, #24]
}
 800484a:	4670      	mov	r0, lr
 800484c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004850:	b004      	add	sp, #16
 8004852:	4770      	bx	lr
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004854:	f8d4 2b00 	ldr.w	r2, [r4, #2816]	@ 0xb00
 8004858:	2a00      	cmp	r2, #0
 800485a:	f504 6330 	add.w	r3, r4, #2816	@ 0xb00
 800485e:	db15      	blt.n	800488c <USB_DevInit+0x164>
 8004860:	2200      	movs	r2, #0
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004862:	2100      	movs	r1, #0
 8004864:	6019      	str	r1, [r3, #0]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004866:	f04f 0c00 	mov.w	ip, #0
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800486a:	f64f 307f 	movw	r0, #64383	@ 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800486e:	3201      	adds	r2, #1
 8004870:	42aa      	cmp	r2, r5
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004872:	f8c3 c010 	str.w	ip, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004876:	6098      	str	r0, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004878:	f103 0320 	add.w	r3, r3, #32
 800487c:	d0c2      	beq.n	8004804 <USB_DevInit+0xdc>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800487e:	6819      	ldr	r1, [r3, #0]
 8004880:	2900      	cmp	r1, #0
 8004882:	daee      	bge.n	8004862 <USB_DevInit+0x13a>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004884:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 8004888:	6019      	str	r1, [r3, #0]
 800488a:	e7f0      	b.n	800486e <USB_DevInit+0x146>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800488c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004890:	f8c4 2b00 	str.w	r2, [r4, #2816]	@ 0xb00
 8004894:	2200      	movs	r2, #0
 8004896:	e7e6      	b.n	8004866 <USB_DevInit+0x13e>
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004898:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800489a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800489e:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80048a0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80048a2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80048a6:	63a3      	str	r3, [r4, #56]	@ 0x38
  USBx_PCGCCTL = 0U;
 80048a8:	2300      	movs	r3, #0
 80048aa:	f8c4 3e00 	str.w	r3, [r4, #3584]	@ 0xe00
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80048ae:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	f47f af69 	bne.w	800478a <USB_DevInit+0x62>
    if (cfg.speed == USBD_HS_SPEED)
 80048b8:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80048bc:	b923      	cbnz	r3, 80048c8 <USB_DevInit+0x1a0>
  USBx_DEVICE->DCFG |= speed;
 80048be:	f8d4 3800 	ldr.w	r3, [r4, #2048]	@ 0x800
 80048c2:	f8c4 3800 	str.w	r3, [r4, #2048]	@ 0x800
  return HAL_OK;
 80048c6:	e766      	b.n	8004796 <USB_DevInit+0x6e>
  USBx_DEVICE->DCFG |= speed;
 80048c8:	f8d4 3800 	ldr.w	r3, [r4, #2048]	@ 0x800
 80048cc:	f043 0301 	orr.w	r3, r3, #1
 80048d0:	f8c4 3800 	str.w	r3, [r4, #2048]	@ 0x800
  return HAL_OK;
 80048d4:	e75f      	b.n	8004796 <USB_DevInit+0x6e>
 80048d6:	bf00      	nop
 80048d8:	803c3800 	.word	0x803c3800

080048dc <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80048dc:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80048e0:	f013 0006 	ands.w	r0, r3, #6
 80048e4:	d004      	beq.n	80048f0 <USB_GetDevSpeed+0x14>
    speed = 0xFU;
 80048e6:	f013 0f02 	tst.w	r3, #2
 80048ea:	bf14      	ite	ne
 80048ec:	2002      	movne	r0, #2
 80048ee:	200f      	moveq	r0, #15
}
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop

080048f4 <USB_ActivateEndpoint>:
{
 80048f4:	b510      	push	{r4, lr}
  uint32_t epnum = (uint32_t)ep->num;
 80048f6:	780a      	ldrb	r2, [r1, #0]
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80048f8:	2301      	movs	r3, #1
 80048fa:	f002 0e0f 	and.w	lr, r2, #15
 80048fe:	fa03 f30e 	lsl.w	r3, r3, lr
  if (ep->is_in == 1U)
 8004902:	f891 e001 	ldrb.w	lr, [r1, #1]
 8004906:	f1be 0f01 	cmp.w	lr, #1
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800490a:	f500 6c00 	add.w	ip, r0, #2048	@ 0x800
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800490e:	eb00 1042 	add.w	r0, r0, r2, lsl #5
  if (ep->is_in == 1U)
 8004912:	d01a      	beq.n	800494a <USB_ActivateEndpoint+0x56>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004914:	f8dc 201c 	ldr.w	r2, [ip, #28]
 8004918:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 800491c:	f8cc 301c 	str.w	r3, [ip, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004920:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8004924:	041b      	lsls	r3, r3, #16
 8004926:	d40e      	bmi.n	8004946 <USB_ActivateEndpoint+0x52>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004928:	688b      	ldr	r3, [r1, #8]
 800492a:	f8d0 4b00 	ldr.w	r4, [r0, #2816]	@ 0xb00
                                    ((uint32_t)ep->type << 18) |
 800492e:	790a      	ldrb	r2, [r1, #4]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004930:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004934:	4323      	orrs	r3, r4
 8004936:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 800493a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800493e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004942:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 8004946:	2000      	movs	r0, #0
 8004948:	bd10      	pop	{r4, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800494a:	f8dc 401c 	ldr.w	r4, [ip, #28]
 800494e:	4323      	orrs	r3, r4
 8004950:	f8cc 301c 	str.w	r3, [ip, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004954:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8004958:	041c      	lsls	r4, r3, #16
 800495a:	d4f4      	bmi.n	8004946 <USB_ActivateEndpoint+0x52>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800495c:	688b      	ldr	r3, [r1, #8]
 800495e:	f8d0 4900 	ldr.w	r4, [r0, #2304]	@ 0x900
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004962:	7909      	ldrb	r1, [r1, #4]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004964:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004968:	4323      	orrs	r3, r4
 800496a:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 800496e:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
 8004972:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004976:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800497a:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
}
 800497e:	2000      	movs	r0, #0
 8004980:	bd10      	pop	{r4, pc}
 8004982:	bf00      	nop

08004984 <USB_DeactivateEndpoint>:
{
 8004984:	b410      	push	{r4}
  uint32_t epnum = (uint32_t)ep->num;
 8004986:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8004988:	7849      	ldrb	r1, [r1, #1]
 800498a:	2901      	cmp	r1, #1
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800498c:	eb00 1342 	add.w	r3, r0, r2, lsl #5
  if (ep->is_in == 1U)
 8004990:	d02c      	beq.n	80049ec <USB_DeactivateEndpoint+0x68>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004992:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 8004996:	2900      	cmp	r1, #0
 8004998:	db1b      	blt.n	80049d2 <USB_DeactivateEndpoint+0x4e>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800499a:	f8d0 483c 	ldr.w	r4, [r0, #2108]	@ 0x83c
 800499e:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 80049a2:	f002 020f 	and.w	r2, r2, #15
 80049a6:	fa01 f202 	lsl.w	r2, r1, r2
 80049aa:	ea24 0402 	bic.w	r4, r4, r2
 80049ae:	f8c0 483c 	str.w	r4, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80049b2:	f8d0 481c 	ldr.w	r4, [r0, #2076]	@ 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80049b6:	4922      	ldr	r1, [pc, #136]	@ (8004a40 <USB_DeactivateEndpoint+0xbc>)
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80049b8:	ea24 0202 	bic.w	r2, r4, r2
 80049bc:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80049c0:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
}
 80049c4:	f85d 4b04 	ldr.w	r4, [sp], #4
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80049c8:	4011      	ands	r1, r2
}
 80049ca:	2000      	movs	r0, #0
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80049cc:	f8c3 1b00 	str.w	r1, [r3, #2816]	@ 0xb00
}
 80049d0:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80049d2:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 80049d6:	f041 6100 	orr.w	r1, r1, #134217728	@ 0x8000000
 80049da:	f8c3 1b00 	str.w	r1, [r3, #2816]	@ 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80049de:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 80049e2:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80049e6:	f8c3 1b00 	str.w	r1, [r3, #2816]	@ 0xb00
 80049ea:	e7d6      	b.n	800499a <USB_DeactivateEndpoint+0x16>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80049ec:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
 80049f0:	2900      	cmp	r1, #0
 80049f2:	da0b      	bge.n	8004a0c <USB_DeactivateEndpoint+0x88>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80049f4:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
 80049f8:	f041 6100 	orr.w	r1, r1, #134217728	@ 0x8000000
 80049fc:	f8c3 1900 	str.w	r1, [r3, #2304]	@ 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004a00:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
 8004a04:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8004a08:	f8c3 1900 	str.w	r1, [r3, #2304]	@ 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004a0c:	f8d0 183c 	ldr.w	r1, [r0, #2108]	@ 0x83c
 8004a10:	f002 040f 	and.w	r4, r2, #15
 8004a14:	2201      	movs	r2, #1
 8004a16:	40a2      	lsls	r2, r4
 8004a18:	ea21 0102 	bic.w	r1, r1, r2
 8004a1c:	f8c0 183c 	str.w	r1, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004a20:	f8d0 481c 	ldr.w	r4, [r0, #2076]	@ 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004a24:	4907      	ldr	r1, [pc, #28]	@ (8004a44 <USB_DeactivateEndpoint+0xc0>)
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004a26:	ea24 0202 	bic.w	r2, r4, r2
 8004a2a:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004a2e:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
}
 8004a32:	f85d 4b04 	ldr.w	r4, [sp], #4
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004a36:	4011      	ands	r1, r2
}
 8004a38:	2000      	movs	r0, #0
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004a3a:	f8c3 1900 	str.w	r1, [r3, #2304]	@ 0x900
}
 8004a3e:	4770      	bx	lr
 8004a40:	eff37800 	.word	0xeff37800
 8004a44:	ec337800 	.word	0xec337800

08004a48 <USB_EPStartXfer>:
{
 8004a48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (ep->is_in == 1U)
 8004a4c:	784c      	ldrb	r4, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8004a4e:	780e      	ldrb	r6, [r1, #0]
    if (ep->xfer_len == 0U)
 8004a50:	690d      	ldr	r5, [r1, #16]
        if (ep->type == EP_TYPE_ISOC)
 8004a52:	f891 e004 	ldrb.w	lr, [r1, #4]
  if (ep->is_in == 1U)
 8004a56:	2c01      	cmp	r4, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a58:	eb00 1346 	add.w	r3, r0, r6, lsl #5
  if (ep->is_in == 1U)
 8004a5c:	d05b      	beq.n	8004b16 <USB_EPStartXfer+0xce>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004a5e:	f8d3 4b10 	ldr.w	r4, [r3, #2832]	@ 0xb10
 8004a62:	f36f 0412 	bfc	r4, #0, #19
 8004a66:	f8c3 4b10 	str.w	r4, [r3, #2832]	@ 0xb10
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004a6a:	f8d3 4b10 	ldr.w	r4, [r3, #2832]	@ 0xb10
 8004a6e:	f36f 44dc 	bfc	r4, #19, #10
 8004a72:	f8c3 4b10 	str.w	r4, [r3, #2832]	@ 0xb10
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004a76:	f503 6c30 	add.w	ip, r3, #2816	@ 0xb00
        ep->xfer_len = ep->maxpacket;
 8004a7a:	688c      	ldr	r4, [r1, #8]
    if (epnum == 0U)
 8004a7c:	bb56      	cbnz	r6, 8004ad4 <USB_EPStartXfer+0x8c>
      if (ep->xfer_len > 0U)
 8004a7e:	b105      	cbz	r5, 8004a82 <USB_EPStartXfer+0x3a>
        ep->xfer_len = ep->maxpacket;
 8004a80:	610c      	str	r4, [r1, #16]
      ep->xfer_size = ep->maxpacket;
 8004a82:	620c      	str	r4, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004a84:	f8dc 5010 	ldr.w	r5, [ip, #16]
 8004a88:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8004a8c:	432c      	orrs	r4, r5
 8004a8e:	f8cc 4010 	str.w	r4, [ip, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004a92:	f8dc 4010 	ldr.w	r4, [ip, #16]
    if (dma == 1U)
 8004a96:	2a01      	cmp	r2, #1
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004a98:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8004a9c:	f8cc 4010 	str.w	r4, [ip, #16]
    if (dma == 1U)
 8004aa0:	d033      	beq.n	8004b0a <USB_EPStartXfer+0xc2>
    if (ep->type == EP_TYPE_ISOC)
 8004aa2:	f1be 0f01 	cmp.w	lr, #1
 8004aa6:	d10c      	bne.n	8004ac2 <USB_EPStartXfer+0x7a>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004aa8:	f8d0 2808 	ldr.w	r2, [r0, #2056]	@ 0x808
 8004aac:	f412 7f80 	tst.w	r2, #256	@ 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004ab0:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8004ab4:	bf0c      	ite	eq
 8004ab6:	f042 5200 	orreq.w	r2, r2, #536870912	@ 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004aba:	f042 5280 	orrne.w	r2, r2, #268435456	@ 0x10000000
 8004abe:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004ac2:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8004ac6:	f042 4204 	orr.w	r2, r2, #2214592512	@ 0x84000000
 8004aca:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
}
 8004ace:	2000      	movs	r0, #0
 8004ad0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (ep->xfer_len == 0U)
 8004ad4:	2d00      	cmp	r5, #0
 8004ad6:	d0d5      	beq.n	8004a84 <USB_EPStartXfer+0x3c>
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004ad8:	4e61      	ldr	r6, [pc, #388]	@ (8004c60 <USB_EPStartXfer+0x218>)
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004ada:	4425      	add	r5, r4
 8004adc:	3d01      	subs	r5, #1
 8004ade:	fbb5 f5f4 	udiv	r5, r5, r4
 8004ae2:	b2ad      	uxth	r5, r5
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004ae4:	fb05 f404 	mul.w	r4, r5, r4
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004ae8:	ea06 45c5 	and.w	r5, r6, r5, lsl #19
 8004aec:	f8dc 6010 	ldr.w	r6, [ip, #16]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004af0:	620c      	str	r4, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004af2:	4335      	orrs	r5, r6
 8004af4:	f8cc 5010 	str.w	r5, [ip, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004af8:	f8dc 5010 	ldr.w	r5, [ip, #16]
 8004afc:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8004b00:	432c      	orrs	r4, r5
    if (dma == 1U)
 8004b02:	2a01      	cmp	r2, #1
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004b04:	f8cc 4010 	str.w	r4, [ip, #16]
    if (dma == 1U)
 8004b08:	d1cb      	bne.n	8004aa2 <USB_EPStartXfer+0x5a>
      if ((uint32_t)ep->xfer_buff != 0U)
 8004b0a:	68ca      	ldr	r2, [r1, #12]
 8004b0c:	2a00      	cmp	r2, #0
 8004b0e:	d0c8      	beq.n	8004aa2 <USB_EPStartXfer+0x5a>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004b10:	f8cc 2014 	str.w	r2, [ip, #20]
 8004b14:	e7c5      	b.n	8004aa2 <USB_EPStartXfer+0x5a>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b16:	f503 6410 	add.w	r4, r3, #2304	@ 0x900
    if (ep->xfer_len == 0U)
 8004b1a:	b38d      	cbz	r5, 8004b80 <USB_EPStartXfer+0x138>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b1c:	6927      	ldr	r7, [r4, #16]
        if (ep->xfer_len > ep->maxpacket)
 8004b1e:	f8d1 9008 	ldr.w	r9, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b22:	f36f 0712 	bfc	r7, #0, #19
 8004b26:	6127      	str	r7, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b28:	6927      	ldr	r7, [r4, #16]
 8004b2a:	f36f 47dc 	bfc	r7, #19, #10
 8004b2e:	6127      	str	r7, [r4, #16]
      if (epnum == 0U)
 8004b30:	2e00      	cmp	r6, #0
 8004b32:	d14f      	bne.n	8004bd4 <USB_EPStartXfer+0x18c>
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004b34:	6927      	ldr	r7, [r4, #16]
        if (ep->xfer_len > ep->maxpacket)
 8004b36:	45a9      	cmp	r9, r5
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004b38:	f447 2700 	orr.w	r7, r7, #524288	@ 0x80000
          ep->xfer_len = ep->maxpacket;
 8004b3c:	bf3c      	itt	cc
 8004b3e:	f8c1 9010 	strcc.w	r9, [r1, #16]
 8004b42:	464d      	movcc	r5, r9
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004b44:	6127      	str	r7, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004b46:	6927      	ldr	r7, [r4, #16]
 8004b48:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8004b4c:	433d      	orrs	r5, r7
    if (dma == 1U)
 8004b4e:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004b50:	6125      	str	r5, [r4, #16]
    if (dma == 1U)
 8004b52:	d023      	beq.n	8004b9c <USB_EPStartXfer+0x154>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b54:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
      if (ep->type != EP_TYPE_ISOC)
 8004b58:	f1be 0f01 	cmp.w	lr, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b5c:	f044 4404 	orr.w	r4, r4, #2214592512	@ 0x84000000
 8004b60:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
        if (ep->xfer_len > 0U)
 8004b64:	690c      	ldr	r4, [r1, #16]
      if (ep->type != EP_TYPE_ISOC)
 8004b66:	d058      	beq.n	8004c1a <USB_EPStartXfer+0x1d2>
        if (ep->xfer_len > 0U)
 8004b68:	2c00      	cmp	r4, #0
 8004b6a:	d0b0      	beq.n	8004ace <USB_EPStartXfer+0x86>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004b6c:	f8d0 2834 	ldr.w	r2, [r0, #2100]	@ 0x834
 8004b70:	f006 060f 	and.w	r6, r6, #15
 8004b74:	2301      	movs	r3, #1
 8004b76:	40b3      	lsls	r3, r6
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	f8c0 3834 	str.w	r3, [r0, #2100]	@ 0x834
 8004b7e:	e7a6      	b.n	8004ace <USB_EPStartXfer+0x86>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b80:	6925      	ldr	r5, [r4, #16]
 8004b82:	f36f 45dc 	bfc	r5, #19, #10
 8004b86:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004b88:	6925      	ldr	r5, [r4, #16]
 8004b8a:	f445 2500 	orr.w	r5, r5, #524288	@ 0x80000
 8004b8e:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b90:	6925      	ldr	r5, [r4, #16]
    if (dma == 1U)
 8004b92:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b94:	f36f 0512 	bfc	r5, #0, #19
 8004b98:	6125      	str	r5, [r4, #16]
    if (dma == 1U)
 8004b9a:	d1db      	bne.n	8004b54 <USB_EPStartXfer+0x10c>
      if ((uint32_t)ep->dma_addr != 0U)
 8004b9c:	69ca      	ldr	r2, [r1, #28]
 8004b9e:	b102      	cbz	r2, 8004ba2 <USB_EPStartXfer+0x15a>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004ba0:	6162      	str	r2, [r4, #20]
      if (ep->type == EP_TYPE_ISOC)
 8004ba2:	f1be 0f01 	cmp.w	lr, #1
 8004ba6:	d10c      	bne.n	8004bc2 <USB_EPStartXfer+0x17a>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ba8:	f8d0 2808 	ldr.w	r2, [r0, #2056]	@ 0x808
 8004bac:	f412 7f80 	tst.w	r2, #256	@ 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004bb0:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8004bb4:	bf0c      	ite	eq
 8004bb6:	f042 5200 	orreq.w	r2, r2, #536870912	@ 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004bba:	f042 5280 	orrne.w	r2, r2, #268435456	@ 0x10000000
 8004bbe:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004bc2:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8004bc6:	f042 4204 	orr.w	r2, r2, #2214592512	@ 0x84000000
 8004bca:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
}
 8004bce:	2000      	movs	r0, #0
 8004bd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8004bd4:	4f22      	ldr	r7, [pc, #136]	@ (8004c60 <USB_EPStartXfer+0x218>)
 8004bd6:	f8d4 8010 	ldr.w	r8, [r4, #16]
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004bda:	eb09 0c05 	add.w	ip, r9, r5
 8004bde:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004be2:	fbbc fcf9 	udiv	ip, ip, r9
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8004be6:	ea07 47cc 	and.w	r7, r7, ip, lsl #19
 8004bea:	ea47 0708 	orr.w	r7, r7, r8
        if (ep->type == EP_TYPE_ISOC)
 8004bee:	f1be 0f01 	cmp.w	lr, #1
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8004bf2:	6127      	str	r7, [r4, #16]
        if (ep->type == EP_TYPE_ISOC)
 8004bf4:	fa1f fc8c 	uxth.w	ip, ip
 8004bf8:	d1a5      	bne.n	8004b46 <USB_EPStartXfer+0xfe>
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8004bfa:	ea4f 7c4c 	mov.w	ip, ip, lsl #29
 8004bfe:	f00c 47c0 	and.w	r7, ip, #1610612736	@ 0x60000000
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004c02:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8004c06:	f02c 4cc0 	bic.w	ip, ip, #1610612736	@ 0x60000000
 8004c0a:	f8c4 c010 	str.w	ip, [r4, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8004c0e:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8004c12:	ea47 070c 	orr.w	r7, r7, ip
 8004c16:	6127      	str	r7, [r4, #16]
 8004c18:	e795      	b.n	8004b46 <USB_EPStartXfer+0xfe>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004c1a:	f8d0 5808 	ldr.w	r5, [r0, #2056]	@ 0x808
 8004c1e:	f415 7f80 	tst.w	r5, #256	@ 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004c22:	f8d3 5900 	ldr.w	r5, [r3, #2304]	@ 0x900
 8004c26:	bf0c      	ite	eq
 8004c28:	f045 5500 	orreq.w	r5, r5, #536870912	@ 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004c2c:	f045 5580 	orrne.w	r5, r5, #268435456	@ 0x10000000
 8004c30:	f8c3 5900 	str.w	r5, [r3, #2304]	@ 0x900
  if (dma == 0U)
 8004c34:	2a00      	cmp	r2, #0
 8004c36:	f47f af4a 	bne.w	8004ace <USB_EPStartXfer+0x86>
    count32b = ((uint32_t)len + 3U) / 4U;
 8004c3a:	b2a3      	uxth	r3, r4
 8004c3c:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 8004c3e:	089b      	lsrs	r3, r3, #2
 8004c40:	f43f af45 	beq.w	8004ace <USB_EPStartXfer+0x86>
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004c44:	68ca      	ldr	r2, [r1, #12]
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004c46:	eb00 3606 	add.w	r6, r0, r6, lsl #12
 8004c4a:	f506 5680 	add.w	r6, r6, #4096	@ 0x1000
 8004c4e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004c52:	f852 1b04 	ldr.w	r1, [r2], #4
 8004c56:	6031      	str	r1, [r6, #0]
    for (i = 0U; i < count32b; i++)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d1fa      	bne.n	8004c52 <USB_EPStartXfer+0x20a>
 8004c5c:	e737      	b.n	8004ace <USB_EPStartXfer+0x86>
 8004c5e:	bf00      	nop
 8004c60:	1ff80000 	.word	0x1ff80000

08004c64 <USB_EPStopXfer>:
{
 8004c64:	b410      	push	{r4}
  if (ep->is_in == 1U)
 8004c66:	784a      	ldrb	r2, [r1, #1]
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c68:	780b      	ldrb	r3, [r1, #0]
{
 8004c6a:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 8004c6c:	2100      	movs	r1, #0
  if (ep->is_in == 1U)
 8004c6e:	2a01      	cmp	r2, #1
  __IO uint32_t count = 0U;
 8004c70:	9101      	str	r1, [sp, #4]
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c72:	ea4f 1343 	mov.w	r3, r3, lsl #5
  if (ep->is_in == 1U)
 8004c76:	d023      	beq.n	8004cc0 <USB_EPStopXfer+0x5c>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c78:	f500 6030 	add.w	r0, r0, #2816	@ 0xb00
 8004c7c:	18c2      	adds	r2, r0, r3
 8004c7e:	58c1      	ldr	r1, [r0, r3]
 8004c80:	2900      	cmp	r1, #0
 8004c82:	db04      	blt.n	8004c8e <USB_EPStopXfer+0x2a>
  HAL_StatusTypeDef ret = HAL_OK;
 8004c84:	2000      	movs	r0, #0
}
 8004c86:	b003      	add	sp, #12
 8004c88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c8c:	4770      	bx	lr
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004c8e:	58c4      	ldr	r4, [r0, r3]
 8004c90:	f044 6400 	orr.w	r4, r4, #134217728	@ 0x8000000
 8004c94:	50c4      	str	r4, [r0, r3]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004c96:	58c4      	ldr	r4, [r0, r3]
 8004c98:	f044 4480 	orr.w	r4, r4, #1073741824	@ 0x40000000
 8004c9c:	50c4      	str	r4, [r0, r3]
        if (count > 10000U)
 8004c9e:	f242 7110 	movw	r1, #10000	@ 0x2710
 8004ca2:	e002      	b.n	8004caa <USB_EPStopXfer+0x46>
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004ca4:	6813      	ldr	r3, [r2, #0]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	daec      	bge.n	8004c84 <USB_EPStopXfer+0x20>
        count++;
 8004caa:	9b01      	ldr	r3, [sp, #4]
 8004cac:	3301      	adds	r3, #1
 8004cae:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 8004cb0:	9b01      	ldr	r3, [sp, #4]
 8004cb2:	428b      	cmp	r3, r1
 8004cb4:	d9f6      	bls.n	8004ca4 <USB_EPStopXfer+0x40>
          ret = HAL_ERROR;
 8004cb6:	2001      	movs	r0, #1
}
 8004cb8:	b003      	add	sp, #12
 8004cba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004cbe:	4770      	bx	lr
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004cc0:	f500 6010 	add.w	r0, r0, #2304	@ 0x900
 8004cc4:	18c2      	adds	r2, r0, r3
 8004cc6:	58c1      	ldr	r1, [r0, r3]
 8004cc8:	2900      	cmp	r1, #0
 8004cca:	dadb      	bge.n	8004c84 <USB_EPStopXfer+0x20>
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004ccc:	58c4      	ldr	r4, [r0, r3]
 8004cce:	f044 6400 	orr.w	r4, r4, #134217728	@ 0x8000000
 8004cd2:	50c4      	str	r4, [r0, r3]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004cd4:	58c4      	ldr	r4, [r0, r3]
 8004cd6:	f044 4480 	orr.w	r4, r4, #1073741824	@ 0x40000000
 8004cda:	50c4      	str	r4, [r0, r3]
        if (count > 10000U)
 8004cdc:	f242 7110 	movw	r1, #10000	@ 0x2710
 8004ce0:	e002      	b.n	8004ce8 <USB_EPStopXfer+0x84>
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004ce2:	6813      	ldr	r3, [r2, #0]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	dacd      	bge.n	8004c84 <USB_EPStopXfer+0x20>
        count++;
 8004ce8:	9b01      	ldr	r3, [sp, #4]
 8004cea:	3301      	adds	r3, #1
 8004cec:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 8004cee:	9b01      	ldr	r3, [sp, #4]
 8004cf0:	428b      	cmp	r3, r1
 8004cf2:	d9f6      	bls.n	8004ce2 <USB_EPStopXfer+0x7e>
 8004cf4:	e7df      	b.n	8004cb6 <USB_EPStopXfer+0x52>
 8004cf6:	bf00      	nop

08004cf8 <USB_WritePacket>:
{
 8004cf8:	b410      	push	{r4}
 8004cfa:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 8004cfe:	b964      	cbnz	r4, 8004d1a <USB_WritePacket+0x22>
    count32b = ((uint32_t)len + 3U) / 4U;
 8004d00:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 8004d02:	089b      	lsrs	r3, r3, #2
 8004d04:	d009      	beq.n	8004d1a <USB_WritePacket+0x22>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004d06:	3201      	adds	r2, #1
 8004d08:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 8004d0c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8004d10:	f851 2b04 	ldr.w	r2, [r1], #4
 8004d14:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 8004d16:	428b      	cmp	r3, r1
 8004d18:	d1fa      	bne.n	8004d10 <USB_WritePacket+0x18>
}
 8004d1a:	2000      	movs	r0, #0
 8004d1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d20:	4770      	bx	lr
 8004d22:	bf00      	nop

08004d24 <USB_ReadPacket>:
{
 8004d24:	b570      	push	{r4, r5, r6, lr}
  for (i = 0U; i < count32b; i++)
 8004d26:	ea5f 0e92 	movs.w	lr, r2, lsr #2
{
 8004d2a:	4605      	mov	r5, r0
  uint16_t remaining_bytes = len % 4U;
 8004d2c:	f002 0603 	and.w	r6, r2, #3
  for (i = 0U; i < count32b; i++)
 8004d30:	d01a      	beq.n	8004d68 <USB_ReadPacket+0x44>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004d32:	f500 5480 	add.w	r4, r0, #4096	@ 0x1000
  uint8_t *pDest = dest;
 8004d36:	468c      	mov	ip, r1
  for (i = 0U; i < count32b; i++)
 8004d38:	2300      	movs	r3, #0
 8004d3a:	3301      	adds	r3, #1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004d3c:	6822      	ldr	r2, [r4, #0]
 8004d3e:	f84c 2b04 	str.w	r2, [ip], #4
  for (i = 0U; i < count32b; i++)
 8004d42:	459e      	cmp	lr, r3
 8004d44:	d1f9      	bne.n	8004d3a <USB_ReadPacket+0x16>
 8004d46:	eb01 008e 	add.w	r0, r1, lr, lsl #2
  if (remaining_bytes != 0U)
 8004d4a:	b166      	cbz	r6, 8004d66 <USB_ReadPacket+0x42>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004d4c:	f505 5580 	add.w	r5, r5, #4096	@ 0x1000
 8004d50:	4406      	add	r6, r0
 8004d52:	6829      	ldr	r1, [r5, #0]
 8004d54:	2300      	movs	r3, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004d56:	fa21 f203 	lsr.w	r2, r1, r3
 8004d5a:	f800 2b01 	strb.w	r2, [r0], #1
    } while (remaining_bytes != 0U);
 8004d5e:	42b0      	cmp	r0, r6
 8004d60:	f103 0308 	add.w	r3, r3, #8
 8004d64:	d1f7      	bne.n	8004d56 <USB_ReadPacket+0x32>
}
 8004d66:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t *pDest = dest;
 8004d68:	4608      	mov	r0, r1
 8004d6a:	e7ee      	b.n	8004d4a <USB_ReadPacket+0x26>

08004d6c <USB_EPSetStall>:
  if (ep->is_in == 1U)
 8004d6c:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8004d6e:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8004d70:	2a01      	cmp	r2, #1
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004d72:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 8004d76:	d00c      	beq.n	8004d92 <USB_EPSetStall+0x26>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004d78:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
 8004d7c:	2a00      	cmp	r2, #0
 8004d7e:	db00      	blt.n	8004d82 <USB_EPSetStall+0x16>
 8004d80:	b9d3      	cbnz	r3, 8004db8 <USB_EPSetStall+0x4c>
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004d82:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8004d86:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004d8a:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 8004d8e:	2000      	movs	r0, #0
 8004d90:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004d92:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
 8004d96:	2a00      	cmp	r2, #0
 8004d98:	db06      	blt.n	8004da8 <USB_EPSetStall+0x3c>
 8004d9a:	b12b      	cbz	r3, 8004da8 <USB_EPSetStall+0x3c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004d9c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8004da0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004da4:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004da8:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8004dac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004db0:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
}
 8004db4:	2000      	movs	r0, #0
 8004db6:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004db8:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8004dbc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004dc0:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 8004dc4:	e7dd      	b.n	8004d82 <USB_EPSetStall+0x16>
 8004dc6:	bf00      	nop

08004dc8 <USB_EPClearStall>:
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004dc8:	790b      	ldrb	r3, [r1, #4]
  if (ep->is_in == 1U)
 8004dca:	784a      	ldrb	r2, [r1, #1]
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004dcc:	f891 c000 	ldrb.w	ip, [r1]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004dd0:	3b02      	subs	r3, #2
  if (ep->is_in == 1U)
 8004dd2:	2a01      	cmp	r2, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004dd4:	eb00 104c 	add.w	r0, r0, ip, lsl #5
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004dd8:	b2db      	uxtb	r3, r3
  if (ep->is_in == 1U)
 8004dda:	d011      	beq.n	8004e00 <USB_EPClearStall+0x38>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004ddc:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004de0:	2b01      	cmp	r3, #1
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004de2:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8004de6:	f8c0 2b00 	str.w	r2, [r0, #2816]	@ 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004dea:	d901      	bls.n	8004df0 <USB_EPClearStall+0x28>
}
 8004dec:	2000      	movs	r0, #0
 8004dee:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004df0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8004df4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004df8:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 8004dfc:	2000      	movs	r0, #0
 8004dfe:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004e00:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004e04:	2b01      	cmp	r3, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004e06:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8004e0a:	f8c0 2900 	str.w	r2, [r0, #2304]	@ 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004e0e:	d8ed      	bhi.n	8004dec <USB_EPClearStall+0x24>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004e10:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8004e14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e18:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
}
 8004e1c:	2000      	movs	r0, #0
 8004e1e:	4770      	bx	lr

08004e20 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004e20:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8004e24:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004e28:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004e2c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8004e30:	0109      	lsls	r1, r1, #4
 8004e32:	f401 61fe 	and.w	r1, r1, #2032	@ 0x7f0
 8004e36:	4319      	orrs	r1, r3
 8004e38:	f8c0 1800 	str.w	r1, [r0, #2048]	@ 0x800
}
 8004e3c:	2000      	movs	r0, #0
 8004e3e:	4770      	bx	lr

08004e40 <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004e40:	f8d0 2e00 	ldr.w	r2, [r0, #3584]	@ 0xe00
{
 8004e44:	4603      	mov	r3, r0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004e46:	f022 0203 	bic.w	r2, r2, #3
 8004e4a:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004e4e:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8004e52:	f500 6100 	add.w	r1, r0, #2048	@ 0x800
 8004e56:	f023 0302 	bic.w	r3, r3, #2
}
 8004e5a:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004e5c:	604b      	str	r3, [r1, #4]
}
 8004e5e:	4770      	bx	lr

08004e60 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004e60:	f8d0 2e00 	ldr.w	r2, [r0, #3584]	@ 0xe00
{
 8004e64:	4603      	mov	r3, r0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004e66:	f022 0203 	bic.w	r2, r2, #3
 8004e6a:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004e6e:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8004e72:	f500 6100 	add.w	r1, r0, #2048	@ 0x800
 8004e76:	f043 0302 	orr.w	r3, r3, #2
}
 8004e7a:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004e7c:	604b      	str	r3, [r1, #4]
}
 8004e7e:	4770      	bx	lr

08004e80 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8004e80:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8004e82:	6980      	ldr	r0, [r0, #24]
}
 8004e84:	4010      	ands	r0, r2
 8004e86:	4770      	bx	lr

08004e88 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8004e88:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 8004e8c:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004e90:	69c0      	ldr	r0, [r0, #28]
 8004e92:	4018      	ands	r0, r3
}
 8004e94:	0c00      	lsrs	r0, r0, #16
 8004e96:	4770      	bx	lr

08004e98 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8004e98:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 8004e9c:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004ea0:	69c0      	ldr	r0, [r0, #28]
 8004ea2:	4018      	ands	r0, r3
}
 8004ea4:	b280      	uxth	r0, r0
 8004ea6:	4770      	bx	lr

08004ea8 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004ea8:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004eac:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004eb0:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	@ 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004eb4:	6940      	ldr	r0, [r0, #20]
}
 8004eb6:	4010      	ands	r0, r2
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop

08004ebc <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 8004ebc:	f8d0 2810 	ldr.w	r2, [r0, #2064]	@ 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004ec0:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004ec4:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004ec8:	f001 010f 	and.w	r1, r1, #15
 8004ecc:	40cb      	lsrs	r3, r1
 8004ece:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004ed0:	f8d0 0908 	ldr.w	r0, [r0, #2312]	@ 0x908
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	4313      	orrs	r3, r2
}
 8004ed8:	4018      	ands	r0, r3
 8004eda:	4770      	bx	lr

08004edc <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8004edc:	6940      	ldr	r0, [r0, #20]
}
 8004ede:	f000 0001 	and.w	r0, r0, #1
 8004ee2:	4770      	bx	lr

08004ee4 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004ee4:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
{
 8004ee8:	4603      	mov	r3, r0
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004eea:	f36f 020a 	bfc	r2, #0, #11
 8004eee:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004ef2:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8004ef6:	f500 6100 	add.w	r1, r0, #2048	@ 0x800
 8004efa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
}
 8004efe:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004f00:	604b      	str	r3, [r1, #4]
}
 8004f02:	4770      	bx	lr

08004f04 <USB_EP0_OutStart>:
{
 8004f04:	b430      	push	{r4, r5}
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004f06:	6c05      	ldr	r5, [r0, #64]	@ 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004f08:	4c11      	ldr	r4, [pc, #68]	@ (8004f50 <USB_EP0_OutStart+0x4c>)
 8004f0a:	42a5      	cmp	r5, r4
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f0c:	f500 6330 	add.w	r3, r0, #2816	@ 0xb00
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004f10:	d903      	bls.n	8004f1a <USB_EP0_OutStart+0x16>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f12:	f8d0 4b00 	ldr.w	r4, [r0, #2816]	@ 0xb00
 8004f16:	2c00      	cmp	r4, #0
 8004f18:	db16      	blt.n	8004f48 <USB_EP0_OutStart+0x44>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004f1a:	2400      	movs	r4, #0
 8004f1c:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004f1e:	691c      	ldr	r4, [r3, #16]
 8004f20:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8004f24:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004f26:	691c      	ldr	r4, [r3, #16]
 8004f28:	f044 0418 	orr.w	r4, r4, #24
 8004f2c:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004f2e:	691c      	ldr	r4, [r3, #16]
  if (dma == 1U)
 8004f30:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004f32:	f044 44c0 	orr.w	r4, r4, #1610612736	@ 0x60000000
 8004f36:	611c      	str	r4, [r3, #16]
  if (dma == 1U)
 8004f38:	d106      	bne.n	8004f48 <USB_EP0_OutStart+0x44>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004f3a:	615a      	str	r2, [r3, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004f3c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8004f40:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8004f44:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 8004f48:	2000      	movs	r0, #0
 8004f4a:	bc30      	pop	{r4, r5}
 8004f4c:	4770      	bx	lr
 8004f4e:	bf00      	nop
 8004f50:	4f54300a 	.word	0x4f54300a

08004f54 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8004f54:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  USBD_COMPOSITE_Mount_Class();
 8004f56:	f000 fdd3 	bl	8005b00 <USBD_COMPOSITE_Mount_Class>
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_HS) != USBD_OK)
  {
    Error_Handler();
  }
#else
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_FS) != USBD_OK)
 8004f5a:	491e      	ldr	r1, [pc, #120]	@ (8004fd4 <MX_USB_DEVICE_Init+0x80>)
 8004f5c:	481e      	ldr	r0, [pc, #120]	@ (8004fd8 <MX_USB_DEVICE_Init+0x84>)
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f001 f804 	bl	8005f6c <USBD_Init>
 8004f64:	b998      	cbnz	r0, 8004f8e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
  }
#endif
  if (USBD_RegisterClass(&hUsbDevice, &USBD_COMPOSITE) != USBD_OK)
 8004f66:	491d      	ldr	r1, [pc, #116]	@ (8004fdc <MX_USB_DEVICE_Init+0x88>)
 8004f68:	481b      	ldr	r0, [pc, #108]	@ (8004fd8 <MX_USB_DEVICE_Init+0x84>)
 8004f6a:	f001 f811 	bl	8005f90 <USBD_RegisterClass>
 8004f6e:	b9b0      	cbnz	r0, 8004f9e <MX_USB_DEVICE_Init+0x4a>
  {
    Error_Handler();
  }
#if (USBD_USE_CDC_ACM == 1)
  if (USBD_CDC_ACM_RegisterInterface(&hUsbDevice, &USBD_CDC_ACM_fops) != USBD_OK)
 8004f70:	491b      	ldr	r1, [pc, #108]	@ (8004fe0 <MX_USB_DEVICE_Init+0x8c>)
 8004f72:	4819      	ldr	r0, [pc, #100]	@ (8004fd8 <MX_USB_DEVICE_Init+0x84>)
 8004f74:	f000 fc2c 	bl	80057d0 <USBD_CDC_ACM_RegisterInterface>
 8004f78:	b9c8      	cbnz	r0, 8004fae <MX_USB_DEVICE_Init+0x5a>
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDevice, &USBD_CustomHID_fops) != USBD_OK)
 8004f7a:	491a      	ldr	r1, [pc, #104]	@ (8004fe4 <MX_USB_DEVICE_Init+0x90>)
 8004f7c:	4816      	ldr	r0, [pc, #88]	@ (8004fd8 <MX_USB_DEVICE_Init+0x84>)
 8004f7e:	f000 ffd3 	bl	8005f28 <USBD_CUSTOM_HID_RegisterInterface>
 8004f82:	b9e0      	cbnz	r0, 8004fbe <MX_USB_DEVICE_Init+0x6a>
  if (USBD_PRNT_RegisterInterface(&hUsbDevice, &USBD_PRNT_fops) != USBD_OK)
  {
    Error_Handler();
  }
#endif
  if (USBD_Start(&hUsbDevice) != USBD_OK)
 8004f84:	4814      	ldr	r0, [pc, #80]	@ (8004fd8 <MX_USB_DEVICE_Init+0x84>)
 8004f86:	f001 f81f 	bl	8005fc8 <USBD_Start>
 8004f8a:	b9f8      	cbnz	r0, 8004fcc <MX_USB_DEVICE_Init+0x78>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8004f8c:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004f8e:	f7fb fd23 	bl	80009d8 <Error_Handler>
  if (USBD_RegisterClass(&hUsbDevice, &USBD_COMPOSITE) != USBD_OK)
 8004f92:	4912      	ldr	r1, [pc, #72]	@ (8004fdc <MX_USB_DEVICE_Init+0x88>)
 8004f94:	4810      	ldr	r0, [pc, #64]	@ (8004fd8 <MX_USB_DEVICE_Init+0x84>)
 8004f96:	f000 fffb 	bl	8005f90 <USBD_RegisterClass>
 8004f9a:	2800      	cmp	r0, #0
 8004f9c:	d0e8      	beq.n	8004f70 <MX_USB_DEVICE_Init+0x1c>
    Error_Handler();
 8004f9e:	f7fb fd1b 	bl	80009d8 <Error_Handler>
  if (USBD_CDC_ACM_RegisterInterface(&hUsbDevice, &USBD_CDC_ACM_fops) != USBD_OK)
 8004fa2:	490f      	ldr	r1, [pc, #60]	@ (8004fe0 <MX_USB_DEVICE_Init+0x8c>)
 8004fa4:	480c      	ldr	r0, [pc, #48]	@ (8004fd8 <MX_USB_DEVICE_Init+0x84>)
 8004fa6:	f000 fc13 	bl	80057d0 <USBD_CDC_ACM_RegisterInterface>
 8004faa:	2800      	cmp	r0, #0
 8004fac:	d0e5      	beq.n	8004f7a <MX_USB_DEVICE_Init+0x26>
    Error_Handler();
 8004fae:	f7fb fd13 	bl	80009d8 <Error_Handler>
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDevice, &USBD_CustomHID_fops) != USBD_OK)
 8004fb2:	490c      	ldr	r1, [pc, #48]	@ (8004fe4 <MX_USB_DEVICE_Init+0x90>)
 8004fb4:	4808      	ldr	r0, [pc, #32]	@ (8004fd8 <MX_USB_DEVICE_Init+0x84>)
 8004fb6:	f000 ffb7 	bl	8005f28 <USBD_CUSTOM_HID_RegisterInterface>
 8004fba:	2800      	cmp	r0, #0
 8004fbc:	d0e2      	beq.n	8004f84 <MX_USB_DEVICE_Init+0x30>
    Error_Handler();
 8004fbe:	f7fb fd0b 	bl	80009d8 <Error_Handler>
  if (USBD_Start(&hUsbDevice) != USBD_OK)
 8004fc2:	4805      	ldr	r0, [pc, #20]	@ (8004fd8 <MX_USB_DEVICE_Init+0x84>)
 8004fc4:	f001 f800 	bl	8005fc8 <USBD_Start>
 8004fc8:	2800      	cmp	r0, #0
 8004fca:	d0df      	beq.n	8004f8c <MX_USB_DEVICE_Init+0x38>
}
 8004fcc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8004fd0:	f7fb bd02 	b.w	80009d8 <Error_Handler>
 8004fd4:	20000060 	.word	0x20000060
 8004fd8:	20008b64 	.word	0x20008b64
 8004fdc:	2000019c 	.word	0x2000019c
 8004fe0:	20000018 	.word	0x20000018
 8004fe4:	2000007c 	.word	0x2000007c

08004fe8 <CDC_TransmitCplt>:
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
  return (USBD_OK);
}
 8004fe8:	2000      	movs	r0, #0
 8004fea:	4770      	bx	lr

08004fec <CDC_Receive>:
{
 8004fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  for (uint32_t i = 0; i < *Len; i++)
 8004fee:	6813      	ldr	r3, [r2, #0]
{
 8004ff0:	4617      	mov	r7, r2
 8004ff2:	4606      	mov	r6, r0
 8004ff4:	460a      	mov	r2, r1
  for (uint32_t i = 0; i < *Len; i++)
 8004ff6:	b1db      	cbz	r3, 8005030 <CDC_Receive+0x44>
 8004ff8:	4812      	ldr	r0, [pc, #72]	@ (8005044 <CDC_Receive+0x58>)
 8004ffa:	4913      	ldr	r1, [pc, #76]	@ (8005048 <CDC_Receive+0x5c>)
 8004ffc:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
    CDC_RX_Buffer[cdc_ch][CDC_RX_WriteIndex[cdc_ch]++] = Buf[i];
 8005000:	eb01 3106 	add.w	r1, r1, r6, lsl #12
 8005004:	f102 3cff 	add.w	ip, r2, #4294967295
 8005008:	1c65      	adds	r5, r4, #1
 800500a:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
      CDC_RX_WriteIndex[cdc_ch] = 0;
 800500e:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8005012:	4663      	mov	r3, ip
    CDC_RX_Buffer[cdc_ch][CDC_RX_WriteIndex[cdc_ch]++] = Buf[i];
 8005014:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 8005018:	f801 e004 	strb.w	lr, [r1, r4]
      CDC_RX_WriteIndex[cdc_ch] = 0;
 800501c:	bf34      	ite	cc
 800501e:	462c      	movcc	r4, r5
 8005020:	2400      	movcs	r4, #0
 8005022:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
  for (uint32_t i = 0; i < *Len; i++)
 8005026:	683d      	ldr	r5, [r7, #0]
 8005028:	3302      	adds	r3, #2
 800502a:	1a9b      	subs	r3, r3, r2
 800502c:	42ab      	cmp	r3, r5
 800502e:	d3eb      	bcc.n	8005008 <CDC_Receive+0x1c>
  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, Buf);
 8005030:	4906      	ldr	r1, [pc, #24]	@ (800504c <CDC_Receive+0x60>)
 8005032:	4630      	mov	r0, r6
 8005034:	f000 fbe2 	bl	80057fc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(cdc_ch, &hUsbDevice);
 8005038:	4904      	ldr	r1, [pc, #16]	@ (800504c <CDC_Receive+0x60>)
 800503a:	4630      	mov	r0, r6
 800503c:	f000 fc10 	bl	8005860 <USBD_CDC_ReceivePacket>
}
 8005040:	2000      	movs	r0, #0
 8005042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005044:	20008e88 	.word	0x20008e88
 8005048:	20008e8c 	.word	0x20008e8c
 800504c:	20008b64 	.word	0x20008b64

08005050 <CDC_DeInit>:
{
 8005050:	b508      	push	{r3, lr}
  UART_HandleTypeDef *handle = NULL;
 8005052:	4b0b      	ldr	r3, [pc, #44]	@ (8005080 <CDC_DeInit+0x30>)
 8005054:	2800      	cmp	r0, #0
    if (HAL_UART_DeInit(CDC_CH_To_UART_Handle(cdc_ch)) != HAL_OK)
 8005056:	bf0c      	ite	eq
 8005058:	4618      	moveq	r0, r3
 800505a:	2000      	movne	r0, #0
 800505c:	f7fe ff28 	bl	8003eb0 <HAL_UART_DeInit>
 8005060:	b958      	cbnz	r0, 800507a <CDC_DeInit+0x2a>
    if ((HAL_TIM_Base_Stop_IT(&htim1) != HAL_OK )||(HAL_TIM_Base_Stop_IT(&htim2) != HAL_OK ))
 8005062:	4808      	ldr	r0, [pc, #32]	@ (8005084 <CDC_DeInit+0x34>)
 8005064:	f7fe fc14 	bl	8003890 <HAL_TIM_Base_Stop_IT>
 8005068:	b918      	cbnz	r0, 8005072 <CDC_DeInit+0x22>
 800506a:	4807      	ldr	r0, [pc, #28]	@ (8005088 <CDC_DeInit+0x38>)
 800506c:	f7fe fc10 	bl	8003890 <HAL_TIM_Base_Stop_IT>
 8005070:	b108      	cbz	r0, 8005076 <CDC_DeInit+0x26>
          Error_Handler();
 8005072:	f7fb fcb1 	bl	80009d8 <Error_Handler>
}
 8005076:	2000      	movs	r0, #0
 8005078:	bd08      	pop	{r3, pc}
      Error_Handler();
 800507a:	f7fb fcad 	bl	80009d8 <Error_Handler>
 800507e:	e7f0      	b.n	8005062 <CDC_DeInit+0x12>
 8005080:	200045e8 	.word	0x200045e8
 8005084:	200044e0 	.word	0x200044e0
 8005088:	20004498 	.word	0x20004498

0800508c <CDC_Init>:
  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, RX_Buffer[cdc_ch]);
 800508c:	4a09      	ldr	r2, [pc, #36]	@ (80050b4 <CDC_Init+0x28>)
 800508e:	490a      	ldr	r1, [pc, #40]	@ (80050b8 <CDC_Init+0x2c>)
{
 8005090:	b508      	push	{r3, lr}
  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, RX_Buffer[cdc_ch]);
 8005092:	eb02 1280 	add.w	r2, r2, r0, lsl #6
 8005096:	f000 fbb1 	bl	80057fc <USBD_CDC_SetRxBuffer>
    if ((HAL_TIM_Base_Start_IT(&htim1) != HAL_OK )||(HAL_TIM_Base_Start_IT(&htim2) != HAL_OK ))
 800509a:	4808      	ldr	r0, [pc, #32]	@ (80050bc <CDC_Init+0x30>)
 800509c:	f7fe fbbe 	bl	800381c <HAL_TIM_Base_Start_IT>
 80050a0:	b918      	cbnz	r0, 80050aa <CDC_Init+0x1e>
 80050a2:	4807      	ldr	r0, [pc, #28]	@ (80050c0 <CDC_Init+0x34>)
 80050a4:	f7fe fbba 	bl	800381c <HAL_TIM_Base_Start_IT>
 80050a8:	b108      	cbz	r0, 80050ae <CDC_Init+0x22>
      Error_Handler();
 80050aa:	f7fb fc95 	bl	80009d8 <Error_Handler>
}
 80050ae:	2000      	movs	r0, #0
 80050b0:	bd08      	pop	{r3, pc}
 80050b2:	bf00      	nop
 80050b4:	20009edc 	.word	0x20009edc
 80050b8:	20008b64 	.word	0x20008b64
 80050bc:	200044e0 	.word	0x200044e0
 80050c0:	20004498 	.word	0x20004498

080050c4 <Change_UART_Setting>:
{
 80050c4:	b530      	push	{r4, r5, lr}
  UART_HandleTypeDef *handle = NULL;
 80050c6:	1e05      	subs	r5, r0, #0
 80050c8:	4c36      	ldr	r4, [pc, #216]	@ (80051a4 <Change_UART_Setting+0xe0>)
 80050ca:	bf18      	it	ne
 80050cc:	2400      	movne	r4, #0
{
 80050ce:	b085      	sub	sp, #20
  if (HAL_UART_DeInit(handle) != HAL_OK)
 80050d0:	4620      	mov	r0, r4
 80050d2:	f7fe feed 	bl	8003eb0 <HAL_UART_DeInit>
 80050d6:	2800      	cmp	r0, #0
 80050d8:	d14c      	bne.n	8005174 <Change_UART_Setting+0xb0>
  switch (Line_Coding[cdc_ch].format)
 80050da:	4a33      	ldr	r2, [pc, #204]	@ (80051a8 <Change_UART_Setting+0xe4>)
 80050dc:	eb02 01c5 	add.w	r1, r2, r5, lsl #3
 80050e0:	00e8      	lsls	r0, r5, #3
 80050e2:	790b      	ldrb	r3, [r1, #4]
  switch (Line_Coding[cdc_ch].paritytype)
 80050e4:	7949      	ldrb	r1, [r1, #5]
  switch (Line_Coding[cdc_ch].format)
 80050e6:	f1a3 0302 	sub.w	r3, r3, #2
 80050ea:	fab3 f383 	clz	r3, r3
 80050ee:	095b      	lsrs	r3, r3, #5
 80050f0:	035b      	lsls	r3, r3, #13
  switch (Line_Coding[cdc_ch].paritytype)
 80050f2:	2901      	cmp	r1, #1
    handle->Init.StopBits = UART_STOPBITS_1;
 80050f4:	60e3      	str	r3, [r4, #12]
  switch (Line_Coding[cdc_ch].paritytype)
 80050f6:	d052      	beq.n	800519e <Change_UART_Setting+0xda>
 80050f8:	2902      	cmp	r1, #2
 80050fa:	d044      	beq.n	8005186 <Change_UART_Setting+0xc2>
    handle->Init.Parity = UART_PARITY_NONE;
 80050fc:	2300      	movs	r3, #0
 80050fe:	6123      	str	r3, [r4, #16]
    handle = &huart5;
 8005100:	2100      	movs	r1, #0
  if (Line_Coding[cdc_ch].bitrate == 0)
 8005102:	f852 3035 	ldr.w	r3, [r2, r5, lsl #3]
    handle->Init.WordLength = UART_WORDLENGTH_8B;
 8005106:	60a1      	str	r1, [r4, #8]
  if (Line_Coding[cdc_ch].bitrate == 0)
 8005108:	b91b      	cbnz	r3, 8005112 <Change_UART_Setting+0x4e>
    Line_Coding[cdc_ch].bitrate = 115200;
 800510a:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800510e:	f842 3035 	str.w	r3, [r2, r5, lsl #3]
  handle->Init.Mode = UART_MODE_TX_RX;
 8005112:	2200      	movs	r2, #0
 8005114:	210c      	movs	r1, #12
 8005116:	e9c4 1205 	strd	r1, r2, [r4, #20]
  handle->Init.BaudRate = Line_Coding[cdc_ch].bitrate;
 800511a:	6063      	str	r3, [r4, #4]
  handle->Init.OverSampling = UART_OVERSAMPLING_16;
 800511c:	61e2      	str	r2, [r4, #28]
  if (HAL_UART_Init(handle) != HAL_OK)
 800511e:	4620      	mov	r0, r4
 8005120:	f7fe fe94 	bl	8003e4c <HAL_UART_Init>
 8005124:	2800      	cmp	r0, #0
 8005126:	d12b      	bne.n	8005180 <Change_UART_Setting+0xbc>
  if (HAL_UART_Receive_IT(handle, TX_Buffer[cdc_ch], 1) != HAL_OK)
 8005128:	4920      	ldr	r1, [pc, #128]	@ (80051ac <Change_UART_Setting+0xe8>)
 800512a:	2201      	movs	r2, #1
 800512c:	eb01 1185 	add.w	r1, r1, r5, lsl #6
 8005130:	4620      	mov	r0, r4
 8005132:	f7fe ff47 	bl	8003fc4 <HAL_UART_Receive_IT>
 8005136:	bb00      	cbnz	r0, 800517a <Change_UART_Setting+0xb6>
  __HAL_UART_CLEAR_OREFLAG(handle);
 8005138:	6823      	ldr	r3, [r4, #0]
 800513a:	2200      	movs	r2, #0
 800513c:	9201      	str	r2, [sp, #4]
 800513e:	6819      	ldr	r1, [r3, #0]
 8005140:	9101      	str	r1, [sp, #4]
 8005142:	6859      	ldr	r1, [r3, #4]
 8005144:	9101      	str	r1, [sp, #4]
 8005146:	9901      	ldr	r1, [sp, #4]
  __HAL_UART_CLEAR_NEFLAG(handle);
 8005148:	9202      	str	r2, [sp, #8]
 800514a:	6819      	ldr	r1, [r3, #0]
 800514c:	9102      	str	r1, [sp, #8]
 800514e:	6859      	ldr	r1, [r3, #4]
 8005150:	9102      	str	r1, [sp, #8]
 8005152:	9902      	ldr	r1, [sp, #8]
  __HAL_UART_CLEAR_FEFLAG(handle);
 8005154:	9203      	str	r2, [sp, #12]
 8005156:	6819      	ldr	r1, [r3, #0]
 8005158:	9103      	str	r1, [sp, #12]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	9303      	str	r3, [sp, #12]
 800515e:	9b03      	ldr	r3, [sp, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005160:	f3bf 8f4f 	dsb	sy
  Write_Index[cdc_ch] = 0;
 8005164:	4912      	ldr	r1, [pc, #72]	@ (80051b0 <Change_UART_Setting+0xec>)
  Read_Index[cdc_ch] = 0;
 8005166:	4b13      	ldr	r3, [pc, #76]	@ (80051b4 <Change_UART_Setting+0xf0>)
  Write_Index[cdc_ch] = 0;
 8005168:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
  Read_Index[cdc_ch] = 0;
 800516c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
}
 8005170:	b005      	add	sp, #20
 8005172:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8005174:	f7fb fc30 	bl	80009d8 <Error_Handler>
 8005178:	e7af      	b.n	80050da <Change_UART_Setting+0x16>
    Error_Handler();
 800517a:	f7fb fc2d 	bl	80009d8 <Error_Handler>
 800517e:	e7db      	b.n	8005138 <Change_UART_Setting+0x74>
    Error_Handler();
 8005180:	f7fb fc2a 	bl	80009d8 <Error_Handler>
 8005184:	e7d0      	b.n	8005128 <Change_UART_Setting+0x64>
  switch (Line_Coding[cdc_ch].paritytype)
 8005186:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  switch (Line_Coding[cdc_ch].datatype)
 800518a:	4410      	add	r0, r2
    handle->Init.Parity = UART_PARITY_EVEN;
 800518c:	6123      	str	r3, [r4, #16]
  switch (Line_Coding[cdc_ch].datatype)
 800518e:	7983      	ldrb	r3, [r0, #6]
 8005190:	2b07      	cmp	r3, #7
 8005192:	d0b5      	beq.n	8005100 <Change_UART_Setting+0x3c>
 8005194:	2b08      	cmp	r3, #8
 8005196:	d1b3      	bne.n	8005100 <Change_UART_Setting+0x3c>
 8005198:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800519c:	e7b1      	b.n	8005102 <Change_UART_Setting+0x3e>
  switch (Line_Coding[cdc_ch].paritytype)
 800519e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80051a2:	e7f2      	b.n	800518a <Change_UART_Setting+0xc6>
 80051a4:	200045e8 	.word	0x200045e8
 80051a8:	20009e94 	.word	0x20009e94
 80051ac:	20009e9c 	.word	0x20009e9c
 80051b0:	20009e90 	.word	0x20009e90
 80051b4:	20009e8c 	.word	0x20009e8c

080051b8 <CDC_Control>:
  switch (cmd)
 80051b8:	2920      	cmp	r1, #32
{
 80051ba:	b510      	push	{r4, lr}
 80051bc:	4603      	mov	r3, r0
  switch (cmd)
 80051be:	d021      	beq.n	8005204 <CDC_Control+0x4c>
 80051c0:	2921      	cmp	r1, #33	@ 0x21
 80051c2:	d001      	beq.n	80051c8 <CDC_Control+0x10>
}
 80051c4:	2000      	movs	r0, #0
 80051c6:	bd10      	pop	{r4, pc}
    pbuf[0] = (uint8_t)(Line_Coding[cdc_ch].bitrate);
 80051c8:	4916      	ldr	r1, [pc, #88]	@ (8005224 <CDC_Control+0x6c>)
 80051ca:	f851 0030 	ldr.w	r0, [r1, r0, lsl #3]
 80051ce:	7010      	strb	r0, [r2, #0]
    pbuf[1] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 8);
 80051d0:	f851 4033 	ldr.w	r4, [r1, r3, lsl #3]
 80051d4:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 80051d8:	f882 c001 	strb.w	ip, [r2, #1]
    pbuf[2] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 16);
 80051dc:	f851 4033 	ldr.w	r4, [r1, r3, lsl #3]
 80051e0:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80051e4:	f882 c002 	strb.w	ip, [r2, #2]
    pbuf[4] = Line_Coding[cdc_ch].format;
 80051e8:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
    pbuf[3] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 24);
 80051ec:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 80051f0:	0e1b      	lsrs	r3, r3, #24
 80051f2:	70d3      	strb	r3, [r2, #3]
    pbuf[4] = Line_Coding[cdc_ch].format;
 80051f4:	7903      	ldrb	r3, [r0, #4]
 80051f6:	7113      	strb	r3, [r2, #4]
    pbuf[5] = Line_Coding[cdc_ch].paritytype;
 80051f8:	7943      	ldrb	r3, [r0, #5]
 80051fa:	7153      	strb	r3, [r2, #5]
    pbuf[6] = Line_Coding[cdc_ch].datatype;
 80051fc:	7983      	ldrb	r3, [r0, #6]
 80051fe:	7193      	strb	r3, [r2, #6]
}
 8005200:	2000      	movs	r0, #0
 8005202:	bd10      	pop	{r4, pc}
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8005204:	4907      	ldr	r1, [pc, #28]	@ (8005224 <CDC_Control+0x6c>)
 8005206:	6814      	ldr	r4, [r2, #0]
 8005208:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
    Line_Coding[cdc_ch].format = pbuf[4];
 800520c:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
 8005210:	7911      	ldrb	r1, [r2, #4]
 8005212:	7119      	strb	r1, [r3, #4]
    Line_Coding[cdc_ch].paritytype = pbuf[5];
 8005214:	7951      	ldrb	r1, [r2, #5]
 8005216:	7159      	strb	r1, [r3, #5]
    Line_Coding[cdc_ch].datatype = pbuf[6];
 8005218:	7992      	ldrb	r2, [r2, #6]
 800521a:	719a      	strb	r2, [r3, #6]
    Change_UART_Setting(cdc_ch);
 800521c:	f7ff ff52 	bl	80050c4 <Change_UART_Setting>
}
 8005220:	2000      	movs	r0, #0
 8005222:	bd10      	pop	{r4, pc}
 8005224:	20009e94 	.word	0x20009e94

08005228 <HAL_UART_TxCpltCallback>:
{
  uint8_t ch = UART_Handle_TO_CDC_CH(huart);
  if (ch >= NUMBER_OF_CDC) return;

  // Cập nhật ReadIndex sau khi truyền xong
  if (CDC_RX_ReadIndex[ch] > CDC_RX_WriteIndex[ch])
 8005228:	4a05      	ldr	r2, [pc, #20]	@ (8005240 <HAL_UART_TxCpltCallback+0x18>)
 800522a:	4b06      	ldr	r3, [pc, #24]	@ (8005244 <HAL_UART_TxCpltCallback+0x1c>)
 800522c:	6810      	ldr	r0, [r2, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
  else
  {
    CDC_RX_ReadIndex[ch] = CDC_RX_WriteIndex[ch];
  }

  uart_tx_busy[ch] = 0;
 8005230:	4905      	ldr	r1, [pc, #20]	@ (8005248 <HAL_UART_TxCpltCallback+0x20>)
    CDC_RX_ReadIndex[ch] = 0;
 8005232:	4298      	cmp	r0, r3
 8005234:	bf88      	it	hi
 8005236:	2300      	movhi	r3, #0
  uart_tx_busy[ch] = 0;
 8005238:	2000      	movs	r0, #0
 800523a:	6013      	str	r3, [r2, #0]
 800523c:	7008      	strb	r0, [r1, #0]
}
 800523e:	4770      	bx	lr
 8005240:	20008e84 	.word	0x20008e84
 8005244:	20008e88 	.word	0x20008e88
 8005248:	20008e80 	.word	0x20008e80

0800524c <ProcessCDC_RX>:

void ProcessCDC_RX(void) {
 800524c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    for (uint8_t i = 0; i < NUMBER_OF_CDC; i++) {
        if (CDC_RX_ReadIndex[i] != CDC_RX_WriteIndex[i]) {
 8005250:	4d12      	ldr	r5, [pc, #72]	@ (800529c <ProcessCDC_RX+0x50>)
 8005252:	f8df 8054 	ldr.w	r8, [pc, #84]	@ 80052a8 <ProcessCDC_RX+0x5c>
 8005256:	6829      	ldr	r1, [r5, #0]
                                (CDC_RX_BUFFER_SIZE - CDC_RX_ReadIndex[i]) :
                                (CDC_RX_WriteIndex[i] - CDC_RX_ReadIndex[i]);

            if (buffsize > 64) buffsize = 64;

            HAL_UART_Transmit(CDC_CH_To_UART_Handle(i), &CDC_RX_Buffer[i][buffptr], buffsize, HAL_MAX_DELAY);
 8005258:	4f11      	ldr	r7, [pc, #68]	@ (80052a0 <ProcessCDC_RX+0x54>)
 800525a:	4e12      	ldr	r6, [pc, #72]	@ (80052a4 <ProcessCDC_RX+0x58>)
    for (uint8_t i = 0; i < NUMBER_OF_CDC; i++) {
 800525c:	2300      	movs	r3, #0
        if (CDC_RX_ReadIndex[i] != CDC_RX_WriteIndex[i]) {
 800525e:	f8d8 4000 	ldr.w	r4, [r8]
    for (uint8_t i = 0; i < NUMBER_OF_CDC; i++) {
 8005262:	b9ab      	cbnz	r3, 8005290 <ProcessCDC_RX+0x44>
        if (CDC_RX_ReadIndex[i] != CDC_RX_WriteIndex[i]) {
 8005264:	428c      	cmp	r4, r1
 8005266:	d013      	beq.n	8005290 <ProcessCDC_RX+0x44>
                                (CDC_RX_BUFFER_SIZE - CDC_RX_ReadIndex[i]) :
 8005268:	bf2c      	ite	cs
 800526a:	1a64      	subcs	r4, r4, r1
 800526c:	f5c1 5480 	rsbcc	r4, r1, #4096	@ 0x1000
            if (buffsize > 64) buffsize = 64;
 8005270:	2c40      	cmp	r4, #64	@ 0x40
 8005272:	bf28      	it	cs
 8005274:	2440      	movcs	r4, #64	@ 0x40
            HAL_UART_Transmit(CDC_CH_To_UART_Handle(i), &CDC_RX_Buffer[i][buffptr], buffsize, HAL_MAX_DELAY);
 8005276:	f04f 33ff 	mov.w	r3, #4294967295
 800527a:	b2a2      	uxth	r2, r4
 800527c:	4439      	add	r1, r7
 800527e:	4630      	mov	r0, r6
 8005280:	f7fe fe32 	bl	8003ee8 <HAL_UART_Transmit>

            CDC_RX_ReadIndex[i] += buffsize;
 8005284:	682b      	ldr	r3, [r5, #0]
 8005286:	441c      	add	r4, r3
            if (CDC_RX_ReadIndex[i] >= CDC_RX_BUFFER_SIZE)
 8005288:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
 800528c:	d202      	bcs.n	8005294 <ProcessCDC_RX+0x48>
            CDC_RX_ReadIndex[i] += buffsize;
 800528e:	602c      	str	r4, [r5, #0]
                CDC_RX_ReadIndex[i] = 0;
        }
    }
}
 8005290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                CDC_RX_ReadIndex[i] = 0;
 8005294:	2100      	movs	r1, #0
 8005296:	6029      	str	r1, [r5, #0]
    for (uint8_t i = 0; i < NUMBER_OF_CDC; i++) {
 8005298:	2301      	movs	r3, #1
 800529a:	e7e0      	b.n	800525e <ProcessCDC_RX+0x12>
 800529c:	20008e84 	.word	0x20008e84
 80052a0:	20008e8c 	.word	0x20008e8c
 80052a4:	200045e8 	.word	0x200045e8
 80052a8:	20008e88 	.word	0x20008e88

080052ac <ProcessCDC_TX>:

void ProcessCDC_TX(void) {
 80052ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    for (uint8_t i = 0; i < NUMBER_OF_CDC; i++) {
        if (Read_Index[i] != Write_Index[i]) {
 80052b0:	4f13      	ldr	r7, [pc, #76]	@ (8005300 <ProcessCDC_TX+0x54>)
 80052b2:	f8df 8058 	ldr.w	r8, [pc, #88]	@ 800530c <ProcessCDC_TX+0x60>
 80052b6:	683a      	ldr	r2, [r7, #0]
            uint32_t buffptr = Read_Index[i];
            uint32_t buffsize = (Read_Index[i] > Write_Index[i]) ?
                                (APP_TX_DATA_SIZE - Read_Index[i]) :
                                (Write_Index[i] - Read_Index[i]);

            USBD_CDC_SetTxBuffer(i, &hUsbDevice, &TX_Buffer[i][buffptr], buffsize);
 80052b8:	4e12      	ldr	r6, [pc, #72]	@ (8005304 <ProcessCDC_TX+0x58>)
 80052ba:	4d13      	ldr	r5, [pc, #76]	@ (8005308 <ProcessCDC_TX+0x5c>)
    for (uint8_t i = 0; i < NUMBER_OF_CDC; i++) {
 80052bc:	2100      	movs	r1, #0
        if (Read_Index[i] != Write_Index[i]) {
 80052be:	f8d8 4000 	ldr.w	r4, [r8]
    for (uint8_t i = 0; i < NUMBER_OF_CDC; i++) {
 80052c2:	b981      	cbnz	r1, 80052e6 <ProcessCDC_TX+0x3a>
        if (Read_Index[i] != Write_Index[i]) {
 80052c4:	4294      	cmp	r4, r2
 80052c6:	d00e      	beq.n	80052e6 <ProcessCDC_TX+0x3a>
                                (APP_TX_DATA_SIZE - Read_Index[i]) :
 80052c8:	bf34      	ite	cc
 80052ca:	f1c2 0440 	rsbcc	r4, r2, #64	@ 0x40
 80052ce:	1aa4      	subcs	r4, r4, r2
            USBD_CDC_SetTxBuffer(i, &hUsbDevice, &TX_Buffer[i][buffptr], buffsize);
 80052d0:	4629      	mov	r1, r5
 80052d2:	2000      	movs	r0, #0
 80052d4:	4623      	mov	r3, r4
 80052d6:	4432      	add	r2, r6
 80052d8:	f000 fa82 	bl	80057e0 <USBD_CDC_SetTxBuffer>

            if (USBD_CDC_TransmitPacket(i, &hUsbDevice) == USBD_OK) {
 80052dc:	4629      	mov	r1, r5
 80052de:	2000      	movs	r0, #0
 80052e0:	f000 fa98 	bl	8005814 <USBD_CDC_TransmitPacket>
 80052e4:	b108      	cbz	r0, 80052ea <ProcessCDC_TX+0x3e>
                if (Read_Index[i] == APP_RX_DATA_SIZE)
                    Read_Index[i] = 0;
            }
        }
    }
}
 80052e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                Read_Index[i] += buffsize;
 80052ea:	683a      	ldr	r2, [r7, #0]
 80052ec:	4422      	add	r2, r4
                if (Read_Index[i] == APP_RX_DATA_SIZE)
 80052ee:	2a40      	cmp	r2, #64	@ 0x40
                Read_Index[i] += buffsize;
 80052f0:	603a      	str	r2, [r7, #0]
    for (uint8_t i = 0; i < NUMBER_OF_CDC; i++) {
 80052f2:	f04f 0101 	mov.w	r1, #1
                    Read_Index[i] = 0;
 80052f6:	bf04      	itt	eq
 80052f8:	6038      	streq	r0, [r7, #0]
 80052fa:	4602      	moveq	r2, r0
 80052fc:	e7df      	b.n	80052be <ProcessCDC_TX+0x12>
 80052fe:	bf00      	nop
 8005300:	20009e8c 	.word	0x20009e8c
 8005304:	20009e9c 	.word	0x20009e9c
 8005308:	20008b64 	.word	0x20008b64
 800530c:	20009e90 	.word	0x20009e90

08005310 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
    if (htim == &htim2)
 8005310:	4b08      	ldr	r3, [pc, #32]	@ (8005334 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8005312:	4298      	cmp	r0, r3
 8005314:	d006      	beq.n	8005324 <HAL_TIM_PeriodElapsedCallback+0x14>
        ProcessCDC_RX();
    else if (htim == &htim1)
 8005316:	4b08      	ldr	r3, [pc, #32]	@ (8005338 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8005318:	4298      	cmp	r0, r3
 800531a:	d005      	beq.n	8005328 <HAL_TIM_PeriodElapsedCallback+0x18>
        ProcessCDC_TX();
    else if(htim == &htim4)
 800531c:	4b07      	ldr	r3, [pc, #28]	@ (800533c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800531e:	4298      	cmp	r0, r3
 8005320:	d004      	beq.n	800532c <HAL_TIM_PeriodElapsedCallback+0x1c>
    {
    	Usb2Can_Tranfer(&g_HIDFrameFIFO_Receive);
    }
}
 8005322:	4770      	bx	lr
        ProcessCDC_RX();
 8005324:	f7ff bf92 	b.w	800524c <ProcessCDC_RX>
        ProcessCDC_TX();
 8005328:	f7ff bfc0 	b.w	80052ac <ProcessCDC_TX>
    	Usb2Can_Tranfer(&g_HIDFrameFIFO_Receive);
 800532c:	4804      	ldr	r0, [pc, #16]	@ (8005340 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800532e:	f7fb bfef 	b.w	8001310 <Usb2Can_Tranfer>
 8005332:	bf00      	nop
 8005334:	20004498 	.word	0x20004498
 8005338:	200044e0 	.word	0x200044e0
 800533c:	20004450 	.word	0x20004450
 8005340:	20004b14 	.word	0x20004b14

08005344 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  uint8_t cdc_ch = UART_Handle_TO_CDC_CH(huart);
  //CDC_Transmit(cdc_ch, (TX_Buffer[cdc_ch] + Write_Index[cdc_ch]), 1);
  /* Increment Index for buffer writing */
  Write_Index[cdc_ch]++;
 8005344:	4b0a      	ldr	r3, [pc, #40]	@ (8005370 <HAL_UART_RxCpltCallback+0x2c>)
 8005346:	681a      	ldr	r2, [r3, #0]

  /* To avoid buffer overflow */
  if (Write_Index[cdc_ch] == APP_RX_DATA_SIZE)
 8005348:	2a3f      	cmp	r2, #63	@ 0x3f
{
 800534a:	b410      	push	{r4}
  if (Write_Index[cdc_ch] == APP_RX_DATA_SIZE)
 800534c:	d008      	beq.n	8005360 <HAL_UART_RxCpltCallback+0x1c>
 800534e:	1c54      	adds	r4, r2, #1
  {
    Write_Index[cdc_ch] = 0;
  }

  /* Start another reception: provide the buffer pointer with offset and the buffer size */
  HAL_UART_Receive_IT(huart, (TX_Buffer[cdc_ch] + Write_Index[cdc_ch]), 1);
 8005350:	4908      	ldr	r1, [pc, #32]	@ (8005374 <HAL_UART_RxCpltCallback+0x30>)
 8005352:	601c      	str	r4, [r3, #0]
 8005354:	4421      	add	r1, r4
 8005356:	2201      	movs	r2, #1
}
 8005358:	f85d 4b04 	ldr.w	r4, [sp], #4
  HAL_UART_Receive_IT(huart, (TX_Buffer[cdc_ch] + Write_Index[cdc_ch]), 1);
 800535c:	f7fe be32 	b.w	8003fc4 <HAL_UART_Receive_IT>
    Write_Index[cdc_ch] = 0;
 8005360:	2400      	movs	r4, #0
 8005362:	601c      	str	r4, [r3, #0]
  HAL_UART_Receive_IT(huart, (TX_Buffer[cdc_ch] + Write_Index[cdc_ch]), 1);
 8005364:	4903      	ldr	r1, [pc, #12]	@ (8005374 <HAL_UART_RxCpltCallback+0x30>)
}
 8005366:	f85d 4b04 	ldr.w	r4, [sp], #4
  HAL_UART_Receive_IT(huart, (TX_Buffer[cdc_ch] + Write_Index[cdc_ch]), 1);
 800536a:	2201      	movs	r2, #1
 800536c:	f7fe be2a 	b.w	8003fc4 <HAL_UART_Receive_IT>
 8005370:	20009e90 	.word	0x20009e90
 8005374:	20009e9c 	.word	0x20009e9c

08005378 <USBD_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_DeviceDesc);
 8005378:	2312      	movs	r3, #18
  return USBD_DeviceDesc;
}
 800537a:	4801      	ldr	r0, [pc, #4]	@ (8005380 <USBD_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_DeviceDesc);
 800537c:	800b      	strh	r3, [r1, #0]
}
 800537e:	4770      	bx	lr
 8005380:	2000004c 	.word	0x2000004c

08005384 <USBD_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005384:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8005386:	4801      	ldr	r0, [pc, #4]	@ (800538c <USBD_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8005388:	800b      	strh	r3, [r1, #0]
}
 800538a:	4770      	bx	lr
 800538c:	20000048 	.word	0x20000048

08005390 <USBD_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005390:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005392:	4c04      	ldr	r4, [pc, #16]	@ (80053a4 <USBD_ManufacturerStrDescriptor+0x14>)
 8005394:	4804      	ldr	r0, [pc, #16]	@ (80053a8 <USBD_ManufacturerStrDescriptor+0x18>)
{
 8005396:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005398:	4621      	mov	r1, r4
 800539a:	f001 f9fd 	bl	8006798 <USBD_GetString>
  return USBD_StrDesc;
}
 800539e:	4620      	mov	r0, r4
 80053a0:	bd10      	pop	{r4, pc}
 80053a2:	bf00      	nop
 80053a4:	20009f1c 	.word	0x20009f1c
 80053a8:	08007424 	.word	0x08007424

080053ac <USBD_ProductStrDescriptor>:
{
 80053ac:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80053ae:	4c04      	ldr	r4, [pc, #16]	@ (80053c0 <USBD_ProductStrDescriptor+0x14>)
 80053b0:	4804      	ldr	r0, [pc, #16]	@ (80053c4 <USBD_ProductStrDescriptor+0x18>)
{
 80053b2:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80053b4:	4621      	mov	r1, r4
 80053b6:	f001 f9ef 	bl	8006798 <USBD_GetString>
}
 80053ba:	4620      	mov	r0, r4
 80053bc:	bd10      	pop	{r4, pc}
 80053be:	bf00      	nop
 80053c0:	20009f1c 	.word	0x20009f1c
 80053c4:	0800742c 	.word	0x0800742c

080053c8 <USBD_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80053c8:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80053ca:	4c04      	ldr	r4, [pc, #16]	@ (80053dc <USBD_ConfigStrDescriptor+0x14>)
 80053cc:	4804      	ldr	r0, [pc, #16]	@ (80053e0 <USBD_ConfigStrDescriptor+0x18>)
{
 80053ce:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80053d0:	4621      	mov	r1, r4
 80053d2:	f001 f9e1 	bl	8006798 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 80053d6:	4620      	mov	r0, r4
 80053d8:	bd10      	pop	{r4, pc}
 80053da:	bf00      	nop
 80053dc:	20009f1c 	.word	0x20009f1c
 80053e0:	0800743c 	.word	0x0800743c

080053e4 <USBD_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80053e4:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80053e6:	4c04      	ldr	r4, [pc, #16]	@ (80053f8 <USBD_InterfaceStrDescriptor+0x14>)
 80053e8:	4804      	ldr	r0, [pc, #16]	@ (80053fc <USBD_InterfaceStrDescriptor+0x18>)
{
 80053ea:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80053ec:	4621      	mov	r1, r4
 80053ee:	f001 f9d3 	bl	8006798 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 80053f2:	4620      	mov	r0, r4
 80053f4:	bd10      	pop	{r4, pc}
 80053f6:	bf00      	nop
 80053f8:	20009f1c 	.word	0x20009f1c
 80053fc:	0800744c 	.word	0x0800744c

08005400 <USBD_SerialStrDescriptor>:
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005400:	481b      	ldr	r0, [pc, #108]	@ (8005470 <USBD_SerialStrDescriptor+0x70>)
 8005402:	f8d0 3a10 	ldr.w	r3, [r0, #2576]	@ 0xa10
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;

  deviceserial0 += deviceserial2;
 8005406:	f8d0 2a18 	ldr.w	r2, [r0, #2584]	@ 0xa18
{
 800540a:	b510      	push	{r4, lr}

  if (deviceserial0 != 0)
 800540c:	189b      	adds	r3, r3, r2
  *length = USB_SIZ_STRING_SERIAL;
 800540e:	f04f 041a 	mov.w	r4, #26
 8005412:	800c      	strh	r4, [r1, #0]
  if (deviceserial0 != 0)
 8005414:	d101      	bne.n	800541a <USBD_SerialStrDescriptor+0x1a>
}
 8005416:	4817      	ldr	r0, [pc, #92]	@ (8005474 <USBD_SerialStrDescriptor+0x74>)
 8005418:	bd10      	pop	{r4, pc}
 800541a:	4a16      	ldr	r2, [pc, #88]	@ (8005474 <USBD_SerialStrDescriptor+0x74>)
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800541c:	f8d0 0a14 	ldr.w	r0, [r0, #2580]	@ 0xa14
 8005420:	f102 0410 	add.w	r4, r2, #16
 8005424:	4611      	mov	r1, r2
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8005426:	f04f 0e00 	mov.w	lr, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 800542a:	ea4f 7c13 	mov.w	ip, r3, lsr #28
    if (((value >> 28)) < 0xA)
 800542e:	f1b3 4f20 	cmp.w	r3, #2684354560	@ 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 8005432:	bf34      	ite	cc
 8005434:	f10c 0c30 	addcc.w	ip, ip, #48	@ 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005438:	f10c 0c37 	addcs.w	ip, ip, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800543c:	f881 c002 	strb.w	ip, [r1, #2]
    pbuf[2 * idx + 1] = 0;
 8005440:	f881 e003 	strb.w	lr, [r1, #3]
  for (idx = 0; idx < len; idx++)
 8005444:	3102      	adds	r1, #2
 8005446:	428c      	cmp	r4, r1
    value = value << 4;
 8005448:	ea4f 1303 	mov.w	r3, r3, lsl #4
  for (idx = 0; idx < len; idx++)
 800544c:	d1ed      	bne.n	800542a <USBD_SerialStrDescriptor+0x2a>
 800544e:	4c0a      	ldr	r4, [pc, #40]	@ (8005478 <USBD_SerialStrDescriptor+0x78>)
    pbuf[2 * idx + 1] = 0;
 8005450:	2100      	movs	r1, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 8005452:	0f03      	lsrs	r3, r0, #28
    if (((value >> 28)) < 0xA)
 8005454:	f1b0 4f20 	cmp.w	r0, #2684354560	@ 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 8005458:	bf34      	ite	cc
 800545a:	3330      	addcc	r3, #48	@ 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800545c:	3337      	addcs	r3, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800545e:	7493      	strb	r3, [r2, #18]
    pbuf[2 * idx + 1] = 0;
 8005460:	74d1      	strb	r1, [r2, #19]
  for (idx = 0; idx < len; idx++)
 8005462:	3202      	adds	r2, #2
 8005464:	4294      	cmp	r4, r2
    value = value << 4;
 8005466:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 800546a:	d1f2      	bne.n	8005452 <USBD_SerialStrDescriptor+0x52>
}
 800546c:	4801      	ldr	r0, [pc, #4]	@ (8005474 <USBD_SerialStrDescriptor+0x74>)
 800546e:	bd10      	pop	{r4, pc}
 8005470:	1fff7000 	.word	0x1fff7000
 8005474:	2000002c 	.word	0x2000002c
 8005478:	20000034 	.word	0x20000034

0800547c <CUSTOM_HID_Init>:
static int8_t CUSTOM_HID_Init(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800547c:	2000      	movs	r0, #0
 800547e:	4770      	bx	lr

08005480 <CUSTOM_HID_OutEvent>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent(uint8_t *data, uint16_t len)
{
 8005480:	b508      	push	{r3, lr}
 8005482:	4601      	mov	r1, r0
  /* USER CODE BEGIN 6 */
	HID_Frame_Write(&g_HIDFrameFIFO_Receive,data);
 8005484:	4802      	ldr	r0, [pc, #8]	@ (8005490 <CUSTOM_HID_OutEvent+0x10>)
 8005486:	f7fb ff19 	bl	80012bc <HID_Frame_Write>
  //memcpy(buffer, state, 0x40);
  //USBD_CUSTOM_HID_SendReport(&hUsbDevice, (uint8_t *)buffer, 0x40);
  return (USBD_OK);
  /* USER CODE END 6 */
}
 800548a:	2000      	movs	r0, #0
 800548c:	bd08      	pop	{r3, pc}
 800548e:	bf00      	nop
 8005490:	20004b14 	.word	0x20004b14

08005494 <CUSTOM_HID_DeInit>:
static int8_t CUSTOM_HID_DeInit(void)
 8005494:	2000      	movs	r0, #0
 8005496:	4770      	bx	lr

08005498 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005498:	b538      	push	{r3, r4, r5, lr}
    if (hcdc == NULL)
    {
      return (uint8_t)USBD_FAIL;
    }

    if ((pdev->pUserData_CDC_ACM != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800549a:	4c0a      	ldr	r4, [pc, #40]	@ (80054c4 <USBD_CDC_EP0_RxReady+0x2c>)
 800549c:	f8d0 32bc 	ldr.w	r3, [r0, #700]	@ 0x2bc
 80054a0:	f894 1200 	ldrb.w	r1, [r4, #512]	@ 0x200
 80054a4:	b10b      	cbz	r3, 80054aa <USBD_CDC_EP0_RxReady+0x12>
 80054a6:	29ff      	cmp	r1, #255	@ 0xff
 80054a8:	d101      	bne.n	80054ae <USBD_CDC_EP0_RxReady+0x16>
      hcdc->CmdOpCode = 0xFFU;
    }
  }

  return (uint8_t)USBD_OK;
}
 80054aa:	2000      	movs	r0, #0
 80054ac:	bd38      	pop	{r3, r4, r5, pc}
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(i, hcdc->CmdOpCode, (uint8_t *)hcdc->data[i], (uint16_t)hcdc->CmdLength);
 80054ae:	689d      	ldr	r5, [r3, #8]
 80054b0:	f894 3201 	ldrb.w	r3, [r4, #513]	@ 0x201
 80054b4:	4622      	mov	r2, r4
 80054b6:	2000      	movs	r0, #0
 80054b8:	47a8      	blx	r5
      hcdc->CmdOpCode = 0xFFU;
 80054ba:	23ff      	movs	r3, #255	@ 0xff
 80054bc:	f884 3200 	strb.w	r3, [r4, #512]	@ 0x200
}
 80054c0:	2000      	movs	r0, #0
 80054c2:	bd38      	pop	{r3, r4, r5, pc}
 80054c4:	2000a11c 	.word	0x2000a11c

080054c8 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80054c8:	234b      	movs	r3, #75	@ 0x4b
 80054ca:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 80054cc:	4800      	ldr	r0, [pc, #0]	@ (80054d0 <USBD_CDC_GetFSCfgDesc+0x8>)
 80054ce:	4770      	bx	lr
 80054d0:	200000b0 	.word	0x200000b0

080054d4 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80054d4:	234b      	movs	r3, #75	@ 0x4b
 80054d6:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 80054d8:	4800      	ldr	r0, [pc, #0]	@ (80054dc <USBD_CDC_GetHSCfgDesc+0x8>)
 80054da:	4770      	bx	lr
 80054dc:	200000fc 	.word	0x200000fc

080054e0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80054e0:	230a      	movs	r3, #10
 80054e2:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 80054e4:	4800      	ldr	r0, [pc, #0]	@ (80054e8 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80054e6:	4770      	bx	lr
 80054e8:	20000184 	.word	0x20000184

080054ec <USBD_CDC_DataOut>:
{
 80054ec:	b510      	push	{r4, lr}
 80054ee:	4604      	mov	r4, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80054f0:	f001 facc 	bl	8006a8c <USBD_LL_GetRxDataSize>
 80054f4:	4a06      	ldr	r2, [pc, #24]	@ (8005510 <USBD_CDC_DataOut+0x24>)
  ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Receive(ep_to_ch, hcdc->RxBuffer, &hcdc->RxLength);
 80054f6:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 80054fa:	f8d2 1204 	ldr.w	r1, [r2, #516]	@ 0x204
 80054fe:	68db      	ldr	r3, [r3, #12]
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005500:	f8c2 020c 	str.w	r0, [r2, #524]	@ 0x20c
  ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Receive(ep_to_ch, hcdc->RxBuffer, &hcdc->RxLength);
 8005504:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005508:	2000      	movs	r0, #0
 800550a:	4798      	blx	r3
}
 800550c:	2000      	movs	r0, #0
 800550e:	bd10      	pop	{r4, pc}
 8005510:	2000a11c 	.word	0x2000a11c

08005514 <USBD_CDC_DataIn>:
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005514:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 8005518:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
{
 800551c:	b538      	push	{r3, r4, r5, lr}
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800551e:	f8dc 4018 	ldr.w	r4, [ip, #24]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005522:	f8d0 5310 	ldr.w	r5, [r0, #784]	@ 0x310
{
 8005526:	460b      	mov	r3, r1
 8005528:	4602      	mov	r2, r0
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800552a:	b14c      	cbz	r4, 8005540 <USBD_CDC_DataIn+0x2c>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800552c:	eb01 0ec1 	add.w	lr, r1, r1, lsl #3
 8005530:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 8005534:	69ed      	ldr	r5, [r5, #28]
 8005536:	fbb4 fef5 	udiv	lr, r4, r5
 800553a:	fb05 441e 	mls	r4, r5, lr, r4
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800553e:	b174      	cbz	r4, 800555e <USBD_CDC_DataIn+0x4a>
    if (((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt != NULL)
 8005540:	f8d2 22bc 	ldr.w	r2, [r2, #700]	@ 0x2bc
    hcdc->TxState = 0U;
 8005544:	490a      	ldr	r1, [pc, #40]	@ (8005570 <USBD_CDC_DataIn+0x5c>)
    if (((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt != NULL)
 8005546:	6914      	ldr	r4, [r2, #16]
    hcdc->TxState = 0U;
 8005548:	2000      	movs	r0, #0
 800554a:	f8c1 0214 	str.w	r0, [r1, #532]	@ 0x214
    if (((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt != NULL)
 800554e:	b124      	cbz	r4, 800555a <USBD_CDC_DataIn+0x46>
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt(ep_to_ch, hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005550:	f501 7204 	add.w	r2, r1, #528	@ 0x210
 8005554:	f8d1 1208 	ldr.w	r1, [r1, #520]	@ 0x208
 8005558:	47a0      	blx	r4
}
 800555a:	2000      	movs	r0, #0
 800555c:	bd38      	pop	{r3, r4, r5, pc}
    pdev->ep_in[epnum].total_length = 0U;
 800555e:	f8cc 4018 	str.w	r4, [ip, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005562:	4623      	mov	r3, r4
 8005564:	4622      	mov	r2, r4
 8005566:	f001 fa79 	bl	8006a5c <USBD_LL_Transmit>
}
 800556a:	2000      	movs	r0, #0
 800556c:	bd38      	pop	{r3, r4, r5, pc}
 800556e:	bf00      	nop
 8005570:	2000a11c 	.word	0x2000a11c

08005574 <USBD_CDC_Setup>:
{
 8005574:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005576:	f891 c000 	ldrb.w	ip, [r1]
{
 800557a:	b082      	sub	sp, #8
  uint8_t ifalt = 0U;
 800557c:	f04f 0e00 	mov.w	lr, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005580:	f01c 0360 	ands.w	r3, ip, #96	@ 0x60
{
 8005584:	460c      	mov	r4, r1
  uint8_t ifalt = 0U;
 8005586:	f88d e005 	strb.w	lr, [sp, #5]
  uint16_t status_info = 0U;
 800558a:	f8ad e006 	strh.w	lr, [sp, #6]
{
 800558e:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005590:	d01d      	beq.n	80055ce <USBD_CDC_Setup+0x5a>
 8005592:	2b20      	cmp	r3, #32
 8005594:	d006      	beq.n	80055a4 <USBD_CDC_Setup+0x30>
      USBD_CtlError(pdev, req);
 8005596:	4628      	mov	r0, r5
 8005598:	4621      	mov	r1, r4
 800559a:	f001 f8f1 	bl	8006780 <USBD_CtlError>
        ret = USBD_FAIL;
 800559e:	2003      	movs	r0, #3
}
 80055a0:	b002      	add	sp, #8
 80055a2:	bd70      	pop	{r4, r5, r6, pc}
    if (req->wLength != 0U)
 80055a4:	88cb      	ldrh	r3, [r1, #6]
        ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 80055a6:	7849      	ldrb	r1, [r1, #1]
    if (req->wLength != 0U)
 80055a8:	b383      	cbz	r3, 800560c <USBD_CDC_Setup+0x98>
      if ((req->bmRequest & 0x80U) != 0U)
 80055aa:	f01c 0f80 	tst.w	ip, #128	@ 0x80
 80055ae:	d04e      	beq.n	800564e <USBD_CDC_Setup+0xda>
        ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 80055b0:	f8d5 22bc 	ldr.w	r2, [r5, #700]	@ 0x2bc
 80055b4:	4670      	mov	r0, lr
 80055b6:	6896      	ldr	r6, [r2, #8]
 80055b8:	4a2a      	ldr	r2, [pc, #168]	@ (8005664 <USBD_CDC_Setup+0xf0>)
 80055ba:	47b0      	blx	r6
        len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80055bc:	88e2      	ldrh	r2, [r4, #6]
        (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data[windex_to_ch], len);
 80055be:	4929      	ldr	r1, [pc, #164]	@ (8005664 <USBD_CDC_Setup+0xf0>)
 80055c0:	2a07      	cmp	r2, #7
 80055c2:	4628      	mov	r0, r5
 80055c4:	bf28      	it	cs
 80055c6:	2207      	movcs	r2, #7
 80055c8:	f001 f90e 	bl	80067e8 <USBD_CtlSendData>
 80055cc:	e024      	b.n	8005618 <USBD_CDC_Setup+0xa4>
    switch (req->bRequest)
 80055ce:	784b      	ldrb	r3, [r1, #1]
 80055d0:	2b0b      	cmp	r3, #11
 80055d2:	d8e0      	bhi.n	8005596 <USBD_CDC_Setup+0x22>
 80055d4:	a201      	add	r2, pc, #4	@ (adr r2, 80055dc <USBD_CDC_Setup+0x68>)
 80055d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055da:	bf00      	nop
 80055dc:	0800561d 	.word	0x0800561d
 80055e0:	08005619 	.word	0x08005619
 80055e4:	08005597 	.word	0x08005597
 80055e8:	08005597 	.word	0x08005597
 80055ec:	08005597 	.word	0x08005597
 80055f0:	08005597 	.word	0x08005597
 80055f4:	08005597 	.word	0x08005597
 80055f8:	08005597 	.word	0x08005597
 80055fc:	08005597 	.word	0x08005597
 8005600:	08005597 	.word	0x08005597
 8005604:	0800563b 	.word	0x0800563b
 8005608:	08005631 	.word	0x08005631
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
 800560c:	f8d0 22bc 	ldr.w	r2, [r0, #700]	@ 0x2bc
 8005610:	4618      	mov	r0, r3
 8005612:	6895      	ldr	r5, [r2, #8]
 8005614:	4622      	mov	r2, r4
 8005616:	47a8      	blx	r5
  USBD_StatusTypeDef ret = USBD_OK;
 8005618:	2000      	movs	r0, #0
 800561a:	e7c1      	b.n	80055a0 <USBD_CDC_Setup+0x2c>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800561c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005620:	2b03      	cmp	r3, #3
 8005622:	d1b8      	bne.n	8005596 <USBD_CDC_Setup+0x22>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005624:	2202      	movs	r2, #2
 8005626:	f10d 0106 	add.w	r1, sp, #6
 800562a:	f001 f8dd 	bl	80067e8 <USBD_CtlSendData>
 800562e:	e7f3      	b.n	8005618 <USBD_CDC_Setup+0xa4>
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005630:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005634:	2b03      	cmp	r3, #3
 8005636:	d0ef      	beq.n	8005618 <USBD_CDC_Setup+0xa4>
 8005638:	e7ad      	b.n	8005596 <USBD_CDC_Setup+0x22>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800563a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800563e:	2b03      	cmp	r3, #3
 8005640:	d1a9      	bne.n	8005596 <USBD_CDC_Setup+0x22>
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005642:	2201      	movs	r2, #1
 8005644:	f10d 0105 	add.w	r1, sp, #5
 8005648:	f001 f8ce 	bl	80067e8 <USBD_CtlSendData>
 800564c:	e7e4      	b.n	8005618 <USBD_CDC_Setup+0xa4>
        hcdc->CmdOpCode = req->bRequest;
 800564e:	4c05      	ldr	r4, [pc, #20]	@ (8005664 <USBD_CDC_Setup+0xf0>)
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 8005650:	461a      	mov	r2, r3
        hcdc->CmdOpCode = req->bRequest;
 8005652:	f884 1200 	strb.w	r1, [r4, #512]	@ 0x200
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 8005656:	4621      	mov	r1, r4
        hcdc->CmdLength = (uint8_t)req->wLength;
 8005658:	f884 3201 	strb.w	r3, [r4, #513]	@ 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 800565c:	f001 f8da 	bl	8006814 <USBD_CtlPrepareRx>
 8005660:	e7da      	b.n	8005618 <USBD_CDC_Setup+0xa4>
 8005662:	bf00      	nop
 8005664:	2000a11c 	.word	0x2000a11c

08005668 <USBD_CDC_DeInit>:
{
 8005668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    (void)USBD_LL_CloseEP(pdev, CDC_IN_EP[i]);
 800566a:	4e18      	ldr	r6, [pc, #96]	@ (80056cc <USBD_CDC_DeInit+0x64>)
    (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP[i]);
 800566c:	4f18      	ldr	r7, [pc, #96]	@ (80056d0 <USBD_CDC_DeInit+0x68>)
    (void)USBD_LL_CloseEP(pdev, CDC_IN_EP[i]);
 800566e:	7831      	ldrb	r1, [r6, #0]
{
 8005670:	4604      	mov	r4, r0
    (void)USBD_LL_CloseEP(pdev, CDC_IN_EP[i]);
 8005672:	f001 f9af 	bl	80069d4 <USBD_LL_CloseEP>
    pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 0U;
 8005676:	7833      	ldrb	r3, [r6, #0]
    (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP[i]);
 8005678:	7839      	ldrb	r1, [r7, #0]
    (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP[i]);
 800567a:	4e16      	ldr	r6, [pc, #88]	@ (80056d4 <USBD_CDC_DeInit+0x6c>)
    pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 0U;
 800567c:	f003 030f 	and.w	r3, r3, #15
 8005680:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005684:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005688:	2500      	movs	r5, #0
 800568a:	849d      	strh	r5, [r3, #36]	@ 0x24
    (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP[i]);
 800568c:	4620      	mov	r0, r4
 800568e:	f001 f9a1 	bl	80069d4 <USBD_LL_CloseEP>
    pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 0U;
 8005692:	783b      	ldrb	r3, [r7, #0]
    (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP[i]);
 8005694:	7831      	ldrb	r1, [r6, #0]
    pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 0U;
 8005696:	f003 030f 	and.w	r3, r3, #15
 800569a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800569e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP[i]);
 80056a2:	4620      	mov	r0, r4
    pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 0U;
 80056a4:	f8a3 5164 	strh.w	r5, [r3, #356]	@ 0x164
    (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP[i]);
 80056a8:	f001 f994 	bl	80069d4 <USBD_LL_CloseEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 0U;
 80056ac:	7833      	ldrb	r3, [r6, #0]
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->DeInit(i);
 80056ae:	f8d4 22bc 	ldr.w	r2, [r4, #700]	@ 0x2bc
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 0U;
 80056b2:	f003 030f 	and.w	r3, r3, #15
 80056b6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80056ba:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->DeInit(i);
 80056be:	4628      	mov	r0, r5
 80056c0:	6853      	ldr	r3, [r2, #4]
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 0U;
 80056c2:	6265      	str	r5, [r4, #36]	@ 0x24
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->DeInit(i);
 80056c4:	4798      	blx	r3
}
 80056c6:	4628      	mov	r0, r5
 80056c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056ca:	bf00      	nop
 80056cc:	2000a34c 	.word	0x2000a34c
 80056d0:	2000a348 	.word	0x2000a348
 80056d4:	2000a344 	.word	0x2000a344

080056d8 <USBD_CDC_Init>:
{
 80056d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 80056da:	4f36      	ldr	r7, [pc, #216]	@ (80057b4 <USBD_CDC_Init+0xdc>)
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056dc:	7c03      	ldrb	r3, [r0, #16]
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 80056de:	7839      	ldrb	r1, [r7, #0]
{
 80056e0:	4604      	mov	r4, r0
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d14d      	bne.n	8005782 <USBD_CDC_Init+0xaa>
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 80056e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80056ea:	2202      	movs	r2, #2
 80056ec:	f001 f964 	bl	80069b8 <USBD_LL_OpenEP>
      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 80056f0:	783b      	ldrb	r3, [r7, #0]
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 80056f2:	4d31      	ldr	r5, [pc, #196]	@ (80057b8 <USBD_CDC_Init+0xe0>)
      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 80056f4:	f003 030f 	and.w	r3, r3, #15
 80056f8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 80056fc:	7829      	ldrb	r1, [r5, #0]
      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 80056fe:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8005702:	2601      	movs	r6, #1
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 8005704:	f44f 7300 	mov.w	r3, #512	@ 0x200
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005708:	4f2c      	ldr	r7, [pc, #176]	@ (80057bc <USBD_CDC_Init+0xe4>)
      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 800570a:	8496      	strh	r6, [r2, #36]	@ 0x24
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 800570c:	4620      	mov	r0, r4
 800570e:	2202      	movs	r2, #2
 8005710:	f001 f952 	bl	80069b8 <USBD_LL_OpenEP>
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005714:	7839      	ldrb	r1, [r7, #0]
      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 8005716:	782b      	ldrb	r3, [r5, #0]
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005718:	f001 020f 	and.w	r2, r1, #15
      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 800571c:	f003 030f 	and.w	r3, r3, #15
 8005720:	eb03 0383 	add.w	r3, r3, r3, lsl #2
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005724:	eb02 0282 	add.w	r2, r2, r2, lsl #2
      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 8005728:	eb04 0383 	add.w	r3, r4, r3, lsl #2
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800572c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8005730:	2010      	movs	r0, #16
      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 8005732:	f8a3 6164 	strh.w	r6, [r3, #356]	@ 0x164
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005736:	84d0      	strh	r0, [r2, #38]	@ 0x26
    (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP[i], USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005738:	2308      	movs	r3, #8
 800573a:	2203      	movs	r2, #3
 800573c:	4620      	mov	r0, r4
 800573e:	f001 f93b 	bl	80069b8 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 1U;
 8005742:	783b      	ldrb	r3, [r7, #0]
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Init(i);
 8005744:	f8d4 22bc 	ldr.w	r2, [r4, #700]	@ 0x2bc
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 1U;
 8005748:	f003 030f 	and.w	r3, r3, #15
 800574c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005750:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005754:	2101      	movs	r1, #1
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Init(i);
 8005756:	6812      	ldr	r2, [r2, #0]
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 1U;
 8005758:	8499      	strh	r1, [r3, #36]	@ 0x24
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Init(i);
 800575a:	2000      	movs	r0, #0
 800575c:	4790      	blx	r2
    hcdc->TxState = 0U;
 800575e:	4b18      	ldr	r3, [pc, #96]	@ (80057c0 <USBD_CDC_Init+0xe8>)
 8005760:	2200      	movs	r2, #0
 8005762:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8005766:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800576a:	7c22      	ldrb	r2, [r4, #16]
 800576c:	b9ca      	cbnz	r2, 80057a2 <USBD_CDC_Init+0xca>
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 800576e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005772:	7829      	ldrb	r1, [r5, #0]
 8005774:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005778:	4620      	mov	r0, r4
 800577a:	f001 f97b 	bl	8006a74 <USBD_LL_PrepareReceive>
}
 800577e:	2000      	movs	r0, #0
 8005780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 8005782:	2340      	movs	r3, #64	@ 0x40
 8005784:	2202      	movs	r2, #2
 8005786:	f001 f917 	bl	80069b8 <USBD_LL_OpenEP>
      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 800578a:	783b      	ldrb	r3, [r7, #0]
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 800578c:	4d0a      	ldr	r5, [pc, #40]	@ (80057b8 <USBD_CDC_Init+0xe0>)
      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 800578e:	f003 030f 	and.w	r3, r3, #15
 8005792:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005796:	eb04 0283 	add.w	r2, r4, r3, lsl #2
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 800579a:	7829      	ldrb	r1, [r5, #0]
      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 800579c:	2601      	movs	r6, #1
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 800579e:	2340      	movs	r3, #64	@ 0x40
 80057a0:	e7b2      	b.n	8005708 <USBD_CDC_Init+0x30>
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 80057a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80057a6:	7829      	ldrb	r1, [r5, #0]
 80057a8:	2340      	movs	r3, #64	@ 0x40
 80057aa:	4620      	mov	r0, r4
 80057ac:	f001 f962 	bl	8006a74 <USBD_LL_PrepareReceive>
}
 80057b0:	2000      	movs	r0, #0
 80057b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057b4:	2000a34c 	.word	0x2000a34c
 80057b8:	2000a348 	.word	0x2000a348
 80057bc:	2000a344 	.word	0x2000a344
 80057c0:	2000a11c 	.word	0x2000a11c

080057c4 <USBD_CDC_GetOtherSpeedCfgDesc>:
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
 80057c4:	234b      	movs	r3, #75	@ 0x4b
 80057c6:	8003      	strh	r3, [r0, #0]
 80057c8:	4800      	ldr	r0, [pc, #0]	@ (80057cc <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 80057ca:	4770      	bx	lr
 80057cc:	200000b0 	.word	0x200000b0

080057d0 <USBD_CDC_ACM_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_ACM_RegisterInterface(USBD_HandleTypeDef *pdev,
                                       USBD_CDC_ACM_ItfTypeDef *fops)
{
  if (fops == NULL)
 80057d0:	b119      	cbz	r1, 80057da <USBD_CDC_ACM_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData_CDC_ACM = fops;
 80057d2:	f8c0 12bc 	str.w	r1, [r0, #700]	@ 0x2bc

  return (uint8_t)USBD_OK;
 80057d6:	2000      	movs	r0, #0
 80057d8:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 80057da:	2003      	movs	r0, #3
}
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop

080057e0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;

  hcdc = &CDC_ACM_Class_Data[ch];

  hcdc->TxBuffer = pbuff;
 80057e0:	4905      	ldr	r1, [pc, #20]	@ (80057f8 <USBD_CDC_SetTxBuffer+0x18>)
 80057e2:	f44f 7c07 	mov.w	ip, #540	@ 0x21c
 80057e6:	fb0c 1000 	mla	r0, ip, r0, r1
 80057ea:	f8c0 2208 	str.w	r2, [r0, #520]	@ 0x208
  hcdc->TxLength = length;
 80057ee:	f8c0 3210 	str.w	r3, [r0, #528]	@ 0x210

  return (uint8_t)USBD_OK;
}
 80057f2:	2000      	movs	r0, #0
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	2000a11c 	.word	0x2000a11c

080057fc <USBD_CDC_SetRxBuffer>:
{
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;

  hcdc = &CDC_ACM_Class_Data[ch];

  hcdc->RxBuffer = pbuff;
 80057fc:	4b04      	ldr	r3, [pc, #16]	@ (8005810 <USBD_CDC_SetRxBuffer+0x14>)
 80057fe:	f44f 7107 	mov.w	r1, #540	@ 0x21c
 8005802:	fb01 3300 	mla	r3, r1, r0, r3

  return (uint8_t)USBD_OK;
}
 8005806:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8005808:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
}
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop
 8005810:	2000a11c 	.word	0x2000a11c

08005814 <USBD_CDC_TransmitPacket>:
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
  USBD_StatusTypeDef ret = USBD_BUSY;

  hcdc = &CDC_ACM_Class_Data[ch];

  if (hcdc->TxState == 0U)
 8005814:	4a10      	ldr	r2, [pc, #64]	@ (8005858 <USBD_CDC_TransmitPacket+0x44>)
{
 8005816:	4603      	mov	r3, r0
  if (hcdc->TxState == 0U)
 8005818:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800581c:	fb00 2203 	mla	r2, r0, r3, r2
{
 8005820:	b510      	push	{r4, lr}
  if (hcdc->TxState == 0U)
 8005822:	f8d2 4214 	ldr.w	r4, [r2, #532]	@ 0x214
 8005826:	b10c      	cbz	r4, 800582c <USBD_CDC_TransmitPacket+0x18>
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005828:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 800582a:	bd10      	pop	{r4, pc}
    hcdc->TxState = 1U;
 800582c:	4608      	mov	r0, r1
 800582e:	2101      	movs	r1, #1
 8005830:	f8c2 1214 	str.w	r1, [r2, #532]	@ 0x214
    pdev->ep_in[CDC_IN_EP[ch] & 0xFU].total_length = hcdc->TxLength;
 8005834:	4909      	ldr	r1, [pc, #36]	@ (800585c <USBD_CDC_TransmitPacket+0x48>)
 8005836:	5cc9      	ldrb	r1, [r1, r3]
 8005838:	f8d2 3210 	ldr.w	r3, [r2, #528]	@ 0x210
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP[ch], hcdc->TxBuffer, hcdc->TxLength);
 800583c:	f8d2 2208 	ldr.w	r2, [r2, #520]	@ 0x208
    pdev->ep_in[CDC_IN_EP[ch] & 0xFU].total_length = hcdc->TxLength;
 8005840:	f001 0c0f 	and.w	ip, r1, #15
 8005844:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8005848:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 800584c:	f8cc 3018 	str.w	r3, [ip, #24]
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP[ch], hcdc->TxBuffer, hcdc->TxLength);
 8005850:	f001 f904 	bl	8006a5c <USBD_LL_Transmit>
    ret = USBD_OK;
 8005854:	4620      	mov	r0, r4
}
 8005856:	bd10      	pop	{r4, pc}
 8005858:	2000a11c 	.word	0x2000a11c
 800585c:	2000a34c 	.word	0x2000a34c

08005860 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 8005860:	b510      	push	{r4, lr}
 8005862:	468c      	mov	ip, r1
  hcdc = &CDC_ACM_Class_Data[ch];

  if (pdev->dev_speed == USBD_SPEED_HIGH)
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 8005864:	4b0c      	ldr	r3, [pc, #48]	@ (8005898 <USBD_CDC_ReceivePacket+0x38>)
 8005866:	4a0d      	ldr	r2, [pc, #52]	@ (800589c <USBD_CDC_ReceivePacket+0x3c>)
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005868:	f89c 4010 	ldrb.w	r4, [ip, #16]
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 800586c:	f44f 7107 	mov.w	r1, #540	@ 0x21c
 8005870:	fb01 3300 	mla	r3, r1, r0, r3
 8005874:	5c11      	ldrb	r1, [r2, r0]
 8005876:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800587a:	b934      	cbnz	r4, 800588a <USBD_CDC_ReceivePacket+0x2a>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 800587c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005880:	4660      	mov	r0, ip
 8005882:	f001 f8f7 	bl	8006a74 <USBD_LL_PrepareReceive>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
}
 8005886:	2000      	movs	r0, #0
 8005888:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 800588a:	2340      	movs	r3, #64	@ 0x40
 800588c:	4660      	mov	r0, ip
 800588e:	f001 f8f1 	bl	8006a74 <USBD_LL_PrepareReceive>
}
 8005892:	2000      	movs	r0, #0
 8005894:	bd10      	pop	{r4, pc}
 8005896:	bf00      	nop
 8005898:	2000a11c 	.word	0x2000a11c
 800589c:	2000a348 	.word	0x2000a348

080058a0 <USBD_Update_CDC_ACM_DESC>:
                              uint8_t com_itf,
                              uint8_t in_ep,
                              uint8_t cmd_ep,
                              uint8_t out_ep,
                              uint8_t str_idx)
{
 80058a0:	b410      	push	{r4}
    desc[45] = com_itf;
    desc[54] = out_ep;
    desc[61] = in_ep;

    desc += 66;
    CDC_IN_EP[i] = in_ep;
 80058a2:	4c13      	ldr	r4, [pc, #76]	@ (80058f0 <USBD_Update_CDC_ACM_DESC+0x50>)
    desc[61] = in_ep;
 80058a4:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
    CDC_IN_EP[i] = in_ep;
 80058a8:	7023      	strb	r3, [r4, #0]
    CDC_OUT_EP[i] = out_ep;
    CDC_CMD_EP[i] = cmd_ep;
 80058aa:	4b12      	ldr	r3, [pc, #72]	@ (80058f4 <USBD_Update_CDC_ACM_DESC+0x54>)
{
 80058ac:	f89d c004 	ldrb.w	ip, [sp, #4]
    CDC_CMD_EP[i] = cmd_ep;
 80058b0:	f883 c000 	strb.w	ip, [r3]
    CDC_CMD_ITF_NBR[i] = cmd_itf;
 80058b4:	4b10      	ldr	r3, [pc, #64]	@ (80058f8 <USBD_Update_CDC_ACM_DESC+0x58>)
    CDC_OUT_EP[i] = out_ep;
 80058b6:	4c11      	ldr	r4, [pc, #68]	@ (80058fc <USBD_Update_CDC_ACM_DESC+0x5c>)
    CDC_CMD_ITF_NBR[i] = cmd_itf;
 80058b8:	7019      	strb	r1, [r3, #0]
    CDC_COM_ITF_NBR[i] = com_itf;
 80058ba:	4b11      	ldr	r3, [pc, #68]	@ (8005900 <USBD_Update_CDC_ACM_DESC+0x60>)
    desc[2] = cmd_itf;
 80058bc:	72c1      	strb	r1, [r0, #11]
    desc[10] = cmd_itf;
 80058be:	74c1      	strb	r1, [r0, #19]
    desc[34] = cmd_itf;
 80058c0:	f880 102b 	strb.w	r1, [r0, #43]	@ 0x2b
    CDC_STR_DESC_IDX[i] = str_idx;
 80058c4:	490f      	ldr	r1, [pc, #60]	@ (8005904 <USBD_Update_CDC_ACM_DESC+0x64>)
    CDC_COM_ITF_NBR[i] = com_itf;
 80058c6:	701a      	strb	r2, [r3, #0]
    desc[26] = com_itf;
 80058c8:	f880 2023 	strb.w	r2, [r0, #35]	@ 0x23
{
 80058cc:	f89d 300c 	ldrb.w	r3, [sp, #12]
    desc[35] = com_itf;
 80058d0:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c
    desc[45] = com_itf;
 80058d4:	f880 2036 	strb.w	r2, [r0, #54]	@ 0x36
{
 80058d8:	f89d 2008 	ldrb.w	r2, [sp, #8]
    CDC_OUT_EP[i] = out_ep;
 80058dc:	7022      	strb	r2, [r4, #0]
    CDC_STR_DESC_IDX[i] = str_idx;
 80058de:	700b      	strb	r3, [r1, #0]
    str_idx++;

    cmd_itf += 2;
    com_itf = cmd_itf + 1;
  }
}
 80058e0:	f85d 4b04 	ldr.w	r4, [sp], #4
    desc[38] = cmd_ep;
 80058e4:	f880 c02f 	strb.w	ip, [r0, #47]	@ 0x2f
    desc[16] = str_idx;
 80058e8:	7643      	strb	r3, [r0, #25]
    desc[54] = out_ep;
 80058ea:	f880 203f 	strb.w	r2, [r0, #63]	@ 0x3f
}
 80058ee:	4770      	bx	lr
 80058f0:	2000a34c 	.word	0x2000a34c
 80058f4:	2000a344 	.word	0x2000a344
 80058f8:	2000a340 	.word	0x2000a340
 80058fc:	2000a348 	.word	0x2000a348
 8005900:	2000a33c 	.word	0x2000a33c
 8005904:	2000a338 	.word	0x2000a338

08005908 <USBD_COMPOSITE_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005908:	b538      	push	{r3, r4, r5, lr}
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.Init(pdev, cfgidx);
 800590a:	4b06      	ldr	r3, [pc, #24]	@ (8005924 <USBD_COMPOSITE_Init+0x1c>)
 800590c:	681b      	ldr	r3, [r3, #0]
{
 800590e:	4604      	mov	r4, r0
 8005910:	460d      	mov	r5, r1
  USBD_CDC_ACM.Init(pdev, cfgidx);
 8005912:	4798      	blx	r3
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.Init(pdev, cfgidx);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.Init(pdev, cfgidx);
 8005914:	4b04      	ldr	r3, [pc, #16]	@ (8005928 <USBD_COMPOSITE_Init+0x20>)
 8005916:	4629      	mov	r1, r5
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4620      	mov	r0, r4
 800591c:	4798      	blx	r3
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.Init(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
}
 800591e:	2000      	movs	r0, #0
 8005920:	bd38      	pop	{r3, r4, r5, pc}
 8005922:	bf00      	nop
 8005924:	20000148 	.word	0x20000148
 8005928:	20000274 	.word	0x20000274

0800592c <USBD_COMPOSITE_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800592c:	b538      	push	{r3, r4, r5, lr}
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.DeInit(pdev, cfgidx);
 800592e:	4b06      	ldr	r3, [pc, #24]	@ (8005948 <USBD_COMPOSITE_DeInit+0x1c>)
 8005930:	685b      	ldr	r3, [r3, #4]
{
 8005932:	4604      	mov	r4, r0
 8005934:	460d      	mov	r5, r1
  USBD_CDC_ACM.DeInit(pdev, cfgidx);
 8005936:	4798      	blx	r3
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.DeInit(pdev, cfgidx);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.DeInit(pdev, cfgidx);
 8005938:	4b04      	ldr	r3, [pc, #16]	@ (800594c <USBD_COMPOSITE_DeInit+0x20>)
 800593a:	4629      	mov	r1, r5
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	4620      	mov	r0, r4
 8005940:	4798      	blx	r3
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.DeInit(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
}
 8005942:	2000      	movs	r0, #0
 8005944:	bd38      	pop	{r3, r4, r5, pc}
 8005946:	bf00      	nop
 8005948:	20000148 	.word	0x20000148
 800594c:	20000274 	.word	0x20000274

08005950 <USBD_COMPOSITE_EP0_RxReady>:
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.EP0_RxReady(pdev);
 8005950:	4b05      	ldr	r3, [pc, #20]	@ (8005968 <USBD_COMPOSITE_EP0_RxReady+0x18>)
{
 8005952:	b510      	push	{r4, lr}
  USBD_CDC_ACM.EP0_RxReady(pdev);
 8005954:	691b      	ldr	r3, [r3, #16]
{
 8005956:	4604      	mov	r4, r0
  USBD_CDC_ACM.EP0_RxReady(pdev);
 8005958:	4798      	blx	r3
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.EP0_RxReady(pdev);
 800595a:	4b04      	ldr	r3, [pc, #16]	@ (800596c <USBD_COMPOSITE_EP0_RxReady+0x1c>)
 800595c:	4620      	mov	r0, r4
 800595e:	691b      	ldr	r3, [r3, #16]
 8005960:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
}
 8005962:	2000      	movs	r0, #0
 8005964:	bd10      	pop	{r4, pc}
 8005966:	bf00      	nop
 8005968:	20000148 	.word	0x20000148
 800596c:	20000274 	.word	0x20000274

08005970 <USBD_COMPOSITE_EP0_TxReady>:
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
}
 8005970:	2000      	movs	r0, #0
 8005972:	4770      	bx	lr

08005974 <USBD_COMPOSITE_IsoINIncomplete>:
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
}
 8005974:	2000      	movs	r0, #0
 8005976:	4770      	bx	lr

08005978 <USBD_COMPOSITE_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 8005978:	236b      	movs	r3, #107	@ 0x6b
 800597a:	8003      	strh	r3, [r0, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
}
 800597c:	4800      	ldr	r0, [pc, #0]	@ (8005980 <USBD_COMPOSITE_GetHSCfgDesc+0x8>)
 800597e:	4770      	bx	lr
 8005980:	2000a390 	.word	0x2000a390

08005984 <USBD_COMPOSITE_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
 8005984:	236b      	movs	r3, #107	@ 0x6b
 8005986:	8003      	strh	r3, [r0, #0]
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
}
 8005988:	4800      	ldr	r0, [pc, #0]	@ (800598c <USBD_COMPOSITE_GetFSCfgDesc+0x8>)
 800598a:	4770      	bx	lr
 800598c:	2000a3fc 	.word	0x2000a3fc

08005990 <USBD_COMPOSITE_GetDeviceQualifierDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_COMPOSITE_GetDeviceQualifierDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_COMPOSITE_DeviceQualifierDesc);
 8005990:	230a      	movs	r3, #10
 8005992:	8003      	strh	r3, [r0, #0]
  return USBD_COMPOSITE_DeviceQualifierDesc;
}
 8005994:	4800      	ldr	r0, [pc, #0]	@ (8005998 <USBD_COMPOSITE_GetDeviceQualifierDesc+0x8>)
 8005996:	4770      	bx	lr
 8005998:	20000190 	.word	0x20000190

0800599c <USBD_COMPOSITE_GetUsrStringDesc>:
static uint8_t *USBD_COMPOSITE_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
  static uint8_t USBD_StrDesc[64];

  /* Check if the requested string interface is supported */
  if (index <= USBD_Track_String_Index)
 800599c:	4b15      	ldr	r3, [pc, #84]	@ (80059f4 <USBD_COMPOSITE_GetUsrStringDesc+0x58>)
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	428b      	cmp	r3, r1
 80059a2:	d31d      	bcc.n	80059e0 <USBD_COMPOSITE_GetUsrStringDesc+0x44>
{
 80059a4:	b530      	push	{r4, r5, lr}
  {
#if (USBD_USE_CDC_ACM == 1)
    char str_buffer[16] = "";
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
    {
      if (index == CDC_STR_DESC_IDX[i])
 80059a6:	4b14      	ldr	r3, [pc, #80]	@ (80059f8 <USBD_COMPOSITE_GetUsrStringDesc+0x5c>)
 80059a8:	4614      	mov	r4, r2
 80059aa:	781a      	ldrb	r2, [r3, #0]
{
 80059ac:	b085      	sub	sp, #20
    char str_buffer[16] = "";
 80059ae:	2300      	movs	r3, #0
      if (index == CDC_STR_DESC_IDX[i])
 80059b0:	428a      	cmp	r2, r1
    char str_buffer[16] = "";
 80059b2:	e9cd 3300 	strd	r3, r3, [sp]
 80059b6:	e9cd 3302 	strd	r3, r3, [sp, #8]
      if (index == CDC_STR_DESC_IDX[i])
 80059ba:	460d      	mov	r5, r1
 80059bc:	d109      	bne.n	80059d2 <USBD_COMPOSITE_GetUsrStringDesc+0x36>
      {
        snprintf(str_buffer, sizeof(str_buffer), CDC_ACM_STR_DESC, i);
 80059be:	4a0f      	ldr	r2, [pc, #60]	@ (80059fc <USBD_COMPOSITE_GetUsrStringDesc+0x60>)
 80059c0:	2110      	movs	r1, #16
 80059c2:	4668      	mov	r0, sp
 80059c4:	f001 f866 	bl	8006a94 <sniprintf>
        USBD_GetString((uint8_t *)str_buffer, USBD_StrDesc, length);
 80059c8:	490d      	ldr	r1, [pc, #52]	@ (8005a00 <USBD_COMPOSITE_GetUsrStringDesc+0x64>)
 80059ca:	4622      	mov	r2, r4
 80059cc:	4668      	mov	r0, sp
 80059ce:	f000 fee3 	bl	8006798 <USBD_GetString>
    {
      USBD_GetString((uint8_t *)HID_KEYBOARD_STR_DESC, USBD_StrDesc, length);
    }
#endif
#if (USBD_USE_HID_CUSTOM == 1)
    if (index == CUSTOM_HID_STR_DESC_IDX)
 80059d2:	4b0c      	ldr	r3, [pc, #48]	@ (8005a04 <USBD_COMPOSITE_GetUsrStringDesc+0x68>)
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	42ab      	cmp	r3, r5
 80059d8:	d004      	beq.n	80059e4 <USBD_COMPOSITE_GetUsrStringDesc+0x48>
    if (index == PRINTER_STR_DESC_IDX)
    {
      USBD_GetString((uint8_t *)PRNT_STR_DESC, USBD_StrDesc, length);
    }
#endif
    return USBD_StrDesc;
 80059da:	4809      	ldr	r0, [pc, #36]	@ (8005a00 <USBD_COMPOSITE_GetUsrStringDesc+0x64>)
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
  }
}
 80059dc:	b005      	add	sp, #20
 80059de:	bd30      	pop	{r4, r5, pc}
    return NULL;
 80059e0:	2000      	movs	r0, #0
}
 80059e2:	4770      	bx	lr
      USBD_GetString((uint8_t *)CUSTOM_HID_STR_DESC, USBD_StrDesc, length);
 80059e4:	4906      	ldr	r1, [pc, #24]	@ (8005a00 <USBD_COMPOSITE_GetUsrStringDesc+0x64>)
 80059e6:	4808      	ldr	r0, [pc, #32]	@ (8005a08 <USBD_COMPOSITE_GetUsrStringDesc+0x6c>)
 80059e8:	4622      	mov	r2, r4
 80059ea:	f000 fed5 	bl	8006798 <USBD_GetString>
    return USBD_StrDesc;
 80059ee:	4804      	ldr	r0, [pc, #16]	@ (8005a00 <USBD_COMPOSITE_GetUsrStringDesc+0x64>)
}
 80059f0:	b005      	add	sp, #20
 80059f2:	bd30      	pop	{r4, r5, pc}
 80059f4:	2000019a 	.word	0x2000019a
 80059f8:	2000a338 	.word	0x2000a338
 80059fc:	08007460 	.word	0x08007460
 8005a00:	2000a350 	.word	0x2000a350
 8005a04:	2000a49c 	.word	0x2000a49c
 8005a08:	08007470 	.word	0x08007470

08005a0c <USBD_COMPOSITE_Setup>:
{
 8005a0c:	b530      	push	{r4, r5, lr}
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 8005a0e:	4d0f      	ldr	r5, [pc, #60]	@ (8005a4c <USBD_COMPOSITE_Setup+0x40>)
 8005a10:	790a      	ldrb	r2, [r1, #4]
 8005a12:	f895 e000 	ldrb.w	lr, [r5]
 8005a16:	4c0e      	ldr	r4, [pc, #56]	@ (8005a50 <USBD_COMPOSITE_Setup+0x44>)
 8005a18:	4596      	cmp	lr, r2
 8005a1a:	7824      	ldrb	r4, [r4, #0]
{
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	4684      	mov	ip, r0
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 8005a20:	d001      	beq.n	8005a26 <USBD_COMPOSITE_Setup+0x1a>
 8005a22:	4294      	cmp	r4, r2
 8005a24:	d106      	bne.n	8005a34 <USBD_COMPOSITE_Setup+0x28>
      return USBD_CDC_ACM.Setup(pdev, req);
 8005a26:	4a0b      	ldr	r2, [pc, #44]	@ (8005a54 <USBD_COMPOSITE_Setup+0x48>)
 8005a28:	4619      	mov	r1, r3
}
 8005a2a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return USBD_CDC_ACM.Setup(pdev, req);
 8005a2e:	6893      	ldr	r3, [r2, #8]
 8005a30:	4660      	mov	r0, ip
 8005a32:	4718      	bx	r3
  if (LOBYTE(req->wIndex) == CUSTOM_HID_ITF_NBR)
 8005a34:	4b08      	ldr	r3, [pc, #32]	@ (8005a58 <USBD_COMPOSITE_Setup+0x4c>)
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d001      	beq.n	8005a40 <USBD_COMPOSITE_Setup+0x34>
}
 8005a3c:	2003      	movs	r0, #3
 8005a3e:	bd30      	pop	{r4, r5, pc}
    return USBD_HID_CUSTOM.Setup(pdev, req);
 8005a40:	4b06      	ldr	r3, [pc, #24]	@ (8005a5c <USBD_COMPOSITE_Setup+0x50>)
}
 8005a42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return USBD_HID_CUSTOM.Setup(pdev, req);
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	4718      	bx	r3
 8005a4a:	bf00      	nop
 8005a4c:	2000a340 	.word	0x2000a340
 8005a50:	2000a33c 	.word	0x2000a33c
 8005a54:	20000148 	.word	0x20000148
 8005a58:	2000a49d 	.word	0x2000a49d
 8005a5c:	20000274 	.word	0x20000274

08005a60 <USBD_COMPOSITE_DataIn>:
{
 8005a60:	b510      	push	{r4, lr}
    if (epnum == (CDC_IN_EP[i] & 0x7F) || epnum == (CDC_CMD_EP[i] & 0x7F))
 8005a62:	4b11      	ldr	r3, [pc, #68]	@ (8005aa8 <USBD_COMPOSITE_DataIn+0x48>)
 8005a64:	4c11      	ldr	r4, [pc, #68]	@ (8005aac <USBD_COMPOSITE_DataIn+0x4c>)
 8005a66:	781a      	ldrb	r2, [r3, #0]
 8005a68:	f894 c000 	ldrb.w	ip, [r4]
 8005a6c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005a70:	4291      	cmp	r1, r2
{
 8005a72:	460b      	mov	r3, r1
 8005a74:	4686      	mov	lr, r0
    if (epnum == (CDC_IN_EP[i] & 0x7F) || epnum == (CDC_CMD_EP[i] & 0x7F))
 8005a76:	d003      	beq.n	8005a80 <USBD_COMPOSITE_DataIn+0x20>
 8005a78:	f00c 0c7f 	and.w	ip, ip, #127	@ 0x7f
 8005a7c:	4561      	cmp	r1, ip
 8005a7e:	d106      	bne.n	8005a8e <USBD_COMPOSITE_DataIn+0x2e>
      return USBD_CDC_ACM.DataIn(pdev, epnum);
 8005a80:	4a0b      	ldr	r2, [pc, #44]	@ (8005ab0 <USBD_COMPOSITE_DataIn+0x50>)
 8005a82:	4619      	mov	r1, r3
 8005a84:	4670      	mov	r0, lr
 8005a86:	6953      	ldr	r3, [r2, #20]
}
 8005a88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return USBD_CDC_ACM.DataIn(pdev, epnum);
 8005a8c:	4718      	bx	r3
  if (epnum == (CUSTOM_HID_IN_EP & 0x7F))
 8005a8e:	4a09      	ldr	r2, [pc, #36]	@ (8005ab4 <USBD_COMPOSITE_DataIn+0x54>)
 8005a90:	7812      	ldrb	r2, [r2, #0]
 8005a92:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005a96:	4291      	cmp	r1, r2
 8005a98:	d001      	beq.n	8005a9e <USBD_COMPOSITE_DataIn+0x3e>
}
 8005a9a:	2003      	movs	r0, #3
 8005a9c:	bd10      	pop	{r4, pc}
    return USBD_HID_CUSTOM.DataIn(pdev, epnum);
 8005a9e:	4b06      	ldr	r3, [pc, #24]	@ (8005ab8 <USBD_COMPOSITE_DataIn+0x58>)
}
 8005aa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return USBD_HID_CUSTOM.DataIn(pdev, epnum);
 8005aa4:	695b      	ldr	r3, [r3, #20]
 8005aa6:	4718      	bx	r3
 8005aa8:	2000a34c 	.word	0x2000a34c
 8005aac:	2000a344 	.word	0x2000a344
 8005ab0:	20000148 	.word	0x20000148
 8005ab4:	200002b1 	.word	0x200002b1
 8005ab8:	20000274 	.word	0x20000274

08005abc <USBD_COMPOSITE_DataOut>:
    if (epnum == CDC_OUT_EP[i])
 8005abc:	4b07      	ldr	r3, [pc, #28]	@ (8005adc <USBD_COMPOSITE_DataOut+0x20>)
 8005abe:	781a      	ldrb	r2, [r3, #0]
 8005ac0:	428a      	cmp	r2, r1
 8005ac2:	d102      	bne.n	8005aca <USBD_COMPOSITE_DataOut+0xe>
      return USBD_CDC_ACM.DataOut(pdev, epnum);
 8005ac4:	4b06      	ldr	r3, [pc, #24]	@ (8005ae0 <USBD_COMPOSITE_DataOut+0x24>)
 8005ac6:	699b      	ldr	r3, [r3, #24]
 8005ac8:	4718      	bx	r3
  if (epnum == CUSTOM_HID_OUT_EP)
 8005aca:	4a06      	ldr	r2, [pc, #24]	@ (8005ae4 <USBD_COMPOSITE_DataOut+0x28>)
 8005acc:	7812      	ldrb	r2, [r2, #0]
 8005ace:	428a      	cmp	r2, r1
 8005ad0:	d001      	beq.n	8005ad6 <USBD_COMPOSITE_DataOut+0x1a>
}
 8005ad2:	2003      	movs	r0, #3
 8005ad4:	4770      	bx	lr
    return USBD_HID_CUSTOM.DataOut(pdev, epnum);
 8005ad6:	4b04      	ldr	r3, [pc, #16]	@ (8005ae8 <USBD_COMPOSITE_DataOut+0x2c>)
 8005ad8:	699b      	ldr	r3, [r3, #24]
 8005ada:	4718      	bx	r3
 8005adc:	2000a348 	.word	0x2000a348
 8005ae0:	20000148 	.word	0x20000148
 8005ae4:	200002b0 	.word	0x200002b0
 8005ae8:	20000274 	.word	0x20000274

08005aec <USBD_COMPOSITE_IsoOutIncomplete>:
static uint8_t USBD_COMPOSITE_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
 8005aec:	2000      	movs	r0, #0
 8005aee:	4770      	bx	lr

08005af0 <USBD_COMPOSITE_SOF>:
static uint8_t USBD_COMPOSITE_SOF(USBD_HandleTypeDef *pdev)
 8005af0:	2000      	movs	r0, #0
 8005af2:	4770      	bx	lr

08005af4 <USBD_COMPOSITE_GetOtherSpeedCfgDesc>:
static uint8_t *USBD_COMPOSITE_GetOtherSpeedCfgDesc(uint16_t *length)
 8005af4:	236b      	movs	r3, #107	@ 0x6b
 8005af6:	8003      	strh	r3, [r0, #0]
 8005af8:	4800      	ldr	r0, [pc, #0]	@ (8005afc <USBD_COMPOSITE_GetOtherSpeedCfgDesc+0x8>)
 8005afa:	4770      	bx	lr
 8005afc:	2000a390 	.word	0x2000a390

08005b00 <USBD_COMPOSITE_Mount_Class>:
#endif

void USBD_COMPOSITE_Mount_Class(void)
{
 8005b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_HID_CUSTOM == 1)
  ptr = USBD_HID_CUSTOM.GetFSConfigDescriptor(&len);
 8005b04:	4f3e      	ldr	r7, [pc, #248]	@ (8005c00 <USBD_COMPOSITE_Mount_Class+0x100>)
  USBD_Update_HID_Custom_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 8005b06:	4c3f      	ldr	r4, [pc, #252]	@ (8005c04 <USBD_COMPOSITE_Mount_Class+0x104>)
  ptr = USBD_HID_CUSTOM.GetFSConfigDescriptor(&len);
 8005b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_CDC_ACM == 1)
  ptr = USBD_CDC_ACM.GetFSConfigDescriptor(&len);
 8005b0a:	f8df a10c 	ldr.w	sl, [pc, #268]	@ 8005c18 <USBD_COMPOSITE_Mount_Class+0x118>
{
 8005b0e:	b086      	sub	sp, #24
  uint16_t len = 0;
 8005b10:	2600      	movs	r6, #0
 8005b12:	f8ad 6016 	strh.w	r6, [sp, #22]
  ptr = USBD_HID_CUSTOM.GetFSConfigDescriptor(&len);
 8005b16:	f10d 0016 	add.w	r0, sp, #22
 8005b1a:	4798      	blx	r3
  USBD_Update_HID_Custom_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 8005b1c:	7822      	ldrb	r2, [r4, #0]
 8005b1e:	9200      	str	r2, [sp, #0]
  ptr = USBD_HID_CUSTOM.GetFSConfigDescriptor(&len);
 8005b20:	4605      	mov	r5, r0
  USBD_Update_HID_Custom_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 8005b22:	2301      	movs	r3, #1
 8005b24:	4631      	mov	r1, r6
 8005b26:	2281      	movs	r2, #129	@ 0x81
 8005b28:	f000 fa06 	bl	8005f38 <USBD_Update_HID_Custom_DESC>
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_HID_CUSTOM_DESC, ptr + 0x09, len - 0x09);
 8005b2c:	f105 0109 	add.w	r1, r5, #9
 8005b30:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8005b34:	4d34      	ldr	r5, [pc, #208]	@ (8005c08 <USBD_COMPOSITE_Mount_Class+0x108>)
 8005b36:	3a09      	subs	r2, #9
 8005b38:	4628      	mov	r0, r5
 8005b3a:	f001 f80d 	bl	8006b58 <memcpy>
  ptr = USBD_HID_CUSTOM.GetHSConfigDescriptor(&len);
 8005b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b40:	f10d 0016 	add.w	r0, sp, #22
 8005b44:	4798      	blx	r3
  USBD_Update_HID_Custom_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 8005b46:	7823      	ldrb	r3, [r4, #0]
 8005b48:	9300      	str	r3, [sp, #0]
 8005b4a:	4631      	mov	r1, r6
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	2281      	movs	r2, #129	@ 0x81
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_HID_CUSTOM_DESC, ptr + 0x09, len - 0x09);
 8005b50:	4e2e      	ldr	r6, [pc, #184]	@ (8005c0c <USBD_COMPOSITE_Mount_Class+0x10c>)
  ptr = USBD_HID_CUSTOM.GetHSConfigDescriptor(&len);
 8005b52:	4607      	mov	r7, r0
  USBD_Update_HID_Custom_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 8005b54:	f000 f9f0 	bl	8005f38 <USBD_Update_HID_Custom_DESC>
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_HID_CUSTOM_DESC, ptr + 0x09, len - 0x09);
 8005b58:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8005b5c:	f107 0109 	add.w	r1, r7, #9
 8005b60:	3a09      	subs	r2, #9
 8005b62:	4630      	mov	r0, r6
 8005b64:	f000 fff8 	bl	8006b58 <memcpy>
  USBD_Track_String_Index += 1;
 8005b68:	7823      	ldrb	r3, [r4, #0]
 8005b6a:	3301      	adds	r3, #1
  USBD_Update_CDC_ACM_DESC(ptr,
 8005b6c:	2702      	movs	r7, #2
  USBD_Track_String_Index += 1;
 8005b6e:	7023      	strb	r3, [r4, #0]
  ptr = USBD_CDC_ACM.GetFSConfigDescriptor(&len);
 8005b70:	f10d 0016 	add.w	r0, sp, #22
 8005b74:	f8da 302c 	ldr.w	r3, [sl, #44]	@ 0x2c
 8005b78:	4798      	blx	r3
  USBD_Update_CDC_ACM_DESC(ptr,
 8005b7a:	9701      	str	r7, [sp, #4]
 8005b7c:	7823      	ldrb	r3, [r4, #0]
 8005b7e:	9302      	str	r3, [sp, #8]
 8005b80:	f04f 0983 	mov.w	r9, #131	@ 0x83
 8005b84:	2382      	movs	r3, #130	@ 0x82
 8005b86:	463a      	mov	r2, r7
 8005b88:	f8cd 9000 	str.w	r9, [sp]
 8005b8c:	2101      	movs	r1, #1
  ptr = USBD_CDC_ACM.GetFSConfigDescriptor(&len);
 8005b8e:	4680      	mov	r8, r0
  USBD_Update_CDC_ACM_DESC(ptr,
 8005b90:	f7ff fe86 	bl	80058a0 <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 8005b94:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8005b98:	f108 0109 	add.w	r1, r8, #9
 8005b9c:	3a09      	subs	r2, #9
 8005b9e:	f105 0020 	add.w	r0, r5, #32
 8005ba2:	f000 ffd9 	bl	8006b58 <memcpy>

  ptr = USBD_CDC_ACM.GetHSConfigDescriptor(&len);
 8005ba6:	f8da 3028 	ldr.w	r3, [sl, #40]	@ 0x28
 8005baa:	f10d 0016 	add.w	r0, sp, #22
 8005bae:	4798      	blx	r3
  USBD_Update_CDC_ACM_DESC(ptr,
 8005bb0:	e9cd 9700 	strd	r9, r7, [sp]
 8005bb4:	7823      	ldrb	r3, [r4, #0]
 8005bb6:	9302      	str	r3, [sp, #8]
 8005bb8:	463a      	mov	r2, r7
 8005bba:	2382      	movs	r3, #130	@ 0x82
 8005bbc:	2101      	movs	r1, #1
  ptr = USBD_CDC_ACM.GetHSConfigDescriptor(&len);
 8005bbe:	4607      	mov	r7, r0
  USBD_Update_CDC_ACM_DESC(ptr,
 8005bc0:	f7ff fe6e 	bl	80058a0 <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 8005bc4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8005bc8:	f107 0109 	add.w	r1, r7, #9
 8005bcc:	3a09      	subs	r2, #9
 8005bce:	f106 0020 	add.w	r0, r6, #32
 8005bd2:	f000 ffc1 	bl	8006b58 <memcpy>

  in_ep_track += 2 * USBD_CDC_ACM_COUNT;
  out_ep_track += 1 * USBD_CDC_ACM_COUNT;
  interface_no_track += 2 * USBD_CDC_ACM_COUNT;
  USBD_Track_String_Index += USBD_CDC_ACM_COUNT;
 8005bd6:	7823      	ldrb	r3, [r4, #0]
#endif

  uint16_t CFG_SIZE = sizeof(USBD_COMPOSITE_CFG_DESC_t);
  ptr = USBD_COMPOSITE_HSCfgDesc.CONFIG_DESC;
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 8005bd8:	490d      	ldr	r1, [pc, #52]	@ (8005c10 <USBD_COMPOSITE_Mount_Class+0x110>)
 8005bda:	4a0e      	ldr	r2, [pc, #56]	@ (8005c14 <USBD_COMPOSITE_Mount_Class+0x114>)
 8005bdc:	f846 1c09 	str.w	r1, [r6, #-9]
  USBD_Track_String_Index += USBD_CDC_ACM_COUNT;
 8005be0:	3301      	adds	r3, #1
 8005be2:	7023      	strb	r3, [r4, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 8005be4:	2332      	movs	r3, #50	@ 0x32

  ptr = USBD_COMPOSITE_FSCfgDesc.CONFIG_DESC;
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 8005be6:	f845 1c09 	str.w	r1, [r5, #-9]
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 8005bea:	f846 2c05 	str.w	r2, [r6, #-5]
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 8005bee:	f806 3c01 	strb.w	r3, [r6, #-1]
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 8005bf2:	f845 2c05 	str.w	r2, [r5, #-5]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 8005bf6:	f805 3c01 	strb.w	r3, [r5, #-1]

  (void)out_ep_track;
  (void)in_ep_track;
}
 8005bfa:	b006      	add	sp, #24
 8005bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c00:	20000274 	.word	0x20000274
 8005c04:	2000019a 	.word	0x2000019a
 8005c08:	2000a405 	.word	0x2000a405
 8005c0c:	2000a399 	.word	0x2000a399
 8005c10:	006b0209 	.word	0x006b0209
 8005c14:	c0000103 	.word	0xc0000103
 8005c18:	20000148 	.word	0x20000148

08005c1c <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8005c1c:	2329      	movs	r3, #41	@ 0x29
 8005c1e:	8003      	strh	r3, [r0, #0]

  return USBD_CUSTOM_HID_CfgFSDesc;
}
 8005c20:	4800      	ldr	r0, [pc, #0]	@ (8005c24 <USBD_CUSTOM_HID_GetFSCfgDesc+0x8>)
 8005c22:	4770      	bx	lr
 8005c24:	20000248 	.word	0x20000248

08005c28 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8005c28:	2329      	movs	r3, #41	@ 0x29
 8005c2a:	8003      	strh	r3, [r0, #0]

  return USBD_CUSTOM_HID_CfgHSDesc;
}
 8005c2c:	4800      	ldr	r0, [pc, #0]	@ (8005c30 <USBD_CUSTOM_HID_GetHSCfgDesc+0x8>)
 8005c2e:	4770      	bx	lr
 8005c30:	2000021c 	.word	0x2000021c

08005c34 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8005c34:	2329      	movs	r3, #41	@ 0x29
 8005c36:	8003      	strh	r3, [r0, #0]

  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
}
 8005c38:	4800      	ldr	r0, [pc, #0]	@ (8005c3c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x8>)
 8005c3a:	4770      	bx	lr
 8005c3c:	200001f0 	.word	0x200001f0

08005c40 <USBD_CUSTOM_HID_DataIn>:
{
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom)->state = CUSTOM_HID_IDLE;
 8005c40:	f8d0 22d8 	ldr.w	r2, [r0, #728]	@ 0x2d8
 8005c44:	2300      	movs	r3, #0
 // HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6); // hoặc nháy LED nếu có
  return (uint8_t)USBD_OK;
}
 8005c46:	4618      	mov	r0, r3
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom)->state = CUSTOM_HID_IDLE;
 8005c48:	f882 3030 	strb.w	r3, [r2, #48]	@ 0x30
}
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop

08005c50 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005c50:	b510      	push	{r4, lr}
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 8005c52:	f8d0 42d8 	ldr.w	r4, [r0, #728]	@ 0x2d8

  if (hhid == NULL)
 8005c56:	b164      	cbz	r4, 8005c72 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hhid->IsReportAvailable == 1U)
 8005c58:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d107      	bne.n	8005c6e <USBD_CUSTOM_HID_EP0_RxReady+0x1e>
  {
    //((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->OutEvent(hhid->Report_buf[0], hhid->Report_buf[1]);
	  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->OutEvent(hhid->Report_buf, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 8005c5e:	f8d0 32dc 	ldr.w	r3, [r0, #732]	@ 0x2dc
 8005c62:	2120      	movs	r1, #32
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	4620      	mov	r0, r4
 8005c68:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	62e3      	str	r3, [r4, #44]	@ 0x2c
  }

  return (uint8_t)USBD_OK;
 8005c6e:	2000      	movs	r0, #0
}
 8005c70:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 8005c72:	2003      	movs	r0, #3
}
 8005c74:	bd10      	pop	{r4, pc}
 8005c76:	bf00      	nop

08005c78 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8005c78:	230a      	movs	r3, #10
 8005c7a:	8003      	strh	r3, [r0, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
}
 8005c7c:	4800      	ldr	r0, [pc, #0]	@ (8005c80 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x8>)
 8005c7e:	4770      	bx	lr
 8005c80:	200001d8 	.word	0x200001d8

08005c84 <USBD_CUSTOM_HID_DataOut>:
{
 8005c84:	b538      	push	{r3, r4, r5, lr}
  if (pdev->pClassData_HID_Custom == NULL)
 8005c86:	f8d0 52d8 	ldr.w	r5, [r0, #728]	@ 0x2d8
 8005c8a:	b17d      	cbz	r5, 8005cac <USBD_CUSTOM_HID_DataOut+0x28>
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->OutEvent(hhid->Report_buf, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 8005c8c:	f8d0 32dc 	ldr.w	r3, [r0, #732]	@ 0x2dc
 8005c90:	4604      	mov	r4, r0
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	2120      	movs	r1, #32
 8005c96:	4628      	mov	r0, r5
 8005c98:	4798      	blx	r3
  USBD_LL_PrepareReceive(pdev,CUSTOM_HID_OUT_EP,hhid->Report_buf,
 8005c9a:	4a05      	ldr	r2, [pc, #20]	@ (8005cb0 <USBD_CUSTOM_HID_DataOut+0x2c>)
 8005c9c:	2320      	movs	r3, #32
 8005c9e:	7811      	ldrb	r1, [r2, #0]
 8005ca0:	4620      	mov	r0, r4
 8005ca2:	462a      	mov	r2, r5
 8005ca4:	f000 fee6 	bl	8006a74 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8005ca8:	2000      	movs	r0, #0
}
 8005caa:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 8005cac:	2003      	movs	r0, #3
}
 8005cae:	bd38      	pop	{r3, r4, r5, pc}
 8005cb0:	200002b0 	.word	0x200002b0

08005cb4 <USBD_CUSTOM_HID_Setup>:
{
 8005cb4:	b510      	push	{r4, lr}
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 8005cb6:	f8d0 42d8 	ldr.w	r4, [r0, #728]	@ 0x2d8
{
 8005cba:	b082      	sub	sp, #8
  uint16_t status_info = 0U;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (hhid == NULL)
 8005cc2:	b13c      	cbz	r4, 8005cd4 <USBD_CUSTOM_HID_Setup+0x20>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005cc4:	780b      	ldrb	r3, [r1, #0]
 8005cc6:	f013 0360 	ands.w	r3, r3, #96	@ 0x60
 8005cca:	d021      	beq.n	8005d10 <USBD_CUSTOM_HID_Setup+0x5c>
 8005ccc:	2b20      	cmp	r3, #32
 8005cce:	d004      	beq.n	8005cda <USBD_CUSTOM_HID_Setup+0x26>
        USBD_CtlError(pdev, req);
 8005cd0:	f000 fd56 	bl	8006780 <USBD_CtlError>
    return (uint8_t)USBD_FAIL;
 8005cd4:	2003      	movs	r0, #3
}
 8005cd6:	b002      	add	sp, #8
 8005cd8:	bd10      	pop	{r4, pc}
    switch (req->bRequest)
 8005cda:	784b      	ldrb	r3, [r1, #1]
 8005cdc:	3b02      	subs	r3, #2
 8005cde:	2b09      	cmp	r3, #9
 8005ce0:	d8f6      	bhi.n	8005cd0 <USBD_CUSTOM_HID_Setup+0x1c>
 8005ce2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ce8 <USBD_CUSTOM_HID_Setup+0x34>)
 8005ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce8:	08005d55 	.word	0x08005d55
 8005cec:	08005d61 	.word	0x08005d61
 8005cf0:	08005cd1 	.word	0x08005cd1
 8005cf4:	08005cd1 	.word	0x08005cd1
 8005cf8:	08005cd1 	.word	0x08005cd1
 8005cfc:	08005cd1 	.word	0x08005cd1
 8005d00:	08005cd1 	.word	0x08005cd1
 8005d04:	08005d6d 	.word	0x08005d6d
 8005d08:	08005d7b 	.word	0x08005d7b
 8005d0c:	08005d4d 	.word	0x08005d4d
    switch (req->bRequest)
 8005d10:	784b      	ldrb	r3, [r1, #1]
 8005d12:	2b0b      	cmp	r3, #11
 8005d14:	d8dc      	bhi.n	8005cd0 <USBD_CUSTOM_HID_Setup+0x1c>
 8005d16:	a201      	add	r2, pc, #4	@ (adr r2, 8005d1c <USBD_CUSTOM_HID_Setup+0x68>)
 8005d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d1c:	08005d83 	.word	0x08005d83
 8005d20:	08005d51 	.word	0x08005d51
 8005d24:	08005cd1 	.word	0x08005cd1
 8005d28:	08005cd1 	.word	0x08005cd1
 8005d2c:	08005cd1 	.word	0x08005cd1
 8005d30:	08005cd1 	.word	0x08005cd1
 8005d34:	08005d97 	.word	0x08005d97
 8005d38:	08005cd1 	.word	0x08005cd1
 8005d3c:	08005cd1 	.word	0x08005cd1
 8005d40:	08005cd1 	.word	0x08005cd1
 8005d44:	08005da9 	.word	0x08005da9
 8005d48:	08005dbd 	.word	0x08005dbd
      hhid->Protocol = (uint8_t)(req->wValue);
 8005d4c:	788b      	ldrb	r3, [r1, #2]
 8005d4e:	6223      	str	r3, [r4, #32]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d50:	2000      	movs	r0, #0
 8005d52:	e7c0      	b.n	8005cd6 <USBD_CUSTOM_HID_Setup+0x22>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8005d54:	2201      	movs	r2, #1
 8005d56:	f104 0124 	add.w	r1, r4, #36	@ 0x24
 8005d5a:	f000 fd45 	bl	80067e8 <USBD_CtlSendData>
      break;
 8005d5e:	e7f7      	b.n	8005d50 <USBD_CUSTOM_HID_Setup+0x9c>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8005d60:	2201      	movs	r2, #1
 8005d62:	f104 0120 	add.w	r1, r4, #32
 8005d66:	f000 fd3f 	bl	80067e8 <USBD_CtlSendData>
      break;
 8005d6a:	e7f1      	b.n	8005d50 <USBD_CUSTOM_HID_Setup+0x9c>
      hhid->IsReportAvailable = 1U;
 8005d6c:	2301      	movs	r3, #1
      (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8005d6e:	88ca      	ldrh	r2, [r1, #6]
      hhid->IsReportAvailable = 1U;
 8005d70:	62e3      	str	r3, [r4, #44]	@ 0x2c
      (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8005d72:	4621      	mov	r1, r4
 8005d74:	f000 fd4e 	bl	8006814 <USBD_CtlPrepareRx>
      break;
 8005d78:	e7ea      	b.n	8005d50 <USBD_CUSTOM_HID_Setup+0x9c>
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005d7a:	884b      	ldrh	r3, [r1, #2]
 8005d7c:	0a1b      	lsrs	r3, r3, #8
 8005d7e:	6263      	str	r3, [r4, #36]	@ 0x24
      break;
 8005d80:	e7e6      	b.n	8005d50 <USBD_CUSTOM_HID_Setup+0x9c>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d82:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005d86:	2b03      	cmp	r3, #3
 8005d88:	d1a2      	bne.n	8005cd0 <USBD_CUSTOM_HID_Setup+0x1c>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005d8a:	2202      	movs	r2, #2
 8005d8c:	f10d 0106 	add.w	r1, sp, #6
 8005d90:	f000 fd2a 	bl	80067e8 <USBD_CtlSendData>
 8005d94:	e7dc      	b.n	8005d50 <USBD_CUSTOM_HID_Setup+0x9c>
      if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8005d96:	884b      	ldrh	r3, [r1, #2]
 8005d98:	0a1b      	lsrs	r3, r3, #8
 8005d9a:	2b22      	cmp	r3, #34	@ 0x22
 8005d9c:	d015      	beq.n	8005dca <USBD_CUSTOM_HID_Setup+0x116>
        if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8005d9e:	2b21      	cmp	r3, #33	@ 0x21
 8005da0:	d01b      	beq.n	8005dda <USBD_CUSTOM_HID_Setup+0x126>
 8005da2:	2200      	movs	r2, #0
  uint8_t *pbuf = NULL;
 8005da4:	4611      	mov	r1, r2
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005da6:	e7de      	b.n	8005d66 <USBD_CUSTOM_HID_Setup+0xb2>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005da8:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005dac:	2b03      	cmp	r3, #3
 8005dae:	d18f      	bne.n	8005cd0 <USBD_CUSTOM_HID_Setup+0x1c>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8005db0:	2201      	movs	r2, #1
 8005db2:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8005db6:	f000 fd17 	bl	80067e8 <USBD_CtlSendData>
 8005dba:	e7c9      	b.n	8005d50 <USBD_CUSTOM_HID_Setup+0x9c>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dbc:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005dc0:	2b03      	cmp	r3, #3
 8005dc2:	d185      	bne.n	8005cd0 <USBD_CUSTOM_HID_Setup+0x1c>
        hhid->AltSetting = (uint8_t)(req->wValue);
 8005dc4:	788b      	ldrb	r3, [r1, #2]
 8005dc6:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005dc8:	e7c2      	b.n	8005d50 <USBD_CUSTOM_HID_Setup+0x9c>
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8005dca:	88ca      	ldrh	r2, [r1, #6]
        pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->pReport;
 8005dcc:	f8d0 32dc 	ldr.w	r3, [r0, #732]	@ 0x2dc
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005dd0:	2a21      	cmp	r2, #33	@ 0x21
        pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->pReport;
 8005dd2:	6819      	ldr	r1, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005dd4:	bf28      	it	cs
 8005dd6:	2221      	movcs	r2, #33	@ 0x21
 8005dd8:	e7c5      	b.n	8005d66 <USBD_CUSTOM_HID_Setup+0xb2>
          len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8005dda:	88ca      	ldrh	r2, [r1, #6]
          pbuf = USBD_CUSTOM_HID_Desc;
 8005ddc:	4902      	ldr	r1, [pc, #8]	@ (8005de8 <USBD_CUSTOM_HID_Setup+0x134>)
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005dde:	2a09      	cmp	r2, #9
 8005de0:	bf28      	it	cs
 8005de2:	2209      	movcs	r2, #9
 8005de4:	e7bf      	b.n	8005d66 <USBD_CUSTOM_HID_Setup+0xb2>
 8005de6:	bf00      	nop
 8005de8:	200001e4 	.word	0x200001e4

08005dec <USBD_CUSTOM_HID_DeInit>:
{
 8005dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_IN_EP);
 8005dee:	4f13      	ldr	r7, [pc, #76]	@ (8005e3c <USBD_CUSTOM_HID_DeInit+0x50>)
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_OUT_EP);
 8005df0:	4e13      	ldr	r6, [pc, #76]	@ (8005e40 <USBD_CUSTOM_HID_DeInit+0x54>)
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_IN_EP);
 8005df2:	7839      	ldrb	r1, [r7, #0]
{
 8005df4:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_IN_EP);
 8005df6:	f000 fded 	bl	80069d4 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].is_used = 0U;
 8005dfa:	783b      	ldrb	r3, [r7, #0]
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_OUT_EP);
 8005dfc:	7831      	ldrb	r1, [r6, #0]
  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].is_used = 0U;
 8005dfe:	f003 030f 	and.w	r3, r3, #15
 8005e02:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005e06:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005e0a:	2500      	movs	r5, #0
 8005e0c:	625d      	str	r5, [r3, #36]	@ 0x24
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_OUT_EP);
 8005e0e:	4620      	mov	r0, r4
 8005e10:	f000 fde0 	bl	80069d4 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].is_used = 0U;
 8005e14:	7833      	ldrb	r3, [r6, #0]
  if (pdev->pClassData_HID_Custom != NULL)
 8005e16:	f8d4 22d8 	ldr.w	r2, [r4, #728]	@ 0x2d8
  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].is_used = 0U;
 8005e1a:	f003 030f 	and.w	r3, r3, #15
 8005e1e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005e22:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005e26:	f8c3 5164 	str.w	r5, [r3, #356]	@ 0x164
  if (pdev->pClassData_HID_Custom != NULL)
 8005e2a:	b12a      	cbz	r2, 8005e38 <USBD_CUSTOM_HID_DeInit+0x4c>
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->DeInit();
 8005e2c:	f8d4 32dc 	ldr.w	r3, [r4, #732]	@ 0x2dc
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	4798      	blx	r3
    pdev->pClassData_HID_Custom = NULL;
 8005e34:	f8c4 52d8 	str.w	r5, [r4, #728]	@ 0x2d8
}
 8005e38:	2000      	movs	r0, #0
 8005e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e3c:	200002b1 	.word	0x200002b1
 8005e40:	200002b0 	.word	0x200002b0

08005e44 <USBD_CUSTOM_HID_Init>:
{
 8005e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005e48:	4d25      	ldr	r5, [pc, #148]	@ (8005ee0 <USBD_CUSTOM_HID_Init+0x9c>)
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005e4a:	f8df 809c 	ldr.w	r8, [pc, #156]	@ 8005ee8 <USBD_CUSTOM_HID_Init+0xa4>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e4e:	7c02      	ldrb	r2, [r0, #16]
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005e50:	f898 1000 	ldrb.w	r1, [r8]
    pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005e54:	782b      	ldrb	r3, [r5, #0]
  pdev->pClassData_HID_Custom = (void *)hhid;
 8005e56:	4e23      	ldr	r6, [pc, #140]	@ (8005ee4 <USBD_CUSTOM_HID_Init+0xa0>)
 8005e58:	f8c0 62d8 	str.w	r6, [r0, #728]	@ 0x2d8
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e5c:	2a00      	cmp	r2, #0
    pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005e5e:	f003 030f 	and.w	r3, r3, #15
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005e62:	f001 020f 	and.w	r2, r1, #15
    pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005e66:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005e6a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005e6e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005e72:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e76:	bf0c      	ite	eq
 8005e78:	2705      	moveq	r7, #5
 8005e7a:	2701      	movne	r7, #1
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005e7c:	84d7      	strh	r7, [r2, #38]	@ 0x26
    pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005e7e:	f8a3 7166 	strh.w	r7, [r3, #358]	@ 0x166
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_IN_EP, USBD_EP_TYPE_INTR,
 8005e82:	2203      	movs	r2, #3
 8005e84:	2320      	movs	r3, #32
{
 8005e86:	4604      	mov	r4, r0
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_IN_EP, USBD_EP_TYPE_INTR,
 8005e88:	f000 fd96 	bl	80069b8 <USBD_LL_OpenEP>
  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].is_used = 1U;
 8005e8c:	f898 3000 	ldrb.w	r3, [r8]
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_OUT_EP, USBD_EP_TYPE_INTR,
 8005e90:	7829      	ldrb	r1, [r5, #0]
  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].is_used = 1U;
 8005e92:	f003 030f 	and.w	r3, r3, #15
 8005e96:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005e9a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005e9e:	2701      	movs	r7, #1
 8005ea0:	849f      	strh	r7, [r3, #36]	@ 0x24
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_OUT_EP, USBD_EP_TYPE_INTR,
 8005ea2:	2203      	movs	r2, #3
 8005ea4:	2320      	movs	r3, #32
 8005ea6:	4620      	mov	r0, r4
 8005ea8:	f000 fd86 	bl	80069b8 <USBD_LL_OpenEP>
  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].is_used = 1U;
 8005eac:	782b      	ldrb	r3, [r5, #0]
 8005eae:	f003 030f 	and.w	r3, r3, #15
 8005eb2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005eb6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005eba:	f8a3 7164 	strh.w	r7, [r3, #356]	@ 0x164
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->Init();
 8005ebe:	f8d4 32dc 	ldr.w	r3, [r4, #732]	@ 0x2dc
  hhid->state = CUSTOM_HID_IDLE;
 8005ec2:	2700      	movs	r7, #0
 8005ec4:	f886 7030 	strb.w	r7, [r6, #48]	@ 0x30
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->Init();
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	4798      	blx	r3
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_OUT_EP, hhid->Report_buf,
 8005ecc:	7829      	ldrb	r1, [r5, #0]
 8005ece:	2320      	movs	r3, #32
 8005ed0:	4632      	mov	r2, r6
 8005ed2:	4620      	mov	r0, r4
 8005ed4:	f000 fdce 	bl	8006a74 <USBD_LL_PrepareReceive>
}
 8005ed8:	4638      	mov	r0, r7
 8005eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ede:	bf00      	nop
 8005ee0:	200002b0 	.word	0x200002b0
 8005ee4:	2000a468 	.word	0x2000a468
 8005ee8:	200002b1 	.word	0x200002b1

08005eec <USBD_CUSTOM_HID_SendReport>:
{
 8005eec:	b508      	push	{r3, lr}
  if (pdev->pClassData_HID_Custom == NULL)
 8005eee:	f8d0 32d8 	ldr.w	r3, [r0, #728]	@ 0x2d8
 8005ef2:	b1ab      	cbz	r3, 8005f20 <USBD_CUSTOM_HID_SendReport+0x34>
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ef4:	468e      	mov	lr, r1
 8005ef6:	f890 129c 	ldrb.w	r1, [r0, #668]	@ 0x29c
 8005efa:	2903      	cmp	r1, #3
 8005efc:	d001      	beq.n	8005f02 <USBD_CUSTOM_HID_SendReport+0x16>
  return (uint8_t)USBD_OK;
 8005efe:	2000      	movs	r0, #0
}
 8005f00:	bd08      	pop	{r3, pc}
    if (hhid->state == CUSTOM_HID_IDLE)
 8005f02:	f893 1030 	ldrb.w	r1, [r3, #48]	@ 0x30
 8005f06:	b109      	cbz	r1, 8005f0c <USBD_CUSTOM_HID_SendReport+0x20>
      return (uint8_t)USBD_BUSY;
 8005f08:	2001      	movs	r0, #1
}
 8005f0a:	bd08      	pop	{r3, pc}
      hhid->state = CUSTOM_HID_BUSY;
 8005f0c:	2101      	movs	r1, #1
 8005f0e:	f883 1030 	strb.w	r1, [r3, #48]	@ 0x30
      (void)USBD_LL_Transmit(pdev, CUSTOM_HID_IN_EP, report, len);
 8005f12:	4904      	ldr	r1, [pc, #16]	@ (8005f24 <USBD_CUSTOM_HID_SendReport+0x38>)
 8005f14:	4613      	mov	r3, r2
 8005f16:	7809      	ldrb	r1, [r1, #0]
 8005f18:	4672      	mov	r2, lr
 8005f1a:	f000 fd9f 	bl	8006a5c <USBD_LL_Transmit>
 8005f1e:	e7ee      	b.n	8005efe <USBD_CUSTOM_HID_SendReport+0x12>
    return (uint8_t)USBD_FAIL;
 8005f20:	2003      	movs	r0, #3
}
 8005f22:	bd08      	pop	{r3, pc}
 8005f24:	200002b1 	.word	0x200002b1

08005f28 <USBD_CUSTOM_HID_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
  if (fops == NULL)
 8005f28:	b119      	cbz	r1, 8005f32 <USBD_CUSTOM_HID_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData_HID_Custom = fops;
 8005f2a:	f8c0 12dc 	str.w	r1, [r0, #732]	@ 0x2dc

  return (uint8_t)USBD_OK;
 8005f2e:	2000      	movs	r0, #0
 8005f30:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8005f32:	2003      	movs	r0, #3
}
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop

08005f38 <USBD_Update_HID_Custom_DESC>:

void USBD_Update_HID_Custom_DESC(uint8_t *desc, uint8_t itf_no, uint8_t in_ep, uint8_t out_ep, uint8_t str_idx)
{
 8005f38:	f89d c000 	ldrb.w	ip, [sp]
  desc[11] = itf_no;
  desc[17] = str_idx;
  desc[29] = in_ep;
 8005f3c:	7742      	strb	r2, [r0, #29]
  desc[36] = out_ep;
 8005f3e:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  desc[11] = itf_no;
 8005f42:	72c1      	strb	r1, [r0, #11]
  desc[17] = str_idx;
 8005f44:	f880 c011 	strb.w	ip, [r0, #17]

  CUSTOM_HID_IN_EP = in_ep;
 8005f48:	4804      	ldr	r0, [pc, #16]	@ (8005f5c <USBD_Update_HID_Custom_DESC+0x24>)
 8005f4a:	7002      	strb	r2, [r0, #0]
  CUSTOM_HID_OUT_EP = out_ep;
 8005f4c:	4804      	ldr	r0, [pc, #16]	@ (8005f60 <USBD_Update_HID_Custom_DESC+0x28>)
  CUSTOM_HID_ITF_NBR = itf_no;
 8005f4e:	4a05      	ldr	r2, [pc, #20]	@ (8005f64 <USBD_Update_HID_Custom_DESC+0x2c>)
  CUSTOM_HID_OUT_EP = out_ep;
 8005f50:	7003      	strb	r3, [r0, #0]
  CUSTOM_HID_STR_DESC_IDX = str_idx;
 8005f52:	4b05      	ldr	r3, [pc, #20]	@ (8005f68 <USBD_Update_HID_Custom_DESC+0x30>)
  CUSTOM_HID_ITF_NBR = itf_no;
 8005f54:	7011      	strb	r1, [r2, #0]
  CUSTOM_HID_STR_DESC_IDX = str_idx;
 8005f56:	f883 c000 	strb.w	ip, [r3]
}
 8005f5a:	4770      	bx	lr
 8005f5c:	200002b1 	.word	0x200002b1
 8005f60:	200002b0 	.word	0x200002b0
 8005f64:	2000a49d 	.word	0x2000a49d
 8005f68:	2000a49c 	.word	0x2000a49c

08005f6c <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005f6c:	b168      	cbz	r0, 8005f8a <USBD_Init+0x1e>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	f8c0 32b8 	str.w	r3, [r0, #696]	@ 0x2b8
  pdev->pConfDesc = NULL;
 8005f74:	f8c0 3318 	str.w	r3, [r0, #792]	@ 0x318

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005f78:	b109      	cbz	r1, 8005f7e <USBD_Init+0x12>
  {
    pdev->pDesc = pdesc;
 8005f7a:	f8c0 12b4 	str.w	r1, [r0, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  pdev->id = id;
 8005f84:	7002      	strb	r2, [r0, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005f86:	f000 bcd1 	b.w	800692c <USBD_LL_Init>

  return ret;
}
 8005f8a:	2003      	movs	r0, #3
 8005f8c:	4770      	bx	lr
 8005f8e:	bf00      	nop

08005f90 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005f90:	b510      	push	{r4, lr}
 8005f92:	b082      	sub	sp, #8
  uint16_t len = 0U;
 8005f94:	2300      	movs	r3, #0
 8005f96:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 8005f9a:	b191      	cbz	r1, 8005fc2 <USBD_RegisterClass+0x32>

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;

  /* Get Device Configuration Descriptor */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f9c:	7c03      	ldrb	r3, [r0, #16]
  pdev->pClass = pclass;
 8005f9e:	f8c0 12b8 	str.w	r1, [r0, #696]	@ 0x2b8
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fa2:	4604      	mov	r4, r0
 8005fa4:	b14b      	cbz	r3, 8005fba <USBD_RegisterClass+0x2a>
	  if (pdev->pClass->GetHSConfigDescriptor != NULL)
	  {
		  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
	  }
  }
  else if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005fa6:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8005fa8:	b123      	cbz	r3, 8005fb4 <USBD_RegisterClass+0x24>
		  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005faa:	f10d 0006 	add.w	r0, sp, #6
 8005fae:	4798      	blx	r3
 8005fb0:	f8c4 0318 	str.w	r0, [r4, #792]	@ 0x318
  {
	  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
  }

  return USBD_OK;
 8005fb4:	2000      	movs	r0, #0
}
 8005fb6:	b002      	add	sp, #8
 8005fb8:	bd10      	pop	{r4, pc}
	  if (pdev->pClass->GetHSConfigDescriptor != NULL)
 8005fba:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d1f4      	bne.n	8005faa <USBD_RegisterClass+0x1a>
 8005fc0:	e7f8      	b.n	8005fb4 <USBD_RegisterClass+0x24>
    return USBD_FAIL;
 8005fc2:	2003      	movs	r0, #3
}
 8005fc4:	b002      	add	sp, #8
 8005fc6:	bd10      	pop	{r4, pc}

08005fc8 <USBD_Start>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005fc8:	f000 bcea 	b.w	80069a0 <USBD_LL_Start>

08005fcc <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8005fcc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8005fd0:	b10b      	cbz	r3, 8005fd6 <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4718      	bx	r3
  }

  return ret;
}
 8005fd6:	2003      	movs	r0, #3
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop

08005fdc <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005fdc:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005fde:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8005fe2:	b10b      	cbz	r3, 8005fe8 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	4798      	blx	r3
  }

  return USBD_OK;
}
 8005fe8:	2000      	movs	r0, #0
 8005fea:	bd08      	pop	{r3, pc}

08005fec <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005fec:	b538      	push	{r3, r4, r5, lr}
 8005fee:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005ff0:	f200 25aa 	addw	r5, r0, #682	@ 0x2aa
 8005ff4:	4628      	mov	r0, r5
 8005ff6:	f000 fbb7 	bl	8006768 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8005ffa:	f894 12aa 	ldrb.w	r1, [r4, #682]	@ 0x2aa
  pdev->ep0_data_len = pdev->request.wLength;
 8005ffe:	f8b4 22b0 	ldrh.w	r2, [r4, #688]	@ 0x2b0
 8006002:	f8c4 2298 	str.w	r2, [r4, #664]	@ 0x298
  pdev->ep0_state = USBD_EP0_SETUP;
 8006006:	2301      	movs	r3, #1
 8006008:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 800600c:	f001 031f 	and.w	r3, r1, #31
 8006010:	2b01      	cmp	r3, #1
 8006012:	d00e      	beq.n	8006032 <USBD_LL_SetupStage+0x46>
 8006014:	2b02      	cmp	r3, #2
 8006016:	d006      	beq.n	8006026 <USBD_LL_SetupStage+0x3a>
 8006018:	b98b      	cbnz	r3, 800603e <USBD_LL_SetupStage+0x52>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800601a:	4629      	mov	r1, r5
 800601c:	4620      	mov	r0, r4
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return ret;
}
 800601e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006022:	f000 b929 	b.w	8006278 <USBD_StdDevReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006026:	4629      	mov	r1, r5
 8006028:	4620      	mov	r0, r4
}
 800602a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800602e:	f000 baff 	b.w	8006630 <USBD_StdEPReq>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006032:	4629      	mov	r1, r5
 8006034:	4620      	mov	r0, r4
}
 8006036:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800603a:	f000 bac3 	b.w	80065c4 <USBD_StdItfReq>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800603e:	4620      	mov	r0, r4
 8006040:	f001 0180 	and.w	r1, r1, #128	@ 0x80
}
 8006044:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006048:	f000 bcd0 	b.w	80069ec <USBD_LL_StallEP>

0800604c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800604c:	b510      	push	{r4, lr}
 800604e:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006050:	b931      	cbnz	r1, 8006060 <USBD_LL_DataOutStage+0x14>
 8006052:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006054:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8006058:	2a03      	cmp	r2, #3
 800605a:	d00d      	beq.n	8006078 <USBD_LL_DataOutStage+0x2c>
      }
    }
  }

  return USBD_OK;
}
 800605c:	2000      	movs	r0, #0
 800605e:	bd10      	pop	{r4, pc}
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006060:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8006064:	2b03      	cmp	r3, #3
 8006066:	d1f9      	bne.n	800605c <USBD_LL_DataOutStage+0x10>
      if (pdev->pClass->DataOut != NULL)
 8006068:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800606c:	699b      	ldr	r3, [r3, #24]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d0f4      	beq.n	800605c <USBD_LL_DataOutStage+0x10>
}
 8006072:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006076:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 8006078:	e9d0 1257 	ldrd	r1, r2, [r0, #348]	@ 0x15c
 800607c:	4291      	cmp	r1, r2
 800607e:	d808      	bhi.n	8006092 <USBD_LL_DataOutStage+0x46>
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006080:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8006084:	2b03      	cmp	r3, #3
 8006086:	d00e      	beq.n	80060a6 <USBD_LL_DataOutStage+0x5a>
        (void)USBD_CtlSendStatus(pdev);
 8006088:	4620      	mov	r0, r4
 800608a:	f000 fbd9 	bl	8006840 <USBD_CtlSendStatus>
}
 800608e:	2000      	movs	r0, #0
 8006090:	bd10      	pop	{r4, pc}
        pep->rem_length -= pep->maxpacket;
 8006092:	1a89      	subs	r1, r1, r2
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006094:	428a      	cmp	r2, r1
 8006096:	bf28      	it	cs
 8006098:	460a      	movcs	r2, r1
        pep->rem_length -= pep->maxpacket;
 800609a:	f8c0 115c 	str.w	r1, [r0, #348]	@ 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800609e:	4619      	mov	r1, r3
 80060a0:	f000 fbc6 	bl	8006830 <USBD_CtlContinueRx>
 80060a4:	e7da      	b.n	800605c <USBD_LL_DataOutStage+0x10>
          if (pdev->pClass->EP0_RxReady != NULL)
 80060a6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80060aa:	691b      	ldr	r3, [r3, #16]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d0eb      	beq.n	8006088 <USBD_LL_DataOutStage+0x3c>
            pdev->pClass->EP0_RxReady(pdev);
 80060b0:	4798      	blx	r3
 80060b2:	e7e9      	b.n	8006088 <USBD_LL_DataOutStage+0x3c>

080060b4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80060b4:	b570      	push	{r4, r5, r6, lr}
 80060b6:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80060b8:	b951      	cbnz	r1, 80060d0 <USBD_LL_DataInStage+0x1c>
 80060ba:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80060bc:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 80060c0:	2a02      	cmp	r2, #2
 80060c2:	d011      	beq.n	80060e8 <USBD_LL_DataInStage+0x34>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80060c4:	f894 32a0 	ldrb.w	r3, [r4, #672]	@ 0x2a0
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d022      	beq.n	8006112 <USBD_LL_DataInStage+0x5e>
      }
    }
  }

  return USBD_OK;
}
 80060cc:	2000      	movs	r0, #0
 80060ce:	bd70      	pop	{r4, r5, r6, pc}
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060d0:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80060d4:	2b03      	cmp	r3, #3
 80060d6:	d1f9      	bne.n	80060cc <USBD_LL_DataInStage+0x18>
      if (pdev->pClass->DataIn != NULL)
 80060d8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80060dc:	695b      	ldr	r3, [r3, #20]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d0f4      	beq.n	80060cc <USBD_LL_DataInStage+0x18>
}
 80060e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80060e6:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 80060e8:	e9d0 2607 	ldrd	r2, r6, [r0, #28]
 80060ec:	42b2      	cmp	r2, r6
 80060ee:	460d      	mov	r5, r1
 80060f0:	d814      	bhi.n	800611c <USBD_LL_DataInStage+0x68>
        if ((pep->maxpacket == pep->rem_length) &&
 80060f2:	d01f      	beq.n	8006134 <USBD_LL_DataInStage+0x80>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060f4:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 80060f8:	2b03      	cmp	r3, #3
 80060fa:	d028      	beq.n	800614e <USBD_LL_DataInStage+0x9a>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80060fc:	2180      	movs	r1, #128	@ 0x80
 80060fe:	4620      	mov	r0, r4
 8006100:	f000 fc74 	bl	80069ec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006104:	4620      	mov	r0, r4
 8006106:	f000 fba7 	bl	8006858 <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode == 1U)
 800610a:	f894 32a0 	ldrb.w	r3, [r4, #672]	@ 0x2a0
 800610e:	2b01      	cmp	r3, #1
 8006110:	d1dc      	bne.n	80060cc <USBD_LL_DataInStage+0x18>
      pdev->dev_test_mode = 0U;
 8006112:	2300      	movs	r3, #0
 8006114:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
}
 8006118:	2000      	movs	r0, #0
 800611a:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 800611c:	1b92      	subs	r2, r2, r6
 800611e:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006120:	4619      	mov	r1, r3
 8006122:	f000 fb6f 	bl	8006804 <USBD_CtlContinueSendData>
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006126:	462b      	mov	r3, r5
 8006128:	462a      	mov	r2, r5
 800612a:	4629      	mov	r1, r5
 800612c:	4620      	mov	r0, r4
 800612e:	f000 fca1 	bl	8006a74 <USBD_LL_PrepareReceive>
 8006132:	e7c7      	b.n	80060c4 <USBD_LL_DataInStage+0x10>
            (pep->total_length >= pep->maxpacket) &&
 8006134:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8006136:	429a      	cmp	r2, r3
 8006138:	d8dc      	bhi.n	80060f4 <USBD_LL_DataInStage+0x40>
            (pep->total_length >= pep->maxpacket) &&
 800613a:	f8d0 2298 	ldr.w	r2, [r0, #664]	@ 0x298
 800613e:	4293      	cmp	r3, r2
 8006140:	d2d8      	bcs.n	80060f4 <USBD_LL_DataInStage+0x40>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006142:	460a      	mov	r2, r1
 8006144:	f000 fb5e 	bl	8006804 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006148:	f8c4 5298 	str.w	r5, [r4, #664]	@ 0x298
 800614c:	e7eb      	b.n	8006126 <USBD_LL_DataInStage+0x72>
            if (pdev->pClass->EP0_TxSent != NULL)
 800614e:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d0d1      	beq.n	80060fc <USBD_LL_DataInStage+0x48>
              pdev->pClass->EP0_TxSent(pdev);
 8006158:	4620      	mov	r0, r4
 800615a:	4798      	blx	r3
 800615c:	e7ce      	b.n	80060fc <USBD_LL_DataInStage+0x48>
 800615e:	bf00      	nop

08006160 <USBD_LL_Reset>:
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClass == NULL)
 8006160:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
  pdev->ep0_state = USBD_EP0_IDLE;
 8006164:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006166:	2201      	movs	r2, #1
 8006168:	f880 229c 	strb.w	r2, [r0, #668]	@ 0x29c
  pdev->dev_config = 0U;
 800616c:	6041      	str	r1, [r0, #4]
  pdev->ep0_state = USBD_EP0_IDLE;
 800616e:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
  pdev->dev_remote_wakeup = 0U;
 8006172:	f8c0 12a4 	str.w	r1, [r0, #676]	@ 0x2a4
  if (pdev->pClass == NULL)
 8006176:	b1d3      	cbz	r3, 80061ae <USBD_LL_Reset+0x4e>
  {
    return USBD_FAIL;
  }

	if (pdev->pClass->DeInit != NULL)
 8006178:	685b      	ldr	r3, [r3, #4]
{
 800617a:	b570      	push	{r4, r5, r6, lr}
 800617c:	4604      	mov	r4, r0
	if (pdev->pClass->DeInit != NULL)
 800617e:	b103      	cbz	r3, 8006182 <USBD_LL_Reset+0x22>
	{
	  (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006180:	4798      	blx	r3
	}

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006182:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006184:	2540      	movs	r5, #64	@ 0x40
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006186:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006188:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800618a:	2340      	movs	r3, #64	@ 0x40
 800618c:	4620      	mov	r0, r4
 800618e:	f000 fc13 	bl	80069b8 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006192:	f8a4 6164 	strh.w	r6, [r4, #356]	@ 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006196:	f8c4 5160 	str.w	r5, [r4, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800619a:	462b      	mov	r3, r5
 800619c:	2200      	movs	r2, #0
 800619e:	2180      	movs	r1, #128	@ 0x80
 80061a0:	4620      	mov	r0, r4
 80061a2:	f000 fc09 	bl	80069b8 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  return USBD_OK;
 80061a6:	2000      	movs	r0, #0
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80061a8:	84a6      	strh	r6, [r4, #36]	@ 0x24
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80061aa:	6225      	str	r5, [r4, #32]
}
 80061ac:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 80061ae:	2003      	movs	r0, #3
}
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop

080061b4 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80061b4:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 80061b6:	2000      	movs	r0, #0
 80061b8:	4770      	bx	lr
 80061ba:	bf00      	nop

080061bc <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 80061bc:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
{
 80061c0:	4603      	mov	r3, r0
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80061c2:	2104      	movs	r1, #4
  pdev->dev_old_state = pdev->dev_state;
 80061c4:	b2d2      	uxtb	r2, r2
 80061c6:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d

  return USBD_OK;
}
 80061ca:	2000      	movs	r0, #0
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80061cc:	f883 129c 	strb.w	r1, [r3, #668]	@ 0x29c
}
 80061d0:	4770      	bx	lr
 80061d2:	bf00      	nop

080061d4 <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80061d4:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80061d8:	2b04      	cmp	r3, #4
 80061da:	d104      	bne.n	80061e6 <USBD_LL_Resume+0x12>
  {
    pdev->dev_state = pdev->dev_old_state;
 80061dc:	f890 329d 	ldrb.w	r3, [r0, #669]	@ 0x29d
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  }

  return USBD_OK;
}
 80061e6:	2000      	movs	r0, #0
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop

080061ec <USBD_LL_SOF>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->pClass == NULL)
 80061ec:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
 80061f0:	b162      	cbz	r2, 800620c <USBD_LL_SOF+0x20>
{
 80061f2:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061f4:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80061f8:	2b03      	cmp	r3, #3
 80061fa:	d001      	beq.n	8006200 <USBD_LL_SOF+0x14>
    {
      (void)pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
 80061fc:	2000      	movs	r0, #0
}
 80061fe:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 8006200:	69d3      	ldr	r3, [r2, #28]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d0fa      	beq.n	80061fc <USBD_LL_SOF+0x10>
      (void)pdev->pClass->SOF(pdev);
 8006206:	4798      	blx	r3
  return USBD_OK;
 8006208:	2000      	movs	r0, #0
}
 800620a:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800620c:	2003      	movs	r0, #3
}
 800620e:	4770      	bx	lr

08006210 <USBD_LL_IsoINIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
  if (pdev->pClass == NULL)
 8006210:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
 8006214:	b162      	cbz	r2, 8006230 <USBD_LL_IsoINIncomplete+0x20>
{
 8006216:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006218:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800621c:	2b03      	cmp	r3, #3
 800621e:	d001      	beq.n	8006224 <USBD_LL_IsoINIncomplete+0x14>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 8006220:	2000      	movs	r0, #0
}
 8006222:	bd08      	pop	{r3, pc}
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006224:	6a13      	ldr	r3, [r2, #32]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d0fa      	beq.n	8006220 <USBD_LL_IsoINIncomplete+0x10>
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800622a:	4798      	blx	r3
  return USBD_OK;
 800622c:	2000      	movs	r0, #0
}
 800622e:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8006230:	2003      	movs	r0, #3
}
 8006232:	4770      	bx	lr

08006234 <USBD_LL_IsoOUTIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
  if (pdev->pClass == NULL)
 8006234:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
 8006238:	b162      	cbz	r2, 8006254 <USBD_LL_IsoOUTIncomplete+0x20>
{
 800623a:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800623c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8006240:	2b03      	cmp	r3, #3
 8006242:	d001      	beq.n	8006248 <USBD_LL_IsoOUTIncomplete+0x14>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 8006244:	2000      	movs	r0, #0
}
 8006246:	bd08      	pop	{r3, pc}
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006248:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 800624a:	2b00      	cmp	r3, #0
 800624c:	d0fa      	beq.n	8006244 <USBD_LL_IsoOUTIncomplete+0x10>
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800624e:	4798      	blx	r3
  return USBD_OK;
 8006250:	2000      	movs	r0, #0
}
 8006252:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8006254:	2003      	movs	r0, #3
}
 8006256:	4770      	bx	lr

08006258 <USBD_LL_DevConnected>:
  * @brief  USBD_LL_DevConnected
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
 8006258:	2000      	movs	r0, #0
 800625a:	4770      	bx	lr

0800625c <USBD_LL_DevDisconnected>:
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;

  if (pdev->pClass != NULL)
 800625c:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006260:	2101      	movs	r1, #1
 8006262:	f880 129c 	strb.w	r1, [r0, #668]	@ 0x29c
  if (pdev->pClass != NULL)
 8006266:	b12a      	cbz	r2, 8006274 <USBD_LL_DevDisconnected+0x18>
{
 8006268:	b508      	push	{r3, lr}
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800626a:	6852      	ldr	r2, [r2, #4]
 800626c:	7901      	ldrb	r1, [r0, #4]
 800626e:	4790      	blx	r2
  }

  return USBD_OK;
}
 8006270:	2000      	movs	r0, #0
 8006272:	bd08      	pop	{r3, pc}
 8006274:	2000      	movs	r0, #0
 8006276:	4770      	bx	lr

08006278 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006278:	b530      	push	{r4, r5, lr}
 800627a:	780b      	ldrb	r3, [r1, #0]
 800627c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006280:	2b20      	cmp	r3, #32
{
 8006282:	b083      	sub	sp, #12
 8006284:	460d      	mov	r5, r1
 8006286:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006288:	d028      	beq.n	80062dc <USBD_StdDevReq+0x64>
 800628a:	2b40      	cmp	r3, #64	@ 0x40
 800628c:	d026      	beq.n	80062dc <USBD_StdDevReq+0x64>
 800628e:	b15b      	cbz	r3, 80062a8 <USBD_StdDevReq+0x30>
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006290:	2180      	movs	r1, #128	@ 0x80
 8006292:	4620      	mov	r0, r4
 8006294:	f000 fbaa 	bl	80069ec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006298:	2100      	movs	r1, #0
 800629a:	4620      	mov	r0, r4
 800629c:	f000 fba6 	bl	80069ec <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 80062a0:	2500      	movs	r5, #0
}
 80062a2:	4628      	mov	r0, r5
 80062a4:	b003      	add	sp, #12
 80062a6:	bd30      	pop	{r4, r5, pc}
      switch (req->bRequest)
 80062a8:	784b      	ldrb	r3, [r1, #1]
 80062aa:	2b09      	cmp	r3, #9
 80062ac:	d8f0      	bhi.n	8006290 <USBD_StdDevReq+0x18>
 80062ae:	a201      	add	r2, pc, #4	@ (adr r2, 80062b4 <USBD_StdDevReq+0x3c>)
 80062b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b4:	08006327 	.word	0x08006327
 80062b8:	0800634f 	.word	0x0800634f
 80062bc:	08006291 	.word	0x08006291
 80062c0:	0800636d 	.word	0x0800636d
 80062c4:	08006291 	.word	0x08006291
 80062c8:	08006375 	.word	0x08006375
 80062cc:	080063af 	.word	0x080063af
 80062d0:	08006291 	.word	0x08006291
 80062d4:	080063e5 	.word	0x080063e5
 80062d8:	080062ef 	.word	0x080062ef
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80062dc:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	4629      	mov	r1, r5
 80062e4:	4620      	mov	r0, r4
}
 80062e6:	b003      	add	sp, #12
 80062e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80062ec:	4718      	bx	r3
  cfgidx = (uint8_t)(req->wValue);
 80062ee:	7889      	ldrb	r1, [r1, #2]
 80062f0:	4db3      	ldr	r5, [pc, #716]	@ (80065c0 <USBD_StdDevReq+0x348>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80062f2:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 80062f4:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80062f6:	f200 8134 	bhi.w	8006562 <USBD_StdDevReq+0x2ea>
  switch (pdev->dev_state)
 80062fa:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80062fe:	2b02      	cmp	r3, #2
 8006300:	b2da      	uxtb	r2, r3
 8006302:	f000 8115 	beq.w	8006530 <USBD_StdDevReq+0x2b8>
 8006306:	2a03      	cmp	r2, #3
 8006308:	f000 80f0 	beq.w	80064ec <USBD_StdDevReq+0x274>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800630c:	2180      	movs	r1, #128	@ 0x80
 800630e:	f000 fb6d 	bl	80069ec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006312:	2100      	movs	r1, #0
 8006314:	4620      	mov	r0, r4
 8006316:	f000 fb69 	bl	80069ec <USBD_LL_StallEP>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800631a:	7829      	ldrb	r1, [r5, #0]
 800631c:	4620      	mov	r0, r4
 800631e:	f7ff fe5d 	bl	8005fdc <USBD_ClrClassConfig>
    return USBD_FAIL;
 8006322:	2503      	movs	r5, #3
 8006324:	e7bd      	b.n	80062a2 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 8006326:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800632a:	3b01      	subs	r3, #1
 800632c:	2b02      	cmp	r3, #2
 800632e:	d8af      	bhi.n	8006290 <USBD_StdDevReq+0x18>
      if (req->wLength != 0x2U)
 8006330:	88ca      	ldrh	r2, [r1, #6]
 8006332:	2a02      	cmp	r2, #2
 8006334:	d1ac      	bne.n	8006290 <USBD_StdDevReq+0x18>
      if (pdev->dev_remote_wakeup != 0U)
 8006336:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 800633a:	4601      	mov	r1, r0
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800633c:	2b00      	cmp	r3, #0
 800633e:	bf0c      	ite	eq
 8006340:	2301      	moveq	r3, #1
 8006342:	2303      	movne	r3, #3
 8006344:	f841 3f0c 	str.w	r3, [r1, #12]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006348:	f000 fa4e 	bl	80067e8 <USBD_CtlSendData>
      break;
 800634c:	e7a8      	b.n	80062a0 <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 800634e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8006352:	3b01      	subs	r3, #1
 8006354:	2b02      	cmp	r3, #2
 8006356:	d89b      	bhi.n	8006290 <USBD_StdDevReq+0x18>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006358:	884b      	ldrh	r3, [r1, #2]
 800635a:	2b01      	cmp	r3, #1
 800635c:	d1a0      	bne.n	80062a0 <USBD_StdDevReq+0x28>
        pdev->dev_remote_wakeup = 0U;
 800635e:	2300      	movs	r3, #0
 8006360:	f8c4 32a4 	str.w	r3, [r4, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006364:	4620      	mov	r0, r4
 8006366:	f000 fa6b 	bl	8006840 <USBD_CtlSendStatus>
 800636a:	e799      	b.n	80062a0 <USBD_StdDevReq+0x28>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800636c:	884b      	ldrh	r3, [r1, #2]
 800636e:	2b01      	cmp	r3, #1
 8006370:	d196      	bne.n	80062a0 <USBD_StdDevReq+0x28>
 8006372:	e7f5      	b.n	8006360 <USBD_StdDevReq+0xe8>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006374:	888b      	ldrh	r3, [r1, #4]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d18a      	bne.n	8006290 <USBD_StdDevReq+0x18>
 800637a:	88cb      	ldrh	r3, [r1, #6]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d187      	bne.n	8006290 <USBD_StdDevReq+0x18>
 8006380:	884b      	ldrh	r3, [r1, #2]
 8006382:	2b7f      	cmp	r3, #127	@ 0x7f
 8006384:	d884      	bhi.n	8006290 <USBD_StdDevReq+0x18>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006386:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 800638a:	2a03      	cmp	r2, #3
 800638c:	d080      	beq.n	8006290 <USBD_StdDevReq+0x18>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800638e:	b2dd      	uxtb	r5, r3
      pdev->dev_address = dev_addr;
 8006390:	f880 529e 	strb.w	r5, [r0, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006394:	4629      	mov	r1, r5
 8006396:	f000 fb55 	bl	8006a44 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800639a:	4620      	mov	r0, r4
 800639c:	f000 fa50 	bl	8006840 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80063a0:	2d00      	cmp	r5, #0
 80063a2:	f000 80fe 	beq.w	80065a2 <USBD_StdDevReq+0x32a>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80063a6:	2302      	movs	r3, #2
 80063a8:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 80063ac:	e778      	b.n	80062a0 <USBD_StdDevReq+0x28>
  switch (req->wValue >> 8)
 80063ae:	884a      	ldrh	r2, [r1, #2]
 80063b0:	0a13      	lsrs	r3, r2, #8
  uint16_t len = 0U;
 80063b2:	2100      	movs	r1, #0
  switch (req->wValue >> 8)
 80063b4:	3b01      	subs	r3, #1
  uint16_t len = 0U;
 80063b6:	f8ad 1006 	strh.w	r1, [sp, #6]
  switch (req->wValue >> 8)
 80063ba:	2b06      	cmp	r3, #6
 80063bc:	f63f af68 	bhi.w	8006290 <USBD_StdDevReq+0x18>
 80063c0:	a101      	add	r1, pc, #4	@ (adr r1, 80063c8 <USBD_StdDevReq+0x150>)
 80063c2:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80063c6:	bf00      	nop
 80063c8:	0800648b 	.word	0x0800648b
 80063cc:	08006471 	.word	0x08006471
 80063d0:	0800645f 	.word	0x0800645f
 80063d4:	08006291 	.word	0x08006291
 80063d8:	08006291 	.word	0x08006291
 80063dc:	08006449 	.word	0x08006449
 80063e0:	0800640d 	.word	0x0800640d
  if (req->wLength != 1U)
 80063e4:	88ca      	ldrh	r2, [r1, #6]
 80063e6:	2a01      	cmp	r2, #1
 80063e8:	f47f af52 	bne.w	8006290 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 80063ec:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80063f0:	2b02      	cmp	r3, #2
 80063f2:	b2d9      	uxtb	r1, r3
 80063f4:	f200 80ae 	bhi.w	8006554 <USBD_StdDevReq+0x2dc>
 80063f8:	2900      	cmp	r1, #0
 80063fa:	f43f af49 	beq.w	8006290 <USBD_StdDevReq+0x18>
        pdev->dev_default_config = 0U;
 80063fe:	4601      	mov	r1, r0
 8006400:	2300      	movs	r3, #0
 8006402:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006406:	f000 f9ef 	bl	80067e8 <USBD_CtlSendData>
        break;
 800640a:	e749      	b.n	80062a0 <USBD_StdDevReq+0x28>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800640c:	7c03      	ldrb	r3, [r0, #16]
 800640e:	2b00      	cmp	r3, #0
 8006410:	f47f af3e 	bne.w	8006290 <USBD_StdDevReq+0x18>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006414:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8006418:	f10d 0006 	add.w	r0, sp, #6
 800641c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800641e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006420:	2307      	movs	r3, #7
 8006422:	7043      	strb	r3, [r0, #1]
  if (req->wLength != 0U)
 8006424:	88eb      	ldrh	r3, [r5, #6]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d09c      	beq.n	8006364 <USBD_StdDevReq+0xec>
    if (len != 0U)
 800642a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800642e:	2a00      	cmp	r2, #0
 8006430:	f43f af2e 	beq.w	8006290 <USBD_StdDevReq+0x18>
      len = MIN(len, req->wLength);
 8006434:	429a      	cmp	r2, r3
 8006436:	bf28      	it	cs
 8006438:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800643a:	4601      	mov	r1, r0
 800643c:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 800643e:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006442:	f000 f9d1 	bl	80067e8 <USBD_CtlSendData>
 8006446:	e72b      	b.n	80062a0 <USBD_StdDevReq+0x28>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006448:	7c03      	ldrb	r3, [r0, #16]
 800644a:	2b00      	cmp	r3, #0
 800644c:	f47f af20 	bne.w	8006290 <USBD_StdDevReq+0x18>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006450:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8006454:	f10d 0006 	add.w	r0, sp, #6
 8006458:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800645a:	4798      	blx	r3
  if (err != 0U)
 800645c:	e7e2      	b.n	8006424 <USBD_StdDevReq+0x1ac>
      switch ((uint8_t)(req->wValue))
 800645e:	b2d1      	uxtb	r1, r2
 8006460:	2905      	cmp	r1, #5
 8006462:	f200 80a2 	bhi.w	80065aa <USBD_StdDevReq+0x332>
 8006466:	e8df f001 	tbb	[pc, r1]
 800646a:	353b      	.short	0x353b
 800646c:	2918232f 	.word	0x2918232f
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006470:	7c02      	ldrb	r2, [r0, #16]
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006472:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006476:	2a00      	cmp	r2, #0
 8006478:	f040 8085 	bne.w	8006586 <USBD_StdDevReq+0x30e>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800647c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800647e:	f10d 0006 	add.w	r0, sp, #6
 8006482:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006484:	2302      	movs	r3, #2
 8006486:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8006488:	e7cc      	b.n	8006424 <USBD_StdDevReq+0x1ac>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800648a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800648e:	7c00      	ldrb	r0, [r0, #16]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f10d 0106 	add.w	r1, sp, #6
 8006496:	4798      	blx	r3
  if (err != 0U)
 8006498:	e7c4      	b.n	8006424 <USBD_StdDevReq+0x1ac>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800649a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800649e:	695b      	ldr	r3, [r3, #20]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f43f aef5 	beq.w	8006290 <USBD_StdDevReq+0x18>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80064a6:	7c20      	ldrb	r0, [r4, #16]
 80064a8:	f10d 0106 	add.w	r1, sp, #6
 80064ac:	4798      	blx	r3
  if (err != 0U)
 80064ae:	e7b9      	b.n	8006424 <USBD_StdDevReq+0x1ac>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80064b0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d1f5      	bne.n	80064a6 <USBD_StdDevReq+0x22e>
 80064ba:	e6e9      	b.n	8006290 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80064bc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80064c0:	699b      	ldr	r3, [r3, #24]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d1ef      	bne.n	80064a6 <USBD_StdDevReq+0x22e>
 80064c6:	e6e3      	b.n	8006290 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80064c8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d1e9      	bne.n	80064a6 <USBD_StdDevReq+0x22e>
 80064d2:	e6dd      	b.n	8006290 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80064d4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d1e3      	bne.n	80064a6 <USBD_StdDevReq+0x22e>
 80064de:	e6d7      	b.n	8006290 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80064e0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d1dd      	bne.n	80064a6 <USBD_StdDevReq+0x22e>
 80064ea:	e6d1      	b.n	8006290 <USBD_StdDevReq+0x18>
      if (cfgidx == 0U)
 80064ec:	2900      	cmp	r1, #0
 80064ee:	d040      	beq.n	8006572 <USBD_StdDevReq+0x2fa>
      else if (cfgidx != pdev->dev_config)
 80064f0:	6841      	ldr	r1, [r0, #4]
 80064f2:	2901      	cmp	r1, #1
 80064f4:	f43f af36 	beq.w	8006364 <USBD_StdDevReq+0xec>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80064f8:	b2c9      	uxtb	r1, r1
 80064fa:	f7ff fd6f 	bl	8005fdc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80064fe:	7829      	ldrb	r1, [r5, #0]
 8006500:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006502:	4620      	mov	r0, r4
 8006504:	f7ff fd62 	bl	8005fcc <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8006508:	4605      	mov	r5, r0
 800650a:	2800      	cmp	r0, #0
 800650c:	f43f af2a 	beq.w	8006364 <USBD_StdDevReq+0xec>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006510:	2180      	movs	r1, #128	@ 0x80
 8006512:	4620      	mov	r0, r4
 8006514:	f000 fa6a 	bl	80069ec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006518:	2100      	movs	r1, #0
 800651a:	4620      	mov	r0, r4
 800651c:	f000 fa66 	bl	80069ec <USBD_LL_StallEP>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006520:	7921      	ldrb	r1, [r4, #4]
 8006522:	4620      	mov	r0, r4
 8006524:	f7ff fd5a 	bl	8005fdc <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006528:	2302      	movs	r3, #2
 800652a:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800652e:	e6b8      	b.n	80062a2 <USBD_StdDevReq+0x2a>
      if (cfgidx != 0U)
 8006530:	2900      	cmp	r1, #0
 8006532:	f43f af17 	beq.w	8006364 <USBD_StdDevReq+0xec>
        pdev->dev_config = cfgidx;
 8006536:	2101      	movs	r1, #1
 8006538:	6041      	str	r1, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800653a:	f7ff fd47 	bl	8005fcc <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800653e:	4605      	mov	r5, r0
 8006540:	b340      	cbz	r0, 8006594 <USBD_StdDevReq+0x31c>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006542:	2180      	movs	r1, #128	@ 0x80
 8006544:	4620      	mov	r0, r4
 8006546:	f000 fa51 	bl	80069ec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800654a:	2100      	movs	r1, #0
 800654c:	4620      	mov	r0, r4
 800654e:	f000 fa4d 	bl	80069ec <USBD_LL_StallEP>
}
 8006552:	e6a6      	b.n	80062a2 <USBD_StdDevReq+0x2a>
    switch (pdev->dev_state)
 8006554:	2903      	cmp	r1, #3
 8006556:	f47f ae9b 	bne.w	8006290 <USBD_StdDevReq+0x18>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800655a:	1d01      	adds	r1, r0, #4
 800655c:	f000 f944 	bl	80067e8 <USBD_CtlSendData>
        break;
 8006560:	e69e      	b.n	80062a0 <USBD_StdDevReq+0x28>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006562:	2180      	movs	r1, #128	@ 0x80
 8006564:	f000 fa42 	bl	80069ec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006568:	2100      	movs	r1, #0
 800656a:	4620      	mov	r0, r4
 800656c:	f000 fa3e 	bl	80069ec <USBD_LL_StallEP>
}
 8006570:	e6d7      	b.n	8006322 <USBD_StdDevReq+0xaa>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006572:	2302      	movs	r3, #2
 8006574:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006578:	6041      	str	r1, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800657a:	f7ff fd2f 	bl	8005fdc <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800657e:	4620      	mov	r0, r4
 8006580:	f000 f95e 	bl	8006840 <USBD_CtlSendStatus>
 8006584:	e68c      	b.n	80062a0 <USBD_StdDevReq+0x28>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006588:	f10d 0006 	add.w	r0, sp, #6
 800658c:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800658e:	2302      	movs	r3, #2
 8006590:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8006592:	e747      	b.n	8006424 <USBD_StdDevReq+0x1ac>
          (void)USBD_CtlSendStatus(pdev);
 8006594:	4620      	mov	r0, r4
 8006596:	f000 f953 	bl	8006840 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800659a:	2303      	movs	r3, #3
 800659c:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 80065a0:	e67e      	b.n	80062a0 <USBD_StdDevReq+0x28>
        pdev->dev_state = USBD_STATE_DEFAULT;
 80065a2:	2301      	movs	r3, #1
 80065a4:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 80065a8:	e67a      	b.n	80062a0 <USBD_StdDevReq+0x28>
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 80065aa:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80065ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	f43f ae6d 	beq.w	8006290 <USBD_StdDevReq+0x18>
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 80065b6:	f10d 0206 	add.w	r2, sp, #6
 80065ba:	4798      	blx	r3
  if (err != 0U)
 80065bc:	e732      	b.n	8006424 <USBD_StdDevReq+0x1ac>
 80065be:	bf00      	nop
 80065c0:	2000a49e 	.word	0x2000a49e

080065c4 <USBD_StdItfReq>:
{
 80065c4:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065c6:	780b      	ldrb	r3, [r1, #0]
 80065c8:	065a      	lsls	r2, r3, #25
{
 80065ca:	460d      	mov	r5, r1
 80065cc:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065ce:	d50d      	bpl.n	80065ec <USBD_StdItfReq+0x28>
 80065d0:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80065d4:	2a40      	cmp	r2, #64	@ 0x40
 80065d6:	d009      	beq.n	80065ec <USBD_StdItfReq+0x28>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80065d8:	2180      	movs	r1, #128	@ 0x80
 80065da:	f000 fa07 	bl	80069ec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80065de:	2100      	movs	r1, #0
 80065e0:	4620      	mov	r0, r4
 80065e2:	f000 fa03 	bl	80069ec <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 80065e6:	2600      	movs	r6, #0
}
 80065e8:	4630      	mov	r0, r6
 80065ea:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 80065ec:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 80065f0:	3b01      	subs	r3, #1
 80065f2:	2b02      	cmp	r3, #2
 80065f4:	d812      	bhi.n	800661c <USBD_StdItfReq+0x58>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80065f6:	792b      	ldrb	r3, [r5, #4]
 80065f8:	2b0f      	cmp	r3, #15
 80065fa:	d80f      	bhi.n	800661c <USBD_StdItfReq+0x58>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80065fc:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 8006600:	4629      	mov	r1, r5
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	4620      	mov	r0, r4
 8006606:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006608:	88eb      	ldrh	r3, [r5, #6]
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800660a:	4606      	mov	r6, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800660c:	2b00      	cmp	r3, #0
 800660e:	d1eb      	bne.n	80065e8 <USBD_StdItfReq+0x24>
 8006610:	2800      	cmp	r0, #0
 8006612:	d1e9      	bne.n	80065e8 <USBD_StdItfReq+0x24>
              (void)USBD_CtlSendStatus(pdev);
 8006614:	4620      	mov	r0, r4
 8006616:	f000 f913 	bl	8006840 <USBD_CtlSendStatus>
 800661a:	e7e5      	b.n	80065e8 <USBD_StdItfReq+0x24>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800661c:	2180      	movs	r1, #128	@ 0x80
 800661e:	4620      	mov	r0, r4
 8006620:	f000 f9e4 	bl	80069ec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006624:	2100      	movs	r1, #0
 8006626:	4620      	mov	r0, r4
 8006628:	f000 f9e0 	bl	80069ec <USBD_LL_StallEP>
}
 800662c:	e7db      	b.n	80065e6 <USBD_StdItfReq+0x22>
 800662e:	bf00      	nop

08006630 <USBD_StdEPReq>:
{
 8006630:	b570      	push	{r4, r5, r6, lr}
 8006632:	780b      	ldrb	r3, [r1, #0]
  ep_addr = LOBYTE(req->wIndex);
 8006634:	888a      	ldrh	r2, [r1, #4]
 8006636:	f003 0360 	and.w	r3, r3, #96	@ 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800663a:	2b20      	cmp	r3, #32
{
 800663c:	460c      	mov	r4, r1
 800663e:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006640:	d04a      	beq.n	80066d8 <USBD_StdEPReq+0xa8>
 8006642:	2b40      	cmp	r3, #64	@ 0x40
 8006644:	d048      	beq.n	80066d8 <USBD_StdEPReq+0xa8>
 8006646:	b14b      	cbz	r3, 800665c <USBD_StdEPReq+0x2c>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006648:	2180      	movs	r1, #128	@ 0x80
 800664a:	4628      	mov	r0, r5
 800664c:	f000 f9ce 	bl	80069ec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006650:	2100      	movs	r1, #0
 8006652:	4628      	mov	r0, r5
 8006654:	f000 f9ca 	bl	80069ec <USBD_LL_StallEP>
}
 8006658:	2000      	movs	r0, #0
 800665a:	bd70      	pop	{r4, r5, r6, pc}
      switch (req->bRequest)
 800665c:	7863      	ldrb	r3, [r4, #1]
 800665e:	2b01      	cmp	r3, #1
  ep_addr = LOBYTE(req->wIndex);
 8006660:	b2d1      	uxtb	r1, r2
      switch (req->bRequest)
 8006662:	d02a      	beq.n	80066ba <USBD_StdEPReq+0x8a>
 8006664:	2b03      	cmp	r3, #3
 8006666:	d03f      	beq.n	80066e8 <USBD_StdEPReq+0xb8>
 8006668:	2b00      	cmp	r3, #0
 800666a:	d1ed      	bne.n	8006648 <USBD_StdEPReq+0x18>
          switch (pdev->dev_state)
 800666c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8006670:	2b02      	cmp	r3, #2
 8006672:	b2d8      	uxtb	r0, r3
 8006674:	d052      	beq.n	800671c <USBD_StdEPReq+0xec>
 8006676:	2803      	cmp	r0, #3
 8006678:	d1e6      	bne.n	8006648 <USBD_StdEPReq+0x18>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800667a:	f001 030f 	and.w	r3, r1, #15
 800667e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 8006682:	0612      	lsls	r2, r2, #24
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006684:	eb05 0383 	add.w	r3, r5, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 8006688:	d457      	bmi.n	800673a <USBD_StdEPReq+0x10a>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800668a:	f8b3 3164 	ldrh.w	r3, [r3, #356]	@ 0x164
 800668e:	2b00      	cmp	r3, #0
 8006690:	d0da      	beq.n	8006648 <USBD_StdEPReq+0x18>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006692:	2414      	movs	r4, #20
 8006694:	fb04 5401 	mla	r4, r4, r1, r5
 8006698:	f504 74aa 	add.w	r4, r4, #340	@ 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800669c:	2900      	cmp	r1, #0
 800669e:	d058      	beq.n	8006752 <USBD_StdEPReq+0x122>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80066a0:	4628      	mov	r0, r5
 80066a2:	f000 f9bb 	bl	8006a1c <USBD_LL_IsStallEP>
 80066a6:	2800      	cmp	r0, #0
 80066a8:	d059      	beq.n	800675e <USBD_StdEPReq+0x12e>
                pep->status = 0x0001U;
 80066aa:	2301      	movs	r3, #1
 80066ac:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80066ae:	2202      	movs	r2, #2
 80066b0:	4621      	mov	r1, r4
 80066b2:	4628      	mov	r0, r5
 80066b4:	f000 f898 	bl	80067e8 <USBD_CtlSendData>
              break;
 80066b8:	e7ce      	b.n	8006658 <USBD_StdEPReq+0x28>
          switch (pdev->dev_state)
 80066ba:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80066be:	2b02      	cmp	r3, #2
 80066c0:	b2da      	uxtb	r2, r3
 80066c2:	d022      	beq.n	800670a <USBD_StdEPReq+0xda>
 80066c4:	2a03      	cmp	r2, #3
 80066c6:	d1bf      	bne.n	8006648 <USBD_StdEPReq+0x18>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80066c8:	8863      	ldrh	r3, [r4, #2]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d1c4      	bne.n	8006658 <USBD_StdEPReq+0x28>
                if ((ep_addr & 0x7FU) != 0x00U)
 80066ce:	064e      	lsls	r6, r1, #25
 80066d0:	d142      	bne.n	8006758 <USBD_StdEPReq+0x128>
                (void)USBD_CtlSendStatus(pdev);
 80066d2:	4628      	mov	r0, r5
 80066d4:	f000 f8b4 	bl	8006840 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80066d8:	f8d5 32b8 	ldr.w	r3, [r5, #696]	@ 0x2b8
 80066dc:	4621      	mov	r1, r4
 80066de:	4628      	mov	r0, r5
 80066e0:	689b      	ldr	r3, [r3, #8]
}
 80066e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80066e6:	4718      	bx	r3
          switch (pdev->dev_state)
 80066e8:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80066ec:	2b02      	cmp	r3, #2
 80066ee:	b2da      	uxtb	r2, r3
 80066f0:	d00b      	beq.n	800670a <USBD_StdEPReq+0xda>
 80066f2:	2a03      	cmp	r2, #3
 80066f4:	d1a8      	bne.n	8006648 <USBD_StdEPReq+0x18>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80066f6:	8863      	ldrh	r3, [r4, #2]
 80066f8:	b91b      	cbnz	r3, 8006702 <USBD_StdEPReq+0xd2>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80066fa:	064a      	lsls	r2, r1, #25
 80066fc:	d001      	beq.n	8006702 <USBD_StdEPReq+0xd2>
 80066fe:	88e3      	ldrh	r3, [r4, #6]
 8006700:	b37b      	cbz	r3, 8006762 <USBD_StdEPReq+0x132>
              (void)USBD_CtlSendStatus(pdev);
 8006702:	4628      	mov	r0, r5
 8006704:	f000 f89c 	bl	8006840 <USBD_CtlSendStatus>
              break;
 8006708:	e7a6      	b.n	8006658 <USBD_StdEPReq+0x28>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800670a:	064b      	lsls	r3, r1, #25
 800670c:	d09c      	beq.n	8006648 <USBD_StdEPReq+0x18>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800670e:	f000 f96d 	bl	80069ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006712:	2180      	movs	r1, #128	@ 0x80
 8006714:	4628      	mov	r0, r5
 8006716:	f000 f969 	bl	80069ec <USBD_LL_StallEP>
 800671a:	e79d      	b.n	8006658 <USBD_StdEPReq+0x28>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800671c:	0648      	lsls	r0, r1, #25
 800671e:	d193      	bne.n	8006648 <USBD_StdEPReq+0x18>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006720:	0611      	lsls	r1, r2, #24
 8006722:	bf4c      	ite	mi
 8006724:	f105 0114 	addmi.w	r1, r5, #20
 8006728:	f505 71aa 	addpl.w	r1, r5, #340	@ 0x154
              pep->status = 0x0000U;
 800672c:	2300      	movs	r3, #0
 800672e:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006730:	2202      	movs	r2, #2
 8006732:	4628      	mov	r0, r5
 8006734:	f000 f858 	bl	80067e8 <USBD_CtlSendData>
              break;
 8006738:	e78e      	b.n	8006658 <USBD_StdEPReq+0x28>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800673a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800673c:	2b00      	cmp	r3, #0
 800673e:	d083      	beq.n	8006648 <USBD_StdEPReq+0x18>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006740:	f001 047f 	and.w	r4, r1, #127	@ 0x7f
 8006744:	3401      	adds	r4, #1
 8006746:	eb04 0484 	add.w	r4, r4, r4, lsl #2
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800674a:	2980      	cmp	r1, #128	@ 0x80
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800674c:	eb05 0484 	add.w	r4, r5, r4, lsl #2
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006750:	d1a6      	bne.n	80066a0 <USBD_StdEPReq+0x70>
                pep->status = 0x0000U;
 8006752:	2300      	movs	r3, #0
 8006754:	6023      	str	r3, [r4, #0]
 8006756:	e7aa      	b.n	80066ae <USBD_StdEPReq+0x7e>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006758:	f000 f954 	bl	8006a04 <USBD_LL_ClearStallEP>
 800675c:	e7b9      	b.n	80066d2 <USBD_StdEPReq+0xa2>
                pep->status = 0x0000U;
 800675e:	6020      	str	r0, [r4, #0]
 8006760:	e7a5      	b.n	80066ae <USBD_StdEPReq+0x7e>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006762:	f000 f943 	bl	80069ec <USBD_LL_StallEP>
 8006766:	e7cc      	b.n	8006702 <USBD_StdEPReq+0xd2>

08006768 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8006768:	780b      	ldrb	r3, [r1, #0]
 800676a:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 800676c:	784b      	ldrb	r3, [r1, #1]
 800676e:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pbuff);
 8006770:	884b      	ldrh	r3, [r1, #2]
 8006772:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pbuff);
 8006774:	888b      	ldrh	r3, [r1, #4]
 8006776:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pbuff);
 8006778:	88cb      	ldrh	r3, [r1, #6]
 800677a:	80c3      	strh	r3, [r0, #6]
}
 800677c:	4770      	bx	lr
 800677e:	bf00      	nop

08006780 <USBD_CtlError>:
{
 8006780:	b510      	push	{r4, lr}
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006782:	2180      	movs	r1, #128	@ 0x80
{
 8006784:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006786:	f000 f931 	bl	80069ec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800678a:	4620      	mov	r0, r4
 800678c:	2100      	movs	r1, #0
}
 800678e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 8006792:	f000 b92b 	b.w	80069ec <USBD_LL_StallEP>
 8006796:	bf00      	nop

08006798 <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 8006798:	b308      	cbz	r0, 80067de <USBD_GetString+0x46>
{
 800679a:	b570      	push	{r4, r5, r6, lr}
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 800679c:	7803      	ldrb	r3, [r0, #0]
 800679e:	460e      	mov	r6, r1
 80067a0:	4614      	mov	r4, r2
 80067a2:	4605      	mov	r5, r0
 80067a4:	b1e3      	cbz	r3, 80067e0 <USBD_GetString+0x48>
 80067a6:	3001      	adds	r0, #1
 80067a8:	f7f9 fd12 	bl	80001d0 <strlen>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80067ac:	1c43      	adds	r3, r0, #1
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	3301      	adds	r3, #1
 80067b2:	005b      	lsls	r3, r3, #1
 80067b4:	b2da      	uxtb	r2, r3
 80067b6:	8023      	strh	r3, [r4, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80067b8:	2303      	movs	r3, #3
  unicode[idx] = *(uint8_t *)len;
 80067ba:	7032      	strb	r2, [r6, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80067bc:	7073      	strb	r3, [r6, #1]
  while (*pdesc != (uint8_t)'\0')
 80067be:	782c      	ldrb	r4, [r5, #0]
 80067c0:	b164      	cbz	r4, 80067dc <USBD_GetString+0x44>
 80067c2:	4628      	mov	r0, r5
  idx++;
 80067c4:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 80067c6:	2100      	movs	r1, #0
    idx++;
 80067c8:	1c5a      	adds	r2, r3, #1
    unicode[idx] = 0U;
 80067ca:	b2d2      	uxtb	r2, r2
    unicode[idx] = *pdesc;
 80067cc:	54f4      	strb	r4, [r6, r3]
    unicode[idx] = 0U;
 80067ce:	54b1      	strb	r1, [r6, r2]
  while (*pdesc != (uint8_t)'\0')
 80067d0:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    idx++;
 80067d4:	3302      	adds	r3, #2
 80067d6:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 80067d8:	2c00      	cmp	r4, #0
 80067da:	d1f5      	bne.n	80067c8 <USBD_GetString+0x30>
}
 80067dc:	bd70      	pop	{r4, r5, r6, pc}
 80067de:	4770      	bx	lr
  while (*pbuff != (uint8_t)'\0')
 80067e0:	2202      	movs	r2, #2
 80067e2:	4613      	mov	r3, r2
 80067e4:	e7e7      	b.n	80067b6 <USBD_GetString+0x1e>
 80067e6:	bf00      	nop

080067e8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80067e8:	b508      	push	{r3, lr}
 80067ea:	4613      	mov	r3, r2
 80067ec:	460a      	mov	r2, r1
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80067ee:	2102      	movs	r1, #2
  pdev->ep_in[0].total_length = len;
 80067f0:	e9c0 3306 	strd	r3, r3, [r0, #24]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80067f4:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
#else
  pdev->ep_in[0].rem_length = len;
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80067f8:	2100      	movs	r1, #0
 80067fa:	f000 f92f 	bl	8006a5c <USBD_LL_Transmit>

  return USBD_OK;
}
 80067fe:	2000      	movs	r0, #0
 8006800:	bd08      	pop	{r3, pc}
 8006802:	bf00      	nop

08006804 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006804:	b508      	push	{r3, lr}
 8006806:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006808:	460a      	mov	r2, r1
 800680a:	2100      	movs	r1, #0
 800680c:	f000 f926 	bl	8006a5c <USBD_LL_Transmit>

  return USBD_OK;
}
 8006810:	2000      	movs	r0, #0
 8006812:	bd08      	pop	{r3, pc}

08006814 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006814:	b508      	push	{r3, lr}
 8006816:	4613      	mov	r3, r2
 8006818:	460a      	mov	r2, r1
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800681a:	2103      	movs	r1, #3
  pdev->ep_out[0].total_length = len;
 800681c:	e9c0 3356 	strd	r3, r3, [r0, #344]	@ 0x158
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006820:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
#else
  pdev->ep_out[0].rem_length = len;
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006824:	2100      	movs	r1, #0
 8006826:	f000 f925 	bl	8006a74 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800682a:	2000      	movs	r0, #0
 800682c:	bd08      	pop	{r3, pc}
 800682e:	bf00      	nop

08006830 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006830:	b508      	push	{r3, lr}
 8006832:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006834:	460a      	mov	r2, r1
 8006836:	2100      	movs	r1, #0
 8006838:	f000 f91c 	bl	8006a74 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800683c:	2000      	movs	r0, #0
 800683e:	bd08      	pop	{r3, pc}

08006840 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006840:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006842:	2104      	movs	r1, #4

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006844:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006846:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800684a:	461a      	mov	r2, r3
 800684c:	4619      	mov	r1, r3
 800684e:	f000 f905 	bl	8006a5c <USBD_LL_Transmit>

  return USBD_OK;
}
 8006852:	2000      	movs	r0, #0
 8006854:	bd08      	pop	{r3, pc}
 8006856:	bf00      	nop

08006858 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006858:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800685a:	2105      	movs	r1, #5

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800685c:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800685e:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006862:	461a      	mov	r2, r3
 8006864:	4619      	mov	r1, r3
 8006866:	f000 f905 	bl	8006a74 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800686a:	2000      	movs	r0, #0
 800686c:	bd08      	pop	{r3, pc}
 800686e:	bf00      	nop

08006870 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef *)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006870:	f200 419c 	addw	r1, r0, #1180	@ 0x49c
 8006874:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8006878:	f7ff bbb8 	b.w	8005fec <USBD_LL_SetupStage>

0800687c <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800687c:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8006880:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006884:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8006888:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
 800688c:	f7ff bbde 	b.w	800604c <USBD_LL_DataOutStage>

08006890 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006890:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8006894:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006898:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800689c:	6a1a      	ldr	r2, [r3, #32]
 800689e:	f7ff bc09 	b.w	80060b4 <USBD_LL_DataInStage>
 80068a2:	bf00      	nop

080068a4 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef *)hpcd->pData);
 80068a4:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 80068a8:	f7ff bca0 	b.w	80061ec <USBD_LL_SOF>

080068ac <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068ac:	b510      	push	{r4, lr}
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if (hpcd->Init.speed == PCD_SPEED_FULL)
 80068ae:	79c1      	ldrb	r1, [r0, #7]
 80068b0:	2902      	cmp	r1, #2
{
 80068b2:	4604      	mov	r4, r0
  if (hpcd->Init.speed == PCD_SPEED_FULL)
 80068b4:	d00c      	beq.n	80068d0 <HAL_PCD_ResetCallback+0x24>
  {
    speed = USBD_SPEED_FULL; 
  }
  #if(!STM32F1_DEVICE)
  else if (hpcd->Init.speed == PCD_SPEED_HIGH)
 80068b6:	b949      	cbnz	r1, 80068cc <HAL_PCD_ResetCallback+0x20>
  else
  {
    Error_Handler();
  }
  /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef *)hpcd->pData, speed);
 80068b8:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 80068bc:	f7ff fc7a 	bl	80061b4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef *)hpcd->pData);
 80068c0:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
}
 80068c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef *)hpcd->pData);
 80068c8:	f7ff bc4a 	b.w	8006160 <USBD_LL_Reset>
    Error_Handler();
 80068cc:	f7fa f884 	bl	80009d8 <Error_Handler>
    speed = USBD_SPEED_FULL; 
 80068d0:	2101      	movs	r1, #1
 80068d2:	e7f1      	b.n	80068b8 <HAL_PCD_ResetCallback+0xc>

080068d4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068d4:	b510      	push	{r4, lr}
 80068d6:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef *)hpcd->pData);
 80068d8:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 80068dc:	f7ff fc6e 	bl	80061bc <USBD_LL_Suspend>
#if (!STM32F1_DEVICE)
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80068e0:	6822      	ldr	r2, [r4, #0]
 80068e2:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	@ 0xe00
 80068e6:	f043 0301 	orr.w	r3, r3, #1
 80068ea:	f8c2 3e00 	str.w	r3, [r2, #3584]	@ 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80068ee:	7ae3      	ldrb	r3, [r4, #11]
 80068f0:	b123      	cbz	r3, 80068fc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80068f2:	4a03      	ldr	r2, [pc, #12]	@ (8006900 <HAL_PCD_SuspendCallback+0x2c>)
 80068f4:	6913      	ldr	r3, [r2, #16]
 80068f6:	f043 0306 	orr.w	r3, r3, #6
 80068fa:	6113      	str	r3, [r2, #16]
  }
#endif
  /* USER CODE END 2 */
}
 80068fc:	bd10      	pop	{r4, pc}
 80068fe:	bf00      	nop
 8006900:	e000ed00 	.word	0xe000ed00

08006904 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef *)hpcd->pData);
 8006904:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8006908:	f7ff bc64 	b.w	80061d4 <USBD_LL_Resume>

0800690c <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 800690c:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8006910:	f7ff bc90 	b.w	8006234 <USBD_LL_IsoOUTIncomplete>

08006914 <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 8006914:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8006918:	f7ff bc7a 	b.w	8006210 <USBD_LL_IsoINIncomplete>

0800691c <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef *)hpcd->pData);
 800691c:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8006920:	f7ff bc9a 	b.w	8006258 <USBD_LL_DevConnected>

08006924 <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef *)hpcd->pData);
 8006924:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8006928:	f7ff bc98 	b.w	800625c <USBD_LL_DevDisconnected>

0800692c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800692c:	b538      	push	{r3, r4, r5, lr}
#else
  /**FULL SPEED USB */
#if (STM32F1_DEVICE) /** for STM32F1 or similar */
  hpcd_USB_OTG_PTR = &hpcd_USB_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
#else
  hpcd_USB_OTG_PTR = &hpcd_USB_OTG_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
 800692e:	4c17      	ldr	r4, [pc, #92]	@ (800698c <USBD_LL_Init+0x60>)
 8006930:	4a17      	ldr	r2, [pc, #92]	@ (8006990 <USBD_LL_Init+0x64>)
 8006932:	6022      	str	r2, [r4, #0]
#endif

  if (pdev->id == DEVICE_FS)
 8006934:	7805      	ldrb	r5, [r0, #0]
 8006936:	b10d      	cbz	r5, 800693c <USBD_LL_Init+0x10>
  HAL_PCD_RegisterDataInStageCallback(hpcd_USB_OTG_PTR, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  return USBD_OK;
}
 8006938:	2000      	movs	r0, #0
 800693a:	bd38      	pop	{r3, r4, r5, pc}
    hpcd_USB_OTG_PTR->pData = pdev;
 800693c:	f8c2 04e0 	str.w	r0, [r2, #1248]	@ 0x4e0
	return HAL_PCDEx_SetRxFiFo(hpcd, (size/4));
 8006940:	2180      	movs	r1, #128	@ 0x80
    pdev->pData = hpcd_USB_OTG_PTR;
 8006942:	f8c0 2310 	str.w	r2, [r0, #784]	@ 0x310
	return HAL_PCDEx_SetRxFiFo(hpcd, (size/4));
 8006946:	4610      	mov	r0, r2
 8006948:	f7fc fc3e 	bl	80031c8 <HAL_PCDEx_SetRxFiFo>
	return HAL_PCDEx_SetTxFiFo(hpcd, fifo, (size/4));
 800694c:	4629      	mov	r1, r5
 800694e:	6820      	ldr	r0, [r4, #0]
 8006950:	2210      	movs	r2, #16
 8006952:	f7fc fc13 	bl	800317c <HAL_PCDEx_SetTxFiFo>
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CUSTOM_HID_IN_EP & 0x7F), 64);
 8006956:	4b0f      	ldr	r3, [pc, #60]	@ (8006994 <USBD_LL_Init+0x68>)
	return HAL_PCDEx_SetTxFiFo(hpcd, fifo, (size/4));
 8006958:	6820      	ldr	r0, [r4, #0]
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CUSTOM_HID_IN_EP & 0x7F), 64);
 800695a:	7819      	ldrb	r1, [r3, #0]
	return HAL_PCDEx_SetTxFiFo(hpcd, fifo, (size/4));
 800695c:	2210      	movs	r2, #16
 800695e:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8006962:	f7fc fc0b 	bl	800317c <HAL_PCDEx_SetTxFiFo>
      HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CDC_IN_EP[i] & 0x7F), 128);
 8006966:	4b0c      	ldr	r3, [pc, #48]	@ (8006998 <USBD_LL_Init+0x6c>)
	return HAL_PCDEx_SetTxFiFo(hpcd, fifo, (size/4));
 8006968:	6820      	ldr	r0, [r4, #0]
      HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CDC_IN_EP[i] & 0x7F), 128);
 800696a:	7819      	ldrb	r1, [r3, #0]
	return HAL_PCDEx_SetTxFiFo(hpcd, fifo, (size/4));
 800696c:	2220      	movs	r2, #32
 800696e:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8006972:	f7fc fc03 	bl	800317c <HAL_PCDEx_SetTxFiFo>
      HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CDC_CMD_EP[i] & 0x7F), 64);
 8006976:	4b09      	ldr	r3, [pc, #36]	@ (800699c <USBD_LL_Init+0x70>)
	return HAL_PCDEx_SetTxFiFo(hpcd, fifo, (size/4));
 8006978:	6820      	ldr	r0, [r4, #0]
      HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CDC_CMD_EP[i] & 0x7F), 64);
 800697a:	7819      	ldrb	r1, [r3, #0]
	return HAL_PCDEx_SetTxFiFo(hpcd, fifo, (size/4));
 800697c:	2210      	movs	r2, #16
 800697e:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8006982:	f7fc fbfb 	bl	800317c <HAL_PCDEx_SetTxFiFo>
}
 8006986:	2000      	movs	r0, #0
 8006988:	bd38      	pop	{r3, r4, r5, pc}
 800698a:	bf00      	nop
 800698c:	2000a4a0 	.word	0x2000a4a0
 8006990:	20004630 	.word	0x20004630
 8006994:	200002b1 	.word	0x200002b1
 8006998:	2000a34c 	.word	0x2000a34c
 800699c:	2000a344 	.word	0x2000a344

080069a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80069a0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 80069a2:	f8d0 0310 	ldr.w	r0, [r0, #784]	@ 0x310
 80069a6:	f7fb fed9 	bl	800275c <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 80069aa:	b118      	cbz	r0, 80069b4 <USBD_LL_Start+0x14>
 80069ac:	2802      	cmp	r0, #2
 80069ae:	bf0c      	ite	eq
 80069b0:	2001      	moveq	r0, #1
 80069b2:	2003      	movne	r0, #3
}
 80069b4:	bd08      	pop	{r3, pc}
 80069b6:	bf00      	nop

080069b8 <USBD_LL_OpenEP>:
{
 80069b8:	4694      	mov	ip, r2
 80069ba:	b508      	push	{r3, lr}
 80069bc:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80069be:	f8d0 0310 	ldr.w	r0, [r0, #784]	@ 0x310
 80069c2:	4663      	mov	r3, ip
 80069c4:	f7fc fa9c 	bl	8002f00 <HAL_PCD_EP_Open>
  switch (hal_status)
 80069c8:	b118      	cbz	r0, 80069d2 <USBD_LL_OpenEP+0x1a>
 80069ca:	2802      	cmp	r0, #2
 80069cc:	bf0c      	ite	eq
 80069ce:	2001      	moveq	r0, #1
 80069d0:	2003      	movne	r0, #3
}
 80069d2:	bd08      	pop	{r3, pc}

080069d4 <USBD_LL_CloseEP>:
{
 80069d4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80069d6:	f8d0 0310 	ldr.w	r0, [r0, #784]	@ 0x310
 80069da:	f7fc fad1 	bl	8002f80 <HAL_PCD_EP_Close>
  switch (hal_status)
 80069de:	b118      	cbz	r0, 80069e8 <USBD_LL_CloseEP+0x14>
 80069e0:	2802      	cmp	r0, #2
 80069e2:	bf0c      	ite	eq
 80069e4:	2001      	moveq	r0, #1
 80069e6:	2003      	movne	r0, #3
}
 80069e8:	bd08      	pop	{r3, pc}
 80069ea:	bf00      	nop

080069ec <USBD_LL_StallEP>:
{
 80069ec:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80069ee:	f8d0 0310 	ldr.w	r0, [r0, #784]	@ 0x310
 80069f2:	f7fc fb49 	bl	8003088 <HAL_PCD_EP_SetStall>
  switch (hal_status)
 80069f6:	b118      	cbz	r0, 8006a00 <USBD_LL_StallEP+0x14>
 80069f8:	2802      	cmp	r0, #2
 80069fa:	bf0c      	ite	eq
 80069fc:	2001      	moveq	r0, #1
 80069fe:	2003      	movne	r0, #3
}
 8006a00:	bd08      	pop	{r3, pc}
 8006a02:	bf00      	nop

08006a04 <USBD_LL_ClearStallEP>:
{
 8006a04:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006a06:	f8d0 0310 	ldr.w	r0, [r0, #784]	@ 0x310
 8006a0a:	f7fc fb7f 	bl	800310c <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 8006a0e:	b118      	cbz	r0, 8006a18 <USBD_LL_ClearStallEP+0x14>
 8006a10:	2802      	cmp	r0, #2
 8006a12:	bf0c      	ite	eq
 8006a14:	2001      	moveq	r0, #1
 8006a16:	2003      	movne	r0, #3
}
 8006a18:	bd08      	pop	{r3, pc}
 8006a1a:	bf00      	nop

08006a1c <USBD_LL_IsStallEP>:
  if ((ep_addr & 0x80) == 0x80)
 8006a1c:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006a1e:	f8d0 3310 	ldr.w	r3, [r0, #784]	@ 0x310
  if ((ep_addr & 0x80) == 0x80)
 8006a22:	d406      	bmi.n	8006a32 <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006a24:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8006a28:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8006a2c:	f893 0256 	ldrb.w	r0, [r3, #598]	@ 0x256
}
 8006a30:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006a32:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8006a36:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8006a3a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8006a3e:	7d98      	ldrb	r0, [r3, #22]
 8006a40:	4770      	bx	lr
 8006a42:	bf00      	nop

08006a44 <USBD_LL_SetUSBAddress>:
{
 8006a44:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006a46:	f8d0 0310 	ldr.w	r0, [r0, #784]	@ 0x310
 8006a4a:	f7fc fa45 	bl	8002ed8 <HAL_PCD_SetAddress>
  switch (hal_status)
 8006a4e:	b118      	cbz	r0, 8006a58 <USBD_LL_SetUSBAddress+0x14>
 8006a50:	2802      	cmp	r0, #2
 8006a52:	bf0c      	ite	eq
 8006a54:	2001      	moveq	r0, #1
 8006a56:	2003      	movne	r0, #3
}
 8006a58:	bd08      	pop	{r3, pc}
 8006a5a:	bf00      	nop

08006a5c <USBD_LL_Transmit>:
{
 8006a5c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006a5e:	f8d0 0310 	ldr.w	r0, [r0, #784]	@ 0x310
 8006a62:	f7fc faed 	bl	8003040 <HAL_PCD_EP_Transmit>
  switch (hal_status)
 8006a66:	b118      	cbz	r0, 8006a70 <USBD_LL_Transmit+0x14>
 8006a68:	2802      	cmp	r0, #2
 8006a6a:	bf0c      	ite	eq
 8006a6c:	2001      	moveq	r0, #1
 8006a6e:	2003      	movne	r0, #3
}
 8006a70:	bd08      	pop	{r3, pc}
 8006a72:	bf00      	nop

08006a74 <USBD_LL_PrepareReceive>:
{
 8006a74:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006a76:	f8d0 0310 	ldr.w	r0, [r0, #784]	@ 0x310
 8006a7a:	f7fc fab5 	bl	8002fe8 <HAL_PCD_EP_Receive>
  switch (hal_status)
 8006a7e:	b118      	cbz	r0, 8006a88 <USBD_LL_PrepareReceive+0x14>
 8006a80:	2802      	cmp	r0, #2
 8006a82:	bf0c      	ite	eq
 8006a84:	2001      	moveq	r0, #1
 8006a86:	2003      	movne	r0, #3
}
 8006a88:	bd08      	pop	{r3, pc}
 8006a8a:	bf00      	nop

08006a8c <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef *)pdev->pData, ep_addr);
 8006a8c:	f8d0 0310 	ldr.w	r0, [r0, #784]	@ 0x310
 8006a90:	f7fc bacc 	b.w	800302c <HAL_PCD_EP_GetRxCount>

08006a94 <sniprintf>:
 8006a94:	b40c      	push	{r2, r3}
 8006a96:	b530      	push	{r4, r5, lr}
 8006a98:	4b18      	ldr	r3, [pc, #96]	@ (8006afc <sniprintf+0x68>)
 8006a9a:	1e0c      	subs	r4, r1, #0
 8006a9c:	681d      	ldr	r5, [r3, #0]
 8006a9e:	b09d      	sub	sp, #116	@ 0x74
 8006aa0:	da08      	bge.n	8006ab4 <sniprintf+0x20>
 8006aa2:	238b      	movs	r3, #139	@ 0x8b
 8006aa4:	602b      	str	r3, [r5, #0]
 8006aa6:	f04f 30ff 	mov.w	r0, #4294967295
 8006aaa:	b01d      	add	sp, #116	@ 0x74
 8006aac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ab0:	b002      	add	sp, #8
 8006ab2:	4770      	bx	lr
 8006ab4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006ab8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006abc:	f04f 0300 	mov.w	r3, #0
 8006ac0:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006ac2:	bf14      	ite	ne
 8006ac4:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006ac8:	4623      	moveq	r3, r4
 8006aca:	9304      	str	r3, [sp, #16]
 8006acc:	9307      	str	r3, [sp, #28]
 8006ace:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006ad2:	9002      	str	r0, [sp, #8]
 8006ad4:	9006      	str	r0, [sp, #24]
 8006ad6:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006ada:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006adc:	ab21      	add	r3, sp, #132	@ 0x84
 8006ade:	a902      	add	r1, sp, #8
 8006ae0:	4628      	mov	r0, r5
 8006ae2:	9301      	str	r3, [sp, #4]
 8006ae4:	f000 f99a 	bl	8006e1c <_svfiprintf_r>
 8006ae8:	1c43      	adds	r3, r0, #1
 8006aea:	bfbc      	itt	lt
 8006aec:	238b      	movlt	r3, #139	@ 0x8b
 8006aee:	602b      	strlt	r3, [r5, #0]
 8006af0:	2c00      	cmp	r4, #0
 8006af2:	d0da      	beq.n	8006aaa <sniprintf+0x16>
 8006af4:	9b02      	ldr	r3, [sp, #8]
 8006af6:	2200      	movs	r2, #0
 8006af8:	701a      	strb	r2, [r3, #0]
 8006afa:	e7d6      	b.n	8006aaa <sniprintf+0x16>
 8006afc:	200002b4 	.word	0x200002b4

08006b00 <__errno>:
 8006b00:	4b01      	ldr	r3, [pc, #4]	@ (8006b08 <__errno+0x8>)
 8006b02:	6818      	ldr	r0, [r3, #0]
 8006b04:	4770      	bx	lr
 8006b06:	bf00      	nop
 8006b08:	200002b4 	.word	0x200002b4

08006b0c <__libc_init_array>:
 8006b0c:	b570      	push	{r4, r5, r6, lr}
 8006b0e:	4d0d      	ldr	r5, [pc, #52]	@ (8006b44 <__libc_init_array+0x38>)
 8006b10:	4c0d      	ldr	r4, [pc, #52]	@ (8006b48 <__libc_init_array+0x3c>)
 8006b12:	1b64      	subs	r4, r4, r5
 8006b14:	10a4      	asrs	r4, r4, #2
 8006b16:	2600      	movs	r6, #0
 8006b18:	42a6      	cmp	r6, r4
 8006b1a:	d109      	bne.n	8006b30 <__libc_init_array+0x24>
 8006b1c:	4d0b      	ldr	r5, [pc, #44]	@ (8006b4c <__libc_init_array+0x40>)
 8006b1e:	4c0c      	ldr	r4, [pc, #48]	@ (8006b50 <__libc_init_array+0x44>)
 8006b20:	f000 fc64 	bl	80073ec <_init>
 8006b24:	1b64      	subs	r4, r4, r5
 8006b26:	10a4      	asrs	r4, r4, #2
 8006b28:	2600      	movs	r6, #0
 8006b2a:	42a6      	cmp	r6, r4
 8006b2c:	d105      	bne.n	8006b3a <__libc_init_array+0x2e>
 8006b2e:	bd70      	pop	{r4, r5, r6, pc}
 8006b30:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b34:	4798      	blx	r3
 8006b36:	3601      	adds	r6, #1
 8006b38:	e7ee      	b.n	8006b18 <__libc_init_array+0xc>
 8006b3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b3e:	4798      	blx	r3
 8006b40:	3601      	adds	r6, #1
 8006b42:	e7f2      	b.n	8006b2a <__libc_init_array+0x1e>
 8006b44:	080074bc 	.word	0x080074bc
 8006b48:	080074bc 	.word	0x080074bc
 8006b4c:	080074bc 	.word	0x080074bc
 8006b50:	080074c0 	.word	0x080074c0

08006b54 <__retarget_lock_acquire_recursive>:
 8006b54:	4770      	bx	lr

08006b56 <__retarget_lock_release_recursive>:
 8006b56:	4770      	bx	lr

08006b58 <memcpy>:
 8006b58:	440a      	add	r2, r1
 8006b5a:	4291      	cmp	r1, r2
 8006b5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b60:	d100      	bne.n	8006b64 <memcpy+0xc>
 8006b62:	4770      	bx	lr
 8006b64:	b510      	push	{r4, lr}
 8006b66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b6e:	4291      	cmp	r1, r2
 8006b70:	d1f9      	bne.n	8006b66 <memcpy+0xe>
 8006b72:	bd10      	pop	{r4, pc}

08006b74 <_free_r>:
 8006b74:	b538      	push	{r3, r4, r5, lr}
 8006b76:	4605      	mov	r5, r0
 8006b78:	2900      	cmp	r1, #0
 8006b7a:	d041      	beq.n	8006c00 <_free_r+0x8c>
 8006b7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b80:	1f0c      	subs	r4, r1, #4
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	bfb8      	it	lt
 8006b86:	18e4      	addlt	r4, r4, r3
 8006b88:	f000 f8e0 	bl	8006d4c <__malloc_lock>
 8006b8c:	4a1d      	ldr	r2, [pc, #116]	@ (8006c04 <_free_r+0x90>)
 8006b8e:	6813      	ldr	r3, [r2, #0]
 8006b90:	b933      	cbnz	r3, 8006ba0 <_free_r+0x2c>
 8006b92:	6063      	str	r3, [r4, #4]
 8006b94:	6014      	str	r4, [r2, #0]
 8006b96:	4628      	mov	r0, r5
 8006b98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b9c:	f000 b8dc 	b.w	8006d58 <__malloc_unlock>
 8006ba0:	42a3      	cmp	r3, r4
 8006ba2:	d908      	bls.n	8006bb6 <_free_r+0x42>
 8006ba4:	6820      	ldr	r0, [r4, #0]
 8006ba6:	1821      	adds	r1, r4, r0
 8006ba8:	428b      	cmp	r3, r1
 8006baa:	bf01      	itttt	eq
 8006bac:	6819      	ldreq	r1, [r3, #0]
 8006bae:	685b      	ldreq	r3, [r3, #4]
 8006bb0:	1809      	addeq	r1, r1, r0
 8006bb2:	6021      	streq	r1, [r4, #0]
 8006bb4:	e7ed      	b.n	8006b92 <_free_r+0x1e>
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	b10b      	cbz	r3, 8006bc0 <_free_r+0x4c>
 8006bbc:	42a3      	cmp	r3, r4
 8006bbe:	d9fa      	bls.n	8006bb6 <_free_r+0x42>
 8006bc0:	6811      	ldr	r1, [r2, #0]
 8006bc2:	1850      	adds	r0, r2, r1
 8006bc4:	42a0      	cmp	r0, r4
 8006bc6:	d10b      	bne.n	8006be0 <_free_r+0x6c>
 8006bc8:	6820      	ldr	r0, [r4, #0]
 8006bca:	4401      	add	r1, r0
 8006bcc:	1850      	adds	r0, r2, r1
 8006bce:	4283      	cmp	r3, r0
 8006bd0:	6011      	str	r1, [r2, #0]
 8006bd2:	d1e0      	bne.n	8006b96 <_free_r+0x22>
 8006bd4:	6818      	ldr	r0, [r3, #0]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	6053      	str	r3, [r2, #4]
 8006bda:	4408      	add	r0, r1
 8006bdc:	6010      	str	r0, [r2, #0]
 8006bde:	e7da      	b.n	8006b96 <_free_r+0x22>
 8006be0:	d902      	bls.n	8006be8 <_free_r+0x74>
 8006be2:	230c      	movs	r3, #12
 8006be4:	602b      	str	r3, [r5, #0]
 8006be6:	e7d6      	b.n	8006b96 <_free_r+0x22>
 8006be8:	6820      	ldr	r0, [r4, #0]
 8006bea:	1821      	adds	r1, r4, r0
 8006bec:	428b      	cmp	r3, r1
 8006bee:	bf04      	itt	eq
 8006bf0:	6819      	ldreq	r1, [r3, #0]
 8006bf2:	685b      	ldreq	r3, [r3, #4]
 8006bf4:	6063      	str	r3, [r4, #4]
 8006bf6:	bf04      	itt	eq
 8006bf8:	1809      	addeq	r1, r1, r0
 8006bfa:	6021      	streq	r1, [r4, #0]
 8006bfc:	6054      	str	r4, [r2, #4]
 8006bfe:	e7ca      	b.n	8006b96 <_free_r+0x22>
 8006c00:	bd38      	pop	{r3, r4, r5, pc}
 8006c02:	bf00      	nop
 8006c04:	2000a5e8 	.word	0x2000a5e8

08006c08 <sbrk_aligned>:
 8006c08:	b570      	push	{r4, r5, r6, lr}
 8006c0a:	4e0f      	ldr	r6, [pc, #60]	@ (8006c48 <sbrk_aligned+0x40>)
 8006c0c:	460c      	mov	r4, r1
 8006c0e:	6831      	ldr	r1, [r6, #0]
 8006c10:	4605      	mov	r5, r0
 8006c12:	b911      	cbnz	r1, 8006c1a <sbrk_aligned+0x12>
 8006c14:	f000 fba4 	bl	8007360 <_sbrk_r>
 8006c18:	6030      	str	r0, [r6, #0]
 8006c1a:	4621      	mov	r1, r4
 8006c1c:	4628      	mov	r0, r5
 8006c1e:	f000 fb9f 	bl	8007360 <_sbrk_r>
 8006c22:	1c43      	adds	r3, r0, #1
 8006c24:	d103      	bne.n	8006c2e <sbrk_aligned+0x26>
 8006c26:	f04f 34ff 	mov.w	r4, #4294967295
 8006c2a:	4620      	mov	r0, r4
 8006c2c:	bd70      	pop	{r4, r5, r6, pc}
 8006c2e:	1cc4      	adds	r4, r0, #3
 8006c30:	f024 0403 	bic.w	r4, r4, #3
 8006c34:	42a0      	cmp	r0, r4
 8006c36:	d0f8      	beq.n	8006c2a <sbrk_aligned+0x22>
 8006c38:	1a21      	subs	r1, r4, r0
 8006c3a:	4628      	mov	r0, r5
 8006c3c:	f000 fb90 	bl	8007360 <_sbrk_r>
 8006c40:	3001      	adds	r0, #1
 8006c42:	d1f2      	bne.n	8006c2a <sbrk_aligned+0x22>
 8006c44:	e7ef      	b.n	8006c26 <sbrk_aligned+0x1e>
 8006c46:	bf00      	nop
 8006c48:	2000a5e4 	.word	0x2000a5e4

08006c4c <_malloc_r>:
 8006c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c50:	1ccd      	adds	r5, r1, #3
 8006c52:	f025 0503 	bic.w	r5, r5, #3
 8006c56:	3508      	adds	r5, #8
 8006c58:	2d0c      	cmp	r5, #12
 8006c5a:	bf38      	it	cc
 8006c5c:	250c      	movcc	r5, #12
 8006c5e:	2d00      	cmp	r5, #0
 8006c60:	4606      	mov	r6, r0
 8006c62:	db01      	blt.n	8006c68 <_malloc_r+0x1c>
 8006c64:	42a9      	cmp	r1, r5
 8006c66:	d904      	bls.n	8006c72 <_malloc_r+0x26>
 8006c68:	230c      	movs	r3, #12
 8006c6a:	6033      	str	r3, [r6, #0]
 8006c6c:	2000      	movs	r0, #0
 8006c6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c72:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006d48 <_malloc_r+0xfc>
 8006c76:	f000 f869 	bl	8006d4c <__malloc_lock>
 8006c7a:	f8d8 3000 	ldr.w	r3, [r8]
 8006c7e:	461c      	mov	r4, r3
 8006c80:	bb44      	cbnz	r4, 8006cd4 <_malloc_r+0x88>
 8006c82:	4629      	mov	r1, r5
 8006c84:	4630      	mov	r0, r6
 8006c86:	f7ff ffbf 	bl	8006c08 <sbrk_aligned>
 8006c8a:	1c43      	adds	r3, r0, #1
 8006c8c:	4604      	mov	r4, r0
 8006c8e:	d158      	bne.n	8006d42 <_malloc_r+0xf6>
 8006c90:	f8d8 4000 	ldr.w	r4, [r8]
 8006c94:	4627      	mov	r7, r4
 8006c96:	2f00      	cmp	r7, #0
 8006c98:	d143      	bne.n	8006d22 <_malloc_r+0xd6>
 8006c9a:	2c00      	cmp	r4, #0
 8006c9c:	d04b      	beq.n	8006d36 <_malloc_r+0xea>
 8006c9e:	6823      	ldr	r3, [r4, #0]
 8006ca0:	4639      	mov	r1, r7
 8006ca2:	4630      	mov	r0, r6
 8006ca4:	eb04 0903 	add.w	r9, r4, r3
 8006ca8:	f000 fb5a 	bl	8007360 <_sbrk_r>
 8006cac:	4581      	cmp	r9, r0
 8006cae:	d142      	bne.n	8006d36 <_malloc_r+0xea>
 8006cb0:	6821      	ldr	r1, [r4, #0]
 8006cb2:	1a6d      	subs	r5, r5, r1
 8006cb4:	4629      	mov	r1, r5
 8006cb6:	4630      	mov	r0, r6
 8006cb8:	f7ff ffa6 	bl	8006c08 <sbrk_aligned>
 8006cbc:	3001      	adds	r0, #1
 8006cbe:	d03a      	beq.n	8006d36 <_malloc_r+0xea>
 8006cc0:	6823      	ldr	r3, [r4, #0]
 8006cc2:	442b      	add	r3, r5
 8006cc4:	6023      	str	r3, [r4, #0]
 8006cc6:	f8d8 3000 	ldr.w	r3, [r8]
 8006cca:	685a      	ldr	r2, [r3, #4]
 8006ccc:	bb62      	cbnz	r2, 8006d28 <_malloc_r+0xdc>
 8006cce:	f8c8 7000 	str.w	r7, [r8]
 8006cd2:	e00f      	b.n	8006cf4 <_malloc_r+0xa8>
 8006cd4:	6822      	ldr	r2, [r4, #0]
 8006cd6:	1b52      	subs	r2, r2, r5
 8006cd8:	d420      	bmi.n	8006d1c <_malloc_r+0xd0>
 8006cda:	2a0b      	cmp	r2, #11
 8006cdc:	d917      	bls.n	8006d0e <_malloc_r+0xc2>
 8006cde:	1961      	adds	r1, r4, r5
 8006ce0:	42a3      	cmp	r3, r4
 8006ce2:	6025      	str	r5, [r4, #0]
 8006ce4:	bf18      	it	ne
 8006ce6:	6059      	strne	r1, [r3, #4]
 8006ce8:	6863      	ldr	r3, [r4, #4]
 8006cea:	bf08      	it	eq
 8006cec:	f8c8 1000 	streq.w	r1, [r8]
 8006cf0:	5162      	str	r2, [r4, r5]
 8006cf2:	604b      	str	r3, [r1, #4]
 8006cf4:	4630      	mov	r0, r6
 8006cf6:	f000 f82f 	bl	8006d58 <__malloc_unlock>
 8006cfa:	f104 000b 	add.w	r0, r4, #11
 8006cfe:	1d23      	adds	r3, r4, #4
 8006d00:	f020 0007 	bic.w	r0, r0, #7
 8006d04:	1ac2      	subs	r2, r0, r3
 8006d06:	bf1c      	itt	ne
 8006d08:	1a1b      	subne	r3, r3, r0
 8006d0a:	50a3      	strne	r3, [r4, r2]
 8006d0c:	e7af      	b.n	8006c6e <_malloc_r+0x22>
 8006d0e:	6862      	ldr	r2, [r4, #4]
 8006d10:	42a3      	cmp	r3, r4
 8006d12:	bf0c      	ite	eq
 8006d14:	f8c8 2000 	streq.w	r2, [r8]
 8006d18:	605a      	strne	r2, [r3, #4]
 8006d1a:	e7eb      	b.n	8006cf4 <_malloc_r+0xa8>
 8006d1c:	4623      	mov	r3, r4
 8006d1e:	6864      	ldr	r4, [r4, #4]
 8006d20:	e7ae      	b.n	8006c80 <_malloc_r+0x34>
 8006d22:	463c      	mov	r4, r7
 8006d24:	687f      	ldr	r7, [r7, #4]
 8006d26:	e7b6      	b.n	8006c96 <_malloc_r+0x4a>
 8006d28:	461a      	mov	r2, r3
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	42a3      	cmp	r3, r4
 8006d2e:	d1fb      	bne.n	8006d28 <_malloc_r+0xdc>
 8006d30:	2300      	movs	r3, #0
 8006d32:	6053      	str	r3, [r2, #4]
 8006d34:	e7de      	b.n	8006cf4 <_malloc_r+0xa8>
 8006d36:	230c      	movs	r3, #12
 8006d38:	6033      	str	r3, [r6, #0]
 8006d3a:	4630      	mov	r0, r6
 8006d3c:	f000 f80c 	bl	8006d58 <__malloc_unlock>
 8006d40:	e794      	b.n	8006c6c <_malloc_r+0x20>
 8006d42:	6005      	str	r5, [r0, #0]
 8006d44:	e7d6      	b.n	8006cf4 <_malloc_r+0xa8>
 8006d46:	bf00      	nop
 8006d48:	2000a5e8 	.word	0x2000a5e8

08006d4c <__malloc_lock>:
 8006d4c:	4801      	ldr	r0, [pc, #4]	@ (8006d54 <__malloc_lock+0x8>)
 8006d4e:	f7ff bf01 	b.w	8006b54 <__retarget_lock_acquire_recursive>
 8006d52:	bf00      	nop
 8006d54:	2000a5e0 	.word	0x2000a5e0

08006d58 <__malloc_unlock>:
 8006d58:	4801      	ldr	r0, [pc, #4]	@ (8006d60 <__malloc_unlock+0x8>)
 8006d5a:	f7ff befc 	b.w	8006b56 <__retarget_lock_release_recursive>
 8006d5e:	bf00      	nop
 8006d60:	2000a5e0 	.word	0x2000a5e0

08006d64 <__ssputs_r>:
 8006d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d68:	688e      	ldr	r6, [r1, #8]
 8006d6a:	461f      	mov	r7, r3
 8006d6c:	42be      	cmp	r6, r7
 8006d6e:	680b      	ldr	r3, [r1, #0]
 8006d70:	4682      	mov	sl, r0
 8006d72:	460c      	mov	r4, r1
 8006d74:	4690      	mov	r8, r2
 8006d76:	d82d      	bhi.n	8006dd4 <__ssputs_r+0x70>
 8006d78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006d7c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006d80:	d026      	beq.n	8006dd0 <__ssputs_r+0x6c>
 8006d82:	6965      	ldr	r5, [r4, #20]
 8006d84:	6909      	ldr	r1, [r1, #16]
 8006d86:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006d8a:	eba3 0901 	sub.w	r9, r3, r1
 8006d8e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006d92:	1c7b      	adds	r3, r7, #1
 8006d94:	444b      	add	r3, r9
 8006d96:	106d      	asrs	r5, r5, #1
 8006d98:	429d      	cmp	r5, r3
 8006d9a:	bf38      	it	cc
 8006d9c:	461d      	movcc	r5, r3
 8006d9e:	0553      	lsls	r3, r2, #21
 8006da0:	d527      	bpl.n	8006df2 <__ssputs_r+0x8e>
 8006da2:	4629      	mov	r1, r5
 8006da4:	f7ff ff52 	bl	8006c4c <_malloc_r>
 8006da8:	4606      	mov	r6, r0
 8006daa:	b360      	cbz	r0, 8006e06 <__ssputs_r+0xa2>
 8006dac:	6921      	ldr	r1, [r4, #16]
 8006dae:	464a      	mov	r2, r9
 8006db0:	f7ff fed2 	bl	8006b58 <memcpy>
 8006db4:	89a3      	ldrh	r3, [r4, #12]
 8006db6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006dba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dbe:	81a3      	strh	r3, [r4, #12]
 8006dc0:	6126      	str	r6, [r4, #16]
 8006dc2:	6165      	str	r5, [r4, #20]
 8006dc4:	444e      	add	r6, r9
 8006dc6:	eba5 0509 	sub.w	r5, r5, r9
 8006dca:	6026      	str	r6, [r4, #0]
 8006dcc:	60a5      	str	r5, [r4, #8]
 8006dce:	463e      	mov	r6, r7
 8006dd0:	42be      	cmp	r6, r7
 8006dd2:	d900      	bls.n	8006dd6 <__ssputs_r+0x72>
 8006dd4:	463e      	mov	r6, r7
 8006dd6:	6820      	ldr	r0, [r4, #0]
 8006dd8:	4632      	mov	r2, r6
 8006dda:	4641      	mov	r1, r8
 8006ddc:	f000 faa6 	bl	800732c <memmove>
 8006de0:	68a3      	ldr	r3, [r4, #8]
 8006de2:	1b9b      	subs	r3, r3, r6
 8006de4:	60a3      	str	r3, [r4, #8]
 8006de6:	6823      	ldr	r3, [r4, #0]
 8006de8:	4433      	add	r3, r6
 8006dea:	6023      	str	r3, [r4, #0]
 8006dec:	2000      	movs	r0, #0
 8006dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006df2:	462a      	mov	r2, r5
 8006df4:	f000 fac4 	bl	8007380 <_realloc_r>
 8006df8:	4606      	mov	r6, r0
 8006dfa:	2800      	cmp	r0, #0
 8006dfc:	d1e0      	bne.n	8006dc0 <__ssputs_r+0x5c>
 8006dfe:	6921      	ldr	r1, [r4, #16]
 8006e00:	4650      	mov	r0, sl
 8006e02:	f7ff feb7 	bl	8006b74 <_free_r>
 8006e06:	230c      	movs	r3, #12
 8006e08:	f8ca 3000 	str.w	r3, [sl]
 8006e0c:	89a3      	ldrh	r3, [r4, #12]
 8006e0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e12:	81a3      	strh	r3, [r4, #12]
 8006e14:	f04f 30ff 	mov.w	r0, #4294967295
 8006e18:	e7e9      	b.n	8006dee <__ssputs_r+0x8a>
	...

08006e1c <_svfiprintf_r>:
 8006e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e20:	4698      	mov	r8, r3
 8006e22:	898b      	ldrh	r3, [r1, #12]
 8006e24:	061b      	lsls	r3, r3, #24
 8006e26:	b09d      	sub	sp, #116	@ 0x74
 8006e28:	4607      	mov	r7, r0
 8006e2a:	460d      	mov	r5, r1
 8006e2c:	4614      	mov	r4, r2
 8006e2e:	d510      	bpl.n	8006e52 <_svfiprintf_r+0x36>
 8006e30:	690b      	ldr	r3, [r1, #16]
 8006e32:	b973      	cbnz	r3, 8006e52 <_svfiprintf_r+0x36>
 8006e34:	2140      	movs	r1, #64	@ 0x40
 8006e36:	f7ff ff09 	bl	8006c4c <_malloc_r>
 8006e3a:	6028      	str	r0, [r5, #0]
 8006e3c:	6128      	str	r0, [r5, #16]
 8006e3e:	b930      	cbnz	r0, 8006e4e <_svfiprintf_r+0x32>
 8006e40:	230c      	movs	r3, #12
 8006e42:	603b      	str	r3, [r7, #0]
 8006e44:	f04f 30ff 	mov.w	r0, #4294967295
 8006e48:	b01d      	add	sp, #116	@ 0x74
 8006e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e4e:	2340      	movs	r3, #64	@ 0x40
 8006e50:	616b      	str	r3, [r5, #20]
 8006e52:	2300      	movs	r3, #0
 8006e54:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e56:	2320      	movs	r3, #32
 8006e58:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006e5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e60:	2330      	movs	r3, #48	@ 0x30
 8006e62:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007000 <_svfiprintf_r+0x1e4>
 8006e66:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006e6a:	f04f 0901 	mov.w	r9, #1
 8006e6e:	4623      	mov	r3, r4
 8006e70:	469a      	mov	sl, r3
 8006e72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e76:	b10a      	cbz	r2, 8006e7c <_svfiprintf_r+0x60>
 8006e78:	2a25      	cmp	r2, #37	@ 0x25
 8006e7a:	d1f9      	bne.n	8006e70 <_svfiprintf_r+0x54>
 8006e7c:	ebba 0b04 	subs.w	fp, sl, r4
 8006e80:	d00b      	beq.n	8006e9a <_svfiprintf_r+0x7e>
 8006e82:	465b      	mov	r3, fp
 8006e84:	4622      	mov	r2, r4
 8006e86:	4629      	mov	r1, r5
 8006e88:	4638      	mov	r0, r7
 8006e8a:	f7ff ff6b 	bl	8006d64 <__ssputs_r>
 8006e8e:	3001      	adds	r0, #1
 8006e90:	f000 80a7 	beq.w	8006fe2 <_svfiprintf_r+0x1c6>
 8006e94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e96:	445a      	add	r2, fp
 8006e98:	9209      	str	r2, [sp, #36]	@ 0x24
 8006e9a:	f89a 3000 	ldrb.w	r3, [sl]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	f000 809f 	beq.w	8006fe2 <_svfiprintf_r+0x1c6>
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	f04f 32ff 	mov.w	r2, #4294967295
 8006eaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006eae:	f10a 0a01 	add.w	sl, sl, #1
 8006eb2:	9304      	str	r3, [sp, #16]
 8006eb4:	9307      	str	r3, [sp, #28]
 8006eb6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006eba:	931a      	str	r3, [sp, #104]	@ 0x68
 8006ebc:	4654      	mov	r4, sl
 8006ebe:	2205      	movs	r2, #5
 8006ec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ec4:	484e      	ldr	r0, [pc, #312]	@ (8007000 <_svfiprintf_r+0x1e4>)
 8006ec6:	f7f9 f98b 	bl	80001e0 <memchr>
 8006eca:	9a04      	ldr	r2, [sp, #16]
 8006ecc:	b9d8      	cbnz	r0, 8006f06 <_svfiprintf_r+0xea>
 8006ece:	06d0      	lsls	r0, r2, #27
 8006ed0:	bf44      	itt	mi
 8006ed2:	2320      	movmi	r3, #32
 8006ed4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ed8:	0711      	lsls	r1, r2, #28
 8006eda:	bf44      	itt	mi
 8006edc:	232b      	movmi	r3, #43	@ 0x2b
 8006ede:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ee2:	f89a 3000 	ldrb.w	r3, [sl]
 8006ee6:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ee8:	d015      	beq.n	8006f16 <_svfiprintf_r+0xfa>
 8006eea:	9a07      	ldr	r2, [sp, #28]
 8006eec:	4654      	mov	r4, sl
 8006eee:	2000      	movs	r0, #0
 8006ef0:	f04f 0c0a 	mov.w	ip, #10
 8006ef4:	4621      	mov	r1, r4
 8006ef6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006efa:	3b30      	subs	r3, #48	@ 0x30
 8006efc:	2b09      	cmp	r3, #9
 8006efe:	d94b      	bls.n	8006f98 <_svfiprintf_r+0x17c>
 8006f00:	b1b0      	cbz	r0, 8006f30 <_svfiprintf_r+0x114>
 8006f02:	9207      	str	r2, [sp, #28]
 8006f04:	e014      	b.n	8006f30 <_svfiprintf_r+0x114>
 8006f06:	eba0 0308 	sub.w	r3, r0, r8
 8006f0a:	fa09 f303 	lsl.w	r3, r9, r3
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	9304      	str	r3, [sp, #16]
 8006f12:	46a2      	mov	sl, r4
 8006f14:	e7d2      	b.n	8006ebc <_svfiprintf_r+0xa0>
 8006f16:	9b03      	ldr	r3, [sp, #12]
 8006f18:	1d19      	adds	r1, r3, #4
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	9103      	str	r1, [sp, #12]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	bfbb      	ittet	lt
 8006f22:	425b      	neglt	r3, r3
 8006f24:	f042 0202 	orrlt.w	r2, r2, #2
 8006f28:	9307      	strge	r3, [sp, #28]
 8006f2a:	9307      	strlt	r3, [sp, #28]
 8006f2c:	bfb8      	it	lt
 8006f2e:	9204      	strlt	r2, [sp, #16]
 8006f30:	7823      	ldrb	r3, [r4, #0]
 8006f32:	2b2e      	cmp	r3, #46	@ 0x2e
 8006f34:	d10a      	bne.n	8006f4c <_svfiprintf_r+0x130>
 8006f36:	7863      	ldrb	r3, [r4, #1]
 8006f38:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f3a:	d132      	bne.n	8006fa2 <_svfiprintf_r+0x186>
 8006f3c:	9b03      	ldr	r3, [sp, #12]
 8006f3e:	1d1a      	adds	r2, r3, #4
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	9203      	str	r2, [sp, #12]
 8006f44:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006f48:	3402      	adds	r4, #2
 8006f4a:	9305      	str	r3, [sp, #20]
 8006f4c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007010 <_svfiprintf_r+0x1f4>
 8006f50:	7821      	ldrb	r1, [r4, #0]
 8006f52:	2203      	movs	r2, #3
 8006f54:	4650      	mov	r0, sl
 8006f56:	f7f9 f943 	bl	80001e0 <memchr>
 8006f5a:	b138      	cbz	r0, 8006f6c <_svfiprintf_r+0x150>
 8006f5c:	9b04      	ldr	r3, [sp, #16]
 8006f5e:	eba0 000a 	sub.w	r0, r0, sl
 8006f62:	2240      	movs	r2, #64	@ 0x40
 8006f64:	4082      	lsls	r2, r0
 8006f66:	4313      	orrs	r3, r2
 8006f68:	3401      	adds	r4, #1
 8006f6a:	9304      	str	r3, [sp, #16]
 8006f6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f70:	4824      	ldr	r0, [pc, #144]	@ (8007004 <_svfiprintf_r+0x1e8>)
 8006f72:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006f76:	2206      	movs	r2, #6
 8006f78:	f7f9 f932 	bl	80001e0 <memchr>
 8006f7c:	2800      	cmp	r0, #0
 8006f7e:	d036      	beq.n	8006fee <_svfiprintf_r+0x1d2>
 8006f80:	4b21      	ldr	r3, [pc, #132]	@ (8007008 <_svfiprintf_r+0x1ec>)
 8006f82:	bb1b      	cbnz	r3, 8006fcc <_svfiprintf_r+0x1b0>
 8006f84:	9b03      	ldr	r3, [sp, #12]
 8006f86:	3307      	adds	r3, #7
 8006f88:	f023 0307 	bic.w	r3, r3, #7
 8006f8c:	3308      	adds	r3, #8
 8006f8e:	9303      	str	r3, [sp, #12]
 8006f90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f92:	4433      	add	r3, r6
 8006f94:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f96:	e76a      	b.n	8006e6e <_svfiprintf_r+0x52>
 8006f98:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f9c:	460c      	mov	r4, r1
 8006f9e:	2001      	movs	r0, #1
 8006fa0:	e7a8      	b.n	8006ef4 <_svfiprintf_r+0xd8>
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	3401      	adds	r4, #1
 8006fa6:	9305      	str	r3, [sp, #20]
 8006fa8:	4619      	mov	r1, r3
 8006faa:	f04f 0c0a 	mov.w	ip, #10
 8006fae:	4620      	mov	r0, r4
 8006fb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fb4:	3a30      	subs	r2, #48	@ 0x30
 8006fb6:	2a09      	cmp	r2, #9
 8006fb8:	d903      	bls.n	8006fc2 <_svfiprintf_r+0x1a6>
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d0c6      	beq.n	8006f4c <_svfiprintf_r+0x130>
 8006fbe:	9105      	str	r1, [sp, #20]
 8006fc0:	e7c4      	b.n	8006f4c <_svfiprintf_r+0x130>
 8006fc2:	fb0c 2101 	mla	r1, ip, r1, r2
 8006fc6:	4604      	mov	r4, r0
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e7f0      	b.n	8006fae <_svfiprintf_r+0x192>
 8006fcc:	ab03      	add	r3, sp, #12
 8006fce:	9300      	str	r3, [sp, #0]
 8006fd0:	462a      	mov	r2, r5
 8006fd2:	4b0e      	ldr	r3, [pc, #56]	@ (800700c <_svfiprintf_r+0x1f0>)
 8006fd4:	a904      	add	r1, sp, #16
 8006fd6:	4638      	mov	r0, r7
 8006fd8:	f3af 8000 	nop.w
 8006fdc:	1c42      	adds	r2, r0, #1
 8006fde:	4606      	mov	r6, r0
 8006fe0:	d1d6      	bne.n	8006f90 <_svfiprintf_r+0x174>
 8006fe2:	89ab      	ldrh	r3, [r5, #12]
 8006fe4:	065b      	lsls	r3, r3, #25
 8006fe6:	f53f af2d 	bmi.w	8006e44 <_svfiprintf_r+0x28>
 8006fea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006fec:	e72c      	b.n	8006e48 <_svfiprintf_r+0x2c>
 8006fee:	ab03      	add	r3, sp, #12
 8006ff0:	9300      	str	r3, [sp, #0]
 8006ff2:	462a      	mov	r2, r5
 8006ff4:	4b05      	ldr	r3, [pc, #20]	@ (800700c <_svfiprintf_r+0x1f0>)
 8006ff6:	a904      	add	r1, sp, #16
 8006ff8:	4638      	mov	r0, r7
 8006ffa:	f000 f879 	bl	80070f0 <_printf_i>
 8006ffe:	e7ed      	b.n	8006fdc <_svfiprintf_r+0x1c0>
 8007000:	0800747f 	.word	0x0800747f
 8007004:	08007489 	.word	0x08007489
 8007008:	00000000 	.word	0x00000000
 800700c:	08006d65 	.word	0x08006d65
 8007010:	08007485 	.word	0x08007485

08007014 <_printf_common>:
 8007014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007018:	4616      	mov	r6, r2
 800701a:	4698      	mov	r8, r3
 800701c:	688a      	ldr	r2, [r1, #8]
 800701e:	690b      	ldr	r3, [r1, #16]
 8007020:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007024:	4293      	cmp	r3, r2
 8007026:	bfb8      	it	lt
 8007028:	4613      	movlt	r3, r2
 800702a:	6033      	str	r3, [r6, #0]
 800702c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007030:	4607      	mov	r7, r0
 8007032:	460c      	mov	r4, r1
 8007034:	b10a      	cbz	r2, 800703a <_printf_common+0x26>
 8007036:	3301      	adds	r3, #1
 8007038:	6033      	str	r3, [r6, #0]
 800703a:	6823      	ldr	r3, [r4, #0]
 800703c:	0699      	lsls	r1, r3, #26
 800703e:	bf42      	ittt	mi
 8007040:	6833      	ldrmi	r3, [r6, #0]
 8007042:	3302      	addmi	r3, #2
 8007044:	6033      	strmi	r3, [r6, #0]
 8007046:	6825      	ldr	r5, [r4, #0]
 8007048:	f015 0506 	ands.w	r5, r5, #6
 800704c:	d106      	bne.n	800705c <_printf_common+0x48>
 800704e:	f104 0a19 	add.w	sl, r4, #25
 8007052:	68e3      	ldr	r3, [r4, #12]
 8007054:	6832      	ldr	r2, [r6, #0]
 8007056:	1a9b      	subs	r3, r3, r2
 8007058:	42ab      	cmp	r3, r5
 800705a:	dc26      	bgt.n	80070aa <_printf_common+0x96>
 800705c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007060:	6822      	ldr	r2, [r4, #0]
 8007062:	3b00      	subs	r3, #0
 8007064:	bf18      	it	ne
 8007066:	2301      	movne	r3, #1
 8007068:	0692      	lsls	r2, r2, #26
 800706a:	d42b      	bmi.n	80070c4 <_printf_common+0xb0>
 800706c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007070:	4641      	mov	r1, r8
 8007072:	4638      	mov	r0, r7
 8007074:	47c8      	blx	r9
 8007076:	3001      	adds	r0, #1
 8007078:	d01e      	beq.n	80070b8 <_printf_common+0xa4>
 800707a:	6823      	ldr	r3, [r4, #0]
 800707c:	6922      	ldr	r2, [r4, #16]
 800707e:	f003 0306 	and.w	r3, r3, #6
 8007082:	2b04      	cmp	r3, #4
 8007084:	bf02      	ittt	eq
 8007086:	68e5      	ldreq	r5, [r4, #12]
 8007088:	6833      	ldreq	r3, [r6, #0]
 800708a:	1aed      	subeq	r5, r5, r3
 800708c:	68a3      	ldr	r3, [r4, #8]
 800708e:	bf0c      	ite	eq
 8007090:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007094:	2500      	movne	r5, #0
 8007096:	4293      	cmp	r3, r2
 8007098:	bfc4      	itt	gt
 800709a:	1a9b      	subgt	r3, r3, r2
 800709c:	18ed      	addgt	r5, r5, r3
 800709e:	2600      	movs	r6, #0
 80070a0:	341a      	adds	r4, #26
 80070a2:	42b5      	cmp	r5, r6
 80070a4:	d11a      	bne.n	80070dc <_printf_common+0xc8>
 80070a6:	2000      	movs	r0, #0
 80070a8:	e008      	b.n	80070bc <_printf_common+0xa8>
 80070aa:	2301      	movs	r3, #1
 80070ac:	4652      	mov	r2, sl
 80070ae:	4641      	mov	r1, r8
 80070b0:	4638      	mov	r0, r7
 80070b2:	47c8      	blx	r9
 80070b4:	3001      	adds	r0, #1
 80070b6:	d103      	bne.n	80070c0 <_printf_common+0xac>
 80070b8:	f04f 30ff 	mov.w	r0, #4294967295
 80070bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070c0:	3501      	adds	r5, #1
 80070c2:	e7c6      	b.n	8007052 <_printf_common+0x3e>
 80070c4:	18e1      	adds	r1, r4, r3
 80070c6:	1c5a      	adds	r2, r3, #1
 80070c8:	2030      	movs	r0, #48	@ 0x30
 80070ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80070ce:	4422      	add	r2, r4
 80070d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80070d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80070d8:	3302      	adds	r3, #2
 80070da:	e7c7      	b.n	800706c <_printf_common+0x58>
 80070dc:	2301      	movs	r3, #1
 80070de:	4622      	mov	r2, r4
 80070e0:	4641      	mov	r1, r8
 80070e2:	4638      	mov	r0, r7
 80070e4:	47c8      	blx	r9
 80070e6:	3001      	adds	r0, #1
 80070e8:	d0e6      	beq.n	80070b8 <_printf_common+0xa4>
 80070ea:	3601      	adds	r6, #1
 80070ec:	e7d9      	b.n	80070a2 <_printf_common+0x8e>
	...

080070f0 <_printf_i>:
 80070f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070f4:	7e0f      	ldrb	r7, [r1, #24]
 80070f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80070f8:	2f78      	cmp	r7, #120	@ 0x78
 80070fa:	4691      	mov	r9, r2
 80070fc:	4680      	mov	r8, r0
 80070fe:	460c      	mov	r4, r1
 8007100:	469a      	mov	sl, r3
 8007102:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007106:	d807      	bhi.n	8007118 <_printf_i+0x28>
 8007108:	2f62      	cmp	r7, #98	@ 0x62
 800710a:	d80a      	bhi.n	8007122 <_printf_i+0x32>
 800710c:	2f00      	cmp	r7, #0
 800710e:	f000 80d1 	beq.w	80072b4 <_printf_i+0x1c4>
 8007112:	2f58      	cmp	r7, #88	@ 0x58
 8007114:	f000 80b8 	beq.w	8007288 <_printf_i+0x198>
 8007118:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800711c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007120:	e03a      	b.n	8007198 <_printf_i+0xa8>
 8007122:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007126:	2b15      	cmp	r3, #21
 8007128:	d8f6      	bhi.n	8007118 <_printf_i+0x28>
 800712a:	a101      	add	r1, pc, #4	@ (adr r1, 8007130 <_printf_i+0x40>)
 800712c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007130:	08007189 	.word	0x08007189
 8007134:	0800719d 	.word	0x0800719d
 8007138:	08007119 	.word	0x08007119
 800713c:	08007119 	.word	0x08007119
 8007140:	08007119 	.word	0x08007119
 8007144:	08007119 	.word	0x08007119
 8007148:	0800719d 	.word	0x0800719d
 800714c:	08007119 	.word	0x08007119
 8007150:	08007119 	.word	0x08007119
 8007154:	08007119 	.word	0x08007119
 8007158:	08007119 	.word	0x08007119
 800715c:	0800729b 	.word	0x0800729b
 8007160:	080071c7 	.word	0x080071c7
 8007164:	08007255 	.word	0x08007255
 8007168:	08007119 	.word	0x08007119
 800716c:	08007119 	.word	0x08007119
 8007170:	080072bd 	.word	0x080072bd
 8007174:	08007119 	.word	0x08007119
 8007178:	080071c7 	.word	0x080071c7
 800717c:	08007119 	.word	0x08007119
 8007180:	08007119 	.word	0x08007119
 8007184:	0800725d 	.word	0x0800725d
 8007188:	6833      	ldr	r3, [r6, #0]
 800718a:	1d1a      	adds	r2, r3, #4
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	6032      	str	r2, [r6, #0]
 8007190:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007194:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007198:	2301      	movs	r3, #1
 800719a:	e09c      	b.n	80072d6 <_printf_i+0x1e6>
 800719c:	6833      	ldr	r3, [r6, #0]
 800719e:	6820      	ldr	r0, [r4, #0]
 80071a0:	1d19      	adds	r1, r3, #4
 80071a2:	6031      	str	r1, [r6, #0]
 80071a4:	0606      	lsls	r6, r0, #24
 80071a6:	d501      	bpl.n	80071ac <_printf_i+0xbc>
 80071a8:	681d      	ldr	r5, [r3, #0]
 80071aa:	e003      	b.n	80071b4 <_printf_i+0xc4>
 80071ac:	0645      	lsls	r5, r0, #25
 80071ae:	d5fb      	bpl.n	80071a8 <_printf_i+0xb8>
 80071b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80071b4:	2d00      	cmp	r5, #0
 80071b6:	da03      	bge.n	80071c0 <_printf_i+0xd0>
 80071b8:	232d      	movs	r3, #45	@ 0x2d
 80071ba:	426d      	negs	r5, r5
 80071bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071c0:	4858      	ldr	r0, [pc, #352]	@ (8007324 <_printf_i+0x234>)
 80071c2:	230a      	movs	r3, #10
 80071c4:	e011      	b.n	80071ea <_printf_i+0xfa>
 80071c6:	6821      	ldr	r1, [r4, #0]
 80071c8:	6833      	ldr	r3, [r6, #0]
 80071ca:	0608      	lsls	r0, r1, #24
 80071cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80071d0:	d402      	bmi.n	80071d8 <_printf_i+0xe8>
 80071d2:	0649      	lsls	r1, r1, #25
 80071d4:	bf48      	it	mi
 80071d6:	b2ad      	uxthmi	r5, r5
 80071d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80071da:	4852      	ldr	r0, [pc, #328]	@ (8007324 <_printf_i+0x234>)
 80071dc:	6033      	str	r3, [r6, #0]
 80071de:	bf14      	ite	ne
 80071e0:	230a      	movne	r3, #10
 80071e2:	2308      	moveq	r3, #8
 80071e4:	2100      	movs	r1, #0
 80071e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80071ea:	6866      	ldr	r6, [r4, #4]
 80071ec:	60a6      	str	r6, [r4, #8]
 80071ee:	2e00      	cmp	r6, #0
 80071f0:	db05      	blt.n	80071fe <_printf_i+0x10e>
 80071f2:	6821      	ldr	r1, [r4, #0]
 80071f4:	432e      	orrs	r6, r5
 80071f6:	f021 0104 	bic.w	r1, r1, #4
 80071fa:	6021      	str	r1, [r4, #0]
 80071fc:	d04b      	beq.n	8007296 <_printf_i+0x1a6>
 80071fe:	4616      	mov	r6, r2
 8007200:	fbb5 f1f3 	udiv	r1, r5, r3
 8007204:	fb03 5711 	mls	r7, r3, r1, r5
 8007208:	5dc7      	ldrb	r7, [r0, r7]
 800720a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800720e:	462f      	mov	r7, r5
 8007210:	42bb      	cmp	r3, r7
 8007212:	460d      	mov	r5, r1
 8007214:	d9f4      	bls.n	8007200 <_printf_i+0x110>
 8007216:	2b08      	cmp	r3, #8
 8007218:	d10b      	bne.n	8007232 <_printf_i+0x142>
 800721a:	6823      	ldr	r3, [r4, #0]
 800721c:	07df      	lsls	r7, r3, #31
 800721e:	d508      	bpl.n	8007232 <_printf_i+0x142>
 8007220:	6923      	ldr	r3, [r4, #16]
 8007222:	6861      	ldr	r1, [r4, #4]
 8007224:	4299      	cmp	r1, r3
 8007226:	bfde      	ittt	le
 8007228:	2330      	movle	r3, #48	@ 0x30
 800722a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800722e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007232:	1b92      	subs	r2, r2, r6
 8007234:	6122      	str	r2, [r4, #16]
 8007236:	f8cd a000 	str.w	sl, [sp]
 800723a:	464b      	mov	r3, r9
 800723c:	aa03      	add	r2, sp, #12
 800723e:	4621      	mov	r1, r4
 8007240:	4640      	mov	r0, r8
 8007242:	f7ff fee7 	bl	8007014 <_printf_common>
 8007246:	3001      	adds	r0, #1
 8007248:	d14a      	bne.n	80072e0 <_printf_i+0x1f0>
 800724a:	f04f 30ff 	mov.w	r0, #4294967295
 800724e:	b004      	add	sp, #16
 8007250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007254:	6823      	ldr	r3, [r4, #0]
 8007256:	f043 0320 	orr.w	r3, r3, #32
 800725a:	6023      	str	r3, [r4, #0]
 800725c:	4832      	ldr	r0, [pc, #200]	@ (8007328 <_printf_i+0x238>)
 800725e:	2778      	movs	r7, #120	@ 0x78
 8007260:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007264:	6823      	ldr	r3, [r4, #0]
 8007266:	6831      	ldr	r1, [r6, #0]
 8007268:	061f      	lsls	r7, r3, #24
 800726a:	f851 5b04 	ldr.w	r5, [r1], #4
 800726e:	d402      	bmi.n	8007276 <_printf_i+0x186>
 8007270:	065f      	lsls	r7, r3, #25
 8007272:	bf48      	it	mi
 8007274:	b2ad      	uxthmi	r5, r5
 8007276:	6031      	str	r1, [r6, #0]
 8007278:	07d9      	lsls	r1, r3, #31
 800727a:	bf44      	itt	mi
 800727c:	f043 0320 	orrmi.w	r3, r3, #32
 8007280:	6023      	strmi	r3, [r4, #0]
 8007282:	b11d      	cbz	r5, 800728c <_printf_i+0x19c>
 8007284:	2310      	movs	r3, #16
 8007286:	e7ad      	b.n	80071e4 <_printf_i+0xf4>
 8007288:	4826      	ldr	r0, [pc, #152]	@ (8007324 <_printf_i+0x234>)
 800728a:	e7e9      	b.n	8007260 <_printf_i+0x170>
 800728c:	6823      	ldr	r3, [r4, #0]
 800728e:	f023 0320 	bic.w	r3, r3, #32
 8007292:	6023      	str	r3, [r4, #0]
 8007294:	e7f6      	b.n	8007284 <_printf_i+0x194>
 8007296:	4616      	mov	r6, r2
 8007298:	e7bd      	b.n	8007216 <_printf_i+0x126>
 800729a:	6833      	ldr	r3, [r6, #0]
 800729c:	6825      	ldr	r5, [r4, #0]
 800729e:	6961      	ldr	r1, [r4, #20]
 80072a0:	1d18      	adds	r0, r3, #4
 80072a2:	6030      	str	r0, [r6, #0]
 80072a4:	062e      	lsls	r6, r5, #24
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	d501      	bpl.n	80072ae <_printf_i+0x1be>
 80072aa:	6019      	str	r1, [r3, #0]
 80072ac:	e002      	b.n	80072b4 <_printf_i+0x1c4>
 80072ae:	0668      	lsls	r0, r5, #25
 80072b0:	d5fb      	bpl.n	80072aa <_printf_i+0x1ba>
 80072b2:	8019      	strh	r1, [r3, #0]
 80072b4:	2300      	movs	r3, #0
 80072b6:	6123      	str	r3, [r4, #16]
 80072b8:	4616      	mov	r6, r2
 80072ba:	e7bc      	b.n	8007236 <_printf_i+0x146>
 80072bc:	6833      	ldr	r3, [r6, #0]
 80072be:	1d1a      	adds	r2, r3, #4
 80072c0:	6032      	str	r2, [r6, #0]
 80072c2:	681e      	ldr	r6, [r3, #0]
 80072c4:	6862      	ldr	r2, [r4, #4]
 80072c6:	2100      	movs	r1, #0
 80072c8:	4630      	mov	r0, r6
 80072ca:	f7f8 ff89 	bl	80001e0 <memchr>
 80072ce:	b108      	cbz	r0, 80072d4 <_printf_i+0x1e4>
 80072d0:	1b80      	subs	r0, r0, r6
 80072d2:	6060      	str	r0, [r4, #4]
 80072d4:	6863      	ldr	r3, [r4, #4]
 80072d6:	6123      	str	r3, [r4, #16]
 80072d8:	2300      	movs	r3, #0
 80072da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80072de:	e7aa      	b.n	8007236 <_printf_i+0x146>
 80072e0:	6923      	ldr	r3, [r4, #16]
 80072e2:	4632      	mov	r2, r6
 80072e4:	4649      	mov	r1, r9
 80072e6:	4640      	mov	r0, r8
 80072e8:	47d0      	blx	sl
 80072ea:	3001      	adds	r0, #1
 80072ec:	d0ad      	beq.n	800724a <_printf_i+0x15a>
 80072ee:	6823      	ldr	r3, [r4, #0]
 80072f0:	079b      	lsls	r3, r3, #30
 80072f2:	d413      	bmi.n	800731c <_printf_i+0x22c>
 80072f4:	68e0      	ldr	r0, [r4, #12]
 80072f6:	9b03      	ldr	r3, [sp, #12]
 80072f8:	4298      	cmp	r0, r3
 80072fa:	bfb8      	it	lt
 80072fc:	4618      	movlt	r0, r3
 80072fe:	e7a6      	b.n	800724e <_printf_i+0x15e>
 8007300:	2301      	movs	r3, #1
 8007302:	4632      	mov	r2, r6
 8007304:	4649      	mov	r1, r9
 8007306:	4640      	mov	r0, r8
 8007308:	47d0      	blx	sl
 800730a:	3001      	adds	r0, #1
 800730c:	d09d      	beq.n	800724a <_printf_i+0x15a>
 800730e:	3501      	adds	r5, #1
 8007310:	68e3      	ldr	r3, [r4, #12]
 8007312:	9903      	ldr	r1, [sp, #12]
 8007314:	1a5b      	subs	r3, r3, r1
 8007316:	42ab      	cmp	r3, r5
 8007318:	dcf2      	bgt.n	8007300 <_printf_i+0x210>
 800731a:	e7eb      	b.n	80072f4 <_printf_i+0x204>
 800731c:	2500      	movs	r5, #0
 800731e:	f104 0619 	add.w	r6, r4, #25
 8007322:	e7f5      	b.n	8007310 <_printf_i+0x220>
 8007324:	08007490 	.word	0x08007490
 8007328:	080074a1 	.word	0x080074a1

0800732c <memmove>:
 800732c:	4288      	cmp	r0, r1
 800732e:	b510      	push	{r4, lr}
 8007330:	eb01 0402 	add.w	r4, r1, r2
 8007334:	d902      	bls.n	800733c <memmove+0x10>
 8007336:	4284      	cmp	r4, r0
 8007338:	4623      	mov	r3, r4
 800733a:	d807      	bhi.n	800734c <memmove+0x20>
 800733c:	1e43      	subs	r3, r0, #1
 800733e:	42a1      	cmp	r1, r4
 8007340:	d008      	beq.n	8007354 <memmove+0x28>
 8007342:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007346:	f803 2f01 	strb.w	r2, [r3, #1]!
 800734a:	e7f8      	b.n	800733e <memmove+0x12>
 800734c:	4402      	add	r2, r0
 800734e:	4601      	mov	r1, r0
 8007350:	428a      	cmp	r2, r1
 8007352:	d100      	bne.n	8007356 <memmove+0x2a>
 8007354:	bd10      	pop	{r4, pc}
 8007356:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800735a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800735e:	e7f7      	b.n	8007350 <memmove+0x24>

08007360 <_sbrk_r>:
 8007360:	b538      	push	{r3, r4, r5, lr}
 8007362:	4d06      	ldr	r5, [pc, #24]	@ (800737c <_sbrk_r+0x1c>)
 8007364:	2300      	movs	r3, #0
 8007366:	4604      	mov	r4, r0
 8007368:	4608      	mov	r0, r1
 800736a:	602b      	str	r3, [r5, #0]
 800736c:	f7f9 fb9a 	bl	8000aa4 <_sbrk>
 8007370:	1c43      	adds	r3, r0, #1
 8007372:	d102      	bne.n	800737a <_sbrk_r+0x1a>
 8007374:	682b      	ldr	r3, [r5, #0]
 8007376:	b103      	cbz	r3, 800737a <_sbrk_r+0x1a>
 8007378:	6023      	str	r3, [r4, #0]
 800737a:	bd38      	pop	{r3, r4, r5, pc}
 800737c:	2000a5dc 	.word	0x2000a5dc

08007380 <_realloc_r>:
 8007380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007384:	4607      	mov	r7, r0
 8007386:	4614      	mov	r4, r2
 8007388:	460d      	mov	r5, r1
 800738a:	b921      	cbnz	r1, 8007396 <_realloc_r+0x16>
 800738c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007390:	4611      	mov	r1, r2
 8007392:	f7ff bc5b 	b.w	8006c4c <_malloc_r>
 8007396:	b92a      	cbnz	r2, 80073a4 <_realloc_r+0x24>
 8007398:	f7ff fbec 	bl	8006b74 <_free_r>
 800739c:	4625      	mov	r5, r4
 800739e:	4628      	mov	r0, r5
 80073a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073a4:	f000 f81a 	bl	80073dc <_malloc_usable_size_r>
 80073a8:	4284      	cmp	r4, r0
 80073aa:	4606      	mov	r6, r0
 80073ac:	d802      	bhi.n	80073b4 <_realloc_r+0x34>
 80073ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80073b2:	d8f4      	bhi.n	800739e <_realloc_r+0x1e>
 80073b4:	4621      	mov	r1, r4
 80073b6:	4638      	mov	r0, r7
 80073b8:	f7ff fc48 	bl	8006c4c <_malloc_r>
 80073bc:	4680      	mov	r8, r0
 80073be:	b908      	cbnz	r0, 80073c4 <_realloc_r+0x44>
 80073c0:	4645      	mov	r5, r8
 80073c2:	e7ec      	b.n	800739e <_realloc_r+0x1e>
 80073c4:	42b4      	cmp	r4, r6
 80073c6:	4622      	mov	r2, r4
 80073c8:	4629      	mov	r1, r5
 80073ca:	bf28      	it	cs
 80073cc:	4632      	movcs	r2, r6
 80073ce:	f7ff fbc3 	bl	8006b58 <memcpy>
 80073d2:	4629      	mov	r1, r5
 80073d4:	4638      	mov	r0, r7
 80073d6:	f7ff fbcd 	bl	8006b74 <_free_r>
 80073da:	e7f1      	b.n	80073c0 <_realloc_r+0x40>

080073dc <_malloc_usable_size_r>:
 80073dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073e0:	1f18      	subs	r0, r3, #4
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	bfbc      	itt	lt
 80073e6:	580b      	ldrlt	r3, [r1, r0]
 80073e8:	18c0      	addlt	r0, r0, r3
 80073ea:	4770      	bx	lr

080073ec <_init>:
 80073ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ee:	bf00      	nop
 80073f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073f2:	bc08      	pop	{r3}
 80073f4:	469e      	mov	lr, r3
 80073f6:	4770      	bx	lr

080073f8 <_fini>:
 80073f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073fa:	bf00      	nop
 80073fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073fe:	bc08      	pop	{r3}
 8007400:	469e      	mov	lr, r3
 8007402:	4770      	bx	lr
