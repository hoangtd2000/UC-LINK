
start_usb_composite.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c65c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800c7ec  0800c7ec  0000d7ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c89c  0800c89c  0000e304  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c89c  0800c89c  0000d89c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c8a4  0800c8a4  0000e304  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c8a4  0800c8a4  0000d8a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c8a8  0800c8a8  0000d8a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000304  20000000  0800c8ac  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e304  2**0
                  CONTENTS
 10 .bss          000024f8  20000304  20000304  0000e304  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200027fc  200027fc  0000e304  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e304  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020cae  00000000  00000000  0000e334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005133  00000000  00000000  0002efe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a78  00000000  00000000  00034118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001464  00000000  00000000  00035b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026c5d  00000000  00000000  00036ff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024d3b  00000000  00000000  0005dc51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5bbe  00000000  00000000  0008298c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015854a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007388  00000000  00000000  00158590  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  0015f918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000304 	.word	0x20000304
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c7d4 	.word	0x0800c7d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000308 	.word	0x20000308
 80001cc:	0800c7d4 	.word	0x0800c7d4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80005a0:	4b17      	ldr	r3, [pc, #92]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005a2:	4a18      	ldr	r2, [pc, #96]	@ (8000604 <MX_CAN1_Init+0x68>)
 80005a4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80005a6:	4b16      	ldr	r3, [pc, #88]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005a8:	2206      	movs	r2, #6
 80005aa:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80005ac:	4b14      	ldr	r3, [pc, #80]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005b2:	4b13      	ldr	r3, [pc, #76]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80005b8:	4b11      	ldr	r3, [pc, #68]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005ba:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 80005be:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80005c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005c2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80005c6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80005c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80005ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80005d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80005da:	4b09      	ldr	r3, [pc, #36]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005dc:	2200      	movs	r2, #0
 80005de:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005e0:	4b07      	ldr	r3, [pc, #28]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80005e6:	4b06      	ldr	r3, [pc, #24]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005ec:	4804      	ldr	r0, [pc, #16]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005ee:	f000 ffe9 	bl	80015c4 <HAL_CAN_Init>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80005f8:	f000 fb0c 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000320 	.word	0x20000320
 8000604:	40006400 	.word	0x40006400

08000608 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b08a      	sub	sp, #40	@ 0x28
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000610:	f107 0314 	add.w	r3, r7, #20
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a21      	ldr	r2, [pc, #132]	@ (80006ac <HAL_CAN_MspInit+0xa4>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d13b      	bne.n	80006a2 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800062a:	2300      	movs	r3, #0
 800062c:	613b      	str	r3, [r7, #16]
 800062e:	4b20      	ldr	r3, [pc, #128]	@ (80006b0 <HAL_CAN_MspInit+0xa8>)
 8000630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000632:	4a1f      	ldr	r2, [pc, #124]	@ (80006b0 <HAL_CAN_MspInit+0xa8>)
 8000634:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000638:	6413      	str	r3, [r2, #64]	@ 0x40
 800063a:	4b1d      	ldr	r3, [pc, #116]	@ (80006b0 <HAL_CAN_MspInit+0xa8>)
 800063c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800063e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000642:	613b      	str	r3, [r7, #16]
 8000644:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	60fb      	str	r3, [r7, #12]
 800064a:	4b19      	ldr	r3, [pc, #100]	@ (80006b0 <HAL_CAN_MspInit+0xa8>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064e:	4a18      	ldr	r2, [pc, #96]	@ (80006b0 <HAL_CAN_MspInit+0xa8>)
 8000650:	f043 0308 	orr.w	r3, r3, #8
 8000654:	6313      	str	r3, [r2, #48]	@ 0x30
 8000656:	4b16      	ldr	r3, [pc, #88]	@ (80006b0 <HAL_CAN_MspInit+0xa8>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	f003 0308 	and.w	r3, r3, #8
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000662:	2303      	movs	r3, #3
 8000664:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000666:	2302      	movs	r3, #2
 8000668:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800066e:	2303      	movs	r3, #3
 8000670:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000672:	2309      	movs	r3, #9
 8000674:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000676:	f107 0314 	add.w	r3, r7, #20
 800067a:	4619      	mov	r1, r3
 800067c:	480d      	ldr	r0, [pc, #52]	@ (80006b4 <HAL_CAN_MspInit+0xac>)
 800067e:	f002 fb25 	bl	8002ccc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000682:	2200      	movs	r2, #0
 8000684:	2100      	movs	r1, #0
 8000686:	2014      	movs	r0, #20
 8000688:	f001 ff01 	bl	800248e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800068c:	2014      	movs	r0, #20
 800068e:	f001 ff1a 	bl	80024c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000692:	2200      	movs	r2, #0
 8000694:	2100      	movs	r1, #0
 8000696:	2015      	movs	r0, #21
 8000698:	f001 fef9 	bl	800248e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800069c:	2015      	movs	r0, #21
 800069e:	f001 ff12 	bl	80024c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80006a2:	bf00      	nop
 80006a4:	3728      	adds	r7, #40	@ 0x28
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40006400 	.word	0x40006400
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40020c00 	.word	0x40020c00

080006b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	607b      	str	r3, [r7, #4]
 80006c2:	4b10      	ldr	r3, [pc, #64]	@ (8000704 <MX_DMA_Init+0x4c>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c6:	4a0f      	ldr	r2, [pc, #60]	@ (8000704 <MX_DMA_Init+0x4c>)
 80006c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80006cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000704 <MX_DMA_Init+0x4c>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80006da:	2200      	movs	r2, #0
 80006dc:	2100      	movs	r1, #0
 80006de:	200b      	movs	r0, #11
 80006e0:	f001 fed5 	bl	800248e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80006e4:	200b      	movs	r0, #11
 80006e6:	f001 feee 	bl	80024c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2100      	movs	r1, #0
 80006ee:	202f      	movs	r0, #47	@ 0x2f
 80006f0:	f001 fecd 	bl	800248e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80006f4:	202f      	movs	r0, #47	@ 0x2f
 80006f6:	f001 fee6 	bl	80024c6 <HAL_NVIC_EnableIRQ>

}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40023800 	.word	0x40023800

08000708 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b08a      	sub	sp, #40	@ 0x28
 800070c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070e:	f107 0314 	add.w	r3, r7, #20
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]
 800071c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	613b      	str	r3, [r7, #16]
 8000722:	4b2d      	ldr	r3, [pc, #180]	@ (80007d8 <MX_GPIO_Init+0xd0>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	4a2c      	ldr	r2, [pc, #176]	@ (80007d8 <MX_GPIO_Init+0xd0>)
 8000728:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800072c:	6313      	str	r3, [r2, #48]	@ 0x30
 800072e:	4b2a      	ldr	r3, [pc, #168]	@ (80007d8 <MX_GPIO_Init+0xd0>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000736:	613b      	str	r3, [r7, #16]
 8000738:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	60fb      	str	r3, [r7, #12]
 800073e:	4b26      	ldr	r3, [pc, #152]	@ (80007d8 <MX_GPIO_Init+0xd0>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	4a25      	ldr	r2, [pc, #148]	@ (80007d8 <MX_GPIO_Init+0xd0>)
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	6313      	str	r3, [r2, #48]	@ 0x30
 800074a:	4b23      	ldr	r3, [pc, #140]	@ (80007d8 <MX_GPIO_Init+0xd0>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	60bb      	str	r3, [r7, #8]
 800075a:	4b1f      	ldr	r3, [pc, #124]	@ (80007d8 <MX_GPIO_Init+0xd0>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	4a1e      	ldr	r2, [pc, #120]	@ (80007d8 <MX_GPIO_Init+0xd0>)
 8000760:	f043 0304 	orr.w	r3, r3, #4
 8000764:	6313      	str	r3, [r2, #48]	@ 0x30
 8000766:	4b1c      	ldr	r3, [pc, #112]	@ (80007d8 <MX_GPIO_Init+0xd0>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	f003 0304 	and.w	r3, r3, #4
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	4b18      	ldr	r3, [pc, #96]	@ (80007d8 <MX_GPIO_Init+0xd0>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	4a17      	ldr	r2, [pc, #92]	@ (80007d8 <MX_GPIO_Init+0xd0>)
 800077c:	f043 0308 	orr.w	r3, r3, #8
 8000780:	6313      	str	r3, [r2, #48]	@ 0x30
 8000782:	4b15      	ldr	r3, [pc, #84]	@ (80007d8 <MX_GPIO_Init+0xd0>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	f003 0308 	and.w	r3, r3, #8
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	603b      	str	r3, [r7, #0]
 8000792:	4b11      	ldr	r3, [pc, #68]	@ (80007d8 <MX_GPIO_Init+0xd0>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	4a10      	ldr	r2, [pc, #64]	@ (80007d8 <MX_GPIO_Init+0xd0>)
 8000798:	f043 0302 	orr.w	r3, r3, #2
 800079c:	6313      	str	r3, [r2, #48]	@ 0x30
 800079e:	4b0e      	ldr	r3, [pc, #56]	@ (80007d8 <MX_GPIO_Init+0xd0>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	f003 0302 	and.w	r3, r3, #2
 80007a6:	603b      	str	r3, [r7, #0]
 80007a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	21c0      	movs	r1, #192	@ 0xc0
 80007ae:	480b      	ldr	r0, [pc, #44]	@ (80007dc <MX_GPIO_Init+0xd4>)
 80007b0:	f002 fd24 	bl	80031fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007b4:	23c0      	movs	r3, #192	@ 0xc0
 80007b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b8:	2301      	movs	r3, #1
 80007ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c0:	2300      	movs	r3, #0
 80007c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	4619      	mov	r1, r3
 80007ca:	4804      	ldr	r0, [pc, #16]	@ (80007dc <MX_GPIO_Init+0xd4>)
 80007cc:	f002 fa7e 	bl	8002ccc <HAL_GPIO_Init>

}
 80007d0:	bf00      	nop
 80007d2:	3728      	adds	r7, #40	@ 0x28
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40023800 	.word	0x40023800
 80007dc:	40020000 	.word	0x40020000

080007e0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007e4:	4b12      	ldr	r3, [pc, #72]	@ (8000830 <MX_I2C1_Init+0x50>)
 80007e6:	4a13      	ldr	r2, [pc, #76]	@ (8000834 <MX_I2C1_Init+0x54>)
 80007e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80007ea:	4b11      	ldr	r3, [pc, #68]	@ (8000830 <MX_I2C1_Init+0x50>)
 80007ec:	4a12      	ldr	r2, [pc, #72]	@ (8000838 <MX_I2C1_Init+0x58>)
 80007ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000830 <MX_I2C1_Init+0x50>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000830 <MX_I2C1_Init+0x50>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000830 <MX_I2C1_Init+0x50>)
 80007fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000802:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000804:	4b0a      	ldr	r3, [pc, #40]	@ (8000830 <MX_I2C1_Init+0x50>)
 8000806:	2200      	movs	r2, #0
 8000808:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800080a:	4b09      	ldr	r3, [pc, #36]	@ (8000830 <MX_I2C1_Init+0x50>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000810:	4b07      	ldr	r3, [pc, #28]	@ (8000830 <MX_I2C1_Init+0x50>)
 8000812:	2200      	movs	r2, #0
 8000814:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000816:	4b06      	ldr	r3, [pc, #24]	@ (8000830 <MX_I2C1_Init+0x50>)
 8000818:	2200      	movs	r2, #0
 800081a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800081c:	4804      	ldr	r0, [pc, #16]	@ (8000830 <MX_I2C1_Init+0x50>)
 800081e:	f002 fd21 	bl	8003264 <HAL_I2C_Init>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000828:	f000 f9f4 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20000348 	.word	0x20000348
 8000834:	40005400 	.word	0x40005400
 8000838:	00061a80 	.word	0x00061a80

0800083c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08a      	sub	sp, #40	@ 0x28
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a19      	ldr	r2, [pc, #100]	@ (80008c0 <HAL_I2C_MspInit+0x84>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d12b      	bne.n	80008b6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	613b      	str	r3, [r7, #16]
 8000862:	4b18      	ldr	r3, [pc, #96]	@ (80008c4 <HAL_I2C_MspInit+0x88>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	4a17      	ldr	r2, [pc, #92]	@ (80008c4 <HAL_I2C_MspInit+0x88>)
 8000868:	f043 0302 	orr.w	r3, r3, #2
 800086c:	6313      	str	r3, [r2, #48]	@ 0x30
 800086e:	4b15      	ldr	r3, [pc, #84]	@ (80008c4 <HAL_I2C_MspInit+0x88>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	f003 0302 	and.w	r3, r3, #2
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800087a:	23c0      	movs	r3, #192	@ 0xc0
 800087c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800087e:	2312      	movs	r3, #18
 8000880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000886:	2303      	movs	r3, #3
 8000888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800088a:	2304      	movs	r3, #4
 800088c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800088e:	f107 0314 	add.w	r3, r7, #20
 8000892:	4619      	mov	r1, r3
 8000894:	480c      	ldr	r0, [pc, #48]	@ (80008c8 <HAL_I2C_MspInit+0x8c>)
 8000896:	f002 fa19 	bl	8002ccc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	4b09      	ldr	r3, [pc, #36]	@ (80008c4 <HAL_I2C_MspInit+0x88>)
 80008a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a2:	4a08      	ldr	r2, [pc, #32]	@ (80008c4 <HAL_I2C_MspInit+0x88>)
 80008a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80008a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80008aa:	4b06      	ldr	r3, [pc, #24]	@ (80008c4 <HAL_I2C_MspInit+0x88>)
 80008ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80008b6:	bf00      	nop
 80008b8:	3728      	adds	r7, #40	@ 0x28
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40005400 	.word	0x40005400
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40020400 	.word	0x40020400

080008cc <Process_HID_Frames>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Process_HID_Frames(void) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b090      	sub	sp, #64	@ 0x40
 80008d0:	af00      	add	r7, sp, #0
    uint8_t frame[HID_FRAME_SIZE];

    while (HID_Frame_Read(&hid_frame_fifo,frame)) {
 80008d2:	e007      	b.n	80008e4 <Process_HID_Frames+0x18>
        // Xử lý từng frame ở đây
//        if ( frame[0]== 2) {
//        	uint32_t id = (frame[2]<< 8) | frame[3];
//        	CanTx_init(id, frame[4], &frame[5]);
//        }
    	FuncSendCanArray[frame[0]](frame);
 80008d4:	783b      	ldrb	r3, [r7, #0]
 80008d6:	461a      	mov	r2, r3
 80008d8:	4b09      	ldr	r3, [pc, #36]	@ (8000900 <Process_HID_Frames+0x34>)
 80008da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008de:	463a      	mov	r2, r7
 80008e0:	4610      	mov	r0, r2
 80008e2:	4798      	blx	r3
    while (HID_Frame_Read(&hid_frame_fifo,frame)) {
 80008e4:	463b      	mov	r3, r7
 80008e6:	4619      	mov	r1, r3
 80008e8:	4806      	ldr	r0, [pc, #24]	@ (8000904 <Process_HID_Frames+0x38>)
 80008ea:	f008 fb49 	bl	8008f80 <HID_Frame_Read>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d1ef      	bne.n	80008d4 <Process_HID_Frames+0x8>
    }
}
 80008f4:	bf00      	nop
 80008f6:	bf00      	nop
 80008f8:	3740      	adds	r7, #64	@ 0x40
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000000 	.word	0x20000000
 8000904:	20002104 	.word	0x20002104

08000908 <SendCanConfig>:

uint8_t SendCanConfig(uint8_t *data){
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]

}
 8000910:	bf00      	nop
 8000912:	4618      	mov	r0, r3
 8000914:	370c      	adds	r7, #12
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr

0800091e <SendCanMessage>:

}



uint8_t SendCanMessage(uint8_t *data){
 800091e:	b580      	push	{r7, lr}
 8000920:	b084      	sub	sp, #16
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
	uint32_t id = (data[2]<< 8) | data[3];
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	3302      	adds	r3, #2
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	021b      	lsls	r3, r3, #8
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	3203      	adds	r2, #3
 8000932:	7812      	ldrb	r2, [r2, #0]
 8000934:	4313      	orrs	r3, r2
 8000936:	60fb      	str	r3, [r7, #12]
	CanTx_init(id, data[4], &data[5]);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	3304      	adds	r3, #4
 800093c:	7819      	ldrb	r1, [r3, #0]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	3305      	adds	r3, #5
 8000942:	461a      	mov	r2, r3
 8000944:	68f8      	ldr	r0, [r7, #12]
 8000946:	f000 f805 	bl	8000954 <CanTx_init>
}
 800094a:	bf00      	nop
 800094c:	4618      	mov	r0, r3
 800094e:	3710      	adds	r7, #16
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}

08000954 <CanTx_init>:

void CanTx_init(uint32_t id, uint8_t dlc, uint8_t *data){
 8000954:	b580      	push	{r7, lr}
 8000956:	b088      	sub	sp, #32
 8000958:	af00      	add	r7, sp, #0
 800095a:	60f8      	str	r0, [r7, #12]
 800095c:	460b      	mov	r3, r1
 800095e:	607a      	str	r2, [r7, #4]
 8000960:	72fb      	strb	r3, [r7, #11]
	uint8_t buffer[8] = {0};
 8000962:	f107 0318 	add.w	r3, r7, #24
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
	uint32_t txMailbox;
	TxHeader.StdId = id;
 800096c:	4a10      	ldr	r2, [pc, #64]	@ (80009b0 <CanTx_init+0x5c>)
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	6013      	str	r3, [r2, #0]
	TxHeader.IDE = CAN_ID_STD;
 8000972:	4b0f      	ldr	r3, [pc, #60]	@ (80009b0 <CanTx_init+0x5c>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8000978:	4b0d      	ldr	r3, [pc, #52]	@ (80009b0 <CanTx_init+0x5c>)
 800097a:	2200      	movs	r2, #0
 800097c:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = dlc;
 800097e:	7afb      	ldrb	r3, [r7, #11]
 8000980:	4a0b      	ldr	r2, [pc, #44]	@ (80009b0 <CanTx_init+0x5c>)
 8000982:	6113      	str	r3, [r2, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 8000984:	4b0a      	ldr	r3, [pc, #40]	@ (80009b0 <CanTx_init+0x5c>)
 8000986:	2200      	movs	r2, #0
 8000988:	751a      	strb	r2, [r3, #20]
	memcpy(buffer, data, dlc);
 800098a:	7afa      	ldrb	r2, [r7, #11]
 800098c:	f107 0318 	add.w	r3, r7, #24
 8000990:	6879      	ldr	r1, [r7, #4]
 8000992:	4618      	mov	r0, r3
 8000994:	f00b fad4 	bl	800bf40 <memcpy>
	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, buffer, &txMailbox);
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	f107 0218 	add.w	r2, r7, #24
 80009a0:	4903      	ldr	r1, [pc, #12]	@ (80009b0 <CanTx_init+0x5c>)
 80009a2:	4804      	ldr	r0, [pc, #16]	@ (80009b4 <CanTx_init+0x60>)
 80009a4:	f001 f82c 	bl	8001a00 <HAL_CAN_AddTxMessage>
}
 80009a8:	bf00      	nop
 80009aa:	3720      	adds	r7, #32
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	2000039c 	.word	0x2000039c
 80009b4:	20000320 	.word	0x20000320

080009b8 <CanRx_init>:

void CanRx_init(void){
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0

		sFilterConfig.FilterBank = 0;
 80009bc:	4b12      	ldr	r3, [pc, #72]	@ (8000a08 <CanRx_init+0x50>)
 80009be:	2200      	movs	r2, #0
 80009c0:	615a      	str	r2, [r3, #20]
		sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80009c2:	4b11      	ldr	r3, [pc, #68]	@ (8000a08 <CanRx_init+0x50>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
		sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80009c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a08 <CanRx_init+0x50>)
 80009ca:	2201      	movs	r2, #1
 80009cc:	61da      	str	r2, [r3, #28]
		sFilterConfig.FilterIdHigh = 0x0000;
 80009ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000a08 <CanRx_init+0x50>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
		sFilterConfig.FilterIdLow = 0;
 80009d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000a08 <CanRx_init+0x50>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	605a      	str	r2, [r3, #4]
		sFilterConfig.FilterMaskIdHigh = 0x0000;
 80009da:	4b0b      	ldr	r3, [pc, #44]	@ (8000a08 <CanRx_init+0x50>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
		sFilterConfig.FilterMaskIdLow = 0;
 80009e0:	4b09      	ldr	r3, [pc, #36]	@ (8000a08 <CanRx_init+0x50>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	60da      	str	r2, [r3, #12]
		sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80009e6:	4b08      	ldr	r3, [pc, #32]	@ (8000a08 <CanRx_init+0x50>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]
		sFilterConfig.FilterActivation = ENABLE;
 80009ec:	4b06      	ldr	r3, [pc, #24]	@ (8000a08 <CanRx_init+0x50>)
 80009ee:	2201      	movs	r2, #1
 80009f0:	621a      	str	r2, [r3, #32]
		HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 80009f2:	4905      	ldr	r1, [pc, #20]	@ (8000a08 <CanRx_init+0x50>)
 80009f4:	4805      	ldr	r0, [pc, #20]	@ (8000a0c <CanRx_init+0x54>)
 80009f6:	f000 fee1 	bl	80017bc <HAL_CAN_ConfigFilter>
		HAL_CAN_ActivateNotification(&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING);
 80009fa:	2102      	movs	r1, #2
 80009fc:	4803      	ldr	r0, [pc, #12]	@ (8000a0c <CanRx_init+0x54>)
 80009fe:	f001 f9f1 	bl	8001de4 <HAL_CAN_ActivateNotification>
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200003d0 	.word	0x200003d0
 8000a0c:	20000320 	.word	0x20000320

08000a10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a14:	f000 fd40 	bl	8001498 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a18:	f000 f824 	bl	8000a64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a1c:	f7ff fe74 	bl	8000708 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a20:	f7ff fe4a 	bl	80006b8 <MX_DMA_Init>
  MX_CAN1_Init();
 8000a24:	f7ff fdba 	bl	800059c <MX_CAN1_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000a28:	f000 fc8a 	bl	8001340 <MX_USB_OTG_FS_PCD_Init>
  MX_UART5_Init();
 8000a2c:	f000 fb54 	bl	80010d8 <MX_UART5_Init>
  MX_I2C1_Init();
 8000a30:	f7ff fed6 	bl	80007e0 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000a34:	f000 f9ee 	bl	8000e14 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000a38:	f000 fa3c 	bl	8000eb4 <MX_TIM2_Init>
  //MX_TIM4_Init();
  MX_TIM5_Init();
 8000a3c:	f000 fa86 	bl	8000f4c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 8000a40:	f007 fd26 	bl	8008490 <MX_USB_DEVICE_Init>
  HAL_TIM_Base_Start(&htim5);
 8000a44:	4805      	ldr	r0, [pc, #20]	@ (8000a5c <main+0x4c>)
 8000a46:	f004 fc8b 	bl	8005360 <HAL_TIM_Base_Start>
  //HAL_TIM_Base_Start_IT(&htim4);
  HAL_CAN_Start(&hcan1);
 8000a4a:	4805      	ldr	r0, [pc, #20]	@ (8000a60 <main+0x50>)
 8000a4c:	f000 ff94 	bl	8001978 <HAL_CAN_Start>
  CanRx_init();
 8000a50:	f7ff ffb2 	bl	80009b8 <CanRx_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Process_HID_Frames();
 8000a54:	f7ff ff3a 	bl	80008cc <Process_HID_Frames>
 8000a58:	e7fc      	b.n	8000a54 <main+0x44>
 8000a5a:	bf00      	nop
 8000a5c:	20000514 	.word	0x20000514
 8000a60:	20000320 	.word	0x20000320

08000a64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b094      	sub	sp, #80	@ 0x50
 8000a68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a6a:	f107 0320 	add.w	r3, r7, #32
 8000a6e:	2230      	movs	r2, #48	@ 0x30
 8000a70:	2100      	movs	r1, #0
 8000a72:	4618      	mov	r0, r3
 8000a74:	f00b fa30 	bl	800bed8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a78:	f107 030c 	add.w	r3, r7, #12
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60bb      	str	r3, [r7, #8]
 8000a8c:	4b28      	ldr	r3, [pc, #160]	@ (8000b30 <SystemClock_Config+0xcc>)
 8000a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a90:	4a27      	ldr	r2, [pc, #156]	@ (8000b30 <SystemClock_Config+0xcc>)
 8000a92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a96:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a98:	4b25      	ldr	r3, [pc, #148]	@ (8000b30 <SystemClock_Config+0xcc>)
 8000a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aa0:	60bb      	str	r3, [r7, #8]
 8000aa2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	4b22      	ldr	r3, [pc, #136]	@ (8000b34 <SystemClock_Config+0xd0>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a21      	ldr	r2, [pc, #132]	@ (8000b34 <SystemClock_Config+0xd0>)
 8000aae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ab2:	6013      	str	r3, [r2, #0]
 8000ab4:	4b1f      	ldr	r3, [pc, #124]	@ (8000b34 <SystemClock_Config+0xd0>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ac4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ac8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aca:	2302      	movs	r3, #2
 8000acc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ace:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ad4:	2304      	movs	r3, #4
 8000ad6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ad8:	23a8      	movs	r3, #168	@ 0xa8
 8000ada:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000adc:	2302      	movs	r3, #2
 8000ade:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ae0:	2307      	movs	r3, #7
 8000ae2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae4:	f107 0320 	add.w	r3, r7, #32
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f003 ff51 	bl	8004990 <HAL_RCC_OscConfig>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000af4:	f000 f88e 	bl	8000c14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af8:	230f      	movs	r3, #15
 8000afa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000afc:	2302      	movs	r3, #2
 8000afe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b04:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000b08:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b0a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b0e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b10:	f107 030c 	add.w	r3, r7, #12
 8000b14:	2105      	movs	r1, #5
 8000b16:	4618      	mov	r0, r3
 8000b18:	f004 f9b2 	bl	8004e80 <HAL_RCC_ClockConfig>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b22:	f000 f877 	bl	8000c14 <Error_Handler>
  }
}
 8000b26:	bf00      	nop
 8000b28:	3750      	adds	r7, #80	@ 0x50
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40023800 	.word	0x40023800
 8000b34:	40007000 	.word	0x40007000

08000b38 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
    memset(usbFrame, 0, sizeof(usbFrame));
 8000b40:	2240      	movs	r2, #64	@ 0x40
 8000b42:	2100      	movs	r1, #0
 8000b44:	482d      	ldr	r0, [pc, #180]	@ (8000bfc <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8000b46:	f00b f9c7 	bl	800bed8 <memset>
    if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, &usbFrame[6]) == HAL_OK)
 8000b4a:	4b2d      	ldr	r3, [pc, #180]	@ (8000c00 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 8000b4c:	4a2d      	ldr	r2, [pc, #180]	@ (8000c04 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8000b4e:	2100      	movs	r1, #0
 8000b50:	482d      	ldr	r0, [pc, #180]	@ (8000c08 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8000b52:	f001 f825 	bl	8001ba0 <HAL_CAN_GetRxMessage>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d14b      	bne.n	8000bf4 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>
    {
       HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7); // báo nhận
 8000b5c:	2180      	movs	r1, #128	@ 0x80
 8000b5e:	482b      	ldr	r0, [pc, #172]	@ (8000c0c <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8000b60:	f002 fb65 	bl	800322e <HAL_GPIO_TogglePin>
        // Byte 0: CMD
        usbFrame[0] = 0x03;
 8000b64:	4b25      	ldr	r3, [pc, #148]	@ (8000bfc <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8000b66:	2203      	movs	r2, #3
 8000b68:	701a      	strb	r2, [r3, #0]

        // Byte 1: DLC (4-bit high), FrameType (4-bit low)
        uint8_t dlc = RxHeader.DLC & 0x0F;
 8000b6a:	4b26      	ldr	r3, [pc, #152]	@ (8000c04 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8000b6c:	691b      	ldr	r3, [r3, #16]
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	f003 030f 	and.w	r3, r3, #15
 8000b74:	73bb      	strb	r3, [r7, #14]
        uint8_t frameType = 0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	73fb      	strb	r3, [r7, #15]
        if (RxHeader.IDE == CAN_ID_EXT)
 8000b7a:	4b22      	ldr	r3, [pc, #136]	@ (8000c04 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8000b7c:	689b      	ldr	r3, [r3, #8]
 8000b7e:	2b04      	cmp	r3, #4
 8000b80:	d102      	bne.n	8000b88 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>
            frameType = 1;
 8000b82:	2301      	movs	r3, #1
 8000b84:	73fb      	strb	r3, [r7, #15]
 8000b86:	e005      	b.n	8000b94 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>
        else if (RxHeader.RTR == CAN_RTR_REMOTE)
 8000b88:	4b1e      	ldr	r3, [pc, #120]	@ (8000c04 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	2b02      	cmp	r3, #2
 8000b8e:	d101      	bne.n	8000b94 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>
            frameType = 2;
 8000b90:	2302      	movs	r3, #2
 8000b92:	73fb      	strb	r3, [r7, #15]

        usbFrame[1] = (dlc << 4) | (frameType & 0x0F);
 8000b94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b98:	011b      	lsls	r3, r3, #4
 8000b9a:	b25a      	sxtb	r2, r3
 8000b9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ba0:	f003 030f 	and.w	r3, r3, #15
 8000ba4:	b25b      	sxtb	r3, r3
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	b25b      	sxtb	r3, r3
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	4b13      	ldr	r3, [pc, #76]	@ (8000bfc <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8000bae:	705a      	strb	r2, [r3, #1]

        // Byte 2~5: CAN ID (big-endian)
        uint32_t canId = (RxHeader.IDE == CAN_ID_EXT) ? RxHeader.ExtId : RxHeader.StdId;
 8000bb0:	4b14      	ldr	r3, [pc, #80]	@ (8000c04 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8000bb2:	689b      	ldr	r3, [r3, #8]
 8000bb4:	2b04      	cmp	r3, #4
 8000bb6:	d102      	bne.n	8000bbe <HAL_CAN_RxFifo0MsgPendingCallback+0x86>
 8000bb8:	4b12      	ldr	r3, [pc, #72]	@ (8000c04 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	e001      	b.n	8000bc2 <HAL_CAN_RxFifo0MsgPendingCallback+0x8a>
 8000bbe:	4b11      	ldr	r3, [pc, #68]	@ (8000c04 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	60bb      	str	r3, [r7, #8]
        usbFrame[2] = (canId >> 24) & 0xFF;
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	0e1b      	lsrs	r3, r3, #24
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	4b0c      	ldr	r3, [pc, #48]	@ (8000bfc <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8000bcc:	709a      	strb	r2, [r3, #2]
        usbFrame[3] = (canId >> 16) & 0xFF;
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	0c1b      	lsrs	r3, r3, #16
 8000bd2:	b2da      	uxtb	r2, r3
 8000bd4:	4b09      	ldr	r3, [pc, #36]	@ (8000bfc <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8000bd6:	70da      	strb	r2, [r3, #3]
        usbFrame[4] = (canId >> 8) & 0xFF;
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	0a1b      	lsrs	r3, r3, #8
 8000bdc:	b2da      	uxtb	r2, r3
 8000bde:	4b07      	ldr	r3, [pc, #28]	@ (8000bfc <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8000be0:	711a      	strb	r2, [r3, #4]
        usbFrame[5] = canId & 0xFF;
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	b2da      	uxtb	r2, r3
 8000be6:	4b05      	ldr	r3, [pc, #20]	@ (8000bfc <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8000be8:	715a      	strb	r2, [r3, #5]
       // HID_Frame_Write(&hid_frame_fifo_receive,usbFrame);
        USBD_CUSTOM_HID_SendReport(&hUsbDevice,usbFrame, HID_FRAME_SIZE);
 8000bea:	2240      	movs	r2, #64	@ 0x40
 8000bec:	4903      	ldr	r1, [pc, #12]	@ (8000bfc <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8000bee:	4808      	ldr	r0, [pc, #32]	@ (8000c10 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8000bf0:	f009 fbb4 	bl	800a35c <USBD_CUSTOM_HID_SendReport>
    }
}
 8000bf4:	bf00      	nop
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	200003f8 	.word	0x200003f8
 8000c00:	200003fe 	.word	0x200003fe
 8000c04:	200003b4 	.word	0x200003b4
 8000c08:	20000320 	.word	0x20000320
 8000c0c:	40020000 	.word	0x40020000
 8000c10:	20000b4c 	.word	0x20000b4c

08000c14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c18:	b672      	cpsid	i
}
 8000c1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c1c:	bf00      	nop
 8000c1e:	e7fd      	b.n	8000c1c <Error_Handler+0x8>

08000c20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	607b      	str	r3, [r7, #4]
 8000c2a:	4b10      	ldr	r3, [pc, #64]	@ (8000c6c <HAL_MspInit+0x4c>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c2e:	4a0f      	ldr	r2, [pc, #60]	@ (8000c6c <HAL_MspInit+0x4c>)
 8000c30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c34:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c36:	4b0d      	ldr	r3, [pc, #52]	@ (8000c6c <HAL_MspInit+0x4c>)
 8000c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	603b      	str	r3, [r7, #0]
 8000c46:	4b09      	ldr	r3, [pc, #36]	@ (8000c6c <HAL_MspInit+0x4c>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c4a:	4a08      	ldr	r2, [pc, #32]	@ (8000c6c <HAL_MspInit+0x4c>)
 8000c4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c50:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c52:	4b06      	ldr	r3, [pc, #24]	@ (8000c6c <HAL_MspInit+0x4c>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c5a:	603b      	str	r3, [r7, #0]
 8000c5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	40023800 	.word	0x40023800

08000c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c74:	bf00      	nop
 8000c76:	e7fd      	b.n	8000c74 <NMI_Handler+0x4>

08000c78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c7c:	bf00      	nop
 8000c7e:	e7fd      	b.n	8000c7c <HardFault_Handler+0x4>

08000c80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c84:	bf00      	nop
 8000c86:	e7fd      	b.n	8000c84 <MemManage_Handler+0x4>

08000c88 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c8c:	bf00      	nop
 8000c8e:	e7fd      	b.n	8000c8c <BusFault_Handler+0x4>

08000c90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c94:	bf00      	nop
 8000c96:	e7fd      	b.n	8000c94 <UsageFault_Handler+0x4>

08000c98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr

08000ca6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr

08000cc2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cc6:	f000 fc39 	bl	800153c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
	...

08000cd0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8000cd4:	4802      	ldr	r0, [pc, #8]	@ (8000ce0 <DMA1_Stream0_IRQHandler+0x10>)
 8000cd6:	f001 fdbd 	bl	8002854 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000604 	.word	0x20000604

08000ce4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000ce8:	4802      	ldr	r0, [pc, #8]	@ (8000cf4 <CAN1_RX0_IRQHandler+0x10>)
 8000cea:	f001 f8a1 	bl	8001e30 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000320 	.word	0x20000320

08000cf8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000cfc:	4802      	ldr	r0, [pc, #8]	@ (8000d08 <CAN1_RX1_IRQHandler+0x10>)
 8000cfe:	f001 f897 	bl	8001e30 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000320 	.word	0x20000320

08000d0c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d10:	4802      	ldr	r0, [pc, #8]	@ (8000d1c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000d12:	f004 fc2c 	bl	800556e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	2000043c 	.word	0x2000043c

08000d20 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d24:	4802      	ldr	r0, [pc, #8]	@ (8000d30 <TIM2_IRQHandler+0x10>)
 8000d26:	f004 fc22 	bl	800556e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000484 	.word	0x20000484

08000d34 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000d38:	4802      	ldr	r0, [pc, #8]	@ (8000d44 <TIM4_IRQHandler+0x10>)
 8000d3a:	f004 fc18 	bl	800556e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	200004cc 	.word	0x200004cc

08000d48 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8000d4c:	4802      	ldr	r0, [pc, #8]	@ (8000d58 <DMA1_Stream7_IRQHandler+0x10>)
 8000d4e:	f001 fd81 	bl	8002854 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	200005a4 	.word	0x200005a4

08000d5c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000d60:	4802      	ldr	r0, [pc, #8]	@ (8000d6c <UART5_IRQHandler+0x10>)
 8000d62:	f005 f8e5 	bl	8005f30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	2000055c 	.word	0x2000055c

08000d70 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000d74:	4802      	ldr	r0, [pc, #8]	@ (8000d80 <OTG_FS_IRQHandler+0x10>)
 8000d76:	f002 fcfd 	bl	8003774 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000664 	.word	0x20000664

08000d84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d8c:	4a14      	ldr	r2, [pc, #80]	@ (8000de0 <_sbrk+0x5c>)
 8000d8e:	4b15      	ldr	r3, [pc, #84]	@ (8000de4 <_sbrk+0x60>)
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d98:	4b13      	ldr	r3, [pc, #76]	@ (8000de8 <_sbrk+0x64>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d102      	bne.n	8000da6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000da0:	4b11      	ldr	r3, [pc, #68]	@ (8000de8 <_sbrk+0x64>)
 8000da2:	4a12      	ldr	r2, [pc, #72]	@ (8000dec <_sbrk+0x68>)
 8000da4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000da6:	4b10      	ldr	r3, [pc, #64]	@ (8000de8 <_sbrk+0x64>)
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4413      	add	r3, r2
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d207      	bcs.n	8000dc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000db4:	f00b f898 	bl	800bee8 <__errno>
 8000db8:	4603      	mov	r3, r0
 8000dba:	220c      	movs	r2, #12
 8000dbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc2:	e009      	b.n	8000dd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dc4:	4b08      	ldr	r3, [pc, #32]	@ (8000de8 <_sbrk+0x64>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dca:	4b07      	ldr	r3, [pc, #28]	@ (8000de8 <_sbrk+0x64>)
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	4a05      	ldr	r2, [pc, #20]	@ (8000de8 <_sbrk+0x64>)
 8000dd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3718      	adds	r7, #24
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20020000 	.word	0x20020000
 8000de4:	00000400 	.word	0x00000400
 8000de8:	20000438 	.word	0x20000438
 8000dec:	20002800 	.word	0x20002800

08000df0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000df4:	4b06      	ldr	r3, [pc, #24]	@ (8000e10 <SystemInit+0x20>)
 8000df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dfa:	4a05      	ldr	r2, [pc, #20]	@ (8000e10 <SystemInit+0x20>)
 8000dfc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b086      	sub	sp, #24
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e1a:	f107 0308 	add.w	r3, r7, #8
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	605a      	str	r2, [r3, #4]
 8000e24:	609a      	str	r2, [r3, #8]
 8000e26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e28:	463b      	mov	r3, r7
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e30:	4b1e      	ldr	r3, [pc, #120]	@ (8000eac <MX_TIM1_Init+0x98>)
 8000e32:	4a1f      	ldr	r2, [pc, #124]	@ (8000eb0 <MX_TIM1_Init+0x9c>)
 8000e34:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 8000e36:	4b1d      	ldr	r3, [pc, #116]	@ (8000eac <MX_TIM1_Init+0x98>)
 8000e38:	22a7      	movs	r2, #167	@ 0xa7
 8000e3a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000eac <MX_TIM1_Init+0x98>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000e42:	4b1a      	ldr	r3, [pc, #104]	@ (8000eac <MX_TIM1_Init+0x98>)
 8000e44:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e48:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e4a:	4b18      	ldr	r3, [pc, #96]	@ (8000eac <MX_TIM1_Init+0x98>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e50:	4b16      	ldr	r3, [pc, #88]	@ (8000eac <MX_TIM1_Init+0x98>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e56:	4b15      	ldr	r3, [pc, #84]	@ (8000eac <MX_TIM1_Init+0x98>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e5c:	4813      	ldr	r0, [pc, #76]	@ (8000eac <MX_TIM1_Init+0x98>)
 8000e5e:	f004 fa2f 	bl	80052c0 <HAL_TIM_Base_Init>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000e68:	f7ff fed4 	bl	8000c14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e70:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e72:	f107 0308 	add.w	r3, r7, #8
 8000e76:	4619      	mov	r1, r3
 8000e78:	480c      	ldr	r0, [pc, #48]	@ (8000eac <MX_TIM1_Init+0x98>)
 8000e7a:	f004 fc68 	bl	800574e <HAL_TIM_ConfigClockSource>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000e84:	f7ff fec6 	bl	8000c14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e90:	463b      	mov	r3, r7
 8000e92:	4619      	mov	r1, r3
 8000e94:	4805      	ldr	r0, [pc, #20]	@ (8000eac <MX_TIM1_Init+0x98>)
 8000e96:	f004 fe89 	bl	8005bac <HAL_TIMEx_MasterConfigSynchronization>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000ea0:	f7ff feb8 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ea4:	bf00      	nop
 8000ea6:	3718      	adds	r7, #24
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	2000043c 	.word	0x2000043c
 8000eb0:	40010000 	.word	0x40010000

08000eb4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eba:	f107 0308 	add.w	r3, r7, #8
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	605a      	str	r2, [r3, #4]
 8000ec4:	609a      	str	r2, [r3, #8]
 8000ec6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec8:	463b      	mov	r3, r7
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ed0:	4b1d      	ldr	r3, [pc, #116]	@ (8000f48 <MX_TIM2_Init+0x94>)
 8000ed2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ed6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8000ed8:	4b1b      	ldr	r3, [pc, #108]	@ (8000f48 <MX_TIM2_Init+0x94>)
 8000eda:	2253      	movs	r2, #83	@ 0x53
 8000edc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ede:	4b1a      	ldr	r3, [pc, #104]	@ (8000f48 <MX_TIM2_Init+0x94>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3000;
 8000ee4:	4b18      	ldr	r3, [pc, #96]	@ (8000f48 <MX_TIM2_Init+0x94>)
 8000ee6:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000eea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eec:	4b16      	ldr	r3, [pc, #88]	@ (8000f48 <MX_TIM2_Init+0x94>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ef2:	4b15      	ldr	r3, [pc, #84]	@ (8000f48 <MX_TIM2_Init+0x94>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ef8:	4813      	ldr	r0, [pc, #76]	@ (8000f48 <MX_TIM2_Init+0x94>)
 8000efa:	f004 f9e1 	bl	80052c0 <HAL_TIM_Base_Init>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f04:	f7ff fe86 	bl	8000c14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f0e:	f107 0308 	add.w	r3, r7, #8
 8000f12:	4619      	mov	r1, r3
 8000f14:	480c      	ldr	r0, [pc, #48]	@ (8000f48 <MX_TIM2_Init+0x94>)
 8000f16:	f004 fc1a 	bl	800574e <HAL_TIM_ConfigClockSource>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f20:	f7ff fe78 	bl	8000c14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f24:	2300      	movs	r3, #0
 8000f26:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f2c:	463b      	mov	r3, r7
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4805      	ldr	r0, [pc, #20]	@ (8000f48 <MX_TIM2_Init+0x94>)
 8000f32:	f004 fe3b 	bl	8005bac <HAL_TIMEx_MasterConfigSynchronization>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f3c:	f7ff fe6a 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f40:	bf00      	nop
 8000f42:	3718      	adds	r7, #24
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20000484 	.word	0x20000484

08000f4c <MX_TIM5_Init>:
  /* USER CODE END TIM4_Init 2 */

}
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f52:	f107 0308 	add.w	r3, r7, #8
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f60:	463b      	mov	r3, r7
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000f68:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe0 <MX_TIM5_Init+0x94>)
 8000f6a:	4a1e      	ldr	r2, [pc, #120]	@ (8000fe4 <MX_TIM5_Init+0x98>)
 8000f6c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 8399;
 8000f6e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fe0 <MX_TIM5_Init+0x94>)
 8000f70:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000f74:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f76:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe0 <MX_TIM5_Init+0x94>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xffffffff;
 8000f7c:	4b18      	ldr	r3, [pc, #96]	@ (8000fe0 <MX_TIM5_Init+0x94>)
 8000f7e:	f04f 32ff 	mov.w	r2, #4294967295
 8000f82:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f84:	4b16      	ldr	r3, [pc, #88]	@ (8000fe0 <MX_TIM5_Init+0x94>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f8a:	4b15      	ldr	r3, [pc, #84]	@ (8000fe0 <MX_TIM5_Init+0x94>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000f90:	4813      	ldr	r0, [pc, #76]	@ (8000fe0 <MX_TIM5_Init+0x94>)
 8000f92:	f004 f995 	bl	80052c0 <HAL_TIM_Base_Init>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000f9c:	f7ff fe3a 	bl	8000c14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fa0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fa4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000fa6:	f107 0308 	add.w	r3, r7, #8
 8000faa:	4619      	mov	r1, r3
 8000fac:	480c      	ldr	r0, [pc, #48]	@ (8000fe0 <MX_TIM5_Init+0x94>)
 8000fae:	f004 fbce 	bl	800574e <HAL_TIM_ConfigClockSource>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000fb8:	f7ff fe2c 	bl	8000c14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000fc4:	463b      	mov	r3, r7
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4805      	ldr	r0, [pc, #20]	@ (8000fe0 <MX_TIM5_Init+0x94>)
 8000fca:	f004 fdef 	bl	8005bac <HAL_TIMEx_MasterConfigSynchronization>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000fd4:	f7ff fe1e 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000fd8:	bf00      	nop
 8000fda:	3718      	adds	r7, #24
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20000514 	.word	0x20000514
 8000fe4:	40000c00 	.word	0x40000c00

08000fe8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a34      	ldr	r2, [pc, #208]	@ (80010c8 <HAL_TIM_Base_MspInit+0xe0>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d116      	bne.n	8001028 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	617b      	str	r3, [r7, #20]
 8000ffe:	4b33      	ldr	r3, [pc, #204]	@ (80010cc <HAL_TIM_Base_MspInit+0xe4>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001002:	4a32      	ldr	r2, [pc, #200]	@ (80010cc <HAL_TIM_Base_MspInit+0xe4>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	6453      	str	r3, [r2, #68]	@ 0x44
 800100a:	4b30      	ldr	r3, [pc, #192]	@ (80010cc <HAL_TIM_Base_MspInit+0xe4>)
 800100c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	617b      	str	r3, [r7, #20]
 8001014:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001016:	2200      	movs	r2, #0
 8001018:	2100      	movs	r1, #0
 800101a:	2019      	movs	r0, #25
 800101c:	f001 fa37 	bl	800248e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001020:	2019      	movs	r0, #25
 8001022:	f001 fa50 	bl	80024c6 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001026:	e04a      	b.n	80010be <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM2)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001030:	d116      	bne.n	8001060 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	613b      	str	r3, [r7, #16]
 8001036:	4b25      	ldr	r3, [pc, #148]	@ (80010cc <HAL_TIM_Base_MspInit+0xe4>)
 8001038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103a:	4a24      	ldr	r2, [pc, #144]	@ (80010cc <HAL_TIM_Base_MspInit+0xe4>)
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	6413      	str	r3, [r2, #64]	@ 0x40
 8001042:	4b22      	ldr	r3, [pc, #136]	@ (80010cc <HAL_TIM_Base_MspInit+0xe4>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	613b      	str	r3, [r7, #16]
 800104c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800104e:	2200      	movs	r2, #0
 8001050:	2100      	movs	r1, #0
 8001052:	201c      	movs	r0, #28
 8001054:	f001 fa1b 	bl	800248e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001058:	201c      	movs	r0, #28
 800105a:	f001 fa34 	bl	80024c6 <HAL_NVIC_EnableIRQ>
}
 800105e:	e02e      	b.n	80010be <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM4)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a1a      	ldr	r2, [pc, #104]	@ (80010d0 <HAL_TIM_Base_MspInit+0xe8>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d116      	bne.n	8001098 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	4b17      	ldr	r3, [pc, #92]	@ (80010cc <HAL_TIM_Base_MspInit+0xe4>)
 8001070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001072:	4a16      	ldr	r2, [pc, #88]	@ (80010cc <HAL_TIM_Base_MspInit+0xe4>)
 8001074:	f043 0304 	orr.w	r3, r3, #4
 8001078:	6413      	str	r3, [r2, #64]	@ 0x40
 800107a:	4b14      	ldr	r3, [pc, #80]	@ (80010cc <HAL_TIM_Base_MspInit+0xe4>)
 800107c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107e:	f003 0304 	and.w	r3, r3, #4
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001086:	2200      	movs	r2, #0
 8001088:	2100      	movs	r1, #0
 800108a:	201e      	movs	r0, #30
 800108c:	f001 f9ff 	bl	800248e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001090:	201e      	movs	r0, #30
 8001092:	f001 fa18 	bl	80024c6 <HAL_NVIC_EnableIRQ>
}
 8001096:	e012      	b.n	80010be <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM5)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a0d      	ldr	r2, [pc, #52]	@ (80010d4 <HAL_TIM_Base_MspInit+0xec>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d10d      	bne.n	80010be <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	4b09      	ldr	r3, [pc, #36]	@ (80010cc <HAL_TIM_Base_MspInit+0xe4>)
 80010a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010aa:	4a08      	ldr	r2, [pc, #32]	@ (80010cc <HAL_TIM_Base_MspInit+0xe4>)
 80010ac:	f043 0308 	orr.w	r3, r3, #8
 80010b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80010b2:	4b06      	ldr	r3, [pc, #24]	@ (80010cc <HAL_TIM_Base_MspInit+0xe4>)
 80010b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b6:	f003 0308 	and.w	r3, r3, #8
 80010ba:	60bb      	str	r3, [r7, #8]
 80010bc:	68bb      	ldr	r3, [r7, #8]
}
 80010be:	bf00      	nop
 80010c0:	3718      	adds	r7, #24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40010000 	.word	0x40010000
 80010cc:	40023800 	.word	0x40023800
 80010d0:	40000800 	.word	0x40000800
 80010d4:	40000c00 	.word	0x40000c00

080010d8 <MX_UART5_Init>:
DMA_HandleTypeDef hdma_uart5_tx;
DMA_HandleTypeDef hdma_uart5_rx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80010dc:	4b11      	ldr	r3, [pc, #68]	@ (8001124 <MX_UART5_Init+0x4c>)
 80010de:	4a12      	ldr	r2, [pc, #72]	@ (8001128 <MX_UART5_Init+0x50>)
 80010e0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80010e2:	4b10      	ldr	r3, [pc, #64]	@ (8001124 <MX_UART5_Init+0x4c>)
 80010e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010e8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80010ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001124 <MX_UART5_Init+0x4c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80010f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001124 <MX_UART5_Init+0x4c>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80010f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001124 <MX_UART5_Init+0x4c>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80010fc:	4b09      	ldr	r3, [pc, #36]	@ (8001124 <MX_UART5_Init+0x4c>)
 80010fe:	220c      	movs	r2, #12
 8001100:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001102:	4b08      	ldr	r3, [pc, #32]	@ (8001124 <MX_UART5_Init+0x4c>)
 8001104:	2200      	movs	r2, #0
 8001106:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001108:	4b06      	ldr	r3, [pc, #24]	@ (8001124 <MX_UART5_Init+0x4c>)
 800110a:	2200      	movs	r2, #0
 800110c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800110e:	4805      	ldr	r0, [pc, #20]	@ (8001124 <MX_UART5_Init+0x4c>)
 8001110:	f004 fddc 	bl	8005ccc <HAL_UART_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800111a:	f7ff fd7b 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */
 // HAL_UART_Receive_IT(&huart5, &uart5_rx_byte, UART5_RX_BUF_LEN);
  /* USER CODE END UART5_Init 2 */

}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	2000055c 	.word	0x2000055c
 8001128:	40005000 	.word	0x40005000

0800112c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08a      	sub	sp, #40	@ 0x28
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a5c      	ldr	r2, [pc, #368]	@ (80012bc <HAL_UART_MspInit+0x190>)
 800114a:	4293      	cmp	r3, r2
 800114c:	f040 80b1 	bne.w	80012b2 <HAL_UART_MspInit+0x186>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001150:	2300      	movs	r3, #0
 8001152:	613b      	str	r3, [r7, #16]
 8001154:	4b5a      	ldr	r3, [pc, #360]	@ (80012c0 <HAL_UART_MspInit+0x194>)
 8001156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001158:	4a59      	ldr	r2, [pc, #356]	@ (80012c0 <HAL_UART_MspInit+0x194>)
 800115a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800115e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001160:	4b57      	ldr	r3, [pc, #348]	@ (80012c0 <HAL_UART_MspInit+0x194>)
 8001162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001164:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001168:	613b      	str	r3, [r7, #16]
 800116a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800116c:	2300      	movs	r3, #0
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	4b53      	ldr	r3, [pc, #332]	@ (80012c0 <HAL_UART_MspInit+0x194>)
 8001172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001174:	4a52      	ldr	r2, [pc, #328]	@ (80012c0 <HAL_UART_MspInit+0x194>)
 8001176:	f043 0304 	orr.w	r3, r3, #4
 800117a:	6313      	str	r3, [r2, #48]	@ 0x30
 800117c:	4b50      	ldr	r3, [pc, #320]	@ (80012c0 <HAL_UART_MspInit+0x194>)
 800117e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001180:	f003 0304 	and.w	r3, r3, #4
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001188:	2300      	movs	r3, #0
 800118a:	60bb      	str	r3, [r7, #8]
 800118c:	4b4c      	ldr	r3, [pc, #304]	@ (80012c0 <HAL_UART_MspInit+0x194>)
 800118e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001190:	4a4b      	ldr	r2, [pc, #300]	@ (80012c0 <HAL_UART_MspInit+0x194>)
 8001192:	f043 0308 	orr.w	r3, r3, #8
 8001196:	6313      	str	r3, [r2, #48]	@ 0x30
 8001198:	4b49      	ldr	r3, [pc, #292]	@ (80012c0 <HAL_UART_MspInit+0x194>)
 800119a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119c:	f003 0308 	and.w	r3, r3, #8
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80011a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011aa:	2302      	movs	r3, #2
 80011ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b2:	2303      	movs	r3, #3
 80011b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80011b6:	2308      	movs	r3, #8
 80011b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ba:	f107 0314 	add.w	r3, r7, #20
 80011be:	4619      	mov	r1, r3
 80011c0:	4840      	ldr	r0, [pc, #256]	@ (80012c4 <HAL_UART_MspInit+0x198>)
 80011c2:	f001 fd83 	bl	8002ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011c6:	2304      	movs	r3, #4
 80011c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ca:	2302      	movs	r3, #2
 80011cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d2:	2303      	movs	r3, #3
 80011d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80011d6:	2308      	movs	r3, #8
 80011d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011da:	f107 0314 	add.w	r3, r7, #20
 80011de:	4619      	mov	r1, r3
 80011e0:	4839      	ldr	r0, [pc, #228]	@ (80012c8 <HAL_UART_MspInit+0x19c>)
 80011e2:	f001 fd73 	bl	8002ccc <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream7;
 80011e6:	4b39      	ldr	r3, [pc, #228]	@ (80012cc <HAL_UART_MspInit+0x1a0>)
 80011e8:	4a39      	ldr	r2, [pc, #228]	@ (80012d0 <HAL_UART_MspInit+0x1a4>)
 80011ea:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 80011ec:	4b37      	ldr	r3, [pc, #220]	@ (80012cc <HAL_UART_MspInit+0x1a0>)
 80011ee:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80011f2:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011f4:	4b35      	ldr	r3, [pc, #212]	@ (80012cc <HAL_UART_MspInit+0x1a0>)
 80011f6:	2240      	movs	r2, #64	@ 0x40
 80011f8:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011fa:	4b34      	ldr	r3, [pc, #208]	@ (80012cc <HAL_UART_MspInit+0x1a0>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001200:	4b32      	ldr	r3, [pc, #200]	@ (80012cc <HAL_UART_MspInit+0x1a0>)
 8001202:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001206:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001208:	4b30      	ldr	r3, [pc, #192]	@ (80012cc <HAL_UART_MspInit+0x1a0>)
 800120a:	2200      	movs	r2, #0
 800120c:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800120e:	4b2f      	ldr	r3, [pc, #188]	@ (80012cc <HAL_UART_MspInit+0x1a0>)
 8001210:	2200      	movs	r2, #0
 8001212:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8001214:	4b2d      	ldr	r3, [pc, #180]	@ (80012cc <HAL_UART_MspInit+0x1a0>)
 8001216:	2200      	movs	r2, #0
 8001218:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800121a:	4b2c      	ldr	r3, [pc, #176]	@ (80012cc <HAL_UART_MspInit+0x1a0>)
 800121c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001220:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001222:	4b2a      	ldr	r3, [pc, #168]	@ (80012cc <HAL_UART_MspInit+0x1a0>)
 8001224:	2200      	movs	r2, #0
 8001226:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8001228:	4828      	ldr	r0, [pc, #160]	@ (80012cc <HAL_UART_MspInit+0x1a0>)
 800122a:	f001 f975 	bl	8002518 <HAL_DMA_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8001234:	f7ff fcee 	bl	8000c14 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4a24      	ldr	r2, [pc, #144]	@ (80012cc <HAL_UART_MspInit+0x1a0>)
 800123c:	639a      	str	r2, [r3, #56]	@ 0x38
 800123e:	4a23      	ldr	r2, [pc, #140]	@ (80012cc <HAL_UART_MspInit+0x1a0>)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8001244:	4b23      	ldr	r3, [pc, #140]	@ (80012d4 <HAL_UART_MspInit+0x1a8>)
 8001246:	4a24      	ldr	r2, [pc, #144]	@ (80012d8 <HAL_UART_MspInit+0x1ac>)
 8001248:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 800124a:	4b22      	ldr	r3, [pc, #136]	@ (80012d4 <HAL_UART_MspInit+0x1a8>)
 800124c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001250:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001252:	4b20      	ldr	r3, [pc, #128]	@ (80012d4 <HAL_UART_MspInit+0x1a8>)
 8001254:	2200      	movs	r2, #0
 8001256:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001258:	4b1e      	ldr	r3, [pc, #120]	@ (80012d4 <HAL_UART_MspInit+0x1a8>)
 800125a:	2200      	movs	r2, #0
 800125c:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 800125e:	4b1d      	ldr	r3, [pc, #116]	@ (80012d4 <HAL_UART_MspInit+0x1a8>)
 8001260:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001264:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001266:	4b1b      	ldr	r3, [pc, #108]	@ (80012d4 <HAL_UART_MspInit+0x1a8>)
 8001268:	2200      	movs	r2, #0
 800126a:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800126c:	4b19      	ldr	r3, [pc, #100]	@ (80012d4 <HAL_UART_MspInit+0x1a8>)
 800126e:	2200      	movs	r2, #0
 8001270:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8001272:	4b18      	ldr	r3, [pc, #96]	@ (80012d4 <HAL_UART_MspInit+0x1a8>)
 8001274:	2200      	movs	r2, #0
 8001276:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001278:	4b16      	ldr	r3, [pc, #88]	@ (80012d4 <HAL_UART_MspInit+0x1a8>)
 800127a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800127e:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001280:	4b14      	ldr	r3, [pc, #80]	@ (80012d4 <HAL_UART_MspInit+0x1a8>)
 8001282:	2200      	movs	r2, #0
 8001284:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8001286:	4813      	ldr	r0, [pc, #76]	@ (80012d4 <HAL_UART_MspInit+0x1a8>)
 8001288:	f001 f946 	bl	8002518 <HAL_DMA_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 8001292:	f7ff fcbf 	bl	8000c14 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a0e      	ldr	r2, [pc, #56]	@ (80012d4 <HAL_UART_MspInit+0x1a8>)
 800129a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800129c:	4a0d      	ldr	r2, [pc, #52]	@ (80012d4 <HAL_UART_MspInit+0x1a8>)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2100      	movs	r1, #0
 80012a6:	2035      	movs	r0, #53	@ 0x35
 80012a8:	f001 f8f1 	bl	800248e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80012ac:	2035      	movs	r0, #53	@ 0x35
 80012ae:	f001 f90a 	bl	80024c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 80012b2:	bf00      	nop
 80012b4:	3728      	adds	r7, #40	@ 0x28
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40005000 	.word	0x40005000
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40020800 	.word	0x40020800
 80012c8:	40020c00 	.word	0x40020c00
 80012cc:	200005a4 	.word	0x200005a4
 80012d0:	400260b8 	.word	0x400260b8
 80012d4:	20000604 	.word	0x20000604
 80012d8:	40026010 	.word	0x40026010

080012dc <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==UART5)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a11      	ldr	r2, [pc, #68]	@ (8001330 <HAL_UART_MspDeInit+0x54>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d11b      	bne.n	8001326 <HAL_UART_MspDeInit+0x4a>
  {
  /* USER CODE BEGIN UART5_MspDeInit 0 */

  /* USER CODE END UART5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART5_CLK_DISABLE();
 80012ee:	4b11      	ldr	r3, [pc, #68]	@ (8001334 <HAL_UART_MspDeInit+0x58>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f2:	4a10      	ldr	r2, [pc, #64]	@ (8001334 <HAL_UART_MspDeInit+0x58>)
 80012f4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80012f8:	6413      	str	r3, [r2, #64]	@ 0x40

    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12);
 80012fa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80012fe:	480e      	ldr	r0, [pc, #56]	@ (8001338 <HAL_UART_MspDeInit+0x5c>)
 8001300:	f001 fe80 	bl	8003004 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_2);
 8001304:	2104      	movs	r1, #4
 8001306:	480d      	ldr	r0, [pc, #52]	@ (800133c <HAL_UART_MspDeInit+0x60>)
 8001308:	f001 fe7c 	bl	8003004 <HAL_GPIO_DeInit>

    /* UART5 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001310:	4618      	mov	r0, r3
 8001312:	f001 f9af 	bl	8002674 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800131a:	4618      	mov	r0, r3
 800131c:	f001 f9aa 	bl	8002674 <HAL_DMA_DeInit>

    /* UART5 interrupt Deinit */
    HAL_NVIC_DisableIRQ(UART5_IRQn);
 8001320:	2035      	movs	r0, #53	@ 0x35
 8001322:	f001 f8de 	bl	80024e2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN UART5_MspDeInit 1 */

  /* USER CODE END UART5_MspDeInit 1 */
  }
}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40005000 	.word	0x40005000
 8001334:	40023800 	.word	0x40023800
 8001338:	40020800 	.word	0x40020800
 800133c:	40020c00 	.word	0x40020c00

08001340 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001344:	4b14      	ldr	r3, [pc, #80]	@ (8001398 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001346:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800134a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800134c:	4b12      	ldr	r3, [pc, #72]	@ (8001398 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800134e:	2204      	movs	r2, #4
 8001350:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001352:	4b11      	ldr	r3, [pc, #68]	@ (8001398 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001354:	2202      	movs	r2, #2
 8001356:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001358:	4b0f      	ldr	r3, [pc, #60]	@ (8001398 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800135a:	2200      	movs	r2, #0
 800135c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800135e:	4b0e      	ldr	r3, [pc, #56]	@ (8001398 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001360:	2202      	movs	r2, #2
 8001362:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001364:	4b0c      	ldr	r3, [pc, #48]	@ (8001398 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001366:	2200      	movs	r2, #0
 8001368:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800136a:	4b0b      	ldr	r3, [pc, #44]	@ (8001398 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800136c:	2200      	movs	r2, #0
 800136e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001370:	4b09      	ldr	r3, [pc, #36]	@ (8001398 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001372:	2200      	movs	r2, #0
 8001374:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001376:	4b08      	ldr	r3, [pc, #32]	@ (8001398 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001378:	2200      	movs	r2, #0
 800137a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800137c:	4b06      	ldr	r3, [pc, #24]	@ (8001398 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800137e:	2200      	movs	r2, #0
 8001380:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001382:	4805      	ldr	r0, [pc, #20]	@ (8001398 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001384:	f002 f8b2 	bl	80034ec <HAL_PCD_Init>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800138e:	f7ff fc41 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000664 	.word	0x20000664

0800139c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08a      	sub	sp, #40	@ 0x28
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80013bc:	d13a      	bne.n	8001434 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	613b      	str	r3, [r7, #16]
 80013c2:	4b1e      	ldr	r3, [pc, #120]	@ (800143c <HAL_PCD_MspInit+0xa0>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c6:	4a1d      	ldr	r2, [pc, #116]	@ (800143c <HAL_PCD_MspInit+0xa0>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ce:	4b1b      	ldr	r3, [pc, #108]	@ (800143c <HAL_PCD_MspInit+0xa0>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	613b      	str	r3, [r7, #16]
 80013d8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80013da:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80013de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e0:	2302      	movs	r3, #2
 80013e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e8:	2303      	movs	r3, #3
 80013ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80013ec:	230a      	movs	r3, #10
 80013ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f0:	f107 0314 	add.w	r3, r7, #20
 80013f4:	4619      	mov	r1, r3
 80013f6:	4812      	ldr	r0, [pc, #72]	@ (8001440 <HAL_PCD_MspInit+0xa4>)
 80013f8:	f001 fc68 	bl	8002ccc <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80013fc:	4b0f      	ldr	r3, [pc, #60]	@ (800143c <HAL_PCD_MspInit+0xa0>)
 80013fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001400:	4a0e      	ldr	r2, [pc, #56]	@ (800143c <HAL_PCD_MspInit+0xa0>)
 8001402:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001406:	6353      	str	r3, [r2, #52]	@ 0x34
 8001408:	2300      	movs	r3, #0
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	4b0b      	ldr	r3, [pc, #44]	@ (800143c <HAL_PCD_MspInit+0xa0>)
 800140e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001410:	4a0a      	ldr	r2, [pc, #40]	@ (800143c <HAL_PCD_MspInit+0xa0>)
 8001412:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001416:	6453      	str	r3, [r2, #68]	@ 0x44
 8001418:	4b08      	ldr	r3, [pc, #32]	@ (800143c <HAL_PCD_MspInit+0xa0>)
 800141a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800141c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	68fb      	ldr	r3, [r7, #12]

    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8001424:	2200      	movs	r2, #0
 8001426:	2100      	movs	r1, #0
 8001428:	2043      	movs	r0, #67	@ 0x43
 800142a:	f001 f830 	bl	800248e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800142e:	2043      	movs	r0, #67	@ 0x43
 8001430:	f001 f849 	bl	80024c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001434:	bf00      	nop
 8001436:	3728      	adds	r7, #40	@ 0x28
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40023800 	.word	0x40023800
 8001440:	40020000 	.word	0x40020000

08001444 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001444:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800147c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001448:	f7ff fcd2 	bl	8000df0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800144c:	480c      	ldr	r0, [pc, #48]	@ (8001480 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800144e:	490d      	ldr	r1, [pc, #52]	@ (8001484 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001450:	4a0d      	ldr	r2, [pc, #52]	@ (8001488 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001452:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001454:	e002      	b.n	800145c <LoopCopyDataInit>

08001456 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001456:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001458:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800145a:	3304      	adds	r3, #4

0800145c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800145c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800145e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001460:	d3f9      	bcc.n	8001456 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001462:	4a0a      	ldr	r2, [pc, #40]	@ (800148c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001464:	4c0a      	ldr	r4, [pc, #40]	@ (8001490 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001466:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001468:	e001      	b.n	800146e <LoopFillZerobss>

0800146a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800146a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800146c:	3204      	adds	r2, #4

0800146e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800146e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001470:	d3fb      	bcc.n	800146a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001472:	f00a fd3f 	bl	800bef4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001476:	f7ff facb 	bl	8000a10 <main>
  bx  lr    
 800147a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800147c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001480:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001484:	20000304 	.word	0x20000304
  ldr r2, =_sidata
 8001488:	0800c8ac 	.word	0x0800c8ac
  ldr r2, =_sbss
 800148c:	20000304 	.word	0x20000304
  ldr r4, =_ebss
 8001490:	200027fc 	.word	0x200027fc

08001494 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001494:	e7fe      	b.n	8001494 <ADC_IRQHandler>
	...

08001498 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800149c:	4b0e      	ldr	r3, [pc, #56]	@ (80014d8 <HAL_Init+0x40>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a0d      	ldr	r2, [pc, #52]	@ (80014d8 <HAL_Init+0x40>)
 80014a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014a8:	4b0b      	ldr	r3, [pc, #44]	@ (80014d8 <HAL_Init+0x40>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a0a      	ldr	r2, [pc, #40]	@ (80014d8 <HAL_Init+0x40>)
 80014ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014b4:	4b08      	ldr	r3, [pc, #32]	@ (80014d8 <HAL_Init+0x40>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a07      	ldr	r2, [pc, #28]	@ (80014d8 <HAL_Init+0x40>)
 80014ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014c0:	2003      	movs	r0, #3
 80014c2:	f000 ffd9 	bl	8002478 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014c6:	200f      	movs	r0, #15
 80014c8:	f000 f808 	bl	80014dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014cc:	f7ff fba8 	bl	8000c20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40023c00 	.word	0x40023c00

080014dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014e4:	4b12      	ldr	r3, [pc, #72]	@ (8001530 <HAL_InitTick+0x54>)
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	4b12      	ldr	r3, [pc, #72]	@ (8001534 <HAL_InitTick+0x58>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	4619      	mov	r1, r3
 80014ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014fa:	4618      	mov	r0, r3
 80014fc:	f000 ffff 	bl	80024fe <HAL_SYSTICK_Config>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e00e      	b.n	8001528 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2b0f      	cmp	r3, #15
 800150e:	d80a      	bhi.n	8001526 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001510:	2200      	movs	r2, #0
 8001512:	6879      	ldr	r1, [r7, #4]
 8001514:	f04f 30ff 	mov.w	r0, #4294967295
 8001518:	f000 ffb9 	bl	800248e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800151c:	4a06      	ldr	r2, [pc, #24]	@ (8001538 <HAL_InitTick+0x5c>)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001522:	2300      	movs	r3, #0
 8001524:	e000      	b.n	8001528 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
}
 8001528:	4618      	mov	r0, r3
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	2000000c 	.word	0x2000000c
 8001534:	20000014 	.word	0x20000014
 8001538:	20000010 	.word	0x20000010

0800153c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001540:	4b06      	ldr	r3, [pc, #24]	@ (800155c <HAL_IncTick+0x20>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	461a      	mov	r2, r3
 8001546:	4b06      	ldr	r3, [pc, #24]	@ (8001560 <HAL_IncTick+0x24>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4413      	add	r3, r2
 800154c:	4a04      	ldr	r2, [pc, #16]	@ (8001560 <HAL_IncTick+0x24>)
 800154e:	6013      	str	r3, [r2, #0]
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	20000014 	.word	0x20000014
 8001560:	20000b48 	.word	0x20000b48

08001564 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  return uwTick;
 8001568:	4b03      	ldr	r3, [pc, #12]	@ (8001578 <HAL_GetTick+0x14>)
 800156a:	681b      	ldr	r3, [r3, #0]
}
 800156c:	4618      	mov	r0, r3
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	20000b48 	.word	0x20000b48

0800157c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001584:	f7ff ffee 	bl	8001564 <HAL_GetTick>
 8001588:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001594:	d005      	beq.n	80015a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001596:	4b0a      	ldr	r3, [pc, #40]	@ (80015c0 <HAL_Delay+0x44>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	461a      	mov	r2, r3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	4413      	add	r3, r2
 80015a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015a2:	bf00      	nop
 80015a4:	f7ff ffde 	bl	8001564 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	68fa      	ldr	r2, [r7, #12]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d8f7      	bhi.n	80015a4 <HAL_Delay+0x28>
  {
  }
}
 80015b4:	bf00      	nop
 80015b6:	bf00      	nop
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000014 	.word	0x20000014

080015c4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d101      	bne.n	80015d6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e0ed      	b.n	80017b2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d102      	bne.n	80015e8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f7ff f810 	bl	8000608 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f042 0201 	orr.w	r2, r2, #1
 80015f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015f8:	f7ff ffb4 	bl	8001564 <HAL_GetTick>
 80015fc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015fe:	e012      	b.n	8001626 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001600:	f7ff ffb0 	bl	8001564 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b0a      	cmp	r3, #10
 800160c:	d90b      	bls.n	8001626 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001612:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2205      	movs	r2, #5
 800161e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e0c5      	b.n	80017b2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f003 0301 	and.w	r3, r3, #1
 8001630:	2b00      	cmp	r3, #0
 8001632:	d0e5      	beq.n	8001600 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f022 0202 	bic.w	r2, r2, #2
 8001642:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001644:	f7ff ff8e 	bl	8001564 <HAL_GetTick>
 8001648:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800164a:	e012      	b.n	8001672 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800164c:	f7ff ff8a 	bl	8001564 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b0a      	cmp	r3, #10
 8001658:	d90b      	bls.n	8001672 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800165e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2205      	movs	r2, #5
 800166a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e09f      	b.n	80017b2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d1e5      	bne.n	800164c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	7e1b      	ldrb	r3, [r3, #24]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d108      	bne.n	800169a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	e007      	b.n	80016aa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80016a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	7e5b      	ldrb	r3, [r3, #25]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d108      	bne.n	80016c4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	e007      	b.n	80016d4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80016d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	7e9b      	ldrb	r3, [r3, #26]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d108      	bne.n	80016ee <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f042 0220 	orr.w	r2, r2, #32
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	e007      	b.n	80016fe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f022 0220 	bic.w	r2, r2, #32
 80016fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	7edb      	ldrb	r3, [r3, #27]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d108      	bne.n	8001718 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f022 0210 	bic.w	r2, r2, #16
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	e007      	b.n	8001728 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f042 0210 	orr.w	r2, r2, #16
 8001726:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	7f1b      	ldrb	r3, [r3, #28]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d108      	bne.n	8001742 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f042 0208 	orr.w	r2, r2, #8
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	e007      	b.n	8001752 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f022 0208 	bic.w	r2, r2, #8
 8001750:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	7f5b      	ldrb	r3, [r3, #29]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d108      	bne.n	800176c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f042 0204 	orr.w	r2, r2, #4
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	e007      	b.n	800177c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f022 0204 	bic.w	r2, r2, #4
 800177a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689a      	ldr	r2, [r3, #8]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	431a      	orrs	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	691b      	ldr	r3, [r3, #16]
 800178a:	431a      	orrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	695b      	ldr	r3, [r3, #20]
 8001790:	ea42 0103 	orr.w	r1, r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	1e5a      	subs	r2, r3, #1
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	430a      	orrs	r2, r1
 80017a0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2201      	movs	r2, #1
 80017ac:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
	...

080017bc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80017bc:	b480      	push	{r7}
 80017be:	b087      	sub	sp, #28
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017cc:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 80017ce:	7dfb      	ldrb	r3, [r7, #23]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d003      	beq.n	80017dc <HAL_CAN_ConfigFilter+0x20>
 80017d4:	7dfb      	ldrb	r3, [r7, #23]
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	f040 80be 	bne.w	8001958 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80017dc:	4b65      	ldr	r3, [pc, #404]	@ (8001974 <HAL_CAN_ConfigFilter+0x1b8>)
 80017de:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80017e6:	f043 0201 	orr.w	r2, r3, #1
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80017f6:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800180a:	021b      	lsls	r3, r3, #8
 800180c:	431a      	orrs	r2, r3
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	695b      	ldr	r3, [r3, #20]
 8001818:	f003 031f 	and.w	r3, r3, #31
 800181c:	2201      	movs	r2, #1
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	43db      	mvns	r3, r3
 800182e:	401a      	ands	r2, r3
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d123      	bne.n	8001886 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	43db      	mvns	r3, r3
 8001848:	401a      	ands	r2, r3
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800185c:	683a      	ldr	r2, [r7, #0]
 800185e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001860:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	3248      	adds	r2, #72	@ 0x48
 8001866:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800187a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800187c:	6939      	ldr	r1, [r7, #16]
 800187e:	3348      	adds	r3, #72	@ 0x48
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	440b      	add	r3, r1
 8001884:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d122      	bne.n	80018d4 <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	431a      	orrs	r2, r3
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018aa:	683a      	ldr	r2, [r7, #0]
 80018ac:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80018ae:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	3248      	adds	r2, #72	@ 0x48
 80018b4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018c8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018ca:	6939      	ldr	r1, [r7, #16]
 80018cc:	3348      	adds	r3, #72	@ 0x48
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	440b      	add	r3, r1
 80018d2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d109      	bne.n	80018f0 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	43db      	mvns	r3, r3
 80018e6:	401a      	ands	r2, r3
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80018ee:	e007      	b.n	8001900 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	431a      	orrs	r2, r3
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	691b      	ldr	r3, [r3, #16]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d109      	bne.n	800191c <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	43db      	mvns	r3, r3
 8001912:	401a      	ands	r2, r3
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800191a:	e007      	b.n	800192c <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	431a      	orrs	r2, r3
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	6a1b      	ldr	r3, [r3, #32]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d107      	bne.n	8001944 <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	431a      	orrs	r2, r3
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800194a:	f023 0201 	bic.w	r2, r3, #1
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001954:	2300      	movs	r3, #0
 8001956:	e006      	b.n	8001966 <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800195c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
  }
}
 8001966:	4618      	mov	r0, r3
 8001968:	371c      	adds	r7, #28
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	40006400 	.word	0x40006400

08001978 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001986:	b2db      	uxtb	r3, r3
 8001988:	2b01      	cmp	r3, #1
 800198a:	d12e      	bne.n	80019ea <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2202      	movs	r2, #2
 8001990:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f022 0201 	bic.w	r2, r2, #1
 80019a2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80019a4:	f7ff fdde 	bl	8001564 <HAL_GetTick>
 80019a8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80019aa:	e012      	b.n	80019d2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019ac:	f7ff fdda 	bl	8001564 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b0a      	cmp	r3, #10
 80019b8:	d90b      	bls.n	80019d2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019be:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2205      	movs	r2, #5
 80019ca:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e012      	b.n	80019f8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d1e5      	bne.n	80019ac <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80019e6:	2300      	movs	r3, #0
 80019e8:	e006      	b.n	80019f8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ee:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
  }
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3710      	adds	r7, #16
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b089      	sub	sp, #36	@ 0x24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]
 8001a0c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a14:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a1e:	7ffb      	ldrb	r3, [r7, #31]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d003      	beq.n	8001a2c <HAL_CAN_AddTxMessage+0x2c>
 8001a24:	7ffb      	ldrb	r3, [r7, #31]
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	f040 80ad 	bne.w	8001b86 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d10a      	bne.n	8001a4c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d105      	bne.n	8001a4c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f000 8095 	beq.w	8001b76 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	0e1b      	lsrs	r3, r3, #24
 8001a50:	f003 0303 	and.w	r3, r3, #3
 8001a54:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001a56:	2201      	movs	r2, #1
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	409a      	lsls	r2, r3
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d10d      	bne.n	8001a84 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001a72:	68f9      	ldr	r1, [r7, #12]
 8001a74:	6809      	ldr	r1, [r1, #0]
 8001a76:	431a      	orrs	r2, r3
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	3318      	adds	r3, #24
 8001a7c:	011b      	lsls	r3, r3, #4
 8001a7e:	440b      	add	r3, r1
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	e00f      	b.n	8001aa4 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a8e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a94:	68f9      	ldr	r1, [r7, #12]
 8001a96:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001a98:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	3318      	adds	r3, #24
 8001a9e:	011b      	lsls	r3, r3, #4
 8001aa0:	440b      	add	r3, r1
 8001aa2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	6819      	ldr	r1, [r3, #0]
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	691a      	ldr	r2, [r3, #16]
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	3318      	adds	r3, #24
 8001ab0:	011b      	lsls	r3, r3, #4
 8001ab2:	440b      	add	r3, r1
 8001ab4:	3304      	adds	r3, #4
 8001ab6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	7d1b      	ldrb	r3, [r3, #20]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d111      	bne.n	8001ae4 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	3318      	adds	r3, #24
 8001ac8:	011b      	lsls	r3, r3, #4
 8001aca:	4413      	add	r3, r2
 8001acc:	3304      	adds	r3, #4
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	68fa      	ldr	r2, [r7, #12]
 8001ad2:	6811      	ldr	r1, [r2, #0]
 8001ad4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	3318      	adds	r3, #24
 8001adc:	011b      	lsls	r3, r3, #4
 8001ade:	440b      	add	r3, r1
 8001ae0:	3304      	adds	r3, #4
 8001ae2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3307      	adds	r3, #7
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	061a      	lsls	r2, r3, #24
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3306      	adds	r3, #6
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	041b      	lsls	r3, r3, #16
 8001af4:	431a      	orrs	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	3305      	adds	r3, #5
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	021b      	lsls	r3, r3, #8
 8001afe:	4313      	orrs	r3, r2
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	3204      	adds	r2, #4
 8001b04:	7812      	ldrb	r2, [r2, #0]
 8001b06:	4610      	mov	r0, r2
 8001b08:	68fa      	ldr	r2, [r7, #12]
 8001b0a:	6811      	ldr	r1, [r2, #0]
 8001b0c:	ea43 0200 	orr.w	r2, r3, r0
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	011b      	lsls	r3, r3, #4
 8001b14:	440b      	add	r3, r1
 8001b16:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001b1a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	3303      	adds	r3, #3
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	061a      	lsls	r2, r3, #24
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3302      	adds	r3, #2
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	041b      	lsls	r3, r3, #16
 8001b2c:	431a      	orrs	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	3301      	adds	r3, #1
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	021b      	lsls	r3, r3, #8
 8001b36:	4313      	orrs	r3, r2
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	7812      	ldrb	r2, [r2, #0]
 8001b3c:	4610      	mov	r0, r2
 8001b3e:	68fa      	ldr	r2, [r7, #12]
 8001b40:	6811      	ldr	r1, [r2, #0]
 8001b42:	ea43 0200 	orr.w	r2, r3, r0
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	011b      	lsls	r3, r3, #4
 8001b4a:	440b      	add	r3, r1
 8001b4c:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001b50:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	3318      	adds	r3, #24
 8001b5a:	011b      	lsls	r3, r3, #4
 8001b5c:	4413      	add	r3, r2
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	68fa      	ldr	r2, [r7, #12]
 8001b62:	6811      	ldr	r1, [r2, #0]
 8001b64:	f043 0201 	orr.w	r2, r3, #1
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	3318      	adds	r3, #24
 8001b6c:	011b      	lsls	r3, r3, #4
 8001b6e:	440b      	add	r3, r1
 8001b70:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001b72:	2300      	movs	r3, #0
 8001b74:	e00e      	b.n	8001b94 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b7a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e006      	b.n	8001b94 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b8a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
  }
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3724      	adds	r7, #36	@ 0x24
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b087      	sub	sp, #28
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
 8001bac:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bb4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001bb6:	7dfb      	ldrb	r3, [r7, #23]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d003      	beq.n	8001bc4 <HAL_CAN_GetRxMessage+0x24>
 8001bbc:	7dfb      	ldrb	r3, [r7, #23]
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	f040 8103 	bne.w	8001dca <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d10e      	bne.n	8001be8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	f003 0303 	and.w	r3, r3, #3
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d116      	bne.n	8001c06 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bdc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e0f7      	b.n	8001dd8 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	f003 0303 	and.w	r3, r3, #3
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d107      	bne.n	8001c06 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bfa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e0e8      	b.n	8001dd8 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	331b      	adds	r3, #27
 8001c0e:	011b      	lsls	r3, r3, #4
 8001c10:	4413      	add	r3, r2
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0204 	and.w	r2, r3, #4
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d10c      	bne.n	8001c3e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	331b      	adds	r3, #27
 8001c2c:	011b      	lsls	r3, r3, #4
 8001c2e:	4413      	add	r3, r2
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	0d5b      	lsrs	r3, r3, #21
 8001c34:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	e00b      	b.n	8001c56 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	331b      	adds	r3, #27
 8001c46:	011b      	lsls	r3, r3, #4
 8001c48:	4413      	add	r3, r2
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	08db      	lsrs	r3, r3, #3
 8001c4e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	331b      	adds	r3, #27
 8001c5e:	011b      	lsls	r3, r3, #4
 8001c60:	4413      	add	r3, r2
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0202 	and.w	r2, r3, #2
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	331b      	adds	r3, #27
 8001c74:	011b      	lsls	r3, r3, #4
 8001c76:	4413      	add	r3, r2
 8001c78:	3304      	adds	r3, #4
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0308 	and.w	r3, r3, #8
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d003      	beq.n	8001c8c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2208      	movs	r2, #8
 8001c88:	611a      	str	r2, [r3, #16]
 8001c8a:	e00b      	b.n	8001ca4 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	331b      	adds	r3, #27
 8001c94:	011b      	lsls	r3, r3, #4
 8001c96:	4413      	add	r3, r2
 8001c98:	3304      	adds	r3, #4
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 020f 	and.w	r2, r3, #15
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	331b      	adds	r3, #27
 8001cac:	011b      	lsls	r3, r3, #4
 8001cae:	4413      	add	r3, r2
 8001cb0:	3304      	adds	r3, #4
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	0a1b      	lsrs	r3, r3, #8
 8001cb6:	b2da      	uxtb	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	331b      	adds	r3, #27
 8001cc4:	011b      	lsls	r3, r3, #4
 8001cc6:	4413      	add	r3, r2
 8001cc8:	3304      	adds	r3, #4
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	0c1b      	lsrs	r3, r3, #16
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	011b      	lsls	r3, r3, #4
 8001cdc:	4413      	add	r3, r2
 8001cde:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	b2da      	uxtb	r2, r3
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	011b      	lsls	r3, r3, #4
 8001cf2:	4413      	add	r3, r2
 8001cf4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	0a1a      	lsrs	r2, r3, #8
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	b2d2      	uxtb	r2, r2
 8001d02:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	011b      	lsls	r3, r3, #4
 8001d0c:	4413      	add	r3, r2
 8001d0e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	0c1a      	lsrs	r2, r3, #16
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	3302      	adds	r3, #2
 8001d1a:	b2d2      	uxtb	r2, r2
 8001d1c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	011b      	lsls	r3, r3, #4
 8001d26:	4413      	add	r3, r2
 8001d28:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	0e1a      	lsrs	r2, r3, #24
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	3303      	adds	r3, #3
 8001d34:	b2d2      	uxtb	r2, r2
 8001d36:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	011b      	lsls	r3, r3, #4
 8001d40:	4413      	add	r3, r2
 8001d42:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	3304      	adds	r3, #4
 8001d4c:	b2d2      	uxtb	r2, r2
 8001d4e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	011b      	lsls	r3, r3, #4
 8001d58:	4413      	add	r3, r2
 8001d5a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	0a1a      	lsrs	r2, r3, #8
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	3305      	adds	r3, #5
 8001d66:	b2d2      	uxtb	r2, r2
 8001d68:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	011b      	lsls	r3, r3, #4
 8001d72:	4413      	add	r3, r2
 8001d74:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	0c1a      	lsrs	r2, r3, #16
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	3306      	adds	r3, #6
 8001d80:	b2d2      	uxtb	r2, r2
 8001d82:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	011b      	lsls	r3, r3, #4
 8001d8c:	4413      	add	r3, r2
 8001d8e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	0e1a      	lsrs	r2, r3, #24
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	3307      	adds	r3, #7
 8001d9a:	b2d2      	uxtb	r2, r2
 8001d9c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d108      	bne.n	8001db6 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	68da      	ldr	r2, [r3, #12]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f042 0220 	orr.w	r2, r2, #32
 8001db2:	60da      	str	r2, [r3, #12]
 8001db4:	e007      	b.n	8001dc6 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	691a      	ldr	r2, [r3, #16]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f042 0220 	orr.w	r2, r2, #32
 8001dc4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	e006      	b.n	8001dd8 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dce:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
  }
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	371c      	adds	r7, #28
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001df4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001df6:	7bfb      	ldrb	r3, [r7, #15]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d002      	beq.n	8001e02 <HAL_CAN_ActivateNotification+0x1e>
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d109      	bne.n	8001e16 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	6959      	ldr	r1, [r3, #20]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001e12:	2300      	movs	r3, #0
 8001e14:	e006      	b.n	8001e24 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e1a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
  }
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3714      	adds	r7, #20
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b08a      	sub	sp, #40	@ 0x28
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001e6c:	6a3b      	ldr	r3, [r7, #32]
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d07c      	beq.n	8001f70 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d023      	beq.n	8001ec8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2201      	movs	r2, #1
 8001e86:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d003      	beq.n	8001e9a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 f983 	bl	800219e <HAL_CAN_TxMailbox0CompleteCallback>
 8001e98:	e016      	b.n	8001ec8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	f003 0304 	and.w	r3, r3, #4
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d004      	beq.n	8001eae <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001eaa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001eac:	e00c      	b.n	8001ec8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	f003 0308 	and.w	r3, r3, #8
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d004      	beq.n	8001ec2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eba:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ebe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ec0:	e002      	b.n	8001ec8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 f989 	bl	80021da <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d024      	beq.n	8001f1c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001eda:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d003      	beq.n	8001eee <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 f963 	bl	80021b2 <HAL_CAN_TxMailbox1CompleteCallback>
 8001eec:	e016      	b.n	8001f1c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d004      	beq.n	8001f02 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001efa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001efe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f00:	e00c      	b.n	8001f1c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d004      	beq.n	8001f16 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f0e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f12:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f14:	e002      	b.n	8001f1c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 f969 	bl	80021ee <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d024      	beq.n	8001f70 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001f2e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d003      	beq.n	8001f42 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 f943 	bl	80021c6 <HAL_CAN_TxMailbox2CompleteCallback>
 8001f40:	e016      	b.n	8001f70 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d004      	beq.n	8001f56 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f52:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f54:	e00c      	b.n	8001f70 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d004      	beq.n	8001f6a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f66:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f68:	e002      	b.n	8001f70 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f949 	bl	8002202 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001f70:	6a3b      	ldr	r3, [r7, #32]
 8001f72:	f003 0308 	and.w	r3, r3, #8
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d00c      	beq.n	8001f94 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	f003 0310 	and.w	r3, r3, #16
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d007      	beq.n	8001f94 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f8a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2210      	movs	r2, #16
 8001f92:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001f94:	6a3b      	ldr	r3, [r7, #32]
 8001f96:	f003 0304 	and.w	r3, r3, #4
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00b      	beq.n	8001fb6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	f003 0308 	and.w	r3, r3, #8
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d006      	beq.n	8001fb6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2208      	movs	r2, #8
 8001fae:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f000 f930 	bl	8002216 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001fb6:	6a3b      	ldr	r3, [r7, #32]
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d009      	beq.n	8001fd4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	f003 0303 	and.w	r3, r3, #3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d002      	beq.n	8001fd4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f7fe fdb2 	bl	8000b38 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001fd4:	6a3b      	ldr	r3, [r7, #32]
 8001fd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d00c      	beq.n	8001ff8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	f003 0310 	and.w	r3, r3, #16
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d007      	beq.n	8001ff8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fee:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2210      	movs	r2, #16
 8001ff6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001ff8:	6a3b      	ldr	r3, [r7, #32]
 8001ffa:	f003 0320 	and.w	r3, r3, #32
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d00b      	beq.n	800201a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	f003 0308 	and.w	r3, r3, #8
 8002008:	2b00      	cmp	r3, #0
 800200a:	d006      	beq.n	800201a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2208      	movs	r2, #8
 8002012:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 f912 	bl	800223e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800201a:	6a3b      	ldr	r3, [r7, #32]
 800201c:	f003 0310 	and.w	r3, r3, #16
 8002020:	2b00      	cmp	r3, #0
 8002022:	d009      	beq.n	8002038 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	f003 0303 	and.w	r3, r3, #3
 800202e:	2b00      	cmp	r3, #0
 8002030:	d002      	beq.n	8002038 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 f8f9 	bl	800222a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002038:	6a3b      	ldr	r3, [r7, #32]
 800203a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00b      	beq.n	800205a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	f003 0310 	and.w	r3, r3, #16
 8002048:	2b00      	cmp	r3, #0
 800204a:	d006      	beq.n	800205a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2210      	movs	r2, #16
 8002052:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f000 f8fc 	bl	8002252 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800205a:	6a3b      	ldr	r3, [r7, #32]
 800205c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d00b      	beq.n	800207c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	f003 0308 	and.w	r3, r3, #8
 800206a:	2b00      	cmp	r3, #0
 800206c:	d006      	beq.n	800207c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2208      	movs	r2, #8
 8002074:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f8f5 	bl	8002266 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800207c:	6a3b      	ldr	r3, [r7, #32]
 800207e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d07b      	beq.n	800217e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	f003 0304 	and.w	r3, r3, #4
 800208c:	2b00      	cmp	r3, #0
 800208e:	d072      	beq.n	8002176 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002090:	6a3b      	ldr	r3, [r7, #32]
 8002092:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002096:	2b00      	cmp	r3, #0
 8002098:	d008      	beq.n	80020ac <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d003      	beq.n	80020ac <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80020a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a6:	f043 0301 	orr.w	r3, r3, #1
 80020aa:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80020ac:	6a3b      	ldr	r3, [r7, #32]
 80020ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d008      	beq.n	80020c8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d003      	beq.n	80020c8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80020c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c2:	f043 0302 	orr.w	r3, r3, #2
 80020c6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80020c8:	6a3b      	ldr	r3, [r7, #32]
 80020ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d008      	beq.n	80020e4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d003      	beq.n	80020e4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80020dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020de:	f043 0304 	orr.w	r3, r3, #4
 80020e2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80020e4:	6a3b      	ldr	r3, [r7, #32]
 80020e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d043      	beq.n	8002176 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d03e      	beq.n	8002176 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80020fe:	2b60      	cmp	r3, #96	@ 0x60
 8002100:	d02b      	beq.n	800215a <HAL_CAN_IRQHandler+0x32a>
 8002102:	2b60      	cmp	r3, #96	@ 0x60
 8002104:	d82e      	bhi.n	8002164 <HAL_CAN_IRQHandler+0x334>
 8002106:	2b50      	cmp	r3, #80	@ 0x50
 8002108:	d022      	beq.n	8002150 <HAL_CAN_IRQHandler+0x320>
 800210a:	2b50      	cmp	r3, #80	@ 0x50
 800210c:	d82a      	bhi.n	8002164 <HAL_CAN_IRQHandler+0x334>
 800210e:	2b40      	cmp	r3, #64	@ 0x40
 8002110:	d019      	beq.n	8002146 <HAL_CAN_IRQHandler+0x316>
 8002112:	2b40      	cmp	r3, #64	@ 0x40
 8002114:	d826      	bhi.n	8002164 <HAL_CAN_IRQHandler+0x334>
 8002116:	2b30      	cmp	r3, #48	@ 0x30
 8002118:	d010      	beq.n	800213c <HAL_CAN_IRQHandler+0x30c>
 800211a:	2b30      	cmp	r3, #48	@ 0x30
 800211c:	d822      	bhi.n	8002164 <HAL_CAN_IRQHandler+0x334>
 800211e:	2b10      	cmp	r3, #16
 8002120:	d002      	beq.n	8002128 <HAL_CAN_IRQHandler+0x2f8>
 8002122:	2b20      	cmp	r3, #32
 8002124:	d005      	beq.n	8002132 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002126:	e01d      	b.n	8002164 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212a:	f043 0308 	orr.w	r3, r3, #8
 800212e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002130:	e019      	b.n	8002166 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002134:	f043 0310 	orr.w	r3, r3, #16
 8002138:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800213a:	e014      	b.n	8002166 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800213c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213e:	f043 0320 	orr.w	r3, r3, #32
 8002142:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002144:	e00f      	b.n	8002166 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002148:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800214c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800214e:	e00a      	b.n	8002166 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002152:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002156:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002158:	e005      	b.n	8002166 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800215a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800215c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002160:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002162:	e000      	b.n	8002166 <HAL_CAN_IRQHandler+0x336>
            break;
 8002164:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	699a      	ldr	r2, [r3, #24]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002174:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2204      	movs	r2, #4
 800217c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800217e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002180:	2b00      	cmp	r3, #0
 8002182:	d008      	beq.n	8002196 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800218a:	431a      	orrs	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f000 f872 	bl	800227a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002196:	bf00      	nop
 8002198:	3728      	adds	r7, #40	@ 0x28
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800219e:	b480      	push	{r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80021b2:	b480      	push	{r7}
 80021b4:	b083      	sub	sp, #12
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80021ce:	bf00      	nop
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021da:	b480      	push	{r7}
 80021dc:	b083      	sub	sp, #12
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80021e2:	bf00      	nop
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021ee:	b480      	push	{r7}
 80021f0:	b083      	sub	sp, #12
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr

08002202 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002202:	b480      	push	{r7}
 8002204:	b083      	sub	sp, #12
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002216:	b480      	push	{r7}
 8002218:	b083      	sub	sp, #12
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800221e:	bf00      	nop
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800222a:	b480      	push	{r7}
 800222c:	b083      	sub	sp, #12
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002232:	bf00      	nop
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800223e:	b480      	push	{r7}
 8002240:	b083      	sub	sp, #12
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002252:	b480      	push	{r7}
 8002254:	b083      	sub	sp, #12
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800225a:	bf00      	nop
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr

08002266 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002266:	b480      	push	{r7}
 8002268:	b083      	sub	sp, #12
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800226e:	bf00      	nop
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr

0800227a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800227a:	b480      	push	{r7}
 800227c:	b083      	sub	sp, #12
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
	...

08002290 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f003 0307 	and.w	r3, r3, #7
 800229e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022a0:	4b0c      	ldr	r3, [pc, #48]	@ (80022d4 <__NVIC_SetPriorityGrouping+0x44>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022a6:	68ba      	ldr	r2, [r7, #8]
 80022a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022ac:	4013      	ands	r3, r2
 80022ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022c2:	4a04      	ldr	r2, [pc, #16]	@ (80022d4 <__NVIC_SetPriorityGrouping+0x44>)
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	60d3      	str	r3, [r2, #12]
}
 80022c8:	bf00      	nop
 80022ca:	3714      	adds	r7, #20
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	e000ed00 	.word	0xe000ed00

080022d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022dc:	4b04      	ldr	r3, [pc, #16]	@ (80022f0 <__NVIC_GetPriorityGrouping+0x18>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	0a1b      	lsrs	r3, r3, #8
 80022e2:	f003 0307 	and.w	r3, r3, #7
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	e000ed00 	.word	0xe000ed00

080022f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	4603      	mov	r3, r0
 80022fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002302:	2b00      	cmp	r3, #0
 8002304:	db0b      	blt.n	800231e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002306:	79fb      	ldrb	r3, [r7, #7]
 8002308:	f003 021f 	and.w	r2, r3, #31
 800230c:	4907      	ldr	r1, [pc, #28]	@ (800232c <__NVIC_EnableIRQ+0x38>)
 800230e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002312:	095b      	lsrs	r3, r3, #5
 8002314:	2001      	movs	r0, #1
 8002316:	fa00 f202 	lsl.w	r2, r0, r2
 800231a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800231e:	bf00      	nop
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	e000e100 	.word	0xe000e100

08002330 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	4603      	mov	r3, r0
 8002338:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800233a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233e:	2b00      	cmp	r3, #0
 8002340:	db12      	blt.n	8002368 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002342:	79fb      	ldrb	r3, [r7, #7]
 8002344:	f003 021f 	and.w	r2, r3, #31
 8002348:	490a      	ldr	r1, [pc, #40]	@ (8002374 <__NVIC_DisableIRQ+0x44>)
 800234a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234e:	095b      	lsrs	r3, r3, #5
 8002350:	2001      	movs	r0, #1
 8002352:	fa00 f202 	lsl.w	r2, r0, r2
 8002356:	3320      	adds	r3, #32
 8002358:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800235c:	f3bf 8f4f 	dsb	sy
}
 8002360:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002362:	f3bf 8f6f 	isb	sy
}
 8002366:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	e000e100 	.word	0xe000e100

08002378 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	4603      	mov	r3, r0
 8002380:	6039      	str	r1, [r7, #0]
 8002382:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002388:	2b00      	cmp	r3, #0
 800238a:	db0a      	blt.n	80023a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	b2da      	uxtb	r2, r3
 8002390:	490c      	ldr	r1, [pc, #48]	@ (80023c4 <__NVIC_SetPriority+0x4c>)
 8002392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002396:	0112      	lsls	r2, r2, #4
 8002398:	b2d2      	uxtb	r2, r2
 800239a:	440b      	add	r3, r1
 800239c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023a0:	e00a      	b.n	80023b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	4908      	ldr	r1, [pc, #32]	@ (80023c8 <__NVIC_SetPriority+0x50>)
 80023a8:	79fb      	ldrb	r3, [r7, #7]
 80023aa:	f003 030f 	and.w	r3, r3, #15
 80023ae:	3b04      	subs	r3, #4
 80023b0:	0112      	lsls	r2, r2, #4
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	440b      	add	r3, r1
 80023b6:	761a      	strb	r2, [r3, #24]
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	e000e100 	.word	0xe000e100
 80023c8:	e000ed00 	.word	0xe000ed00

080023cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b089      	sub	sp, #36	@ 0x24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f003 0307 	and.w	r3, r3, #7
 80023de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	f1c3 0307 	rsb	r3, r3, #7
 80023e6:	2b04      	cmp	r3, #4
 80023e8:	bf28      	it	cs
 80023ea:	2304      	movcs	r3, #4
 80023ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	3304      	adds	r3, #4
 80023f2:	2b06      	cmp	r3, #6
 80023f4:	d902      	bls.n	80023fc <NVIC_EncodePriority+0x30>
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	3b03      	subs	r3, #3
 80023fa:	e000      	b.n	80023fe <NVIC_EncodePriority+0x32>
 80023fc:	2300      	movs	r3, #0
 80023fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002400:	f04f 32ff 	mov.w	r2, #4294967295
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	43da      	mvns	r2, r3
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	401a      	ands	r2, r3
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002414:	f04f 31ff 	mov.w	r1, #4294967295
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	fa01 f303 	lsl.w	r3, r1, r3
 800241e:	43d9      	mvns	r1, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002424:	4313      	orrs	r3, r2
         );
}
 8002426:	4618      	mov	r0, r3
 8002428:	3724      	adds	r7, #36	@ 0x24
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
	...

08002434 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	3b01      	subs	r3, #1
 8002440:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002444:	d301      	bcc.n	800244a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002446:	2301      	movs	r3, #1
 8002448:	e00f      	b.n	800246a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800244a:	4a0a      	ldr	r2, [pc, #40]	@ (8002474 <SysTick_Config+0x40>)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	3b01      	subs	r3, #1
 8002450:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002452:	210f      	movs	r1, #15
 8002454:	f04f 30ff 	mov.w	r0, #4294967295
 8002458:	f7ff ff8e 	bl	8002378 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800245c:	4b05      	ldr	r3, [pc, #20]	@ (8002474 <SysTick_Config+0x40>)
 800245e:	2200      	movs	r2, #0
 8002460:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002462:	4b04      	ldr	r3, [pc, #16]	@ (8002474 <SysTick_Config+0x40>)
 8002464:	2207      	movs	r2, #7
 8002466:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	e000e010 	.word	0xe000e010

08002478 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f7ff ff05 	bl	8002290 <__NVIC_SetPriorityGrouping>
}
 8002486:	bf00      	nop
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800248e:	b580      	push	{r7, lr}
 8002490:	b086      	sub	sp, #24
 8002492:	af00      	add	r7, sp, #0
 8002494:	4603      	mov	r3, r0
 8002496:	60b9      	str	r1, [r7, #8]
 8002498:	607a      	str	r2, [r7, #4]
 800249a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800249c:	2300      	movs	r3, #0
 800249e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024a0:	f7ff ff1a 	bl	80022d8 <__NVIC_GetPriorityGrouping>
 80024a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	68b9      	ldr	r1, [r7, #8]
 80024aa:	6978      	ldr	r0, [r7, #20]
 80024ac:	f7ff ff8e 	bl	80023cc <NVIC_EncodePriority>
 80024b0:	4602      	mov	r2, r0
 80024b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024b6:	4611      	mov	r1, r2
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff ff5d 	bl	8002378 <__NVIC_SetPriority>
}
 80024be:	bf00      	nop
 80024c0:	3718      	adds	r7, #24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b082      	sub	sp, #8
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	4603      	mov	r3, r0
 80024ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff ff0d 	bl	80022f4 <__NVIC_EnableIRQ>
}
 80024da:	bf00      	nop
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b082      	sub	sp, #8
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	4603      	mov	r3, r0
 80024ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80024ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff ff1d 	bl	8002330 <__NVIC_DisableIRQ>
}
 80024f6:	bf00      	nop
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b082      	sub	sp, #8
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f7ff ff94 	bl	8002434 <SysTick_Config>
 800250c:	4603      	mov	r3, r0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
	...

08002518 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002520:	2300      	movs	r3, #0
 8002522:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002524:	f7ff f81e 	bl	8001564 <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e099      	b.n	8002668 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2202      	movs	r2, #2
 8002538:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f022 0201 	bic.w	r2, r2, #1
 8002552:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002554:	e00f      	b.n	8002576 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002556:	f7ff f805 	bl	8001564 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b05      	cmp	r3, #5
 8002562:	d908      	bls.n	8002576 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2220      	movs	r2, #32
 8002568:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2203      	movs	r2, #3
 800256e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e078      	b.n	8002668 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1e8      	bne.n	8002556 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800258c:	697a      	ldr	r2, [r7, #20]
 800258e:	4b38      	ldr	r3, [pc, #224]	@ (8002670 <HAL_DMA_Init+0x158>)
 8002590:	4013      	ands	r3, r2
 8002592:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685a      	ldr	r2, [r3, #4]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025cc:	2b04      	cmp	r3, #4
 80025ce:	d107      	bne.n	80025e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d8:	4313      	orrs	r3, r2
 80025da:	697a      	ldr	r2, [r7, #20]
 80025dc:	4313      	orrs	r3, r2
 80025de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	697a      	ldr	r2, [r7, #20]
 80025e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	f023 0307 	bic.w	r3, r3, #7
 80025f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025fc:	697a      	ldr	r2, [r7, #20]
 80025fe:	4313      	orrs	r3, r2
 8002600:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002606:	2b04      	cmp	r3, #4
 8002608:	d117      	bne.n	800263a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	4313      	orrs	r3, r2
 8002612:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00e      	beq.n	800263a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f000 fad9 	bl	8002bd4 <DMA_CheckFifoParam>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d008      	beq.n	800263a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2240      	movs	r2, #64	@ 0x40
 800262c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002636:	2301      	movs	r3, #1
 8002638:	e016      	b.n	8002668 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 fa90 	bl	8002b68 <DMA_CalcBaseAndBitshift>
 8002648:	4603      	mov	r3, r0
 800264a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002650:	223f      	movs	r2, #63	@ 0x3f
 8002652:	409a      	lsls	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2201      	movs	r2, #1
 8002662:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	3718      	adds	r7, #24
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	f010803f 	.word	0xf010803f

08002674 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e050      	b.n	8002728 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d101      	bne.n	8002696 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002692:	2302      	movs	r3, #2
 8002694:	e048      	b.n	8002728 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f022 0201 	bic.w	r2, r2, #1
 80026a4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2200      	movs	r2, #0
 80026ac:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2200      	movs	r2, #0
 80026b4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2200      	movs	r2, #0
 80026bc:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2200      	movs	r2, #0
 80026c4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2200      	movs	r2, #0
 80026cc:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2221      	movs	r2, #33	@ 0x21
 80026d4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 fa46 	bl	8002b68 <DMA_CalcBaseAndBitshift>
 80026dc:	4603      	mov	r3, r0
 80026de:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002708:	223f      	movs	r2, #63	@ 0x3f
 800270a:	409a      	lsls	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	3710      	adds	r7, #16
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800273c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800273e:	f7fe ff11 	bl	8001564 <HAL_GetTick>
 8002742:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800274a:	b2db      	uxtb	r3, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d008      	beq.n	8002762 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2280      	movs	r2, #128	@ 0x80
 8002754:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e052      	b.n	8002808 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f022 0216 	bic.w	r2, r2, #22
 8002770:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	695a      	ldr	r2, [r3, #20]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002780:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002786:	2b00      	cmp	r3, #0
 8002788:	d103      	bne.n	8002792 <HAL_DMA_Abort+0x62>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800278e:	2b00      	cmp	r3, #0
 8002790:	d007      	beq.n	80027a2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 0208 	bic.w	r2, r2, #8
 80027a0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f022 0201 	bic.w	r2, r2, #1
 80027b0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027b2:	e013      	b.n	80027dc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027b4:	f7fe fed6 	bl	8001564 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b05      	cmp	r3, #5
 80027c0:	d90c      	bls.n	80027dc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2220      	movs	r2, #32
 80027c6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2203      	movs	r2, #3
 80027cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e015      	b.n	8002808 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1e4      	bne.n	80027b4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ee:	223f      	movs	r2, #63	@ 0x3f
 80027f0:	409a      	lsls	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002806:	2300      	movs	r3, #0
}
 8002808:	4618      	mov	r0, r3
 800280a:	3710      	adds	r7, #16
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d004      	beq.n	800282e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2280      	movs	r2, #128	@ 0x80
 8002828:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e00c      	b.n	8002848 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2205      	movs	r2, #5
 8002832:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 0201 	bic.w	r2, r2, #1
 8002844:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800285c:	2300      	movs	r3, #0
 800285e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002860:	4b8e      	ldr	r3, [pc, #568]	@ (8002a9c <HAL_DMA_IRQHandler+0x248>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a8e      	ldr	r2, [pc, #568]	@ (8002aa0 <HAL_DMA_IRQHandler+0x24c>)
 8002866:	fba2 2303 	umull	r2, r3, r2, r3
 800286a:	0a9b      	lsrs	r3, r3, #10
 800286c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002872:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800287e:	2208      	movs	r2, #8
 8002880:	409a      	lsls	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	4013      	ands	r3, r2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d01a      	beq.n	80028c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0304 	and.w	r3, r3, #4
 8002894:	2b00      	cmp	r3, #0
 8002896:	d013      	beq.n	80028c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f022 0204 	bic.w	r2, r2, #4
 80028a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ac:	2208      	movs	r2, #8
 80028ae:	409a      	lsls	r2, r3
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028b8:	f043 0201 	orr.w	r2, r3, #1
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028c4:	2201      	movs	r2, #1
 80028c6:	409a      	lsls	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	4013      	ands	r3, r2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d012      	beq.n	80028f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00b      	beq.n	80028f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028e2:	2201      	movs	r2, #1
 80028e4:	409a      	lsls	r2, r3
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028ee:	f043 0202 	orr.w	r2, r3, #2
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028fa:	2204      	movs	r2, #4
 80028fc:	409a      	lsls	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	4013      	ands	r3, r2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d012      	beq.n	800292c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0302 	and.w	r3, r3, #2
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00b      	beq.n	800292c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002918:	2204      	movs	r2, #4
 800291a:	409a      	lsls	r2, r3
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002924:	f043 0204 	orr.w	r2, r3, #4
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002930:	2210      	movs	r2, #16
 8002932:	409a      	lsls	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	4013      	ands	r3, r2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d043      	beq.n	80029c4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0308 	and.w	r3, r3, #8
 8002946:	2b00      	cmp	r3, #0
 8002948:	d03c      	beq.n	80029c4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800294e:	2210      	movs	r2, #16
 8002950:	409a      	lsls	r2, r3
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d018      	beq.n	8002996 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d108      	bne.n	8002984 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002976:	2b00      	cmp	r3, #0
 8002978:	d024      	beq.n	80029c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	4798      	blx	r3
 8002982:	e01f      	b.n	80029c4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002988:	2b00      	cmp	r3, #0
 800298a:	d01b      	beq.n	80029c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	4798      	blx	r3
 8002994:	e016      	b.n	80029c4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d107      	bne.n	80029b4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f022 0208 	bic.w	r2, r2, #8
 80029b2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d003      	beq.n	80029c4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029c8:	2220      	movs	r2, #32
 80029ca:	409a      	lsls	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	4013      	ands	r3, r2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	f000 808f 	beq.w	8002af4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0310 	and.w	r3, r3, #16
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f000 8087 	beq.w	8002af4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ea:	2220      	movs	r2, #32
 80029ec:	409a      	lsls	r2, r3
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b05      	cmp	r3, #5
 80029fc:	d136      	bne.n	8002a6c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f022 0216 	bic.w	r2, r2, #22
 8002a0c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	695a      	ldr	r2, [r3, #20]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a1c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d103      	bne.n	8002a2e <HAL_DMA_IRQHandler+0x1da>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d007      	beq.n	8002a3e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f022 0208 	bic.w	r2, r2, #8
 8002a3c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a42:	223f      	movs	r2, #63	@ 0x3f
 8002a44:	409a      	lsls	r2, r3
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d07e      	beq.n	8002b60 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	4798      	blx	r3
        }
        return;
 8002a6a:	e079      	b.n	8002b60 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d01d      	beq.n	8002ab6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d10d      	bne.n	8002aa4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d031      	beq.n	8002af4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	4798      	blx	r3
 8002a98:	e02c      	b.n	8002af4 <HAL_DMA_IRQHandler+0x2a0>
 8002a9a:	bf00      	nop
 8002a9c:	2000000c 	.word	0x2000000c
 8002aa0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d023      	beq.n	8002af4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	4798      	blx	r3
 8002ab4:	e01e      	b.n	8002af4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10f      	bne.n	8002ae4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 0210 	bic.w	r2, r2, #16
 8002ad2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d003      	beq.n	8002af4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d032      	beq.n	8002b62 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b00:	f003 0301 	and.w	r3, r3, #1
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d022      	beq.n	8002b4e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2205      	movs	r2, #5
 8002b0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f022 0201 	bic.w	r2, r2, #1
 8002b1e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	3301      	adds	r3, #1
 8002b24:	60bb      	str	r3, [r7, #8]
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d307      	bcc.n	8002b3c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1f2      	bne.n	8002b20 <HAL_DMA_IRQHandler+0x2cc>
 8002b3a:	e000      	b.n	8002b3e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002b3c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2201      	movs	r2, #1
 8002b42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d005      	beq.n	8002b62 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	4798      	blx	r3
 8002b5e:	e000      	b.n	8002b62 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b60:	bf00      	nop
    }
  }
}
 8002b62:	3718      	adds	r7, #24
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	3b10      	subs	r3, #16
 8002b78:	4a14      	ldr	r2, [pc, #80]	@ (8002bcc <DMA_CalcBaseAndBitshift+0x64>)
 8002b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7e:	091b      	lsrs	r3, r3, #4
 8002b80:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b82:	4a13      	ldr	r2, [pc, #76]	@ (8002bd0 <DMA_CalcBaseAndBitshift+0x68>)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	4413      	add	r3, r2
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2b03      	cmp	r3, #3
 8002b94:	d909      	bls.n	8002baa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002b9e:	f023 0303 	bic.w	r3, r3, #3
 8002ba2:	1d1a      	adds	r2, r3, #4
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	659a      	str	r2, [r3, #88]	@ 0x58
 8002ba8:	e007      	b.n	8002bba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002bb2:	f023 0303 	bic.w	r3, r3, #3
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3714      	adds	r7, #20
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	aaaaaaab 	.word	0xaaaaaaab
 8002bd0:	0800c860 	.word	0x0800c860

08002bd4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002be4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d11f      	bne.n	8002c2e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	2b03      	cmp	r3, #3
 8002bf2:	d856      	bhi.n	8002ca2 <DMA_CheckFifoParam+0xce>
 8002bf4:	a201      	add	r2, pc, #4	@ (adr r2, 8002bfc <DMA_CheckFifoParam+0x28>)
 8002bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bfa:	bf00      	nop
 8002bfc:	08002c0d 	.word	0x08002c0d
 8002c00:	08002c1f 	.word	0x08002c1f
 8002c04:	08002c0d 	.word	0x08002c0d
 8002c08:	08002ca3 	.word	0x08002ca3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c10:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d046      	beq.n	8002ca6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c1c:	e043      	b.n	8002ca6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c22:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c26:	d140      	bne.n	8002caa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c2c:	e03d      	b.n	8002caa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c36:	d121      	bne.n	8002c7c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	2b03      	cmp	r3, #3
 8002c3c:	d837      	bhi.n	8002cae <DMA_CheckFifoParam+0xda>
 8002c3e:	a201      	add	r2, pc, #4	@ (adr r2, 8002c44 <DMA_CheckFifoParam+0x70>)
 8002c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c44:	08002c55 	.word	0x08002c55
 8002c48:	08002c5b 	.word	0x08002c5b
 8002c4c:	08002c55 	.word	0x08002c55
 8002c50:	08002c6d 	.word	0x08002c6d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	73fb      	strb	r3, [r7, #15]
      break;
 8002c58:	e030      	b.n	8002cbc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c5e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d025      	beq.n	8002cb2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c6a:	e022      	b.n	8002cb2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c70:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c74:	d11f      	bne.n	8002cb6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c7a:	e01c      	b.n	8002cb6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d903      	bls.n	8002c8a <DMA_CheckFifoParam+0xb6>
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	2b03      	cmp	r3, #3
 8002c86:	d003      	beq.n	8002c90 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c88:	e018      	b.n	8002cbc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	73fb      	strb	r3, [r7, #15]
      break;
 8002c8e:	e015      	b.n	8002cbc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c94:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d00e      	beq.n	8002cba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	73fb      	strb	r3, [r7, #15]
      break;
 8002ca0:	e00b      	b.n	8002cba <DMA_CheckFifoParam+0xe6>
      break;
 8002ca2:	bf00      	nop
 8002ca4:	e00a      	b.n	8002cbc <DMA_CheckFifoParam+0xe8>
      break;
 8002ca6:	bf00      	nop
 8002ca8:	e008      	b.n	8002cbc <DMA_CheckFifoParam+0xe8>
      break;
 8002caa:	bf00      	nop
 8002cac:	e006      	b.n	8002cbc <DMA_CheckFifoParam+0xe8>
      break;
 8002cae:	bf00      	nop
 8002cb0:	e004      	b.n	8002cbc <DMA_CheckFifoParam+0xe8>
      break;
 8002cb2:	bf00      	nop
 8002cb4:	e002      	b.n	8002cbc <DMA_CheckFifoParam+0xe8>
      break;   
 8002cb6:	bf00      	nop
 8002cb8:	e000      	b.n	8002cbc <DMA_CheckFifoParam+0xe8>
      break;
 8002cba:	bf00      	nop
    }
  } 
  
  return status; 
 8002cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3714      	adds	r7, #20
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop

08002ccc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b089      	sub	sp, #36	@ 0x24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	61fb      	str	r3, [r7, #28]
 8002ce6:	e16b      	b.n	8002fc0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ce8:	2201      	movs	r2, #1
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	f040 815a 	bne.w	8002fba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f003 0303 	and.w	r3, r3, #3
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d005      	beq.n	8002d1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d130      	bne.n	8002d80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	2203      	movs	r2, #3
 8002d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2e:	43db      	mvns	r3, r3
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	4013      	ands	r3, r2
 8002d34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	68da      	ldr	r2, [r3, #12]
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d54:	2201      	movs	r2, #1
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	43db      	mvns	r3, r3
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	4013      	ands	r3, r2
 8002d62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	091b      	lsrs	r3, r3, #4
 8002d6a:	f003 0201 	and.w	r2, r3, #1
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f003 0303 	and.w	r3, r3, #3
 8002d88:	2b03      	cmp	r3, #3
 8002d8a:	d017      	beq.n	8002dbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	2203      	movs	r2, #3
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	4013      	ands	r3, r2
 8002da2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f003 0303 	and.w	r3, r3, #3
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d123      	bne.n	8002e10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	08da      	lsrs	r2, r3, #3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	3208      	adds	r2, #8
 8002dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	f003 0307 	and.w	r3, r3, #7
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	220f      	movs	r2, #15
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	43db      	mvns	r3, r3
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	4013      	ands	r3, r2
 8002dea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	691a      	ldr	r2, [r3, #16]
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	f003 0307 	and.w	r3, r3, #7
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	08da      	lsrs	r2, r3, #3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	3208      	adds	r2, #8
 8002e0a:	69b9      	ldr	r1, [r7, #24]
 8002e0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	2203      	movs	r2, #3
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	43db      	mvns	r3, r3
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	4013      	ands	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f003 0203 	and.w	r2, r3, #3
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f000 80b4 	beq.w	8002fba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e52:	2300      	movs	r3, #0
 8002e54:	60fb      	str	r3, [r7, #12]
 8002e56:	4b60      	ldr	r3, [pc, #384]	@ (8002fd8 <HAL_GPIO_Init+0x30c>)
 8002e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e5a:	4a5f      	ldr	r2, [pc, #380]	@ (8002fd8 <HAL_GPIO_Init+0x30c>)
 8002e5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e60:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e62:	4b5d      	ldr	r3, [pc, #372]	@ (8002fd8 <HAL_GPIO_Init+0x30c>)
 8002e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e6a:	60fb      	str	r3, [r7, #12]
 8002e6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e6e:	4a5b      	ldr	r2, [pc, #364]	@ (8002fdc <HAL_GPIO_Init+0x310>)
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	089b      	lsrs	r3, r3, #2
 8002e74:	3302      	adds	r3, #2
 8002e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	f003 0303 	and.w	r3, r3, #3
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	220f      	movs	r2, #15
 8002e86:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8a:	43db      	mvns	r3, r3
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a52      	ldr	r2, [pc, #328]	@ (8002fe0 <HAL_GPIO_Init+0x314>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d02b      	beq.n	8002ef2 <HAL_GPIO_Init+0x226>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a51      	ldr	r2, [pc, #324]	@ (8002fe4 <HAL_GPIO_Init+0x318>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d025      	beq.n	8002eee <HAL_GPIO_Init+0x222>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a50      	ldr	r2, [pc, #320]	@ (8002fe8 <HAL_GPIO_Init+0x31c>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d01f      	beq.n	8002eea <HAL_GPIO_Init+0x21e>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a4f      	ldr	r2, [pc, #316]	@ (8002fec <HAL_GPIO_Init+0x320>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d019      	beq.n	8002ee6 <HAL_GPIO_Init+0x21a>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a4e      	ldr	r2, [pc, #312]	@ (8002ff0 <HAL_GPIO_Init+0x324>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d013      	beq.n	8002ee2 <HAL_GPIO_Init+0x216>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a4d      	ldr	r2, [pc, #308]	@ (8002ff4 <HAL_GPIO_Init+0x328>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d00d      	beq.n	8002ede <HAL_GPIO_Init+0x212>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a4c      	ldr	r2, [pc, #304]	@ (8002ff8 <HAL_GPIO_Init+0x32c>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d007      	beq.n	8002eda <HAL_GPIO_Init+0x20e>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a4b      	ldr	r2, [pc, #300]	@ (8002ffc <HAL_GPIO_Init+0x330>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d101      	bne.n	8002ed6 <HAL_GPIO_Init+0x20a>
 8002ed2:	2307      	movs	r3, #7
 8002ed4:	e00e      	b.n	8002ef4 <HAL_GPIO_Init+0x228>
 8002ed6:	2308      	movs	r3, #8
 8002ed8:	e00c      	b.n	8002ef4 <HAL_GPIO_Init+0x228>
 8002eda:	2306      	movs	r3, #6
 8002edc:	e00a      	b.n	8002ef4 <HAL_GPIO_Init+0x228>
 8002ede:	2305      	movs	r3, #5
 8002ee0:	e008      	b.n	8002ef4 <HAL_GPIO_Init+0x228>
 8002ee2:	2304      	movs	r3, #4
 8002ee4:	e006      	b.n	8002ef4 <HAL_GPIO_Init+0x228>
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e004      	b.n	8002ef4 <HAL_GPIO_Init+0x228>
 8002eea:	2302      	movs	r3, #2
 8002eec:	e002      	b.n	8002ef4 <HAL_GPIO_Init+0x228>
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e000      	b.n	8002ef4 <HAL_GPIO_Init+0x228>
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	69fa      	ldr	r2, [r7, #28]
 8002ef6:	f002 0203 	and.w	r2, r2, #3
 8002efa:	0092      	lsls	r2, r2, #2
 8002efc:	4093      	lsls	r3, r2
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f04:	4935      	ldr	r1, [pc, #212]	@ (8002fdc <HAL_GPIO_Init+0x310>)
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	089b      	lsrs	r3, r3, #2
 8002f0a:	3302      	adds	r3, #2
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f12:	4b3b      	ldr	r3, [pc, #236]	@ (8003000 <HAL_GPIO_Init+0x334>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	43db      	mvns	r3, r3
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	4013      	ands	r3, r2
 8002f20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002f2e:	69ba      	ldr	r2, [r7, #24]
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f36:	4a32      	ldr	r2, [pc, #200]	@ (8003000 <HAL_GPIO_Init+0x334>)
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f3c:	4b30      	ldr	r3, [pc, #192]	@ (8003000 <HAL_GPIO_Init+0x334>)
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	43db      	mvns	r3, r3
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d003      	beq.n	8002f60 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f60:	4a27      	ldr	r2, [pc, #156]	@ (8003000 <HAL_GPIO_Init+0x334>)
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f66:	4b26      	ldr	r3, [pc, #152]	@ (8003000 <HAL_GPIO_Init+0x334>)
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	43db      	mvns	r3, r3
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	4013      	ands	r3, r2
 8002f74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d003      	beq.n	8002f8a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f8a:	4a1d      	ldr	r2, [pc, #116]	@ (8003000 <HAL_GPIO_Init+0x334>)
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f90:	4b1b      	ldr	r3, [pc, #108]	@ (8003000 <HAL_GPIO_Init+0x334>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	43db      	mvns	r3, r3
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d003      	beq.n	8002fb4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fb4:	4a12      	ldr	r2, [pc, #72]	@ (8003000 <HAL_GPIO_Init+0x334>)
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	61fb      	str	r3, [r7, #28]
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	2b0f      	cmp	r3, #15
 8002fc4:	f67f ae90 	bls.w	8002ce8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fc8:	bf00      	nop
 8002fca:	bf00      	nop
 8002fcc:	3724      	adds	r7, #36	@ 0x24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	40023800 	.word	0x40023800
 8002fdc:	40013800 	.word	0x40013800
 8002fe0:	40020000 	.word	0x40020000
 8002fe4:	40020400 	.word	0x40020400
 8002fe8:	40020800 	.word	0x40020800
 8002fec:	40020c00 	.word	0x40020c00
 8002ff0:	40021000 	.word	0x40021000
 8002ff4:	40021400 	.word	0x40021400
 8002ff8:	40021800 	.word	0x40021800
 8002ffc:	40021c00 	.word	0x40021c00
 8003000:	40013c00 	.word	0x40013c00

08003004 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003004:	b480      	push	{r7}
 8003006:	b087      	sub	sp, #28
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800300e:	2300      	movs	r3, #0
 8003010:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003012:	2300      	movs	r3, #0
 8003014:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003016:	2300      	movs	r3, #0
 8003018:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800301a:	2300      	movs	r3, #0
 800301c:	617b      	str	r3, [r7, #20]
 800301e:	e0cd      	b.n	80031bc <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003020:	2201      	movs	r2, #1
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	fa02 f303 	lsl.w	r3, r2, r3
 8003028:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800302a:	683a      	ldr	r2, [r7, #0]
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	4013      	ands	r3, r2
 8003030:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	429a      	cmp	r2, r3
 8003038:	f040 80bd 	bne.w	80031b6 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800303c:	4a65      	ldr	r2, [pc, #404]	@ (80031d4 <HAL_GPIO_DeInit+0x1d0>)
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	089b      	lsrs	r3, r3, #2
 8003042:	3302      	adds	r3, #2
 8003044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003048:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	f003 0303 	and.w	r3, r3, #3
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	220f      	movs	r2, #15
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	68ba      	ldr	r2, [r7, #8]
 800305a:	4013      	ands	r3, r2
 800305c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a5d      	ldr	r2, [pc, #372]	@ (80031d8 <HAL_GPIO_DeInit+0x1d4>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d02b      	beq.n	80030be <HAL_GPIO_DeInit+0xba>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a5c      	ldr	r2, [pc, #368]	@ (80031dc <HAL_GPIO_DeInit+0x1d8>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d025      	beq.n	80030ba <HAL_GPIO_DeInit+0xb6>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a5b      	ldr	r2, [pc, #364]	@ (80031e0 <HAL_GPIO_DeInit+0x1dc>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d01f      	beq.n	80030b6 <HAL_GPIO_DeInit+0xb2>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a5a      	ldr	r2, [pc, #360]	@ (80031e4 <HAL_GPIO_DeInit+0x1e0>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d019      	beq.n	80030b2 <HAL_GPIO_DeInit+0xae>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a59      	ldr	r2, [pc, #356]	@ (80031e8 <HAL_GPIO_DeInit+0x1e4>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d013      	beq.n	80030ae <HAL_GPIO_DeInit+0xaa>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a58      	ldr	r2, [pc, #352]	@ (80031ec <HAL_GPIO_DeInit+0x1e8>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d00d      	beq.n	80030aa <HAL_GPIO_DeInit+0xa6>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a57      	ldr	r2, [pc, #348]	@ (80031f0 <HAL_GPIO_DeInit+0x1ec>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d007      	beq.n	80030a6 <HAL_GPIO_DeInit+0xa2>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a56      	ldr	r2, [pc, #344]	@ (80031f4 <HAL_GPIO_DeInit+0x1f0>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d101      	bne.n	80030a2 <HAL_GPIO_DeInit+0x9e>
 800309e:	2307      	movs	r3, #7
 80030a0:	e00e      	b.n	80030c0 <HAL_GPIO_DeInit+0xbc>
 80030a2:	2308      	movs	r3, #8
 80030a4:	e00c      	b.n	80030c0 <HAL_GPIO_DeInit+0xbc>
 80030a6:	2306      	movs	r3, #6
 80030a8:	e00a      	b.n	80030c0 <HAL_GPIO_DeInit+0xbc>
 80030aa:	2305      	movs	r3, #5
 80030ac:	e008      	b.n	80030c0 <HAL_GPIO_DeInit+0xbc>
 80030ae:	2304      	movs	r3, #4
 80030b0:	e006      	b.n	80030c0 <HAL_GPIO_DeInit+0xbc>
 80030b2:	2303      	movs	r3, #3
 80030b4:	e004      	b.n	80030c0 <HAL_GPIO_DeInit+0xbc>
 80030b6:	2302      	movs	r3, #2
 80030b8:	e002      	b.n	80030c0 <HAL_GPIO_DeInit+0xbc>
 80030ba:	2301      	movs	r3, #1
 80030bc:	e000      	b.n	80030c0 <HAL_GPIO_DeInit+0xbc>
 80030be:	2300      	movs	r3, #0
 80030c0:	697a      	ldr	r2, [r7, #20]
 80030c2:	f002 0203 	and.w	r2, r2, #3
 80030c6:	0092      	lsls	r2, r2, #2
 80030c8:	4093      	lsls	r3, r2
 80030ca:	68ba      	ldr	r2, [r7, #8]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d132      	bne.n	8003136 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80030d0:	4b49      	ldr	r3, [pc, #292]	@ (80031f8 <HAL_GPIO_DeInit+0x1f4>)
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	43db      	mvns	r3, r3
 80030d8:	4947      	ldr	r1, [pc, #284]	@ (80031f8 <HAL_GPIO_DeInit+0x1f4>)
 80030da:	4013      	ands	r3, r2
 80030dc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80030de:	4b46      	ldr	r3, [pc, #280]	@ (80031f8 <HAL_GPIO_DeInit+0x1f4>)
 80030e0:	685a      	ldr	r2, [r3, #4]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	43db      	mvns	r3, r3
 80030e6:	4944      	ldr	r1, [pc, #272]	@ (80031f8 <HAL_GPIO_DeInit+0x1f4>)
 80030e8:	4013      	ands	r3, r2
 80030ea:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80030ec:	4b42      	ldr	r3, [pc, #264]	@ (80031f8 <HAL_GPIO_DeInit+0x1f4>)
 80030ee:	68da      	ldr	r2, [r3, #12]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	43db      	mvns	r3, r3
 80030f4:	4940      	ldr	r1, [pc, #256]	@ (80031f8 <HAL_GPIO_DeInit+0x1f4>)
 80030f6:	4013      	ands	r3, r2
 80030f8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80030fa:	4b3f      	ldr	r3, [pc, #252]	@ (80031f8 <HAL_GPIO_DeInit+0x1f4>)
 80030fc:	689a      	ldr	r2, [r3, #8]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	43db      	mvns	r3, r3
 8003102:	493d      	ldr	r1, [pc, #244]	@ (80031f8 <HAL_GPIO_DeInit+0x1f4>)
 8003104:	4013      	ands	r3, r2
 8003106:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	f003 0303 	and.w	r3, r3, #3
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	220f      	movs	r2, #15
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003118:	4a2e      	ldr	r2, [pc, #184]	@ (80031d4 <HAL_GPIO_DeInit+0x1d0>)
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	089b      	lsrs	r3, r3, #2
 800311e:	3302      	adds	r3, #2
 8003120:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	43da      	mvns	r2, r3
 8003128:	482a      	ldr	r0, [pc, #168]	@ (80031d4 <HAL_GPIO_DeInit+0x1d0>)
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	089b      	lsrs	r3, r3, #2
 800312e:	400a      	ands	r2, r1
 8003130:	3302      	adds	r3, #2
 8003132:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	2103      	movs	r1, #3
 8003140:	fa01 f303 	lsl.w	r3, r1, r3
 8003144:	43db      	mvns	r3, r3
 8003146:	401a      	ands	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	08da      	lsrs	r2, r3, #3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	3208      	adds	r2, #8
 8003154:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	f003 0307 	and.w	r3, r3, #7
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	220f      	movs	r2, #15
 8003162:	fa02 f303 	lsl.w	r3, r2, r3
 8003166:	43db      	mvns	r3, r3
 8003168:	697a      	ldr	r2, [r7, #20]
 800316a:	08d2      	lsrs	r2, r2, #3
 800316c:	4019      	ands	r1, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	3208      	adds	r2, #8
 8003172:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	68da      	ldr	r2, [r3, #12]
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	2103      	movs	r1, #3
 8003180:	fa01 f303 	lsl.w	r3, r1, r3
 8003184:	43db      	mvns	r3, r3
 8003186:	401a      	ands	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685a      	ldr	r2, [r3, #4]
 8003190:	2101      	movs	r1, #1
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	fa01 f303 	lsl.w	r3, r1, r3
 8003198:	43db      	mvns	r3, r3
 800319a:	401a      	ands	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689a      	ldr	r2, [r3, #8]
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	005b      	lsls	r3, r3, #1
 80031a8:	2103      	movs	r1, #3
 80031aa:	fa01 f303 	lsl.w	r3, r1, r3
 80031ae:	43db      	mvns	r3, r3
 80031b0:	401a      	ands	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	3301      	adds	r3, #1
 80031ba:	617b      	str	r3, [r7, #20]
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	2b0f      	cmp	r3, #15
 80031c0:	f67f af2e 	bls.w	8003020 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80031c4:	bf00      	nop
 80031c6:	bf00      	nop
 80031c8:	371c      	adds	r7, #28
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	40013800 	.word	0x40013800
 80031d8:	40020000 	.word	0x40020000
 80031dc:	40020400 	.word	0x40020400
 80031e0:	40020800 	.word	0x40020800
 80031e4:	40020c00 	.word	0x40020c00
 80031e8:	40021000 	.word	0x40021000
 80031ec:	40021400 	.word	0x40021400
 80031f0:	40021800 	.word	0x40021800
 80031f4:	40021c00 	.word	0x40021c00
 80031f8:	40013c00 	.word	0x40013c00

080031fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	460b      	mov	r3, r1
 8003206:	807b      	strh	r3, [r7, #2]
 8003208:	4613      	mov	r3, r2
 800320a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800320c:	787b      	ldrb	r3, [r7, #1]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d003      	beq.n	800321a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003212:	887a      	ldrh	r2, [r7, #2]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003218:	e003      	b.n	8003222 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800321a:	887b      	ldrh	r3, [r7, #2]
 800321c:	041a      	lsls	r2, r3, #16
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	619a      	str	r2, [r3, #24]
}
 8003222:	bf00      	nop
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr

0800322e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800322e:	b480      	push	{r7}
 8003230:	b085      	sub	sp, #20
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
 8003236:	460b      	mov	r3, r1
 8003238:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003240:	887a      	ldrh	r2, [r7, #2]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	4013      	ands	r3, r2
 8003246:	041a      	lsls	r2, r3, #16
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	43d9      	mvns	r1, r3
 800324c:	887b      	ldrh	r3, [r7, #2]
 800324e:	400b      	ands	r3, r1
 8003250:	431a      	orrs	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	619a      	str	r2, [r3, #24]
}
 8003256:	bf00      	nop
 8003258:	3714      	adds	r7, #20
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
	...

08003264 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e12b      	b.n	80034ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	d106      	bne.n	8003290 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f7fd fad6 	bl	800083c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2224      	movs	r2, #36	@ 0x24
 8003294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f022 0201 	bic.w	r2, r2, #1
 80032a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80032b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80032c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032c8:	f001 ffd2 	bl	8005270 <HAL_RCC_GetPCLK1Freq>
 80032cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	4a81      	ldr	r2, [pc, #516]	@ (80034d8 <HAL_I2C_Init+0x274>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d807      	bhi.n	80032e8 <HAL_I2C_Init+0x84>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	4a80      	ldr	r2, [pc, #512]	@ (80034dc <HAL_I2C_Init+0x278>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	bf94      	ite	ls
 80032e0:	2301      	movls	r3, #1
 80032e2:	2300      	movhi	r3, #0
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	e006      	b.n	80032f6 <HAL_I2C_Init+0x92>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	4a7d      	ldr	r2, [pc, #500]	@ (80034e0 <HAL_I2C_Init+0x27c>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	bf94      	ite	ls
 80032f0:	2301      	movls	r3, #1
 80032f2:	2300      	movhi	r3, #0
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e0e7      	b.n	80034ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	4a78      	ldr	r2, [pc, #480]	@ (80034e4 <HAL_I2C_Init+0x280>)
 8003302:	fba2 2303 	umull	r2, r3, r2, r3
 8003306:	0c9b      	lsrs	r3, r3, #18
 8003308:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68ba      	ldr	r2, [r7, #8]
 800331a:	430a      	orrs	r2, r1
 800331c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	6a1b      	ldr	r3, [r3, #32]
 8003324:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	4a6a      	ldr	r2, [pc, #424]	@ (80034d8 <HAL_I2C_Init+0x274>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d802      	bhi.n	8003338 <HAL_I2C_Init+0xd4>
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	3301      	adds	r3, #1
 8003336:	e009      	b.n	800334c <HAL_I2C_Init+0xe8>
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800333e:	fb02 f303 	mul.w	r3, r2, r3
 8003342:	4a69      	ldr	r2, [pc, #420]	@ (80034e8 <HAL_I2C_Init+0x284>)
 8003344:	fba2 2303 	umull	r2, r3, r2, r3
 8003348:	099b      	lsrs	r3, r3, #6
 800334a:	3301      	adds	r3, #1
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	6812      	ldr	r2, [r2, #0]
 8003350:	430b      	orrs	r3, r1
 8003352:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800335e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	495c      	ldr	r1, [pc, #368]	@ (80034d8 <HAL_I2C_Init+0x274>)
 8003368:	428b      	cmp	r3, r1
 800336a:	d819      	bhi.n	80033a0 <HAL_I2C_Init+0x13c>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	1e59      	subs	r1, r3, #1
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	fbb1 f3f3 	udiv	r3, r1, r3
 800337a:	1c59      	adds	r1, r3, #1
 800337c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003380:	400b      	ands	r3, r1
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00a      	beq.n	800339c <HAL_I2C_Init+0x138>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	1e59      	subs	r1, r3, #1
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	fbb1 f3f3 	udiv	r3, r1, r3
 8003394:	3301      	adds	r3, #1
 8003396:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800339a:	e051      	b.n	8003440 <HAL_I2C_Init+0x1dc>
 800339c:	2304      	movs	r3, #4
 800339e:	e04f      	b.n	8003440 <HAL_I2C_Init+0x1dc>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d111      	bne.n	80033cc <HAL_I2C_Init+0x168>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	1e58      	subs	r0, r3, #1
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6859      	ldr	r1, [r3, #4]
 80033b0:	460b      	mov	r3, r1
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	440b      	add	r3, r1
 80033b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80033ba:	3301      	adds	r3, #1
 80033bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	bf0c      	ite	eq
 80033c4:	2301      	moveq	r3, #1
 80033c6:	2300      	movne	r3, #0
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	e012      	b.n	80033f2 <HAL_I2C_Init+0x18e>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	1e58      	subs	r0, r3, #1
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6859      	ldr	r1, [r3, #4]
 80033d4:	460b      	mov	r3, r1
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	440b      	add	r3, r1
 80033da:	0099      	lsls	r1, r3, #2
 80033dc:	440b      	add	r3, r1
 80033de:	fbb0 f3f3 	udiv	r3, r0, r3
 80033e2:	3301      	adds	r3, #1
 80033e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	bf0c      	ite	eq
 80033ec:	2301      	moveq	r3, #1
 80033ee:	2300      	movne	r3, #0
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <HAL_I2C_Init+0x196>
 80033f6:	2301      	movs	r3, #1
 80033f8:	e022      	b.n	8003440 <HAL_I2C_Init+0x1dc>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10e      	bne.n	8003420 <HAL_I2C_Init+0x1bc>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	1e58      	subs	r0, r3, #1
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6859      	ldr	r1, [r3, #4]
 800340a:	460b      	mov	r3, r1
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	440b      	add	r3, r1
 8003410:	fbb0 f3f3 	udiv	r3, r0, r3
 8003414:	3301      	adds	r3, #1
 8003416:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800341a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800341e:	e00f      	b.n	8003440 <HAL_I2C_Init+0x1dc>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	1e58      	subs	r0, r3, #1
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6859      	ldr	r1, [r3, #4]
 8003428:	460b      	mov	r3, r1
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	440b      	add	r3, r1
 800342e:	0099      	lsls	r1, r3, #2
 8003430:	440b      	add	r3, r1
 8003432:	fbb0 f3f3 	udiv	r3, r0, r3
 8003436:	3301      	adds	r3, #1
 8003438:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800343c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003440:	6879      	ldr	r1, [r7, #4]
 8003442:	6809      	ldr	r1, [r1, #0]
 8003444:	4313      	orrs	r3, r2
 8003446:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	69da      	ldr	r2, [r3, #28]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	431a      	orrs	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	430a      	orrs	r2, r1
 8003462:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800346e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	6911      	ldr	r1, [r2, #16]
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	68d2      	ldr	r2, [r2, #12]
 800347a:	4311      	orrs	r1, r2
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	6812      	ldr	r2, [r2, #0]
 8003480:	430b      	orrs	r3, r1
 8003482:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	695a      	ldr	r2, [r3, #20]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	431a      	orrs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	430a      	orrs	r2, r1
 800349e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f042 0201 	orr.w	r2, r2, #1
 80034ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2220      	movs	r2, #32
 80034ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3710      	adds	r7, #16
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	000186a0 	.word	0x000186a0
 80034dc:	001e847f 	.word	0x001e847f
 80034e0:	003d08ff 	.word	0x003d08ff
 80034e4:	431bde83 	.word	0x431bde83
 80034e8:	10624dd3 	.word	0x10624dd3

080034ec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af02      	add	r7, sp, #8
 80034f2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e101      	b.n	8003702 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2b00      	cmp	r3, #0
 800350e:	d106      	bne.n	800351e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f7fd ff3f 	bl	800139c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2203      	movs	r2, #3
 8003522:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800352c:	d102      	bne.n	8003534 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4618      	mov	r0, r3
 800353a:	f003 fd72 	bl	8007022 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6818      	ldr	r0, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	7c1a      	ldrb	r2, [r3, #16]
 8003546:	f88d 2000 	strb.w	r2, [sp]
 800354a:	3304      	adds	r3, #4
 800354c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800354e:	f003 fc51 	bl	8006df4 <USB_CoreInit>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d005      	beq.n	8003564 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2202      	movs	r2, #2
 800355c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e0ce      	b.n	8003702 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2100      	movs	r1, #0
 800356a:	4618      	mov	r0, r3
 800356c:	f003 fd6a 	bl	8007044 <USB_SetCurrentMode>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d005      	beq.n	8003582 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2202      	movs	r2, #2
 800357a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e0bf      	b.n	8003702 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003582:	2300      	movs	r3, #0
 8003584:	73fb      	strb	r3, [r7, #15]
 8003586:	e04a      	b.n	800361e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003588:	7bfa      	ldrb	r2, [r7, #15]
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	4613      	mov	r3, r2
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	4413      	add	r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	440b      	add	r3, r1
 8003596:	3315      	adds	r3, #21
 8003598:	2201      	movs	r2, #1
 800359a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800359c:	7bfa      	ldrb	r2, [r7, #15]
 800359e:	6879      	ldr	r1, [r7, #4]
 80035a0:	4613      	mov	r3, r2
 80035a2:	00db      	lsls	r3, r3, #3
 80035a4:	4413      	add	r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	440b      	add	r3, r1
 80035aa:	3314      	adds	r3, #20
 80035ac:	7bfa      	ldrb	r2, [r7, #15]
 80035ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80035b0:	7bfa      	ldrb	r2, [r7, #15]
 80035b2:	7bfb      	ldrb	r3, [r7, #15]
 80035b4:	b298      	uxth	r0, r3
 80035b6:	6879      	ldr	r1, [r7, #4]
 80035b8:	4613      	mov	r3, r2
 80035ba:	00db      	lsls	r3, r3, #3
 80035bc:	4413      	add	r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	440b      	add	r3, r1
 80035c2:	332e      	adds	r3, #46	@ 0x2e
 80035c4:	4602      	mov	r2, r0
 80035c6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80035c8:	7bfa      	ldrb	r2, [r7, #15]
 80035ca:	6879      	ldr	r1, [r7, #4]
 80035cc:	4613      	mov	r3, r2
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	4413      	add	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	440b      	add	r3, r1
 80035d6:	3318      	adds	r3, #24
 80035d8:	2200      	movs	r2, #0
 80035da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80035dc:	7bfa      	ldrb	r2, [r7, #15]
 80035de:	6879      	ldr	r1, [r7, #4]
 80035e0:	4613      	mov	r3, r2
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	4413      	add	r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	440b      	add	r3, r1
 80035ea:	331c      	adds	r3, #28
 80035ec:	2200      	movs	r2, #0
 80035ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80035f0:	7bfa      	ldrb	r2, [r7, #15]
 80035f2:	6879      	ldr	r1, [r7, #4]
 80035f4:	4613      	mov	r3, r2
 80035f6:	00db      	lsls	r3, r3, #3
 80035f8:	4413      	add	r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	440b      	add	r3, r1
 80035fe:	3320      	adds	r3, #32
 8003600:	2200      	movs	r2, #0
 8003602:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003604:	7bfa      	ldrb	r2, [r7, #15]
 8003606:	6879      	ldr	r1, [r7, #4]
 8003608:	4613      	mov	r3, r2
 800360a:	00db      	lsls	r3, r3, #3
 800360c:	4413      	add	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	440b      	add	r3, r1
 8003612:	3324      	adds	r3, #36	@ 0x24
 8003614:	2200      	movs	r2, #0
 8003616:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003618:	7bfb      	ldrb	r3, [r7, #15]
 800361a:	3301      	adds	r3, #1
 800361c:	73fb      	strb	r3, [r7, #15]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	791b      	ldrb	r3, [r3, #4]
 8003622:	7bfa      	ldrb	r2, [r7, #15]
 8003624:	429a      	cmp	r2, r3
 8003626:	d3af      	bcc.n	8003588 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003628:	2300      	movs	r3, #0
 800362a:	73fb      	strb	r3, [r7, #15]
 800362c:	e044      	b.n	80036b8 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800362e:	7bfa      	ldrb	r2, [r7, #15]
 8003630:	6879      	ldr	r1, [r7, #4]
 8003632:	4613      	mov	r3, r2
 8003634:	00db      	lsls	r3, r3, #3
 8003636:	4413      	add	r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	440b      	add	r3, r1
 800363c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003640:	2200      	movs	r2, #0
 8003642:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003644:	7bfa      	ldrb	r2, [r7, #15]
 8003646:	6879      	ldr	r1, [r7, #4]
 8003648:	4613      	mov	r3, r2
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	4413      	add	r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	440b      	add	r3, r1
 8003652:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003656:	7bfa      	ldrb	r2, [r7, #15]
 8003658:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800365a:	7bfa      	ldrb	r2, [r7, #15]
 800365c:	6879      	ldr	r1, [r7, #4]
 800365e:	4613      	mov	r3, r2
 8003660:	00db      	lsls	r3, r3, #3
 8003662:	4413      	add	r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	440b      	add	r3, r1
 8003668:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800366c:	2200      	movs	r2, #0
 800366e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003670:	7bfa      	ldrb	r2, [r7, #15]
 8003672:	6879      	ldr	r1, [r7, #4]
 8003674:	4613      	mov	r3, r2
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	4413      	add	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	440b      	add	r3, r1
 800367e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003682:	2200      	movs	r2, #0
 8003684:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003686:	7bfa      	ldrb	r2, [r7, #15]
 8003688:	6879      	ldr	r1, [r7, #4]
 800368a:	4613      	mov	r3, r2
 800368c:	00db      	lsls	r3, r3, #3
 800368e:	4413      	add	r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	440b      	add	r3, r1
 8003694:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003698:	2200      	movs	r2, #0
 800369a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800369c:	7bfa      	ldrb	r2, [r7, #15]
 800369e:	6879      	ldr	r1, [r7, #4]
 80036a0:	4613      	mov	r3, r2
 80036a2:	00db      	lsls	r3, r3, #3
 80036a4:	4413      	add	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	440b      	add	r3, r1
 80036aa:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80036ae:	2200      	movs	r2, #0
 80036b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036b2:	7bfb      	ldrb	r3, [r7, #15]
 80036b4:	3301      	adds	r3, #1
 80036b6:	73fb      	strb	r3, [r7, #15]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	791b      	ldrb	r3, [r3, #4]
 80036bc:	7bfa      	ldrb	r2, [r7, #15]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d3b5      	bcc.n	800362e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6818      	ldr	r0, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	7c1a      	ldrb	r2, [r3, #16]
 80036ca:	f88d 2000 	strb.w	r2, [sp]
 80036ce:	3304      	adds	r3, #4
 80036d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036d2:	f003 fd03 	bl	80070dc <USB_DevInit>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d005      	beq.n	80036e8 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2202      	movs	r2, #2
 80036e0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e00c      	b.n	8003702 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f004 fd4d 	bl	800819a <USB_DevDisconnect>

  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800370a:	b580      	push	{r7, lr}
 800370c:	b084      	sub	sp, #16
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800371e:	2b01      	cmp	r3, #1
 8003720:	d101      	bne.n	8003726 <HAL_PCD_Start+0x1c>
 8003722:	2302      	movs	r3, #2
 8003724:	e022      	b.n	800376c <HAL_PCD_Start+0x62>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003736:	2b00      	cmp	r3, #0
 8003738:	d009      	beq.n	800374e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800373e:	2b01      	cmp	r3, #1
 8003740:	d105      	bne.n	800374e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003746:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4618      	mov	r0, r3
 8003754:	f003 fc54 	bl	8007000 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4618      	mov	r0, r3
 800375e:	f004 fcfb 	bl	8008158 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003774:	b590      	push	{r4, r7, lr}
 8003776:	b08d      	sub	sp, #52	@ 0x34
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003782:	6a3b      	ldr	r3, [r7, #32]
 8003784:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4618      	mov	r0, r3
 800378c:	f004 fdb9 	bl	8008302 <USB_GetMode>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	f040 848c 	bne.w	80040b0 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4618      	mov	r0, r3
 800379e:	f004 fd1d 	bl	80081dc <USB_ReadInterrupts>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f000 8482 	beq.w	80040ae <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	0a1b      	lsrs	r3, r3, #8
 80037b4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f004 fd0a 	bl	80081dc <USB_ReadInterrupts>
 80037c8:	4603      	mov	r3, r0
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d107      	bne.n	80037e2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	695a      	ldr	r2, [r3, #20]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f002 0202 	and.w	r2, r2, #2
 80037e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f004 fcf8 	bl	80081dc <USB_ReadInterrupts>
 80037ec:	4603      	mov	r3, r0
 80037ee:	f003 0310 	and.w	r3, r3, #16
 80037f2:	2b10      	cmp	r3, #16
 80037f4:	d161      	bne.n	80038ba <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	699a      	ldr	r2, [r3, #24]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f022 0210 	bic.w	r2, r2, #16
 8003804:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003806:	6a3b      	ldr	r3, [r7, #32]
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	f003 020f 	and.w	r2, r3, #15
 8003812:	4613      	mov	r3, r2
 8003814:	00db      	lsls	r3, r3, #3
 8003816:	4413      	add	r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	4413      	add	r3, r2
 8003822:	3304      	adds	r3, #4
 8003824:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800382c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003830:	d124      	bne.n	800387c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003832:	69ba      	ldr	r2, [r7, #24]
 8003834:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003838:	4013      	ands	r3, r2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d035      	beq.n	80038aa <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	091b      	lsrs	r3, r3, #4
 8003846:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003848:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800384c:	b29b      	uxth	r3, r3
 800384e:	461a      	mov	r2, r3
 8003850:	6a38      	ldr	r0, [r7, #32]
 8003852:	f004 fb2f 	bl	8007eb4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	68da      	ldr	r2, [r3, #12]
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	091b      	lsrs	r3, r3, #4
 800385e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003862:	441a      	add	r2, r3
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	695a      	ldr	r2, [r3, #20]
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	091b      	lsrs	r3, r3, #4
 8003870:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003874:	441a      	add	r2, r3
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	615a      	str	r2, [r3, #20]
 800387a:	e016      	b.n	80038aa <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003882:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003886:	d110      	bne.n	80038aa <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800388e:	2208      	movs	r2, #8
 8003890:	4619      	mov	r1, r3
 8003892:	6a38      	ldr	r0, [r7, #32]
 8003894:	f004 fb0e 	bl	8007eb4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	695a      	ldr	r2, [r3, #20]
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	091b      	lsrs	r3, r3, #4
 80038a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038a4:	441a      	add	r2, r3
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	699a      	ldr	r2, [r3, #24]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f042 0210 	orr.w	r2, r2, #16
 80038b8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4618      	mov	r0, r3
 80038c0:	f004 fc8c 	bl	80081dc <USB_ReadInterrupts>
 80038c4:	4603      	mov	r3, r0
 80038c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038ca:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80038ce:	f040 80a7 	bne.w	8003a20 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80038d2:	2300      	movs	r3, #0
 80038d4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4618      	mov	r0, r3
 80038dc:	f004 fc91 	bl	8008202 <USB_ReadDevAllOutEpInterrupt>
 80038e0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80038e2:	e099      	b.n	8003a18 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80038e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	f000 808e 	beq.w	8003a0c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038f6:	b2d2      	uxtb	r2, r2
 80038f8:	4611      	mov	r1, r2
 80038fa:	4618      	mov	r0, r3
 80038fc:	f004 fcb5 	bl	800826a <USB_ReadDevOutEPInterrupt>
 8003900:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	f003 0301 	and.w	r3, r3, #1
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00c      	beq.n	8003926 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800390c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800390e:	015a      	lsls	r2, r3, #5
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	4413      	add	r3, r2
 8003914:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003918:	461a      	mov	r2, r3
 800391a:	2301      	movs	r3, #1
 800391c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800391e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 fea3 	bl	800466c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	f003 0308 	and.w	r3, r3, #8
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00c      	beq.n	800394a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003932:	015a      	lsls	r2, r3, #5
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	4413      	add	r3, r2
 8003938:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800393c:	461a      	mov	r2, r3
 800393e:	2308      	movs	r3, #8
 8003940:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003942:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 ff79 	bl	800483c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	f003 0310 	and.w	r3, r3, #16
 8003950:	2b00      	cmp	r3, #0
 8003952:	d008      	beq.n	8003966 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003956:	015a      	lsls	r2, r3, #5
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	4413      	add	r3, r2
 800395c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003960:	461a      	mov	r2, r3
 8003962:	2310      	movs	r3, #16
 8003964:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d030      	beq.n	80039d2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003970:	6a3b      	ldr	r3, [r7, #32]
 8003972:	695b      	ldr	r3, [r3, #20]
 8003974:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003978:	2b80      	cmp	r3, #128	@ 0x80
 800397a:	d109      	bne.n	8003990 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	69fa      	ldr	r2, [r7, #28]
 8003986:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800398a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800398e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003990:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003992:	4613      	mov	r3, r2
 8003994:	00db      	lsls	r3, r3, #3
 8003996:	4413      	add	r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	4413      	add	r3, r2
 80039a2:	3304      	adds	r3, #4
 80039a4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	78db      	ldrb	r3, [r3, #3]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d108      	bne.n	80039c0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	2200      	movs	r2, #0
 80039b2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80039b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	4619      	mov	r1, r3
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f008 f84e 	bl	800ba5c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80039c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c2:	015a      	lsls	r2, r3, #5
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	4413      	add	r3, r2
 80039c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039cc:	461a      	mov	r2, r3
 80039ce:	2302      	movs	r3, #2
 80039d0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	f003 0320 	and.w	r3, r3, #32
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d008      	beq.n	80039ee <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80039dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039de:	015a      	lsls	r2, r3, #5
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	4413      	add	r3, r2
 80039e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039e8:	461a      	mov	r2, r3
 80039ea:	2320      	movs	r3, #32
 80039ec:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d009      	beq.n	8003a0c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80039f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039fa:	015a      	lsls	r2, r3, #5
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	4413      	add	r3, r2
 8003a00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a04:	461a      	mov	r2, r3
 8003a06:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003a0a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a0e:	3301      	adds	r3, #1
 8003a10:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a14:	085b      	lsrs	r3, r3, #1
 8003a16:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f47f af62 	bne.w	80038e4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4618      	mov	r0, r3
 8003a26:	f004 fbd9 	bl	80081dc <USB_ReadInterrupts>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a30:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a34:	f040 80db 	bne.w	8003bee <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f004 fbfa 	bl	8008236 <USB_ReadDevAllInEpInterrupt>
 8003a42:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003a44:	2300      	movs	r3, #0
 8003a46:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003a48:	e0cd      	b.n	8003be6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a4c:	f003 0301 	and.w	r3, r3, #1
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f000 80c2 	beq.w	8003bda <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a5c:	b2d2      	uxtb	r2, r2
 8003a5e:	4611      	mov	r1, r2
 8003a60:	4618      	mov	r0, r3
 8003a62:	f004 fc20 	bl	80082a6 <USB_ReadDevInEPInterrupt>
 8003a66:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d057      	beq.n	8003b22 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a74:	f003 030f 	and.w	r3, r3, #15
 8003a78:	2201      	movs	r2, #1
 8003a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	43db      	mvns	r3, r3
 8003a8c:	69f9      	ldr	r1, [r7, #28]
 8003a8e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003a92:	4013      	ands	r3, r2
 8003a94:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a98:	015a      	lsls	r2, r3, #5
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	799b      	ldrb	r3, [r3, #6]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d132      	bne.n	8003b16 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003ab0:	6879      	ldr	r1, [r7, #4]
 8003ab2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	00db      	lsls	r3, r3, #3
 8003ab8:	4413      	add	r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	440b      	add	r3, r1
 8003abe:	3320      	adds	r3, #32
 8003ac0:	6819      	ldr	r1, [r3, #0]
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	00db      	lsls	r3, r3, #3
 8003aca:	4413      	add	r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	4403      	add	r3, r0
 8003ad0:	331c      	adds	r3, #28
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4419      	add	r1, r3
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ada:	4613      	mov	r3, r2
 8003adc:	00db      	lsls	r3, r3, #3
 8003ade:	4413      	add	r3, r2
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	4403      	add	r3, r0
 8003ae4:	3320      	adds	r3, #32
 8003ae6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d113      	bne.n	8003b16 <HAL_PCD_IRQHandler+0x3a2>
 8003aee:	6879      	ldr	r1, [r7, #4]
 8003af0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003af2:	4613      	mov	r3, r2
 8003af4:	00db      	lsls	r3, r3, #3
 8003af6:	4413      	add	r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	440b      	add	r3, r1
 8003afc:	3324      	adds	r3, #36	@ 0x24
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d108      	bne.n	8003b16 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6818      	ldr	r0, [r3, #0]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003b0e:	461a      	mov	r2, r3
 8003b10:	2101      	movs	r1, #1
 8003b12:	f004 fc27 	bl	8008364 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f007 ff18 	bl	800b952 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	f003 0308 	and.w	r3, r3, #8
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d008      	beq.n	8003b3e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b2e:	015a      	lsls	r2, r3, #5
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	4413      	add	r3, r2
 8003b34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b38:	461a      	mov	r2, r3
 8003b3a:	2308      	movs	r3, #8
 8003b3c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	f003 0310 	and.w	r3, r3, #16
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d008      	beq.n	8003b5a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b4a:	015a      	lsls	r2, r3, #5
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	4413      	add	r3, r2
 8003b50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b54:	461a      	mov	r2, r3
 8003b56:	2310      	movs	r3, #16
 8003b58:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d008      	beq.n	8003b76 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b66:	015a      	lsls	r2, r3, #5
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b70:	461a      	mov	r2, r3
 8003b72:	2340      	movs	r3, #64	@ 0x40
 8003b74:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	f003 0302 	and.w	r3, r3, #2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d023      	beq.n	8003bc8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003b80:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b82:	6a38      	ldr	r0, [r7, #32]
 8003b84:	f003 fc0e 	bl	80073a4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003b88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	00db      	lsls	r3, r3, #3
 8003b8e:	4413      	add	r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	3310      	adds	r3, #16
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	4413      	add	r3, r2
 8003b98:	3304      	adds	r3, #4
 8003b9a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	78db      	ldrb	r3, [r3, #3]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d108      	bne.n	8003bb6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	4619      	mov	r1, r3
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f007 ff65 	bl	800ba80 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb8:	015a      	lsls	r2, r3, #5
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	2302      	movs	r3, #2
 8003bc6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d003      	beq.n	8003bda <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003bd2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 fcbd 	bl	8004554 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bdc:	3301      	adds	r3, #1
 8003bde:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003be2:	085b      	lsrs	r3, r3, #1
 8003be4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f47f af2e 	bne.w	8003a4a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f004 faf2 	bl	80081dc <USB_ReadInterrupts>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c02:	d122      	bne.n	8003c4a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	69fa      	ldr	r2, [r7, #28]
 8003c0e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c12:	f023 0301 	bic.w	r3, r3, #1
 8003c16:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d108      	bne.n	8003c34 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003c2a:	2100      	movs	r1, #0
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f000 fea3 	bl	8004978 <HAL_PCDEx_LPM_Callback>
 8003c32:	e002      	b.n	8003c3a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f007 ff03 	bl	800ba40 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	695a      	ldr	r2, [r3, #20]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003c48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f004 fac4 	bl	80081dc <USB_ReadInterrupts>
 8003c54:	4603      	mov	r3, r0
 8003c56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c5e:	d112      	bne.n	8003c86 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f003 0301 	and.w	r3, r3, #1
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d102      	bne.n	8003c76 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f007 febf 	bl	800b9f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	695a      	ldr	r2, [r3, #20]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003c84:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f004 faa6 	bl	80081dc <USB_ReadInterrupts>
 8003c90:	4603      	mov	r3, r0
 8003c92:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c9a:	f040 80b7 	bne.w	8003e0c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	69fa      	ldr	r2, [r7, #28]
 8003ca8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003cac:	f023 0301 	bic.w	r3, r3, #1
 8003cb0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2110      	movs	r1, #16
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f003 fb73 	bl	80073a4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cc2:	e046      	b.n	8003d52 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cc6:	015a      	lsls	r2, r3, #5
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	4413      	add	r3, r2
 8003ccc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003cd6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cda:	015a      	lsls	r2, r3, #5
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	4413      	add	r3, r2
 8003ce0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ce8:	0151      	lsls	r1, r2, #5
 8003cea:	69fa      	ldr	r2, [r7, #28]
 8003cec:	440a      	add	r2, r1
 8003cee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003cf2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003cf6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cfa:	015a      	lsls	r2, r3, #5
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	4413      	add	r3, r2
 8003d00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d04:	461a      	mov	r2, r3
 8003d06:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003d0a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d0e:	015a      	lsls	r2, r3, #5
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	4413      	add	r3, r2
 8003d14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d1c:	0151      	lsls	r1, r2, #5
 8003d1e:	69fa      	ldr	r2, [r7, #28]
 8003d20:	440a      	add	r2, r1
 8003d22:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d26:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003d2a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003d2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d2e:	015a      	lsls	r2, r3, #5
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	4413      	add	r3, r2
 8003d34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d3c:	0151      	lsls	r1, r2, #5
 8003d3e:	69fa      	ldr	r2, [r7, #28]
 8003d40:	440a      	add	r2, r1
 8003d42:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d46:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003d4a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d4e:	3301      	adds	r3, #1
 8003d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	791b      	ldrb	r3, [r3, #4]
 8003d56:	461a      	mov	r2, r3
 8003d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d3b2      	bcc.n	8003cc4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d64:	69db      	ldr	r3, [r3, #28]
 8003d66:	69fa      	ldr	r2, [r7, #28]
 8003d68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d6c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003d70:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	7bdb      	ldrb	r3, [r3, #15]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d016      	beq.n	8003da8 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d84:	69fa      	ldr	r2, [r7, #28]
 8003d86:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d8a:	f043 030b 	orr.w	r3, r3, #11
 8003d8e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d9a:	69fa      	ldr	r2, [r7, #28]
 8003d9c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003da0:	f043 030b 	orr.w	r3, r3, #11
 8003da4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003da6:	e015      	b.n	8003dd4 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003dae:	695b      	ldr	r3, [r3, #20]
 8003db0:	69fa      	ldr	r2, [r7, #28]
 8003db2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003db6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003dba:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003dbe:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	69fa      	ldr	r2, [r7, #28]
 8003dca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003dce:	f043 030b 	orr.w	r3, r3, #11
 8003dd2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	69fa      	ldr	r2, [r7, #28]
 8003dde:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003de2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003de6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6818      	ldr	r0, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003df6:	461a      	mov	r2, r3
 8003df8:	f004 fab4 	bl	8008364 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	695a      	ldr	r2, [r3, #20]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003e0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4618      	mov	r0, r3
 8003e12:	f004 f9e3 	bl	80081dc <USB_ReadInterrupts>
 8003e16:	4603      	mov	r3, r0
 8003e18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e20:	d123      	bne.n	8003e6a <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4618      	mov	r0, r3
 8003e28:	f004 fa79 	bl	800831e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4618      	mov	r0, r3
 8003e32:	f003 fb30 	bl	8007496 <USB_GetDevSpeed>
 8003e36:	4603      	mov	r3, r0
 8003e38:	461a      	mov	r2, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681c      	ldr	r4, [r3, #0]
 8003e42:	f001 fa09 	bl	8005258 <HAL_RCC_GetHCLKFreq>
 8003e46:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	4620      	mov	r0, r4
 8003e50:	f003 f834 	bl	8006ebc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f007 fda4 	bl	800b9a2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	695a      	ldr	r2, [r3, #20]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003e68:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f004 f9b4 	bl	80081dc <USB_ReadInterrupts>
 8003e74:	4603      	mov	r3, r0
 8003e76:	f003 0308 	and.w	r3, r3, #8
 8003e7a:	2b08      	cmp	r3, #8
 8003e7c:	d10a      	bne.n	8003e94 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f007 fd81 	bl	800b986 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	695a      	ldr	r2, [r3, #20]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f002 0208 	and.w	r2, r2, #8
 8003e92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f004 f99f 	bl	80081dc <USB_ReadInterrupts>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ea4:	2b80      	cmp	r3, #128	@ 0x80
 8003ea6:	d123      	bne.n	8003ef0 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003ea8:	6a3b      	ldr	r3, [r7, #32]
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003eb0:	6a3b      	ldr	r3, [r7, #32]
 8003eb2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003eb8:	e014      	b.n	8003ee4 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003eba:	6879      	ldr	r1, [r7, #4]
 8003ebc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	00db      	lsls	r3, r3, #3
 8003ec2:	4413      	add	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	440b      	add	r3, r1
 8003ec8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d105      	bne.n	8003ede <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f000 fb0a 	bl	80044f2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	791b      	ldrb	r3, [r3, #4]
 8003ee8:	461a      	mov	r2, r3
 8003eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d3e4      	bcc.n	8003eba <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f004 f971 	bl	80081dc <USB_ReadInterrupts>
 8003efa:	4603      	mov	r3, r0
 8003efc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f00:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f04:	d13c      	bne.n	8003f80 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f06:	2301      	movs	r3, #1
 8003f08:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f0a:	e02b      	b.n	8003f64 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f0e:	015a      	lsls	r2, r3, #5
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	4413      	add	r3, r2
 8003f14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f1c:	6879      	ldr	r1, [r7, #4]
 8003f1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f20:	4613      	mov	r3, r2
 8003f22:	00db      	lsls	r3, r3, #3
 8003f24:	4413      	add	r3, r2
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	440b      	add	r3, r1
 8003f2a:	3318      	adds	r3, #24
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d115      	bne.n	8003f5e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003f32:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	da12      	bge.n	8003f5e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003f38:	6879      	ldr	r1, [r7, #4]
 8003f3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	00db      	lsls	r3, r3, #3
 8003f40:	4413      	add	r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	440b      	add	r3, r1
 8003f46:	3317      	adds	r3, #23
 8003f48:	2201      	movs	r2, #1
 8003f4a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	4619      	mov	r1, r3
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 faca 	bl	80044f2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f60:	3301      	adds	r3, #1
 8003f62:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	791b      	ldrb	r3, [r3, #4]
 8003f68:	461a      	mov	r2, r3
 8003f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d3cd      	bcc.n	8003f0c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	695a      	ldr	r2, [r3, #20]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003f7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4618      	mov	r0, r3
 8003f86:	f004 f929 	bl	80081dc <USB_ReadInterrupts>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f90:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f94:	d156      	bne.n	8004044 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f96:	2301      	movs	r3, #1
 8003f98:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f9a:	e045      	b.n	8004028 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f9e:	015a      	lsls	r2, r3, #5
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003fac:	6879      	ldr	r1, [r7, #4]
 8003fae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	00db      	lsls	r3, r3, #3
 8003fb4:	4413      	add	r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	440b      	add	r3, r1
 8003fba:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d12e      	bne.n	8004022 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003fc4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	da2b      	bge.n	8004022 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	0c1a      	lsrs	r2, r3, #16
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003fd4:	4053      	eors	r3, r2
 8003fd6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d121      	bne.n	8004022 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003fde:	6879      	ldr	r1, [r7, #4]
 8003fe0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	00db      	lsls	r3, r3, #3
 8003fe6:	4413      	add	r3, r2
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	440b      	add	r3, r1
 8003fec:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003ff4:	6a3b      	ldr	r3, [r7, #32]
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003ffc:	6a3b      	ldr	r3, [r7, #32]
 8003ffe:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004000:	6a3b      	ldr	r3, [r7, #32]
 8004002:	695b      	ldr	r3, [r3, #20]
 8004004:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004008:	2b00      	cmp	r3, #0
 800400a:	d10a      	bne.n	8004022 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	69fa      	ldr	r2, [r7, #28]
 8004016:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800401a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800401e:	6053      	str	r3, [r2, #4]
            break;
 8004020:	e008      	b.n	8004034 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004024:	3301      	adds	r3, #1
 8004026:	627b      	str	r3, [r7, #36]	@ 0x24
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	791b      	ldrb	r3, [r3, #4]
 800402c:	461a      	mov	r2, r3
 800402e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004030:	4293      	cmp	r3, r2
 8004032:	d3b3      	bcc.n	8003f9c <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	695a      	ldr	r2, [r3, #20]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004042:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4618      	mov	r0, r3
 800404a:	f004 f8c7 	bl	80081dc <USB_ReadInterrupts>
 800404e:	4603      	mov	r3, r0
 8004050:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004054:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004058:	d10a      	bne.n	8004070 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f007 fd22 	bl	800baa4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	695a      	ldr	r2, [r3, #20]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800406e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4618      	mov	r0, r3
 8004076:	f004 f8b1 	bl	80081dc <USB_ReadInterrupts>
 800407a:	4603      	mov	r3, r0
 800407c:	f003 0304 	and.w	r3, r3, #4
 8004080:	2b04      	cmp	r3, #4
 8004082:	d115      	bne.n	80040b0 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	f003 0304 	and.w	r3, r3, #4
 8004092:	2b00      	cmp	r3, #0
 8004094:	d002      	beq.n	800409c <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f007 fd12 	bl	800bac0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	6859      	ldr	r1, [r3, #4]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	69ba      	ldr	r2, [r7, #24]
 80040a8:	430a      	orrs	r2, r1
 80040aa:	605a      	str	r2, [r3, #4]
 80040ac:	e000      	b.n	80040b0 <HAL_PCD_IRQHandler+0x93c>
      return;
 80040ae:	bf00      	nop
    }
  }
}
 80040b0:	3734      	adds	r7, #52	@ 0x34
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd90      	pop	{r4, r7, pc}

080040b6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80040b6:	b580      	push	{r7, lr}
 80040b8:	b082      	sub	sp, #8
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
 80040be:	460b      	mov	r3, r1
 80040c0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d101      	bne.n	80040d0 <HAL_PCD_SetAddress+0x1a>
 80040cc:	2302      	movs	r3, #2
 80040ce:	e012      	b.n	80040f6 <HAL_PCD_SetAddress+0x40>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	78fa      	ldrb	r2, [r7, #3]
 80040dc:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	78fa      	ldrb	r2, [r7, #3]
 80040e4:	4611      	mov	r1, r2
 80040e6:	4618      	mov	r0, r3
 80040e8:	f004 f810 	bl	800810c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3708      	adds	r7, #8
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}

080040fe <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80040fe:	b580      	push	{r7, lr}
 8004100:	b084      	sub	sp, #16
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
 8004106:	4608      	mov	r0, r1
 8004108:	4611      	mov	r1, r2
 800410a:	461a      	mov	r2, r3
 800410c:	4603      	mov	r3, r0
 800410e:	70fb      	strb	r3, [r7, #3]
 8004110:	460b      	mov	r3, r1
 8004112:	803b      	strh	r3, [r7, #0]
 8004114:	4613      	mov	r3, r2
 8004116:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004118:	2300      	movs	r3, #0
 800411a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800411c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004120:	2b00      	cmp	r3, #0
 8004122:	da0f      	bge.n	8004144 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004124:	78fb      	ldrb	r3, [r7, #3]
 8004126:	f003 020f 	and.w	r2, r3, #15
 800412a:	4613      	mov	r3, r2
 800412c:	00db      	lsls	r3, r3, #3
 800412e:	4413      	add	r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	3310      	adds	r3, #16
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	4413      	add	r3, r2
 8004138:	3304      	adds	r3, #4
 800413a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2201      	movs	r2, #1
 8004140:	705a      	strb	r2, [r3, #1]
 8004142:	e00f      	b.n	8004164 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004144:	78fb      	ldrb	r3, [r7, #3]
 8004146:	f003 020f 	and.w	r2, r3, #15
 800414a:	4613      	mov	r3, r2
 800414c:	00db      	lsls	r3, r3, #3
 800414e:	4413      	add	r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	4413      	add	r3, r2
 800415a:	3304      	adds	r3, #4
 800415c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004164:	78fb      	ldrb	r3, [r7, #3]
 8004166:	f003 030f 	and.w	r3, r3, #15
 800416a:	b2da      	uxtb	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004170:	883b      	ldrh	r3, [r7, #0]
 8004172:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	78ba      	ldrb	r2, [r7, #2]
 800417e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	785b      	ldrb	r3, [r3, #1]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d004      	beq.n	8004192 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	461a      	mov	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004192:	78bb      	ldrb	r3, [r7, #2]
 8004194:	2b02      	cmp	r3, #2
 8004196:	d102      	bne.n	800419e <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d101      	bne.n	80041ac <HAL_PCD_EP_Open+0xae>
 80041a8:	2302      	movs	r3, #2
 80041aa:	e00e      	b.n	80041ca <HAL_PCD_EP_Open+0xcc>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68f9      	ldr	r1, [r7, #12]
 80041ba:	4618      	mov	r0, r3
 80041bc:	f003 f990 	bl	80074e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80041c8:	7afb      	ldrb	r3, [r7, #11]
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b084      	sub	sp, #16
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
 80041da:	460b      	mov	r3, r1
 80041dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80041de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	da0f      	bge.n	8004206 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041e6:	78fb      	ldrb	r3, [r7, #3]
 80041e8:	f003 020f 	and.w	r2, r3, #15
 80041ec:	4613      	mov	r3, r2
 80041ee:	00db      	lsls	r3, r3, #3
 80041f0:	4413      	add	r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	3310      	adds	r3, #16
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	4413      	add	r3, r2
 80041fa:	3304      	adds	r3, #4
 80041fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2201      	movs	r2, #1
 8004202:	705a      	strb	r2, [r3, #1]
 8004204:	e00f      	b.n	8004226 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004206:	78fb      	ldrb	r3, [r7, #3]
 8004208:	f003 020f 	and.w	r2, r3, #15
 800420c:	4613      	mov	r3, r2
 800420e:	00db      	lsls	r3, r3, #3
 8004210:	4413      	add	r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	4413      	add	r3, r2
 800421c:	3304      	adds	r3, #4
 800421e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2200      	movs	r2, #0
 8004224:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004226:	78fb      	ldrb	r3, [r7, #3]
 8004228:	f003 030f 	and.w	r3, r3, #15
 800422c:	b2da      	uxtb	r2, r3
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004238:	2b01      	cmp	r3, #1
 800423a:	d101      	bne.n	8004240 <HAL_PCD_EP_Close+0x6e>
 800423c:	2302      	movs	r3, #2
 800423e:	e00e      	b.n	800425e <HAL_PCD_EP_Close+0x8c>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68f9      	ldr	r1, [r7, #12]
 800424e:	4618      	mov	r0, r3
 8004250:	f003 f9ce 	bl	80075f0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3710      	adds	r7, #16
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}

08004266 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004266:	b580      	push	{r7, lr}
 8004268:	b086      	sub	sp, #24
 800426a:	af00      	add	r7, sp, #0
 800426c:	60f8      	str	r0, [r7, #12]
 800426e:	607a      	str	r2, [r7, #4]
 8004270:	603b      	str	r3, [r7, #0]
 8004272:	460b      	mov	r3, r1
 8004274:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004276:	7afb      	ldrb	r3, [r7, #11]
 8004278:	f003 020f 	and.w	r2, r3, #15
 800427c:	4613      	mov	r3, r2
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	4413      	add	r3, r2
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	4413      	add	r3, r2
 800428c:	3304      	adds	r3, #4
 800428e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	683a      	ldr	r2, [r7, #0]
 800429a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	2200      	movs	r2, #0
 80042a0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	2200      	movs	r2, #0
 80042a6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042a8:	7afb      	ldrb	r3, [r7, #11]
 80042aa:	f003 030f 	and.w	r3, r3, #15
 80042ae:	b2da      	uxtb	r2, r3
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	799b      	ldrb	r3, [r3, #6]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d102      	bne.n	80042c2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6818      	ldr	r0, [r3, #0]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	799b      	ldrb	r3, [r3, #6]
 80042ca:	461a      	mov	r2, r3
 80042cc:	6979      	ldr	r1, [r7, #20]
 80042ce:	f003 fa6b 	bl	80077a8 <USB_EPStartXfer>

  return HAL_OK;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3718      	adds	r7, #24
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	460b      	mov	r3, r1
 80042e6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80042e8:	78fb      	ldrb	r3, [r7, #3]
 80042ea:	f003 020f 	and.w	r2, r3, #15
 80042ee:	6879      	ldr	r1, [r7, #4]
 80042f0:	4613      	mov	r3, r2
 80042f2:	00db      	lsls	r3, r3, #3
 80042f4:	4413      	add	r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	440b      	add	r3, r1
 80042fa:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80042fe:	681b      	ldr	r3, [r3, #0]
}
 8004300:	4618      	mov	r0, r3
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	607a      	str	r2, [r7, #4]
 8004316:	603b      	str	r3, [r7, #0]
 8004318:	460b      	mov	r3, r1
 800431a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800431c:	7afb      	ldrb	r3, [r7, #11]
 800431e:	f003 020f 	and.w	r2, r3, #15
 8004322:	4613      	mov	r3, r2
 8004324:	00db      	lsls	r3, r3, #3
 8004326:	4413      	add	r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	3310      	adds	r3, #16
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	4413      	add	r3, r2
 8004330:	3304      	adds	r3, #4
 8004332:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	683a      	ldr	r2, [r7, #0]
 800433e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	2200      	movs	r2, #0
 8004344:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	2201      	movs	r2, #1
 800434a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800434c:	7afb      	ldrb	r3, [r7, #11]
 800434e:	f003 030f 	and.w	r3, r3, #15
 8004352:	b2da      	uxtb	r2, r3
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	799b      	ldrb	r3, [r3, #6]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d102      	bne.n	8004366 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6818      	ldr	r0, [r3, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	799b      	ldrb	r3, [r3, #6]
 800436e:	461a      	mov	r2, r3
 8004370:	6979      	ldr	r1, [r7, #20]
 8004372:	f003 fa19 	bl	80077a8 <USB_EPStartXfer>

  return HAL_OK;
 8004376:	2300      	movs	r3, #0
}
 8004378:	4618      	mov	r0, r3
 800437a:	3718      	adds	r7, #24
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	460b      	mov	r3, r1
 800438a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800438c:	78fb      	ldrb	r3, [r7, #3]
 800438e:	f003 030f 	and.w	r3, r3, #15
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	7912      	ldrb	r2, [r2, #4]
 8004396:	4293      	cmp	r3, r2
 8004398:	d901      	bls.n	800439e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e04f      	b.n	800443e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800439e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	da0f      	bge.n	80043c6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043a6:	78fb      	ldrb	r3, [r7, #3]
 80043a8:	f003 020f 	and.w	r2, r3, #15
 80043ac:	4613      	mov	r3, r2
 80043ae:	00db      	lsls	r3, r3, #3
 80043b0:	4413      	add	r3, r2
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	3310      	adds	r3, #16
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	4413      	add	r3, r2
 80043ba:	3304      	adds	r3, #4
 80043bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2201      	movs	r2, #1
 80043c2:	705a      	strb	r2, [r3, #1]
 80043c4:	e00d      	b.n	80043e2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80043c6:	78fa      	ldrb	r2, [r7, #3]
 80043c8:	4613      	mov	r3, r2
 80043ca:	00db      	lsls	r3, r3, #3
 80043cc:	4413      	add	r3, r2
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	4413      	add	r3, r2
 80043d8:	3304      	adds	r3, #4
 80043da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2200      	movs	r2, #0
 80043e0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2201      	movs	r2, #1
 80043e6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043e8:	78fb      	ldrb	r3, [r7, #3]
 80043ea:	f003 030f 	and.w	r3, r3, #15
 80043ee:	b2da      	uxtb	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d101      	bne.n	8004402 <HAL_PCD_EP_SetStall+0x82>
 80043fe:	2302      	movs	r3, #2
 8004400:	e01d      	b.n	800443e <HAL_PCD_EP_SetStall+0xbe>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68f9      	ldr	r1, [r7, #12]
 8004410:	4618      	mov	r0, r3
 8004412:	f003 fda7 	bl	8007f64 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004416:	78fb      	ldrb	r3, [r7, #3]
 8004418:	f003 030f 	and.w	r3, r3, #15
 800441c:	2b00      	cmp	r3, #0
 800441e:	d109      	bne.n	8004434 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6818      	ldr	r0, [r3, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	7999      	ldrb	r1, [r3, #6]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800442e:	461a      	mov	r2, r3
 8004430:	f003 ff98 	bl	8008364 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b084      	sub	sp, #16
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
 800444e:	460b      	mov	r3, r1
 8004450:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004452:	78fb      	ldrb	r3, [r7, #3]
 8004454:	f003 030f 	and.w	r3, r3, #15
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	7912      	ldrb	r2, [r2, #4]
 800445c:	4293      	cmp	r3, r2
 800445e:	d901      	bls.n	8004464 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e042      	b.n	80044ea <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004464:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004468:	2b00      	cmp	r3, #0
 800446a:	da0f      	bge.n	800448c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800446c:	78fb      	ldrb	r3, [r7, #3]
 800446e:	f003 020f 	and.w	r2, r3, #15
 8004472:	4613      	mov	r3, r2
 8004474:	00db      	lsls	r3, r3, #3
 8004476:	4413      	add	r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	3310      	adds	r3, #16
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	4413      	add	r3, r2
 8004480:	3304      	adds	r3, #4
 8004482:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2201      	movs	r2, #1
 8004488:	705a      	strb	r2, [r3, #1]
 800448a:	e00f      	b.n	80044ac <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800448c:	78fb      	ldrb	r3, [r7, #3]
 800448e:	f003 020f 	and.w	r2, r3, #15
 8004492:	4613      	mov	r3, r2
 8004494:	00db      	lsls	r3, r3, #3
 8004496:	4413      	add	r3, r2
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	4413      	add	r3, r2
 80044a2:	3304      	adds	r3, #4
 80044a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2200      	movs	r2, #0
 80044aa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044b2:	78fb      	ldrb	r3, [r7, #3]
 80044b4:	f003 030f 	and.w	r3, r3, #15
 80044b8:	b2da      	uxtb	r2, r3
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d101      	bne.n	80044cc <HAL_PCD_EP_ClrStall+0x86>
 80044c8:	2302      	movs	r3, #2
 80044ca:	e00e      	b.n	80044ea <HAL_PCD_EP_ClrStall+0xa4>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68f9      	ldr	r1, [r7, #12]
 80044da:	4618      	mov	r0, r3
 80044dc:	f003 fdb0 	bl	8008040 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3710      	adds	r7, #16
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b084      	sub	sp, #16
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
 80044fa:	460b      	mov	r3, r1
 80044fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80044fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004502:	2b00      	cmp	r3, #0
 8004504:	da0c      	bge.n	8004520 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004506:	78fb      	ldrb	r3, [r7, #3]
 8004508:	f003 020f 	and.w	r2, r3, #15
 800450c:	4613      	mov	r3, r2
 800450e:	00db      	lsls	r3, r3, #3
 8004510:	4413      	add	r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	3310      	adds	r3, #16
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	4413      	add	r3, r2
 800451a:	3304      	adds	r3, #4
 800451c:	60fb      	str	r3, [r7, #12]
 800451e:	e00c      	b.n	800453a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004520:	78fb      	ldrb	r3, [r7, #3]
 8004522:	f003 020f 	and.w	r2, r3, #15
 8004526:	4613      	mov	r3, r2
 8004528:	00db      	lsls	r3, r3, #3
 800452a:	4413      	add	r3, r2
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	4413      	add	r3, r2
 8004536:	3304      	adds	r3, #4
 8004538:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68f9      	ldr	r1, [r7, #12]
 8004540:	4618      	mov	r0, r3
 8004542:	f003 fbcf 	bl	8007ce4 <USB_EPStopXfer>
 8004546:	4603      	mov	r3, r0
 8004548:	72fb      	strb	r3, [r7, #11]

  return ret;
 800454a:	7afb      	ldrb	r3, [r7, #11]
}
 800454c:	4618      	mov	r0, r3
 800454e:	3710      	adds	r7, #16
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b08a      	sub	sp, #40	@ 0x28
 8004558:	af02      	add	r7, sp, #8
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004568:	683a      	ldr	r2, [r7, #0]
 800456a:	4613      	mov	r3, r2
 800456c:	00db      	lsls	r3, r3, #3
 800456e:	4413      	add	r3, r2
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	3310      	adds	r3, #16
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	4413      	add	r3, r2
 8004578:	3304      	adds	r3, #4
 800457a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	695a      	ldr	r2, [r3, #20]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	429a      	cmp	r2, r3
 8004586:	d901      	bls.n	800458c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e06b      	b.n	8004664 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	691a      	ldr	r2, [r3, #16]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	695b      	ldr	r3, [r3, #20]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	69fa      	ldr	r2, [r7, #28]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d902      	bls.n	80045a8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	3303      	adds	r3, #3
 80045ac:	089b      	lsrs	r3, r3, #2
 80045ae:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80045b0:	e02a      	b.n	8004608 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	691a      	ldr	r2, [r3, #16]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	69fa      	ldr	r2, [r7, #28]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d902      	bls.n	80045ce <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	3303      	adds	r3, #3
 80045d2:	089b      	lsrs	r3, r3, #2
 80045d4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	68d9      	ldr	r1, [r3, #12]
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	b2da      	uxtb	r2, r3
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80045e6:	9300      	str	r3, [sp, #0]
 80045e8:	4603      	mov	r3, r0
 80045ea:	6978      	ldr	r0, [r7, #20]
 80045ec:	f003 fc24 	bl	8007e38 <USB_WritePacket>

    ep->xfer_buff  += len;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	68da      	ldr	r2, [r3, #12]
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	441a      	add	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	695a      	ldr	r2, [r3, #20]
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	441a      	add	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	015a      	lsls	r2, r3, #5
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	4413      	add	r3, r2
 8004610:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004618:	69ba      	ldr	r2, [r7, #24]
 800461a:	429a      	cmp	r2, r3
 800461c:	d809      	bhi.n	8004632 <PCD_WriteEmptyTxFifo+0xde>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	695a      	ldr	r2, [r3, #20]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004626:	429a      	cmp	r2, r3
 8004628:	d203      	bcs.n	8004632 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1bf      	bne.n	80045b2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	691a      	ldr	r2, [r3, #16]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	429a      	cmp	r2, r3
 800463c:	d811      	bhi.n	8004662 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	f003 030f 	and.w	r3, r3, #15
 8004644:	2201      	movs	r2, #1
 8004646:	fa02 f303 	lsl.w	r3, r2, r3
 800464a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004652:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	43db      	mvns	r3, r3
 8004658:	6939      	ldr	r1, [r7, #16]
 800465a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800465e:	4013      	ands	r3, r2
 8004660:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004662:	2300      	movs	r3, #0
}
 8004664:	4618      	mov	r0, r3
 8004666:	3720      	adds	r7, #32
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b088      	sub	sp, #32
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	333c      	adds	r3, #60	@ 0x3c
 8004684:	3304      	adds	r3, #4
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	015a      	lsls	r2, r3, #5
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	4413      	add	r3, r2
 8004692:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	799b      	ldrb	r3, [r3, #6]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d17b      	bne.n	800479a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	f003 0308 	and.w	r3, r3, #8
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d015      	beq.n	80046d8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	4a61      	ldr	r2, [pc, #388]	@ (8004834 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	f240 80b9 	bls.w	8004828 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f000 80b3 	beq.w	8004828 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	015a      	lsls	r2, r3, #5
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	4413      	add	r3, r2
 80046ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046ce:	461a      	mov	r2, r3
 80046d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046d4:	6093      	str	r3, [r2, #8]
 80046d6:	e0a7      	b.n	8004828 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	f003 0320 	and.w	r3, r3, #32
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d009      	beq.n	80046f6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	015a      	lsls	r2, r3, #5
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	4413      	add	r3, r2
 80046ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046ee:	461a      	mov	r2, r3
 80046f0:	2320      	movs	r3, #32
 80046f2:	6093      	str	r3, [r2, #8]
 80046f4:	e098      	b.n	8004828 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f040 8093 	bne.w	8004828 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	4a4b      	ldr	r2, [pc, #300]	@ (8004834 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d90f      	bls.n	800472a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00a      	beq.n	800472a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	015a      	lsls	r2, r3, #5
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	4413      	add	r3, r2
 800471c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004720:	461a      	mov	r2, r3
 8004722:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004726:	6093      	str	r3, [r2, #8]
 8004728:	e07e      	b.n	8004828 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800472a:	683a      	ldr	r2, [r7, #0]
 800472c:	4613      	mov	r3, r2
 800472e:	00db      	lsls	r3, r3, #3
 8004730:	4413      	add	r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	4413      	add	r3, r2
 800473c:	3304      	adds	r3, #4
 800473e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6a1a      	ldr	r2, [r3, #32]
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	0159      	lsls	r1, r3, #5
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	440b      	add	r3, r1
 800474c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004756:	1ad2      	subs	r2, r2, r3
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d114      	bne.n	800478c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d109      	bne.n	800477e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6818      	ldr	r0, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004774:	461a      	mov	r2, r3
 8004776:	2101      	movs	r1, #1
 8004778:	f003 fdf4 	bl	8008364 <USB_EP0_OutStart>
 800477c:	e006      	b.n	800478c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	68da      	ldr	r2, [r3, #12]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	441a      	add	r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	b2db      	uxtb	r3, r3
 8004790:	4619      	mov	r1, r3
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f007 f8c2 	bl	800b91c <HAL_PCD_DataOutStageCallback>
 8004798:	e046      	b.n	8004828 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	4a26      	ldr	r2, [pc, #152]	@ (8004838 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d124      	bne.n	80047ec <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00a      	beq.n	80047c2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	015a      	lsls	r2, r3, #5
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	4413      	add	r3, r2
 80047b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047b8:	461a      	mov	r2, r3
 80047ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047be:	6093      	str	r3, [r2, #8]
 80047c0:	e032      	b.n	8004828 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	f003 0320 	and.w	r3, r3, #32
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d008      	beq.n	80047de <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	015a      	lsls	r2, r3, #5
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	4413      	add	r3, r2
 80047d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047d8:	461a      	mov	r2, r3
 80047da:	2320      	movs	r3, #32
 80047dc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	4619      	mov	r1, r3
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f007 f899 	bl	800b91c <HAL_PCD_DataOutStageCallback>
 80047ea:	e01d      	b.n	8004828 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d114      	bne.n	800481c <PCD_EP_OutXfrComplete_int+0x1b0>
 80047f2:	6879      	ldr	r1, [r7, #4]
 80047f4:	683a      	ldr	r2, [r7, #0]
 80047f6:	4613      	mov	r3, r2
 80047f8:	00db      	lsls	r3, r3, #3
 80047fa:	4413      	add	r3, r2
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	440b      	add	r3, r1
 8004800:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d108      	bne.n	800481c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6818      	ldr	r0, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004814:	461a      	mov	r2, r3
 8004816:	2100      	movs	r1, #0
 8004818:	f003 fda4 	bl	8008364 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	b2db      	uxtb	r3, r3
 8004820:	4619      	mov	r1, r3
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f007 f87a 	bl	800b91c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3720      	adds	r7, #32
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	4f54300a 	.word	0x4f54300a
 8004838:	4f54310a 	.word	0x4f54310a

0800483c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b086      	sub	sp, #24
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	333c      	adds	r3, #60	@ 0x3c
 8004854:	3304      	adds	r3, #4
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	015a      	lsls	r2, r3, #5
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	4413      	add	r3, r2
 8004862:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	4a15      	ldr	r2, [pc, #84]	@ (80048c4 <PCD_EP_OutSetupPacket_int+0x88>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d90e      	bls.n	8004890 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004878:	2b00      	cmp	r3, #0
 800487a:	d009      	beq.n	8004890 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	015a      	lsls	r2, r3, #5
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	4413      	add	r3, r2
 8004884:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004888:	461a      	mov	r2, r3
 800488a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800488e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f007 f831 	bl	800b8f8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	4a0a      	ldr	r2, [pc, #40]	@ (80048c4 <PCD_EP_OutSetupPacket_int+0x88>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d90c      	bls.n	80048b8 <PCD_EP_OutSetupPacket_int+0x7c>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	799b      	ldrb	r3, [r3, #6]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d108      	bne.n	80048b8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6818      	ldr	r0, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80048b0:	461a      	mov	r2, r3
 80048b2:	2101      	movs	r1, #1
 80048b4:	f003 fd56 	bl	8008364 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3718      	adds	r7, #24
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	4f54300a 	.word	0x4f54300a

080048c8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	460b      	mov	r3, r1
 80048d2:	70fb      	strb	r3, [r7, #3]
 80048d4:	4613      	mov	r3, r2
 80048d6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048de:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80048e0:	78fb      	ldrb	r3, [r7, #3]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d107      	bne.n	80048f6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80048e6:	883b      	ldrh	r3, [r7, #0]
 80048e8:	0419      	lsls	r1, r3, #16
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68ba      	ldr	r2, [r7, #8]
 80048f0:	430a      	orrs	r2, r1
 80048f2:	629a      	str	r2, [r3, #40]	@ 0x28
 80048f4:	e028      	b.n	8004948 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048fc:	0c1b      	lsrs	r3, r3, #16
 80048fe:	68ba      	ldr	r2, [r7, #8]
 8004900:	4413      	add	r3, r2
 8004902:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004904:	2300      	movs	r3, #0
 8004906:	73fb      	strb	r3, [r7, #15]
 8004908:	e00d      	b.n	8004926 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	7bfb      	ldrb	r3, [r7, #15]
 8004910:	3340      	adds	r3, #64	@ 0x40
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	4413      	add	r3, r2
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	0c1b      	lsrs	r3, r3, #16
 800491a:	68ba      	ldr	r2, [r7, #8]
 800491c:	4413      	add	r3, r2
 800491e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004920:	7bfb      	ldrb	r3, [r7, #15]
 8004922:	3301      	adds	r3, #1
 8004924:	73fb      	strb	r3, [r7, #15]
 8004926:	7bfa      	ldrb	r2, [r7, #15]
 8004928:	78fb      	ldrb	r3, [r7, #3]
 800492a:	3b01      	subs	r3, #1
 800492c:	429a      	cmp	r2, r3
 800492e:	d3ec      	bcc.n	800490a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004930:	883b      	ldrh	r3, [r7, #0]
 8004932:	0418      	lsls	r0, r3, #16
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6819      	ldr	r1, [r3, #0]
 8004938:	78fb      	ldrb	r3, [r7, #3]
 800493a:	3b01      	subs	r3, #1
 800493c:	68ba      	ldr	r2, [r7, #8]
 800493e:	4302      	orrs	r2, r0
 8004940:	3340      	adds	r3, #64	@ 0x40
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	440b      	add	r3, r1
 8004946:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	3714      	adds	r7, #20
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr

08004956 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004956:	b480      	push	{r7}
 8004958:	b083      	sub	sp, #12
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
 800495e:	460b      	mov	r3, r1
 8004960:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	887a      	ldrh	r2, [r7, #2]
 8004968:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	460b      	mov	r3, r1
 8004982:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004984:	bf00      	nop
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b086      	sub	sp, #24
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d101      	bne.n	80049a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e267      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d075      	beq.n	8004a9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80049ae:	4b88      	ldr	r3, [pc, #544]	@ (8004bd0 <HAL_RCC_OscConfig+0x240>)
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f003 030c 	and.w	r3, r3, #12
 80049b6:	2b04      	cmp	r3, #4
 80049b8:	d00c      	beq.n	80049d4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049ba:	4b85      	ldr	r3, [pc, #532]	@ (8004bd0 <HAL_RCC_OscConfig+0x240>)
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80049c2:	2b08      	cmp	r3, #8
 80049c4:	d112      	bne.n	80049ec <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049c6:	4b82      	ldr	r3, [pc, #520]	@ (8004bd0 <HAL_RCC_OscConfig+0x240>)
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049d2:	d10b      	bne.n	80049ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049d4:	4b7e      	ldr	r3, [pc, #504]	@ (8004bd0 <HAL_RCC_OscConfig+0x240>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d05b      	beq.n	8004a98 <HAL_RCC_OscConfig+0x108>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d157      	bne.n	8004a98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e242      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049f4:	d106      	bne.n	8004a04 <HAL_RCC_OscConfig+0x74>
 80049f6:	4b76      	ldr	r3, [pc, #472]	@ (8004bd0 <HAL_RCC_OscConfig+0x240>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a75      	ldr	r2, [pc, #468]	@ (8004bd0 <HAL_RCC_OscConfig+0x240>)
 80049fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a00:	6013      	str	r3, [r2, #0]
 8004a02:	e01d      	b.n	8004a40 <HAL_RCC_OscConfig+0xb0>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a0c:	d10c      	bne.n	8004a28 <HAL_RCC_OscConfig+0x98>
 8004a0e:	4b70      	ldr	r3, [pc, #448]	@ (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a6f      	ldr	r2, [pc, #444]	@ (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004a14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a18:	6013      	str	r3, [r2, #0]
 8004a1a:	4b6d      	ldr	r3, [pc, #436]	@ (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a6c      	ldr	r2, [pc, #432]	@ (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004a20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a24:	6013      	str	r3, [r2, #0]
 8004a26:	e00b      	b.n	8004a40 <HAL_RCC_OscConfig+0xb0>
 8004a28:	4b69      	ldr	r3, [pc, #420]	@ (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a68      	ldr	r2, [pc, #416]	@ (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004a2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a32:	6013      	str	r3, [r2, #0]
 8004a34:	4b66      	ldr	r3, [pc, #408]	@ (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a65      	ldr	r2, [pc, #404]	@ (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004a3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d013      	beq.n	8004a70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a48:	f7fc fd8c 	bl	8001564 <HAL_GetTick>
 8004a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a4e:	e008      	b.n	8004a62 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a50:	f7fc fd88 	bl	8001564 <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	2b64      	cmp	r3, #100	@ 0x64
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e207      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a62:	4b5b      	ldr	r3, [pc, #364]	@ (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d0f0      	beq.n	8004a50 <HAL_RCC_OscConfig+0xc0>
 8004a6e:	e014      	b.n	8004a9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a70:	f7fc fd78 	bl	8001564 <HAL_GetTick>
 8004a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a76:	e008      	b.n	8004a8a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a78:	f7fc fd74 	bl	8001564 <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	2b64      	cmp	r3, #100	@ 0x64
 8004a84:	d901      	bls.n	8004a8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e1f3      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a8a:	4b51      	ldr	r3, [pc, #324]	@ (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1f0      	bne.n	8004a78 <HAL_RCC_OscConfig+0xe8>
 8004a96:	e000      	b.n	8004a9a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0302 	and.w	r3, r3, #2
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d063      	beq.n	8004b6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004aa6:	4b4a      	ldr	r3, [pc, #296]	@ (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f003 030c 	and.w	r3, r3, #12
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00b      	beq.n	8004aca <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ab2:	4b47      	ldr	r3, [pc, #284]	@ (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004aba:	2b08      	cmp	r3, #8
 8004abc:	d11c      	bne.n	8004af8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004abe:	4b44      	ldr	r3, [pc, #272]	@ (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d116      	bne.n	8004af8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aca:	4b41      	ldr	r3, [pc, #260]	@ (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0302 	and.w	r3, r3, #2
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d005      	beq.n	8004ae2 <HAL_RCC_OscConfig+0x152>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d001      	beq.n	8004ae2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e1c7      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ae2:	4b3b      	ldr	r3, [pc, #236]	@ (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	00db      	lsls	r3, r3, #3
 8004af0:	4937      	ldr	r1, [pc, #220]	@ (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004af6:	e03a      	b.n	8004b6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d020      	beq.n	8004b42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b00:	4b34      	ldr	r3, [pc, #208]	@ (8004bd4 <HAL_RCC_OscConfig+0x244>)
 8004b02:	2201      	movs	r2, #1
 8004b04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b06:	f7fc fd2d 	bl	8001564 <HAL_GetTick>
 8004b0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b0c:	e008      	b.n	8004b20 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b0e:	f7fc fd29 	bl	8001564 <HAL_GetTick>
 8004b12:	4602      	mov	r2, r0
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d901      	bls.n	8004b20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	e1a8      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b20:	4b2b      	ldr	r3, [pc, #172]	@ (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0302 	and.w	r3, r3, #2
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d0f0      	beq.n	8004b0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b2c:	4b28      	ldr	r3, [pc, #160]	@ (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	00db      	lsls	r3, r3, #3
 8004b3a:	4925      	ldr	r1, [pc, #148]	@ (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	600b      	str	r3, [r1, #0]
 8004b40:	e015      	b.n	8004b6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b42:	4b24      	ldr	r3, [pc, #144]	@ (8004bd4 <HAL_RCC_OscConfig+0x244>)
 8004b44:	2200      	movs	r2, #0
 8004b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b48:	f7fc fd0c 	bl	8001564 <HAL_GetTick>
 8004b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b4e:	e008      	b.n	8004b62 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b50:	f7fc fd08 	bl	8001564 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e187      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b62:	4b1b      	ldr	r3, [pc, #108]	@ (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0302 	and.w	r3, r3, #2
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d1f0      	bne.n	8004b50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0308 	and.w	r3, r3, #8
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d036      	beq.n	8004be8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d016      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b82:	4b15      	ldr	r3, [pc, #84]	@ (8004bd8 <HAL_RCC_OscConfig+0x248>)
 8004b84:	2201      	movs	r2, #1
 8004b86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b88:	f7fc fcec 	bl	8001564 <HAL_GetTick>
 8004b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b8e:	e008      	b.n	8004ba2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b90:	f7fc fce8 	bl	8001564 <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d901      	bls.n	8004ba2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e167      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ba2:	4b0b      	ldr	r3, [pc, #44]	@ (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004ba4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ba6:	f003 0302 	and.w	r3, r3, #2
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d0f0      	beq.n	8004b90 <HAL_RCC_OscConfig+0x200>
 8004bae:	e01b      	b.n	8004be8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bb0:	4b09      	ldr	r3, [pc, #36]	@ (8004bd8 <HAL_RCC_OscConfig+0x248>)
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bb6:	f7fc fcd5 	bl	8001564 <HAL_GetTick>
 8004bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bbc:	e00e      	b.n	8004bdc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bbe:	f7fc fcd1 	bl	8001564 <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d907      	bls.n	8004bdc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e150      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
 8004bd0:	40023800 	.word	0x40023800
 8004bd4:	42470000 	.word	0x42470000
 8004bd8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bdc:	4b88      	ldr	r3, [pc, #544]	@ (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004bde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004be0:	f003 0302 	and.w	r3, r3, #2
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1ea      	bne.n	8004bbe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0304 	and.w	r3, r3, #4
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	f000 8097 	beq.w	8004d24 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bfa:	4b81      	ldr	r3, [pc, #516]	@ (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10f      	bne.n	8004c26 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c06:	2300      	movs	r3, #0
 8004c08:	60bb      	str	r3, [r7, #8]
 8004c0a:	4b7d      	ldr	r3, [pc, #500]	@ (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c0e:	4a7c      	ldr	r2, [pc, #496]	@ (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004c10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c14:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c16:	4b7a      	ldr	r3, [pc, #488]	@ (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c1e:	60bb      	str	r3, [r7, #8]
 8004c20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c22:	2301      	movs	r3, #1
 8004c24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c26:	4b77      	ldr	r3, [pc, #476]	@ (8004e04 <HAL_RCC_OscConfig+0x474>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d118      	bne.n	8004c64 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c32:	4b74      	ldr	r3, [pc, #464]	@ (8004e04 <HAL_RCC_OscConfig+0x474>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a73      	ldr	r2, [pc, #460]	@ (8004e04 <HAL_RCC_OscConfig+0x474>)
 8004c38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c3e:	f7fc fc91 	bl	8001564 <HAL_GetTick>
 8004c42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c44:	e008      	b.n	8004c58 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c46:	f7fc fc8d 	bl	8001564 <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d901      	bls.n	8004c58 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e10c      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c58:	4b6a      	ldr	r3, [pc, #424]	@ (8004e04 <HAL_RCC_OscConfig+0x474>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d0f0      	beq.n	8004c46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d106      	bne.n	8004c7a <HAL_RCC_OscConfig+0x2ea>
 8004c6c:	4b64      	ldr	r3, [pc, #400]	@ (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004c6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c70:	4a63      	ldr	r2, [pc, #396]	@ (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004c72:	f043 0301 	orr.w	r3, r3, #1
 8004c76:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c78:	e01c      	b.n	8004cb4 <HAL_RCC_OscConfig+0x324>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	2b05      	cmp	r3, #5
 8004c80:	d10c      	bne.n	8004c9c <HAL_RCC_OscConfig+0x30c>
 8004c82:	4b5f      	ldr	r3, [pc, #380]	@ (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004c84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c86:	4a5e      	ldr	r2, [pc, #376]	@ (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004c88:	f043 0304 	orr.w	r3, r3, #4
 8004c8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c8e:	4b5c      	ldr	r3, [pc, #368]	@ (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004c90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c92:	4a5b      	ldr	r2, [pc, #364]	@ (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004c94:	f043 0301 	orr.w	r3, r3, #1
 8004c98:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c9a:	e00b      	b.n	8004cb4 <HAL_RCC_OscConfig+0x324>
 8004c9c:	4b58      	ldr	r3, [pc, #352]	@ (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004c9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ca0:	4a57      	ldr	r2, [pc, #348]	@ (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004ca2:	f023 0301 	bic.w	r3, r3, #1
 8004ca6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ca8:	4b55      	ldr	r3, [pc, #340]	@ (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004caa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cac:	4a54      	ldr	r2, [pc, #336]	@ (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004cae:	f023 0304 	bic.w	r3, r3, #4
 8004cb2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d015      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cbc:	f7fc fc52 	bl	8001564 <HAL_GetTick>
 8004cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cc2:	e00a      	b.n	8004cda <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cc4:	f7fc fc4e 	bl	8001564 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d901      	bls.n	8004cda <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e0cb      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cda:	4b49      	ldr	r3, [pc, #292]	@ (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004cdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d0ee      	beq.n	8004cc4 <HAL_RCC_OscConfig+0x334>
 8004ce6:	e014      	b.n	8004d12 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ce8:	f7fc fc3c 	bl	8001564 <HAL_GetTick>
 8004cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cee:	e00a      	b.n	8004d06 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cf0:	f7fc fc38 	bl	8001564 <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d901      	bls.n	8004d06 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e0b5      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d06:	4b3e      	ldr	r3, [pc, #248]	@ (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004d08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d0a:	f003 0302 	and.w	r3, r3, #2
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1ee      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d12:	7dfb      	ldrb	r3, [r7, #23]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d105      	bne.n	8004d24 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d18:	4b39      	ldr	r3, [pc, #228]	@ (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d1c:	4a38      	ldr	r2, [pc, #224]	@ (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004d1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d22:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f000 80a1 	beq.w	8004e70 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d2e:	4b34      	ldr	r3, [pc, #208]	@ (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f003 030c 	and.w	r3, r3, #12
 8004d36:	2b08      	cmp	r3, #8
 8004d38:	d05c      	beq.n	8004df4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	699b      	ldr	r3, [r3, #24]
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d141      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d42:	4b31      	ldr	r3, [pc, #196]	@ (8004e08 <HAL_RCC_OscConfig+0x478>)
 8004d44:	2200      	movs	r2, #0
 8004d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d48:	f7fc fc0c 	bl	8001564 <HAL_GetTick>
 8004d4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d4e:	e008      	b.n	8004d62 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d50:	f7fc fc08 	bl	8001564 <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d901      	bls.n	8004d62 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e087      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d62:	4b27      	ldr	r3, [pc, #156]	@ (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1f0      	bne.n	8004d50 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	69da      	ldr	r2, [r3, #28]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a1b      	ldr	r3, [r3, #32]
 8004d76:	431a      	orrs	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d7c:	019b      	lsls	r3, r3, #6
 8004d7e:	431a      	orrs	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d84:	085b      	lsrs	r3, r3, #1
 8004d86:	3b01      	subs	r3, #1
 8004d88:	041b      	lsls	r3, r3, #16
 8004d8a:	431a      	orrs	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d90:	061b      	lsls	r3, r3, #24
 8004d92:	491b      	ldr	r1, [pc, #108]	@ (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d98:	4b1b      	ldr	r3, [pc, #108]	@ (8004e08 <HAL_RCC_OscConfig+0x478>)
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d9e:	f7fc fbe1 	bl	8001564 <HAL_GetTick>
 8004da2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004da4:	e008      	b.n	8004db8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004da6:	f7fc fbdd 	bl	8001564 <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d901      	bls.n	8004db8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	e05c      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004db8:	4b11      	ldr	r3, [pc, #68]	@ (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d0f0      	beq.n	8004da6 <HAL_RCC_OscConfig+0x416>
 8004dc4:	e054      	b.n	8004e70 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dc6:	4b10      	ldr	r3, [pc, #64]	@ (8004e08 <HAL_RCC_OscConfig+0x478>)
 8004dc8:	2200      	movs	r2, #0
 8004dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dcc:	f7fc fbca 	bl	8001564 <HAL_GetTick>
 8004dd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dd2:	e008      	b.n	8004de6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dd4:	f7fc fbc6 	bl	8001564 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d901      	bls.n	8004de6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e045      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004de6:	4b06      	ldr	r3, [pc, #24]	@ (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d1f0      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x444>
 8004df2:	e03d      	b.n	8004e70 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d107      	bne.n	8004e0c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e038      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
 8004e00:	40023800 	.word	0x40023800
 8004e04:	40007000 	.word	0x40007000
 8004e08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e0c:	4b1b      	ldr	r3, [pc, #108]	@ (8004e7c <HAL_RCC_OscConfig+0x4ec>)
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d028      	beq.n	8004e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d121      	bne.n	8004e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d11a      	bne.n	8004e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e36:	68fa      	ldr	r2, [r7, #12]
 8004e38:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004e42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d111      	bne.n	8004e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e52:	085b      	lsrs	r3, r3, #1
 8004e54:	3b01      	subs	r3, #1
 8004e56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d107      	bne.n	8004e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d001      	beq.n	8004e70 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e000      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3718      	adds	r7, #24
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	40023800 	.word	0x40023800

08004e80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d101      	bne.n	8004e94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e0cc      	b.n	800502e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e94:	4b68      	ldr	r3, [pc, #416]	@ (8005038 <HAL_RCC_ClockConfig+0x1b8>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0307 	and.w	r3, r3, #7
 8004e9c:	683a      	ldr	r2, [r7, #0]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d90c      	bls.n	8004ebc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ea2:	4b65      	ldr	r3, [pc, #404]	@ (8005038 <HAL_RCC_ClockConfig+0x1b8>)
 8004ea4:	683a      	ldr	r2, [r7, #0]
 8004ea6:	b2d2      	uxtb	r2, r2
 8004ea8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eaa:	4b63      	ldr	r3, [pc, #396]	@ (8005038 <HAL_RCC_ClockConfig+0x1b8>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0307 	and.w	r3, r3, #7
 8004eb2:	683a      	ldr	r2, [r7, #0]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d001      	beq.n	8004ebc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e0b8      	b.n	800502e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0302 	and.w	r3, r3, #2
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d020      	beq.n	8004f0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0304 	and.w	r3, r3, #4
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d005      	beq.n	8004ee0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ed4:	4b59      	ldr	r3, [pc, #356]	@ (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	4a58      	ldr	r2, [pc, #352]	@ (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004eda:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004ede:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0308 	and.w	r3, r3, #8
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d005      	beq.n	8004ef8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004eec:	4b53      	ldr	r3, [pc, #332]	@ (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	4a52      	ldr	r2, [pc, #328]	@ (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004ef2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004ef6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ef8:	4b50      	ldr	r3, [pc, #320]	@ (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	494d      	ldr	r1, [pc, #308]	@ (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d044      	beq.n	8004fa0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d107      	bne.n	8004f2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f1e:	4b47      	ldr	r3, [pc, #284]	@ (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d119      	bne.n	8004f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e07f      	b.n	800502e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d003      	beq.n	8004f3e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f3a:	2b03      	cmp	r3, #3
 8004f3c:	d107      	bne.n	8004f4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f3e:	4b3f      	ldr	r3, [pc, #252]	@ (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d109      	bne.n	8004f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e06f      	b.n	800502e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f4e:	4b3b      	ldr	r3, [pc, #236]	@ (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0302 	and.w	r3, r3, #2
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d101      	bne.n	8004f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e067      	b.n	800502e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f5e:	4b37      	ldr	r3, [pc, #220]	@ (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f023 0203 	bic.w	r2, r3, #3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	4934      	ldr	r1, [pc, #208]	@ (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f70:	f7fc faf8 	bl	8001564 <HAL_GetTick>
 8004f74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f76:	e00a      	b.n	8004f8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f78:	f7fc faf4 	bl	8001564 <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d901      	bls.n	8004f8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e04f      	b.n	800502e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f8e:	4b2b      	ldr	r3, [pc, #172]	@ (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f003 020c 	and.w	r2, r3, #12
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d1eb      	bne.n	8004f78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fa0:	4b25      	ldr	r3, [pc, #148]	@ (8005038 <HAL_RCC_ClockConfig+0x1b8>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0307 	and.w	r3, r3, #7
 8004fa8:	683a      	ldr	r2, [r7, #0]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d20c      	bcs.n	8004fc8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fae:	4b22      	ldr	r3, [pc, #136]	@ (8005038 <HAL_RCC_ClockConfig+0x1b8>)
 8004fb0:	683a      	ldr	r2, [r7, #0]
 8004fb2:	b2d2      	uxtb	r2, r2
 8004fb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fb6:	4b20      	ldr	r3, [pc, #128]	@ (8005038 <HAL_RCC_ClockConfig+0x1b8>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0307 	and.w	r3, r3, #7
 8004fbe:	683a      	ldr	r2, [r7, #0]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d001      	beq.n	8004fc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e032      	b.n	800502e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0304 	and.w	r3, r3, #4
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d008      	beq.n	8004fe6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fd4:	4b19      	ldr	r3, [pc, #100]	@ (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	4916      	ldr	r1, [pc, #88]	@ (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0308 	and.w	r3, r3, #8
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d009      	beq.n	8005006 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ff2:	4b12      	ldr	r3, [pc, #72]	@ (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	00db      	lsls	r3, r3, #3
 8005000:	490e      	ldr	r1, [pc, #56]	@ (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8005002:	4313      	orrs	r3, r2
 8005004:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005006:	f000 f821 	bl	800504c <HAL_RCC_GetSysClockFreq>
 800500a:	4602      	mov	r2, r0
 800500c:	4b0b      	ldr	r3, [pc, #44]	@ (800503c <HAL_RCC_ClockConfig+0x1bc>)
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	091b      	lsrs	r3, r3, #4
 8005012:	f003 030f 	and.w	r3, r3, #15
 8005016:	490a      	ldr	r1, [pc, #40]	@ (8005040 <HAL_RCC_ClockConfig+0x1c0>)
 8005018:	5ccb      	ldrb	r3, [r1, r3]
 800501a:	fa22 f303 	lsr.w	r3, r2, r3
 800501e:	4a09      	ldr	r2, [pc, #36]	@ (8005044 <HAL_RCC_ClockConfig+0x1c4>)
 8005020:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005022:	4b09      	ldr	r3, [pc, #36]	@ (8005048 <HAL_RCC_ClockConfig+0x1c8>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4618      	mov	r0, r3
 8005028:	f7fc fa58 	bl	80014dc <HAL_InitTick>

  return HAL_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3710      	adds	r7, #16
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	40023c00 	.word	0x40023c00
 800503c:	40023800 	.word	0x40023800
 8005040:	0800c848 	.word	0x0800c848
 8005044:	2000000c 	.word	0x2000000c
 8005048:	20000010 	.word	0x20000010

0800504c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800504c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005050:	b094      	sub	sp, #80	@ 0x50
 8005052:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005054:	2300      	movs	r3, #0
 8005056:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005058:	2300      	movs	r3, #0
 800505a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800505c:	2300      	movs	r3, #0
 800505e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005060:	2300      	movs	r3, #0
 8005062:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005064:	4b79      	ldr	r3, [pc, #484]	@ (800524c <HAL_RCC_GetSysClockFreq+0x200>)
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f003 030c 	and.w	r3, r3, #12
 800506c:	2b08      	cmp	r3, #8
 800506e:	d00d      	beq.n	800508c <HAL_RCC_GetSysClockFreq+0x40>
 8005070:	2b08      	cmp	r3, #8
 8005072:	f200 80e1 	bhi.w	8005238 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005076:	2b00      	cmp	r3, #0
 8005078:	d002      	beq.n	8005080 <HAL_RCC_GetSysClockFreq+0x34>
 800507a:	2b04      	cmp	r3, #4
 800507c:	d003      	beq.n	8005086 <HAL_RCC_GetSysClockFreq+0x3a>
 800507e:	e0db      	b.n	8005238 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005080:	4b73      	ldr	r3, [pc, #460]	@ (8005250 <HAL_RCC_GetSysClockFreq+0x204>)
 8005082:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005084:	e0db      	b.n	800523e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005086:	4b73      	ldr	r3, [pc, #460]	@ (8005254 <HAL_RCC_GetSysClockFreq+0x208>)
 8005088:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800508a:	e0d8      	b.n	800523e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800508c:	4b6f      	ldr	r3, [pc, #444]	@ (800524c <HAL_RCC_GetSysClockFreq+0x200>)
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005094:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005096:	4b6d      	ldr	r3, [pc, #436]	@ (800524c <HAL_RCC_GetSysClockFreq+0x200>)
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d063      	beq.n	800516a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050a2:	4b6a      	ldr	r3, [pc, #424]	@ (800524c <HAL_RCC_GetSysClockFreq+0x200>)
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	099b      	lsrs	r3, r3, #6
 80050a8:	2200      	movs	r2, #0
 80050aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80050ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80050ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80050b6:	2300      	movs	r3, #0
 80050b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80050ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80050be:	4622      	mov	r2, r4
 80050c0:	462b      	mov	r3, r5
 80050c2:	f04f 0000 	mov.w	r0, #0
 80050c6:	f04f 0100 	mov.w	r1, #0
 80050ca:	0159      	lsls	r1, r3, #5
 80050cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050d0:	0150      	lsls	r0, r2, #5
 80050d2:	4602      	mov	r2, r0
 80050d4:	460b      	mov	r3, r1
 80050d6:	4621      	mov	r1, r4
 80050d8:	1a51      	subs	r1, r2, r1
 80050da:	6139      	str	r1, [r7, #16]
 80050dc:	4629      	mov	r1, r5
 80050de:	eb63 0301 	sbc.w	r3, r3, r1
 80050e2:	617b      	str	r3, [r7, #20]
 80050e4:	f04f 0200 	mov.w	r2, #0
 80050e8:	f04f 0300 	mov.w	r3, #0
 80050ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050f0:	4659      	mov	r1, fp
 80050f2:	018b      	lsls	r3, r1, #6
 80050f4:	4651      	mov	r1, sl
 80050f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80050fa:	4651      	mov	r1, sl
 80050fc:	018a      	lsls	r2, r1, #6
 80050fe:	4651      	mov	r1, sl
 8005100:	ebb2 0801 	subs.w	r8, r2, r1
 8005104:	4659      	mov	r1, fp
 8005106:	eb63 0901 	sbc.w	r9, r3, r1
 800510a:	f04f 0200 	mov.w	r2, #0
 800510e:	f04f 0300 	mov.w	r3, #0
 8005112:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005116:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800511a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800511e:	4690      	mov	r8, r2
 8005120:	4699      	mov	r9, r3
 8005122:	4623      	mov	r3, r4
 8005124:	eb18 0303 	adds.w	r3, r8, r3
 8005128:	60bb      	str	r3, [r7, #8]
 800512a:	462b      	mov	r3, r5
 800512c:	eb49 0303 	adc.w	r3, r9, r3
 8005130:	60fb      	str	r3, [r7, #12]
 8005132:	f04f 0200 	mov.w	r2, #0
 8005136:	f04f 0300 	mov.w	r3, #0
 800513a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800513e:	4629      	mov	r1, r5
 8005140:	024b      	lsls	r3, r1, #9
 8005142:	4621      	mov	r1, r4
 8005144:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005148:	4621      	mov	r1, r4
 800514a:	024a      	lsls	r2, r1, #9
 800514c:	4610      	mov	r0, r2
 800514e:	4619      	mov	r1, r3
 8005150:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005152:	2200      	movs	r2, #0
 8005154:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005156:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005158:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800515c:	f7fb f888 	bl	8000270 <__aeabi_uldivmod>
 8005160:	4602      	mov	r2, r0
 8005162:	460b      	mov	r3, r1
 8005164:	4613      	mov	r3, r2
 8005166:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005168:	e058      	b.n	800521c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800516a:	4b38      	ldr	r3, [pc, #224]	@ (800524c <HAL_RCC_GetSysClockFreq+0x200>)
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	099b      	lsrs	r3, r3, #6
 8005170:	2200      	movs	r2, #0
 8005172:	4618      	mov	r0, r3
 8005174:	4611      	mov	r1, r2
 8005176:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800517a:	623b      	str	r3, [r7, #32]
 800517c:	2300      	movs	r3, #0
 800517e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005180:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005184:	4642      	mov	r2, r8
 8005186:	464b      	mov	r3, r9
 8005188:	f04f 0000 	mov.w	r0, #0
 800518c:	f04f 0100 	mov.w	r1, #0
 8005190:	0159      	lsls	r1, r3, #5
 8005192:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005196:	0150      	lsls	r0, r2, #5
 8005198:	4602      	mov	r2, r0
 800519a:	460b      	mov	r3, r1
 800519c:	4641      	mov	r1, r8
 800519e:	ebb2 0a01 	subs.w	sl, r2, r1
 80051a2:	4649      	mov	r1, r9
 80051a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80051a8:	f04f 0200 	mov.w	r2, #0
 80051ac:	f04f 0300 	mov.w	r3, #0
 80051b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80051b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80051b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80051bc:	ebb2 040a 	subs.w	r4, r2, sl
 80051c0:	eb63 050b 	sbc.w	r5, r3, fp
 80051c4:	f04f 0200 	mov.w	r2, #0
 80051c8:	f04f 0300 	mov.w	r3, #0
 80051cc:	00eb      	lsls	r3, r5, #3
 80051ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051d2:	00e2      	lsls	r2, r4, #3
 80051d4:	4614      	mov	r4, r2
 80051d6:	461d      	mov	r5, r3
 80051d8:	4643      	mov	r3, r8
 80051da:	18e3      	adds	r3, r4, r3
 80051dc:	603b      	str	r3, [r7, #0]
 80051de:	464b      	mov	r3, r9
 80051e0:	eb45 0303 	adc.w	r3, r5, r3
 80051e4:	607b      	str	r3, [r7, #4]
 80051e6:	f04f 0200 	mov.w	r2, #0
 80051ea:	f04f 0300 	mov.w	r3, #0
 80051ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80051f2:	4629      	mov	r1, r5
 80051f4:	028b      	lsls	r3, r1, #10
 80051f6:	4621      	mov	r1, r4
 80051f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80051fc:	4621      	mov	r1, r4
 80051fe:	028a      	lsls	r2, r1, #10
 8005200:	4610      	mov	r0, r2
 8005202:	4619      	mov	r1, r3
 8005204:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005206:	2200      	movs	r2, #0
 8005208:	61bb      	str	r3, [r7, #24]
 800520a:	61fa      	str	r2, [r7, #28]
 800520c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005210:	f7fb f82e 	bl	8000270 <__aeabi_uldivmod>
 8005214:	4602      	mov	r2, r0
 8005216:	460b      	mov	r3, r1
 8005218:	4613      	mov	r3, r2
 800521a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800521c:	4b0b      	ldr	r3, [pc, #44]	@ (800524c <HAL_RCC_GetSysClockFreq+0x200>)
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	0c1b      	lsrs	r3, r3, #16
 8005222:	f003 0303 	and.w	r3, r3, #3
 8005226:	3301      	adds	r3, #1
 8005228:	005b      	lsls	r3, r3, #1
 800522a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800522c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800522e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005230:	fbb2 f3f3 	udiv	r3, r2, r3
 8005234:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005236:	e002      	b.n	800523e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005238:	4b05      	ldr	r3, [pc, #20]	@ (8005250 <HAL_RCC_GetSysClockFreq+0x204>)
 800523a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800523c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800523e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005240:	4618      	mov	r0, r3
 8005242:	3750      	adds	r7, #80	@ 0x50
 8005244:	46bd      	mov	sp, r7
 8005246:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800524a:	bf00      	nop
 800524c:	40023800 	.word	0x40023800
 8005250:	00f42400 	.word	0x00f42400
 8005254:	007a1200 	.word	0x007a1200

08005258 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005258:	b480      	push	{r7}
 800525a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800525c:	4b03      	ldr	r3, [pc, #12]	@ (800526c <HAL_RCC_GetHCLKFreq+0x14>)
 800525e:	681b      	ldr	r3, [r3, #0]
}
 8005260:	4618      	mov	r0, r3
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	2000000c 	.word	0x2000000c

08005270 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005274:	f7ff fff0 	bl	8005258 <HAL_RCC_GetHCLKFreq>
 8005278:	4602      	mov	r2, r0
 800527a:	4b05      	ldr	r3, [pc, #20]	@ (8005290 <HAL_RCC_GetPCLK1Freq+0x20>)
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	0a9b      	lsrs	r3, r3, #10
 8005280:	f003 0307 	and.w	r3, r3, #7
 8005284:	4903      	ldr	r1, [pc, #12]	@ (8005294 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005286:	5ccb      	ldrb	r3, [r1, r3]
 8005288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800528c:	4618      	mov	r0, r3
 800528e:	bd80      	pop	{r7, pc}
 8005290:	40023800 	.word	0x40023800
 8005294:	0800c858 	.word	0x0800c858

08005298 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800529c:	f7ff ffdc 	bl	8005258 <HAL_RCC_GetHCLKFreq>
 80052a0:	4602      	mov	r2, r0
 80052a2:	4b05      	ldr	r3, [pc, #20]	@ (80052b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	0b5b      	lsrs	r3, r3, #13
 80052a8:	f003 0307 	and.w	r3, r3, #7
 80052ac:	4903      	ldr	r1, [pc, #12]	@ (80052bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80052ae:	5ccb      	ldrb	r3, [r1, r3]
 80052b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	40023800 	.word	0x40023800
 80052bc:	0800c858 	.word	0x0800c858

080052c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e041      	b.n	8005356 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d106      	bne.n	80052ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f7fb fe7e 	bl	8000fe8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2202      	movs	r2, #2
 80052f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	3304      	adds	r3, #4
 80052fc:	4619      	mov	r1, r3
 80052fe:	4610      	mov	r0, r2
 8005300:	f000 fb14 	bl	800592c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3708      	adds	r7, #8
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
	...

08005360 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005360:	b480      	push	{r7}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800536e:	b2db      	uxtb	r3, r3
 8005370:	2b01      	cmp	r3, #1
 8005372:	d001      	beq.n	8005378 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e046      	b.n	8005406 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2202      	movs	r2, #2
 800537c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a23      	ldr	r2, [pc, #140]	@ (8005414 <HAL_TIM_Base_Start+0xb4>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d022      	beq.n	80053d0 <HAL_TIM_Base_Start+0x70>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005392:	d01d      	beq.n	80053d0 <HAL_TIM_Base_Start+0x70>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a1f      	ldr	r2, [pc, #124]	@ (8005418 <HAL_TIM_Base_Start+0xb8>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d018      	beq.n	80053d0 <HAL_TIM_Base_Start+0x70>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a1e      	ldr	r2, [pc, #120]	@ (800541c <HAL_TIM_Base_Start+0xbc>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d013      	beq.n	80053d0 <HAL_TIM_Base_Start+0x70>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a1c      	ldr	r2, [pc, #112]	@ (8005420 <HAL_TIM_Base_Start+0xc0>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d00e      	beq.n	80053d0 <HAL_TIM_Base_Start+0x70>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a1b      	ldr	r2, [pc, #108]	@ (8005424 <HAL_TIM_Base_Start+0xc4>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d009      	beq.n	80053d0 <HAL_TIM_Base_Start+0x70>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a19      	ldr	r2, [pc, #100]	@ (8005428 <HAL_TIM_Base_Start+0xc8>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d004      	beq.n	80053d0 <HAL_TIM_Base_Start+0x70>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a18      	ldr	r2, [pc, #96]	@ (800542c <HAL_TIM_Base_Start+0xcc>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d111      	bne.n	80053f4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f003 0307 	and.w	r3, r3, #7
 80053da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2b06      	cmp	r3, #6
 80053e0:	d010      	beq.n	8005404 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f042 0201 	orr.w	r2, r2, #1
 80053f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053f2:	e007      	b.n	8005404 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f042 0201 	orr.w	r2, r2, #1
 8005402:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3714      	adds	r7, #20
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	40010000 	.word	0x40010000
 8005418:	40000400 	.word	0x40000400
 800541c:	40000800 	.word	0x40000800
 8005420:	40000c00 	.word	0x40000c00
 8005424:	40010400 	.word	0x40010400
 8005428:	40014000 	.word	0x40014000
 800542c:	40001800 	.word	0x40001800

08005430 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800543e:	b2db      	uxtb	r3, r3
 8005440:	2b01      	cmp	r3, #1
 8005442:	d001      	beq.n	8005448 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e04e      	b.n	80054e6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2202      	movs	r2, #2
 800544c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68da      	ldr	r2, [r3, #12]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f042 0201 	orr.w	r2, r2, #1
 800545e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a23      	ldr	r2, [pc, #140]	@ (80054f4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d022      	beq.n	80054b0 <HAL_TIM_Base_Start_IT+0x80>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005472:	d01d      	beq.n	80054b0 <HAL_TIM_Base_Start_IT+0x80>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a1f      	ldr	r2, [pc, #124]	@ (80054f8 <HAL_TIM_Base_Start_IT+0xc8>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d018      	beq.n	80054b0 <HAL_TIM_Base_Start_IT+0x80>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a1e      	ldr	r2, [pc, #120]	@ (80054fc <HAL_TIM_Base_Start_IT+0xcc>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d013      	beq.n	80054b0 <HAL_TIM_Base_Start_IT+0x80>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a1c      	ldr	r2, [pc, #112]	@ (8005500 <HAL_TIM_Base_Start_IT+0xd0>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d00e      	beq.n	80054b0 <HAL_TIM_Base_Start_IT+0x80>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a1b      	ldr	r2, [pc, #108]	@ (8005504 <HAL_TIM_Base_Start_IT+0xd4>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d009      	beq.n	80054b0 <HAL_TIM_Base_Start_IT+0x80>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a19      	ldr	r2, [pc, #100]	@ (8005508 <HAL_TIM_Base_Start_IT+0xd8>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d004      	beq.n	80054b0 <HAL_TIM_Base_Start_IT+0x80>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a18      	ldr	r2, [pc, #96]	@ (800550c <HAL_TIM_Base_Start_IT+0xdc>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d111      	bne.n	80054d4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	f003 0307 	and.w	r3, r3, #7
 80054ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2b06      	cmp	r3, #6
 80054c0:	d010      	beq.n	80054e4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f042 0201 	orr.w	r2, r2, #1
 80054d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054d2:	e007      	b.n	80054e4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f042 0201 	orr.w	r2, r2, #1
 80054e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3714      	adds	r7, #20
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	40010000 	.word	0x40010000
 80054f8:	40000400 	.word	0x40000400
 80054fc:	40000800 	.word	0x40000800
 8005500:	40000c00 	.word	0x40000c00
 8005504:	40010400 	.word	0x40010400
 8005508:	40014000 	.word	0x40014000
 800550c:	40001800 	.word	0x40001800

08005510 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68da      	ldr	r2, [r3, #12]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f022 0201 	bic.w	r2, r2, #1
 8005526:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	6a1a      	ldr	r2, [r3, #32]
 800552e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005532:	4013      	ands	r3, r2
 8005534:	2b00      	cmp	r3, #0
 8005536:	d10f      	bne.n	8005558 <HAL_TIM_Base_Stop_IT+0x48>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	6a1a      	ldr	r2, [r3, #32]
 800553e:	f240 4344 	movw	r3, #1092	@ 0x444
 8005542:	4013      	ands	r3, r2
 8005544:	2b00      	cmp	r3, #0
 8005546:	d107      	bne.n	8005558 <HAL_TIM_Base_Stop_IT+0x48>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f022 0201 	bic.w	r2, r2, #1
 8005556:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	370c      	adds	r7, #12
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr

0800556e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800556e:	b580      	push	{r7, lr}
 8005570:	b084      	sub	sp, #16
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	f003 0302 	and.w	r3, r3, #2
 800558c:	2b00      	cmp	r3, #0
 800558e:	d020      	beq.n	80055d2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f003 0302 	and.w	r3, r3, #2
 8005596:	2b00      	cmp	r3, #0
 8005598:	d01b      	beq.n	80055d2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f06f 0202 	mvn.w	r2, #2
 80055a2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	f003 0303 	and.w	r3, r3, #3
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d003      	beq.n	80055c0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 f999 	bl	80058f0 <HAL_TIM_IC_CaptureCallback>
 80055be:	e005      	b.n	80055cc <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f000 f98b 	bl	80058dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 f99c 	bl	8005904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	f003 0304 	and.w	r3, r3, #4
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d020      	beq.n	800561e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f003 0304 	and.w	r3, r3, #4
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d01b      	beq.n	800561e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f06f 0204 	mvn.w	r2, #4
 80055ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2202      	movs	r2, #2
 80055f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	699b      	ldr	r3, [r3, #24]
 80055fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005600:	2b00      	cmp	r3, #0
 8005602:	d003      	beq.n	800560c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f000 f973 	bl	80058f0 <HAL_TIM_IC_CaptureCallback>
 800560a:	e005      	b.n	8005618 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f000 f965 	bl	80058dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 f976 	bl	8005904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	f003 0308 	and.w	r3, r3, #8
 8005624:	2b00      	cmp	r3, #0
 8005626:	d020      	beq.n	800566a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f003 0308 	and.w	r3, r3, #8
 800562e:	2b00      	cmp	r3, #0
 8005630:	d01b      	beq.n	800566a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f06f 0208 	mvn.w	r2, #8
 800563a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2204      	movs	r2, #4
 8005640:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	69db      	ldr	r3, [r3, #28]
 8005648:	f003 0303 	and.w	r3, r3, #3
 800564c:	2b00      	cmp	r3, #0
 800564e:	d003      	beq.n	8005658 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f000 f94d 	bl	80058f0 <HAL_TIM_IC_CaptureCallback>
 8005656:	e005      	b.n	8005664 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 f93f 	bl	80058dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 f950 	bl	8005904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	f003 0310 	and.w	r3, r3, #16
 8005670:	2b00      	cmp	r3, #0
 8005672:	d020      	beq.n	80056b6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f003 0310 	and.w	r3, r3, #16
 800567a:	2b00      	cmp	r3, #0
 800567c:	d01b      	beq.n	80056b6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f06f 0210 	mvn.w	r2, #16
 8005686:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2208      	movs	r2, #8
 800568c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	69db      	ldr	r3, [r3, #28]
 8005694:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005698:	2b00      	cmp	r3, #0
 800569a:	d003      	beq.n	80056a4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f000 f927 	bl	80058f0 <HAL_TIM_IC_CaptureCallback>
 80056a2:	e005      	b.n	80056b0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 f919 	bl	80058dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 f92a 	bl	8005904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	f003 0301 	and.w	r3, r3, #1
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d00c      	beq.n	80056da <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f003 0301 	and.w	r3, r3, #1
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d007      	beq.n	80056da <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f06f 0201 	mvn.w	r2, #1
 80056d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f003 faa5 	bl	8008c24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d00c      	beq.n	80056fe <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d007      	beq.n	80056fe <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80056f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 fadd 	bl	8005cb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005704:	2b00      	cmp	r3, #0
 8005706:	d00c      	beq.n	8005722 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800570e:	2b00      	cmp	r3, #0
 8005710:	d007      	beq.n	8005722 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800571a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f000 f8fb 	bl	8005918 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	f003 0320 	and.w	r3, r3, #32
 8005728:	2b00      	cmp	r3, #0
 800572a:	d00c      	beq.n	8005746 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f003 0320 	and.w	r3, r3, #32
 8005732:	2b00      	cmp	r3, #0
 8005734:	d007      	beq.n	8005746 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f06f 0220 	mvn.w	r2, #32
 800573e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f000 faaf 	bl	8005ca4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005746:	bf00      	nop
 8005748:	3710      	adds	r7, #16
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}

0800574e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800574e:	b580      	push	{r7, lr}
 8005750:	b084      	sub	sp, #16
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
 8005756:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005758:	2300      	movs	r3, #0
 800575a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005762:	2b01      	cmp	r3, #1
 8005764:	d101      	bne.n	800576a <HAL_TIM_ConfigClockSource+0x1c>
 8005766:	2302      	movs	r3, #2
 8005768:	e0b4      	b.n	80058d4 <HAL_TIM_ConfigClockSource+0x186>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2201      	movs	r2, #1
 800576e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2202      	movs	r2, #2
 8005776:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005788:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005790:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68ba      	ldr	r2, [r7, #8]
 8005798:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057a2:	d03e      	beq.n	8005822 <HAL_TIM_ConfigClockSource+0xd4>
 80057a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057a8:	f200 8087 	bhi.w	80058ba <HAL_TIM_ConfigClockSource+0x16c>
 80057ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057b0:	f000 8086 	beq.w	80058c0 <HAL_TIM_ConfigClockSource+0x172>
 80057b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057b8:	d87f      	bhi.n	80058ba <HAL_TIM_ConfigClockSource+0x16c>
 80057ba:	2b70      	cmp	r3, #112	@ 0x70
 80057bc:	d01a      	beq.n	80057f4 <HAL_TIM_ConfigClockSource+0xa6>
 80057be:	2b70      	cmp	r3, #112	@ 0x70
 80057c0:	d87b      	bhi.n	80058ba <HAL_TIM_ConfigClockSource+0x16c>
 80057c2:	2b60      	cmp	r3, #96	@ 0x60
 80057c4:	d050      	beq.n	8005868 <HAL_TIM_ConfigClockSource+0x11a>
 80057c6:	2b60      	cmp	r3, #96	@ 0x60
 80057c8:	d877      	bhi.n	80058ba <HAL_TIM_ConfigClockSource+0x16c>
 80057ca:	2b50      	cmp	r3, #80	@ 0x50
 80057cc:	d03c      	beq.n	8005848 <HAL_TIM_ConfigClockSource+0xfa>
 80057ce:	2b50      	cmp	r3, #80	@ 0x50
 80057d0:	d873      	bhi.n	80058ba <HAL_TIM_ConfigClockSource+0x16c>
 80057d2:	2b40      	cmp	r3, #64	@ 0x40
 80057d4:	d058      	beq.n	8005888 <HAL_TIM_ConfigClockSource+0x13a>
 80057d6:	2b40      	cmp	r3, #64	@ 0x40
 80057d8:	d86f      	bhi.n	80058ba <HAL_TIM_ConfigClockSource+0x16c>
 80057da:	2b30      	cmp	r3, #48	@ 0x30
 80057dc:	d064      	beq.n	80058a8 <HAL_TIM_ConfigClockSource+0x15a>
 80057de:	2b30      	cmp	r3, #48	@ 0x30
 80057e0:	d86b      	bhi.n	80058ba <HAL_TIM_ConfigClockSource+0x16c>
 80057e2:	2b20      	cmp	r3, #32
 80057e4:	d060      	beq.n	80058a8 <HAL_TIM_ConfigClockSource+0x15a>
 80057e6:	2b20      	cmp	r3, #32
 80057e8:	d867      	bhi.n	80058ba <HAL_TIM_ConfigClockSource+0x16c>
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d05c      	beq.n	80058a8 <HAL_TIM_ConfigClockSource+0x15a>
 80057ee:	2b10      	cmp	r3, #16
 80057f0:	d05a      	beq.n	80058a8 <HAL_TIM_ConfigClockSource+0x15a>
 80057f2:	e062      	b.n	80058ba <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005804:	f000 f9b2 	bl	8005b6c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005816:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68ba      	ldr	r2, [r7, #8]
 800581e:	609a      	str	r2, [r3, #8]
      break;
 8005820:	e04f      	b.n	80058c2 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005832:	f000 f99b 	bl	8005b6c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	689a      	ldr	r2, [r3, #8]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005844:	609a      	str	r2, [r3, #8]
      break;
 8005846:	e03c      	b.n	80058c2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005854:	461a      	mov	r2, r3
 8005856:	f000 f90f 	bl	8005a78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2150      	movs	r1, #80	@ 0x50
 8005860:	4618      	mov	r0, r3
 8005862:	f000 f968 	bl	8005b36 <TIM_ITRx_SetConfig>
      break;
 8005866:	e02c      	b.n	80058c2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005874:	461a      	mov	r2, r3
 8005876:	f000 f92e 	bl	8005ad6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2160      	movs	r1, #96	@ 0x60
 8005880:	4618      	mov	r0, r3
 8005882:	f000 f958 	bl	8005b36 <TIM_ITRx_SetConfig>
      break;
 8005886:	e01c      	b.n	80058c2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005894:	461a      	mov	r2, r3
 8005896:	f000 f8ef 	bl	8005a78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2140      	movs	r1, #64	@ 0x40
 80058a0:	4618      	mov	r0, r3
 80058a2:	f000 f948 	bl	8005b36 <TIM_ITRx_SetConfig>
      break;
 80058a6:	e00c      	b.n	80058c2 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4619      	mov	r1, r3
 80058b2:	4610      	mov	r0, r2
 80058b4:	f000 f93f 	bl	8005b36 <TIM_ITRx_SetConfig>
      break;
 80058b8:	e003      	b.n	80058c2 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	73fb      	strb	r3, [r7, #15]
      break;
 80058be:	e000      	b.n	80058c2 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80058c0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2201      	movs	r2, #1
 80058c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80058d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3710      	adds	r7, #16
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058e4:	bf00      	nop
 80058e6:	370c      	adds	r7, #12
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80058f8:	bf00      	nop
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800590c:	bf00      	nop
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005920:	bf00      	nop
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800592c:	b480      	push	{r7}
 800592e:	b085      	sub	sp, #20
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a43      	ldr	r2, [pc, #268]	@ (8005a4c <TIM_Base_SetConfig+0x120>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d013      	beq.n	800596c <TIM_Base_SetConfig+0x40>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800594a:	d00f      	beq.n	800596c <TIM_Base_SetConfig+0x40>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a40      	ldr	r2, [pc, #256]	@ (8005a50 <TIM_Base_SetConfig+0x124>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d00b      	beq.n	800596c <TIM_Base_SetConfig+0x40>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a3f      	ldr	r2, [pc, #252]	@ (8005a54 <TIM_Base_SetConfig+0x128>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d007      	beq.n	800596c <TIM_Base_SetConfig+0x40>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a3e      	ldr	r2, [pc, #248]	@ (8005a58 <TIM_Base_SetConfig+0x12c>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d003      	beq.n	800596c <TIM_Base_SetConfig+0x40>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a3d      	ldr	r2, [pc, #244]	@ (8005a5c <TIM_Base_SetConfig+0x130>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d108      	bne.n	800597e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005972:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	4313      	orrs	r3, r2
 800597c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a32      	ldr	r2, [pc, #200]	@ (8005a4c <TIM_Base_SetConfig+0x120>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d02b      	beq.n	80059de <TIM_Base_SetConfig+0xb2>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800598c:	d027      	beq.n	80059de <TIM_Base_SetConfig+0xb2>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a2f      	ldr	r2, [pc, #188]	@ (8005a50 <TIM_Base_SetConfig+0x124>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d023      	beq.n	80059de <TIM_Base_SetConfig+0xb2>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a2e      	ldr	r2, [pc, #184]	@ (8005a54 <TIM_Base_SetConfig+0x128>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d01f      	beq.n	80059de <TIM_Base_SetConfig+0xb2>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a2d      	ldr	r2, [pc, #180]	@ (8005a58 <TIM_Base_SetConfig+0x12c>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d01b      	beq.n	80059de <TIM_Base_SetConfig+0xb2>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a2c      	ldr	r2, [pc, #176]	@ (8005a5c <TIM_Base_SetConfig+0x130>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d017      	beq.n	80059de <TIM_Base_SetConfig+0xb2>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a2b      	ldr	r2, [pc, #172]	@ (8005a60 <TIM_Base_SetConfig+0x134>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d013      	beq.n	80059de <TIM_Base_SetConfig+0xb2>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a2a      	ldr	r2, [pc, #168]	@ (8005a64 <TIM_Base_SetConfig+0x138>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d00f      	beq.n	80059de <TIM_Base_SetConfig+0xb2>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a29      	ldr	r2, [pc, #164]	@ (8005a68 <TIM_Base_SetConfig+0x13c>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d00b      	beq.n	80059de <TIM_Base_SetConfig+0xb2>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a28      	ldr	r2, [pc, #160]	@ (8005a6c <TIM_Base_SetConfig+0x140>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d007      	beq.n	80059de <TIM_Base_SetConfig+0xb2>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a27      	ldr	r2, [pc, #156]	@ (8005a70 <TIM_Base_SetConfig+0x144>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d003      	beq.n	80059de <TIM_Base_SetConfig+0xb2>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a26      	ldr	r2, [pc, #152]	@ (8005a74 <TIM_Base_SetConfig+0x148>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d108      	bne.n	80059f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	695b      	ldr	r3, [r3, #20]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	689a      	ldr	r2, [r3, #8]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a0e      	ldr	r2, [pc, #56]	@ (8005a4c <TIM_Base_SetConfig+0x120>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d003      	beq.n	8005a1e <TIM_Base_SetConfig+0xf2>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a10      	ldr	r2, [pc, #64]	@ (8005a5c <TIM_Base_SetConfig+0x130>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d103      	bne.n	8005a26 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	691a      	ldr	r2, [r3, #16]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f043 0204 	orr.w	r2, r3, #4
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2201      	movs	r2, #1
 8005a36:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	601a      	str	r2, [r3, #0]
}
 8005a3e:	bf00      	nop
 8005a40:	3714      	adds	r7, #20
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop
 8005a4c:	40010000 	.word	0x40010000
 8005a50:	40000400 	.word	0x40000400
 8005a54:	40000800 	.word	0x40000800
 8005a58:	40000c00 	.word	0x40000c00
 8005a5c:	40010400 	.word	0x40010400
 8005a60:	40014000 	.word	0x40014000
 8005a64:	40014400 	.word	0x40014400
 8005a68:	40014800 	.word	0x40014800
 8005a6c:	40001800 	.word	0x40001800
 8005a70:	40001c00 	.word	0x40001c00
 8005a74:	40002000 	.word	0x40002000

08005a78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b087      	sub	sp, #28
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6a1b      	ldr	r3, [r3, #32]
 8005a88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	f023 0201 	bic.w	r2, r3, #1
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	699b      	ldr	r3, [r3, #24]
 8005a9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005aa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	011b      	lsls	r3, r3, #4
 8005aa8:	693a      	ldr	r2, [r7, #16]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	f023 030a 	bic.w	r3, r3, #10
 8005ab4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ab6:	697a      	ldr	r2, [r7, #20]
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	693a      	ldr	r2, [r7, #16]
 8005ac2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	697a      	ldr	r2, [r7, #20]
 8005ac8:	621a      	str	r2, [r3, #32]
}
 8005aca:	bf00      	nop
 8005acc:	371c      	adds	r7, #28
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr

08005ad6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ad6:	b480      	push	{r7}
 8005ad8:	b087      	sub	sp, #28
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	60f8      	str	r0, [r7, #12]
 8005ade:	60b9      	str	r1, [r7, #8]
 8005ae0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6a1b      	ldr	r3, [r3, #32]
 8005ae6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6a1b      	ldr	r3, [r3, #32]
 8005aec:	f023 0210 	bic.w	r2, r3, #16
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	699b      	ldr	r3, [r3, #24]
 8005af8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005b00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	031b      	lsls	r3, r3, #12
 8005b06:	693a      	ldr	r2, [r7, #16]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005b12:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	011b      	lsls	r3, r3, #4
 8005b18:	697a      	ldr	r2, [r7, #20]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	693a      	ldr	r2, [r7, #16]
 8005b22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	697a      	ldr	r2, [r7, #20]
 8005b28:	621a      	str	r2, [r3, #32]
}
 8005b2a:	bf00      	nop
 8005b2c:	371c      	adds	r7, #28
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr

08005b36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b36:	b480      	push	{r7}
 8005b38:	b085      	sub	sp, #20
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
 8005b3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b4e:	683a      	ldr	r2, [r7, #0]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	f043 0307 	orr.w	r3, r3, #7
 8005b58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	609a      	str	r2, [r3, #8]
}
 8005b60:	bf00      	nop
 8005b62:	3714      	adds	r7, #20
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b087      	sub	sp, #28
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	607a      	str	r2, [r7, #4]
 8005b78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005b86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	021a      	lsls	r2, r3, #8
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	431a      	orrs	r2, r3
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	697a      	ldr	r2, [r7, #20]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	697a      	ldr	r2, [r7, #20]
 8005b9e:	609a      	str	r2, [r3, #8]
}
 8005ba0:	bf00      	nop
 8005ba2:	371c      	adds	r7, #28
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d101      	bne.n	8005bc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bc0:	2302      	movs	r3, #2
 8005bc2:	e05a      	b.n	8005c7a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2202      	movs	r2, #2
 8005bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a21      	ldr	r2, [pc, #132]	@ (8005c88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d022      	beq.n	8005c4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c10:	d01d      	beq.n	8005c4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a1d      	ldr	r2, [pc, #116]	@ (8005c8c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d018      	beq.n	8005c4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a1b      	ldr	r2, [pc, #108]	@ (8005c90 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d013      	beq.n	8005c4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a1a      	ldr	r2, [pc, #104]	@ (8005c94 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d00e      	beq.n	8005c4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a18      	ldr	r2, [pc, #96]	@ (8005c98 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d009      	beq.n	8005c4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a17      	ldr	r2, [pc, #92]	@ (8005c9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d004      	beq.n	8005c4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a15      	ldr	r2, [pc, #84]	@ (8005ca0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d10c      	bne.n	8005c68 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	68ba      	ldr	r2, [r7, #8]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	68ba      	ldr	r2, [r7, #8]
 8005c66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3714      	adds	r7, #20
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
 8005c86:	bf00      	nop
 8005c88:	40010000 	.word	0x40010000
 8005c8c:	40000400 	.word	0x40000400
 8005c90:	40000800 	.word	0x40000800
 8005c94:	40000c00 	.word	0x40000c00
 8005c98:	40010400 	.word	0x40010400
 8005c9c:	40014000 	.word	0x40014000
 8005ca0:	40001800 	.word	0x40001800

08005ca4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005cac:	bf00      	nop
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005cc0:	bf00      	nop
 8005cc2:	370c      	adds	r7, #12
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d101      	bne.n	8005cde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e042      	b.n	8005d64 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d106      	bne.n	8005cf8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f7fb fa1a 	bl	800112c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2224      	movs	r2, #36	@ 0x24
 8005cfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68da      	ldr	r2, [r3, #12]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005d0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 fdfb 	bl	800690c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	691a      	ldr	r2, [r3, #16]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005d24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	695a      	ldr	r2, [r3, #20]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005d34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	68da      	ldr	r2, [r3, #12]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005d44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2220      	movs	r2, #32
 8005d50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2220      	movs	r2, #32
 8005d58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005d62:	2300      	movs	r3, #0
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3708      	adds	r7, #8
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b082      	sub	sp, #8
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d101      	bne.n	8005d7e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e024      	b.n	8005dc8 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2224      	movs	r2, #36	@ 0x24
 8005d82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	68da      	ldr	r2, [r3, #12]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005d94:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f7fb faa0 	bl	80012dc <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005dc6:	2300      	movs	r3, #0
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3708      	adds	r7, #8
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b08a      	sub	sp, #40	@ 0x28
 8005dd4:	af02      	add	r7, sp, #8
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	603b      	str	r3, [r7, #0]
 8005ddc:	4613      	mov	r3, r2
 8005dde:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005de0:	2300      	movs	r3, #0
 8005de2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	2b20      	cmp	r3, #32
 8005dee:	d175      	bne.n	8005edc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d002      	beq.n	8005dfc <HAL_UART_Transmit+0x2c>
 8005df6:	88fb      	ldrh	r3, [r7, #6]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d101      	bne.n	8005e00 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e06e      	b.n	8005ede <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2200      	movs	r2, #0
 8005e04:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2221      	movs	r2, #33	@ 0x21
 8005e0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e0e:	f7fb fba9 	bl	8001564 <HAL_GetTick>
 8005e12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	88fa      	ldrh	r2, [r7, #6]
 8005e18:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	88fa      	ldrh	r2, [r7, #6]
 8005e1e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e28:	d108      	bne.n	8005e3c <HAL_UART_Transmit+0x6c>
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d104      	bne.n	8005e3c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005e32:	2300      	movs	r3, #0
 8005e34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	61bb      	str	r3, [r7, #24]
 8005e3a:	e003      	b.n	8005e44 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e40:	2300      	movs	r3, #0
 8005e42:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005e44:	e02e      	b.n	8005ea4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	9300      	str	r3, [sp, #0]
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	2180      	movs	r1, #128	@ 0x80
 8005e50:	68f8      	ldr	r0, [r7, #12]
 8005e52:	f000 fb2d 	bl	80064b0 <UART_WaitOnFlagUntilTimeout>
 8005e56:	4603      	mov	r3, r0
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d005      	beq.n	8005e68 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2220      	movs	r2, #32
 8005e60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005e64:	2303      	movs	r3, #3
 8005e66:	e03a      	b.n	8005ede <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d10b      	bne.n	8005e86 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	881b      	ldrh	r3, [r3, #0]
 8005e72:	461a      	mov	r2, r3
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e7c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	3302      	adds	r3, #2
 8005e82:	61bb      	str	r3, [r7, #24]
 8005e84:	e007      	b.n	8005e96 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	781a      	ldrb	r2, [r3, #0]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	3301      	adds	r3, #1
 8005e94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	3b01      	subs	r3, #1
 8005e9e:	b29a      	uxth	r2, r3
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d1cb      	bne.n	8005e46 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	9300      	str	r3, [sp, #0]
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	2140      	movs	r1, #64	@ 0x40
 8005eb8:	68f8      	ldr	r0, [r7, #12]
 8005eba:	f000 faf9 	bl	80064b0 <UART_WaitOnFlagUntilTimeout>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d005      	beq.n	8005ed0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2220      	movs	r2, #32
 8005ec8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005ecc:	2303      	movs	r3, #3
 8005ece:	e006      	b.n	8005ede <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2220      	movs	r2, #32
 8005ed4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	e000      	b.n	8005ede <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005edc:	2302      	movs	r3, #2
  }
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3720      	adds	r7, #32
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}

08005ee6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ee6:	b580      	push	{r7, lr}
 8005ee8:	b084      	sub	sp, #16
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	60f8      	str	r0, [r7, #12]
 8005eee:	60b9      	str	r1, [r7, #8]
 8005ef0:	4613      	mov	r3, r2
 8005ef2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	2b20      	cmp	r3, #32
 8005efe:	d112      	bne.n	8005f26 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d002      	beq.n	8005f0c <HAL_UART_Receive_IT+0x26>
 8005f06:	88fb      	ldrh	r3, [r7, #6]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d101      	bne.n	8005f10 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e00b      	b.n	8005f28 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2200      	movs	r2, #0
 8005f14:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005f16:	88fb      	ldrh	r3, [r7, #6]
 8005f18:	461a      	mov	r2, r3
 8005f1a:	68b9      	ldr	r1, [r7, #8]
 8005f1c:	68f8      	ldr	r0, [r7, #12]
 8005f1e:	f000 fb20 	bl	8006562 <UART_Start_Receive_IT>
 8005f22:	4603      	mov	r3, r0
 8005f24:	e000      	b.n	8005f28 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005f26:	2302      	movs	r3, #2
  }
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3710      	adds	r7, #16
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b0ba      	sub	sp, #232	@ 0xe8
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	695b      	ldr	r3, [r3, #20]
 8005f52:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005f56:	2300      	movs	r3, #0
 8005f58:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005f62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f66:	f003 030f 	and.w	r3, r3, #15
 8005f6a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005f6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d10f      	bne.n	8005f96 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f7a:	f003 0320 	and.w	r3, r3, #32
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d009      	beq.n	8005f96 <HAL_UART_IRQHandler+0x66>
 8005f82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f86:	f003 0320 	and.w	r3, r3, #32
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d003      	beq.n	8005f96 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 fbfd 	bl	800678e <UART_Receive_IT>
      return;
 8005f94:	e273      	b.n	800647e <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005f96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	f000 80de 	beq.w	800615c <HAL_UART_IRQHandler+0x22c>
 8005fa0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005fa4:	f003 0301 	and.w	r3, r3, #1
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d106      	bne.n	8005fba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005fac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fb0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	f000 80d1 	beq.w	800615c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fbe:	f003 0301 	and.w	r3, r3, #1
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d00b      	beq.n	8005fde <HAL_UART_IRQHandler+0xae>
 8005fc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d005      	beq.n	8005fde <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fd6:	f043 0201 	orr.w	r2, r3, #1
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fe2:	f003 0304 	and.w	r3, r3, #4
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d00b      	beq.n	8006002 <HAL_UART_IRQHandler+0xd2>
 8005fea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005fee:	f003 0301 	and.w	r3, r3, #1
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d005      	beq.n	8006002 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ffa:	f043 0202 	orr.w	r2, r3, #2
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006006:	f003 0302 	and.w	r3, r3, #2
 800600a:	2b00      	cmp	r3, #0
 800600c:	d00b      	beq.n	8006026 <HAL_UART_IRQHandler+0xf6>
 800600e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006012:	f003 0301 	and.w	r3, r3, #1
 8006016:	2b00      	cmp	r3, #0
 8006018:	d005      	beq.n	8006026 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800601e:	f043 0204 	orr.w	r2, r3, #4
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800602a:	f003 0308 	and.w	r3, r3, #8
 800602e:	2b00      	cmp	r3, #0
 8006030:	d011      	beq.n	8006056 <HAL_UART_IRQHandler+0x126>
 8006032:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006036:	f003 0320 	and.w	r3, r3, #32
 800603a:	2b00      	cmp	r3, #0
 800603c:	d105      	bne.n	800604a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800603e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006042:	f003 0301 	and.w	r3, r3, #1
 8006046:	2b00      	cmp	r3, #0
 8006048:	d005      	beq.n	8006056 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800604e:	f043 0208 	orr.w	r2, r3, #8
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800605a:	2b00      	cmp	r3, #0
 800605c:	f000 820a 	beq.w	8006474 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006060:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006064:	f003 0320 	and.w	r3, r3, #32
 8006068:	2b00      	cmp	r3, #0
 800606a:	d008      	beq.n	800607e <HAL_UART_IRQHandler+0x14e>
 800606c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006070:	f003 0320 	and.w	r3, r3, #32
 8006074:	2b00      	cmp	r3, #0
 8006076:	d002      	beq.n	800607e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 fb88 	bl	800678e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	695b      	ldr	r3, [r3, #20]
 8006084:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006088:	2b40      	cmp	r3, #64	@ 0x40
 800608a:	bf0c      	ite	eq
 800608c:	2301      	moveq	r3, #1
 800608e:	2300      	movne	r3, #0
 8006090:	b2db      	uxtb	r3, r3
 8006092:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800609a:	f003 0308 	and.w	r3, r3, #8
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d103      	bne.n	80060aa <HAL_UART_IRQHandler+0x17a>
 80060a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d04f      	beq.n	800614a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 fa93 	bl	80065d6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	695b      	ldr	r3, [r3, #20]
 80060b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060ba:	2b40      	cmp	r3, #64	@ 0x40
 80060bc:	d141      	bne.n	8006142 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	3314      	adds	r3, #20
 80060c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80060cc:	e853 3f00 	ldrex	r3, [r3]
 80060d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80060d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80060d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	3314      	adds	r3, #20
 80060e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80060ea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80060ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80060f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80060fa:	e841 2300 	strex	r3, r2, [r1]
 80060fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006102:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d1d9      	bne.n	80060be <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800610e:	2b00      	cmp	r3, #0
 8006110:	d013      	beq.n	800613a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006116:	4a8a      	ldr	r2, [pc, #552]	@ (8006340 <HAL_UART_IRQHandler+0x410>)
 8006118:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800611e:	4618      	mov	r0, r3
 8006120:	f7fc fb76 	bl	8002810 <HAL_DMA_Abort_IT>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d016      	beq.n	8006158 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800612e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006134:	4610      	mov	r0, r2
 8006136:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006138:	e00e      	b.n	8006158 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 f9a2 	bl	8006484 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006140:	e00a      	b.n	8006158 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 f99e 	bl	8006484 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006148:	e006      	b.n	8006158 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 f99a 	bl	8006484 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006156:	e18d      	b.n	8006474 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006158:	bf00      	nop
    return;
 800615a:	e18b      	b.n	8006474 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006160:	2b01      	cmp	r3, #1
 8006162:	f040 8167 	bne.w	8006434 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800616a:	f003 0310 	and.w	r3, r3, #16
 800616e:	2b00      	cmp	r3, #0
 8006170:	f000 8160 	beq.w	8006434 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8006174:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006178:	f003 0310 	and.w	r3, r3, #16
 800617c:	2b00      	cmp	r3, #0
 800617e:	f000 8159 	beq.w	8006434 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006182:	2300      	movs	r3, #0
 8006184:	60bb      	str	r3, [r7, #8]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	60bb      	str	r3, [r7, #8]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	60bb      	str	r3, [r7, #8]
 8006196:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	695b      	ldr	r3, [r3, #20]
 800619e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061a2:	2b40      	cmp	r3, #64	@ 0x40
 80061a4:	f040 80ce 	bne.w	8006344 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80061b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	f000 80a9 	beq.w	8006310 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80061c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80061c6:	429a      	cmp	r2, r3
 80061c8:	f080 80a2 	bcs.w	8006310 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80061d2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061d8:	69db      	ldr	r3, [r3, #28]
 80061da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061de:	f000 8088 	beq.w	80062f2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	330c      	adds	r3, #12
 80061e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80061f0:	e853 3f00 	ldrex	r3, [r3]
 80061f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80061f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80061fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006200:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	330c      	adds	r3, #12
 800620a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800620e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006212:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006216:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800621a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800621e:	e841 2300 	strex	r3, r2, [r1]
 8006222:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006226:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800622a:	2b00      	cmp	r3, #0
 800622c:	d1d9      	bne.n	80061e2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	3314      	adds	r3, #20
 8006234:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006236:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006238:	e853 3f00 	ldrex	r3, [r3]
 800623c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800623e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006240:	f023 0301 	bic.w	r3, r3, #1
 8006244:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	3314      	adds	r3, #20
 800624e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006252:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006256:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006258:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800625a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800625e:	e841 2300 	strex	r3, r2, [r1]
 8006262:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006264:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006266:	2b00      	cmp	r3, #0
 8006268:	d1e1      	bne.n	800622e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	3314      	adds	r3, #20
 8006270:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006272:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006274:	e853 3f00 	ldrex	r3, [r3]
 8006278:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800627a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800627c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006280:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	3314      	adds	r3, #20
 800628a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800628e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006290:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006292:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006294:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006296:	e841 2300 	strex	r3, r2, [r1]
 800629a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800629c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d1e3      	bne.n	800626a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2220      	movs	r2, #32
 80062a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	330c      	adds	r3, #12
 80062b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062ba:	e853 3f00 	ldrex	r3, [r3]
 80062be:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80062c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80062c2:	f023 0310 	bic.w	r3, r3, #16
 80062c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	330c      	adds	r3, #12
 80062d0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80062d4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80062d6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80062da:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80062dc:	e841 2300 	strex	r3, r2, [r1]
 80062e0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80062e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d1e3      	bne.n	80062b0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062ec:	4618      	mov	r0, r3
 80062ee:	f7fc fa1f 	bl	8002730 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2202      	movs	r2, #2
 80062f6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006300:	b29b      	uxth	r3, r3
 8006302:	1ad3      	subs	r3, r2, r3
 8006304:	b29b      	uxth	r3, r3
 8006306:	4619      	mov	r1, r3
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 f8c5 	bl	8006498 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800630e:	e0b3      	b.n	8006478 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006314:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006318:	429a      	cmp	r2, r3
 800631a:	f040 80ad 	bne.w	8006478 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006322:	69db      	ldr	r3, [r3, #28]
 8006324:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006328:	f040 80a6 	bne.w	8006478 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2202      	movs	r2, #2
 8006330:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006336:	4619      	mov	r1, r3
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 f8ad 	bl	8006498 <HAL_UARTEx_RxEventCallback>
      return;
 800633e:	e09b      	b.n	8006478 <HAL_UART_IRQHandler+0x548>
 8006340:	0800669d 	.word	0x0800669d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800634c:	b29b      	uxth	r3, r3
 800634e:	1ad3      	subs	r3, r2, r3
 8006350:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006358:	b29b      	uxth	r3, r3
 800635a:	2b00      	cmp	r3, #0
 800635c:	f000 808e 	beq.w	800647c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8006360:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006364:	2b00      	cmp	r3, #0
 8006366:	f000 8089 	beq.w	800647c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	330c      	adds	r3, #12
 8006370:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006374:	e853 3f00 	ldrex	r3, [r3]
 8006378:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800637a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800637c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006380:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	330c      	adds	r3, #12
 800638a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800638e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006390:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006392:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006394:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006396:	e841 2300 	strex	r3, r2, [r1]
 800639a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800639c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d1e3      	bne.n	800636a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	3314      	adds	r3, #20
 80063a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ac:	e853 3f00 	ldrex	r3, [r3]
 80063b0:	623b      	str	r3, [r7, #32]
   return(result);
 80063b2:	6a3b      	ldr	r3, [r7, #32]
 80063b4:	f023 0301 	bic.w	r3, r3, #1
 80063b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	3314      	adds	r3, #20
 80063c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80063c6:	633a      	str	r2, [r7, #48]	@ 0x30
 80063c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80063cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063ce:	e841 2300 	strex	r3, r2, [r1]
 80063d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80063d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1e3      	bne.n	80063a2 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2220      	movs	r2, #32
 80063de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	330c      	adds	r3, #12
 80063ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	e853 3f00 	ldrex	r3, [r3]
 80063f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f023 0310 	bic.w	r3, r3, #16
 80063fe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	330c      	adds	r3, #12
 8006408:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800640c:	61fa      	str	r2, [r7, #28]
 800640e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006410:	69b9      	ldr	r1, [r7, #24]
 8006412:	69fa      	ldr	r2, [r7, #28]
 8006414:	e841 2300 	strex	r3, r2, [r1]
 8006418:	617b      	str	r3, [r7, #20]
   return(result);
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d1e3      	bne.n	80063e8 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2202      	movs	r2, #2
 8006424:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006426:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800642a:	4619      	mov	r1, r3
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 f833 	bl	8006498 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006432:	e023      	b.n	800647c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006438:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800643c:	2b00      	cmp	r3, #0
 800643e:	d009      	beq.n	8006454 <HAL_UART_IRQHandler+0x524>
 8006440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006444:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006448:	2b00      	cmp	r3, #0
 800644a:	d003      	beq.n	8006454 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 f936 	bl	80066be <UART_Transmit_IT>
    return;
 8006452:	e014      	b.n	800647e <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006458:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800645c:	2b00      	cmp	r3, #0
 800645e:	d00e      	beq.n	800647e <HAL_UART_IRQHandler+0x54e>
 8006460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006468:	2b00      	cmp	r3, #0
 800646a:	d008      	beq.n	800647e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 f976 	bl	800675e <UART_EndTransmit_IT>
    return;
 8006472:	e004      	b.n	800647e <HAL_UART_IRQHandler+0x54e>
    return;
 8006474:	bf00      	nop
 8006476:	e002      	b.n	800647e <HAL_UART_IRQHandler+0x54e>
      return;
 8006478:	bf00      	nop
 800647a:	e000      	b.n	800647e <HAL_UART_IRQHandler+0x54e>
      return;
 800647c:	bf00      	nop
  }
}
 800647e:	37e8      	adds	r7, #232	@ 0xe8
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800648c:	bf00      	nop
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006498:	b480      	push	{r7}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	460b      	mov	r3, r1
 80064a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80064a4:	bf00      	nop
 80064a6:	370c      	adds	r7, #12
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b086      	sub	sp, #24
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	603b      	str	r3, [r7, #0]
 80064bc:	4613      	mov	r3, r2
 80064be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064c0:	e03b      	b.n	800653a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064c2:	6a3b      	ldr	r3, [r7, #32]
 80064c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064c8:	d037      	beq.n	800653a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064ca:	f7fb f84b 	bl	8001564 <HAL_GetTick>
 80064ce:	4602      	mov	r2, r0
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	1ad3      	subs	r3, r2, r3
 80064d4:	6a3a      	ldr	r2, [r7, #32]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d302      	bcc.n	80064e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80064da:	6a3b      	ldr	r3, [r7, #32]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d101      	bne.n	80064e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80064e0:	2303      	movs	r3, #3
 80064e2:	e03a      	b.n	800655a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	f003 0304 	and.w	r3, r3, #4
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d023      	beq.n	800653a <UART_WaitOnFlagUntilTimeout+0x8a>
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	2b80      	cmp	r3, #128	@ 0x80
 80064f6:	d020      	beq.n	800653a <UART_WaitOnFlagUntilTimeout+0x8a>
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	2b40      	cmp	r3, #64	@ 0x40
 80064fc:	d01d      	beq.n	800653a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f003 0308 	and.w	r3, r3, #8
 8006508:	2b08      	cmp	r3, #8
 800650a:	d116      	bne.n	800653a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800650c:	2300      	movs	r3, #0
 800650e:	617b      	str	r3, [r7, #20]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	617b      	str	r3, [r7, #20]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	617b      	str	r3, [r7, #20]
 8006520:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006522:	68f8      	ldr	r0, [r7, #12]
 8006524:	f000 f857 	bl	80065d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2208      	movs	r2, #8
 800652c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2200      	movs	r2, #0
 8006532:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	e00f      	b.n	800655a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	4013      	ands	r3, r2
 8006544:	68ba      	ldr	r2, [r7, #8]
 8006546:	429a      	cmp	r2, r3
 8006548:	bf0c      	ite	eq
 800654a:	2301      	moveq	r3, #1
 800654c:	2300      	movne	r3, #0
 800654e:	b2db      	uxtb	r3, r3
 8006550:	461a      	mov	r2, r3
 8006552:	79fb      	ldrb	r3, [r7, #7]
 8006554:	429a      	cmp	r2, r3
 8006556:	d0b4      	beq.n	80064c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006558:	2300      	movs	r3, #0
}
 800655a:	4618      	mov	r0, r3
 800655c:	3718      	adds	r7, #24
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}

08006562 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006562:	b480      	push	{r7}
 8006564:	b085      	sub	sp, #20
 8006566:	af00      	add	r7, sp, #0
 8006568:	60f8      	str	r0, [r7, #12]
 800656a:	60b9      	str	r1, [r7, #8]
 800656c:	4613      	mov	r3, r2
 800656e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	68ba      	ldr	r2, [r7, #8]
 8006574:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	88fa      	ldrh	r2, [r7, #6]
 800657a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	88fa      	ldrh	r2, [r7, #6]
 8006580:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2200      	movs	r2, #0
 8006586:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2222      	movs	r2, #34	@ 0x22
 800658c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	691b      	ldr	r3, [r3, #16]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d007      	beq.n	80065a8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68da      	ldr	r2, [r3, #12]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80065a6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	695a      	ldr	r2, [r3, #20]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f042 0201 	orr.w	r2, r2, #1
 80065b6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68da      	ldr	r2, [r3, #12]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f042 0220 	orr.w	r2, r2, #32
 80065c6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80065c8:	2300      	movs	r3, #0
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3714      	adds	r7, #20
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr

080065d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065d6:	b480      	push	{r7}
 80065d8:	b095      	sub	sp, #84	@ 0x54
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	330c      	adds	r3, #12
 80065e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065e8:	e853 3f00 	ldrex	r3, [r3]
 80065ec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80065ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80065f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	330c      	adds	r3, #12
 80065fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80065fe:	643a      	str	r2, [r7, #64]	@ 0x40
 8006600:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006602:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006604:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006606:	e841 2300 	strex	r3, r2, [r1]
 800660a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800660c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800660e:	2b00      	cmp	r3, #0
 8006610:	d1e5      	bne.n	80065de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	3314      	adds	r3, #20
 8006618:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661a:	6a3b      	ldr	r3, [r7, #32]
 800661c:	e853 3f00 	ldrex	r3, [r3]
 8006620:	61fb      	str	r3, [r7, #28]
   return(result);
 8006622:	69fb      	ldr	r3, [r7, #28]
 8006624:	f023 0301 	bic.w	r3, r3, #1
 8006628:	64bb      	str	r3, [r7, #72]	@ 0x48
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	3314      	adds	r3, #20
 8006630:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006632:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006634:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006636:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006638:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800663a:	e841 2300 	strex	r3, r2, [r1]
 800663e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006642:	2b00      	cmp	r3, #0
 8006644:	d1e5      	bne.n	8006612 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800664a:	2b01      	cmp	r3, #1
 800664c:	d119      	bne.n	8006682 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	330c      	adds	r3, #12
 8006654:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	e853 3f00 	ldrex	r3, [r3]
 800665c:	60bb      	str	r3, [r7, #8]
   return(result);
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	f023 0310 	bic.w	r3, r3, #16
 8006664:	647b      	str	r3, [r7, #68]	@ 0x44
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	330c      	adds	r3, #12
 800666c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800666e:	61ba      	str	r2, [r7, #24]
 8006670:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006672:	6979      	ldr	r1, [r7, #20]
 8006674:	69ba      	ldr	r2, [r7, #24]
 8006676:	e841 2300 	strex	r3, r2, [r1]
 800667a:	613b      	str	r3, [r7, #16]
   return(result);
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d1e5      	bne.n	800664e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2220      	movs	r2, #32
 8006686:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006690:	bf00      	nop
 8006692:	3754      	adds	r7, #84	@ 0x54
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2200      	movs	r2, #0
 80066ae:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066b0:	68f8      	ldr	r0, [r7, #12]
 80066b2:	f7ff fee7 	bl	8006484 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066b6:	bf00      	nop
 80066b8:	3710      	adds	r7, #16
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}

080066be <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80066be:	b480      	push	{r7}
 80066c0:	b085      	sub	sp, #20
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	2b21      	cmp	r3, #33	@ 0x21
 80066d0:	d13e      	bne.n	8006750 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066da:	d114      	bne.n	8006706 <UART_Transmit_IT+0x48>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d110      	bne.n	8006706 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6a1b      	ldr	r3, [r3, #32]
 80066e8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	881b      	ldrh	r3, [r3, #0]
 80066ee:	461a      	mov	r2, r3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066f8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	1c9a      	adds	r2, r3, #2
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	621a      	str	r2, [r3, #32]
 8006704:	e008      	b.n	8006718 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a1b      	ldr	r3, [r3, #32]
 800670a:	1c59      	adds	r1, r3, #1
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	6211      	str	r1, [r2, #32]
 8006710:	781a      	ldrb	r2, [r3, #0]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800671c:	b29b      	uxth	r3, r3
 800671e:	3b01      	subs	r3, #1
 8006720:	b29b      	uxth	r3, r3
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	4619      	mov	r1, r3
 8006726:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006728:	2b00      	cmp	r3, #0
 800672a:	d10f      	bne.n	800674c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	68da      	ldr	r2, [r3, #12]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800673a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	68da      	ldr	r2, [r3, #12]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800674a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800674c:	2300      	movs	r3, #0
 800674e:	e000      	b.n	8006752 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006750:	2302      	movs	r3, #2
  }
}
 8006752:	4618      	mov	r0, r3
 8006754:	3714      	adds	r7, #20
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr

0800675e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800675e:	b580      	push	{r7, lr}
 8006760:	b082      	sub	sp, #8
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	68da      	ldr	r2, [r3, #12]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006774:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2220      	movs	r2, #32
 800677a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f002 f944 	bl	8008a0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006784:	2300      	movs	r3, #0
}
 8006786:	4618      	mov	r0, r3
 8006788:	3708      	adds	r7, #8
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}

0800678e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800678e:	b580      	push	{r7, lr}
 8006790:	b08c      	sub	sp, #48	@ 0x30
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8006796:	2300      	movs	r3, #0
 8006798:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800679a:	2300      	movs	r3, #0
 800679c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	2b22      	cmp	r3, #34	@ 0x22
 80067a8:	f040 80aa 	bne.w	8006900 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067b4:	d115      	bne.n	80067e2 <UART_Receive_IT+0x54>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d111      	bne.n	80067e2 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067c2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067d0:	b29a      	uxth	r2, r3
 80067d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067da:	1c9a      	adds	r2, r3, #2
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	629a      	str	r2, [r3, #40]	@ 0x28
 80067e0:	e024      	b.n	800682c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067f0:	d007      	beq.n	8006802 <UART_Receive_IT+0x74>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d10a      	bne.n	8006810 <UART_Receive_IT+0x82>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d106      	bne.n	8006810 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	b2da      	uxtb	r2, r3
 800680a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800680c:	701a      	strb	r2, [r3, #0]
 800680e:	e008      	b.n	8006822 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	b2db      	uxtb	r3, r3
 8006818:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800681c:	b2da      	uxtb	r2, r3
 800681e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006820:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006826:	1c5a      	adds	r2, r3, #1
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006830:	b29b      	uxth	r3, r3
 8006832:	3b01      	subs	r3, #1
 8006834:	b29b      	uxth	r3, r3
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	4619      	mov	r1, r3
 800683a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800683c:	2b00      	cmp	r3, #0
 800683e:	d15d      	bne.n	80068fc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	68da      	ldr	r2, [r3, #12]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f022 0220 	bic.w	r2, r2, #32
 800684e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	68da      	ldr	r2, [r3, #12]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800685e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	695a      	ldr	r2, [r3, #20]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f022 0201 	bic.w	r2, r2, #1
 800686e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2220      	movs	r2, #32
 8006874:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006882:	2b01      	cmp	r3, #1
 8006884:	d135      	bne.n	80068f2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	330c      	adds	r3, #12
 8006892:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	e853 3f00 	ldrex	r3, [r3]
 800689a:	613b      	str	r3, [r7, #16]
   return(result);
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	f023 0310 	bic.w	r3, r3, #16
 80068a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	330c      	adds	r3, #12
 80068aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068ac:	623a      	str	r2, [r7, #32]
 80068ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b0:	69f9      	ldr	r1, [r7, #28]
 80068b2:	6a3a      	ldr	r2, [r7, #32]
 80068b4:	e841 2300 	strex	r3, r2, [r1]
 80068b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80068ba:	69bb      	ldr	r3, [r7, #24]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d1e5      	bne.n	800688c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f003 0310 	and.w	r3, r3, #16
 80068ca:	2b10      	cmp	r3, #16
 80068cc:	d10a      	bne.n	80068e4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80068ce:	2300      	movs	r3, #0
 80068d0:	60fb      	str	r3, [r7, #12]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	60fb      	str	r3, [r7, #12]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	60fb      	str	r3, [r7, #12]
 80068e2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80068e8:	4619      	mov	r1, r3
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f7ff fdd4 	bl	8006498 <HAL_UARTEx_RxEventCallback>
 80068f0:	e002      	b.n	80068f8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f002 f9b0 	bl	8008c58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80068f8:	2300      	movs	r3, #0
 80068fa:	e002      	b.n	8006902 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80068fc:	2300      	movs	r3, #0
 80068fe:	e000      	b.n	8006902 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006900:	2302      	movs	r3, #2
  }
}
 8006902:	4618      	mov	r0, r3
 8006904:	3730      	adds	r7, #48	@ 0x30
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
	...

0800690c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800690c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006910:	b0c0      	sub	sp, #256	@ 0x100
 8006912:	af00      	add	r7, sp, #0
 8006914:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	691b      	ldr	r3, [r3, #16]
 8006920:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006928:	68d9      	ldr	r1, [r3, #12]
 800692a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	ea40 0301 	orr.w	r3, r0, r1
 8006934:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800693a:	689a      	ldr	r2, [r3, #8]
 800693c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	431a      	orrs	r2, r3
 8006944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006948:	695b      	ldr	r3, [r3, #20]
 800694a:	431a      	orrs	r2, r3
 800694c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006950:	69db      	ldr	r3, [r3, #28]
 8006952:	4313      	orrs	r3, r2
 8006954:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006964:	f021 010c 	bic.w	r1, r1, #12
 8006968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006972:	430b      	orrs	r3, r1
 8006974:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	695b      	ldr	r3, [r3, #20]
 800697e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006986:	6999      	ldr	r1, [r3, #24]
 8006988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	ea40 0301 	orr.w	r3, r0, r1
 8006992:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	4b8f      	ldr	r3, [pc, #572]	@ (8006bd8 <UART_SetConfig+0x2cc>)
 800699c:	429a      	cmp	r2, r3
 800699e:	d005      	beq.n	80069ac <UART_SetConfig+0xa0>
 80069a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	4b8d      	ldr	r3, [pc, #564]	@ (8006bdc <UART_SetConfig+0x2d0>)
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d104      	bne.n	80069b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80069ac:	f7fe fc74 	bl	8005298 <HAL_RCC_GetPCLK2Freq>
 80069b0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80069b4:	e003      	b.n	80069be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80069b6:	f7fe fc5b 	bl	8005270 <HAL_RCC_GetPCLK1Freq>
 80069ba:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069c2:	69db      	ldr	r3, [r3, #28]
 80069c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069c8:	f040 810c 	bne.w	8006be4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80069cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069d0:	2200      	movs	r2, #0
 80069d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80069d6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80069da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80069de:	4622      	mov	r2, r4
 80069e0:	462b      	mov	r3, r5
 80069e2:	1891      	adds	r1, r2, r2
 80069e4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80069e6:	415b      	adcs	r3, r3
 80069e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80069ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80069ee:	4621      	mov	r1, r4
 80069f0:	eb12 0801 	adds.w	r8, r2, r1
 80069f4:	4629      	mov	r1, r5
 80069f6:	eb43 0901 	adc.w	r9, r3, r1
 80069fa:	f04f 0200 	mov.w	r2, #0
 80069fe:	f04f 0300 	mov.w	r3, #0
 8006a02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a0e:	4690      	mov	r8, r2
 8006a10:	4699      	mov	r9, r3
 8006a12:	4623      	mov	r3, r4
 8006a14:	eb18 0303 	adds.w	r3, r8, r3
 8006a18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006a1c:	462b      	mov	r3, r5
 8006a1e:	eb49 0303 	adc.w	r3, r9, r3
 8006a22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006a32:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006a36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006a3a:	460b      	mov	r3, r1
 8006a3c:	18db      	adds	r3, r3, r3
 8006a3e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a40:	4613      	mov	r3, r2
 8006a42:	eb42 0303 	adc.w	r3, r2, r3
 8006a46:	657b      	str	r3, [r7, #84]	@ 0x54
 8006a48:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006a4c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006a50:	f7f9 fc0e 	bl	8000270 <__aeabi_uldivmod>
 8006a54:	4602      	mov	r2, r0
 8006a56:	460b      	mov	r3, r1
 8006a58:	4b61      	ldr	r3, [pc, #388]	@ (8006be0 <UART_SetConfig+0x2d4>)
 8006a5a:	fba3 2302 	umull	r2, r3, r3, r2
 8006a5e:	095b      	lsrs	r3, r3, #5
 8006a60:	011c      	lsls	r4, r3, #4
 8006a62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a66:	2200      	movs	r2, #0
 8006a68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006a6c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006a70:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006a74:	4642      	mov	r2, r8
 8006a76:	464b      	mov	r3, r9
 8006a78:	1891      	adds	r1, r2, r2
 8006a7a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006a7c:	415b      	adcs	r3, r3
 8006a7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a80:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006a84:	4641      	mov	r1, r8
 8006a86:	eb12 0a01 	adds.w	sl, r2, r1
 8006a8a:	4649      	mov	r1, r9
 8006a8c:	eb43 0b01 	adc.w	fp, r3, r1
 8006a90:	f04f 0200 	mov.w	r2, #0
 8006a94:	f04f 0300 	mov.w	r3, #0
 8006a98:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006a9c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006aa0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006aa4:	4692      	mov	sl, r2
 8006aa6:	469b      	mov	fp, r3
 8006aa8:	4643      	mov	r3, r8
 8006aaa:	eb1a 0303 	adds.w	r3, sl, r3
 8006aae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006ab2:	464b      	mov	r3, r9
 8006ab4:	eb4b 0303 	adc.w	r3, fp, r3
 8006ab8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006ac8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006acc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	18db      	adds	r3, r3, r3
 8006ad4:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	eb42 0303 	adc.w	r3, r2, r3
 8006adc:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ade:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006ae2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006ae6:	f7f9 fbc3 	bl	8000270 <__aeabi_uldivmod>
 8006aea:	4602      	mov	r2, r0
 8006aec:	460b      	mov	r3, r1
 8006aee:	4611      	mov	r1, r2
 8006af0:	4b3b      	ldr	r3, [pc, #236]	@ (8006be0 <UART_SetConfig+0x2d4>)
 8006af2:	fba3 2301 	umull	r2, r3, r3, r1
 8006af6:	095b      	lsrs	r3, r3, #5
 8006af8:	2264      	movs	r2, #100	@ 0x64
 8006afa:	fb02 f303 	mul.w	r3, r2, r3
 8006afe:	1acb      	subs	r3, r1, r3
 8006b00:	00db      	lsls	r3, r3, #3
 8006b02:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006b06:	4b36      	ldr	r3, [pc, #216]	@ (8006be0 <UART_SetConfig+0x2d4>)
 8006b08:	fba3 2302 	umull	r2, r3, r3, r2
 8006b0c:	095b      	lsrs	r3, r3, #5
 8006b0e:	005b      	lsls	r3, r3, #1
 8006b10:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006b14:	441c      	add	r4, r3
 8006b16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006b20:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006b24:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006b28:	4642      	mov	r2, r8
 8006b2a:	464b      	mov	r3, r9
 8006b2c:	1891      	adds	r1, r2, r2
 8006b2e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006b30:	415b      	adcs	r3, r3
 8006b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006b38:	4641      	mov	r1, r8
 8006b3a:	1851      	adds	r1, r2, r1
 8006b3c:	6339      	str	r1, [r7, #48]	@ 0x30
 8006b3e:	4649      	mov	r1, r9
 8006b40:	414b      	adcs	r3, r1
 8006b42:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b44:	f04f 0200 	mov.w	r2, #0
 8006b48:	f04f 0300 	mov.w	r3, #0
 8006b4c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006b50:	4659      	mov	r1, fp
 8006b52:	00cb      	lsls	r3, r1, #3
 8006b54:	4651      	mov	r1, sl
 8006b56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b5a:	4651      	mov	r1, sl
 8006b5c:	00ca      	lsls	r2, r1, #3
 8006b5e:	4610      	mov	r0, r2
 8006b60:	4619      	mov	r1, r3
 8006b62:	4603      	mov	r3, r0
 8006b64:	4642      	mov	r2, r8
 8006b66:	189b      	adds	r3, r3, r2
 8006b68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006b6c:	464b      	mov	r3, r9
 8006b6e:	460a      	mov	r2, r1
 8006b70:	eb42 0303 	adc.w	r3, r2, r3
 8006b74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006b84:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006b88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	18db      	adds	r3, r3, r3
 8006b90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b92:	4613      	mov	r3, r2
 8006b94:	eb42 0303 	adc.w	r3, r2, r3
 8006b98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006b9e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006ba2:	f7f9 fb65 	bl	8000270 <__aeabi_uldivmod>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	460b      	mov	r3, r1
 8006baa:	4b0d      	ldr	r3, [pc, #52]	@ (8006be0 <UART_SetConfig+0x2d4>)
 8006bac:	fba3 1302 	umull	r1, r3, r3, r2
 8006bb0:	095b      	lsrs	r3, r3, #5
 8006bb2:	2164      	movs	r1, #100	@ 0x64
 8006bb4:	fb01 f303 	mul.w	r3, r1, r3
 8006bb8:	1ad3      	subs	r3, r2, r3
 8006bba:	00db      	lsls	r3, r3, #3
 8006bbc:	3332      	adds	r3, #50	@ 0x32
 8006bbe:	4a08      	ldr	r2, [pc, #32]	@ (8006be0 <UART_SetConfig+0x2d4>)
 8006bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8006bc4:	095b      	lsrs	r3, r3, #5
 8006bc6:	f003 0207 	and.w	r2, r3, #7
 8006bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4422      	add	r2, r4
 8006bd2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006bd4:	e106      	b.n	8006de4 <UART_SetConfig+0x4d8>
 8006bd6:	bf00      	nop
 8006bd8:	40011000 	.word	0x40011000
 8006bdc:	40011400 	.word	0x40011400
 8006be0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006be4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006be8:	2200      	movs	r2, #0
 8006bea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006bee:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006bf2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006bf6:	4642      	mov	r2, r8
 8006bf8:	464b      	mov	r3, r9
 8006bfa:	1891      	adds	r1, r2, r2
 8006bfc:	6239      	str	r1, [r7, #32]
 8006bfe:	415b      	adcs	r3, r3
 8006c00:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006c06:	4641      	mov	r1, r8
 8006c08:	1854      	adds	r4, r2, r1
 8006c0a:	4649      	mov	r1, r9
 8006c0c:	eb43 0501 	adc.w	r5, r3, r1
 8006c10:	f04f 0200 	mov.w	r2, #0
 8006c14:	f04f 0300 	mov.w	r3, #0
 8006c18:	00eb      	lsls	r3, r5, #3
 8006c1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006c1e:	00e2      	lsls	r2, r4, #3
 8006c20:	4614      	mov	r4, r2
 8006c22:	461d      	mov	r5, r3
 8006c24:	4643      	mov	r3, r8
 8006c26:	18e3      	adds	r3, r4, r3
 8006c28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006c2c:	464b      	mov	r3, r9
 8006c2e:	eb45 0303 	adc.w	r3, r5, r3
 8006c32:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006c42:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006c46:	f04f 0200 	mov.w	r2, #0
 8006c4a:	f04f 0300 	mov.w	r3, #0
 8006c4e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006c52:	4629      	mov	r1, r5
 8006c54:	008b      	lsls	r3, r1, #2
 8006c56:	4621      	mov	r1, r4
 8006c58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c5c:	4621      	mov	r1, r4
 8006c5e:	008a      	lsls	r2, r1, #2
 8006c60:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006c64:	f7f9 fb04 	bl	8000270 <__aeabi_uldivmod>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	460b      	mov	r3, r1
 8006c6c:	4b60      	ldr	r3, [pc, #384]	@ (8006df0 <UART_SetConfig+0x4e4>)
 8006c6e:	fba3 2302 	umull	r2, r3, r3, r2
 8006c72:	095b      	lsrs	r3, r3, #5
 8006c74:	011c      	lsls	r4, r3, #4
 8006c76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006c80:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006c84:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006c88:	4642      	mov	r2, r8
 8006c8a:	464b      	mov	r3, r9
 8006c8c:	1891      	adds	r1, r2, r2
 8006c8e:	61b9      	str	r1, [r7, #24]
 8006c90:	415b      	adcs	r3, r3
 8006c92:	61fb      	str	r3, [r7, #28]
 8006c94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c98:	4641      	mov	r1, r8
 8006c9a:	1851      	adds	r1, r2, r1
 8006c9c:	6139      	str	r1, [r7, #16]
 8006c9e:	4649      	mov	r1, r9
 8006ca0:	414b      	adcs	r3, r1
 8006ca2:	617b      	str	r3, [r7, #20]
 8006ca4:	f04f 0200 	mov.w	r2, #0
 8006ca8:	f04f 0300 	mov.w	r3, #0
 8006cac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006cb0:	4659      	mov	r1, fp
 8006cb2:	00cb      	lsls	r3, r1, #3
 8006cb4:	4651      	mov	r1, sl
 8006cb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006cba:	4651      	mov	r1, sl
 8006cbc:	00ca      	lsls	r2, r1, #3
 8006cbe:	4610      	mov	r0, r2
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	4642      	mov	r2, r8
 8006cc6:	189b      	adds	r3, r3, r2
 8006cc8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006ccc:	464b      	mov	r3, r9
 8006cce:	460a      	mov	r2, r1
 8006cd0:	eb42 0303 	adc.w	r3, r2, r3
 8006cd4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006ce2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006ce4:	f04f 0200 	mov.w	r2, #0
 8006ce8:	f04f 0300 	mov.w	r3, #0
 8006cec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006cf0:	4649      	mov	r1, r9
 8006cf2:	008b      	lsls	r3, r1, #2
 8006cf4:	4641      	mov	r1, r8
 8006cf6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006cfa:	4641      	mov	r1, r8
 8006cfc:	008a      	lsls	r2, r1, #2
 8006cfe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006d02:	f7f9 fab5 	bl	8000270 <__aeabi_uldivmod>
 8006d06:	4602      	mov	r2, r0
 8006d08:	460b      	mov	r3, r1
 8006d0a:	4611      	mov	r1, r2
 8006d0c:	4b38      	ldr	r3, [pc, #224]	@ (8006df0 <UART_SetConfig+0x4e4>)
 8006d0e:	fba3 2301 	umull	r2, r3, r3, r1
 8006d12:	095b      	lsrs	r3, r3, #5
 8006d14:	2264      	movs	r2, #100	@ 0x64
 8006d16:	fb02 f303 	mul.w	r3, r2, r3
 8006d1a:	1acb      	subs	r3, r1, r3
 8006d1c:	011b      	lsls	r3, r3, #4
 8006d1e:	3332      	adds	r3, #50	@ 0x32
 8006d20:	4a33      	ldr	r2, [pc, #204]	@ (8006df0 <UART_SetConfig+0x4e4>)
 8006d22:	fba2 2303 	umull	r2, r3, r2, r3
 8006d26:	095b      	lsrs	r3, r3, #5
 8006d28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006d2c:	441c      	add	r4, r3
 8006d2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d32:	2200      	movs	r2, #0
 8006d34:	673b      	str	r3, [r7, #112]	@ 0x70
 8006d36:	677a      	str	r2, [r7, #116]	@ 0x74
 8006d38:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006d3c:	4642      	mov	r2, r8
 8006d3e:	464b      	mov	r3, r9
 8006d40:	1891      	adds	r1, r2, r2
 8006d42:	60b9      	str	r1, [r7, #8]
 8006d44:	415b      	adcs	r3, r3
 8006d46:	60fb      	str	r3, [r7, #12]
 8006d48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d4c:	4641      	mov	r1, r8
 8006d4e:	1851      	adds	r1, r2, r1
 8006d50:	6039      	str	r1, [r7, #0]
 8006d52:	4649      	mov	r1, r9
 8006d54:	414b      	adcs	r3, r1
 8006d56:	607b      	str	r3, [r7, #4]
 8006d58:	f04f 0200 	mov.w	r2, #0
 8006d5c:	f04f 0300 	mov.w	r3, #0
 8006d60:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006d64:	4659      	mov	r1, fp
 8006d66:	00cb      	lsls	r3, r1, #3
 8006d68:	4651      	mov	r1, sl
 8006d6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d6e:	4651      	mov	r1, sl
 8006d70:	00ca      	lsls	r2, r1, #3
 8006d72:	4610      	mov	r0, r2
 8006d74:	4619      	mov	r1, r3
 8006d76:	4603      	mov	r3, r0
 8006d78:	4642      	mov	r2, r8
 8006d7a:	189b      	adds	r3, r3, r2
 8006d7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006d7e:	464b      	mov	r3, r9
 8006d80:	460a      	mov	r2, r1
 8006d82:	eb42 0303 	adc.w	r3, r2, r3
 8006d86:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	663b      	str	r3, [r7, #96]	@ 0x60
 8006d92:	667a      	str	r2, [r7, #100]	@ 0x64
 8006d94:	f04f 0200 	mov.w	r2, #0
 8006d98:	f04f 0300 	mov.w	r3, #0
 8006d9c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006da0:	4649      	mov	r1, r9
 8006da2:	008b      	lsls	r3, r1, #2
 8006da4:	4641      	mov	r1, r8
 8006da6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006daa:	4641      	mov	r1, r8
 8006dac:	008a      	lsls	r2, r1, #2
 8006dae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006db2:	f7f9 fa5d 	bl	8000270 <__aeabi_uldivmod>
 8006db6:	4602      	mov	r2, r0
 8006db8:	460b      	mov	r3, r1
 8006dba:	4b0d      	ldr	r3, [pc, #52]	@ (8006df0 <UART_SetConfig+0x4e4>)
 8006dbc:	fba3 1302 	umull	r1, r3, r3, r2
 8006dc0:	095b      	lsrs	r3, r3, #5
 8006dc2:	2164      	movs	r1, #100	@ 0x64
 8006dc4:	fb01 f303 	mul.w	r3, r1, r3
 8006dc8:	1ad3      	subs	r3, r2, r3
 8006dca:	011b      	lsls	r3, r3, #4
 8006dcc:	3332      	adds	r3, #50	@ 0x32
 8006dce:	4a08      	ldr	r2, [pc, #32]	@ (8006df0 <UART_SetConfig+0x4e4>)
 8006dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8006dd4:	095b      	lsrs	r3, r3, #5
 8006dd6:	f003 020f 	and.w	r2, r3, #15
 8006dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4422      	add	r2, r4
 8006de2:	609a      	str	r2, [r3, #8]
}
 8006de4:	bf00      	nop
 8006de6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006dea:	46bd      	mov	sp, r7
 8006dec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006df0:	51eb851f 	.word	0x51eb851f

08006df4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006df4:	b084      	sub	sp, #16
 8006df6:	b580      	push	{r7, lr}
 8006df8:	b084      	sub	sp, #16
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
 8006dfe:	f107 001c 	add.w	r0, r7, #28
 8006e02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e06:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d123      	bne.n	8006e56 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e12:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	68db      	ldr	r3, [r3, #12]
 8006e1e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006e22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	68db      	ldr	r3, [r3, #12]
 8006e2e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006e36:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d105      	bne.n	8006e4a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	68db      	ldr	r3, [r3, #12]
 8006e42:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f001 fae8 	bl	8008420 <USB_CoreReset>
 8006e50:	4603      	mov	r3, r0
 8006e52:	73fb      	strb	r3, [r7, #15]
 8006e54:	e01b      	b.n	8006e8e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	68db      	ldr	r3, [r3, #12]
 8006e5a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f001 fadc 	bl	8008420 <USB_CoreReset>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006e6c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d106      	bne.n	8006e82 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e78:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	639a      	str	r2, [r3, #56]	@ 0x38
 8006e80:	e005      	b.n	8006e8e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e86:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006e8e:	7fbb      	ldrb	r3, [r7, #30]
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d10b      	bne.n	8006eac <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	f043 0206 	orr.w	r2, r3, #6
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	f043 0220 	orr.w	r2, r3, #32
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3710      	adds	r7, #16
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006eb8:	b004      	add	sp, #16
 8006eba:	4770      	bx	lr

08006ebc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b087      	sub	sp, #28
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	60f8      	str	r0, [r7, #12]
 8006ec4:	60b9      	str	r1, [r7, #8]
 8006ec6:	4613      	mov	r3, r2
 8006ec8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006eca:	79fb      	ldrb	r3, [r7, #7]
 8006ecc:	2b02      	cmp	r3, #2
 8006ece:	d165      	bne.n	8006f9c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	4a41      	ldr	r2, [pc, #260]	@ (8006fd8 <USB_SetTurnaroundTime+0x11c>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d906      	bls.n	8006ee6 <USB_SetTurnaroundTime+0x2a>
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	4a40      	ldr	r2, [pc, #256]	@ (8006fdc <USB_SetTurnaroundTime+0x120>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d202      	bcs.n	8006ee6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006ee0:	230f      	movs	r3, #15
 8006ee2:	617b      	str	r3, [r7, #20]
 8006ee4:	e062      	b.n	8006fac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	4a3c      	ldr	r2, [pc, #240]	@ (8006fdc <USB_SetTurnaroundTime+0x120>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d306      	bcc.n	8006efc <USB_SetTurnaroundTime+0x40>
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	4a3b      	ldr	r2, [pc, #236]	@ (8006fe0 <USB_SetTurnaroundTime+0x124>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d202      	bcs.n	8006efc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006ef6:	230e      	movs	r3, #14
 8006ef8:	617b      	str	r3, [r7, #20]
 8006efa:	e057      	b.n	8006fac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	4a38      	ldr	r2, [pc, #224]	@ (8006fe0 <USB_SetTurnaroundTime+0x124>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d306      	bcc.n	8006f12 <USB_SetTurnaroundTime+0x56>
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	4a37      	ldr	r2, [pc, #220]	@ (8006fe4 <USB_SetTurnaroundTime+0x128>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d202      	bcs.n	8006f12 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006f0c:	230d      	movs	r3, #13
 8006f0e:	617b      	str	r3, [r7, #20]
 8006f10:	e04c      	b.n	8006fac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	4a33      	ldr	r2, [pc, #204]	@ (8006fe4 <USB_SetTurnaroundTime+0x128>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d306      	bcc.n	8006f28 <USB_SetTurnaroundTime+0x6c>
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	4a32      	ldr	r2, [pc, #200]	@ (8006fe8 <USB_SetTurnaroundTime+0x12c>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d802      	bhi.n	8006f28 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006f22:	230c      	movs	r3, #12
 8006f24:	617b      	str	r3, [r7, #20]
 8006f26:	e041      	b.n	8006fac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	4a2f      	ldr	r2, [pc, #188]	@ (8006fe8 <USB_SetTurnaroundTime+0x12c>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d906      	bls.n	8006f3e <USB_SetTurnaroundTime+0x82>
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	4a2e      	ldr	r2, [pc, #184]	@ (8006fec <USB_SetTurnaroundTime+0x130>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d802      	bhi.n	8006f3e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006f38:	230b      	movs	r3, #11
 8006f3a:	617b      	str	r3, [r7, #20]
 8006f3c:	e036      	b.n	8006fac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	4a2a      	ldr	r2, [pc, #168]	@ (8006fec <USB_SetTurnaroundTime+0x130>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d906      	bls.n	8006f54 <USB_SetTurnaroundTime+0x98>
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	4a29      	ldr	r2, [pc, #164]	@ (8006ff0 <USB_SetTurnaroundTime+0x134>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d802      	bhi.n	8006f54 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006f4e:	230a      	movs	r3, #10
 8006f50:	617b      	str	r3, [r7, #20]
 8006f52:	e02b      	b.n	8006fac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	4a26      	ldr	r2, [pc, #152]	@ (8006ff0 <USB_SetTurnaroundTime+0x134>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d906      	bls.n	8006f6a <USB_SetTurnaroundTime+0xae>
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	4a25      	ldr	r2, [pc, #148]	@ (8006ff4 <USB_SetTurnaroundTime+0x138>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d202      	bcs.n	8006f6a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006f64:	2309      	movs	r3, #9
 8006f66:	617b      	str	r3, [r7, #20]
 8006f68:	e020      	b.n	8006fac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	4a21      	ldr	r2, [pc, #132]	@ (8006ff4 <USB_SetTurnaroundTime+0x138>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d306      	bcc.n	8006f80 <USB_SetTurnaroundTime+0xc4>
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	4a20      	ldr	r2, [pc, #128]	@ (8006ff8 <USB_SetTurnaroundTime+0x13c>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d802      	bhi.n	8006f80 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006f7a:	2308      	movs	r3, #8
 8006f7c:	617b      	str	r3, [r7, #20]
 8006f7e:	e015      	b.n	8006fac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	4a1d      	ldr	r2, [pc, #116]	@ (8006ff8 <USB_SetTurnaroundTime+0x13c>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d906      	bls.n	8006f96 <USB_SetTurnaroundTime+0xda>
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	4a1c      	ldr	r2, [pc, #112]	@ (8006ffc <USB_SetTurnaroundTime+0x140>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d202      	bcs.n	8006f96 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006f90:	2307      	movs	r3, #7
 8006f92:	617b      	str	r3, [r7, #20]
 8006f94:	e00a      	b.n	8006fac <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006f96:	2306      	movs	r3, #6
 8006f98:	617b      	str	r3, [r7, #20]
 8006f9a:	e007      	b.n	8006fac <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006f9c:	79fb      	ldrb	r3, [r7, #7]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d102      	bne.n	8006fa8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006fa2:	2309      	movs	r3, #9
 8006fa4:	617b      	str	r3, [r7, #20]
 8006fa6:	e001      	b.n	8006fac <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006fa8:	2309      	movs	r3, #9
 8006faa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	68db      	ldr	r3, [r3, #12]
 8006fb0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	68da      	ldr	r2, [r3, #12]
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	029b      	lsls	r3, r3, #10
 8006fc0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006fc4:	431a      	orrs	r2, r3
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006fca:	2300      	movs	r3, #0
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	371c      	adds	r7, #28
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr
 8006fd8:	00d8acbf 	.word	0x00d8acbf
 8006fdc:	00e4e1c0 	.word	0x00e4e1c0
 8006fe0:	00f42400 	.word	0x00f42400
 8006fe4:	01067380 	.word	0x01067380
 8006fe8:	011a499f 	.word	0x011a499f
 8006fec:	01312cff 	.word	0x01312cff
 8006ff0:	014ca43f 	.word	0x014ca43f
 8006ff4:	016e3600 	.word	0x016e3600
 8006ff8:	01a6ab1f 	.word	0x01a6ab1f
 8006ffc:	01e84800 	.word	0x01e84800

08007000 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	f043 0201 	orr.w	r2, r3, #1
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007014:	2300      	movs	r3, #0
}
 8007016:	4618      	mov	r0, r3
 8007018:	370c      	adds	r7, #12
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr

08007022 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007022:	b480      	push	{r7}
 8007024:	b083      	sub	sp, #12
 8007026:	af00      	add	r7, sp, #0
 8007028:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	f023 0201 	bic.w	r2, r3, #1
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007036:	2300      	movs	r3, #0
}
 8007038:	4618      	mov	r0, r3
 800703a:	370c      	adds	r7, #12
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr

08007044 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	460b      	mov	r3, r1
 800704e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007050:	2300      	movs	r3, #0
 8007052:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	68db      	ldr	r3, [r3, #12]
 8007058:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007060:	78fb      	ldrb	r3, [r7, #3]
 8007062:	2b01      	cmp	r3, #1
 8007064:	d115      	bne.n	8007092 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	68db      	ldr	r3, [r3, #12]
 800706a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007072:	200a      	movs	r0, #10
 8007074:	f7fa fa82 	bl	800157c <HAL_Delay>
      ms += 10U;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	330a      	adds	r3, #10
 800707c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f001 f93f 	bl	8008302 <USB_GetMode>
 8007084:	4603      	mov	r3, r0
 8007086:	2b01      	cmp	r3, #1
 8007088:	d01e      	beq.n	80070c8 <USB_SetCurrentMode+0x84>
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2bc7      	cmp	r3, #199	@ 0xc7
 800708e:	d9f0      	bls.n	8007072 <USB_SetCurrentMode+0x2e>
 8007090:	e01a      	b.n	80070c8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007092:	78fb      	ldrb	r3, [r7, #3]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d115      	bne.n	80070c4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	68db      	ldr	r3, [r3, #12]
 800709c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80070a4:	200a      	movs	r0, #10
 80070a6:	f7fa fa69 	bl	800157c <HAL_Delay>
      ms += 10U;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	330a      	adds	r3, #10
 80070ae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f001 f926 	bl	8008302 <USB_GetMode>
 80070b6:	4603      	mov	r3, r0
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d005      	beq.n	80070c8 <USB_SetCurrentMode+0x84>
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2bc7      	cmp	r3, #199	@ 0xc7
 80070c0:	d9f0      	bls.n	80070a4 <USB_SetCurrentMode+0x60>
 80070c2:	e001      	b.n	80070c8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80070c4:	2301      	movs	r3, #1
 80070c6:	e005      	b.n	80070d4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2bc8      	cmp	r3, #200	@ 0xc8
 80070cc:	d101      	bne.n	80070d2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	e000      	b.n	80070d4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80070d2:	2300      	movs	r3, #0
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3710      	adds	r7, #16
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80070dc:	b084      	sub	sp, #16
 80070de:	b580      	push	{r7, lr}
 80070e0:	b086      	sub	sp, #24
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	6078      	str	r0, [r7, #4]
 80070e6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80070ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80070ee:	2300      	movs	r3, #0
 80070f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80070f6:	2300      	movs	r3, #0
 80070f8:	613b      	str	r3, [r7, #16]
 80070fa:	e009      	b.n	8007110 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	3340      	adds	r3, #64	@ 0x40
 8007102:	009b      	lsls	r3, r3, #2
 8007104:	4413      	add	r3, r2
 8007106:	2200      	movs	r2, #0
 8007108:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	3301      	adds	r3, #1
 800710e:	613b      	str	r3, [r7, #16]
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	2b0e      	cmp	r3, #14
 8007114:	d9f2      	bls.n	80070fc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007116:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800711a:	2b00      	cmp	r3, #0
 800711c:	d11c      	bne.n	8007158 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	68fa      	ldr	r2, [r7, #12]
 8007128:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800712c:	f043 0302 	orr.w	r3, r3, #2
 8007130:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007136:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007142:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800714e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	639a      	str	r2, [r3, #56]	@ 0x38
 8007156:	e00b      	b.n	8007170 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800715c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007168:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007176:	461a      	mov	r2, r3
 8007178:	2300      	movs	r3, #0
 800717a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800717c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007180:	2b01      	cmp	r3, #1
 8007182:	d10d      	bne.n	80071a0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007184:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007188:	2b00      	cmp	r3, #0
 800718a:	d104      	bne.n	8007196 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800718c:	2100      	movs	r1, #0
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 f968 	bl	8007464 <USB_SetDevSpeed>
 8007194:	e008      	b.n	80071a8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007196:	2101      	movs	r1, #1
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 f963 	bl	8007464 <USB_SetDevSpeed>
 800719e:	e003      	b.n	80071a8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80071a0:	2103      	movs	r1, #3
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 f95e 	bl	8007464 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80071a8:	2110      	movs	r1, #16
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 f8fa 	bl	80073a4 <USB_FlushTxFifo>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d001      	beq.n	80071ba <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80071b6:	2301      	movs	r3, #1
 80071b8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 f924 	bl	8007408 <USB_FlushRxFifo>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d001      	beq.n	80071ca <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071d0:	461a      	mov	r2, r3
 80071d2:	2300      	movs	r3, #0
 80071d4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071dc:	461a      	mov	r2, r3
 80071de:	2300      	movs	r3, #0
 80071e0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071e8:	461a      	mov	r2, r3
 80071ea:	2300      	movs	r3, #0
 80071ec:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80071ee:	2300      	movs	r3, #0
 80071f0:	613b      	str	r3, [r7, #16]
 80071f2:	e043      	b.n	800727c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	015a      	lsls	r2, r3, #5
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	4413      	add	r3, r2
 80071fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007206:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800720a:	d118      	bne.n	800723e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d10a      	bne.n	8007228 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	015a      	lsls	r2, r3, #5
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	4413      	add	r3, r2
 800721a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800721e:	461a      	mov	r2, r3
 8007220:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007224:	6013      	str	r3, [r2, #0]
 8007226:	e013      	b.n	8007250 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	015a      	lsls	r2, r3, #5
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	4413      	add	r3, r2
 8007230:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007234:	461a      	mov	r2, r3
 8007236:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800723a:	6013      	str	r3, [r2, #0]
 800723c:	e008      	b.n	8007250 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	015a      	lsls	r2, r3, #5
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	4413      	add	r3, r2
 8007246:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800724a:	461a      	mov	r2, r3
 800724c:	2300      	movs	r3, #0
 800724e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	015a      	lsls	r2, r3, #5
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	4413      	add	r3, r2
 8007258:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800725c:	461a      	mov	r2, r3
 800725e:	2300      	movs	r3, #0
 8007260:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	015a      	lsls	r2, r3, #5
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	4413      	add	r3, r2
 800726a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800726e:	461a      	mov	r2, r3
 8007270:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007274:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	3301      	adds	r3, #1
 800727a:	613b      	str	r3, [r7, #16]
 800727c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007280:	461a      	mov	r2, r3
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	4293      	cmp	r3, r2
 8007286:	d3b5      	bcc.n	80071f4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007288:	2300      	movs	r3, #0
 800728a:	613b      	str	r3, [r7, #16]
 800728c:	e043      	b.n	8007316 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	015a      	lsls	r2, r3, #5
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	4413      	add	r3, r2
 8007296:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80072a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80072a4:	d118      	bne.n	80072d8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d10a      	bne.n	80072c2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	015a      	lsls	r2, r3, #5
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	4413      	add	r3, r2
 80072b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072b8:	461a      	mov	r2, r3
 80072ba:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80072be:	6013      	str	r3, [r2, #0]
 80072c0:	e013      	b.n	80072ea <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	015a      	lsls	r2, r3, #5
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	4413      	add	r3, r2
 80072ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072ce:	461a      	mov	r2, r3
 80072d0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80072d4:	6013      	str	r3, [r2, #0]
 80072d6:	e008      	b.n	80072ea <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	015a      	lsls	r2, r3, #5
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	4413      	add	r3, r2
 80072e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072e4:	461a      	mov	r2, r3
 80072e6:	2300      	movs	r3, #0
 80072e8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	015a      	lsls	r2, r3, #5
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	4413      	add	r3, r2
 80072f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072f6:	461a      	mov	r2, r3
 80072f8:	2300      	movs	r3, #0
 80072fa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	015a      	lsls	r2, r3, #5
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	4413      	add	r3, r2
 8007304:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007308:	461a      	mov	r2, r3
 800730a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800730e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	3301      	adds	r3, #1
 8007314:	613b      	str	r3, [r7, #16]
 8007316:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800731a:	461a      	mov	r2, r3
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	4293      	cmp	r3, r2
 8007320:	d3b5      	bcc.n	800728e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007328:	691b      	ldr	r3, [r3, #16]
 800732a:	68fa      	ldr	r2, [r7, #12]
 800732c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007330:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007334:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007342:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007344:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007348:	2b00      	cmp	r3, #0
 800734a:	d105      	bne.n	8007358 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	699b      	ldr	r3, [r3, #24]
 8007350:	f043 0210 	orr.w	r2, r3, #16
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	699a      	ldr	r2, [r3, #24]
 800735c:	4b10      	ldr	r3, [pc, #64]	@ (80073a0 <USB_DevInit+0x2c4>)
 800735e:	4313      	orrs	r3, r2
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007364:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007368:	2b00      	cmp	r3, #0
 800736a:	d005      	beq.n	8007378 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	699b      	ldr	r3, [r3, #24]
 8007370:	f043 0208 	orr.w	r2, r3, #8
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007378:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800737c:	2b01      	cmp	r3, #1
 800737e:	d107      	bne.n	8007390 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	699b      	ldr	r3, [r3, #24]
 8007384:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007388:	f043 0304 	orr.w	r3, r3, #4
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007390:	7dfb      	ldrb	r3, [r7, #23]
}
 8007392:	4618      	mov	r0, r3
 8007394:	3718      	adds	r7, #24
 8007396:	46bd      	mov	sp, r7
 8007398:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800739c:	b004      	add	sp, #16
 800739e:	4770      	bx	lr
 80073a0:	803c3800 	.word	0x803c3800

080073a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b085      	sub	sp, #20
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80073ae:	2300      	movs	r3, #0
 80073b0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	3301      	adds	r3, #1
 80073b6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80073be:	d901      	bls.n	80073c4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80073c0:	2303      	movs	r3, #3
 80073c2:	e01b      	b.n	80073fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	691b      	ldr	r3, [r3, #16]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	daf2      	bge.n	80073b2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80073cc:	2300      	movs	r3, #0
 80073ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	019b      	lsls	r3, r3, #6
 80073d4:	f043 0220 	orr.w	r2, r3, #32
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	3301      	adds	r3, #1
 80073e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80073e8:	d901      	bls.n	80073ee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80073ea:	2303      	movs	r3, #3
 80073ec:	e006      	b.n	80073fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	691b      	ldr	r3, [r3, #16]
 80073f2:	f003 0320 	and.w	r3, r3, #32
 80073f6:	2b20      	cmp	r3, #32
 80073f8:	d0f0      	beq.n	80073dc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80073fa:	2300      	movs	r3, #0
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3714      	adds	r7, #20
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr

08007408 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007408:	b480      	push	{r7}
 800740a:	b085      	sub	sp, #20
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007410:	2300      	movs	r3, #0
 8007412:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	3301      	adds	r3, #1
 8007418:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007420:	d901      	bls.n	8007426 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007422:	2303      	movs	r3, #3
 8007424:	e018      	b.n	8007458 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	691b      	ldr	r3, [r3, #16]
 800742a:	2b00      	cmp	r3, #0
 800742c:	daf2      	bge.n	8007414 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800742e:	2300      	movs	r3, #0
 8007430:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2210      	movs	r2, #16
 8007436:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	3301      	adds	r3, #1
 800743c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007444:	d901      	bls.n	800744a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007446:	2303      	movs	r3, #3
 8007448:	e006      	b.n	8007458 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	691b      	ldr	r3, [r3, #16]
 800744e:	f003 0310 	and.w	r3, r3, #16
 8007452:	2b10      	cmp	r3, #16
 8007454:	d0f0      	beq.n	8007438 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007456:	2300      	movs	r3, #0
}
 8007458:	4618      	mov	r0, r3
 800745a:	3714      	adds	r7, #20
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007464:	b480      	push	{r7}
 8007466:	b085      	sub	sp, #20
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	460b      	mov	r3, r1
 800746e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	78fb      	ldrb	r3, [r7, #3]
 800747e:	68f9      	ldr	r1, [r7, #12]
 8007480:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007484:	4313      	orrs	r3, r2
 8007486:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007488:	2300      	movs	r3, #0
}
 800748a:	4618      	mov	r0, r3
 800748c:	3714      	adds	r7, #20
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr

08007496 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007496:	b480      	push	{r7}
 8007498:	b087      	sub	sp, #28
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074a8:	689b      	ldr	r3, [r3, #8]
 80074aa:	f003 0306 	and.w	r3, r3, #6
 80074ae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d102      	bne.n	80074bc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80074b6:	2300      	movs	r3, #0
 80074b8:	75fb      	strb	r3, [r7, #23]
 80074ba:	e00a      	b.n	80074d2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2b02      	cmp	r3, #2
 80074c0:	d002      	beq.n	80074c8 <USB_GetDevSpeed+0x32>
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2b06      	cmp	r3, #6
 80074c6:	d102      	bne.n	80074ce <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80074c8:	2302      	movs	r3, #2
 80074ca:	75fb      	strb	r3, [r7, #23]
 80074cc:	e001      	b.n	80074d2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80074ce:	230f      	movs	r3, #15
 80074d0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80074d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	371c      	adds	r7, #28
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr

080074e0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b085      	sub	sp, #20
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	785b      	ldrb	r3, [r3, #1]
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d13a      	bne.n	8007572 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007502:	69da      	ldr	r2, [r3, #28]
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	f003 030f 	and.w	r3, r3, #15
 800750c:	2101      	movs	r1, #1
 800750e:	fa01 f303 	lsl.w	r3, r1, r3
 8007512:	b29b      	uxth	r3, r3
 8007514:	68f9      	ldr	r1, [r7, #12]
 8007516:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800751a:	4313      	orrs	r3, r2
 800751c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	015a      	lsls	r2, r3, #5
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	4413      	add	r3, r2
 8007526:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007530:	2b00      	cmp	r3, #0
 8007532:	d155      	bne.n	80075e0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	015a      	lsls	r2, r3, #5
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	4413      	add	r3, r2
 800753c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	791b      	ldrb	r3, [r3, #4]
 800754e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007550:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	059b      	lsls	r3, r3, #22
 8007556:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007558:	4313      	orrs	r3, r2
 800755a:	68ba      	ldr	r2, [r7, #8]
 800755c:	0151      	lsls	r1, r2, #5
 800755e:	68fa      	ldr	r2, [r7, #12]
 8007560:	440a      	add	r2, r1
 8007562:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007566:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800756a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800756e:	6013      	str	r3, [r2, #0]
 8007570:	e036      	b.n	80075e0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007578:	69da      	ldr	r2, [r3, #28]
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	f003 030f 	and.w	r3, r3, #15
 8007582:	2101      	movs	r1, #1
 8007584:	fa01 f303 	lsl.w	r3, r1, r3
 8007588:	041b      	lsls	r3, r3, #16
 800758a:	68f9      	ldr	r1, [r7, #12]
 800758c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007590:	4313      	orrs	r3, r2
 8007592:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	015a      	lsls	r2, r3, #5
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	4413      	add	r3, r2
 800759c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d11a      	bne.n	80075e0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	015a      	lsls	r2, r3, #5
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	4413      	add	r3, r2
 80075b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	791b      	ldrb	r3, [r3, #4]
 80075c4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80075c6:	430b      	orrs	r3, r1
 80075c8:	4313      	orrs	r3, r2
 80075ca:	68ba      	ldr	r2, [r7, #8]
 80075cc:	0151      	lsls	r1, r2, #5
 80075ce:	68fa      	ldr	r2, [r7, #12]
 80075d0:	440a      	add	r2, r1
 80075d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80075d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075de:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80075e0:	2300      	movs	r3, #0
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3714      	adds	r7, #20
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr
	...

080075f0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b085      	sub	sp, #20
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	785b      	ldrb	r3, [r3, #1]
 8007608:	2b01      	cmp	r3, #1
 800760a:	d161      	bne.n	80076d0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	015a      	lsls	r2, r3, #5
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	4413      	add	r3, r2
 8007614:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800761e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007622:	d11f      	bne.n	8007664 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	015a      	lsls	r2, r3, #5
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	4413      	add	r3, r2
 800762c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	68ba      	ldr	r2, [r7, #8]
 8007634:	0151      	lsls	r1, r2, #5
 8007636:	68fa      	ldr	r2, [r7, #12]
 8007638:	440a      	add	r2, r1
 800763a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800763e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007642:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	015a      	lsls	r2, r3, #5
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	4413      	add	r3, r2
 800764c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	68ba      	ldr	r2, [r7, #8]
 8007654:	0151      	lsls	r1, r2, #5
 8007656:	68fa      	ldr	r2, [r7, #12]
 8007658:	440a      	add	r2, r1
 800765a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800765e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007662:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800766a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	f003 030f 	and.w	r3, r3, #15
 8007674:	2101      	movs	r1, #1
 8007676:	fa01 f303 	lsl.w	r3, r1, r3
 800767a:	b29b      	uxth	r3, r3
 800767c:	43db      	mvns	r3, r3
 800767e:	68f9      	ldr	r1, [r7, #12]
 8007680:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007684:	4013      	ands	r3, r2
 8007686:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800768e:	69da      	ldr	r2, [r3, #28]
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	f003 030f 	and.w	r3, r3, #15
 8007698:	2101      	movs	r1, #1
 800769a:	fa01 f303 	lsl.w	r3, r1, r3
 800769e:	b29b      	uxth	r3, r3
 80076a0:	43db      	mvns	r3, r3
 80076a2:	68f9      	ldr	r1, [r7, #12]
 80076a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80076a8:	4013      	ands	r3, r2
 80076aa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	015a      	lsls	r2, r3, #5
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	4413      	add	r3, r2
 80076b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	0159      	lsls	r1, r3, #5
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	440b      	add	r3, r1
 80076c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076c6:	4619      	mov	r1, r3
 80076c8:	4b35      	ldr	r3, [pc, #212]	@ (80077a0 <USB_DeactivateEndpoint+0x1b0>)
 80076ca:	4013      	ands	r3, r2
 80076cc:	600b      	str	r3, [r1, #0]
 80076ce:	e060      	b.n	8007792 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	015a      	lsls	r2, r3, #5
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	4413      	add	r3, r2
 80076d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80076e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80076e6:	d11f      	bne.n	8007728 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	015a      	lsls	r2, r3, #5
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	4413      	add	r3, r2
 80076f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	68ba      	ldr	r2, [r7, #8]
 80076f8:	0151      	lsls	r1, r2, #5
 80076fa:	68fa      	ldr	r2, [r7, #12]
 80076fc:	440a      	add	r2, r1
 80076fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007702:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007706:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	015a      	lsls	r2, r3, #5
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	4413      	add	r3, r2
 8007710:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	68ba      	ldr	r2, [r7, #8]
 8007718:	0151      	lsls	r1, r2, #5
 800771a:	68fa      	ldr	r2, [r7, #12]
 800771c:	440a      	add	r2, r1
 800771e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007722:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007726:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800772e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	f003 030f 	and.w	r3, r3, #15
 8007738:	2101      	movs	r1, #1
 800773a:	fa01 f303 	lsl.w	r3, r1, r3
 800773e:	041b      	lsls	r3, r3, #16
 8007740:	43db      	mvns	r3, r3
 8007742:	68f9      	ldr	r1, [r7, #12]
 8007744:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007748:	4013      	ands	r3, r2
 800774a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007752:	69da      	ldr	r2, [r3, #28]
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	f003 030f 	and.w	r3, r3, #15
 800775c:	2101      	movs	r1, #1
 800775e:	fa01 f303 	lsl.w	r3, r1, r3
 8007762:	041b      	lsls	r3, r3, #16
 8007764:	43db      	mvns	r3, r3
 8007766:	68f9      	ldr	r1, [r7, #12]
 8007768:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800776c:	4013      	ands	r3, r2
 800776e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	015a      	lsls	r2, r3, #5
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	4413      	add	r3, r2
 8007778:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	0159      	lsls	r1, r3, #5
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	440b      	add	r3, r1
 8007786:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800778a:	4619      	mov	r1, r3
 800778c:	4b05      	ldr	r3, [pc, #20]	@ (80077a4 <USB_DeactivateEndpoint+0x1b4>)
 800778e:	4013      	ands	r3, r2
 8007790:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007792:	2300      	movs	r3, #0
}
 8007794:	4618      	mov	r0, r3
 8007796:	3714      	adds	r7, #20
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr
 80077a0:	ec337800 	.word	0xec337800
 80077a4:	eff37800 	.word	0xeff37800

080077a8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b08a      	sub	sp, #40	@ 0x28
 80077ac:	af02      	add	r7, sp, #8
 80077ae:	60f8      	str	r0, [r7, #12]
 80077b0:	60b9      	str	r1, [r7, #8]
 80077b2:	4613      	mov	r3, r2
 80077b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	785b      	ldrb	r3, [r3, #1]
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	f040 817f 	bne.w	8007ac8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	691b      	ldr	r3, [r3, #16]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d132      	bne.n	8007838 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80077d2:	69bb      	ldr	r3, [r7, #24]
 80077d4:	015a      	lsls	r2, r3, #5
 80077d6:	69fb      	ldr	r3, [r7, #28]
 80077d8:	4413      	add	r3, r2
 80077da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077de:	691b      	ldr	r3, [r3, #16]
 80077e0:	69ba      	ldr	r2, [r7, #24]
 80077e2:	0151      	lsls	r1, r2, #5
 80077e4:	69fa      	ldr	r2, [r7, #28]
 80077e6:	440a      	add	r2, r1
 80077e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80077ec:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80077f0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80077f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80077f6:	69bb      	ldr	r3, [r7, #24]
 80077f8:	015a      	lsls	r2, r3, #5
 80077fa:	69fb      	ldr	r3, [r7, #28]
 80077fc:	4413      	add	r3, r2
 80077fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007802:	691b      	ldr	r3, [r3, #16]
 8007804:	69ba      	ldr	r2, [r7, #24]
 8007806:	0151      	lsls	r1, r2, #5
 8007808:	69fa      	ldr	r2, [r7, #28]
 800780a:	440a      	add	r2, r1
 800780c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007810:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007814:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007816:	69bb      	ldr	r3, [r7, #24]
 8007818:	015a      	lsls	r2, r3, #5
 800781a:	69fb      	ldr	r3, [r7, #28]
 800781c:	4413      	add	r3, r2
 800781e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007822:	691b      	ldr	r3, [r3, #16]
 8007824:	69ba      	ldr	r2, [r7, #24]
 8007826:	0151      	lsls	r1, r2, #5
 8007828:	69fa      	ldr	r2, [r7, #28]
 800782a:	440a      	add	r2, r1
 800782c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007830:	0cdb      	lsrs	r3, r3, #19
 8007832:	04db      	lsls	r3, r3, #19
 8007834:	6113      	str	r3, [r2, #16]
 8007836:	e097      	b.n	8007968 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007838:	69bb      	ldr	r3, [r7, #24]
 800783a:	015a      	lsls	r2, r3, #5
 800783c:	69fb      	ldr	r3, [r7, #28]
 800783e:	4413      	add	r3, r2
 8007840:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007844:	691b      	ldr	r3, [r3, #16]
 8007846:	69ba      	ldr	r2, [r7, #24]
 8007848:	0151      	lsls	r1, r2, #5
 800784a:	69fa      	ldr	r2, [r7, #28]
 800784c:	440a      	add	r2, r1
 800784e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007852:	0cdb      	lsrs	r3, r3, #19
 8007854:	04db      	lsls	r3, r3, #19
 8007856:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007858:	69bb      	ldr	r3, [r7, #24]
 800785a:	015a      	lsls	r2, r3, #5
 800785c:	69fb      	ldr	r3, [r7, #28]
 800785e:	4413      	add	r3, r2
 8007860:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007864:	691b      	ldr	r3, [r3, #16]
 8007866:	69ba      	ldr	r2, [r7, #24]
 8007868:	0151      	lsls	r1, r2, #5
 800786a:	69fa      	ldr	r2, [r7, #28]
 800786c:	440a      	add	r2, r1
 800786e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007872:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007876:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800787a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800787c:	69bb      	ldr	r3, [r7, #24]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d11a      	bne.n	80078b8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	691a      	ldr	r2, [r3, #16]
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	429a      	cmp	r2, r3
 800788c:	d903      	bls.n	8007896 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	689a      	ldr	r2, [r3, #8]
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007896:	69bb      	ldr	r3, [r7, #24]
 8007898:	015a      	lsls	r2, r3, #5
 800789a:	69fb      	ldr	r3, [r7, #28]
 800789c:	4413      	add	r3, r2
 800789e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078a2:	691b      	ldr	r3, [r3, #16]
 80078a4:	69ba      	ldr	r2, [r7, #24]
 80078a6:	0151      	lsls	r1, r2, #5
 80078a8:	69fa      	ldr	r2, [r7, #28]
 80078aa:	440a      	add	r2, r1
 80078ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80078b0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80078b4:	6113      	str	r3, [r2, #16]
 80078b6:	e044      	b.n	8007942 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	691a      	ldr	r2, [r3, #16]
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	4413      	add	r3, r2
 80078c2:	1e5a      	subs	r2, r3, #1
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80078cc:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 80078ce:	69bb      	ldr	r3, [r7, #24]
 80078d0:	015a      	lsls	r2, r3, #5
 80078d2:	69fb      	ldr	r3, [r7, #28]
 80078d4:	4413      	add	r3, r2
 80078d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078da:	691a      	ldr	r2, [r3, #16]
 80078dc:	8afb      	ldrh	r3, [r7, #22]
 80078de:	04d9      	lsls	r1, r3, #19
 80078e0:	4ba4      	ldr	r3, [pc, #656]	@ (8007b74 <USB_EPStartXfer+0x3cc>)
 80078e2:	400b      	ands	r3, r1
 80078e4:	69b9      	ldr	r1, [r7, #24]
 80078e6:	0148      	lsls	r0, r1, #5
 80078e8:	69f9      	ldr	r1, [r7, #28]
 80078ea:	4401      	add	r1, r0
 80078ec:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80078f0:	4313      	orrs	r3, r2
 80078f2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	791b      	ldrb	r3, [r3, #4]
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d122      	bne.n	8007942 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80078fc:	69bb      	ldr	r3, [r7, #24]
 80078fe:	015a      	lsls	r2, r3, #5
 8007900:	69fb      	ldr	r3, [r7, #28]
 8007902:	4413      	add	r3, r2
 8007904:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007908:	691b      	ldr	r3, [r3, #16]
 800790a:	69ba      	ldr	r2, [r7, #24]
 800790c:	0151      	lsls	r1, r2, #5
 800790e:	69fa      	ldr	r2, [r7, #28]
 8007910:	440a      	add	r2, r1
 8007912:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007916:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800791a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800791c:	69bb      	ldr	r3, [r7, #24]
 800791e:	015a      	lsls	r2, r3, #5
 8007920:	69fb      	ldr	r3, [r7, #28]
 8007922:	4413      	add	r3, r2
 8007924:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007928:	691a      	ldr	r2, [r3, #16]
 800792a:	8afb      	ldrh	r3, [r7, #22]
 800792c:	075b      	lsls	r3, r3, #29
 800792e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8007932:	69b9      	ldr	r1, [r7, #24]
 8007934:	0148      	lsls	r0, r1, #5
 8007936:	69f9      	ldr	r1, [r7, #28]
 8007938:	4401      	add	r1, r0
 800793a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800793e:	4313      	orrs	r3, r2
 8007940:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007942:	69bb      	ldr	r3, [r7, #24]
 8007944:	015a      	lsls	r2, r3, #5
 8007946:	69fb      	ldr	r3, [r7, #28]
 8007948:	4413      	add	r3, r2
 800794a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800794e:	691a      	ldr	r2, [r3, #16]
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	691b      	ldr	r3, [r3, #16]
 8007954:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007958:	69b9      	ldr	r1, [r7, #24]
 800795a:	0148      	lsls	r0, r1, #5
 800795c:	69f9      	ldr	r1, [r7, #28]
 800795e:	4401      	add	r1, r0
 8007960:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007964:	4313      	orrs	r3, r2
 8007966:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007968:	79fb      	ldrb	r3, [r7, #7]
 800796a:	2b01      	cmp	r3, #1
 800796c:	d14b      	bne.n	8007a06 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	69db      	ldr	r3, [r3, #28]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d009      	beq.n	800798a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007976:	69bb      	ldr	r3, [r7, #24]
 8007978:	015a      	lsls	r2, r3, #5
 800797a:	69fb      	ldr	r3, [r7, #28]
 800797c:	4413      	add	r3, r2
 800797e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007982:	461a      	mov	r2, r3
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	69db      	ldr	r3, [r3, #28]
 8007988:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	791b      	ldrb	r3, [r3, #4]
 800798e:	2b01      	cmp	r3, #1
 8007990:	d128      	bne.n	80079e4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007992:	69fb      	ldr	r3, [r7, #28]
 8007994:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d110      	bne.n	80079c4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80079a2:	69bb      	ldr	r3, [r7, #24]
 80079a4:	015a      	lsls	r2, r3, #5
 80079a6:	69fb      	ldr	r3, [r7, #28]
 80079a8:	4413      	add	r3, r2
 80079aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	69ba      	ldr	r2, [r7, #24]
 80079b2:	0151      	lsls	r1, r2, #5
 80079b4:	69fa      	ldr	r2, [r7, #28]
 80079b6:	440a      	add	r2, r1
 80079b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079bc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80079c0:	6013      	str	r3, [r2, #0]
 80079c2:	e00f      	b.n	80079e4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80079c4:	69bb      	ldr	r3, [r7, #24]
 80079c6:	015a      	lsls	r2, r3, #5
 80079c8:	69fb      	ldr	r3, [r7, #28]
 80079ca:	4413      	add	r3, r2
 80079cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	69ba      	ldr	r2, [r7, #24]
 80079d4:	0151      	lsls	r1, r2, #5
 80079d6:	69fa      	ldr	r2, [r7, #28]
 80079d8:	440a      	add	r2, r1
 80079da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80079e2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80079e4:	69bb      	ldr	r3, [r7, #24]
 80079e6:	015a      	lsls	r2, r3, #5
 80079e8:	69fb      	ldr	r3, [r7, #28]
 80079ea:	4413      	add	r3, r2
 80079ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	69ba      	ldr	r2, [r7, #24]
 80079f4:	0151      	lsls	r1, r2, #5
 80079f6:	69fa      	ldr	r2, [r7, #28]
 80079f8:	440a      	add	r2, r1
 80079fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079fe:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007a02:	6013      	str	r3, [r2, #0]
 8007a04:	e166      	b.n	8007cd4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007a06:	69bb      	ldr	r3, [r7, #24]
 8007a08:	015a      	lsls	r2, r3, #5
 8007a0a:	69fb      	ldr	r3, [r7, #28]
 8007a0c:	4413      	add	r3, r2
 8007a0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	69ba      	ldr	r2, [r7, #24]
 8007a16:	0151      	lsls	r1, r2, #5
 8007a18:	69fa      	ldr	r2, [r7, #28]
 8007a1a:	440a      	add	r2, r1
 8007a1c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a20:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007a24:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	791b      	ldrb	r3, [r3, #4]
 8007a2a:	2b01      	cmp	r3, #1
 8007a2c:	d015      	beq.n	8007a5a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	691b      	ldr	r3, [r3, #16]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	f000 814e 	beq.w	8007cd4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007a38:	69fb      	ldr	r3, [r7, #28]
 8007a3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	f003 030f 	and.w	r3, r3, #15
 8007a48:	2101      	movs	r1, #1
 8007a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8007a4e:	69f9      	ldr	r1, [r7, #28]
 8007a50:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007a54:	4313      	orrs	r3, r2
 8007a56:	634b      	str	r3, [r1, #52]	@ 0x34
 8007a58:	e13c      	b.n	8007cd4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007a5a:	69fb      	ldr	r3, [r7, #28]
 8007a5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d110      	bne.n	8007a8c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007a6a:	69bb      	ldr	r3, [r7, #24]
 8007a6c:	015a      	lsls	r2, r3, #5
 8007a6e:	69fb      	ldr	r3, [r7, #28]
 8007a70:	4413      	add	r3, r2
 8007a72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	69ba      	ldr	r2, [r7, #24]
 8007a7a:	0151      	lsls	r1, r2, #5
 8007a7c:	69fa      	ldr	r2, [r7, #28]
 8007a7e:	440a      	add	r2, r1
 8007a80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a84:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007a88:	6013      	str	r3, [r2, #0]
 8007a8a:	e00f      	b.n	8007aac <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007a8c:	69bb      	ldr	r3, [r7, #24]
 8007a8e:	015a      	lsls	r2, r3, #5
 8007a90:	69fb      	ldr	r3, [r7, #28]
 8007a92:	4413      	add	r3, r2
 8007a94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	69ba      	ldr	r2, [r7, #24]
 8007a9c:	0151      	lsls	r1, r2, #5
 8007a9e:	69fa      	ldr	r2, [r7, #28]
 8007aa0:	440a      	add	r2, r1
 8007aa2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007aa6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007aaa:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	68d9      	ldr	r1, [r3, #12]
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	781a      	ldrb	r2, [r3, #0]
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	691b      	ldr	r3, [r3, #16]
 8007ab8:	b298      	uxth	r0, r3
 8007aba:	79fb      	ldrb	r3, [r7, #7]
 8007abc:	9300      	str	r3, [sp, #0]
 8007abe:	4603      	mov	r3, r0
 8007ac0:	68f8      	ldr	r0, [r7, #12]
 8007ac2:	f000 f9b9 	bl	8007e38 <USB_WritePacket>
 8007ac6:	e105      	b.n	8007cd4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007ac8:	69bb      	ldr	r3, [r7, #24]
 8007aca:	015a      	lsls	r2, r3, #5
 8007acc:	69fb      	ldr	r3, [r7, #28]
 8007ace:	4413      	add	r3, r2
 8007ad0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ad4:	691b      	ldr	r3, [r3, #16]
 8007ad6:	69ba      	ldr	r2, [r7, #24]
 8007ad8:	0151      	lsls	r1, r2, #5
 8007ada:	69fa      	ldr	r2, [r7, #28]
 8007adc:	440a      	add	r2, r1
 8007ade:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ae2:	0cdb      	lsrs	r3, r3, #19
 8007ae4:	04db      	lsls	r3, r3, #19
 8007ae6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007ae8:	69bb      	ldr	r3, [r7, #24]
 8007aea:	015a      	lsls	r2, r3, #5
 8007aec:	69fb      	ldr	r3, [r7, #28]
 8007aee:	4413      	add	r3, r2
 8007af0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007af4:	691b      	ldr	r3, [r3, #16]
 8007af6:	69ba      	ldr	r2, [r7, #24]
 8007af8:	0151      	lsls	r1, r2, #5
 8007afa:	69fa      	ldr	r2, [r7, #28]
 8007afc:	440a      	add	r2, r1
 8007afe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b02:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007b06:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007b0a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007b0c:	69bb      	ldr	r3, [r7, #24]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d132      	bne.n	8007b78 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	691b      	ldr	r3, [r3, #16]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d003      	beq.n	8007b22 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	689a      	ldr	r2, [r3, #8]
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	689a      	ldr	r2, [r3, #8]
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007b2a:	69bb      	ldr	r3, [r7, #24]
 8007b2c:	015a      	lsls	r2, r3, #5
 8007b2e:	69fb      	ldr	r3, [r7, #28]
 8007b30:	4413      	add	r3, r2
 8007b32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b36:	691a      	ldr	r2, [r3, #16]
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	6a1b      	ldr	r3, [r3, #32]
 8007b3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b40:	69b9      	ldr	r1, [r7, #24]
 8007b42:	0148      	lsls	r0, r1, #5
 8007b44:	69f9      	ldr	r1, [r7, #28]
 8007b46:	4401      	add	r1, r0
 8007b48:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007b50:	69bb      	ldr	r3, [r7, #24]
 8007b52:	015a      	lsls	r2, r3, #5
 8007b54:	69fb      	ldr	r3, [r7, #28]
 8007b56:	4413      	add	r3, r2
 8007b58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b5c:	691b      	ldr	r3, [r3, #16]
 8007b5e:	69ba      	ldr	r2, [r7, #24]
 8007b60:	0151      	lsls	r1, r2, #5
 8007b62:	69fa      	ldr	r2, [r7, #28]
 8007b64:	440a      	add	r2, r1
 8007b66:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b6a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007b6e:	6113      	str	r3, [r2, #16]
 8007b70:	e062      	b.n	8007c38 <USB_EPStartXfer+0x490>
 8007b72:	bf00      	nop
 8007b74:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	691b      	ldr	r3, [r3, #16]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d123      	bne.n	8007bc8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007b80:	69bb      	ldr	r3, [r7, #24]
 8007b82:	015a      	lsls	r2, r3, #5
 8007b84:	69fb      	ldr	r3, [r7, #28]
 8007b86:	4413      	add	r3, r2
 8007b88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b8c:	691a      	ldr	r2, [r3, #16]
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	689b      	ldr	r3, [r3, #8]
 8007b92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b96:	69b9      	ldr	r1, [r7, #24]
 8007b98:	0148      	lsls	r0, r1, #5
 8007b9a:	69f9      	ldr	r1, [r7, #28]
 8007b9c:	4401      	add	r1, r0
 8007b9e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007ba6:	69bb      	ldr	r3, [r7, #24]
 8007ba8:	015a      	lsls	r2, r3, #5
 8007baa:	69fb      	ldr	r3, [r7, #28]
 8007bac:	4413      	add	r3, r2
 8007bae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bb2:	691b      	ldr	r3, [r3, #16]
 8007bb4:	69ba      	ldr	r2, [r7, #24]
 8007bb6:	0151      	lsls	r1, r2, #5
 8007bb8:	69fa      	ldr	r2, [r7, #28]
 8007bba:	440a      	add	r2, r1
 8007bbc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007bc0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007bc4:	6113      	str	r3, [r2, #16]
 8007bc6:	e037      	b.n	8007c38 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	691a      	ldr	r2, [r3, #16]
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	4413      	add	r3, r2
 8007bd2:	1e5a      	subs	r2, r3, #1
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bdc:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	8afa      	ldrh	r2, [r7, #22]
 8007be4:	fb03 f202 	mul.w	r2, r3, r2
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007bec:	69bb      	ldr	r3, [r7, #24]
 8007bee:	015a      	lsls	r2, r3, #5
 8007bf0:	69fb      	ldr	r3, [r7, #28]
 8007bf2:	4413      	add	r3, r2
 8007bf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bf8:	691a      	ldr	r2, [r3, #16]
 8007bfa:	8afb      	ldrh	r3, [r7, #22]
 8007bfc:	04d9      	lsls	r1, r3, #19
 8007bfe:	4b38      	ldr	r3, [pc, #224]	@ (8007ce0 <USB_EPStartXfer+0x538>)
 8007c00:	400b      	ands	r3, r1
 8007c02:	69b9      	ldr	r1, [r7, #24]
 8007c04:	0148      	lsls	r0, r1, #5
 8007c06:	69f9      	ldr	r1, [r7, #28]
 8007c08:	4401      	add	r1, r0
 8007c0a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007c12:	69bb      	ldr	r3, [r7, #24]
 8007c14:	015a      	lsls	r2, r3, #5
 8007c16:	69fb      	ldr	r3, [r7, #28]
 8007c18:	4413      	add	r3, r2
 8007c1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c1e:	691a      	ldr	r2, [r3, #16]
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	6a1b      	ldr	r3, [r3, #32]
 8007c24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c28:	69b9      	ldr	r1, [r7, #24]
 8007c2a:	0148      	lsls	r0, r1, #5
 8007c2c:	69f9      	ldr	r1, [r7, #28]
 8007c2e:	4401      	add	r1, r0
 8007c30:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007c34:	4313      	orrs	r3, r2
 8007c36:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007c38:	79fb      	ldrb	r3, [r7, #7]
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	d10d      	bne.n	8007c5a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	68db      	ldr	r3, [r3, #12]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d009      	beq.n	8007c5a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	68d9      	ldr	r1, [r3, #12]
 8007c4a:	69bb      	ldr	r3, [r7, #24]
 8007c4c:	015a      	lsls	r2, r3, #5
 8007c4e:	69fb      	ldr	r3, [r7, #28]
 8007c50:	4413      	add	r3, r2
 8007c52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c56:	460a      	mov	r2, r1
 8007c58:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	791b      	ldrb	r3, [r3, #4]
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	d128      	bne.n	8007cb4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007c62:	69fb      	ldr	r3, [r7, #28]
 8007c64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c68:	689b      	ldr	r3, [r3, #8]
 8007c6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d110      	bne.n	8007c94 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	015a      	lsls	r2, r3, #5
 8007c76:	69fb      	ldr	r3, [r7, #28]
 8007c78:	4413      	add	r3, r2
 8007c7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	69ba      	ldr	r2, [r7, #24]
 8007c82:	0151      	lsls	r1, r2, #5
 8007c84:	69fa      	ldr	r2, [r7, #28]
 8007c86:	440a      	add	r2, r1
 8007c88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c8c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007c90:	6013      	str	r3, [r2, #0]
 8007c92:	e00f      	b.n	8007cb4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007c94:	69bb      	ldr	r3, [r7, #24]
 8007c96:	015a      	lsls	r2, r3, #5
 8007c98:	69fb      	ldr	r3, [r7, #28]
 8007c9a:	4413      	add	r3, r2
 8007c9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	69ba      	ldr	r2, [r7, #24]
 8007ca4:	0151      	lsls	r1, r2, #5
 8007ca6:	69fa      	ldr	r2, [r7, #28]
 8007ca8:	440a      	add	r2, r1
 8007caa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007cae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007cb2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007cb4:	69bb      	ldr	r3, [r7, #24]
 8007cb6:	015a      	lsls	r2, r3, #5
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	4413      	add	r3, r2
 8007cbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	69ba      	ldr	r2, [r7, #24]
 8007cc4:	0151      	lsls	r1, r2, #5
 8007cc6:	69fa      	ldr	r2, [r7, #28]
 8007cc8:	440a      	add	r2, r1
 8007cca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007cce:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007cd2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007cd4:	2300      	movs	r3, #0
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3720      	adds	r7, #32
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
 8007cde:	bf00      	nop
 8007ce0:	1ff80000 	.word	0x1ff80000

08007ce4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b087      	sub	sp, #28
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	785b      	ldrb	r3, [r3, #1]
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	d14a      	bne.n	8007d98 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	015a      	lsls	r2, r3, #5
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	4413      	add	r3, r2
 8007d0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007d16:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d1a:	f040 8086 	bne.w	8007e2a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	781b      	ldrb	r3, [r3, #0]
 8007d22:	015a      	lsls	r2, r3, #5
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	4413      	add	r3, r2
 8007d28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	683a      	ldr	r2, [r7, #0]
 8007d30:	7812      	ldrb	r2, [r2, #0]
 8007d32:	0151      	lsls	r1, r2, #5
 8007d34:	693a      	ldr	r2, [r7, #16]
 8007d36:	440a      	add	r2, r1
 8007d38:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d3c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007d40:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	015a      	lsls	r2, r3, #5
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	4413      	add	r3, r2
 8007d4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	683a      	ldr	r2, [r7, #0]
 8007d54:	7812      	ldrb	r2, [r2, #0]
 8007d56:	0151      	lsls	r1, r2, #5
 8007d58:	693a      	ldr	r2, [r7, #16]
 8007d5a:	440a      	add	r2, r1
 8007d5c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d60:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007d64:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	3301      	adds	r3, #1
 8007d6a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d902      	bls.n	8007d7c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007d76:	2301      	movs	r3, #1
 8007d78:	75fb      	strb	r3, [r7, #23]
          break;
 8007d7a:	e056      	b.n	8007e2a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	015a      	lsls	r2, r3, #5
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	4413      	add	r3, r2
 8007d86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007d90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d94:	d0e7      	beq.n	8007d66 <USB_EPStopXfer+0x82>
 8007d96:	e048      	b.n	8007e2a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	015a      	lsls	r2, r3, #5
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	4413      	add	r3, r2
 8007da2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007dac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007db0:	d13b      	bne.n	8007e2a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	781b      	ldrb	r3, [r3, #0]
 8007db6:	015a      	lsls	r2, r3, #5
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	4413      	add	r3, r2
 8007dbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	683a      	ldr	r2, [r7, #0]
 8007dc4:	7812      	ldrb	r2, [r2, #0]
 8007dc6:	0151      	lsls	r1, r2, #5
 8007dc8:	693a      	ldr	r2, [r7, #16]
 8007dca:	440a      	add	r2, r1
 8007dcc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007dd0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007dd4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	015a      	lsls	r2, r3, #5
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	4413      	add	r3, r2
 8007de0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	683a      	ldr	r2, [r7, #0]
 8007de8:	7812      	ldrb	r2, [r2, #0]
 8007dea:	0151      	lsls	r1, r2, #5
 8007dec:	693a      	ldr	r2, [r7, #16]
 8007dee:	440a      	add	r2, r1
 8007df0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007df4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007df8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	3301      	adds	r3, #1
 8007dfe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d902      	bls.n	8007e10 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	75fb      	strb	r3, [r7, #23]
          break;
 8007e0e:	e00c      	b.n	8007e2a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	015a      	lsls	r2, r3, #5
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	4413      	add	r3, r2
 8007e1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e24:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e28:	d0e7      	beq.n	8007dfa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007e2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	371c      	adds	r7, #28
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr

08007e38 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b089      	sub	sp, #36	@ 0x24
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	60f8      	str	r0, [r7, #12]
 8007e40:	60b9      	str	r1, [r7, #8]
 8007e42:	4611      	mov	r1, r2
 8007e44:	461a      	mov	r2, r3
 8007e46:	460b      	mov	r3, r1
 8007e48:	71fb      	strb	r3, [r7, #7]
 8007e4a:	4613      	mov	r3, r2
 8007e4c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007e56:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d123      	bne.n	8007ea6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007e5e:	88bb      	ldrh	r3, [r7, #4]
 8007e60:	3303      	adds	r3, #3
 8007e62:	089b      	lsrs	r3, r3, #2
 8007e64:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007e66:	2300      	movs	r3, #0
 8007e68:	61bb      	str	r3, [r7, #24]
 8007e6a:	e018      	b.n	8007e9e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007e6c:	79fb      	ldrb	r3, [r7, #7]
 8007e6e:	031a      	lsls	r2, r3, #12
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	4413      	add	r3, r2
 8007e74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e78:	461a      	mov	r2, r3
 8007e7a:	69fb      	ldr	r3, [r7, #28]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007e80:	69fb      	ldr	r3, [r7, #28]
 8007e82:	3301      	adds	r3, #1
 8007e84:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007e86:	69fb      	ldr	r3, [r7, #28]
 8007e88:	3301      	adds	r3, #1
 8007e8a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007e8c:	69fb      	ldr	r3, [r7, #28]
 8007e8e:	3301      	adds	r3, #1
 8007e90:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007e92:	69fb      	ldr	r3, [r7, #28]
 8007e94:	3301      	adds	r3, #1
 8007e96:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007e98:	69bb      	ldr	r3, [r7, #24]
 8007e9a:	3301      	adds	r3, #1
 8007e9c:	61bb      	str	r3, [r7, #24]
 8007e9e:	69ba      	ldr	r2, [r7, #24]
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d3e2      	bcc.n	8007e6c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007ea6:	2300      	movs	r3, #0
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3724      	adds	r7, #36	@ 0x24
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr

08007eb4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b08b      	sub	sp, #44	@ 0x2c
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	60f8      	str	r0, [r7, #12]
 8007ebc:	60b9      	str	r1, [r7, #8]
 8007ebe:	4613      	mov	r3, r2
 8007ec0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007eca:	88fb      	ldrh	r3, [r7, #6]
 8007ecc:	089b      	lsrs	r3, r3, #2
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007ed2:	88fb      	ldrh	r3, [r7, #6]
 8007ed4:	f003 0303 	and.w	r3, r3, #3
 8007ed8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007eda:	2300      	movs	r3, #0
 8007edc:	623b      	str	r3, [r7, #32]
 8007ede:	e014      	b.n	8007f0a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007ee0:	69bb      	ldr	r3, [r7, #24]
 8007ee2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eea:	601a      	str	r2, [r3, #0]
    pDest++;
 8007eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eee:	3301      	adds	r3, #1
 8007ef0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ef4:	3301      	adds	r3, #1
 8007ef6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007efa:	3301      	adds	r3, #1
 8007efc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f00:	3301      	adds	r3, #1
 8007f02:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007f04:	6a3b      	ldr	r3, [r7, #32]
 8007f06:	3301      	adds	r3, #1
 8007f08:	623b      	str	r3, [r7, #32]
 8007f0a:	6a3a      	ldr	r2, [r7, #32]
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d3e6      	bcc.n	8007ee0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007f12:	8bfb      	ldrh	r3, [r7, #30]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d01e      	beq.n	8007f56 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007f1c:	69bb      	ldr	r3, [r7, #24]
 8007f1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f22:	461a      	mov	r2, r3
 8007f24:	f107 0310 	add.w	r3, r7, #16
 8007f28:	6812      	ldr	r2, [r2, #0]
 8007f2a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007f2c:	693a      	ldr	r2, [r7, #16]
 8007f2e:	6a3b      	ldr	r3, [r7, #32]
 8007f30:	b2db      	uxtb	r3, r3
 8007f32:	00db      	lsls	r3, r3, #3
 8007f34:	fa22 f303 	lsr.w	r3, r2, r3
 8007f38:	b2da      	uxtb	r2, r3
 8007f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f3c:	701a      	strb	r2, [r3, #0]
      i++;
 8007f3e:	6a3b      	ldr	r3, [r7, #32]
 8007f40:	3301      	adds	r3, #1
 8007f42:	623b      	str	r3, [r7, #32]
      pDest++;
 8007f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f46:	3301      	adds	r3, #1
 8007f48:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007f4a:	8bfb      	ldrh	r3, [r7, #30]
 8007f4c:	3b01      	subs	r3, #1
 8007f4e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007f50:	8bfb      	ldrh	r3, [r7, #30]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d1ea      	bne.n	8007f2c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	372c      	adds	r7, #44	@ 0x2c
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr

08007f64 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b085      	sub	sp, #20
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	785b      	ldrb	r3, [r3, #1]
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d12c      	bne.n	8007fda <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	015a      	lsls	r2, r3, #5
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	4413      	add	r3, r2
 8007f88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	db12      	blt.n	8007fb8 <USB_EPSetStall+0x54>
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d00f      	beq.n	8007fb8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	015a      	lsls	r2, r3, #5
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	4413      	add	r3, r2
 8007fa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	68ba      	ldr	r2, [r7, #8]
 8007fa8:	0151      	lsls	r1, r2, #5
 8007faa:	68fa      	ldr	r2, [r7, #12]
 8007fac:	440a      	add	r2, r1
 8007fae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007fb2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007fb6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	015a      	lsls	r2, r3, #5
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	4413      	add	r3, r2
 8007fc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	68ba      	ldr	r2, [r7, #8]
 8007fc8:	0151      	lsls	r1, r2, #5
 8007fca:	68fa      	ldr	r2, [r7, #12]
 8007fcc:	440a      	add	r2, r1
 8007fce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007fd2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007fd6:	6013      	str	r3, [r2, #0]
 8007fd8:	e02b      	b.n	8008032 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	015a      	lsls	r2, r3, #5
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	4413      	add	r3, r2
 8007fe2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	db12      	blt.n	8008012 <USB_EPSetStall+0xae>
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d00f      	beq.n	8008012 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	015a      	lsls	r2, r3, #5
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	4413      	add	r3, r2
 8007ffa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	68ba      	ldr	r2, [r7, #8]
 8008002:	0151      	lsls	r1, r2, #5
 8008004:	68fa      	ldr	r2, [r7, #12]
 8008006:	440a      	add	r2, r1
 8008008:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800800c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008010:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	015a      	lsls	r2, r3, #5
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	4413      	add	r3, r2
 800801a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	68ba      	ldr	r2, [r7, #8]
 8008022:	0151      	lsls	r1, r2, #5
 8008024:	68fa      	ldr	r2, [r7, #12]
 8008026:	440a      	add	r2, r1
 8008028:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800802c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008030:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008032:	2300      	movs	r3, #0
}
 8008034:	4618      	mov	r0, r3
 8008036:	3714      	adds	r7, #20
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr

08008040 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008040:	b480      	push	{r7}
 8008042:	b085      	sub	sp, #20
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	785b      	ldrb	r3, [r3, #1]
 8008058:	2b01      	cmp	r3, #1
 800805a:	d128      	bne.n	80080ae <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	015a      	lsls	r2, r3, #5
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	4413      	add	r3, r2
 8008064:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	68ba      	ldr	r2, [r7, #8]
 800806c:	0151      	lsls	r1, r2, #5
 800806e:	68fa      	ldr	r2, [r7, #12]
 8008070:	440a      	add	r2, r1
 8008072:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008076:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800807a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	791b      	ldrb	r3, [r3, #4]
 8008080:	2b03      	cmp	r3, #3
 8008082:	d003      	beq.n	800808c <USB_EPClearStall+0x4c>
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	791b      	ldrb	r3, [r3, #4]
 8008088:	2b02      	cmp	r3, #2
 800808a:	d138      	bne.n	80080fe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	015a      	lsls	r2, r3, #5
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	4413      	add	r3, r2
 8008094:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	68ba      	ldr	r2, [r7, #8]
 800809c:	0151      	lsls	r1, r2, #5
 800809e:	68fa      	ldr	r2, [r7, #12]
 80080a0:	440a      	add	r2, r1
 80080a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80080a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80080aa:	6013      	str	r3, [r2, #0]
 80080ac:	e027      	b.n	80080fe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	015a      	lsls	r2, r3, #5
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	4413      	add	r3, r2
 80080b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	68ba      	ldr	r2, [r7, #8]
 80080be:	0151      	lsls	r1, r2, #5
 80080c0:	68fa      	ldr	r2, [r7, #12]
 80080c2:	440a      	add	r2, r1
 80080c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80080c8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80080cc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	791b      	ldrb	r3, [r3, #4]
 80080d2:	2b03      	cmp	r3, #3
 80080d4:	d003      	beq.n	80080de <USB_EPClearStall+0x9e>
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	791b      	ldrb	r3, [r3, #4]
 80080da:	2b02      	cmp	r3, #2
 80080dc:	d10f      	bne.n	80080fe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	015a      	lsls	r2, r3, #5
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	4413      	add	r3, r2
 80080e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	68ba      	ldr	r2, [r7, #8]
 80080ee:	0151      	lsls	r1, r2, #5
 80080f0:	68fa      	ldr	r2, [r7, #12]
 80080f2:	440a      	add	r2, r1
 80080f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80080f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80080fc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80080fe:	2300      	movs	r3, #0
}
 8008100:	4618      	mov	r0, r3
 8008102:	3714      	adds	r7, #20
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr

0800810c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800810c:	b480      	push	{r7}
 800810e:	b085      	sub	sp, #20
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	460b      	mov	r3, r1
 8008116:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	68fa      	ldr	r2, [r7, #12]
 8008126:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800812a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800812e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	78fb      	ldrb	r3, [r7, #3]
 800813a:	011b      	lsls	r3, r3, #4
 800813c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008140:	68f9      	ldr	r1, [r7, #12]
 8008142:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008146:	4313      	orrs	r3, r2
 8008148:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800814a:	2300      	movs	r3, #0
}
 800814c:	4618      	mov	r0, r3
 800814e:	3714      	adds	r7, #20
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr

08008158 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008158:	b480      	push	{r7}
 800815a:	b085      	sub	sp, #20
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	68fa      	ldr	r2, [r7, #12]
 800816e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008172:	f023 0303 	bic.w	r3, r3, #3
 8008176:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	68fa      	ldr	r2, [r7, #12]
 8008182:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008186:	f023 0302 	bic.w	r3, r3, #2
 800818a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	4618      	mov	r0, r3
 8008190:	3714      	adds	r7, #20
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr

0800819a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800819a:	b480      	push	{r7}
 800819c:	b085      	sub	sp, #20
 800819e:	af00      	add	r7, sp, #0
 80081a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	68fa      	ldr	r2, [r7, #12]
 80081b0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80081b4:	f023 0303 	bic.w	r3, r3, #3
 80081b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	68fa      	ldr	r2, [r7, #12]
 80081c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80081c8:	f043 0302 	orr.w	r3, r3, #2
 80081cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80081ce:	2300      	movs	r3, #0
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3714      	adds	r7, #20
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr

080081dc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80081dc:	b480      	push	{r7}
 80081de:	b085      	sub	sp, #20
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	695b      	ldr	r3, [r3, #20]
 80081e8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	699b      	ldr	r3, [r3, #24]
 80081ee:	68fa      	ldr	r2, [r7, #12]
 80081f0:	4013      	ands	r3, r2
 80081f2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80081f4:	68fb      	ldr	r3, [r7, #12]
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3714      	adds	r7, #20
 80081fa:	46bd      	mov	sp, r7
 80081fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008200:	4770      	bx	lr

08008202 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008202:	b480      	push	{r7}
 8008204:	b085      	sub	sp, #20
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008214:	699b      	ldr	r3, [r3, #24]
 8008216:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800821e:	69db      	ldr	r3, [r3, #28]
 8008220:	68ba      	ldr	r2, [r7, #8]
 8008222:	4013      	ands	r3, r2
 8008224:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	0c1b      	lsrs	r3, r3, #16
}
 800822a:	4618      	mov	r0, r3
 800822c:	3714      	adds	r7, #20
 800822e:	46bd      	mov	sp, r7
 8008230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008234:	4770      	bx	lr

08008236 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008236:	b480      	push	{r7}
 8008238:	b085      	sub	sp, #20
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008248:	699b      	ldr	r3, [r3, #24]
 800824a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008252:	69db      	ldr	r3, [r3, #28]
 8008254:	68ba      	ldr	r2, [r7, #8]
 8008256:	4013      	ands	r3, r2
 8008258:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	b29b      	uxth	r3, r3
}
 800825e:	4618      	mov	r0, r3
 8008260:	3714      	adds	r7, #20
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr

0800826a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800826a:	b480      	push	{r7}
 800826c:	b085      	sub	sp, #20
 800826e:	af00      	add	r7, sp, #0
 8008270:	6078      	str	r0, [r7, #4]
 8008272:	460b      	mov	r3, r1
 8008274:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800827a:	78fb      	ldrb	r3, [r7, #3]
 800827c:	015a      	lsls	r2, r3, #5
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	4413      	add	r3, r2
 8008282:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008286:	689b      	ldr	r3, [r3, #8]
 8008288:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008290:	695b      	ldr	r3, [r3, #20]
 8008292:	68ba      	ldr	r2, [r7, #8]
 8008294:	4013      	ands	r3, r2
 8008296:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008298:	68bb      	ldr	r3, [r7, #8]
}
 800829a:	4618      	mov	r0, r3
 800829c:	3714      	adds	r7, #20
 800829e:	46bd      	mov	sp, r7
 80082a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a4:	4770      	bx	lr

080082a6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80082a6:	b480      	push	{r7}
 80082a8:	b087      	sub	sp, #28
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	6078      	str	r0, [r7, #4]
 80082ae:	460b      	mov	r3, r1
 80082b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082bc:	691b      	ldr	r3, [r3, #16]
 80082be:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082c8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80082ca:	78fb      	ldrb	r3, [r7, #3]
 80082cc:	f003 030f 	and.w	r3, r3, #15
 80082d0:	68fa      	ldr	r2, [r7, #12]
 80082d2:	fa22 f303 	lsr.w	r3, r2, r3
 80082d6:	01db      	lsls	r3, r3, #7
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	693a      	ldr	r2, [r7, #16]
 80082dc:	4313      	orrs	r3, r2
 80082de:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80082e0:	78fb      	ldrb	r3, [r7, #3]
 80082e2:	015a      	lsls	r2, r3, #5
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	4413      	add	r3, r2
 80082e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082ec:	689b      	ldr	r3, [r3, #8]
 80082ee:	693a      	ldr	r2, [r7, #16]
 80082f0:	4013      	ands	r3, r2
 80082f2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80082f4:	68bb      	ldr	r3, [r7, #8]
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	371c      	adds	r7, #28
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr

08008302 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008302:	b480      	push	{r7}
 8008304:	b083      	sub	sp, #12
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	695b      	ldr	r3, [r3, #20]
 800830e:	f003 0301 	and.w	r3, r3, #1
}
 8008312:	4618      	mov	r0, r3
 8008314:	370c      	adds	r7, #12
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr

0800831e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800831e:	b480      	push	{r7}
 8008320:	b085      	sub	sp, #20
 8008322:	af00      	add	r7, sp, #0
 8008324:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	68fa      	ldr	r2, [r7, #12]
 8008334:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008338:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800833c:	f023 0307 	bic.w	r3, r3, #7
 8008340:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008348:	685b      	ldr	r3, [r3, #4]
 800834a:	68fa      	ldr	r2, [r7, #12]
 800834c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008350:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008354:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008356:	2300      	movs	r3, #0
}
 8008358:	4618      	mov	r0, r3
 800835a:	3714      	adds	r7, #20
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr

08008364 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008364:	b480      	push	{r7}
 8008366:	b087      	sub	sp, #28
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	460b      	mov	r3, r1
 800836e:	607a      	str	r2, [r7, #4]
 8008370:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	333c      	adds	r3, #60	@ 0x3c
 800837a:	3304      	adds	r3, #4
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	4a26      	ldr	r2, [pc, #152]	@ (800841c <USB_EP0_OutStart+0xb8>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d90a      	bls.n	800839e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008394:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008398:	d101      	bne.n	800839e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800839a:	2300      	movs	r3, #0
 800839c:	e037      	b.n	800840e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083a4:	461a      	mov	r2, r3
 80083a6:	2300      	movs	r3, #0
 80083a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083b0:	691b      	ldr	r3, [r3, #16]
 80083b2:	697a      	ldr	r2, [r7, #20]
 80083b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80083b8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80083bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083c4:	691b      	ldr	r3, [r3, #16]
 80083c6:	697a      	ldr	r2, [r7, #20]
 80083c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80083cc:	f043 0318 	orr.w	r3, r3, #24
 80083d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083d8:	691b      	ldr	r3, [r3, #16]
 80083da:	697a      	ldr	r2, [r7, #20]
 80083dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80083e0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80083e4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80083e6:	7afb      	ldrb	r3, [r7, #11]
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d10f      	bne.n	800840c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083f2:	461a      	mov	r2, r3
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	697a      	ldr	r2, [r7, #20]
 8008402:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008406:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800840a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800840c:	2300      	movs	r3, #0
}
 800840e:	4618      	mov	r0, r3
 8008410:	371c      	adds	r7, #28
 8008412:	46bd      	mov	sp, r7
 8008414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008418:	4770      	bx	lr
 800841a:	bf00      	nop
 800841c:	4f54300a 	.word	0x4f54300a

08008420 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008420:	b480      	push	{r7}
 8008422:	b085      	sub	sp, #20
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008428:	2300      	movs	r3, #0
 800842a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	3301      	adds	r3, #1
 8008430:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008438:	d901      	bls.n	800843e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800843a:	2303      	movs	r3, #3
 800843c:	e022      	b.n	8008484 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	691b      	ldr	r3, [r3, #16]
 8008442:	2b00      	cmp	r3, #0
 8008444:	daf2      	bge.n	800842c <USB_CoreReset+0xc>

  count = 10U;
 8008446:	230a      	movs	r3, #10
 8008448:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800844a:	e002      	b.n	8008452 <USB_CoreReset+0x32>
  {
    count--;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	3b01      	subs	r3, #1
 8008450:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d1f9      	bne.n	800844c <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	691b      	ldr	r3, [r3, #16]
 800845c:	f043 0201 	orr.w	r2, r3, #1
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	3301      	adds	r3, #1
 8008468:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008470:	d901      	bls.n	8008476 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8008472:	2303      	movs	r3, #3
 8008474:	e006      	b.n	8008484 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	691b      	ldr	r3, [r3, #16]
 800847a:	f003 0301 	and.w	r3, r3, #1
 800847e:	2b01      	cmp	r3, #1
 8008480:	d0f0      	beq.n	8008464 <USB_CoreReset+0x44>

  return HAL_OK;
 8008482:	2300      	movs	r3, #0
}
 8008484:	4618      	mov	r0, r3
 8008486:	3714      	adds	r7, #20
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr

08008490 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  USBD_COMPOSITE_Mount_Class();
 8008494:	f001 fc5c 	bl	8009d50 <USBD_COMPOSITE_Mount_Class>
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_HS) != USBD_OK)
  {
    Error_Handler();
  }
#else
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_FS) != USBD_OK)
 8008498:	2200      	movs	r2, #0
 800849a:	4917      	ldr	r1, [pc, #92]	@ (80084f8 <MX_USB_DEVICE_Init+0x68>)
 800849c:	4817      	ldr	r0, [pc, #92]	@ (80084fc <MX_USB_DEVICE_Init+0x6c>)
 800849e:	f002 f87b 	bl	800a598 <USBD_Init>
 80084a2:	4603      	mov	r3, r0
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d001      	beq.n	80084ac <MX_USB_DEVICE_Init+0x1c>
  {
    Error_Handler();
 80084a8:	f7f8 fbb4 	bl	8000c14 <Error_Handler>
  }
#endif
  if (USBD_RegisterClass(&hUsbDevice, &USBD_COMPOSITE) != USBD_OK)
 80084ac:	4914      	ldr	r1, [pc, #80]	@ (8008500 <MX_USB_DEVICE_Init+0x70>)
 80084ae:	4813      	ldr	r0, [pc, #76]	@ (80084fc <MX_USB_DEVICE_Init+0x6c>)
 80084b0:	f002 f89e 	bl	800a5f0 <USBD_RegisterClass>
 80084b4:	4603      	mov	r3, r0
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d001      	beq.n	80084be <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 80084ba:	f7f8 fbab 	bl	8000c14 <Error_Handler>
  }
#if (USBD_USE_CDC_ACM == 1)
  if (USBD_CDC_ACM_RegisterInterface(&hUsbDevice, &USBD_CDC_ACM_fops) != USBD_OK)
 80084be:	4911      	ldr	r1, [pc, #68]	@ (8008504 <MX_USB_DEVICE_Init+0x74>)
 80084c0:	480e      	ldr	r0, [pc, #56]	@ (80084fc <MX_USB_DEVICE_Init+0x6c>)
 80084c2:	f001 f91f 	bl	8009704 <USBD_CDC_ACM_RegisterInterface>
 80084c6:	4603      	mov	r3, r0
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d001      	beq.n	80084d0 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 80084cc:	f7f8 fba2 	bl	8000c14 <Error_Handler>
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDevice, &USBD_CustomHID_fops) != USBD_OK)
 80084d0:	490d      	ldr	r1, [pc, #52]	@ (8008508 <MX_USB_DEVICE_Init+0x78>)
 80084d2:	480a      	ldr	r0, [pc, #40]	@ (80084fc <MX_USB_DEVICE_Init+0x6c>)
 80084d4:	f002 f812 	bl	800a4fc <USBD_CUSTOM_HID_RegisterInterface>
 80084d8:	4603      	mov	r3, r0
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d001      	beq.n	80084e2 <MX_USB_DEVICE_Init+0x52>
  {
    Error_Handler();
 80084de:	f7f8 fb99 	bl	8000c14 <Error_Handler>
  if (USBD_PRNT_RegisterInterface(&hUsbDevice, &USBD_PRNT_fops) != USBD_OK)
  {
    Error_Handler();
  }
#endif
  if (USBD_Start(&hUsbDevice) != USBD_OK)
 80084e2:	4806      	ldr	r0, [pc, #24]	@ (80084fc <MX_USB_DEVICE_Init+0x6c>)
 80084e4:	f002 f8c2 	bl	800a66c <USBD_Start>
 80084e8:	4603      	mov	r3, r0
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d001      	beq.n	80084f2 <MX_USB_DEVICE_Init+0x62>
  {
    Error_Handler();
 80084ee:	f7f8 fb91 	bl	8000c14 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80084f2:	bf00      	nop
 80084f4:	bd80      	pop	{r7, pc}
 80084f6:	bf00      	nop
 80084f8:	2000002c 	.word	0x2000002c
 80084fc:	20000b4c 	.word	0x20000b4c
 8008500:	20000190 	.word	0x20000190
 8008504:	20000018 	.word	0x20000018
 8008508:	200000a0 	.word	0x200000a0

0800850c <CDC_CH_To_UART_Handle>:
static int8_t CDC_Receive(uint8_t cdc_ch, uint8_t *pbuf, uint32_t *Len);
static int8_t CDC_TransmitCplt(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len, uint8_t epnum);

/* USER CODE BEGIN PRIVATE_FUNCTIONS_DECLARATION */
UART_HandleTypeDef *CDC_CH_To_UART_Handle(uint8_t cdc_ch)
{
 800850c:	b480      	push	{r7}
 800850e:	b085      	sub	sp, #20
 8008510:	af00      	add	r7, sp, #0
 8008512:	4603      	mov	r3, r0
 8008514:	71fb      	strb	r3, [r7, #7]
  UART_HandleTypeDef *handle = NULL;
 8008516:	2300      	movs	r3, #0
 8008518:	60fb      	str	r3, [r7, #12]

  if (cdc_ch == 0)
 800851a:	79fb      	ldrb	r3, [r7, #7]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d101      	bne.n	8008524 <CDC_CH_To_UART_Handle+0x18>
  {
    handle = &huart5;
 8008520:	4b04      	ldr	r3, [pc, #16]	@ (8008534 <CDC_CH_To_UART_Handle+0x28>)
 8008522:	60fb      	str	r3, [r7, #12]
  else if (cdc_ch == 2)
  {
    handle = &huart3;
  }
#endif
  return handle;
 8008524:	68fb      	ldr	r3, [r7, #12]
}
 8008526:	4618      	mov	r0, r3
 8008528:	3714      	adds	r7, #20
 800852a:	46bd      	mov	sp, r7
 800852c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008530:	4770      	bx	lr
 8008532:	bf00      	nop
 8008534:	2000055c 	.word	0x2000055c

08008538 <UART_Handle_TO_CDC_CH>:

uint8_t UART_Handle_TO_CDC_CH(UART_HandleTypeDef *handle)
{
 8008538:	b480      	push	{r7}
 800853a:	b085      	sub	sp, #20
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  uint8_t cdc_ch = 0;
 8008540:	2300      	movs	r3, #0
 8008542:	73fb      	strb	r3, [r7, #15]

  if (handle == &huart5)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	4a06      	ldr	r2, [pc, #24]	@ (8008560 <UART_Handle_TO_CDC_CH+0x28>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d101      	bne.n	8008550 <UART_Handle_TO_CDC_CH+0x18>
  {
    cdc_ch = 0;
 800854c:	2300      	movs	r3, #0
 800854e:	73fb      	strb	r3, [r7, #15]
  else if (handle == &huart3)
  {
    cdc_ch = 2;
  }
#endif
  return cdc_ch;
 8008550:	7bfb      	ldrb	r3, [r7, #15]
}
 8008552:	4618      	mov	r0, r3
 8008554:	3714      	adds	r7, #20
 8008556:	46bd      	mov	sp, r7
 8008558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855c:	4770      	bx	lr
 800855e:	bf00      	nop
 8008560:	2000055c 	.word	0x2000055c

08008564 <Change_UART_Setting>:
//
void Change_UART_Setting(uint8_t cdc_ch)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b086      	sub	sp, #24
 8008568:	af00      	add	r7, sp, #0
 800856a:	4603      	mov	r3, r0
 800856c:	71fb      	strb	r3, [r7, #7]
  UART_HandleTypeDef *handle = CDC_CH_To_UART_Handle(cdc_ch);
 800856e:	79fb      	ldrb	r3, [r7, #7]
 8008570:	4618      	mov	r0, r3
 8008572:	f7ff ffcb 	bl	800850c <CDC_CH_To_UART_Handle>
 8008576:	6178      	str	r0, [r7, #20]

  if (HAL_UART_DeInit(handle) != HAL_OK)
 8008578:	6978      	ldr	r0, [r7, #20]
 800857a:	f7fd fbf7 	bl	8005d6c <HAL_UART_DeInit>
 800857e:	4603      	mov	r3, r0
 8008580:	2b00      	cmp	r3, #0
 8008582:	d001      	beq.n	8008588 <Change_UART_Setting+0x24>
  {
    /* Initialization Error */
    Error_Handler();
 8008584:	f7f8 fb46 	bl	8000c14 <Error_Handler>
  }
  /* set the Stop bit */
  switch (Line_Coding[cdc_ch].format)
 8008588:	79fb      	ldrb	r3, [r7, #7]
 800858a:	4a5c      	ldr	r2, [pc, #368]	@ (80086fc <Change_UART_Setting+0x198>)
 800858c:	00db      	lsls	r3, r3, #3
 800858e:	4413      	add	r3, r2
 8008590:	791b      	ldrb	r3, [r3, #4]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d002      	beq.n	800859c <Change_UART_Setting+0x38>
 8008596:	2b02      	cmp	r3, #2
 8008598:	d004      	beq.n	80085a4 <Change_UART_Setting+0x40>
 800859a:	e008      	b.n	80085ae <Change_UART_Setting+0x4a>
  {
  case 0:
    handle->Init.StopBits = UART_STOPBITS_1;
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	2200      	movs	r2, #0
 80085a0:	60da      	str	r2, [r3, #12]
    break;
 80085a2:	e008      	b.n	80085b6 <Change_UART_Setting+0x52>
  case 2:
    handle->Init.StopBits = UART_STOPBITS_2;
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80085aa:	60da      	str	r2, [r3, #12]
    break;
 80085ac:	e003      	b.n	80085b6 <Change_UART_Setting+0x52>
  default:
    handle->Init.StopBits = UART_STOPBITS_1;
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	2200      	movs	r2, #0
 80085b2:	60da      	str	r2, [r3, #12]
    break;
 80085b4:	bf00      	nop
  }

  /* set the parity bit*/
  switch (Line_Coding[cdc_ch].paritytype)
 80085b6:	79fb      	ldrb	r3, [r7, #7]
 80085b8:	4a50      	ldr	r2, [pc, #320]	@ (80086fc <Change_UART_Setting+0x198>)
 80085ba:	00db      	lsls	r3, r3, #3
 80085bc:	4413      	add	r3, r2
 80085be:	795b      	ldrb	r3, [r3, #5]
 80085c0:	2b02      	cmp	r3, #2
 80085c2:	d00f      	beq.n	80085e4 <Change_UART_Setting+0x80>
 80085c4:	2b02      	cmp	r3, #2
 80085c6:	dc12      	bgt.n	80085ee <Change_UART_Setting+0x8a>
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d002      	beq.n	80085d2 <Change_UART_Setting+0x6e>
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	d004      	beq.n	80085da <Change_UART_Setting+0x76>
 80085d0:	e00d      	b.n	80085ee <Change_UART_Setting+0x8a>
  {
  case 0:
    handle->Init.Parity = UART_PARITY_NONE;
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	2200      	movs	r2, #0
 80085d6:	611a      	str	r2, [r3, #16]
    break;
 80085d8:	e00d      	b.n	80085f6 <Change_UART_Setting+0x92>
  case 1:
    handle->Init.Parity = UART_PARITY_ODD;
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80085e0:	611a      	str	r2, [r3, #16]
    break;
 80085e2:	e008      	b.n	80085f6 <Change_UART_Setting+0x92>
  case 2:
    handle->Init.Parity = UART_PARITY_EVEN;
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80085ea:	611a      	str	r2, [r3, #16]
    break;
 80085ec:	e003      	b.n	80085f6 <Change_UART_Setting+0x92>
  default:
    handle->Init.Parity = UART_PARITY_NONE;
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	2200      	movs	r2, #0
 80085f2:	611a      	str	r2, [r3, #16]
    break;
 80085f4:	bf00      	nop
  }

  /*set the data type : only 8bits and 9bits is supported */
  switch (Line_Coding[cdc_ch].datatype)
 80085f6:	79fb      	ldrb	r3, [r7, #7]
 80085f8:	4a40      	ldr	r2, [pc, #256]	@ (80086fc <Change_UART_Setting+0x198>)
 80085fa:	00db      	lsls	r3, r3, #3
 80085fc:	4413      	add	r3, r2
 80085fe:	799b      	ldrb	r3, [r3, #6]
 8008600:	2b07      	cmp	r3, #7
 8008602:	d002      	beq.n	800860a <Change_UART_Setting+0xa6>
 8008604:	2b08      	cmp	r3, #8
 8008606:	d004      	beq.n	8008612 <Change_UART_Setting+0xae>
 8008608:	e010      	b.n	800862c <Change_UART_Setting+0xc8>
  {
  case 0x07:
    /* With this configuration a parity (Even or Odd) must be set */
    handle->Init.WordLength = UART_WORDLENGTH_8B;
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	2200      	movs	r2, #0
 800860e:	609a      	str	r2, [r3, #8]
    break;
 8008610:	e010      	b.n	8008634 <Change_UART_Setting+0xd0>
  case 0x08:
    if (handle->Init.Parity == UART_PARITY_NONE)
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	691b      	ldr	r3, [r3, #16]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d103      	bne.n	8008622 <Change_UART_Setting+0xbe>
    {
      handle->Init.WordLength = UART_WORDLENGTH_8B;
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	2200      	movs	r2, #0
 800861e:	609a      	str	r2, [r3, #8]
    else
    {
      handle->Init.WordLength = UART_WORDLENGTH_9B;
    }

    break;
 8008620:	e008      	b.n	8008634 <Change_UART_Setting+0xd0>
      handle->Init.WordLength = UART_WORDLENGTH_9B;
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8008628:	609a      	str	r2, [r3, #8]
    break;
 800862a:	e003      	b.n	8008634 <Change_UART_Setting+0xd0>
  default:
    handle->Init.WordLength = UART_WORDLENGTH_8B;
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	2200      	movs	r2, #0
 8008630:	609a      	str	r2, [r3, #8]
    break;
 8008632:	bf00      	nop
  }

  if (Line_Coding[cdc_ch].bitrate == 0)
 8008634:	79fb      	ldrb	r3, [r7, #7]
 8008636:	4a31      	ldr	r2, [pc, #196]	@ (80086fc <Change_UART_Setting+0x198>)
 8008638:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d105      	bne.n	800864c <Change_UART_Setting+0xe8>
  {
    Line_Coding[cdc_ch].bitrate = 115200;
 8008640:	79fb      	ldrb	r3, [r7, #7]
 8008642:	4a2e      	ldr	r2, [pc, #184]	@ (80086fc <Change_UART_Setting+0x198>)
 8008644:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8008648:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
  }

  handle->Init.BaudRate = Line_Coding[cdc_ch].bitrate;
 800864c:	79fb      	ldrb	r3, [r7, #7]
 800864e:	4a2b      	ldr	r2, [pc, #172]	@ (80086fc <Change_UART_Setting+0x198>)
 8008650:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	605a      	str	r2, [r3, #4]
  handle->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	2200      	movs	r2, #0
 800865c:	619a      	str	r2, [r3, #24]
  handle->Init.Mode = UART_MODE_TX_RX;
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	220c      	movs	r2, #12
 8008662:	615a      	str	r2, [r3, #20]
  handle->Init.OverSampling = UART_OVERSAMPLING_16;
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	2200      	movs	r2, #0
 8008668:	61da      	str	r2, [r3, #28]

  if (HAL_UART_Init(handle) != HAL_OK)
 800866a:	6978      	ldr	r0, [r7, #20]
 800866c:	f7fd fb2e 	bl	8005ccc <HAL_UART_Init>
 8008670:	4603      	mov	r3, r0
 8008672:	2b00      	cmp	r3, #0
 8008674:	d001      	beq.n	800867a <Change_UART_Setting+0x116>
  {
    /* Initialization Error */
    Error_Handler();
 8008676:	f7f8 facd 	bl	8000c14 <Error_Handler>
  }

  /** rx for uart and tx buffer of usb */
  if (HAL_UART_Receive_IT(handle, TX_Buffer[cdc_ch], 1) != HAL_OK)
 800867a:	79fb      	ldrb	r3, [r7, #7]
 800867c:	019b      	lsls	r3, r3, #6
 800867e:	4a20      	ldr	r2, [pc, #128]	@ (8008700 <Change_UART_Setting+0x19c>)
 8008680:	4413      	add	r3, r2
 8008682:	2201      	movs	r2, #1
 8008684:	4619      	mov	r1, r3
 8008686:	6978      	ldr	r0, [r7, #20]
 8008688:	f7fd fc2d 	bl	8005ee6 <HAL_UART_Receive_IT>
 800868c:	4603      	mov	r3, r0
 800868e:	2b00      	cmp	r3, #0
 8008690:	d001      	beq.n	8008696 <Change_UART_Setting+0x132>
  {
    /* Transfer error in reception process */
    Error_Handler();
 8008692:	f7f8 fabf 	bl	8000c14 <Error_Handler>
  }
  __HAL_UART_CLEAR_OREFLAG(handle);
 8008696:	2300      	movs	r3, #0
 8008698:	613b      	str	r3, [r7, #16]
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	613b      	str	r3, [r7, #16]
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	613b      	str	r3, [r7, #16]
 80086aa:	693b      	ldr	r3, [r7, #16]
  __HAL_UART_CLEAR_NEFLAG(handle);
 80086ac:	2300      	movs	r3, #0
 80086ae:	60fb      	str	r3, [r7, #12]
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	60fb      	str	r3, [r7, #12]
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	60fb      	str	r3, [r7, #12]
 80086c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_UART_CLEAR_FEFLAG(handle);
 80086c2:	2300      	movs	r3, #0
 80086c4:	60bb      	str	r3, [r7, #8]
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	60bb      	str	r3, [r7, #8]
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	60bb      	str	r3, [r7, #8]
 80086d6:	68bb      	ldr	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 80086d8:	f3bf 8f4f 	dsb	sy
}
 80086dc:	bf00      	nop
  __DSB();  // Ensure instruction completion
  Write_Index[cdc_ch] = 0;
 80086de:	79fb      	ldrb	r3, [r7, #7]
 80086e0:	4a08      	ldr	r2, [pc, #32]	@ (8008704 <Change_UART_Setting+0x1a0>)
 80086e2:	2100      	movs	r1, #0
 80086e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  Read_Index[cdc_ch] = 0;
 80086e8:	79fb      	ldrb	r3, [r7, #7]
 80086ea:	4a07      	ldr	r2, [pc, #28]	@ (8008708 <Change_UART_Setting+0x1a4>)
 80086ec:	2100      	movs	r1, #0
 80086ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80086f2:	bf00      	nop
 80086f4:	3718      	adds	r7, #24
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}
 80086fa:	bf00      	nop
 80086fc:	20000ee8 	.word	0x20000ee8
 8008700:	20000ea8 	.word	0x20000ea8
 8008704:	20000ef0 	.word	0x20000ef0
 8008708:	20000ef4 	.word	0x20000ef4

0800870c <CDC_Init>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init(uint8_t cdc_ch)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b082      	sub	sp, #8
 8008710:	af00      	add	r7, sp, #0
 8008712:	4603      	mov	r3, r0
 8008714:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */

  /* ##-1- Set Application Buffers */
  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, RX_Buffer[cdc_ch]);
 8008716:	79fb      	ldrb	r3, [r7, #7]
 8008718:	019b      	lsls	r3, r3, #6
 800871a:	4a0d      	ldr	r2, [pc, #52]	@ (8008750 <CDC_Init+0x44>)
 800871c:	441a      	add	r2, r3
 800871e:	79fb      	ldrb	r3, [r7, #7]
 8008720:	490c      	ldr	r1, [pc, #48]	@ (8008754 <CDC_Init+0x48>)
 8008722:	4618      	mov	r0, r3
 8008724:	f001 f828 	bl	8009778 <USBD_CDC_SetRxBuffer>

  //  /*##-2- Start the TIM Base generation in interrupt mode ####################*/
  //  /* Start Channel1 */
    if ((HAL_TIM_Base_Start_IT(&htim1) != HAL_OK )||(HAL_TIM_Base_Start_IT(&htim2) != HAL_OK ))
 8008728:	480b      	ldr	r0, [pc, #44]	@ (8008758 <CDC_Init+0x4c>)
 800872a:	f7fc fe81 	bl	8005430 <HAL_TIM_Base_Start_IT>
 800872e:	4603      	mov	r3, r0
 8008730:	2b00      	cmp	r3, #0
 8008732:	d105      	bne.n	8008740 <CDC_Init+0x34>
 8008734:	4809      	ldr	r0, [pc, #36]	@ (800875c <CDC_Init+0x50>)
 8008736:	f7fc fe7b 	bl	8005430 <HAL_TIM_Base_Start_IT>
 800873a:	4603      	mov	r3, r0
 800873c:	2b00      	cmp	r3, #0
 800873e:	d001      	beq.n	8008744 <CDC_Init+0x38>
    {
      /* Starting Error */
    	//HAL_TIM_Base_Stop_IT
      Error_Handler();
 8008740:	f7f8 fa68 	bl	8000c14 <Error_Handler>
    }

  return (USBD_OK);
 8008744:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008746:	4618      	mov	r0, r3
 8008748:	3708      	adds	r7, #8
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
 800874e:	bf00      	nop
 8008750:	20000e68 	.word	0x20000e68
 8008754:	20000b4c 	.word	0x20000b4c
 8008758:	2000043c 	.word	0x2000043c
 800875c:	20000484 	.word	0x20000484

08008760 <CDC_DeInit>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit(uint8_t cdc_ch)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b082      	sub	sp, #8
 8008764:	af00      	add	r7, sp, #0
 8008766:	4603      	mov	r3, r0
 8008768:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  /* DeInitialize the UART peripheral */
    if (HAL_UART_DeInit(CDC_CH_To_UART_Handle(cdc_ch)) != HAL_OK)
 800876a:	79fb      	ldrb	r3, [r7, #7]
 800876c:	4618      	mov	r0, r3
 800876e:	f7ff fecd 	bl	800850c <CDC_CH_To_UART_Handle>
 8008772:	4603      	mov	r3, r0
 8008774:	4618      	mov	r0, r3
 8008776:	f7fd faf9 	bl	8005d6c <HAL_UART_DeInit>
 800877a:	4603      	mov	r3, r0
 800877c:	2b00      	cmp	r3, #0
 800877e:	d001      	beq.n	8008784 <CDC_DeInit+0x24>
    {
      /* Initialization Error */
      Error_Handler();
 8008780:	f7f8 fa48 	bl	8000c14 <Error_Handler>
    }
    if ((HAL_TIM_Base_Stop_IT(&htim1) != HAL_OK )||(HAL_TIM_Base_Stop_IT(&htim2) != HAL_OK ))
 8008784:	4809      	ldr	r0, [pc, #36]	@ (80087ac <CDC_DeInit+0x4c>)
 8008786:	f7fc fec3 	bl	8005510 <HAL_TIM_Base_Stop_IT>
 800878a:	4603      	mov	r3, r0
 800878c:	2b00      	cmp	r3, #0
 800878e:	d105      	bne.n	800879c <CDC_DeInit+0x3c>
 8008790:	4807      	ldr	r0, [pc, #28]	@ (80087b0 <CDC_DeInit+0x50>)
 8008792:	f7fc febd 	bl	8005510 <HAL_TIM_Base_Stop_IT>
 8008796:	4603      	mov	r3, r0
 8008798:	2b00      	cmp	r3, #0
 800879a:	d001      	beq.n	80087a0 <CDC_DeInit+0x40>
        {
          /* Starting Error */
          Error_Handler();
 800879c:	f7f8 fa3a 	bl	8000c14 <Error_Handler>
        }
  return (USBD_OK);
 80087a0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3708      	adds	r7, #8
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop
 80087ac:	2000043c 	.word	0x2000043c
 80087b0:	20000484 	.word	0x20000484

080087b4 <CDC_Control>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control(uint8_t cdc_ch, uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b082      	sub	sp, #8
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	603a      	str	r2, [r7, #0]
 80087bc:	461a      	mov	r2, r3
 80087be:	4603      	mov	r3, r0
 80087c0:	71fb      	strb	r3, [r7, #7]
 80087c2:	460b      	mov	r3, r1
 80087c4:	71bb      	strb	r3, [r7, #6]
 80087c6:	4613      	mov	r3, r2
 80087c8:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd)
 80087ca:	79bb      	ldrb	r3, [r7, #6]
 80087cc:	2b23      	cmp	r3, #35	@ 0x23
 80087ce:	f200 80ba 	bhi.w	8008946 <CDC_Control+0x192>
 80087d2:	a201      	add	r2, pc, #4	@ (adr r2, 80087d8 <CDC_Control+0x24>)
 80087d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087d8:	08008947 	.word	0x08008947
 80087dc:	08008947 	.word	0x08008947
 80087e0:	08008947 	.word	0x08008947
 80087e4:	08008947 	.word	0x08008947
 80087e8:	08008947 	.word	0x08008947
 80087ec:	08008947 	.word	0x08008947
 80087f0:	08008947 	.word	0x08008947
 80087f4:	08008947 	.word	0x08008947
 80087f8:	08008947 	.word	0x08008947
 80087fc:	08008947 	.word	0x08008947
 8008800:	08008947 	.word	0x08008947
 8008804:	08008947 	.word	0x08008947
 8008808:	08008947 	.word	0x08008947
 800880c:	08008947 	.word	0x08008947
 8008810:	08008947 	.word	0x08008947
 8008814:	08008947 	.word	0x08008947
 8008818:	08008947 	.word	0x08008947
 800881c:	08008947 	.word	0x08008947
 8008820:	08008947 	.word	0x08008947
 8008824:	08008947 	.word	0x08008947
 8008828:	08008947 	.word	0x08008947
 800882c:	08008947 	.word	0x08008947
 8008830:	08008947 	.word	0x08008947
 8008834:	08008947 	.word	0x08008947
 8008838:	08008947 	.word	0x08008947
 800883c:	08008947 	.word	0x08008947
 8008840:	08008947 	.word	0x08008947
 8008844:	08008947 	.word	0x08008947
 8008848:	08008947 	.word	0x08008947
 800884c:	08008947 	.word	0x08008947
 8008850:	08008947 	.word	0x08008947
 8008854:	08008947 	.word	0x08008947
 8008858:	08008869 	.word	0x08008869
 800885c:	080088d1 	.word	0x080088d1
 8008860:	08008947 	.word	0x08008947
 8008864:	08008947 	.word	0x08008947
    /*                                        3 - Mark                             */
    /*                                        4 - Space                            */
    /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
    /*******************************************************************************/
  case CDC_SET_LINE_CODING:
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	461a      	mov	r2, r3
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	3301      	adds	r3, #1
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	021b      	lsls	r3, r3, #8
 8008876:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	3302      	adds	r3, #2
 800887c:	781b      	ldrb	r3, [r3, #0]
 800887e:	041b      	lsls	r3, r3, #16
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8008880:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	3303      	adds	r3, #3
 8008886:	781b      	ldrb	r3, [r3, #0]
 8008888:	061b      	lsls	r3, r3, #24
 800888a:	431a      	orrs	r2, r3
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 800888c:	79fb      	ldrb	r3, [r7, #7]
 800888e:	4611      	mov	r1, r2
 8008890:	4a30      	ldr	r2, [pc, #192]	@ (8008954 <CDC_Control+0x1a0>)
 8008892:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    Line_Coding[cdc_ch].format = pbuf[4];
 8008896:	79fb      	ldrb	r3, [r7, #7]
 8008898:	683a      	ldr	r2, [r7, #0]
 800889a:	7911      	ldrb	r1, [r2, #4]
 800889c:	4a2d      	ldr	r2, [pc, #180]	@ (8008954 <CDC_Control+0x1a0>)
 800889e:	00db      	lsls	r3, r3, #3
 80088a0:	4413      	add	r3, r2
 80088a2:	460a      	mov	r2, r1
 80088a4:	711a      	strb	r2, [r3, #4]
    Line_Coding[cdc_ch].paritytype = pbuf[5];
 80088a6:	79fb      	ldrb	r3, [r7, #7]
 80088a8:	683a      	ldr	r2, [r7, #0]
 80088aa:	7951      	ldrb	r1, [r2, #5]
 80088ac:	4a29      	ldr	r2, [pc, #164]	@ (8008954 <CDC_Control+0x1a0>)
 80088ae:	00db      	lsls	r3, r3, #3
 80088b0:	4413      	add	r3, r2
 80088b2:	460a      	mov	r2, r1
 80088b4:	715a      	strb	r2, [r3, #5]
    Line_Coding[cdc_ch].datatype = pbuf[6];
 80088b6:	79fb      	ldrb	r3, [r7, #7]
 80088b8:	683a      	ldr	r2, [r7, #0]
 80088ba:	7991      	ldrb	r1, [r2, #6]
 80088bc:	4a25      	ldr	r2, [pc, #148]	@ (8008954 <CDC_Control+0x1a0>)
 80088be:	00db      	lsls	r3, r3, #3
 80088c0:	4413      	add	r3, r2
 80088c2:	460a      	mov	r2, r1
 80088c4:	719a      	strb	r2, [r3, #6]

    Change_UART_Setting(cdc_ch);
 80088c6:	79fb      	ldrb	r3, [r7, #7]
 80088c8:	4618      	mov	r0, r3
 80088ca:	f7ff fe4b 	bl	8008564 <Change_UART_Setting>
    break;
 80088ce:	e03b      	b.n	8008948 <CDC_Control+0x194>

  case CDC_GET_LINE_CODING:
    pbuf[0] = (uint8_t)(Line_Coding[cdc_ch].bitrate);
 80088d0:	79fb      	ldrb	r3, [r7, #7]
 80088d2:	4a20      	ldr	r2, [pc, #128]	@ (8008954 <CDC_Control+0x1a0>)
 80088d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80088d8:	b2da      	uxtb	r2, r3
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	701a      	strb	r2, [r3, #0]
    pbuf[1] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 8);
 80088de:	79fb      	ldrb	r3, [r7, #7]
 80088e0:	4a1c      	ldr	r2, [pc, #112]	@ (8008954 <CDC_Control+0x1a0>)
 80088e2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80088e6:	0a1a      	lsrs	r2, r3, #8
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	3301      	adds	r3, #1
 80088ec:	b2d2      	uxtb	r2, r2
 80088ee:	701a      	strb	r2, [r3, #0]
    pbuf[2] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 16);
 80088f0:	79fb      	ldrb	r3, [r7, #7]
 80088f2:	4a18      	ldr	r2, [pc, #96]	@ (8008954 <CDC_Control+0x1a0>)
 80088f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80088f8:	0c1a      	lsrs	r2, r3, #16
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	3302      	adds	r3, #2
 80088fe:	b2d2      	uxtb	r2, r2
 8008900:	701a      	strb	r2, [r3, #0]
    pbuf[3] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 24);
 8008902:	79fb      	ldrb	r3, [r7, #7]
 8008904:	4a13      	ldr	r2, [pc, #76]	@ (8008954 <CDC_Control+0x1a0>)
 8008906:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800890a:	0e1a      	lsrs	r2, r3, #24
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	3303      	adds	r3, #3
 8008910:	b2d2      	uxtb	r2, r2
 8008912:	701a      	strb	r2, [r3, #0]
    pbuf[4] = Line_Coding[cdc_ch].format;
 8008914:	79fb      	ldrb	r3, [r7, #7]
 8008916:	683a      	ldr	r2, [r7, #0]
 8008918:	3204      	adds	r2, #4
 800891a:	490e      	ldr	r1, [pc, #56]	@ (8008954 <CDC_Control+0x1a0>)
 800891c:	00db      	lsls	r3, r3, #3
 800891e:	440b      	add	r3, r1
 8008920:	791b      	ldrb	r3, [r3, #4]
 8008922:	7013      	strb	r3, [r2, #0]
    pbuf[5] = Line_Coding[cdc_ch].paritytype;
 8008924:	79fb      	ldrb	r3, [r7, #7]
 8008926:	683a      	ldr	r2, [r7, #0]
 8008928:	3205      	adds	r2, #5
 800892a:	490a      	ldr	r1, [pc, #40]	@ (8008954 <CDC_Control+0x1a0>)
 800892c:	00db      	lsls	r3, r3, #3
 800892e:	440b      	add	r3, r1
 8008930:	795b      	ldrb	r3, [r3, #5]
 8008932:	7013      	strb	r3, [r2, #0]
    pbuf[6] = Line_Coding[cdc_ch].datatype;
 8008934:	79fb      	ldrb	r3, [r7, #7]
 8008936:	683a      	ldr	r2, [r7, #0]
 8008938:	3206      	adds	r2, #6
 800893a:	4906      	ldr	r1, [pc, #24]	@ (8008954 <CDC_Control+0x1a0>)
 800893c:	00db      	lsls	r3, r3, #3
 800893e:	440b      	add	r3, r1
 8008940:	799b      	ldrb	r3, [r3, #6]
 8008942:	7013      	strb	r3, [r2, #0]
    break;
 8008944:	e000      	b.n	8008948 <CDC_Control+0x194>
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008946:	bf00      	nop
  }

  return (USBD_OK);
 8008948:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800894a:	4618      	mov	r0, r3
 800894c:	3708      	adds	r7, #8
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}
 8008952:	bf00      	nop
 8008954:	20000ee8 	.word	0x20000ee8

08008958 <CDC_Receive>:
//  USBD_CDC_ReceivePacket(cdc_ch, &hUsbDevice);
//  return (USBD_OK);
//  /* USER CODE END 6 */
//}
static int8_t CDC_Receive(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len)
{
 8008958:	b5b0      	push	{r4, r5, r7, lr}
 800895a:	b086      	sub	sp, #24
 800895c:	af00      	add	r7, sp, #0
 800895e:	4603      	mov	r3, r0
 8008960:	60b9      	str	r1, [r7, #8]
 8008962:	607a      	str	r2, [r7, #4]
 8008964:	73fb      	strb	r3, [r7, #15]
  for (uint32_t i = 0; i < *Len; i++)
 8008966:	2300      	movs	r3, #0
 8008968:	617b      	str	r3, [r7, #20]
 800896a:	e021      	b.n	80089b0 <CDC_Receive+0x58>
  {
    CDC_RX_Buffer[cdc_ch][CDC_RX_WriteIndex[cdc_ch]++] = Buf[i];
 800896c:	68ba      	ldr	r2, [r7, #8]
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	18d0      	adds	r0, r2, r3
 8008972:	7bf9      	ldrb	r1, [r7, #15]
 8008974:	7bfa      	ldrb	r2, [r7, #15]
 8008976:	4b19      	ldr	r3, [pc, #100]	@ (80089dc <CDC_Receive+0x84>)
 8008978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800897c:	1c5c      	adds	r4, r3, #1
 800897e:	4d17      	ldr	r5, [pc, #92]	@ (80089dc <CDC_Receive+0x84>)
 8008980:	f845 4022 	str.w	r4, [r5, r2, lsl #2]
 8008984:	7804      	ldrb	r4, [r0, #0]
 8008986:	4816      	ldr	r0, [pc, #88]	@ (80089e0 <CDC_Receive+0x88>)
 8008988:	030a      	lsls	r2, r1, #12
 800898a:	4402      	add	r2, r0
 800898c:	4413      	add	r3, r2
 800898e:	4622      	mov	r2, r4
 8008990:	701a      	strb	r2, [r3, #0]
    if (CDC_RX_WriteIndex[cdc_ch] >= CDC_RX_BUFFER_SIZE)
 8008992:	7bfb      	ldrb	r3, [r7, #15]
 8008994:	4a11      	ldr	r2, [pc, #68]	@ (80089dc <CDC_Receive+0x84>)
 8008996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800899a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800899e:	d304      	bcc.n	80089aa <CDC_Receive+0x52>
      CDC_RX_WriteIndex[cdc_ch] = 0;
 80089a0:	7bfb      	ldrb	r3, [r7, #15]
 80089a2:	4a0e      	ldr	r2, [pc, #56]	@ (80089dc <CDC_Receive+0x84>)
 80089a4:	2100      	movs	r1, #0
 80089a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (uint32_t i = 0; i < *Len; i++)
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	3301      	adds	r3, #1
 80089ae:	617b      	str	r3, [r7, #20]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	697a      	ldr	r2, [r7, #20]
 80089b6:	429a      	cmp	r2, r3
 80089b8:	d3d8      	bcc.n	800896c <CDC_Receive+0x14>
  }

  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, Buf);
 80089ba:	7bfb      	ldrb	r3, [r7, #15]
 80089bc:	68ba      	ldr	r2, [r7, #8]
 80089be:	4909      	ldr	r1, [pc, #36]	@ (80089e4 <CDC_Receive+0x8c>)
 80089c0:	4618      	mov	r0, r3
 80089c2:	f000 fed9 	bl	8009778 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(cdc_ch, &hUsbDevice);
 80089c6:	7bfb      	ldrb	r3, [r7, #15]
 80089c8:	4906      	ldr	r1, [pc, #24]	@ (80089e4 <CDC_Receive+0x8c>)
 80089ca:	4618      	mov	r0, r3
 80089cc:	f000 ff34 	bl	8009838 <USBD_CDC_ReceivePacket>
  return USBD_OK;
 80089d0:	2300      	movs	r3, #0
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3718      	adds	r7, #24
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bdb0      	pop	{r4, r5, r7, pc}
 80089da:	bf00      	nop
 80089dc:	20001ef8 	.word	0x20001ef8
 80089e0:	20000ef8 	.word	0x20000ef8
 80089e4:	20000b4c 	.word	0x20000b4c

080089e8 <CDC_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b085      	sub	sp, #20
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	60b9      	str	r1, [r7, #8]
 80089f0:	607a      	str	r2, [r7, #4]
 80089f2:	461a      	mov	r2, r3
 80089f4:	4603      	mov	r3, r0
 80089f6:	73fb      	strb	r3, [r7, #15]
 80089f8:	4613      	mov	r3, r2
 80089fa:	73bb      	strb	r3, [r7, #14]
  return (USBD_OK);
 80089fc:	2300      	movs	r3, #0
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3714      	adds	r7, #20
 8008a02:	46bd      	mov	sp, r7
 8008a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a08:	4770      	bx	lr
	...

08008a0c <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b084      	sub	sp, #16
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  uint8_t ch = UART_Handle_TO_CDC_CH(huart);
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f7ff fd8f 	bl	8008538 <UART_Handle_TO_CDC_CH>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	73fb      	strb	r3, [r7, #15]
  if (ch >= NUMBER_OF_CDC) return;
 8008a1e:	7bfb      	ldrb	r3, [r7, #15]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d11c      	bne.n	8008a5e <HAL_UART_TxCpltCallback+0x52>

  // Cập nhật ReadIndex sau khi truyền xong
  if (CDC_RX_ReadIndex[ch] > CDC_RX_WriteIndex[ch])
 8008a24:	7bfb      	ldrb	r3, [r7, #15]
 8008a26:	4a10      	ldr	r2, [pc, #64]	@ (8008a68 <HAL_UART_TxCpltCallback+0x5c>)
 8008a28:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008a2c:	7bfb      	ldrb	r3, [r7, #15]
 8008a2e:	490f      	ldr	r1, [pc, #60]	@ (8008a6c <HAL_UART_TxCpltCallback+0x60>)
 8008a30:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d905      	bls.n	8008a44 <HAL_UART_TxCpltCallback+0x38>
  {
    CDC_RX_ReadIndex[ch] = 0;
 8008a38:	7bfb      	ldrb	r3, [r7, #15]
 8008a3a:	4a0b      	ldr	r2, [pc, #44]	@ (8008a68 <HAL_UART_TxCpltCallback+0x5c>)
 8008a3c:	2100      	movs	r1, #0
 8008a3e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8008a42:	e007      	b.n	8008a54 <HAL_UART_TxCpltCallback+0x48>
  }
  else
  {
    CDC_RX_ReadIndex[ch] = CDC_RX_WriteIndex[ch];
 8008a44:	7bfa      	ldrb	r2, [r7, #15]
 8008a46:	7bfb      	ldrb	r3, [r7, #15]
 8008a48:	4908      	ldr	r1, [pc, #32]	@ (8008a6c <HAL_UART_TxCpltCallback+0x60>)
 8008a4a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008a4e:	4906      	ldr	r1, [pc, #24]	@ (8008a68 <HAL_UART_TxCpltCallback+0x5c>)
 8008a50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }

  uart_tx_busy[ch] = 0;
 8008a54:	7bfb      	ldrb	r3, [r7, #15]
 8008a56:	4a06      	ldr	r2, [pc, #24]	@ (8008a70 <HAL_UART_TxCpltCallback+0x64>)
 8008a58:	2100      	movs	r1, #0
 8008a5a:	54d1      	strb	r1, [r2, r3]
 8008a5c:	e000      	b.n	8008a60 <HAL_UART_TxCpltCallback+0x54>
  if (ch >= NUMBER_OF_CDC) return;
 8008a5e:	bf00      	nop
}
 8008a60:	3710      	adds	r7, #16
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	bf00      	nop
 8008a68:	20001efc 	.word	0x20001efc
 8008a6c:	20001ef8 	.word	0x20001ef8
 8008a70:	20001f00 	.word	0x20001f00

08008a74 <ProcessCDC_RX>:

void ProcessCDC_RX(void) {
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b084      	sub	sp, #16
 8008a78:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < NUMBER_OF_CDC; i++) {
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	73fb      	strb	r3, [r7, #15]
 8008a7e:	e057      	b.n	8008b30 <ProcessCDC_RX+0xbc>
        if (CDC_RX_ReadIndex[i] != CDC_RX_WriteIndex[i]) {
 8008a80:	7bfb      	ldrb	r3, [r7, #15]
 8008a82:	4a2f      	ldr	r2, [pc, #188]	@ (8008b40 <ProcessCDC_RX+0xcc>)
 8008a84:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008a88:	7bfb      	ldrb	r3, [r7, #15]
 8008a8a:	492e      	ldr	r1, [pc, #184]	@ (8008b44 <ProcessCDC_RX+0xd0>)
 8008a8c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008a90:	429a      	cmp	r2, r3
 8008a92:	d04a      	beq.n	8008b2a <ProcessCDC_RX+0xb6>
            uint32_t buffptr = CDC_RX_ReadIndex[i];
 8008a94:	7bfb      	ldrb	r3, [r7, #15]
 8008a96:	4a2a      	ldr	r2, [pc, #168]	@ (8008b40 <ProcessCDC_RX+0xcc>)
 8008a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a9c:	607b      	str	r3, [r7, #4]
            uint32_t buffsize = (CDC_RX_ReadIndex[i] > CDC_RX_WriteIndex[i]) ?
 8008a9e:	7bfb      	ldrb	r3, [r7, #15]
 8008aa0:	4a27      	ldr	r2, [pc, #156]	@ (8008b40 <ProcessCDC_RX+0xcc>)
 8008aa2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008aa6:	7bfb      	ldrb	r3, [r7, #15]
 8008aa8:	4926      	ldr	r1, [pc, #152]	@ (8008b44 <ProcessCDC_RX+0xd0>)
 8008aaa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                                (CDC_RX_BUFFER_SIZE - CDC_RX_ReadIndex[i]) :
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d906      	bls.n	8008ac0 <ProcessCDC_RX+0x4c>
 8008ab2:	7bfb      	ldrb	r3, [r7, #15]
 8008ab4:	4a22      	ldr	r2, [pc, #136]	@ (8008b40 <ProcessCDC_RX+0xcc>)
 8008ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008aba:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8008abe:	e008      	b.n	8008ad2 <ProcessCDC_RX+0x5e>
                                (CDC_RX_WriteIndex[i] - CDC_RX_ReadIndex[i]);
 8008ac0:	7bfb      	ldrb	r3, [r7, #15]
 8008ac2:	4a20      	ldr	r2, [pc, #128]	@ (8008b44 <ProcessCDC_RX+0xd0>)
 8008ac4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008ac8:	7bfb      	ldrb	r3, [r7, #15]
 8008aca:	491d      	ldr	r1, [pc, #116]	@ (8008b40 <ProcessCDC_RX+0xcc>)
 8008acc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                                (CDC_RX_BUFFER_SIZE - CDC_RX_ReadIndex[i]) :
 8008ad0:	1ad3      	subs	r3, r2, r3
            uint32_t buffsize = (CDC_RX_ReadIndex[i] > CDC_RX_WriteIndex[i]) ?
 8008ad2:	60bb      	str	r3, [r7, #8]

            if (buffsize > 64) buffsize = 64;
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	2b40      	cmp	r3, #64	@ 0x40
 8008ad8:	d901      	bls.n	8008ade <ProcessCDC_RX+0x6a>
 8008ada:	2340      	movs	r3, #64	@ 0x40
 8008adc:	60bb      	str	r3, [r7, #8]

            HAL_UART_Transmit(CDC_CH_To_UART_Handle(i), &CDC_RX_Buffer[i][buffptr], buffsize, HAL_MAX_DELAY);
 8008ade:	7bfb      	ldrb	r3, [r7, #15]
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f7ff fd13 	bl	800850c <CDC_CH_To_UART_Handle>
 8008ae6:	7bfb      	ldrb	r3, [r7, #15]
 8008ae8:	031a      	lsls	r2, r3, #12
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	4413      	add	r3, r2
 8008aee:	4a16      	ldr	r2, [pc, #88]	@ (8008b48 <ProcessCDC_RX+0xd4>)
 8008af0:	1899      	adds	r1, r3, r2
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	b29a      	uxth	r2, r3
 8008af6:	f04f 33ff 	mov.w	r3, #4294967295
 8008afa:	f7fd f969 	bl	8005dd0 <HAL_UART_Transmit>

            CDC_RX_ReadIndex[i] += buffsize;
 8008afe:	7bfb      	ldrb	r3, [r7, #15]
 8008b00:	4a0f      	ldr	r2, [pc, #60]	@ (8008b40 <ProcessCDC_RX+0xcc>)
 8008b02:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008b06:	7bfb      	ldrb	r3, [r7, #15]
 8008b08:	68ba      	ldr	r2, [r7, #8]
 8008b0a:	440a      	add	r2, r1
 8008b0c:	490c      	ldr	r1, [pc, #48]	@ (8008b40 <ProcessCDC_RX+0xcc>)
 8008b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            if (CDC_RX_ReadIndex[i] >= CDC_RX_BUFFER_SIZE)
 8008b12:	7bfb      	ldrb	r3, [r7, #15]
 8008b14:	4a0a      	ldr	r2, [pc, #40]	@ (8008b40 <ProcessCDC_RX+0xcc>)
 8008b16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b1e:	d304      	bcc.n	8008b2a <ProcessCDC_RX+0xb6>
                CDC_RX_ReadIndex[i] = 0;
 8008b20:	7bfb      	ldrb	r3, [r7, #15]
 8008b22:	4a07      	ldr	r2, [pc, #28]	@ (8008b40 <ProcessCDC_RX+0xcc>)
 8008b24:	2100      	movs	r1, #0
 8008b26:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (uint8_t i = 0; i < NUMBER_OF_CDC; i++) {
 8008b2a:	7bfb      	ldrb	r3, [r7, #15]
 8008b2c:	3301      	adds	r3, #1
 8008b2e:	73fb      	strb	r3, [r7, #15]
 8008b30:	7bfb      	ldrb	r3, [r7, #15]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d0a4      	beq.n	8008a80 <ProcessCDC_RX+0xc>
        }
    }
}
 8008b36:	bf00      	nop
 8008b38:	bf00      	nop
 8008b3a:	3710      	adds	r7, #16
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}
 8008b40:	20001efc 	.word	0x20001efc
 8008b44:	20001ef8 	.word	0x20001ef8
 8008b48:	20000ef8 	.word	0x20000ef8

08008b4c <ProcessCDC_TX>:

void ProcessCDC_TX(void) {
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b084      	sub	sp, #16
 8008b50:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < NUMBER_OF_CDC; i++) {
 8008b52:	2300      	movs	r3, #0
 8008b54:	73fb      	strb	r3, [r7, #15]
 8008b56:	e054      	b.n	8008c02 <ProcessCDC_TX+0xb6>
        if (Read_Index[i] != Write_Index[i]) {
 8008b58:	7bfb      	ldrb	r3, [r7, #15]
 8008b5a:	4a2e      	ldr	r2, [pc, #184]	@ (8008c14 <ProcessCDC_TX+0xc8>)
 8008b5c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008b60:	7bfb      	ldrb	r3, [r7, #15]
 8008b62:	492d      	ldr	r1, [pc, #180]	@ (8008c18 <ProcessCDC_TX+0xcc>)
 8008b64:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008b68:	429a      	cmp	r2, r3
 8008b6a:	d047      	beq.n	8008bfc <ProcessCDC_TX+0xb0>
            uint32_t buffptr = Read_Index[i];
 8008b6c:	7bfb      	ldrb	r3, [r7, #15]
 8008b6e:	4a29      	ldr	r2, [pc, #164]	@ (8008c14 <ProcessCDC_TX+0xc8>)
 8008b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b74:	60bb      	str	r3, [r7, #8]
            uint32_t buffsize = (Read_Index[i] > Write_Index[i]) ?
 8008b76:	7bfb      	ldrb	r3, [r7, #15]
 8008b78:	4a26      	ldr	r2, [pc, #152]	@ (8008c14 <ProcessCDC_TX+0xc8>)
 8008b7a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008b7e:	7bfb      	ldrb	r3, [r7, #15]
 8008b80:	4925      	ldr	r1, [pc, #148]	@ (8008c18 <ProcessCDC_TX+0xcc>)
 8008b82:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                                (APP_TX_DATA_SIZE - Read_Index[i]) :
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d906      	bls.n	8008b98 <ProcessCDC_TX+0x4c>
 8008b8a:	7bfb      	ldrb	r3, [r7, #15]
 8008b8c:	4a21      	ldr	r2, [pc, #132]	@ (8008c14 <ProcessCDC_TX+0xc8>)
 8008b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b92:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8008b96:	e008      	b.n	8008baa <ProcessCDC_TX+0x5e>
                                (Write_Index[i] - Read_Index[i]);
 8008b98:	7bfb      	ldrb	r3, [r7, #15]
 8008b9a:	4a1f      	ldr	r2, [pc, #124]	@ (8008c18 <ProcessCDC_TX+0xcc>)
 8008b9c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008ba0:	7bfb      	ldrb	r3, [r7, #15]
 8008ba2:	491c      	ldr	r1, [pc, #112]	@ (8008c14 <ProcessCDC_TX+0xc8>)
 8008ba4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                                (APP_TX_DATA_SIZE - Read_Index[i]) :
 8008ba8:	1ad3      	subs	r3, r2, r3
            uint32_t buffsize = (Read_Index[i] > Write_Index[i]) ?
 8008baa:	607b      	str	r3, [r7, #4]

            USBD_CDC_SetTxBuffer(i, &hUsbDevice, &TX_Buffer[i][buffptr], buffsize);
 8008bac:	7bfb      	ldrb	r3, [r7, #15]
 8008bae:	019a      	lsls	r2, r3, #6
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	4413      	add	r3, r2
 8008bb4:	4a19      	ldr	r2, [pc, #100]	@ (8008c1c <ProcessCDC_TX+0xd0>)
 8008bb6:	441a      	add	r2, r3
 8008bb8:	7bf8      	ldrb	r0, [r7, #15]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	4918      	ldr	r1, [pc, #96]	@ (8008c20 <ProcessCDC_TX+0xd4>)
 8008bbe:	f000 fdb7 	bl	8009730 <USBD_CDC_SetTxBuffer>

            if (USBD_CDC_TransmitPacket(i, &hUsbDevice) == USBD_OK) {
 8008bc2:	7bfb      	ldrb	r3, [r7, #15]
 8008bc4:	4916      	ldr	r1, [pc, #88]	@ (8008c20 <ProcessCDC_TX+0xd4>)
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f000 fdf4 	bl	80097b4 <USBD_CDC_TransmitPacket>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d114      	bne.n	8008bfc <ProcessCDC_TX+0xb0>
                Read_Index[i] += buffsize;
 8008bd2:	7bfb      	ldrb	r3, [r7, #15]
 8008bd4:	4a0f      	ldr	r2, [pc, #60]	@ (8008c14 <ProcessCDC_TX+0xc8>)
 8008bd6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008bda:	7bfb      	ldrb	r3, [r7, #15]
 8008bdc:	687a      	ldr	r2, [r7, #4]
 8008bde:	440a      	add	r2, r1
 8008be0:	490c      	ldr	r1, [pc, #48]	@ (8008c14 <ProcessCDC_TX+0xc8>)
 8008be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                if (Read_Index[i] == APP_RX_DATA_SIZE)
 8008be6:	7bfb      	ldrb	r3, [r7, #15]
 8008be8:	4a0a      	ldr	r2, [pc, #40]	@ (8008c14 <ProcessCDC_TX+0xc8>)
 8008bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bee:	2b40      	cmp	r3, #64	@ 0x40
 8008bf0:	d104      	bne.n	8008bfc <ProcessCDC_TX+0xb0>
                    Read_Index[i] = 0;
 8008bf2:	7bfb      	ldrb	r3, [r7, #15]
 8008bf4:	4a07      	ldr	r2, [pc, #28]	@ (8008c14 <ProcessCDC_TX+0xc8>)
 8008bf6:	2100      	movs	r1, #0
 8008bf8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (uint8_t i = 0; i < NUMBER_OF_CDC; i++) {
 8008bfc:	7bfb      	ldrb	r3, [r7, #15]
 8008bfe:	3301      	adds	r3, #1
 8008c00:	73fb      	strb	r3, [r7, #15]
 8008c02:	7bfb      	ldrb	r3, [r7, #15]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d0a7      	beq.n	8008b58 <ProcessCDC_TX+0xc>
            }
        }
    }
}
 8008c08:	bf00      	nop
 8008c0a:	bf00      	nop
 8008c0c:	3710      	adds	r7, #16
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}
 8008c12:	bf00      	nop
 8008c14:	20000ef4 	.word	0x20000ef4
 8008c18:	20000ef0 	.word	0x20000ef0
 8008c1c:	20000ea8 	.word	0x20000ea8
 8008c20:	20000b4c 	.word	0x20000b4c

08008c24 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b082      	sub	sp, #8
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
    if (htim == &htim2)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	4a08      	ldr	r2, [pc, #32]	@ (8008c50 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d102      	bne.n	8008c3a <HAL_TIM_PeriodElapsedCallback+0x16>
        ProcessCDC_RX();
 8008c34:	f7ff ff1e 	bl	8008a74 <ProcessCDC_RX>
        ProcessCDC_TX();
//    else if(htim == &htim4 && (HID_Frame_Read(&hid_frame_fifo_receive,process_sendframe))){
//    	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
//    	USBD_CUSTOM_HID_SendReport(&hUsbDevice,process_sendframe, HID_FRAME_SIZE);
//    }
}
 8008c38:	e005      	b.n	8008c46 <HAL_TIM_PeriodElapsedCallback+0x22>
    else if (htim == &htim1)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	4a05      	ldr	r2, [pc, #20]	@ (8008c54 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d101      	bne.n	8008c46 <HAL_TIM_PeriodElapsedCallback+0x22>
        ProcessCDC_TX();
 8008c42:	f7ff ff83 	bl	8008b4c <ProcessCDC_TX>
}
 8008c46:	bf00      	nop
 8008c48:	3708      	adds	r7, #8
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}
 8008c4e:	bf00      	nop
 8008c50:	20000484 	.word	0x20000484
 8008c54:	2000043c 	.word	0x2000043c

08008c58 <HAL_UART_RxCpltCallback>:
//
//
//}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b084      	sub	sp, #16
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  uint8_t cdc_ch = UART_Handle_TO_CDC_CH(huart);
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f7ff fc69 	bl	8008538 <UART_Handle_TO_CDC_CH>
 8008c66:	4603      	mov	r3, r0
 8008c68:	73fb      	strb	r3, [r7, #15]
  //CDC_Transmit(cdc_ch, (TX_Buffer[cdc_ch] + Write_Index[cdc_ch]), 1);
  /* Increment Index for buffer writing */
  Write_Index[cdc_ch]++;
 8008c6a:	7bfb      	ldrb	r3, [r7, #15]
 8008c6c:	4a11      	ldr	r2, [pc, #68]	@ (8008cb4 <HAL_UART_RxCpltCallback+0x5c>)
 8008c6e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008c72:	3201      	adds	r2, #1
 8008c74:	490f      	ldr	r1, [pc, #60]	@ (8008cb4 <HAL_UART_RxCpltCallback+0x5c>)
 8008c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  /* To avoid buffer overflow */
  if (Write_Index[cdc_ch] == APP_RX_DATA_SIZE)
 8008c7a:	7bfb      	ldrb	r3, [r7, #15]
 8008c7c:	4a0d      	ldr	r2, [pc, #52]	@ (8008cb4 <HAL_UART_RxCpltCallback+0x5c>)
 8008c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c82:	2b40      	cmp	r3, #64	@ 0x40
 8008c84:	d104      	bne.n	8008c90 <HAL_UART_RxCpltCallback+0x38>
  {
    Write_Index[cdc_ch] = 0;
 8008c86:	7bfb      	ldrb	r3, [r7, #15]
 8008c88:	4a0a      	ldr	r2, [pc, #40]	@ (8008cb4 <HAL_UART_RxCpltCallback+0x5c>)
 8008c8a:	2100      	movs	r1, #0
 8008c8c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  }

  /* Start another reception: provide the buffer pointer with offset and the buffer size */
  HAL_UART_Receive_IT(huart, (TX_Buffer[cdc_ch] + Write_Index[cdc_ch]), 1);
 8008c90:	7bfb      	ldrb	r3, [r7, #15]
 8008c92:	019b      	lsls	r3, r3, #6
 8008c94:	4a08      	ldr	r2, [pc, #32]	@ (8008cb8 <HAL_UART_RxCpltCallback+0x60>)
 8008c96:	441a      	add	r2, r3
 8008c98:	7bfb      	ldrb	r3, [r7, #15]
 8008c9a:	4906      	ldr	r1, [pc, #24]	@ (8008cb4 <HAL_UART_RxCpltCallback+0x5c>)
 8008c9c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008ca0:	4413      	add	r3, r2
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	4619      	mov	r1, r3
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f7fd f91d 	bl	8005ee6 <HAL_UART_Receive_IT>
}
 8008cac:	bf00      	nop
 8008cae:	3710      	adds	r7, #16
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}
 8008cb4:	20000ef0 	.word	0x20000ef0
 8008cb8:	20000ea8 	.word	0x20000ea8

08008cbc <USBD_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b083      	sub	sp, #12
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	6039      	str	r1, [r7, #0]
 8008cc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_DeviceDesc);
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	2212      	movs	r2, #18
 8008ccc:	801a      	strh	r2, [r3, #0]
  return USBD_DeviceDesc;
 8008cce:	4b03      	ldr	r3, [pc, #12]	@ (8008cdc <USBD_DeviceDescriptor+0x20>)
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	370c      	adds	r7, #12
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr
 8008cdc:	20000048 	.word	0x20000048

08008ce0 <USBD_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b083      	sub	sp, #12
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	6039      	str	r1, [r7, #0]
 8008cea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	2204      	movs	r2, #4
 8008cf0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008cf2:	4b03      	ldr	r3, [pc, #12]	@ (8008d00 <USBD_LangIDStrDescriptor+0x20>)
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	370c      	adds	r7, #12
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfe:	4770      	bx	lr
 8008d00:	2000005c 	.word	0x2000005c

08008d04 <USBD_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b082      	sub	sp, #8
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	6039      	str	r1, [r7, #0]
 8008d0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008d10:	79fb      	ldrb	r3, [r7, #7]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d105      	bne.n	8008d22 <USBD_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8008d16:	683a      	ldr	r2, [r7, #0]
 8008d18:	4907      	ldr	r1, [pc, #28]	@ (8008d38 <USBD_ProductStrDescriptor+0x34>)
 8008d1a:	4808      	ldr	r0, [pc, #32]	@ (8008d3c <USBD_ProductStrDescriptor+0x38>)
 8008d1c:	f002 fce5 	bl	800b6ea <USBD_GetString>
 8008d20:	e004      	b.n	8008d2c <USBD_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8008d22:	683a      	ldr	r2, [r7, #0]
 8008d24:	4904      	ldr	r1, [pc, #16]	@ (8008d38 <USBD_ProductStrDescriptor+0x34>)
 8008d26:	4805      	ldr	r0, [pc, #20]	@ (8008d3c <USBD_ProductStrDescriptor+0x38>)
 8008d28:	f002 fcdf 	bl	800b6ea <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d2c:	4b02      	ldr	r3, [pc, #8]	@ (8008d38 <USBD_ProductStrDescriptor+0x34>)
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3708      	adds	r7, #8
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}
 8008d36:	bf00      	nop
 8008d38:	20001f04 	.word	0x20001f04
 8008d3c:	0800c7ec 	.word	0x0800c7ec

08008d40 <USBD_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b082      	sub	sp, #8
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	4603      	mov	r3, r0
 8008d48:	6039      	str	r1, [r7, #0]
 8008d4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008d4c:	683a      	ldr	r2, [r7, #0]
 8008d4e:	4904      	ldr	r1, [pc, #16]	@ (8008d60 <USBD_ManufacturerStrDescriptor+0x20>)
 8008d50:	4804      	ldr	r0, [pc, #16]	@ (8008d64 <USBD_ManufacturerStrDescriptor+0x24>)
 8008d52:	f002 fcca 	bl	800b6ea <USBD_GetString>
  return USBD_StrDesc;
 8008d56:	4b02      	ldr	r3, [pc, #8]	@ (8008d60 <USBD_ManufacturerStrDescriptor+0x20>)
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3708      	adds	r7, #8
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}
 8008d60:	20001f04 	.word	0x20001f04
 8008d64:	0800c7fc 	.word	0x0800c7fc

08008d68 <USBD_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b082      	sub	sp, #8
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	4603      	mov	r3, r0
 8008d70:	6039      	str	r1, [r7, #0]
 8008d72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	221a      	movs	r2, #26
 8008d78:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008d7a:	f000 f843 	bl	8008e04 <Get_SerialNum>
  /* USER CODE BEGIN USBD_SerialStrDescriptor */

  /* USER CODE END USBD_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8008d7e:	4b02      	ldr	r3, [pc, #8]	@ (8008d88 <USBD_SerialStrDescriptor+0x20>)
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3708      	adds	r7, #8
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}
 8008d88:	20000060 	.word	0x20000060

08008d8c <USBD_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b082      	sub	sp, #8
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	4603      	mov	r3, r0
 8008d94:	6039      	str	r1, [r7, #0]
 8008d96:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008d98:	79fb      	ldrb	r3, [r7, #7]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d105      	bne.n	8008daa <USBD_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8008d9e:	683a      	ldr	r2, [r7, #0]
 8008da0:	4907      	ldr	r1, [pc, #28]	@ (8008dc0 <USBD_ConfigStrDescriptor+0x34>)
 8008da2:	4808      	ldr	r0, [pc, #32]	@ (8008dc4 <USBD_ConfigStrDescriptor+0x38>)
 8008da4:	f002 fca1 	bl	800b6ea <USBD_GetString>
 8008da8:	e004      	b.n	8008db4 <USBD_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8008daa:	683a      	ldr	r2, [r7, #0]
 8008dac:	4904      	ldr	r1, [pc, #16]	@ (8008dc0 <USBD_ConfigStrDescriptor+0x34>)
 8008dae:	4805      	ldr	r0, [pc, #20]	@ (8008dc4 <USBD_ConfigStrDescriptor+0x38>)
 8008db0:	f002 fc9b 	bl	800b6ea <USBD_GetString>
  }
  return USBD_StrDesc;
 8008db4:	4b02      	ldr	r3, [pc, #8]	@ (8008dc0 <USBD_ConfigStrDescriptor+0x34>)
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3708      	adds	r7, #8
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}
 8008dbe:	bf00      	nop
 8008dc0:	20001f04 	.word	0x20001f04
 8008dc4:	0800c804 	.word	0x0800c804

08008dc8 <USBD_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b082      	sub	sp, #8
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	4603      	mov	r3, r0
 8008dd0:	6039      	str	r1, [r7, #0]
 8008dd2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008dd4:	79fb      	ldrb	r3, [r7, #7]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d105      	bne.n	8008de6 <USBD_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008dda:	683a      	ldr	r2, [r7, #0]
 8008ddc:	4907      	ldr	r1, [pc, #28]	@ (8008dfc <USBD_InterfaceStrDescriptor+0x34>)
 8008dde:	4808      	ldr	r0, [pc, #32]	@ (8008e00 <USBD_InterfaceStrDescriptor+0x38>)
 8008de0:	f002 fc83 	bl	800b6ea <USBD_GetString>
 8008de4:	e004      	b.n	8008df0 <USBD_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008de6:	683a      	ldr	r2, [r7, #0]
 8008de8:	4904      	ldr	r1, [pc, #16]	@ (8008dfc <USBD_InterfaceStrDescriptor+0x34>)
 8008dea:	4805      	ldr	r0, [pc, #20]	@ (8008e00 <USBD_InterfaceStrDescriptor+0x38>)
 8008dec:	f002 fc7d 	bl	800b6ea <USBD_GetString>
  }
  return USBD_StrDesc;
 8008df0:	4b02      	ldr	r3, [pc, #8]	@ (8008dfc <USBD_InterfaceStrDescriptor+0x34>)
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3708      	adds	r7, #8
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}
 8008dfa:	bf00      	nop
 8008dfc:	20001f04 	.word	0x20001f04
 8008e00:	0800c814 	.word	0x0800c814

08008e04 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b084      	sub	sp, #16
 8008e08:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008e0a:	4b0f      	ldr	r3, [pc, #60]	@ (8008e48 <Get_SerialNum+0x44>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008e10:	4b0e      	ldr	r3, [pc, #56]	@ (8008e4c <Get_SerialNum+0x48>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008e16:	4b0e      	ldr	r3, [pc, #56]	@ (8008e50 <Get_SerialNum+0x4c>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008e1c:	68fa      	ldr	r2, [r7, #12]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	4413      	add	r3, r2
 8008e22:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d009      	beq.n	8008e3e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008e2a:	2208      	movs	r2, #8
 8008e2c:	4909      	ldr	r1, [pc, #36]	@ (8008e54 <Get_SerialNum+0x50>)
 8008e2e:	68f8      	ldr	r0, [r7, #12]
 8008e30:	f000 f814 	bl	8008e5c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008e34:	2204      	movs	r2, #4
 8008e36:	4908      	ldr	r1, [pc, #32]	@ (8008e58 <Get_SerialNum+0x54>)
 8008e38:	68b8      	ldr	r0, [r7, #8]
 8008e3a:	f000 f80f 	bl	8008e5c <IntToUnicode>
  }
}
 8008e3e:	bf00      	nop
 8008e40:	3710      	adds	r7, #16
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}
 8008e46:	bf00      	nop
 8008e48:	1fff7a10 	.word	0x1fff7a10
 8008e4c:	1fff7a14 	.word	0x1fff7a14
 8008e50:	1fff7a18 	.word	0x1fff7a18
 8008e54:	20000062 	.word	0x20000062
 8008e58:	20000072 	.word	0x20000072

08008e5c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b087      	sub	sp, #28
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	60f8      	str	r0, [r7, #12]
 8008e64:	60b9      	str	r1, [r7, #8]
 8008e66:	4613      	mov	r3, r2
 8008e68:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008e6e:	2300      	movs	r3, #0
 8008e70:	75fb      	strb	r3, [r7, #23]
 8008e72:	e027      	b.n	8008ec4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	0f1b      	lsrs	r3, r3, #28
 8008e78:	2b09      	cmp	r3, #9
 8008e7a:	d80b      	bhi.n	8008e94 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	0f1b      	lsrs	r3, r3, #28
 8008e80:	b2da      	uxtb	r2, r3
 8008e82:	7dfb      	ldrb	r3, [r7, #23]
 8008e84:	005b      	lsls	r3, r3, #1
 8008e86:	4619      	mov	r1, r3
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	440b      	add	r3, r1
 8008e8c:	3230      	adds	r2, #48	@ 0x30
 8008e8e:	b2d2      	uxtb	r2, r2
 8008e90:	701a      	strb	r2, [r3, #0]
 8008e92:	e00a      	b.n	8008eaa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	0f1b      	lsrs	r3, r3, #28
 8008e98:	b2da      	uxtb	r2, r3
 8008e9a:	7dfb      	ldrb	r3, [r7, #23]
 8008e9c:	005b      	lsls	r3, r3, #1
 8008e9e:	4619      	mov	r1, r3
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	440b      	add	r3, r1
 8008ea4:	3237      	adds	r2, #55	@ 0x37
 8008ea6:	b2d2      	uxtb	r2, r2
 8008ea8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	011b      	lsls	r3, r3, #4
 8008eae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008eb0:	7dfb      	ldrb	r3, [r7, #23]
 8008eb2:	005b      	lsls	r3, r3, #1
 8008eb4:	3301      	adds	r3, #1
 8008eb6:	68ba      	ldr	r2, [r7, #8]
 8008eb8:	4413      	add	r3, r2
 8008eba:	2200      	movs	r2, #0
 8008ebc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008ebe:	7dfb      	ldrb	r3, [r7, #23]
 8008ec0:	3301      	adds	r3, #1
 8008ec2:	75fb      	strb	r3, [r7, #23]
 8008ec4:	7dfa      	ldrb	r2, [r7, #23]
 8008ec6:	79fb      	ldrb	r3, [r7, #7]
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	d3d3      	bcc.n	8008e74 <IntToUnicode+0x18>
  }
}
 8008ecc:	bf00      	nop
 8008ece:	bf00      	nop
 8008ed0:	371c      	adds	r7, #28
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed8:	4770      	bx	lr

08008eda <CUSTOM_HID_Init>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init(void)
{
 8008eda:	b480      	push	{r7}
 8008edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008ede:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee8:	4770      	bx	lr

08008eea <CUSTOM_HID_DeInit>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit(void)
{
 8008eea:	b480      	push	{r7}
 8008eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8008eee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef8:	4770      	bx	lr
	...

08008efc <CUSTOM_HID_OutEvent>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent(uint8_t *data, uint16_t len)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b082      	sub	sp, #8
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	460b      	mov	r3, r1
 8008f06:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN 6 */
	HID_Frame_Write(&hid_frame_fifo,data);
 8008f08:	6879      	ldr	r1, [r7, #4]
 8008f0a:	4804      	ldr	r0, [pc, #16]	@ (8008f1c <CUSTOM_HID_OutEvent+0x20>)
 8008f0c:	f000 f808 	bl	8008f20 <HID_Frame_Write>
  //memcpy(buffer, state, 0x40);
  //USBD_CUSTOM_HID_SendReport(&hUsbDevice, (uint8_t *)buffer, 0x40);
  return (USBD_OK);
 8008f10:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3708      	adds	r7, #8
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}
 8008f1a:	bf00      	nop
 8008f1c:	20002104 	.word	0x20002104

08008f20 <HID_Frame_Write>:
//    }
//}


uint8_t HID_Frame_Write(HID_FrameFIFO_t *fifo, uint8_t *data)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b084      	sub	sp, #16
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
 8008f28:	6039      	str	r1, [r7, #0]
    uint8_t nextHead = (fifo->head + 1) % HID_FRAME_BUFFER_SIZE;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008f30:	b2db      	uxtb	r3, r3
 8008f32:	3301      	adds	r3, #1
 8008f34:	425a      	negs	r2, r3
 8008f36:	f003 0307 	and.w	r3, r3, #7
 8008f3a:	f002 0207 	and.w	r2, r2, #7
 8008f3e:	bf58      	it	pl
 8008f40:	4253      	negpl	r3, r2
 8008f42:	73fb      	strb	r3, [r7, #15]

    // Kiểm tra tràn bộ đệm
    if (nextHead == fifo->tail) {
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8008f4a:	b2db      	uxtb	r3, r3
 8008f4c:	7bfa      	ldrb	r2, [r7, #15]
 8008f4e:	429a      	cmp	r2, r3
 8008f50:	d101      	bne.n	8008f56 <HID_Frame_Write+0x36>
        // Buffer đầy
        return 0;
 8008f52:	2300      	movs	r3, #0
 8008f54:	e010      	b.n	8008f78 <HID_Frame_Write+0x58>
    }

    memcpy(fifo->frame[fifo->head], data, HID_FRAME_SIZE);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008f5c:	b2db      	uxtb	r3, r3
 8008f5e:	019b      	lsls	r3, r3, #6
 8008f60:	687a      	ldr	r2, [r7, #4]
 8008f62:	4413      	add	r3, r2
 8008f64:	2240      	movs	r2, #64	@ 0x40
 8008f66:	6839      	ldr	r1, [r7, #0]
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f002 ffe9 	bl	800bf40 <memcpy>
    fifo->head = nextHead;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	7bfa      	ldrb	r2, [r7, #15]
 8008f72:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
    return 1;
 8008f76:	2301      	movs	r3, #1
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3710      	adds	r7, #16
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <HID_Frame_Read>:




uint8_t HID_Frame_Read(HID_FrameFIFO_t *fifo, uint8_t *dest_buf) {
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b082      	sub	sp, #8
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	6039      	str	r1, [r7, #0]
    if (fifo->head == fifo->tail) {
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008f90:	b2da      	uxtb	r2, r3
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8008f98:	b2db      	uxtb	r3, r3
 8008f9a:	429a      	cmp	r2, r3
 8008f9c:	d101      	bne.n	8008fa2 <HID_Frame_Read+0x22>
        return 0;  // Không có frame
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	e01c      	b.n	8008fdc <HID_Frame_Read+0x5c>
    }

    memcpy(dest_buf, fifo->frame[fifo->tail], HID_FRAME_SIZE);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8008fa8:	b2db      	uxtb	r3, r3
 8008faa:	019b      	lsls	r3, r3, #6
 8008fac:	687a      	ldr	r2, [r7, #4]
 8008fae:	4413      	add	r3, r2
 8008fb0:	2240      	movs	r2, #64	@ 0x40
 8008fb2:	4619      	mov	r1, r3
 8008fb4:	6838      	ldr	r0, [r7, #0]
 8008fb6:	f002 ffc3 	bl	800bf40 <memcpy>
    fifo->tail = (fifo->tail + 1) % HID_FRAME_BUFFER_SIZE;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8008fc0:	b2db      	uxtb	r3, r3
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	425a      	negs	r2, r3
 8008fc6:	f003 0307 	and.w	r3, r3, #7
 8008fca:	f002 0207 	and.w	r2, r2, #7
 8008fce:	bf58      	it	pl
 8008fd0:	4253      	negpl	r3, r2
 8008fd2:	b2da      	uxtb	r2, r3
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
    return 1;
 8008fda:	2301      	movs	r3, #1
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3708      	adds	r7, #8
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b084      	sub	sp, #16
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	460b      	mov	r3, r1
 8008fee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	60bb      	str	r3, [r7, #8]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	73fb      	strb	r3, [r7, #15]
 8008ff8:	e0c6      	b.n	8009188 <USBD_CDC_Init+0x1a4>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 8008ffa:	7bfb      	ldrb	r3, [r7, #15]
 8008ffc:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009000:	fb02 f303 	mul.w	r3, r2, r3
 8009004:	4a65      	ldr	r2, [pc, #404]	@ (800919c <USBD_CDC_Init+0x1b8>)
 8009006:	4413      	add	r3, r2
 8009008:	60bb      	str	r3, [r7, #8]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	7c1b      	ldrb	r3, [r3, #16]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d13d      	bne.n	800908e <USBD_CDC_Init+0xaa>
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 8009012:	7bfb      	ldrb	r3, [r7, #15]
 8009014:	4a62      	ldr	r2, [pc, #392]	@ (80091a0 <USBD_CDC_Init+0x1bc>)
 8009016:	5cd1      	ldrb	r1, [r2, r3]
 8009018:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800901c:	2202      	movs	r2, #2
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f002 fdd5 	bl	800bbce <USBD_LL_OpenEP>
                           CDC_DATA_HS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 8009024:	7bfb      	ldrb	r3, [r7, #15]
 8009026:	4a5e      	ldr	r2, [pc, #376]	@ (80091a0 <USBD_CDC_Init+0x1bc>)
 8009028:	5cd3      	ldrb	r3, [r2, r3]
 800902a:	f003 020f 	and.w	r2, r3, #15
 800902e:	6879      	ldr	r1, [r7, #4]
 8009030:	4613      	mov	r3, r2
 8009032:	009b      	lsls	r3, r3, #2
 8009034:	4413      	add	r3, r2
 8009036:	009b      	lsls	r3, r3, #2
 8009038:	440b      	add	r3, r1
 800903a:	3324      	adds	r3, #36	@ 0x24
 800903c:	2201      	movs	r2, #1
 800903e:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 8009040:	7bfb      	ldrb	r3, [r7, #15]
 8009042:	4a58      	ldr	r2, [pc, #352]	@ (80091a4 <USBD_CDC_Init+0x1c0>)
 8009044:	5cd1      	ldrb	r1, [r2, r3]
 8009046:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800904a:	2202      	movs	r2, #2
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f002 fdbe 	bl	800bbce <USBD_LL_OpenEP>
                           CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 8009052:	7bfb      	ldrb	r3, [r7, #15]
 8009054:	4a53      	ldr	r2, [pc, #332]	@ (80091a4 <USBD_CDC_Init+0x1c0>)
 8009056:	5cd3      	ldrb	r3, [r2, r3]
 8009058:	f003 020f 	and.w	r2, r3, #15
 800905c:	6879      	ldr	r1, [r7, #4]
 800905e:	4613      	mov	r3, r2
 8009060:	009b      	lsls	r3, r3, #2
 8009062:	4413      	add	r3, r2
 8009064:	009b      	lsls	r3, r3, #2
 8009066:	440b      	add	r3, r1
 8009068:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800906c:	2201      	movs	r2, #1
 800906e:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009070:	7bfb      	ldrb	r3, [r7, #15]
 8009072:	4a4d      	ldr	r2, [pc, #308]	@ (80091a8 <USBD_CDC_Init+0x1c4>)
 8009074:	5cd3      	ldrb	r3, [r2, r3]
 8009076:	f003 020f 	and.w	r2, r3, #15
 800907a:	6879      	ldr	r1, [r7, #4]
 800907c:	4613      	mov	r3, r2
 800907e:	009b      	lsls	r3, r3, #2
 8009080:	4413      	add	r3, r2
 8009082:	009b      	lsls	r3, r3, #2
 8009084:	440b      	add	r3, r1
 8009086:	3326      	adds	r3, #38	@ 0x26
 8009088:	2210      	movs	r2, #16
 800908a:	801a      	strh	r2, [r3, #0]
 800908c:	e03a      	b.n	8009104 <USBD_CDC_Init+0x120>
    }
    else
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 800908e:	7bfb      	ldrb	r3, [r7, #15]
 8009090:	4a43      	ldr	r2, [pc, #268]	@ (80091a0 <USBD_CDC_Init+0x1bc>)
 8009092:	5cd1      	ldrb	r1, [r2, r3]
 8009094:	2340      	movs	r3, #64	@ 0x40
 8009096:	2202      	movs	r2, #2
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f002 fd98 	bl	800bbce <USBD_LL_OpenEP>
                           CDC_DATA_FS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 800909e:	7bfb      	ldrb	r3, [r7, #15]
 80090a0:	4a3f      	ldr	r2, [pc, #252]	@ (80091a0 <USBD_CDC_Init+0x1bc>)
 80090a2:	5cd3      	ldrb	r3, [r2, r3]
 80090a4:	f003 020f 	and.w	r2, r3, #15
 80090a8:	6879      	ldr	r1, [r7, #4]
 80090aa:	4613      	mov	r3, r2
 80090ac:	009b      	lsls	r3, r3, #2
 80090ae:	4413      	add	r3, r2
 80090b0:	009b      	lsls	r3, r3, #2
 80090b2:	440b      	add	r3, r1
 80090b4:	3324      	adds	r3, #36	@ 0x24
 80090b6:	2201      	movs	r2, #1
 80090b8:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 80090ba:	7bfb      	ldrb	r3, [r7, #15]
 80090bc:	4a39      	ldr	r2, [pc, #228]	@ (80091a4 <USBD_CDC_Init+0x1c0>)
 80090be:	5cd1      	ldrb	r1, [r2, r3]
 80090c0:	2340      	movs	r3, #64	@ 0x40
 80090c2:	2202      	movs	r2, #2
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f002 fd82 	bl	800bbce <USBD_LL_OpenEP>
                           CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 80090ca:	7bfb      	ldrb	r3, [r7, #15]
 80090cc:	4a35      	ldr	r2, [pc, #212]	@ (80091a4 <USBD_CDC_Init+0x1c0>)
 80090ce:	5cd3      	ldrb	r3, [r2, r3]
 80090d0:	f003 020f 	and.w	r2, r3, #15
 80090d4:	6879      	ldr	r1, [r7, #4]
 80090d6:	4613      	mov	r3, r2
 80090d8:	009b      	lsls	r3, r3, #2
 80090da:	4413      	add	r3, r2
 80090dc:	009b      	lsls	r3, r3, #2
 80090de:	440b      	add	r3, r1
 80090e0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80090e4:	2201      	movs	r2, #1
 80090e6:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80090e8:	7bfb      	ldrb	r3, [r7, #15]
 80090ea:	4a2f      	ldr	r2, [pc, #188]	@ (80091a8 <USBD_CDC_Init+0x1c4>)
 80090ec:	5cd3      	ldrb	r3, [r2, r3]
 80090ee:	f003 020f 	and.w	r2, r3, #15
 80090f2:	6879      	ldr	r1, [r7, #4]
 80090f4:	4613      	mov	r3, r2
 80090f6:	009b      	lsls	r3, r3, #2
 80090f8:	4413      	add	r3, r2
 80090fa:	009b      	lsls	r3, r3, #2
 80090fc:	440b      	add	r3, r1
 80090fe:	3326      	adds	r3, #38	@ 0x26
 8009100:	2210      	movs	r2, #16
 8009102:	801a      	strh	r2, [r3, #0]
    }

    /* Open Command IN EP */
    (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP[i], USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009104:	7bfb      	ldrb	r3, [r7, #15]
 8009106:	4a28      	ldr	r2, [pc, #160]	@ (80091a8 <USBD_CDC_Init+0x1c4>)
 8009108:	5cd1      	ldrb	r1, [r2, r3]
 800910a:	2308      	movs	r3, #8
 800910c:	2203      	movs	r2, #3
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f002 fd5d 	bl	800bbce <USBD_LL_OpenEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 1U;
 8009114:	7bfb      	ldrb	r3, [r7, #15]
 8009116:	4a24      	ldr	r2, [pc, #144]	@ (80091a8 <USBD_CDC_Init+0x1c4>)
 8009118:	5cd3      	ldrb	r3, [r2, r3]
 800911a:	f003 020f 	and.w	r2, r3, #15
 800911e:	6879      	ldr	r1, [r7, #4]
 8009120:	4613      	mov	r3, r2
 8009122:	009b      	lsls	r3, r3, #2
 8009124:	4413      	add	r3, r2
 8009126:	009b      	lsls	r3, r3, #2
 8009128:	440b      	add	r3, r1
 800912a:	3324      	adds	r3, #36	@ 0x24
 800912c:	2201      	movs	r2, #1
 800912e:	801a      	strh	r2, [r3, #0]

    /* Init  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Init(i);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	7bfa      	ldrb	r2, [r7, #15]
 800913a:	4610      	mov	r0, r2
 800913c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	2200      	movs	r2, #0
 8009142:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	2200      	movs	r2, #0
 800914a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	7c1b      	ldrb	r3, [r3, #16]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d10b      	bne.n	800916e <USBD_CDC_Init+0x18a>
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 8009156:	7bfb      	ldrb	r3, [r7, #15]
 8009158:	4a12      	ldr	r2, [pc, #72]	@ (80091a4 <USBD_CDC_Init+0x1c0>)
 800915a:	5cd1      	ldrb	r1, [r2, r3]
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009162:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f002 fe20 	bl	800bdac <USBD_LL_PrepareReceive>
 800916c:	e009      	b.n	8009182 <USBD_CDC_Init+0x19e>
                                   CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 800916e:	7bfb      	ldrb	r3, [r7, #15]
 8009170:	4a0c      	ldr	r2, [pc, #48]	@ (80091a4 <USBD_CDC_Init+0x1c0>)
 8009172:	5cd1      	ldrb	r1, [r2, r3]
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800917a:	2340      	movs	r3, #64	@ 0x40
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f002 fe15 	bl	800bdac <USBD_LL_PrepareReceive>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009182:	7bfb      	ldrb	r3, [r7, #15]
 8009184:	3301      	adds	r3, #1
 8009186:	73fb      	strb	r3, [r7, #15]
 8009188:	7bfb      	ldrb	r3, [r7, #15]
 800918a:	2b00      	cmp	r3, #0
 800918c:	f43f af35 	beq.w	8008ffa <USBD_CDC_Init+0x16>
                                   CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return (uint8_t)USBD_OK;
 8009190:	2300      	movs	r3, #0
}
 8009192:	4618      	mov	r0, r3
 8009194:	3710      	adds	r7, #16
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}
 800919a:	bf00      	nop
 800919c:	20002320 	.word	0x20002320
 80091a0:	20002308 	.word	0x20002308
 80091a4:	2000230c 	.word	0x2000230c
 80091a8:	20002310 	.word	0x20002310

080091ac <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b084      	sub	sp, #16
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	460b      	mov	r3, r1
 80091b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80091b8:	2300      	movs	r3, #0
 80091ba:	73fb      	strb	r3, [r7, #15]
 80091bc:	e057      	b.n	800926e <USBD_CDC_DeInit+0xc2>
  {
    /* Close EP IN */
    (void)USBD_LL_CloseEP(pdev, CDC_IN_EP[i]);
 80091be:	7bfb      	ldrb	r3, [r7, #15]
 80091c0:	4a2f      	ldr	r2, [pc, #188]	@ (8009280 <USBD_CDC_DeInit+0xd4>)
 80091c2:	5cd3      	ldrb	r3, [r2, r3]
 80091c4:	4619      	mov	r1, r3
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f002 fd27 	bl	800bc1a <USBD_LL_CloseEP>
    pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 0U;
 80091cc:	7bfb      	ldrb	r3, [r7, #15]
 80091ce:	4a2c      	ldr	r2, [pc, #176]	@ (8009280 <USBD_CDC_DeInit+0xd4>)
 80091d0:	5cd3      	ldrb	r3, [r2, r3]
 80091d2:	f003 020f 	and.w	r2, r3, #15
 80091d6:	6879      	ldr	r1, [r7, #4]
 80091d8:	4613      	mov	r3, r2
 80091da:	009b      	lsls	r3, r3, #2
 80091dc:	4413      	add	r3, r2
 80091de:	009b      	lsls	r3, r3, #2
 80091e0:	440b      	add	r3, r1
 80091e2:	3324      	adds	r3, #36	@ 0x24
 80091e4:	2200      	movs	r2, #0
 80091e6:	801a      	strh	r2, [r3, #0]

    /* Close EP OUT */
    (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP[i]);
 80091e8:	7bfb      	ldrb	r3, [r7, #15]
 80091ea:	4a26      	ldr	r2, [pc, #152]	@ (8009284 <USBD_CDC_DeInit+0xd8>)
 80091ec:	5cd3      	ldrb	r3, [r2, r3]
 80091ee:	4619      	mov	r1, r3
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f002 fd12 	bl	800bc1a <USBD_LL_CloseEP>
    pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 0U;
 80091f6:	7bfb      	ldrb	r3, [r7, #15]
 80091f8:	4a22      	ldr	r2, [pc, #136]	@ (8009284 <USBD_CDC_DeInit+0xd8>)
 80091fa:	5cd3      	ldrb	r3, [r2, r3]
 80091fc:	f003 020f 	and.w	r2, r3, #15
 8009200:	6879      	ldr	r1, [r7, #4]
 8009202:	4613      	mov	r3, r2
 8009204:	009b      	lsls	r3, r3, #2
 8009206:	4413      	add	r3, r2
 8009208:	009b      	lsls	r3, r3, #2
 800920a:	440b      	add	r3, r1
 800920c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009210:	2200      	movs	r2, #0
 8009212:	801a      	strh	r2, [r3, #0]

    /* Close Command IN EP */
    (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP[i]);
 8009214:	7bfb      	ldrb	r3, [r7, #15]
 8009216:	4a1c      	ldr	r2, [pc, #112]	@ (8009288 <USBD_CDC_DeInit+0xdc>)
 8009218:	5cd3      	ldrb	r3, [r2, r3]
 800921a:	4619      	mov	r1, r3
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f002 fcfc 	bl	800bc1a <USBD_LL_CloseEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 0U;
 8009222:	7bfb      	ldrb	r3, [r7, #15]
 8009224:	4a18      	ldr	r2, [pc, #96]	@ (8009288 <USBD_CDC_DeInit+0xdc>)
 8009226:	5cd3      	ldrb	r3, [r2, r3]
 8009228:	f003 020f 	and.w	r2, r3, #15
 800922c:	6879      	ldr	r1, [r7, #4]
 800922e:	4613      	mov	r3, r2
 8009230:	009b      	lsls	r3, r3, #2
 8009232:	4413      	add	r3, r2
 8009234:	009b      	lsls	r3, r3, #2
 8009236:	440b      	add	r3, r1
 8009238:	3324      	adds	r3, #36	@ 0x24
 800923a:	2200      	movs	r2, #0
 800923c:	801a      	strh	r2, [r3, #0]
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = 0U;
 800923e:	7bfb      	ldrb	r3, [r7, #15]
 8009240:	4a11      	ldr	r2, [pc, #68]	@ (8009288 <USBD_CDC_DeInit+0xdc>)
 8009242:	5cd3      	ldrb	r3, [r2, r3]
 8009244:	f003 020f 	and.w	r2, r3, #15
 8009248:	6879      	ldr	r1, [r7, #4]
 800924a:	4613      	mov	r3, r2
 800924c:	009b      	lsls	r3, r3, #2
 800924e:	4413      	add	r3, r2
 8009250:	009b      	lsls	r3, r3, #2
 8009252:	440b      	add	r3, r1
 8009254:	3326      	adds	r3, #38	@ 0x26
 8009256:	2200      	movs	r2, #0
 8009258:	801a      	strh	r2, [r3, #0]

    /* DeInit  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->DeInit(i);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009260:	685b      	ldr	r3, [r3, #4]
 8009262:	7bfa      	ldrb	r2, [r7, #15]
 8009264:	4610      	mov	r0, r2
 8009266:	4798      	blx	r3
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009268:	7bfb      	ldrb	r3, [r7, #15]
 800926a:	3301      	adds	r3, #1
 800926c:	73fb      	strb	r3, [r7, #15]
 800926e:	7bfb      	ldrb	r3, [r7, #15]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d0a4      	beq.n	80091be <USBD_CDC_DeInit+0x12>
  }
  return (uint8_t)USBD_OK;
 8009274:	2300      	movs	r3, #0
}
 8009276:	4618      	mov	r0, r3
 8009278:	3710      	adds	r7, #16
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}
 800927e:	bf00      	nop
 8009280:	20002308 	.word	0x20002308
 8009284:	2000230c 	.word	0x2000230c
 8009288:	20002310 	.word	0x20002310

0800928c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800928c:	b590      	push	{r4, r7, lr}
 800928e:	b087      	sub	sp, #28
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	6039      	str	r1, [r7, #0]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8009296:	2300      	movs	r3, #0
 8009298:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800929a:	2300      	movs	r3, #0
 800929c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800929e:	2300      	movs	r3, #0
 80092a0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80092a2:	2300      	movs	r3, #0
 80092a4:	75fb      	strb	r3, [r7, #23]

  uint8_t windex_to_ch = 0;
 80092a6:	2300      	movs	r3, #0
 80092a8:	75bb      	strb	r3, [r7, #22]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80092aa:	2300      	movs	r3, #0
 80092ac:	757b      	strb	r3, [r7, #21]
 80092ae:	e015      	b.n	80092dc <USBD_CDC_Setup+0x50>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	889b      	ldrh	r3, [r3, #4]
 80092b4:	b2da      	uxtb	r2, r3
 80092b6:	7d7b      	ldrb	r3, [r7, #21]
 80092b8:	496d      	ldr	r1, [pc, #436]	@ (8009470 <USBD_CDC_Setup+0x1e4>)
 80092ba:	5ccb      	ldrb	r3, [r1, r3]
 80092bc:	429a      	cmp	r2, r3
 80092be:	d007      	beq.n	80092d0 <USBD_CDC_Setup+0x44>
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	889b      	ldrh	r3, [r3, #4]
 80092c4:	b2da      	uxtb	r2, r3
 80092c6:	7d7b      	ldrb	r3, [r7, #21]
 80092c8:	496a      	ldr	r1, [pc, #424]	@ (8009474 <USBD_CDC_Setup+0x1e8>)
 80092ca:	5ccb      	ldrb	r3, [r1, r3]
 80092cc:	429a      	cmp	r2, r3
 80092ce:	d102      	bne.n	80092d6 <USBD_CDC_Setup+0x4a>
    {
      windex_to_ch = i;
 80092d0:	7d7b      	ldrb	r3, [r7, #21]
 80092d2:	75bb      	strb	r3, [r7, #22]
      break;
 80092d4:	e005      	b.n	80092e2 <USBD_CDC_Setup+0x56>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80092d6:	7d7b      	ldrb	r3, [r7, #21]
 80092d8:	3301      	adds	r3, #1
 80092da:	757b      	strb	r3, [r7, #21]
 80092dc:	7d7b      	ldrb	r3, [r7, #21]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d0e6      	beq.n	80092b0 <USBD_CDC_Setup+0x24>
    }
  }

  hcdc = &CDC_ACM_Class_Data[windex_to_ch];
 80092e2:	7dbb      	ldrb	r3, [r7, #22]
 80092e4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80092e8:	fb02 f303 	mul.w	r3, r2, r3
 80092ec:	4a62      	ldr	r2, [pc, #392]	@ (8009478 <USBD_CDC_Setup+0x1ec>)
 80092ee:	4413      	add	r3, r2
 80092f0:	613b      	str	r3, [r7, #16]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	781b      	ldrb	r3, [r3, #0]
 80092f6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d04a      	beq.n	8009394 <USBD_CDC_Setup+0x108>
 80092fe:	2b20      	cmp	r3, #32
 8009300:	f040 80aa 	bne.w	8009458 <USBD_CDC_Setup+0x1cc>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	88db      	ldrh	r3, [r3, #6]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d038      	beq.n	800937e <USBD_CDC_Setup+0xf2>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	781b      	ldrb	r3, [r3, #0]
 8009310:	b25b      	sxtb	r3, r3
 8009312:	2b00      	cmp	r3, #0
 8009314:	da1d      	bge.n	8009352 <USBD_CDC_Setup+0xc6>
      {
        ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800931c:	689c      	ldr	r4, [r3, #8]
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	7859      	ldrb	r1, [r3, #1]
 8009322:	7dbb      	ldrb	r3, [r7, #22]
 8009324:	025b      	lsls	r3, r3, #9
 8009326:	693a      	ldr	r2, [r7, #16]
 8009328:	441a      	add	r2, r3
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	88db      	ldrh	r3, [r3, #6]
 800932e:	7db8      	ldrb	r0, [r7, #22]
 8009330:	47a0      	blx	r4

        len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	88db      	ldrh	r3, [r3, #6]
 8009336:	2b07      	cmp	r3, #7
 8009338:	bf28      	it	cs
 800933a:	2307      	movcs	r3, #7
 800933c:	81fb      	strh	r3, [r7, #14]
        (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data[windex_to_ch], len);
 800933e:	7dbb      	ldrb	r3, [r7, #22]
 8009340:	025b      	lsls	r3, r3, #9
 8009342:	693a      	ldr	r2, [r7, #16]
 8009344:	4413      	add	r3, r2
 8009346:	89fa      	ldrh	r2, [r7, #14]
 8009348:	4619      	mov	r1, r3
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f002 fa2d 	bl	800b7aa <USBD_CtlSendData>
    }
    else
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
    }
    break;
 8009350:	e089      	b.n	8009466 <USBD_CDC_Setup+0x1da>
        hcdc->CmdOpCode = req->bRequest;
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	785a      	ldrb	r2, [r3, #1]
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	88db      	ldrh	r3, [r3, #6]
 8009360:	b2da      	uxtb	r2, r3
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 8009368:	7dbb      	ldrb	r3, [r7, #22]
 800936a:	025b      	lsls	r3, r3, #9
 800936c:	693a      	ldr	r2, [r7, #16]
 800936e:	18d1      	adds	r1, r2, r3
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	88db      	ldrh	r3, [r3, #6]
 8009374:	461a      	mov	r2, r3
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f002 fa43 	bl	800b802 <USBD_CtlPrepareRx>
    break;
 800937c:	e073      	b.n	8009466 <USBD_CDC_Setup+0x1da>
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009384:	689c      	ldr	r4, [r3, #8]
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	7859      	ldrb	r1, [r3, #1]
 800938a:	7db8      	ldrb	r0, [r7, #22]
 800938c:	2300      	movs	r3, #0
 800938e:	683a      	ldr	r2, [r7, #0]
 8009390:	47a0      	blx	r4
    break;
 8009392:	e068      	b.n	8009466 <USBD_CDC_Setup+0x1da>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	785b      	ldrb	r3, [r3, #1]
 8009398:	2b0b      	cmp	r3, #11
 800939a:	d852      	bhi.n	8009442 <USBD_CDC_Setup+0x1b6>
 800939c:	a201      	add	r2, pc, #4	@ (adr r2, 80093a4 <USBD_CDC_Setup+0x118>)
 800939e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093a2:	bf00      	nop
 80093a4:	080093d5 	.word	0x080093d5
 80093a8:	08009451 	.word	0x08009451
 80093ac:	08009443 	.word	0x08009443
 80093b0:	08009443 	.word	0x08009443
 80093b4:	08009443 	.word	0x08009443
 80093b8:	08009443 	.word	0x08009443
 80093bc:	08009443 	.word	0x08009443
 80093c0:	08009443 	.word	0x08009443
 80093c4:	08009443 	.word	0x08009443
 80093c8:	08009443 	.word	0x08009443
 80093cc:	080093ff 	.word	0x080093ff
 80093d0:	08009429 	.word	0x08009429
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093da:	b2db      	uxtb	r3, r3
 80093dc:	2b03      	cmp	r3, #3
 80093de:	d107      	bne.n	80093f0 <USBD_CDC_Setup+0x164>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80093e0:	f107 030a 	add.w	r3, r7, #10
 80093e4:	2202      	movs	r2, #2
 80093e6:	4619      	mov	r1, r3
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f002 f9de 	bl	800b7aa <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80093ee:	e032      	b.n	8009456 <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 80093f0:	6839      	ldr	r1, [r7, #0]
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f002 f968 	bl	800b6c8 <USBD_CtlError>
        ret = USBD_FAIL;
 80093f8:	2303      	movs	r3, #3
 80093fa:	75fb      	strb	r3, [r7, #23]
      break;
 80093fc:	e02b      	b.n	8009456 <USBD_CDC_Setup+0x1ca>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009404:	b2db      	uxtb	r3, r3
 8009406:	2b03      	cmp	r3, #3
 8009408:	d107      	bne.n	800941a <USBD_CDC_Setup+0x18e>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800940a:	f107 030d 	add.w	r3, r7, #13
 800940e:	2201      	movs	r2, #1
 8009410:	4619      	mov	r1, r3
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f002 f9c9 	bl	800b7aa <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8009418:	e01d      	b.n	8009456 <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 800941a:	6839      	ldr	r1, [r7, #0]
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f002 f953 	bl	800b6c8 <USBD_CtlError>
        ret = USBD_FAIL;
 8009422:	2303      	movs	r3, #3
 8009424:	75fb      	strb	r3, [r7, #23]
      break;
 8009426:	e016      	b.n	8009456 <USBD_CDC_Setup+0x1ca>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800942e:	b2db      	uxtb	r3, r3
 8009430:	2b03      	cmp	r3, #3
 8009432:	d00f      	beq.n	8009454 <USBD_CDC_Setup+0x1c8>
      {
        USBD_CtlError(pdev, req);
 8009434:	6839      	ldr	r1, [r7, #0]
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f002 f946 	bl	800b6c8 <USBD_CtlError>
        ret = USBD_FAIL;
 800943c:	2303      	movs	r3, #3
 800943e:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8009440:	e008      	b.n	8009454 <USBD_CDC_Setup+0x1c8>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8009442:	6839      	ldr	r1, [r7, #0]
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f002 f93f 	bl	800b6c8 <USBD_CtlError>
      ret = USBD_FAIL;
 800944a:	2303      	movs	r3, #3
 800944c:	75fb      	strb	r3, [r7, #23]
      break;
 800944e:	e002      	b.n	8009456 <USBD_CDC_Setup+0x1ca>
      break;
 8009450:	bf00      	nop
 8009452:	e008      	b.n	8009466 <USBD_CDC_Setup+0x1da>
      break;
 8009454:	bf00      	nop
    }
    break;
 8009456:	e006      	b.n	8009466 <USBD_CDC_Setup+0x1da>

  default:
    USBD_CtlError(pdev, req);
 8009458:	6839      	ldr	r1, [r7, #0]
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f002 f934 	bl	800b6c8 <USBD_CtlError>
    ret = USBD_FAIL;
 8009460:	2303      	movs	r3, #3
 8009462:	75fb      	strb	r3, [r7, #23]
    break;
 8009464:	bf00      	nop
  }

  return (uint8_t)ret;
 8009466:	7dfb      	ldrb	r3, [r7, #23]
}
 8009468:	4618      	mov	r0, r3
 800946a:	371c      	adds	r7, #28
 800946c:	46bd      	mov	sp, r7
 800946e:	bd90      	pop	{r4, r7, pc}
 8009470:	20002314 	.word	0x20002314
 8009474:	20002318 	.word	0x20002318
 8009478:	20002320 	.word	0x20002320

0800947c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800947c:	b590      	push	{r4, r7, lr}
 800947e:	b087      	sub	sp, #28
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	460b      	mov	r3, r1
 8009486:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8009488:	2300      	movs	r3, #0
 800948a:	613b      	str	r3, [r7, #16]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 8009492:	60fb      	str	r3, [r7, #12]
  uint8_t ep_to_ch = 0;
 8009494:	2300      	movs	r3, #0
 8009496:	75fb      	strb	r3, [r7, #23]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009498:	2300      	movs	r3, #0
 800949a:	75bb      	strb	r3, [r7, #22]
 800949c:	e00d      	b.n	80094ba <USBD_CDC_DataIn+0x3e>
  {
    if (epnum == (CDC_IN_EP[i] & 0x0F))
 800949e:	78fa      	ldrb	r2, [r7, #3]
 80094a0:	7dbb      	ldrb	r3, [r7, #22]
 80094a2:	4934      	ldr	r1, [pc, #208]	@ (8009574 <USBD_CDC_DataIn+0xf8>)
 80094a4:	5ccb      	ldrb	r3, [r1, r3]
 80094a6:	f003 030f 	and.w	r3, r3, #15
 80094aa:	429a      	cmp	r2, r3
 80094ac:	d102      	bne.n	80094b4 <USBD_CDC_DataIn+0x38>
    {
      ep_to_ch = i;
 80094ae:	7dbb      	ldrb	r3, [r7, #22]
 80094b0:	75fb      	strb	r3, [r7, #23]
      break;
 80094b2:	e005      	b.n	80094c0 <USBD_CDC_DataIn+0x44>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80094b4:	7dbb      	ldrb	r3, [r7, #22]
 80094b6:	3301      	adds	r3, #1
 80094b8:	75bb      	strb	r3, [r7, #22]
 80094ba:	7dbb      	ldrb	r3, [r7, #22]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d0ee      	beq.n	800949e <USBD_CDC_DataIn+0x22>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 80094c0:	7dfb      	ldrb	r3, [r7, #23]
 80094c2:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80094c6:	fb02 f303 	mul.w	r3, r2, r3
 80094ca:	4a2b      	ldr	r2, [pc, #172]	@ (8009578 <USBD_CDC_DataIn+0xfc>)
 80094cc:	4413      	add	r3, r2
 80094ce:	613b      	str	r3, [r7, #16]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80094d0:	78fa      	ldrb	r2, [r7, #3]
 80094d2:	6879      	ldr	r1, [r7, #4]
 80094d4:	4613      	mov	r3, r2
 80094d6:	009b      	lsls	r3, r3, #2
 80094d8:	4413      	add	r3, r2
 80094da:	009b      	lsls	r3, r3, #2
 80094dc:	440b      	add	r3, r1
 80094de:	3318      	adds	r3, #24
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d029      	beq.n	800953a <USBD_CDC_DataIn+0xbe>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80094e6:	78fa      	ldrb	r2, [r7, #3]
 80094e8:	6879      	ldr	r1, [r7, #4]
 80094ea:	4613      	mov	r3, r2
 80094ec:	009b      	lsls	r3, r3, #2
 80094ee:	4413      	add	r3, r2
 80094f0:	009b      	lsls	r3, r3, #2
 80094f2:	440b      	add	r3, r1
 80094f4:	3318      	adds	r3, #24
 80094f6:	681a      	ldr	r2, [r3, #0]
 80094f8:	78f9      	ldrb	r1, [r7, #3]
 80094fa:	68f8      	ldr	r0, [r7, #12]
 80094fc:	460b      	mov	r3, r1
 80094fe:	00db      	lsls	r3, r3, #3
 8009500:	440b      	add	r3, r1
 8009502:	009b      	lsls	r3, r3, #2
 8009504:	4403      	add	r3, r0
 8009506:	331c      	adds	r3, #28
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	fbb2 f1f3 	udiv	r1, r2, r3
 800950e:	fb01 f303 	mul.w	r3, r1, r3
 8009512:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009514:	2b00      	cmp	r3, #0
 8009516:	d110      	bne.n	800953a <USBD_CDC_DataIn+0xbe>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8009518:	78fa      	ldrb	r2, [r7, #3]
 800951a:	6879      	ldr	r1, [r7, #4]
 800951c:	4613      	mov	r3, r2
 800951e:	009b      	lsls	r3, r3, #2
 8009520:	4413      	add	r3, r2
 8009522:	009b      	lsls	r3, r3, #2
 8009524:	440b      	add	r3, r1
 8009526:	3318      	adds	r3, #24
 8009528:	2200      	movs	r2, #0
 800952a:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800952c:	78f9      	ldrb	r1, [r7, #3]
 800952e:	2300      	movs	r3, #0
 8009530:	2200      	movs	r2, #0
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f002 fc19 	bl	800bd6a <USBD_LL_Transmit>
 8009538:	e016      	b.n	8009568 <USBD_CDC_DataIn+0xec>
  }
  else
  {
    hcdc->TxState = 0U;
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	2200      	movs	r2, #0
 800953e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt != NULL)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009548:	691b      	ldr	r3, [r3, #16]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d00c      	beq.n	8009568 <USBD_CDC_DataIn+0xec>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt(ep_to_ch, hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009554:	691c      	ldr	r4, [r3, #16]
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	f8d3 1208 	ldr.w	r1, [r3, #520]	@ 0x208
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8009562:	78fb      	ldrb	r3, [r7, #3]
 8009564:	7df8      	ldrb	r0, [r7, #23]
 8009566:	47a0      	blx	r4
    }
  }

  return (uint8_t)USBD_OK;
 8009568:	2300      	movs	r3, #0
}
 800956a:	4618      	mov	r0, r3
 800956c:	371c      	adds	r7, #28
 800956e:	46bd      	mov	sp, r7
 8009570:	bd90      	pop	{r4, r7, pc}
 8009572:	bf00      	nop
 8009574:	20002308 	.word	0x20002308
 8009578:	20002320 	.word	0x20002320

0800957c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b084      	sub	sp, #16
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
 8009584:	460b      	mov	r3, r1
 8009586:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8009588:	2300      	movs	r3, #0
 800958a:	60bb      	str	r3, [r7, #8]
  uint8_t ep_to_ch = 0;
 800958c:	2300      	movs	r3, #0
 800958e:	73fb      	strb	r3, [r7, #15]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009590:	2300      	movs	r3, #0
 8009592:	73bb      	strb	r3, [r7, #14]
 8009594:	e00b      	b.n	80095ae <USBD_CDC_DataOut+0x32>
  {
    if (epnum == CDC_OUT_EP[i])
 8009596:	7bbb      	ldrb	r3, [r7, #14]
 8009598:	4a17      	ldr	r2, [pc, #92]	@ (80095f8 <USBD_CDC_DataOut+0x7c>)
 800959a:	5cd3      	ldrb	r3, [r2, r3]
 800959c:	78fa      	ldrb	r2, [r7, #3]
 800959e:	429a      	cmp	r2, r3
 80095a0:	d102      	bne.n	80095a8 <USBD_CDC_DataOut+0x2c>
    {
      ep_to_ch = i;
 80095a2:	7bbb      	ldrb	r3, [r7, #14]
 80095a4:	73fb      	strb	r3, [r7, #15]
      break;
 80095a6:	e005      	b.n	80095b4 <USBD_CDC_DataOut+0x38>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80095a8:	7bbb      	ldrb	r3, [r7, #14]
 80095aa:	3301      	adds	r3, #1
 80095ac:	73bb      	strb	r3, [r7, #14]
 80095ae:	7bbb      	ldrb	r3, [r7, #14]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d0f0      	beq.n	8009596 <USBD_CDC_DataOut+0x1a>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 80095b4:	7bfb      	ldrb	r3, [r7, #15]
 80095b6:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80095ba:	fb02 f303 	mul.w	r3, r2, r3
 80095be:	4a0f      	ldr	r2, [pc, #60]	@ (80095fc <USBD_CDC_DataOut+0x80>)
 80095c0:	4413      	add	r3, r2
 80095c2:	60bb      	str	r3, [r7, #8]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80095c4:	78fb      	ldrb	r3, [r7, #3]
 80095c6:	4619      	mov	r1, r3
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f002 fc10 	bl	800bdee <USBD_LL_GetRxDataSize>
 80095ce:	4602      	mov	r2, r0
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Receive(ep_to_ch, hcdc->RxBuffer, &hcdc->RxLength);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80095dc:	68db      	ldr	r3, [r3, #12]
 80095de:	68ba      	ldr	r2, [r7, #8]
 80095e0:	f8d2 1204 	ldr.w	r1, [r2, #516]	@ 0x204
 80095e4:	68ba      	ldr	r2, [r7, #8]
 80095e6:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80095ea:	7bf8      	ldrb	r0, [r7, #15]
 80095ec:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80095ee:	2300      	movs	r3, #0
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3710      	adds	r7, #16
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}
 80095f8:	2000230c 	.word	0x2000230c
 80095fc:	20002320 	.word	0x20002320

08009600 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009600:	b590      	push	{r4, r7, lr}
 8009602:	b085      	sub	sp, #20
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8009608:	2300      	movs	r3, #0
 800960a:	60bb      	str	r3, [r7, #8]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800960c:	2300      	movs	r3, #0
 800960e:	73fb      	strb	r3, [r7, #15]
 8009610:	e02d      	b.n	800966e <USBD_CDC_EP0_RxReady+0x6e>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 8009612:	7bfb      	ldrb	r3, [r7, #15]
 8009614:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009618:	fb02 f303 	mul.w	r3, r2, r3
 800961c:	4a18      	ldr	r2, [pc, #96]	@ (8009680 <USBD_CDC_EP0_RxReady+0x80>)
 800961e:	4413      	add	r3, r2
 8009620:	60bb      	str	r3, [r7, #8]

    if (hcdc == NULL)
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d101      	bne.n	800962c <USBD_CDC_EP0_RxReady+0x2c>
    {
      return (uint8_t)USBD_FAIL;
 8009628:	2303      	movs	r3, #3
 800962a:	e024      	b.n	8009676 <USBD_CDC_EP0_RxReady+0x76>
    }

    if ((pdev->pUserData_CDC_ACM != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009632:	2b00      	cmp	r3, #0
 8009634:	d018      	beq.n	8009668 <USBD_CDC_EP0_RxReady+0x68>
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800963c:	2bff      	cmp	r3, #255	@ 0xff
 800963e:	d013      	beq.n	8009668 <USBD_CDC_EP0_RxReady+0x68>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(i, hcdc->CmdOpCode, (uint8_t *)hcdc->data[i], (uint16_t)hcdc->CmdLength);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009646:	689c      	ldr	r4, [r3, #8]
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	f893 1200 	ldrb.w	r1, [r3, #512]	@ 0x200
 800964e:	7bfb      	ldrb	r3, [r7, #15]
 8009650:	025b      	lsls	r3, r3, #9
 8009652:	68ba      	ldr	r2, [r7, #8]
 8009654:	441a      	add	r2, r3
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800965c:	7bf8      	ldrb	r0, [r7, #15]
 800965e:	47a0      	blx	r4
      hcdc->CmdOpCode = 0xFFU;
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	22ff      	movs	r2, #255	@ 0xff
 8009664:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009668:	7bfb      	ldrb	r3, [r7, #15]
 800966a:	3301      	adds	r3, #1
 800966c:	73fb      	strb	r3, [r7, #15]
 800966e:	7bfb      	ldrb	r3, [r7, #15]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d0ce      	beq.n	8009612 <USBD_CDC_EP0_RxReady+0x12>
    }
  }

  return (uint8_t)USBD_OK;
 8009674:	2300      	movs	r3, #0
}
 8009676:	4618      	mov	r0, r3
 8009678:	3714      	adds	r7, #20
 800967a:	46bd      	mov	sp, r7
 800967c:	bd90      	pop	{r4, r7, pc}
 800967e:	bf00      	nop
 8009680:	20002320 	.word	0x20002320

08009684 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009684:	b480      	push	{r7}
 8009686:	b083      	sub	sp, #12
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	224b      	movs	r2, #75	@ 0x4b
 8009690:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8009692:	4b03      	ldr	r3, [pc, #12]	@ (80096a0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009694:	4618      	mov	r0, r3
 8009696:	370c      	adds	r7, #12
 8009698:	46bd      	mov	sp, r7
 800969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969e:	4770      	bx	lr
 80096a0:	20000144 	.word	0x20000144

080096a4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80096a4:	b480      	push	{r7}
 80096a6:	b083      	sub	sp, #12
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	224b      	movs	r2, #75	@ 0x4b
 80096b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80096b2:	4b03      	ldr	r3, [pc, #12]	@ (80096c0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	370c      	adds	r7, #12
 80096b8:	46bd      	mov	sp, r7
 80096ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096be:	4770      	bx	lr
 80096c0:	200000f8 	.word	0x200000f8

080096c4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b083      	sub	sp, #12
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	224b      	movs	r2, #75	@ 0x4b
 80096d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80096d2:	4b03      	ldr	r3, [pc, #12]	@ (80096e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	370c      	adds	r7, #12
 80096d8:	46bd      	mov	sp, r7
 80096da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096de:	4770      	bx	lr
 80096e0:	20000144 	.word	0x20000144

080096e4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b083      	sub	sp, #12
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	220a      	movs	r2, #10
 80096f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80096f2:	4b03      	ldr	r3, [pc, #12]	@ (8009700 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	370c      	adds	r7, #12
 80096f8:	46bd      	mov	sp, r7
 80096fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fe:	4770      	bx	lr
 8009700:	200000b0 	.word	0x200000b0

08009704 <USBD_CDC_ACM_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_ACM_RegisterInterface(USBD_HandleTypeDef *pdev,
                                       USBD_CDC_ACM_ItfTypeDef *fops)
{
 8009704:	b480      	push	{r7}
 8009706:	b083      	sub	sp, #12
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d101      	bne.n	8009718 <USBD_CDC_ACM_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009714:	2303      	movs	r3, #3
 8009716:	e004      	b.n	8009722 <USBD_CDC_ACM_RegisterInterface+0x1e>
  }

  pdev->pUserData_CDC_ACM = fops;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	683a      	ldr	r2, [r7, #0]
 800971c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  return (uint8_t)USBD_OK;
 8009720:	2300      	movs	r3, #0
}
 8009722:	4618      	mov	r0, r3
 8009724:	370c      	adds	r7, #12
 8009726:	46bd      	mov	sp, r7
 8009728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972c:	4770      	bx	lr
	...

08009730 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009730:	b480      	push	{r7}
 8009732:	b087      	sub	sp, #28
 8009734:	af00      	add	r7, sp, #0
 8009736:	60b9      	str	r1, [r7, #8]
 8009738:	607a      	str	r2, [r7, #4]
 800973a:	603b      	str	r3, [r7, #0]
 800973c:	4603      	mov	r3, r0
 800973e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8009740:	2300      	movs	r3, #0
 8009742:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 8009744:	7bfb      	ldrb	r3, [r7, #15]
 8009746:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800974a:	fb02 f303 	mul.w	r3, r2, r3
 800974e:	4a09      	ldr	r2, [pc, #36]	@ (8009774 <USBD_CDC_SetTxBuffer+0x44>)
 8009750:	4413      	add	r3, r2
 8009752:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	687a      	ldr	r2, [r7, #4]
 8009758:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	683a      	ldr	r2, [r7, #0]
 8009760:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009764:	2300      	movs	r3, #0
}
 8009766:	4618      	mov	r0, r3
 8009768:	371c      	adds	r7, #28
 800976a:	46bd      	mov	sp, r7
 800976c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009770:	4770      	bx	lr
 8009772:	bf00      	nop
 8009774:	20002320 	.word	0x20002320

08009778 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009778:	b480      	push	{r7}
 800977a:	b087      	sub	sp, #28
 800977c:	af00      	add	r7, sp, #0
 800977e:	4603      	mov	r3, r0
 8009780:	60b9      	str	r1, [r7, #8]
 8009782:	607a      	str	r2, [r7, #4]
 8009784:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8009786:	2300      	movs	r3, #0
 8009788:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 800978a:	7bfb      	ldrb	r3, [r7, #15]
 800978c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009790:	fb02 f303 	mul.w	r3, r2, r3
 8009794:	4a06      	ldr	r2, [pc, #24]	@ (80097b0 <USBD_CDC_SetRxBuffer+0x38>)
 8009796:	4413      	add	r3, r2
 8009798:	617b      	str	r3, [r7, #20]

  hcdc->RxBuffer = pbuff;
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	687a      	ldr	r2, [r7, #4]
 800979e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80097a2:	2300      	movs	r3, #0
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	371c      	adds	r7, #28
 80097a8:	46bd      	mov	sp, r7
 80097aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ae:	4770      	bx	lr
 80097b0:	20002320 	.word	0x20002320

080097b4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b084      	sub	sp, #16
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	4603      	mov	r3, r0
 80097bc:	6039      	str	r1, [r7, #0]
 80097be:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 80097c0:	2300      	movs	r3, #0
 80097c2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80097c4:	2301      	movs	r3, #1
 80097c6:	73fb      	strb	r3, [r7, #15]

  hcdc = &CDC_ACM_Class_Data[ch];
 80097c8:	79fb      	ldrb	r3, [r7, #7]
 80097ca:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80097ce:	fb02 f303 	mul.w	r3, r2, r3
 80097d2:	4a17      	ldr	r2, [pc, #92]	@ (8009830 <USBD_CDC_TransmitPacket+0x7c>)
 80097d4:	4413      	add	r3, r2
 80097d6:	60bb      	str	r3, [r7, #8]

  if (hcdc->TxState == 0U)
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d121      	bne.n	8009826 <USBD_CDC_TransmitPacket+0x72>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	2201      	movs	r2, #1
 80097e6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP[ch] & 0xFU].total_length = hcdc->TxLength;
 80097ea:	79fb      	ldrb	r3, [r7, #7]
 80097ec:	4a11      	ldr	r2, [pc, #68]	@ (8009834 <USBD_CDC_TransmitPacket+0x80>)
 80097ee:	5cd3      	ldrb	r3, [r2, r3]
 80097f0:	f003 020f 	and.w	r2, r3, #15
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80097fa:	6838      	ldr	r0, [r7, #0]
 80097fc:	4613      	mov	r3, r2
 80097fe:	009b      	lsls	r3, r3, #2
 8009800:	4413      	add	r3, r2
 8009802:	009b      	lsls	r3, r3, #2
 8009804:	4403      	add	r3, r0
 8009806:	3318      	adds	r3, #24
 8009808:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP[ch], hcdc->TxBuffer, hcdc->TxLength);
 800980a:	79fb      	ldrb	r3, [r7, #7]
 800980c:	4a09      	ldr	r2, [pc, #36]	@ (8009834 <USBD_CDC_TransmitPacket+0x80>)
 800980e:	5cd1      	ldrb	r1, [r2, r3]
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800981c:	6838      	ldr	r0, [r7, #0]
 800981e:	f002 faa4 	bl	800bd6a <USBD_LL_Transmit>

    ret = USBD_OK;
 8009822:	2300      	movs	r3, #0
 8009824:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009826:	7bfb      	ldrb	r3, [r7, #15]
}
 8009828:	4618      	mov	r0, r3
 800982a:	3710      	adds	r7, #16
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}
 8009830:	20002320 	.word	0x20002320
 8009834:	20002308 	.word	0x20002308

08009838 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b084      	sub	sp, #16
 800983c:	af00      	add	r7, sp, #0
 800983e:	4603      	mov	r3, r0
 8009840:	6039      	str	r1, [r7, #0]
 8009842:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8009844:	2300      	movs	r3, #0
 8009846:	60fb      	str	r3, [r7, #12]

  hcdc = &CDC_ACM_Class_Data[ch];
 8009848:	79fb      	ldrb	r3, [r7, #7]
 800984a:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800984e:	fb02 f303 	mul.w	r3, r2, r3
 8009852:	4a11      	ldr	r2, [pc, #68]	@ (8009898 <USBD_CDC_ReceivePacket+0x60>)
 8009854:	4413      	add	r3, r2
 8009856:	60fb      	str	r3, [r7, #12]

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	7c1b      	ldrb	r3, [r3, #16]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d10b      	bne.n	8009878 <USBD_CDC_ReceivePacket+0x40>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 8009860:	79fb      	ldrb	r3, [r7, #7]
 8009862:	4a0e      	ldr	r2, [pc, #56]	@ (800989c <USBD_CDC_ReceivePacket+0x64>)
 8009864:	5cd1      	ldrb	r1, [r2, r3]
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800986c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009870:	6838      	ldr	r0, [r7, #0]
 8009872:	f002 fa9b 	bl	800bdac <USBD_LL_PrepareReceive>
 8009876:	e009      	b.n	800988c <USBD_CDC_ReceivePacket+0x54>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 8009878:	79fb      	ldrb	r3, [r7, #7]
 800987a:	4a08      	ldr	r2, [pc, #32]	@ (800989c <USBD_CDC_ReceivePacket+0x64>)
 800987c:	5cd1      	ldrb	r1, [r2, r3]
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009884:	2340      	movs	r3, #64	@ 0x40
 8009886:	6838      	ldr	r0, [r7, #0]
 8009888:	f002 fa90 	bl	800bdac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800988c:	2300      	movs	r3, #0
}
 800988e:	4618      	mov	r0, r3
 8009890:	3710      	adds	r7, #16
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}
 8009896:	bf00      	nop
 8009898:	20002320 	.word	0x20002320
 800989c:	2000230c 	.word	0x2000230c

080098a0 <USBD_Update_CDC_ACM_DESC>:
                              uint8_t com_itf,
                              uint8_t in_ep,
                              uint8_t cmd_ep,
                              uint8_t out_ep,
                              uint8_t str_idx)
{
 80098a0:	b480      	push	{r7}
 80098a2:	b085      	sub	sp, #20
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
 80098a8:	4608      	mov	r0, r1
 80098aa:	4611      	mov	r1, r2
 80098ac:	461a      	mov	r2, r3
 80098ae:	4603      	mov	r3, r0
 80098b0:	70fb      	strb	r3, [r7, #3]
 80098b2:	460b      	mov	r3, r1
 80098b4:	70bb      	strb	r3, [r7, #2]
 80098b6:	4613      	mov	r3, r2
 80098b8:	707b      	strb	r3, [r7, #1]
  desc += 9;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	3309      	adds	r3, #9
 80098be:	607b      	str	r3, [r7, #4]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80098c0:	2300      	movs	r3, #0
 80098c2:	73fb      	strb	r3, [r7, #15]
 80098c4:	e05b      	b.n	800997e <USBD_Update_CDC_ACM_DESC+0xde>
  {
    desc[2] = cmd_itf;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	3302      	adds	r3, #2
 80098ca:	78fa      	ldrb	r2, [r7, #3]
 80098cc:	701a      	strb	r2, [r3, #0]
    desc[16] = str_idx;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	3310      	adds	r3, #16
 80098d2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80098d6:	701a      	strb	r2, [r3, #0]
    desc[10] = cmd_itf;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	330a      	adds	r3, #10
 80098dc:	78fa      	ldrb	r2, [r7, #3]
 80098de:	701a      	strb	r2, [r3, #0]
    desc[26] = com_itf;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	331a      	adds	r3, #26
 80098e4:	78ba      	ldrb	r2, [r7, #2]
 80098e6:	701a      	strb	r2, [r3, #0]
    desc[34] = cmd_itf;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	3322      	adds	r3, #34	@ 0x22
 80098ec:	78fa      	ldrb	r2, [r7, #3]
 80098ee:	701a      	strb	r2, [r3, #0]
    desc[35] = com_itf;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	3323      	adds	r3, #35	@ 0x23
 80098f4:	78ba      	ldrb	r2, [r7, #2]
 80098f6:	701a      	strb	r2, [r3, #0]
    desc[38] = cmd_ep;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	3326      	adds	r3, #38	@ 0x26
 80098fc:	7e3a      	ldrb	r2, [r7, #24]
 80098fe:	701a      	strb	r2, [r3, #0]
    desc[45] = com_itf;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	332d      	adds	r3, #45	@ 0x2d
 8009904:	78ba      	ldrb	r2, [r7, #2]
 8009906:	701a      	strb	r2, [r3, #0]
    desc[54] = out_ep;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	3336      	adds	r3, #54	@ 0x36
 800990c:	7f3a      	ldrb	r2, [r7, #28]
 800990e:	701a      	strb	r2, [r3, #0]
    desc[61] = in_ep;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	333d      	adds	r3, #61	@ 0x3d
 8009914:	787a      	ldrb	r2, [r7, #1]
 8009916:	701a      	strb	r2, [r3, #0]

    desc += 66;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	3342      	adds	r3, #66	@ 0x42
 800991c:	607b      	str	r3, [r7, #4]
    CDC_IN_EP[i] = in_ep;
 800991e:	7bfb      	ldrb	r3, [r7, #15]
 8009920:	491c      	ldr	r1, [pc, #112]	@ (8009994 <USBD_Update_CDC_ACM_DESC+0xf4>)
 8009922:	787a      	ldrb	r2, [r7, #1]
 8009924:	54ca      	strb	r2, [r1, r3]
    CDC_OUT_EP[i] = out_ep;
 8009926:	7bfb      	ldrb	r3, [r7, #15]
 8009928:	491b      	ldr	r1, [pc, #108]	@ (8009998 <USBD_Update_CDC_ACM_DESC+0xf8>)
 800992a:	7f3a      	ldrb	r2, [r7, #28]
 800992c:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_EP[i] = cmd_ep;
 800992e:	7bfb      	ldrb	r3, [r7, #15]
 8009930:	491a      	ldr	r1, [pc, #104]	@ (800999c <USBD_Update_CDC_ACM_DESC+0xfc>)
 8009932:	7e3a      	ldrb	r2, [r7, #24]
 8009934:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_ITF_NBR[i] = cmd_itf;
 8009936:	7bfb      	ldrb	r3, [r7, #15]
 8009938:	4919      	ldr	r1, [pc, #100]	@ (80099a0 <USBD_Update_CDC_ACM_DESC+0x100>)
 800993a:	78fa      	ldrb	r2, [r7, #3]
 800993c:	54ca      	strb	r2, [r1, r3]
    CDC_COM_ITF_NBR[i] = com_itf;
 800993e:	7bfb      	ldrb	r3, [r7, #15]
 8009940:	4918      	ldr	r1, [pc, #96]	@ (80099a4 <USBD_Update_CDC_ACM_DESC+0x104>)
 8009942:	78ba      	ldrb	r2, [r7, #2]
 8009944:	54ca      	strb	r2, [r1, r3]
    CDC_STR_DESC_IDX[i] = str_idx;
 8009946:	7bfb      	ldrb	r3, [r7, #15]
 8009948:	4917      	ldr	r1, [pc, #92]	@ (80099a8 <USBD_Update_CDC_ACM_DESC+0x108>)
 800994a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800994e:	54ca      	strb	r2, [r1, r3]

    in_ep += 2;
 8009950:	787b      	ldrb	r3, [r7, #1]
 8009952:	3302      	adds	r3, #2
 8009954:	707b      	strb	r3, [r7, #1]
    cmd_ep = in_ep + 1;
 8009956:	787b      	ldrb	r3, [r7, #1]
 8009958:	3301      	adds	r3, #1
 800995a:	763b      	strb	r3, [r7, #24]
    out_ep++;
 800995c:	7f3b      	ldrb	r3, [r7, #28]
 800995e:	3301      	adds	r3, #1
 8009960:	773b      	strb	r3, [r7, #28]
    str_idx++;
 8009962:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009966:	3301      	adds	r3, #1
 8009968:	f887 3020 	strb.w	r3, [r7, #32]

    cmd_itf += 2;
 800996c:	78fb      	ldrb	r3, [r7, #3]
 800996e:	3302      	adds	r3, #2
 8009970:	70fb      	strb	r3, [r7, #3]
    com_itf = cmd_itf + 1;
 8009972:	78fb      	ldrb	r3, [r7, #3]
 8009974:	3301      	adds	r3, #1
 8009976:	70bb      	strb	r3, [r7, #2]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009978:	7bfb      	ldrb	r3, [r7, #15]
 800997a:	3301      	adds	r3, #1
 800997c:	73fb      	strb	r3, [r7, #15]
 800997e:	7bfb      	ldrb	r3, [r7, #15]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d0a0      	beq.n	80098c6 <USBD_Update_CDC_ACM_DESC+0x26>
  }
}
 8009984:	bf00      	nop
 8009986:	bf00      	nop
 8009988:	3714      	adds	r7, #20
 800998a:	46bd      	mov	sp, r7
 800998c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009990:	4770      	bx	lr
 8009992:	bf00      	nop
 8009994:	20002308 	.word	0x20002308
 8009998:	2000230c 	.word	0x2000230c
 800999c:	20002310 	.word	0x20002310
 80099a0:	20002314 	.word	0x20002314
 80099a4:	20002318 	.word	0x20002318
 80099a8:	2000231c 	.word	0x2000231c

080099ac <USBD_COMPOSITE_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b082      	sub	sp, #8
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
 80099b4:	460b      	mov	r3, r1
 80099b6:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.Init(pdev, cfgidx);
 80099b8:	4b08      	ldr	r3, [pc, #32]	@ (80099dc <USBD_COMPOSITE_Init+0x30>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	78fa      	ldrb	r2, [r7, #3]
 80099be:	4611      	mov	r1, r2
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	4798      	blx	r3
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.Init(pdev, cfgidx);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.Init(pdev, cfgidx);
 80099c4:	4b06      	ldr	r3, [pc, #24]	@ (80099e0 <USBD_COMPOSITE_Init+0x34>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	78fa      	ldrb	r2, [r7, #3]
 80099ca:	4611      	mov	r1, r2
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.Init(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 80099d0:	2300      	movs	r3, #0
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	3708      	adds	r7, #8
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}
 80099da:	bf00      	nop
 80099dc:	200000bc 	.word	0x200000bc
 80099e0:	200001dc 	.word	0x200001dc

080099e4 <USBD_COMPOSITE_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b082      	sub	sp, #8
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
 80099ec:	460b      	mov	r3, r1
 80099ee:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.DeInit(pdev, cfgidx);
 80099f0:	4b08      	ldr	r3, [pc, #32]	@ (8009a14 <USBD_COMPOSITE_DeInit+0x30>)
 80099f2:	685b      	ldr	r3, [r3, #4]
 80099f4:	78fa      	ldrb	r2, [r7, #3]
 80099f6:	4611      	mov	r1, r2
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	4798      	blx	r3
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.DeInit(pdev, cfgidx);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.DeInit(pdev, cfgidx);
 80099fc:	4b06      	ldr	r3, [pc, #24]	@ (8009a18 <USBD_COMPOSITE_DeInit+0x34>)
 80099fe:	685b      	ldr	r3, [r3, #4]
 8009a00:	78fa      	ldrb	r2, [r7, #3]
 8009a02:	4611      	mov	r1, r2
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.DeInit(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 8009a08:	2300      	movs	r3, #0
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3708      	adds	r7, #8
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}
 8009a12:	bf00      	nop
 8009a14:	200000bc 	.word	0x200000bc
 8009a18:	200001dc 	.word	0x200001dc

08009a1c <USBD_COMPOSITE_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Setup(USBD_HandleTypeDef *pdev,
                                    USBD_SetupReqTypedef *req)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b084      	sub	sp, #16
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	6039      	str	r1, [r7, #0]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8009a26:	2300      	movs	r3, #0
 8009a28:	73fb      	strb	r3, [r7, #15]
 8009a2a:	e019      	b.n	8009a60 <USBD_COMPOSITE_Setup+0x44>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	889b      	ldrh	r3, [r3, #4]
 8009a30:	b2da      	uxtb	r2, r3
 8009a32:	7bfb      	ldrb	r3, [r7, #15]
 8009a34:	4915      	ldr	r1, [pc, #84]	@ (8009a8c <USBD_COMPOSITE_Setup+0x70>)
 8009a36:	5ccb      	ldrb	r3, [r1, r3]
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	d007      	beq.n	8009a4c <USBD_COMPOSITE_Setup+0x30>
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	889b      	ldrh	r3, [r3, #4]
 8009a40:	b2da      	uxtb	r2, r3
 8009a42:	7bfb      	ldrb	r3, [r7, #15]
 8009a44:	4912      	ldr	r1, [pc, #72]	@ (8009a90 <USBD_COMPOSITE_Setup+0x74>)
 8009a46:	5ccb      	ldrb	r3, [r1, r3]
 8009a48:	429a      	cmp	r2, r3
 8009a4a:	d106      	bne.n	8009a5a <USBD_COMPOSITE_Setup+0x3e>
    {
      return USBD_CDC_ACM.Setup(pdev, req);
 8009a4c:	4b11      	ldr	r3, [pc, #68]	@ (8009a94 <USBD_COMPOSITE_Setup+0x78>)
 8009a4e:	689b      	ldr	r3, [r3, #8]
 8009a50:	6839      	ldr	r1, [r7, #0]
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	4798      	blx	r3
 8009a56:	4603      	mov	r3, r0
 8009a58:	e014      	b.n	8009a84 <USBD_COMPOSITE_Setup+0x68>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8009a5a:	7bfb      	ldrb	r3, [r7, #15]
 8009a5c:	3301      	adds	r3, #1
 8009a5e:	73fb      	strb	r3, [r7, #15]
 8009a60:	7bfb      	ldrb	r3, [r7, #15]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d0e2      	beq.n	8009a2c <USBD_COMPOSITE_Setup+0x10>
  {
    return USBD_HID_KEYBOARD.Setup(pdev, req);
  }
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (LOBYTE(req->wIndex) == CUSTOM_HID_ITF_NBR)
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	889b      	ldrh	r3, [r3, #4]
 8009a6a:	b2da      	uxtb	r2, r3
 8009a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8009a98 <USBD_COMPOSITE_Setup+0x7c>)
 8009a6e:	781b      	ldrb	r3, [r3, #0]
 8009a70:	429a      	cmp	r2, r3
 8009a72:	d106      	bne.n	8009a82 <USBD_COMPOSITE_Setup+0x66>
  {
    return USBD_HID_CUSTOM.Setup(pdev, req);
 8009a74:	4b09      	ldr	r3, [pc, #36]	@ (8009a9c <USBD_COMPOSITE_Setup+0x80>)
 8009a76:	689b      	ldr	r3, [r3, #8]
 8009a78:	6839      	ldr	r1, [r7, #0]
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	4798      	blx	r3
 8009a7e:	4603      	mov	r3, r0
 8009a80:	e000      	b.n	8009a84 <USBD_COMPOSITE_Setup+0x68>
  {
    USBD_PRNT.Setup(pdev, req);
  }
#endif

  return USBD_FAIL;
 8009a82:	2303      	movs	r3, #3
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	3710      	adds	r7, #16
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}
 8009a8c:	20002314 	.word	0x20002314
 8009a90:	20002318 	.word	0x20002318
 8009a94:	200000bc 	.word	0x200000bc
 8009a98:	20002654 	.word	0x20002654
 8009a9c:	200001dc 	.word	0x200001dc

08009aa0 <USBD_COMPOSITE_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b084      	sub	sp, #16
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	460b      	mov	r3, r1
 8009aaa:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8009aac:	2300      	movs	r3, #0
 8009aae:	73fb      	strb	r3, [r7, #15]
 8009ab0:	e01a      	b.n	8009ae8 <USBD_COMPOSITE_DataIn+0x48>
  {
    if (epnum == (CDC_IN_EP[i] & 0x7F) || epnum == (CDC_CMD_EP[i] & 0x7F))
 8009ab2:	78fa      	ldrb	r2, [r7, #3]
 8009ab4:	7bfb      	ldrb	r3, [r7, #15]
 8009ab6:	4918      	ldr	r1, [pc, #96]	@ (8009b18 <USBD_COMPOSITE_DataIn+0x78>)
 8009ab8:	5ccb      	ldrb	r3, [r1, r3]
 8009aba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	d007      	beq.n	8009ad2 <USBD_COMPOSITE_DataIn+0x32>
 8009ac2:	78fa      	ldrb	r2, [r7, #3]
 8009ac4:	7bfb      	ldrb	r3, [r7, #15]
 8009ac6:	4915      	ldr	r1, [pc, #84]	@ (8009b1c <USBD_COMPOSITE_DataIn+0x7c>)
 8009ac8:	5ccb      	ldrb	r3, [r1, r3]
 8009aca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ace:	429a      	cmp	r2, r3
 8009ad0:	d107      	bne.n	8009ae2 <USBD_COMPOSITE_DataIn+0x42>
    {
      return USBD_CDC_ACM.DataIn(pdev, epnum);
 8009ad2:	4b13      	ldr	r3, [pc, #76]	@ (8009b20 <USBD_COMPOSITE_DataIn+0x80>)
 8009ad4:	695b      	ldr	r3, [r3, #20]
 8009ad6:	78fa      	ldrb	r2, [r7, #3]
 8009ad8:	4611      	mov	r1, r2
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	4798      	blx	r3
 8009ade:	4603      	mov	r3, r0
 8009ae0:	e015      	b.n	8009b0e <USBD_COMPOSITE_DataIn+0x6e>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8009ae2:	7bfb      	ldrb	r3, [r7, #15]
 8009ae4:	3301      	adds	r3, #1
 8009ae6:	73fb      	strb	r3, [r7, #15]
 8009ae8:	7bfb      	ldrb	r3, [r7, #15]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d0e1      	beq.n	8009ab2 <USBD_COMPOSITE_DataIn+0x12>
  {
    return USBD_HID_KEYBOARD.DataIn(pdev, epnum);
  }
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (epnum == (CUSTOM_HID_IN_EP & 0x7F))
 8009aee:	78fa      	ldrb	r2, [r7, #3]
 8009af0:	4b0c      	ldr	r3, [pc, #48]	@ (8009b24 <USBD_COMPOSITE_DataIn+0x84>)
 8009af2:	781b      	ldrb	r3, [r3, #0]
 8009af4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009af8:	429a      	cmp	r2, r3
 8009afa:	d107      	bne.n	8009b0c <USBD_COMPOSITE_DataIn+0x6c>
  {
    return USBD_HID_CUSTOM.DataIn(pdev, epnum);
 8009afc:	4b0a      	ldr	r3, [pc, #40]	@ (8009b28 <USBD_COMPOSITE_DataIn+0x88>)
 8009afe:	695b      	ldr	r3, [r3, #20]
 8009b00:	78fa      	ldrb	r2, [r7, #3]
 8009b02:	4611      	mov	r1, r2
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	4798      	blx	r3
 8009b08:	4603      	mov	r3, r0
 8009b0a:	e000      	b.n	8009b0e <USBD_COMPOSITE_DataIn+0x6e>
  {
    USBD_PRNT.DataIn(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 8009b0c:	2303      	movs	r3, #3
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3710      	adds	r7, #16
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}
 8009b16:	bf00      	nop
 8009b18:	20002308 	.word	0x20002308
 8009b1c:	20002310 	.word	0x20002310
 8009b20:	200000bc 	.word	0x200000bc
 8009b24:	200001da 	.word	0x200001da
 8009b28:	200001dc 	.word	0x200001dc

08009b2c <USBD_COMPOSITE_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b082      	sub	sp, #8
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.EP0_RxReady(pdev);
 8009b34:	4b06      	ldr	r3, [pc, #24]	@ (8009b50 <USBD_COMPOSITE_EP0_RxReady+0x24>)
 8009b36:	691b      	ldr	r3, [r3, #16]
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	4798      	blx	r3
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.EP0_RxReady(pdev);
 8009b3c:	4b05      	ldr	r3, [pc, #20]	@ (8009b54 <USBD_COMPOSITE_EP0_RxReady+0x28>)
 8009b3e:	691b      	ldr	r3, [r3, #16]
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	4798      	blx	r3
  USBD_DFU.EP0_RxReady(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8009b44:	2300      	movs	r3, #0
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3708      	adds	r7, #8
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}
 8009b4e:	bf00      	nop
 8009b50:	200000bc 	.word	0x200000bc
 8009b54:	200001dc 	.word	0x200001dc

08009b58 <USBD_COMPOSITE_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b083      	sub	sp, #12
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  USBD_DFU.EP0_TxSent(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8009b60:	2300      	movs	r3, #0
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	370c      	adds	r7, #12
 8009b66:	46bd      	mov	sp, r7
 8009b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6c:	4770      	bx	lr

08009b6e <USBD_COMPOSITE_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_SOF(USBD_HandleTypeDef *pdev)
{
 8009b6e:	b480      	push	{r7}
 8009b70:	b083      	sub	sp, #12
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	6078      	str	r0, [r7, #4]
  USBD_DFU.SOF(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8009b76:	2300      	movs	r3, #0
}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	370c      	adds	r7, #12
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b82:	4770      	bx	lr

08009b84 <USBD_COMPOSITE_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b083      	sub	sp, #12
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	460b      	mov	r3, r1
 8009b8e:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8009b90:	2300      	movs	r3, #0
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	370c      	adds	r7, #12
 8009b96:	46bd      	mov	sp, r7
 8009b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9c:	4770      	bx	lr

08009b9e <USBD_COMPOSITE_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009b9e:	b480      	push	{r7}
 8009ba0:	b083      	sub	sp, #12
 8009ba2:	af00      	add	r7, sp, #0
 8009ba4:	6078      	str	r0, [r7, #4]
 8009ba6:	460b      	mov	r3, r1
 8009ba8:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8009baa:	2300      	movs	r3, #0
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	370c      	adds	r7, #12
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb6:	4770      	bx	lr

08009bb8 <USBD_COMPOSITE_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b084      	sub	sp, #16
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
 8009bc0:	460b      	mov	r3, r1
 8009bc2:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	73fb      	strb	r3, [r7, #15]
 8009bc8:	e010      	b.n	8009bec <USBD_COMPOSITE_DataOut+0x34>
  {
    if (epnum == CDC_OUT_EP[i])
 8009bca:	7bfb      	ldrb	r3, [r7, #15]
 8009bcc:	4a12      	ldr	r2, [pc, #72]	@ (8009c18 <USBD_COMPOSITE_DataOut+0x60>)
 8009bce:	5cd3      	ldrb	r3, [r2, r3]
 8009bd0:	78fa      	ldrb	r2, [r7, #3]
 8009bd2:	429a      	cmp	r2, r3
 8009bd4:	d107      	bne.n	8009be6 <USBD_COMPOSITE_DataOut+0x2e>
    {
      return USBD_CDC_ACM.DataOut(pdev, epnum);
 8009bd6:	4b11      	ldr	r3, [pc, #68]	@ (8009c1c <USBD_COMPOSITE_DataOut+0x64>)
 8009bd8:	699b      	ldr	r3, [r3, #24]
 8009bda:	78fa      	ldrb	r2, [r7, #3]
 8009bdc:	4611      	mov	r1, r2
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	4798      	blx	r3
 8009be2:	4603      	mov	r3, r0
 8009be4:	e013      	b.n	8009c0e <USBD_COMPOSITE_DataOut+0x56>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8009be6:	7bfb      	ldrb	r3, [r7, #15]
 8009be8:	3301      	adds	r3, #1
 8009bea:	73fb      	strb	r3, [r7, #15]
 8009bec:	7bfb      	ldrb	r3, [r7, #15]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d0eb      	beq.n	8009bca <USBD_COMPOSITE_DataOut+0x12>
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (epnum == CUSTOM_HID_OUT_EP)
 8009bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8009c20 <USBD_COMPOSITE_DataOut+0x68>)
 8009bf4:	781b      	ldrb	r3, [r3, #0]
 8009bf6:	78fa      	ldrb	r2, [r7, #3]
 8009bf8:	429a      	cmp	r2, r3
 8009bfa:	d107      	bne.n	8009c0c <USBD_COMPOSITE_DataOut+0x54>
  {
    return USBD_HID_CUSTOM.DataOut(pdev, epnum);
 8009bfc:	4b09      	ldr	r3, [pc, #36]	@ (8009c24 <USBD_COMPOSITE_DataOut+0x6c>)
 8009bfe:	699b      	ldr	r3, [r3, #24]
 8009c00:	78fa      	ldrb	r2, [r7, #3]
 8009c02:	4611      	mov	r1, r2
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	4798      	blx	r3
 8009c08:	4603      	mov	r3, r0
 8009c0a:	e000      	b.n	8009c0e <USBD_COMPOSITE_DataOut+0x56>
  {
    USBD_PRNT.DataOut(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 8009c0c:	2303      	movs	r3, #3
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3710      	adds	r7, #16
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}
 8009c16:	bf00      	nop
 8009c18:	2000230c 	.word	0x2000230c
 8009c1c:	200000bc 	.word	0x200000bc
 8009c20:	200001db 	.word	0x200001db
 8009c24:	200001dc 	.word	0x200001dc

08009c28 <USBD_COMPOSITE_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetHSCfgDesc(uint16_t *length)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b083      	sub	sp, #12
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	226b      	movs	r2, #107	@ 0x6b
 8009c34:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 8009c36:	4b03      	ldr	r3, [pc, #12]	@ (8009c44 <USBD_COMPOSITE_GetHSCfgDesc+0x1c>)
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	370c      	adds	r7, #12
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr
 8009c44:	200025a8 	.word	0x200025a8

08009c48 <USBD_COMPOSITE_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetFSCfgDesc(uint16_t *length)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b083      	sub	sp, #12
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	226b      	movs	r2, #107	@ 0x6b
 8009c54:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
 8009c56:	4b03      	ldr	r3, [pc, #12]	@ (8009c64 <USBD_COMPOSITE_GetFSCfgDesc+0x1c>)
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	370c      	adds	r7, #12
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c62:	4770      	bx	lr
 8009c64:	2000253c 	.word	0x2000253c

08009c68 <USBD_COMPOSITE_GetOtherSpeedCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b083      	sub	sp, #12
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
#if (USBD_USE_HS == 1)
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
#else
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	226b      	movs	r2, #107	@ 0x6b
 8009c74:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 8009c76:	4b03      	ldr	r3, [pc, #12]	@ (8009c84 <USBD_COMPOSITE_GetOtherSpeedCfgDesc+0x1c>)
#endif
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	370c      	adds	r7, #12
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c82:	4770      	bx	lr
 8009c84:	200025a8 	.word	0x200025a8

08009c88 <USBD_COMPOSITE_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_COMPOSITE_GetDeviceQualifierDesc(uint16_t *length)
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b083      	sub	sp, #12
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_DeviceQualifierDesc);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	220a      	movs	r2, #10
 8009c94:	801a      	strh	r2, [r3, #0]
  return USBD_COMPOSITE_DeviceQualifierDesc;
 8009c96:	4b03      	ldr	r3, [pc, #12]	@ (8009ca4 <USBD_COMPOSITE_GetDeviceQualifierDesc+0x1c>)
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	370c      	adds	r7, #12
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	4770      	bx	lr
 8009ca4:	200001d0 	.word	0x200001d0

08009ca8 <USBD_COMPOSITE_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_COMPOSITE_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b08a      	sub	sp, #40	@ 0x28
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	60f8      	str	r0, [r7, #12]
 8009cb0:	460b      	mov	r3, r1
 8009cb2:	607a      	str	r2, [r7, #4]
 8009cb4:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[64];

  /* Check if the requested string interface is supported */
  if (index <= USBD_Track_String_Index)
 8009cb6:	4b20      	ldr	r3, [pc, #128]	@ (8009d38 <USBD_COMPOSITE_GetUsrStringDesc+0x90>)
 8009cb8:	781b      	ldrb	r3, [r3, #0]
 8009cba:	7afa      	ldrb	r2, [r7, #11]
 8009cbc:	429a      	cmp	r2, r3
 8009cbe:	d835      	bhi.n	8009d2c <USBD_COMPOSITE_GetUsrStringDesc+0x84>
  {
#if (USBD_USE_CDC_ACM == 1)
    char str_buffer[16] = "";
 8009cc0:	f107 0314 	add.w	r3, r7, #20
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	601a      	str	r2, [r3, #0]
 8009cc8:	605a      	str	r2, [r3, #4]
 8009cca:	609a      	str	r2, [r3, #8]
 8009ccc:	60da      	str	r2, [r3, #12]
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8009cce:	2300      	movs	r3, #0
 8009cd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009cd4:	e01a      	b.n	8009d0c <USBD_COMPOSITE_GetUsrStringDesc+0x64>
    {
      if (index == CDC_STR_DESC_IDX[i])
 8009cd6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009cda:	4a18      	ldr	r2, [pc, #96]	@ (8009d3c <USBD_COMPOSITE_GetUsrStringDesc+0x94>)
 8009cdc:	5cd3      	ldrb	r3, [r2, r3]
 8009cde:	7afa      	ldrb	r2, [r7, #11]
 8009ce0:	429a      	cmp	r2, r3
 8009ce2:	d10e      	bne.n	8009d02 <USBD_COMPOSITE_GetUsrStringDesc+0x5a>
      {
        snprintf(str_buffer, sizeof(str_buffer), CDC_ACM_STR_DESC, i);
 8009ce4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009ce8:	f107 0014 	add.w	r0, r7, #20
 8009cec:	4a14      	ldr	r2, [pc, #80]	@ (8009d40 <USBD_COMPOSITE_GetUsrStringDesc+0x98>)
 8009cee:	2110      	movs	r1, #16
 8009cf0:	f002 f8bc 	bl	800be6c <sniprintf>
        USBD_GetString((uint8_t *)str_buffer, USBD_StrDesc, length);
 8009cf4:	f107 0314 	add.w	r3, r7, #20
 8009cf8:	687a      	ldr	r2, [r7, #4]
 8009cfa:	4912      	ldr	r1, [pc, #72]	@ (8009d44 <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f001 fcf4 	bl	800b6ea <USBD_GetString>
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8009d02:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009d06:	3301      	adds	r3, #1
 8009d08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009d0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d0e0      	beq.n	8009cd6 <USBD_COMPOSITE_GetUsrStringDesc+0x2e>
    {
      USBD_GetString((uint8_t *)HID_KEYBOARD_STR_DESC, USBD_StrDesc, length);
    }
#endif
#if (USBD_USE_HID_CUSTOM == 1)
    if (index == CUSTOM_HID_STR_DESC_IDX)
 8009d14:	4b0c      	ldr	r3, [pc, #48]	@ (8009d48 <USBD_COMPOSITE_GetUsrStringDesc+0xa0>)
 8009d16:	781b      	ldrb	r3, [r3, #0]
 8009d18:	7afa      	ldrb	r2, [r7, #11]
 8009d1a:	429a      	cmp	r2, r3
 8009d1c:	d104      	bne.n	8009d28 <USBD_COMPOSITE_GetUsrStringDesc+0x80>
    {
      USBD_GetString((uint8_t *)CUSTOM_HID_STR_DESC, USBD_StrDesc, length);
 8009d1e:	687a      	ldr	r2, [r7, #4]
 8009d20:	4908      	ldr	r1, [pc, #32]	@ (8009d44 <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 8009d22:	480a      	ldr	r0, [pc, #40]	@ (8009d4c <USBD_COMPOSITE_GetUsrStringDesc+0xa4>)
 8009d24:	f001 fce1 	bl	800b6ea <USBD_GetString>
    if (index == PRINTER_STR_DESC_IDX)
    {
      USBD_GetString((uint8_t *)PRNT_STR_DESC, USBD_StrDesc, length);
    }
#endif
    return USBD_StrDesc;
 8009d28:	4b06      	ldr	r3, [pc, #24]	@ (8009d44 <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 8009d2a:	e000      	b.n	8009d2e <USBD_COMPOSITE_GetUsrStringDesc+0x86>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 8009d2c:	2300      	movs	r3, #0
  }
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3728      	adds	r7, #40	@ 0x28
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}
 8009d36:	bf00      	nop
 8009d38:	200001cc 	.word	0x200001cc
 8009d3c:	2000231c 	.word	0x2000231c
 8009d40:	0800c828 	.word	0x0800c828
 8009d44:	20002614 	.word	0x20002614
 8009d48:	20002655 	.word	0x20002655
 8009d4c:	0800c838 	.word	0x0800c838

08009d50 <USBD_COMPOSITE_Mount_Class>:
#endif

void USBD_COMPOSITE_Mount_Class(void)
{
 8009d50:	b590      	push	{r4, r7, lr}
 8009d52:	b089      	sub	sp, #36	@ 0x24
 8009d54:	af04      	add	r7, sp, #16
  uint16_t len = 0;
 8009d56:	2300      	movs	r3, #0
 8009d58:	80bb      	strh	r3, [r7, #4]
  uint8_t *ptr = NULL;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	60fb      	str	r3, [r7, #12]

  uint8_t in_ep_track = 0x81;
 8009d5e:	2381      	movs	r3, #129	@ 0x81
 8009d60:	72fb      	strb	r3, [r7, #11]
  uint8_t out_ep_track = 0x01;
 8009d62:	2301      	movs	r3, #1
 8009d64:	72bb      	strb	r3, [r7, #10]
  uint8_t interface_no_track = 0x00;
 8009d66:	2300      	movs	r3, #0
 8009d68:	727b      	strb	r3, [r7, #9]
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_HID_CUSTOM == 1)
  ptr = USBD_HID_CUSTOM.GetFSConfigDescriptor(&len);
 8009d6a:	4b74      	ldr	r3, [pc, #464]	@ (8009f3c <USBD_COMPOSITE_Mount_Class+0x1ec>)
 8009d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d6e:	1d3a      	adds	r2, r7, #4
 8009d70:	4610      	mov	r0, r2
 8009d72:	4798      	blx	r3
 8009d74:	60f8      	str	r0, [r7, #12]
  USBD_Update_HID_Custom_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 8009d76:	4b72      	ldr	r3, [pc, #456]	@ (8009f40 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8009d78:	781b      	ldrb	r3, [r3, #0]
 8009d7a:	7ab8      	ldrb	r0, [r7, #10]
 8009d7c:	7afa      	ldrb	r2, [r7, #11]
 8009d7e:	7a79      	ldrb	r1, [r7, #9]
 8009d80:	9300      	str	r3, [sp, #0]
 8009d82:	4603      	mov	r3, r0
 8009d84:	68f8      	ldr	r0, [r7, #12]
 8009d86:	f000 fbcf 	bl	800a528 <USBD_Update_HID_Custom_DESC>
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_HID_CUSTOM_DESC, ptr + 0x09, len - 0x09);
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	3309      	adds	r3, #9
 8009d8e:	88ba      	ldrh	r2, [r7, #4]
 8009d90:	3a09      	subs	r2, #9
 8009d92:	4619      	mov	r1, r3
 8009d94:	486b      	ldr	r0, [pc, #428]	@ (8009f44 <USBD_COMPOSITE_Mount_Class+0x1f4>)
 8009d96:	f002 f8d3 	bl	800bf40 <memcpy>

  ptr = USBD_HID_CUSTOM.GetHSConfigDescriptor(&len);
 8009d9a:	4b68      	ldr	r3, [pc, #416]	@ (8009f3c <USBD_COMPOSITE_Mount_Class+0x1ec>)
 8009d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d9e:	1d3a      	adds	r2, r7, #4
 8009da0:	4610      	mov	r0, r2
 8009da2:	4798      	blx	r3
 8009da4:	60f8      	str	r0, [r7, #12]
  USBD_Update_HID_Custom_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 8009da6:	4b66      	ldr	r3, [pc, #408]	@ (8009f40 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8009da8:	781b      	ldrb	r3, [r3, #0]
 8009daa:	7ab8      	ldrb	r0, [r7, #10]
 8009dac:	7afa      	ldrb	r2, [r7, #11]
 8009dae:	7a79      	ldrb	r1, [r7, #9]
 8009db0:	9300      	str	r3, [sp, #0]
 8009db2:	4603      	mov	r3, r0
 8009db4:	68f8      	ldr	r0, [r7, #12]
 8009db6:	f000 fbb7 	bl	800a528 <USBD_Update_HID_Custom_DESC>
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_HID_CUSTOM_DESC, ptr + 0x09, len - 0x09);
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	3309      	adds	r3, #9
 8009dbe:	88ba      	ldrh	r2, [r7, #4]
 8009dc0:	3a09      	subs	r2, #9
 8009dc2:	4619      	mov	r1, r3
 8009dc4:	4860      	ldr	r0, [pc, #384]	@ (8009f48 <USBD_COMPOSITE_Mount_Class+0x1f8>)
 8009dc6:	f002 f8bb 	bl	800bf40 <memcpy>

  in_ep_track += 1;
 8009dca:	7afb      	ldrb	r3, [r7, #11]
 8009dcc:	3301      	adds	r3, #1
 8009dce:	72fb      	strb	r3, [r7, #11]
  out_ep_track += 1;
 8009dd0:	7abb      	ldrb	r3, [r7, #10]
 8009dd2:	3301      	adds	r3, #1
 8009dd4:	72bb      	strb	r3, [r7, #10]
  interface_no_track += 1;
 8009dd6:	7a7b      	ldrb	r3, [r7, #9]
 8009dd8:	3301      	adds	r3, #1
 8009dda:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += 1;
 8009ddc:	4b58      	ldr	r3, [pc, #352]	@ (8009f40 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8009dde:	781b      	ldrb	r3, [r3, #0]
 8009de0:	3301      	adds	r3, #1
 8009de2:	b2da      	uxtb	r2, r3
 8009de4:	4b56      	ldr	r3, [pc, #344]	@ (8009f40 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8009de6:	701a      	strb	r2, [r3, #0]
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_CDC_ACM == 1)
  ptr = USBD_CDC_ACM.GetFSConfigDescriptor(&len);
 8009de8:	4b58      	ldr	r3, [pc, #352]	@ (8009f4c <USBD_COMPOSITE_Mount_Class+0x1fc>)
 8009dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dec:	1d3a      	adds	r2, r7, #4
 8009dee:	4610      	mov	r0, r2
 8009df0:	4798      	blx	r3
 8009df2:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 8009df4:	7a7b      	ldrb	r3, [r7, #9]
 8009df6:	3301      	adds	r3, #1
 8009df8:	b2d8      	uxtb	r0, r3
 8009dfa:	7afb      	ldrb	r3, [r7, #11]
 8009dfc:	3301      	adds	r3, #1
 8009dfe:	b2db      	uxtb	r3, r3
 8009e00:	4a4f      	ldr	r2, [pc, #316]	@ (8009f40 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8009e02:	7812      	ldrb	r2, [r2, #0]
 8009e04:	7afc      	ldrb	r4, [r7, #11]
 8009e06:	7a79      	ldrb	r1, [r7, #9]
 8009e08:	9202      	str	r2, [sp, #8]
 8009e0a:	7aba      	ldrb	r2, [r7, #10]
 8009e0c:	9201      	str	r2, [sp, #4]
 8009e0e:	9300      	str	r3, [sp, #0]
 8009e10:	4623      	mov	r3, r4
 8009e12:	4602      	mov	r2, r0
 8009e14:	68f8      	ldr	r0, [r7, #12]
 8009e16:	f7ff fd43 	bl	80098a0 <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	3309      	adds	r3, #9
 8009e1e:	88ba      	ldrh	r2, [r7, #4]
 8009e20:	3a09      	subs	r2, #9
 8009e22:	4619      	mov	r1, r3
 8009e24:	484a      	ldr	r0, [pc, #296]	@ (8009f50 <USBD_COMPOSITE_Mount_Class+0x200>)
 8009e26:	f002 f88b 	bl	800bf40 <memcpy>

  ptr = USBD_CDC_ACM.GetHSConfigDescriptor(&len);
 8009e2a:	4b48      	ldr	r3, [pc, #288]	@ (8009f4c <USBD_COMPOSITE_Mount_Class+0x1fc>)
 8009e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e2e:	1d3a      	adds	r2, r7, #4
 8009e30:	4610      	mov	r0, r2
 8009e32:	4798      	blx	r3
 8009e34:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 8009e36:	7a7b      	ldrb	r3, [r7, #9]
 8009e38:	3301      	adds	r3, #1
 8009e3a:	b2d8      	uxtb	r0, r3
 8009e3c:	7afb      	ldrb	r3, [r7, #11]
 8009e3e:	3301      	adds	r3, #1
 8009e40:	b2db      	uxtb	r3, r3
 8009e42:	4a3f      	ldr	r2, [pc, #252]	@ (8009f40 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8009e44:	7812      	ldrb	r2, [r2, #0]
 8009e46:	7afc      	ldrb	r4, [r7, #11]
 8009e48:	7a79      	ldrb	r1, [r7, #9]
 8009e4a:	9202      	str	r2, [sp, #8]
 8009e4c:	7aba      	ldrb	r2, [r7, #10]
 8009e4e:	9201      	str	r2, [sp, #4]
 8009e50:	9300      	str	r3, [sp, #0]
 8009e52:	4623      	mov	r3, r4
 8009e54:	4602      	mov	r2, r0
 8009e56:	68f8      	ldr	r0, [r7, #12]
 8009e58:	f7ff fd22 	bl	80098a0 <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	3309      	adds	r3, #9
 8009e60:	88ba      	ldrh	r2, [r7, #4]
 8009e62:	3a09      	subs	r2, #9
 8009e64:	4619      	mov	r1, r3
 8009e66:	483b      	ldr	r0, [pc, #236]	@ (8009f54 <USBD_COMPOSITE_Mount_Class+0x204>)
 8009e68:	f002 f86a 	bl	800bf40 <memcpy>

  in_ep_track += 2 * USBD_CDC_ACM_COUNT;
 8009e6c:	7afb      	ldrb	r3, [r7, #11]
 8009e6e:	3302      	adds	r3, #2
 8009e70:	72fb      	strb	r3, [r7, #11]
  out_ep_track += 1 * USBD_CDC_ACM_COUNT;
 8009e72:	7abb      	ldrb	r3, [r7, #10]
 8009e74:	3301      	adds	r3, #1
 8009e76:	72bb      	strb	r3, [r7, #10]
  interface_no_track += 2 * USBD_CDC_ACM_COUNT;
 8009e78:	7a7b      	ldrb	r3, [r7, #9]
 8009e7a:	3302      	adds	r3, #2
 8009e7c:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += USBD_CDC_ACM_COUNT;
 8009e7e:	4b30      	ldr	r3, [pc, #192]	@ (8009f40 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8009e80:	781b      	ldrb	r3, [r3, #0]
 8009e82:	3301      	adds	r3, #1
 8009e84:	b2da      	uxtb	r2, r3
 8009e86:	4b2e      	ldr	r3, [pc, #184]	@ (8009f40 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8009e88:	701a      	strb	r2, [r3, #0]
#endif

  uint16_t CFG_SIZE = sizeof(USBD_COMPOSITE_CFG_DESC_t);
 8009e8a:	236b      	movs	r3, #107	@ 0x6b
 8009e8c:	80fb      	strh	r3, [r7, #6]
  ptr = USBD_COMPOSITE_HSCfgDesc.CONFIG_DESC;
 8009e8e:	4b32      	ldr	r3, [pc, #200]	@ (8009f58 <USBD_COMPOSITE_Mount_Class+0x208>)
 8009e90:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	2209      	movs	r2, #9
 8009e96:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	3301      	adds	r3, #1
 8009e9c:	2202      	movs	r2, #2
 8009e9e:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	3302      	adds	r3, #2
 8009ea4:	88fa      	ldrh	r2, [r7, #6]
 8009ea6:	b2d2      	uxtb	r2, r2
 8009ea8:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 8009eaa:	88fb      	ldrh	r3, [r7, #6]
 8009eac:	0a1b      	lsrs	r3, r3, #8
 8009eae:	b29a      	uxth	r2, r3
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	3303      	adds	r3, #3
 8009eb4:	b2d2      	uxtb	r2, r2
 8009eb6:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	3304      	adds	r3, #4
 8009ebc:	7a7a      	ldrb	r2, [r7, #9]
 8009ebe:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	3305      	adds	r3, #5
 8009ec4:	2201      	movs	r2, #1
 8009ec6:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	3306      	adds	r3, #6
 8009ecc:	2200      	movs	r2, #0
 8009ece:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	3307      	adds	r3, #7
 8009ed4:	22c0      	movs	r2, #192	@ 0xc0
 8009ed6:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	3308      	adds	r3, #8
 8009edc:	2232      	movs	r2, #50	@ 0x32
 8009ede:	701a      	strb	r2, [r3, #0]

  ptr = USBD_COMPOSITE_FSCfgDesc.CONFIG_DESC;
 8009ee0:	4b1e      	ldr	r3, [pc, #120]	@ (8009f5c <USBD_COMPOSITE_Mount_Class+0x20c>)
 8009ee2:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	2209      	movs	r2, #9
 8009ee8:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	3301      	adds	r3, #1
 8009eee:	2202      	movs	r2, #2
 8009ef0:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	3302      	adds	r3, #2
 8009ef6:	88fa      	ldrh	r2, [r7, #6]
 8009ef8:	b2d2      	uxtb	r2, r2
 8009efa:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 8009efc:	88fb      	ldrh	r3, [r7, #6]
 8009efe:	0a1b      	lsrs	r3, r3, #8
 8009f00:	b29a      	uxth	r2, r3
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	3303      	adds	r3, #3
 8009f06:	b2d2      	uxtb	r2, r2
 8009f08:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	3304      	adds	r3, #4
 8009f0e:	7a7a      	ldrb	r2, [r7, #9]
 8009f10:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	3305      	adds	r3, #5
 8009f16:	2201      	movs	r2, #1
 8009f18:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	3306      	adds	r3, #6
 8009f1e:	2200      	movs	r2, #0
 8009f20:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	3307      	adds	r3, #7
 8009f26:	22c0      	movs	r2, #192	@ 0xc0
 8009f28:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	3308      	adds	r3, #8
 8009f2e:	2232      	movs	r2, #50	@ 0x32
 8009f30:	701a      	strb	r2, [r3, #0]

  (void)out_ep_track;
  (void)in_ep_track;
}
 8009f32:	bf00      	nop
 8009f34:	3714      	adds	r7, #20
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd90      	pop	{r4, r7, pc}
 8009f3a:	bf00      	nop
 8009f3c:	200001dc 	.word	0x200001dc
 8009f40:	200001cc 	.word	0x200001cc
 8009f44:	20002545 	.word	0x20002545
 8009f48:	200025b1 	.word	0x200025b1
 8009f4c:	200000bc 	.word	0x200000bc
 8009f50:	20002565 	.word	0x20002565
 8009f54:	200025d1 	.word	0x200025d1
 8009f58:	200025a8 	.word	0x200025a8
 8009f5c:	2000253c 	.word	0x2000253c

08009f60 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b084      	sub	sp, #16
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
 8009f68:	460b      	mov	r3, r1
 8009f6a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = &CUSTOM_HID_Instance;
 8009f6c:	4b43      	ldr	r3, [pc, #268]	@ (800a07c <USBD_CUSTOM_HID_Init+0x11c>)
 8009f6e:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d105      	bne.n	8009f82 <USBD_CUSTOM_HID_Init+0x22>
  {
    pdev->pClassData_HID_Custom = NULL;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
    return (uint8_t)USBD_EMEM;
 8009f7e:	2302      	movs	r3, #2
 8009f80:	e078      	b.n	800a074 <USBD_CUSTOM_HID_Init+0x114>
  }

  pdev->pClassData_HID_Custom = (void *)hhid;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	68fa      	ldr	r2, [r7, #12]
 8009f86:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	7c1b      	ldrb	r3, [r3, #16]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d11b      	bne.n	8009fca <USBD_CUSTOM_HID_Init+0x6a>
  {
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8009f92:	4b3b      	ldr	r3, [pc, #236]	@ (800a080 <USBD_CUSTOM_HID_Init+0x120>)
 8009f94:	781b      	ldrb	r3, [r3, #0]
 8009f96:	f003 020f 	and.w	r2, r3, #15
 8009f9a:	6879      	ldr	r1, [r7, #4]
 8009f9c:	4613      	mov	r3, r2
 8009f9e:	009b      	lsls	r3, r3, #2
 8009fa0:	4413      	add	r3, r2
 8009fa2:	009b      	lsls	r3, r3, #2
 8009fa4:	440b      	add	r3, r1
 8009fa6:	3326      	adds	r3, #38	@ 0x26
 8009fa8:	2205      	movs	r2, #5
 8009faa:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8009fac:	4b35      	ldr	r3, [pc, #212]	@ (800a084 <USBD_CUSTOM_HID_Init+0x124>)
 8009fae:	781b      	ldrb	r3, [r3, #0]
 8009fb0:	f003 020f 	and.w	r2, r3, #15
 8009fb4:	6879      	ldr	r1, [r7, #4]
 8009fb6:	4613      	mov	r3, r2
 8009fb8:	009b      	lsls	r3, r3, #2
 8009fba:	4413      	add	r3, r2
 8009fbc:	009b      	lsls	r3, r3, #2
 8009fbe:	440b      	add	r3, r1
 8009fc0:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8009fc4:	2205      	movs	r2, #5
 8009fc6:	801a      	strh	r2, [r3, #0]
 8009fc8:	e01a      	b.n	800a000 <USBD_CUSTOM_HID_Init+0xa0>
  }
  else /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8009fca:	4b2d      	ldr	r3, [pc, #180]	@ (800a080 <USBD_CUSTOM_HID_Init+0x120>)
 8009fcc:	781b      	ldrb	r3, [r3, #0]
 8009fce:	f003 020f 	and.w	r2, r3, #15
 8009fd2:	6879      	ldr	r1, [r7, #4]
 8009fd4:	4613      	mov	r3, r2
 8009fd6:	009b      	lsls	r3, r3, #2
 8009fd8:	4413      	add	r3, r2
 8009fda:	009b      	lsls	r3, r3, #2
 8009fdc:	440b      	add	r3, r1
 8009fde:	3326      	adds	r3, #38	@ 0x26
 8009fe0:	2201      	movs	r2, #1
 8009fe2:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8009fe4:	4b27      	ldr	r3, [pc, #156]	@ (800a084 <USBD_CUSTOM_HID_Init+0x124>)
 8009fe6:	781b      	ldrb	r3, [r3, #0]
 8009fe8:	f003 020f 	and.w	r2, r3, #15
 8009fec:	6879      	ldr	r1, [r7, #4]
 8009fee:	4613      	mov	r3, r2
 8009ff0:	009b      	lsls	r3, r3, #2
 8009ff2:	4413      	add	r3, r2
 8009ff4:	009b      	lsls	r3, r3, #2
 8009ff6:	440b      	add	r3, r1
 8009ff8:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8009ffc:	2201      	movs	r2, #1
 8009ffe:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_IN_EP, USBD_EP_TYPE_INTR,
 800a000:	4b1f      	ldr	r3, [pc, #124]	@ (800a080 <USBD_CUSTOM_HID_Init+0x120>)
 800a002:	7819      	ldrb	r1, [r3, #0]
 800a004:	2340      	movs	r3, #64	@ 0x40
 800a006:	2203      	movs	r2, #3
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f001 fde0 	bl	800bbce <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].is_used = 1U;
 800a00e:	4b1c      	ldr	r3, [pc, #112]	@ (800a080 <USBD_CUSTOM_HID_Init+0x120>)
 800a010:	781b      	ldrb	r3, [r3, #0]
 800a012:	f003 020f 	and.w	r2, r3, #15
 800a016:	6879      	ldr	r1, [r7, #4]
 800a018:	4613      	mov	r3, r2
 800a01a:	009b      	lsls	r3, r3, #2
 800a01c:	4413      	add	r3, r2
 800a01e:	009b      	lsls	r3, r3, #2
 800a020:	440b      	add	r3, r1
 800a022:	3324      	adds	r3, #36	@ 0x24
 800a024:	2201      	movs	r2, #1
 800a026:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_OUT_EP, USBD_EP_TYPE_INTR,
 800a028:	4b16      	ldr	r3, [pc, #88]	@ (800a084 <USBD_CUSTOM_HID_Init+0x124>)
 800a02a:	7819      	ldrb	r1, [r3, #0]
 800a02c:	2340      	movs	r3, #64	@ 0x40
 800a02e:	2203      	movs	r2, #3
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f001 fdcc 	bl	800bbce <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].is_used = 1U;
 800a036:	4b13      	ldr	r3, [pc, #76]	@ (800a084 <USBD_CUSTOM_HID_Init+0x124>)
 800a038:	781b      	ldrb	r3, [r3, #0]
 800a03a:	f003 020f 	and.w	r2, r3, #15
 800a03e:	6879      	ldr	r1, [r7, #4]
 800a040:	4613      	mov	r3, r2
 800a042:	009b      	lsls	r3, r3, #2
 800a044:	4413      	add	r3, r2
 800a046:	009b      	lsls	r3, r3, #2
 800a048:	440b      	add	r3, r1
 800a04a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a04e:	2201      	movs	r2, #1
 800a050:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	2200      	movs	r2, #0
 800a056:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->Init();
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800a060:	685b      	ldr	r3, [r3, #4]
 800a062:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_OUT_EP, hhid->Report_buf,
 800a064:	4b07      	ldr	r3, [pc, #28]	@ (800a084 <USBD_CUSTOM_HID_Init+0x124>)
 800a066:	7819      	ldrb	r1, [r3, #0]
 800a068:	68fa      	ldr	r2, [r7, #12]
 800a06a:	2340      	movs	r3, #64	@ 0x40
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f001 fe9d 	bl	800bdac <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 800a072:	2300      	movs	r3, #0
}
 800a074:	4618      	mov	r0, r3
 800a076:	3710      	adds	r7, #16
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}
 800a07c:	20002658 	.word	0x20002658
 800a080:	200001da 	.word	0x200001da
 800a084:	200001db 	.word	0x200001db

0800a088 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b082      	sub	sp, #8
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
 800a090:	460b      	mov	r3, r1
 800a092:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_IN_EP);
 800a094:	4b2a      	ldr	r3, [pc, #168]	@ (800a140 <USBD_CUSTOM_HID_DeInit+0xb8>)
 800a096:	781b      	ldrb	r3, [r3, #0]
 800a098:	4619      	mov	r1, r3
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f001 fdbd 	bl	800bc1a <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].is_used = 0U;
 800a0a0:	4b27      	ldr	r3, [pc, #156]	@ (800a140 <USBD_CUSTOM_HID_DeInit+0xb8>)
 800a0a2:	781b      	ldrb	r3, [r3, #0]
 800a0a4:	f003 020f 	and.w	r2, r3, #15
 800a0a8:	6879      	ldr	r1, [r7, #4]
 800a0aa:	4613      	mov	r3, r2
 800a0ac:	009b      	lsls	r3, r3, #2
 800a0ae:	4413      	add	r3, r2
 800a0b0:	009b      	lsls	r3, r3, #2
 800a0b2:	440b      	add	r3, r1
 800a0b4:	3324      	adds	r3, #36	@ 0x24
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = 0U;
 800a0ba:	4b21      	ldr	r3, [pc, #132]	@ (800a140 <USBD_CUSTOM_HID_DeInit+0xb8>)
 800a0bc:	781b      	ldrb	r3, [r3, #0]
 800a0be:	f003 020f 	and.w	r2, r3, #15
 800a0c2:	6879      	ldr	r1, [r7, #4]
 800a0c4:	4613      	mov	r3, r2
 800a0c6:	009b      	lsls	r3, r3, #2
 800a0c8:	4413      	add	r3, r2
 800a0ca:	009b      	lsls	r3, r3, #2
 800a0cc:	440b      	add	r3, r1
 800a0ce:	3326      	adds	r3, #38	@ 0x26
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_OUT_EP);
 800a0d4:	4b1b      	ldr	r3, [pc, #108]	@ (800a144 <USBD_CUSTOM_HID_DeInit+0xbc>)
 800a0d6:	781b      	ldrb	r3, [r3, #0]
 800a0d8:	4619      	mov	r1, r3
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f001 fd9d 	bl	800bc1a <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].is_used = 0U;
 800a0e0:	4b18      	ldr	r3, [pc, #96]	@ (800a144 <USBD_CUSTOM_HID_DeInit+0xbc>)
 800a0e2:	781b      	ldrb	r3, [r3, #0]
 800a0e4:	f003 020f 	and.w	r2, r3, #15
 800a0e8:	6879      	ldr	r1, [r7, #4]
 800a0ea:	4613      	mov	r3, r2
 800a0ec:	009b      	lsls	r3, r3, #2
 800a0ee:	4413      	add	r3, r2
 800a0f0:	009b      	lsls	r3, r3, #2
 800a0f2:	440b      	add	r3, r1
 800a0f4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = 0U;
 800a0fc:	4b11      	ldr	r3, [pc, #68]	@ (800a144 <USBD_CUSTOM_HID_DeInit+0xbc>)
 800a0fe:	781b      	ldrb	r3, [r3, #0]
 800a100:	f003 020f 	and.w	r2, r3, #15
 800a104:	6879      	ldr	r1, [r7, #4]
 800a106:	4613      	mov	r3, r2
 800a108:	009b      	lsls	r3, r3, #2
 800a10a:	4413      	add	r3, r2
 800a10c:	009b      	lsls	r3, r3, #2
 800a10e:	440b      	add	r3, r1
 800a110:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800a114:	2200      	movs	r2, #0
 800a116:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassData_HID_Custom != NULL)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d008      	beq.n	800a134 <USBD_CUSTOM_HID_DeInit+0xac>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->DeInit();
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800a128:	689b      	ldr	r3, [r3, #8]
 800a12a:	4798      	blx	r3
#if (0)
    USBD_free(pdev->pClassData_HID_Custom);
#endif
    pdev->pClassData_HID_Custom = NULL;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2200      	movs	r2, #0
 800a130:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
  }

  return (uint8_t)USBD_OK;
 800a134:	2300      	movs	r3, #0
}
 800a136:	4618      	mov	r0, r3
 800a138:	3708      	adds	r7, #8
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}
 800a13e:	bf00      	nop
 800a140:	200001da 	.word	0x200001da
 800a144:	200001db 	.word	0x200001db

0800a148 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b088      	sub	sp, #32
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
 800a150:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a158:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800a15a:	2300      	movs	r3, #0
 800a15c:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 800a15e:	2300      	movs	r3, #0
 800a160:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800a162:	2300      	movs	r3, #0
 800a164:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800a166:	2300      	movs	r3, #0
 800a168:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 800a16a:	693b      	ldr	r3, [r7, #16]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d101      	bne.n	800a174 <USBD_CUSTOM_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800a170:	2303      	movs	r3, #3
 800a172:	e0ed      	b.n	800a350 <USBD_CUSTOM_HID_Setup+0x208>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	781b      	ldrb	r3, [r3, #0]
 800a178:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d052      	beq.n	800a226 <USBD_CUSTOM_HID_Setup+0xde>
 800a180:	2b20      	cmp	r3, #32
 800a182:	f040 80dd 	bne.w	800a340 <USBD_CUSTOM_HID_Setup+0x1f8>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	785b      	ldrb	r3, [r3, #1]
 800a18a:	3b02      	subs	r3, #2
 800a18c:	2b09      	cmp	r3, #9
 800a18e:	d842      	bhi.n	800a216 <USBD_CUSTOM_HID_Setup+0xce>
 800a190:	a201      	add	r2, pc, #4	@ (adr r2, 800a198 <USBD_CUSTOM_HID_Setup+0x50>)
 800a192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a196:	bf00      	nop
 800a198:	0800a1f1 	.word	0x0800a1f1
 800a19c:	0800a1cf 	.word	0x0800a1cf
 800a1a0:	0800a217 	.word	0x0800a217
 800a1a4:	0800a217 	.word	0x0800a217
 800a1a8:	0800a217 	.word	0x0800a217
 800a1ac:	0800a217 	.word	0x0800a217
 800a1b0:	0800a217 	.word	0x0800a217
 800a1b4:	0800a201 	.word	0x0800a201
 800a1b8:	0800a1df 	.word	0x0800a1df
 800a1bc:	0800a1c1 	.word	0x0800a1c1
    {
    case CUSTOM_HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	885b      	ldrh	r3, [r3, #2]
 800a1c4:	b2db      	uxtb	r3, r3
 800a1c6:	461a      	mov	r2, r3
 800a1c8:	693b      	ldr	r3, [r7, #16]
 800a1ca:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800a1cc:	e02a      	b.n	800a224 <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800a1ce:	693b      	ldr	r3, [r7, #16]
 800a1d0:	3340      	adds	r3, #64	@ 0x40
 800a1d2:	2201      	movs	r2, #1
 800a1d4:	4619      	mov	r1, r3
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f001 fae7 	bl	800b7aa <USBD_CtlSendData>
      break;
 800a1dc:	e022      	b.n	800a224 <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	885b      	ldrh	r3, [r3, #2]
 800a1e2:	0a1b      	lsrs	r3, r3, #8
 800a1e4:	b29b      	uxth	r3, r3
 800a1e6:	b2db      	uxtb	r3, r3
 800a1e8:	461a      	mov	r2, r3
 800a1ea:	693b      	ldr	r3, [r7, #16]
 800a1ec:	645a      	str	r2, [r3, #68]	@ 0x44
      break;
 800a1ee:	e019      	b.n	800a224 <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800a1f0:	693b      	ldr	r3, [r7, #16]
 800a1f2:	3344      	adds	r3, #68	@ 0x44
 800a1f4:	2201      	movs	r2, #1
 800a1f6:	4619      	mov	r1, r3
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f001 fad6 	bl	800b7aa <USBD_CtlSendData>
      break;
 800a1fe:	e011      	b.n	800a224 <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_SET_REPORT:
      hhid->IsReportAvailable = 1U;
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	2201      	movs	r2, #1
 800a204:	64da      	str	r2, [r3, #76]	@ 0x4c
      (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 800a206:	6939      	ldr	r1, [r7, #16]
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	88db      	ldrh	r3, [r3, #6]
 800a20c:	461a      	mov	r2, r3
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f001 faf7 	bl	800b802 <USBD_CtlPrepareRx>
      break;
 800a214:	e006      	b.n	800a224 <USBD_CUSTOM_HID_Setup+0xdc>

    default:
      USBD_CtlError(pdev, req);
 800a216:	6839      	ldr	r1, [r7, #0]
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f001 fa55 	bl	800b6c8 <USBD_CtlError>
      ret = USBD_FAIL;
 800a21e:	2303      	movs	r3, #3
 800a220:	75fb      	strb	r3, [r7, #23]
      break;
 800a222:	bf00      	nop
    }
    break;
 800a224:	e093      	b.n	800a34e <USBD_CUSTOM_HID_Setup+0x206>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	785b      	ldrb	r3, [r3, #1]
 800a22a:	2b0b      	cmp	r3, #11
 800a22c:	d87f      	bhi.n	800a32e <USBD_CUSTOM_HID_Setup+0x1e6>
 800a22e:	a201      	add	r2, pc, #4	@ (adr r2, 800a234 <USBD_CUSTOM_HID_Setup+0xec>)
 800a230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a234:	0800a265 	.word	0x0800a265
 800a238:	0800a33d 	.word	0x0800a33d
 800a23c:	0800a32f 	.word	0x0800a32f
 800a240:	0800a32f 	.word	0x0800a32f
 800a244:	0800a32f 	.word	0x0800a32f
 800a248:	0800a32f 	.word	0x0800a32f
 800a24c:	0800a28f 	.word	0x0800a28f
 800a250:	0800a32f 	.word	0x0800a32f
 800a254:	0800a32f 	.word	0x0800a32f
 800a258:	0800a32f 	.word	0x0800a32f
 800a25c:	0800a2dd 	.word	0x0800a2dd
 800a260:	0800a307 	.word	0x0800a307
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a26a:	b2db      	uxtb	r3, r3
 800a26c:	2b03      	cmp	r3, #3
 800a26e:	d107      	bne.n	800a280 <USBD_CUSTOM_HID_Setup+0x138>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a270:	f107 030e 	add.w	r3, r7, #14
 800a274:	2202      	movs	r2, #2
 800a276:	4619      	mov	r1, r3
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f001 fa96 	bl	800b7aa <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a27e:	e05e      	b.n	800a33e <USBD_CUSTOM_HID_Setup+0x1f6>
        USBD_CtlError(pdev, req);
 800a280:	6839      	ldr	r1, [r7, #0]
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f001 fa20 	bl	800b6c8 <USBD_CtlError>
        ret = USBD_FAIL;
 800a288:	2303      	movs	r3, #3
 800a28a:	75fb      	strb	r3, [r7, #23]
      break;
 800a28c:	e057      	b.n	800a33e <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	885b      	ldrh	r3, [r3, #2]
 800a292:	0a1b      	lsrs	r3, r3, #8
 800a294:	b29b      	uxth	r3, r3
 800a296:	2b22      	cmp	r3, #34	@ 0x22
 800a298:	d10b      	bne.n	800a2b2 <USBD_CUSTOM_HID_Setup+0x16a>
      {
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	88db      	ldrh	r3, [r3, #6]
 800a29e:	2b21      	cmp	r3, #33	@ 0x21
 800a2a0:	bf28      	it	cs
 800a2a2:	2321      	movcs	r3, #33	@ 0x21
 800a2a4:	83fb      	strh	r3, [r7, #30]
        pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->pReport;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	61bb      	str	r3, [r7, #24]
 800a2b0:	e00d      	b.n	800a2ce <USBD_CUSTOM_HID_Setup+0x186>
      }
      else
      {
        if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	885b      	ldrh	r3, [r3, #2]
 800a2b6:	0a1b      	lsrs	r3, r3, #8
 800a2b8:	b29b      	uxth	r3, r3
 800a2ba:	2b21      	cmp	r3, #33	@ 0x21
 800a2bc:	d107      	bne.n	800a2ce <USBD_CUSTOM_HID_Setup+0x186>
        {
          pbuf = USBD_CUSTOM_HID_Desc;
 800a2be:	4b26      	ldr	r3, [pc, #152]	@ (800a358 <USBD_CUSTOM_HID_Setup+0x210>)
 800a2c0:	61bb      	str	r3, [r7, #24]
          len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	88db      	ldrh	r3, [r3, #6]
 800a2c6:	2b09      	cmp	r3, #9
 800a2c8:	bf28      	it	cs
 800a2ca:	2309      	movcs	r3, #9
 800a2cc:	83fb      	strh	r3, [r7, #30]
        }
      }

      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a2ce:	8bfb      	ldrh	r3, [r7, #30]
 800a2d0:	461a      	mov	r2, r3
 800a2d2:	69b9      	ldr	r1, [r7, #24]
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f001 fa68 	bl	800b7aa <USBD_CtlSendData>
      break;
 800a2da:	e030      	b.n	800a33e <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2e2:	b2db      	uxtb	r3, r3
 800a2e4:	2b03      	cmp	r3, #3
 800a2e6:	d107      	bne.n	800a2f8 <USBD_CUSTOM_HID_Setup+0x1b0>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800a2e8:	693b      	ldr	r3, [r7, #16]
 800a2ea:	3348      	adds	r3, #72	@ 0x48
 800a2ec:	2201      	movs	r2, #1
 800a2ee:	4619      	mov	r1, r3
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f001 fa5a 	bl	800b7aa <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a2f6:	e022      	b.n	800a33e <USBD_CUSTOM_HID_Setup+0x1f6>
        USBD_CtlError(pdev, req);
 800a2f8:	6839      	ldr	r1, [r7, #0]
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	f001 f9e4 	bl	800b6c8 <USBD_CtlError>
        ret = USBD_FAIL;
 800a300:	2303      	movs	r3, #3
 800a302:	75fb      	strb	r3, [r7, #23]
      break;
 800a304:	e01b      	b.n	800a33e <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a30c:	b2db      	uxtb	r3, r3
 800a30e:	2b03      	cmp	r3, #3
 800a310:	d106      	bne.n	800a320 <USBD_CUSTOM_HID_Setup+0x1d8>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	885b      	ldrh	r3, [r3, #2]
 800a316:	b2db      	uxtb	r3, r3
 800a318:	461a      	mov	r2, r3
 800a31a:	693b      	ldr	r3, [r7, #16]
 800a31c:	649a      	str	r2, [r3, #72]	@ 0x48
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a31e:	e00e      	b.n	800a33e <USBD_CUSTOM_HID_Setup+0x1f6>
        USBD_CtlError(pdev, req);
 800a320:	6839      	ldr	r1, [r7, #0]
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f001 f9d0 	bl	800b6c8 <USBD_CtlError>
        ret = USBD_FAIL;
 800a328:	2303      	movs	r3, #3
 800a32a:	75fb      	strb	r3, [r7, #23]
      break;
 800a32c:	e007      	b.n	800a33e <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800a32e:	6839      	ldr	r1, [r7, #0]
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f001 f9c9 	bl	800b6c8 <USBD_CtlError>
      ret = USBD_FAIL;
 800a336:	2303      	movs	r3, #3
 800a338:	75fb      	strb	r3, [r7, #23]
      break;
 800a33a:	e000      	b.n	800a33e <USBD_CUSTOM_HID_Setup+0x1f6>
      break;
 800a33c:	bf00      	nop
    }
    break;
 800a33e:	e006      	b.n	800a34e <USBD_CUSTOM_HID_Setup+0x206>

  default:
    USBD_CtlError(pdev, req);
 800a340:	6839      	ldr	r1, [r7, #0]
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f001 f9c0 	bl	800b6c8 <USBD_CtlError>
    ret = USBD_FAIL;
 800a348:	2303      	movs	r3, #3
 800a34a:	75fb      	strb	r3, [r7, #23]
    break;
 800a34c:	bf00      	nop
  }
  return (uint8_t)ret;
 800a34e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a350:	4618      	mov	r0, r3
 800a352:	3720      	adds	r7, #32
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}
 800a358:	2000029c 	.word	0x2000029c

0800a35c <USBD_CUSTOM_HID_SendReport>:
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b086      	sub	sp, #24
 800a360:	af00      	add	r7, sp, #0
 800a362:	60f8      	str	r0, [r7, #12]
 800a364:	60b9      	str	r1, [r7, #8]
 800a366:	4613      	mov	r3, r2
 800a368:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData_HID_Custom == NULL)
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a370:	2b00      	cmp	r3, #0
 800a372:	d101      	bne.n	800a378 <USBD_CUSTOM_HID_SendReport+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800a374:	2303      	movs	r3, #3
 800a376:	e01d      	b.n	800a3b4 <USBD_CUSTOM_HID_SendReport+0x58>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a37e:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a386:	b2db      	uxtb	r3, r3
 800a388:	2b03      	cmp	r3, #3
 800a38a:	d112      	bne.n	800a3b2 <USBD_CUSTOM_HID_SendReport+0x56>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 800a38c:	697b      	ldr	r3, [r7, #20]
 800a38e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a392:	2b00      	cmp	r3, #0
 800a394:	d10b      	bne.n	800a3ae <USBD_CUSTOM_HID_SendReport+0x52>
    {
      hhid->state = CUSTOM_HID_BUSY;
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	2201      	movs	r2, #1
 800a39a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      (void)USBD_LL_Transmit(pdev, CUSTOM_HID_IN_EP, report, len);
 800a39e:	4b07      	ldr	r3, [pc, #28]	@ (800a3bc <USBD_CUSTOM_HID_SendReport+0x60>)
 800a3a0:	7819      	ldrb	r1, [r3, #0]
 800a3a2:	88fb      	ldrh	r3, [r7, #6]
 800a3a4:	68ba      	ldr	r2, [r7, #8]
 800a3a6:	68f8      	ldr	r0, [r7, #12]
 800a3a8:	f001 fcdf 	bl	800bd6a <USBD_LL_Transmit>
 800a3ac:	e001      	b.n	800a3b2 <USBD_CUSTOM_HID_SendReport+0x56>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	e000      	b.n	800a3b4 <USBD_CUSTOM_HID_SendReport+0x58>
    }
  }
  return (uint8_t)USBD_OK;
 800a3b2:	2300      	movs	r3, #0
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3718      	adds	r7, #24
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}
 800a3bc:	200001da 	.word	0x200001da

0800a3c0 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	b083      	sub	sp, #12
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2229      	movs	r2, #41	@ 0x29
 800a3cc:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgFSDesc;
 800a3ce:	4b03      	ldr	r3, [pc, #12]	@ (800a3dc <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	370c      	adds	r7, #12
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3da:	4770      	bx	lr
 800a3dc:	20000218 	.word	0x20000218

0800a3e0 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b083      	sub	sp, #12
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2229      	movs	r2, #41	@ 0x29
 800a3ec:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgHSDesc;
 800a3ee:	4b03      	ldr	r3, [pc, #12]	@ (800a3fc <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	370c      	adds	r7, #12
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fa:	4770      	bx	lr
 800a3fc:	20000244 	.word	0x20000244

0800a400 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a400:	b480      	push	{r7}
 800a402:	b083      	sub	sp, #12
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2229      	movs	r2, #41	@ 0x29
 800a40c:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 800a40e:	4b03      	ldr	r3, [pc, #12]	@ (800a41c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800a410:	4618      	mov	r0, r3
 800a412:	370c      	adds	r7, #12
 800a414:	46bd      	mov	sp, r7
 800a416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41a:	4770      	bx	lr
 800a41c:	20000270 	.word	0x20000270

0800a420 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */

static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a420:	b480      	push	{r7}
 800a422:	b083      	sub	sp, #12
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
 800a428:	460b      	mov	r3, r1
 800a42a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom)->state = CUSTOM_HID_IDLE;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a432:	2200      	movs	r2, #0
 800a434:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 // HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6); // hoặc nháy LED nếu có
  return (uint8_t)USBD_OK;
 800a438:	2300      	movs	r3, #0
}
 800a43a:	4618      	mov	r0, r3
 800a43c:	370c      	adds	r7, #12
 800a43e:	46bd      	mov	sp, r7
 800a440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a444:	4770      	bx	lr
	...

0800a448 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b084      	sub	sp, #16
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
 800a450:	460b      	mov	r3, r1
 800a452:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData_HID_Custom == NULL)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d101      	bne.n	800a462 <USBD_CUSTOM_HID_DataOut+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800a45e:	2303      	movs	r3, #3
 800a460:	e013      	b.n	800a48a <USBD_CUSTOM_HID_DataOut+0x42>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a468:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->OutEvent(hhid->Report_buf, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800a470:	68db      	ldr	r3, [r3, #12]
 800a472:	68fa      	ldr	r2, [r7, #12]
 800a474:	2140      	movs	r1, #64	@ 0x40
 800a476:	4610      	mov	r0, r2
 800a478:	4798      	blx	r3
 // HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
  USBD_LL_PrepareReceive(pdev,CUSTOM_HID_OUT_EP,hhid->Report_buf,
 800a47a:	4b06      	ldr	r3, [pc, #24]	@ (800a494 <USBD_CUSTOM_HID_DataOut+0x4c>)
 800a47c:	7819      	ldrb	r1, [r3, #0]
 800a47e:	68fa      	ldr	r2, [r7, #12]
 800a480:	2340      	movs	r3, #64	@ 0x40
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f001 fc92 	bl	800bdac <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  return (uint8_t)USBD_OK;
 800a488:	2300      	movs	r3, #0
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3710      	adds	r7, #16
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}
 800a492:	bf00      	nop
 800a494:	200001db 	.word	0x200001db

0800a498 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b084      	sub	sp, #16
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a4a6:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d101      	bne.n	800a4b2 <USBD_CUSTOM_HID_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800a4ae:	2303      	movs	r3, #3
 800a4b0:	e00f      	b.n	800a4d2 <USBD_CUSTOM_HID_EP0_RxReady+0x3a>
  }

  if (hhid->IsReportAvailable == 1U)
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a4b6:	2b01      	cmp	r3, #1
 800a4b8:	d10a      	bne.n	800a4d0 <USBD_CUSTOM_HID_EP0_RxReady+0x38>
  {
    //((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->OutEvent(hhid->Report_buf[0], hhid->Report_buf[1]);
	  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->OutEvent(hhid->Report_buf, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800a4c0:	68db      	ldr	r3, [r3, #12]
 800a4c2:	68fa      	ldr	r2, [r7, #12]
 800a4c4:	2140      	movs	r1, #64	@ 0x40
 800a4c6:	4610      	mov	r0, r2
 800a4c8:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return (uint8_t)USBD_OK;
 800a4d0:	2300      	movs	r3, #0
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3710      	adds	r7, #16
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}
	...

0800a4dc <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800a4dc:	b480      	push	{r7}
 800a4de:	b083      	sub	sp, #12
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	220a      	movs	r2, #10
 800a4e8:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800a4ea:	4b03      	ldr	r3, [pc, #12]	@ (800a4f8 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	370c      	adds	r7, #12
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f6:	4770      	bx	lr
 800a4f8:	200002a8 	.word	0x200002a8

0800a4fc <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	b083      	sub	sp, #12
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
 800a504:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d101      	bne.n	800a510 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a50c:	2303      	movs	r3, #3
 800a50e:	e004      	b.n	800a51a <USBD_CUSTOM_HID_RegisterInterface+0x1e>
  }

  pdev->pUserData_HID_Custom = fops;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	683a      	ldr	r2, [r7, #0]
 800a514:	f8c3 22dc 	str.w	r2, [r3, #732]	@ 0x2dc

  return (uint8_t)USBD_OK;
 800a518:	2300      	movs	r3, #0
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	370c      	adds	r7, #12
 800a51e:	46bd      	mov	sp, r7
 800a520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a524:	4770      	bx	lr
	...

0800a528 <USBD_Update_HID_Custom_DESC>:

void USBD_Update_HID_Custom_DESC(uint8_t *desc, uint8_t itf_no, uint8_t in_ep, uint8_t out_ep, uint8_t str_idx)
{
 800a528:	b480      	push	{r7}
 800a52a:	b083      	sub	sp, #12
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
 800a530:	4608      	mov	r0, r1
 800a532:	4611      	mov	r1, r2
 800a534:	461a      	mov	r2, r3
 800a536:	4603      	mov	r3, r0
 800a538:	70fb      	strb	r3, [r7, #3]
 800a53a:	460b      	mov	r3, r1
 800a53c:	70bb      	strb	r3, [r7, #2]
 800a53e:	4613      	mov	r3, r2
 800a540:	707b      	strb	r3, [r7, #1]
  desc[11] = itf_no;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	330b      	adds	r3, #11
 800a546:	78fa      	ldrb	r2, [r7, #3]
 800a548:	701a      	strb	r2, [r3, #0]
  desc[17] = str_idx;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	3311      	adds	r3, #17
 800a54e:	7c3a      	ldrb	r2, [r7, #16]
 800a550:	701a      	strb	r2, [r3, #0]
  desc[29] = in_ep;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	331d      	adds	r3, #29
 800a556:	78ba      	ldrb	r2, [r7, #2]
 800a558:	701a      	strb	r2, [r3, #0]
  desc[36] = out_ep;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	3324      	adds	r3, #36	@ 0x24
 800a55e:	787a      	ldrb	r2, [r7, #1]
 800a560:	701a      	strb	r2, [r3, #0]

  CUSTOM_HID_IN_EP = in_ep;
 800a562:	4a09      	ldr	r2, [pc, #36]	@ (800a588 <USBD_Update_HID_Custom_DESC+0x60>)
 800a564:	78bb      	ldrb	r3, [r7, #2]
 800a566:	7013      	strb	r3, [r2, #0]
  CUSTOM_HID_OUT_EP = out_ep;
 800a568:	4a08      	ldr	r2, [pc, #32]	@ (800a58c <USBD_Update_HID_Custom_DESC+0x64>)
 800a56a:	787b      	ldrb	r3, [r7, #1]
 800a56c:	7013      	strb	r3, [r2, #0]
  CUSTOM_HID_ITF_NBR = itf_no;
 800a56e:	4a08      	ldr	r2, [pc, #32]	@ (800a590 <USBD_Update_HID_Custom_DESC+0x68>)
 800a570:	78fb      	ldrb	r3, [r7, #3]
 800a572:	7013      	strb	r3, [r2, #0]
  CUSTOM_HID_STR_DESC_IDX = str_idx;
 800a574:	4a07      	ldr	r2, [pc, #28]	@ (800a594 <USBD_Update_HID_Custom_DESC+0x6c>)
 800a576:	7c3b      	ldrb	r3, [r7, #16]
 800a578:	7013      	strb	r3, [r2, #0]
}
 800a57a:	bf00      	nop
 800a57c:	370c      	adds	r7, #12
 800a57e:	46bd      	mov	sp, r7
 800a580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a584:	4770      	bx	lr
 800a586:	bf00      	nop
 800a588:	200001da 	.word	0x200001da
 800a58c:	200001db 	.word	0x200001db
 800a590:	20002654 	.word	0x20002654
 800a594:	20002655 	.word	0x20002655

0800a598 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b086      	sub	sp, #24
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	60f8      	str	r0, [r7, #12]
 800a5a0:	60b9      	str	r1, [r7, #8]
 800a5a2:	4613      	mov	r3, r2
 800a5a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d101      	bne.n	800a5b0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a5ac:	2303      	movs	r3, #3
 800a5ae:	e01b      	b.n	800a5e8 <USBD_Init+0x50>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pConfDesc = NULL;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d003      	beq.n	800a5ce <USBD_Init+0x36>
  {
    pdev->pDesc = pdesc;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	68ba      	ldr	r2, [r7, #8]
 800a5ca:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	2201      	movs	r2, #1
 800a5d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	79fa      	ldrb	r2, [r7, #7]
 800a5da:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a5dc:	68f8      	ldr	r0, [r7, #12]
 800a5de:	f001 fa7d 	bl	800badc <USBD_LL_Init>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a5e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	3718      	adds	r7, #24
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}

0800a5f0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b084      	sub	sp, #16
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
 800a5f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d101      	bne.n	800a608 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a604:	2303      	movs	r3, #3
 800a606:	e02d      	b.n	800a664 <USBD_RegisterClass+0x74>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	683a      	ldr	r2, [r7, #0]
 800a60c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  /* Get Device Configuration Descriptor */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	7c1b      	ldrb	r3, [r3, #16]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d112      	bne.n	800a63e <USBD_RegisterClass+0x4e>
  {
	  if (pdev->pClass->GetHSConfigDescriptor != NULL)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a61e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a620:	2b00      	cmp	r3, #0
 800a622:	d01e      	beq.n	800a662 <USBD_RegisterClass+0x72>
	  {
		  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a62a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a62c:	f107 020e 	add.w	r2, r7, #14
 800a630:	4610      	mov	r0, r2
 800a632:	4798      	blx	r3
 800a634:	4602      	mov	r2, r0
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318
 800a63c:	e011      	b.n	800a662 <USBD_RegisterClass+0x72>
	  }
  }
  else if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a646:	2b00      	cmp	r3, #0
 800a648:	d00b      	beq.n	800a662 <USBD_RegisterClass+0x72>
  {
	  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a652:	f107 020e 	add.w	r2, r7, #14
 800a656:	4610      	mov	r0, r2
 800a658:	4798      	blx	r3
 800a65a:	4602      	mov	r2, r0
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318
  }

  return USBD_OK;
 800a662:	2300      	movs	r3, #0
}
 800a664:	4618      	mov	r0, r3
 800a666:	3710      	adds	r7, #16
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}

0800a66c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b082      	sub	sp, #8
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f001 fa8f 	bl	800bb98 <USBD_LL_Start>
 800a67a:	4603      	mov	r3, r0
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	3708      	adds	r7, #8
 800a680:	46bd      	mov	sp, r7
 800a682:	bd80      	pop	{r7, pc}

0800a684 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a684:	b480      	push	{r7}
 800a686:	b083      	sub	sp, #12
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a68c:	2300      	movs	r3, #0
}
 800a68e:	4618      	mov	r0, r3
 800a690:	370c      	adds	r7, #12
 800a692:	46bd      	mov	sp, r7
 800a694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a698:	4770      	bx	lr

0800a69a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a69a:	b580      	push	{r7, lr}
 800a69c:	b084      	sub	sp, #16
 800a69e:	af00      	add	r7, sp, #0
 800a6a0:	6078      	str	r0, [r7, #4]
 800a6a2:	460b      	mov	r3, r1
 800a6a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a6a6:	2303      	movs	r3, #3
 800a6a8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d009      	beq.n	800a6c8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	78fa      	ldrb	r2, [r7, #3]
 800a6be:	4611      	mov	r1, r2
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	4798      	blx	r3
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a6c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3710      	adds	r7, #16
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}

0800a6d2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a6d2:	b580      	push	{r7, lr}
 800a6d4:	b082      	sub	sp, #8
 800a6d6:	af00      	add	r7, sp, #0
 800a6d8:	6078      	str	r0, [r7, #4]
 800a6da:	460b      	mov	r3, r1
 800a6dc:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d007      	beq.n	800a6f8 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6ee:	685b      	ldr	r3, [r3, #4]
 800a6f0:	78fa      	ldrb	r2, [r7, #3]
 800a6f2:	4611      	mov	r1, r2
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	4798      	blx	r3
  }

  return USBD_OK;
 800a6f8:	2300      	movs	r3, #0
}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	3708      	adds	r7, #8
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}

0800a702 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a702:	b580      	push	{r7, lr}
 800a704:	b084      	sub	sp, #16
 800a706:	af00      	add	r7, sp, #0
 800a708:	6078      	str	r0, [r7, #4]
 800a70a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a712:	6839      	ldr	r1, [r7, #0]
 800a714:	4618      	mov	r0, r3
 800a716:	f000 ff9d 	bl	800b654 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2201      	movs	r2, #1
 800a71e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a728:	461a      	mov	r2, r3
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a736:	f003 031f 	and.w	r3, r3, #31
 800a73a:	2b02      	cmp	r3, #2
 800a73c:	d01a      	beq.n	800a774 <USBD_LL_SetupStage+0x72>
 800a73e:	2b02      	cmp	r3, #2
 800a740:	d822      	bhi.n	800a788 <USBD_LL_SetupStage+0x86>
 800a742:	2b00      	cmp	r3, #0
 800a744:	d002      	beq.n	800a74c <USBD_LL_SetupStage+0x4a>
 800a746:	2b01      	cmp	r3, #1
 800a748:	d00a      	beq.n	800a760 <USBD_LL_SetupStage+0x5e>
 800a74a:	e01d      	b.n	800a788 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a752:	4619      	mov	r1, r3
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f000 fa5d 	bl	800ac14 <USBD_StdDevReq>
 800a75a:	4603      	mov	r3, r0
 800a75c:	73fb      	strb	r3, [r7, #15]
      break;
 800a75e:	e020      	b.n	800a7a2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a766:	4619      	mov	r1, r3
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	f000 fac1 	bl	800acf0 <USBD_StdItfReq>
 800a76e:	4603      	mov	r3, r0
 800a770:	73fb      	strb	r3, [r7, #15]
      break;
 800a772:	e016      	b.n	800a7a2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a77a:	4619      	mov	r1, r3
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f000 fb00 	bl	800ad82 <USBD_StdEPReq>
 800a782:	4603      	mov	r3, r0
 800a784:	73fb      	strb	r3, [r7, #15]
      break;
 800a786:	e00c      	b.n	800a7a2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a78e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a792:	b2db      	uxtb	r3, r3
 800a794:	4619      	mov	r1, r3
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f001 fa5e 	bl	800bc58 <USBD_LL_StallEP>
 800a79c:	4603      	mov	r3, r0
 800a79e:	73fb      	strb	r3, [r7, #15]
      break;
 800a7a0:	bf00      	nop
  }

  return ret;
 800a7a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3710      	adds	r7, #16
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}

0800a7ac <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b086      	sub	sp, #24
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	60f8      	str	r0, [r7, #12]
 800a7b4:	460b      	mov	r3, r1
 800a7b6:	607a      	str	r2, [r7, #4]
 800a7b8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a7ba:	7afb      	ldrb	r3, [r7, #11]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d138      	bne.n	800a832 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a7c6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a7ce:	2b03      	cmp	r3, #3
 800a7d0:	d14a      	bne.n	800a868 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	689a      	ldr	r2, [r3, #8]
 800a7d6:	693b      	ldr	r3, [r7, #16]
 800a7d8:	68db      	ldr	r3, [r3, #12]
 800a7da:	429a      	cmp	r2, r3
 800a7dc:	d913      	bls.n	800a806 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a7de:	693b      	ldr	r3, [r7, #16]
 800a7e0:	689a      	ldr	r2, [r3, #8]
 800a7e2:	693b      	ldr	r3, [r7, #16]
 800a7e4:	68db      	ldr	r3, [r3, #12]
 800a7e6:	1ad2      	subs	r2, r2, r3
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a7ec:	693b      	ldr	r3, [r7, #16]
 800a7ee:	68da      	ldr	r2, [r3, #12]
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	689b      	ldr	r3, [r3, #8]
 800a7f4:	4293      	cmp	r3, r2
 800a7f6:	bf28      	it	cs
 800a7f8:	4613      	movcs	r3, r2
 800a7fa:	461a      	mov	r2, r3
 800a7fc:	6879      	ldr	r1, [r7, #4]
 800a7fe:	68f8      	ldr	r0, [r7, #12]
 800a800:	f001 f81c 	bl	800b83c <USBD_CtlContinueRx>
 800a804:	e030      	b.n	800a868 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a80c:	b2db      	uxtb	r3, r3
 800a80e:	2b03      	cmp	r3, #3
 800a810:	d10b      	bne.n	800a82a <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a818:	691b      	ldr	r3, [r3, #16]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d005      	beq.n	800a82a <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a824:	691b      	ldr	r3, [r3, #16]
 800a826:	68f8      	ldr	r0, [r7, #12]
 800a828:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a82a:	68f8      	ldr	r0, [r7, #12]
 800a82c:	f001 f817 	bl	800b85e <USBD_CtlSendStatus>
 800a830:	e01a      	b.n	800a868 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a838:	b2db      	uxtb	r3, r3
 800a83a:	2b03      	cmp	r3, #3
 800a83c:	d114      	bne.n	800a868 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a844:	699b      	ldr	r3, [r3, #24]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d00e      	beq.n	800a868 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a850:	699b      	ldr	r3, [r3, #24]
 800a852:	7afa      	ldrb	r2, [r7, #11]
 800a854:	4611      	mov	r1, r2
 800a856:	68f8      	ldr	r0, [r7, #12]
 800a858:	4798      	blx	r3
 800a85a:	4603      	mov	r3, r0
 800a85c:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a85e:	7dfb      	ldrb	r3, [r7, #23]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d001      	beq.n	800a868 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800a864:	7dfb      	ldrb	r3, [r7, #23]
 800a866:	e000      	b.n	800a86a <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800a868:	2300      	movs	r3, #0
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3718      	adds	r7, #24
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}

0800a872 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a872:	b580      	push	{r7, lr}
 800a874:	b086      	sub	sp, #24
 800a876:	af00      	add	r7, sp, #0
 800a878:	60f8      	str	r0, [r7, #12]
 800a87a:	460b      	mov	r3, r1
 800a87c:	607a      	str	r2, [r7, #4]
 800a87e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a880:	7afb      	ldrb	r3, [r7, #11]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d16b      	bne.n	800a95e <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	3314      	adds	r3, #20
 800a88a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a892:	2b02      	cmp	r3, #2
 800a894:	d156      	bne.n	800a944 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800a896:	693b      	ldr	r3, [r7, #16]
 800a898:	689a      	ldr	r2, [r3, #8]
 800a89a:	693b      	ldr	r3, [r7, #16]
 800a89c:	68db      	ldr	r3, [r3, #12]
 800a89e:	429a      	cmp	r2, r3
 800a8a0:	d914      	bls.n	800a8cc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a8a2:	693b      	ldr	r3, [r7, #16]
 800a8a4:	689a      	ldr	r2, [r3, #8]
 800a8a6:	693b      	ldr	r3, [r7, #16]
 800a8a8:	68db      	ldr	r3, [r3, #12]
 800a8aa:	1ad2      	subs	r2, r2, r3
 800a8ac:	693b      	ldr	r3, [r7, #16]
 800a8ae:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	689b      	ldr	r3, [r3, #8]
 800a8b4:	461a      	mov	r2, r3
 800a8b6:	6879      	ldr	r1, [r7, #4]
 800a8b8:	68f8      	ldr	r0, [r7, #12]
 800a8ba:	f000 ff91 	bl	800b7e0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a8be:	2300      	movs	r3, #0
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	2100      	movs	r1, #0
 800a8c4:	68f8      	ldr	r0, [r7, #12]
 800a8c6:	f001 fa71 	bl	800bdac <USBD_LL_PrepareReceive>
 800a8ca:	e03b      	b.n	800a944 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	68da      	ldr	r2, [r3, #12]
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	689b      	ldr	r3, [r3, #8]
 800a8d4:	429a      	cmp	r2, r3
 800a8d6:	d11c      	bne.n	800a912 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	685a      	ldr	r2, [r3, #4]
 800a8dc:	693b      	ldr	r3, [r7, #16]
 800a8de:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a8e0:	429a      	cmp	r2, r3
 800a8e2:	d316      	bcc.n	800a912 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a8e4:	693b      	ldr	r3, [r7, #16]
 800a8e6:	685a      	ldr	r2, [r3, #4]
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a8ee:	429a      	cmp	r2, r3
 800a8f0:	d20f      	bcs.n	800a912 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	2100      	movs	r1, #0
 800a8f6:	68f8      	ldr	r0, [r7, #12]
 800a8f8:	f000 ff72 	bl	800b7e0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	2200      	movs	r2, #0
 800a900:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a904:	2300      	movs	r3, #0
 800a906:	2200      	movs	r2, #0
 800a908:	2100      	movs	r1, #0
 800a90a:	68f8      	ldr	r0, [r7, #12]
 800a90c:	f001 fa4e 	bl	800bdac <USBD_LL_PrepareReceive>
 800a910:	e018      	b.n	800a944 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a918:	b2db      	uxtb	r3, r3
 800a91a:	2b03      	cmp	r3, #3
 800a91c:	d10b      	bne.n	800a936 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a924:	68db      	ldr	r3, [r3, #12]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d005      	beq.n	800a936 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a930:	68db      	ldr	r3, [r3, #12]
 800a932:	68f8      	ldr	r0, [r7, #12]
 800a934:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a936:	2180      	movs	r1, #128	@ 0x80
 800a938:	68f8      	ldr	r0, [r7, #12]
 800a93a:	f001 f98d 	bl	800bc58 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a93e:	68f8      	ldr	r0, [r7, #12]
 800a940:	f000 ffa0 	bl	800b884 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a94a:	2b01      	cmp	r3, #1
 800a94c:	d122      	bne.n	800a994 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a94e:	68f8      	ldr	r0, [r7, #12]
 800a950:	f7ff fe98 	bl	800a684 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	2200      	movs	r2, #0
 800a958:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a95c:	e01a      	b.n	800a994 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a964:	b2db      	uxtb	r3, r3
 800a966:	2b03      	cmp	r3, #3
 800a968:	d114      	bne.n	800a994 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a970:	695b      	ldr	r3, [r3, #20]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d00e      	beq.n	800a994 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a97c:	695b      	ldr	r3, [r3, #20]
 800a97e:	7afa      	ldrb	r2, [r7, #11]
 800a980:	4611      	mov	r1, r2
 800a982:	68f8      	ldr	r0, [r7, #12]
 800a984:	4798      	blx	r3
 800a986:	4603      	mov	r3, r0
 800a988:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a98a:	7dfb      	ldrb	r3, [r7, #23]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d001      	beq.n	800a994 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800a990:	7dfb      	ldrb	r3, [r7, #23]
 800a992:	e000      	b.n	800a996 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800a994:	2300      	movs	r3, #0
}
 800a996:	4618      	mov	r0, r3
 800a998:	3718      	adds	r7, #24
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}

0800a99e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a99e:	b580      	push	{r7, lr}
 800a9a0:	b082      	sub	sp, #8
 800a9a2:	af00      	add	r7, sp, #0
 800a9a4:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2201      	movs	r2, #1
 800a9aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2200      	movs	r2, #0
 800a9c0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d101      	bne.n	800a9d2 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800a9ce:	2303      	movs	r3, #3
 800a9d0:	e02a      	b.n	800aa28 <USBD_LL_Reset+0x8a>
  }

	if (pdev->pClass->DeInit != NULL)
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9d8:	685b      	ldr	r3, [r3, #4]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d009      	beq.n	800a9f2 <USBD_LL_Reset+0x54>
	{
	  (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9e4:	685b      	ldr	r3, [r3, #4]
 800a9e6:	687a      	ldr	r2, [r7, #4]
 800a9e8:	6852      	ldr	r2, [r2, #4]
 800a9ea:	b2d2      	uxtb	r2, r2
 800a9ec:	4611      	mov	r1, r2
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	4798      	blx	r3
	}

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a9f2:	2340      	movs	r3, #64	@ 0x40
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	2100      	movs	r1, #0
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f001 f8e8 	bl	800bbce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2201      	movs	r2, #1
 800aa02:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2240      	movs	r2, #64	@ 0x40
 800aa0a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aa0e:	2340      	movs	r3, #64	@ 0x40
 800aa10:	2200      	movs	r2, #0
 800aa12:	2180      	movs	r1, #128	@ 0x80
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f001 f8da 	bl	800bbce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2201      	movs	r2, #1
 800aa1e:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2240      	movs	r2, #64	@ 0x40
 800aa24:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800aa26:	2300      	movs	r3, #0
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	3708      	adds	r7, #8
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}

0800aa30 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800aa30:	b480      	push	{r7}
 800aa32:	b083      	sub	sp, #12
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
 800aa38:	460b      	mov	r3, r1
 800aa3a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	78fa      	ldrb	r2, [r7, #3]
 800aa40:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800aa42:	2300      	movs	r3, #0
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	370c      	adds	r7, #12
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4e:	4770      	bx	lr

0800aa50 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800aa50:	b480      	push	{r7}
 800aa52:	b083      	sub	sp, #12
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa5e:	b2da      	uxtb	r2, r3
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2204      	movs	r2, #4
 800aa6a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800aa6e:	2300      	movs	r3, #0
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	370c      	adds	r7, #12
 800aa74:	46bd      	mov	sp, r7
 800aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7a:	4770      	bx	lr

0800aa7c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b083      	sub	sp, #12
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa8a:	b2db      	uxtb	r3, r3
 800aa8c:	2b04      	cmp	r3, #4
 800aa8e:	d106      	bne.n	800aa9e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800aa96:	b2da      	uxtb	r2, r3
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800aa9e:	2300      	movs	r3, #0
}
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	370c      	adds	r7, #12
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaaa:	4770      	bx	lr

0800aaac <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b082      	sub	sp, #8
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d101      	bne.n	800aac2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800aabe:	2303      	movs	r3, #3
 800aac0:	e012      	b.n	800aae8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aac8:	b2db      	uxtb	r3, r3
 800aaca:	2b03      	cmp	r3, #3
 800aacc:	d10b      	bne.n	800aae6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aad4:	69db      	ldr	r3, [r3, #28]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d005      	beq.n	800aae6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aae0:	69db      	ldr	r3, [r3, #28]
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800aae6:	2300      	movs	r3, #0
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	3708      	adds	r7, #8
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}

0800aaf0 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b082      	sub	sp, #8
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	460b      	mov	r3, r1
 800aafa:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d101      	bne.n	800ab0a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800ab06:	2303      	movs	r3, #3
 800ab08:	e014      	b.n	800ab34 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab10:	b2db      	uxtb	r3, r3
 800ab12:	2b03      	cmp	r3, #3
 800ab14:	d10d      	bne.n	800ab32 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab1c:	6a1b      	ldr	r3, [r3, #32]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d007      	beq.n	800ab32 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab28:	6a1b      	ldr	r3, [r3, #32]
 800ab2a:	78fa      	ldrb	r2, [r7, #3]
 800ab2c:	4611      	mov	r1, r2
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ab32:	2300      	movs	r3, #0
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3708      	adds	r7, #8
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}

0800ab3c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b082      	sub	sp, #8
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
 800ab44:	460b      	mov	r3, r1
 800ab46:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d101      	bne.n	800ab56 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800ab52:	2303      	movs	r3, #3
 800ab54:	e014      	b.n	800ab80 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab5c:	b2db      	uxtb	r3, r3
 800ab5e:	2b03      	cmp	r3, #3
 800ab60:	d10d      	bne.n	800ab7e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d007      	beq.n	800ab7e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab76:	78fa      	ldrb	r2, [r7, #3]
 800ab78:	4611      	mov	r1, r2
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ab7e:	2300      	movs	r3, #0
}
 800ab80:	4618      	mov	r0, r3
 800ab82:	3708      	adds	r7, #8
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}

0800ab88 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b083      	sub	sp, #12
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ab90:	2300      	movs	r3, #0
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	370c      	adds	r7, #12
 800ab96:	46bd      	mov	sp, r7
 800ab98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9c:	4770      	bx	lr

0800ab9e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ab9e:	b580      	push	{r7, lr}
 800aba0:	b082      	sub	sp, #8
 800aba2:	af00      	add	r7, sp, #0
 800aba4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2201      	movs	r2, #1
 800abaa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  if (pdev->pClass != NULL)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d009      	beq.n	800abcc <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abbe:	685b      	ldr	r3, [r3, #4]
 800abc0:	687a      	ldr	r2, [r7, #4]
 800abc2:	6852      	ldr	r2, [r2, #4]
 800abc4:	b2d2      	uxtb	r2, r2
 800abc6:	4611      	mov	r1, r2
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	4798      	blx	r3
  }

  return USBD_OK;
 800abcc:	2300      	movs	r3, #0
}
 800abce:	4618      	mov	r0, r3
 800abd0:	3708      	adds	r7, #8
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}

0800abd6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800abd6:	b480      	push	{r7}
 800abd8:	b087      	sub	sp, #28
 800abda:	af00      	add	r7, sp, #0
 800abdc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800abe2:	697b      	ldr	r3, [r7, #20]
 800abe4:	781b      	ldrb	r3, [r3, #0]
 800abe6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	3301      	adds	r3, #1
 800abec:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	781b      	ldrb	r3, [r3, #0]
 800abf2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800abf4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800abf8:	021b      	lsls	r3, r3, #8
 800abfa:	b21a      	sxth	r2, r3
 800abfc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ac00:	4313      	orrs	r3, r2
 800ac02:	b21b      	sxth	r3, r3
 800ac04:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ac06:	89fb      	ldrh	r3, [r7, #14]
}
 800ac08:	4618      	mov	r0, r3
 800ac0a:	371c      	adds	r7, #28
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac12:	4770      	bx	lr

0800ac14 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b084      	sub	sp, #16
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
 800ac1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	781b      	ldrb	r3, [r3, #0]
 800ac26:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ac2a:	2b40      	cmp	r3, #64	@ 0x40
 800ac2c:	d005      	beq.n	800ac3a <USBD_StdDevReq+0x26>
 800ac2e:	2b40      	cmp	r3, #64	@ 0x40
 800ac30:	d853      	bhi.n	800acda <USBD_StdDevReq+0xc6>
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d00b      	beq.n	800ac4e <USBD_StdDevReq+0x3a>
 800ac36:	2b20      	cmp	r3, #32
 800ac38:	d14f      	bne.n	800acda <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac40:	689b      	ldr	r3, [r3, #8]
 800ac42:	6839      	ldr	r1, [r7, #0]
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	4798      	blx	r3
 800ac48:	4603      	mov	r3, r0
 800ac4a:	73fb      	strb	r3, [r7, #15]
      break;
 800ac4c:	e04a      	b.n	800ace4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	785b      	ldrb	r3, [r3, #1]
 800ac52:	2b09      	cmp	r3, #9
 800ac54:	d83b      	bhi.n	800acce <USBD_StdDevReq+0xba>
 800ac56:	a201      	add	r2, pc, #4	@ (adr r2, 800ac5c <USBD_StdDevReq+0x48>)
 800ac58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac5c:	0800acb1 	.word	0x0800acb1
 800ac60:	0800acc5 	.word	0x0800acc5
 800ac64:	0800accf 	.word	0x0800accf
 800ac68:	0800acbb 	.word	0x0800acbb
 800ac6c:	0800accf 	.word	0x0800accf
 800ac70:	0800ac8f 	.word	0x0800ac8f
 800ac74:	0800ac85 	.word	0x0800ac85
 800ac78:	0800accf 	.word	0x0800accf
 800ac7c:	0800aca7 	.word	0x0800aca7
 800ac80:	0800ac99 	.word	0x0800ac99
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ac84:	6839      	ldr	r1, [r7, #0]
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	f000 f9de 	bl	800b048 <USBD_GetDescriptor>
          break;
 800ac8c:	e024      	b.n	800acd8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ac8e:	6839      	ldr	r1, [r7, #0]
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f000 fb55 	bl	800b340 <USBD_SetAddress>
          break;
 800ac96:	e01f      	b.n	800acd8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ac98:	6839      	ldr	r1, [r7, #0]
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f000 fb94 	bl	800b3c8 <USBD_SetConfig>
 800aca0:	4603      	mov	r3, r0
 800aca2:	73fb      	strb	r3, [r7, #15]
          break;
 800aca4:	e018      	b.n	800acd8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800aca6:	6839      	ldr	r1, [r7, #0]
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f000 fc33 	bl	800b514 <USBD_GetConfig>
          break;
 800acae:	e013      	b.n	800acd8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800acb0:	6839      	ldr	r1, [r7, #0]
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f000 fc64 	bl	800b580 <USBD_GetStatus>
          break;
 800acb8:	e00e      	b.n	800acd8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800acba:	6839      	ldr	r1, [r7, #0]
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	f000 fc93 	bl	800b5e8 <USBD_SetFeature>
          break;
 800acc2:	e009      	b.n	800acd8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800acc4:	6839      	ldr	r1, [r7, #0]
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f000 fca2 	bl	800b610 <USBD_ClrFeature>
          break;
 800accc:	e004      	b.n	800acd8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800acce:	6839      	ldr	r1, [r7, #0]
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	f000 fcf9 	bl	800b6c8 <USBD_CtlError>
          break;
 800acd6:	bf00      	nop
      }
      break;
 800acd8:	e004      	b.n	800ace4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800acda:	6839      	ldr	r1, [r7, #0]
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	f000 fcf3 	bl	800b6c8 <USBD_CtlError>
      break;
 800ace2:	bf00      	nop
  }

  return ret;
 800ace4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	3710      	adds	r7, #16
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}
 800acee:	bf00      	nop

0800acf0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b084      	sub	sp, #16
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
 800acf8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800acfa:	2300      	movs	r3, #0
 800acfc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	781b      	ldrb	r3, [r3, #0]
 800ad02:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ad06:	2b40      	cmp	r3, #64	@ 0x40
 800ad08:	d005      	beq.n	800ad16 <USBD_StdItfReq+0x26>
 800ad0a:	2b40      	cmp	r3, #64	@ 0x40
 800ad0c:	d82f      	bhi.n	800ad6e <USBD_StdItfReq+0x7e>
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d001      	beq.n	800ad16 <USBD_StdItfReq+0x26>
 800ad12:	2b20      	cmp	r3, #32
 800ad14:	d12b      	bne.n	800ad6e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad1c:	b2db      	uxtb	r3, r3
 800ad1e:	3b01      	subs	r3, #1
 800ad20:	2b02      	cmp	r3, #2
 800ad22:	d81d      	bhi.n	800ad60 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	889b      	ldrh	r3, [r3, #4]
 800ad28:	b2db      	uxtb	r3, r3
 800ad2a:	2b0f      	cmp	r3, #15
 800ad2c:	d813      	bhi.n	800ad56 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad34:	689b      	ldr	r3, [r3, #8]
 800ad36:	6839      	ldr	r1, [r7, #0]
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	4798      	blx	r3
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	88db      	ldrh	r3, [r3, #6]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d110      	bne.n	800ad6a <USBD_StdItfReq+0x7a>
 800ad48:	7bfb      	ldrb	r3, [r7, #15]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d10d      	bne.n	800ad6a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f000 fd85 	bl	800b85e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ad54:	e009      	b.n	800ad6a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800ad56:	6839      	ldr	r1, [r7, #0]
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f000 fcb5 	bl	800b6c8 <USBD_CtlError>
          break;
 800ad5e:	e004      	b.n	800ad6a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800ad60:	6839      	ldr	r1, [r7, #0]
 800ad62:	6878      	ldr	r0, [r7, #4]
 800ad64:	f000 fcb0 	bl	800b6c8 <USBD_CtlError>
          break;
 800ad68:	e000      	b.n	800ad6c <USBD_StdItfReq+0x7c>
          break;
 800ad6a:	bf00      	nop
      }
      break;
 800ad6c:	e004      	b.n	800ad78 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800ad6e:	6839      	ldr	r1, [r7, #0]
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	f000 fca9 	bl	800b6c8 <USBD_CtlError>
      break;
 800ad76:	bf00      	nop
  }

  return ret;
 800ad78:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3710      	adds	r7, #16
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}

0800ad82 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad82:	b580      	push	{r7, lr}
 800ad84:	b084      	sub	sp, #16
 800ad86:	af00      	add	r7, sp, #0
 800ad88:	6078      	str	r0, [r7, #4]
 800ad8a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	889b      	ldrh	r3, [r3, #4]
 800ad94:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	781b      	ldrb	r3, [r3, #0]
 800ad9a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ad9e:	2b40      	cmp	r3, #64	@ 0x40
 800ada0:	d007      	beq.n	800adb2 <USBD_StdEPReq+0x30>
 800ada2:	2b40      	cmp	r3, #64	@ 0x40
 800ada4:	f200 8145 	bhi.w	800b032 <USBD_StdEPReq+0x2b0>
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d00c      	beq.n	800adc6 <USBD_StdEPReq+0x44>
 800adac:	2b20      	cmp	r3, #32
 800adae:	f040 8140 	bne.w	800b032 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800adb8:	689b      	ldr	r3, [r3, #8]
 800adba:	6839      	ldr	r1, [r7, #0]
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	4798      	blx	r3
 800adc0:	4603      	mov	r3, r0
 800adc2:	73fb      	strb	r3, [r7, #15]
      break;
 800adc4:	e13a      	b.n	800b03c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	785b      	ldrb	r3, [r3, #1]
 800adca:	2b03      	cmp	r3, #3
 800adcc:	d007      	beq.n	800adde <USBD_StdEPReq+0x5c>
 800adce:	2b03      	cmp	r3, #3
 800add0:	f300 8129 	bgt.w	800b026 <USBD_StdEPReq+0x2a4>
 800add4:	2b00      	cmp	r3, #0
 800add6:	d07f      	beq.n	800aed8 <USBD_StdEPReq+0x156>
 800add8:	2b01      	cmp	r3, #1
 800adda:	d03c      	beq.n	800ae56 <USBD_StdEPReq+0xd4>
 800addc:	e123      	b.n	800b026 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ade4:	b2db      	uxtb	r3, r3
 800ade6:	2b02      	cmp	r3, #2
 800ade8:	d002      	beq.n	800adf0 <USBD_StdEPReq+0x6e>
 800adea:	2b03      	cmp	r3, #3
 800adec:	d016      	beq.n	800ae1c <USBD_StdEPReq+0x9a>
 800adee:	e02c      	b.n	800ae4a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800adf0:	7bbb      	ldrb	r3, [r7, #14]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d00d      	beq.n	800ae12 <USBD_StdEPReq+0x90>
 800adf6:	7bbb      	ldrb	r3, [r7, #14]
 800adf8:	2b80      	cmp	r3, #128	@ 0x80
 800adfa:	d00a      	beq.n	800ae12 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800adfc:	7bbb      	ldrb	r3, [r7, #14]
 800adfe:	4619      	mov	r1, r3
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f000 ff29 	bl	800bc58 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ae06:	2180      	movs	r1, #128	@ 0x80
 800ae08:	6878      	ldr	r0, [r7, #4]
 800ae0a:	f000 ff25 	bl	800bc58 <USBD_LL_StallEP>
 800ae0e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ae10:	e020      	b.n	800ae54 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800ae12:	6839      	ldr	r1, [r7, #0]
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f000 fc57 	bl	800b6c8 <USBD_CtlError>
              break;
 800ae1a:	e01b      	b.n	800ae54 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	885b      	ldrh	r3, [r3, #2]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d10e      	bne.n	800ae42 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ae24:	7bbb      	ldrb	r3, [r7, #14]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d00b      	beq.n	800ae42 <USBD_StdEPReq+0xc0>
 800ae2a:	7bbb      	ldrb	r3, [r7, #14]
 800ae2c:	2b80      	cmp	r3, #128	@ 0x80
 800ae2e:	d008      	beq.n	800ae42 <USBD_StdEPReq+0xc0>
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	88db      	ldrh	r3, [r3, #6]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d104      	bne.n	800ae42 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ae38:	7bbb      	ldrb	r3, [r7, #14]
 800ae3a:	4619      	mov	r1, r3
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f000 ff0b 	bl	800bc58 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	f000 fd0b 	bl	800b85e <USBD_CtlSendStatus>

              break;
 800ae48:	e004      	b.n	800ae54 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800ae4a:	6839      	ldr	r1, [r7, #0]
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f000 fc3b 	bl	800b6c8 <USBD_CtlError>
              break;
 800ae52:	bf00      	nop
          }
          break;
 800ae54:	e0ec      	b.n	800b030 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae5c:	b2db      	uxtb	r3, r3
 800ae5e:	2b02      	cmp	r3, #2
 800ae60:	d002      	beq.n	800ae68 <USBD_StdEPReq+0xe6>
 800ae62:	2b03      	cmp	r3, #3
 800ae64:	d016      	beq.n	800ae94 <USBD_StdEPReq+0x112>
 800ae66:	e030      	b.n	800aeca <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ae68:	7bbb      	ldrb	r3, [r7, #14]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d00d      	beq.n	800ae8a <USBD_StdEPReq+0x108>
 800ae6e:	7bbb      	ldrb	r3, [r7, #14]
 800ae70:	2b80      	cmp	r3, #128	@ 0x80
 800ae72:	d00a      	beq.n	800ae8a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ae74:	7bbb      	ldrb	r3, [r7, #14]
 800ae76:	4619      	mov	r1, r3
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	f000 feed 	bl	800bc58 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ae7e:	2180      	movs	r1, #128	@ 0x80
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f000 fee9 	bl	800bc58 <USBD_LL_StallEP>
 800ae86:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ae88:	e025      	b.n	800aed6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800ae8a:	6839      	ldr	r1, [r7, #0]
 800ae8c:	6878      	ldr	r0, [r7, #4]
 800ae8e:	f000 fc1b 	bl	800b6c8 <USBD_CtlError>
              break;
 800ae92:	e020      	b.n	800aed6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	885b      	ldrh	r3, [r3, #2]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d11b      	bne.n	800aed4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ae9c:	7bbb      	ldrb	r3, [r7, #14]
 800ae9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d004      	beq.n	800aeb0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800aea6:	7bbb      	ldrb	r3, [r7, #14]
 800aea8:	4619      	mov	r1, r3
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f000 fef3 	bl	800bc96 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	f000 fcd4 	bl	800b85e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aebc:	689b      	ldr	r3, [r3, #8]
 800aebe:	6839      	ldr	r1, [r7, #0]
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	4798      	blx	r3
 800aec4:	4603      	mov	r3, r0
 800aec6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800aec8:	e004      	b.n	800aed4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800aeca:	6839      	ldr	r1, [r7, #0]
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f000 fbfb 	bl	800b6c8 <USBD_CtlError>
              break;
 800aed2:	e000      	b.n	800aed6 <USBD_StdEPReq+0x154>
              break;
 800aed4:	bf00      	nop
          }
          break;
 800aed6:	e0ab      	b.n	800b030 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aede:	b2db      	uxtb	r3, r3
 800aee0:	2b02      	cmp	r3, #2
 800aee2:	d002      	beq.n	800aeea <USBD_StdEPReq+0x168>
 800aee4:	2b03      	cmp	r3, #3
 800aee6:	d032      	beq.n	800af4e <USBD_StdEPReq+0x1cc>
 800aee8:	e097      	b.n	800b01a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aeea:	7bbb      	ldrb	r3, [r7, #14]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d007      	beq.n	800af00 <USBD_StdEPReq+0x17e>
 800aef0:	7bbb      	ldrb	r3, [r7, #14]
 800aef2:	2b80      	cmp	r3, #128	@ 0x80
 800aef4:	d004      	beq.n	800af00 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800aef6:	6839      	ldr	r1, [r7, #0]
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f000 fbe5 	bl	800b6c8 <USBD_CtlError>
                break;
 800aefe:	e091      	b.n	800b024 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af04:	2b00      	cmp	r3, #0
 800af06:	da0b      	bge.n	800af20 <USBD_StdEPReq+0x19e>
 800af08:	7bbb      	ldrb	r3, [r7, #14]
 800af0a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800af0e:	4613      	mov	r3, r2
 800af10:	009b      	lsls	r3, r3, #2
 800af12:	4413      	add	r3, r2
 800af14:	009b      	lsls	r3, r3, #2
 800af16:	3310      	adds	r3, #16
 800af18:	687a      	ldr	r2, [r7, #4]
 800af1a:	4413      	add	r3, r2
 800af1c:	3304      	adds	r3, #4
 800af1e:	e00b      	b.n	800af38 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800af20:	7bbb      	ldrb	r3, [r7, #14]
 800af22:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af26:	4613      	mov	r3, r2
 800af28:	009b      	lsls	r3, r3, #2
 800af2a:	4413      	add	r3, r2
 800af2c:	009b      	lsls	r3, r3, #2
 800af2e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800af32:	687a      	ldr	r2, [r7, #4]
 800af34:	4413      	add	r3, r2
 800af36:	3304      	adds	r3, #4
 800af38:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800af3a:	68bb      	ldr	r3, [r7, #8]
 800af3c:	2200      	movs	r2, #0
 800af3e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	2202      	movs	r2, #2
 800af44:	4619      	mov	r1, r3
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f000 fc2f 	bl	800b7aa <USBD_CtlSendData>
              break;
 800af4c:	e06a      	b.n	800b024 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800af4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af52:	2b00      	cmp	r3, #0
 800af54:	da11      	bge.n	800af7a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800af56:	7bbb      	ldrb	r3, [r7, #14]
 800af58:	f003 020f 	and.w	r2, r3, #15
 800af5c:	6879      	ldr	r1, [r7, #4]
 800af5e:	4613      	mov	r3, r2
 800af60:	009b      	lsls	r3, r3, #2
 800af62:	4413      	add	r3, r2
 800af64:	009b      	lsls	r3, r3, #2
 800af66:	440b      	add	r3, r1
 800af68:	3324      	adds	r3, #36	@ 0x24
 800af6a:	881b      	ldrh	r3, [r3, #0]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d117      	bne.n	800afa0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800af70:	6839      	ldr	r1, [r7, #0]
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f000 fba8 	bl	800b6c8 <USBD_CtlError>
                  break;
 800af78:	e054      	b.n	800b024 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800af7a:	7bbb      	ldrb	r3, [r7, #14]
 800af7c:	f003 020f 	and.w	r2, r3, #15
 800af80:	6879      	ldr	r1, [r7, #4]
 800af82:	4613      	mov	r3, r2
 800af84:	009b      	lsls	r3, r3, #2
 800af86:	4413      	add	r3, r2
 800af88:	009b      	lsls	r3, r3, #2
 800af8a:	440b      	add	r3, r1
 800af8c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800af90:	881b      	ldrh	r3, [r3, #0]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d104      	bne.n	800afa0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800af96:	6839      	ldr	r1, [r7, #0]
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f000 fb95 	bl	800b6c8 <USBD_CtlError>
                  break;
 800af9e:	e041      	b.n	800b024 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800afa0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	da0b      	bge.n	800afc0 <USBD_StdEPReq+0x23e>
 800afa8:	7bbb      	ldrb	r3, [r7, #14]
 800afaa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800afae:	4613      	mov	r3, r2
 800afb0:	009b      	lsls	r3, r3, #2
 800afb2:	4413      	add	r3, r2
 800afb4:	009b      	lsls	r3, r3, #2
 800afb6:	3310      	adds	r3, #16
 800afb8:	687a      	ldr	r2, [r7, #4]
 800afba:	4413      	add	r3, r2
 800afbc:	3304      	adds	r3, #4
 800afbe:	e00b      	b.n	800afd8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800afc0:	7bbb      	ldrb	r3, [r7, #14]
 800afc2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800afc6:	4613      	mov	r3, r2
 800afc8:	009b      	lsls	r3, r3, #2
 800afca:	4413      	add	r3, r2
 800afcc:	009b      	lsls	r3, r3, #2
 800afce:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800afd2:	687a      	ldr	r2, [r7, #4]
 800afd4:	4413      	add	r3, r2
 800afd6:	3304      	adds	r3, #4
 800afd8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800afda:	7bbb      	ldrb	r3, [r7, #14]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d002      	beq.n	800afe6 <USBD_StdEPReq+0x264>
 800afe0:	7bbb      	ldrb	r3, [r7, #14]
 800afe2:	2b80      	cmp	r3, #128	@ 0x80
 800afe4:	d103      	bne.n	800afee <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800afe6:	68bb      	ldr	r3, [r7, #8]
 800afe8:	2200      	movs	r2, #0
 800afea:	601a      	str	r2, [r3, #0]
 800afec:	e00e      	b.n	800b00c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800afee:	7bbb      	ldrb	r3, [r7, #14]
 800aff0:	4619      	mov	r1, r3
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f000 fe6e 	bl	800bcd4 <USBD_LL_IsStallEP>
 800aff8:	4603      	mov	r3, r0
 800affa:	2b00      	cmp	r3, #0
 800affc:	d003      	beq.n	800b006 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	2201      	movs	r2, #1
 800b002:	601a      	str	r2, [r3, #0]
 800b004:	e002      	b.n	800b00c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800b006:	68bb      	ldr	r3, [r7, #8]
 800b008:	2200      	movs	r2, #0
 800b00a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b00c:	68bb      	ldr	r3, [r7, #8]
 800b00e:	2202      	movs	r2, #2
 800b010:	4619      	mov	r1, r3
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f000 fbc9 	bl	800b7aa <USBD_CtlSendData>
              break;
 800b018:	e004      	b.n	800b024 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800b01a:	6839      	ldr	r1, [r7, #0]
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f000 fb53 	bl	800b6c8 <USBD_CtlError>
              break;
 800b022:	bf00      	nop
          }
          break;
 800b024:	e004      	b.n	800b030 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800b026:	6839      	ldr	r1, [r7, #0]
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f000 fb4d 	bl	800b6c8 <USBD_CtlError>
          break;
 800b02e:	bf00      	nop
      }
      break;
 800b030:	e004      	b.n	800b03c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800b032:	6839      	ldr	r1, [r7, #0]
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f000 fb47 	bl	800b6c8 <USBD_CtlError>
      break;
 800b03a:	bf00      	nop
  }

  return ret;
 800b03c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b03e:	4618      	mov	r0, r3
 800b040:	3710      	adds	r7, #16
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}
	...

0800b048 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b084      	sub	sp, #16
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
 800b050:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b052:	2300      	movs	r3, #0
 800b054:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b056:	2300      	movs	r3, #0
 800b058:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b05a:	2300      	movs	r3, #0
 800b05c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	885b      	ldrh	r3, [r3, #2]
 800b062:	0a1b      	lsrs	r3, r3, #8
 800b064:	b29b      	uxth	r3, r3
 800b066:	3b01      	subs	r3, #1
 800b068:	2b06      	cmp	r3, #6
 800b06a:	f200 813b 	bhi.w	800b2e4 <USBD_GetDescriptor+0x29c>
 800b06e:	a201      	add	r2, pc, #4	@ (adr r2, 800b074 <USBD_GetDescriptor+0x2c>)
 800b070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b074:	0800b091 	.word	0x0800b091
 800b078:	0800b0a9 	.word	0x0800b0a9
 800b07c:	0800b0e9 	.word	0x0800b0e9
 800b080:	0800b2e5 	.word	0x0800b2e5
 800b084:	0800b2e5 	.word	0x0800b2e5
 800b088:	0800b285 	.word	0x0800b285
 800b08c:	0800b2b1 	.word	0x0800b2b1
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	687a      	ldr	r2, [r7, #4]
 800b09a:	7c12      	ldrb	r2, [r2, #16]
 800b09c:	f107 0108 	add.w	r1, r7, #8
 800b0a0:	4610      	mov	r0, r2
 800b0a2:	4798      	blx	r3
 800b0a4:	60f8      	str	r0, [r7, #12]
      break;
 800b0a6:	e125      	b.n	800b2f4 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	7c1b      	ldrb	r3, [r3, #16]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d10d      	bne.n	800b0cc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0b8:	f107 0208 	add.w	r2, r7, #8
 800b0bc:	4610      	mov	r0, r2
 800b0be:	4798      	blx	r3
 800b0c0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	3301      	adds	r3, #1
 800b0c6:	2202      	movs	r2, #2
 800b0c8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b0ca:	e113      	b.n	800b2f4 <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0d4:	f107 0208 	add.w	r2, r7, #8
 800b0d8:	4610      	mov	r0, r2
 800b0da:	4798      	blx	r3
 800b0dc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	3301      	adds	r3, #1
 800b0e2:	2202      	movs	r2, #2
 800b0e4:	701a      	strb	r2, [r3, #0]
      break;
 800b0e6:	e105      	b.n	800b2f4 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	885b      	ldrh	r3, [r3, #2]
 800b0ec:	b2db      	uxtb	r3, r3
 800b0ee:	2b05      	cmp	r3, #5
 800b0f0:	f200 80ac 	bhi.w	800b24c <USBD_GetDescriptor+0x204>
 800b0f4:	a201      	add	r2, pc, #4	@ (adr r2, 800b0fc <USBD_GetDescriptor+0xb4>)
 800b0f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0fa:	bf00      	nop
 800b0fc:	0800b115 	.word	0x0800b115
 800b100:	0800b149 	.word	0x0800b149
 800b104:	0800b17d 	.word	0x0800b17d
 800b108:	0800b1b1 	.word	0x0800b1b1
 800b10c:	0800b1e5 	.word	0x0800b1e5
 800b110:	0800b219 	.word	0x0800b219
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b11a:	685b      	ldr	r3, [r3, #4]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d00b      	beq.n	800b138 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b126:	685b      	ldr	r3, [r3, #4]
 800b128:	687a      	ldr	r2, [r7, #4]
 800b12a:	7c12      	ldrb	r2, [r2, #16]
 800b12c:	f107 0108 	add.w	r1, r7, #8
 800b130:	4610      	mov	r0, r2
 800b132:	4798      	blx	r3
 800b134:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b136:	e0a4      	b.n	800b282 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800b138:	6839      	ldr	r1, [r7, #0]
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f000 fac4 	bl	800b6c8 <USBD_CtlError>
            err++;
 800b140:	7afb      	ldrb	r3, [r7, #11]
 800b142:	3301      	adds	r3, #1
 800b144:	72fb      	strb	r3, [r7, #11]
          break;
 800b146:	e09c      	b.n	800b282 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b14e:	689b      	ldr	r3, [r3, #8]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d00b      	beq.n	800b16c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b15a:	689b      	ldr	r3, [r3, #8]
 800b15c:	687a      	ldr	r2, [r7, #4]
 800b15e:	7c12      	ldrb	r2, [r2, #16]
 800b160:	f107 0108 	add.w	r1, r7, #8
 800b164:	4610      	mov	r0, r2
 800b166:	4798      	blx	r3
 800b168:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b16a:	e08a      	b.n	800b282 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800b16c:	6839      	ldr	r1, [r7, #0]
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f000 faaa 	bl	800b6c8 <USBD_CtlError>
            err++;
 800b174:	7afb      	ldrb	r3, [r7, #11]
 800b176:	3301      	adds	r3, #1
 800b178:	72fb      	strb	r3, [r7, #11]
          break;
 800b17a:	e082      	b.n	800b282 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b182:	68db      	ldr	r3, [r3, #12]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d00b      	beq.n	800b1a0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b18e:	68db      	ldr	r3, [r3, #12]
 800b190:	687a      	ldr	r2, [r7, #4]
 800b192:	7c12      	ldrb	r2, [r2, #16]
 800b194:	f107 0108 	add.w	r1, r7, #8
 800b198:	4610      	mov	r0, r2
 800b19a:	4798      	blx	r3
 800b19c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b19e:	e070      	b.n	800b282 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800b1a0:	6839      	ldr	r1, [r7, #0]
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	f000 fa90 	bl	800b6c8 <USBD_CtlError>
            err++;
 800b1a8:	7afb      	ldrb	r3, [r7, #11]
 800b1aa:	3301      	adds	r3, #1
 800b1ac:	72fb      	strb	r3, [r7, #11]
          break;
 800b1ae:	e068      	b.n	800b282 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b1b6:	691b      	ldr	r3, [r3, #16]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d00b      	beq.n	800b1d4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b1c2:	691b      	ldr	r3, [r3, #16]
 800b1c4:	687a      	ldr	r2, [r7, #4]
 800b1c6:	7c12      	ldrb	r2, [r2, #16]
 800b1c8:	f107 0108 	add.w	r1, r7, #8
 800b1cc:	4610      	mov	r0, r2
 800b1ce:	4798      	blx	r3
 800b1d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b1d2:	e056      	b.n	800b282 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800b1d4:	6839      	ldr	r1, [r7, #0]
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	f000 fa76 	bl	800b6c8 <USBD_CtlError>
            err++;
 800b1dc:	7afb      	ldrb	r3, [r7, #11]
 800b1de:	3301      	adds	r3, #1
 800b1e0:	72fb      	strb	r3, [r7, #11]
          break;
 800b1e2:	e04e      	b.n	800b282 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b1ea:	695b      	ldr	r3, [r3, #20]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d00b      	beq.n	800b208 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b1f6:	695b      	ldr	r3, [r3, #20]
 800b1f8:	687a      	ldr	r2, [r7, #4]
 800b1fa:	7c12      	ldrb	r2, [r2, #16]
 800b1fc:	f107 0108 	add.w	r1, r7, #8
 800b200:	4610      	mov	r0, r2
 800b202:	4798      	blx	r3
 800b204:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b206:	e03c      	b.n	800b282 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800b208:	6839      	ldr	r1, [r7, #0]
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	f000 fa5c 	bl	800b6c8 <USBD_CtlError>
            err++;
 800b210:	7afb      	ldrb	r3, [r7, #11]
 800b212:	3301      	adds	r3, #1
 800b214:	72fb      	strb	r3, [r7, #11]
          break;
 800b216:	e034      	b.n	800b282 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b21e:	699b      	ldr	r3, [r3, #24]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d00b      	beq.n	800b23c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b22a:	699b      	ldr	r3, [r3, #24]
 800b22c:	687a      	ldr	r2, [r7, #4]
 800b22e:	7c12      	ldrb	r2, [r2, #16]
 800b230:	f107 0108 	add.w	r1, r7, #8
 800b234:	4610      	mov	r0, r2
 800b236:	4798      	blx	r3
 800b238:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b23a:	e022      	b.n	800b282 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800b23c:	6839      	ldr	r1, [r7, #0]
 800b23e:	6878      	ldr	r0, [r7, #4]
 800b240:	f000 fa42 	bl	800b6c8 <USBD_CtlError>
            err++;
 800b244:	7afb      	ldrb	r3, [r7, #11]
 800b246:	3301      	adds	r3, #1
 800b248:	72fb      	strb	r3, [r7, #11]
          break;
 800b24a:	e01a      	b.n	800b282 <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b254:	2b00      	cmp	r3, #0
 800b256:	d00c      	beq.n	800b272 <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b25e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b260:	683a      	ldr	r2, [r7, #0]
 800b262:	8852      	ldrh	r2, [r2, #2]
 800b264:	b2d1      	uxtb	r1, r2
 800b266:	f107 0208 	add.w	r2, r7, #8
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	4798      	blx	r3
 800b26e:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 800b270:	e006      	b.n	800b280 <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 800b272:	6839      	ldr	r1, [r7, #0]
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	f000 fa27 	bl	800b6c8 <USBD_CtlError>
            err++;
 800b27a:	7afb      	ldrb	r3, [r7, #11]
 800b27c:	3301      	adds	r3, #1
 800b27e:	72fb      	strb	r3, [r7, #11]
          break;
 800b280:	bf00      	nop
      }
      break;
 800b282:	e037      	b.n	800b2f4 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	7c1b      	ldrb	r3, [r3, #16]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d109      	bne.n	800b2a0 <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b292:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b294:	f107 0208 	add.w	r2, r7, #8
 800b298:	4610      	mov	r0, r2
 800b29a:	4798      	blx	r3
 800b29c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b29e:	e029      	b.n	800b2f4 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 800b2a0:	6839      	ldr	r1, [r7, #0]
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f000 fa10 	bl	800b6c8 <USBD_CtlError>
        err++;
 800b2a8:	7afb      	ldrb	r3, [r7, #11]
 800b2aa:	3301      	adds	r3, #1
 800b2ac:	72fb      	strb	r3, [r7, #11]
      break;
 800b2ae:	e021      	b.n	800b2f4 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	7c1b      	ldrb	r3, [r3, #16]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d10d      	bne.n	800b2d4 <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b2be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2c0:	f107 0208 	add.w	r2, r7, #8
 800b2c4:	4610      	mov	r0, r2
 800b2c6:	4798      	blx	r3
 800b2c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	3301      	adds	r3, #1
 800b2ce:	2207      	movs	r2, #7
 800b2d0:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b2d2:	e00f      	b.n	800b2f4 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 800b2d4:	6839      	ldr	r1, [r7, #0]
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	f000 f9f6 	bl	800b6c8 <USBD_CtlError>
        err++;
 800b2dc:	7afb      	ldrb	r3, [r7, #11]
 800b2de:	3301      	adds	r3, #1
 800b2e0:	72fb      	strb	r3, [r7, #11]
      break;
 800b2e2:	e007      	b.n	800b2f4 <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 800b2e4:	6839      	ldr	r1, [r7, #0]
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f000 f9ee 	bl	800b6c8 <USBD_CtlError>
      err++;
 800b2ec:	7afb      	ldrb	r3, [r7, #11]
 800b2ee:	3301      	adds	r3, #1
 800b2f0:	72fb      	strb	r3, [r7, #11]
      break;
 800b2f2:	bf00      	nop
  }

  if (err != 0U)
 800b2f4:	7afb      	ldrb	r3, [r7, #11]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d11e      	bne.n	800b338 <USBD_GetDescriptor+0x2f0>
  {
    return;
  }

  if (req->wLength != 0U)
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	88db      	ldrh	r3, [r3, #6]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d016      	beq.n	800b330 <USBD_GetDescriptor+0x2e8>
  {
    if (len != 0U)
 800b302:	893b      	ldrh	r3, [r7, #8]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d00e      	beq.n	800b326 <USBD_GetDescriptor+0x2de>
    {
      len = MIN(len, req->wLength);
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	88da      	ldrh	r2, [r3, #6]
 800b30c:	893b      	ldrh	r3, [r7, #8]
 800b30e:	4293      	cmp	r3, r2
 800b310:	bf28      	it	cs
 800b312:	4613      	movcs	r3, r2
 800b314:	b29b      	uxth	r3, r3
 800b316:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b318:	893b      	ldrh	r3, [r7, #8]
 800b31a:	461a      	mov	r2, r3
 800b31c:	68f9      	ldr	r1, [r7, #12]
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	f000 fa43 	bl	800b7aa <USBD_CtlSendData>
 800b324:	e009      	b.n	800b33a <USBD_GetDescriptor+0x2f2>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b326:	6839      	ldr	r1, [r7, #0]
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	f000 f9cd 	bl	800b6c8 <USBD_CtlError>
 800b32e:	e004      	b.n	800b33a <USBD_GetDescriptor+0x2f2>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	f000 fa94 	bl	800b85e <USBD_CtlSendStatus>
 800b336:	e000      	b.n	800b33a <USBD_GetDescriptor+0x2f2>
    return;
 800b338:	bf00      	nop
  }
}
 800b33a:	3710      	adds	r7, #16
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}

0800b340 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b084      	sub	sp, #16
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
 800b348:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	889b      	ldrh	r3, [r3, #4]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d131      	bne.n	800b3b6 <USBD_SetAddress+0x76>
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	88db      	ldrh	r3, [r3, #6]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d12d      	bne.n	800b3b6 <USBD_SetAddress+0x76>
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	885b      	ldrh	r3, [r3, #2]
 800b35e:	2b7f      	cmp	r3, #127	@ 0x7f
 800b360:	d829      	bhi.n	800b3b6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	885b      	ldrh	r3, [r3, #2]
 800b366:	b2db      	uxtb	r3, r3
 800b368:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b36c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b374:	b2db      	uxtb	r3, r3
 800b376:	2b03      	cmp	r3, #3
 800b378:	d104      	bne.n	800b384 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b37a:	6839      	ldr	r1, [r7, #0]
 800b37c:	6878      	ldr	r0, [r7, #4]
 800b37e:	f000 f9a3 	bl	800b6c8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b382:	e01d      	b.n	800b3c0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	7bfa      	ldrb	r2, [r7, #15]
 800b388:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b38c:	7bfb      	ldrb	r3, [r7, #15]
 800b38e:	4619      	mov	r1, r3
 800b390:	6878      	ldr	r0, [r7, #4]
 800b392:	f000 fccb 	bl	800bd2c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f000 fa61 	bl	800b85e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b39c:	7bfb      	ldrb	r3, [r7, #15]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d004      	beq.n	800b3ac <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2202      	movs	r2, #2
 800b3a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3aa:	e009      	b.n	800b3c0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2201      	movs	r2, #1
 800b3b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3b4:	e004      	b.n	800b3c0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b3b6:	6839      	ldr	r1, [r7, #0]
 800b3b8:	6878      	ldr	r0, [r7, #4]
 800b3ba:	f000 f985 	bl	800b6c8 <USBD_CtlError>
  }
}
 800b3be:	bf00      	nop
 800b3c0:	bf00      	nop
 800b3c2:	3710      	adds	r7, #16
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	bd80      	pop	{r7, pc}

0800b3c8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b084      	sub	sp, #16
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
 800b3d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	885b      	ldrh	r3, [r3, #2]
 800b3da:	b2da      	uxtb	r2, r3
 800b3dc:	4b4c      	ldr	r3, [pc, #304]	@ (800b510 <USBD_SetConfig+0x148>)
 800b3de:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b3e0:	4b4b      	ldr	r3, [pc, #300]	@ (800b510 <USBD_SetConfig+0x148>)
 800b3e2:	781b      	ldrb	r3, [r3, #0]
 800b3e4:	2b01      	cmp	r3, #1
 800b3e6:	d905      	bls.n	800b3f4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b3e8:	6839      	ldr	r1, [r7, #0]
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f000 f96c 	bl	800b6c8 <USBD_CtlError>
    return USBD_FAIL;
 800b3f0:	2303      	movs	r3, #3
 800b3f2:	e088      	b.n	800b506 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b3fa:	b2db      	uxtb	r3, r3
 800b3fc:	2b02      	cmp	r3, #2
 800b3fe:	d002      	beq.n	800b406 <USBD_SetConfig+0x3e>
 800b400:	2b03      	cmp	r3, #3
 800b402:	d025      	beq.n	800b450 <USBD_SetConfig+0x88>
 800b404:	e071      	b.n	800b4ea <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b406:	4b42      	ldr	r3, [pc, #264]	@ (800b510 <USBD_SetConfig+0x148>)
 800b408:	781b      	ldrb	r3, [r3, #0]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d01c      	beq.n	800b448 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800b40e:	4b40      	ldr	r3, [pc, #256]	@ (800b510 <USBD_SetConfig+0x148>)
 800b410:	781b      	ldrb	r3, [r3, #0]
 800b412:	461a      	mov	r2, r3
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b418:	4b3d      	ldr	r3, [pc, #244]	@ (800b510 <USBD_SetConfig+0x148>)
 800b41a:	781b      	ldrb	r3, [r3, #0]
 800b41c:	4619      	mov	r1, r3
 800b41e:	6878      	ldr	r0, [r7, #4]
 800b420:	f7ff f93b 	bl	800a69a <USBD_SetClassConfig>
 800b424:	4603      	mov	r3, r0
 800b426:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b428:	7bfb      	ldrb	r3, [r7, #15]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d004      	beq.n	800b438 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800b42e:	6839      	ldr	r1, [r7, #0]
 800b430:	6878      	ldr	r0, [r7, #4]
 800b432:	f000 f949 	bl	800b6c8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b436:	e065      	b.n	800b504 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b438:	6878      	ldr	r0, [r7, #4]
 800b43a:	f000 fa10 	bl	800b85e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	2203      	movs	r2, #3
 800b442:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b446:	e05d      	b.n	800b504 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b448:	6878      	ldr	r0, [r7, #4]
 800b44a:	f000 fa08 	bl	800b85e <USBD_CtlSendStatus>
      break;
 800b44e:	e059      	b.n	800b504 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b450:	4b2f      	ldr	r3, [pc, #188]	@ (800b510 <USBD_SetConfig+0x148>)
 800b452:	781b      	ldrb	r3, [r3, #0]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d112      	bne.n	800b47e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2202      	movs	r2, #2
 800b45c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b460:	4b2b      	ldr	r3, [pc, #172]	@ (800b510 <USBD_SetConfig+0x148>)
 800b462:	781b      	ldrb	r3, [r3, #0]
 800b464:	461a      	mov	r2, r3
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b46a:	4b29      	ldr	r3, [pc, #164]	@ (800b510 <USBD_SetConfig+0x148>)
 800b46c:	781b      	ldrb	r3, [r3, #0]
 800b46e:	4619      	mov	r1, r3
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f7ff f92e 	bl	800a6d2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b476:	6878      	ldr	r0, [r7, #4]
 800b478:	f000 f9f1 	bl	800b85e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b47c:	e042      	b.n	800b504 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800b47e:	4b24      	ldr	r3, [pc, #144]	@ (800b510 <USBD_SetConfig+0x148>)
 800b480:	781b      	ldrb	r3, [r3, #0]
 800b482:	461a      	mov	r2, r3
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	685b      	ldr	r3, [r3, #4]
 800b488:	429a      	cmp	r2, r3
 800b48a:	d02a      	beq.n	800b4e2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	685b      	ldr	r3, [r3, #4]
 800b490:	b2db      	uxtb	r3, r3
 800b492:	4619      	mov	r1, r3
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f7ff f91c 	bl	800a6d2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b49a:	4b1d      	ldr	r3, [pc, #116]	@ (800b510 <USBD_SetConfig+0x148>)
 800b49c:	781b      	ldrb	r3, [r3, #0]
 800b49e:	461a      	mov	r2, r3
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b4a4:	4b1a      	ldr	r3, [pc, #104]	@ (800b510 <USBD_SetConfig+0x148>)
 800b4a6:	781b      	ldrb	r3, [r3, #0]
 800b4a8:	4619      	mov	r1, r3
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	f7ff f8f5 	bl	800a69a <USBD_SetClassConfig>
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b4b4:	7bfb      	ldrb	r3, [r7, #15]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d00f      	beq.n	800b4da <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b4ba:	6839      	ldr	r1, [r7, #0]
 800b4bc:	6878      	ldr	r0, [r7, #4]
 800b4be:	f000 f903 	bl	800b6c8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	685b      	ldr	r3, [r3, #4]
 800b4c6:	b2db      	uxtb	r3, r3
 800b4c8:	4619      	mov	r1, r3
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f7ff f901 	bl	800a6d2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2202      	movs	r2, #2
 800b4d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b4d8:	e014      	b.n	800b504 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b4da:	6878      	ldr	r0, [r7, #4]
 800b4dc:	f000 f9bf 	bl	800b85e <USBD_CtlSendStatus>
      break;
 800b4e0:	e010      	b.n	800b504 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	f000 f9bb 	bl	800b85e <USBD_CtlSendStatus>
      break;
 800b4e8:	e00c      	b.n	800b504 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b4ea:	6839      	ldr	r1, [r7, #0]
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f000 f8eb 	bl	800b6c8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b4f2:	4b07      	ldr	r3, [pc, #28]	@ (800b510 <USBD_SetConfig+0x148>)
 800b4f4:	781b      	ldrb	r3, [r3, #0]
 800b4f6:	4619      	mov	r1, r3
 800b4f8:	6878      	ldr	r0, [r7, #4]
 800b4fa:	f7ff f8ea 	bl	800a6d2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b4fe:	2303      	movs	r3, #3
 800b500:	73fb      	strb	r3, [r7, #15]
      break;
 800b502:	bf00      	nop
  }

  return ret;
 800b504:	7bfb      	ldrb	r3, [r7, #15]
}
 800b506:	4618      	mov	r0, r3
 800b508:	3710      	adds	r7, #16
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bd80      	pop	{r7, pc}
 800b50e:	bf00      	nop
 800b510:	200026ac 	.word	0x200026ac

0800b514 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b082      	sub	sp, #8
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
 800b51c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	88db      	ldrh	r3, [r3, #6]
 800b522:	2b01      	cmp	r3, #1
 800b524:	d004      	beq.n	800b530 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b526:	6839      	ldr	r1, [r7, #0]
 800b528:	6878      	ldr	r0, [r7, #4]
 800b52a:	f000 f8cd 	bl	800b6c8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b52e:	e023      	b.n	800b578 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b536:	b2db      	uxtb	r3, r3
 800b538:	2b02      	cmp	r3, #2
 800b53a:	dc02      	bgt.n	800b542 <USBD_GetConfig+0x2e>
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	dc03      	bgt.n	800b548 <USBD_GetConfig+0x34>
 800b540:	e015      	b.n	800b56e <USBD_GetConfig+0x5a>
 800b542:	2b03      	cmp	r3, #3
 800b544:	d00b      	beq.n	800b55e <USBD_GetConfig+0x4a>
 800b546:	e012      	b.n	800b56e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2200      	movs	r2, #0
 800b54c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	3308      	adds	r3, #8
 800b552:	2201      	movs	r2, #1
 800b554:	4619      	mov	r1, r3
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f000 f927 	bl	800b7aa <USBD_CtlSendData>
        break;
 800b55c:	e00c      	b.n	800b578 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	3304      	adds	r3, #4
 800b562:	2201      	movs	r2, #1
 800b564:	4619      	mov	r1, r3
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f000 f91f 	bl	800b7aa <USBD_CtlSendData>
        break;
 800b56c:	e004      	b.n	800b578 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b56e:	6839      	ldr	r1, [r7, #0]
 800b570:	6878      	ldr	r0, [r7, #4]
 800b572:	f000 f8a9 	bl	800b6c8 <USBD_CtlError>
        break;
 800b576:	bf00      	nop
}
 800b578:	bf00      	nop
 800b57a:	3708      	adds	r7, #8
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bd80      	pop	{r7, pc}

0800b580 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b082      	sub	sp, #8
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
 800b588:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b590:	b2db      	uxtb	r3, r3
 800b592:	3b01      	subs	r3, #1
 800b594:	2b02      	cmp	r3, #2
 800b596:	d81e      	bhi.n	800b5d6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	88db      	ldrh	r3, [r3, #6]
 800b59c:	2b02      	cmp	r3, #2
 800b59e:	d004      	beq.n	800b5aa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b5a0:	6839      	ldr	r1, [r7, #0]
 800b5a2:	6878      	ldr	r0, [r7, #4]
 800b5a4:	f000 f890 	bl	800b6c8 <USBD_CtlError>
        break;
 800b5a8:	e01a      	b.n	800b5e0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2201      	movs	r2, #1
 800b5ae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d005      	beq.n	800b5c6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	68db      	ldr	r3, [r3, #12]
 800b5be:	f043 0202 	orr.w	r2, r3, #2
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	330c      	adds	r3, #12
 800b5ca:	2202      	movs	r2, #2
 800b5cc:	4619      	mov	r1, r3
 800b5ce:	6878      	ldr	r0, [r7, #4]
 800b5d0:	f000 f8eb 	bl	800b7aa <USBD_CtlSendData>
      break;
 800b5d4:	e004      	b.n	800b5e0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b5d6:	6839      	ldr	r1, [r7, #0]
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f000 f875 	bl	800b6c8 <USBD_CtlError>
      break;
 800b5de:	bf00      	nop
  }
}
 800b5e0:	bf00      	nop
 800b5e2:	3708      	adds	r7, #8
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}

0800b5e8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b082      	sub	sp, #8
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
 800b5f0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	885b      	ldrh	r3, [r3, #2]
 800b5f6:	2b01      	cmp	r3, #1
 800b5f8:	d106      	bne.n	800b608 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2201      	movs	r2, #1
 800b5fe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f000 f92b 	bl	800b85e <USBD_CtlSendStatus>
  }
}
 800b608:	bf00      	nop
 800b60a:	3708      	adds	r7, #8
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bd80      	pop	{r7, pc}

0800b610 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b082      	sub	sp, #8
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b620:	b2db      	uxtb	r3, r3
 800b622:	3b01      	subs	r3, #1
 800b624:	2b02      	cmp	r3, #2
 800b626:	d80b      	bhi.n	800b640 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	885b      	ldrh	r3, [r3, #2]
 800b62c:	2b01      	cmp	r3, #1
 800b62e:	d10c      	bne.n	800b64a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2200      	movs	r2, #0
 800b634:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f000 f910 	bl	800b85e <USBD_CtlSendStatus>
      }
      break;
 800b63e:	e004      	b.n	800b64a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b640:	6839      	ldr	r1, [r7, #0]
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f000 f840 	bl	800b6c8 <USBD_CtlError>
      break;
 800b648:	e000      	b.n	800b64c <USBD_ClrFeature+0x3c>
      break;
 800b64a:	bf00      	nop
  }
}
 800b64c:	bf00      	nop
 800b64e:	3708      	adds	r7, #8
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}

0800b654 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b084      	sub	sp, #16
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
 800b65c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	781a      	ldrb	r2, [r3, #0]
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	3301      	adds	r3, #1
 800b66e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	781a      	ldrb	r2, [r3, #0]
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	3301      	adds	r3, #1
 800b67c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b67e:	68f8      	ldr	r0, [r7, #12]
 800b680:	f7ff faa9 	bl	800abd6 <SWAPBYTE>
 800b684:	4603      	mov	r3, r0
 800b686:	461a      	mov	r2, r3
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	3301      	adds	r3, #1
 800b690:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	3301      	adds	r3, #1
 800b696:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b698:	68f8      	ldr	r0, [r7, #12]
 800b69a:	f7ff fa9c 	bl	800abd6 <SWAPBYTE>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	461a      	mov	r2, r3
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	3301      	adds	r3, #1
 800b6aa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	3301      	adds	r3, #1
 800b6b0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b6b2:	68f8      	ldr	r0, [r7, #12]
 800b6b4:	f7ff fa8f 	bl	800abd6 <SWAPBYTE>
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	461a      	mov	r2, r3
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	80da      	strh	r2, [r3, #6]
}
 800b6c0:	bf00      	nop
 800b6c2:	3710      	adds	r7, #16
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}

0800b6c8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b082      	sub	sp, #8
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
 800b6d0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b6d2:	2180      	movs	r1, #128	@ 0x80
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f000 fabf 	bl	800bc58 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b6da:	2100      	movs	r1, #0
 800b6dc:	6878      	ldr	r0, [r7, #4]
 800b6de:	f000 fabb 	bl	800bc58 <USBD_LL_StallEP>
}
 800b6e2:	bf00      	nop
 800b6e4:	3708      	adds	r7, #8
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}

0800b6ea <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b6ea:	b580      	push	{r7, lr}
 800b6ec:	b086      	sub	sp, #24
 800b6ee:	af00      	add	r7, sp, #0
 800b6f0:	60f8      	str	r0, [r7, #12]
 800b6f2:	60b9      	str	r1, [r7, #8]
 800b6f4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d036      	beq.n	800b76e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b704:	6938      	ldr	r0, [r7, #16]
 800b706:	f000 f836 	bl	800b776 <USBD_GetLen>
 800b70a:	4603      	mov	r3, r0
 800b70c:	3301      	adds	r3, #1
 800b70e:	b29b      	uxth	r3, r3
 800b710:	005b      	lsls	r3, r3, #1
 800b712:	b29a      	uxth	r2, r3
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b718:	7dfb      	ldrb	r3, [r7, #23]
 800b71a:	68ba      	ldr	r2, [r7, #8]
 800b71c:	4413      	add	r3, r2
 800b71e:	687a      	ldr	r2, [r7, #4]
 800b720:	7812      	ldrb	r2, [r2, #0]
 800b722:	701a      	strb	r2, [r3, #0]
  idx++;
 800b724:	7dfb      	ldrb	r3, [r7, #23]
 800b726:	3301      	adds	r3, #1
 800b728:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b72a:	7dfb      	ldrb	r3, [r7, #23]
 800b72c:	68ba      	ldr	r2, [r7, #8]
 800b72e:	4413      	add	r3, r2
 800b730:	2203      	movs	r2, #3
 800b732:	701a      	strb	r2, [r3, #0]
  idx++;
 800b734:	7dfb      	ldrb	r3, [r7, #23]
 800b736:	3301      	adds	r3, #1
 800b738:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b73a:	e013      	b.n	800b764 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b73c:	7dfb      	ldrb	r3, [r7, #23]
 800b73e:	68ba      	ldr	r2, [r7, #8]
 800b740:	4413      	add	r3, r2
 800b742:	693a      	ldr	r2, [r7, #16]
 800b744:	7812      	ldrb	r2, [r2, #0]
 800b746:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b748:	693b      	ldr	r3, [r7, #16]
 800b74a:	3301      	adds	r3, #1
 800b74c:	613b      	str	r3, [r7, #16]
    idx++;
 800b74e:	7dfb      	ldrb	r3, [r7, #23]
 800b750:	3301      	adds	r3, #1
 800b752:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b754:	7dfb      	ldrb	r3, [r7, #23]
 800b756:	68ba      	ldr	r2, [r7, #8]
 800b758:	4413      	add	r3, r2
 800b75a:	2200      	movs	r2, #0
 800b75c:	701a      	strb	r2, [r3, #0]
    idx++;
 800b75e:	7dfb      	ldrb	r3, [r7, #23]
 800b760:	3301      	adds	r3, #1
 800b762:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b764:	693b      	ldr	r3, [r7, #16]
 800b766:	781b      	ldrb	r3, [r3, #0]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d1e7      	bne.n	800b73c <USBD_GetString+0x52>
 800b76c:	e000      	b.n	800b770 <USBD_GetString+0x86>
    return;
 800b76e:	bf00      	nop
  }
}
 800b770:	3718      	adds	r7, #24
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}

0800b776 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b776:	b480      	push	{r7}
 800b778:	b085      	sub	sp, #20
 800b77a:	af00      	add	r7, sp, #0
 800b77c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b77e:	2300      	movs	r3, #0
 800b780:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b786:	e005      	b.n	800b794 <USBD_GetLen+0x1e>
  {
    len++;
 800b788:	7bfb      	ldrb	r3, [r7, #15]
 800b78a:	3301      	adds	r3, #1
 800b78c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	3301      	adds	r3, #1
 800b792:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	781b      	ldrb	r3, [r3, #0]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d1f5      	bne.n	800b788 <USBD_GetLen+0x12>
  }

  return len;
 800b79c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b79e:	4618      	mov	r0, r3
 800b7a0:	3714      	adds	r7, #20
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a8:	4770      	bx	lr

0800b7aa <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b7aa:	b580      	push	{r7, lr}
 800b7ac:	b084      	sub	sp, #16
 800b7ae:	af00      	add	r7, sp, #0
 800b7b0:	60f8      	str	r0, [r7, #12]
 800b7b2:	60b9      	str	r1, [r7, #8]
 800b7b4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	2202      	movs	r2, #2
 800b7ba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	687a      	ldr	r2, [r7, #4]
 800b7c2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	687a      	ldr	r2, [r7, #4]
 800b7c8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	68ba      	ldr	r2, [r7, #8]
 800b7ce:	2100      	movs	r1, #0
 800b7d0:	68f8      	ldr	r0, [r7, #12]
 800b7d2:	f000 faca 	bl	800bd6a <USBD_LL_Transmit>

  return USBD_OK;
 800b7d6:	2300      	movs	r3, #0
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	3710      	adds	r7, #16
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd80      	pop	{r7, pc}

0800b7e0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b084      	sub	sp, #16
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	60f8      	str	r0, [r7, #12]
 800b7e8:	60b9      	str	r1, [r7, #8]
 800b7ea:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	68ba      	ldr	r2, [r7, #8]
 800b7f0:	2100      	movs	r1, #0
 800b7f2:	68f8      	ldr	r0, [r7, #12]
 800b7f4:	f000 fab9 	bl	800bd6a <USBD_LL_Transmit>

  return USBD_OK;
 800b7f8:	2300      	movs	r3, #0
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	3710      	adds	r7, #16
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd80      	pop	{r7, pc}

0800b802 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b802:	b580      	push	{r7, lr}
 800b804:	b084      	sub	sp, #16
 800b806:	af00      	add	r7, sp, #0
 800b808:	60f8      	str	r0, [r7, #12]
 800b80a:	60b9      	str	r1, [r7, #8]
 800b80c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	2203      	movs	r2, #3
 800b812:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	687a      	ldr	r2, [r7, #4]
 800b81a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	687a      	ldr	r2, [r7, #4]
 800b822:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	68ba      	ldr	r2, [r7, #8]
 800b82a:	2100      	movs	r1, #0
 800b82c:	68f8      	ldr	r0, [r7, #12]
 800b82e:	f000 fabd 	bl	800bdac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b832:	2300      	movs	r3, #0
}
 800b834:	4618      	mov	r0, r3
 800b836:	3710      	adds	r7, #16
 800b838:	46bd      	mov	sp, r7
 800b83a:	bd80      	pop	{r7, pc}

0800b83c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b084      	sub	sp, #16
 800b840:	af00      	add	r7, sp, #0
 800b842:	60f8      	str	r0, [r7, #12]
 800b844:	60b9      	str	r1, [r7, #8]
 800b846:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	68ba      	ldr	r2, [r7, #8]
 800b84c:	2100      	movs	r1, #0
 800b84e:	68f8      	ldr	r0, [r7, #12]
 800b850:	f000 faac 	bl	800bdac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b854:	2300      	movs	r3, #0
}
 800b856:	4618      	mov	r0, r3
 800b858:	3710      	adds	r7, #16
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}

0800b85e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b85e:	b580      	push	{r7, lr}
 800b860:	b082      	sub	sp, #8
 800b862:	af00      	add	r7, sp, #0
 800b864:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	2204      	movs	r2, #4
 800b86a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b86e:	2300      	movs	r3, #0
 800b870:	2200      	movs	r2, #0
 800b872:	2100      	movs	r1, #0
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	f000 fa78 	bl	800bd6a <USBD_LL_Transmit>

  return USBD_OK;
 800b87a:	2300      	movs	r3, #0
}
 800b87c:	4618      	mov	r0, r3
 800b87e:	3708      	adds	r7, #8
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}

0800b884 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b082      	sub	sp, #8
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2205      	movs	r2, #5
 800b890:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b894:	2300      	movs	r3, #0
 800b896:	2200      	movs	r2, #0
 800b898:	2100      	movs	r1, #0
 800b89a:	6878      	ldr	r0, [r7, #4]
 800b89c:	f000 fa86 	bl	800bdac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b8a0:	2300      	movs	r3, #0
}
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	3708      	adds	r7, #8
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bd80      	pop	{r7, pc}

0800b8aa <HAL_PCDEx_SetTxFiFoInBytes>:
/* Private functions ---------------------------------------------------------*/

/* USER CODE BEGIN 1 */
#if(!STM32F1_DEVICE)
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFoInBytes(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800b8aa:	b580      	push	{r7, lr}
 800b8ac:	b082      	sub	sp, #8
 800b8ae:	af00      	add	r7, sp, #0
 800b8b0:	6078      	str	r0, [r7, #4]
 800b8b2:	460b      	mov	r3, r1
 800b8b4:	70fb      	strb	r3, [r7, #3]
 800b8b6:	4613      	mov	r3, r2
 800b8b8:	803b      	strh	r3, [r7, #0]
	return HAL_PCDEx_SetTxFiFo(hpcd, fifo, (size/4));
 800b8ba:	883b      	ldrh	r3, [r7, #0]
 800b8bc:	089b      	lsrs	r3, r3, #2
 800b8be:	b29a      	uxth	r2, r3
 800b8c0:	78fb      	ldrb	r3, [r7, #3]
 800b8c2:	4619      	mov	r1, r3
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f7f8 ffff 	bl	80048c8 <HAL_PCDEx_SetTxFiFo>
 800b8ca:	4603      	mov	r3, r0
}
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	3708      	adds	r7, #8
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}

0800b8d4 <HAL_PCDEx_SetRxFiFoInBytes>:

HAL_StatusTypeDef HAL_PCDEx_SetRxFiFoInBytes(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b082      	sub	sp, #8
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
 800b8dc:	460b      	mov	r3, r1
 800b8de:	807b      	strh	r3, [r7, #2]
	return HAL_PCDEx_SetRxFiFo(hpcd, (size/4));
 800b8e0:	887b      	ldrh	r3, [r7, #2]
 800b8e2:	089b      	lsrs	r3, r3, #2
 800b8e4:	b29b      	uxth	r3, r3
 800b8e6:	4619      	mov	r1, r3
 800b8e8:	6878      	ldr	r0, [r7, #4]
 800b8ea:	f7f9 f834 	bl	8004956 <HAL_PCDEx_SetRxFiFo>
 800b8ee:	4603      	mov	r3, r0
}
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	3708      	adds	r7, #8
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	bd80      	pop	{r7, pc}

0800b8f8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b082      	sub	sp, #8
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef *)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b90c:	4619      	mov	r1, r3
 800b90e:	4610      	mov	r0, r2
 800b910:	f7fe fef7 	bl	800a702 <USBD_LL_SetupStage>
}
 800b914:	bf00      	nop
 800b916:	3708      	adds	r7, #8
 800b918:	46bd      	mov	sp, r7
 800b91a:	bd80      	pop	{r7, pc}

0800b91c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b082      	sub	sp, #8
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
 800b924:	460b      	mov	r3, r1
 800b926:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b92e:	78fa      	ldrb	r2, [r7, #3]
 800b930:	6879      	ldr	r1, [r7, #4]
 800b932:	4613      	mov	r3, r2
 800b934:	00db      	lsls	r3, r3, #3
 800b936:	4413      	add	r3, r2
 800b938:	009b      	lsls	r3, r3, #2
 800b93a:	440b      	add	r3, r1
 800b93c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b940:	681a      	ldr	r2, [r3, #0]
 800b942:	78fb      	ldrb	r3, [r7, #3]
 800b944:	4619      	mov	r1, r3
 800b946:	f7fe ff31 	bl	800a7ac <USBD_LL_DataOutStage>
}
 800b94a:	bf00      	nop
 800b94c:	3708      	adds	r7, #8
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd80      	pop	{r7, pc}

0800b952 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b952:	b580      	push	{r7, lr}
 800b954:	b082      	sub	sp, #8
 800b956:	af00      	add	r7, sp, #0
 800b958:	6078      	str	r0, [r7, #4]
 800b95a:	460b      	mov	r3, r1
 800b95c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b964:	78fa      	ldrb	r2, [r7, #3]
 800b966:	6879      	ldr	r1, [r7, #4]
 800b968:	4613      	mov	r3, r2
 800b96a:	00db      	lsls	r3, r3, #3
 800b96c:	4413      	add	r3, r2
 800b96e:	009b      	lsls	r3, r3, #2
 800b970:	440b      	add	r3, r1
 800b972:	3320      	adds	r3, #32
 800b974:	681a      	ldr	r2, [r3, #0]
 800b976:	78fb      	ldrb	r3, [r7, #3]
 800b978:	4619      	mov	r1, r3
 800b97a:	f7fe ff7a 	bl	800a872 <USBD_LL_DataInStage>
}
 800b97e:	bf00      	nop
 800b980:	3708      	adds	r7, #8
 800b982:	46bd      	mov	sp, r7
 800b984:	bd80      	pop	{r7, pc}

0800b986 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b986:	b580      	push	{r7, lr}
 800b988:	b082      	sub	sp, #8
 800b98a:	af00      	add	r7, sp, #0
 800b98c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef *)hpcd->pData);
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b994:	4618      	mov	r0, r3
 800b996:	f7ff f889 	bl	800aaac <USBD_LL_SOF>
}
 800b99a:	bf00      	nop
 800b99c:	3708      	adds	r7, #8
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd80      	pop	{r7, pc}

0800b9a2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9a2:	b580      	push	{r7, lr}
 800b9a4:	b084      	sub	sp, #16
 800b9a6:	af00      	add	r7, sp, #0
 800b9a8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b9aa:	2301      	movs	r3, #1
 800b9ac:	73fb      	strb	r3, [r7, #15]

  if (hpcd->Init.speed == PCD_SPEED_FULL)
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	79db      	ldrb	r3, [r3, #7]
 800b9b2:	2b02      	cmp	r3, #2
 800b9b4:	d102      	bne.n	800b9bc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_FULL; 
 800b9b6:	2301      	movs	r3, #1
 800b9b8:	73fb      	strb	r3, [r7, #15]
 800b9ba:	e008      	b.n	800b9ce <HAL_PCD_ResetCallback+0x2c>
  }
  #if(!STM32F1_DEVICE)
  else if (hpcd->Init.speed == PCD_SPEED_HIGH)
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	79db      	ldrb	r3, [r3, #7]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d102      	bne.n	800b9ca <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_HIGH;
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	73fb      	strb	r3, [r7, #15]
 800b9c8:	e001      	b.n	800b9ce <HAL_PCD_ResetCallback+0x2c>
  }
  #endif
  else
  {
    Error_Handler();
 800b9ca:	f7f5 f923 	bl	8000c14 <Error_Handler>
  }
  /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef *)hpcd->pData, speed);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b9d4:	7bfa      	ldrb	r2, [r7, #15]
 800b9d6:	4611      	mov	r1, r2
 800b9d8:	4618      	mov	r0, r3
 800b9da:	f7ff f829 	bl	800aa30 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef *)hpcd->pData);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	f7fe ffda 	bl	800a99e <USBD_LL_Reset>
}
 800b9ea:	bf00      	nop
 800b9ec:	3710      	adds	r7, #16
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}
	...

0800b9f4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b082      	sub	sp, #8
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef *)hpcd->pData);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ba02:	4618      	mov	r0, r3
 800ba04:	f7ff f824 	bl	800aa50 <USBD_LL_Suspend>
#if (!STM32F1_DEVICE)
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	687a      	ldr	r2, [r7, #4]
 800ba14:	6812      	ldr	r2, [r2, #0]
 800ba16:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ba1a:	f043 0301 	orr.w	r3, r3, #1
 800ba1e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	7adb      	ldrb	r3, [r3, #11]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d005      	beq.n	800ba34 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ba28:	4b04      	ldr	r3, [pc, #16]	@ (800ba3c <HAL_PCD_SuspendCallback+0x48>)
 800ba2a:	691b      	ldr	r3, [r3, #16]
 800ba2c:	4a03      	ldr	r2, [pc, #12]	@ (800ba3c <HAL_PCD_SuspendCallback+0x48>)
 800ba2e:	f043 0306 	orr.w	r3, r3, #6
 800ba32:	6113      	str	r3, [r2, #16]
  }
#endif
  /* USER CODE END 2 */
}
 800ba34:	bf00      	nop
 800ba36:	3708      	adds	r7, #8
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}
 800ba3c:	e000ed00 	.word	0xe000ed00

0800ba40 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b082      	sub	sp, #8
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef *)hpcd->pData);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f7ff f814 	bl	800aa7c <USBD_LL_Resume>
}
 800ba54:	bf00      	nop
 800ba56:	3708      	adds	r7, #8
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bd80      	pop	{r7, pc}

0800ba5c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b082      	sub	sp, #8
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
 800ba64:	460b      	mov	r3, r1
 800ba66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ba6e:	78fa      	ldrb	r2, [r7, #3]
 800ba70:	4611      	mov	r1, r2
 800ba72:	4618      	mov	r0, r3
 800ba74:	f7ff f862 	bl	800ab3c <USBD_LL_IsoOUTIncomplete>
}
 800ba78:	bf00      	nop
 800ba7a:	3708      	adds	r7, #8
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	bd80      	pop	{r7, pc}

0800ba80 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b082      	sub	sp, #8
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
 800ba88:	460b      	mov	r3, r1
 800ba8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ba92:	78fa      	ldrb	r2, [r7, #3]
 800ba94:	4611      	mov	r1, r2
 800ba96:	4618      	mov	r0, r3
 800ba98:	f7ff f82a 	bl	800aaf0 <USBD_LL_IsoINIncomplete>
}
 800ba9c:	bf00      	nop
 800ba9e:	3708      	adds	r7, #8
 800baa0:	46bd      	mov	sp, r7
 800baa2:	bd80      	pop	{r7, pc}

0800baa4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b082      	sub	sp, #8
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef *)hpcd->pData);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bab2:	4618      	mov	r0, r3
 800bab4:	f7ff f868 	bl	800ab88 <USBD_LL_DevConnected>
}
 800bab8:	bf00      	nop
 800baba:	3708      	adds	r7, #8
 800babc:	46bd      	mov	sp, r7
 800babe:	bd80      	pop	{r7, pc}

0800bac0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b082      	sub	sp, #8
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef *)hpcd->pData);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bace:	4618      	mov	r0, r3
 800bad0:	f7ff f865 	bl	800ab9e <USBD_LL_DevDisconnected>
}
 800bad4:	bf00      	nop
 800bad6:	3708      	adds	r7, #8
 800bad8:	46bd      	mov	sp, r7
 800bada:	bd80      	pop	{r7, pc}

0800badc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b084      	sub	sp, #16
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
#else
  /**FULL SPEED USB */
#if (STM32F1_DEVICE) /** for STM32F1 or similar */
  hpcd_USB_OTG_PTR = &hpcd_USB_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
#else
  hpcd_USB_OTG_PTR = &hpcd_USB_OTG_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
 800bae4:	4b27      	ldr	r3, [pc, #156]	@ (800bb84 <USBD_LL_Init+0xa8>)
 800bae6:	4a28      	ldr	r2, [pc, #160]	@ (800bb88 <USBD_LL_Init+0xac>)
 800bae8:	601a      	str	r2, [r3, #0]
#endif

  if (pdev->id == DEVICE_FS)
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	781b      	ldrb	r3, [r3, #0]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d143      	bne.n	800bb7a <USBD_LL_Init+0x9e>
  {
    /* Link the driver to the stack. */
    hpcd_USB_OTG_PTR->pData = pdev;
 800baf2:	4b24      	ldr	r3, [pc, #144]	@ (800bb84 <USBD_LL_Init+0xa8>)
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	687a      	ldr	r2, [r7, #4]
 800baf8:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
    pdev->pData = hpcd_USB_OTG_PTR;
 800bafc:	4b21      	ldr	r3, [pc, #132]	@ (800bb84 <USBD_LL_Init+0xa8>)
 800bafe:	681a      	ldr	r2, [r3, #0]
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	f8c3 2310 	str.w	r2, [r3, #784]	@ 0x310
      pma_track += 8;
    }
#endif
#else /** if HAL_PCDEx_SetRxFiFo() is used by HAL driver */

    HAL_PCDEx_SetRxFiFoInBytes(hpcd_USB_OTG_PTR, 512); // ALL OUT EP Buffer
 800bb06:	4b1f      	ldr	r3, [pc, #124]	@ (800bb84 <USBD_LL_Init+0xa8>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bb0e:	4618      	mov	r0, r3
 800bb10:	f7ff fee0 	bl	800b8d4 <HAL_PCDEx_SetRxFiFoInBytes>

    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, 0, 64); // EP0 IN
 800bb14:	4b1b      	ldr	r3, [pc, #108]	@ (800bb84 <USBD_LL_Init+0xa8>)
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	2240      	movs	r2, #64	@ 0x40
 800bb1a:	2100      	movs	r1, #0
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	f7ff fec4 	bl	800b8aa <HAL_PCDEx_SetTxFiFoInBytes>
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (HID_KEYBOARD_IN_EP & 0x7F), 64);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CUSTOM_HID_IN_EP & 0x7F), 64);
 800bb22:	4b18      	ldr	r3, [pc, #96]	@ (800bb84 <USBD_LL_Init+0xa8>)
 800bb24:	6818      	ldr	r0, [r3, #0]
 800bb26:	4b19      	ldr	r3, [pc, #100]	@ (800bb8c <USBD_LL_Init+0xb0>)
 800bb28:	781b      	ldrb	r3, [r3, #0]
 800bb2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb2e:	b2db      	uxtb	r3, r3
 800bb30:	2240      	movs	r2, #64	@ 0x40
 800bb32:	4619      	mov	r1, r3
 800bb34:	f7ff feb9 	bl	800b8aa <HAL_PCDEx_SetTxFiFoInBytes>
#endif
#if (USBD_USE_PRNTR == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (PRNT_IN_EP & 0x7F), 128);
#endif
#if (USBD_USE_CDC_ACM == 1)
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800bb38:	2300      	movs	r3, #0
 800bb3a:	73fb      	strb	r3, [r7, #15]
 800bb3c:	e01a      	b.n	800bb74 <USBD_LL_Init+0x98>
    {
      HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CDC_IN_EP[i] & 0x7F), 128);
 800bb3e:	4b11      	ldr	r3, [pc, #68]	@ (800bb84 <USBD_LL_Init+0xa8>)
 800bb40:	6818      	ldr	r0, [r3, #0]
 800bb42:	7bfb      	ldrb	r3, [r7, #15]
 800bb44:	4a12      	ldr	r2, [pc, #72]	@ (800bb90 <USBD_LL_Init+0xb4>)
 800bb46:	5cd3      	ldrb	r3, [r2, r3]
 800bb48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb4c:	b2db      	uxtb	r3, r3
 800bb4e:	2280      	movs	r2, #128	@ 0x80
 800bb50:	4619      	mov	r1, r3
 800bb52:	f7ff feaa 	bl	800b8aa <HAL_PCDEx_SetTxFiFoInBytes>
      HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CDC_CMD_EP[i] & 0x7F), 64);
 800bb56:	4b0b      	ldr	r3, [pc, #44]	@ (800bb84 <USBD_LL_Init+0xa8>)
 800bb58:	6818      	ldr	r0, [r3, #0]
 800bb5a:	7bfb      	ldrb	r3, [r7, #15]
 800bb5c:	4a0d      	ldr	r2, [pc, #52]	@ (800bb94 <USBD_LL_Init+0xb8>)
 800bb5e:	5cd3      	ldrb	r3, [r2, r3]
 800bb60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb64:	b2db      	uxtb	r3, r3
 800bb66:	2240      	movs	r2, #64	@ 0x40
 800bb68:	4619      	mov	r1, r3
 800bb6a:	f7ff fe9e 	bl	800b8aa <HAL_PCDEx_SetTxFiFoInBytes>
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800bb6e:	7bfb      	ldrb	r3, [r7, #15]
 800bb70:	3301      	adds	r3, #1
 800bb72:	73fb      	strb	r3, [r7, #15]
 800bb74:	7bfb      	ldrb	r3, [r7, #15]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d0e1      	beq.n	800bb3e <USBD_LL_Init+0x62>
  HAL_PCD_RegisterDataOutStageCallback(hpcd_USB_OTG_PTR, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(hpcd_USB_OTG_PTR, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  return USBD_OK;
 800bb7a:	2300      	movs	r3, #0
}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	3710      	adds	r7, #16
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}
 800bb84:	200026b0 	.word	0x200026b0
 800bb88:	20000664 	.word	0x20000664
 800bb8c:	200001da 	.word	0x200001da
 800bb90:	20002308 	.word	0x20002308
 800bb94:	20002310 	.word	0x20002310

0800bb98 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b084      	sub	sp, #16
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bba0:	2300      	movs	r3, #0
 800bba2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bba4:	2300      	movs	r3, #0
 800bba6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f7f7 fdab 	bl	800370a <HAL_PCD_Start>
 800bbb4:	4603      	mov	r3, r0
 800bbb6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800bbb8:	7bfb      	ldrb	r3, [r7, #15]
 800bbba:	4618      	mov	r0, r3
 800bbbc:	f000 f92a 	bl	800be14 <USBD_Get_USB_Status>
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bbc4:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	3710      	adds	r7, #16
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}

0800bbce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bbce:	b580      	push	{r7, lr}
 800bbd0:	b084      	sub	sp, #16
 800bbd2:	af00      	add	r7, sp, #0
 800bbd4:	6078      	str	r0, [r7, #4]
 800bbd6:	4608      	mov	r0, r1
 800bbd8:	4611      	mov	r1, r2
 800bbda:	461a      	mov	r2, r3
 800bbdc:	4603      	mov	r3, r0
 800bbde:	70fb      	strb	r3, [r7, #3]
 800bbe0:	460b      	mov	r3, r1
 800bbe2:	70bb      	strb	r3, [r7, #2]
 800bbe4:	4613      	mov	r3, r2
 800bbe6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbe8:	2300      	movs	r3, #0
 800bbea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbec:	2300      	movs	r3, #0
 800bbee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 800bbf6:	78bb      	ldrb	r3, [r7, #2]
 800bbf8:	883a      	ldrh	r2, [r7, #0]
 800bbfa:	78f9      	ldrb	r1, [r7, #3]
 800bbfc:	f7f8 fa7f 	bl	80040fe <HAL_PCD_EP_Open>
 800bc00:	4603      	mov	r3, r0
 800bc02:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800bc04:	7bfb      	ldrb	r3, [r7, #15]
 800bc06:	4618      	mov	r0, r3
 800bc08:	f000 f904 	bl	800be14 <USBD_Get_USB_Status>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc10:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc12:	4618      	mov	r0, r3
 800bc14:	3710      	adds	r7, #16
 800bc16:	46bd      	mov	sp, r7
 800bc18:	bd80      	pop	{r7, pc}

0800bc1a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc1a:	b580      	push	{r7, lr}
 800bc1c:	b084      	sub	sp, #16
 800bc1e:	af00      	add	r7, sp, #0
 800bc20:	6078      	str	r0, [r7, #4]
 800bc22:	460b      	mov	r3, r1
 800bc24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc26:	2300      	movs	r3, #0
 800bc28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800bc34:	78fa      	ldrb	r2, [r7, #3]
 800bc36:	4611      	mov	r1, r2
 800bc38:	4618      	mov	r0, r3
 800bc3a:	f7f8 faca 	bl	80041d2 <HAL_PCD_EP_Close>
 800bc3e:	4603      	mov	r3, r0
 800bc40:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800bc42:	7bfb      	ldrb	r3, [r7, #15]
 800bc44:	4618      	mov	r0, r3
 800bc46:	f000 f8e5 	bl	800be14 <USBD_Get_USB_Status>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc4e:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc50:	4618      	mov	r0, r3
 800bc52:	3710      	adds	r7, #16
 800bc54:	46bd      	mov	sp, r7
 800bc56:	bd80      	pop	{r7, pc}

0800bc58 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b084      	sub	sp, #16
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
 800bc60:	460b      	mov	r3, r1
 800bc62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc64:	2300      	movs	r3, #0
 800bc66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc68:	2300      	movs	r3, #0
 800bc6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800bc72:	78fa      	ldrb	r2, [r7, #3]
 800bc74:	4611      	mov	r1, r2
 800bc76:	4618      	mov	r0, r3
 800bc78:	f7f8 fb82 	bl	8004380 <HAL_PCD_EP_SetStall>
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800bc80:	7bfb      	ldrb	r3, [r7, #15]
 800bc82:	4618      	mov	r0, r3
 800bc84:	f000 f8c6 	bl	800be14 <USBD_Get_USB_Status>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc8c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc8e:	4618      	mov	r0, r3
 800bc90:	3710      	adds	r7, #16
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bd80      	pop	{r7, pc}

0800bc96 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc96:	b580      	push	{r7, lr}
 800bc98:	b084      	sub	sp, #16
 800bc9a:	af00      	add	r7, sp, #0
 800bc9c:	6078      	str	r0, [r7, #4]
 800bc9e:	460b      	mov	r3, r1
 800bca0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bca2:	2300      	movs	r3, #0
 800bca4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bca6:	2300      	movs	r3, #0
 800bca8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800bcb0:	78fa      	ldrb	r2, [r7, #3]
 800bcb2:	4611      	mov	r1, r2
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f7f8 fbc6 	bl	8004446 <HAL_PCD_EP_ClrStall>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800bcbe:	7bfb      	ldrb	r3, [r7, #15]
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	f000 f8a7 	bl	800be14 <USBD_Get_USB_Status>
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bcca:	7bbb      	ldrb	r3, [r7, #14]
}
 800bccc:	4618      	mov	r0, r3
 800bcce:	3710      	adds	r7, #16
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}

0800bcd4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bcd4:	b480      	push	{r7}
 800bcd6:	b085      	sub	sp, #20
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
 800bcdc:	460b      	mov	r3, r1
 800bcde:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800bce6:	60fb      	str	r3, [r7, #12]

  if ((ep_addr & 0x80) == 0x80)
 800bce8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	da0b      	bge.n	800bd08 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bcf0:	78fb      	ldrb	r3, [r7, #3]
 800bcf2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bcf6:	68f9      	ldr	r1, [r7, #12]
 800bcf8:	4613      	mov	r3, r2
 800bcfa:	00db      	lsls	r3, r3, #3
 800bcfc:	4413      	add	r3, r2
 800bcfe:	009b      	lsls	r3, r3, #2
 800bd00:	440b      	add	r3, r1
 800bd02:	3316      	adds	r3, #22
 800bd04:	781b      	ldrb	r3, [r3, #0]
 800bd06:	e00b      	b.n	800bd20 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bd08:	78fb      	ldrb	r3, [r7, #3]
 800bd0a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bd0e:	68f9      	ldr	r1, [r7, #12]
 800bd10:	4613      	mov	r3, r2
 800bd12:	00db      	lsls	r3, r3, #3
 800bd14:	4413      	add	r3, r2
 800bd16:	009b      	lsls	r3, r3, #2
 800bd18:	440b      	add	r3, r1
 800bd1a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800bd1e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bd20:	4618      	mov	r0, r3
 800bd22:	3714      	adds	r7, #20
 800bd24:	46bd      	mov	sp, r7
 800bd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2a:	4770      	bx	lr

0800bd2c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b084      	sub	sp, #16
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
 800bd34:	460b      	mov	r3, r1
 800bd36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd38:	2300      	movs	r3, #0
 800bd3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800bd46:	78fa      	ldrb	r2, [r7, #3]
 800bd48:	4611      	mov	r1, r2
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	f7f8 f9b3 	bl	80040b6 <HAL_PCD_SetAddress>
 800bd50:	4603      	mov	r3, r0
 800bd52:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800bd54:	7bfb      	ldrb	r3, [r7, #15]
 800bd56:	4618      	mov	r0, r3
 800bd58:	f000 f85c 	bl	800be14 <USBD_Get_USB_Status>
 800bd5c:	4603      	mov	r3, r0
 800bd5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd60:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd62:	4618      	mov	r0, r3
 800bd64:	3710      	adds	r7, #16
 800bd66:	46bd      	mov	sp, r7
 800bd68:	bd80      	pop	{r7, pc}

0800bd6a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bd6a:	b580      	push	{r7, lr}
 800bd6c:	b086      	sub	sp, #24
 800bd6e:	af00      	add	r7, sp, #0
 800bd70:	60f8      	str	r0, [r7, #12]
 800bd72:	607a      	str	r2, [r7, #4]
 800bd74:	603b      	str	r3, [r7, #0]
 800bd76:	460b      	mov	r3, r1
 800bd78:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd7e:	2300      	movs	r3, #0
 800bd80:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 800bd88:	7af9      	ldrb	r1, [r7, #11]
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	687a      	ldr	r2, [r7, #4]
 800bd8e:	f7f8 fabd 	bl	800430c <HAL_PCD_EP_Transmit>
 800bd92:	4603      	mov	r3, r0
 800bd94:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 800bd96:	7dfb      	ldrb	r3, [r7, #23]
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f000 f83b 	bl	800be14 <USBD_Get_USB_Status>
 800bd9e:	4603      	mov	r3, r0
 800bda0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bda2:	7dbb      	ldrb	r3, [r7, #22]
}
 800bda4:	4618      	mov	r0, r3
 800bda6:	3718      	adds	r7, #24
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	bd80      	pop	{r7, pc}

0800bdac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b086      	sub	sp, #24
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	60f8      	str	r0, [r7, #12]
 800bdb4:	607a      	str	r2, [r7, #4]
 800bdb6:	603b      	str	r3, [r7, #0]
 800bdb8:	460b      	mov	r3, r1
 800bdba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 800bdca:	7af9      	ldrb	r1, [r7, #11]
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	687a      	ldr	r2, [r7, #4]
 800bdd0:	f7f8 fa49 	bl	8004266 <HAL_PCD_EP_Receive>
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 800bdd8:	7dfb      	ldrb	r3, [r7, #23]
 800bdda:	4618      	mov	r0, r3
 800bddc:	f000 f81a 	bl	800be14 <USBD_Get_USB_Status>
 800bde0:	4603      	mov	r3, r0
 800bde2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bde4:	7dbb      	ldrb	r3, [r7, #22]
}
 800bde6:	4618      	mov	r0, r3
 800bde8:	3718      	adds	r7, #24
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd80      	pop	{r7, pc}

0800bdee <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bdee:	b580      	push	{r7, lr}
 800bdf0:	b082      	sub	sp, #8
 800bdf2:	af00      	add	r7, sp, #0
 800bdf4:	6078      	str	r0, [r7, #4]
 800bdf6:	460b      	mov	r3, r1
 800bdf8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef *)pdev->pData, ep_addr);
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800be00:	78fa      	ldrb	r2, [r7, #3]
 800be02:	4611      	mov	r1, r2
 800be04:	4618      	mov	r0, r3
 800be06:	f7f8 fa69 	bl	80042dc <HAL_PCD_EP_GetRxCount>
 800be0a:	4603      	mov	r3, r0
}
 800be0c:	4618      	mov	r0, r3
 800be0e:	3708      	adds	r7, #8
 800be10:	46bd      	mov	sp, r7
 800be12:	bd80      	pop	{r7, pc}

0800be14 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800be14:	b480      	push	{r7}
 800be16:	b085      	sub	sp, #20
 800be18:	af00      	add	r7, sp, #0
 800be1a:	4603      	mov	r3, r0
 800be1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be1e:	2300      	movs	r3, #0
 800be20:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800be22:	79fb      	ldrb	r3, [r7, #7]
 800be24:	2b03      	cmp	r3, #3
 800be26:	d817      	bhi.n	800be58 <USBD_Get_USB_Status+0x44>
 800be28:	a201      	add	r2, pc, #4	@ (adr r2, 800be30 <USBD_Get_USB_Status+0x1c>)
 800be2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be2e:	bf00      	nop
 800be30:	0800be41 	.word	0x0800be41
 800be34:	0800be47 	.word	0x0800be47
 800be38:	0800be4d 	.word	0x0800be4d
 800be3c:	0800be53 	.word	0x0800be53
  {
  case HAL_OK:
    usb_status = USBD_OK;
 800be40:	2300      	movs	r3, #0
 800be42:	73fb      	strb	r3, [r7, #15]
    break;
 800be44:	e00b      	b.n	800be5e <USBD_Get_USB_Status+0x4a>
  case HAL_ERROR:
    usb_status = USBD_FAIL;
 800be46:	2303      	movs	r3, #3
 800be48:	73fb      	strb	r3, [r7, #15]
    break;
 800be4a:	e008      	b.n	800be5e <USBD_Get_USB_Status+0x4a>
  case HAL_BUSY:
    usb_status = USBD_BUSY;
 800be4c:	2301      	movs	r3, #1
 800be4e:	73fb      	strb	r3, [r7, #15]
    break;
 800be50:	e005      	b.n	800be5e <USBD_Get_USB_Status+0x4a>
  case HAL_TIMEOUT:
    usb_status = USBD_FAIL;
 800be52:	2303      	movs	r3, #3
 800be54:	73fb      	strb	r3, [r7, #15]
    break;
 800be56:	e002      	b.n	800be5e <USBD_Get_USB_Status+0x4a>
  default:
    usb_status = USBD_FAIL;
 800be58:	2303      	movs	r3, #3
 800be5a:	73fb      	strb	r3, [r7, #15]
    break;
 800be5c:	bf00      	nop
  }
  return usb_status;
 800be5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800be60:	4618      	mov	r0, r3
 800be62:	3714      	adds	r7, #20
 800be64:	46bd      	mov	sp, r7
 800be66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6a:	4770      	bx	lr

0800be6c <sniprintf>:
 800be6c:	b40c      	push	{r2, r3}
 800be6e:	b530      	push	{r4, r5, lr}
 800be70:	4b18      	ldr	r3, [pc, #96]	@ (800bed4 <sniprintf+0x68>)
 800be72:	1e0c      	subs	r4, r1, #0
 800be74:	681d      	ldr	r5, [r3, #0]
 800be76:	b09d      	sub	sp, #116	@ 0x74
 800be78:	da08      	bge.n	800be8c <sniprintf+0x20>
 800be7a:	238b      	movs	r3, #139	@ 0x8b
 800be7c:	602b      	str	r3, [r5, #0]
 800be7e:	f04f 30ff 	mov.w	r0, #4294967295
 800be82:	b01d      	add	sp, #116	@ 0x74
 800be84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800be88:	b002      	add	sp, #8
 800be8a:	4770      	bx	lr
 800be8c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800be90:	f8ad 3014 	strh.w	r3, [sp, #20]
 800be94:	f04f 0300 	mov.w	r3, #0
 800be98:	931b      	str	r3, [sp, #108]	@ 0x6c
 800be9a:	bf14      	ite	ne
 800be9c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bea0:	4623      	moveq	r3, r4
 800bea2:	9304      	str	r3, [sp, #16]
 800bea4:	9307      	str	r3, [sp, #28]
 800bea6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800beaa:	9002      	str	r0, [sp, #8]
 800beac:	9006      	str	r0, [sp, #24]
 800beae:	f8ad 3016 	strh.w	r3, [sp, #22]
 800beb2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800beb4:	ab21      	add	r3, sp, #132	@ 0x84
 800beb6:	a902      	add	r1, sp, #8
 800beb8:	4628      	mov	r0, r5
 800beba:	9301      	str	r3, [sp, #4]
 800bebc:	f000 f9a2 	bl	800c204 <_svfiprintf_r>
 800bec0:	1c43      	adds	r3, r0, #1
 800bec2:	bfbc      	itt	lt
 800bec4:	238b      	movlt	r3, #139	@ 0x8b
 800bec6:	602b      	strlt	r3, [r5, #0]
 800bec8:	2c00      	cmp	r4, #0
 800beca:	d0da      	beq.n	800be82 <sniprintf+0x16>
 800becc:	9b02      	ldr	r3, [sp, #8]
 800bece:	2200      	movs	r2, #0
 800bed0:	701a      	strb	r2, [r3, #0]
 800bed2:	e7d6      	b.n	800be82 <sniprintf+0x16>
 800bed4:	200002b4 	.word	0x200002b4

0800bed8 <memset>:
 800bed8:	4402      	add	r2, r0
 800beda:	4603      	mov	r3, r0
 800bedc:	4293      	cmp	r3, r2
 800bede:	d100      	bne.n	800bee2 <memset+0xa>
 800bee0:	4770      	bx	lr
 800bee2:	f803 1b01 	strb.w	r1, [r3], #1
 800bee6:	e7f9      	b.n	800bedc <memset+0x4>

0800bee8 <__errno>:
 800bee8:	4b01      	ldr	r3, [pc, #4]	@ (800bef0 <__errno+0x8>)
 800beea:	6818      	ldr	r0, [r3, #0]
 800beec:	4770      	bx	lr
 800beee:	bf00      	nop
 800bef0:	200002b4 	.word	0x200002b4

0800bef4 <__libc_init_array>:
 800bef4:	b570      	push	{r4, r5, r6, lr}
 800bef6:	4d0d      	ldr	r5, [pc, #52]	@ (800bf2c <__libc_init_array+0x38>)
 800bef8:	4c0d      	ldr	r4, [pc, #52]	@ (800bf30 <__libc_init_array+0x3c>)
 800befa:	1b64      	subs	r4, r4, r5
 800befc:	10a4      	asrs	r4, r4, #2
 800befe:	2600      	movs	r6, #0
 800bf00:	42a6      	cmp	r6, r4
 800bf02:	d109      	bne.n	800bf18 <__libc_init_array+0x24>
 800bf04:	4d0b      	ldr	r5, [pc, #44]	@ (800bf34 <__libc_init_array+0x40>)
 800bf06:	4c0c      	ldr	r4, [pc, #48]	@ (800bf38 <__libc_init_array+0x44>)
 800bf08:	f000 fc64 	bl	800c7d4 <_init>
 800bf0c:	1b64      	subs	r4, r4, r5
 800bf0e:	10a4      	asrs	r4, r4, #2
 800bf10:	2600      	movs	r6, #0
 800bf12:	42a6      	cmp	r6, r4
 800bf14:	d105      	bne.n	800bf22 <__libc_init_array+0x2e>
 800bf16:	bd70      	pop	{r4, r5, r6, pc}
 800bf18:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf1c:	4798      	blx	r3
 800bf1e:	3601      	adds	r6, #1
 800bf20:	e7ee      	b.n	800bf00 <__libc_init_array+0xc>
 800bf22:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf26:	4798      	blx	r3
 800bf28:	3601      	adds	r6, #1
 800bf2a:	e7f2      	b.n	800bf12 <__libc_init_array+0x1e>
 800bf2c:	0800c8a4 	.word	0x0800c8a4
 800bf30:	0800c8a4 	.word	0x0800c8a4
 800bf34:	0800c8a4 	.word	0x0800c8a4
 800bf38:	0800c8a8 	.word	0x0800c8a8

0800bf3c <__retarget_lock_acquire_recursive>:
 800bf3c:	4770      	bx	lr

0800bf3e <__retarget_lock_release_recursive>:
 800bf3e:	4770      	bx	lr

0800bf40 <memcpy>:
 800bf40:	440a      	add	r2, r1
 800bf42:	4291      	cmp	r1, r2
 800bf44:	f100 33ff 	add.w	r3, r0, #4294967295
 800bf48:	d100      	bne.n	800bf4c <memcpy+0xc>
 800bf4a:	4770      	bx	lr
 800bf4c:	b510      	push	{r4, lr}
 800bf4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf52:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf56:	4291      	cmp	r1, r2
 800bf58:	d1f9      	bne.n	800bf4e <memcpy+0xe>
 800bf5a:	bd10      	pop	{r4, pc}

0800bf5c <_free_r>:
 800bf5c:	b538      	push	{r3, r4, r5, lr}
 800bf5e:	4605      	mov	r5, r0
 800bf60:	2900      	cmp	r1, #0
 800bf62:	d041      	beq.n	800bfe8 <_free_r+0x8c>
 800bf64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf68:	1f0c      	subs	r4, r1, #4
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	bfb8      	it	lt
 800bf6e:	18e4      	addlt	r4, r4, r3
 800bf70:	f000 f8e0 	bl	800c134 <__malloc_lock>
 800bf74:	4a1d      	ldr	r2, [pc, #116]	@ (800bfec <_free_r+0x90>)
 800bf76:	6813      	ldr	r3, [r2, #0]
 800bf78:	b933      	cbnz	r3, 800bf88 <_free_r+0x2c>
 800bf7a:	6063      	str	r3, [r4, #4]
 800bf7c:	6014      	str	r4, [r2, #0]
 800bf7e:	4628      	mov	r0, r5
 800bf80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf84:	f000 b8dc 	b.w	800c140 <__malloc_unlock>
 800bf88:	42a3      	cmp	r3, r4
 800bf8a:	d908      	bls.n	800bf9e <_free_r+0x42>
 800bf8c:	6820      	ldr	r0, [r4, #0]
 800bf8e:	1821      	adds	r1, r4, r0
 800bf90:	428b      	cmp	r3, r1
 800bf92:	bf01      	itttt	eq
 800bf94:	6819      	ldreq	r1, [r3, #0]
 800bf96:	685b      	ldreq	r3, [r3, #4]
 800bf98:	1809      	addeq	r1, r1, r0
 800bf9a:	6021      	streq	r1, [r4, #0]
 800bf9c:	e7ed      	b.n	800bf7a <_free_r+0x1e>
 800bf9e:	461a      	mov	r2, r3
 800bfa0:	685b      	ldr	r3, [r3, #4]
 800bfa2:	b10b      	cbz	r3, 800bfa8 <_free_r+0x4c>
 800bfa4:	42a3      	cmp	r3, r4
 800bfa6:	d9fa      	bls.n	800bf9e <_free_r+0x42>
 800bfa8:	6811      	ldr	r1, [r2, #0]
 800bfaa:	1850      	adds	r0, r2, r1
 800bfac:	42a0      	cmp	r0, r4
 800bfae:	d10b      	bne.n	800bfc8 <_free_r+0x6c>
 800bfb0:	6820      	ldr	r0, [r4, #0]
 800bfb2:	4401      	add	r1, r0
 800bfb4:	1850      	adds	r0, r2, r1
 800bfb6:	4283      	cmp	r3, r0
 800bfb8:	6011      	str	r1, [r2, #0]
 800bfba:	d1e0      	bne.n	800bf7e <_free_r+0x22>
 800bfbc:	6818      	ldr	r0, [r3, #0]
 800bfbe:	685b      	ldr	r3, [r3, #4]
 800bfc0:	6053      	str	r3, [r2, #4]
 800bfc2:	4408      	add	r0, r1
 800bfc4:	6010      	str	r0, [r2, #0]
 800bfc6:	e7da      	b.n	800bf7e <_free_r+0x22>
 800bfc8:	d902      	bls.n	800bfd0 <_free_r+0x74>
 800bfca:	230c      	movs	r3, #12
 800bfcc:	602b      	str	r3, [r5, #0]
 800bfce:	e7d6      	b.n	800bf7e <_free_r+0x22>
 800bfd0:	6820      	ldr	r0, [r4, #0]
 800bfd2:	1821      	adds	r1, r4, r0
 800bfd4:	428b      	cmp	r3, r1
 800bfd6:	bf04      	itt	eq
 800bfd8:	6819      	ldreq	r1, [r3, #0]
 800bfda:	685b      	ldreq	r3, [r3, #4]
 800bfdc:	6063      	str	r3, [r4, #4]
 800bfde:	bf04      	itt	eq
 800bfe0:	1809      	addeq	r1, r1, r0
 800bfe2:	6021      	streq	r1, [r4, #0]
 800bfe4:	6054      	str	r4, [r2, #4]
 800bfe6:	e7ca      	b.n	800bf7e <_free_r+0x22>
 800bfe8:	bd38      	pop	{r3, r4, r5, pc}
 800bfea:	bf00      	nop
 800bfec:	200027f8 	.word	0x200027f8

0800bff0 <sbrk_aligned>:
 800bff0:	b570      	push	{r4, r5, r6, lr}
 800bff2:	4e0f      	ldr	r6, [pc, #60]	@ (800c030 <sbrk_aligned+0x40>)
 800bff4:	460c      	mov	r4, r1
 800bff6:	6831      	ldr	r1, [r6, #0]
 800bff8:	4605      	mov	r5, r0
 800bffa:	b911      	cbnz	r1, 800c002 <sbrk_aligned+0x12>
 800bffc:	f000 fba4 	bl	800c748 <_sbrk_r>
 800c000:	6030      	str	r0, [r6, #0]
 800c002:	4621      	mov	r1, r4
 800c004:	4628      	mov	r0, r5
 800c006:	f000 fb9f 	bl	800c748 <_sbrk_r>
 800c00a:	1c43      	adds	r3, r0, #1
 800c00c:	d103      	bne.n	800c016 <sbrk_aligned+0x26>
 800c00e:	f04f 34ff 	mov.w	r4, #4294967295
 800c012:	4620      	mov	r0, r4
 800c014:	bd70      	pop	{r4, r5, r6, pc}
 800c016:	1cc4      	adds	r4, r0, #3
 800c018:	f024 0403 	bic.w	r4, r4, #3
 800c01c:	42a0      	cmp	r0, r4
 800c01e:	d0f8      	beq.n	800c012 <sbrk_aligned+0x22>
 800c020:	1a21      	subs	r1, r4, r0
 800c022:	4628      	mov	r0, r5
 800c024:	f000 fb90 	bl	800c748 <_sbrk_r>
 800c028:	3001      	adds	r0, #1
 800c02a:	d1f2      	bne.n	800c012 <sbrk_aligned+0x22>
 800c02c:	e7ef      	b.n	800c00e <sbrk_aligned+0x1e>
 800c02e:	bf00      	nop
 800c030:	200027f4 	.word	0x200027f4

0800c034 <_malloc_r>:
 800c034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c038:	1ccd      	adds	r5, r1, #3
 800c03a:	f025 0503 	bic.w	r5, r5, #3
 800c03e:	3508      	adds	r5, #8
 800c040:	2d0c      	cmp	r5, #12
 800c042:	bf38      	it	cc
 800c044:	250c      	movcc	r5, #12
 800c046:	2d00      	cmp	r5, #0
 800c048:	4606      	mov	r6, r0
 800c04a:	db01      	blt.n	800c050 <_malloc_r+0x1c>
 800c04c:	42a9      	cmp	r1, r5
 800c04e:	d904      	bls.n	800c05a <_malloc_r+0x26>
 800c050:	230c      	movs	r3, #12
 800c052:	6033      	str	r3, [r6, #0]
 800c054:	2000      	movs	r0, #0
 800c056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c05a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c130 <_malloc_r+0xfc>
 800c05e:	f000 f869 	bl	800c134 <__malloc_lock>
 800c062:	f8d8 3000 	ldr.w	r3, [r8]
 800c066:	461c      	mov	r4, r3
 800c068:	bb44      	cbnz	r4, 800c0bc <_malloc_r+0x88>
 800c06a:	4629      	mov	r1, r5
 800c06c:	4630      	mov	r0, r6
 800c06e:	f7ff ffbf 	bl	800bff0 <sbrk_aligned>
 800c072:	1c43      	adds	r3, r0, #1
 800c074:	4604      	mov	r4, r0
 800c076:	d158      	bne.n	800c12a <_malloc_r+0xf6>
 800c078:	f8d8 4000 	ldr.w	r4, [r8]
 800c07c:	4627      	mov	r7, r4
 800c07e:	2f00      	cmp	r7, #0
 800c080:	d143      	bne.n	800c10a <_malloc_r+0xd6>
 800c082:	2c00      	cmp	r4, #0
 800c084:	d04b      	beq.n	800c11e <_malloc_r+0xea>
 800c086:	6823      	ldr	r3, [r4, #0]
 800c088:	4639      	mov	r1, r7
 800c08a:	4630      	mov	r0, r6
 800c08c:	eb04 0903 	add.w	r9, r4, r3
 800c090:	f000 fb5a 	bl	800c748 <_sbrk_r>
 800c094:	4581      	cmp	r9, r0
 800c096:	d142      	bne.n	800c11e <_malloc_r+0xea>
 800c098:	6821      	ldr	r1, [r4, #0]
 800c09a:	1a6d      	subs	r5, r5, r1
 800c09c:	4629      	mov	r1, r5
 800c09e:	4630      	mov	r0, r6
 800c0a0:	f7ff ffa6 	bl	800bff0 <sbrk_aligned>
 800c0a4:	3001      	adds	r0, #1
 800c0a6:	d03a      	beq.n	800c11e <_malloc_r+0xea>
 800c0a8:	6823      	ldr	r3, [r4, #0]
 800c0aa:	442b      	add	r3, r5
 800c0ac:	6023      	str	r3, [r4, #0]
 800c0ae:	f8d8 3000 	ldr.w	r3, [r8]
 800c0b2:	685a      	ldr	r2, [r3, #4]
 800c0b4:	bb62      	cbnz	r2, 800c110 <_malloc_r+0xdc>
 800c0b6:	f8c8 7000 	str.w	r7, [r8]
 800c0ba:	e00f      	b.n	800c0dc <_malloc_r+0xa8>
 800c0bc:	6822      	ldr	r2, [r4, #0]
 800c0be:	1b52      	subs	r2, r2, r5
 800c0c0:	d420      	bmi.n	800c104 <_malloc_r+0xd0>
 800c0c2:	2a0b      	cmp	r2, #11
 800c0c4:	d917      	bls.n	800c0f6 <_malloc_r+0xc2>
 800c0c6:	1961      	adds	r1, r4, r5
 800c0c8:	42a3      	cmp	r3, r4
 800c0ca:	6025      	str	r5, [r4, #0]
 800c0cc:	bf18      	it	ne
 800c0ce:	6059      	strne	r1, [r3, #4]
 800c0d0:	6863      	ldr	r3, [r4, #4]
 800c0d2:	bf08      	it	eq
 800c0d4:	f8c8 1000 	streq.w	r1, [r8]
 800c0d8:	5162      	str	r2, [r4, r5]
 800c0da:	604b      	str	r3, [r1, #4]
 800c0dc:	4630      	mov	r0, r6
 800c0de:	f000 f82f 	bl	800c140 <__malloc_unlock>
 800c0e2:	f104 000b 	add.w	r0, r4, #11
 800c0e6:	1d23      	adds	r3, r4, #4
 800c0e8:	f020 0007 	bic.w	r0, r0, #7
 800c0ec:	1ac2      	subs	r2, r0, r3
 800c0ee:	bf1c      	itt	ne
 800c0f0:	1a1b      	subne	r3, r3, r0
 800c0f2:	50a3      	strne	r3, [r4, r2]
 800c0f4:	e7af      	b.n	800c056 <_malloc_r+0x22>
 800c0f6:	6862      	ldr	r2, [r4, #4]
 800c0f8:	42a3      	cmp	r3, r4
 800c0fa:	bf0c      	ite	eq
 800c0fc:	f8c8 2000 	streq.w	r2, [r8]
 800c100:	605a      	strne	r2, [r3, #4]
 800c102:	e7eb      	b.n	800c0dc <_malloc_r+0xa8>
 800c104:	4623      	mov	r3, r4
 800c106:	6864      	ldr	r4, [r4, #4]
 800c108:	e7ae      	b.n	800c068 <_malloc_r+0x34>
 800c10a:	463c      	mov	r4, r7
 800c10c:	687f      	ldr	r7, [r7, #4]
 800c10e:	e7b6      	b.n	800c07e <_malloc_r+0x4a>
 800c110:	461a      	mov	r2, r3
 800c112:	685b      	ldr	r3, [r3, #4]
 800c114:	42a3      	cmp	r3, r4
 800c116:	d1fb      	bne.n	800c110 <_malloc_r+0xdc>
 800c118:	2300      	movs	r3, #0
 800c11a:	6053      	str	r3, [r2, #4]
 800c11c:	e7de      	b.n	800c0dc <_malloc_r+0xa8>
 800c11e:	230c      	movs	r3, #12
 800c120:	6033      	str	r3, [r6, #0]
 800c122:	4630      	mov	r0, r6
 800c124:	f000 f80c 	bl	800c140 <__malloc_unlock>
 800c128:	e794      	b.n	800c054 <_malloc_r+0x20>
 800c12a:	6005      	str	r5, [r0, #0]
 800c12c:	e7d6      	b.n	800c0dc <_malloc_r+0xa8>
 800c12e:	bf00      	nop
 800c130:	200027f8 	.word	0x200027f8

0800c134 <__malloc_lock>:
 800c134:	4801      	ldr	r0, [pc, #4]	@ (800c13c <__malloc_lock+0x8>)
 800c136:	f7ff bf01 	b.w	800bf3c <__retarget_lock_acquire_recursive>
 800c13a:	bf00      	nop
 800c13c:	200027f0 	.word	0x200027f0

0800c140 <__malloc_unlock>:
 800c140:	4801      	ldr	r0, [pc, #4]	@ (800c148 <__malloc_unlock+0x8>)
 800c142:	f7ff befc 	b.w	800bf3e <__retarget_lock_release_recursive>
 800c146:	bf00      	nop
 800c148:	200027f0 	.word	0x200027f0

0800c14c <__ssputs_r>:
 800c14c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c150:	688e      	ldr	r6, [r1, #8]
 800c152:	461f      	mov	r7, r3
 800c154:	42be      	cmp	r6, r7
 800c156:	680b      	ldr	r3, [r1, #0]
 800c158:	4682      	mov	sl, r0
 800c15a:	460c      	mov	r4, r1
 800c15c:	4690      	mov	r8, r2
 800c15e:	d82d      	bhi.n	800c1bc <__ssputs_r+0x70>
 800c160:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c164:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c168:	d026      	beq.n	800c1b8 <__ssputs_r+0x6c>
 800c16a:	6965      	ldr	r5, [r4, #20]
 800c16c:	6909      	ldr	r1, [r1, #16]
 800c16e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c172:	eba3 0901 	sub.w	r9, r3, r1
 800c176:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c17a:	1c7b      	adds	r3, r7, #1
 800c17c:	444b      	add	r3, r9
 800c17e:	106d      	asrs	r5, r5, #1
 800c180:	429d      	cmp	r5, r3
 800c182:	bf38      	it	cc
 800c184:	461d      	movcc	r5, r3
 800c186:	0553      	lsls	r3, r2, #21
 800c188:	d527      	bpl.n	800c1da <__ssputs_r+0x8e>
 800c18a:	4629      	mov	r1, r5
 800c18c:	f7ff ff52 	bl	800c034 <_malloc_r>
 800c190:	4606      	mov	r6, r0
 800c192:	b360      	cbz	r0, 800c1ee <__ssputs_r+0xa2>
 800c194:	6921      	ldr	r1, [r4, #16]
 800c196:	464a      	mov	r2, r9
 800c198:	f7ff fed2 	bl	800bf40 <memcpy>
 800c19c:	89a3      	ldrh	r3, [r4, #12]
 800c19e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c1a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1a6:	81a3      	strh	r3, [r4, #12]
 800c1a8:	6126      	str	r6, [r4, #16]
 800c1aa:	6165      	str	r5, [r4, #20]
 800c1ac:	444e      	add	r6, r9
 800c1ae:	eba5 0509 	sub.w	r5, r5, r9
 800c1b2:	6026      	str	r6, [r4, #0]
 800c1b4:	60a5      	str	r5, [r4, #8]
 800c1b6:	463e      	mov	r6, r7
 800c1b8:	42be      	cmp	r6, r7
 800c1ba:	d900      	bls.n	800c1be <__ssputs_r+0x72>
 800c1bc:	463e      	mov	r6, r7
 800c1be:	6820      	ldr	r0, [r4, #0]
 800c1c0:	4632      	mov	r2, r6
 800c1c2:	4641      	mov	r1, r8
 800c1c4:	f000 faa6 	bl	800c714 <memmove>
 800c1c8:	68a3      	ldr	r3, [r4, #8]
 800c1ca:	1b9b      	subs	r3, r3, r6
 800c1cc:	60a3      	str	r3, [r4, #8]
 800c1ce:	6823      	ldr	r3, [r4, #0]
 800c1d0:	4433      	add	r3, r6
 800c1d2:	6023      	str	r3, [r4, #0]
 800c1d4:	2000      	movs	r0, #0
 800c1d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1da:	462a      	mov	r2, r5
 800c1dc:	f000 fac4 	bl	800c768 <_realloc_r>
 800c1e0:	4606      	mov	r6, r0
 800c1e2:	2800      	cmp	r0, #0
 800c1e4:	d1e0      	bne.n	800c1a8 <__ssputs_r+0x5c>
 800c1e6:	6921      	ldr	r1, [r4, #16]
 800c1e8:	4650      	mov	r0, sl
 800c1ea:	f7ff feb7 	bl	800bf5c <_free_r>
 800c1ee:	230c      	movs	r3, #12
 800c1f0:	f8ca 3000 	str.w	r3, [sl]
 800c1f4:	89a3      	ldrh	r3, [r4, #12]
 800c1f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c1fa:	81a3      	strh	r3, [r4, #12]
 800c1fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c200:	e7e9      	b.n	800c1d6 <__ssputs_r+0x8a>
	...

0800c204 <_svfiprintf_r>:
 800c204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c208:	4698      	mov	r8, r3
 800c20a:	898b      	ldrh	r3, [r1, #12]
 800c20c:	061b      	lsls	r3, r3, #24
 800c20e:	b09d      	sub	sp, #116	@ 0x74
 800c210:	4607      	mov	r7, r0
 800c212:	460d      	mov	r5, r1
 800c214:	4614      	mov	r4, r2
 800c216:	d510      	bpl.n	800c23a <_svfiprintf_r+0x36>
 800c218:	690b      	ldr	r3, [r1, #16]
 800c21a:	b973      	cbnz	r3, 800c23a <_svfiprintf_r+0x36>
 800c21c:	2140      	movs	r1, #64	@ 0x40
 800c21e:	f7ff ff09 	bl	800c034 <_malloc_r>
 800c222:	6028      	str	r0, [r5, #0]
 800c224:	6128      	str	r0, [r5, #16]
 800c226:	b930      	cbnz	r0, 800c236 <_svfiprintf_r+0x32>
 800c228:	230c      	movs	r3, #12
 800c22a:	603b      	str	r3, [r7, #0]
 800c22c:	f04f 30ff 	mov.w	r0, #4294967295
 800c230:	b01d      	add	sp, #116	@ 0x74
 800c232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c236:	2340      	movs	r3, #64	@ 0x40
 800c238:	616b      	str	r3, [r5, #20]
 800c23a:	2300      	movs	r3, #0
 800c23c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c23e:	2320      	movs	r3, #32
 800c240:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c244:	f8cd 800c 	str.w	r8, [sp, #12]
 800c248:	2330      	movs	r3, #48	@ 0x30
 800c24a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c3e8 <_svfiprintf_r+0x1e4>
 800c24e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c252:	f04f 0901 	mov.w	r9, #1
 800c256:	4623      	mov	r3, r4
 800c258:	469a      	mov	sl, r3
 800c25a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c25e:	b10a      	cbz	r2, 800c264 <_svfiprintf_r+0x60>
 800c260:	2a25      	cmp	r2, #37	@ 0x25
 800c262:	d1f9      	bne.n	800c258 <_svfiprintf_r+0x54>
 800c264:	ebba 0b04 	subs.w	fp, sl, r4
 800c268:	d00b      	beq.n	800c282 <_svfiprintf_r+0x7e>
 800c26a:	465b      	mov	r3, fp
 800c26c:	4622      	mov	r2, r4
 800c26e:	4629      	mov	r1, r5
 800c270:	4638      	mov	r0, r7
 800c272:	f7ff ff6b 	bl	800c14c <__ssputs_r>
 800c276:	3001      	adds	r0, #1
 800c278:	f000 80a7 	beq.w	800c3ca <_svfiprintf_r+0x1c6>
 800c27c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c27e:	445a      	add	r2, fp
 800c280:	9209      	str	r2, [sp, #36]	@ 0x24
 800c282:	f89a 3000 	ldrb.w	r3, [sl]
 800c286:	2b00      	cmp	r3, #0
 800c288:	f000 809f 	beq.w	800c3ca <_svfiprintf_r+0x1c6>
 800c28c:	2300      	movs	r3, #0
 800c28e:	f04f 32ff 	mov.w	r2, #4294967295
 800c292:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c296:	f10a 0a01 	add.w	sl, sl, #1
 800c29a:	9304      	str	r3, [sp, #16]
 800c29c:	9307      	str	r3, [sp, #28]
 800c29e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c2a2:	931a      	str	r3, [sp, #104]	@ 0x68
 800c2a4:	4654      	mov	r4, sl
 800c2a6:	2205      	movs	r2, #5
 800c2a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2ac:	484e      	ldr	r0, [pc, #312]	@ (800c3e8 <_svfiprintf_r+0x1e4>)
 800c2ae:	f7f3 ff8f 	bl	80001d0 <memchr>
 800c2b2:	9a04      	ldr	r2, [sp, #16]
 800c2b4:	b9d8      	cbnz	r0, 800c2ee <_svfiprintf_r+0xea>
 800c2b6:	06d0      	lsls	r0, r2, #27
 800c2b8:	bf44      	itt	mi
 800c2ba:	2320      	movmi	r3, #32
 800c2bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c2c0:	0711      	lsls	r1, r2, #28
 800c2c2:	bf44      	itt	mi
 800c2c4:	232b      	movmi	r3, #43	@ 0x2b
 800c2c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c2ca:	f89a 3000 	ldrb.w	r3, [sl]
 800c2ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800c2d0:	d015      	beq.n	800c2fe <_svfiprintf_r+0xfa>
 800c2d2:	9a07      	ldr	r2, [sp, #28]
 800c2d4:	4654      	mov	r4, sl
 800c2d6:	2000      	movs	r0, #0
 800c2d8:	f04f 0c0a 	mov.w	ip, #10
 800c2dc:	4621      	mov	r1, r4
 800c2de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c2e2:	3b30      	subs	r3, #48	@ 0x30
 800c2e4:	2b09      	cmp	r3, #9
 800c2e6:	d94b      	bls.n	800c380 <_svfiprintf_r+0x17c>
 800c2e8:	b1b0      	cbz	r0, 800c318 <_svfiprintf_r+0x114>
 800c2ea:	9207      	str	r2, [sp, #28]
 800c2ec:	e014      	b.n	800c318 <_svfiprintf_r+0x114>
 800c2ee:	eba0 0308 	sub.w	r3, r0, r8
 800c2f2:	fa09 f303 	lsl.w	r3, r9, r3
 800c2f6:	4313      	orrs	r3, r2
 800c2f8:	9304      	str	r3, [sp, #16]
 800c2fa:	46a2      	mov	sl, r4
 800c2fc:	e7d2      	b.n	800c2a4 <_svfiprintf_r+0xa0>
 800c2fe:	9b03      	ldr	r3, [sp, #12]
 800c300:	1d19      	adds	r1, r3, #4
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	9103      	str	r1, [sp, #12]
 800c306:	2b00      	cmp	r3, #0
 800c308:	bfbb      	ittet	lt
 800c30a:	425b      	neglt	r3, r3
 800c30c:	f042 0202 	orrlt.w	r2, r2, #2
 800c310:	9307      	strge	r3, [sp, #28]
 800c312:	9307      	strlt	r3, [sp, #28]
 800c314:	bfb8      	it	lt
 800c316:	9204      	strlt	r2, [sp, #16]
 800c318:	7823      	ldrb	r3, [r4, #0]
 800c31a:	2b2e      	cmp	r3, #46	@ 0x2e
 800c31c:	d10a      	bne.n	800c334 <_svfiprintf_r+0x130>
 800c31e:	7863      	ldrb	r3, [r4, #1]
 800c320:	2b2a      	cmp	r3, #42	@ 0x2a
 800c322:	d132      	bne.n	800c38a <_svfiprintf_r+0x186>
 800c324:	9b03      	ldr	r3, [sp, #12]
 800c326:	1d1a      	adds	r2, r3, #4
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	9203      	str	r2, [sp, #12]
 800c32c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c330:	3402      	adds	r4, #2
 800c332:	9305      	str	r3, [sp, #20]
 800c334:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c3f8 <_svfiprintf_r+0x1f4>
 800c338:	7821      	ldrb	r1, [r4, #0]
 800c33a:	2203      	movs	r2, #3
 800c33c:	4650      	mov	r0, sl
 800c33e:	f7f3 ff47 	bl	80001d0 <memchr>
 800c342:	b138      	cbz	r0, 800c354 <_svfiprintf_r+0x150>
 800c344:	9b04      	ldr	r3, [sp, #16]
 800c346:	eba0 000a 	sub.w	r0, r0, sl
 800c34a:	2240      	movs	r2, #64	@ 0x40
 800c34c:	4082      	lsls	r2, r0
 800c34e:	4313      	orrs	r3, r2
 800c350:	3401      	adds	r4, #1
 800c352:	9304      	str	r3, [sp, #16]
 800c354:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c358:	4824      	ldr	r0, [pc, #144]	@ (800c3ec <_svfiprintf_r+0x1e8>)
 800c35a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c35e:	2206      	movs	r2, #6
 800c360:	f7f3 ff36 	bl	80001d0 <memchr>
 800c364:	2800      	cmp	r0, #0
 800c366:	d036      	beq.n	800c3d6 <_svfiprintf_r+0x1d2>
 800c368:	4b21      	ldr	r3, [pc, #132]	@ (800c3f0 <_svfiprintf_r+0x1ec>)
 800c36a:	bb1b      	cbnz	r3, 800c3b4 <_svfiprintf_r+0x1b0>
 800c36c:	9b03      	ldr	r3, [sp, #12]
 800c36e:	3307      	adds	r3, #7
 800c370:	f023 0307 	bic.w	r3, r3, #7
 800c374:	3308      	adds	r3, #8
 800c376:	9303      	str	r3, [sp, #12]
 800c378:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c37a:	4433      	add	r3, r6
 800c37c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c37e:	e76a      	b.n	800c256 <_svfiprintf_r+0x52>
 800c380:	fb0c 3202 	mla	r2, ip, r2, r3
 800c384:	460c      	mov	r4, r1
 800c386:	2001      	movs	r0, #1
 800c388:	e7a8      	b.n	800c2dc <_svfiprintf_r+0xd8>
 800c38a:	2300      	movs	r3, #0
 800c38c:	3401      	adds	r4, #1
 800c38e:	9305      	str	r3, [sp, #20]
 800c390:	4619      	mov	r1, r3
 800c392:	f04f 0c0a 	mov.w	ip, #10
 800c396:	4620      	mov	r0, r4
 800c398:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c39c:	3a30      	subs	r2, #48	@ 0x30
 800c39e:	2a09      	cmp	r2, #9
 800c3a0:	d903      	bls.n	800c3aa <_svfiprintf_r+0x1a6>
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d0c6      	beq.n	800c334 <_svfiprintf_r+0x130>
 800c3a6:	9105      	str	r1, [sp, #20]
 800c3a8:	e7c4      	b.n	800c334 <_svfiprintf_r+0x130>
 800c3aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800c3ae:	4604      	mov	r4, r0
 800c3b0:	2301      	movs	r3, #1
 800c3b2:	e7f0      	b.n	800c396 <_svfiprintf_r+0x192>
 800c3b4:	ab03      	add	r3, sp, #12
 800c3b6:	9300      	str	r3, [sp, #0]
 800c3b8:	462a      	mov	r2, r5
 800c3ba:	4b0e      	ldr	r3, [pc, #56]	@ (800c3f4 <_svfiprintf_r+0x1f0>)
 800c3bc:	a904      	add	r1, sp, #16
 800c3be:	4638      	mov	r0, r7
 800c3c0:	f3af 8000 	nop.w
 800c3c4:	1c42      	adds	r2, r0, #1
 800c3c6:	4606      	mov	r6, r0
 800c3c8:	d1d6      	bne.n	800c378 <_svfiprintf_r+0x174>
 800c3ca:	89ab      	ldrh	r3, [r5, #12]
 800c3cc:	065b      	lsls	r3, r3, #25
 800c3ce:	f53f af2d 	bmi.w	800c22c <_svfiprintf_r+0x28>
 800c3d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c3d4:	e72c      	b.n	800c230 <_svfiprintf_r+0x2c>
 800c3d6:	ab03      	add	r3, sp, #12
 800c3d8:	9300      	str	r3, [sp, #0]
 800c3da:	462a      	mov	r2, r5
 800c3dc:	4b05      	ldr	r3, [pc, #20]	@ (800c3f4 <_svfiprintf_r+0x1f0>)
 800c3de:	a904      	add	r1, sp, #16
 800c3e0:	4638      	mov	r0, r7
 800c3e2:	f000 f879 	bl	800c4d8 <_printf_i>
 800c3e6:	e7ed      	b.n	800c3c4 <_svfiprintf_r+0x1c0>
 800c3e8:	0800c868 	.word	0x0800c868
 800c3ec:	0800c872 	.word	0x0800c872
 800c3f0:	00000000 	.word	0x00000000
 800c3f4:	0800c14d 	.word	0x0800c14d
 800c3f8:	0800c86e 	.word	0x0800c86e

0800c3fc <_printf_common>:
 800c3fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c400:	4616      	mov	r6, r2
 800c402:	4698      	mov	r8, r3
 800c404:	688a      	ldr	r2, [r1, #8]
 800c406:	690b      	ldr	r3, [r1, #16]
 800c408:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c40c:	4293      	cmp	r3, r2
 800c40e:	bfb8      	it	lt
 800c410:	4613      	movlt	r3, r2
 800c412:	6033      	str	r3, [r6, #0]
 800c414:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c418:	4607      	mov	r7, r0
 800c41a:	460c      	mov	r4, r1
 800c41c:	b10a      	cbz	r2, 800c422 <_printf_common+0x26>
 800c41e:	3301      	adds	r3, #1
 800c420:	6033      	str	r3, [r6, #0]
 800c422:	6823      	ldr	r3, [r4, #0]
 800c424:	0699      	lsls	r1, r3, #26
 800c426:	bf42      	ittt	mi
 800c428:	6833      	ldrmi	r3, [r6, #0]
 800c42a:	3302      	addmi	r3, #2
 800c42c:	6033      	strmi	r3, [r6, #0]
 800c42e:	6825      	ldr	r5, [r4, #0]
 800c430:	f015 0506 	ands.w	r5, r5, #6
 800c434:	d106      	bne.n	800c444 <_printf_common+0x48>
 800c436:	f104 0a19 	add.w	sl, r4, #25
 800c43a:	68e3      	ldr	r3, [r4, #12]
 800c43c:	6832      	ldr	r2, [r6, #0]
 800c43e:	1a9b      	subs	r3, r3, r2
 800c440:	42ab      	cmp	r3, r5
 800c442:	dc26      	bgt.n	800c492 <_printf_common+0x96>
 800c444:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c448:	6822      	ldr	r2, [r4, #0]
 800c44a:	3b00      	subs	r3, #0
 800c44c:	bf18      	it	ne
 800c44e:	2301      	movne	r3, #1
 800c450:	0692      	lsls	r2, r2, #26
 800c452:	d42b      	bmi.n	800c4ac <_printf_common+0xb0>
 800c454:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c458:	4641      	mov	r1, r8
 800c45a:	4638      	mov	r0, r7
 800c45c:	47c8      	blx	r9
 800c45e:	3001      	adds	r0, #1
 800c460:	d01e      	beq.n	800c4a0 <_printf_common+0xa4>
 800c462:	6823      	ldr	r3, [r4, #0]
 800c464:	6922      	ldr	r2, [r4, #16]
 800c466:	f003 0306 	and.w	r3, r3, #6
 800c46a:	2b04      	cmp	r3, #4
 800c46c:	bf02      	ittt	eq
 800c46e:	68e5      	ldreq	r5, [r4, #12]
 800c470:	6833      	ldreq	r3, [r6, #0]
 800c472:	1aed      	subeq	r5, r5, r3
 800c474:	68a3      	ldr	r3, [r4, #8]
 800c476:	bf0c      	ite	eq
 800c478:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c47c:	2500      	movne	r5, #0
 800c47e:	4293      	cmp	r3, r2
 800c480:	bfc4      	itt	gt
 800c482:	1a9b      	subgt	r3, r3, r2
 800c484:	18ed      	addgt	r5, r5, r3
 800c486:	2600      	movs	r6, #0
 800c488:	341a      	adds	r4, #26
 800c48a:	42b5      	cmp	r5, r6
 800c48c:	d11a      	bne.n	800c4c4 <_printf_common+0xc8>
 800c48e:	2000      	movs	r0, #0
 800c490:	e008      	b.n	800c4a4 <_printf_common+0xa8>
 800c492:	2301      	movs	r3, #1
 800c494:	4652      	mov	r2, sl
 800c496:	4641      	mov	r1, r8
 800c498:	4638      	mov	r0, r7
 800c49a:	47c8      	blx	r9
 800c49c:	3001      	adds	r0, #1
 800c49e:	d103      	bne.n	800c4a8 <_printf_common+0xac>
 800c4a0:	f04f 30ff 	mov.w	r0, #4294967295
 800c4a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4a8:	3501      	adds	r5, #1
 800c4aa:	e7c6      	b.n	800c43a <_printf_common+0x3e>
 800c4ac:	18e1      	adds	r1, r4, r3
 800c4ae:	1c5a      	adds	r2, r3, #1
 800c4b0:	2030      	movs	r0, #48	@ 0x30
 800c4b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c4b6:	4422      	add	r2, r4
 800c4b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c4bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c4c0:	3302      	adds	r3, #2
 800c4c2:	e7c7      	b.n	800c454 <_printf_common+0x58>
 800c4c4:	2301      	movs	r3, #1
 800c4c6:	4622      	mov	r2, r4
 800c4c8:	4641      	mov	r1, r8
 800c4ca:	4638      	mov	r0, r7
 800c4cc:	47c8      	blx	r9
 800c4ce:	3001      	adds	r0, #1
 800c4d0:	d0e6      	beq.n	800c4a0 <_printf_common+0xa4>
 800c4d2:	3601      	adds	r6, #1
 800c4d4:	e7d9      	b.n	800c48a <_printf_common+0x8e>
	...

0800c4d8 <_printf_i>:
 800c4d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c4dc:	7e0f      	ldrb	r7, [r1, #24]
 800c4de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c4e0:	2f78      	cmp	r7, #120	@ 0x78
 800c4e2:	4691      	mov	r9, r2
 800c4e4:	4680      	mov	r8, r0
 800c4e6:	460c      	mov	r4, r1
 800c4e8:	469a      	mov	sl, r3
 800c4ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c4ee:	d807      	bhi.n	800c500 <_printf_i+0x28>
 800c4f0:	2f62      	cmp	r7, #98	@ 0x62
 800c4f2:	d80a      	bhi.n	800c50a <_printf_i+0x32>
 800c4f4:	2f00      	cmp	r7, #0
 800c4f6:	f000 80d1 	beq.w	800c69c <_printf_i+0x1c4>
 800c4fa:	2f58      	cmp	r7, #88	@ 0x58
 800c4fc:	f000 80b8 	beq.w	800c670 <_printf_i+0x198>
 800c500:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c504:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c508:	e03a      	b.n	800c580 <_printf_i+0xa8>
 800c50a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c50e:	2b15      	cmp	r3, #21
 800c510:	d8f6      	bhi.n	800c500 <_printf_i+0x28>
 800c512:	a101      	add	r1, pc, #4	@ (adr r1, 800c518 <_printf_i+0x40>)
 800c514:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c518:	0800c571 	.word	0x0800c571
 800c51c:	0800c585 	.word	0x0800c585
 800c520:	0800c501 	.word	0x0800c501
 800c524:	0800c501 	.word	0x0800c501
 800c528:	0800c501 	.word	0x0800c501
 800c52c:	0800c501 	.word	0x0800c501
 800c530:	0800c585 	.word	0x0800c585
 800c534:	0800c501 	.word	0x0800c501
 800c538:	0800c501 	.word	0x0800c501
 800c53c:	0800c501 	.word	0x0800c501
 800c540:	0800c501 	.word	0x0800c501
 800c544:	0800c683 	.word	0x0800c683
 800c548:	0800c5af 	.word	0x0800c5af
 800c54c:	0800c63d 	.word	0x0800c63d
 800c550:	0800c501 	.word	0x0800c501
 800c554:	0800c501 	.word	0x0800c501
 800c558:	0800c6a5 	.word	0x0800c6a5
 800c55c:	0800c501 	.word	0x0800c501
 800c560:	0800c5af 	.word	0x0800c5af
 800c564:	0800c501 	.word	0x0800c501
 800c568:	0800c501 	.word	0x0800c501
 800c56c:	0800c645 	.word	0x0800c645
 800c570:	6833      	ldr	r3, [r6, #0]
 800c572:	1d1a      	adds	r2, r3, #4
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	6032      	str	r2, [r6, #0]
 800c578:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c57c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c580:	2301      	movs	r3, #1
 800c582:	e09c      	b.n	800c6be <_printf_i+0x1e6>
 800c584:	6833      	ldr	r3, [r6, #0]
 800c586:	6820      	ldr	r0, [r4, #0]
 800c588:	1d19      	adds	r1, r3, #4
 800c58a:	6031      	str	r1, [r6, #0]
 800c58c:	0606      	lsls	r6, r0, #24
 800c58e:	d501      	bpl.n	800c594 <_printf_i+0xbc>
 800c590:	681d      	ldr	r5, [r3, #0]
 800c592:	e003      	b.n	800c59c <_printf_i+0xc4>
 800c594:	0645      	lsls	r5, r0, #25
 800c596:	d5fb      	bpl.n	800c590 <_printf_i+0xb8>
 800c598:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c59c:	2d00      	cmp	r5, #0
 800c59e:	da03      	bge.n	800c5a8 <_printf_i+0xd0>
 800c5a0:	232d      	movs	r3, #45	@ 0x2d
 800c5a2:	426d      	negs	r5, r5
 800c5a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c5a8:	4858      	ldr	r0, [pc, #352]	@ (800c70c <_printf_i+0x234>)
 800c5aa:	230a      	movs	r3, #10
 800c5ac:	e011      	b.n	800c5d2 <_printf_i+0xfa>
 800c5ae:	6821      	ldr	r1, [r4, #0]
 800c5b0:	6833      	ldr	r3, [r6, #0]
 800c5b2:	0608      	lsls	r0, r1, #24
 800c5b4:	f853 5b04 	ldr.w	r5, [r3], #4
 800c5b8:	d402      	bmi.n	800c5c0 <_printf_i+0xe8>
 800c5ba:	0649      	lsls	r1, r1, #25
 800c5bc:	bf48      	it	mi
 800c5be:	b2ad      	uxthmi	r5, r5
 800c5c0:	2f6f      	cmp	r7, #111	@ 0x6f
 800c5c2:	4852      	ldr	r0, [pc, #328]	@ (800c70c <_printf_i+0x234>)
 800c5c4:	6033      	str	r3, [r6, #0]
 800c5c6:	bf14      	ite	ne
 800c5c8:	230a      	movne	r3, #10
 800c5ca:	2308      	moveq	r3, #8
 800c5cc:	2100      	movs	r1, #0
 800c5ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c5d2:	6866      	ldr	r6, [r4, #4]
 800c5d4:	60a6      	str	r6, [r4, #8]
 800c5d6:	2e00      	cmp	r6, #0
 800c5d8:	db05      	blt.n	800c5e6 <_printf_i+0x10e>
 800c5da:	6821      	ldr	r1, [r4, #0]
 800c5dc:	432e      	orrs	r6, r5
 800c5de:	f021 0104 	bic.w	r1, r1, #4
 800c5e2:	6021      	str	r1, [r4, #0]
 800c5e4:	d04b      	beq.n	800c67e <_printf_i+0x1a6>
 800c5e6:	4616      	mov	r6, r2
 800c5e8:	fbb5 f1f3 	udiv	r1, r5, r3
 800c5ec:	fb03 5711 	mls	r7, r3, r1, r5
 800c5f0:	5dc7      	ldrb	r7, [r0, r7]
 800c5f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c5f6:	462f      	mov	r7, r5
 800c5f8:	42bb      	cmp	r3, r7
 800c5fa:	460d      	mov	r5, r1
 800c5fc:	d9f4      	bls.n	800c5e8 <_printf_i+0x110>
 800c5fe:	2b08      	cmp	r3, #8
 800c600:	d10b      	bne.n	800c61a <_printf_i+0x142>
 800c602:	6823      	ldr	r3, [r4, #0]
 800c604:	07df      	lsls	r7, r3, #31
 800c606:	d508      	bpl.n	800c61a <_printf_i+0x142>
 800c608:	6923      	ldr	r3, [r4, #16]
 800c60a:	6861      	ldr	r1, [r4, #4]
 800c60c:	4299      	cmp	r1, r3
 800c60e:	bfde      	ittt	le
 800c610:	2330      	movle	r3, #48	@ 0x30
 800c612:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c616:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c61a:	1b92      	subs	r2, r2, r6
 800c61c:	6122      	str	r2, [r4, #16]
 800c61e:	f8cd a000 	str.w	sl, [sp]
 800c622:	464b      	mov	r3, r9
 800c624:	aa03      	add	r2, sp, #12
 800c626:	4621      	mov	r1, r4
 800c628:	4640      	mov	r0, r8
 800c62a:	f7ff fee7 	bl	800c3fc <_printf_common>
 800c62e:	3001      	adds	r0, #1
 800c630:	d14a      	bne.n	800c6c8 <_printf_i+0x1f0>
 800c632:	f04f 30ff 	mov.w	r0, #4294967295
 800c636:	b004      	add	sp, #16
 800c638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c63c:	6823      	ldr	r3, [r4, #0]
 800c63e:	f043 0320 	orr.w	r3, r3, #32
 800c642:	6023      	str	r3, [r4, #0]
 800c644:	4832      	ldr	r0, [pc, #200]	@ (800c710 <_printf_i+0x238>)
 800c646:	2778      	movs	r7, #120	@ 0x78
 800c648:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c64c:	6823      	ldr	r3, [r4, #0]
 800c64e:	6831      	ldr	r1, [r6, #0]
 800c650:	061f      	lsls	r7, r3, #24
 800c652:	f851 5b04 	ldr.w	r5, [r1], #4
 800c656:	d402      	bmi.n	800c65e <_printf_i+0x186>
 800c658:	065f      	lsls	r7, r3, #25
 800c65a:	bf48      	it	mi
 800c65c:	b2ad      	uxthmi	r5, r5
 800c65e:	6031      	str	r1, [r6, #0]
 800c660:	07d9      	lsls	r1, r3, #31
 800c662:	bf44      	itt	mi
 800c664:	f043 0320 	orrmi.w	r3, r3, #32
 800c668:	6023      	strmi	r3, [r4, #0]
 800c66a:	b11d      	cbz	r5, 800c674 <_printf_i+0x19c>
 800c66c:	2310      	movs	r3, #16
 800c66e:	e7ad      	b.n	800c5cc <_printf_i+0xf4>
 800c670:	4826      	ldr	r0, [pc, #152]	@ (800c70c <_printf_i+0x234>)
 800c672:	e7e9      	b.n	800c648 <_printf_i+0x170>
 800c674:	6823      	ldr	r3, [r4, #0]
 800c676:	f023 0320 	bic.w	r3, r3, #32
 800c67a:	6023      	str	r3, [r4, #0]
 800c67c:	e7f6      	b.n	800c66c <_printf_i+0x194>
 800c67e:	4616      	mov	r6, r2
 800c680:	e7bd      	b.n	800c5fe <_printf_i+0x126>
 800c682:	6833      	ldr	r3, [r6, #0]
 800c684:	6825      	ldr	r5, [r4, #0]
 800c686:	6961      	ldr	r1, [r4, #20]
 800c688:	1d18      	adds	r0, r3, #4
 800c68a:	6030      	str	r0, [r6, #0]
 800c68c:	062e      	lsls	r6, r5, #24
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	d501      	bpl.n	800c696 <_printf_i+0x1be>
 800c692:	6019      	str	r1, [r3, #0]
 800c694:	e002      	b.n	800c69c <_printf_i+0x1c4>
 800c696:	0668      	lsls	r0, r5, #25
 800c698:	d5fb      	bpl.n	800c692 <_printf_i+0x1ba>
 800c69a:	8019      	strh	r1, [r3, #0]
 800c69c:	2300      	movs	r3, #0
 800c69e:	6123      	str	r3, [r4, #16]
 800c6a0:	4616      	mov	r6, r2
 800c6a2:	e7bc      	b.n	800c61e <_printf_i+0x146>
 800c6a4:	6833      	ldr	r3, [r6, #0]
 800c6a6:	1d1a      	adds	r2, r3, #4
 800c6a8:	6032      	str	r2, [r6, #0]
 800c6aa:	681e      	ldr	r6, [r3, #0]
 800c6ac:	6862      	ldr	r2, [r4, #4]
 800c6ae:	2100      	movs	r1, #0
 800c6b0:	4630      	mov	r0, r6
 800c6b2:	f7f3 fd8d 	bl	80001d0 <memchr>
 800c6b6:	b108      	cbz	r0, 800c6bc <_printf_i+0x1e4>
 800c6b8:	1b80      	subs	r0, r0, r6
 800c6ba:	6060      	str	r0, [r4, #4]
 800c6bc:	6863      	ldr	r3, [r4, #4]
 800c6be:	6123      	str	r3, [r4, #16]
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c6c6:	e7aa      	b.n	800c61e <_printf_i+0x146>
 800c6c8:	6923      	ldr	r3, [r4, #16]
 800c6ca:	4632      	mov	r2, r6
 800c6cc:	4649      	mov	r1, r9
 800c6ce:	4640      	mov	r0, r8
 800c6d0:	47d0      	blx	sl
 800c6d2:	3001      	adds	r0, #1
 800c6d4:	d0ad      	beq.n	800c632 <_printf_i+0x15a>
 800c6d6:	6823      	ldr	r3, [r4, #0]
 800c6d8:	079b      	lsls	r3, r3, #30
 800c6da:	d413      	bmi.n	800c704 <_printf_i+0x22c>
 800c6dc:	68e0      	ldr	r0, [r4, #12]
 800c6de:	9b03      	ldr	r3, [sp, #12]
 800c6e0:	4298      	cmp	r0, r3
 800c6e2:	bfb8      	it	lt
 800c6e4:	4618      	movlt	r0, r3
 800c6e6:	e7a6      	b.n	800c636 <_printf_i+0x15e>
 800c6e8:	2301      	movs	r3, #1
 800c6ea:	4632      	mov	r2, r6
 800c6ec:	4649      	mov	r1, r9
 800c6ee:	4640      	mov	r0, r8
 800c6f0:	47d0      	blx	sl
 800c6f2:	3001      	adds	r0, #1
 800c6f4:	d09d      	beq.n	800c632 <_printf_i+0x15a>
 800c6f6:	3501      	adds	r5, #1
 800c6f8:	68e3      	ldr	r3, [r4, #12]
 800c6fa:	9903      	ldr	r1, [sp, #12]
 800c6fc:	1a5b      	subs	r3, r3, r1
 800c6fe:	42ab      	cmp	r3, r5
 800c700:	dcf2      	bgt.n	800c6e8 <_printf_i+0x210>
 800c702:	e7eb      	b.n	800c6dc <_printf_i+0x204>
 800c704:	2500      	movs	r5, #0
 800c706:	f104 0619 	add.w	r6, r4, #25
 800c70a:	e7f5      	b.n	800c6f8 <_printf_i+0x220>
 800c70c:	0800c879 	.word	0x0800c879
 800c710:	0800c88a 	.word	0x0800c88a

0800c714 <memmove>:
 800c714:	4288      	cmp	r0, r1
 800c716:	b510      	push	{r4, lr}
 800c718:	eb01 0402 	add.w	r4, r1, r2
 800c71c:	d902      	bls.n	800c724 <memmove+0x10>
 800c71e:	4284      	cmp	r4, r0
 800c720:	4623      	mov	r3, r4
 800c722:	d807      	bhi.n	800c734 <memmove+0x20>
 800c724:	1e43      	subs	r3, r0, #1
 800c726:	42a1      	cmp	r1, r4
 800c728:	d008      	beq.n	800c73c <memmove+0x28>
 800c72a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c72e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c732:	e7f8      	b.n	800c726 <memmove+0x12>
 800c734:	4402      	add	r2, r0
 800c736:	4601      	mov	r1, r0
 800c738:	428a      	cmp	r2, r1
 800c73a:	d100      	bne.n	800c73e <memmove+0x2a>
 800c73c:	bd10      	pop	{r4, pc}
 800c73e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c742:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c746:	e7f7      	b.n	800c738 <memmove+0x24>

0800c748 <_sbrk_r>:
 800c748:	b538      	push	{r3, r4, r5, lr}
 800c74a:	4d06      	ldr	r5, [pc, #24]	@ (800c764 <_sbrk_r+0x1c>)
 800c74c:	2300      	movs	r3, #0
 800c74e:	4604      	mov	r4, r0
 800c750:	4608      	mov	r0, r1
 800c752:	602b      	str	r3, [r5, #0]
 800c754:	f7f4 fb16 	bl	8000d84 <_sbrk>
 800c758:	1c43      	adds	r3, r0, #1
 800c75a:	d102      	bne.n	800c762 <_sbrk_r+0x1a>
 800c75c:	682b      	ldr	r3, [r5, #0]
 800c75e:	b103      	cbz	r3, 800c762 <_sbrk_r+0x1a>
 800c760:	6023      	str	r3, [r4, #0]
 800c762:	bd38      	pop	{r3, r4, r5, pc}
 800c764:	200027ec 	.word	0x200027ec

0800c768 <_realloc_r>:
 800c768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c76c:	4607      	mov	r7, r0
 800c76e:	4614      	mov	r4, r2
 800c770:	460d      	mov	r5, r1
 800c772:	b921      	cbnz	r1, 800c77e <_realloc_r+0x16>
 800c774:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c778:	4611      	mov	r1, r2
 800c77a:	f7ff bc5b 	b.w	800c034 <_malloc_r>
 800c77e:	b92a      	cbnz	r2, 800c78c <_realloc_r+0x24>
 800c780:	f7ff fbec 	bl	800bf5c <_free_r>
 800c784:	4625      	mov	r5, r4
 800c786:	4628      	mov	r0, r5
 800c788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c78c:	f000 f81a 	bl	800c7c4 <_malloc_usable_size_r>
 800c790:	4284      	cmp	r4, r0
 800c792:	4606      	mov	r6, r0
 800c794:	d802      	bhi.n	800c79c <_realloc_r+0x34>
 800c796:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c79a:	d8f4      	bhi.n	800c786 <_realloc_r+0x1e>
 800c79c:	4621      	mov	r1, r4
 800c79e:	4638      	mov	r0, r7
 800c7a0:	f7ff fc48 	bl	800c034 <_malloc_r>
 800c7a4:	4680      	mov	r8, r0
 800c7a6:	b908      	cbnz	r0, 800c7ac <_realloc_r+0x44>
 800c7a8:	4645      	mov	r5, r8
 800c7aa:	e7ec      	b.n	800c786 <_realloc_r+0x1e>
 800c7ac:	42b4      	cmp	r4, r6
 800c7ae:	4622      	mov	r2, r4
 800c7b0:	4629      	mov	r1, r5
 800c7b2:	bf28      	it	cs
 800c7b4:	4632      	movcs	r2, r6
 800c7b6:	f7ff fbc3 	bl	800bf40 <memcpy>
 800c7ba:	4629      	mov	r1, r5
 800c7bc:	4638      	mov	r0, r7
 800c7be:	f7ff fbcd 	bl	800bf5c <_free_r>
 800c7c2:	e7f1      	b.n	800c7a8 <_realloc_r+0x40>

0800c7c4 <_malloc_usable_size_r>:
 800c7c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c7c8:	1f18      	subs	r0, r3, #4
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	bfbc      	itt	lt
 800c7ce:	580b      	ldrlt	r3, [r1, r0]
 800c7d0:	18c0      	addlt	r0, r0, r3
 800c7d2:	4770      	bx	lr

0800c7d4 <_init>:
 800c7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7d6:	bf00      	nop
 800c7d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7da:	bc08      	pop	{r3}
 800c7dc:	469e      	mov	lr, r3
 800c7de:	4770      	bx	lr

0800c7e0 <_fini>:
 800c7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7e2:	bf00      	nop
 800c7e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7e6:	bc08      	pop	{r3}
 800c7e8:	469e      	mov	lr, r3
 800c7ea:	4770      	bx	lr
