
start_usb_composite.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b978  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  0800bb08  0800bb08  0000cb08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bbd0  0800bbd0  0000d2f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800bbd0  0800bbd0  0000cbd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bbd8  0800bbd8  0000d2f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bbd8  0800bbd8  0000cbd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bbdc  0800bbdc  0000cbdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002f8  20000000  0800bbe0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d2f8  2**0
                  CONTENTS
 10 .bss          0000218c  200002f8  200002f8  0000d2f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002484  20002484  0000d2f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d2f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f3da  00000000  00000000  0000d328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ece  00000000  00000000  0002c702  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019f0  00000000  00000000  000315d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013f9  00000000  00000000  00032fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026b5a  00000000  00000000  000343b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025079  00000000  00000000  0005af13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d58ed  00000000  00000000  0007ff8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00155879  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007124  00000000  00000000  001558bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000049  00000000  00000000  0015c9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002f8 	.word	0x200002f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800baf0 	.word	0x0800baf0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002fc 	.word	0x200002fc
 80001cc:	0800baf0 	.word	0x0800baf0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000564:	4b17      	ldr	r3, [pc, #92]	@ (80005c4 <MX_CAN1_Init+0x64>)
 8000566:	4a18      	ldr	r2, [pc, #96]	@ (80005c8 <MX_CAN1_Init+0x68>)
 8000568:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 800056a:	4b16      	ldr	r3, [pc, #88]	@ (80005c4 <MX_CAN1_Init+0x64>)
 800056c:	2206      	movs	r2, #6
 800056e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000570:	4b14      	ldr	r3, [pc, #80]	@ (80005c4 <MX_CAN1_Init+0x64>)
 8000572:	2200      	movs	r2, #0
 8000574:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000576:	4b13      	ldr	r3, [pc, #76]	@ (80005c4 <MX_CAN1_Init+0x64>)
 8000578:	2200      	movs	r2, #0
 800057a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 800057c:	4b11      	ldr	r3, [pc, #68]	@ (80005c4 <MX_CAN1_Init+0x64>)
 800057e:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 8000582:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000584:	4b0f      	ldr	r3, [pc, #60]	@ (80005c4 <MX_CAN1_Init+0x64>)
 8000586:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800058a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800058c:	4b0d      	ldr	r3, [pc, #52]	@ (80005c4 <MX_CAN1_Init+0x64>)
 800058e:	2200      	movs	r2, #0
 8000590:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000592:	4b0c      	ldr	r3, [pc, #48]	@ (80005c4 <MX_CAN1_Init+0x64>)
 8000594:	2200      	movs	r2, #0
 8000596:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000598:	4b0a      	ldr	r3, [pc, #40]	@ (80005c4 <MX_CAN1_Init+0x64>)
 800059a:	2200      	movs	r2, #0
 800059c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800059e:	4b09      	ldr	r3, [pc, #36]	@ (80005c4 <MX_CAN1_Init+0x64>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005a4:	4b07      	ldr	r3, [pc, #28]	@ (80005c4 <MX_CAN1_Init+0x64>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80005aa:	4b06      	ldr	r3, [pc, #24]	@ (80005c4 <MX_CAN1_Init+0x64>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005b0:	4804      	ldr	r0, [pc, #16]	@ (80005c4 <MX_CAN1_Init+0x64>)
 80005b2:	f000 fe3d 	bl	8001230 <HAL_CAN_Init>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80005bc:	f000 f9ec 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80005c0:	bf00      	nop
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	20000314 	.word	0x20000314
 80005c8:	40006400 	.word	0x40006400

080005cc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b08a      	sub	sp, #40	@ 0x28
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d4:	f107 0314 	add.w	r3, r7, #20
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a21      	ldr	r2, [pc, #132]	@ (8000670 <HAL_CAN_MspInit+0xa4>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d13b      	bne.n	8000666 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	613b      	str	r3, [r7, #16]
 80005f2:	4b20      	ldr	r3, [pc, #128]	@ (8000674 <HAL_CAN_MspInit+0xa8>)
 80005f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f6:	4a1f      	ldr	r2, [pc, #124]	@ (8000674 <HAL_CAN_MspInit+0xa8>)
 80005f8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80005fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80005fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000674 <HAL_CAN_MspInit+0xa8>)
 8000600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000602:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000606:	613b      	str	r3, [r7, #16]
 8000608:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800060a:	2300      	movs	r3, #0
 800060c:	60fb      	str	r3, [r7, #12]
 800060e:	4b19      	ldr	r3, [pc, #100]	@ (8000674 <HAL_CAN_MspInit+0xa8>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	4a18      	ldr	r2, [pc, #96]	@ (8000674 <HAL_CAN_MspInit+0xa8>)
 8000614:	f043 0308 	orr.w	r3, r3, #8
 8000618:	6313      	str	r3, [r2, #48]	@ 0x30
 800061a:	4b16      	ldr	r3, [pc, #88]	@ (8000674 <HAL_CAN_MspInit+0xa8>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061e:	f003 0308 	and.w	r3, r3, #8
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000626:	2303      	movs	r3, #3
 8000628:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800062a:	2302      	movs	r3, #2
 800062c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062e:	2300      	movs	r3, #0
 8000630:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000632:	2303      	movs	r3, #3
 8000634:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000636:	2309      	movs	r3, #9
 8000638:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800063a:	f107 0314 	add.w	r3, r7, #20
 800063e:	4619      	mov	r1, r3
 8000640:	480d      	ldr	r0, [pc, #52]	@ (8000678 <HAL_CAN_MspInit+0xac>)
 8000642:	f001 fe47 	bl	80022d4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000646:	2200      	movs	r2, #0
 8000648:	2100      	movs	r1, #0
 800064a:	2014      	movs	r0, #20
 800064c:	f001 fa23 	bl	8001a96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000650:	2014      	movs	r0, #20
 8000652:	f001 fa3c 	bl	8001ace <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000656:	2200      	movs	r2, #0
 8000658:	2100      	movs	r1, #0
 800065a:	2015      	movs	r0, #21
 800065c:	f001 fa1b 	bl	8001a96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000660:	2015      	movs	r0, #21
 8000662:	f001 fa34 	bl	8001ace <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000666:	bf00      	nop
 8000668:	3728      	adds	r7, #40	@ 0x28
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40006400 	.word	0x40006400
 8000674:	40023800 	.word	0x40023800
 8000678:	40020c00 	.word	0x40020c00

0800067c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	4b10      	ldr	r3, [pc, #64]	@ (80006c8 <MX_DMA_Init+0x4c>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	4a0f      	ldr	r2, [pc, #60]	@ (80006c8 <MX_DMA_Init+0x4c>)
 800068c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000690:	6313      	str	r3, [r2, #48]	@ 0x30
 8000692:	4b0d      	ldr	r3, [pc, #52]	@ (80006c8 <MX_DMA_Init+0x4c>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000696:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800069e:	2200      	movs	r2, #0
 80006a0:	2100      	movs	r1, #0
 80006a2:	200b      	movs	r0, #11
 80006a4:	f001 f9f7 	bl	8001a96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80006a8:	200b      	movs	r0, #11
 80006aa:	f001 fa10 	bl	8001ace <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2100      	movs	r1, #0
 80006b2:	202f      	movs	r0, #47	@ 0x2f
 80006b4:	f001 f9ef 	bl	8001a96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80006b8:	202f      	movs	r0, #47	@ 0x2f
 80006ba:	f001 fa08 	bl	8001ace <HAL_NVIC_EnableIRQ>

}
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800

080006cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08a      	sub	sp, #40	@ 0x28
 80006d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d2:	f107 0314 	add.w	r3, r7, #20
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	613b      	str	r3, [r7, #16]
 80006e6:	4b2d      	ldr	r3, [pc, #180]	@ (800079c <MX_GPIO_Init+0xd0>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	4a2c      	ldr	r2, [pc, #176]	@ (800079c <MX_GPIO_Init+0xd0>)
 80006ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f2:	4b2a      	ldr	r3, [pc, #168]	@ (800079c <MX_GPIO_Init+0xd0>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006fa:	613b      	str	r3, [r7, #16]
 80006fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	4b26      	ldr	r3, [pc, #152]	@ (800079c <MX_GPIO_Init+0xd0>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	4a25      	ldr	r2, [pc, #148]	@ (800079c <MX_GPIO_Init+0xd0>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	6313      	str	r3, [r2, #48]	@ 0x30
 800070e:	4b23      	ldr	r3, [pc, #140]	@ (800079c <MX_GPIO_Init+0xd0>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	4b1f      	ldr	r3, [pc, #124]	@ (800079c <MX_GPIO_Init+0xd0>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000722:	4a1e      	ldr	r2, [pc, #120]	@ (800079c <MX_GPIO_Init+0xd0>)
 8000724:	f043 0304 	orr.w	r3, r3, #4
 8000728:	6313      	str	r3, [r2, #48]	@ 0x30
 800072a:	4b1c      	ldr	r3, [pc, #112]	@ (800079c <MX_GPIO_Init+0xd0>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	f003 0304 	and.w	r3, r3, #4
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	4b18      	ldr	r3, [pc, #96]	@ (800079c <MX_GPIO_Init+0xd0>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	4a17      	ldr	r2, [pc, #92]	@ (800079c <MX_GPIO_Init+0xd0>)
 8000740:	f043 0308 	orr.w	r3, r3, #8
 8000744:	6313      	str	r3, [r2, #48]	@ 0x30
 8000746:	4b15      	ldr	r3, [pc, #84]	@ (800079c <MX_GPIO_Init+0xd0>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	f003 0308 	and.w	r3, r3, #8
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	4b11      	ldr	r3, [pc, #68]	@ (800079c <MX_GPIO_Init+0xd0>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	4a10      	ldr	r2, [pc, #64]	@ (800079c <MX_GPIO_Init+0xd0>)
 800075c:	f043 0302 	orr.w	r3, r3, #2
 8000760:	6313      	str	r3, [r2, #48]	@ 0x30
 8000762:	4b0e      	ldr	r3, [pc, #56]	@ (800079c <MX_GPIO_Init+0xd0>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	f003 0302 	and.w	r3, r3, #2
 800076a:	603b      	str	r3, [r7, #0]
 800076c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	21c0      	movs	r1, #192	@ 0xc0
 8000772:	480b      	ldr	r0, [pc, #44]	@ (80007a0 <MX_GPIO_Init+0xd4>)
 8000774:	f002 f846 	bl	8002804 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000778:	23c0      	movs	r3, #192	@ 0xc0
 800077a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077c:	2301      	movs	r3, #1
 800077e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000784:	2300      	movs	r3, #0
 8000786:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000788:	f107 0314 	add.w	r3, r7, #20
 800078c:	4619      	mov	r1, r3
 800078e:	4804      	ldr	r0, [pc, #16]	@ (80007a0 <MX_GPIO_Init+0xd4>)
 8000790:	f001 fda0 	bl	80022d4 <HAL_GPIO_Init>

}
 8000794:	bf00      	nop
 8000796:	3728      	adds	r7, #40	@ 0x28
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40023800 	.word	0x40023800
 80007a0:	40020000 	.word	0x40020000

080007a4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007a8:	4b12      	ldr	r3, [pc, #72]	@ (80007f4 <MX_I2C1_Init+0x50>)
 80007aa:	4a13      	ldr	r2, [pc, #76]	@ (80007f8 <MX_I2C1_Init+0x54>)
 80007ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80007ae:	4b11      	ldr	r3, [pc, #68]	@ (80007f4 <MX_I2C1_Init+0x50>)
 80007b0:	4a12      	ldr	r2, [pc, #72]	@ (80007fc <MX_I2C1_Init+0x58>)
 80007b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007b4:	4b0f      	ldr	r3, [pc, #60]	@ (80007f4 <MX_I2C1_Init+0x50>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007ba:	4b0e      	ldr	r3, [pc, #56]	@ (80007f4 <MX_I2C1_Init+0x50>)
 80007bc:	2200      	movs	r2, #0
 80007be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007c0:	4b0c      	ldr	r3, [pc, #48]	@ (80007f4 <MX_I2C1_Init+0x50>)
 80007c2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007c8:	4b0a      	ldr	r3, [pc, #40]	@ (80007f4 <MX_I2C1_Init+0x50>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007ce:	4b09      	ldr	r3, [pc, #36]	@ (80007f4 <MX_I2C1_Init+0x50>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007d4:	4b07      	ldr	r3, [pc, #28]	@ (80007f4 <MX_I2C1_Init+0x50>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007da:	4b06      	ldr	r3, [pc, #24]	@ (80007f4 <MX_I2C1_Init+0x50>)
 80007dc:	2200      	movs	r2, #0
 80007de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007e0:	4804      	ldr	r0, [pc, #16]	@ (80007f4 <MX_I2C1_Init+0x50>)
 80007e2:	f002 f829 	bl	8002838 <HAL_I2C_Init>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007ec:	f000 f8d4 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007f0:	bf00      	nop
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	2000033c 	.word	0x2000033c
 80007f8:	40005400 	.word	0x40005400
 80007fc:	00061a80 	.word	0x00061a80

08000800 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08a      	sub	sp, #40	@ 0x28
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a19      	ldr	r2, [pc, #100]	@ (8000884 <HAL_I2C_MspInit+0x84>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d12b      	bne.n	800087a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	613b      	str	r3, [r7, #16]
 8000826:	4b18      	ldr	r3, [pc, #96]	@ (8000888 <HAL_I2C_MspInit+0x88>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	4a17      	ldr	r2, [pc, #92]	@ (8000888 <HAL_I2C_MspInit+0x88>)
 800082c:	f043 0302 	orr.w	r3, r3, #2
 8000830:	6313      	str	r3, [r2, #48]	@ 0x30
 8000832:	4b15      	ldr	r3, [pc, #84]	@ (8000888 <HAL_I2C_MspInit+0x88>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	f003 0302 	and.w	r3, r3, #2
 800083a:	613b      	str	r3, [r7, #16]
 800083c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800083e:	23c0      	movs	r3, #192	@ 0xc0
 8000840:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000842:	2312      	movs	r3, #18
 8000844:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800084a:	2303      	movs	r3, #3
 800084c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800084e:	2304      	movs	r3, #4
 8000850:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000852:	f107 0314 	add.w	r3, r7, #20
 8000856:	4619      	mov	r1, r3
 8000858:	480c      	ldr	r0, [pc, #48]	@ (800088c <HAL_I2C_MspInit+0x8c>)
 800085a:	f001 fd3b 	bl	80022d4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	60fb      	str	r3, [r7, #12]
 8000862:	4b09      	ldr	r3, [pc, #36]	@ (8000888 <HAL_I2C_MspInit+0x88>)
 8000864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000866:	4a08      	ldr	r2, [pc, #32]	@ (8000888 <HAL_I2C_MspInit+0x88>)
 8000868:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800086c:	6413      	str	r3, [r2, #64]	@ 0x40
 800086e:	4b06      	ldr	r3, [pc, #24]	@ (8000888 <HAL_I2C_MspInit+0x88>)
 8000870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000872:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800087a:	bf00      	nop
 800087c:	3728      	adds	r7, #40	@ 0x28
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40005400 	.word	0x40005400
 8000888:	40023800 	.word	0x40023800
 800088c:	40020400 	.word	0x40020400

08000890 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000894:	f000 fc36 	bl	8001104 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000898:	f000 f814 	bl	80008c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800089c:	f7ff ff16 	bl	80006cc <MX_GPIO_Init>
  MX_DMA_Init();
 80008a0:	f7ff feec 	bl	800067c <MX_DMA_Init>
  MX_CAN1_Init();
 80008a4:	f7ff fe5c 	bl	8000560 <MX_CAN1_Init>
  MX_USB_OTG_FS_PCD_Init();
 80008a8:	f000 fb80 	bl	8000fac <MX_USB_OTG_FS_PCD_Init>
  MX_UART5_Init();
 80008ac:	f000 fa4a 	bl	8000d44 <MX_UART5_Init>
  MX_I2C1_Init();
 80008b0:	f7ff ff78 	bl	80007a4 <MX_I2C1_Init>
  MX_TIM1_Init();
 80008b4:	f000 f966 	bl	8000b84 <MX_TIM1_Init>
  MX_TIM2_Init();
 80008b8:	f000 f9b4 	bl	8000c24 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_Base_Start_IT(&htim1);
//  HAL_TIM_Base_Start_IT(&htim2);
  MX_USB_DEVICE_Init();
 80008bc:	f007 f83c 	bl	8007938 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <main+0x30>

080008c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b094      	sub	sp, #80	@ 0x50
 80008c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ca:	f107 0320 	add.w	r3, r7, #32
 80008ce:	2230      	movs	r2, #48	@ 0x30
 80008d0:	2100      	movs	r1, #0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f00a fc8c 	bl	800b1f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d8:	f107 030c 	add.w	r3, r7, #12
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
 80008e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e8:	2300      	movs	r3, #0
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	4b28      	ldr	r3, [pc, #160]	@ (8000990 <SystemClock_Config+0xcc>)
 80008ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f0:	4a27      	ldr	r2, [pc, #156]	@ (8000990 <SystemClock_Config+0xcc>)
 80008f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80008f8:	4b25      	ldr	r3, [pc, #148]	@ (8000990 <SystemClock_Config+0xcc>)
 80008fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000900:	60bb      	str	r3, [r7, #8]
 8000902:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000904:	2300      	movs	r3, #0
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	4b22      	ldr	r3, [pc, #136]	@ (8000994 <SystemClock_Config+0xd0>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a21      	ldr	r2, [pc, #132]	@ (8000994 <SystemClock_Config+0xd0>)
 800090e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000912:	6013      	str	r3, [r2, #0]
 8000914:	4b1f      	ldr	r3, [pc, #124]	@ (8000994 <SystemClock_Config+0xd0>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000920:	2301      	movs	r3, #1
 8000922:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000924:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000928:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800092a:	2302      	movs	r3, #2
 800092c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800092e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000932:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000934:	2304      	movs	r3, #4
 8000936:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000938:	23a8      	movs	r3, #168	@ 0xa8
 800093a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800093c:	2302      	movs	r3, #2
 800093e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000940:	2307      	movs	r3, #7
 8000942:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000944:	f107 0320 	add.w	r3, r7, #32
 8000948:	4618      	mov	r0, r3
 800094a:	f003 fb0b 	bl	8003f64 <HAL_RCC_OscConfig>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000954:	f000 f820 	bl	8000998 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000958:	230f      	movs	r3, #15
 800095a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800095c:	2302      	movs	r3, #2
 800095e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000960:	2300      	movs	r3, #0
 8000962:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000964:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000968:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800096a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800096e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000970:	f107 030c 	add.w	r3, r7, #12
 8000974:	2105      	movs	r1, #5
 8000976:	4618      	mov	r0, r3
 8000978:	f003 fd6c 	bl	8004454 <HAL_RCC_ClockConfig>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000982:	f000 f809 	bl	8000998 <Error_Handler>
  }
}
 8000986:	bf00      	nop
 8000988:	3750      	adds	r7, #80	@ 0x50
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40023800 	.word	0x40023800
 8000994:	40007000 	.word	0x40007000

08000998 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800099c:	b672      	cpsid	i
}
 800099e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a0:	bf00      	nop
 80009a2:	e7fd      	b.n	80009a0 <Error_Handler+0x8>

080009a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	607b      	str	r3, [r7, #4]
 80009ae:	4b10      	ldr	r3, [pc, #64]	@ (80009f0 <HAL_MspInit+0x4c>)
 80009b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009b2:	4a0f      	ldr	r2, [pc, #60]	@ (80009f0 <HAL_MspInit+0x4c>)
 80009b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80009ba:	4b0d      	ldr	r3, [pc, #52]	@ (80009f0 <HAL_MspInit+0x4c>)
 80009bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009c2:	607b      	str	r3, [r7, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	603b      	str	r3, [r7, #0]
 80009ca:	4b09      	ldr	r3, [pc, #36]	@ (80009f0 <HAL_MspInit+0x4c>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ce:	4a08      	ldr	r2, [pc, #32]	@ (80009f0 <HAL_MspInit+0x4c>)
 80009d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80009d6:	4b06      	ldr	r3, [pc, #24]	@ (80009f0 <HAL_MspInit+0x4c>)
 80009d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009de:	603b      	str	r3, [r7, #0]
 80009e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e2:	bf00      	nop
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	40023800 	.word	0x40023800

080009f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009f8:	bf00      	nop
 80009fa:	e7fd      	b.n	80009f8 <NMI_Handler+0x4>

080009fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <HardFault_Handler+0x4>

08000a04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a08:	bf00      	nop
 8000a0a:	e7fd      	b.n	8000a08 <MemManage_Handler+0x4>

08000a0c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a10:	bf00      	nop
 8000a12:	e7fd      	b.n	8000a10 <BusFault_Handler+0x4>

08000a14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a18:	bf00      	nop
 8000a1a:	e7fd      	b.n	8000a18 <UsageFault_Handler+0x4>

08000a1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr

08000a2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a46:	b580      	push	{r7, lr}
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a4a:	f000 fbad 	bl	80011a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
	...

08000a54 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8000a58:	4802      	ldr	r0, [pc, #8]	@ (8000a64 <DMA1_Stream0_IRQHandler+0x10>)
 8000a5a:	f001 f9ff 	bl	8001e5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	200004cc 	.word	0x200004cc

08000a68 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000a6c:	4802      	ldr	r0, [pc, #8]	@ (8000a78 <CAN1_RX0_IRQHandler+0x10>)
 8000a6e:	f000 fcda 	bl	8001426 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000314 	.word	0x20000314

08000a7c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000a80:	4802      	ldr	r0, [pc, #8]	@ (8000a8c <CAN1_RX1_IRQHandler+0x10>)
 8000a82:	f000 fcd0 	bl	8001426 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000314 	.word	0x20000314

08000a90 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a94:	4802      	ldr	r0, [pc, #8]	@ (8000aa0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000a96:	f003 ffbd 	bl	8004a14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000394 	.word	0x20000394

08000aa4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000aa8:	4802      	ldr	r0, [pc, #8]	@ (8000ab4 <TIM2_IRQHandler+0x10>)
 8000aaa:	f003 ffb3 	bl	8004a14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	200003dc 	.word	0x200003dc

08000ab8 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8000abc:	4802      	ldr	r0, [pc, #8]	@ (8000ac8 <DMA1_Stream7_IRQHandler+0x10>)
 8000abe:	f001 f9cd 	bl	8001e5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	2000046c 	.word	0x2000046c

08000acc <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000ad0:	4802      	ldr	r0, [pc, #8]	@ (8000adc <UART5_IRQHandler+0x10>)
 8000ad2:	f004 fc81 	bl	80053d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000424 	.word	0x20000424

08000ae0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000ae4:	4802      	ldr	r0, [pc, #8]	@ (8000af0 <OTG_FS_IRQHandler+0x10>)
 8000ae6:	f002 f92f 	bl	8002d48 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	2000052c 	.word	0x2000052c

08000af4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000afc:	4a14      	ldr	r2, [pc, #80]	@ (8000b50 <_sbrk+0x5c>)
 8000afe:	4b15      	ldr	r3, [pc, #84]	@ (8000b54 <_sbrk+0x60>)
 8000b00:	1ad3      	subs	r3, r2, r3
 8000b02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b08:	4b13      	ldr	r3, [pc, #76]	@ (8000b58 <_sbrk+0x64>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d102      	bne.n	8000b16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b10:	4b11      	ldr	r3, [pc, #68]	@ (8000b58 <_sbrk+0x64>)
 8000b12:	4a12      	ldr	r2, [pc, #72]	@ (8000b5c <_sbrk+0x68>)
 8000b14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b16:	4b10      	ldr	r3, [pc, #64]	@ (8000b58 <_sbrk+0x64>)
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d207      	bcs.n	8000b34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b24:	f00a fb6c 	bl	800b200 <__errno>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	220c      	movs	r2, #12
 8000b2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b32:	e009      	b.n	8000b48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b34:	4b08      	ldr	r3, [pc, #32]	@ (8000b58 <_sbrk+0x64>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b3a:	4b07      	ldr	r3, [pc, #28]	@ (8000b58 <_sbrk+0x64>)
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4413      	add	r3, r2
 8000b42:	4a05      	ldr	r2, [pc, #20]	@ (8000b58 <_sbrk+0x64>)
 8000b44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b46:	68fb      	ldr	r3, [r7, #12]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3718      	adds	r7, #24
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20020000 	.word	0x20020000
 8000b54:	00000400 	.word	0x00000400
 8000b58:	20000390 	.word	0x20000390
 8000b5c:	20002488 	.word	0x20002488

08000b60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b64:	4b06      	ldr	r3, [pc, #24]	@ (8000b80 <SystemInit+0x20>)
 8000b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b6a:	4a05      	ldr	r2, [pc, #20]	@ (8000b80 <SystemInit+0x20>)
 8000b6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	e000ed00 	.word	0xe000ed00

08000b84 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b8a:	f107 0308 	add.w	r3, r7, #8
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	605a      	str	r2, [r3, #4]
 8000b94:	609a      	str	r2, [r3, #8]
 8000b96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b98:	463b      	mov	r3, r7
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ba0:	4b1e      	ldr	r3, [pc, #120]	@ (8000c1c <MX_TIM1_Init+0x98>)
 8000ba2:	4a1f      	ldr	r2, [pc, #124]	@ (8000c20 <MX_TIM1_Init+0x9c>)
 8000ba4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 8000ba6:	4b1d      	ldr	r3, [pc, #116]	@ (8000c1c <MX_TIM1_Init+0x98>)
 8000ba8:	22a7      	movs	r2, #167	@ 0xa7
 8000baa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bac:	4b1b      	ldr	r3, [pc, #108]	@ (8000c1c <MX_TIM1_Init+0x98>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8000bb2:	4b1a      	ldr	r3, [pc, #104]	@ (8000c1c <MX_TIM1_Init+0x98>)
 8000bb4:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000bb8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bba:	4b18      	ldr	r3, [pc, #96]	@ (8000c1c <MX_TIM1_Init+0x98>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bc0:	4b16      	ldr	r3, [pc, #88]	@ (8000c1c <MX_TIM1_Init+0x98>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc6:	4b15      	ldr	r3, [pc, #84]	@ (8000c1c <MX_TIM1_Init+0x98>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bcc:	4813      	ldr	r0, [pc, #76]	@ (8000c1c <MX_TIM1_Init+0x98>)
 8000bce:	f003 fe61 	bl	8004894 <HAL_TIM_Base_Init>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000bd8:	f7ff fede 	bl	8000998 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bdc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000be0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000be2:	f107 0308 	add.w	r3, r7, #8
 8000be6:	4619      	mov	r1, r3
 8000be8:	480c      	ldr	r0, [pc, #48]	@ (8000c1c <MX_TIM1_Init+0x98>)
 8000bea:	f004 f803 	bl	8004bf4 <HAL_TIM_ConfigClockSource>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000bf4:	f7ff fed0 	bl	8000998 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c00:	463b      	mov	r3, r7
 8000c02:	4619      	mov	r1, r3
 8000c04:	4805      	ldr	r0, [pc, #20]	@ (8000c1c <MX_TIM1_Init+0x98>)
 8000c06:	f004 fa25 	bl	8005054 <HAL_TIMEx_MasterConfigSynchronization>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000c10:	f7ff fec2 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c14:	bf00      	nop
 8000c16:	3718      	adds	r7, #24
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20000394 	.word	0x20000394
 8000c20:	40010000 	.word	0x40010000

08000c24 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c2a:	f107 0308 	add.w	r3, r7, #8
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]
 8000c34:	609a      	str	r2, [r3, #8]
 8000c36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c38:	463b      	mov	r3, r7
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c40:	4b1d      	ldr	r3, [pc, #116]	@ (8000cb8 <MX_TIM2_Init+0x94>)
 8000c42:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c46:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8000c48:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb8 <MX_TIM2_Init+0x94>)
 8000c4a:	2253      	movs	r2, #83	@ 0x53
 8000c4c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb8 <MX_TIM2_Init+0x94>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2999;
 8000c54:	4b18      	ldr	r3, [pc, #96]	@ (8000cb8 <MX_TIM2_Init+0x94>)
 8000c56:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8000c5a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c5c:	4b16      	ldr	r3, [pc, #88]	@ (8000cb8 <MX_TIM2_Init+0x94>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c62:	4b15      	ldr	r3, [pc, #84]	@ (8000cb8 <MX_TIM2_Init+0x94>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c68:	4813      	ldr	r0, [pc, #76]	@ (8000cb8 <MX_TIM2_Init+0x94>)
 8000c6a:	f003 fe13 	bl	8004894 <HAL_TIM_Base_Init>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c74:	f7ff fe90 	bl	8000998 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c7e:	f107 0308 	add.w	r3, r7, #8
 8000c82:	4619      	mov	r1, r3
 8000c84:	480c      	ldr	r0, [pc, #48]	@ (8000cb8 <MX_TIM2_Init+0x94>)
 8000c86:	f003 ffb5 	bl	8004bf4 <HAL_TIM_ConfigClockSource>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c90:	f7ff fe82 	bl	8000998 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c94:	2300      	movs	r3, #0
 8000c96:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c9c:	463b      	mov	r3, r7
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4805      	ldr	r0, [pc, #20]	@ (8000cb8 <MX_TIM2_Init+0x94>)
 8000ca2:	f004 f9d7 	bl	8005054 <HAL_TIMEx_MasterConfigSynchronization>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000cac:	f7ff fe74 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cb0:	bf00      	nop
 8000cb2:	3718      	adds	r7, #24
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	200003dc 	.word	0x200003dc

08000cbc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a1c      	ldr	r2, [pc, #112]	@ (8000d3c <HAL_TIM_Base_MspInit+0x80>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d116      	bne.n	8000cfc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	4b1b      	ldr	r3, [pc, #108]	@ (8000d40 <HAL_TIM_Base_MspInit+0x84>)
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cd6:	4a1a      	ldr	r2, [pc, #104]	@ (8000d40 <HAL_TIM_Base_MspInit+0x84>)
 8000cd8:	f043 0301 	orr.w	r3, r3, #1
 8000cdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cde:	4b18      	ldr	r3, [pc, #96]	@ (8000d40 <HAL_TIM_Base_MspInit+0x84>)
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ce2:	f003 0301 	and.w	r3, r3, #1
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2100      	movs	r1, #0
 8000cee:	2019      	movs	r0, #25
 8000cf0:	f000 fed1 	bl	8001a96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000cf4:	2019      	movs	r0, #25
 8000cf6:	f000 feea 	bl	8001ace <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000cfa:	e01a      	b.n	8000d32 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM2)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d04:	d115      	bne.n	8000d32 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	60bb      	str	r3, [r7, #8]
 8000d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000d40 <HAL_TIM_Base_MspInit+0x84>)
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0e:	4a0c      	ldr	r2, [pc, #48]	@ (8000d40 <HAL_TIM_Base_MspInit+0x84>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d16:	4b0a      	ldr	r3, [pc, #40]	@ (8000d40 <HAL_TIM_Base_MspInit+0x84>)
 8000d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	60bb      	str	r3, [r7, #8]
 8000d20:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2100      	movs	r1, #0
 8000d26:	201c      	movs	r0, #28
 8000d28:	f000 feb5 	bl	8001a96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d2c:	201c      	movs	r0, #28
 8000d2e:	f000 fece 	bl	8001ace <HAL_NVIC_EnableIRQ>
}
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40010000 	.word	0x40010000
 8000d40:	40023800 	.word	0x40023800

08000d44 <MX_UART5_Init>:
DMA_HandleTypeDef hdma_uart5_tx;
DMA_HandleTypeDef hdma_uart5_rx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000d48:	4b11      	ldr	r3, [pc, #68]	@ (8000d90 <MX_UART5_Init+0x4c>)
 8000d4a:	4a12      	ldr	r2, [pc, #72]	@ (8000d94 <MX_UART5_Init+0x50>)
 8000d4c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000d4e:	4b10      	ldr	r3, [pc, #64]	@ (8000d90 <MX_UART5_Init+0x4c>)
 8000d50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d54:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000d56:	4b0e      	ldr	r3, [pc, #56]	@ (8000d90 <MX_UART5_Init+0x4c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d90 <MX_UART5_Init+0x4c>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000d62:	4b0b      	ldr	r3, [pc, #44]	@ (8000d90 <MX_UART5_Init+0x4c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000d68:	4b09      	ldr	r3, [pc, #36]	@ (8000d90 <MX_UART5_Init+0x4c>)
 8000d6a:	220c      	movs	r2, #12
 8000d6c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d6e:	4b08      	ldr	r3, [pc, #32]	@ (8000d90 <MX_UART5_Init+0x4c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d74:	4b06      	ldr	r3, [pc, #24]	@ (8000d90 <MX_UART5_Init+0x4c>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000d7a:	4805      	ldr	r0, [pc, #20]	@ (8000d90 <MX_UART5_Init+0x4c>)
 8000d7c:	f004 f9fa 	bl	8005174 <HAL_UART_Init>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000d86:	f7ff fe07 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */
 // HAL_UART_Receive_IT(&huart5, &uart5_rx_byte, UART5_RX_BUF_LEN);
  /* USER CODE END UART5_Init 2 */

}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000424 	.word	0x20000424
 8000d94:	40005000 	.word	0x40005000

08000d98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08a      	sub	sp, #40	@ 0x28
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da0:	f107 0314 	add.w	r3, r7, #20
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a5c      	ldr	r2, [pc, #368]	@ (8000f28 <HAL_UART_MspInit+0x190>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	f040 80b1 	bne.w	8000f1e <HAL_UART_MspInit+0x186>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	4b5a      	ldr	r3, [pc, #360]	@ (8000f2c <HAL_UART_MspInit+0x194>)
 8000dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc4:	4a59      	ldr	r2, [pc, #356]	@ (8000f2c <HAL_UART_MspInit+0x194>)
 8000dc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000dca:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dcc:	4b57      	ldr	r3, [pc, #348]	@ (8000f2c <HAL_UART_MspInit+0x194>)
 8000dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000dd4:	613b      	str	r3, [r7, #16]
 8000dd6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dd8:	2300      	movs	r3, #0
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	4b53      	ldr	r3, [pc, #332]	@ (8000f2c <HAL_UART_MspInit+0x194>)
 8000dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de0:	4a52      	ldr	r2, [pc, #328]	@ (8000f2c <HAL_UART_MspInit+0x194>)
 8000de2:	f043 0304 	orr.w	r3, r3, #4
 8000de6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000de8:	4b50      	ldr	r3, [pc, #320]	@ (8000f2c <HAL_UART_MspInit+0x194>)
 8000dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dec:	f003 0304 	and.w	r3, r3, #4
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000df4:	2300      	movs	r3, #0
 8000df6:	60bb      	str	r3, [r7, #8]
 8000df8:	4b4c      	ldr	r3, [pc, #304]	@ (8000f2c <HAL_UART_MspInit+0x194>)
 8000dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfc:	4a4b      	ldr	r2, [pc, #300]	@ (8000f2c <HAL_UART_MspInit+0x194>)
 8000dfe:	f043 0308 	orr.w	r3, r3, #8
 8000e02:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e04:	4b49      	ldr	r3, [pc, #292]	@ (8000f2c <HAL_UART_MspInit+0x194>)
 8000e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e08:	f003 0308 	and.w	r3, r3, #8
 8000e0c:	60bb      	str	r3, [r7, #8]
 8000e0e:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e16:	2302      	movs	r3, #2
 8000e18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000e22:	2308      	movs	r3, #8
 8000e24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e26:	f107 0314 	add.w	r3, r7, #20
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4840      	ldr	r0, [pc, #256]	@ (8000f30 <HAL_UART_MspInit+0x198>)
 8000e2e:	f001 fa51 	bl	80022d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e32:	2304      	movs	r3, #4
 8000e34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e36:	2302      	movs	r3, #2
 8000e38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000e42:	2308      	movs	r3, #8
 8000e44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e46:	f107 0314 	add.w	r3, r7, #20
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4839      	ldr	r0, [pc, #228]	@ (8000f34 <HAL_UART_MspInit+0x19c>)
 8000e4e:	f001 fa41 	bl	80022d4 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8000e52:	4b39      	ldr	r3, [pc, #228]	@ (8000f38 <HAL_UART_MspInit+0x1a0>)
 8000e54:	4a39      	ldr	r2, [pc, #228]	@ (8000f3c <HAL_UART_MspInit+0x1a4>)
 8000e56:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8000e58:	4b37      	ldr	r3, [pc, #220]	@ (8000f38 <HAL_UART_MspInit+0x1a0>)
 8000e5a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000e5e:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e60:	4b35      	ldr	r3, [pc, #212]	@ (8000f38 <HAL_UART_MspInit+0x1a0>)
 8000e62:	2240      	movs	r2, #64	@ 0x40
 8000e64:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e66:	4b34      	ldr	r3, [pc, #208]	@ (8000f38 <HAL_UART_MspInit+0x1a0>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e6c:	4b32      	ldr	r3, [pc, #200]	@ (8000f38 <HAL_UART_MspInit+0x1a0>)
 8000e6e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e72:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e74:	4b30      	ldr	r3, [pc, #192]	@ (8000f38 <HAL_UART_MspInit+0x1a0>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e7a:	4b2f      	ldr	r3, [pc, #188]	@ (8000f38 <HAL_UART_MspInit+0x1a0>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8000e80:	4b2d      	ldr	r3, [pc, #180]	@ (8000f38 <HAL_UART_MspInit+0x1a0>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000e86:	4b2c      	ldr	r3, [pc, #176]	@ (8000f38 <HAL_UART_MspInit+0x1a0>)
 8000e88:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000e8c:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e8e:	4b2a      	ldr	r3, [pc, #168]	@ (8000f38 <HAL_UART_MspInit+0x1a0>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8000e94:	4828      	ldr	r0, [pc, #160]	@ (8000f38 <HAL_UART_MspInit+0x1a0>)
 8000e96:	f000 fe43 	bl	8001b20 <HAL_DMA_Init>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8000ea0:	f7ff fd7a 	bl	8000998 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4a24      	ldr	r2, [pc, #144]	@ (8000f38 <HAL_UART_MspInit+0x1a0>)
 8000ea8:	639a      	str	r2, [r3, #56]	@ 0x38
 8000eaa:	4a23      	ldr	r2, [pc, #140]	@ (8000f38 <HAL_UART_MspInit+0x1a0>)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8000eb0:	4b23      	ldr	r3, [pc, #140]	@ (8000f40 <HAL_UART_MspInit+0x1a8>)
 8000eb2:	4a24      	ldr	r2, [pc, #144]	@ (8000f44 <HAL_UART_MspInit+0x1ac>)
 8000eb4:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8000eb6:	4b22      	ldr	r3, [pc, #136]	@ (8000f40 <HAL_UART_MspInit+0x1a8>)
 8000eb8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000ebc:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ebe:	4b20      	ldr	r3, [pc, #128]	@ (8000f40 <HAL_UART_MspInit+0x1a8>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ec4:	4b1e      	ldr	r3, [pc, #120]	@ (8000f40 <HAL_UART_MspInit+0x1a8>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000eca:	4b1d      	ldr	r3, [pc, #116]	@ (8000f40 <HAL_UART_MspInit+0x1a8>)
 8000ecc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ed0:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ed2:	4b1b      	ldr	r3, [pc, #108]	@ (8000f40 <HAL_UART_MspInit+0x1a8>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ed8:	4b19      	ldr	r3, [pc, #100]	@ (8000f40 <HAL_UART_MspInit+0x1a8>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8000ede:	4b18      	ldr	r3, [pc, #96]	@ (8000f40 <HAL_UART_MspInit+0x1a8>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000ee4:	4b16      	ldr	r3, [pc, #88]	@ (8000f40 <HAL_UART_MspInit+0x1a8>)
 8000ee6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000eea:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000eec:	4b14      	ldr	r3, [pc, #80]	@ (8000f40 <HAL_UART_MspInit+0x1a8>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8000ef2:	4813      	ldr	r0, [pc, #76]	@ (8000f40 <HAL_UART_MspInit+0x1a8>)
 8000ef4:	f000 fe14 	bl	8001b20 <HAL_DMA_Init>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 8000efe:	f7ff fd4b 	bl	8000998 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a0e      	ldr	r2, [pc, #56]	@ (8000f40 <HAL_UART_MspInit+0x1a8>)
 8000f06:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f08:	4a0d      	ldr	r2, [pc, #52]	@ (8000f40 <HAL_UART_MspInit+0x1a8>)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2100      	movs	r1, #0
 8000f12:	2035      	movs	r0, #53	@ 0x35
 8000f14:	f000 fdbf 	bl	8001a96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000f18:	2035      	movs	r0, #53	@ 0x35
 8000f1a:	f000 fdd8 	bl	8001ace <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8000f1e:	bf00      	nop
 8000f20:	3728      	adds	r7, #40	@ 0x28
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40005000 	.word	0x40005000
 8000f2c:	40023800 	.word	0x40023800
 8000f30:	40020800 	.word	0x40020800
 8000f34:	40020c00 	.word	0x40020c00
 8000f38:	2000046c 	.word	0x2000046c
 8000f3c:	400260b8 	.word	0x400260b8
 8000f40:	200004cc 	.word	0x200004cc
 8000f44:	40026010 	.word	0x40026010

08000f48 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==UART5)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a11      	ldr	r2, [pc, #68]	@ (8000f9c <HAL_UART_MspDeInit+0x54>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d11b      	bne.n	8000f92 <HAL_UART_MspDeInit+0x4a>
  {
  /* USER CODE BEGIN UART5_MspDeInit 0 */

  /* USER CODE END UART5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART5_CLK_DISABLE();
 8000f5a:	4b11      	ldr	r3, [pc, #68]	@ (8000fa0 <HAL_UART_MspDeInit+0x58>)
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5e:	4a10      	ldr	r2, [pc, #64]	@ (8000fa0 <HAL_UART_MspDeInit+0x58>)
 8000f60:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8000f64:	6413      	str	r3, [r2, #64]	@ 0x40

    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12);
 8000f66:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f6a:	480e      	ldr	r0, [pc, #56]	@ (8000fa4 <HAL_UART_MspDeInit+0x5c>)
 8000f6c:	f001 fb4e 	bl	800260c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_2);
 8000f70:	2104      	movs	r1, #4
 8000f72:	480d      	ldr	r0, [pc, #52]	@ (8000fa8 <HAL_UART_MspDeInit+0x60>)
 8000f74:	f001 fb4a 	bl	800260c <HAL_GPIO_DeInit>

    /* UART5 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f000 fe7d 	bl	8001c7c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f86:	4618      	mov	r0, r3
 8000f88:	f000 fe78 	bl	8001c7c <HAL_DMA_DeInit>

    /* UART5 interrupt Deinit */
    HAL_NVIC_DisableIRQ(UART5_IRQn);
 8000f8c:	2035      	movs	r0, #53	@ 0x35
 8000f8e:	f000 fdac 	bl	8001aea <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN UART5_MspDeInit 1 */

  /* USER CODE END UART5_MspDeInit 1 */
  }
}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40005000 	.word	0x40005000
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40020800 	.word	0x40020800
 8000fa8:	40020c00 	.word	0x40020c00

08000fac <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000fb0:	4b14      	ldr	r3, [pc, #80]	@ (8001004 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fb2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000fb6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000fb8:	4b12      	ldr	r3, [pc, #72]	@ (8001004 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fba:	2204      	movs	r2, #4
 8000fbc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000fbe:	4b11      	ldr	r3, [pc, #68]	@ (8001004 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fc0:	2202      	movs	r2, #2
 8000fc2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000fc4:	4b0f      	ldr	r3, [pc, #60]	@ (8001004 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000fca:	4b0e      	ldr	r3, [pc, #56]	@ (8001004 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fcc:	2202      	movs	r2, #2
 8000fce:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001004 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000fd6:	4b0b      	ldr	r3, [pc, #44]	@ (8001004 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000fdc:	4b09      	ldr	r3, [pc, #36]	@ (8001004 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000fe2:	4b08      	ldr	r3, [pc, #32]	@ (8001004 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000fe8:	4b06      	ldr	r3, [pc, #24]	@ (8001004 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000fee:	4805      	ldr	r0, [pc, #20]	@ (8001004 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ff0:	f001 fd66 	bl	8002ac0 <HAL_PCD_Init>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000ffa:	f7ff fccd 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	2000052c 	.word	0x2000052c

08001008 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b08a      	sub	sp, #40	@ 0x28
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001028:	d13a      	bne.n	80010a0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	613b      	str	r3, [r7, #16]
 800102e:	4b1e      	ldr	r3, [pc, #120]	@ (80010a8 <HAL_PCD_MspInit+0xa0>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001032:	4a1d      	ldr	r2, [pc, #116]	@ (80010a8 <HAL_PCD_MspInit+0xa0>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	6313      	str	r3, [r2, #48]	@ 0x30
 800103a:	4b1b      	ldr	r3, [pc, #108]	@ (80010a8 <HAL_PCD_MspInit+0xa0>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	613b      	str	r3, [r7, #16]
 8001044:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001046:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800104a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104c:	2302      	movs	r3, #2
 800104e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001054:	2303      	movs	r3, #3
 8001056:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001058:	230a      	movs	r3, #10
 800105a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105c:	f107 0314 	add.w	r3, r7, #20
 8001060:	4619      	mov	r1, r3
 8001062:	4812      	ldr	r0, [pc, #72]	@ (80010ac <HAL_PCD_MspInit+0xa4>)
 8001064:	f001 f936 	bl	80022d4 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001068:	4b0f      	ldr	r3, [pc, #60]	@ (80010a8 <HAL_PCD_MspInit+0xa0>)
 800106a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800106c:	4a0e      	ldr	r2, [pc, #56]	@ (80010a8 <HAL_PCD_MspInit+0xa0>)
 800106e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001072:	6353      	str	r3, [r2, #52]	@ 0x34
 8001074:	2300      	movs	r3, #0
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	4b0b      	ldr	r3, [pc, #44]	@ (80010a8 <HAL_PCD_MspInit+0xa0>)
 800107a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800107c:	4a0a      	ldr	r2, [pc, #40]	@ (80010a8 <HAL_PCD_MspInit+0xa0>)
 800107e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001082:	6453      	str	r3, [r2, #68]	@ 0x44
 8001084:	4b08      	ldr	r3, [pc, #32]	@ (80010a8 <HAL_PCD_MspInit+0xa0>)
 8001086:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001088:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	68fb      	ldr	r3, [r7, #12]

    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8001090:	2200      	movs	r2, #0
 8001092:	2100      	movs	r1, #0
 8001094:	2043      	movs	r0, #67	@ 0x43
 8001096:	f000 fcfe 	bl	8001a96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800109a:	2043      	movs	r0, #67	@ 0x43
 800109c:	f000 fd17 	bl	8001ace <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80010a0:	bf00      	nop
 80010a2:	3728      	adds	r7, #40	@ 0x28
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40020000 	.word	0x40020000

080010b0 <Reset_Handler>:
 80010b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010e8 <LoopFillZerobss+0xe>
 80010b4:	f7ff fd54 	bl	8000b60 <SystemInit>
 80010b8:	480c      	ldr	r0, [pc, #48]	@ (80010ec <LoopFillZerobss+0x12>)
 80010ba:	490d      	ldr	r1, [pc, #52]	@ (80010f0 <LoopFillZerobss+0x16>)
 80010bc:	4a0d      	ldr	r2, [pc, #52]	@ (80010f4 <LoopFillZerobss+0x1a>)
 80010be:	2300      	movs	r3, #0
 80010c0:	e002      	b.n	80010c8 <LoopCopyDataInit>

080010c2 <CopyDataInit>:
 80010c2:	58d4      	ldr	r4, [r2, r3]
 80010c4:	50c4      	str	r4, [r0, r3]
 80010c6:	3304      	adds	r3, #4

080010c8 <LoopCopyDataInit>:
 80010c8:	18c4      	adds	r4, r0, r3
 80010ca:	428c      	cmp	r4, r1
 80010cc:	d3f9      	bcc.n	80010c2 <CopyDataInit>
 80010ce:	4a0a      	ldr	r2, [pc, #40]	@ (80010f8 <LoopFillZerobss+0x1e>)
 80010d0:	4c0a      	ldr	r4, [pc, #40]	@ (80010fc <LoopFillZerobss+0x22>)
 80010d2:	2300      	movs	r3, #0
 80010d4:	e001      	b.n	80010da <LoopFillZerobss>

080010d6 <FillZerobss>:
 80010d6:	6013      	str	r3, [r2, #0]
 80010d8:	3204      	adds	r2, #4

080010da <LoopFillZerobss>:
 80010da:	42a2      	cmp	r2, r4
 80010dc:	d3fb      	bcc.n	80010d6 <FillZerobss>
 80010de:	f00a f895 	bl	800b20c <__libc_init_array>
 80010e2:	f7ff fbd5 	bl	8000890 <main>
 80010e6:	4770      	bx	lr
 80010e8:	20020000 	.word	0x20020000
 80010ec:	20000000 	.word	0x20000000
 80010f0:	200002f8 	.word	0x200002f8
 80010f4:	0800bbe0 	.word	0x0800bbe0
 80010f8:	200002f8 	.word	0x200002f8
 80010fc:	20002484 	.word	0x20002484

08001100 <ADC_IRQHandler>:
 8001100:	e7fe      	b.n	8001100 <ADC_IRQHandler>
	...

08001104 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001108:	4b0e      	ldr	r3, [pc, #56]	@ (8001144 <HAL_Init+0x40>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a0d      	ldr	r2, [pc, #52]	@ (8001144 <HAL_Init+0x40>)
 800110e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001112:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001114:	4b0b      	ldr	r3, [pc, #44]	@ (8001144 <HAL_Init+0x40>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a0a      	ldr	r2, [pc, #40]	@ (8001144 <HAL_Init+0x40>)
 800111a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800111e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001120:	4b08      	ldr	r3, [pc, #32]	@ (8001144 <HAL_Init+0x40>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a07      	ldr	r2, [pc, #28]	@ (8001144 <HAL_Init+0x40>)
 8001126:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800112a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800112c:	2003      	movs	r0, #3
 800112e:	f000 fca7 	bl	8001a80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001132:	200f      	movs	r0, #15
 8001134:	f000 f808 	bl	8001148 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001138:	f7ff fc34 	bl	80009a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40023c00 	.word	0x40023c00

08001148 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001150:	4b12      	ldr	r3, [pc, #72]	@ (800119c <HAL_InitTick+0x54>)
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	4b12      	ldr	r3, [pc, #72]	@ (80011a0 <HAL_InitTick+0x58>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	4619      	mov	r1, r3
 800115a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800115e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001162:	fbb2 f3f3 	udiv	r3, r2, r3
 8001166:	4618      	mov	r0, r3
 8001168:	f000 fccd 	bl	8001b06 <HAL_SYSTICK_Config>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e00e      	b.n	8001194 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2b0f      	cmp	r3, #15
 800117a:	d80a      	bhi.n	8001192 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800117c:	2200      	movs	r2, #0
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	f04f 30ff 	mov.w	r0, #4294967295
 8001184:	f000 fc87 	bl	8001a96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001188:	4a06      	ldr	r2, [pc, #24]	@ (80011a4 <HAL_InitTick+0x5c>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800118e:	2300      	movs	r3, #0
 8001190:	e000      	b.n	8001194 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
}
 8001194:	4618      	mov	r0, r3
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20000000 	.word	0x20000000
 80011a0:	20000008 	.word	0x20000008
 80011a4:	20000004 	.word	0x20000004

080011a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011ac:	4b06      	ldr	r3, [pc, #24]	@ (80011c8 <HAL_IncTick+0x20>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	461a      	mov	r2, r3
 80011b2:	4b06      	ldr	r3, [pc, #24]	@ (80011cc <HAL_IncTick+0x24>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4413      	add	r3, r2
 80011b8:	4a04      	ldr	r2, [pc, #16]	@ (80011cc <HAL_IncTick+0x24>)
 80011ba:	6013      	str	r3, [r2, #0]
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	20000008 	.word	0x20000008
 80011cc:	20000a10 	.word	0x20000a10

080011d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  return uwTick;
 80011d4:	4b03      	ldr	r3, [pc, #12]	@ (80011e4 <HAL_GetTick+0x14>)
 80011d6:	681b      	ldr	r3, [r3, #0]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	20000a10 	.word	0x20000a10

080011e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011f0:	f7ff ffee 	bl	80011d0 <HAL_GetTick>
 80011f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001200:	d005      	beq.n	800120e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001202:	4b0a      	ldr	r3, [pc, #40]	@ (800122c <HAL_Delay+0x44>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	461a      	mov	r2, r3
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	4413      	add	r3, r2
 800120c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800120e:	bf00      	nop
 8001210:	f7ff ffde 	bl	80011d0 <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	68fa      	ldr	r2, [r7, #12]
 800121c:	429a      	cmp	r2, r3
 800121e:	d8f7      	bhi.n	8001210 <HAL_Delay+0x28>
  {
  }
}
 8001220:	bf00      	nop
 8001222:	bf00      	nop
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000008 	.word	0x20000008

08001230 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d101      	bne.n	8001242 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e0ed      	b.n	800141e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001248:	b2db      	uxtb	r3, r3
 800124a:	2b00      	cmp	r3, #0
 800124c:	d102      	bne.n	8001254 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff f9bc 	bl	80005cc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f042 0201 	orr.w	r2, r2, #1
 8001262:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001264:	f7ff ffb4 	bl	80011d0 <HAL_GetTick>
 8001268:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800126a:	e012      	b.n	8001292 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800126c:	f7ff ffb0 	bl	80011d0 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b0a      	cmp	r3, #10
 8001278:	d90b      	bls.n	8001292 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800127e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2205      	movs	r2, #5
 800128a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e0c5      	b.n	800141e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f003 0301 	and.w	r3, r3, #1
 800129c:	2b00      	cmp	r3, #0
 800129e:	d0e5      	beq.n	800126c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f022 0202 	bic.w	r2, r2, #2
 80012ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012b0:	f7ff ff8e 	bl	80011d0 <HAL_GetTick>
 80012b4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80012b6:	e012      	b.n	80012de <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012b8:	f7ff ff8a 	bl	80011d0 <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	2b0a      	cmp	r3, #10
 80012c4:	d90b      	bls.n	80012de <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ca:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2205      	movs	r2, #5
 80012d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e09f      	b.n	800141e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f003 0302 	and.w	r3, r3, #2
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d1e5      	bne.n	80012b8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	7e1b      	ldrb	r3, [r3, #24]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d108      	bne.n	8001306 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	e007      	b.n	8001316 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001314:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	7e5b      	ldrb	r3, [r3, #25]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d108      	bne.n	8001330 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	e007      	b.n	8001340 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800133e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	7e9b      	ldrb	r3, [r3, #26]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d108      	bne.n	800135a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f042 0220 	orr.w	r2, r2, #32
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	e007      	b.n	800136a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f022 0220 	bic.w	r2, r2, #32
 8001368:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	7edb      	ldrb	r3, [r3, #27]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d108      	bne.n	8001384 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f022 0210 	bic.w	r2, r2, #16
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	e007      	b.n	8001394 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f042 0210 	orr.w	r2, r2, #16
 8001392:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	7f1b      	ldrb	r3, [r3, #28]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d108      	bne.n	80013ae <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f042 0208 	orr.w	r2, r2, #8
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	e007      	b.n	80013be <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f022 0208 	bic.w	r2, r2, #8
 80013bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	7f5b      	ldrb	r3, [r3, #29]
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d108      	bne.n	80013d8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f042 0204 	orr.w	r2, r2, #4
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	e007      	b.n	80013e8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f022 0204 	bic.w	r2, r2, #4
 80013e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689a      	ldr	r2, [r3, #8]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	431a      	orrs	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	691b      	ldr	r3, [r3, #16]
 80013f6:	431a      	orrs	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	695b      	ldr	r3, [r3, #20]
 80013fc:	ea42 0103 	orr.w	r1, r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	1e5a      	subs	r2, r3, #1
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	430a      	orrs	r2, r1
 800140c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2200      	movs	r2, #0
 8001412:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2201      	movs	r2, #1
 8001418:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b08a      	sub	sp, #40	@ 0x28
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800142e:	2300      	movs	r3, #0
 8001430:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	695b      	ldr	r3, [r3, #20]
 8001438:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	691b      	ldr	r3, [r3, #16]
 8001458:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001462:	6a3b      	ldr	r3, [r7, #32]
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	2b00      	cmp	r3, #0
 800146a:	d07c      	beq.n	8001566 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	2b00      	cmp	r3, #0
 8001474:	d023      	beq.n	80014be <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2201      	movs	r2, #1
 800147c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	f003 0302 	and.w	r3, r3, #2
 8001484:	2b00      	cmp	r3, #0
 8001486:	d003      	beq.n	8001490 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f000 f983 	bl	8001794 <HAL_CAN_TxMailbox0CompleteCallback>
 800148e:	e016      	b.n	80014be <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	f003 0304 	and.w	r3, r3, #4
 8001496:	2b00      	cmp	r3, #0
 8001498:	d004      	beq.n	80014a4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800149a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800149c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80014a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80014a2:	e00c      	b.n	80014be <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	f003 0308 	and.w	r3, r3, #8
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d004      	beq.n	80014b8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80014ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80014b6:	e002      	b.n	80014be <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f000 f989 	bl	80017d0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d024      	beq.n	8001512 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014d0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d003      	beq.n	80014e4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f000 f963 	bl	80017a8 <HAL_CAN_TxMailbox1CompleteCallback>
 80014e2:	e016      	b.n	8001512 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d004      	beq.n	80014f8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80014ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80014f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80014f6:	e00c      	b.n	8001512 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d004      	beq.n	800150c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001504:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001508:	627b      	str	r3, [r7, #36]	@ 0x24
 800150a:	e002      	b.n	8001512 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f000 f969 	bl	80017e4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d024      	beq.n	8001566 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001524:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d003      	beq.n	8001538 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f000 f943 	bl	80017bc <HAL_CAN_TxMailbox2CompleteCallback>
 8001536:	e016      	b.n	8001566 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d004      	beq.n	800154c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001544:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001548:	627b      	str	r3, [r7, #36]	@ 0x24
 800154a:	e00c      	b.n	8001566 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d004      	beq.n	8001560 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001558:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800155c:	627b      	str	r3, [r7, #36]	@ 0x24
 800155e:	e002      	b.n	8001566 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f000 f949 	bl	80017f8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001566:	6a3b      	ldr	r3, [r7, #32]
 8001568:	f003 0308 	and.w	r3, r3, #8
 800156c:	2b00      	cmp	r3, #0
 800156e:	d00c      	beq.n	800158a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	f003 0310 	and.w	r3, r3, #16
 8001576:	2b00      	cmp	r3, #0
 8001578:	d007      	beq.n	800158a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800157a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800157c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001580:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2210      	movs	r2, #16
 8001588:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800158a:	6a3b      	ldr	r3, [r7, #32]
 800158c:	f003 0304 	and.w	r3, r3, #4
 8001590:	2b00      	cmp	r3, #0
 8001592:	d00b      	beq.n	80015ac <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	f003 0308 	and.w	r3, r3, #8
 800159a:	2b00      	cmp	r3, #0
 800159c:	d006      	beq.n	80015ac <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2208      	movs	r2, #8
 80015a4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f000 f93a 	bl	8001820 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80015ac:	6a3b      	ldr	r3, [r7, #32]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d009      	beq.n	80015ca <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	f003 0303 	and.w	r3, r3, #3
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d002      	beq.n	80015ca <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f000 f921 	bl	800180c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80015ca:	6a3b      	ldr	r3, [r7, #32]
 80015cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d00c      	beq.n	80015ee <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	f003 0310 	and.w	r3, r3, #16
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d007      	beq.n	80015ee <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80015de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015e4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2210      	movs	r2, #16
 80015ec:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80015ee:	6a3b      	ldr	r3, [r7, #32]
 80015f0:	f003 0320 	and.w	r3, r3, #32
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d00b      	beq.n	8001610 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	f003 0308 	and.w	r3, r3, #8
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d006      	beq.n	8001610 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2208      	movs	r2, #8
 8001608:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f000 f91c 	bl	8001848 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001610:	6a3b      	ldr	r3, [r7, #32]
 8001612:	f003 0310 	and.w	r3, r3, #16
 8001616:	2b00      	cmp	r3, #0
 8001618:	d009      	beq.n	800162e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	691b      	ldr	r3, [r3, #16]
 8001620:	f003 0303 	and.w	r3, r3, #3
 8001624:	2b00      	cmp	r3, #0
 8001626:	d002      	beq.n	800162e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f000 f903 	bl	8001834 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800162e:	6a3b      	ldr	r3, [r7, #32]
 8001630:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d00b      	beq.n	8001650 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	f003 0310 	and.w	r3, r3, #16
 800163e:	2b00      	cmp	r3, #0
 8001640:	d006      	beq.n	8001650 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2210      	movs	r2, #16
 8001648:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f000 f906 	bl	800185c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001650:	6a3b      	ldr	r3, [r7, #32]
 8001652:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d00b      	beq.n	8001672 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	f003 0308 	and.w	r3, r3, #8
 8001660:	2b00      	cmp	r3, #0
 8001662:	d006      	beq.n	8001672 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2208      	movs	r2, #8
 800166a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f000 f8ff 	bl	8001870 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001672:	6a3b      	ldr	r3, [r7, #32]
 8001674:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d07b      	beq.n	8001774 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	f003 0304 	and.w	r3, r3, #4
 8001682:	2b00      	cmp	r3, #0
 8001684:	d072      	beq.n	800176c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001686:	6a3b      	ldr	r3, [r7, #32]
 8001688:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800168c:	2b00      	cmp	r3, #0
 800168e:	d008      	beq.n	80016a2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001696:	2b00      	cmp	r3, #0
 8001698:	d003      	beq.n	80016a2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800169a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80016a2:	6a3b      	ldr	r3, [r7, #32]
 80016a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d008      	beq.n	80016be <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d003      	beq.n	80016be <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80016b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b8:	f043 0302 	orr.w	r3, r3, #2
 80016bc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80016be:	6a3b      	ldr	r3, [r7, #32]
 80016c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d008      	beq.n	80016da <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d003      	beq.n	80016da <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80016d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d4:	f043 0304 	orr.w	r3, r3, #4
 80016d8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80016da:	6a3b      	ldr	r3, [r7, #32]
 80016dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d043      	beq.n	800176c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d03e      	beq.n	800176c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80016f4:	2b60      	cmp	r3, #96	@ 0x60
 80016f6:	d02b      	beq.n	8001750 <HAL_CAN_IRQHandler+0x32a>
 80016f8:	2b60      	cmp	r3, #96	@ 0x60
 80016fa:	d82e      	bhi.n	800175a <HAL_CAN_IRQHandler+0x334>
 80016fc:	2b50      	cmp	r3, #80	@ 0x50
 80016fe:	d022      	beq.n	8001746 <HAL_CAN_IRQHandler+0x320>
 8001700:	2b50      	cmp	r3, #80	@ 0x50
 8001702:	d82a      	bhi.n	800175a <HAL_CAN_IRQHandler+0x334>
 8001704:	2b40      	cmp	r3, #64	@ 0x40
 8001706:	d019      	beq.n	800173c <HAL_CAN_IRQHandler+0x316>
 8001708:	2b40      	cmp	r3, #64	@ 0x40
 800170a:	d826      	bhi.n	800175a <HAL_CAN_IRQHandler+0x334>
 800170c:	2b30      	cmp	r3, #48	@ 0x30
 800170e:	d010      	beq.n	8001732 <HAL_CAN_IRQHandler+0x30c>
 8001710:	2b30      	cmp	r3, #48	@ 0x30
 8001712:	d822      	bhi.n	800175a <HAL_CAN_IRQHandler+0x334>
 8001714:	2b10      	cmp	r3, #16
 8001716:	d002      	beq.n	800171e <HAL_CAN_IRQHandler+0x2f8>
 8001718:	2b20      	cmp	r3, #32
 800171a:	d005      	beq.n	8001728 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800171c:	e01d      	b.n	800175a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800171e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001720:	f043 0308 	orr.w	r3, r3, #8
 8001724:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001726:	e019      	b.n	800175c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800172a:	f043 0310 	orr.w	r3, r3, #16
 800172e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001730:	e014      	b.n	800175c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001734:	f043 0320 	orr.w	r3, r3, #32
 8001738:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800173a:	e00f      	b.n	800175c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800173c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800173e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001742:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001744:	e00a      	b.n	800175c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001748:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800174c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800174e:	e005      	b.n	800175c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001752:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001756:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001758:	e000      	b.n	800175c <HAL_CAN_IRQHandler+0x336>
            break;
 800175a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	699a      	ldr	r2, [r3, #24]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800176a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2204      	movs	r2, #4
 8001772:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001776:	2b00      	cmp	r3, #0
 8001778:	d008      	beq.n	800178c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800177e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001780:	431a      	orrs	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f000 f87c 	bl	8001884 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800178c:	bf00      	nop
 800178e:	3728      	adds	r7, #40	@ 0x28
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80017ec:	bf00      	nop
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001828:	bf00      	nop
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018a8:	4b0c      	ldr	r3, [pc, #48]	@ (80018dc <__NVIC_SetPriorityGrouping+0x44>)
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ae:	68ba      	ldr	r2, [r7, #8]
 80018b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018b4:	4013      	ands	r3, r2
 80018b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ca:	4a04      	ldr	r2, [pc, #16]	@ (80018dc <__NVIC_SetPriorityGrouping+0x44>)
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	60d3      	str	r3, [r2, #12]
}
 80018d0:	bf00      	nop
 80018d2:	3714      	adds	r7, #20
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018e4:	4b04      	ldr	r3, [pc, #16]	@ (80018f8 <__NVIC_GetPriorityGrouping+0x18>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	0a1b      	lsrs	r3, r3, #8
 80018ea:	f003 0307 	and.w	r3, r3, #7
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	e000ed00 	.word	0xe000ed00

080018fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190a:	2b00      	cmp	r3, #0
 800190c:	db0b      	blt.n	8001926 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800190e:	79fb      	ldrb	r3, [r7, #7]
 8001910:	f003 021f 	and.w	r2, r3, #31
 8001914:	4907      	ldr	r1, [pc, #28]	@ (8001934 <__NVIC_EnableIRQ+0x38>)
 8001916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191a:	095b      	lsrs	r3, r3, #5
 800191c:	2001      	movs	r0, #1
 800191e:	fa00 f202 	lsl.w	r2, r0, r2
 8001922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	e000e100 	.word	0xe000e100

08001938 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001946:	2b00      	cmp	r3, #0
 8001948:	db12      	blt.n	8001970 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	f003 021f 	and.w	r2, r3, #31
 8001950:	490a      	ldr	r1, [pc, #40]	@ (800197c <__NVIC_DisableIRQ+0x44>)
 8001952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001956:	095b      	lsrs	r3, r3, #5
 8001958:	2001      	movs	r0, #1
 800195a:	fa00 f202 	lsl.w	r2, r0, r2
 800195e:	3320      	adds	r3, #32
 8001960:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001964:	f3bf 8f4f 	dsb	sy
}
 8001968:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800196a:	f3bf 8f6f 	isb	sy
}
 800196e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	e000e100 	.word	0xe000e100

08001980 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	6039      	str	r1, [r7, #0]
 800198a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800198c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001990:	2b00      	cmp	r3, #0
 8001992:	db0a      	blt.n	80019aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	b2da      	uxtb	r2, r3
 8001998:	490c      	ldr	r1, [pc, #48]	@ (80019cc <__NVIC_SetPriority+0x4c>)
 800199a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199e:	0112      	lsls	r2, r2, #4
 80019a0:	b2d2      	uxtb	r2, r2
 80019a2:	440b      	add	r3, r1
 80019a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019a8:	e00a      	b.n	80019c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	4908      	ldr	r1, [pc, #32]	@ (80019d0 <__NVIC_SetPriority+0x50>)
 80019b0:	79fb      	ldrb	r3, [r7, #7]
 80019b2:	f003 030f 	and.w	r3, r3, #15
 80019b6:	3b04      	subs	r3, #4
 80019b8:	0112      	lsls	r2, r2, #4
 80019ba:	b2d2      	uxtb	r2, r2
 80019bc:	440b      	add	r3, r1
 80019be:	761a      	strb	r2, [r3, #24]
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	e000e100 	.word	0xe000e100
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b089      	sub	sp, #36	@ 0x24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	f1c3 0307 	rsb	r3, r3, #7
 80019ee:	2b04      	cmp	r3, #4
 80019f0:	bf28      	it	cs
 80019f2:	2304      	movcs	r3, #4
 80019f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	3304      	adds	r3, #4
 80019fa:	2b06      	cmp	r3, #6
 80019fc:	d902      	bls.n	8001a04 <NVIC_EncodePriority+0x30>
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	3b03      	subs	r3, #3
 8001a02:	e000      	b.n	8001a06 <NVIC_EncodePriority+0x32>
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a08:	f04f 32ff 	mov.w	r2, #4294967295
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	43da      	mvns	r2, r3
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	401a      	ands	r2, r3
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	fa01 f303 	lsl.w	r3, r1, r3
 8001a26:	43d9      	mvns	r1, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a2c:	4313      	orrs	r3, r2
         );
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3724      	adds	r7, #36	@ 0x24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
	...

08001a3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3b01      	subs	r3, #1
 8001a48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a4c:	d301      	bcc.n	8001a52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e00f      	b.n	8001a72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a52:	4a0a      	ldr	r2, [pc, #40]	@ (8001a7c <SysTick_Config+0x40>)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3b01      	subs	r3, #1
 8001a58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a5a:	210f      	movs	r1, #15
 8001a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a60:	f7ff ff8e 	bl	8001980 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a64:	4b05      	ldr	r3, [pc, #20]	@ (8001a7c <SysTick_Config+0x40>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a6a:	4b04      	ldr	r3, [pc, #16]	@ (8001a7c <SysTick_Config+0x40>)
 8001a6c:	2207      	movs	r2, #7
 8001a6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	e000e010 	.word	0xe000e010

08001a80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f7ff ff05 	bl	8001898 <__NVIC_SetPriorityGrouping>
}
 8001a8e:	bf00      	nop
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b086      	sub	sp, #24
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	60b9      	str	r1, [r7, #8]
 8001aa0:	607a      	str	r2, [r7, #4]
 8001aa2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aa8:	f7ff ff1a 	bl	80018e0 <__NVIC_GetPriorityGrouping>
 8001aac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	68b9      	ldr	r1, [r7, #8]
 8001ab2:	6978      	ldr	r0, [r7, #20]
 8001ab4:	f7ff ff8e 	bl	80019d4 <NVIC_EncodePriority>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001abe:	4611      	mov	r1, r2
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff ff5d 	bl	8001980 <__NVIC_SetPriority>
}
 8001ac6:	bf00      	nop
 8001ac8:	3718      	adds	r7, #24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b082      	sub	sp, #8
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff ff0d 	bl	80018fc <__NVIC_EnableIRQ>
}
 8001ae2:	bf00      	nop
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	4603      	mov	r3, r0
 8001af2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff ff1d 	bl	8001938 <__NVIC_DisableIRQ>
}
 8001afe:	bf00      	nop
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b082      	sub	sp, #8
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f7ff ff94 	bl	8001a3c <SysTick_Config>
 8001b14:	4603      	mov	r3, r0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
	...

08001b20 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b2c:	f7ff fb50 	bl	80011d0 <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d101      	bne.n	8001b3c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e099      	b.n	8001c70 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2202      	movs	r2, #2
 8001b40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f022 0201 	bic.w	r2, r2, #1
 8001b5a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b5c:	e00f      	b.n	8001b7e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b5e:	f7ff fb37 	bl	80011d0 <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	2b05      	cmp	r3, #5
 8001b6a:	d908      	bls.n	8001b7e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2220      	movs	r2, #32
 8001b70:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2203      	movs	r2, #3
 8001b76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e078      	b.n	8001c70 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d1e8      	bne.n	8001b5e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b94:	697a      	ldr	r2, [r7, #20]
 8001b96:	4b38      	ldr	r3, [pc, #224]	@ (8001c78 <HAL_DMA_Init+0x158>)
 8001b98:	4013      	ands	r3, r2
 8001b9a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685a      	ldr	r2, [r3, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001baa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	691b      	ldr	r3, [r3, #16]
 8001bb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bc2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a1b      	ldr	r3, [r3, #32]
 8001bc8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bca:	697a      	ldr	r2, [r7, #20]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd4:	2b04      	cmp	r3, #4
 8001bd6:	d107      	bne.n	8001be8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be0:	4313      	orrs	r3, r2
 8001be2:	697a      	ldr	r2, [r7, #20]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	697a      	ldr	r2, [r7, #20]
 8001bee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	f023 0307 	bic.w	r3, r3, #7
 8001bfe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c04:	697a      	ldr	r2, [r7, #20]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c0e:	2b04      	cmp	r3, #4
 8001c10:	d117      	bne.n	8001c42 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c16:	697a      	ldr	r2, [r7, #20]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d00e      	beq.n	8001c42 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f000 fad9 	bl	80021dc <DMA_CheckFifoParam>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d008      	beq.n	8001c42 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2240      	movs	r2, #64	@ 0x40
 8001c34:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e016      	b.n	8001c70 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 fa90 	bl	8002170 <DMA_CalcBaseAndBitshift>
 8001c50:	4603      	mov	r3, r0
 8001c52:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c58:	223f      	movs	r2, #63	@ 0x3f
 8001c5a:	409a      	lsls	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001c6e:	2300      	movs	r3, #0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3718      	adds	r7, #24
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	f010803f 	.word	0xf010803f

08001c7c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e050      	b.n	8001d30 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d101      	bne.n	8001c9e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	e048      	b.n	8001d30 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 0201 	bic.w	r2, r2, #1
 8001cac:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2221      	movs	r2, #33	@ 0x21
 8001cdc:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 fa46 	bl	8002170 <DMA_CalcBaseAndBitshift>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d10:	223f      	movs	r2, #63	@ 0x3f
 8001d12:	409a      	lsls	r2, r3
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d44:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d46:	f7ff fa43 	bl	80011d0 <HAL_GetTick>
 8001d4a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d008      	beq.n	8001d6a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2280      	movs	r2, #128	@ 0x80
 8001d5c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e052      	b.n	8001e10 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f022 0216 	bic.w	r2, r2, #22
 8001d78:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	695a      	ldr	r2, [r3, #20]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d88:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d103      	bne.n	8001d9a <HAL_DMA_Abort+0x62>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d007      	beq.n	8001daa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f022 0208 	bic.w	r2, r2, #8
 8001da8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f022 0201 	bic.w	r2, r2, #1
 8001db8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dba:	e013      	b.n	8001de4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dbc:	f7ff fa08 	bl	80011d0 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b05      	cmp	r3, #5
 8001dc8:	d90c      	bls.n	8001de4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2220      	movs	r2, #32
 8001dce:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2203      	movs	r2, #3
 8001dd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e015      	b.n	8001e10 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1e4      	bne.n	8001dbc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001df6:	223f      	movs	r2, #63	@ 0x3f
 8001df8:	409a      	lsls	r2, r3
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2201      	movs	r2, #1
 8001e02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3710      	adds	r7, #16
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d004      	beq.n	8001e36 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2280      	movs	r2, #128	@ 0x80
 8001e30:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e00c      	b.n	8001e50 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2205      	movs	r2, #5
 8001e3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f022 0201 	bic.w	r2, r2, #1
 8001e4c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001e64:	2300      	movs	r3, #0
 8001e66:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e68:	4b8e      	ldr	r3, [pc, #568]	@ (80020a4 <HAL_DMA_IRQHandler+0x248>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a8e      	ldr	r2, [pc, #568]	@ (80020a8 <HAL_DMA_IRQHandler+0x24c>)
 8001e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e72:	0a9b      	lsrs	r3, r3, #10
 8001e74:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e7a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e86:	2208      	movs	r2, #8
 8001e88:	409a      	lsls	r2, r3
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d01a      	beq.n	8001ec8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0304 	and.w	r3, r3, #4
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d013      	beq.n	8001ec8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f022 0204 	bic.w	r2, r2, #4
 8001eae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eb4:	2208      	movs	r2, #8
 8001eb6:	409a      	lsls	r2, r3
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ec0:	f043 0201 	orr.w	r2, r3, #1
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ecc:	2201      	movs	r2, #1
 8001ece:	409a      	lsls	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d012      	beq.n	8001efe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	695b      	ldr	r3, [r3, #20]
 8001ede:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d00b      	beq.n	8001efe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eea:	2201      	movs	r2, #1
 8001eec:	409a      	lsls	r2, r3
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ef6:	f043 0202 	orr.w	r2, r3, #2
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f02:	2204      	movs	r2, #4
 8001f04:	409a      	lsls	r2, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d012      	beq.n	8001f34 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d00b      	beq.n	8001f34 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f20:	2204      	movs	r2, #4
 8001f22:	409a      	lsls	r2, r3
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f2c:	f043 0204 	orr.w	r2, r3, #4
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f38:	2210      	movs	r2, #16
 8001f3a:	409a      	lsls	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d043      	beq.n	8001fcc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0308 	and.w	r3, r3, #8
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d03c      	beq.n	8001fcc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f56:	2210      	movs	r2, #16
 8001f58:	409a      	lsls	r2, r3
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d018      	beq.n	8001f9e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d108      	bne.n	8001f8c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d024      	beq.n	8001fcc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	4798      	blx	r3
 8001f8a:	e01f      	b.n	8001fcc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d01b      	beq.n	8001fcc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	4798      	blx	r3
 8001f9c:	e016      	b.n	8001fcc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d107      	bne.n	8001fbc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f022 0208 	bic.w	r2, r2, #8
 8001fba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d003      	beq.n	8001fcc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fd0:	2220      	movs	r2, #32
 8001fd2:	409a      	lsls	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f000 808f 	beq.w	80020fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0310 	and.w	r3, r3, #16
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f000 8087 	beq.w	80020fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ff2:	2220      	movs	r2, #32
 8001ff4:	409a      	lsls	r2, r3
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b05      	cmp	r3, #5
 8002004:	d136      	bne.n	8002074 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 0216 	bic.w	r2, r2, #22
 8002014:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	695a      	ldr	r2, [r3, #20]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002024:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202a:	2b00      	cmp	r3, #0
 800202c:	d103      	bne.n	8002036 <HAL_DMA_IRQHandler+0x1da>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002032:	2b00      	cmp	r3, #0
 8002034:	d007      	beq.n	8002046 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f022 0208 	bic.w	r2, r2, #8
 8002044:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800204a:	223f      	movs	r2, #63	@ 0x3f
 800204c:	409a      	lsls	r2, r3
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002066:	2b00      	cmp	r3, #0
 8002068:	d07e      	beq.n	8002168 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	4798      	blx	r3
        }
        return;
 8002072:	e079      	b.n	8002168 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d01d      	beq.n	80020be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d10d      	bne.n	80020ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002094:	2b00      	cmp	r3, #0
 8002096:	d031      	beq.n	80020fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	4798      	blx	r3
 80020a0:	e02c      	b.n	80020fc <HAL_DMA_IRQHandler+0x2a0>
 80020a2:	bf00      	nop
 80020a4:	20000000 	.word	0x20000000
 80020a8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d023      	beq.n	80020fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	4798      	blx	r3
 80020bc:	e01e      	b.n	80020fc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d10f      	bne.n	80020ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f022 0210 	bic.w	r2, r2, #16
 80020da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d003      	beq.n	80020fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002100:	2b00      	cmp	r3, #0
 8002102:	d032      	beq.n	800216a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	2b00      	cmp	r3, #0
 800210e:	d022      	beq.n	8002156 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2205      	movs	r2, #5
 8002114:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f022 0201 	bic.w	r2, r2, #1
 8002126:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	3301      	adds	r3, #1
 800212c:	60bb      	str	r3, [r7, #8]
 800212e:	697a      	ldr	r2, [r7, #20]
 8002130:	429a      	cmp	r2, r3
 8002132:	d307      	bcc.n	8002144 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1f2      	bne.n	8002128 <HAL_DMA_IRQHandler+0x2cc>
 8002142:	e000      	b.n	8002146 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002144:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2201      	movs	r2, #1
 800214a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800215a:	2b00      	cmp	r3, #0
 800215c:	d005      	beq.n	800216a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	4798      	blx	r3
 8002166:	e000      	b.n	800216a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002168:	bf00      	nop
    }
  }
}
 800216a:	3718      	adds	r7, #24
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	b2db      	uxtb	r3, r3
 800217e:	3b10      	subs	r3, #16
 8002180:	4a14      	ldr	r2, [pc, #80]	@ (80021d4 <DMA_CalcBaseAndBitshift+0x64>)
 8002182:	fba2 2303 	umull	r2, r3, r2, r3
 8002186:	091b      	lsrs	r3, r3, #4
 8002188:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800218a:	4a13      	ldr	r2, [pc, #76]	@ (80021d8 <DMA_CalcBaseAndBitshift+0x68>)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	4413      	add	r3, r2
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	461a      	mov	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2b03      	cmp	r3, #3
 800219c:	d909      	bls.n	80021b2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80021a6:	f023 0303 	bic.w	r3, r3, #3
 80021aa:	1d1a      	adds	r2, r3, #4
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	659a      	str	r2, [r3, #88]	@ 0x58
 80021b0:	e007      	b.n	80021c2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80021ba:	f023 0303 	bic.w	r3, r3, #3
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3714      	adds	r7, #20
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	aaaaaaab 	.word	0xaaaaaaab
 80021d8:	0800bb94 	.word	0x0800bb94

080021dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021e4:	2300      	movs	r3, #0
 80021e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d11f      	bne.n	8002236 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	2b03      	cmp	r3, #3
 80021fa:	d856      	bhi.n	80022aa <DMA_CheckFifoParam+0xce>
 80021fc:	a201      	add	r2, pc, #4	@ (adr r2, 8002204 <DMA_CheckFifoParam+0x28>)
 80021fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002202:	bf00      	nop
 8002204:	08002215 	.word	0x08002215
 8002208:	08002227 	.word	0x08002227
 800220c:	08002215 	.word	0x08002215
 8002210:	080022ab 	.word	0x080022ab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002218:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d046      	beq.n	80022ae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002224:	e043      	b.n	80022ae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800222a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800222e:	d140      	bne.n	80022b2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002234:	e03d      	b.n	80022b2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800223e:	d121      	bne.n	8002284 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	2b03      	cmp	r3, #3
 8002244:	d837      	bhi.n	80022b6 <DMA_CheckFifoParam+0xda>
 8002246:	a201      	add	r2, pc, #4	@ (adr r2, 800224c <DMA_CheckFifoParam+0x70>)
 8002248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800224c:	0800225d 	.word	0x0800225d
 8002250:	08002263 	.word	0x08002263
 8002254:	0800225d 	.word	0x0800225d
 8002258:	08002275 	.word	0x08002275
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	73fb      	strb	r3, [r7, #15]
      break;
 8002260:	e030      	b.n	80022c4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002266:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d025      	beq.n	80022ba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002272:	e022      	b.n	80022ba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002278:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800227c:	d11f      	bne.n	80022be <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002282:	e01c      	b.n	80022be <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	2b02      	cmp	r3, #2
 8002288:	d903      	bls.n	8002292 <DMA_CheckFifoParam+0xb6>
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	2b03      	cmp	r3, #3
 800228e:	d003      	beq.n	8002298 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002290:	e018      	b.n	80022c4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	73fb      	strb	r3, [r7, #15]
      break;
 8002296:	e015      	b.n	80022c4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800229c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00e      	beq.n	80022c2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	73fb      	strb	r3, [r7, #15]
      break;
 80022a8:	e00b      	b.n	80022c2 <DMA_CheckFifoParam+0xe6>
      break;
 80022aa:	bf00      	nop
 80022ac:	e00a      	b.n	80022c4 <DMA_CheckFifoParam+0xe8>
      break;
 80022ae:	bf00      	nop
 80022b0:	e008      	b.n	80022c4 <DMA_CheckFifoParam+0xe8>
      break;
 80022b2:	bf00      	nop
 80022b4:	e006      	b.n	80022c4 <DMA_CheckFifoParam+0xe8>
      break;
 80022b6:	bf00      	nop
 80022b8:	e004      	b.n	80022c4 <DMA_CheckFifoParam+0xe8>
      break;
 80022ba:	bf00      	nop
 80022bc:	e002      	b.n	80022c4 <DMA_CheckFifoParam+0xe8>
      break;   
 80022be:	bf00      	nop
 80022c0:	e000      	b.n	80022c4 <DMA_CheckFifoParam+0xe8>
      break;
 80022c2:	bf00      	nop
    }
  } 
  
  return status; 
 80022c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3714      	adds	r7, #20
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop

080022d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b089      	sub	sp, #36	@ 0x24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022de:	2300      	movs	r3, #0
 80022e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022e2:	2300      	movs	r3, #0
 80022e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022e6:	2300      	movs	r3, #0
 80022e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ea:	2300      	movs	r3, #0
 80022ec:	61fb      	str	r3, [r7, #28]
 80022ee:	e16b      	b.n	80025c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022f0:	2201      	movs	r2, #1
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	697a      	ldr	r2, [r7, #20]
 8002300:	4013      	ands	r3, r2
 8002302:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	429a      	cmp	r2, r3
 800230a:	f040 815a 	bne.w	80025c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f003 0303 	and.w	r3, r3, #3
 8002316:	2b01      	cmp	r3, #1
 8002318:	d005      	beq.n	8002326 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002322:	2b02      	cmp	r3, #2
 8002324:	d130      	bne.n	8002388 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	2203      	movs	r2, #3
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	43db      	mvns	r3, r3
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	4013      	ands	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	68da      	ldr	r2, [r3, #12]
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	4313      	orrs	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800235c:	2201      	movs	r2, #1
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	43db      	mvns	r3, r3
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	4013      	ands	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	091b      	lsrs	r3, r3, #4
 8002372:	f003 0201 	and.w	r2, r3, #1
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	4313      	orrs	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f003 0303 	and.w	r3, r3, #3
 8002390:	2b03      	cmp	r3, #3
 8002392:	d017      	beq.n	80023c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	2203      	movs	r2, #3
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	43db      	mvns	r3, r3
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	4013      	ands	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f003 0303 	and.w	r3, r3, #3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d123      	bne.n	8002418 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	08da      	lsrs	r2, r3, #3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3208      	adds	r2, #8
 80023d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	f003 0307 	and.w	r3, r3, #7
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	220f      	movs	r2, #15
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	43db      	mvns	r3, r3
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	4013      	ands	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	691a      	ldr	r2, [r3, #16]
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	f003 0307 	and.w	r3, r3, #7
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	4313      	orrs	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	08da      	lsrs	r2, r3, #3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	3208      	adds	r2, #8
 8002412:	69b9      	ldr	r1, [r7, #24]
 8002414:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	2203      	movs	r2, #3
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	43db      	mvns	r3, r3
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	4013      	ands	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f003 0203 	and.w	r2, r3, #3
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	4313      	orrs	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002454:	2b00      	cmp	r3, #0
 8002456:	f000 80b4 	beq.w	80025c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800245a:	2300      	movs	r3, #0
 800245c:	60fb      	str	r3, [r7, #12]
 800245e:	4b60      	ldr	r3, [pc, #384]	@ (80025e0 <HAL_GPIO_Init+0x30c>)
 8002460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002462:	4a5f      	ldr	r2, [pc, #380]	@ (80025e0 <HAL_GPIO_Init+0x30c>)
 8002464:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002468:	6453      	str	r3, [r2, #68]	@ 0x44
 800246a:	4b5d      	ldr	r3, [pc, #372]	@ (80025e0 <HAL_GPIO_Init+0x30c>)
 800246c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800246e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002476:	4a5b      	ldr	r2, [pc, #364]	@ (80025e4 <HAL_GPIO_Init+0x310>)
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	089b      	lsrs	r3, r3, #2
 800247c:	3302      	adds	r3, #2
 800247e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002482:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	f003 0303 	and.w	r3, r3, #3
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	220f      	movs	r2, #15
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	43db      	mvns	r3, r3
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	4013      	ands	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a52      	ldr	r2, [pc, #328]	@ (80025e8 <HAL_GPIO_Init+0x314>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d02b      	beq.n	80024fa <HAL_GPIO_Init+0x226>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a51      	ldr	r2, [pc, #324]	@ (80025ec <HAL_GPIO_Init+0x318>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d025      	beq.n	80024f6 <HAL_GPIO_Init+0x222>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a50      	ldr	r2, [pc, #320]	@ (80025f0 <HAL_GPIO_Init+0x31c>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d01f      	beq.n	80024f2 <HAL_GPIO_Init+0x21e>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a4f      	ldr	r2, [pc, #316]	@ (80025f4 <HAL_GPIO_Init+0x320>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d019      	beq.n	80024ee <HAL_GPIO_Init+0x21a>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a4e      	ldr	r2, [pc, #312]	@ (80025f8 <HAL_GPIO_Init+0x324>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d013      	beq.n	80024ea <HAL_GPIO_Init+0x216>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a4d      	ldr	r2, [pc, #308]	@ (80025fc <HAL_GPIO_Init+0x328>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d00d      	beq.n	80024e6 <HAL_GPIO_Init+0x212>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a4c      	ldr	r2, [pc, #304]	@ (8002600 <HAL_GPIO_Init+0x32c>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d007      	beq.n	80024e2 <HAL_GPIO_Init+0x20e>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a4b      	ldr	r2, [pc, #300]	@ (8002604 <HAL_GPIO_Init+0x330>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d101      	bne.n	80024de <HAL_GPIO_Init+0x20a>
 80024da:	2307      	movs	r3, #7
 80024dc:	e00e      	b.n	80024fc <HAL_GPIO_Init+0x228>
 80024de:	2308      	movs	r3, #8
 80024e0:	e00c      	b.n	80024fc <HAL_GPIO_Init+0x228>
 80024e2:	2306      	movs	r3, #6
 80024e4:	e00a      	b.n	80024fc <HAL_GPIO_Init+0x228>
 80024e6:	2305      	movs	r3, #5
 80024e8:	e008      	b.n	80024fc <HAL_GPIO_Init+0x228>
 80024ea:	2304      	movs	r3, #4
 80024ec:	e006      	b.n	80024fc <HAL_GPIO_Init+0x228>
 80024ee:	2303      	movs	r3, #3
 80024f0:	e004      	b.n	80024fc <HAL_GPIO_Init+0x228>
 80024f2:	2302      	movs	r3, #2
 80024f4:	e002      	b.n	80024fc <HAL_GPIO_Init+0x228>
 80024f6:	2301      	movs	r3, #1
 80024f8:	e000      	b.n	80024fc <HAL_GPIO_Init+0x228>
 80024fa:	2300      	movs	r3, #0
 80024fc:	69fa      	ldr	r2, [r7, #28]
 80024fe:	f002 0203 	and.w	r2, r2, #3
 8002502:	0092      	lsls	r2, r2, #2
 8002504:	4093      	lsls	r3, r2
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4313      	orrs	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800250c:	4935      	ldr	r1, [pc, #212]	@ (80025e4 <HAL_GPIO_Init+0x310>)
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	089b      	lsrs	r3, r3, #2
 8002512:	3302      	adds	r3, #2
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800251a:	4b3b      	ldr	r3, [pc, #236]	@ (8002608 <HAL_GPIO_Init+0x334>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	43db      	mvns	r3, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4013      	ands	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	4313      	orrs	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800253e:	4a32      	ldr	r2, [pc, #200]	@ (8002608 <HAL_GPIO_Init+0x334>)
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002544:	4b30      	ldr	r3, [pc, #192]	@ (8002608 <HAL_GPIO_Init+0x334>)
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	43db      	mvns	r3, r3
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4013      	ands	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d003      	beq.n	8002568 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	4313      	orrs	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002568:	4a27      	ldr	r2, [pc, #156]	@ (8002608 <HAL_GPIO_Init+0x334>)
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800256e:	4b26      	ldr	r3, [pc, #152]	@ (8002608 <HAL_GPIO_Init+0x334>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	43db      	mvns	r3, r3
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	4013      	ands	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	4313      	orrs	r3, r2
 8002590:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002592:	4a1d      	ldr	r2, [pc, #116]	@ (8002608 <HAL_GPIO_Init+0x334>)
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002598:	4b1b      	ldr	r3, [pc, #108]	@ (8002608 <HAL_GPIO_Init+0x334>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	43db      	mvns	r3, r3
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	4013      	ands	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d003      	beq.n	80025bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025bc:	4a12      	ldr	r2, [pc, #72]	@ (8002608 <HAL_GPIO_Init+0x334>)
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	3301      	adds	r3, #1
 80025c6:	61fb      	str	r3, [r7, #28]
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	2b0f      	cmp	r3, #15
 80025cc:	f67f ae90 	bls.w	80022f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025d0:	bf00      	nop
 80025d2:	bf00      	nop
 80025d4:	3724      	adds	r7, #36	@ 0x24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	40023800 	.word	0x40023800
 80025e4:	40013800 	.word	0x40013800
 80025e8:	40020000 	.word	0x40020000
 80025ec:	40020400 	.word	0x40020400
 80025f0:	40020800 	.word	0x40020800
 80025f4:	40020c00 	.word	0x40020c00
 80025f8:	40021000 	.word	0x40021000
 80025fc:	40021400 	.word	0x40021400
 8002600:	40021800 	.word	0x40021800
 8002604:	40021c00 	.word	0x40021c00
 8002608:	40013c00 	.word	0x40013c00

0800260c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800260c:	b480      	push	{r7}
 800260e:	b087      	sub	sp, #28
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002616:	2300      	movs	r3, #0
 8002618:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800261a:	2300      	movs	r3, #0
 800261c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800261e:	2300      	movs	r3, #0
 8002620:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002622:	2300      	movs	r3, #0
 8002624:	617b      	str	r3, [r7, #20]
 8002626:	e0cd      	b.n	80027c4 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002628:	2201      	movs	r2, #1
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002632:	683a      	ldr	r2, [r7, #0]
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	4013      	ands	r3, r2
 8002638:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	429a      	cmp	r2, r3
 8002640:	f040 80bd 	bne.w	80027be <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002644:	4a65      	ldr	r2, [pc, #404]	@ (80027dc <HAL_GPIO_DeInit+0x1d0>)
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	089b      	lsrs	r3, r3, #2
 800264a:	3302      	adds	r3, #2
 800264c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002650:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	f003 0303 	and.w	r3, r3, #3
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	220f      	movs	r2, #15
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	68ba      	ldr	r2, [r7, #8]
 8002662:	4013      	ands	r3, r2
 8002664:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a5d      	ldr	r2, [pc, #372]	@ (80027e0 <HAL_GPIO_DeInit+0x1d4>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d02b      	beq.n	80026c6 <HAL_GPIO_DeInit+0xba>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a5c      	ldr	r2, [pc, #368]	@ (80027e4 <HAL_GPIO_DeInit+0x1d8>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d025      	beq.n	80026c2 <HAL_GPIO_DeInit+0xb6>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a5b      	ldr	r2, [pc, #364]	@ (80027e8 <HAL_GPIO_DeInit+0x1dc>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d01f      	beq.n	80026be <HAL_GPIO_DeInit+0xb2>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a5a      	ldr	r2, [pc, #360]	@ (80027ec <HAL_GPIO_DeInit+0x1e0>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d019      	beq.n	80026ba <HAL_GPIO_DeInit+0xae>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a59      	ldr	r2, [pc, #356]	@ (80027f0 <HAL_GPIO_DeInit+0x1e4>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d013      	beq.n	80026b6 <HAL_GPIO_DeInit+0xaa>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a58      	ldr	r2, [pc, #352]	@ (80027f4 <HAL_GPIO_DeInit+0x1e8>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d00d      	beq.n	80026b2 <HAL_GPIO_DeInit+0xa6>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a57      	ldr	r2, [pc, #348]	@ (80027f8 <HAL_GPIO_DeInit+0x1ec>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d007      	beq.n	80026ae <HAL_GPIO_DeInit+0xa2>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a56      	ldr	r2, [pc, #344]	@ (80027fc <HAL_GPIO_DeInit+0x1f0>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d101      	bne.n	80026aa <HAL_GPIO_DeInit+0x9e>
 80026a6:	2307      	movs	r3, #7
 80026a8:	e00e      	b.n	80026c8 <HAL_GPIO_DeInit+0xbc>
 80026aa:	2308      	movs	r3, #8
 80026ac:	e00c      	b.n	80026c8 <HAL_GPIO_DeInit+0xbc>
 80026ae:	2306      	movs	r3, #6
 80026b0:	e00a      	b.n	80026c8 <HAL_GPIO_DeInit+0xbc>
 80026b2:	2305      	movs	r3, #5
 80026b4:	e008      	b.n	80026c8 <HAL_GPIO_DeInit+0xbc>
 80026b6:	2304      	movs	r3, #4
 80026b8:	e006      	b.n	80026c8 <HAL_GPIO_DeInit+0xbc>
 80026ba:	2303      	movs	r3, #3
 80026bc:	e004      	b.n	80026c8 <HAL_GPIO_DeInit+0xbc>
 80026be:	2302      	movs	r3, #2
 80026c0:	e002      	b.n	80026c8 <HAL_GPIO_DeInit+0xbc>
 80026c2:	2301      	movs	r3, #1
 80026c4:	e000      	b.n	80026c8 <HAL_GPIO_DeInit+0xbc>
 80026c6:	2300      	movs	r3, #0
 80026c8:	697a      	ldr	r2, [r7, #20]
 80026ca:	f002 0203 	and.w	r2, r2, #3
 80026ce:	0092      	lsls	r2, r2, #2
 80026d0:	4093      	lsls	r3, r2
 80026d2:	68ba      	ldr	r2, [r7, #8]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d132      	bne.n	800273e <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80026d8:	4b49      	ldr	r3, [pc, #292]	@ (8002800 <HAL_GPIO_DeInit+0x1f4>)
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	43db      	mvns	r3, r3
 80026e0:	4947      	ldr	r1, [pc, #284]	@ (8002800 <HAL_GPIO_DeInit+0x1f4>)
 80026e2:	4013      	ands	r3, r2
 80026e4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80026e6:	4b46      	ldr	r3, [pc, #280]	@ (8002800 <HAL_GPIO_DeInit+0x1f4>)
 80026e8:	685a      	ldr	r2, [r3, #4]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	43db      	mvns	r3, r3
 80026ee:	4944      	ldr	r1, [pc, #272]	@ (8002800 <HAL_GPIO_DeInit+0x1f4>)
 80026f0:	4013      	ands	r3, r2
 80026f2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80026f4:	4b42      	ldr	r3, [pc, #264]	@ (8002800 <HAL_GPIO_DeInit+0x1f4>)
 80026f6:	68da      	ldr	r2, [r3, #12]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	43db      	mvns	r3, r3
 80026fc:	4940      	ldr	r1, [pc, #256]	@ (8002800 <HAL_GPIO_DeInit+0x1f4>)
 80026fe:	4013      	ands	r3, r2
 8002700:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002702:	4b3f      	ldr	r3, [pc, #252]	@ (8002800 <HAL_GPIO_DeInit+0x1f4>)
 8002704:	689a      	ldr	r2, [r3, #8]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	43db      	mvns	r3, r3
 800270a:	493d      	ldr	r1, [pc, #244]	@ (8002800 <HAL_GPIO_DeInit+0x1f4>)
 800270c:	4013      	ands	r3, r2
 800270e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	f003 0303 	and.w	r3, r3, #3
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	220f      	movs	r2, #15
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002720:	4a2e      	ldr	r2, [pc, #184]	@ (80027dc <HAL_GPIO_DeInit+0x1d0>)
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	089b      	lsrs	r3, r3, #2
 8002726:	3302      	adds	r3, #2
 8002728:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	43da      	mvns	r2, r3
 8002730:	482a      	ldr	r0, [pc, #168]	@ (80027dc <HAL_GPIO_DeInit+0x1d0>)
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	089b      	lsrs	r3, r3, #2
 8002736:	400a      	ands	r2, r1
 8002738:	3302      	adds	r3, #2
 800273a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	2103      	movs	r1, #3
 8002748:	fa01 f303 	lsl.w	r3, r1, r3
 800274c:	43db      	mvns	r3, r3
 800274e:	401a      	ands	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	08da      	lsrs	r2, r3, #3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3208      	adds	r2, #8
 800275c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	220f      	movs	r2, #15
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	43db      	mvns	r3, r3
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	08d2      	lsrs	r2, r2, #3
 8002774:	4019      	ands	r1, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	3208      	adds	r2, #8
 800277a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	68da      	ldr	r2, [r3, #12]
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	2103      	movs	r1, #3
 8002788:	fa01 f303 	lsl.w	r3, r1, r3
 800278c:	43db      	mvns	r3, r3
 800278e:	401a      	ands	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685a      	ldr	r2, [r3, #4]
 8002798:	2101      	movs	r1, #1
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	fa01 f303 	lsl.w	r3, r1, r3
 80027a0:	43db      	mvns	r3, r3
 80027a2:	401a      	ands	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	2103      	movs	r1, #3
 80027b2:	fa01 f303 	lsl.w	r3, r1, r3
 80027b6:	43db      	mvns	r3, r3
 80027b8:	401a      	ands	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	3301      	adds	r3, #1
 80027c2:	617b      	str	r3, [r7, #20]
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	2b0f      	cmp	r3, #15
 80027c8:	f67f af2e 	bls.w	8002628 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80027cc:	bf00      	nop
 80027ce:	bf00      	nop
 80027d0:	371c      	adds	r7, #28
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	40013800 	.word	0x40013800
 80027e0:	40020000 	.word	0x40020000
 80027e4:	40020400 	.word	0x40020400
 80027e8:	40020800 	.word	0x40020800
 80027ec:	40020c00 	.word	0x40020c00
 80027f0:	40021000 	.word	0x40021000
 80027f4:	40021400 	.word	0x40021400
 80027f8:	40021800 	.word	0x40021800
 80027fc:	40021c00 	.word	0x40021c00
 8002800:	40013c00 	.word	0x40013c00

08002804 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	460b      	mov	r3, r1
 800280e:	807b      	strh	r3, [r7, #2]
 8002810:	4613      	mov	r3, r2
 8002812:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002814:	787b      	ldrb	r3, [r7, #1]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d003      	beq.n	8002822 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800281a:	887a      	ldrh	r2, [r7, #2]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002820:	e003      	b.n	800282a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002822:	887b      	ldrh	r3, [r7, #2]
 8002824:	041a      	lsls	r2, r3, #16
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	619a      	str	r2, [r3, #24]
}
 800282a:	bf00      	nop
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
	...

08002838 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e12b      	b.n	8002aa2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d106      	bne.n	8002864 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f7fd ffce 	bl	8000800 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2224      	movs	r2, #36	@ 0x24
 8002868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f022 0201 	bic.w	r2, r2, #1
 800287a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800288a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800289a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800289c:	f001 ffd2 	bl	8004844 <HAL_RCC_GetPCLK1Freq>
 80028a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	4a81      	ldr	r2, [pc, #516]	@ (8002aac <HAL_I2C_Init+0x274>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d807      	bhi.n	80028bc <HAL_I2C_Init+0x84>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	4a80      	ldr	r2, [pc, #512]	@ (8002ab0 <HAL_I2C_Init+0x278>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	bf94      	ite	ls
 80028b4:	2301      	movls	r3, #1
 80028b6:	2300      	movhi	r3, #0
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	e006      	b.n	80028ca <HAL_I2C_Init+0x92>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	4a7d      	ldr	r2, [pc, #500]	@ (8002ab4 <HAL_I2C_Init+0x27c>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	bf94      	ite	ls
 80028c4:	2301      	movls	r3, #1
 80028c6:	2300      	movhi	r3, #0
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e0e7      	b.n	8002aa2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	4a78      	ldr	r2, [pc, #480]	@ (8002ab8 <HAL_I2C_Init+0x280>)
 80028d6:	fba2 2303 	umull	r2, r3, r2, r3
 80028da:	0c9b      	lsrs	r3, r3, #18
 80028dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68ba      	ldr	r2, [r7, #8]
 80028ee:	430a      	orrs	r2, r1
 80028f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	6a1b      	ldr	r3, [r3, #32]
 80028f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	4a6a      	ldr	r2, [pc, #424]	@ (8002aac <HAL_I2C_Init+0x274>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d802      	bhi.n	800290c <HAL_I2C_Init+0xd4>
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	3301      	adds	r3, #1
 800290a:	e009      	b.n	8002920 <HAL_I2C_Init+0xe8>
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002912:	fb02 f303 	mul.w	r3, r2, r3
 8002916:	4a69      	ldr	r2, [pc, #420]	@ (8002abc <HAL_I2C_Init+0x284>)
 8002918:	fba2 2303 	umull	r2, r3, r2, r3
 800291c:	099b      	lsrs	r3, r3, #6
 800291e:	3301      	adds	r3, #1
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	6812      	ldr	r2, [r2, #0]
 8002924:	430b      	orrs	r3, r1
 8002926:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	69db      	ldr	r3, [r3, #28]
 800292e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002932:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	495c      	ldr	r1, [pc, #368]	@ (8002aac <HAL_I2C_Init+0x274>)
 800293c:	428b      	cmp	r3, r1
 800293e:	d819      	bhi.n	8002974 <HAL_I2C_Init+0x13c>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	1e59      	subs	r1, r3, #1
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	fbb1 f3f3 	udiv	r3, r1, r3
 800294e:	1c59      	adds	r1, r3, #1
 8002950:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002954:	400b      	ands	r3, r1
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00a      	beq.n	8002970 <HAL_I2C_Init+0x138>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	1e59      	subs	r1, r3, #1
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	fbb1 f3f3 	udiv	r3, r1, r3
 8002968:	3301      	adds	r3, #1
 800296a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800296e:	e051      	b.n	8002a14 <HAL_I2C_Init+0x1dc>
 8002970:	2304      	movs	r3, #4
 8002972:	e04f      	b.n	8002a14 <HAL_I2C_Init+0x1dc>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d111      	bne.n	80029a0 <HAL_I2C_Init+0x168>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	1e58      	subs	r0, r3, #1
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6859      	ldr	r1, [r3, #4]
 8002984:	460b      	mov	r3, r1
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	440b      	add	r3, r1
 800298a:	fbb0 f3f3 	udiv	r3, r0, r3
 800298e:	3301      	adds	r3, #1
 8002990:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002994:	2b00      	cmp	r3, #0
 8002996:	bf0c      	ite	eq
 8002998:	2301      	moveq	r3, #1
 800299a:	2300      	movne	r3, #0
 800299c:	b2db      	uxtb	r3, r3
 800299e:	e012      	b.n	80029c6 <HAL_I2C_Init+0x18e>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	1e58      	subs	r0, r3, #1
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6859      	ldr	r1, [r3, #4]
 80029a8:	460b      	mov	r3, r1
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	440b      	add	r3, r1
 80029ae:	0099      	lsls	r1, r3, #2
 80029b0:	440b      	add	r3, r1
 80029b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80029b6:	3301      	adds	r3, #1
 80029b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029bc:	2b00      	cmp	r3, #0
 80029be:	bf0c      	ite	eq
 80029c0:	2301      	moveq	r3, #1
 80029c2:	2300      	movne	r3, #0
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <HAL_I2C_Init+0x196>
 80029ca:	2301      	movs	r3, #1
 80029cc:	e022      	b.n	8002a14 <HAL_I2C_Init+0x1dc>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10e      	bne.n	80029f4 <HAL_I2C_Init+0x1bc>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	1e58      	subs	r0, r3, #1
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6859      	ldr	r1, [r3, #4]
 80029de:	460b      	mov	r3, r1
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	440b      	add	r3, r1
 80029e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80029e8:	3301      	adds	r3, #1
 80029ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029f2:	e00f      	b.n	8002a14 <HAL_I2C_Init+0x1dc>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	1e58      	subs	r0, r3, #1
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6859      	ldr	r1, [r3, #4]
 80029fc:	460b      	mov	r3, r1
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	440b      	add	r3, r1
 8002a02:	0099      	lsls	r1, r3, #2
 8002a04:	440b      	add	r3, r1
 8002a06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a10:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a14:	6879      	ldr	r1, [r7, #4]
 8002a16:	6809      	ldr	r1, [r1, #0]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	69da      	ldr	r2, [r3, #28]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	430a      	orrs	r2, r1
 8002a36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002a42:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	6911      	ldr	r1, [r2, #16]
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	68d2      	ldr	r2, [r2, #12]
 8002a4e:	4311      	orrs	r1, r2
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	6812      	ldr	r2, [r2, #0]
 8002a54:	430b      	orrs	r3, r1
 8002a56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	695a      	ldr	r2, [r3, #20]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	430a      	orrs	r2, r1
 8002a72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f042 0201 	orr.w	r2, r2, #1
 8002a82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2220      	movs	r2, #32
 8002a8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	000186a0 	.word	0x000186a0
 8002ab0:	001e847f 	.word	0x001e847f
 8002ab4:	003d08ff 	.word	0x003d08ff
 8002ab8:	431bde83 	.word	0x431bde83
 8002abc:	10624dd3 	.word	0x10624dd3

08002ac0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af02      	add	r7, sp, #8
 8002ac6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e101      	b.n	8002cd6 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d106      	bne.n	8002af2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f7fe fa8b 	bl	8001008 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2203      	movs	r2, #3
 8002af6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b00:	d102      	bne.n	8002b08 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f003 fcdc 	bl	80064ca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6818      	ldr	r0, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	7c1a      	ldrb	r2, [r3, #16]
 8002b1a:	f88d 2000 	strb.w	r2, [sp]
 8002b1e:	3304      	adds	r3, #4
 8002b20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b22:	f003 fbbb 	bl	800629c <USB_CoreInit>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d005      	beq.n	8002b38 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2202      	movs	r2, #2
 8002b30:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e0ce      	b.n	8002cd6 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2100      	movs	r1, #0
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f003 fcd4 	bl	80064ec <USB_SetCurrentMode>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d005      	beq.n	8002b56 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2202      	movs	r2, #2
 8002b4e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e0bf      	b.n	8002cd6 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b56:	2300      	movs	r3, #0
 8002b58:	73fb      	strb	r3, [r7, #15]
 8002b5a:	e04a      	b.n	8002bf2 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b5c:	7bfa      	ldrb	r2, [r7, #15]
 8002b5e:	6879      	ldr	r1, [r7, #4]
 8002b60:	4613      	mov	r3, r2
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	4413      	add	r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	440b      	add	r3, r1
 8002b6a:	3315      	adds	r3, #21
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b70:	7bfa      	ldrb	r2, [r7, #15]
 8002b72:	6879      	ldr	r1, [r7, #4]
 8002b74:	4613      	mov	r3, r2
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	4413      	add	r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	440b      	add	r3, r1
 8002b7e:	3314      	adds	r3, #20
 8002b80:	7bfa      	ldrb	r2, [r7, #15]
 8002b82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b84:	7bfa      	ldrb	r2, [r7, #15]
 8002b86:	7bfb      	ldrb	r3, [r7, #15]
 8002b88:	b298      	uxth	r0, r3
 8002b8a:	6879      	ldr	r1, [r7, #4]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	4413      	add	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	440b      	add	r3, r1
 8002b96:	332e      	adds	r3, #46	@ 0x2e
 8002b98:	4602      	mov	r2, r0
 8002b9a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b9c:	7bfa      	ldrb	r2, [r7, #15]
 8002b9e:	6879      	ldr	r1, [r7, #4]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	4413      	add	r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	440b      	add	r3, r1
 8002baa:	3318      	adds	r3, #24
 8002bac:	2200      	movs	r2, #0
 8002bae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002bb0:	7bfa      	ldrb	r2, [r7, #15]
 8002bb2:	6879      	ldr	r1, [r7, #4]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	4413      	add	r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	440b      	add	r3, r1
 8002bbe:	331c      	adds	r3, #28
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002bc4:	7bfa      	ldrb	r2, [r7, #15]
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	4413      	add	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	440b      	add	r3, r1
 8002bd2:	3320      	adds	r3, #32
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002bd8:	7bfa      	ldrb	r2, [r7, #15]
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	4413      	add	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	3324      	adds	r3, #36	@ 0x24
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bec:	7bfb      	ldrb	r3, [r7, #15]
 8002bee:	3301      	adds	r3, #1
 8002bf0:	73fb      	strb	r3, [r7, #15]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	791b      	ldrb	r3, [r3, #4]
 8002bf6:	7bfa      	ldrb	r2, [r7, #15]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d3af      	bcc.n	8002b5c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	73fb      	strb	r3, [r7, #15]
 8002c00:	e044      	b.n	8002c8c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c02:	7bfa      	ldrb	r2, [r7, #15]
 8002c04:	6879      	ldr	r1, [r7, #4]
 8002c06:	4613      	mov	r3, r2
 8002c08:	00db      	lsls	r3, r3, #3
 8002c0a:	4413      	add	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	440b      	add	r3, r1
 8002c10:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002c14:	2200      	movs	r2, #0
 8002c16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c18:	7bfa      	ldrb	r2, [r7, #15]
 8002c1a:	6879      	ldr	r1, [r7, #4]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	4413      	add	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	440b      	add	r3, r1
 8002c26:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002c2a:	7bfa      	ldrb	r2, [r7, #15]
 8002c2c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c2e:	7bfa      	ldrb	r2, [r7, #15]
 8002c30:	6879      	ldr	r1, [r7, #4]
 8002c32:	4613      	mov	r3, r2
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	4413      	add	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	440b      	add	r3, r1
 8002c3c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002c40:	2200      	movs	r2, #0
 8002c42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c44:	7bfa      	ldrb	r2, [r7, #15]
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	4413      	add	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	440b      	add	r3, r1
 8002c52:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002c56:	2200      	movs	r2, #0
 8002c58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c5a:	7bfa      	ldrb	r2, [r7, #15]
 8002c5c:	6879      	ldr	r1, [r7, #4]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	4413      	add	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	440b      	add	r3, r1
 8002c68:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c70:	7bfa      	ldrb	r2, [r7, #15]
 8002c72:	6879      	ldr	r1, [r7, #4]
 8002c74:	4613      	mov	r3, r2
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	4413      	add	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002c82:	2200      	movs	r2, #0
 8002c84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c86:	7bfb      	ldrb	r3, [r7, #15]
 8002c88:	3301      	adds	r3, #1
 8002c8a:	73fb      	strb	r3, [r7, #15]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	791b      	ldrb	r3, [r3, #4]
 8002c90:	7bfa      	ldrb	r2, [r7, #15]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d3b5      	bcc.n	8002c02 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6818      	ldr	r0, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	7c1a      	ldrb	r2, [r3, #16]
 8002c9e:	f88d 2000 	strb.w	r2, [sp]
 8002ca2:	3304      	adds	r3, #4
 8002ca4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ca6:	f003 fc6d 	bl	8006584 <USB_DevInit>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d005      	beq.n	8002cbc <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e00c      	b.n	8002cd6 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f004 fcb7 	bl	8007642 <USB_DevDisconnect>

  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3710      	adds	r7, #16
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b084      	sub	sp, #16
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d101      	bne.n	8002cfa <HAL_PCD_Start+0x1c>
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	e022      	b.n	8002d40 <HAL_PCD_Start+0x62>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d009      	beq.n	8002d22 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d105      	bne.n	8002d22 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d1a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f003 fbbe 	bl	80064a8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f004 fc65 	bl	8007600 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3710      	adds	r7, #16
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002d48:	b590      	push	{r4, r7, lr}
 8002d4a:	b08d      	sub	sp, #52	@ 0x34
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d56:	6a3b      	ldr	r3, [r7, #32]
 8002d58:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f004 fd23 	bl	80077aa <USB_GetMode>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f040 848c 	bne.w	8003684 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f004 fc87 	bl	8007684 <USB_ReadInterrupts>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f000 8482 	beq.w	8003682 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	0a1b      	lsrs	r3, r3, #8
 8002d88:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f004 fc74 	bl	8007684 <USB_ReadInterrupts>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d107      	bne.n	8002db6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	695a      	ldr	r2, [r3, #20]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f002 0202 	and.w	r2, r2, #2
 8002db4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f004 fc62 	bl	8007684 <USB_ReadInterrupts>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	f003 0310 	and.w	r3, r3, #16
 8002dc6:	2b10      	cmp	r3, #16
 8002dc8:	d161      	bne.n	8002e8e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	699a      	ldr	r2, [r3, #24]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 0210 	bic.w	r2, r2, #16
 8002dd8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002dda:	6a3b      	ldr	r3, [r7, #32]
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	f003 020f 	and.w	r2, r3, #15
 8002de6:	4613      	mov	r3, r2
 8002de8:	00db      	lsls	r3, r3, #3
 8002dea:	4413      	add	r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	4413      	add	r3, r2
 8002df6:	3304      	adds	r3, #4
 8002df8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	0c5b      	lsrs	r3, r3, #17
 8002dfe:	f003 030f 	and.w	r3, r3, #15
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d124      	bne.n	8002e50 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d035      	beq.n	8002e7e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	091b      	lsrs	r3, r3, #4
 8002e1a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	461a      	mov	r2, r3
 8002e24:	6a38      	ldr	r0, [r7, #32]
 8002e26:	f004 fa99 	bl	800735c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	68da      	ldr	r2, [r3, #12]
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	091b      	lsrs	r3, r3, #4
 8002e32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e36:	441a      	add	r2, r3
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	695a      	ldr	r2, [r3, #20]
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	091b      	lsrs	r3, r3, #4
 8002e44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e48:	441a      	add	r2, r3
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	615a      	str	r2, [r3, #20]
 8002e4e:	e016      	b.n	8002e7e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	0c5b      	lsrs	r3, r3, #17
 8002e54:	f003 030f 	and.w	r3, r3, #15
 8002e58:	2b06      	cmp	r3, #6
 8002e5a:	d110      	bne.n	8002e7e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002e62:	2208      	movs	r2, #8
 8002e64:	4619      	mov	r1, r3
 8002e66:	6a38      	ldr	r0, [r7, #32]
 8002e68:	f004 fa78 	bl	800735c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	695a      	ldr	r2, [r3, #20]
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	091b      	lsrs	r3, r3, #4
 8002e74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e78:	441a      	add	r2, r3
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	699a      	ldr	r2, [r3, #24]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f042 0210 	orr.w	r2, r2, #16
 8002e8c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f004 fbf6 	bl	8007684 <USB_ReadInterrupts>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e9e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002ea2:	f040 80a7 	bne.w	8002ff4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f004 fbfb 	bl	80076aa <USB_ReadDevAllOutEpInterrupt>
 8002eb4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002eb6:	e099      	b.n	8002fec <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f000 808e 	beq.w	8002fe0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002eca:	b2d2      	uxtb	r2, r2
 8002ecc:	4611      	mov	r1, r2
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f004 fc1f 	bl	8007712 <USB_ReadDevOutEPInterrupt>
 8002ed4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	f003 0301 	and.w	r3, r3, #1
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d00c      	beq.n	8002efa <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee2:	015a      	lsls	r2, r3, #5
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002eec:	461a      	mov	r2, r3
 8002eee:	2301      	movs	r3, #1
 8002ef0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002ef2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 fea3 	bl	8003c40 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	f003 0308 	and.w	r3, r3, #8
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00c      	beq.n	8002f1e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f06:	015a      	lsls	r2, r3, #5
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f10:	461a      	mov	r2, r3
 8002f12:	2308      	movs	r3, #8
 8002f14:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002f16:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 ff79 	bl	8003e10 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	f003 0310 	and.w	r3, r3, #16
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d008      	beq.n	8002f3a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f2a:	015a      	lsls	r2, r3, #5
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	4413      	add	r3, r2
 8002f30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f34:	461a      	mov	r2, r3
 8002f36:	2310      	movs	r3, #16
 8002f38:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d030      	beq.n	8002fa6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002f44:	6a3b      	ldr	r3, [r7, #32]
 8002f46:	695b      	ldr	r3, [r3, #20]
 8002f48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f4c:	2b80      	cmp	r3, #128	@ 0x80
 8002f4e:	d109      	bne.n	8002f64 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	69fa      	ldr	r2, [r7, #28]
 8002f5a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f5e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f62:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002f64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f66:	4613      	mov	r3, r2
 8002f68:	00db      	lsls	r3, r3, #3
 8002f6a:	4413      	add	r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	4413      	add	r3, r2
 8002f76:	3304      	adds	r3, #4
 8002f78:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	78db      	ldrb	r3, [r3, #3]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d108      	bne.n	8002f94 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	2200      	movs	r2, #0
 8002f86:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f007 fef2 	bl	800ad78 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f96:	015a      	lsls	r2, r3, #5
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	f003 0320 	and.w	r3, r3, #32
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d008      	beq.n	8002fc2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb2:	015a      	lsls	r2, r3, #5
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	2320      	movs	r3, #32
 8002fc0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d009      	beq.n	8002fe0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fce:	015a      	lsls	r2, r3, #5
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fd8:	461a      	mov	r2, r3
 8002fda:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002fde:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fe8:	085b      	lsrs	r3, r3, #1
 8002fea:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f47f af62 	bne.w	8002eb8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f004 fb43 	bl	8007684 <USB_ReadInterrupts>
 8002ffe:	4603      	mov	r3, r0
 8003000:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003004:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003008:	f040 80db 	bne.w	80031c2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4618      	mov	r0, r3
 8003012:	f004 fb64 	bl	80076de <USB_ReadDevAllInEpInterrupt>
 8003016:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003018:	2300      	movs	r3, #0
 800301a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800301c:	e0cd      	b.n	80031ba <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800301e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b00      	cmp	r3, #0
 8003026:	f000 80c2 	beq.w	80031ae <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003030:	b2d2      	uxtb	r2, r2
 8003032:	4611      	mov	r1, r2
 8003034:	4618      	mov	r0, r3
 8003036:	f004 fb8a 	bl	800774e <USB_ReadDevInEPInterrupt>
 800303a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b00      	cmp	r3, #0
 8003044:	d057      	beq.n	80030f6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003048:	f003 030f 	and.w	r3, r3, #15
 800304c:	2201      	movs	r2, #1
 800304e:	fa02 f303 	lsl.w	r3, r2, r3
 8003052:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800305a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	43db      	mvns	r3, r3
 8003060:	69f9      	ldr	r1, [r7, #28]
 8003062:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003066:	4013      	ands	r3, r2
 8003068:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800306a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306c:	015a      	lsls	r2, r3, #5
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	4413      	add	r3, r2
 8003072:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003076:	461a      	mov	r2, r3
 8003078:	2301      	movs	r3, #1
 800307a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	799b      	ldrb	r3, [r3, #6]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d132      	bne.n	80030ea <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003084:	6879      	ldr	r1, [r7, #4]
 8003086:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003088:	4613      	mov	r3, r2
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	4413      	add	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	440b      	add	r3, r1
 8003092:	3320      	adds	r3, #32
 8003094:	6819      	ldr	r1, [r3, #0]
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800309a:	4613      	mov	r3, r2
 800309c:	00db      	lsls	r3, r3, #3
 800309e:	4413      	add	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	4403      	add	r3, r0
 80030a4:	331c      	adds	r3, #28
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4419      	add	r1, r3
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030ae:	4613      	mov	r3, r2
 80030b0:	00db      	lsls	r3, r3, #3
 80030b2:	4413      	add	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	4403      	add	r3, r0
 80030b8:	3320      	adds	r3, #32
 80030ba:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80030bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d113      	bne.n	80030ea <HAL_PCD_IRQHandler+0x3a2>
 80030c2:	6879      	ldr	r1, [r7, #4]
 80030c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030c6:	4613      	mov	r3, r2
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	4413      	add	r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	440b      	add	r3, r1
 80030d0:	3324      	adds	r3, #36	@ 0x24
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d108      	bne.n	80030ea <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6818      	ldr	r0, [r3, #0]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80030e2:	461a      	mov	r2, r3
 80030e4:	2101      	movs	r1, #1
 80030e6:	f004 fb91 	bl	800780c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80030ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	4619      	mov	r1, r3
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f007 fdbc 	bl	800ac6e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	f003 0308 	and.w	r3, r3, #8
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d008      	beq.n	8003112 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003102:	015a      	lsls	r2, r3, #5
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	4413      	add	r3, r2
 8003108:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800310c:	461a      	mov	r2, r3
 800310e:	2308      	movs	r3, #8
 8003110:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	f003 0310 	and.w	r3, r3, #16
 8003118:	2b00      	cmp	r3, #0
 800311a:	d008      	beq.n	800312e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800311c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800311e:	015a      	lsls	r2, r3, #5
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	4413      	add	r3, r2
 8003124:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003128:	461a      	mov	r2, r3
 800312a:	2310      	movs	r3, #16
 800312c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003134:	2b00      	cmp	r3, #0
 8003136:	d008      	beq.n	800314a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800313a:	015a      	lsls	r2, r3, #5
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	4413      	add	r3, r2
 8003140:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003144:	461a      	mov	r2, r3
 8003146:	2340      	movs	r3, #64	@ 0x40
 8003148:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	f003 0302 	and.w	r3, r3, #2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d023      	beq.n	800319c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003154:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003156:	6a38      	ldr	r0, [r7, #32]
 8003158:	f003 fb78 	bl	800684c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800315c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800315e:	4613      	mov	r3, r2
 8003160:	00db      	lsls	r3, r3, #3
 8003162:	4413      	add	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	3310      	adds	r3, #16
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	4413      	add	r3, r2
 800316c:	3304      	adds	r3, #4
 800316e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	78db      	ldrb	r3, [r3, #3]
 8003174:	2b01      	cmp	r3, #1
 8003176:	d108      	bne.n	800318a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	2200      	movs	r2, #0
 800317c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800317e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003180:	b2db      	uxtb	r3, r3
 8003182:	4619      	mov	r1, r3
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f007 fe09 	bl	800ad9c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800318a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800318c:	015a      	lsls	r2, r3, #5
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	4413      	add	r3, r2
 8003192:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003196:	461a      	mov	r2, r3
 8003198:	2302      	movs	r3, #2
 800319a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d003      	beq.n	80031ae <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80031a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 fcbd 	bl	8003b28 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80031ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b0:	3301      	adds	r3, #1
 80031b2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80031b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031b6:	085b      	lsrs	r3, r3, #1
 80031b8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80031ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f47f af2e 	bne.w	800301e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f004 fa5c 	bl	8007684 <USB_ReadInterrupts>
 80031cc:	4603      	mov	r3, r0
 80031ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80031d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80031d6:	d122      	bne.n	800321e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	69fa      	ldr	r2, [r7, #28]
 80031e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031e6:	f023 0301 	bic.w	r3, r3, #1
 80031ea:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d108      	bne.n	8003208 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80031fe:	2100      	movs	r1, #0
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 fea3 	bl	8003f4c <HAL_PCDEx_LPM_Callback>
 8003206:	e002      	b.n	800320e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f007 fda7 	bl	800ad5c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	695a      	ldr	r2, [r3, #20]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800321c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f004 fa2e 	bl	8007684 <USB_ReadInterrupts>
 8003228:	4603      	mov	r3, r0
 800322a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800322e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003232:	d112      	bne.n	800325a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f003 0301 	and.w	r3, r3, #1
 8003240:	2b01      	cmp	r3, #1
 8003242:	d102      	bne.n	800324a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f007 fd63 	bl	800ad10 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	695a      	ldr	r2, [r3, #20]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003258:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4618      	mov	r0, r3
 8003260:	f004 fa10 	bl	8007684 <USB_ReadInterrupts>
 8003264:	4603      	mov	r3, r0
 8003266:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800326a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800326e:	f040 80b7 	bne.w	80033e0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	69fa      	ldr	r2, [r7, #28]
 800327c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003280:	f023 0301 	bic.w	r3, r3, #1
 8003284:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2110      	movs	r1, #16
 800328c:	4618      	mov	r0, r3
 800328e:	f003 fadd 	bl	800684c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003292:	2300      	movs	r3, #0
 8003294:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003296:	e046      	b.n	8003326 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800329a:	015a      	lsls	r2, r3, #5
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	4413      	add	r3, r2
 80032a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032a4:	461a      	mov	r2, r3
 80032a6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80032aa:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80032ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032ae:	015a      	lsls	r2, r3, #5
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	4413      	add	r3, r2
 80032b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80032bc:	0151      	lsls	r1, r2, #5
 80032be:	69fa      	ldr	r2, [r7, #28]
 80032c0:	440a      	add	r2, r1
 80032c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80032c6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80032ca:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80032cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032ce:	015a      	lsls	r2, r3, #5
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	4413      	add	r3, r2
 80032d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032d8:	461a      	mov	r2, r3
 80032da:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80032de:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80032e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032e2:	015a      	lsls	r2, r3, #5
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	4413      	add	r3, r2
 80032e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80032f0:	0151      	lsls	r1, r2, #5
 80032f2:	69fa      	ldr	r2, [r7, #28]
 80032f4:	440a      	add	r2, r1
 80032f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80032fa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80032fe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003302:	015a      	lsls	r2, r3, #5
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	4413      	add	r3, r2
 8003308:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003310:	0151      	lsls	r1, r2, #5
 8003312:	69fa      	ldr	r2, [r7, #28]
 8003314:	440a      	add	r2, r1
 8003316:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800331a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800331e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003322:	3301      	adds	r3, #1
 8003324:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	791b      	ldrb	r3, [r3, #4]
 800332a:	461a      	mov	r2, r3
 800332c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800332e:	4293      	cmp	r3, r2
 8003330:	d3b2      	bcc.n	8003298 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003338:	69db      	ldr	r3, [r3, #28]
 800333a:	69fa      	ldr	r2, [r7, #28]
 800333c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003340:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003344:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	7bdb      	ldrb	r3, [r3, #15]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d016      	beq.n	800337c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003354:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003358:	69fa      	ldr	r2, [r7, #28]
 800335a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800335e:	f043 030b 	orr.w	r3, r3, #11
 8003362:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800336c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800336e:	69fa      	ldr	r2, [r7, #28]
 8003370:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003374:	f043 030b 	orr.w	r3, r3, #11
 8003378:	6453      	str	r3, [r2, #68]	@ 0x44
 800337a:	e015      	b.n	80033a8 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	69fa      	ldr	r2, [r7, #28]
 8003386:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800338a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800338e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003392:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	69fa      	ldr	r2, [r7, #28]
 800339e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80033a2:	f043 030b 	orr.w	r3, r3, #11
 80033a6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	69fa      	ldr	r2, [r7, #28]
 80033b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80033b6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80033ba:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6818      	ldr	r0, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80033ca:	461a      	mov	r2, r3
 80033cc:	f004 fa1e 	bl	800780c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	695a      	ldr	r2, [r3, #20]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80033de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f004 f94d 	bl	8007684 <USB_ReadInterrupts>
 80033ea:	4603      	mov	r3, r0
 80033ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80033f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033f4:	d123      	bne.n	800343e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f004 f9e3 	bl	80077c6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4618      	mov	r0, r3
 8003406:	f003 fa9a 	bl	800693e <USB_GetDevSpeed>
 800340a:	4603      	mov	r3, r0
 800340c:	461a      	mov	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681c      	ldr	r4, [r3, #0]
 8003416:	f001 fa09 	bl	800482c <HAL_RCC_GetHCLKFreq>
 800341a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003420:	461a      	mov	r2, r3
 8003422:	4620      	mov	r0, r4
 8003424:	f002 ff9e 	bl	8006364 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f007 fc48 	bl	800acbe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	695a      	ldr	r2, [r3, #20]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800343c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4618      	mov	r0, r3
 8003444:	f004 f91e 	bl	8007684 <USB_ReadInterrupts>
 8003448:	4603      	mov	r3, r0
 800344a:	f003 0308 	and.w	r3, r3, #8
 800344e:	2b08      	cmp	r3, #8
 8003450:	d10a      	bne.n	8003468 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f007 fc25 	bl	800aca2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	695a      	ldr	r2, [r3, #20]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f002 0208 	and.w	r2, r2, #8
 8003466:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4618      	mov	r0, r3
 800346e:	f004 f909 	bl	8007684 <USB_ReadInterrupts>
 8003472:	4603      	mov	r3, r0
 8003474:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003478:	2b80      	cmp	r3, #128	@ 0x80
 800347a:	d123      	bne.n	80034c4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800347c:	6a3b      	ldr	r3, [r7, #32]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003484:	6a3b      	ldr	r3, [r7, #32]
 8003486:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003488:	2301      	movs	r3, #1
 800348a:	627b      	str	r3, [r7, #36]	@ 0x24
 800348c:	e014      	b.n	80034b8 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800348e:	6879      	ldr	r1, [r7, #4]
 8003490:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003492:	4613      	mov	r3, r2
 8003494:	00db      	lsls	r3, r3, #3
 8003496:	4413      	add	r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	440b      	add	r3, r1
 800349c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d105      	bne.n	80034b2 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80034a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	4619      	mov	r1, r3
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 fb0a 	bl	8003ac6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b4:	3301      	adds	r3, #1
 80034b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	791b      	ldrb	r3, [r3, #4]
 80034bc:	461a      	mov	r2, r3
 80034be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d3e4      	bcc.n	800348e <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f004 f8db 	bl	8007684 <USB_ReadInterrupts>
 80034ce:	4603      	mov	r3, r0
 80034d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034d8:	d13c      	bne.n	8003554 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034da:	2301      	movs	r3, #1
 80034dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80034de:	e02b      	b.n	8003538 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80034e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e2:	015a      	lsls	r2, r3, #5
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	4413      	add	r3, r2
 80034e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80034f0:	6879      	ldr	r1, [r7, #4]
 80034f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034f4:	4613      	mov	r3, r2
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	4413      	add	r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	440b      	add	r3, r1
 80034fe:	3318      	adds	r3, #24
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d115      	bne.n	8003532 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003506:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003508:	2b00      	cmp	r3, #0
 800350a:	da12      	bge.n	8003532 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800350c:	6879      	ldr	r1, [r7, #4]
 800350e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003510:	4613      	mov	r3, r2
 8003512:	00db      	lsls	r3, r3, #3
 8003514:	4413      	add	r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	440b      	add	r3, r1
 800351a:	3317      	adds	r3, #23
 800351c:	2201      	movs	r2, #1
 800351e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003522:	b2db      	uxtb	r3, r3
 8003524:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003528:	b2db      	uxtb	r3, r3
 800352a:	4619      	mov	r1, r3
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f000 faca 	bl	8003ac6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003534:	3301      	adds	r3, #1
 8003536:	627b      	str	r3, [r7, #36]	@ 0x24
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	791b      	ldrb	r3, [r3, #4]
 800353c:	461a      	mov	r2, r3
 800353e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003540:	4293      	cmp	r3, r2
 8003542:	d3cd      	bcc.n	80034e0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	695a      	ldr	r2, [r3, #20]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003552:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4618      	mov	r0, r3
 800355a:	f004 f893 	bl	8007684 <USB_ReadInterrupts>
 800355e:	4603      	mov	r3, r0
 8003560:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003564:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003568:	d156      	bne.n	8003618 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800356a:	2301      	movs	r3, #1
 800356c:	627b      	str	r3, [r7, #36]	@ 0x24
 800356e:	e045      	b.n	80035fc <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003572:	015a      	lsls	r2, r3, #5
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	4413      	add	r3, r2
 8003578:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003580:	6879      	ldr	r1, [r7, #4]
 8003582:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003584:	4613      	mov	r3, r2
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	4413      	add	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	440b      	add	r3, r1
 800358e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d12e      	bne.n	80035f6 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003598:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800359a:	2b00      	cmp	r3, #0
 800359c:	da2b      	bge.n	80035f6 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	0c1a      	lsrs	r2, r3, #16
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80035a8:	4053      	eors	r3, r2
 80035aa:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d121      	bne.n	80035f6 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80035b2:	6879      	ldr	r1, [r7, #4]
 80035b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035b6:	4613      	mov	r3, r2
 80035b8:	00db      	lsls	r3, r3, #3
 80035ba:	4413      	add	r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	440b      	add	r3, r1
 80035c0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80035c4:	2201      	movs	r2, #1
 80035c6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80035c8:	6a3b      	ldr	r3, [r7, #32]
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80035d0:	6a3b      	ldr	r3, [r7, #32]
 80035d2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80035d4:	6a3b      	ldr	r3, [r7, #32]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d10a      	bne.n	80035f6 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	69fa      	ldr	r2, [r7, #28]
 80035ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80035ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80035f2:	6053      	str	r3, [r2, #4]
            break;
 80035f4:	e008      	b.n	8003608 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f8:	3301      	adds	r3, #1
 80035fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	791b      	ldrb	r3, [r3, #4]
 8003600:	461a      	mov	r2, r3
 8003602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003604:	4293      	cmp	r3, r2
 8003606:	d3b3      	bcc.n	8003570 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	695a      	ldr	r2, [r3, #20]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003616:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4618      	mov	r0, r3
 800361e:	f004 f831 	bl	8007684 <USB_ReadInterrupts>
 8003622:	4603      	mov	r3, r0
 8003624:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003628:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800362c:	d10a      	bne.n	8003644 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f007 fbc6 	bl	800adc0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	695a      	ldr	r2, [r3, #20]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003642:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4618      	mov	r0, r3
 800364a:	f004 f81b 	bl	8007684 <USB_ReadInterrupts>
 800364e:	4603      	mov	r3, r0
 8003650:	f003 0304 	and.w	r3, r3, #4
 8003654:	2b04      	cmp	r3, #4
 8003656:	d115      	bne.n	8003684 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	f003 0304 	and.w	r3, r3, #4
 8003666:	2b00      	cmp	r3, #0
 8003668:	d002      	beq.n	8003670 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f007 fbb6 	bl	800addc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6859      	ldr	r1, [r3, #4]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	430a      	orrs	r2, r1
 800367e:	605a      	str	r2, [r3, #4]
 8003680:	e000      	b.n	8003684 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003682:	bf00      	nop
    }
  }
}
 8003684:	3734      	adds	r7, #52	@ 0x34
 8003686:	46bd      	mov	sp, r7
 8003688:	bd90      	pop	{r4, r7, pc}

0800368a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800368a:	b580      	push	{r7, lr}
 800368c:	b082      	sub	sp, #8
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
 8003692:	460b      	mov	r3, r1
 8003694:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800369c:	2b01      	cmp	r3, #1
 800369e:	d101      	bne.n	80036a4 <HAL_PCD_SetAddress+0x1a>
 80036a0:	2302      	movs	r3, #2
 80036a2:	e012      	b.n	80036ca <HAL_PCD_SetAddress+0x40>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	78fa      	ldrb	r2, [r7, #3]
 80036b0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	78fa      	ldrb	r2, [r7, #3]
 80036b8:	4611      	mov	r1, r2
 80036ba:	4618      	mov	r0, r3
 80036bc:	f003 ff7a 	bl	80075b4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3708      	adds	r7, #8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b084      	sub	sp, #16
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
 80036da:	4608      	mov	r0, r1
 80036dc:	4611      	mov	r1, r2
 80036de:	461a      	mov	r2, r3
 80036e0:	4603      	mov	r3, r0
 80036e2:	70fb      	strb	r3, [r7, #3]
 80036e4:	460b      	mov	r3, r1
 80036e6:	803b      	strh	r3, [r7, #0]
 80036e8:	4613      	mov	r3, r2
 80036ea:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80036ec:	2300      	movs	r3, #0
 80036ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80036f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	da0f      	bge.n	8003718 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036f8:	78fb      	ldrb	r3, [r7, #3]
 80036fa:	f003 020f 	and.w	r2, r3, #15
 80036fe:	4613      	mov	r3, r2
 8003700:	00db      	lsls	r3, r3, #3
 8003702:	4413      	add	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	3310      	adds	r3, #16
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	4413      	add	r3, r2
 800370c:	3304      	adds	r3, #4
 800370e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2201      	movs	r2, #1
 8003714:	705a      	strb	r2, [r3, #1]
 8003716:	e00f      	b.n	8003738 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003718:	78fb      	ldrb	r3, [r7, #3]
 800371a:	f003 020f 	and.w	r2, r3, #15
 800371e:	4613      	mov	r3, r2
 8003720:	00db      	lsls	r3, r3, #3
 8003722:	4413      	add	r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	4413      	add	r3, r2
 800372e:	3304      	adds	r3, #4
 8003730:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003738:	78fb      	ldrb	r3, [r7, #3]
 800373a:	f003 030f 	and.w	r3, r3, #15
 800373e:	b2da      	uxtb	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003744:	883b      	ldrh	r3, [r7, #0]
 8003746:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	78ba      	ldrb	r2, [r7, #2]
 8003752:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	785b      	ldrb	r3, [r3, #1]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d004      	beq.n	8003766 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	461a      	mov	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003766:	78bb      	ldrb	r3, [r7, #2]
 8003768:	2b02      	cmp	r3, #2
 800376a:	d102      	bne.n	8003772 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003778:	2b01      	cmp	r3, #1
 800377a:	d101      	bne.n	8003780 <HAL_PCD_EP_Open+0xae>
 800377c:	2302      	movs	r3, #2
 800377e:	e00e      	b.n	800379e <HAL_PCD_EP_Open+0xcc>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68f9      	ldr	r1, [r7, #12]
 800378e:	4618      	mov	r0, r3
 8003790:	f003 f8fa 	bl	8006988 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800379c:	7afb      	ldrb	r3, [r7, #11]
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b084      	sub	sp, #16
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
 80037ae:	460b      	mov	r3, r1
 80037b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80037b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	da0f      	bge.n	80037da <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037ba:	78fb      	ldrb	r3, [r7, #3]
 80037bc:	f003 020f 	and.w	r2, r3, #15
 80037c0:	4613      	mov	r3, r2
 80037c2:	00db      	lsls	r3, r3, #3
 80037c4:	4413      	add	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	3310      	adds	r3, #16
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	4413      	add	r3, r2
 80037ce:	3304      	adds	r3, #4
 80037d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2201      	movs	r2, #1
 80037d6:	705a      	strb	r2, [r3, #1]
 80037d8:	e00f      	b.n	80037fa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037da:	78fb      	ldrb	r3, [r7, #3]
 80037dc:	f003 020f 	and.w	r2, r3, #15
 80037e0:	4613      	mov	r3, r2
 80037e2:	00db      	lsls	r3, r3, #3
 80037e4:	4413      	add	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	4413      	add	r3, r2
 80037f0:	3304      	adds	r3, #4
 80037f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80037fa:	78fb      	ldrb	r3, [r7, #3]
 80037fc:	f003 030f 	and.w	r3, r3, #15
 8003800:	b2da      	uxtb	r2, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800380c:	2b01      	cmp	r3, #1
 800380e:	d101      	bne.n	8003814 <HAL_PCD_EP_Close+0x6e>
 8003810:	2302      	movs	r3, #2
 8003812:	e00e      	b.n	8003832 <HAL_PCD_EP_Close+0x8c>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68f9      	ldr	r1, [r7, #12]
 8003822:	4618      	mov	r0, r3
 8003824:	f003 f938 	bl	8006a98 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800383a:	b580      	push	{r7, lr}
 800383c:	b086      	sub	sp, #24
 800383e:	af00      	add	r7, sp, #0
 8003840:	60f8      	str	r0, [r7, #12]
 8003842:	607a      	str	r2, [r7, #4]
 8003844:	603b      	str	r3, [r7, #0]
 8003846:	460b      	mov	r3, r1
 8003848:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800384a:	7afb      	ldrb	r3, [r7, #11]
 800384c:	f003 020f 	and.w	r2, r3, #15
 8003850:	4613      	mov	r3, r2
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	4413      	add	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	4413      	add	r3, r2
 8003860:	3304      	adds	r3, #4
 8003862:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	683a      	ldr	r2, [r7, #0]
 800386e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	2200      	movs	r2, #0
 8003874:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	2200      	movs	r2, #0
 800387a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800387c:	7afb      	ldrb	r3, [r7, #11]
 800387e:	f003 030f 	and.w	r3, r3, #15
 8003882:	b2da      	uxtb	r2, r3
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	799b      	ldrb	r3, [r3, #6]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d102      	bne.n	8003896 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6818      	ldr	r0, [r3, #0]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	799b      	ldrb	r3, [r3, #6]
 800389e:	461a      	mov	r2, r3
 80038a0:	6979      	ldr	r1, [r7, #20]
 80038a2:	f003 f9d5 	bl	8006c50 <USB_EPStartXfer>

  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3718      	adds	r7, #24
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	460b      	mov	r3, r1
 80038ba:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80038bc:	78fb      	ldrb	r3, [r7, #3]
 80038be:	f003 020f 	and.w	r2, r3, #15
 80038c2:	6879      	ldr	r1, [r7, #4]
 80038c4:	4613      	mov	r3, r2
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	4413      	add	r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	440b      	add	r3, r1
 80038ce:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80038d2:	681b      	ldr	r3, [r3, #0]
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	607a      	str	r2, [r7, #4]
 80038ea:	603b      	str	r3, [r7, #0]
 80038ec:	460b      	mov	r3, r1
 80038ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038f0:	7afb      	ldrb	r3, [r7, #11]
 80038f2:	f003 020f 	and.w	r2, r3, #15
 80038f6:	4613      	mov	r3, r2
 80038f8:	00db      	lsls	r3, r3, #3
 80038fa:	4413      	add	r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	3310      	adds	r3, #16
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	4413      	add	r3, r2
 8003904:	3304      	adds	r3, #4
 8003906:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	2200      	movs	r2, #0
 8003918:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	2201      	movs	r2, #1
 800391e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003920:	7afb      	ldrb	r3, [r7, #11]
 8003922:	f003 030f 	and.w	r3, r3, #15
 8003926:	b2da      	uxtb	r2, r3
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	799b      	ldrb	r3, [r3, #6]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d102      	bne.n	800393a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6818      	ldr	r0, [r3, #0]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	799b      	ldrb	r3, [r3, #6]
 8003942:	461a      	mov	r2, r3
 8003944:	6979      	ldr	r1, [r7, #20]
 8003946:	f003 f983 	bl	8006c50 <USB_EPStartXfer>

  return HAL_OK;
 800394a:	2300      	movs	r3, #0
}
 800394c:	4618      	mov	r0, r3
 800394e:	3718      	adds	r7, #24
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	460b      	mov	r3, r1
 800395e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003960:	78fb      	ldrb	r3, [r7, #3]
 8003962:	f003 030f 	and.w	r3, r3, #15
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	7912      	ldrb	r2, [r2, #4]
 800396a:	4293      	cmp	r3, r2
 800396c:	d901      	bls.n	8003972 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e04f      	b.n	8003a12 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003972:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003976:	2b00      	cmp	r3, #0
 8003978:	da0f      	bge.n	800399a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800397a:	78fb      	ldrb	r3, [r7, #3]
 800397c:	f003 020f 	and.w	r2, r3, #15
 8003980:	4613      	mov	r3, r2
 8003982:	00db      	lsls	r3, r3, #3
 8003984:	4413      	add	r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	3310      	adds	r3, #16
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	4413      	add	r3, r2
 800398e:	3304      	adds	r3, #4
 8003990:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2201      	movs	r2, #1
 8003996:	705a      	strb	r2, [r3, #1]
 8003998:	e00d      	b.n	80039b6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800399a:	78fa      	ldrb	r2, [r7, #3]
 800399c:	4613      	mov	r3, r2
 800399e:	00db      	lsls	r3, r3, #3
 80039a0:	4413      	add	r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	4413      	add	r3, r2
 80039ac:	3304      	adds	r3, #4
 80039ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2201      	movs	r2, #1
 80039ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039bc:	78fb      	ldrb	r3, [r7, #3]
 80039be:	f003 030f 	and.w	r3, r3, #15
 80039c2:	b2da      	uxtb	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d101      	bne.n	80039d6 <HAL_PCD_EP_SetStall+0x82>
 80039d2:	2302      	movs	r3, #2
 80039d4:	e01d      	b.n	8003a12 <HAL_PCD_EP_SetStall+0xbe>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2201      	movs	r2, #1
 80039da:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68f9      	ldr	r1, [r7, #12]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f003 fd11 	bl	800740c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80039ea:	78fb      	ldrb	r3, [r7, #3]
 80039ec:	f003 030f 	and.w	r3, r3, #15
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d109      	bne.n	8003a08 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6818      	ldr	r0, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	7999      	ldrb	r1, [r3, #6]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003a02:	461a      	mov	r2, r3
 8003a04:	f003 ff02 	bl	800780c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b084      	sub	sp, #16
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
 8003a22:	460b      	mov	r3, r1
 8003a24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003a26:	78fb      	ldrb	r3, [r7, #3]
 8003a28:	f003 030f 	and.w	r3, r3, #15
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	7912      	ldrb	r2, [r2, #4]
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d901      	bls.n	8003a38 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e042      	b.n	8003abe <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	da0f      	bge.n	8003a60 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a40:	78fb      	ldrb	r3, [r7, #3]
 8003a42:	f003 020f 	and.w	r2, r3, #15
 8003a46:	4613      	mov	r3, r2
 8003a48:	00db      	lsls	r3, r3, #3
 8003a4a:	4413      	add	r3, r2
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	3310      	adds	r3, #16
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	4413      	add	r3, r2
 8003a54:	3304      	adds	r3, #4
 8003a56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	705a      	strb	r2, [r3, #1]
 8003a5e:	e00f      	b.n	8003a80 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a60:	78fb      	ldrb	r3, [r7, #3]
 8003a62:	f003 020f 	and.w	r2, r3, #15
 8003a66:	4613      	mov	r3, r2
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	4413      	add	r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	4413      	add	r3, r2
 8003a76:	3304      	adds	r3, #4
 8003a78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a86:	78fb      	ldrb	r3, [r7, #3]
 8003a88:	f003 030f 	and.w	r3, r3, #15
 8003a8c:	b2da      	uxtb	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d101      	bne.n	8003aa0 <HAL_PCD_EP_ClrStall+0x86>
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	e00e      	b.n	8003abe <HAL_PCD_EP_ClrStall+0xa4>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68f9      	ldr	r1, [r7, #12]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f003 fd1a 	bl	80074e8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b084      	sub	sp, #16
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
 8003ace:	460b      	mov	r3, r1
 8003ad0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003ad2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	da0c      	bge.n	8003af4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ada:	78fb      	ldrb	r3, [r7, #3]
 8003adc:	f003 020f 	and.w	r2, r3, #15
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	4413      	add	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	3310      	adds	r3, #16
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	4413      	add	r3, r2
 8003aee:	3304      	adds	r3, #4
 8003af0:	60fb      	str	r3, [r7, #12]
 8003af2:	e00c      	b.n	8003b0e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003af4:	78fb      	ldrb	r3, [r7, #3]
 8003af6:	f003 020f 	and.w	r2, r3, #15
 8003afa:	4613      	mov	r3, r2
 8003afc:	00db      	lsls	r3, r3, #3
 8003afe:	4413      	add	r3, r2
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	4413      	add	r3, r2
 8003b0a:	3304      	adds	r3, #4
 8003b0c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68f9      	ldr	r1, [r7, #12]
 8003b14:	4618      	mov	r0, r3
 8003b16:	f003 fb39 	bl	800718c <USB_EPStopXfer>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003b1e:	7afb      	ldrb	r3, [r7, #11]
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3710      	adds	r7, #16
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b08a      	sub	sp, #40	@ 0x28
 8003b2c:	af02      	add	r7, sp, #8
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	4613      	mov	r3, r2
 8003b40:	00db      	lsls	r3, r3, #3
 8003b42:	4413      	add	r3, r2
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	3310      	adds	r3, #16
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	3304      	adds	r3, #4
 8003b4e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	695a      	ldr	r2, [r3, #20]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d901      	bls.n	8003b60 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e06b      	b.n	8003c38 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	691a      	ldr	r2, [r3, #16]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	695b      	ldr	r3, [r3, #20]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	69fa      	ldr	r2, [r7, #28]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d902      	bls.n	8003b7c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	3303      	adds	r3, #3
 8003b80:	089b      	lsrs	r3, r3, #2
 8003b82:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b84:	e02a      	b.n	8003bdc <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	691a      	ldr	r2, [r3, #16]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	69fa      	ldr	r2, [r7, #28]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d902      	bls.n	8003ba2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	3303      	adds	r3, #3
 8003ba6:	089b      	lsrs	r3, r3, #2
 8003ba8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	68d9      	ldr	r1, [r3, #12]
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	b2da      	uxtb	r2, r3
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003bba:	9300      	str	r3, [sp, #0]
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	6978      	ldr	r0, [r7, #20]
 8003bc0:	f003 fb8e 	bl	80072e0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	68da      	ldr	r2, [r3, #12]
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	441a      	add	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	695a      	ldr	r2, [r3, #20]
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	441a      	add	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	015a      	lsls	r2, r3, #5
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	4413      	add	r3, r2
 8003be4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d809      	bhi.n	8003c06 <PCD_WriteEmptyTxFifo+0xde>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	695a      	ldr	r2, [r3, #20]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d203      	bcs.n	8003c06 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1bf      	bne.n	8003b86 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	691a      	ldr	r2, [r3, #16]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d811      	bhi.n	8003c36 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	f003 030f 	and.w	r3, r3, #15
 8003c18:	2201      	movs	r2, #1
 8003c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	43db      	mvns	r3, r3
 8003c2c:	6939      	ldr	r1, [r7, #16]
 8003c2e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003c32:	4013      	ands	r3, r2
 8003c34:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3720      	adds	r7, #32
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b088      	sub	sp, #32
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	333c      	adds	r3, #60	@ 0x3c
 8003c58:	3304      	adds	r3, #4
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	015a      	lsls	r2, r3, #5
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	4413      	add	r3, r2
 8003c66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	799b      	ldrb	r3, [r3, #6]
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d17b      	bne.n	8003d6e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	f003 0308 	and.w	r3, r3, #8
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d015      	beq.n	8003cac <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	4a61      	ldr	r2, [pc, #388]	@ (8003e08 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	f240 80b9 	bls.w	8003dfc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f000 80b3 	beq.w	8003dfc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	015a      	lsls	r2, r3, #5
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ca8:	6093      	str	r3, [r2, #8]
 8003caa:	e0a7      	b.n	8003dfc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	f003 0320 	and.w	r3, r3, #32
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d009      	beq.n	8003cca <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	015a      	lsls	r2, r3, #5
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	2320      	movs	r3, #32
 8003cc6:	6093      	str	r3, [r2, #8]
 8003cc8:	e098      	b.n	8003dfc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f040 8093 	bne.w	8003dfc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	4a4b      	ldr	r2, [pc, #300]	@ (8003e08 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d90f      	bls.n	8003cfe <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00a      	beq.n	8003cfe <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	015a      	lsls	r2, r3, #5
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	4413      	add	r3, r2
 8003cf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cfa:	6093      	str	r3, [r2, #8]
 8003cfc:	e07e      	b.n	8003dfc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003cfe:	683a      	ldr	r2, [r7, #0]
 8003d00:	4613      	mov	r3, r2
 8003d02:	00db      	lsls	r3, r3, #3
 8003d04:	4413      	add	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	4413      	add	r3, r2
 8003d10:	3304      	adds	r3, #4
 8003d12:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6a1a      	ldr	r2, [r3, #32]
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	0159      	lsls	r1, r3, #5
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	440b      	add	r3, r1
 8003d20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d2a:	1ad2      	subs	r2, r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d114      	bne.n	8003d60 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d109      	bne.n	8003d52 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6818      	ldr	r0, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003d48:	461a      	mov	r2, r3
 8003d4a:	2101      	movs	r1, #1
 8003d4c:	f003 fd5e 	bl	800780c <USB_EP0_OutStart>
 8003d50:	e006      	b.n	8003d60 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	68da      	ldr	r2, [r3, #12]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	441a      	add	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	4619      	mov	r1, r3
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f006 ff66 	bl	800ac38 <HAL_PCD_DataOutStageCallback>
 8003d6c:	e046      	b.n	8003dfc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	4a26      	ldr	r2, [pc, #152]	@ (8003e0c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d124      	bne.n	8003dc0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00a      	beq.n	8003d96 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	015a      	lsls	r2, r3, #5
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	4413      	add	r3, r2
 8003d88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d92:	6093      	str	r3, [r2, #8]
 8003d94:	e032      	b.n	8003dfc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	f003 0320 	and.w	r3, r3, #32
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d008      	beq.n	8003db2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	015a      	lsls	r2, r3, #5
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	4413      	add	r3, r2
 8003da8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dac:	461a      	mov	r2, r3
 8003dae:	2320      	movs	r3, #32
 8003db0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	4619      	mov	r1, r3
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f006 ff3d 	bl	800ac38 <HAL_PCD_DataOutStageCallback>
 8003dbe:	e01d      	b.n	8003dfc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d114      	bne.n	8003df0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003dc6:	6879      	ldr	r1, [r7, #4]
 8003dc8:	683a      	ldr	r2, [r7, #0]
 8003dca:	4613      	mov	r3, r2
 8003dcc:	00db      	lsls	r3, r3, #3
 8003dce:	4413      	add	r3, r2
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	440b      	add	r3, r1
 8003dd4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d108      	bne.n	8003df0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6818      	ldr	r0, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003de8:	461a      	mov	r2, r3
 8003dea:	2100      	movs	r1, #0
 8003dec:	f003 fd0e 	bl	800780c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	4619      	mov	r1, r3
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f006 ff1e 	bl	800ac38 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3720      	adds	r7, #32
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	4f54300a 	.word	0x4f54300a
 8003e0c:	4f54310a 	.word	0x4f54310a

08003e10 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b086      	sub	sp, #24
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	333c      	adds	r3, #60	@ 0x3c
 8003e28:	3304      	adds	r3, #4
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	015a      	lsls	r2, r3, #5
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	4413      	add	r3, r2
 8003e36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	4a15      	ldr	r2, [pc, #84]	@ (8003e98 <PCD_EP_OutSetupPacket_int+0x88>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d90e      	bls.n	8003e64 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d009      	beq.n	8003e64 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	015a      	lsls	r2, r3, #5
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	4413      	add	r3, r2
 8003e58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e62:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f006 fed5 	bl	800ac14 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	4a0a      	ldr	r2, [pc, #40]	@ (8003e98 <PCD_EP_OutSetupPacket_int+0x88>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d90c      	bls.n	8003e8c <PCD_EP_OutSetupPacket_int+0x7c>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	799b      	ldrb	r3, [r3, #6]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d108      	bne.n	8003e8c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6818      	ldr	r0, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003e84:	461a      	mov	r2, r3
 8003e86:	2101      	movs	r1, #1
 8003e88:	f003 fcc0 	bl	800780c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3718      	adds	r7, #24
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	4f54300a 	.word	0x4f54300a

08003e9c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	70fb      	strb	r3, [r7, #3]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003eb4:	78fb      	ldrb	r3, [r7, #3]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d107      	bne.n	8003eca <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003eba:	883b      	ldrh	r3, [r7, #0]
 8003ebc:	0419      	lsls	r1, r3, #16
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ec8:	e028      	b.n	8003f1c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ed0:	0c1b      	lsrs	r3, r3, #16
 8003ed2:	68ba      	ldr	r2, [r7, #8]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ed8:	2300      	movs	r3, #0
 8003eda:	73fb      	strb	r3, [r7, #15]
 8003edc:	e00d      	b.n	8003efa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	7bfb      	ldrb	r3, [r7, #15]
 8003ee4:	3340      	adds	r3, #64	@ 0x40
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	4413      	add	r3, r2
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	0c1b      	lsrs	r3, r3, #16
 8003eee:	68ba      	ldr	r2, [r7, #8]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ef4:	7bfb      	ldrb	r3, [r7, #15]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	73fb      	strb	r3, [r7, #15]
 8003efa:	7bfa      	ldrb	r2, [r7, #15]
 8003efc:	78fb      	ldrb	r3, [r7, #3]
 8003efe:	3b01      	subs	r3, #1
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d3ec      	bcc.n	8003ede <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003f04:	883b      	ldrh	r3, [r7, #0]
 8003f06:	0418      	lsls	r0, r3, #16
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6819      	ldr	r1, [r3, #0]
 8003f0c:	78fb      	ldrb	r3, [r7, #3]
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	68ba      	ldr	r2, [r7, #8]
 8003f12:	4302      	orrs	r2, r0
 8003f14:	3340      	adds	r3, #64	@ 0x40
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	440b      	add	r3, r1
 8003f1a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3714      	adds	r7, #20
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr

08003f2a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	b083      	sub	sp, #12
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
 8003f32:	460b      	mov	r3, r1
 8003f34:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	887a      	ldrh	r2, [r7, #2]
 8003f3c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	460b      	mov	r3, r1
 8003f56:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b086      	sub	sp, #24
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e267      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d075      	beq.n	800406e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003f82:	4b88      	ldr	r3, [pc, #544]	@ (80041a4 <HAL_RCC_OscConfig+0x240>)
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f003 030c 	and.w	r3, r3, #12
 8003f8a:	2b04      	cmp	r3, #4
 8003f8c:	d00c      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f8e:	4b85      	ldr	r3, [pc, #532]	@ (80041a4 <HAL_RCC_OscConfig+0x240>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003f96:	2b08      	cmp	r3, #8
 8003f98:	d112      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f9a:	4b82      	ldr	r3, [pc, #520]	@ (80041a4 <HAL_RCC_OscConfig+0x240>)
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fa2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fa6:	d10b      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fa8:	4b7e      	ldr	r3, [pc, #504]	@ (80041a4 <HAL_RCC_OscConfig+0x240>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d05b      	beq.n	800406c <HAL_RCC_OscConfig+0x108>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d157      	bne.n	800406c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e242      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fc8:	d106      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x74>
 8003fca:	4b76      	ldr	r3, [pc, #472]	@ (80041a4 <HAL_RCC_OscConfig+0x240>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a75      	ldr	r2, [pc, #468]	@ (80041a4 <HAL_RCC_OscConfig+0x240>)
 8003fd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fd4:	6013      	str	r3, [r2, #0]
 8003fd6:	e01d      	b.n	8004014 <HAL_RCC_OscConfig+0xb0>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003fe0:	d10c      	bne.n	8003ffc <HAL_RCC_OscConfig+0x98>
 8003fe2:	4b70      	ldr	r3, [pc, #448]	@ (80041a4 <HAL_RCC_OscConfig+0x240>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a6f      	ldr	r2, [pc, #444]	@ (80041a4 <HAL_RCC_OscConfig+0x240>)
 8003fe8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003fec:	6013      	str	r3, [r2, #0]
 8003fee:	4b6d      	ldr	r3, [pc, #436]	@ (80041a4 <HAL_RCC_OscConfig+0x240>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a6c      	ldr	r2, [pc, #432]	@ (80041a4 <HAL_RCC_OscConfig+0x240>)
 8003ff4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ff8:	6013      	str	r3, [r2, #0]
 8003ffa:	e00b      	b.n	8004014 <HAL_RCC_OscConfig+0xb0>
 8003ffc:	4b69      	ldr	r3, [pc, #420]	@ (80041a4 <HAL_RCC_OscConfig+0x240>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a68      	ldr	r2, [pc, #416]	@ (80041a4 <HAL_RCC_OscConfig+0x240>)
 8004002:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004006:	6013      	str	r3, [r2, #0]
 8004008:	4b66      	ldr	r3, [pc, #408]	@ (80041a4 <HAL_RCC_OscConfig+0x240>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a65      	ldr	r2, [pc, #404]	@ (80041a4 <HAL_RCC_OscConfig+0x240>)
 800400e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004012:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d013      	beq.n	8004044 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800401c:	f7fd f8d8 	bl	80011d0 <HAL_GetTick>
 8004020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004022:	e008      	b.n	8004036 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004024:	f7fd f8d4 	bl	80011d0 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b64      	cmp	r3, #100	@ 0x64
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e207      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004036:	4b5b      	ldr	r3, [pc, #364]	@ (80041a4 <HAL_RCC_OscConfig+0x240>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d0f0      	beq.n	8004024 <HAL_RCC_OscConfig+0xc0>
 8004042:	e014      	b.n	800406e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004044:	f7fd f8c4 	bl	80011d0 <HAL_GetTick>
 8004048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800404a:	e008      	b.n	800405e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800404c:	f7fd f8c0 	bl	80011d0 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	2b64      	cmp	r3, #100	@ 0x64
 8004058:	d901      	bls.n	800405e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e1f3      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800405e:	4b51      	ldr	r3, [pc, #324]	@ (80041a4 <HAL_RCC_OscConfig+0x240>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1f0      	bne.n	800404c <HAL_RCC_OscConfig+0xe8>
 800406a:	e000      	b.n	800406e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800406c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0302 	and.w	r3, r3, #2
 8004076:	2b00      	cmp	r3, #0
 8004078:	d063      	beq.n	8004142 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800407a:	4b4a      	ldr	r3, [pc, #296]	@ (80041a4 <HAL_RCC_OscConfig+0x240>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f003 030c 	and.w	r3, r3, #12
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00b      	beq.n	800409e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004086:	4b47      	ldr	r3, [pc, #284]	@ (80041a4 <HAL_RCC_OscConfig+0x240>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800408e:	2b08      	cmp	r3, #8
 8004090:	d11c      	bne.n	80040cc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004092:	4b44      	ldr	r3, [pc, #272]	@ (80041a4 <HAL_RCC_OscConfig+0x240>)
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d116      	bne.n	80040cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800409e:	4b41      	ldr	r3, [pc, #260]	@ (80041a4 <HAL_RCC_OscConfig+0x240>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d005      	beq.n	80040b6 <HAL_RCC_OscConfig+0x152>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d001      	beq.n	80040b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e1c7      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040b6:	4b3b      	ldr	r3, [pc, #236]	@ (80041a4 <HAL_RCC_OscConfig+0x240>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	00db      	lsls	r3, r3, #3
 80040c4:	4937      	ldr	r1, [pc, #220]	@ (80041a4 <HAL_RCC_OscConfig+0x240>)
 80040c6:	4313      	orrs	r3, r2
 80040c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ca:	e03a      	b.n	8004142 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d020      	beq.n	8004116 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040d4:	4b34      	ldr	r3, [pc, #208]	@ (80041a8 <HAL_RCC_OscConfig+0x244>)
 80040d6:	2201      	movs	r2, #1
 80040d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040da:	f7fd f879 	bl	80011d0 <HAL_GetTick>
 80040de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040e0:	e008      	b.n	80040f4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040e2:	f7fd f875 	bl	80011d0 <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d901      	bls.n	80040f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e1a8      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040f4:	4b2b      	ldr	r3, [pc, #172]	@ (80041a4 <HAL_RCC_OscConfig+0x240>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0302 	and.w	r3, r3, #2
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d0f0      	beq.n	80040e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004100:	4b28      	ldr	r3, [pc, #160]	@ (80041a4 <HAL_RCC_OscConfig+0x240>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	00db      	lsls	r3, r3, #3
 800410e:	4925      	ldr	r1, [pc, #148]	@ (80041a4 <HAL_RCC_OscConfig+0x240>)
 8004110:	4313      	orrs	r3, r2
 8004112:	600b      	str	r3, [r1, #0]
 8004114:	e015      	b.n	8004142 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004116:	4b24      	ldr	r3, [pc, #144]	@ (80041a8 <HAL_RCC_OscConfig+0x244>)
 8004118:	2200      	movs	r2, #0
 800411a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800411c:	f7fd f858 	bl	80011d0 <HAL_GetTick>
 8004120:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004122:	e008      	b.n	8004136 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004124:	f7fd f854 	bl	80011d0 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	2b02      	cmp	r3, #2
 8004130:	d901      	bls.n	8004136 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e187      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004136:	4b1b      	ldr	r3, [pc, #108]	@ (80041a4 <HAL_RCC_OscConfig+0x240>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1f0      	bne.n	8004124 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0308 	and.w	r3, r3, #8
 800414a:	2b00      	cmp	r3, #0
 800414c:	d036      	beq.n	80041bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d016      	beq.n	8004184 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004156:	4b15      	ldr	r3, [pc, #84]	@ (80041ac <HAL_RCC_OscConfig+0x248>)
 8004158:	2201      	movs	r2, #1
 800415a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800415c:	f7fd f838 	bl	80011d0 <HAL_GetTick>
 8004160:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004162:	e008      	b.n	8004176 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004164:	f7fd f834 	bl	80011d0 <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	2b02      	cmp	r3, #2
 8004170:	d901      	bls.n	8004176 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e167      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004176:	4b0b      	ldr	r3, [pc, #44]	@ (80041a4 <HAL_RCC_OscConfig+0x240>)
 8004178:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800417a:	f003 0302 	and.w	r3, r3, #2
 800417e:	2b00      	cmp	r3, #0
 8004180:	d0f0      	beq.n	8004164 <HAL_RCC_OscConfig+0x200>
 8004182:	e01b      	b.n	80041bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004184:	4b09      	ldr	r3, [pc, #36]	@ (80041ac <HAL_RCC_OscConfig+0x248>)
 8004186:	2200      	movs	r2, #0
 8004188:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800418a:	f7fd f821 	bl	80011d0 <HAL_GetTick>
 800418e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004190:	e00e      	b.n	80041b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004192:	f7fd f81d 	bl	80011d0 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b02      	cmp	r3, #2
 800419e:	d907      	bls.n	80041b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e150      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
 80041a4:	40023800 	.word	0x40023800
 80041a8:	42470000 	.word	0x42470000
 80041ac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041b0:	4b88      	ldr	r3, [pc, #544]	@ (80043d4 <HAL_RCC_OscConfig+0x470>)
 80041b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041b4:	f003 0302 	and.w	r3, r3, #2
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1ea      	bne.n	8004192 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0304 	and.w	r3, r3, #4
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f000 8097 	beq.w	80042f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041ca:	2300      	movs	r3, #0
 80041cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041ce:	4b81      	ldr	r3, [pc, #516]	@ (80043d4 <HAL_RCC_OscConfig+0x470>)
 80041d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d10f      	bne.n	80041fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041da:	2300      	movs	r3, #0
 80041dc:	60bb      	str	r3, [r7, #8]
 80041de:	4b7d      	ldr	r3, [pc, #500]	@ (80043d4 <HAL_RCC_OscConfig+0x470>)
 80041e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e2:	4a7c      	ldr	r2, [pc, #496]	@ (80043d4 <HAL_RCC_OscConfig+0x470>)
 80041e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80041ea:	4b7a      	ldr	r3, [pc, #488]	@ (80043d4 <HAL_RCC_OscConfig+0x470>)
 80041ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041f2:	60bb      	str	r3, [r7, #8]
 80041f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041f6:	2301      	movs	r3, #1
 80041f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041fa:	4b77      	ldr	r3, [pc, #476]	@ (80043d8 <HAL_RCC_OscConfig+0x474>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004202:	2b00      	cmp	r3, #0
 8004204:	d118      	bne.n	8004238 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004206:	4b74      	ldr	r3, [pc, #464]	@ (80043d8 <HAL_RCC_OscConfig+0x474>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a73      	ldr	r2, [pc, #460]	@ (80043d8 <HAL_RCC_OscConfig+0x474>)
 800420c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004210:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004212:	f7fc ffdd 	bl	80011d0 <HAL_GetTick>
 8004216:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004218:	e008      	b.n	800422c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800421a:	f7fc ffd9 	bl	80011d0 <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	2b02      	cmp	r3, #2
 8004226:	d901      	bls.n	800422c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e10c      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800422c:	4b6a      	ldr	r3, [pc, #424]	@ (80043d8 <HAL_RCC_OscConfig+0x474>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004234:	2b00      	cmp	r3, #0
 8004236:	d0f0      	beq.n	800421a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	2b01      	cmp	r3, #1
 800423e:	d106      	bne.n	800424e <HAL_RCC_OscConfig+0x2ea>
 8004240:	4b64      	ldr	r3, [pc, #400]	@ (80043d4 <HAL_RCC_OscConfig+0x470>)
 8004242:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004244:	4a63      	ldr	r2, [pc, #396]	@ (80043d4 <HAL_RCC_OscConfig+0x470>)
 8004246:	f043 0301 	orr.w	r3, r3, #1
 800424a:	6713      	str	r3, [r2, #112]	@ 0x70
 800424c:	e01c      	b.n	8004288 <HAL_RCC_OscConfig+0x324>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	2b05      	cmp	r3, #5
 8004254:	d10c      	bne.n	8004270 <HAL_RCC_OscConfig+0x30c>
 8004256:	4b5f      	ldr	r3, [pc, #380]	@ (80043d4 <HAL_RCC_OscConfig+0x470>)
 8004258:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800425a:	4a5e      	ldr	r2, [pc, #376]	@ (80043d4 <HAL_RCC_OscConfig+0x470>)
 800425c:	f043 0304 	orr.w	r3, r3, #4
 8004260:	6713      	str	r3, [r2, #112]	@ 0x70
 8004262:	4b5c      	ldr	r3, [pc, #368]	@ (80043d4 <HAL_RCC_OscConfig+0x470>)
 8004264:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004266:	4a5b      	ldr	r2, [pc, #364]	@ (80043d4 <HAL_RCC_OscConfig+0x470>)
 8004268:	f043 0301 	orr.w	r3, r3, #1
 800426c:	6713      	str	r3, [r2, #112]	@ 0x70
 800426e:	e00b      	b.n	8004288 <HAL_RCC_OscConfig+0x324>
 8004270:	4b58      	ldr	r3, [pc, #352]	@ (80043d4 <HAL_RCC_OscConfig+0x470>)
 8004272:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004274:	4a57      	ldr	r2, [pc, #348]	@ (80043d4 <HAL_RCC_OscConfig+0x470>)
 8004276:	f023 0301 	bic.w	r3, r3, #1
 800427a:	6713      	str	r3, [r2, #112]	@ 0x70
 800427c:	4b55      	ldr	r3, [pc, #340]	@ (80043d4 <HAL_RCC_OscConfig+0x470>)
 800427e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004280:	4a54      	ldr	r2, [pc, #336]	@ (80043d4 <HAL_RCC_OscConfig+0x470>)
 8004282:	f023 0304 	bic.w	r3, r3, #4
 8004286:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d015      	beq.n	80042bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004290:	f7fc ff9e 	bl	80011d0 <HAL_GetTick>
 8004294:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004296:	e00a      	b.n	80042ae <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004298:	f7fc ff9a 	bl	80011d0 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e0cb      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ae:	4b49      	ldr	r3, [pc, #292]	@ (80043d4 <HAL_RCC_OscConfig+0x470>)
 80042b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d0ee      	beq.n	8004298 <HAL_RCC_OscConfig+0x334>
 80042ba:	e014      	b.n	80042e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042bc:	f7fc ff88 	bl	80011d0 <HAL_GetTick>
 80042c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042c2:	e00a      	b.n	80042da <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042c4:	f7fc ff84 	bl	80011d0 <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d901      	bls.n	80042da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e0b5      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042da:	4b3e      	ldr	r3, [pc, #248]	@ (80043d4 <HAL_RCC_OscConfig+0x470>)
 80042dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1ee      	bne.n	80042c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80042e6:	7dfb      	ldrb	r3, [r7, #23]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d105      	bne.n	80042f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042ec:	4b39      	ldr	r3, [pc, #228]	@ (80043d4 <HAL_RCC_OscConfig+0x470>)
 80042ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f0:	4a38      	ldr	r2, [pc, #224]	@ (80043d4 <HAL_RCC_OscConfig+0x470>)
 80042f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042f6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f000 80a1 	beq.w	8004444 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004302:	4b34      	ldr	r3, [pc, #208]	@ (80043d4 <HAL_RCC_OscConfig+0x470>)
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f003 030c 	and.w	r3, r3, #12
 800430a:	2b08      	cmp	r3, #8
 800430c:	d05c      	beq.n	80043c8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	2b02      	cmp	r3, #2
 8004314:	d141      	bne.n	800439a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004316:	4b31      	ldr	r3, [pc, #196]	@ (80043dc <HAL_RCC_OscConfig+0x478>)
 8004318:	2200      	movs	r2, #0
 800431a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800431c:	f7fc ff58 	bl	80011d0 <HAL_GetTick>
 8004320:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004322:	e008      	b.n	8004336 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004324:	f7fc ff54 	bl	80011d0 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b02      	cmp	r3, #2
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e087      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004336:	4b27      	ldr	r3, [pc, #156]	@ (80043d4 <HAL_RCC_OscConfig+0x470>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1f0      	bne.n	8004324 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	69da      	ldr	r2, [r3, #28]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a1b      	ldr	r3, [r3, #32]
 800434a:	431a      	orrs	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004350:	019b      	lsls	r3, r3, #6
 8004352:	431a      	orrs	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004358:	085b      	lsrs	r3, r3, #1
 800435a:	3b01      	subs	r3, #1
 800435c:	041b      	lsls	r3, r3, #16
 800435e:	431a      	orrs	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004364:	061b      	lsls	r3, r3, #24
 8004366:	491b      	ldr	r1, [pc, #108]	@ (80043d4 <HAL_RCC_OscConfig+0x470>)
 8004368:	4313      	orrs	r3, r2
 800436a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800436c:	4b1b      	ldr	r3, [pc, #108]	@ (80043dc <HAL_RCC_OscConfig+0x478>)
 800436e:	2201      	movs	r2, #1
 8004370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004372:	f7fc ff2d 	bl	80011d0 <HAL_GetTick>
 8004376:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004378:	e008      	b.n	800438c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800437a:	f7fc ff29 	bl	80011d0 <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	2b02      	cmp	r3, #2
 8004386:	d901      	bls.n	800438c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e05c      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800438c:	4b11      	ldr	r3, [pc, #68]	@ (80043d4 <HAL_RCC_OscConfig+0x470>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d0f0      	beq.n	800437a <HAL_RCC_OscConfig+0x416>
 8004398:	e054      	b.n	8004444 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800439a:	4b10      	ldr	r3, [pc, #64]	@ (80043dc <HAL_RCC_OscConfig+0x478>)
 800439c:	2200      	movs	r2, #0
 800439e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a0:	f7fc ff16 	bl	80011d0 <HAL_GetTick>
 80043a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043a6:	e008      	b.n	80043ba <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043a8:	f7fc ff12 	bl	80011d0 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d901      	bls.n	80043ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e045      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ba:	4b06      	ldr	r3, [pc, #24]	@ (80043d4 <HAL_RCC_OscConfig+0x470>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1f0      	bne.n	80043a8 <HAL_RCC_OscConfig+0x444>
 80043c6:	e03d      	b.n	8004444 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d107      	bne.n	80043e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e038      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
 80043d4:	40023800 	.word	0x40023800
 80043d8:	40007000 	.word	0x40007000
 80043dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043e0:	4b1b      	ldr	r3, [pc, #108]	@ (8004450 <HAL_RCC_OscConfig+0x4ec>)
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d028      	beq.n	8004440 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d121      	bne.n	8004440 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004406:	429a      	cmp	r2, r3
 8004408:	d11a      	bne.n	8004440 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004410:	4013      	ands	r3, r2
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004416:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004418:	4293      	cmp	r3, r2
 800441a:	d111      	bne.n	8004440 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004426:	085b      	lsrs	r3, r3, #1
 8004428:	3b01      	subs	r3, #1
 800442a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800442c:	429a      	cmp	r2, r3
 800442e:	d107      	bne.n	8004440 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800443a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800443c:	429a      	cmp	r2, r3
 800443e:	d001      	beq.n	8004444 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e000      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3718      	adds	r7, #24
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	40023800 	.word	0x40023800

08004454 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d101      	bne.n	8004468 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e0cc      	b.n	8004602 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004468:	4b68      	ldr	r3, [pc, #416]	@ (800460c <HAL_RCC_ClockConfig+0x1b8>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0307 	and.w	r3, r3, #7
 8004470:	683a      	ldr	r2, [r7, #0]
 8004472:	429a      	cmp	r2, r3
 8004474:	d90c      	bls.n	8004490 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004476:	4b65      	ldr	r3, [pc, #404]	@ (800460c <HAL_RCC_ClockConfig+0x1b8>)
 8004478:	683a      	ldr	r2, [r7, #0]
 800447a:	b2d2      	uxtb	r2, r2
 800447c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800447e:	4b63      	ldr	r3, [pc, #396]	@ (800460c <HAL_RCC_ClockConfig+0x1b8>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0307 	and.w	r3, r3, #7
 8004486:	683a      	ldr	r2, [r7, #0]
 8004488:	429a      	cmp	r2, r3
 800448a:	d001      	beq.n	8004490 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e0b8      	b.n	8004602 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d020      	beq.n	80044de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0304 	and.w	r3, r3, #4
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d005      	beq.n	80044b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044a8:	4b59      	ldr	r3, [pc, #356]	@ (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	4a58      	ldr	r2, [pc, #352]	@ (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80044ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80044b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0308 	and.w	r3, r3, #8
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d005      	beq.n	80044cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044c0:	4b53      	ldr	r3, [pc, #332]	@ (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	4a52      	ldr	r2, [pc, #328]	@ (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80044c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80044ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044cc:	4b50      	ldr	r3, [pc, #320]	@ (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	494d      	ldr	r1, [pc, #308]	@ (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d044      	beq.n	8004574 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d107      	bne.n	8004502 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044f2:	4b47      	ldr	r3, [pc, #284]	@ (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d119      	bne.n	8004532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e07f      	b.n	8004602 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	2b02      	cmp	r3, #2
 8004508:	d003      	beq.n	8004512 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800450e:	2b03      	cmp	r3, #3
 8004510:	d107      	bne.n	8004522 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004512:	4b3f      	ldr	r3, [pc, #252]	@ (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d109      	bne.n	8004532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e06f      	b.n	8004602 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004522:	4b3b      	ldr	r3, [pc, #236]	@ (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d101      	bne.n	8004532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e067      	b.n	8004602 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004532:	4b37      	ldr	r3, [pc, #220]	@ (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f023 0203 	bic.w	r2, r3, #3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	4934      	ldr	r1, [pc, #208]	@ (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 8004540:	4313      	orrs	r3, r2
 8004542:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004544:	f7fc fe44 	bl	80011d0 <HAL_GetTick>
 8004548:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800454a:	e00a      	b.n	8004562 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800454c:	f7fc fe40 	bl	80011d0 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	f241 3288 	movw	r2, #5000	@ 0x1388
 800455a:	4293      	cmp	r3, r2
 800455c:	d901      	bls.n	8004562 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e04f      	b.n	8004602 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004562:	4b2b      	ldr	r3, [pc, #172]	@ (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f003 020c 	and.w	r2, r3, #12
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	429a      	cmp	r2, r3
 8004572:	d1eb      	bne.n	800454c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004574:	4b25      	ldr	r3, [pc, #148]	@ (800460c <HAL_RCC_ClockConfig+0x1b8>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0307 	and.w	r3, r3, #7
 800457c:	683a      	ldr	r2, [r7, #0]
 800457e:	429a      	cmp	r2, r3
 8004580:	d20c      	bcs.n	800459c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004582:	4b22      	ldr	r3, [pc, #136]	@ (800460c <HAL_RCC_ClockConfig+0x1b8>)
 8004584:	683a      	ldr	r2, [r7, #0]
 8004586:	b2d2      	uxtb	r2, r2
 8004588:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800458a:	4b20      	ldr	r3, [pc, #128]	@ (800460c <HAL_RCC_ClockConfig+0x1b8>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0307 	and.w	r3, r3, #7
 8004592:	683a      	ldr	r2, [r7, #0]
 8004594:	429a      	cmp	r2, r3
 8004596:	d001      	beq.n	800459c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e032      	b.n	8004602 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0304 	and.w	r3, r3, #4
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d008      	beq.n	80045ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045a8:	4b19      	ldr	r3, [pc, #100]	@ (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	4916      	ldr	r1, [pc, #88]	@ (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0308 	and.w	r3, r3, #8
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d009      	beq.n	80045da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045c6:	4b12      	ldr	r3, [pc, #72]	@ (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	00db      	lsls	r3, r3, #3
 80045d4:	490e      	ldr	r1, [pc, #56]	@ (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80045da:	f000 f821 	bl	8004620 <HAL_RCC_GetSysClockFreq>
 80045de:	4602      	mov	r2, r0
 80045e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	091b      	lsrs	r3, r3, #4
 80045e6:	f003 030f 	and.w	r3, r3, #15
 80045ea:	490a      	ldr	r1, [pc, #40]	@ (8004614 <HAL_RCC_ClockConfig+0x1c0>)
 80045ec:	5ccb      	ldrb	r3, [r1, r3]
 80045ee:	fa22 f303 	lsr.w	r3, r2, r3
 80045f2:	4a09      	ldr	r2, [pc, #36]	@ (8004618 <HAL_RCC_ClockConfig+0x1c4>)
 80045f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80045f6:	4b09      	ldr	r3, [pc, #36]	@ (800461c <HAL_RCC_ClockConfig+0x1c8>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7fc fda4 	bl	8001148 <HAL_InitTick>

  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3710      	adds	r7, #16
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	40023c00 	.word	0x40023c00
 8004610:	40023800 	.word	0x40023800
 8004614:	0800bb7c 	.word	0x0800bb7c
 8004618:	20000000 	.word	0x20000000
 800461c:	20000004 	.word	0x20000004

08004620 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004620:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004624:	b094      	sub	sp, #80	@ 0x50
 8004626:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004628:	2300      	movs	r3, #0
 800462a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800462c:	2300      	movs	r3, #0
 800462e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004630:	2300      	movs	r3, #0
 8004632:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004634:	2300      	movs	r3, #0
 8004636:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004638:	4b79      	ldr	r3, [pc, #484]	@ (8004820 <HAL_RCC_GetSysClockFreq+0x200>)
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f003 030c 	and.w	r3, r3, #12
 8004640:	2b08      	cmp	r3, #8
 8004642:	d00d      	beq.n	8004660 <HAL_RCC_GetSysClockFreq+0x40>
 8004644:	2b08      	cmp	r3, #8
 8004646:	f200 80e1 	bhi.w	800480c <HAL_RCC_GetSysClockFreq+0x1ec>
 800464a:	2b00      	cmp	r3, #0
 800464c:	d002      	beq.n	8004654 <HAL_RCC_GetSysClockFreq+0x34>
 800464e:	2b04      	cmp	r3, #4
 8004650:	d003      	beq.n	800465a <HAL_RCC_GetSysClockFreq+0x3a>
 8004652:	e0db      	b.n	800480c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004654:	4b73      	ldr	r3, [pc, #460]	@ (8004824 <HAL_RCC_GetSysClockFreq+0x204>)
 8004656:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004658:	e0db      	b.n	8004812 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800465a:	4b73      	ldr	r3, [pc, #460]	@ (8004828 <HAL_RCC_GetSysClockFreq+0x208>)
 800465c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800465e:	e0d8      	b.n	8004812 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004660:	4b6f      	ldr	r3, [pc, #444]	@ (8004820 <HAL_RCC_GetSysClockFreq+0x200>)
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004668:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800466a:	4b6d      	ldr	r3, [pc, #436]	@ (8004820 <HAL_RCC_GetSysClockFreq+0x200>)
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d063      	beq.n	800473e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004676:	4b6a      	ldr	r3, [pc, #424]	@ (8004820 <HAL_RCC_GetSysClockFreq+0x200>)
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	099b      	lsrs	r3, r3, #6
 800467c:	2200      	movs	r2, #0
 800467e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004680:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004684:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004688:	633b      	str	r3, [r7, #48]	@ 0x30
 800468a:	2300      	movs	r3, #0
 800468c:	637b      	str	r3, [r7, #52]	@ 0x34
 800468e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004692:	4622      	mov	r2, r4
 8004694:	462b      	mov	r3, r5
 8004696:	f04f 0000 	mov.w	r0, #0
 800469a:	f04f 0100 	mov.w	r1, #0
 800469e:	0159      	lsls	r1, r3, #5
 80046a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046a4:	0150      	lsls	r0, r2, #5
 80046a6:	4602      	mov	r2, r0
 80046a8:	460b      	mov	r3, r1
 80046aa:	4621      	mov	r1, r4
 80046ac:	1a51      	subs	r1, r2, r1
 80046ae:	6139      	str	r1, [r7, #16]
 80046b0:	4629      	mov	r1, r5
 80046b2:	eb63 0301 	sbc.w	r3, r3, r1
 80046b6:	617b      	str	r3, [r7, #20]
 80046b8:	f04f 0200 	mov.w	r2, #0
 80046bc:	f04f 0300 	mov.w	r3, #0
 80046c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046c4:	4659      	mov	r1, fp
 80046c6:	018b      	lsls	r3, r1, #6
 80046c8:	4651      	mov	r1, sl
 80046ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80046ce:	4651      	mov	r1, sl
 80046d0:	018a      	lsls	r2, r1, #6
 80046d2:	4651      	mov	r1, sl
 80046d4:	ebb2 0801 	subs.w	r8, r2, r1
 80046d8:	4659      	mov	r1, fp
 80046da:	eb63 0901 	sbc.w	r9, r3, r1
 80046de:	f04f 0200 	mov.w	r2, #0
 80046e2:	f04f 0300 	mov.w	r3, #0
 80046e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046f2:	4690      	mov	r8, r2
 80046f4:	4699      	mov	r9, r3
 80046f6:	4623      	mov	r3, r4
 80046f8:	eb18 0303 	adds.w	r3, r8, r3
 80046fc:	60bb      	str	r3, [r7, #8]
 80046fe:	462b      	mov	r3, r5
 8004700:	eb49 0303 	adc.w	r3, r9, r3
 8004704:	60fb      	str	r3, [r7, #12]
 8004706:	f04f 0200 	mov.w	r2, #0
 800470a:	f04f 0300 	mov.w	r3, #0
 800470e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004712:	4629      	mov	r1, r5
 8004714:	024b      	lsls	r3, r1, #9
 8004716:	4621      	mov	r1, r4
 8004718:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800471c:	4621      	mov	r1, r4
 800471e:	024a      	lsls	r2, r1, #9
 8004720:	4610      	mov	r0, r2
 8004722:	4619      	mov	r1, r3
 8004724:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004726:	2200      	movs	r2, #0
 8004728:	62bb      	str	r3, [r7, #40]	@ 0x28
 800472a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800472c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004730:	f7fb fd9e 	bl	8000270 <__aeabi_uldivmod>
 8004734:	4602      	mov	r2, r0
 8004736:	460b      	mov	r3, r1
 8004738:	4613      	mov	r3, r2
 800473a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800473c:	e058      	b.n	80047f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800473e:	4b38      	ldr	r3, [pc, #224]	@ (8004820 <HAL_RCC_GetSysClockFreq+0x200>)
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	099b      	lsrs	r3, r3, #6
 8004744:	2200      	movs	r2, #0
 8004746:	4618      	mov	r0, r3
 8004748:	4611      	mov	r1, r2
 800474a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800474e:	623b      	str	r3, [r7, #32]
 8004750:	2300      	movs	r3, #0
 8004752:	627b      	str	r3, [r7, #36]	@ 0x24
 8004754:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004758:	4642      	mov	r2, r8
 800475a:	464b      	mov	r3, r9
 800475c:	f04f 0000 	mov.w	r0, #0
 8004760:	f04f 0100 	mov.w	r1, #0
 8004764:	0159      	lsls	r1, r3, #5
 8004766:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800476a:	0150      	lsls	r0, r2, #5
 800476c:	4602      	mov	r2, r0
 800476e:	460b      	mov	r3, r1
 8004770:	4641      	mov	r1, r8
 8004772:	ebb2 0a01 	subs.w	sl, r2, r1
 8004776:	4649      	mov	r1, r9
 8004778:	eb63 0b01 	sbc.w	fp, r3, r1
 800477c:	f04f 0200 	mov.w	r2, #0
 8004780:	f04f 0300 	mov.w	r3, #0
 8004784:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004788:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800478c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004790:	ebb2 040a 	subs.w	r4, r2, sl
 8004794:	eb63 050b 	sbc.w	r5, r3, fp
 8004798:	f04f 0200 	mov.w	r2, #0
 800479c:	f04f 0300 	mov.w	r3, #0
 80047a0:	00eb      	lsls	r3, r5, #3
 80047a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047a6:	00e2      	lsls	r2, r4, #3
 80047a8:	4614      	mov	r4, r2
 80047aa:	461d      	mov	r5, r3
 80047ac:	4643      	mov	r3, r8
 80047ae:	18e3      	adds	r3, r4, r3
 80047b0:	603b      	str	r3, [r7, #0]
 80047b2:	464b      	mov	r3, r9
 80047b4:	eb45 0303 	adc.w	r3, r5, r3
 80047b8:	607b      	str	r3, [r7, #4]
 80047ba:	f04f 0200 	mov.w	r2, #0
 80047be:	f04f 0300 	mov.w	r3, #0
 80047c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80047c6:	4629      	mov	r1, r5
 80047c8:	028b      	lsls	r3, r1, #10
 80047ca:	4621      	mov	r1, r4
 80047cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047d0:	4621      	mov	r1, r4
 80047d2:	028a      	lsls	r2, r1, #10
 80047d4:	4610      	mov	r0, r2
 80047d6:	4619      	mov	r1, r3
 80047d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047da:	2200      	movs	r2, #0
 80047dc:	61bb      	str	r3, [r7, #24]
 80047de:	61fa      	str	r2, [r7, #28]
 80047e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047e4:	f7fb fd44 	bl	8000270 <__aeabi_uldivmod>
 80047e8:	4602      	mov	r2, r0
 80047ea:	460b      	mov	r3, r1
 80047ec:	4613      	mov	r3, r2
 80047ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80047f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004820 <HAL_RCC_GetSysClockFreq+0x200>)
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	0c1b      	lsrs	r3, r3, #16
 80047f6:	f003 0303 	and.w	r3, r3, #3
 80047fa:	3301      	adds	r3, #1
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004800:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004802:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004804:	fbb2 f3f3 	udiv	r3, r2, r3
 8004808:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800480a:	e002      	b.n	8004812 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800480c:	4b05      	ldr	r3, [pc, #20]	@ (8004824 <HAL_RCC_GetSysClockFreq+0x204>)
 800480e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004810:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004812:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004814:	4618      	mov	r0, r3
 8004816:	3750      	adds	r7, #80	@ 0x50
 8004818:	46bd      	mov	sp, r7
 800481a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800481e:	bf00      	nop
 8004820:	40023800 	.word	0x40023800
 8004824:	00f42400 	.word	0x00f42400
 8004828:	007a1200 	.word	0x007a1200

0800482c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800482c:	b480      	push	{r7}
 800482e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004830:	4b03      	ldr	r3, [pc, #12]	@ (8004840 <HAL_RCC_GetHCLKFreq+0x14>)
 8004832:	681b      	ldr	r3, [r3, #0]
}
 8004834:	4618      	mov	r0, r3
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	20000000 	.word	0x20000000

08004844 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004848:	f7ff fff0 	bl	800482c <HAL_RCC_GetHCLKFreq>
 800484c:	4602      	mov	r2, r0
 800484e:	4b05      	ldr	r3, [pc, #20]	@ (8004864 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	0a9b      	lsrs	r3, r3, #10
 8004854:	f003 0307 	and.w	r3, r3, #7
 8004858:	4903      	ldr	r1, [pc, #12]	@ (8004868 <HAL_RCC_GetPCLK1Freq+0x24>)
 800485a:	5ccb      	ldrb	r3, [r1, r3]
 800485c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004860:	4618      	mov	r0, r3
 8004862:	bd80      	pop	{r7, pc}
 8004864:	40023800 	.word	0x40023800
 8004868:	0800bb8c 	.word	0x0800bb8c

0800486c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004870:	f7ff ffdc 	bl	800482c <HAL_RCC_GetHCLKFreq>
 8004874:	4602      	mov	r2, r0
 8004876:	4b05      	ldr	r3, [pc, #20]	@ (800488c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	0b5b      	lsrs	r3, r3, #13
 800487c:	f003 0307 	and.w	r3, r3, #7
 8004880:	4903      	ldr	r1, [pc, #12]	@ (8004890 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004882:	5ccb      	ldrb	r3, [r1, r3]
 8004884:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004888:	4618      	mov	r0, r3
 800488a:	bd80      	pop	{r7, pc}
 800488c:	40023800 	.word	0x40023800
 8004890:	0800bb8c 	.word	0x0800bb8c

08004894 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d101      	bne.n	80048a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e041      	b.n	800492a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d106      	bne.n	80048c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f7fc f9fe 	bl	8000cbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2202      	movs	r2, #2
 80048c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	3304      	adds	r3, #4
 80048d0:	4619      	mov	r1, r3
 80048d2:	4610      	mov	r0, r2
 80048d4:	f000 fa7e 	bl	8004dd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3708      	adds	r7, #8
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
	...

08004934 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004934:	b480      	push	{r7}
 8004936:	b085      	sub	sp, #20
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004942:	b2db      	uxtb	r3, r3
 8004944:	2b01      	cmp	r3, #1
 8004946:	d001      	beq.n	800494c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e04e      	b.n	80049ea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2202      	movs	r2, #2
 8004950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68da      	ldr	r2, [r3, #12]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f042 0201 	orr.w	r2, r2, #1
 8004962:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a23      	ldr	r2, [pc, #140]	@ (80049f8 <HAL_TIM_Base_Start_IT+0xc4>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d022      	beq.n	80049b4 <HAL_TIM_Base_Start_IT+0x80>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004976:	d01d      	beq.n	80049b4 <HAL_TIM_Base_Start_IT+0x80>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a1f      	ldr	r2, [pc, #124]	@ (80049fc <HAL_TIM_Base_Start_IT+0xc8>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d018      	beq.n	80049b4 <HAL_TIM_Base_Start_IT+0x80>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a1e      	ldr	r2, [pc, #120]	@ (8004a00 <HAL_TIM_Base_Start_IT+0xcc>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d013      	beq.n	80049b4 <HAL_TIM_Base_Start_IT+0x80>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a1c      	ldr	r2, [pc, #112]	@ (8004a04 <HAL_TIM_Base_Start_IT+0xd0>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d00e      	beq.n	80049b4 <HAL_TIM_Base_Start_IT+0x80>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a1b      	ldr	r2, [pc, #108]	@ (8004a08 <HAL_TIM_Base_Start_IT+0xd4>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d009      	beq.n	80049b4 <HAL_TIM_Base_Start_IT+0x80>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a19      	ldr	r2, [pc, #100]	@ (8004a0c <HAL_TIM_Base_Start_IT+0xd8>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d004      	beq.n	80049b4 <HAL_TIM_Base_Start_IT+0x80>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a18      	ldr	r2, [pc, #96]	@ (8004a10 <HAL_TIM_Base_Start_IT+0xdc>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d111      	bne.n	80049d8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f003 0307 	and.w	r3, r3, #7
 80049be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2b06      	cmp	r3, #6
 80049c4:	d010      	beq.n	80049e8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f042 0201 	orr.w	r2, r2, #1
 80049d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049d6:	e007      	b.n	80049e8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f042 0201 	orr.w	r2, r2, #1
 80049e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3714      	adds	r7, #20
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	40010000 	.word	0x40010000
 80049fc:	40000400 	.word	0x40000400
 8004a00:	40000800 	.word	0x40000800
 8004a04:	40000c00 	.word	0x40000c00
 8004a08:	40010400 	.word	0x40010400
 8004a0c:	40014000 	.word	0x40014000
 8004a10:	40001800 	.word	0x40001800

08004a14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	f003 0302 	and.w	r3, r3, #2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d020      	beq.n	8004a78 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f003 0302 	and.w	r3, r3, #2
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d01b      	beq.n	8004a78 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f06f 0202 	mvn.w	r2, #2
 8004a48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	f003 0303 	and.w	r3, r3, #3
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d003      	beq.n	8004a66 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f999 	bl	8004d96 <HAL_TIM_IC_CaptureCallback>
 8004a64:	e005      	b.n	8004a72 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 f98b 	bl	8004d82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 f99c 	bl	8004daa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	f003 0304 	and.w	r3, r3, #4
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d020      	beq.n	8004ac4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f003 0304 	and.w	r3, r3, #4
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d01b      	beq.n	8004ac4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f06f 0204 	mvn.w	r2, #4
 8004a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2202      	movs	r2, #2
 8004a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d003      	beq.n	8004ab2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 f973 	bl	8004d96 <HAL_TIM_IC_CaptureCallback>
 8004ab0:	e005      	b.n	8004abe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 f965 	bl	8004d82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f000 f976 	bl	8004daa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	f003 0308 	and.w	r3, r3, #8
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d020      	beq.n	8004b10 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f003 0308 	and.w	r3, r3, #8
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d01b      	beq.n	8004b10 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f06f 0208 	mvn.w	r2, #8
 8004ae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2204      	movs	r2, #4
 8004ae6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	69db      	ldr	r3, [r3, #28]
 8004aee:	f003 0303 	and.w	r3, r3, #3
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d003      	beq.n	8004afe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 f94d 	bl	8004d96 <HAL_TIM_IC_CaptureCallback>
 8004afc:	e005      	b.n	8004b0a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 f93f 	bl	8004d82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 f950 	bl	8004daa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	f003 0310 	and.w	r3, r3, #16
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d020      	beq.n	8004b5c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f003 0310 	and.w	r3, r3, #16
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d01b      	beq.n	8004b5c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f06f 0210 	mvn.w	r2, #16
 8004b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2208      	movs	r2, #8
 8004b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	69db      	ldr	r3, [r3, #28]
 8004b3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d003      	beq.n	8004b4a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 f927 	bl	8004d96 <HAL_TIM_IC_CaptureCallback>
 8004b48:	e005      	b.n	8004b56 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 f919 	bl	8004d82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 f92a 	bl	8004daa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	f003 0301 	and.w	r3, r3, #1
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00c      	beq.n	8004b80 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f003 0301 	and.w	r3, r3, #1
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d007      	beq.n	8004b80 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f06f 0201 	mvn.w	r2, #1
 8004b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f003 f9bc 	bl	8007ef8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00c      	beq.n	8004ba4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d007      	beq.n	8004ba4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004b9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 fade 	bl	8005160 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00c      	beq.n	8004bc8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d007      	beq.n	8004bc8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 f8fb 	bl	8004dbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	f003 0320 	and.w	r3, r3, #32
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00c      	beq.n	8004bec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f003 0320 	and.w	r3, r3, #32
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d007      	beq.n	8004bec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f06f 0220 	mvn.w	r2, #32
 8004be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 fab0 	bl	800514c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bec:	bf00      	nop
 8004bee:	3710      	adds	r7, #16
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d101      	bne.n	8004c10 <HAL_TIM_ConfigClockSource+0x1c>
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	e0b4      	b.n	8004d7a <HAL_TIM_ConfigClockSource+0x186>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2202      	movs	r2, #2
 8004c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004c2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68ba      	ldr	r2, [r7, #8]
 8004c3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c48:	d03e      	beq.n	8004cc8 <HAL_TIM_ConfigClockSource+0xd4>
 8004c4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c4e:	f200 8087 	bhi.w	8004d60 <HAL_TIM_ConfigClockSource+0x16c>
 8004c52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c56:	f000 8086 	beq.w	8004d66 <HAL_TIM_ConfigClockSource+0x172>
 8004c5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c5e:	d87f      	bhi.n	8004d60 <HAL_TIM_ConfigClockSource+0x16c>
 8004c60:	2b70      	cmp	r3, #112	@ 0x70
 8004c62:	d01a      	beq.n	8004c9a <HAL_TIM_ConfigClockSource+0xa6>
 8004c64:	2b70      	cmp	r3, #112	@ 0x70
 8004c66:	d87b      	bhi.n	8004d60 <HAL_TIM_ConfigClockSource+0x16c>
 8004c68:	2b60      	cmp	r3, #96	@ 0x60
 8004c6a:	d050      	beq.n	8004d0e <HAL_TIM_ConfigClockSource+0x11a>
 8004c6c:	2b60      	cmp	r3, #96	@ 0x60
 8004c6e:	d877      	bhi.n	8004d60 <HAL_TIM_ConfigClockSource+0x16c>
 8004c70:	2b50      	cmp	r3, #80	@ 0x50
 8004c72:	d03c      	beq.n	8004cee <HAL_TIM_ConfigClockSource+0xfa>
 8004c74:	2b50      	cmp	r3, #80	@ 0x50
 8004c76:	d873      	bhi.n	8004d60 <HAL_TIM_ConfigClockSource+0x16c>
 8004c78:	2b40      	cmp	r3, #64	@ 0x40
 8004c7a:	d058      	beq.n	8004d2e <HAL_TIM_ConfigClockSource+0x13a>
 8004c7c:	2b40      	cmp	r3, #64	@ 0x40
 8004c7e:	d86f      	bhi.n	8004d60 <HAL_TIM_ConfigClockSource+0x16c>
 8004c80:	2b30      	cmp	r3, #48	@ 0x30
 8004c82:	d064      	beq.n	8004d4e <HAL_TIM_ConfigClockSource+0x15a>
 8004c84:	2b30      	cmp	r3, #48	@ 0x30
 8004c86:	d86b      	bhi.n	8004d60 <HAL_TIM_ConfigClockSource+0x16c>
 8004c88:	2b20      	cmp	r3, #32
 8004c8a:	d060      	beq.n	8004d4e <HAL_TIM_ConfigClockSource+0x15a>
 8004c8c:	2b20      	cmp	r3, #32
 8004c8e:	d867      	bhi.n	8004d60 <HAL_TIM_ConfigClockSource+0x16c>
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d05c      	beq.n	8004d4e <HAL_TIM_ConfigClockSource+0x15a>
 8004c94:	2b10      	cmp	r3, #16
 8004c96:	d05a      	beq.n	8004d4e <HAL_TIM_ConfigClockSource+0x15a>
 8004c98:	e062      	b.n	8004d60 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004caa:	f000 f9b3 	bl	8005014 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004cbc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68ba      	ldr	r2, [r7, #8]
 8004cc4:	609a      	str	r2, [r3, #8]
      break;
 8004cc6:	e04f      	b.n	8004d68 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cd8:	f000 f99c 	bl	8005014 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	689a      	ldr	r2, [r3, #8]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004cea:	609a      	str	r2, [r3, #8]
      break;
 8004cec:	e03c      	b.n	8004d68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	f000 f910 	bl	8004f20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2150      	movs	r1, #80	@ 0x50
 8004d06:	4618      	mov	r0, r3
 8004d08:	f000 f969 	bl	8004fde <TIM_ITRx_SetConfig>
      break;
 8004d0c:	e02c      	b.n	8004d68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	f000 f92f 	bl	8004f7e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2160      	movs	r1, #96	@ 0x60
 8004d26:	4618      	mov	r0, r3
 8004d28:	f000 f959 	bl	8004fde <TIM_ITRx_SetConfig>
      break;
 8004d2c:	e01c      	b.n	8004d68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	f000 f8f0 	bl	8004f20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2140      	movs	r1, #64	@ 0x40
 8004d46:	4618      	mov	r0, r3
 8004d48:	f000 f949 	bl	8004fde <TIM_ITRx_SetConfig>
      break;
 8004d4c:	e00c      	b.n	8004d68 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4619      	mov	r1, r3
 8004d58:	4610      	mov	r0, r2
 8004d5a:	f000 f940 	bl	8004fde <TIM_ITRx_SetConfig>
      break;
 8004d5e:	e003      	b.n	8004d68 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	73fb      	strb	r3, [r7, #15]
      break;
 8004d64:	e000      	b.n	8004d68 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3710      	adds	r7, #16
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d82:	b480      	push	{r7}
 8004d84:	b083      	sub	sp, #12
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d8a:	bf00      	nop
 8004d8c:	370c      	adds	r7, #12
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr

08004d96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d96:	b480      	push	{r7}
 8004d98:	b083      	sub	sp, #12
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d9e:	bf00      	nop
 8004da0:	370c      	adds	r7, #12
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr

08004daa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004daa:	b480      	push	{r7}
 8004dac:	b083      	sub	sp, #12
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004db2:	bf00      	nop
 8004db4:	370c      	adds	r7, #12
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b083      	sub	sp, #12
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004dc6:	bf00      	nop
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
	...

08004dd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b085      	sub	sp, #20
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a43      	ldr	r2, [pc, #268]	@ (8004ef4 <TIM_Base_SetConfig+0x120>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d013      	beq.n	8004e14 <TIM_Base_SetConfig+0x40>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004df2:	d00f      	beq.n	8004e14 <TIM_Base_SetConfig+0x40>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a40      	ldr	r2, [pc, #256]	@ (8004ef8 <TIM_Base_SetConfig+0x124>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d00b      	beq.n	8004e14 <TIM_Base_SetConfig+0x40>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a3f      	ldr	r2, [pc, #252]	@ (8004efc <TIM_Base_SetConfig+0x128>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d007      	beq.n	8004e14 <TIM_Base_SetConfig+0x40>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a3e      	ldr	r2, [pc, #248]	@ (8004f00 <TIM_Base_SetConfig+0x12c>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d003      	beq.n	8004e14 <TIM_Base_SetConfig+0x40>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a3d      	ldr	r2, [pc, #244]	@ (8004f04 <TIM_Base_SetConfig+0x130>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d108      	bne.n	8004e26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a32      	ldr	r2, [pc, #200]	@ (8004ef4 <TIM_Base_SetConfig+0x120>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d02b      	beq.n	8004e86 <TIM_Base_SetConfig+0xb2>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e34:	d027      	beq.n	8004e86 <TIM_Base_SetConfig+0xb2>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a2f      	ldr	r2, [pc, #188]	@ (8004ef8 <TIM_Base_SetConfig+0x124>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d023      	beq.n	8004e86 <TIM_Base_SetConfig+0xb2>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a2e      	ldr	r2, [pc, #184]	@ (8004efc <TIM_Base_SetConfig+0x128>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d01f      	beq.n	8004e86 <TIM_Base_SetConfig+0xb2>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a2d      	ldr	r2, [pc, #180]	@ (8004f00 <TIM_Base_SetConfig+0x12c>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d01b      	beq.n	8004e86 <TIM_Base_SetConfig+0xb2>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a2c      	ldr	r2, [pc, #176]	@ (8004f04 <TIM_Base_SetConfig+0x130>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d017      	beq.n	8004e86 <TIM_Base_SetConfig+0xb2>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a2b      	ldr	r2, [pc, #172]	@ (8004f08 <TIM_Base_SetConfig+0x134>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d013      	beq.n	8004e86 <TIM_Base_SetConfig+0xb2>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a2a      	ldr	r2, [pc, #168]	@ (8004f0c <TIM_Base_SetConfig+0x138>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d00f      	beq.n	8004e86 <TIM_Base_SetConfig+0xb2>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a29      	ldr	r2, [pc, #164]	@ (8004f10 <TIM_Base_SetConfig+0x13c>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d00b      	beq.n	8004e86 <TIM_Base_SetConfig+0xb2>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a28      	ldr	r2, [pc, #160]	@ (8004f14 <TIM_Base_SetConfig+0x140>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d007      	beq.n	8004e86 <TIM_Base_SetConfig+0xb2>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a27      	ldr	r2, [pc, #156]	@ (8004f18 <TIM_Base_SetConfig+0x144>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d003      	beq.n	8004e86 <TIM_Base_SetConfig+0xb2>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a26      	ldr	r2, [pc, #152]	@ (8004f1c <TIM_Base_SetConfig+0x148>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d108      	bne.n	8004e98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	689a      	ldr	r2, [r3, #8]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a0e      	ldr	r2, [pc, #56]	@ (8004ef4 <TIM_Base_SetConfig+0x120>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d003      	beq.n	8004ec6 <TIM_Base_SetConfig+0xf2>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a10      	ldr	r2, [pc, #64]	@ (8004f04 <TIM_Base_SetConfig+0x130>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d103      	bne.n	8004ece <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	691a      	ldr	r2, [r3, #16]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f043 0204 	orr.w	r2, r3, #4
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2201      	movs	r2, #1
 8004ede:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	601a      	str	r2, [r3, #0]
}
 8004ee6:	bf00      	nop
 8004ee8:	3714      	adds	r7, #20
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	40010000 	.word	0x40010000
 8004ef8:	40000400 	.word	0x40000400
 8004efc:	40000800 	.word	0x40000800
 8004f00:	40000c00 	.word	0x40000c00
 8004f04:	40010400 	.word	0x40010400
 8004f08:	40014000 	.word	0x40014000
 8004f0c:	40014400 	.word	0x40014400
 8004f10:	40014800 	.word	0x40014800
 8004f14:	40001800 	.word	0x40001800
 8004f18:	40001c00 	.word	0x40001c00
 8004f1c:	40002000 	.word	0x40002000

08004f20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b087      	sub	sp, #28
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6a1b      	ldr	r3, [r3, #32]
 8004f30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6a1b      	ldr	r3, [r3, #32]
 8004f36:	f023 0201 	bic.w	r2, r3, #1
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	699b      	ldr	r3, [r3, #24]
 8004f42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	011b      	lsls	r3, r3, #4
 8004f50:	693a      	ldr	r2, [r7, #16]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	f023 030a 	bic.w	r3, r3, #10
 8004f5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f5e:	697a      	ldr	r2, [r7, #20]
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	697a      	ldr	r2, [r7, #20]
 8004f70:	621a      	str	r2, [r3, #32]
}
 8004f72:	bf00      	nop
 8004f74:	371c      	adds	r7, #28
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr

08004f7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f7e:	b480      	push	{r7}
 8004f80:	b087      	sub	sp, #28
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	60f8      	str	r0, [r7, #12]
 8004f86:	60b9      	str	r1, [r7, #8]
 8004f88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
 8004f8e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6a1b      	ldr	r3, [r3, #32]
 8004f94:	f023 0210 	bic.w	r2, r3, #16
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004fa8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	031b      	lsls	r3, r3, #12
 8004fae:	693a      	ldr	r2, [r7, #16]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004fba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	011b      	lsls	r3, r3, #4
 8004fc0:	697a      	ldr	r2, [r7, #20]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	693a      	ldr	r2, [r7, #16]
 8004fca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	697a      	ldr	r2, [r7, #20]
 8004fd0:	621a      	str	r2, [r3, #32]
}
 8004fd2:	bf00      	nop
 8004fd4:	371c      	adds	r7, #28
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr

08004fde <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fde:	b480      	push	{r7}
 8004fe0:	b085      	sub	sp, #20
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
 8004fe6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ff4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ff6:	683a      	ldr	r2, [r7, #0]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	f043 0307 	orr.w	r3, r3, #7
 8005000:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	609a      	str	r2, [r3, #8]
}
 8005008:	bf00      	nop
 800500a:	3714      	adds	r7, #20
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005014:	b480      	push	{r7}
 8005016:	b087      	sub	sp, #28
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	607a      	str	r2, [r7, #4]
 8005020:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800502e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	021a      	lsls	r2, r3, #8
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	431a      	orrs	r2, r3
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	4313      	orrs	r3, r2
 800503c:	697a      	ldr	r2, [r7, #20]
 800503e:	4313      	orrs	r3, r2
 8005040:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	697a      	ldr	r2, [r7, #20]
 8005046:	609a      	str	r2, [r3, #8]
}
 8005048:	bf00      	nop
 800504a:	371c      	adds	r7, #28
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005054:	b480      	push	{r7}
 8005056:	b085      	sub	sp, #20
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005064:	2b01      	cmp	r3, #1
 8005066:	d101      	bne.n	800506c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005068:	2302      	movs	r3, #2
 800506a:	e05a      	b.n	8005122 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2202      	movs	r2, #2
 8005078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005092:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	4313      	orrs	r3, r2
 800509c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a21      	ldr	r2, [pc, #132]	@ (8005130 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d022      	beq.n	80050f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050b8:	d01d      	beq.n	80050f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a1d      	ldr	r2, [pc, #116]	@ (8005134 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d018      	beq.n	80050f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a1b      	ldr	r2, [pc, #108]	@ (8005138 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d013      	beq.n	80050f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a1a      	ldr	r2, [pc, #104]	@ (800513c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d00e      	beq.n	80050f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a18      	ldr	r2, [pc, #96]	@ (8005140 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d009      	beq.n	80050f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a17      	ldr	r2, [pc, #92]	@ (8005144 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d004      	beq.n	80050f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a15      	ldr	r2, [pc, #84]	@ (8005148 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d10c      	bne.n	8005110 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	68ba      	ldr	r2, [r7, #8]
 8005104:	4313      	orrs	r3, r2
 8005106:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68ba      	ldr	r2, [r7, #8]
 800510e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3714      	adds	r7, #20
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	40010000 	.word	0x40010000
 8005134:	40000400 	.word	0x40000400
 8005138:	40000800 	.word	0x40000800
 800513c:	40000c00 	.word	0x40000c00
 8005140:	40010400 	.word	0x40010400
 8005144:	40014000 	.word	0x40014000
 8005148:	40001800 	.word	0x40001800

0800514c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005154:	bf00      	nop
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005168:	bf00      	nop
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d101      	bne.n	8005186 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e042      	b.n	800520c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800518c:	b2db      	uxtb	r3, r3
 800518e:	2b00      	cmp	r3, #0
 8005190:	d106      	bne.n	80051a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f7fb fdfc 	bl	8000d98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2224      	movs	r2, #36	@ 0x24
 80051a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68da      	ldr	r2, [r3, #12]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80051b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f000 fdfb 	bl	8005db4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	691a      	ldr	r2, [r3, #16]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80051cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	695a      	ldr	r2, [r3, #20]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80051dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68da      	ldr	r2, [r3, #12]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80051ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2220      	movs	r2, #32
 80051f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2220      	movs	r2, #32
 8005200:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800520a:	2300      	movs	r3, #0
}
 800520c:	4618      	mov	r0, r3
 800520e:	3708      	adds	r7, #8
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b082      	sub	sp, #8
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d101      	bne.n	8005226 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e024      	b.n	8005270 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2224      	movs	r2, #36	@ 0x24
 800522a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68da      	ldr	r2, [r3, #12]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800523c:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f7fb fe82 	bl	8000f48 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3708      	adds	r7, #8
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b08a      	sub	sp, #40	@ 0x28
 800527c:	af02      	add	r7, sp, #8
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	603b      	str	r3, [r7, #0]
 8005284:	4613      	mov	r3, r2
 8005286:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005288:	2300      	movs	r3, #0
 800528a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005292:	b2db      	uxtb	r3, r3
 8005294:	2b20      	cmp	r3, #32
 8005296:	d175      	bne.n	8005384 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d002      	beq.n	80052a4 <HAL_UART_Transmit+0x2c>
 800529e:	88fb      	ldrh	r3, [r7, #6]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d101      	bne.n	80052a8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e06e      	b.n	8005386 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2200      	movs	r2, #0
 80052ac:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2221      	movs	r2, #33	@ 0x21
 80052b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052b6:	f7fb ff8b 	bl	80011d0 <HAL_GetTick>
 80052ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	88fa      	ldrh	r2, [r7, #6]
 80052c0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	88fa      	ldrh	r2, [r7, #6]
 80052c6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052d0:	d108      	bne.n	80052e4 <HAL_UART_Transmit+0x6c>
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d104      	bne.n	80052e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80052da:	2300      	movs	r3, #0
 80052dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	61bb      	str	r3, [r7, #24]
 80052e2:	e003      	b.n	80052ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052e8:	2300      	movs	r3, #0
 80052ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80052ec:	e02e      	b.n	800534c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	9300      	str	r3, [sp, #0]
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	2200      	movs	r2, #0
 80052f6:	2180      	movs	r1, #128	@ 0x80
 80052f8:	68f8      	ldr	r0, [r7, #12]
 80052fa:	f000 fb2d 	bl	8005958 <UART_WaitOnFlagUntilTimeout>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d005      	beq.n	8005310 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2220      	movs	r2, #32
 8005308:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e03a      	b.n	8005386 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d10b      	bne.n	800532e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	881b      	ldrh	r3, [r3, #0]
 800531a:	461a      	mov	r2, r3
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005324:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	3302      	adds	r3, #2
 800532a:	61bb      	str	r3, [r7, #24]
 800532c:	e007      	b.n	800533e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	781a      	ldrb	r2, [r3, #0]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	3301      	adds	r3, #1
 800533c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005342:	b29b      	uxth	r3, r3
 8005344:	3b01      	subs	r3, #1
 8005346:	b29a      	uxth	r2, r3
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005350:	b29b      	uxth	r3, r3
 8005352:	2b00      	cmp	r3, #0
 8005354:	d1cb      	bne.n	80052ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	9300      	str	r3, [sp, #0]
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	2200      	movs	r2, #0
 800535e:	2140      	movs	r1, #64	@ 0x40
 8005360:	68f8      	ldr	r0, [r7, #12]
 8005362:	f000 faf9 	bl	8005958 <UART_WaitOnFlagUntilTimeout>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d005      	beq.n	8005378 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2220      	movs	r2, #32
 8005370:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e006      	b.n	8005386 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2220      	movs	r2, #32
 800537c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005380:	2300      	movs	r3, #0
 8005382:	e000      	b.n	8005386 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005384:	2302      	movs	r3, #2
  }
}
 8005386:	4618      	mov	r0, r3
 8005388:	3720      	adds	r7, #32
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}

0800538e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800538e:	b580      	push	{r7, lr}
 8005390:	b084      	sub	sp, #16
 8005392:	af00      	add	r7, sp, #0
 8005394:	60f8      	str	r0, [r7, #12]
 8005396:	60b9      	str	r1, [r7, #8]
 8005398:	4613      	mov	r3, r2
 800539a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	2b20      	cmp	r3, #32
 80053a6:	d112      	bne.n	80053ce <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d002      	beq.n	80053b4 <HAL_UART_Receive_IT+0x26>
 80053ae:	88fb      	ldrh	r3, [r7, #6]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d101      	bne.n	80053b8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e00b      	b.n	80053d0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2200      	movs	r2, #0
 80053bc:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80053be:	88fb      	ldrh	r3, [r7, #6]
 80053c0:	461a      	mov	r2, r3
 80053c2:	68b9      	ldr	r1, [r7, #8]
 80053c4:	68f8      	ldr	r0, [r7, #12]
 80053c6:	f000 fb20 	bl	8005a0a <UART_Start_Receive_IT>
 80053ca:	4603      	mov	r3, r0
 80053cc:	e000      	b.n	80053d0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80053ce:	2302      	movs	r3, #2
  }
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3710      	adds	r7, #16
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b0ba      	sub	sp, #232	@ 0xe8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80053fe:	2300      	movs	r3, #0
 8005400:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005404:	2300      	movs	r3, #0
 8005406:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800540a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800540e:	f003 030f 	and.w	r3, r3, #15
 8005412:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005416:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800541a:	2b00      	cmp	r3, #0
 800541c:	d10f      	bne.n	800543e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800541e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005422:	f003 0320 	and.w	r3, r3, #32
 8005426:	2b00      	cmp	r3, #0
 8005428:	d009      	beq.n	800543e <HAL_UART_IRQHandler+0x66>
 800542a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800542e:	f003 0320 	and.w	r3, r3, #32
 8005432:	2b00      	cmp	r3, #0
 8005434:	d003      	beq.n	800543e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 fbfd 	bl	8005c36 <UART_Receive_IT>
      return;
 800543c:	e273      	b.n	8005926 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800543e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005442:	2b00      	cmp	r3, #0
 8005444:	f000 80de 	beq.w	8005604 <HAL_UART_IRQHandler+0x22c>
 8005448:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800544c:	f003 0301 	and.w	r3, r3, #1
 8005450:	2b00      	cmp	r3, #0
 8005452:	d106      	bne.n	8005462 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005454:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005458:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800545c:	2b00      	cmp	r3, #0
 800545e:	f000 80d1 	beq.w	8005604 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005466:	f003 0301 	and.w	r3, r3, #1
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00b      	beq.n	8005486 <HAL_UART_IRQHandler+0xae>
 800546e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005472:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005476:	2b00      	cmp	r3, #0
 8005478:	d005      	beq.n	8005486 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800547e:	f043 0201 	orr.w	r2, r3, #1
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800548a:	f003 0304 	and.w	r3, r3, #4
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00b      	beq.n	80054aa <HAL_UART_IRQHandler+0xd2>
 8005492:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005496:	f003 0301 	and.w	r3, r3, #1
 800549a:	2b00      	cmp	r3, #0
 800549c:	d005      	beq.n	80054aa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054a2:	f043 0202 	orr.w	r2, r3, #2
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054ae:	f003 0302 	and.w	r3, r3, #2
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d00b      	beq.n	80054ce <HAL_UART_IRQHandler+0xf6>
 80054b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054ba:	f003 0301 	and.w	r3, r3, #1
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d005      	beq.n	80054ce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054c6:	f043 0204 	orr.w	r2, r3, #4
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80054ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054d2:	f003 0308 	and.w	r3, r3, #8
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d011      	beq.n	80054fe <HAL_UART_IRQHandler+0x126>
 80054da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054de:	f003 0320 	and.w	r3, r3, #32
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d105      	bne.n	80054f2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80054e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054ea:	f003 0301 	and.w	r3, r3, #1
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d005      	beq.n	80054fe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054f6:	f043 0208 	orr.w	r2, r3, #8
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005502:	2b00      	cmp	r3, #0
 8005504:	f000 820a 	beq.w	800591c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800550c:	f003 0320 	and.w	r3, r3, #32
 8005510:	2b00      	cmp	r3, #0
 8005512:	d008      	beq.n	8005526 <HAL_UART_IRQHandler+0x14e>
 8005514:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005518:	f003 0320 	and.w	r3, r3, #32
 800551c:	2b00      	cmp	r3, #0
 800551e:	d002      	beq.n	8005526 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 fb88 	bl	8005c36 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	695b      	ldr	r3, [r3, #20]
 800552c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005530:	2b40      	cmp	r3, #64	@ 0x40
 8005532:	bf0c      	ite	eq
 8005534:	2301      	moveq	r3, #1
 8005536:	2300      	movne	r3, #0
 8005538:	b2db      	uxtb	r3, r3
 800553a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005542:	f003 0308 	and.w	r3, r3, #8
 8005546:	2b00      	cmp	r3, #0
 8005548:	d103      	bne.n	8005552 <HAL_UART_IRQHandler+0x17a>
 800554a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800554e:	2b00      	cmp	r3, #0
 8005550:	d04f      	beq.n	80055f2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 fa93 	bl	8005a7e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005562:	2b40      	cmp	r3, #64	@ 0x40
 8005564:	d141      	bne.n	80055ea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	3314      	adds	r3, #20
 800556c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005570:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005574:	e853 3f00 	ldrex	r3, [r3]
 8005578:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800557c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005580:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005584:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	3314      	adds	r3, #20
 800558e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005592:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005596:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800559e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80055a2:	e841 2300 	strex	r3, r2, [r1]
 80055a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80055aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d1d9      	bne.n	8005566 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d013      	beq.n	80055e2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055be:	4a8a      	ldr	r2, [pc, #552]	@ (80057e8 <HAL_UART_IRQHandler+0x410>)
 80055c0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055c6:	4618      	mov	r0, r3
 80055c8:	f7fc fc26 	bl	8001e18 <HAL_DMA_Abort_IT>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d016      	beq.n	8005600 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80055dc:	4610      	mov	r0, r2
 80055de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055e0:	e00e      	b.n	8005600 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 f9a2 	bl	800592c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055e8:	e00a      	b.n	8005600 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 f99e 	bl	800592c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055f0:	e006      	b.n	8005600 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 f99a 	bl	800592c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80055fe:	e18d      	b.n	800591c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005600:	bf00      	nop
    return;
 8005602:	e18b      	b.n	800591c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005608:	2b01      	cmp	r3, #1
 800560a:	f040 8167 	bne.w	80058dc <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800560e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005612:	f003 0310 	and.w	r3, r3, #16
 8005616:	2b00      	cmp	r3, #0
 8005618:	f000 8160 	beq.w	80058dc <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800561c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005620:	f003 0310 	and.w	r3, r3, #16
 8005624:	2b00      	cmp	r3, #0
 8005626:	f000 8159 	beq.w	80058dc <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800562a:	2300      	movs	r3, #0
 800562c:	60bb      	str	r3, [r7, #8]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	60bb      	str	r3, [r7, #8]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	60bb      	str	r3, [r7, #8]
 800563e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800564a:	2b40      	cmp	r3, #64	@ 0x40
 800564c:	f040 80ce 	bne.w	80057ec <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800565c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005660:	2b00      	cmp	r3, #0
 8005662:	f000 80a9 	beq.w	80057b8 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800566a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800566e:	429a      	cmp	r2, r3
 8005670:	f080 80a2 	bcs.w	80057b8 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800567a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005680:	69db      	ldr	r3, [r3, #28]
 8005682:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005686:	f000 8088 	beq.w	800579a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	330c      	adds	r3, #12
 8005690:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005694:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005698:	e853 3f00 	ldrex	r3, [r3]
 800569c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80056a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80056a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	330c      	adds	r3, #12
 80056b2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80056b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80056ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056be:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80056c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80056c6:	e841 2300 	strex	r3, r2, [r1]
 80056ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80056ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1d9      	bne.n	800568a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	3314      	adds	r3, #20
 80056dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80056e0:	e853 3f00 	ldrex	r3, [r3]
 80056e4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80056e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80056e8:	f023 0301 	bic.w	r3, r3, #1
 80056ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	3314      	adds	r3, #20
 80056f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80056fa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80056fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005700:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005702:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005706:	e841 2300 	strex	r3, r2, [r1]
 800570a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800570c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800570e:	2b00      	cmp	r3, #0
 8005710:	d1e1      	bne.n	80056d6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	3314      	adds	r3, #20
 8005718:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800571a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800571c:	e853 3f00 	ldrex	r3, [r3]
 8005720:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005722:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005724:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005728:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	3314      	adds	r3, #20
 8005732:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005736:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005738:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800573c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800573e:	e841 2300 	strex	r3, r2, [r1]
 8005742:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005744:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005746:	2b00      	cmp	r3, #0
 8005748:	d1e3      	bne.n	8005712 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2220      	movs	r2, #32
 800574e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	330c      	adds	r3, #12
 800575e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005760:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005762:	e853 3f00 	ldrex	r3, [r3]
 8005766:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005768:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800576a:	f023 0310 	bic.w	r3, r3, #16
 800576e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	330c      	adds	r3, #12
 8005778:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800577c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800577e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005780:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005782:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005784:	e841 2300 	strex	r3, r2, [r1]
 8005788:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800578a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800578c:	2b00      	cmp	r3, #0
 800578e:	d1e3      	bne.n	8005758 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005794:	4618      	mov	r0, r3
 8005796:	f7fc facf 	bl	8001d38 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2202      	movs	r2, #2
 800579e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	4619      	mov	r1, r3
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 f8c5 	bl	8005940 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80057b6:	e0b3      	b.n	8005920 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80057bc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80057c0:	429a      	cmp	r2, r3
 80057c2:	f040 80ad 	bne.w	8005920 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057ca:	69db      	ldr	r3, [r3, #28]
 80057cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057d0:	f040 80a6 	bne.w	8005920 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2202      	movs	r2, #2
 80057d8:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80057de:	4619      	mov	r1, r3
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f000 f8ad 	bl	8005940 <HAL_UARTEx_RxEventCallback>
      return;
 80057e6:	e09b      	b.n	8005920 <HAL_UART_IRQHandler+0x548>
 80057e8:	08005b45 	.word	0x08005b45
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005800:	b29b      	uxth	r3, r3
 8005802:	2b00      	cmp	r3, #0
 8005804:	f000 808e 	beq.w	8005924 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8005808:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800580c:	2b00      	cmp	r3, #0
 800580e:	f000 8089 	beq.w	8005924 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	330c      	adds	r3, #12
 8005818:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800581c:	e853 3f00 	ldrex	r3, [r3]
 8005820:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005822:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005824:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005828:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	330c      	adds	r3, #12
 8005832:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005836:	647a      	str	r2, [r7, #68]	@ 0x44
 8005838:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800583c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800583e:	e841 2300 	strex	r3, r2, [r1]
 8005842:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005844:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005846:	2b00      	cmp	r3, #0
 8005848:	d1e3      	bne.n	8005812 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	3314      	adds	r3, #20
 8005850:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005854:	e853 3f00 	ldrex	r3, [r3]
 8005858:	623b      	str	r3, [r7, #32]
   return(result);
 800585a:	6a3b      	ldr	r3, [r7, #32]
 800585c:	f023 0301 	bic.w	r3, r3, #1
 8005860:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	3314      	adds	r3, #20
 800586a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800586e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005870:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005872:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005874:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005876:	e841 2300 	strex	r3, r2, [r1]
 800587a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800587c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1e3      	bne.n	800584a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2220      	movs	r2, #32
 8005886:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	330c      	adds	r3, #12
 8005896:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	e853 3f00 	ldrex	r3, [r3]
 800589e:	60fb      	str	r3, [r7, #12]
   return(result);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f023 0310 	bic.w	r3, r3, #16
 80058a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	330c      	adds	r3, #12
 80058b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80058b4:	61fa      	str	r2, [r7, #28]
 80058b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b8:	69b9      	ldr	r1, [r7, #24]
 80058ba:	69fa      	ldr	r2, [r7, #28]
 80058bc:	e841 2300 	strex	r3, r2, [r1]
 80058c0:	617b      	str	r3, [r7, #20]
   return(result);
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d1e3      	bne.n	8005890 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2202      	movs	r2, #2
 80058cc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80058ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80058d2:	4619      	mov	r1, r3
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 f833 	bl	8005940 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80058da:	e023      	b.n	8005924 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80058dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d009      	beq.n	80058fc <HAL_UART_IRQHandler+0x524>
 80058e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d003      	beq.n	80058fc <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f000 f936 	bl	8005b66 <UART_Transmit_IT>
    return;
 80058fa:	e014      	b.n	8005926 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80058fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005900:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005904:	2b00      	cmp	r3, #0
 8005906:	d00e      	beq.n	8005926 <HAL_UART_IRQHandler+0x54e>
 8005908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800590c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005910:	2b00      	cmp	r3, #0
 8005912:	d008      	beq.n	8005926 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 f976 	bl	8005c06 <UART_EndTransmit_IT>
    return;
 800591a:	e004      	b.n	8005926 <HAL_UART_IRQHandler+0x54e>
    return;
 800591c:	bf00      	nop
 800591e:	e002      	b.n	8005926 <HAL_UART_IRQHandler+0x54e>
      return;
 8005920:	bf00      	nop
 8005922:	e000      	b.n	8005926 <HAL_UART_IRQHandler+0x54e>
      return;
 8005924:	bf00      	nop
  }
}
 8005926:	37e8      	adds	r7, #232	@ 0xe8
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005934:	bf00      	nop
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	460b      	mov	r3, r1
 800594a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800594c:	bf00      	nop
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b086      	sub	sp, #24
 800595c:	af00      	add	r7, sp, #0
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	603b      	str	r3, [r7, #0]
 8005964:	4613      	mov	r3, r2
 8005966:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005968:	e03b      	b.n	80059e2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800596a:	6a3b      	ldr	r3, [r7, #32]
 800596c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005970:	d037      	beq.n	80059e2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005972:	f7fb fc2d 	bl	80011d0 <HAL_GetTick>
 8005976:	4602      	mov	r2, r0
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	1ad3      	subs	r3, r2, r3
 800597c:	6a3a      	ldr	r2, [r7, #32]
 800597e:	429a      	cmp	r2, r3
 8005980:	d302      	bcc.n	8005988 <UART_WaitOnFlagUntilTimeout+0x30>
 8005982:	6a3b      	ldr	r3, [r7, #32]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d101      	bne.n	800598c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	e03a      	b.n	8005a02 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	f003 0304 	and.w	r3, r3, #4
 8005996:	2b00      	cmp	r3, #0
 8005998:	d023      	beq.n	80059e2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	2b80      	cmp	r3, #128	@ 0x80
 800599e:	d020      	beq.n	80059e2 <UART_WaitOnFlagUntilTimeout+0x8a>
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	2b40      	cmp	r3, #64	@ 0x40
 80059a4:	d01d      	beq.n	80059e2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 0308 	and.w	r3, r3, #8
 80059b0:	2b08      	cmp	r3, #8
 80059b2:	d116      	bne.n	80059e2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80059b4:	2300      	movs	r3, #0
 80059b6:	617b      	str	r3, [r7, #20]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	617b      	str	r3, [r7, #20]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	617b      	str	r3, [r7, #20]
 80059c8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059ca:	68f8      	ldr	r0, [r7, #12]
 80059cc:	f000 f857 	bl	8005a7e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2208      	movs	r2, #8
 80059d4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	e00f      	b.n	8005a02 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	4013      	ands	r3, r2
 80059ec:	68ba      	ldr	r2, [r7, #8]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	bf0c      	ite	eq
 80059f2:	2301      	moveq	r3, #1
 80059f4:	2300      	movne	r3, #0
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	461a      	mov	r2, r3
 80059fa:	79fb      	ldrb	r3, [r7, #7]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d0b4      	beq.n	800596a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3718      	adds	r7, #24
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}

08005a0a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a0a:	b480      	push	{r7}
 8005a0c:	b085      	sub	sp, #20
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	60f8      	str	r0, [r7, #12]
 8005a12:	60b9      	str	r1, [r7, #8]
 8005a14:	4613      	mov	r3, r2
 8005a16:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	68ba      	ldr	r2, [r7, #8]
 8005a1c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	88fa      	ldrh	r2, [r7, #6]
 8005a22:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	88fa      	ldrh	r2, [r7, #6]
 8005a28:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2222      	movs	r2, #34	@ 0x22
 8005a34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d007      	beq.n	8005a50 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68da      	ldr	r2, [r3, #12]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a4e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	695a      	ldr	r2, [r3, #20]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f042 0201 	orr.w	r2, r2, #1
 8005a5e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68da      	ldr	r2, [r3, #12]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f042 0220 	orr.w	r2, r2, #32
 8005a6e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3714      	adds	r7, #20
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr

08005a7e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a7e:	b480      	push	{r7}
 8005a80:	b095      	sub	sp, #84	@ 0x54
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	330c      	adds	r3, #12
 8005a8c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a90:	e853 3f00 	ldrex	r3, [r3]
 8005a94:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	330c      	adds	r3, #12
 8005aa4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005aa6:	643a      	str	r2, [r7, #64]	@ 0x40
 8005aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aaa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005aac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005aae:	e841 2300 	strex	r3, r2, [r1]
 8005ab2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d1e5      	bne.n	8005a86 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	3314      	adds	r3, #20
 8005ac0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac2:	6a3b      	ldr	r3, [r7, #32]
 8005ac4:	e853 3f00 	ldrex	r3, [r3]
 8005ac8:	61fb      	str	r3, [r7, #28]
   return(result);
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	f023 0301 	bic.w	r3, r3, #1
 8005ad0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	3314      	adds	r3, #20
 8005ad8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ada:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005adc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ade:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ae0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ae2:	e841 2300 	strex	r3, r2, [r1]
 8005ae6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d1e5      	bne.n	8005aba <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d119      	bne.n	8005b2a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	330c      	adds	r3, #12
 8005afc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	e853 3f00 	ldrex	r3, [r3]
 8005b04:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	f023 0310 	bic.w	r3, r3, #16
 8005b0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	330c      	adds	r3, #12
 8005b14:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b16:	61ba      	str	r2, [r7, #24]
 8005b18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b1a:	6979      	ldr	r1, [r7, #20]
 8005b1c:	69ba      	ldr	r2, [r7, #24]
 8005b1e:	e841 2300 	strex	r3, r2, [r1]
 8005b22:	613b      	str	r3, [r7, #16]
   return(result);
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d1e5      	bne.n	8005af6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2220      	movs	r2, #32
 8005b2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005b38:	bf00      	nop
 8005b3a:	3754      	adds	r7, #84	@ 0x54
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b50:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b58:	68f8      	ldr	r0, [r7, #12]
 8005b5a:	f7ff fee7 	bl	800592c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b5e:	bf00      	nop
 8005b60:	3710      	adds	r7, #16
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}

08005b66 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005b66:	b480      	push	{r7}
 8005b68:	b085      	sub	sp, #20
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	2b21      	cmp	r3, #33	@ 0x21
 8005b78:	d13e      	bne.n	8005bf8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b82:	d114      	bne.n	8005bae <UART_Transmit_IT+0x48>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d110      	bne.n	8005bae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6a1b      	ldr	r3, [r3, #32]
 8005b90:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	881b      	ldrh	r3, [r3, #0]
 8005b96:	461a      	mov	r2, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ba0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a1b      	ldr	r3, [r3, #32]
 8005ba6:	1c9a      	adds	r2, r3, #2
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	621a      	str	r2, [r3, #32]
 8005bac:	e008      	b.n	8005bc0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a1b      	ldr	r3, [r3, #32]
 8005bb2:	1c59      	adds	r1, r3, #1
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	6211      	str	r1, [r2, #32]
 8005bb8:	781a      	ldrb	r2, [r3, #0]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	3b01      	subs	r3, #1
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	4619      	mov	r1, r3
 8005bce:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d10f      	bne.n	8005bf4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68da      	ldr	r2, [r3, #12]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005be2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68da      	ldr	r2, [r3, #12]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005bf2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	e000      	b.n	8005bfa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005bf8:	2302      	movs	r3, #2
  }
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3714      	adds	r7, #20
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr

08005c06 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c06:	b580      	push	{r7, lr}
 8005c08:	b082      	sub	sp, #8
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68da      	ldr	r2, [r3, #12]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c1c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2220      	movs	r2, #32
 8005c22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f002 f932 	bl	8007e90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3708      	adds	r7, #8
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}

08005c36 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005c36:	b580      	push	{r7, lr}
 8005c38:	b08c      	sub	sp, #48	@ 0x30
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8005c42:	2300      	movs	r3, #0
 8005c44:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	2b22      	cmp	r3, #34	@ 0x22
 8005c50:	f040 80aa 	bne.w	8005da8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c5c:	d115      	bne.n	8005c8a <UART_Receive_IT+0x54>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d111      	bne.n	8005c8a <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c6a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c78:	b29a      	uxth	r2, r3
 8005c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c7c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c82:	1c9a      	adds	r2, r3, #2
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	629a      	str	r2, [r3, #40]	@ 0x28
 8005c88:	e024      	b.n	8005cd4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c98:	d007      	beq.n	8005caa <UART_Receive_IT+0x74>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d10a      	bne.n	8005cb8 <UART_Receive_IT+0x82>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	691b      	ldr	r3, [r3, #16]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d106      	bne.n	8005cb8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	b2da      	uxtb	r2, r3
 8005cb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cb4:	701a      	strb	r2, [r3, #0]
 8005cb6:	e008      	b.n	8005cca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005cc4:	b2da      	uxtb	r2, r3
 8005cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cc8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cce:	1c5a      	adds	r2, r3, #1
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d15d      	bne.n	8005da4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68da      	ldr	r2, [r3, #12]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f022 0220 	bic.w	r2, r2, #32
 8005cf6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68da      	ldr	r2, [r3, #12]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	695a      	ldr	r2, [r3, #20]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f022 0201 	bic.w	r2, r2, #1
 8005d16:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2220      	movs	r2, #32
 8005d1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d135      	bne.n	8005d9a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	330c      	adds	r3, #12
 8005d3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	e853 3f00 	ldrex	r3, [r3]
 8005d42:	613b      	str	r3, [r7, #16]
   return(result);
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	f023 0310 	bic.w	r3, r3, #16
 8005d4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	330c      	adds	r3, #12
 8005d52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d54:	623a      	str	r2, [r7, #32]
 8005d56:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d58:	69f9      	ldr	r1, [r7, #28]
 8005d5a:	6a3a      	ldr	r2, [r7, #32]
 8005d5c:	e841 2300 	strex	r3, r2, [r1]
 8005d60:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d1e5      	bne.n	8005d34 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 0310 	and.w	r3, r3, #16
 8005d72:	2b10      	cmp	r3, #16
 8005d74:	d10a      	bne.n	8005d8c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d76:	2300      	movs	r3, #0
 8005d78:	60fb      	str	r3, [r7, #12]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	60fb      	str	r3, [r7, #12]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	60fb      	str	r3, [r7, #12]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005d90:	4619      	mov	r1, r3
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f7ff fdd4 	bl	8005940 <HAL_UARTEx_RxEventCallback>
 8005d98:	e002      	b.n	8005da0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f002 f98a 	bl	80080b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005da0:	2300      	movs	r3, #0
 8005da2:	e002      	b.n	8005daa <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005da4:	2300      	movs	r3, #0
 8005da6:	e000      	b.n	8005daa <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005da8:	2302      	movs	r3, #2
  }
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3730      	adds	r7, #48	@ 0x30
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
	...

08005db4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005db4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005db8:	b0c0      	sub	sp, #256	@ 0x100
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dd0:	68d9      	ldr	r1, [r3, #12]
 8005dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	ea40 0301 	orr.w	r3, r0, r1
 8005ddc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005de2:	689a      	ldr	r2, [r3, #8]
 8005de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	431a      	orrs	r2, r3
 8005dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005df0:	695b      	ldr	r3, [r3, #20]
 8005df2:	431a      	orrs	r2, r3
 8005df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005df8:	69db      	ldr	r3, [r3, #28]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005e0c:	f021 010c 	bic.w	r1, r1, #12
 8005e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005e1a:	430b      	orrs	r3, r1
 8005e1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	695b      	ldr	r3, [r3, #20]
 8005e26:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e2e:	6999      	ldr	r1, [r3, #24]
 8005e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	ea40 0301 	orr.w	r3, r0, r1
 8005e3a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	4b8f      	ldr	r3, [pc, #572]	@ (8006080 <UART_SetConfig+0x2cc>)
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d005      	beq.n	8005e54 <UART_SetConfig+0xa0>
 8005e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	4b8d      	ldr	r3, [pc, #564]	@ (8006084 <UART_SetConfig+0x2d0>)
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d104      	bne.n	8005e5e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e54:	f7fe fd0a 	bl	800486c <HAL_RCC_GetPCLK2Freq>
 8005e58:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005e5c:	e003      	b.n	8005e66 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e5e:	f7fe fcf1 	bl	8004844 <HAL_RCC_GetPCLK1Freq>
 8005e62:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e6a:	69db      	ldr	r3, [r3, #28]
 8005e6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e70:	f040 810c 	bne.w	800608c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005e7e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005e82:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005e86:	4622      	mov	r2, r4
 8005e88:	462b      	mov	r3, r5
 8005e8a:	1891      	adds	r1, r2, r2
 8005e8c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005e8e:	415b      	adcs	r3, r3
 8005e90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005e92:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005e96:	4621      	mov	r1, r4
 8005e98:	eb12 0801 	adds.w	r8, r2, r1
 8005e9c:	4629      	mov	r1, r5
 8005e9e:	eb43 0901 	adc.w	r9, r3, r1
 8005ea2:	f04f 0200 	mov.w	r2, #0
 8005ea6:	f04f 0300 	mov.w	r3, #0
 8005eaa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005eae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005eb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005eb6:	4690      	mov	r8, r2
 8005eb8:	4699      	mov	r9, r3
 8005eba:	4623      	mov	r3, r4
 8005ebc:	eb18 0303 	adds.w	r3, r8, r3
 8005ec0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005ec4:	462b      	mov	r3, r5
 8005ec6:	eb49 0303 	adc.w	r3, r9, r3
 8005eca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005eda:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005ede:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005ee2:	460b      	mov	r3, r1
 8005ee4:	18db      	adds	r3, r3, r3
 8005ee6:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ee8:	4613      	mov	r3, r2
 8005eea:	eb42 0303 	adc.w	r3, r2, r3
 8005eee:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ef0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005ef4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005ef8:	f7fa f9ba 	bl	8000270 <__aeabi_uldivmod>
 8005efc:	4602      	mov	r2, r0
 8005efe:	460b      	mov	r3, r1
 8005f00:	4b61      	ldr	r3, [pc, #388]	@ (8006088 <UART_SetConfig+0x2d4>)
 8005f02:	fba3 2302 	umull	r2, r3, r3, r2
 8005f06:	095b      	lsrs	r3, r3, #5
 8005f08:	011c      	lsls	r4, r3, #4
 8005f0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005f14:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005f18:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005f1c:	4642      	mov	r2, r8
 8005f1e:	464b      	mov	r3, r9
 8005f20:	1891      	adds	r1, r2, r2
 8005f22:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005f24:	415b      	adcs	r3, r3
 8005f26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005f2c:	4641      	mov	r1, r8
 8005f2e:	eb12 0a01 	adds.w	sl, r2, r1
 8005f32:	4649      	mov	r1, r9
 8005f34:	eb43 0b01 	adc.w	fp, r3, r1
 8005f38:	f04f 0200 	mov.w	r2, #0
 8005f3c:	f04f 0300 	mov.w	r3, #0
 8005f40:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005f44:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005f48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f4c:	4692      	mov	sl, r2
 8005f4e:	469b      	mov	fp, r3
 8005f50:	4643      	mov	r3, r8
 8005f52:	eb1a 0303 	adds.w	r3, sl, r3
 8005f56:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005f5a:	464b      	mov	r3, r9
 8005f5c:	eb4b 0303 	adc.w	r3, fp, r3
 8005f60:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f70:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005f74:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005f78:	460b      	mov	r3, r1
 8005f7a:	18db      	adds	r3, r3, r3
 8005f7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f7e:	4613      	mov	r3, r2
 8005f80:	eb42 0303 	adc.w	r3, r2, r3
 8005f84:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005f8a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005f8e:	f7fa f96f 	bl	8000270 <__aeabi_uldivmod>
 8005f92:	4602      	mov	r2, r0
 8005f94:	460b      	mov	r3, r1
 8005f96:	4611      	mov	r1, r2
 8005f98:	4b3b      	ldr	r3, [pc, #236]	@ (8006088 <UART_SetConfig+0x2d4>)
 8005f9a:	fba3 2301 	umull	r2, r3, r3, r1
 8005f9e:	095b      	lsrs	r3, r3, #5
 8005fa0:	2264      	movs	r2, #100	@ 0x64
 8005fa2:	fb02 f303 	mul.w	r3, r2, r3
 8005fa6:	1acb      	subs	r3, r1, r3
 8005fa8:	00db      	lsls	r3, r3, #3
 8005faa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005fae:	4b36      	ldr	r3, [pc, #216]	@ (8006088 <UART_SetConfig+0x2d4>)
 8005fb0:	fba3 2302 	umull	r2, r3, r3, r2
 8005fb4:	095b      	lsrs	r3, r3, #5
 8005fb6:	005b      	lsls	r3, r3, #1
 8005fb8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005fbc:	441c      	add	r4, r3
 8005fbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005fc8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005fcc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005fd0:	4642      	mov	r2, r8
 8005fd2:	464b      	mov	r3, r9
 8005fd4:	1891      	adds	r1, r2, r2
 8005fd6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005fd8:	415b      	adcs	r3, r3
 8005fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005fdc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005fe0:	4641      	mov	r1, r8
 8005fe2:	1851      	adds	r1, r2, r1
 8005fe4:	6339      	str	r1, [r7, #48]	@ 0x30
 8005fe6:	4649      	mov	r1, r9
 8005fe8:	414b      	adcs	r3, r1
 8005fea:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fec:	f04f 0200 	mov.w	r2, #0
 8005ff0:	f04f 0300 	mov.w	r3, #0
 8005ff4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005ff8:	4659      	mov	r1, fp
 8005ffa:	00cb      	lsls	r3, r1, #3
 8005ffc:	4651      	mov	r1, sl
 8005ffe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006002:	4651      	mov	r1, sl
 8006004:	00ca      	lsls	r2, r1, #3
 8006006:	4610      	mov	r0, r2
 8006008:	4619      	mov	r1, r3
 800600a:	4603      	mov	r3, r0
 800600c:	4642      	mov	r2, r8
 800600e:	189b      	adds	r3, r3, r2
 8006010:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006014:	464b      	mov	r3, r9
 8006016:	460a      	mov	r2, r1
 8006018:	eb42 0303 	adc.w	r3, r2, r3
 800601c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800602c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006030:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006034:	460b      	mov	r3, r1
 8006036:	18db      	adds	r3, r3, r3
 8006038:	62bb      	str	r3, [r7, #40]	@ 0x28
 800603a:	4613      	mov	r3, r2
 800603c:	eb42 0303 	adc.w	r3, r2, r3
 8006040:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006042:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006046:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800604a:	f7fa f911 	bl	8000270 <__aeabi_uldivmod>
 800604e:	4602      	mov	r2, r0
 8006050:	460b      	mov	r3, r1
 8006052:	4b0d      	ldr	r3, [pc, #52]	@ (8006088 <UART_SetConfig+0x2d4>)
 8006054:	fba3 1302 	umull	r1, r3, r3, r2
 8006058:	095b      	lsrs	r3, r3, #5
 800605a:	2164      	movs	r1, #100	@ 0x64
 800605c:	fb01 f303 	mul.w	r3, r1, r3
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	00db      	lsls	r3, r3, #3
 8006064:	3332      	adds	r3, #50	@ 0x32
 8006066:	4a08      	ldr	r2, [pc, #32]	@ (8006088 <UART_SetConfig+0x2d4>)
 8006068:	fba2 2303 	umull	r2, r3, r2, r3
 800606c:	095b      	lsrs	r3, r3, #5
 800606e:	f003 0207 	and.w	r2, r3, #7
 8006072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4422      	add	r2, r4
 800607a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800607c:	e106      	b.n	800628c <UART_SetConfig+0x4d8>
 800607e:	bf00      	nop
 8006080:	40011000 	.word	0x40011000
 8006084:	40011400 	.word	0x40011400
 8006088:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800608c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006090:	2200      	movs	r2, #0
 8006092:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006096:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800609a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800609e:	4642      	mov	r2, r8
 80060a0:	464b      	mov	r3, r9
 80060a2:	1891      	adds	r1, r2, r2
 80060a4:	6239      	str	r1, [r7, #32]
 80060a6:	415b      	adcs	r3, r3
 80060a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80060aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80060ae:	4641      	mov	r1, r8
 80060b0:	1854      	adds	r4, r2, r1
 80060b2:	4649      	mov	r1, r9
 80060b4:	eb43 0501 	adc.w	r5, r3, r1
 80060b8:	f04f 0200 	mov.w	r2, #0
 80060bc:	f04f 0300 	mov.w	r3, #0
 80060c0:	00eb      	lsls	r3, r5, #3
 80060c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80060c6:	00e2      	lsls	r2, r4, #3
 80060c8:	4614      	mov	r4, r2
 80060ca:	461d      	mov	r5, r3
 80060cc:	4643      	mov	r3, r8
 80060ce:	18e3      	adds	r3, r4, r3
 80060d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80060d4:	464b      	mov	r3, r9
 80060d6:	eb45 0303 	adc.w	r3, r5, r3
 80060da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80060de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80060ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80060ee:	f04f 0200 	mov.w	r2, #0
 80060f2:	f04f 0300 	mov.w	r3, #0
 80060f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80060fa:	4629      	mov	r1, r5
 80060fc:	008b      	lsls	r3, r1, #2
 80060fe:	4621      	mov	r1, r4
 8006100:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006104:	4621      	mov	r1, r4
 8006106:	008a      	lsls	r2, r1, #2
 8006108:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800610c:	f7fa f8b0 	bl	8000270 <__aeabi_uldivmod>
 8006110:	4602      	mov	r2, r0
 8006112:	460b      	mov	r3, r1
 8006114:	4b60      	ldr	r3, [pc, #384]	@ (8006298 <UART_SetConfig+0x4e4>)
 8006116:	fba3 2302 	umull	r2, r3, r3, r2
 800611a:	095b      	lsrs	r3, r3, #5
 800611c:	011c      	lsls	r4, r3, #4
 800611e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006122:	2200      	movs	r2, #0
 8006124:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006128:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800612c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006130:	4642      	mov	r2, r8
 8006132:	464b      	mov	r3, r9
 8006134:	1891      	adds	r1, r2, r2
 8006136:	61b9      	str	r1, [r7, #24]
 8006138:	415b      	adcs	r3, r3
 800613a:	61fb      	str	r3, [r7, #28]
 800613c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006140:	4641      	mov	r1, r8
 8006142:	1851      	adds	r1, r2, r1
 8006144:	6139      	str	r1, [r7, #16]
 8006146:	4649      	mov	r1, r9
 8006148:	414b      	adcs	r3, r1
 800614a:	617b      	str	r3, [r7, #20]
 800614c:	f04f 0200 	mov.w	r2, #0
 8006150:	f04f 0300 	mov.w	r3, #0
 8006154:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006158:	4659      	mov	r1, fp
 800615a:	00cb      	lsls	r3, r1, #3
 800615c:	4651      	mov	r1, sl
 800615e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006162:	4651      	mov	r1, sl
 8006164:	00ca      	lsls	r2, r1, #3
 8006166:	4610      	mov	r0, r2
 8006168:	4619      	mov	r1, r3
 800616a:	4603      	mov	r3, r0
 800616c:	4642      	mov	r2, r8
 800616e:	189b      	adds	r3, r3, r2
 8006170:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006174:	464b      	mov	r3, r9
 8006176:	460a      	mov	r2, r1
 8006178:	eb42 0303 	adc.w	r3, r2, r3
 800617c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	67bb      	str	r3, [r7, #120]	@ 0x78
 800618a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800618c:	f04f 0200 	mov.w	r2, #0
 8006190:	f04f 0300 	mov.w	r3, #0
 8006194:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006198:	4649      	mov	r1, r9
 800619a:	008b      	lsls	r3, r1, #2
 800619c:	4641      	mov	r1, r8
 800619e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061a2:	4641      	mov	r1, r8
 80061a4:	008a      	lsls	r2, r1, #2
 80061a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80061aa:	f7fa f861 	bl	8000270 <__aeabi_uldivmod>
 80061ae:	4602      	mov	r2, r0
 80061b0:	460b      	mov	r3, r1
 80061b2:	4611      	mov	r1, r2
 80061b4:	4b38      	ldr	r3, [pc, #224]	@ (8006298 <UART_SetConfig+0x4e4>)
 80061b6:	fba3 2301 	umull	r2, r3, r3, r1
 80061ba:	095b      	lsrs	r3, r3, #5
 80061bc:	2264      	movs	r2, #100	@ 0x64
 80061be:	fb02 f303 	mul.w	r3, r2, r3
 80061c2:	1acb      	subs	r3, r1, r3
 80061c4:	011b      	lsls	r3, r3, #4
 80061c6:	3332      	adds	r3, #50	@ 0x32
 80061c8:	4a33      	ldr	r2, [pc, #204]	@ (8006298 <UART_SetConfig+0x4e4>)
 80061ca:	fba2 2303 	umull	r2, r3, r2, r3
 80061ce:	095b      	lsrs	r3, r3, #5
 80061d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80061d4:	441c      	add	r4, r3
 80061d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061da:	2200      	movs	r2, #0
 80061dc:	673b      	str	r3, [r7, #112]	@ 0x70
 80061de:	677a      	str	r2, [r7, #116]	@ 0x74
 80061e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80061e4:	4642      	mov	r2, r8
 80061e6:	464b      	mov	r3, r9
 80061e8:	1891      	adds	r1, r2, r2
 80061ea:	60b9      	str	r1, [r7, #8]
 80061ec:	415b      	adcs	r3, r3
 80061ee:	60fb      	str	r3, [r7, #12]
 80061f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80061f4:	4641      	mov	r1, r8
 80061f6:	1851      	adds	r1, r2, r1
 80061f8:	6039      	str	r1, [r7, #0]
 80061fa:	4649      	mov	r1, r9
 80061fc:	414b      	adcs	r3, r1
 80061fe:	607b      	str	r3, [r7, #4]
 8006200:	f04f 0200 	mov.w	r2, #0
 8006204:	f04f 0300 	mov.w	r3, #0
 8006208:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800620c:	4659      	mov	r1, fp
 800620e:	00cb      	lsls	r3, r1, #3
 8006210:	4651      	mov	r1, sl
 8006212:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006216:	4651      	mov	r1, sl
 8006218:	00ca      	lsls	r2, r1, #3
 800621a:	4610      	mov	r0, r2
 800621c:	4619      	mov	r1, r3
 800621e:	4603      	mov	r3, r0
 8006220:	4642      	mov	r2, r8
 8006222:	189b      	adds	r3, r3, r2
 8006224:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006226:	464b      	mov	r3, r9
 8006228:	460a      	mov	r2, r1
 800622a:	eb42 0303 	adc.w	r3, r2, r3
 800622e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	663b      	str	r3, [r7, #96]	@ 0x60
 800623a:	667a      	str	r2, [r7, #100]	@ 0x64
 800623c:	f04f 0200 	mov.w	r2, #0
 8006240:	f04f 0300 	mov.w	r3, #0
 8006244:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006248:	4649      	mov	r1, r9
 800624a:	008b      	lsls	r3, r1, #2
 800624c:	4641      	mov	r1, r8
 800624e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006252:	4641      	mov	r1, r8
 8006254:	008a      	lsls	r2, r1, #2
 8006256:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800625a:	f7fa f809 	bl	8000270 <__aeabi_uldivmod>
 800625e:	4602      	mov	r2, r0
 8006260:	460b      	mov	r3, r1
 8006262:	4b0d      	ldr	r3, [pc, #52]	@ (8006298 <UART_SetConfig+0x4e4>)
 8006264:	fba3 1302 	umull	r1, r3, r3, r2
 8006268:	095b      	lsrs	r3, r3, #5
 800626a:	2164      	movs	r1, #100	@ 0x64
 800626c:	fb01 f303 	mul.w	r3, r1, r3
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	011b      	lsls	r3, r3, #4
 8006274:	3332      	adds	r3, #50	@ 0x32
 8006276:	4a08      	ldr	r2, [pc, #32]	@ (8006298 <UART_SetConfig+0x4e4>)
 8006278:	fba2 2303 	umull	r2, r3, r2, r3
 800627c:	095b      	lsrs	r3, r3, #5
 800627e:	f003 020f 	and.w	r2, r3, #15
 8006282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4422      	add	r2, r4
 800628a:	609a      	str	r2, [r3, #8]
}
 800628c:	bf00      	nop
 800628e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006292:	46bd      	mov	sp, r7
 8006294:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006298:	51eb851f 	.word	0x51eb851f

0800629c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800629c:	b084      	sub	sp, #16
 800629e:	b580      	push	{r7, lr}
 80062a0:	b084      	sub	sp, #16
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
 80062a6:	f107 001c 	add.w	r0, r7, #28
 80062aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80062ae:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d123      	bne.n	80062fe <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062ba:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80062ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80062de:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d105      	bne.n	80062f2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	68db      	ldr	r3, [r3, #12]
 80062ea:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f001 fae8 	bl	80078c8 <USB_CoreReset>
 80062f8:	4603      	mov	r3, r0
 80062fa:	73fb      	strb	r3, [r7, #15]
 80062fc:	e01b      	b.n	8006336 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f001 fadc 	bl	80078c8 <USB_CoreReset>
 8006310:	4603      	mov	r3, r0
 8006312:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006314:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006318:	2b00      	cmp	r3, #0
 800631a:	d106      	bne.n	800632a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006320:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	639a      	str	r2, [r3, #56]	@ 0x38
 8006328:	e005      	b.n	8006336 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800632e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006336:	7fbb      	ldrb	r3, [r7, #30]
 8006338:	2b01      	cmp	r3, #1
 800633a:	d10b      	bne.n	8006354 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	f043 0206 	orr.w	r2, r3, #6
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	f043 0220 	orr.w	r2, r3, #32
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006354:	7bfb      	ldrb	r3, [r7, #15]
}
 8006356:	4618      	mov	r0, r3
 8006358:	3710      	adds	r7, #16
 800635a:	46bd      	mov	sp, r7
 800635c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006360:	b004      	add	sp, #16
 8006362:	4770      	bx	lr

08006364 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006364:	b480      	push	{r7}
 8006366:	b087      	sub	sp, #28
 8006368:	af00      	add	r7, sp, #0
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	60b9      	str	r1, [r7, #8]
 800636e:	4613      	mov	r3, r2
 8006370:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006372:	79fb      	ldrb	r3, [r7, #7]
 8006374:	2b02      	cmp	r3, #2
 8006376:	d165      	bne.n	8006444 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	4a41      	ldr	r2, [pc, #260]	@ (8006480 <USB_SetTurnaroundTime+0x11c>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d906      	bls.n	800638e <USB_SetTurnaroundTime+0x2a>
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	4a40      	ldr	r2, [pc, #256]	@ (8006484 <USB_SetTurnaroundTime+0x120>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d202      	bcs.n	800638e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006388:	230f      	movs	r3, #15
 800638a:	617b      	str	r3, [r7, #20]
 800638c:	e062      	b.n	8006454 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	4a3c      	ldr	r2, [pc, #240]	@ (8006484 <USB_SetTurnaroundTime+0x120>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d306      	bcc.n	80063a4 <USB_SetTurnaroundTime+0x40>
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	4a3b      	ldr	r2, [pc, #236]	@ (8006488 <USB_SetTurnaroundTime+0x124>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d202      	bcs.n	80063a4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800639e:	230e      	movs	r3, #14
 80063a0:	617b      	str	r3, [r7, #20]
 80063a2:	e057      	b.n	8006454 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	4a38      	ldr	r2, [pc, #224]	@ (8006488 <USB_SetTurnaroundTime+0x124>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d306      	bcc.n	80063ba <USB_SetTurnaroundTime+0x56>
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	4a37      	ldr	r2, [pc, #220]	@ (800648c <USB_SetTurnaroundTime+0x128>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d202      	bcs.n	80063ba <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80063b4:	230d      	movs	r3, #13
 80063b6:	617b      	str	r3, [r7, #20]
 80063b8:	e04c      	b.n	8006454 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	4a33      	ldr	r2, [pc, #204]	@ (800648c <USB_SetTurnaroundTime+0x128>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d306      	bcc.n	80063d0 <USB_SetTurnaroundTime+0x6c>
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	4a32      	ldr	r2, [pc, #200]	@ (8006490 <USB_SetTurnaroundTime+0x12c>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d802      	bhi.n	80063d0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80063ca:	230c      	movs	r3, #12
 80063cc:	617b      	str	r3, [r7, #20]
 80063ce:	e041      	b.n	8006454 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	4a2f      	ldr	r2, [pc, #188]	@ (8006490 <USB_SetTurnaroundTime+0x12c>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d906      	bls.n	80063e6 <USB_SetTurnaroundTime+0x82>
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	4a2e      	ldr	r2, [pc, #184]	@ (8006494 <USB_SetTurnaroundTime+0x130>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d802      	bhi.n	80063e6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80063e0:	230b      	movs	r3, #11
 80063e2:	617b      	str	r3, [r7, #20]
 80063e4:	e036      	b.n	8006454 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	4a2a      	ldr	r2, [pc, #168]	@ (8006494 <USB_SetTurnaroundTime+0x130>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d906      	bls.n	80063fc <USB_SetTurnaroundTime+0x98>
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	4a29      	ldr	r2, [pc, #164]	@ (8006498 <USB_SetTurnaroundTime+0x134>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d802      	bhi.n	80063fc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80063f6:	230a      	movs	r3, #10
 80063f8:	617b      	str	r3, [r7, #20]
 80063fa:	e02b      	b.n	8006454 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	4a26      	ldr	r2, [pc, #152]	@ (8006498 <USB_SetTurnaroundTime+0x134>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d906      	bls.n	8006412 <USB_SetTurnaroundTime+0xae>
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	4a25      	ldr	r2, [pc, #148]	@ (800649c <USB_SetTurnaroundTime+0x138>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d202      	bcs.n	8006412 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800640c:	2309      	movs	r3, #9
 800640e:	617b      	str	r3, [r7, #20]
 8006410:	e020      	b.n	8006454 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	4a21      	ldr	r2, [pc, #132]	@ (800649c <USB_SetTurnaroundTime+0x138>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d306      	bcc.n	8006428 <USB_SetTurnaroundTime+0xc4>
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	4a20      	ldr	r2, [pc, #128]	@ (80064a0 <USB_SetTurnaroundTime+0x13c>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d802      	bhi.n	8006428 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006422:	2308      	movs	r3, #8
 8006424:	617b      	str	r3, [r7, #20]
 8006426:	e015      	b.n	8006454 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	4a1d      	ldr	r2, [pc, #116]	@ (80064a0 <USB_SetTurnaroundTime+0x13c>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d906      	bls.n	800643e <USB_SetTurnaroundTime+0xda>
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	4a1c      	ldr	r2, [pc, #112]	@ (80064a4 <USB_SetTurnaroundTime+0x140>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d202      	bcs.n	800643e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006438:	2307      	movs	r3, #7
 800643a:	617b      	str	r3, [r7, #20]
 800643c:	e00a      	b.n	8006454 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800643e:	2306      	movs	r3, #6
 8006440:	617b      	str	r3, [r7, #20]
 8006442:	e007      	b.n	8006454 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006444:	79fb      	ldrb	r3, [r7, #7]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d102      	bne.n	8006450 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800644a:	2309      	movs	r3, #9
 800644c:	617b      	str	r3, [r7, #20]
 800644e:	e001      	b.n	8006454 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006450:	2309      	movs	r3, #9
 8006452:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	68da      	ldr	r2, [r3, #12]
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	029b      	lsls	r3, r3, #10
 8006468:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800646c:	431a      	orrs	r2, r3
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006472:	2300      	movs	r3, #0
}
 8006474:	4618      	mov	r0, r3
 8006476:	371c      	adds	r7, #28
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr
 8006480:	00d8acbf 	.word	0x00d8acbf
 8006484:	00e4e1c0 	.word	0x00e4e1c0
 8006488:	00f42400 	.word	0x00f42400
 800648c:	01067380 	.word	0x01067380
 8006490:	011a499f 	.word	0x011a499f
 8006494:	01312cff 	.word	0x01312cff
 8006498:	014ca43f 	.word	0x014ca43f
 800649c:	016e3600 	.word	0x016e3600
 80064a0:	01a6ab1f 	.word	0x01a6ab1f
 80064a4:	01e84800 	.word	0x01e84800

080064a8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	f043 0201 	orr.w	r2, r3, #1
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80064bc:	2300      	movs	r3, #0
}
 80064be:	4618      	mov	r0, r3
 80064c0:	370c      	adds	r7, #12
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr

080064ca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80064ca:	b480      	push	{r7}
 80064cc:	b083      	sub	sp, #12
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	f023 0201 	bic.w	r2, r3, #1
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80064de:	2300      	movs	r3, #0
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	370c      	adds	r7, #12
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	460b      	mov	r3, r1
 80064f6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80064f8:	2300      	movs	r3, #0
 80064fa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006508:	78fb      	ldrb	r3, [r7, #3]
 800650a:	2b01      	cmp	r3, #1
 800650c:	d115      	bne.n	800653a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	68db      	ldr	r3, [r3, #12]
 8006512:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800651a:	200a      	movs	r0, #10
 800651c:	f7fa fe64 	bl	80011e8 <HAL_Delay>
      ms += 10U;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	330a      	adds	r3, #10
 8006524:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f001 f93f 	bl	80077aa <USB_GetMode>
 800652c:	4603      	mov	r3, r0
 800652e:	2b01      	cmp	r3, #1
 8006530:	d01e      	beq.n	8006570 <USB_SetCurrentMode+0x84>
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2bc7      	cmp	r3, #199	@ 0xc7
 8006536:	d9f0      	bls.n	800651a <USB_SetCurrentMode+0x2e>
 8006538:	e01a      	b.n	8006570 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800653a:	78fb      	ldrb	r3, [r7, #3]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d115      	bne.n	800656c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800654c:	200a      	movs	r0, #10
 800654e:	f7fa fe4b 	bl	80011e8 <HAL_Delay>
      ms += 10U;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	330a      	adds	r3, #10
 8006556:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f001 f926 	bl	80077aa <USB_GetMode>
 800655e:	4603      	mov	r3, r0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d005      	beq.n	8006570 <USB_SetCurrentMode+0x84>
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2bc7      	cmp	r3, #199	@ 0xc7
 8006568:	d9f0      	bls.n	800654c <USB_SetCurrentMode+0x60>
 800656a:	e001      	b.n	8006570 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	e005      	b.n	800657c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2bc8      	cmp	r3, #200	@ 0xc8
 8006574:	d101      	bne.n	800657a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e000      	b.n	800657c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800657a:	2300      	movs	r3, #0
}
 800657c:	4618      	mov	r0, r3
 800657e:	3710      	adds	r7, #16
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006584:	b084      	sub	sp, #16
 8006586:	b580      	push	{r7, lr}
 8006588:	b086      	sub	sp, #24
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
 800658e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006592:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006596:	2300      	movs	r3, #0
 8006598:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800659e:	2300      	movs	r3, #0
 80065a0:	613b      	str	r3, [r7, #16]
 80065a2:	e009      	b.n	80065b8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	3340      	adds	r3, #64	@ 0x40
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	4413      	add	r3, r2
 80065ae:	2200      	movs	r2, #0
 80065b0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	3301      	adds	r3, #1
 80065b6:	613b      	str	r3, [r7, #16]
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	2b0e      	cmp	r3, #14
 80065bc:	d9f2      	bls.n	80065a4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80065be:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d11c      	bne.n	8006600 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80065d4:	f043 0302 	orr.w	r3, r3, #2
 80065d8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065de:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065ea:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065f6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	639a      	str	r2, [r3, #56]	@ 0x38
 80065fe:	e00b      	b.n	8006618 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006604:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006610:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800661e:	461a      	mov	r2, r3
 8006620:	2300      	movs	r3, #0
 8006622:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006624:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006628:	2b01      	cmp	r3, #1
 800662a:	d10d      	bne.n	8006648 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800662c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006630:	2b00      	cmp	r3, #0
 8006632:	d104      	bne.n	800663e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006634:	2100      	movs	r1, #0
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 f968 	bl	800690c <USB_SetDevSpeed>
 800663c:	e008      	b.n	8006650 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800663e:	2101      	movs	r1, #1
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 f963 	bl	800690c <USB_SetDevSpeed>
 8006646:	e003      	b.n	8006650 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006648:	2103      	movs	r1, #3
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 f95e 	bl	800690c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006650:	2110      	movs	r1, #16
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 f8fa 	bl	800684c <USB_FlushTxFifo>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d001      	beq.n	8006662 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 f924 	bl	80068b0 <USB_FlushRxFifo>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d001      	beq.n	8006672 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006678:	461a      	mov	r2, r3
 800667a:	2300      	movs	r3, #0
 800667c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006684:	461a      	mov	r2, r3
 8006686:	2300      	movs	r3, #0
 8006688:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006690:	461a      	mov	r2, r3
 8006692:	2300      	movs	r3, #0
 8006694:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006696:	2300      	movs	r3, #0
 8006698:	613b      	str	r3, [r7, #16]
 800669a:	e043      	b.n	8006724 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	015a      	lsls	r2, r3, #5
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	4413      	add	r3, r2
 80066a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80066ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066b2:	d118      	bne.n	80066e6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d10a      	bne.n	80066d0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	015a      	lsls	r2, r3, #5
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	4413      	add	r3, r2
 80066c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066c6:	461a      	mov	r2, r3
 80066c8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80066cc:	6013      	str	r3, [r2, #0]
 80066ce:	e013      	b.n	80066f8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	015a      	lsls	r2, r3, #5
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	4413      	add	r3, r2
 80066d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066dc:	461a      	mov	r2, r3
 80066de:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80066e2:	6013      	str	r3, [r2, #0]
 80066e4:	e008      	b.n	80066f8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	015a      	lsls	r2, r3, #5
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	4413      	add	r3, r2
 80066ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066f2:	461a      	mov	r2, r3
 80066f4:	2300      	movs	r3, #0
 80066f6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	015a      	lsls	r2, r3, #5
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	4413      	add	r3, r2
 8006700:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006704:	461a      	mov	r2, r3
 8006706:	2300      	movs	r3, #0
 8006708:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	015a      	lsls	r2, r3, #5
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	4413      	add	r3, r2
 8006712:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006716:	461a      	mov	r2, r3
 8006718:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800671c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	3301      	adds	r3, #1
 8006722:	613b      	str	r3, [r7, #16]
 8006724:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006728:	461a      	mov	r2, r3
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	4293      	cmp	r3, r2
 800672e:	d3b5      	bcc.n	800669c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006730:	2300      	movs	r3, #0
 8006732:	613b      	str	r3, [r7, #16]
 8006734:	e043      	b.n	80067be <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	015a      	lsls	r2, r3, #5
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	4413      	add	r3, r2
 800673e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006748:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800674c:	d118      	bne.n	8006780 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d10a      	bne.n	800676a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	015a      	lsls	r2, r3, #5
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	4413      	add	r3, r2
 800675c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006760:	461a      	mov	r2, r3
 8006762:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006766:	6013      	str	r3, [r2, #0]
 8006768:	e013      	b.n	8006792 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	015a      	lsls	r2, r3, #5
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	4413      	add	r3, r2
 8006772:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006776:	461a      	mov	r2, r3
 8006778:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800677c:	6013      	str	r3, [r2, #0]
 800677e:	e008      	b.n	8006792 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	015a      	lsls	r2, r3, #5
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	4413      	add	r3, r2
 8006788:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800678c:	461a      	mov	r2, r3
 800678e:	2300      	movs	r3, #0
 8006790:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	015a      	lsls	r2, r3, #5
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	4413      	add	r3, r2
 800679a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800679e:	461a      	mov	r2, r3
 80067a0:	2300      	movs	r3, #0
 80067a2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	015a      	lsls	r2, r3, #5
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	4413      	add	r3, r2
 80067ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067b0:	461a      	mov	r2, r3
 80067b2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80067b6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	3301      	adds	r3, #1
 80067bc:	613b      	str	r3, [r7, #16]
 80067be:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80067c2:	461a      	mov	r2, r3
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d3b5      	bcc.n	8006736 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80067d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067dc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80067ea:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80067ec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d105      	bne.n	8006800 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	699b      	ldr	r3, [r3, #24]
 80067f8:	f043 0210 	orr.w	r2, r3, #16
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	699a      	ldr	r2, [r3, #24]
 8006804:	4b10      	ldr	r3, [pc, #64]	@ (8006848 <USB_DevInit+0x2c4>)
 8006806:	4313      	orrs	r3, r2
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800680c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006810:	2b00      	cmp	r3, #0
 8006812:	d005      	beq.n	8006820 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	699b      	ldr	r3, [r3, #24]
 8006818:	f043 0208 	orr.w	r2, r3, #8
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006820:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006824:	2b01      	cmp	r3, #1
 8006826:	d107      	bne.n	8006838 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	699b      	ldr	r3, [r3, #24]
 800682c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006830:	f043 0304 	orr.w	r3, r3, #4
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006838:	7dfb      	ldrb	r3, [r7, #23]
}
 800683a:	4618      	mov	r0, r3
 800683c:	3718      	adds	r7, #24
 800683e:	46bd      	mov	sp, r7
 8006840:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006844:	b004      	add	sp, #16
 8006846:	4770      	bx	lr
 8006848:	803c3800 	.word	0x803c3800

0800684c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800684c:	b480      	push	{r7}
 800684e:	b085      	sub	sp, #20
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006856:	2300      	movs	r3, #0
 8006858:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	3301      	adds	r3, #1
 800685e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006866:	d901      	bls.n	800686c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006868:	2303      	movs	r3, #3
 800686a:	e01b      	b.n	80068a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	2b00      	cmp	r3, #0
 8006872:	daf2      	bge.n	800685a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006874:	2300      	movs	r3, #0
 8006876:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	019b      	lsls	r3, r3, #6
 800687c:	f043 0220 	orr.w	r2, r3, #32
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	3301      	adds	r3, #1
 8006888:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006890:	d901      	bls.n	8006896 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006892:	2303      	movs	r3, #3
 8006894:	e006      	b.n	80068a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	f003 0320 	and.w	r3, r3, #32
 800689e:	2b20      	cmp	r3, #32
 80068a0:	d0f0      	beq.n	8006884 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80068a2:	2300      	movs	r3, #0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3714      	adds	r7, #20
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b085      	sub	sp, #20
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80068b8:	2300      	movs	r3, #0
 80068ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	3301      	adds	r3, #1
 80068c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80068c8:	d901      	bls.n	80068ce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80068ca:	2303      	movs	r3, #3
 80068cc:	e018      	b.n	8006900 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	daf2      	bge.n	80068bc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80068d6:	2300      	movs	r3, #0
 80068d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2210      	movs	r2, #16
 80068de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	3301      	adds	r3, #1
 80068e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80068ec:	d901      	bls.n	80068f2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80068ee:	2303      	movs	r3, #3
 80068f0:	e006      	b.n	8006900 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	f003 0310 	and.w	r3, r3, #16
 80068fa:	2b10      	cmp	r3, #16
 80068fc:	d0f0      	beq.n	80068e0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80068fe:	2300      	movs	r3, #0
}
 8006900:	4618      	mov	r0, r3
 8006902:	3714      	adds	r7, #20
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800690c:	b480      	push	{r7}
 800690e:	b085      	sub	sp, #20
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	460b      	mov	r3, r1
 8006916:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	78fb      	ldrb	r3, [r7, #3]
 8006926:	68f9      	ldr	r1, [r7, #12]
 8006928:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800692c:	4313      	orrs	r3, r2
 800692e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	3714      	adds	r7, #20
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr

0800693e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800693e:	b480      	push	{r7}
 8006940:	b087      	sub	sp, #28
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	f003 0306 	and.w	r3, r3, #6
 8006956:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d102      	bne.n	8006964 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800695e:	2300      	movs	r3, #0
 8006960:	75fb      	strb	r3, [r7, #23]
 8006962:	e00a      	b.n	800697a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2b02      	cmp	r3, #2
 8006968:	d002      	beq.n	8006970 <USB_GetDevSpeed+0x32>
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2b06      	cmp	r3, #6
 800696e:	d102      	bne.n	8006976 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006970:	2302      	movs	r3, #2
 8006972:	75fb      	strb	r3, [r7, #23]
 8006974:	e001      	b.n	800697a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006976:	230f      	movs	r3, #15
 8006978:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800697a:	7dfb      	ldrb	r3, [r7, #23]
}
 800697c:	4618      	mov	r0, r3
 800697e:	371c      	adds	r7, #28
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006988:	b480      	push	{r7}
 800698a:	b085      	sub	sp, #20
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	785b      	ldrb	r3, [r3, #1]
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d13a      	bne.n	8006a1a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069aa:	69da      	ldr	r2, [r3, #28]
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	f003 030f 	and.w	r3, r3, #15
 80069b4:	2101      	movs	r1, #1
 80069b6:	fa01 f303 	lsl.w	r3, r1, r3
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	68f9      	ldr	r1, [r7, #12]
 80069be:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80069c2:	4313      	orrs	r3, r2
 80069c4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	015a      	lsls	r2, r3, #5
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	4413      	add	r3, r2
 80069ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d155      	bne.n	8006a88 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	015a      	lsls	r2, r3, #5
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	4413      	add	r3, r2
 80069e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	791b      	ldrb	r3, [r3, #4]
 80069f6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80069f8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	059b      	lsls	r3, r3, #22
 80069fe:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006a00:	4313      	orrs	r3, r2
 8006a02:	68ba      	ldr	r2, [r7, #8]
 8006a04:	0151      	lsls	r1, r2, #5
 8006a06:	68fa      	ldr	r2, [r7, #12]
 8006a08:	440a      	add	r2, r1
 8006a0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a16:	6013      	str	r3, [r2, #0]
 8006a18:	e036      	b.n	8006a88 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a20:	69da      	ldr	r2, [r3, #28]
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	f003 030f 	and.w	r3, r3, #15
 8006a2a:	2101      	movs	r1, #1
 8006a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8006a30:	041b      	lsls	r3, r3, #16
 8006a32:	68f9      	ldr	r1, [r7, #12]
 8006a34:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	015a      	lsls	r2, r3, #5
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	4413      	add	r3, r2
 8006a44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d11a      	bne.n	8006a88 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	015a      	lsls	r2, r3, #5
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	4413      	add	r3, r2
 8006a5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	791b      	ldrb	r3, [r3, #4]
 8006a6c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006a6e:	430b      	orrs	r3, r1
 8006a70:	4313      	orrs	r3, r2
 8006a72:	68ba      	ldr	r2, [r7, #8]
 8006a74:	0151      	lsls	r1, r2, #5
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	440a      	add	r2, r1
 8006a7a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a86:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006a88:	2300      	movs	r3, #0
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3714      	adds	r7, #20
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr
	...

08006a98 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b085      	sub	sp, #20
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	785b      	ldrb	r3, [r3, #1]
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d161      	bne.n	8006b78 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	015a      	lsls	r2, r3, #5
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	4413      	add	r3, r2
 8006abc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ac6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006aca:	d11f      	bne.n	8006b0c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	015a      	lsls	r2, r3, #5
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	4413      	add	r3, r2
 8006ad4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	68ba      	ldr	r2, [r7, #8]
 8006adc:	0151      	lsls	r1, r2, #5
 8006ade:	68fa      	ldr	r2, [r7, #12]
 8006ae0:	440a      	add	r2, r1
 8006ae2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ae6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006aea:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	015a      	lsls	r2, r3, #5
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	4413      	add	r3, r2
 8006af4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	68ba      	ldr	r2, [r7, #8]
 8006afc:	0151      	lsls	r1, r2, #5
 8006afe:	68fa      	ldr	r2, [r7, #12]
 8006b00:	440a      	add	r2, r1
 8006b02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b06:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b0a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b12:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	f003 030f 	and.w	r3, r3, #15
 8006b1c:	2101      	movs	r1, #1
 8006b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	43db      	mvns	r3, r3
 8006b26:	68f9      	ldr	r1, [r7, #12]
 8006b28:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b2c:	4013      	ands	r3, r2
 8006b2e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b36:	69da      	ldr	r2, [r3, #28]
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	f003 030f 	and.w	r3, r3, #15
 8006b40:	2101      	movs	r1, #1
 8006b42:	fa01 f303 	lsl.w	r3, r1, r3
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	43db      	mvns	r3, r3
 8006b4a:	68f9      	ldr	r1, [r7, #12]
 8006b4c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b50:	4013      	ands	r3, r2
 8006b52:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	015a      	lsls	r2, r3, #5
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	4413      	add	r3, r2
 8006b5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	0159      	lsls	r1, r3, #5
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	440b      	add	r3, r1
 8006b6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b6e:	4619      	mov	r1, r3
 8006b70:	4b35      	ldr	r3, [pc, #212]	@ (8006c48 <USB_DeactivateEndpoint+0x1b0>)
 8006b72:	4013      	ands	r3, r2
 8006b74:	600b      	str	r3, [r1, #0]
 8006b76:	e060      	b.n	8006c3a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	015a      	lsls	r2, r3, #5
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	4413      	add	r3, r2
 8006b80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006b8a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b8e:	d11f      	bne.n	8006bd0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	015a      	lsls	r2, r3, #5
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	4413      	add	r3, r2
 8006b98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	68ba      	ldr	r2, [r7, #8]
 8006ba0:	0151      	lsls	r1, r2, #5
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	440a      	add	r2, r1
 8006ba6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006baa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006bae:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	015a      	lsls	r2, r3, #5
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	4413      	add	r3, r2
 8006bb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	68ba      	ldr	r2, [r7, #8]
 8006bc0:	0151      	lsls	r1, r2, #5
 8006bc2:	68fa      	ldr	r2, [r7, #12]
 8006bc4:	440a      	add	r2, r1
 8006bc6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006bca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006bce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bd6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	f003 030f 	and.w	r3, r3, #15
 8006be0:	2101      	movs	r1, #1
 8006be2:	fa01 f303 	lsl.w	r3, r1, r3
 8006be6:	041b      	lsls	r3, r3, #16
 8006be8:	43db      	mvns	r3, r3
 8006bea:	68f9      	ldr	r1, [r7, #12]
 8006bec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006bf0:	4013      	ands	r3, r2
 8006bf2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bfa:	69da      	ldr	r2, [r3, #28]
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	f003 030f 	and.w	r3, r3, #15
 8006c04:	2101      	movs	r1, #1
 8006c06:	fa01 f303 	lsl.w	r3, r1, r3
 8006c0a:	041b      	lsls	r3, r3, #16
 8006c0c:	43db      	mvns	r3, r3
 8006c0e:	68f9      	ldr	r1, [r7, #12]
 8006c10:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006c14:	4013      	ands	r3, r2
 8006c16:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	015a      	lsls	r2, r3, #5
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	4413      	add	r3, r2
 8006c20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	0159      	lsls	r1, r3, #5
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	440b      	add	r3, r1
 8006c2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c32:	4619      	mov	r1, r3
 8006c34:	4b05      	ldr	r3, [pc, #20]	@ (8006c4c <USB_DeactivateEndpoint+0x1b4>)
 8006c36:	4013      	ands	r3, r2
 8006c38:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006c3a:	2300      	movs	r3, #0
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3714      	adds	r7, #20
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr
 8006c48:	ec337800 	.word	0xec337800
 8006c4c:	eff37800 	.word	0xeff37800

08006c50 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b08a      	sub	sp, #40	@ 0x28
 8006c54:	af02      	add	r7, sp, #8
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	4613      	mov	r3, r2
 8006c5c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	785b      	ldrb	r3, [r3, #1]
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	f040 817f 	bne.w	8006f70 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	691b      	ldr	r3, [r3, #16]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d132      	bne.n	8006ce0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006c7a:	69bb      	ldr	r3, [r7, #24]
 8006c7c:	015a      	lsls	r2, r3, #5
 8006c7e:	69fb      	ldr	r3, [r7, #28]
 8006c80:	4413      	add	r3, r2
 8006c82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c86:	691b      	ldr	r3, [r3, #16]
 8006c88:	69ba      	ldr	r2, [r7, #24]
 8006c8a:	0151      	lsls	r1, r2, #5
 8006c8c:	69fa      	ldr	r2, [r7, #28]
 8006c8e:	440a      	add	r2, r1
 8006c90:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c94:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006c98:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006c9c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006c9e:	69bb      	ldr	r3, [r7, #24]
 8006ca0:	015a      	lsls	r2, r3, #5
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006caa:	691b      	ldr	r3, [r3, #16]
 8006cac:	69ba      	ldr	r2, [r7, #24]
 8006cae:	0151      	lsls	r1, r2, #5
 8006cb0:	69fa      	ldr	r2, [r7, #28]
 8006cb2:	440a      	add	r2, r1
 8006cb4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006cb8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006cbc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	015a      	lsls	r2, r3, #5
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	69ba      	ldr	r2, [r7, #24]
 8006cce:	0151      	lsls	r1, r2, #5
 8006cd0:	69fa      	ldr	r2, [r7, #28]
 8006cd2:	440a      	add	r2, r1
 8006cd4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006cd8:	0cdb      	lsrs	r3, r3, #19
 8006cda:	04db      	lsls	r3, r3, #19
 8006cdc:	6113      	str	r3, [r2, #16]
 8006cde:	e097      	b.n	8006e10 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006ce0:	69bb      	ldr	r3, [r7, #24]
 8006ce2:	015a      	lsls	r2, r3, #5
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	4413      	add	r3, r2
 8006ce8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cec:	691b      	ldr	r3, [r3, #16]
 8006cee:	69ba      	ldr	r2, [r7, #24]
 8006cf0:	0151      	lsls	r1, r2, #5
 8006cf2:	69fa      	ldr	r2, [r7, #28]
 8006cf4:	440a      	add	r2, r1
 8006cf6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006cfa:	0cdb      	lsrs	r3, r3, #19
 8006cfc:	04db      	lsls	r3, r3, #19
 8006cfe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	015a      	lsls	r2, r3, #5
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	4413      	add	r3, r2
 8006d08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d0c:	691b      	ldr	r3, [r3, #16]
 8006d0e:	69ba      	ldr	r2, [r7, #24]
 8006d10:	0151      	lsls	r1, r2, #5
 8006d12:	69fa      	ldr	r2, [r7, #28]
 8006d14:	440a      	add	r2, r1
 8006d16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d1a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006d1e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006d22:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006d24:	69bb      	ldr	r3, [r7, #24]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d11a      	bne.n	8006d60 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	691a      	ldr	r2, [r3, #16]
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d903      	bls.n	8006d3e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	689a      	ldr	r2, [r3, #8]
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006d3e:	69bb      	ldr	r3, [r7, #24]
 8006d40:	015a      	lsls	r2, r3, #5
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	4413      	add	r3, r2
 8006d46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d4a:	691b      	ldr	r3, [r3, #16]
 8006d4c:	69ba      	ldr	r2, [r7, #24]
 8006d4e:	0151      	lsls	r1, r2, #5
 8006d50:	69fa      	ldr	r2, [r7, #28]
 8006d52:	440a      	add	r2, r1
 8006d54:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d58:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006d5c:	6113      	str	r3, [r2, #16]
 8006d5e:	e044      	b.n	8006dea <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	691a      	ldr	r2, [r3, #16]
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	4413      	add	r3, r2
 8006d6a:	1e5a      	subs	r2, r3, #1
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d74:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8006d76:	69bb      	ldr	r3, [r7, #24]
 8006d78:	015a      	lsls	r2, r3, #5
 8006d7a:	69fb      	ldr	r3, [r7, #28]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d82:	691a      	ldr	r2, [r3, #16]
 8006d84:	8afb      	ldrh	r3, [r7, #22]
 8006d86:	04d9      	lsls	r1, r3, #19
 8006d88:	4ba4      	ldr	r3, [pc, #656]	@ (800701c <USB_EPStartXfer+0x3cc>)
 8006d8a:	400b      	ands	r3, r1
 8006d8c:	69b9      	ldr	r1, [r7, #24]
 8006d8e:	0148      	lsls	r0, r1, #5
 8006d90:	69f9      	ldr	r1, [r7, #28]
 8006d92:	4401      	add	r1, r0
 8006d94:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	791b      	ldrb	r3, [r3, #4]
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d122      	bne.n	8006dea <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006da4:	69bb      	ldr	r3, [r7, #24]
 8006da6:	015a      	lsls	r2, r3, #5
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	4413      	add	r3, r2
 8006dac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006db0:	691b      	ldr	r3, [r3, #16]
 8006db2:	69ba      	ldr	r2, [r7, #24]
 8006db4:	0151      	lsls	r1, r2, #5
 8006db6:	69fa      	ldr	r2, [r7, #28]
 8006db8:	440a      	add	r2, r1
 8006dba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006dbe:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006dc2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8006dc4:	69bb      	ldr	r3, [r7, #24]
 8006dc6:	015a      	lsls	r2, r3, #5
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	4413      	add	r3, r2
 8006dcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dd0:	691a      	ldr	r2, [r3, #16]
 8006dd2:	8afb      	ldrh	r3, [r7, #22]
 8006dd4:	075b      	lsls	r3, r3, #29
 8006dd6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006dda:	69b9      	ldr	r1, [r7, #24]
 8006ddc:	0148      	lsls	r0, r1, #5
 8006dde:	69f9      	ldr	r1, [r7, #28]
 8006de0:	4401      	add	r1, r0
 8006de2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006de6:	4313      	orrs	r3, r2
 8006de8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006dea:	69bb      	ldr	r3, [r7, #24]
 8006dec:	015a      	lsls	r2, r3, #5
 8006dee:	69fb      	ldr	r3, [r7, #28]
 8006df0:	4413      	add	r3, r2
 8006df2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006df6:	691a      	ldr	r2, [r3, #16]
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	691b      	ldr	r3, [r3, #16]
 8006dfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e00:	69b9      	ldr	r1, [r7, #24]
 8006e02:	0148      	lsls	r0, r1, #5
 8006e04:	69f9      	ldr	r1, [r7, #28]
 8006e06:	4401      	add	r1, r0
 8006e08:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006e10:	79fb      	ldrb	r3, [r7, #7]
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d14b      	bne.n	8006eae <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	69db      	ldr	r3, [r3, #28]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d009      	beq.n	8006e32 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	015a      	lsls	r2, r3, #5
 8006e22:	69fb      	ldr	r3, [r7, #28]
 8006e24:	4413      	add	r3, r2
 8006e26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	69db      	ldr	r3, [r3, #28]
 8006e30:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	791b      	ldrb	r3, [r3, #4]
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d128      	bne.n	8006e8c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006e3a:	69fb      	ldr	r3, [r7, #28]
 8006e3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d110      	bne.n	8006e6c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	015a      	lsls	r2, r3, #5
 8006e4e:	69fb      	ldr	r3, [r7, #28]
 8006e50:	4413      	add	r3, r2
 8006e52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	69ba      	ldr	r2, [r7, #24]
 8006e5a:	0151      	lsls	r1, r2, #5
 8006e5c:	69fa      	ldr	r2, [r7, #28]
 8006e5e:	440a      	add	r2, r1
 8006e60:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e64:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006e68:	6013      	str	r3, [r2, #0]
 8006e6a:	e00f      	b.n	8006e8c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	015a      	lsls	r2, r3, #5
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	4413      	add	r3, r2
 8006e74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	69ba      	ldr	r2, [r7, #24]
 8006e7c:	0151      	lsls	r1, r2, #5
 8006e7e:	69fa      	ldr	r2, [r7, #28]
 8006e80:	440a      	add	r2, r1
 8006e82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e8a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	015a      	lsls	r2, r3, #5
 8006e90:	69fb      	ldr	r3, [r7, #28]
 8006e92:	4413      	add	r3, r2
 8006e94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	69ba      	ldr	r2, [r7, #24]
 8006e9c:	0151      	lsls	r1, r2, #5
 8006e9e:	69fa      	ldr	r2, [r7, #28]
 8006ea0:	440a      	add	r2, r1
 8006ea2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ea6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006eaa:	6013      	str	r3, [r2, #0]
 8006eac:	e166      	b.n	800717c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006eae:	69bb      	ldr	r3, [r7, #24]
 8006eb0:	015a      	lsls	r2, r3, #5
 8006eb2:	69fb      	ldr	r3, [r7, #28]
 8006eb4:	4413      	add	r3, r2
 8006eb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	69ba      	ldr	r2, [r7, #24]
 8006ebe:	0151      	lsls	r1, r2, #5
 8006ec0:	69fa      	ldr	r2, [r7, #28]
 8006ec2:	440a      	add	r2, r1
 8006ec4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ec8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006ecc:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	791b      	ldrb	r3, [r3, #4]
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d015      	beq.n	8006f02 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	691b      	ldr	r3, [r3, #16]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	f000 814e 	beq.w	800717c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ee6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	f003 030f 	and.w	r3, r3, #15
 8006ef0:	2101      	movs	r1, #1
 8006ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ef6:	69f9      	ldr	r1, [r7, #28]
 8006ef8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006efc:	4313      	orrs	r3, r2
 8006efe:	634b      	str	r3, [r1, #52]	@ 0x34
 8006f00:	e13c      	b.n	800717c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d110      	bne.n	8006f34 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	015a      	lsls	r2, r3, #5
 8006f16:	69fb      	ldr	r3, [r7, #28]
 8006f18:	4413      	add	r3, r2
 8006f1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	69ba      	ldr	r2, [r7, #24]
 8006f22:	0151      	lsls	r1, r2, #5
 8006f24:	69fa      	ldr	r2, [r7, #28]
 8006f26:	440a      	add	r2, r1
 8006f28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f2c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006f30:	6013      	str	r3, [r2, #0]
 8006f32:	e00f      	b.n	8006f54 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006f34:	69bb      	ldr	r3, [r7, #24]
 8006f36:	015a      	lsls	r2, r3, #5
 8006f38:	69fb      	ldr	r3, [r7, #28]
 8006f3a:	4413      	add	r3, r2
 8006f3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	69ba      	ldr	r2, [r7, #24]
 8006f44:	0151      	lsls	r1, r2, #5
 8006f46:	69fa      	ldr	r2, [r7, #28]
 8006f48:	440a      	add	r2, r1
 8006f4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f52:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	68d9      	ldr	r1, [r3, #12]
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	781a      	ldrb	r2, [r3, #0]
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	691b      	ldr	r3, [r3, #16]
 8006f60:	b298      	uxth	r0, r3
 8006f62:	79fb      	ldrb	r3, [r7, #7]
 8006f64:	9300      	str	r3, [sp, #0]
 8006f66:	4603      	mov	r3, r0
 8006f68:	68f8      	ldr	r0, [r7, #12]
 8006f6a:	f000 f9b9 	bl	80072e0 <USB_WritePacket>
 8006f6e:	e105      	b.n	800717c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006f70:	69bb      	ldr	r3, [r7, #24]
 8006f72:	015a      	lsls	r2, r3, #5
 8006f74:	69fb      	ldr	r3, [r7, #28]
 8006f76:	4413      	add	r3, r2
 8006f78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f7c:	691b      	ldr	r3, [r3, #16]
 8006f7e:	69ba      	ldr	r2, [r7, #24]
 8006f80:	0151      	lsls	r1, r2, #5
 8006f82:	69fa      	ldr	r2, [r7, #28]
 8006f84:	440a      	add	r2, r1
 8006f86:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f8a:	0cdb      	lsrs	r3, r3, #19
 8006f8c:	04db      	lsls	r3, r3, #19
 8006f8e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006f90:	69bb      	ldr	r3, [r7, #24]
 8006f92:	015a      	lsls	r2, r3, #5
 8006f94:	69fb      	ldr	r3, [r7, #28]
 8006f96:	4413      	add	r3, r2
 8006f98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	69ba      	ldr	r2, [r7, #24]
 8006fa0:	0151      	lsls	r1, r2, #5
 8006fa2:	69fa      	ldr	r2, [r7, #28]
 8006fa4:	440a      	add	r2, r1
 8006fa6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006faa:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006fae:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006fb2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006fb4:	69bb      	ldr	r3, [r7, #24]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d132      	bne.n	8007020 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d003      	beq.n	8006fca <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	689a      	ldr	r2, [r3, #8]
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	689a      	ldr	r2, [r3, #8]
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	015a      	lsls	r2, r3, #5
 8006fd6:	69fb      	ldr	r3, [r7, #28]
 8006fd8:	4413      	add	r3, r2
 8006fda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fde:	691a      	ldr	r2, [r3, #16]
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	6a1b      	ldr	r3, [r3, #32]
 8006fe4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fe8:	69b9      	ldr	r1, [r7, #24]
 8006fea:	0148      	lsls	r0, r1, #5
 8006fec:	69f9      	ldr	r1, [r7, #28]
 8006fee:	4401      	add	r1, r0
 8006ff0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	015a      	lsls	r2, r3, #5
 8006ffc:	69fb      	ldr	r3, [r7, #28]
 8006ffe:	4413      	add	r3, r2
 8007000:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007004:	691b      	ldr	r3, [r3, #16]
 8007006:	69ba      	ldr	r2, [r7, #24]
 8007008:	0151      	lsls	r1, r2, #5
 800700a:	69fa      	ldr	r2, [r7, #28]
 800700c:	440a      	add	r2, r1
 800700e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007012:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007016:	6113      	str	r3, [r2, #16]
 8007018:	e062      	b.n	80070e0 <USB_EPStartXfer+0x490>
 800701a:	bf00      	nop
 800701c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	691b      	ldr	r3, [r3, #16]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d123      	bne.n	8007070 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007028:	69bb      	ldr	r3, [r7, #24]
 800702a:	015a      	lsls	r2, r3, #5
 800702c:	69fb      	ldr	r3, [r7, #28]
 800702e:	4413      	add	r3, r2
 8007030:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007034:	691a      	ldr	r2, [r3, #16]
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800703e:	69b9      	ldr	r1, [r7, #24]
 8007040:	0148      	lsls	r0, r1, #5
 8007042:	69f9      	ldr	r1, [r7, #28]
 8007044:	4401      	add	r1, r0
 8007046:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800704a:	4313      	orrs	r3, r2
 800704c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800704e:	69bb      	ldr	r3, [r7, #24]
 8007050:	015a      	lsls	r2, r3, #5
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	4413      	add	r3, r2
 8007056:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800705a:	691b      	ldr	r3, [r3, #16]
 800705c:	69ba      	ldr	r2, [r7, #24]
 800705e:	0151      	lsls	r1, r2, #5
 8007060:	69fa      	ldr	r2, [r7, #28]
 8007062:	440a      	add	r2, r1
 8007064:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007068:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800706c:	6113      	str	r3, [r2, #16]
 800706e:	e037      	b.n	80070e0 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	691a      	ldr	r2, [r3, #16]
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	4413      	add	r3, r2
 800707a:	1e5a      	subs	r2, r3, #1
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	fbb2 f3f3 	udiv	r3, r2, r3
 8007084:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	8afa      	ldrh	r2, [r7, #22]
 800708c:	fb03 f202 	mul.w	r2, r3, r2
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007094:	69bb      	ldr	r3, [r7, #24]
 8007096:	015a      	lsls	r2, r3, #5
 8007098:	69fb      	ldr	r3, [r7, #28]
 800709a:	4413      	add	r3, r2
 800709c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070a0:	691a      	ldr	r2, [r3, #16]
 80070a2:	8afb      	ldrh	r3, [r7, #22]
 80070a4:	04d9      	lsls	r1, r3, #19
 80070a6:	4b38      	ldr	r3, [pc, #224]	@ (8007188 <USB_EPStartXfer+0x538>)
 80070a8:	400b      	ands	r3, r1
 80070aa:	69b9      	ldr	r1, [r7, #24]
 80070ac:	0148      	lsls	r0, r1, #5
 80070ae:	69f9      	ldr	r1, [r7, #28]
 80070b0:	4401      	add	r1, r0
 80070b2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80070b6:	4313      	orrs	r3, r2
 80070b8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80070ba:	69bb      	ldr	r3, [r7, #24]
 80070bc:	015a      	lsls	r2, r3, #5
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	4413      	add	r3, r2
 80070c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070c6:	691a      	ldr	r2, [r3, #16]
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	6a1b      	ldr	r3, [r3, #32]
 80070cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070d0:	69b9      	ldr	r1, [r7, #24]
 80070d2:	0148      	lsls	r0, r1, #5
 80070d4:	69f9      	ldr	r1, [r7, #28]
 80070d6:	4401      	add	r1, r0
 80070d8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80070dc:	4313      	orrs	r3, r2
 80070de:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80070e0:	79fb      	ldrb	r3, [r7, #7]
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d10d      	bne.n	8007102 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	68db      	ldr	r3, [r3, #12]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d009      	beq.n	8007102 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	68d9      	ldr	r1, [r3, #12]
 80070f2:	69bb      	ldr	r3, [r7, #24]
 80070f4:	015a      	lsls	r2, r3, #5
 80070f6:	69fb      	ldr	r3, [r7, #28]
 80070f8:	4413      	add	r3, r2
 80070fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070fe:	460a      	mov	r2, r1
 8007100:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	791b      	ldrb	r3, [r3, #4]
 8007106:	2b01      	cmp	r3, #1
 8007108:	d128      	bne.n	800715c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800710a:	69fb      	ldr	r3, [r7, #28]
 800710c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007116:	2b00      	cmp	r3, #0
 8007118:	d110      	bne.n	800713c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800711a:	69bb      	ldr	r3, [r7, #24]
 800711c:	015a      	lsls	r2, r3, #5
 800711e:	69fb      	ldr	r3, [r7, #28]
 8007120:	4413      	add	r3, r2
 8007122:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	69ba      	ldr	r2, [r7, #24]
 800712a:	0151      	lsls	r1, r2, #5
 800712c:	69fa      	ldr	r2, [r7, #28]
 800712e:	440a      	add	r2, r1
 8007130:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007134:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007138:	6013      	str	r3, [r2, #0]
 800713a:	e00f      	b.n	800715c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800713c:	69bb      	ldr	r3, [r7, #24]
 800713e:	015a      	lsls	r2, r3, #5
 8007140:	69fb      	ldr	r3, [r7, #28]
 8007142:	4413      	add	r3, r2
 8007144:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	69ba      	ldr	r2, [r7, #24]
 800714c:	0151      	lsls	r1, r2, #5
 800714e:	69fa      	ldr	r2, [r7, #28]
 8007150:	440a      	add	r2, r1
 8007152:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007156:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800715a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800715c:	69bb      	ldr	r3, [r7, #24]
 800715e:	015a      	lsls	r2, r3, #5
 8007160:	69fb      	ldr	r3, [r7, #28]
 8007162:	4413      	add	r3, r2
 8007164:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	69ba      	ldr	r2, [r7, #24]
 800716c:	0151      	lsls	r1, r2, #5
 800716e:	69fa      	ldr	r2, [r7, #28]
 8007170:	440a      	add	r2, r1
 8007172:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007176:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800717a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800717c:	2300      	movs	r3, #0
}
 800717e:	4618      	mov	r0, r3
 8007180:	3720      	adds	r7, #32
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}
 8007186:	bf00      	nop
 8007188:	1ff80000 	.word	0x1ff80000

0800718c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800718c:	b480      	push	{r7}
 800718e:	b087      	sub	sp, #28
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007196:	2300      	movs	r3, #0
 8007198:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800719a:	2300      	movs	r3, #0
 800719c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	785b      	ldrb	r3, [r3, #1]
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d14a      	bne.n	8007240 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	781b      	ldrb	r3, [r3, #0]
 80071ae:	015a      	lsls	r2, r3, #5
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	4413      	add	r3, r2
 80071b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80071be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80071c2:	f040 8086 	bne.w	80072d2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	015a      	lsls	r2, r3, #5
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	4413      	add	r3, r2
 80071d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	683a      	ldr	r2, [r7, #0]
 80071d8:	7812      	ldrb	r2, [r2, #0]
 80071da:	0151      	lsls	r1, r2, #5
 80071dc:	693a      	ldr	r2, [r7, #16]
 80071de:	440a      	add	r2, r1
 80071e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80071e4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80071e8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	015a      	lsls	r2, r3, #5
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	4413      	add	r3, r2
 80071f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	683a      	ldr	r2, [r7, #0]
 80071fc:	7812      	ldrb	r2, [r2, #0]
 80071fe:	0151      	lsls	r1, r2, #5
 8007200:	693a      	ldr	r2, [r7, #16]
 8007202:	440a      	add	r2, r1
 8007204:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007208:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800720c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	3301      	adds	r3, #1
 8007212:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f242 7210 	movw	r2, #10000	@ 0x2710
 800721a:	4293      	cmp	r3, r2
 800721c:	d902      	bls.n	8007224 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	75fb      	strb	r3, [r7, #23]
          break;
 8007222:	e056      	b.n	80072d2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	015a      	lsls	r2, r3, #5
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	4413      	add	r3, r2
 800722e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007238:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800723c:	d0e7      	beq.n	800720e <USB_EPStopXfer+0x82>
 800723e:	e048      	b.n	80072d2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	015a      	lsls	r2, r3, #5
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	4413      	add	r3, r2
 800724a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007254:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007258:	d13b      	bne.n	80072d2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	015a      	lsls	r2, r3, #5
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	4413      	add	r3, r2
 8007264:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	683a      	ldr	r2, [r7, #0]
 800726c:	7812      	ldrb	r2, [r2, #0]
 800726e:	0151      	lsls	r1, r2, #5
 8007270:	693a      	ldr	r2, [r7, #16]
 8007272:	440a      	add	r2, r1
 8007274:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007278:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800727c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	015a      	lsls	r2, r3, #5
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	4413      	add	r3, r2
 8007288:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	683a      	ldr	r2, [r7, #0]
 8007290:	7812      	ldrb	r2, [r2, #0]
 8007292:	0151      	lsls	r1, r2, #5
 8007294:	693a      	ldr	r2, [r7, #16]
 8007296:	440a      	add	r2, r1
 8007298:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800729c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80072a0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	3301      	adds	r3, #1
 80072a6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f242 7210 	movw	r2, #10000	@ 0x2710
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d902      	bls.n	80072b8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	75fb      	strb	r3, [r7, #23]
          break;
 80072b6:	e00c      	b.n	80072d2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	015a      	lsls	r2, r3, #5
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	4413      	add	r3, r2
 80072c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80072cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80072d0:	d0e7      	beq.n	80072a2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80072d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	371c      	adds	r7, #28
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr

080072e0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b089      	sub	sp, #36	@ 0x24
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	60b9      	str	r1, [r7, #8]
 80072ea:	4611      	mov	r1, r2
 80072ec:	461a      	mov	r2, r3
 80072ee:	460b      	mov	r3, r1
 80072f0:	71fb      	strb	r3, [r7, #7]
 80072f2:	4613      	mov	r3, r2
 80072f4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80072fe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007302:	2b00      	cmp	r3, #0
 8007304:	d123      	bne.n	800734e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007306:	88bb      	ldrh	r3, [r7, #4]
 8007308:	3303      	adds	r3, #3
 800730a:	089b      	lsrs	r3, r3, #2
 800730c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800730e:	2300      	movs	r3, #0
 8007310:	61bb      	str	r3, [r7, #24]
 8007312:	e018      	b.n	8007346 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007314:	79fb      	ldrb	r3, [r7, #7]
 8007316:	031a      	lsls	r2, r3, #12
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	4413      	add	r3, r2
 800731c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007320:	461a      	mov	r2, r3
 8007322:	69fb      	ldr	r3, [r7, #28]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007328:	69fb      	ldr	r3, [r7, #28]
 800732a:	3301      	adds	r3, #1
 800732c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800732e:	69fb      	ldr	r3, [r7, #28]
 8007330:	3301      	adds	r3, #1
 8007332:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007334:	69fb      	ldr	r3, [r7, #28]
 8007336:	3301      	adds	r3, #1
 8007338:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	3301      	adds	r3, #1
 800733e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007340:	69bb      	ldr	r3, [r7, #24]
 8007342:	3301      	adds	r3, #1
 8007344:	61bb      	str	r3, [r7, #24]
 8007346:	69ba      	ldr	r2, [r7, #24]
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	429a      	cmp	r2, r3
 800734c:	d3e2      	bcc.n	8007314 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800734e:	2300      	movs	r3, #0
}
 8007350:	4618      	mov	r0, r3
 8007352:	3724      	adds	r7, #36	@ 0x24
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr

0800735c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800735c:	b480      	push	{r7}
 800735e:	b08b      	sub	sp, #44	@ 0x2c
 8007360:	af00      	add	r7, sp, #0
 8007362:	60f8      	str	r0, [r7, #12]
 8007364:	60b9      	str	r1, [r7, #8]
 8007366:	4613      	mov	r3, r2
 8007368:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007372:	88fb      	ldrh	r3, [r7, #6]
 8007374:	089b      	lsrs	r3, r3, #2
 8007376:	b29b      	uxth	r3, r3
 8007378:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800737a:	88fb      	ldrh	r3, [r7, #6]
 800737c:	f003 0303 	and.w	r3, r3, #3
 8007380:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007382:	2300      	movs	r3, #0
 8007384:	623b      	str	r3, [r7, #32]
 8007386:	e014      	b.n	80073b2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007388:	69bb      	ldr	r3, [r7, #24]
 800738a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007392:	601a      	str	r2, [r3, #0]
    pDest++;
 8007394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007396:	3301      	adds	r3, #1
 8007398:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800739a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800739c:	3301      	adds	r3, #1
 800739e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80073a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a2:	3301      	adds	r3, #1
 80073a4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80073a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a8:	3301      	adds	r3, #1
 80073aa:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80073ac:	6a3b      	ldr	r3, [r7, #32]
 80073ae:	3301      	adds	r3, #1
 80073b0:	623b      	str	r3, [r7, #32]
 80073b2:	6a3a      	ldr	r2, [r7, #32]
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d3e6      	bcc.n	8007388 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80073ba:	8bfb      	ldrh	r3, [r7, #30]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d01e      	beq.n	80073fe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80073c0:	2300      	movs	r3, #0
 80073c2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80073c4:	69bb      	ldr	r3, [r7, #24]
 80073c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80073ca:	461a      	mov	r2, r3
 80073cc:	f107 0310 	add.w	r3, r7, #16
 80073d0:	6812      	ldr	r2, [r2, #0]
 80073d2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80073d4:	693a      	ldr	r2, [r7, #16]
 80073d6:	6a3b      	ldr	r3, [r7, #32]
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	00db      	lsls	r3, r3, #3
 80073dc:	fa22 f303 	lsr.w	r3, r2, r3
 80073e0:	b2da      	uxtb	r2, r3
 80073e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e4:	701a      	strb	r2, [r3, #0]
      i++;
 80073e6:	6a3b      	ldr	r3, [r7, #32]
 80073e8:	3301      	adds	r3, #1
 80073ea:	623b      	str	r3, [r7, #32]
      pDest++;
 80073ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ee:	3301      	adds	r3, #1
 80073f0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80073f2:	8bfb      	ldrh	r3, [r7, #30]
 80073f4:	3b01      	subs	r3, #1
 80073f6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80073f8:	8bfb      	ldrh	r3, [r7, #30]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d1ea      	bne.n	80073d4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80073fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007400:	4618      	mov	r0, r3
 8007402:	372c      	adds	r7, #44	@ 0x2c
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr

0800740c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800740c:	b480      	push	{r7}
 800740e:	b085      	sub	sp, #20
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	785b      	ldrb	r3, [r3, #1]
 8007424:	2b01      	cmp	r3, #1
 8007426:	d12c      	bne.n	8007482 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	015a      	lsls	r2, r3, #5
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	4413      	add	r3, r2
 8007430:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	2b00      	cmp	r3, #0
 8007438:	db12      	blt.n	8007460 <USB_EPSetStall+0x54>
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d00f      	beq.n	8007460 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	015a      	lsls	r2, r3, #5
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	4413      	add	r3, r2
 8007448:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	68ba      	ldr	r2, [r7, #8]
 8007450:	0151      	lsls	r1, r2, #5
 8007452:	68fa      	ldr	r2, [r7, #12]
 8007454:	440a      	add	r2, r1
 8007456:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800745a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800745e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	015a      	lsls	r2, r3, #5
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	4413      	add	r3, r2
 8007468:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	68ba      	ldr	r2, [r7, #8]
 8007470:	0151      	lsls	r1, r2, #5
 8007472:	68fa      	ldr	r2, [r7, #12]
 8007474:	440a      	add	r2, r1
 8007476:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800747a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800747e:	6013      	str	r3, [r2, #0]
 8007480:	e02b      	b.n	80074da <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	015a      	lsls	r2, r3, #5
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	4413      	add	r3, r2
 800748a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	2b00      	cmp	r3, #0
 8007492:	db12      	blt.n	80074ba <USB_EPSetStall+0xae>
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00f      	beq.n	80074ba <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	015a      	lsls	r2, r3, #5
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	4413      	add	r3, r2
 80074a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	68ba      	ldr	r2, [r7, #8]
 80074aa:	0151      	lsls	r1, r2, #5
 80074ac:	68fa      	ldr	r2, [r7, #12]
 80074ae:	440a      	add	r2, r1
 80074b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074b4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80074b8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	015a      	lsls	r2, r3, #5
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	4413      	add	r3, r2
 80074c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	68ba      	ldr	r2, [r7, #8]
 80074ca:	0151      	lsls	r1, r2, #5
 80074cc:	68fa      	ldr	r2, [r7, #12]
 80074ce:	440a      	add	r2, r1
 80074d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80074d8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80074da:	2300      	movs	r3, #0
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3714      	adds	r7, #20
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b085      	sub	sp, #20
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	785b      	ldrb	r3, [r3, #1]
 8007500:	2b01      	cmp	r3, #1
 8007502:	d128      	bne.n	8007556 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	015a      	lsls	r2, r3, #5
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	4413      	add	r3, r2
 800750c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	68ba      	ldr	r2, [r7, #8]
 8007514:	0151      	lsls	r1, r2, #5
 8007516:	68fa      	ldr	r2, [r7, #12]
 8007518:	440a      	add	r2, r1
 800751a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800751e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007522:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	791b      	ldrb	r3, [r3, #4]
 8007528:	2b03      	cmp	r3, #3
 800752a:	d003      	beq.n	8007534 <USB_EPClearStall+0x4c>
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	791b      	ldrb	r3, [r3, #4]
 8007530:	2b02      	cmp	r3, #2
 8007532:	d138      	bne.n	80075a6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	015a      	lsls	r2, r3, #5
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	4413      	add	r3, r2
 800753c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	68ba      	ldr	r2, [r7, #8]
 8007544:	0151      	lsls	r1, r2, #5
 8007546:	68fa      	ldr	r2, [r7, #12]
 8007548:	440a      	add	r2, r1
 800754a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800754e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007552:	6013      	str	r3, [r2, #0]
 8007554:	e027      	b.n	80075a6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	015a      	lsls	r2, r3, #5
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	4413      	add	r3, r2
 800755e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	68ba      	ldr	r2, [r7, #8]
 8007566:	0151      	lsls	r1, r2, #5
 8007568:	68fa      	ldr	r2, [r7, #12]
 800756a:	440a      	add	r2, r1
 800756c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007570:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007574:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	791b      	ldrb	r3, [r3, #4]
 800757a:	2b03      	cmp	r3, #3
 800757c:	d003      	beq.n	8007586 <USB_EPClearStall+0x9e>
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	791b      	ldrb	r3, [r3, #4]
 8007582:	2b02      	cmp	r3, #2
 8007584:	d10f      	bne.n	80075a6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	015a      	lsls	r2, r3, #5
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	4413      	add	r3, r2
 800758e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	68ba      	ldr	r2, [r7, #8]
 8007596:	0151      	lsls	r1, r2, #5
 8007598:	68fa      	ldr	r2, [r7, #12]
 800759a:	440a      	add	r2, r1
 800759c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80075a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075a4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80075a6:	2300      	movs	r3, #0
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3714      	adds	r7, #20
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr

080075b4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b085      	sub	sp, #20
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	460b      	mov	r3, r1
 80075be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	68fa      	ldr	r2, [r7, #12]
 80075ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80075d2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80075d6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	78fb      	ldrb	r3, [r7, #3]
 80075e2:	011b      	lsls	r3, r3, #4
 80075e4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80075e8:	68f9      	ldr	r1, [r7, #12]
 80075ea:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80075ee:	4313      	orrs	r3, r2
 80075f0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80075f2:	2300      	movs	r3, #0
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3714      	adds	r7, #20
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr

08007600 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007600:	b480      	push	{r7}
 8007602:	b085      	sub	sp, #20
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	68fa      	ldr	r2, [r7, #12]
 8007616:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800761a:	f023 0303 	bic.w	r3, r3, #3
 800761e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	68fa      	ldr	r2, [r7, #12]
 800762a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800762e:	f023 0302 	bic.w	r3, r3, #2
 8007632:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	3714      	adds	r7, #20
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr

08007642 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007642:	b480      	push	{r7}
 8007644:	b085      	sub	sp, #20
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	68fa      	ldr	r2, [r7, #12]
 8007658:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800765c:	f023 0303 	bic.w	r3, r3, #3
 8007660:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	68fa      	ldr	r2, [r7, #12]
 800766c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007670:	f043 0302 	orr.w	r3, r3, #2
 8007674:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007676:	2300      	movs	r3, #0
}
 8007678:	4618      	mov	r0, r3
 800767a:	3714      	adds	r7, #20
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr

08007684 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007684:	b480      	push	{r7}
 8007686:	b085      	sub	sp, #20
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	695b      	ldr	r3, [r3, #20]
 8007690:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	699b      	ldr	r3, [r3, #24]
 8007696:	68fa      	ldr	r2, [r7, #12]
 8007698:	4013      	ands	r3, r2
 800769a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800769c:	68fb      	ldr	r3, [r7, #12]
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3714      	adds	r7, #20
 80076a2:	46bd      	mov	sp, r7
 80076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a8:	4770      	bx	lr

080076aa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80076aa:	b480      	push	{r7}
 80076ac:	b085      	sub	sp, #20
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076bc:	699b      	ldr	r3, [r3, #24]
 80076be:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076c6:	69db      	ldr	r3, [r3, #28]
 80076c8:	68ba      	ldr	r2, [r7, #8]
 80076ca:	4013      	ands	r3, r2
 80076cc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	0c1b      	lsrs	r3, r3, #16
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3714      	adds	r7, #20
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr

080076de <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80076de:	b480      	push	{r7}
 80076e0:	b085      	sub	sp, #20
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076f0:	699b      	ldr	r3, [r3, #24]
 80076f2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076fa:	69db      	ldr	r3, [r3, #28]
 80076fc:	68ba      	ldr	r2, [r7, #8]
 80076fe:	4013      	ands	r3, r2
 8007700:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	b29b      	uxth	r3, r3
}
 8007706:	4618      	mov	r0, r3
 8007708:	3714      	adds	r7, #20
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr

08007712 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007712:	b480      	push	{r7}
 8007714:	b085      	sub	sp, #20
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
 800771a:	460b      	mov	r3, r1
 800771c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007722:	78fb      	ldrb	r3, [r7, #3]
 8007724:	015a      	lsls	r2, r3, #5
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	4413      	add	r3, r2
 800772a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007738:	695b      	ldr	r3, [r3, #20]
 800773a:	68ba      	ldr	r2, [r7, #8]
 800773c:	4013      	ands	r3, r2
 800773e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007740:	68bb      	ldr	r3, [r7, #8]
}
 8007742:	4618      	mov	r0, r3
 8007744:	3714      	adds	r7, #20
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr

0800774e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800774e:	b480      	push	{r7}
 8007750:	b087      	sub	sp, #28
 8007752:	af00      	add	r7, sp, #0
 8007754:	6078      	str	r0, [r7, #4]
 8007756:	460b      	mov	r3, r1
 8007758:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007764:	691b      	ldr	r3, [r3, #16]
 8007766:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800776e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007770:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007772:	78fb      	ldrb	r3, [r7, #3]
 8007774:	f003 030f 	and.w	r3, r3, #15
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	fa22 f303 	lsr.w	r3, r2, r3
 800777e:	01db      	lsls	r3, r3, #7
 8007780:	b2db      	uxtb	r3, r3
 8007782:	693a      	ldr	r2, [r7, #16]
 8007784:	4313      	orrs	r3, r2
 8007786:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007788:	78fb      	ldrb	r3, [r7, #3]
 800778a:	015a      	lsls	r2, r3, #5
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	4413      	add	r3, r2
 8007790:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	693a      	ldr	r2, [r7, #16]
 8007798:	4013      	ands	r3, r2
 800779a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800779c:	68bb      	ldr	r3, [r7, #8]
}
 800779e:	4618      	mov	r0, r3
 80077a0:	371c      	adds	r7, #28
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr

080077aa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80077aa:	b480      	push	{r7}
 80077ac:	b083      	sub	sp, #12
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	695b      	ldr	r3, [r3, #20]
 80077b6:	f003 0301 	and.w	r3, r3, #1
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	370c      	adds	r7, #12
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr

080077c6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80077c6:	b480      	push	{r7}
 80077c8:	b085      	sub	sp, #20
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	68fa      	ldr	r2, [r7, #12]
 80077dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80077e0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80077e4:	f023 0307 	bic.w	r3, r3, #7
 80077e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	68fa      	ldr	r2, [r7, #12]
 80077f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80077f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80077fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80077fe:	2300      	movs	r3, #0
}
 8007800:	4618      	mov	r0, r3
 8007802:	3714      	adds	r7, #20
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800780c:	b480      	push	{r7}
 800780e:	b087      	sub	sp, #28
 8007810:	af00      	add	r7, sp, #0
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	460b      	mov	r3, r1
 8007816:	607a      	str	r2, [r7, #4]
 8007818:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	333c      	adds	r3, #60	@ 0x3c
 8007822:	3304      	adds	r3, #4
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	4a26      	ldr	r2, [pc, #152]	@ (80078c4 <USB_EP0_OutStart+0xb8>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d90a      	bls.n	8007846 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800783c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007840:	d101      	bne.n	8007846 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007842:	2300      	movs	r3, #0
 8007844:	e037      	b.n	80078b6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800784c:	461a      	mov	r2, r3
 800784e:	2300      	movs	r3, #0
 8007850:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007858:	691b      	ldr	r3, [r3, #16]
 800785a:	697a      	ldr	r2, [r7, #20]
 800785c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007860:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007864:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	697a      	ldr	r2, [r7, #20]
 8007870:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007874:	f043 0318 	orr.w	r3, r3, #24
 8007878:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007880:	691b      	ldr	r3, [r3, #16]
 8007882:	697a      	ldr	r2, [r7, #20]
 8007884:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007888:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800788c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800788e:	7afb      	ldrb	r3, [r7, #11]
 8007890:	2b01      	cmp	r3, #1
 8007892:	d10f      	bne.n	80078b4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800789a:	461a      	mov	r2, r3
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	697a      	ldr	r2, [r7, #20]
 80078aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80078ae:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80078b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80078b4:	2300      	movs	r3, #0
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	371c      	adds	r7, #28
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr
 80078c2:	bf00      	nop
 80078c4:	4f54300a 	.word	0x4f54300a

080078c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b085      	sub	sp, #20
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80078d0:	2300      	movs	r3, #0
 80078d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	3301      	adds	r3, #1
 80078d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80078e0:	d901      	bls.n	80078e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80078e2:	2303      	movs	r3, #3
 80078e4:	e022      	b.n	800792c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	691b      	ldr	r3, [r3, #16]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	daf2      	bge.n	80078d4 <USB_CoreReset+0xc>

  count = 10U;
 80078ee:	230a      	movs	r3, #10
 80078f0:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80078f2:	e002      	b.n	80078fa <USB_CoreReset+0x32>
  {
    count--;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	3b01      	subs	r3, #1
 80078f8:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d1f9      	bne.n	80078f4 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	691b      	ldr	r3, [r3, #16]
 8007904:	f043 0201 	orr.w	r2, r3, #1
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	3301      	adds	r3, #1
 8007910:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007918:	d901      	bls.n	800791e <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800791a:	2303      	movs	r3, #3
 800791c:	e006      	b.n	800792c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	691b      	ldr	r3, [r3, #16]
 8007922:	f003 0301 	and.w	r3, r3, #1
 8007926:	2b01      	cmp	r3, #1
 8007928:	d0f0      	beq.n	800790c <USB_CoreReset+0x44>

  return HAL_OK;
 800792a:	2300      	movs	r3, #0
}
 800792c:	4618      	mov	r0, r3
 800792e:	3714      	adds	r7, #20
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr

08007938 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  USBD_COMPOSITE_Mount_Class();
 800793c:	f001 fbd0 	bl	80090e0 <USBD_COMPOSITE_Mount_Class>
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_HS) != USBD_OK)
  {
    Error_Handler();
  }
#else
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_FS) != USBD_OK)
 8007940:	2200      	movs	r2, #0
 8007942:	4917      	ldr	r1, [pc, #92]	@ (80079a0 <MX_USB_DEVICE_Init+0x68>)
 8007944:	4817      	ldr	r0, [pc, #92]	@ (80079a4 <MX_USB_DEVICE_Init+0x6c>)
 8007946:	f001 ffb5 	bl	80098b4 <USBD_Init>
 800794a:	4603      	mov	r3, r0
 800794c:	2b00      	cmp	r3, #0
 800794e:	d001      	beq.n	8007954 <MX_USB_DEVICE_Init+0x1c>
  {
    Error_Handler();
 8007950:	f7f9 f822 	bl	8000998 <Error_Handler>
  }
#endif
  if (USBD_RegisterClass(&hUsbDevice, &USBD_COMPOSITE) != USBD_OK)
 8007954:	4914      	ldr	r1, [pc, #80]	@ (80079a8 <MX_USB_DEVICE_Init+0x70>)
 8007956:	4813      	ldr	r0, [pc, #76]	@ (80079a4 <MX_USB_DEVICE_Init+0x6c>)
 8007958:	f001 ffd8 	bl	800990c <USBD_RegisterClass>
 800795c:	4603      	mov	r3, r0
 800795e:	2b00      	cmp	r3, #0
 8007960:	d001      	beq.n	8007966 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8007962:	f7f9 f819 	bl	8000998 <Error_Handler>
  }
#if (USBD_USE_CDC_ACM == 1)
  if (USBD_CDC_ACM_RegisterInterface(&hUsbDevice, &USBD_CDC_ACM_fops) != USBD_OK)
 8007966:	4911      	ldr	r1, [pc, #68]	@ (80079ac <MX_USB_DEVICE_Init+0x74>)
 8007968:	480e      	ldr	r0, [pc, #56]	@ (80079a4 <MX_USB_DEVICE_Init+0x6c>)
 800796a:	f001 f893 	bl	8008a94 <USBD_CDC_ACM_RegisterInterface>
 800796e:	4603      	mov	r3, r0
 8007970:	2b00      	cmp	r3, #0
 8007972:	d001      	beq.n	8007978 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8007974:	f7f9 f810 	bl	8000998 <Error_Handler>
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDevice, &USBD_CustomHID_fops) != USBD_OK)
 8007978:	490d      	ldr	r1, [pc, #52]	@ (80079b0 <MX_USB_DEVICE_Init+0x78>)
 800797a:	480a      	ldr	r0, [pc, #40]	@ (80079a4 <MX_USB_DEVICE_Init+0x6c>)
 800797c:	f001 ff4c 	bl	8009818 <USBD_CUSTOM_HID_RegisterInterface>
 8007980:	4603      	mov	r3, r0
 8007982:	2b00      	cmp	r3, #0
 8007984:	d001      	beq.n	800798a <MX_USB_DEVICE_Init+0x52>
  {
    Error_Handler();
 8007986:	f7f9 f807 	bl	8000998 <Error_Handler>
  if (USBD_PRNT_RegisterInterface(&hUsbDevice, &USBD_PRNT_fops) != USBD_OK)
  {
    Error_Handler();
  }
#endif
  if (USBD_Start(&hUsbDevice) != USBD_OK)
 800798a:	4806      	ldr	r0, [pc, #24]	@ (80079a4 <MX_USB_DEVICE_Init+0x6c>)
 800798c:	f001 fffc 	bl	8009988 <USBD_Start>
 8007990:	4603      	mov	r3, r0
 8007992:	2b00      	cmp	r3, #0
 8007994:	d001      	beq.n	800799a <MX_USB_DEVICE_Init+0x62>
  {
    Error_Handler();
 8007996:	f7f8 ffff 	bl	8000998 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800799a:	bf00      	nop
 800799c:	bd80      	pop	{r7, pc}
 800799e:	bf00      	nop
 80079a0:	20000020 	.word	0x20000020
 80079a4:	20000a14 	.word	0x20000a14
 80079a8:	20000184 	.word	0x20000184
 80079ac:	2000000c 	.word	0x2000000c
 80079b0:	20000094 	.word	0x20000094

080079b4 <CDC_CH_To_UART_Handle>:
static int8_t CDC_Receive(uint8_t cdc_ch, uint8_t *pbuf, uint32_t *Len);
static int8_t CDC_TransmitCplt(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len, uint8_t epnum);

/* USER CODE BEGIN PRIVATE_FUNCTIONS_DECLARATION */
UART_HandleTypeDef *CDC_CH_To_UART_Handle(uint8_t cdc_ch)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b085      	sub	sp, #20
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	4603      	mov	r3, r0
 80079bc:	71fb      	strb	r3, [r7, #7]
  UART_HandleTypeDef *handle = NULL;
 80079be:	2300      	movs	r3, #0
 80079c0:	60fb      	str	r3, [r7, #12]

  if (cdc_ch == 0)
 80079c2:	79fb      	ldrb	r3, [r7, #7]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d101      	bne.n	80079cc <CDC_CH_To_UART_Handle+0x18>
  {
    handle = &huart5;
 80079c8:	4b04      	ldr	r3, [pc, #16]	@ (80079dc <CDC_CH_To_UART_Handle+0x28>)
 80079ca:	60fb      	str	r3, [r7, #12]
  else if (cdc_ch == 2)
  {
    handle = &huart3;
  }
#endif
  return handle;
 80079cc:	68fb      	ldr	r3, [r7, #12]
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3714      	adds	r7, #20
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr
 80079da:	bf00      	nop
 80079dc:	20000424 	.word	0x20000424

080079e0 <UART_Handle_TO_CDC_CH>:

uint8_t UART_Handle_TO_CDC_CH(UART_HandleTypeDef *handle)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b085      	sub	sp, #20
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  uint8_t cdc_ch = 0;
 80079e8:	2300      	movs	r3, #0
 80079ea:	73fb      	strb	r3, [r7, #15]

  if (handle == &huart5)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	4a06      	ldr	r2, [pc, #24]	@ (8007a08 <UART_Handle_TO_CDC_CH+0x28>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d101      	bne.n	80079f8 <UART_Handle_TO_CDC_CH+0x18>
  {
    cdc_ch = 0;
 80079f4:	2300      	movs	r3, #0
 80079f6:	73fb      	strb	r3, [r7, #15]
  else if (handle == &huart3)
  {
    cdc_ch = 2;
  }
#endif
  return cdc_ch;
 80079f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3714      	adds	r7, #20
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr
 8007a06:	bf00      	nop
 8007a08:	20000424 	.word	0x20000424

08007a0c <Change_UART_Setting>:
//
void Change_UART_Setting(uint8_t cdc_ch)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b086      	sub	sp, #24
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	4603      	mov	r3, r0
 8007a14:	71fb      	strb	r3, [r7, #7]
  UART_HandleTypeDef *handle = CDC_CH_To_UART_Handle(cdc_ch);
 8007a16:	79fb      	ldrb	r3, [r7, #7]
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f7ff ffcb 	bl	80079b4 <CDC_CH_To_UART_Handle>
 8007a1e:	6178      	str	r0, [r7, #20]

  if (HAL_UART_DeInit(handle) != HAL_OK)
 8007a20:	6978      	ldr	r0, [r7, #20]
 8007a22:	f7fd fbf7 	bl	8005214 <HAL_UART_DeInit>
 8007a26:	4603      	mov	r3, r0
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d001      	beq.n	8007a30 <Change_UART_Setting+0x24>
  {
    /* Initialization Error */
    Error_Handler();
 8007a2c:	f7f8 ffb4 	bl	8000998 <Error_Handler>
  }
  /* set the Stop bit */
  switch (Line_Coding[cdc_ch].format)
 8007a30:	79fb      	ldrb	r3, [r7, #7]
 8007a32:	4a5c      	ldr	r2, [pc, #368]	@ (8007ba4 <Change_UART_Setting+0x198>)
 8007a34:	00db      	lsls	r3, r3, #3
 8007a36:	4413      	add	r3, r2
 8007a38:	791b      	ldrb	r3, [r3, #4]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d002      	beq.n	8007a44 <Change_UART_Setting+0x38>
 8007a3e:	2b02      	cmp	r3, #2
 8007a40:	d004      	beq.n	8007a4c <Change_UART_Setting+0x40>
 8007a42:	e008      	b.n	8007a56 <Change_UART_Setting+0x4a>
  {
  case 0:
    handle->Init.StopBits = UART_STOPBITS_1;
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	2200      	movs	r2, #0
 8007a48:	60da      	str	r2, [r3, #12]
    break;
 8007a4a:	e008      	b.n	8007a5e <Change_UART_Setting+0x52>
  case 2:
    handle->Init.StopBits = UART_STOPBITS_2;
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007a52:	60da      	str	r2, [r3, #12]
    break;
 8007a54:	e003      	b.n	8007a5e <Change_UART_Setting+0x52>
  default:
    handle->Init.StopBits = UART_STOPBITS_1;
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	60da      	str	r2, [r3, #12]
    break;
 8007a5c:	bf00      	nop
  }

  /* set the parity bit*/
  switch (Line_Coding[cdc_ch].paritytype)
 8007a5e:	79fb      	ldrb	r3, [r7, #7]
 8007a60:	4a50      	ldr	r2, [pc, #320]	@ (8007ba4 <Change_UART_Setting+0x198>)
 8007a62:	00db      	lsls	r3, r3, #3
 8007a64:	4413      	add	r3, r2
 8007a66:	795b      	ldrb	r3, [r3, #5]
 8007a68:	2b02      	cmp	r3, #2
 8007a6a:	d00f      	beq.n	8007a8c <Change_UART_Setting+0x80>
 8007a6c:	2b02      	cmp	r3, #2
 8007a6e:	dc12      	bgt.n	8007a96 <Change_UART_Setting+0x8a>
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d002      	beq.n	8007a7a <Change_UART_Setting+0x6e>
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d004      	beq.n	8007a82 <Change_UART_Setting+0x76>
 8007a78:	e00d      	b.n	8007a96 <Change_UART_Setting+0x8a>
  {
  case 0:
    handle->Init.Parity = UART_PARITY_NONE;
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	611a      	str	r2, [r3, #16]
    break;
 8007a80:	e00d      	b.n	8007a9e <Change_UART_Setting+0x92>
  case 1:
    handle->Init.Parity = UART_PARITY_ODD;
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8007a88:	611a      	str	r2, [r3, #16]
    break;
 8007a8a:	e008      	b.n	8007a9e <Change_UART_Setting+0x92>
  case 2:
    handle->Init.Parity = UART_PARITY_EVEN;
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007a92:	611a      	str	r2, [r3, #16]
    break;
 8007a94:	e003      	b.n	8007a9e <Change_UART_Setting+0x92>
  default:
    handle->Init.Parity = UART_PARITY_NONE;
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	611a      	str	r2, [r3, #16]
    break;
 8007a9c:	bf00      	nop
  }

  /*set the data type : only 8bits and 9bits is supported */
  switch (Line_Coding[cdc_ch].datatype)
 8007a9e:	79fb      	ldrb	r3, [r7, #7]
 8007aa0:	4a40      	ldr	r2, [pc, #256]	@ (8007ba4 <Change_UART_Setting+0x198>)
 8007aa2:	00db      	lsls	r3, r3, #3
 8007aa4:	4413      	add	r3, r2
 8007aa6:	799b      	ldrb	r3, [r3, #6]
 8007aa8:	2b07      	cmp	r3, #7
 8007aaa:	d002      	beq.n	8007ab2 <Change_UART_Setting+0xa6>
 8007aac:	2b08      	cmp	r3, #8
 8007aae:	d004      	beq.n	8007aba <Change_UART_Setting+0xae>
 8007ab0:	e010      	b.n	8007ad4 <Change_UART_Setting+0xc8>
  {
  case 0x07:
    /* With this configuration a parity (Even or Odd) must be set */
    handle->Init.WordLength = UART_WORDLENGTH_8B;
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	609a      	str	r2, [r3, #8]
    break;
 8007ab8:	e010      	b.n	8007adc <Change_UART_Setting+0xd0>
  case 0x08:
    if (handle->Init.Parity == UART_PARITY_NONE)
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	691b      	ldr	r3, [r3, #16]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d103      	bne.n	8007aca <Change_UART_Setting+0xbe>
    {
      handle->Init.WordLength = UART_WORDLENGTH_8B;
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	609a      	str	r2, [r3, #8]
    else
    {
      handle->Init.WordLength = UART_WORDLENGTH_9B;
    }

    break;
 8007ac8:	e008      	b.n	8007adc <Change_UART_Setting+0xd0>
      handle->Init.WordLength = UART_WORDLENGTH_9B;
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007ad0:	609a      	str	r2, [r3, #8]
    break;
 8007ad2:	e003      	b.n	8007adc <Change_UART_Setting+0xd0>
  default:
    handle->Init.WordLength = UART_WORDLENGTH_8B;
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	609a      	str	r2, [r3, #8]
    break;
 8007ada:	bf00      	nop
  }

  if (Line_Coding[cdc_ch].bitrate == 0)
 8007adc:	79fb      	ldrb	r3, [r7, #7]
 8007ade:	4a31      	ldr	r2, [pc, #196]	@ (8007ba4 <Change_UART_Setting+0x198>)
 8007ae0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d105      	bne.n	8007af4 <Change_UART_Setting+0xe8>
  {
    Line_Coding[cdc_ch].bitrate = 115200;
 8007ae8:	79fb      	ldrb	r3, [r7, #7]
 8007aea:	4a2e      	ldr	r2, [pc, #184]	@ (8007ba4 <Change_UART_Setting+0x198>)
 8007aec:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8007af0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
  }

  handle->Init.BaudRate = Line_Coding[cdc_ch].bitrate;
 8007af4:	79fb      	ldrb	r3, [r7, #7]
 8007af6:	4a2b      	ldr	r2, [pc, #172]	@ (8007ba4 <Change_UART_Setting+0x198>)
 8007af8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	605a      	str	r2, [r3, #4]
  handle->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	2200      	movs	r2, #0
 8007b04:	619a      	str	r2, [r3, #24]
  handle->Init.Mode = UART_MODE_TX_RX;
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	220c      	movs	r2, #12
 8007b0a:	615a      	str	r2, [r3, #20]
  handle->Init.OverSampling = UART_OVERSAMPLING_16;
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	61da      	str	r2, [r3, #28]

  if (HAL_UART_Init(handle) != HAL_OK)
 8007b12:	6978      	ldr	r0, [r7, #20]
 8007b14:	f7fd fb2e 	bl	8005174 <HAL_UART_Init>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d001      	beq.n	8007b22 <Change_UART_Setting+0x116>
  {
    /* Initialization Error */
    Error_Handler();
 8007b1e:	f7f8 ff3b 	bl	8000998 <Error_Handler>
  }

  /** rx for uart and tx buffer of usb */
  if (HAL_UART_Receive_IT(handle, TX_Buffer[cdc_ch], 1) != HAL_OK)
 8007b22:	79fb      	ldrb	r3, [r7, #7]
 8007b24:	019b      	lsls	r3, r3, #6
 8007b26:	4a20      	ldr	r2, [pc, #128]	@ (8007ba8 <Change_UART_Setting+0x19c>)
 8007b28:	4413      	add	r3, r2
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	6978      	ldr	r0, [r7, #20]
 8007b30:	f7fd fc2d 	bl	800538e <HAL_UART_Receive_IT>
 8007b34:	4603      	mov	r3, r0
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d001      	beq.n	8007b3e <Change_UART_Setting+0x132>
  {
    /* Transfer error in reception process */
    Error_Handler();
 8007b3a:	f7f8 ff2d 	bl	8000998 <Error_Handler>
  }
  __HAL_UART_CLEAR_OREFLAG(handle);
 8007b3e:	2300      	movs	r3, #0
 8007b40:	613b      	str	r3, [r7, #16]
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	613b      	str	r3, [r7, #16]
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	613b      	str	r3, [r7, #16]
 8007b52:	693b      	ldr	r3, [r7, #16]
  __HAL_UART_CLEAR_NEFLAG(handle);
 8007b54:	2300      	movs	r3, #0
 8007b56:	60fb      	str	r3, [r7, #12]
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	60fb      	str	r3, [r7, #12]
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	60fb      	str	r3, [r7, #12]
 8007b68:	68fb      	ldr	r3, [r7, #12]
  __HAL_UART_CLEAR_FEFLAG(handle);
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	60bb      	str	r3, [r7, #8]
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	60bb      	str	r3, [r7, #8]
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	60bb      	str	r3, [r7, #8]
 8007b7e:	68bb      	ldr	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8007b80:	f3bf 8f4f 	dsb	sy
}
 8007b84:	bf00      	nop
  __DSB();  // Ensure instruction completion
  Write_Index[cdc_ch] = 0;
 8007b86:	79fb      	ldrb	r3, [r7, #7]
 8007b88:	4a08      	ldr	r2, [pc, #32]	@ (8007bac <Change_UART_Setting+0x1a0>)
 8007b8a:	2100      	movs	r1, #0
 8007b8c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  Read_Index[cdc_ch] = 0;
 8007b90:	79fb      	ldrb	r3, [r7, #7]
 8007b92:	4a07      	ldr	r2, [pc, #28]	@ (8007bb0 <Change_UART_Setting+0x1a4>)
 8007b94:	2100      	movs	r1, #0
 8007b96:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8007b9a:	bf00      	nop
 8007b9c:	3718      	adds	r7, #24
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}
 8007ba2:	bf00      	nop
 8007ba4:	20000db0 	.word	0x20000db0
 8007ba8:	20000d70 	.word	0x20000d70
 8007bac:	20000db8 	.word	0x20000db8
 8007bb0:	20000dbc 	.word	0x20000dbc

08007bb4 <CDC_Init>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init(uint8_t cdc_ch)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	4603      	mov	r3, r0
 8007bbc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */

  /* ##-1- Set Application Buffers */
  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, RX_Buffer[cdc_ch]);
 8007bbe:	79fb      	ldrb	r3, [r7, #7]
 8007bc0:	019b      	lsls	r3, r3, #6
 8007bc2:	4a0d      	ldr	r2, [pc, #52]	@ (8007bf8 <CDC_Init+0x44>)
 8007bc4:	441a      	add	r2, r3
 8007bc6:	79fb      	ldrb	r3, [r7, #7]
 8007bc8:	490c      	ldr	r1, [pc, #48]	@ (8007bfc <CDC_Init+0x48>)
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f000 ff9c 	bl	8008b08 <USBD_CDC_SetRxBuffer>

  //  /*##-2- Start the TIM Base generation in interrupt mode ####################*/
  //  /* Start Channel1 */
    if ((HAL_TIM_Base_Start_IT(&htim1) != HAL_OK )||(HAL_TIM_Base_Start_IT(&htim2) != HAL_OK ))
 8007bd0:	480b      	ldr	r0, [pc, #44]	@ (8007c00 <CDC_Init+0x4c>)
 8007bd2:	f7fc feaf 	bl	8004934 <HAL_TIM_Base_Start_IT>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d105      	bne.n	8007be8 <CDC_Init+0x34>
 8007bdc:	4809      	ldr	r0, [pc, #36]	@ (8007c04 <CDC_Init+0x50>)
 8007bde:	f7fc fea9 	bl	8004934 <HAL_TIM_Base_Start_IT>
 8007be2:	4603      	mov	r3, r0
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d001      	beq.n	8007bec <CDC_Init+0x38>
    {
      /* Starting Error */
      Error_Handler();
 8007be8:	f7f8 fed6 	bl	8000998 <Error_Handler>
    }

  return (USBD_OK);
 8007bec:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3708      	adds	r7, #8
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
 8007bf6:	bf00      	nop
 8007bf8:	20000d30 	.word	0x20000d30
 8007bfc:	20000a14 	.word	0x20000a14
 8007c00:	20000394 	.word	0x20000394
 8007c04:	200003dc 	.word	0x200003dc

08007c08 <CDC_DeInit>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit(uint8_t cdc_ch)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b082      	sub	sp, #8
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	4603      	mov	r3, r0
 8007c10:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  /* DeInitialize the UART peripheral */
    if (HAL_UART_DeInit(CDC_CH_To_UART_Handle(cdc_ch)) != HAL_OK)
 8007c12:	79fb      	ldrb	r3, [r7, #7]
 8007c14:	4618      	mov	r0, r3
 8007c16:	f7ff fecd 	bl	80079b4 <CDC_CH_To_UART_Handle>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f7fd faf9 	bl	8005214 <HAL_UART_DeInit>
 8007c22:	4603      	mov	r3, r0
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d001      	beq.n	8007c2c <CDC_DeInit+0x24>
    {
      /* Initialization Error */
      Error_Handler();
 8007c28:	f7f8 feb6 	bl	8000998 <Error_Handler>
    }
  return (USBD_OK);
 8007c2c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3708      	adds	r7, #8
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}
	...

08007c38 <CDC_Control>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control(uint8_t cdc_ch, uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b082      	sub	sp, #8
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	603a      	str	r2, [r7, #0]
 8007c40:	461a      	mov	r2, r3
 8007c42:	4603      	mov	r3, r0
 8007c44:	71fb      	strb	r3, [r7, #7]
 8007c46:	460b      	mov	r3, r1
 8007c48:	71bb      	strb	r3, [r7, #6]
 8007c4a:	4613      	mov	r3, r2
 8007c4c:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd)
 8007c4e:	79bb      	ldrb	r3, [r7, #6]
 8007c50:	2b23      	cmp	r3, #35	@ 0x23
 8007c52:	f200 80ba 	bhi.w	8007dca <CDC_Control+0x192>
 8007c56:	a201      	add	r2, pc, #4	@ (adr r2, 8007c5c <CDC_Control+0x24>)
 8007c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c5c:	08007dcb 	.word	0x08007dcb
 8007c60:	08007dcb 	.word	0x08007dcb
 8007c64:	08007dcb 	.word	0x08007dcb
 8007c68:	08007dcb 	.word	0x08007dcb
 8007c6c:	08007dcb 	.word	0x08007dcb
 8007c70:	08007dcb 	.word	0x08007dcb
 8007c74:	08007dcb 	.word	0x08007dcb
 8007c78:	08007dcb 	.word	0x08007dcb
 8007c7c:	08007dcb 	.word	0x08007dcb
 8007c80:	08007dcb 	.word	0x08007dcb
 8007c84:	08007dcb 	.word	0x08007dcb
 8007c88:	08007dcb 	.word	0x08007dcb
 8007c8c:	08007dcb 	.word	0x08007dcb
 8007c90:	08007dcb 	.word	0x08007dcb
 8007c94:	08007dcb 	.word	0x08007dcb
 8007c98:	08007dcb 	.word	0x08007dcb
 8007c9c:	08007dcb 	.word	0x08007dcb
 8007ca0:	08007dcb 	.word	0x08007dcb
 8007ca4:	08007dcb 	.word	0x08007dcb
 8007ca8:	08007dcb 	.word	0x08007dcb
 8007cac:	08007dcb 	.word	0x08007dcb
 8007cb0:	08007dcb 	.word	0x08007dcb
 8007cb4:	08007dcb 	.word	0x08007dcb
 8007cb8:	08007dcb 	.word	0x08007dcb
 8007cbc:	08007dcb 	.word	0x08007dcb
 8007cc0:	08007dcb 	.word	0x08007dcb
 8007cc4:	08007dcb 	.word	0x08007dcb
 8007cc8:	08007dcb 	.word	0x08007dcb
 8007ccc:	08007dcb 	.word	0x08007dcb
 8007cd0:	08007dcb 	.word	0x08007dcb
 8007cd4:	08007dcb 	.word	0x08007dcb
 8007cd8:	08007dcb 	.word	0x08007dcb
 8007cdc:	08007ced 	.word	0x08007ced
 8007ce0:	08007d55 	.word	0x08007d55
 8007ce4:	08007dcb 	.word	0x08007dcb
 8007ce8:	08007dcb 	.word	0x08007dcb
    /*                                        3 - Mark                             */
    /*                                        4 - Space                            */
    /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
    /*******************************************************************************/
  case CDC_SET_LINE_CODING:
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	461a      	mov	r2, r3
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	3301      	adds	r3, #1
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	021b      	lsls	r3, r3, #8
 8007cfa:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	3302      	adds	r3, #2
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	041b      	lsls	r3, r3, #16
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8007d04:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	3303      	adds	r3, #3
 8007d0a:	781b      	ldrb	r3, [r3, #0]
 8007d0c:	061b      	lsls	r3, r3, #24
 8007d0e:	431a      	orrs	r2, r3
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8007d10:	79fb      	ldrb	r3, [r7, #7]
 8007d12:	4611      	mov	r1, r2
 8007d14:	4a30      	ldr	r2, [pc, #192]	@ (8007dd8 <CDC_Control+0x1a0>)
 8007d16:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    Line_Coding[cdc_ch].format = pbuf[4];
 8007d1a:	79fb      	ldrb	r3, [r7, #7]
 8007d1c:	683a      	ldr	r2, [r7, #0]
 8007d1e:	7911      	ldrb	r1, [r2, #4]
 8007d20:	4a2d      	ldr	r2, [pc, #180]	@ (8007dd8 <CDC_Control+0x1a0>)
 8007d22:	00db      	lsls	r3, r3, #3
 8007d24:	4413      	add	r3, r2
 8007d26:	460a      	mov	r2, r1
 8007d28:	711a      	strb	r2, [r3, #4]
    Line_Coding[cdc_ch].paritytype = pbuf[5];
 8007d2a:	79fb      	ldrb	r3, [r7, #7]
 8007d2c:	683a      	ldr	r2, [r7, #0]
 8007d2e:	7951      	ldrb	r1, [r2, #5]
 8007d30:	4a29      	ldr	r2, [pc, #164]	@ (8007dd8 <CDC_Control+0x1a0>)
 8007d32:	00db      	lsls	r3, r3, #3
 8007d34:	4413      	add	r3, r2
 8007d36:	460a      	mov	r2, r1
 8007d38:	715a      	strb	r2, [r3, #5]
    Line_Coding[cdc_ch].datatype = pbuf[6];
 8007d3a:	79fb      	ldrb	r3, [r7, #7]
 8007d3c:	683a      	ldr	r2, [r7, #0]
 8007d3e:	7991      	ldrb	r1, [r2, #6]
 8007d40:	4a25      	ldr	r2, [pc, #148]	@ (8007dd8 <CDC_Control+0x1a0>)
 8007d42:	00db      	lsls	r3, r3, #3
 8007d44:	4413      	add	r3, r2
 8007d46:	460a      	mov	r2, r1
 8007d48:	719a      	strb	r2, [r3, #6]

    Change_UART_Setting(cdc_ch);
 8007d4a:	79fb      	ldrb	r3, [r7, #7]
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f7ff fe5d 	bl	8007a0c <Change_UART_Setting>
    break;
 8007d52:	e03b      	b.n	8007dcc <CDC_Control+0x194>

  case CDC_GET_LINE_CODING:
    pbuf[0] = (uint8_t)(Line_Coding[cdc_ch].bitrate);
 8007d54:	79fb      	ldrb	r3, [r7, #7]
 8007d56:	4a20      	ldr	r2, [pc, #128]	@ (8007dd8 <CDC_Control+0x1a0>)
 8007d58:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007d5c:	b2da      	uxtb	r2, r3
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	701a      	strb	r2, [r3, #0]
    pbuf[1] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 8);
 8007d62:	79fb      	ldrb	r3, [r7, #7]
 8007d64:	4a1c      	ldr	r2, [pc, #112]	@ (8007dd8 <CDC_Control+0x1a0>)
 8007d66:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007d6a:	0a1a      	lsrs	r2, r3, #8
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	3301      	adds	r3, #1
 8007d70:	b2d2      	uxtb	r2, r2
 8007d72:	701a      	strb	r2, [r3, #0]
    pbuf[2] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 16);
 8007d74:	79fb      	ldrb	r3, [r7, #7]
 8007d76:	4a18      	ldr	r2, [pc, #96]	@ (8007dd8 <CDC_Control+0x1a0>)
 8007d78:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007d7c:	0c1a      	lsrs	r2, r3, #16
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	3302      	adds	r3, #2
 8007d82:	b2d2      	uxtb	r2, r2
 8007d84:	701a      	strb	r2, [r3, #0]
    pbuf[3] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 24);
 8007d86:	79fb      	ldrb	r3, [r7, #7]
 8007d88:	4a13      	ldr	r2, [pc, #76]	@ (8007dd8 <CDC_Control+0x1a0>)
 8007d8a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007d8e:	0e1a      	lsrs	r2, r3, #24
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	3303      	adds	r3, #3
 8007d94:	b2d2      	uxtb	r2, r2
 8007d96:	701a      	strb	r2, [r3, #0]
    pbuf[4] = Line_Coding[cdc_ch].format;
 8007d98:	79fb      	ldrb	r3, [r7, #7]
 8007d9a:	683a      	ldr	r2, [r7, #0]
 8007d9c:	3204      	adds	r2, #4
 8007d9e:	490e      	ldr	r1, [pc, #56]	@ (8007dd8 <CDC_Control+0x1a0>)
 8007da0:	00db      	lsls	r3, r3, #3
 8007da2:	440b      	add	r3, r1
 8007da4:	791b      	ldrb	r3, [r3, #4]
 8007da6:	7013      	strb	r3, [r2, #0]
    pbuf[5] = Line_Coding[cdc_ch].paritytype;
 8007da8:	79fb      	ldrb	r3, [r7, #7]
 8007daa:	683a      	ldr	r2, [r7, #0]
 8007dac:	3205      	adds	r2, #5
 8007dae:	490a      	ldr	r1, [pc, #40]	@ (8007dd8 <CDC_Control+0x1a0>)
 8007db0:	00db      	lsls	r3, r3, #3
 8007db2:	440b      	add	r3, r1
 8007db4:	795b      	ldrb	r3, [r3, #5]
 8007db6:	7013      	strb	r3, [r2, #0]
    pbuf[6] = Line_Coding[cdc_ch].datatype;
 8007db8:	79fb      	ldrb	r3, [r7, #7]
 8007dba:	683a      	ldr	r2, [r7, #0]
 8007dbc:	3206      	adds	r2, #6
 8007dbe:	4906      	ldr	r1, [pc, #24]	@ (8007dd8 <CDC_Control+0x1a0>)
 8007dc0:	00db      	lsls	r3, r3, #3
 8007dc2:	440b      	add	r3, r1
 8007dc4:	799b      	ldrb	r3, [r3, #6]
 8007dc6:	7013      	strb	r3, [r2, #0]
    break;
 8007dc8:	e000      	b.n	8007dcc <CDC_Control+0x194>
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007dca:	bf00      	nop
  }

  return (USBD_OK);
 8007dcc:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3708      	adds	r7, #8
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	20000db0 	.word	0x20000db0

08007ddc <CDC_Receive>:
//  USBD_CDC_ReceivePacket(cdc_ch, &hUsbDevice);
//  return (USBD_OK);
//  /* USER CODE END 6 */
//}
static int8_t CDC_Receive(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len)
{
 8007ddc:	b5b0      	push	{r4, r5, r7, lr}
 8007dde:	b086      	sub	sp, #24
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	4603      	mov	r3, r0
 8007de4:	60b9      	str	r1, [r7, #8]
 8007de6:	607a      	str	r2, [r7, #4]
 8007de8:	73fb      	strb	r3, [r7, #15]
  for (uint32_t i = 0; i < *Len; i++)
 8007dea:	2300      	movs	r3, #0
 8007dec:	617b      	str	r3, [r7, #20]
 8007dee:	e021      	b.n	8007e34 <CDC_Receive+0x58>
  {
    CDC_RX_Buffer[cdc_ch][CDC_RX_WriteIndex[cdc_ch]++] = Buf[i];
 8007df0:	68ba      	ldr	r2, [r7, #8]
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	18d0      	adds	r0, r2, r3
 8007df6:	7bf9      	ldrb	r1, [r7, #15]
 8007df8:	7bfa      	ldrb	r2, [r7, #15]
 8007dfa:	4b19      	ldr	r3, [pc, #100]	@ (8007e60 <CDC_Receive+0x84>)
 8007dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e00:	1c5c      	adds	r4, r3, #1
 8007e02:	4d17      	ldr	r5, [pc, #92]	@ (8007e60 <CDC_Receive+0x84>)
 8007e04:	f845 4022 	str.w	r4, [r5, r2, lsl #2]
 8007e08:	7804      	ldrb	r4, [r0, #0]
 8007e0a:	4816      	ldr	r0, [pc, #88]	@ (8007e64 <CDC_Receive+0x88>)
 8007e0c:	030a      	lsls	r2, r1, #12
 8007e0e:	4402      	add	r2, r0
 8007e10:	4413      	add	r3, r2
 8007e12:	4622      	mov	r2, r4
 8007e14:	701a      	strb	r2, [r3, #0]
    if (CDC_RX_WriteIndex[cdc_ch] >= CDC_RX_BUFFER_SIZE)
 8007e16:	7bfb      	ldrb	r3, [r7, #15]
 8007e18:	4a11      	ldr	r2, [pc, #68]	@ (8007e60 <CDC_Receive+0x84>)
 8007e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e22:	d304      	bcc.n	8007e2e <CDC_Receive+0x52>
      CDC_RX_WriteIndex[cdc_ch] = 0;
 8007e24:	7bfb      	ldrb	r3, [r7, #15]
 8007e26:	4a0e      	ldr	r2, [pc, #56]	@ (8007e60 <CDC_Receive+0x84>)
 8007e28:	2100      	movs	r1, #0
 8007e2a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (uint32_t i = 0; i < *Len; i++)
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	3301      	adds	r3, #1
 8007e32:	617b      	str	r3, [r7, #20]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	697a      	ldr	r2, [r7, #20]
 8007e3a:	429a      	cmp	r2, r3
 8007e3c:	d3d8      	bcc.n	8007df0 <CDC_Receive+0x14>
  }

  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, Buf);
 8007e3e:	7bfb      	ldrb	r3, [r7, #15]
 8007e40:	68ba      	ldr	r2, [r7, #8]
 8007e42:	4909      	ldr	r1, [pc, #36]	@ (8007e68 <CDC_Receive+0x8c>)
 8007e44:	4618      	mov	r0, r3
 8007e46:	f000 fe5f 	bl	8008b08 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(cdc_ch, &hUsbDevice);
 8007e4a:	7bfb      	ldrb	r3, [r7, #15]
 8007e4c:	4906      	ldr	r1, [pc, #24]	@ (8007e68 <CDC_Receive+0x8c>)
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f000 feba 	bl	8008bc8 <USBD_CDC_ReceivePacket>
  return USBD_OK;
 8007e54:	2300      	movs	r3, #0
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3718      	adds	r7, #24
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bdb0      	pop	{r4, r5, r7, pc}
 8007e5e:	bf00      	nop
 8007e60:	20001dc0 	.word	0x20001dc0
 8007e64:	20000dc0 	.word	0x20000dc0
 8007e68:	20000a14 	.word	0x20000a14

08007e6c <CDC_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b085      	sub	sp, #20
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	60b9      	str	r1, [r7, #8]
 8007e74:	607a      	str	r2, [r7, #4]
 8007e76:	461a      	mov	r2, r3
 8007e78:	4603      	mov	r3, r0
 8007e7a:	73fb      	strb	r3, [r7, #15]
 8007e7c:	4613      	mov	r3, r2
 8007e7e:	73bb      	strb	r3, [r7, #14]
  return (USBD_OK);
 8007e80:	2300      	movs	r3, #0
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3714      	adds	r7, #20
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr
	...

08007e90 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b084      	sub	sp, #16
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  uint8_t ch = UART_Handle_TO_CDC_CH(huart);
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f7ff fda1 	bl	80079e0 <UART_Handle_TO_CDC_CH>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	73fb      	strb	r3, [r7, #15]
  if (ch >= NUMBER_OF_CDC) return;
 8007ea2:	7bfb      	ldrb	r3, [r7, #15]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d11c      	bne.n	8007ee2 <HAL_UART_TxCpltCallback+0x52>

  // Cập nhật ReadIndex sau khi truyền xong
  if (CDC_RX_ReadIndex[ch] > CDC_RX_WriteIndex[ch])
 8007ea8:	7bfb      	ldrb	r3, [r7, #15]
 8007eaa:	4a10      	ldr	r2, [pc, #64]	@ (8007eec <HAL_UART_TxCpltCallback+0x5c>)
 8007eac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007eb0:	7bfb      	ldrb	r3, [r7, #15]
 8007eb2:	490f      	ldr	r1, [pc, #60]	@ (8007ef0 <HAL_UART_TxCpltCallback+0x60>)
 8007eb4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d905      	bls.n	8007ec8 <HAL_UART_TxCpltCallback+0x38>
  {
    CDC_RX_ReadIndex[ch] = 0;
 8007ebc:	7bfb      	ldrb	r3, [r7, #15]
 8007ebe:	4a0b      	ldr	r2, [pc, #44]	@ (8007eec <HAL_UART_TxCpltCallback+0x5c>)
 8007ec0:	2100      	movs	r1, #0
 8007ec2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8007ec6:	e007      	b.n	8007ed8 <HAL_UART_TxCpltCallback+0x48>
  }
  else
  {
    CDC_RX_ReadIndex[ch] = CDC_RX_WriteIndex[ch];
 8007ec8:	7bfa      	ldrb	r2, [r7, #15]
 8007eca:	7bfb      	ldrb	r3, [r7, #15]
 8007ecc:	4908      	ldr	r1, [pc, #32]	@ (8007ef0 <HAL_UART_TxCpltCallback+0x60>)
 8007ece:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007ed2:	4906      	ldr	r1, [pc, #24]	@ (8007eec <HAL_UART_TxCpltCallback+0x5c>)
 8007ed4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }

  uart_tx_busy[ch] = 0;
 8007ed8:	7bfb      	ldrb	r3, [r7, #15]
 8007eda:	4a06      	ldr	r2, [pc, #24]	@ (8007ef4 <HAL_UART_TxCpltCallback+0x64>)
 8007edc:	2100      	movs	r1, #0
 8007ede:	54d1      	strb	r1, [r2, r3]
 8007ee0:	e000      	b.n	8007ee4 <HAL_UART_TxCpltCallback+0x54>
  if (ch >= NUMBER_OF_CDC) return;
 8007ee2:	bf00      	nop
}
 8007ee4:	3710      	adds	r7, #16
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}
 8007eea:	bf00      	nop
 8007eec:	20001dc4 	.word	0x20001dc4
 8007ef0:	20001dc0 	.word	0x20001dc0
 8007ef4:	20001dc8 	.word	0x20001dc8

08007ef8 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b088      	sub	sp, #32
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	4a63      	ldr	r2, [pc, #396]	@ (8008090 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d15e      	bne.n	8007fc6 <HAL_TIM_PeriodElapsedCallback+0xce>
	{
	  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8007f08:	2300      	movs	r3, #0
 8007f0a:	77fb      	strb	r3, [r7, #31]
 8007f0c:	e058      	b.n	8007fc0 <HAL_TIM_PeriodElapsedCallback+0xc8>
	  {
	    if (CDC_RX_ReadIndex[i] != CDC_RX_WriteIndex[i])
 8007f0e:	7ffb      	ldrb	r3, [r7, #31]
 8007f10:	4a60      	ldr	r2, [pc, #384]	@ (8008094 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8007f12:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007f16:	7ffb      	ldrb	r3, [r7, #31]
 8007f18:	495f      	ldr	r1, [pc, #380]	@ (8008098 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8007f1a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d04b      	beq.n	8007fba <HAL_TIM_PeriodElapsedCallback+0xc2>
	    {
	      uint32_t buffptr = CDC_RX_ReadIndex[i];
 8007f22:	7ffb      	ldrb	r3, [r7, #31]
 8007f24:	4a5b      	ldr	r2, [pc, #364]	@ (8008094 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8007f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f2a:	60fb      	str	r3, [r7, #12]
	      uint32_t buffsize;

	      if (CDC_RX_ReadIndex[i] > CDC_RX_WriteIndex[i])
 8007f2c:	7ffb      	ldrb	r3, [r7, #31]
 8007f2e:	4a59      	ldr	r2, [pc, #356]	@ (8008094 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8007f30:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007f34:	7ffb      	ldrb	r3, [r7, #31]
 8007f36:	4958      	ldr	r1, [pc, #352]	@ (8008098 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8007f38:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d907      	bls.n	8007f50 <HAL_TIM_PeriodElapsedCallback+0x58>
	        buffsize = CDC_RX_BUFFER_SIZE - CDC_RX_ReadIndex[i];
 8007f40:	7ffb      	ldrb	r3, [r7, #31]
 8007f42:	4a54      	ldr	r2, [pc, #336]	@ (8008094 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8007f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f48:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8007f4c:	61bb      	str	r3, [r7, #24]
 8007f4e:	e009      	b.n	8007f64 <HAL_TIM_PeriodElapsedCallback+0x6c>
	      else
	        buffsize = CDC_RX_WriteIndex[i] - CDC_RX_ReadIndex[i];
 8007f50:	7ffb      	ldrb	r3, [r7, #31]
 8007f52:	4a51      	ldr	r2, [pc, #324]	@ (8008098 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8007f54:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007f58:	7ffb      	ldrb	r3, [r7, #31]
 8007f5a:	494e      	ldr	r1, [pc, #312]	@ (8008094 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8007f5c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007f60:	1ad3      	subs	r3, r2, r3
 8007f62:	61bb      	str	r3, [r7, #24]

	      // Chặn kích thước nếu quá lớn (optional)
	      if (buffsize > 64) buffsize = 64;
 8007f64:	69bb      	ldr	r3, [r7, #24]
 8007f66:	2b40      	cmp	r3, #64	@ 0x40
 8007f68:	d901      	bls.n	8007f6e <HAL_TIM_PeriodElapsedCallback+0x76>
 8007f6a:	2340      	movs	r3, #64	@ 0x40
 8007f6c:	61bb      	str	r3, [r7, #24]

	      HAL_UART_Transmit(CDC_CH_To_UART_Handle(i), &CDC_RX_Buffer[i][buffptr], buffsize, HAL_MAX_DELAY);
 8007f6e:	7ffb      	ldrb	r3, [r7, #31]
 8007f70:	4618      	mov	r0, r3
 8007f72:	f7ff fd1f 	bl	80079b4 <CDC_CH_To_UART_Handle>
 8007f76:	7ffb      	ldrb	r3, [r7, #31]
 8007f78:	031a      	lsls	r2, r3, #12
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	4413      	add	r3, r2
 8007f7e:	4a47      	ldr	r2, [pc, #284]	@ (800809c <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8007f80:	1899      	adds	r1, r3, r2
 8007f82:	69bb      	ldr	r3, [r7, #24]
 8007f84:	b29a      	uxth	r2, r3
 8007f86:	f04f 33ff 	mov.w	r3, #4294967295
 8007f8a:	f7fd f975 	bl	8005278 <HAL_UART_Transmit>

	      CDC_RX_ReadIndex[i] += buffsize;
 8007f8e:	7ffb      	ldrb	r3, [r7, #31]
 8007f90:	4a40      	ldr	r2, [pc, #256]	@ (8008094 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8007f92:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007f96:	7ffb      	ldrb	r3, [r7, #31]
 8007f98:	69ba      	ldr	r2, [r7, #24]
 8007f9a:	440a      	add	r2, r1
 8007f9c:	493d      	ldr	r1, [pc, #244]	@ (8008094 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8007f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	      if (CDC_RX_ReadIndex[i] >= CDC_RX_BUFFER_SIZE)
 8007fa2:	7ffb      	ldrb	r3, [r7, #31]
 8007fa4:	4a3b      	ldr	r2, [pc, #236]	@ (8008094 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8007fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007faa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fae:	d304      	bcc.n	8007fba <HAL_TIM_PeriodElapsedCallback+0xc2>
	        CDC_RX_ReadIndex[i] = 0;
 8007fb0:	7ffb      	ldrb	r3, [r7, #31]
 8007fb2:	4a38      	ldr	r2, [pc, #224]	@ (8008094 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8007fb4:	2100      	movs	r1, #0
 8007fb6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8007fba:	7ffb      	ldrb	r3, [r7, #31]
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	77fb      	strb	r3, [r7, #31]
 8007fc0:	7ffb      	ldrb	r3, [r7, #31]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d0a3      	beq.n	8007f0e <HAL_TIM_PeriodElapsedCallback+0x16>
	    }
	  }
	}

if (htim == &htim1){
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	4a35      	ldr	r2, [pc, #212]	@ (80080a0 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d15b      	bne.n	8008086 <HAL_TIM_PeriodElapsedCallback+0x18e>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8007fce:	2300      	movs	r3, #0
 8007fd0:	75fb      	strb	r3, [r7, #23]
 8007fd2:	e055      	b.n	8008080 <HAL_TIM_PeriodElapsedCallback+0x188>
  {
    uint32_t buffptr;
    uint32_t buffsize;

    if (Read_Index[i] != Write_Index[i])
 8007fd4:	7dfb      	ldrb	r3, [r7, #23]
 8007fd6:	4a33      	ldr	r2, [pc, #204]	@ (80080a4 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8007fd8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007fdc:	7dfb      	ldrb	r3, [r7, #23]
 8007fde:	4932      	ldr	r1, [pc, #200]	@ (80080a8 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8007fe0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d048      	beq.n	800807a <HAL_TIM_PeriodElapsedCallback+0x182>
    {
      if (Read_Index[i] > Write_Index[i]) /* Rollback */
 8007fe8:	7dfb      	ldrb	r3, [r7, #23]
 8007fea:	4a2e      	ldr	r2, [pc, #184]	@ (80080a4 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8007fec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007ff0:	7dfb      	ldrb	r3, [r7, #23]
 8007ff2:	492d      	ldr	r1, [pc, #180]	@ (80080a8 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8007ff4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d907      	bls.n	800800c <HAL_TIM_PeriodElapsedCallback+0x114>
      {
        buffsize = APP_TX_DATA_SIZE - Read_Index[i];
 8007ffc:	7dfb      	ldrb	r3, [r7, #23]
 8007ffe:	4a29      	ldr	r2, [pc, #164]	@ (80080a4 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8008000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008004:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8008008:	613b      	str	r3, [r7, #16]
 800800a:	e009      	b.n	8008020 <HAL_TIM_PeriodElapsedCallback+0x128>
      }
      else
      {
        buffsize = Write_Index[i] - Read_Index[i];
 800800c:	7dfb      	ldrb	r3, [r7, #23]
 800800e:	4a26      	ldr	r2, [pc, #152]	@ (80080a8 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8008010:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008014:	7dfb      	ldrb	r3, [r7, #23]
 8008016:	4923      	ldr	r1, [pc, #140]	@ (80080a4 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8008018:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800801c:	1ad3      	subs	r3, r2, r3
 800801e:	613b      	str	r3, [r7, #16]
      }

      buffptr = Read_Index[i];
 8008020:	7dfb      	ldrb	r3, [r7, #23]
 8008022:	4a20      	ldr	r2, [pc, #128]	@ (80080a4 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8008024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008028:	60bb      	str	r3, [r7, #8]

      USBD_CDC_SetTxBuffer(i, &hUsbDevice, &TX_Buffer[i][buffptr], buffsize);
 800802a:	7dfb      	ldrb	r3, [r7, #23]
 800802c:	019a      	lsls	r2, r3, #6
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	4413      	add	r3, r2
 8008032:	4a1e      	ldr	r2, [pc, #120]	@ (80080ac <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8008034:	441a      	add	r2, r3
 8008036:	7df8      	ldrb	r0, [r7, #23]
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	491d      	ldr	r1, [pc, #116]	@ (80080b0 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 800803c:	f000 fd40 	bl	8008ac0 <USBD_CDC_SetTxBuffer>

      if (USBD_CDC_TransmitPacket(i, &hUsbDevice) == USBD_OK)
 8008040:	7dfb      	ldrb	r3, [r7, #23]
 8008042:	491b      	ldr	r1, [pc, #108]	@ (80080b0 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8008044:	4618      	mov	r0, r3
 8008046:	f000 fd7d 	bl	8008b44 <USBD_CDC_TransmitPacket>
 800804a:	4603      	mov	r3, r0
 800804c:	2b00      	cmp	r3, #0
 800804e:	d114      	bne.n	800807a <HAL_TIM_PeriodElapsedCallback+0x182>
      {
        Read_Index[i] += buffsize;
 8008050:	7dfb      	ldrb	r3, [r7, #23]
 8008052:	4a14      	ldr	r2, [pc, #80]	@ (80080a4 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8008054:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008058:	7dfb      	ldrb	r3, [r7, #23]
 800805a:	693a      	ldr	r2, [r7, #16]
 800805c:	440a      	add	r2, r1
 800805e:	4911      	ldr	r1, [pc, #68]	@ (80080a4 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8008060:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if (Read_Index[i] == APP_RX_DATA_SIZE)
 8008064:	7dfb      	ldrb	r3, [r7, #23]
 8008066:	4a0f      	ldr	r2, [pc, #60]	@ (80080a4 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8008068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800806c:	2b40      	cmp	r3, #64	@ 0x40
 800806e:	d104      	bne.n	800807a <HAL_TIM_PeriodElapsedCallback+0x182>
        {
          Read_Index[i] = 0;
 8008070:	7dfb      	ldrb	r3, [r7, #23]
 8008072:	4a0c      	ldr	r2, [pc, #48]	@ (80080a4 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8008074:	2100      	movs	r1, #0
 8008076:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800807a:	7dfb      	ldrb	r3, [r7, #23]
 800807c:	3301      	adds	r3, #1
 800807e:	75fb      	strb	r3, [r7, #23]
 8008080:	7dfb      	ldrb	r3, [r7, #23]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d0a6      	beq.n	8007fd4 <HAL_TIM_PeriodElapsedCallback+0xdc>
      }
    }
  }
	}

}
 8008086:	bf00      	nop
 8008088:	3720      	adds	r7, #32
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}
 800808e:	bf00      	nop
 8008090:	200003dc 	.word	0x200003dc
 8008094:	20001dc4 	.word	0x20001dc4
 8008098:	20001dc0 	.word	0x20001dc0
 800809c:	20000dc0 	.word	0x20000dc0
 80080a0:	20000394 	.word	0x20000394
 80080a4:	20000dbc 	.word	0x20000dbc
 80080a8:	20000db8 	.word	0x20000db8
 80080ac:	20000d70 	.word	0x20000d70
 80080b0:	20000a14 	.word	0x20000a14

080080b4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b084      	sub	sp, #16
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  uint8_t cdc_ch = UART_Handle_TO_CDC_CH(huart);
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f7ff fc8f 	bl	80079e0 <UART_Handle_TO_CDC_CH>
 80080c2:	4603      	mov	r3, r0
 80080c4:	73fb      	strb	r3, [r7, #15]
  //CDC_Transmit(cdc_ch, (TX_Buffer[cdc_ch] + Write_Index[cdc_ch]), 1);
  /* Increment Index for buffer writing */
  Write_Index[cdc_ch]++;
 80080c6:	7bfb      	ldrb	r3, [r7, #15]
 80080c8:	4a11      	ldr	r2, [pc, #68]	@ (8008110 <HAL_UART_RxCpltCallback+0x5c>)
 80080ca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80080ce:	3201      	adds	r2, #1
 80080d0:	490f      	ldr	r1, [pc, #60]	@ (8008110 <HAL_UART_RxCpltCallback+0x5c>)
 80080d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  /* To avoid buffer overflow */
  if (Write_Index[cdc_ch] == APP_RX_DATA_SIZE)
 80080d6:	7bfb      	ldrb	r3, [r7, #15]
 80080d8:	4a0d      	ldr	r2, [pc, #52]	@ (8008110 <HAL_UART_RxCpltCallback+0x5c>)
 80080da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080de:	2b40      	cmp	r3, #64	@ 0x40
 80080e0:	d104      	bne.n	80080ec <HAL_UART_RxCpltCallback+0x38>
  {
    Write_Index[cdc_ch] = 0;
 80080e2:	7bfb      	ldrb	r3, [r7, #15]
 80080e4:	4a0a      	ldr	r2, [pc, #40]	@ (8008110 <HAL_UART_RxCpltCallback+0x5c>)
 80080e6:	2100      	movs	r1, #0
 80080e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  }

  /* Start another reception: provide the buffer pointer with offset and the buffer size */
  HAL_UART_Receive_IT(huart, (TX_Buffer[cdc_ch] + Write_Index[cdc_ch]), 1);
 80080ec:	7bfb      	ldrb	r3, [r7, #15]
 80080ee:	019b      	lsls	r3, r3, #6
 80080f0:	4a08      	ldr	r2, [pc, #32]	@ (8008114 <HAL_UART_RxCpltCallback+0x60>)
 80080f2:	441a      	add	r2, r3
 80080f4:	7bfb      	ldrb	r3, [r7, #15]
 80080f6:	4906      	ldr	r1, [pc, #24]	@ (8008110 <HAL_UART_RxCpltCallback+0x5c>)
 80080f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80080fc:	4413      	add	r3, r2
 80080fe:	2201      	movs	r2, #1
 8008100:	4619      	mov	r1, r3
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f7fd f943 	bl	800538e <HAL_UART_Receive_IT>
}
 8008108:	bf00      	nop
 800810a:	3710      	adds	r7, #16
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}
 8008110:	20000db8 	.word	0x20000db8
 8008114:	20000d70 	.word	0x20000d70

08008118 <USBD_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
 800811e:	4603      	mov	r3, r0
 8008120:	6039      	str	r1, [r7, #0]
 8008122:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_DeviceDesc);
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	2212      	movs	r2, #18
 8008128:	801a      	strh	r2, [r3, #0]
  return USBD_DeviceDesc;
 800812a:	4b03      	ldr	r3, [pc, #12]	@ (8008138 <USBD_DeviceDescriptor+0x20>)
}
 800812c:	4618      	mov	r0, r3
 800812e:	370c      	adds	r7, #12
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr
 8008138:	2000003c 	.word	0x2000003c

0800813c <USBD_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800813c:	b480      	push	{r7}
 800813e:	b083      	sub	sp, #12
 8008140:	af00      	add	r7, sp, #0
 8008142:	4603      	mov	r3, r0
 8008144:	6039      	str	r1, [r7, #0]
 8008146:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	2204      	movs	r2, #4
 800814c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800814e:	4b03      	ldr	r3, [pc, #12]	@ (800815c <USBD_LangIDStrDescriptor+0x20>)
}
 8008150:	4618      	mov	r0, r3
 8008152:	370c      	adds	r7, #12
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr
 800815c:	20000050 	.word	0x20000050

08008160 <USBD_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b082      	sub	sp, #8
 8008164:	af00      	add	r7, sp, #0
 8008166:	4603      	mov	r3, r0
 8008168:	6039      	str	r1, [r7, #0]
 800816a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800816c:	79fb      	ldrb	r3, [r7, #7]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d105      	bne.n	800817e <USBD_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8008172:	683a      	ldr	r2, [r7, #0]
 8008174:	4907      	ldr	r1, [pc, #28]	@ (8008194 <USBD_ProductStrDescriptor+0x34>)
 8008176:	4808      	ldr	r0, [pc, #32]	@ (8008198 <USBD_ProductStrDescriptor+0x38>)
 8008178:	f002 fc45 	bl	800aa06 <USBD_GetString>
 800817c:	e004      	b.n	8008188 <USBD_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800817e:	683a      	ldr	r2, [r7, #0]
 8008180:	4904      	ldr	r1, [pc, #16]	@ (8008194 <USBD_ProductStrDescriptor+0x34>)
 8008182:	4805      	ldr	r0, [pc, #20]	@ (8008198 <USBD_ProductStrDescriptor+0x38>)
 8008184:	f002 fc3f 	bl	800aa06 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008188:	4b02      	ldr	r3, [pc, #8]	@ (8008194 <USBD_ProductStrDescriptor+0x34>)
}
 800818a:	4618      	mov	r0, r3
 800818c:	3708      	adds	r7, #8
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop
 8008194:	20001dcc 	.word	0x20001dcc
 8008198:	0800bb08 	.word	0x0800bb08

0800819c <USBD_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b082      	sub	sp, #8
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	4603      	mov	r3, r0
 80081a4:	6039      	str	r1, [r7, #0]
 80081a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80081a8:	683a      	ldr	r2, [r7, #0]
 80081aa:	4904      	ldr	r1, [pc, #16]	@ (80081bc <USBD_ManufacturerStrDescriptor+0x20>)
 80081ac:	4804      	ldr	r0, [pc, #16]	@ (80081c0 <USBD_ManufacturerStrDescriptor+0x24>)
 80081ae:	f002 fc2a 	bl	800aa06 <USBD_GetString>
  return USBD_StrDesc;
 80081b2:	4b02      	ldr	r3, [pc, #8]	@ (80081bc <USBD_ManufacturerStrDescriptor+0x20>)
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3708      	adds	r7, #8
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}
 80081bc:	20001dcc 	.word	0x20001dcc
 80081c0:	0800bb20 	.word	0x0800bb20

080081c4 <USBD_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b082      	sub	sp, #8
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	4603      	mov	r3, r0
 80081cc:	6039      	str	r1, [r7, #0]
 80081ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	221a      	movs	r2, #26
 80081d4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80081d6:	f000 f843 	bl	8008260 <Get_SerialNum>
  /* USER CODE BEGIN USBD_SerialStrDescriptor */

  /* USER CODE END USBD_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80081da:	4b02      	ldr	r3, [pc, #8]	@ (80081e4 <USBD_SerialStrDescriptor+0x20>)
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3708      	adds	r7, #8
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}
 80081e4:	20000054 	.word	0x20000054

080081e8 <USBD_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b082      	sub	sp, #8
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	4603      	mov	r3, r0
 80081f0:	6039      	str	r1, [r7, #0]
 80081f2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80081f4:	79fb      	ldrb	r3, [r7, #7]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d105      	bne.n	8008206 <USBD_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80081fa:	683a      	ldr	r2, [r7, #0]
 80081fc:	4907      	ldr	r1, [pc, #28]	@ (800821c <USBD_ConfigStrDescriptor+0x34>)
 80081fe:	4808      	ldr	r0, [pc, #32]	@ (8008220 <USBD_ConfigStrDescriptor+0x38>)
 8008200:	f002 fc01 	bl	800aa06 <USBD_GetString>
 8008204:	e004      	b.n	8008210 <USBD_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8008206:	683a      	ldr	r2, [r7, #0]
 8008208:	4904      	ldr	r1, [pc, #16]	@ (800821c <USBD_ConfigStrDescriptor+0x34>)
 800820a:	4805      	ldr	r0, [pc, #20]	@ (8008220 <USBD_ConfigStrDescriptor+0x38>)
 800820c:	f002 fbfb 	bl	800aa06 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008210:	4b02      	ldr	r3, [pc, #8]	@ (800821c <USBD_ConfigStrDescriptor+0x34>)
}
 8008212:	4618      	mov	r0, r3
 8008214:	3708      	adds	r7, #8
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
 800821a:	bf00      	nop
 800821c:	20001dcc 	.word	0x20001dcc
 8008220:	0800bb34 	.word	0x0800bb34

08008224 <USBD_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b082      	sub	sp, #8
 8008228:	af00      	add	r7, sp, #0
 800822a:	4603      	mov	r3, r0
 800822c:	6039      	str	r1, [r7, #0]
 800822e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008230:	79fb      	ldrb	r3, [r7, #7]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d105      	bne.n	8008242 <USBD_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008236:	683a      	ldr	r2, [r7, #0]
 8008238:	4907      	ldr	r1, [pc, #28]	@ (8008258 <USBD_InterfaceStrDescriptor+0x34>)
 800823a:	4808      	ldr	r0, [pc, #32]	@ (800825c <USBD_InterfaceStrDescriptor+0x38>)
 800823c:	f002 fbe3 	bl	800aa06 <USBD_GetString>
 8008240:	e004      	b.n	800824c <USBD_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008242:	683a      	ldr	r2, [r7, #0]
 8008244:	4904      	ldr	r1, [pc, #16]	@ (8008258 <USBD_InterfaceStrDescriptor+0x34>)
 8008246:	4805      	ldr	r0, [pc, #20]	@ (800825c <USBD_InterfaceStrDescriptor+0x38>)
 8008248:	f002 fbdd 	bl	800aa06 <USBD_GetString>
  }
  return USBD_StrDesc;
 800824c:	4b02      	ldr	r3, [pc, #8]	@ (8008258 <USBD_InterfaceStrDescriptor+0x34>)
}
 800824e:	4618      	mov	r0, r3
 8008250:	3708      	adds	r7, #8
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
 8008256:	bf00      	nop
 8008258:	20001dcc 	.word	0x20001dcc
 800825c:	0800bb44 	.word	0x0800bb44

08008260 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b084      	sub	sp, #16
 8008264:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008266:	4b0f      	ldr	r3, [pc, #60]	@ (80082a4 <Get_SerialNum+0x44>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800826c:	4b0e      	ldr	r3, [pc, #56]	@ (80082a8 <Get_SerialNum+0x48>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008272:	4b0e      	ldr	r3, [pc, #56]	@ (80082ac <Get_SerialNum+0x4c>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008278:	68fa      	ldr	r2, [r7, #12]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	4413      	add	r3, r2
 800827e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d009      	beq.n	800829a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008286:	2208      	movs	r2, #8
 8008288:	4909      	ldr	r1, [pc, #36]	@ (80082b0 <Get_SerialNum+0x50>)
 800828a:	68f8      	ldr	r0, [r7, #12]
 800828c:	f000 f814 	bl	80082b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008290:	2204      	movs	r2, #4
 8008292:	4908      	ldr	r1, [pc, #32]	@ (80082b4 <Get_SerialNum+0x54>)
 8008294:	68b8      	ldr	r0, [r7, #8]
 8008296:	f000 f80f 	bl	80082b8 <IntToUnicode>
  }
}
 800829a:	bf00      	nop
 800829c:	3710      	adds	r7, #16
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}
 80082a2:	bf00      	nop
 80082a4:	1fff7a10 	.word	0x1fff7a10
 80082a8:	1fff7a14 	.word	0x1fff7a14
 80082ac:	1fff7a18 	.word	0x1fff7a18
 80082b0:	20000056 	.word	0x20000056
 80082b4:	20000066 	.word	0x20000066

080082b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b087      	sub	sp, #28
 80082bc:	af00      	add	r7, sp, #0
 80082be:	60f8      	str	r0, [r7, #12]
 80082c0:	60b9      	str	r1, [r7, #8]
 80082c2:	4613      	mov	r3, r2
 80082c4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80082c6:	2300      	movs	r3, #0
 80082c8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80082ca:	2300      	movs	r3, #0
 80082cc:	75fb      	strb	r3, [r7, #23]
 80082ce:	e027      	b.n	8008320 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	0f1b      	lsrs	r3, r3, #28
 80082d4:	2b09      	cmp	r3, #9
 80082d6:	d80b      	bhi.n	80082f0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	0f1b      	lsrs	r3, r3, #28
 80082dc:	b2da      	uxtb	r2, r3
 80082de:	7dfb      	ldrb	r3, [r7, #23]
 80082e0:	005b      	lsls	r3, r3, #1
 80082e2:	4619      	mov	r1, r3
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	440b      	add	r3, r1
 80082e8:	3230      	adds	r2, #48	@ 0x30
 80082ea:	b2d2      	uxtb	r2, r2
 80082ec:	701a      	strb	r2, [r3, #0]
 80082ee:	e00a      	b.n	8008306 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	0f1b      	lsrs	r3, r3, #28
 80082f4:	b2da      	uxtb	r2, r3
 80082f6:	7dfb      	ldrb	r3, [r7, #23]
 80082f8:	005b      	lsls	r3, r3, #1
 80082fa:	4619      	mov	r1, r3
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	440b      	add	r3, r1
 8008300:	3237      	adds	r2, #55	@ 0x37
 8008302:	b2d2      	uxtb	r2, r2
 8008304:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	011b      	lsls	r3, r3, #4
 800830a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800830c:	7dfb      	ldrb	r3, [r7, #23]
 800830e:	005b      	lsls	r3, r3, #1
 8008310:	3301      	adds	r3, #1
 8008312:	68ba      	ldr	r2, [r7, #8]
 8008314:	4413      	add	r3, r2
 8008316:	2200      	movs	r2, #0
 8008318:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800831a:	7dfb      	ldrb	r3, [r7, #23]
 800831c:	3301      	adds	r3, #1
 800831e:	75fb      	strb	r3, [r7, #23]
 8008320:	7dfa      	ldrb	r2, [r7, #23]
 8008322:	79fb      	ldrb	r3, [r7, #7]
 8008324:	429a      	cmp	r2, r3
 8008326:	d3d3      	bcc.n	80082d0 <IntToUnicode+0x18>
  }
}
 8008328:	bf00      	nop
 800832a:	bf00      	nop
 800832c:	371c      	adds	r7, #28
 800832e:	46bd      	mov	sp, r7
 8008330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008334:	4770      	bx	lr

08008336 <CUSTOM_HID_Init>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init(void)
{
 8008336:	b480      	push	{r7}
 8008338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800833a:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800833c:	4618      	mov	r0, r3
 800833e:	46bd      	mov	sp, r7
 8008340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008344:	4770      	bx	lr

08008346 <CUSTOM_HID_DeInit>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit(void)
{
 8008346:	b480      	push	{r7}
 8008348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800834a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800834c:	4618      	mov	r0, r3
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr

08008356 <CUSTOM_HID_OutEvent>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent(uint8_t event_idx, uint8_t state)
{
 8008356:	b480      	push	{r7}
 8008358:	b083      	sub	sp, #12
 800835a:	af00      	add	r7, sp, #0
 800835c:	4603      	mov	r3, r0
 800835e:	460a      	mov	r2, r1
 8008360:	71fb      	strb	r3, [r7, #7]
 8008362:	4613      	mov	r3, r2
 8008364:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  //memcpy(buffer, state, 0x40);
  //USBD_CUSTOM_HID_SendReport(&hUsbDevice, (uint8_t *)buffer, 0x40);
  return (USBD_OK);
 8008366:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008368:	4618      	mov	r0, r3
 800836a:	370c      	adds	r7, #12
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr

08008374 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b084      	sub	sp, #16
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	460b      	mov	r3, r1
 800837e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8008380:	2300      	movs	r3, #0
 8008382:	60bb      	str	r3, [r7, #8]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8008384:	2300      	movs	r3, #0
 8008386:	73fb      	strb	r3, [r7, #15]
 8008388:	e0c6      	b.n	8008518 <USBD_CDC_Init+0x1a4>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 800838a:	7bfb      	ldrb	r3, [r7, #15]
 800838c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008390:	fb02 f303 	mul.w	r3, r2, r3
 8008394:	4a65      	ldr	r2, [pc, #404]	@ (800852c <USBD_CDC_Init+0x1b8>)
 8008396:	4413      	add	r3, r2
 8008398:	60bb      	str	r3, [r7, #8]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	7c1b      	ldrb	r3, [r3, #16]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d13d      	bne.n	800841e <USBD_CDC_Init+0xaa>
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 80083a2:	7bfb      	ldrb	r3, [r7, #15]
 80083a4:	4a62      	ldr	r2, [pc, #392]	@ (8008530 <USBD_CDC_Init+0x1bc>)
 80083a6:	5cd1      	ldrb	r1, [r2, r3]
 80083a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80083ac:	2202      	movs	r2, #2
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f002 fd9b 	bl	800aeea <USBD_LL_OpenEP>
                           CDC_DATA_HS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 80083b4:	7bfb      	ldrb	r3, [r7, #15]
 80083b6:	4a5e      	ldr	r2, [pc, #376]	@ (8008530 <USBD_CDC_Init+0x1bc>)
 80083b8:	5cd3      	ldrb	r3, [r2, r3]
 80083ba:	f003 020f 	and.w	r2, r3, #15
 80083be:	6879      	ldr	r1, [r7, #4]
 80083c0:	4613      	mov	r3, r2
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	4413      	add	r3, r2
 80083c6:	009b      	lsls	r3, r3, #2
 80083c8:	440b      	add	r3, r1
 80083ca:	3324      	adds	r3, #36	@ 0x24
 80083cc:	2201      	movs	r2, #1
 80083ce:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 80083d0:	7bfb      	ldrb	r3, [r7, #15]
 80083d2:	4a58      	ldr	r2, [pc, #352]	@ (8008534 <USBD_CDC_Init+0x1c0>)
 80083d4:	5cd1      	ldrb	r1, [r2, r3]
 80083d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80083da:	2202      	movs	r2, #2
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f002 fd84 	bl	800aeea <USBD_LL_OpenEP>
                           CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 80083e2:	7bfb      	ldrb	r3, [r7, #15]
 80083e4:	4a53      	ldr	r2, [pc, #332]	@ (8008534 <USBD_CDC_Init+0x1c0>)
 80083e6:	5cd3      	ldrb	r3, [r2, r3]
 80083e8:	f003 020f 	and.w	r2, r3, #15
 80083ec:	6879      	ldr	r1, [r7, #4]
 80083ee:	4613      	mov	r3, r2
 80083f0:	009b      	lsls	r3, r3, #2
 80083f2:	4413      	add	r3, r2
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	440b      	add	r3, r1
 80083f8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80083fc:	2201      	movs	r2, #1
 80083fe:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008400:	7bfb      	ldrb	r3, [r7, #15]
 8008402:	4a4d      	ldr	r2, [pc, #308]	@ (8008538 <USBD_CDC_Init+0x1c4>)
 8008404:	5cd3      	ldrb	r3, [r2, r3]
 8008406:	f003 020f 	and.w	r2, r3, #15
 800840a:	6879      	ldr	r1, [r7, #4]
 800840c:	4613      	mov	r3, r2
 800840e:	009b      	lsls	r3, r3, #2
 8008410:	4413      	add	r3, r2
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	440b      	add	r3, r1
 8008416:	3326      	adds	r3, #38	@ 0x26
 8008418:	2210      	movs	r2, #16
 800841a:	801a      	strh	r2, [r3, #0]
 800841c:	e03a      	b.n	8008494 <USBD_CDC_Init+0x120>
    }
    else
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 800841e:	7bfb      	ldrb	r3, [r7, #15]
 8008420:	4a43      	ldr	r2, [pc, #268]	@ (8008530 <USBD_CDC_Init+0x1bc>)
 8008422:	5cd1      	ldrb	r1, [r2, r3]
 8008424:	2340      	movs	r3, #64	@ 0x40
 8008426:	2202      	movs	r2, #2
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f002 fd5e 	bl	800aeea <USBD_LL_OpenEP>
                           CDC_DATA_FS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 800842e:	7bfb      	ldrb	r3, [r7, #15]
 8008430:	4a3f      	ldr	r2, [pc, #252]	@ (8008530 <USBD_CDC_Init+0x1bc>)
 8008432:	5cd3      	ldrb	r3, [r2, r3]
 8008434:	f003 020f 	and.w	r2, r3, #15
 8008438:	6879      	ldr	r1, [r7, #4]
 800843a:	4613      	mov	r3, r2
 800843c:	009b      	lsls	r3, r3, #2
 800843e:	4413      	add	r3, r2
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	440b      	add	r3, r1
 8008444:	3324      	adds	r3, #36	@ 0x24
 8008446:	2201      	movs	r2, #1
 8008448:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 800844a:	7bfb      	ldrb	r3, [r7, #15]
 800844c:	4a39      	ldr	r2, [pc, #228]	@ (8008534 <USBD_CDC_Init+0x1c0>)
 800844e:	5cd1      	ldrb	r1, [r2, r3]
 8008450:	2340      	movs	r3, #64	@ 0x40
 8008452:	2202      	movs	r2, #2
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f002 fd48 	bl	800aeea <USBD_LL_OpenEP>
                           CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 800845a:	7bfb      	ldrb	r3, [r7, #15]
 800845c:	4a35      	ldr	r2, [pc, #212]	@ (8008534 <USBD_CDC_Init+0x1c0>)
 800845e:	5cd3      	ldrb	r3, [r2, r3]
 8008460:	f003 020f 	and.w	r2, r3, #15
 8008464:	6879      	ldr	r1, [r7, #4]
 8008466:	4613      	mov	r3, r2
 8008468:	009b      	lsls	r3, r3, #2
 800846a:	4413      	add	r3, r2
 800846c:	009b      	lsls	r3, r3, #2
 800846e:	440b      	add	r3, r1
 8008470:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008474:	2201      	movs	r2, #1
 8008476:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008478:	7bfb      	ldrb	r3, [r7, #15]
 800847a:	4a2f      	ldr	r2, [pc, #188]	@ (8008538 <USBD_CDC_Init+0x1c4>)
 800847c:	5cd3      	ldrb	r3, [r2, r3]
 800847e:	f003 020f 	and.w	r2, r3, #15
 8008482:	6879      	ldr	r1, [r7, #4]
 8008484:	4613      	mov	r3, r2
 8008486:	009b      	lsls	r3, r3, #2
 8008488:	4413      	add	r3, r2
 800848a:	009b      	lsls	r3, r3, #2
 800848c:	440b      	add	r3, r1
 800848e:	3326      	adds	r3, #38	@ 0x26
 8008490:	2210      	movs	r2, #16
 8008492:	801a      	strh	r2, [r3, #0]
    }

    /* Open Command IN EP */
    (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP[i], USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008494:	7bfb      	ldrb	r3, [r7, #15]
 8008496:	4a28      	ldr	r2, [pc, #160]	@ (8008538 <USBD_CDC_Init+0x1c4>)
 8008498:	5cd1      	ldrb	r1, [r2, r3]
 800849a:	2308      	movs	r3, #8
 800849c:	2203      	movs	r2, #3
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f002 fd23 	bl	800aeea <USBD_LL_OpenEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 1U;
 80084a4:	7bfb      	ldrb	r3, [r7, #15]
 80084a6:	4a24      	ldr	r2, [pc, #144]	@ (8008538 <USBD_CDC_Init+0x1c4>)
 80084a8:	5cd3      	ldrb	r3, [r2, r3]
 80084aa:	f003 020f 	and.w	r2, r3, #15
 80084ae:	6879      	ldr	r1, [r7, #4]
 80084b0:	4613      	mov	r3, r2
 80084b2:	009b      	lsls	r3, r3, #2
 80084b4:	4413      	add	r3, r2
 80084b6:	009b      	lsls	r3, r3, #2
 80084b8:	440b      	add	r3, r1
 80084ba:	3324      	adds	r3, #36	@ 0x24
 80084bc:	2201      	movs	r2, #1
 80084be:	801a      	strh	r2, [r3, #0]

    /* Init  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Init(i);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	7bfa      	ldrb	r2, [r7, #15]
 80084ca:	4610      	mov	r0, r2
 80084cc:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	2200      	movs	r2, #0
 80084d2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	2200      	movs	r2, #0
 80084da:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	7c1b      	ldrb	r3, [r3, #16]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d10b      	bne.n	80084fe <USBD_CDC_Init+0x18a>
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 80084e6:	7bfb      	ldrb	r3, [r7, #15]
 80084e8:	4a12      	ldr	r2, [pc, #72]	@ (8008534 <USBD_CDC_Init+0x1c0>)
 80084ea:	5cd1      	ldrb	r1, [r2, r3]
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80084f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f002 fde6 	bl	800b0c8 <USBD_LL_PrepareReceive>
 80084fc:	e009      	b.n	8008512 <USBD_CDC_Init+0x19e>
                                   CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 80084fe:	7bfb      	ldrb	r3, [r7, #15]
 8008500:	4a0c      	ldr	r2, [pc, #48]	@ (8008534 <USBD_CDC_Init+0x1c0>)
 8008502:	5cd1      	ldrb	r1, [r2, r3]
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800850a:	2340      	movs	r3, #64	@ 0x40
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f002 fddb 	bl	800b0c8 <USBD_LL_PrepareReceive>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8008512:	7bfb      	ldrb	r3, [r7, #15]
 8008514:	3301      	adds	r3, #1
 8008516:	73fb      	strb	r3, [r7, #15]
 8008518:	7bfb      	ldrb	r3, [r7, #15]
 800851a:	2b00      	cmp	r3, #0
 800851c:	f43f af35 	beq.w	800838a <USBD_CDC_Init+0x16>
                                   CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return (uint8_t)USBD_OK;
 8008520:	2300      	movs	r3, #0
}
 8008522:	4618      	mov	r0, r3
 8008524:	3710      	adds	r7, #16
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
 800852a:	bf00      	nop
 800852c:	20001fe4 	.word	0x20001fe4
 8008530:	20001fcc 	.word	0x20001fcc
 8008534:	20001fd0 	.word	0x20001fd0
 8008538:	20001fd4 	.word	0x20001fd4

0800853c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b084      	sub	sp, #16
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	460b      	mov	r3, r1
 8008546:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8008548:	2300      	movs	r3, #0
 800854a:	73fb      	strb	r3, [r7, #15]
 800854c:	e057      	b.n	80085fe <USBD_CDC_DeInit+0xc2>
  {
    /* Close EP IN */
    (void)USBD_LL_CloseEP(pdev, CDC_IN_EP[i]);
 800854e:	7bfb      	ldrb	r3, [r7, #15]
 8008550:	4a2f      	ldr	r2, [pc, #188]	@ (8008610 <USBD_CDC_DeInit+0xd4>)
 8008552:	5cd3      	ldrb	r3, [r2, r3]
 8008554:	4619      	mov	r1, r3
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f002 fced 	bl	800af36 <USBD_LL_CloseEP>
    pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 0U;
 800855c:	7bfb      	ldrb	r3, [r7, #15]
 800855e:	4a2c      	ldr	r2, [pc, #176]	@ (8008610 <USBD_CDC_DeInit+0xd4>)
 8008560:	5cd3      	ldrb	r3, [r2, r3]
 8008562:	f003 020f 	and.w	r2, r3, #15
 8008566:	6879      	ldr	r1, [r7, #4]
 8008568:	4613      	mov	r3, r2
 800856a:	009b      	lsls	r3, r3, #2
 800856c:	4413      	add	r3, r2
 800856e:	009b      	lsls	r3, r3, #2
 8008570:	440b      	add	r3, r1
 8008572:	3324      	adds	r3, #36	@ 0x24
 8008574:	2200      	movs	r2, #0
 8008576:	801a      	strh	r2, [r3, #0]

    /* Close EP OUT */
    (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP[i]);
 8008578:	7bfb      	ldrb	r3, [r7, #15]
 800857a:	4a26      	ldr	r2, [pc, #152]	@ (8008614 <USBD_CDC_DeInit+0xd8>)
 800857c:	5cd3      	ldrb	r3, [r2, r3]
 800857e:	4619      	mov	r1, r3
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f002 fcd8 	bl	800af36 <USBD_LL_CloseEP>
    pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 0U;
 8008586:	7bfb      	ldrb	r3, [r7, #15]
 8008588:	4a22      	ldr	r2, [pc, #136]	@ (8008614 <USBD_CDC_DeInit+0xd8>)
 800858a:	5cd3      	ldrb	r3, [r2, r3]
 800858c:	f003 020f 	and.w	r2, r3, #15
 8008590:	6879      	ldr	r1, [r7, #4]
 8008592:	4613      	mov	r3, r2
 8008594:	009b      	lsls	r3, r3, #2
 8008596:	4413      	add	r3, r2
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	440b      	add	r3, r1
 800859c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80085a0:	2200      	movs	r2, #0
 80085a2:	801a      	strh	r2, [r3, #0]

    /* Close Command IN EP */
    (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP[i]);
 80085a4:	7bfb      	ldrb	r3, [r7, #15]
 80085a6:	4a1c      	ldr	r2, [pc, #112]	@ (8008618 <USBD_CDC_DeInit+0xdc>)
 80085a8:	5cd3      	ldrb	r3, [r2, r3]
 80085aa:	4619      	mov	r1, r3
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f002 fcc2 	bl	800af36 <USBD_LL_CloseEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 0U;
 80085b2:	7bfb      	ldrb	r3, [r7, #15]
 80085b4:	4a18      	ldr	r2, [pc, #96]	@ (8008618 <USBD_CDC_DeInit+0xdc>)
 80085b6:	5cd3      	ldrb	r3, [r2, r3]
 80085b8:	f003 020f 	and.w	r2, r3, #15
 80085bc:	6879      	ldr	r1, [r7, #4]
 80085be:	4613      	mov	r3, r2
 80085c0:	009b      	lsls	r3, r3, #2
 80085c2:	4413      	add	r3, r2
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	440b      	add	r3, r1
 80085c8:	3324      	adds	r3, #36	@ 0x24
 80085ca:	2200      	movs	r2, #0
 80085cc:	801a      	strh	r2, [r3, #0]
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = 0U;
 80085ce:	7bfb      	ldrb	r3, [r7, #15]
 80085d0:	4a11      	ldr	r2, [pc, #68]	@ (8008618 <USBD_CDC_DeInit+0xdc>)
 80085d2:	5cd3      	ldrb	r3, [r2, r3]
 80085d4:	f003 020f 	and.w	r2, r3, #15
 80085d8:	6879      	ldr	r1, [r7, #4]
 80085da:	4613      	mov	r3, r2
 80085dc:	009b      	lsls	r3, r3, #2
 80085de:	4413      	add	r3, r2
 80085e0:	009b      	lsls	r3, r3, #2
 80085e2:	440b      	add	r3, r1
 80085e4:	3326      	adds	r3, #38	@ 0x26
 80085e6:	2200      	movs	r2, #0
 80085e8:	801a      	strh	r2, [r3, #0]

    /* DeInit  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->DeInit(i);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	7bfa      	ldrb	r2, [r7, #15]
 80085f4:	4610      	mov	r0, r2
 80085f6:	4798      	blx	r3
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80085f8:	7bfb      	ldrb	r3, [r7, #15]
 80085fa:	3301      	adds	r3, #1
 80085fc:	73fb      	strb	r3, [r7, #15]
 80085fe:	7bfb      	ldrb	r3, [r7, #15]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d0a4      	beq.n	800854e <USBD_CDC_DeInit+0x12>
  }
  return (uint8_t)USBD_OK;
 8008604:	2300      	movs	r3, #0
}
 8008606:	4618      	mov	r0, r3
 8008608:	3710      	adds	r7, #16
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
 800860e:	bf00      	nop
 8008610:	20001fcc 	.word	0x20001fcc
 8008614:	20001fd0 	.word	0x20001fd0
 8008618:	20001fd4 	.word	0x20001fd4

0800861c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800861c:	b590      	push	{r4, r7, lr}
 800861e:	b087      	sub	sp, #28
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	6039      	str	r1, [r7, #0]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8008626:	2300      	movs	r3, #0
 8008628:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800862a:	2300      	movs	r3, #0
 800862c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800862e:	2300      	movs	r3, #0
 8008630:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008632:	2300      	movs	r3, #0
 8008634:	75fb      	strb	r3, [r7, #23]

  uint8_t windex_to_ch = 0;
 8008636:	2300      	movs	r3, #0
 8008638:	75bb      	strb	r3, [r7, #22]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800863a:	2300      	movs	r3, #0
 800863c:	757b      	strb	r3, [r7, #21]
 800863e:	e015      	b.n	800866c <USBD_CDC_Setup+0x50>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	889b      	ldrh	r3, [r3, #4]
 8008644:	b2da      	uxtb	r2, r3
 8008646:	7d7b      	ldrb	r3, [r7, #21]
 8008648:	496d      	ldr	r1, [pc, #436]	@ (8008800 <USBD_CDC_Setup+0x1e4>)
 800864a:	5ccb      	ldrb	r3, [r1, r3]
 800864c:	429a      	cmp	r2, r3
 800864e:	d007      	beq.n	8008660 <USBD_CDC_Setup+0x44>
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	889b      	ldrh	r3, [r3, #4]
 8008654:	b2da      	uxtb	r2, r3
 8008656:	7d7b      	ldrb	r3, [r7, #21]
 8008658:	496a      	ldr	r1, [pc, #424]	@ (8008804 <USBD_CDC_Setup+0x1e8>)
 800865a:	5ccb      	ldrb	r3, [r1, r3]
 800865c:	429a      	cmp	r2, r3
 800865e:	d102      	bne.n	8008666 <USBD_CDC_Setup+0x4a>
    {
      windex_to_ch = i;
 8008660:	7d7b      	ldrb	r3, [r7, #21]
 8008662:	75bb      	strb	r3, [r7, #22]
      break;
 8008664:	e005      	b.n	8008672 <USBD_CDC_Setup+0x56>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8008666:	7d7b      	ldrb	r3, [r7, #21]
 8008668:	3301      	adds	r3, #1
 800866a:	757b      	strb	r3, [r7, #21]
 800866c:	7d7b      	ldrb	r3, [r7, #21]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d0e6      	beq.n	8008640 <USBD_CDC_Setup+0x24>
    }
  }

  hcdc = &CDC_ACM_Class_Data[windex_to_ch];
 8008672:	7dbb      	ldrb	r3, [r7, #22]
 8008674:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008678:	fb02 f303 	mul.w	r3, r2, r3
 800867c:	4a62      	ldr	r2, [pc, #392]	@ (8008808 <USBD_CDC_Setup+0x1ec>)
 800867e:	4413      	add	r3, r2
 8008680:	613b      	str	r3, [r7, #16]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	781b      	ldrb	r3, [r3, #0]
 8008686:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800868a:	2b00      	cmp	r3, #0
 800868c:	d04a      	beq.n	8008724 <USBD_CDC_Setup+0x108>
 800868e:	2b20      	cmp	r3, #32
 8008690:	f040 80aa 	bne.w	80087e8 <USBD_CDC_Setup+0x1cc>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	88db      	ldrh	r3, [r3, #6]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d038      	beq.n	800870e <USBD_CDC_Setup+0xf2>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	b25b      	sxtb	r3, r3
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	da1d      	bge.n	80086e2 <USBD_CDC_Setup+0xc6>
      {
        ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80086ac:	689c      	ldr	r4, [r3, #8]
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	7859      	ldrb	r1, [r3, #1]
 80086b2:	7dbb      	ldrb	r3, [r7, #22]
 80086b4:	025b      	lsls	r3, r3, #9
 80086b6:	693a      	ldr	r2, [r7, #16]
 80086b8:	441a      	add	r2, r3
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	88db      	ldrh	r3, [r3, #6]
 80086be:	7db8      	ldrb	r0, [r7, #22]
 80086c0:	47a0      	blx	r4

        len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	88db      	ldrh	r3, [r3, #6]
 80086c6:	2b07      	cmp	r3, #7
 80086c8:	bf28      	it	cs
 80086ca:	2307      	movcs	r3, #7
 80086cc:	81fb      	strh	r3, [r7, #14]
        (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data[windex_to_ch], len);
 80086ce:	7dbb      	ldrb	r3, [r7, #22]
 80086d0:	025b      	lsls	r3, r3, #9
 80086d2:	693a      	ldr	r2, [r7, #16]
 80086d4:	4413      	add	r3, r2
 80086d6:	89fa      	ldrh	r2, [r7, #14]
 80086d8:	4619      	mov	r1, r3
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f002 f9f3 	bl	800aac6 <USBD_CtlSendData>
    }
    else
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
    }
    break;
 80086e0:	e089      	b.n	80087f6 <USBD_CDC_Setup+0x1da>
        hcdc->CmdOpCode = req->bRequest;
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	785a      	ldrb	r2, [r3, #1]
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	88db      	ldrh	r3, [r3, #6]
 80086f0:	b2da      	uxtb	r2, r3
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 80086f8:	7dbb      	ldrb	r3, [r7, #22]
 80086fa:	025b      	lsls	r3, r3, #9
 80086fc:	693a      	ldr	r2, [r7, #16]
 80086fe:	18d1      	adds	r1, r2, r3
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	88db      	ldrh	r3, [r3, #6]
 8008704:	461a      	mov	r2, r3
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f002 fa09 	bl	800ab1e <USBD_CtlPrepareRx>
    break;
 800870c:	e073      	b.n	80087f6 <USBD_CDC_Setup+0x1da>
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008714:	689c      	ldr	r4, [r3, #8]
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	7859      	ldrb	r1, [r3, #1]
 800871a:	7db8      	ldrb	r0, [r7, #22]
 800871c:	2300      	movs	r3, #0
 800871e:	683a      	ldr	r2, [r7, #0]
 8008720:	47a0      	blx	r4
    break;
 8008722:	e068      	b.n	80087f6 <USBD_CDC_Setup+0x1da>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	785b      	ldrb	r3, [r3, #1]
 8008728:	2b0b      	cmp	r3, #11
 800872a:	d852      	bhi.n	80087d2 <USBD_CDC_Setup+0x1b6>
 800872c:	a201      	add	r2, pc, #4	@ (adr r2, 8008734 <USBD_CDC_Setup+0x118>)
 800872e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008732:	bf00      	nop
 8008734:	08008765 	.word	0x08008765
 8008738:	080087e1 	.word	0x080087e1
 800873c:	080087d3 	.word	0x080087d3
 8008740:	080087d3 	.word	0x080087d3
 8008744:	080087d3 	.word	0x080087d3
 8008748:	080087d3 	.word	0x080087d3
 800874c:	080087d3 	.word	0x080087d3
 8008750:	080087d3 	.word	0x080087d3
 8008754:	080087d3 	.word	0x080087d3
 8008758:	080087d3 	.word	0x080087d3
 800875c:	0800878f 	.word	0x0800878f
 8008760:	080087b9 	.word	0x080087b9
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800876a:	b2db      	uxtb	r3, r3
 800876c:	2b03      	cmp	r3, #3
 800876e:	d107      	bne.n	8008780 <USBD_CDC_Setup+0x164>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008770:	f107 030a 	add.w	r3, r7, #10
 8008774:	2202      	movs	r2, #2
 8008776:	4619      	mov	r1, r3
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f002 f9a4 	bl	800aac6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800877e:	e032      	b.n	80087e6 <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 8008780:	6839      	ldr	r1, [r7, #0]
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f002 f92e 	bl	800a9e4 <USBD_CtlError>
        ret = USBD_FAIL;
 8008788:	2303      	movs	r3, #3
 800878a:	75fb      	strb	r3, [r7, #23]
      break;
 800878c:	e02b      	b.n	80087e6 <USBD_CDC_Setup+0x1ca>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008794:	b2db      	uxtb	r3, r3
 8008796:	2b03      	cmp	r3, #3
 8008798:	d107      	bne.n	80087aa <USBD_CDC_Setup+0x18e>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800879a:	f107 030d 	add.w	r3, r7, #13
 800879e:	2201      	movs	r2, #1
 80087a0:	4619      	mov	r1, r3
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f002 f98f 	bl	800aac6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80087a8:	e01d      	b.n	80087e6 <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 80087aa:	6839      	ldr	r1, [r7, #0]
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f002 f919 	bl	800a9e4 <USBD_CtlError>
        ret = USBD_FAIL;
 80087b2:	2303      	movs	r3, #3
 80087b4:	75fb      	strb	r3, [r7, #23]
      break;
 80087b6:	e016      	b.n	80087e6 <USBD_CDC_Setup+0x1ca>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087be:	b2db      	uxtb	r3, r3
 80087c0:	2b03      	cmp	r3, #3
 80087c2:	d00f      	beq.n	80087e4 <USBD_CDC_Setup+0x1c8>
      {
        USBD_CtlError(pdev, req);
 80087c4:	6839      	ldr	r1, [r7, #0]
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f002 f90c 	bl	800a9e4 <USBD_CtlError>
        ret = USBD_FAIL;
 80087cc:	2303      	movs	r3, #3
 80087ce:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80087d0:	e008      	b.n	80087e4 <USBD_CDC_Setup+0x1c8>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80087d2:	6839      	ldr	r1, [r7, #0]
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f002 f905 	bl	800a9e4 <USBD_CtlError>
      ret = USBD_FAIL;
 80087da:	2303      	movs	r3, #3
 80087dc:	75fb      	strb	r3, [r7, #23]
      break;
 80087de:	e002      	b.n	80087e6 <USBD_CDC_Setup+0x1ca>
      break;
 80087e0:	bf00      	nop
 80087e2:	e008      	b.n	80087f6 <USBD_CDC_Setup+0x1da>
      break;
 80087e4:	bf00      	nop
    }
    break;
 80087e6:	e006      	b.n	80087f6 <USBD_CDC_Setup+0x1da>

  default:
    USBD_CtlError(pdev, req);
 80087e8:	6839      	ldr	r1, [r7, #0]
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f002 f8fa 	bl	800a9e4 <USBD_CtlError>
    ret = USBD_FAIL;
 80087f0:	2303      	movs	r3, #3
 80087f2:	75fb      	strb	r3, [r7, #23]
    break;
 80087f4:	bf00      	nop
  }

  return (uint8_t)ret;
 80087f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	371c      	adds	r7, #28
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd90      	pop	{r4, r7, pc}
 8008800:	20001fd8 	.word	0x20001fd8
 8008804:	20001fdc 	.word	0x20001fdc
 8008808:	20001fe4 	.word	0x20001fe4

0800880c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800880c:	b590      	push	{r4, r7, lr}
 800880e:	b087      	sub	sp, #28
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	460b      	mov	r3, r1
 8008816:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8008818:	2300      	movs	r3, #0
 800881a:	613b      	str	r3, [r7, #16]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 8008822:	60fb      	str	r3, [r7, #12]
  uint8_t ep_to_ch = 0;
 8008824:	2300      	movs	r3, #0
 8008826:	75fb      	strb	r3, [r7, #23]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8008828:	2300      	movs	r3, #0
 800882a:	75bb      	strb	r3, [r7, #22]
 800882c:	e00d      	b.n	800884a <USBD_CDC_DataIn+0x3e>
  {
    if (epnum == (CDC_IN_EP[i] & 0x0F))
 800882e:	78fa      	ldrb	r2, [r7, #3]
 8008830:	7dbb      	ldrb	r3, [r7, #22]
 8008832:	4934      	ldr	r1, [pc, #208]	@ (8008904 <USBD_CDC_DataIn+0xf8>)
 8008834:	5ccb      	ldrb	r3, [r1, r3]
 8008836:	f003 030f 	and.w	r3, r3, #15
 800883a:	429a      	cmp	r2, r3
 800883c:	d102      	bne.n	8008844 <USBD_CDC_DataIn+0x38>
    {
      ep_to_ch = i;
 800883e:	7dbb      	ldrb	r3, [r7, #22]
 8008840:	75fb      	strb	r3, [r7, #23]
      break;
 8008842:	e005      	b.n	8008850 <USBD_CDC_DataIn+0x44>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8008844:	7dbb      	ldrb	r3, [r7, #22]
 8008846:	3301      	adds	r3, #1
 8008848:	75bb      	strb	r3, [r7, #22]
 800884a:	7dbb      	ldrb	r3, [r7, #22]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d0ee      	beq.n	800882e <USBD_CDC_DataIn+0x22>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 8008850:	7dfb      	ldrb	r3, [r7, #23]
 8008852:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008856:	fb02 f303 	mul.w	r3, r2, r3
 800885a:	4a2b      	ldr	r2, [pc, #172]	@ (8008908 <USBD_CDC_DataIn+0xfc>)
 800885c:	4413      	add	r3, r2
 800885e:	613b      	str	r3, [r7, #16]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008860:	78fa      	ldrb	r2, [r7, #3]
 8008862:	6879      	ldr	r1, [r7, #4]
 8008864:	4613      	mov	r3, r2
 8008866:	009b      	lsls	r3, r3, #2
 8008868:	4413      	add	r3, r2
 800886a:	009b      	lsls	r3, r3, #2
 800886c:	440b      	add	r3, r1
 800886e:	3318      	adds	r3, #24
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d029      	beq.n	80088ca <USBD_CDC_DataIn+0xbe>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008876:	78fa      	ldrb	r2, [r7, #3]
 8008878:	6879      	ldr	r1, [r7, #4]
 800887a:	4613      	mov	r3, r2
 800887c:	009b      	lsls	r3, r3, #2
 800887e:	4413      	add	r3, r2
 8008880:	009b      	lsls	r3, r3, #2
 8008882:	440b      	add	r3, r1
 8008884:	3318      	adds	r3, #24
 8008886:	681a      	ldr	r2, [r3, #0]
 8008888:	78f9      	ldrb	r1, [r7, #3]
 800888a:	68f8      	ldr	r0, [r7, #12]
 800888c:	460b      	mov	r3, r1
 800888e:	00db      	lsls	r3, r3, #3
 8008890:	440b      	add	r3, r1
 8008892:	009b      	lsls	r3, r3, #2
 8008894:	4403      	add	r3, r0
 8008896:	331c      	adds	r3, #28
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	fbb2 f1f3 	udiv	r1, r2, r3
 800889e:	fb01 f303 	mul.w	r3, r1, r3
 80088a2:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d110      	bne.n	80088ca <USBD_CDC_DataIn+0xbe>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80088a8:	78fa      	ldrb	r2, [r7, #3]
 80088aa:	6879      	ldr	r1, [r7, #4]
 80088ac:	4613      	mov	r3, r2
 80088ae:	009b      	lsls	r3, r3, #2
 80088b0:	4413      	add	r3, r2
 80088b2:	009b      	lsls	r3, r3, #2
 80088b4:	440b      	add	r3, r1
 80088b6:	3318      	adds	r3, #24
 80088b8:	2200      	movs	r2, #0
 80088ba:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80088bc:	78f9      	ldrb	r1, [r7, #3]
 80088be:	2300      	movs	r3, #0
 80088c0:	2200      	movs	r2, #0
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f002 fbdf 	bl	800b086 <USBD_LL_Transmit>
 80088c8:	e016      	b.n	80088f8 <USBD_CDC_DataIn+0xec>
  }
  else
  {
    hcdc->TxState = 0U;
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	2200      	movs	r2, #0
 80088ce:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt != NULL)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80088d8:	691b      	ldr	r3, [r3, #16]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d00c      	beq.n	80088f8 <USBD_CDC_DataIn+0xec>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt(ep_to_ch, hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80088e4:	691c      	ldr	r4, [r3, #16]
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	f8d3 1208 	ldr.w	r1, [r3, #520]	@ 0x208
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 80088f2:	78fb      	ldrb	r3, [r7, #3]
 80088f4:	7df8      	ldrb	r0, [r7, #23]
 80088f6:	47a0      	blx	r4
    }
  }

  return (uint8_t)USBD_OK;
 80088f8:	2300      	movs	r3, #0
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	371c      	adds	r7, #28
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd90      	pop	{r4, r7, pc}
 8008902:	bf00      	nop
 8008904:	20001fcc 	.word	0x20001fcc
 8008908:	20001fe4 	.word	0x20001fe4

0800890c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b084      	sub	sp, #16
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
 8008914:	460b      	mov	r3, r1
 8008916:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8008918:	2300      	movs	r3, #0
 800891a:	60bb      	str	r3, [r7, #8]
  uint8_t ep_to_ch = 0;
 800891c:	2300      	movs	r3, #0
 800891e:	73fb      	strb	r3, [r7, #15]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8008920:	2300      	movs	r3, #0
 8008922:	73bb      	strb	r3, [r7, #14]
 8008924:	e00b      	b.n	800893e <USBD_CDC_DataOut+0x32>
  {
    if (epnum == CDC_OUT_EP[i])
 8008926:	7bbb      	ldrb	r3, [r7, #14]
 8008928:	4a17      	ldr	r2, [pc, #92]	@ (8008988 <USBD_CDC_DataOut+0x7c>)
 800892a:	5cd3      	ldrb	r3, [r2, r3]
 800892c:	78fa      	ldrb	r2, [r7, #3]
 800892e:	429a      	cmp	r2, r3
 8008930:	d102      	bne.n	8008938 <USBD_CDC_DataOut+0x2c>
    {
      ep_to_ch = i;
 8008932:	7bbb      	ldrb	r3, [r7, #14]
 8008934:	73fb      	strb	r3, [r7, #15]
      break;
 8008936:	e005      	b.n	8008944 <USBD_CDC_DataOut+0x38>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8008938:	7bbb      	ldrb	r3, [r7, #14]
 800893a:	3301      	adds	r3, #1
 800893c:	73bb      	strb	r3, [r7, #14]
 800893e:	7bbb      	ldrb	r3, [r7, #14]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d0f0      	beq.n	8008926 <USBD_CDC_DataOut+0x1a>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 8008944:	7bfb      	ldrb	r3, [r7, #15]
 8008946:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800894a:	fb02 f303 	mul.w	r3, r2, r3
 800894e:	4a0f      	ldr	r2, [pc, #60]	@ (800898c <USBD_CDC_DataOut+0x80>)
 8008950:	4413      	add	r3, r2
 8008952:	60bb      	str	r3, [r7, #8]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008954:	78fb      	ldrb	r3, [r7, #3]
 8008956:	4619      	mov	r1, r3
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f002 fbd6 	bl	800b10a <USBD_LL_GetRxDataSize>
 800895e:	4602      	mov	r2, r0
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Receive(ep_to_ch, hcdc->RxBuffer, &hcdc->RxLength);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800896c:	68db      	ldr	r3, [r3, #12]
 800896e:	68ba      	ldr	r2, [r7, #8]
 8008970:	f8d2 1204 	ldr.w	r1, [r2, #516]	@ 0x204
 8008974:	68ba      	ldr	r2, [r7, #8]
 8008976:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800897a:	7bf8      	ldrb	r0, [r7, #15]
 800897c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800897e:	2300      	movs	r3, #0
}
 8008980:	4618      	mov	r0, r3
 8008982:	3710      	adds	r7, #16
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}
 8008988:	20001fd0 	.word	0x20001fd0
 800898c:	20001fe4 	.word	0x20001fe4

08008990 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008990:	b590      	push	{r4, r7, lr}
 8008992:	b085      	sub	sp, #20
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8008998:	2300      	movs	r3, #0
 800899a:	60bb      	str	r3, [r7, #8]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800899c:	2300      	movs	r3, #0
 800899e:	73fb      	strb	r3, [r7, #15]
 80089a0:	e02d      	b.n	80089fe <USBD_CDC_EP0_RxReady+0x6e>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 80089a2:	7bfb      	ldrb	r3, [r7, #15]
 80089a4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80089a8:	fb02 f303 	mul.w	r3, r2, r3
 80089ac:	4a18      	ldr	r2, [pc, #96]	@ (8008a10 <USBD_CDC_EP0_RxReady+0x80>)
 80089ae:	4413      	add	r3, r2
 80089b0:	60bb      	str	r3, [r7, #8]

    if (hcdc == NULL)
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d101      	bne.n	80089bc <USBD_CDC_EP0_RxReady+0x2c>
    {
      return (uint8_t)USBD_FAIL;
 80089b8:	2303      	movs	r3, #3
 80089ba:	e024      	b.n	8008a06 <USBD_CDC_EP0_RxReady+0x76>
    }

    if ((pdev->pUserData_CDC_ACM != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d018      	beq.n	80089f8 <USBD_CDC_EP0_RxReady+0x68>
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80089cc:	2bff      	cmp	r3, #255	@ 0xff
 80089ce:	d013      	beq.n	80089f8 <USBD_CDC_EP0_RxReady+0x68>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(i, hcdc->CmdOpCode, (uint8_t *)hcdc->data[i], (uint16_t)hcdc->CmdLength);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80089d6:	689c      	ldr	r4, [r3, #8]
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	f893 1200 	ldrb.w	r1, [r3, #512]	@ 0x200
 80089de:	7bfb      	ldrb	r3, [r7, #15]
 80089e0:	025b      	lsls	r3, r3, #9
 80089e2:	68ba      	ldr	r2, [r7, #8]
 80089e4:	441a      	add	r2, r3
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80089ec:	7bf8      	ldrb	r0, [r7, #15]
 80089ee:	47a0      	blx	r4
      hcdc->CmdOpCode = 0xFFU;
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	22ff      	movs	r2, #255	@ 0xff
 80089f4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80089f8:	7bfb      	ldrb	r3, [r7, #15]
 80089fa:	3301      	adds	r3, #1
 80089fc:	73fb      	strb	r3, [r7, #15]
 80089fe:	7bfb      	ldrb	r3, [r7, #15]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d0ce      	beq.n	80089a2 <USBD_CDC_EP0_RxReady+0x12>
    }
  }

  return (uint8_t)USBD_OK;
 8008a04:	2300      	movs	r3, #0
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3714      	adds	r7, #20
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd90      	pop	{r4, r7, pc}
 8008a0e:	bf00      	nop
 8008a10:	20001fe4 	.word	0x20001fe4

08008a14 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b083      	sub	sp, #12
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	224b      	movs	r2, #75	@ 0x4b
 8008a20:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8008a22:	4b03      	ldr	r3, [pc, #12]	@ (8008a30 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	370c      	adds	r7, #12
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr
 8008a30:	20000138 	.word	0x20000138

08008a34 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b083      	sub	sp, #12
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	224b      	movs	r2, #75	@ 0x4b
 8008a40:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8008a42:	4b03      	ldr	r3, [pc, #12]	@ (8008a50 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	370c      	adds	r7, #12
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr
 8008a50:	200000ec 	.word	0x200000ec

08008a54 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b083      	sub	sp, #12
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	224b      	movs	r2, #75	@ 0x4b
 8008a60:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8008a62:	4b03      	ldr	r3, [pc, #12]	@ (8008a70 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	370c      	adds	r7, #12
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr
 8008a70:	20000138 	.word	0x20000138

08008a74 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b083      	sub	sp, #12
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	220a      	movs	r2, #10
 8008a80:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008a82:	4b03      	ldr	r3, [pc, #12]	@ (8008a90 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	370c      	adds	r7, #12
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8e:	4770      	bx	lr
 8008a90:	200000a4 	.word	0x200000a4

08008a94 <USBD_CDC_ACM_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_ACM_RegisterInterface(USBD_HandleTypeDef *pdev,
                                       USBD_CDC_ACM_ItfTypeDef *fops)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b083      	sub	sp, #12
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d101      	bne.n	8008aa8 <USBD_CDC_ACM_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008aa4:	2303      	movs	r3, #3
 8008aa6:	e004      	b.n	8008ab2 <USBD_CDC_ACM_RegisterInterface+0x1e>
  }

  pdev->pUserData_CDC_ACM = fops;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	683a      	ldr	r2, [r7, #0]
 8008aac:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  return (uint8_t)USBD_OK;
 8008ab0:	2300      	movs	r3, #0
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	370c      	adds	r7, #12
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abc:	4770      	bx	lr
	...

08008ac0 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b087      	sub	sp, #28
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	60b9      	str	r1, [r7, #8]
 8008ac8:	607a      	str	r2, [r7, #4]
 8008aca:	603b      	str	r3, [r7, #0]
 8008acc:	4603      	mov	r3, r0
 8008ace:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 8008ad4:	7bfb      	ldrb	r3, [r7, #15]
 8008ad6:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008ada:	fb02 f303 	mul.w	r3, r2, r3
 8008ade:	4a09      	ldr	r2, [pc, #36]	@ (8008b04 <USBD_CDC_SetTxBuffer+0x44>)
 8008ae0:	4413      	add	r3, r2
 8008ae2:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	687a      	ldr	r2, [r7, #4]
 8008ae8:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	683a      	ldr	r2, [r7, #0]
 8008af0:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008af4:	2300      	movs	r3, #0
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	371c      	adds	r7, #28
 8008afa:	46bd      	mov	sp, r7
 8008afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b00:	4770      	bx	lr
 8008b02:	bf00      	nop
 8008b04:	20001fe4 	.word	0x20001fe4

08008b08 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b087      	sub	sp, #28
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	4603      	mov	r3, r0
 8008b10:	60b9      	str	r1, [r7, #8]
 8008b12:	607a      	str	r2, [r7, #4]
 8008b14:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8008b16:	2300      	movs	r3, #0
 8008b18:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 8008b1a:	7bfb      	ldrb	r3, [r7, #15]
 8008b1c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008b20:	fb02 f303 	mul.w	r3, r2, r3
 8008b24:	4a06      	ldr	r2, [pc, #24]	@ (8008b40 <USBD_CDC_SetRxBuffer+0x38>)
 8008b26:	4413      	add	r3, r2
 8008b28:	617b      	str	r3, [r7, #20]

  hcdc->RxBuffer = pbuff;
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	687a      	ldr	r2, [r7, #4]
 8008b2e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008b32:	2300      	movs	r3, #0
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	371c      	adds	r7, #28
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr
 8008b40:	20001fe4 	.word	0x20001fe4

08008b44 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b084      	sub	sp, #16
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	6039      	str	r1, [r7, #0]
 8008b4e:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8008b50:	2300      	movs	r3, #0
 8008b52:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008b54:	2301      	movs	r3, #1
 8008b56:	73fb      	strb	r3, [r7, #15]

  hcdc = &CDC_ACM_Class_Data[ch];
 8008b58:	79fb      	ldrb	r3, [r7, #7]
 8008b5a:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008b5e:	fb02 f303 	mul.w	r3, r2, r3
 8008b62:	4a17      	ldr	r2, [pc, #92]	@ (8008bc0 <USBD_CDC_TransmitPacket+0x7c>)
 8008b64:	4413      	add	r3, r2
 8008b66:	60bb      	str	r3, [r7, #8]

  if (hcdc->TxState == 0U)
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d121      	bne.n	8008bb6 <USBD_CDC_TransmitPacket+0x72>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	2201      	movs	r2, #1
 8008b76:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP[ch] & 0xFU].total_length = hcdc->TxLength;
 8008b7a:	79fb      	ldrb	r3, [r7, #7]
 8008b7c:	4a11      	ldr	r2, [pc, #68]	@ (8008bc4 <USBD_CDC_TransmitPacket+0x80>)
 8008b7e:	5cd3      	ldrb	r3, [r2, r3]
 8008b80:	f003 020f 	and.w	r2, r3, #15
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8008b8a:	6838      	ldr	r0, [r7, #0]
 8008b8c:	4613      	mov	r3, r2
 8008b8e:	009b      	lsls	r3, r3, #2
 8008b90:	4413      	add	r3, r2
 8008b92:	009b      	lsls	r3, r3, #2
 8008b94:	4403      	add	r3, r0
 8008b96:	3318      	adds	r3, #24
 8008b98:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP[ch], hcdc->TxBuffer, hcdc->TxLength);
 8008b9a:	79fb      	ldrb	r3, [r7, #7]
 8008b9c:	4a09      	ldr	r2, [pc, #36]	@ (8008bc4 <USBD_CDC_TransmitPacket+0x80>)
 8008b9e:	5cd1      	ldrb	r1, [r2, r3]
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008bac:	6838      	ldr	r0, [r7, #0]
 8008bae:	f002 fa6a 	bl	800b086 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3710      	adds	r7, #16
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}
 8008bc0:	20001fe4 	.word	0x20001fe4
 8008bc4:	20001fcc 	.word	0x20001fcc

08008bc8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b084      	sub	sp, #16
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	4603      	mov	r3, r0
 8008bd0:	6039      	str	r1, [r7, #0]
 8008bd2:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	60fb      	str	r3, [r7, #12]

  hcdc = &CDC_ACM_Class_Data[ch];
 8008bd8:	79fb      	ldrb	r3, [r7, #7]
 8008bda:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008bde:	fb02 f303 	mul.w	r3, r2, r3
 8008be2:	4a11      	ldr	r2, [pc, #68]	@ (8008c28 <USBD_CDC_ReceivePacket+0x60>)
 8008be4:	4413      	add	r3, r2
 8008be6:	60fb      	str	r3, [r7, #12]

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	7c1b      	ldrb	r3, [r3, #16]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d10b      	bne.n	8008c08 <USBD_CDC_ReceivePacket+0x40>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 8008bf0:	79fb      	ldrb	r3, [r7, #7]
 8008bf2:	4a0e      	ldr	r2, [pc, #56]	@ (8008c2c <USBD_CDC_ReceivePacket+0x64>)
 8008bf4:	5cd1      	ldrb	r1, [r2, r3]
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008bfc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008c00:	6838      	ldr	r0, [r7, #0]
 8008c02:	f002 fa61 	bl	800b0c8 <USBD_LL_PrepareReceive>
 8008c06:	e009      	b.n	8008c1c <USBD_CDC_ReceivePacket+0x54>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 8008c08:	79fb      	ldrb	r3, [r7, #7]
 8008c0a:	4a08      	ldr	r2, [pc, #32]	@ (8008c2c <USBD_CDC_ReceivePacket+0x64>)
 8008c0c:	5cd1      	ldrb	r1, [r2, r3]
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008c14:	2340      	movs	r3, #64	@ 0x40
 8008c16:	6838      	ldr	r0, [r7, #0]
 8008c18:	f002 fa56 	bl	800b0c8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008c1c:	2300      	movs	r3, #0
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3710      	adds	r7, #16
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}
 8008c26:	bf00      	nop
 8008c28:	20001fe4 	.word	0x20001fe4
 8008c2c:	20001fd0 	.word	0x20001fd0

08008c30 <USBD_Update_CDC_ACM_DESC>:
                              uint8_t com_itf,
                              uint8_t in_ep,
                              uint8_t cmd_ep,
                              uint8_t out_ep,
                              uint8_t str_idx)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b085      	sub	sp, #20
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	4608      	mov	r0, r1
 8008c3a:	4611      	mov	r1, r2
 8008c3c:	461a      	mov	r2, r3
 8008c3e:	4603      	mov	r3, r0
 8008c40:	70fb      	strb	r3, [r7, #3]
 8008c42:	460b      	mov	r3, r1
 8008c44:	70bb      	strb	r3, [r7, #2]
 8008c46:	4613      	mov	r3, r2
 8008c48:	707b      	strb	r3, [r7, #1]
  desc += 9;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	3309      	adds	r3, #9
 8008c4e:	607b      	str	r3, [r7, #4]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8008c50:	2300      	movs	r3, #0
 8008c52:	73fb      	strb	r3, [r7, #15]
 8008c54:	e05b      	b.n	8008d0e <USBD_Update_CDC_ACM_DESC+0xde>
  {
    desc[2] = cmd_itf;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	3302      	adds	r3, #2
 8008c5a:	78fa      	ldrb	r2, [r7, #3]
 8008c5c:	701a      	strb	r2, [r3, #0]
    desc[16] = str_idx;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	3310      	adds	r3, #16
 8008c62:	f897 2020 	ldrb.w	r2, [r7, #32]
 8008c66:	701a      	strb	r2, [r3, #0]
    desc[10] = cmd_itf;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	330a      	adds	r3, #10
 8008c6c:	78fa      	ldrb	r2, [r7, #3]
 8008c6e:	701a      	strb	r2, [r3, #0]
    desc[26] = com_itf;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	331a      	adds	r3, #26
 8008c74:	78ba      	ldrb	r2, [r7, #2]
 8008c76:	701a      	strb	r2, [r3, #0]
    desc[34] = cmd_itf;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	3322      	adds	r3, #34	@ 0x22
 8008c7c:	78fa      	ldrb	r2, [r7, #3]
 8008c7e:	701a      	strb	r2, [r3, #0]
    desc[35] = com_itf;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	3323      	adds	r3, #35	@ 0x23
 8008c84:	78ba      	ldrb	r2, [r7, #2]
 8008c86:	701a      	strb	r2, [r3, #0]
    desc[38] = cmd_ep;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	3326      	adds	r3, #38	@ 0x26
 8008c8c:	7e3a      	ldrb	r2, [r7, #24]
 8008c8e:	701a      	strb	r2, [r3, #0]
    desc[45] = com_itf;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	332d      	adds	r3, #45	@ 0x2d
 8008c94:	78ba      	ldrb	r2, [r7, #2]
 8008c96:	701a      	strb	r2, [r3, #0]
    desc[54] = out_ep;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	3336      	adds	r3, #54	@ 0x36
 8008c9c:	7f3a      	ldrb	r2, [r7, #28]
 8008c9e:	701a      	strb	r2, [r3, #0]
    desc[61] = in_ep;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	333d      	adds	r3, #61	@ 0x3d
 8008ca4:	787a      	ldrb	r2, [r7, #1]
 8008ca6:	701a      	strb	r2, [r3, #0]

    desc += 66;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	3342      	adds	r3, #66	@ 0x42
 8008cac:	607b      	str	r3, [r7, #4]
    CDC_IN_EP[i] = in_ep;
 8008cae:	7bfb      	ldrb	r3, [r7, #15]
 8008cb0:	491c      	ldr	r1, [pc, #112]	@ (8008d24 <USBD_Update_CDC_ACM_DESC+0xf4>)
 8008cb2:	787a      	ldrb	r2, [r7, #1]
 8008cb4:	54ca      	strb	r2, [r1, r3]
    CDC_OUT_EP[i] = out_ep;
 8008cb6:	7bfb      	ldrb	r3, [r7, #15]
 8008cb8:	491b      	ldr	r1, [pc, #108]	@ (8008d28 <USBD_Update_CDC_ACM_DESC+0xf8>)
 8008cba:	7f3a      	ldrb	r2, [r7, #28]
 8008cbc:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_EP[i] = cmd_ep;
 8008cbe:	7bfb      	ldrb	r3, [r7, #15]
 8008cc0:	491a      	ldr	r1, [pc, #104]	@ (8008d2c <USBD_Update_CDC_ACM_DESC+0xfc>)
 8008cc2:	7e3a      	ldrb	r2, [r7, #24]
 8008cc4:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_ITF_NBR[i] = cmd_itf;
 8008cc6:	7bfb      	ldrb	r3, [r7, #15]
 8008cc8:	4919      	ldr	r1, [pc, #100]	@ (8008d30 <USBD_Update_CDC_ACM_DESC+0x100>)
 8008cca:	78fa      	ldrb	r2, [r7, #3]
 8008ccc:	54ca      	strb	r2, [r1, r3]
    CDC_COM_ITF_NBR[i] = com_itf;
 8008cce:	7bfb      	ldrb	r3, [r7, #15]
 8008cd0:	4918      	ldr	r1, [pc, #96]	@ (8008d34 <USBD_Update_CDC_ACM_DESC+0x104>)
 8008cd2:	78ba      	ldrb	r2, [r7, #2]
 8008cd4:	54ca      	strb	r2, [r1, r3]
    CDC_STR_DESC_IDX[i] = str_idx;
 8008cd6:	7bfb      	ldrb	r3, [r7, #15]
 8008cd8:	4917      	ldr	r1, [pc, #92]	@ (8008d38 <USBD_Update_CDC_ACM_DESC+0x108>)
 8008cda:	f897 2020 	ldrb.w	r2, [r7, #32]
 8008cde:	54ca      	strb	r2, [r1, r3]

    in_ep += 2;
 8008ce0:	787b      	ldrb	r3, [r7, #1]
 8008ce2:	3302      	adds	r3, #2
 8008ce4:	707b      	strb	r3, [r7, #1]
    cmd_ep = in_ep + 1;
 8008ce6:	787b      	ldrb	r3, [r7, #1]
 8008ce8:	3301      	adds	r3, #1
 8008cea:	763b      	strb	r3, [r7, #24]
    out_ep++;
 8008cec:	7f3b      	ldrb	r3, [r7, #28]
 8008cee:	3301      	adds	r3, #1
 8008cf0:	773b      	strb	r3, [r7, #28]
    str_idx++;
 8008cf2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008cf6:	3301      	adds	r3, #1
 8008cf8:	f887 3020 	strb.w	r3, [r7, #32]

    cmd_itf += 2;
 8008cfc:	78fb      	ldrb	r3, [r7, #3]
 8008cfe:	3302      	adds	r3, #2
 8008d00:	70fb      	strb	r3, [r7, #3]
    com_itf = cmd_itf + 1;
 8008d02:	78fb      	ldrb	r3, [r7, #3]
 8008d04:	3301      	adds	r3, #1
 8008d06:	70bb      	strb	r3, [r7, #2]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8008d08:	7bfb      	ldrb	r3, [r7, #15]
 8008d0a:	3301      	adds	r3, #1
 8008d0c:	73fb      	strb	r3, [r7, #15]
 8008d0e:	7bfb      	ldrb	r3, [r7, #15]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d0a0      	beq.n	8008c56 <USBD_Update_CDC_ACM_DESC+0x26>
  }
}
 8008d14:	bf00      	nop
 8008d16:	bf00      	nop
 8008d18:	3714      	adds	r7, #20
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d20:	4770      	bx	lr
 8008d22:	bf00      	nop
 8008d24:	20001fcc 	.word	0x20001fcc
 8008d28:	20001fd0 	.word	0x20001fd0
 8008d2c:	20001fd4 	.word	0x20001fd4
 8008d30:	20001fd8 	.word	0x20001fd8
 8008d34:	20001fdc 	.word	0x20001fdc
 8008d38:	20001fe0 	.word	0x20001fe0

08008d3c <USBD_COMPOSITE_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b082      	sub	sp, #8
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	460b      	mov	r3, r1
 8008d46:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.Init(pdev, cfgidx);
 8008d48:	4b08      	ldr	r3, [pc, #32]	@ (8008d6c <USBD_COMPOSITE_Init+0x30>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	78fa      	ldrb	r2, [r7, #3]
 8008d4e:	4611      	mov	r1, r2
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	4798      	blx	r3
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.Init(pdev, cfgidx);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.Init(pdev, cfgidx);
 8008d54:	4b06      	ldr	r3, [pc, #24]	@ (8008d70 <USBD_COMPOSITE_Init+0x34>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	78fa      	ldrb	r2, [r7, #3]
 8008d5a:	4611      	mov	r1, r2
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.Init(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 8008d60:	2300      	movs	r3, #0
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3708      	adds	r7, #8
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}
 8008d6a:	bf00      	nop
 8008d6c:	200000b0 	.word	0x200000b0
 8008d70:	200001d0 	.word	0x200001d0

08008d74 <USBD_COMPOSITE_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b082      	sub	sp, #8
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	460b      	mov	r3, r1
 8008d7e:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.DeInit(pdev, cfgidx);
 8008d80:	4b08      	ldr	r3, [pc, #32]	@ (8008da4 <USBD_COMPOSITE_DeInit+0x30>)
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	78fa      	ldrb	r2, [r7, #3]
 8008d86:	4611      	mov	r1, r2
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	4798      	blx	r3
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.DeInit(pdev, cfgidx);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.DeInit(pdev, cfgidx);
 8008d8c:	4b06      	ldr	r3, [pc, #24]	@ (8008da8 <USBD_COMPOSITE_DeInit+0x34>)
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	78fa      	ldrb	r2, [r7, #3]
 8008d92:	4611      	mov	r1, r2
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.DeInit(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 8008d98:	2300      	movs	r3, #0
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3708      	adds	r7, #8
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}
 8008da2:	bf00      	nop
 8008da4:	200000b0 	.word	0x200000b0
 8008da8:	200001d0 	.word	0x200001d0

08008dac <USBD_COMPOSITE_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Setup(USBD_HandleTypeDef *pdev,
                                    USBD_SetupReqTypedef *req)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b084      	sub	sp, #16
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
 8008db4:	6039      	str	r1, [r7, #0]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8008db6:	2300      	movs	r3, #0
 8008db8:	73fb      	strb	r3, [r7, #15]
 8008dba:	e019      	b.n	8008df0 <USBD_COMPOSITE_Setup+0x44>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	889b      	ldrh	r3, [r3, #4]
 8008dc0:	b2da      	uxtb	r2, r3
 8008dc2:	7bfb      	ldrb	r3, [r7, #15]
 8008dc4:	4915      	ldr	r1, [pc, #84]	@ (8008e1c <USBD_COMPOSITE_Setup+0x70>)
 8008dc6:	5ccb      	ldrb	r3, [r1, r3]
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d007      	beq.n	8008ddc <USBD_COMPOSITE_Setup+0x30>
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	889b      	ldrh	r3, [r3, #4]
 8008dd0:	b2da      	uxtb	r2, r3
 8008dd2:	7bfb      	ldrb	r3, [r7, #15]
 8008dd4:	4912      	ldr	r1, [pc, #72]	@ (8008e20 <USBD_COMPOSITE_Setup+0x74>)
 8008dd6:	5ccb      	ldrb	r3, [r1, r3]
 8008dd8:	429a      	cmp	r2, r3
 8008dda:	d106      	bne.n	8008dea <USBD_COMPOSITE_Setup+0x3e>
    {
      return USBD_CDC_ACM.Setup(pdev, req);
 8008ddc:	4b11      	ldr	r3, [pc, #68]	@ (8008e24 <USBD_COMPOSITE_Setup+0x78>)
 8008dde:	689b      	ldr	r3, [r3, #8]
 8008de0:	6839      	ldr	r1, [r7, #0]
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	4798      	blx	r3
 8008de6:	4603      	mov	r3, r0
 8008de8:	e014      	b.n	8008e14 <USBD_COMPOSITE_Setup+0x68>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8008dea:	7bfb      	ldrb	r3, [r7, #15]
 8008dec:	3301      	adds	r3, #1
 8008dee:	73fb      	strb	r3, [r7, #15]
 8008df0:	7bfb      	ldrb	r3, [r7, #15]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d0e2      	beq.n	8008dbc <USBD_COMPOSITE_Setup+0x10>
  {
    return USBD_HID_KEYBOARD.Setup(pdev, req);
  }
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (LOBYTE(req->wIndex) == CUSTOM_HID_ITF_NBR)
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	889b      	ldrh	r3, [r3, #4]
 8008dfa:	b2da      	uxtb	r2, r3
 8008dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8008e28 <USBD_COMPOSITE_Setup+0x7c>)
 8008dfe:	781b      	ldrb	r3, [r3, #0]
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d106      	bne.n	8008e12 <USBD_COMPOSITE_Setup+0x66>
  {
    return USBD_HID_CUSTOM.Setup(pdev, req);
 8008e04:	4b09      	ldr	r3, [pc, #36]	@ (8008e2c <USBD_COMPOSITE_Setup+0x80>)
 8008e06:	689b      	ldr	r3, [r3, #8]
 8008e08:	6839      	ldr	r1, [r7, #0]
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	4798      	blx	r3
 8008e0e:	4603      	mov	r3, r0
 8008e10:	e000      	b.n	8008e14 <USBD_COMPOSITE_Setup+0x68>
  {
    USBD_PRNT.Setup(pdev, req);
  }
#endif

  return USBD_FAIL;
 8008e12:	2303      	movs	r3, #3
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	3710      	adds	r7, #16
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}
 8008e1c:	20001fd8 	.word	0x20001fd8
 8008e20:	20001fdc 	.word	0x20001fdc
 8008e24:	200000b0 	.word	0x200000b0
 8008e28:	20002318 	.word	0x20002318
 8008e2c:	200001d0 	.word	0x200001d0

08008e30 <USBD_COMPOSITE_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b084      	sub	sp, #16
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
 8008e38:	460b      	mov	r3, r1
 8008e3a:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	73fb      	strb	r3, [r7, #15]
 8008e40:	e01a      	b.n	8008e78 <USBD_COMPOSITE_DataIn+0x48>
  {
    if (epnum == (CDC_IN_EP[i] & 0x7F) || epnum == (CDC_CMD_EP[i] & 0x7F))
 8008e42:	78fa      	ldrb	r2, [r7, #3]
 8008e44:	7bfb      	ldrb	r3, [r7, #15]
 8008e46:	4918      	ldr	r1, [pc, #96]	@ (8008ea8 <USBD_COMPOSITE_DataIn+0x78>)
 8008e48:	5ccb      	ldrb	r3, [r1, r3]
 8008e4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d007      	beq.n	8008e62 <USBD_COMPOSITE_DataIn+0x32>
 8008e52:	78fa      	ldrb	r2, [r7, #3]
 8008e54:	7bfb      	ldrb	r3, [r7, #15]
 8008e56:	4915      	ldr	r1, [pc, #84]	@ (8008eac <USBD_COMPOSITE_DataIn+0x7c>)
 8008e58:	5ccb      	ldrb	r3, [r1, r3]
 8008e5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	d107      	bne.n	8008e72 <USBD_COMPOSITE_DataIn+0x42>
    {
      return USBD_CDC_ACM.DataIn(pdev, epnum);
 8008e62:	4b13      	ldr	r3, [pc, #76]	@ (8008eb0 <USBD_COMPOSITE_DataIn+0x80>)
 8008e64:	695b      	ldr	r3, [r3, #20]
 8008e66:	78fa      	ldrb	r2, [r7, #3]
 8008e68:	4611      	mov	r1, r2
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	4798      	blx	r3
 8008e6e:	4603      	mov	r3, r0
 8008e70:	e015      	b.n	8008e9e <USBD_COMPOSITE_DataIn+0x6e>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8008e72:	7bfb      	ldrb	r3, [r7, #15]
 8008e74:	3301      	adds	r3, #1
 8008e76:	73fb      	strb	r3, [r7, #15]
 8008e78:	7bfb      	ldrb	r3, [r7, #15]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d0e1      	beq.n	8008e42 <USBD_COMPOSITE_DataIn+0x12>
  {
    return USBD_HID_KEYBOARD.DataIn(pdev, epnum);
  }
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (epnum == (CUSTOM_HID_IN_EP & 0x7F))
 8008e7e:	78fa      	ldrb	r2, [r7, #3]
 8008e80:	4b0c      	ldr	r3, [pc, #48]	@ (8008eb4 <USBD_COMPOSITE_DataIn+0x84>)
 8008e82:	781b      	ldrb	r3, [r3, #0]
 8008e84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	d107      	bne.n	8008e9c <USBD_COMPOSITE_DataIn+0x6c>
  {
    return USBD_HID_CUSTOM.DataIn(pdev, epnum);
 8008e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8008eb8 <USBD_COMPOSITE_DataIn+0x88>)
 8008e8e:	695b      	ldr	r3, [r3, #20]
 8008e90:	78fa      	ldrb	r2, [r7, #3]
 8008e92:	4611      	mov	r1, r2
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	4798      	blx	r3
 8008e98:	4603      	mov	r3, r0
 8008e9a:	e000      	b.n	8008e9e <USBD_COMPOSITE_DataIn+0x6e>
  {
    USBD_PRNT.DataIn(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 8008e9c:	2303      	movs	r3, #3
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3710      	adds	r7, #16
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
 8008ea6:	bf00      	nop
 8008ea8:	20001fcc 	.word	0x20001fcc
 8008eac:	20001fd4 	.word	0x20001fd4
 8008eb0:	200000b0 	.word	0x200000b0
 8008eb4:	200001ce 	.word	0x200001ce
 8008eb8:	200001d0 	.word	0x200001d0

08008ebc <USBD_COMPOSITE_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b082      	sub	sp, #8
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.EP0_RxReady(pdev);
 8008ec4:	4b06      	ldr	r3, [pc, #24]	@ (8008ee0 <USBD_COMPOSITE_EP0_RxReady+0x24>)
 8008ec6:	691b      	ldr	r3, [r3, #16]
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	4798      	blx	r3
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.EP0_RxReady(pdev);
 8008ecc:	4b05      	ldr	r3, [pc, #20]	@ (8008ee4 <USBD_COMPOSITE_EP0_RxReady+0x28>)
 8008ece:	691b      	ldr	r3, [r3, #16]
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	4798      	blx	r3
  USBD_DFU.EP0_RxReady(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8008ed4:	2300      	movs	r3, #0
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3708      	adds	r7, #8
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}
 8008ede:	bf00      	nop
 8008ee0:	200000b0 	.word	0x200000b0
 8008ee4:	200001d0 	.word	0x200001d0

08008ee8 <USBD_COMPOSITE_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b083      	sub	sp, #12
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  USBD_DFU.EP0_TxSent(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8008ef0:	2300      	movs	r3, #0
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	370c      	adds	r7, #12
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efc:	4770      	bx	lr

08008efe <USBD_COMPOSITE_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_SOF(USBD_HandleTypeDef *pdev)
{
 8008efe:	b480      	push	{r7}
 8008f00:	b083      	sub	sp, #12
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	6078      	str	r0, [r7, #4]
  USBD_DFU.SOF(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8008f06:	2300      	movs	r3, #0
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	370c      	adds	r7, #12
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f12:	4770      	bx	lr

08008f14 <USBD_COMPOSITE_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b083      	sub	sp, #12
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	460b      	mov	r3, r1
 8008f1e:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8008f20:	2300      	movs	r3, #0
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	370c      	adds	r7, #12
 8008f26:	46bd      	mov	sp, r7
 8008f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2c:	4770      	bx	lr

08008f2e <USBD_COMPOSITE_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008f2e:	b480      	push	{r7}
 8008f30:	b083      	sub	sp, #12
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	6078      	str	r0, [r7, #4]
 8008f36:	460b      	mov	r3, r1
 8008f38:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8008f3a:	2300      	movs	r3, #0
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	370c      	adds	r7, #12
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr

08008f48 <USBD_COMPOSITE_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b084      	sub	sp, #16
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
 8008f50:	460b      	mov	r3, r1
 8008f52:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8008f54:	2300      	movs	r3, #0
 8008f56:	73fb      	strb	r3, [r7, #15]
 8008f58:	e010      	b.n	8008f7c <USBD_COMPOSITE_DataOut+0x34>
  {
    if (epnum == CDC_OUT_EP[i])
 8008f5a:	7bfb      	ldrb	r3, [r7, #15]
 8008f5c:	4a12      	ldr	r2, [pc, #72]	@ (8008fa8 <USBD_COMPOSITE_DataOut+0x60>)
 8008f5e:	5cd3      	ldrb	r3, [r2, r3]
 8008f60:	78fa      	ldrb	r2, [r7, #3]
 8008f62:	429a      	cmp	r2, r3
 8008f64:	d107      	bne.n	8008f76 <USBD_COMPOSITE_DataOut+0x2e>
    {
      return USBD_CDC_ACM.DataOut(pdev, epnum);
 8008f66:	4b11      	ldr	r3, [pc, #68]	@ (8008fac <USBD_COMPOSITE_DataOut+0x64>)
 8008f68:	699b      	ldr	r3, [r3, #24]
 8008f6a:	78fa      	ldrb	r2, [r7, #3]
 8008f6c:	4611      	mov	r1, r2
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	4798      	blx	r3
 8008f72:	4603      	mov	r3, r0
 8008f74:	e013      	b.n	8008f9e <USBD_COMPOSITE_DataOut+0x56>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8008f76:	7bfb      	ldrb	r3, [r7, #15]
 8008f78:	3301      	adds	r3, #1
 8008f7a:	73fb      	strb	r3, [r7, #15]
 8008f7c:	7bfb      	ldrb	r3, [r7, #15]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d0eb      	beq.n	8008f5a <USBD_COMPOSITE_DataOut+0x12>
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (epnum == CUSTOM_HID_OUT_EP)
 8008f82:	4b0b      	ldr	r3, [pc, #44]	@ (8008fb0 <USBD_COMPOSITE_DataOut+0x68>)
 8008f84:	781b      	ldrb	r3, [r3, #0]
 8008f86:	78fa      	ldrb	r2, [r7, #3]
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d107      	bne.n	8008f9c <USBD_COMPOSITE_DataOut+0x54>
  {
    return USBD_HID_CUSTOM.DataOut(pdev, epnum);
 8008f8c:	4b09      	ldr	r3, [pc, #36]	@ (8008fb4 <USBD_COMPOSITE_DataOut+0x6c>)
 8008f8e:	699b      	ldr	r3, [r3, #24]
 8008f90:	78fa      	ldrb	r2, [r7, #3]
 8008f92:	4611      	mov	r1, r2
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	4798      	blx	r3
 8008f98:	4603      	mov	r3, r0
 8008f9a:	e000      	b.n	8008f9e <USBD_COMPOSITE_DataOut+0x56>
  {
    USBD_PRNT.DataOut(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 8008f9c:	2303      	movs	r3, #3
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3710      	adds	r7, #16
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}
 8008fa6:	bf00      	nop
 8008fa8:	20001fd0 	.word	0x20001fd0
 8008fac:	200000b0 	.word	0x200000b0
 8008fb0:	200001cf 	.word	0x200001cf
 8008fb4:	200001d0 	.word	0x200001d0

08008fb8 <USBD_COMPOSITE_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetHSCfgDesc(uint16_t *length)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b083      	sub	sp, #12
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	226b      	movs	r2, #107	@ 0x6b
 8008fc4:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 8008fc6:	4b03      	ldr	r3, [pc, #12]	@ (8008fd4 <USBD_COMPOSITE_GetHSCfgDesc+0x1c>)
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	370c      	adds	r7, #12
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd2:	4770      	bx	lr
 8008fd4:	2000226c 	.word	0x2000226c

08008fd8 <USBD_COMPOSITE_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetFSCfgDesc(uint16_t *length)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b083      	sub	sp, #12
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	226b      	movs	r2, #107	@ 0x6b
 8008fe4:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
 8008fe6:	4b03      	ldr	r3, [pc, #12]	@ (8008ff4 <USBD_COMPOSITE_GetFSCfgDesc+0x1c>)
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	370c      	adds	r7, #12
 8008fec:	46bd      	mov	sp, r7
 8008fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff2:	4770      	bx	lr
 8008ff4:	20002200 	.word	0x20002200

08008ff8 <USBD_COMPOSITE_GetOtherSpeedCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b083      	sub	sp, #12
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
#if (USBD_USE_HS == 1)
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
#else
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	226b      	movs	r2, #107	@ 0x6b
 8009004:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 8009006:	4b03      	ldr	r3, [pc, #12]	@ (8009014 <USBD_COMPOSITE_GetOtherSpeedCfgDesc+0x1c>)
#endif
}
 8009008:	4618      	mov	r0, r3
 800900a:	370c      	adds	r7, #12
 800900c:	46bd      	mov	sp, r7
 800900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009012:	4770      	bx	lr
 8009014:	2000226c 	.word	0x2000226c

08009018 <USBD_COMPOSITE_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_COMPOSITE_GetDeviceQualifierDesc(uint16_t *length)
{
 8009018:	b480      	push	{r7}
 800901a:	b083      	sub	sp, #12
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_DeviceQualifierDesc);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	220a      	movs	r2, #10
 8009024:	801a      	strh	r2, [r3, #0]
  return USBD_COMPOSITE_DeviceQualifierDesc;
 8009026:	4b03      	ldr	r3, [pc, #12]	@ (8009034 <USBD_COMPOSITE_GetDeviceQualifierDesc+0x1c>)
}
 8009028:	4618      	mov	r0, r3
 800902a:	370c      	adds	r7, #12
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr
 8009034:	200001c4 	.word	0x200001c4

08009038 <USBD_COMPOSITE_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_COMPOSITE_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b08a      	sub	sp, #40	@ 0x28
 800903c:	af00      	add	r7, sp, #0
 800903e:	60f8      	str	r0, [r7, #12]
 8009040:	460b      	mov	r3, r1
 8009042:	607a      	str	r2, [r7, #4]
 8009044:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[64];

  /* Check if the requested string interface is supported */
  if (index <= USBD_Track_String_Index)
 8009046:	4b20      	ldr	r3, [pc, #128]	@ (80090c8 <USBD_COMPOSITE_GetUsrStringDesc+0x90>)
 8009048:	781b      	ldrb	r3, [r3, #0]
 800904a:	7afa      	ldrb	r2, [r7, #11]
 800904c:	429a      	cmp	r2, r3
 800904e:	d836      	bhi.n	80090be <USBD_COMPOSITE_GetUsrStringDesc+0x86>
  {
#if (USBD_USE_CDC_ACM == 1)
    char str_buffer[16] = "";
 8009050:	2300      	movs	r3, #0
 8009052:	617b      	str	r3, [r7, #20]
 8009054:	f107 0318 	add.w	r3, r7, #24
 8009058:	2200      	movs	r2, #0
 800905a:	601a      	str	r2, [r3, #0]
 800905c:	605a      	str	r2, [r3, #4]
 800905e:	609a      	str	r2, [r3, #8]
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8009060:	2300      	movs	r3, #0
 8009062:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009066:	e01a      	b.n	800909e <USBD_COMPOSITE_GetUsrStringDesc+0x66>
    {
      if (index == CDC_STR_DESC_IDX[i])
 8009068:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800906c:	4a17      	ldr	r2, [pc, #92]	@ (80090cc <USBD_COMPOSITE_GetUsrStringDesc+0x94>)
 800906e:	5cd3      	ldrb	r3, [r2, r3]
 8009070:	7afa      	ldrb	r2, [r7, #11]
 8009072:	429a      	cmp	r2, r3
 8009074:	d10e      	bne.n	8009094 <USBD_COMPOSITE_GetUsrStringDesc+0x5c>
      {
        snprintf(str_buffer, sizeof(str_buffer), CDC_ACM_STR_DESC, i);
 8009076:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800907a:	f107 0014 	add.w	r0, r7, #20
 800907e:	4a14      	ldr	r2, [pc, #80]	@ (80090d0 <USBD_COMPOSITE_GetUsrStringDesc+0x98>)
 8009080:	2110      	movs	r1, #16
 8009082:	f002 f881 	bl	800b188 <sniprintf>
        USBD_GetString((uint8_t *)str_buffer, USBD_StrDesc, length);
 8009086:	f107 0314 	add.w	r3, r7, #20
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	4911      	ldr	r1, [pc, #68]	@ (80090d4 <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 800908e:	4618      	mov	r0, r3
 8009090:	f001 fcb9 	bl	800aa06 <USBD_GetString>
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8009094:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009098:	3301      	adds	r3, #1
 800909a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800909e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d0e0      	beq.n	8009068 <USBD_COMPOSITE_GetUsrStringDesc+0x30>
    {
      USBD_GetString((uint8_t *)HID_KEYBOARD_STR_DESC, USBD_StrDesc, length);
    }
#endif
#if (USBD_USE_HID_CUSTOM == 1)
    if (index == CUSTOM_HID_STR_DESC_IDX)
 80090a6:	4b0c      	ldr	r3, [pc, #48]	@ (80090d8 <USBD_COMPOSITE_GetUsrStringDesc+0xa0>)
 80090a8:	781b      	ldrb	r3, [r3, #0]
 80090aa:	7afa      	ldrb	r2, [r7, #11]
 80090ac:	429a      	cmp	r2, r3
 80090ae:	d104      	bne.n	80090ba <USBD_COMPOSITE_GetUsrStringDesc+0x82>
    {
      USBD_GetString((uint8_t *)CUSTOM_HID_STR_DESC, USBD_StrDesc, length);
 80090b0:	687a      	ldr	r2, [r7, #4]
 80090b2:	4908      	ldr	r1, [pc, #32]	@ (80090d4 <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 80090b4:	4809      	ldr	r0, [pc, #36]	@ (80090dc <USBD_COMPOSITE_GetUsrStringDesc+0xa4>)
 80090b6:	f001 fca6 	bl	800aa06 <USBD_GetString>
    if (index == PRINTER_STR_DESC_IDX)
    {
      USBD_GetString((uint8_t *)PRNT_STR_DESC, USBD_StrDesc, length);
    }
#endif
    return USBD_StrDesc;
 80090ba:	4b06      	ldr	r3, [pc, #24]	@ (80090d4 <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 80090bc:	e000      	b.n	80090c0 <USBD_COMPOSITE_GetUsrStringDesc+0x88>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 80090be:	2300      	movs	r3, #0
  }
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3728      	adds	r7, #40	@ 0x28
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}
 80090c8:	200001c0 	.word	0x200001c0
 80090cc:	20001fe0 	.word	0x20001fe0
 80090d0:	0800bb58 	.word	0x0800bb58
 80090d4:	200022d8 	.word	0x200022d8
 80090d8:	20002319 	.word	0x20002319
 80090dc:	0800bb68 	.word	0x0800bb68

080090e0 <USBD_COMPOSITE_Mount_Class>:
#endif

void USBD_COMPOSITE_Mount_Class(void)
{
 80090e0:	b590      	push	{r4, r7, lr}
 80090e2:	b089      	sub	sp, #36	@ 0x24
 80090e4:	af04      	add	r7, sp, #16
  uint16_t len = 0;
 80090e6:	2300      	movs	r3, #0
 80090e8:	80bb      	strh	r3, [r7, #4]
  uint8_t *ptr = NULL;
 80090ea:	2300      	movs	r3, #0
 80090ec:	60fb      	str	r3, [r7, #12]

  uint8_t in_ep_track = 0x81;
 80090ee:	2381      	movs	r3, #129	@ 0x81
 80090f0:	72fb      	strb	r3, [r7, #11]
  uint8_t out_ep_track = 0x01;
 80090f2:	2301      	movs	r3, #1
 80090f4:	72bb      	strb	r3, [r7, #10]
  uint8_t interface_no_track = 0x00;
 80090f6:	2300      	movs	r3, #0
 80090f8:	727b      	strb	r3, [r7, #9]
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_HID_CUSTOM == 1)
  ptr = USBD_HID_CUSTOM.GetFSConfigDescriptor(&len);
 80090fa:	4b74      	ldr	r3, [pc, #464]	@ (80092cc <USBD_COMPOSITE_Mount_Class+0x1ec>)
 80090fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090fe:	1d3a      	adds	r2, r7, #4
 8009100:	4610      	mov	r0, r2
 8009102:	4798      	blx	r3
 8009104:	60f8      	str	r0, [r7, #12]
  USBD_Update_HID_Custom_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 8009106:	4b72      	ldr	r3, [pc, #456]	@ (80092d0 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8009108:	781b      	ldrb	r3, [r3, #0]
 800910a:	7ab8      	ldrb	r0, [r7, #10]
 800910c:	7afa      	ldrb	r2, [r7, #11]
 800910e:	7a79      	ldrb	r1, [r7, #9]
 8009110:	9300      	str	r3, [sp, #0]
 8009112:	4603      	mov	r3, r0
 8009114:	68f8      	ldr	r0, [r7, #12]
 8009116:	f000 fb95 	bl	8009844 <USBD_Update_HID_Custom_DESC>
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_HID_CUSTOM_DESC, ptr + 0x09, len - 0x09);
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	3309      	adds	r3, #9
 800911e:	88ba      	ldrh	r2, [r7, #4]
 8009120:	3a09      	subs	r2, #9
 8009122:	4619      	mov	r1, r3
 8009124:	486b      	ldr	r0, [pc, #428]	@ (80092d4 <USBD_COMPOSITE_Mount_Class+0x1f4>)
 8009126:	f002 f897 	bl	800b258 <memcpy>

  ptr = USBD_HID_CUSTOM.GetHSConfigDescriptor(&len);
 800912a:	4b68      	ldr	r3, [pc, #416]	@ (80092cc <USBD_COMPOSITE_Mount_Class+0x1ec>)
 800912c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800912e:	1d3a      	adds	r2, r7, #4
 8009130:	4610      	mov	r0, r2
 8009132:	4798      	blx	r3
 8009134:	60f8      	str	r0, [r7, #12]
  USBD_Update_HID_Custom_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 8009136:	4b66      	ldr	r3, [pc, #408]	@ (80092d0 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8009138:	781b      	ldrb	r3, [r3, #0]
 800913a:	7ab8      	ldrb	r0, [r7, #10]
 800913c:	7afa      	ldrb	r2, [r7, #11]
 800913e:	7a79      	ldrb	r1, [r7, #9]
 8009140:	9300      	str	r3, [sp, #0]
 8009142:	4603      	mov	r3, r0
 8009144:	68f8      	ldr	r0, [r7, #12]
 8009146:	f000 fb7d 	bl	8009844 <USBD_Update_HID_Custom_DESC>
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_HID_CUSTOM_DESC, ptr + 0x09, len - 0x09);
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	3309      	adds	r3, #9
 800914e:	88ba      	ldrh	r2, [r7, #4]
 8009150:	3a09      	subs	r2, #9
 8009152:	4619      	mov	r1, r3
 8009154:	4860      	ldr	r0, [pc, #384]	@ (80092d8 <USBD_COMPOSITE_Mount_Class+0x1f8>)
 8009156:	f002 f87f 	bl	800b258 <memcpy>

  in_ep_track += 1;
 800915a:	7afb      	ldrb	r3, [r7, #11]
 800915c:	3301      	adds	r3, #1
 800915e:	72fb      	strb	r3, [r7, #11]
  out_ep_track += 1;
 8009160:	7abb      	ldrb	r3, [r7, #10]
 8009162:	3301      	adds	r3, #1
 8009164:	72bb      	strb	r3, [r7, #10]
  interface_no_track += 1;
 8009166:	7a7b      	ldrb	r3, [r7, #9]
 8009168:	3301      	adds	r3, #1
 800916a:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += 1;
 800916c:	4b58      	ldr	r3, [pc, #352]	@ (80092d0 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800916e:	781b      	ldrb	r3, [r3, #0]
 8009170:	3301      	adds	r3, #1
 8009172:	b2da      	uxtb	r2, r3
 8009174:	4b56      	ldr	r3, [pc, #344]	@ (80092d0 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8009176:	701a      	strb	r2, [r3, #0]
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_CDC_ACM == 1)
  ptr = USBD_CDC_ACM.GetFSConfigDescriptor(&len);
 8009178:	4b58      	ldr	r3, [pc, #352]	@ (80092dc <USBD_COMPOSITE_Mount_Class+0x1fc>)
 800917a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800917c:	1d3a      	adds	r2, r7, #4
 800917e:	4610      	mov	r0, r2
 8009180:	4798      	blx	r3
 8009182:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 8009184:	7a7b      	ldrb	r3, [r7, #9]
 8009186:	3301      	adds	r3, #1
 8009188:	b2d8      	uxtb	r0, r3
 800918a:	7afb      	ldrb	r3, [r7, #11]
 800918c:	3301      	adds	r3, #1
 800918e:	b2db      	uxtb	r3, r3
 8009190:	4a4f      	ldr	r2, [pc, #316]	@ (80092d0 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8009192:	7812      	ldrb	r2, [r2, #0]
 8009194:	7afc      	ldrb	r4, [r7, #11]
 8009196:	7a79      	ldrb	r1, [r7, #9]
 8009198:	9202      	str	r2, [sp, #8]
 800919a:	7aba      	ldrb	r2, [r7, #10]
 800919c:	9201      	str	r2, [sp, #4]
 800919e:	9300      	str	r3, [sp, #0]
 80091a0:	4623      	mov	r3, r4
 80091a2:	4602      	mov	r2, r0
 80091a4:	68f8      	ldr	r0, [r7, #12]
 80091a6:	f7ff fd43 	bl	8008c30 <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	3309      	adds	r3, #9
 80091ae:	88ba      	ldrh	r2, [r7, #4]
 80091b0:	3a09      	subs	r2, #9
 80091b2:	4619      	mov	r1, r3
 80091b4:	484a      	ldr	r0, [pc, #296]	@ (80092e0 <USBD_COMPOSITE_Mount_Class+0x200>)
 80091b6:	f002 f84f 	bl	800b258 <memcpy>

  ptr = USBD_CDC_ACM.GetHSConfigDescriptor(&len);
 80091ba:	4b48      	ldr	r3, [pc, #288]	@ (80092dc <USBD_COMPOSITE_Mount_Class+0x1fc>)
 80091bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091be:	1d3a      	adds	r2, r7, #4
 80091c0:	4610      	mov	r0, r2
 80091c2:	4798      	blx	r3
 80091c4:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 80091c6:	7a7b      	ldrb	r3, [r7, #9]
 80091c8:	3301      	adds	r3, #1
 80091ca:	b2d8      	uxtb	r0, r3
 80091cc:	7afb      	ldrb	r3, [r7, #11]
 80091ce:	3301      	adds	r3, #1
 80091d0:	b2db      	uxtb	r3, r3
 80091d2:	4a3f      	ldr	r2, [pc, #252]	@ (80092d0 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 80091d4:	7812      	ldrb	r2, [r2, #0]
 80091d6:	7afc      	ldrb	r4, [r7, #11]
 80091d8:	7a79      	ldrb	r1, [r7, #9]
 80091da:	9202      	str	r2, [sp, #8]
 80091dc:	7aba      	ldrb	r2, [r7, #10]
 80091de:	9201      	str	r2, [sp, #4]
 80091e0:	9300      	str	r3, [sp, #0]
 80091e2:	4623      	mov	r3, r4
 80091e4:	4602      	mov	r2, r0
 80091e6:	68f8      	ldr	r0, [r7, #12]
 80091e8:	f7ff fd22 	bl	8008c30 <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	3309      	adds	r3, #9
 80091f0:	88ba      	ldrh	r2, [r7, #4]
 80091f2:	3a09      	subs	r2, #9
 80091f4:	4619      	mov	r1, r3
 80091f6:	483b      	ldr	r0, [pc, #236]	@ (80092e4 <USBD_COMPOSITE_Mount_Class+0x204>)
 80091f8:	f002 f82e 	bl	800b258 <memcpy>

  in_ep_track += 2 * USBD_CDC_ACM_COUNT;
 80091fc:	7afb      	ldrb	r3, [r7, #11]
 80091fe:	3302      	adds	r3, #2
 8009200:	72fb      	strb	r3, [r7, #11]
  out_ep_track += 1 * USBD_CDC_ACM_COUNT;
 8009202:	7abb      	ldrb	r3, [r7, #10]
 8009204:	3301      	adds	r3, #1
 8009206:	72bb      	strb	r3, [r7, #10]
  interface_no_track += 2 * USBD_CDC_ACM_COUNT;
 8009208:	7a7b      	ldrb	r3, [r7, #9]
 800920a:	3302      	adds	r3, #2
 800920c:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += USBD_CDC_ACM_COUNT;
 800920e:	4b30      	ldr	r3, [pc, #192]	@ (80092d0 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8009210:	781b      	ldrb	r3, [r3, #0]
 8009212:	3301      	adds	r3, #1
 8009214:	b2da      	uxtb	r2, r3
 8009216:	4b2e      	ldr	r3, [pc, #184]	@ (80092d0 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8009218:	701a      	strb	r2, [r3, #0]
#endif

  uint16_t CFG_SIZE = sizeof(USBD_COMPOSITE_CFG_DESC_t);
 800921a:	236b      	movs	r3, #107	@ 0x6b
 800921c:	80fb      	strh	r3, [r7, #6]
  ptr = USBD_COMPOSITE_HSCfgDesc.CONFIG_DESC;
 800921e:	4b32      	ldr	r3, [pc, #200]	@ (80092e8 <USBD_COMPOSITE_Mount_Class+0x208>)
 8009220:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	2209      	movs	r2, #9
 8009226:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	3301      	adds	r3, #1
 800922c:	2202      	movs	r2, #2
 800922e:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	3302      	adds	r3, #2
 8009234:	88fa      	ldrh	r2, [r7, #6]
 8009236:	b2d2      	uxtb	r2, r2
 8009238:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 800923a:	88fb      	ldrh	r3, [r7, #6]
 800923c:	0a1b      	lsrs	r3, r3, #8
 800923e:	b29a      	uxth	r2, r3
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	3303      	adds	r3, #3
 8009244:	b2d2      	uxtb	r2, r2
 8009246:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	3304      	adds	r3, #4
 800924c:	7a7a      	ldrb	r2, [r7, #9]
 800924e:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	3305      	adds	r3, #5
 8009254:	2201      	movs	r2, #1
 8009256:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	3306      	adds	r3, #6
 800925c:	2200      	movs	r2, #0
 800925e:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	3307      	adds	r3, #7
 8009264:	22c0      	movs	r2, #192	@ 0xc0
 8009266:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	3308      	adds	r3, #8
 800926c:	2232      	movs	r2, #50	@ 0x32
 800926e:	701a      	strb	r2, [r3, #0]

  ptr = USBD_COMPOSITE_FSCfgDesc.CONFIG_DESC;
 8009270:	4b1e      	ldr	r3, [pc, #120]	@ (80092ec <USBD_COMPOSITE_Mount_Class+0x20c>)
 8009272:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2209      	movs	r2, #9
 8009278:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	3301      	adds	r3, #1
 800927e:	2202      	movs	r2, #2
 8009280:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	3302      	adds	r3, #2
 8009286:	88fa      	ldrh	r2, [r7, #6]
 8009288:	b2d2      	uxtb	r2, r2
 800928a:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 800928c:	88fb      	ldrh	r3, [r7, #6]
 800928e:	0a1b      	lsrs	r3, r3, #8
 8009290:	b29a      	uxth	r2, r3
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	3303      	adds	r3, #3
 8009296:	b2d2      	uxtb	r2, r2
 8009298:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	3304      	adds	r3, #4
 800929e:	7a7a      	ldrb	r2, [r7, #9]
 80092a0:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	3305      	adds	r3, #5
 80092a6:	2201      	movs	r2, #1
 80092a8:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	3306      	adds	r3, #6
 80092ae:	2200      	movs	r2, #0
 80092b0:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	3307      	adds	r3, #7
 80092b6:	22c0      	movs	r2, #192	@ 0xc0
 80092b8:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	3308      	adds	r3, #8
 80092be:	2232      	movs	r2, #50	@ 0x32
 80092c0:	701a      	strb	r2, [r3, #0]

  (void)out_ep_track;
  (void)in_ep_track;
}
 80092c2:	bf00      	nop
 80092c4:	3714      	adds	r7, #20
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd90      	pop	{r4, r7, pc}
 80092ca:	bf00      	nop
 80092cc:	200001d0 	.word	0x200001d0
 80092d0:	200001c0 	.word	0x200001c0
 80092d4:	20002209 	.word	0x20002209
 80092d8:	20002275 	.word	0x20002275
 80092dc:	200000b0 	.word	0x200000b0
 80092e0:	20002229 	.word	0x20002229
 80092e4:	20002295 	.word	0x20002295
 80092e8:	2000226c 	.word	0x2000226c
 80092ec:	20002200 	.word	0x20002200

080092f0 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b084      	sub	sp, #16
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	460b      	mov	r3, r1
 80092fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = &CUSTOM_HID_Instance;
 80092fc:	4b43      	ldr	r3, [pc, #268]	@ (800940c <USBD_CUSTOM_HID_Init+0x11c>)
 80092fe:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d105      	bne.n	8009312 <USBD_CUSTOM_HID_Init+0x22>
  {
    pdev->pClassData_HID_Custom = NULL;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2200      	movs	r2, #0
 800930a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
    return (uint8_t)USBD_EMEM;
 800930e:	2302      	movs	r3, #2
 8009310:	e077      	b.n	8009402 <USBD_CUSTOM_HID_Init+0x112>
  }

  pdev->pClassData_HID_Custom = (void *)hhid;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	68fa      	ldr	r2, [r7, #12]
 8009316:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	7c1b      	ldrb	r3, [r3, #16]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d11b      	bne.n	800935a <USBD_CUSTOM_HID_Init+0x6a>
  {
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8009322:	4b3b      	ldr	r3, [pc, #236]	@ (8009410 <USBD_CUSTOM_HID_Init+0x120>)
 8009324:	781b      	ldrb	r3, [r3, #0]
 8009326:	f003 020f 	and.w	r2, r3, #15
 800932a:	6879      	ldr	r1, [r7, #4]
 800932c:	4613      	mov	r3, r2
 800932e:	009b      	lsls	r3, r3, #2
 8009330:	4413      	add	r3, r2
 8009332:	009b      	lsls	r3, r3, #2
 8009334:	440b      	add	r3, r1
 8009336:	3326      	adds	r3, #38	@ 0x26
 8009338:	2205      	movs	r2, #5
 800933a:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800933c:	4b35      	ldr	r3, [pc, #212]	@ (8009414 <USBD_CUSTOM_HID_Init+0x124>)
 800933e:	781b      	ldrb	r3, [r3, #0]
 8009340:	f003 020f 	and.w	r2, r3, #15
 8009344:	6879      	ldr	r1, [r7, #4]
 8009346:	4613      	mov	r3, r2
 8009348:	009b      	lsls	r3, r3, #2
 800934a:	4413      	add	r3, r2
 800934c:	009b      	lsls	r3, r3, #2
 800934e:	440b      	add	r3, r1
 8009350:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8009354:	2205      	movs	r2, #5
 8009356:	801a      	strh	r2, [r3, #0]
 8009358:	e01a      	b.n	8009390 <USBD_CUSTOM_HID_Init+0xa0>
  }
  else /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800935a:	4b2d      	ldr	r3, [pc, #180]	@ (8009410 <USBD_CUSTOM_HID_Init+0x120>)
 800935c:	781b      	ldrb	r3, [r3, #0]
 800935e:	f003 020f 	and.w	r2, r3, #15
 8009362:	6879      	ldr	r1, [r7, #4]
 8009364:	4613      	mov	r3, r2
 8009366:	009b      	lsls	r3, r3, #2
 8009368:	4413      	add	r3, r2
 800936a:	009b      	lsls	r3, r3, #2
 800936c:	440b      	add	r3, r1
 800936e:	3326      	adds	r3, #38	@ 0x26
 8009370:	2205      	movs	r2, #5
 8009372:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8009374:	4b27      	ldr	r3, [pc, #156]	@ (8009414 <USBD_CUSTOM_HID_Init+0x124>)
 8009376:	781b      	ldrb	r3, [r3, #0]
 8009378:	f003 020f 	and.w	r2, r3, #15
 800937c:	6879      	ldr	r1, [r7, #4]
 800937e:	4613      	mov	r3, r2
 8009380:	009b      	lsls	r3, r3, #2
 8009382:	4413      	add	r3, r2
 8009384:	009b      	lsls	r3, r3, #2
 8009386:	440b      	add	r3, r1
 8009388:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800938c:	2205      	movs	r2, #5
 800938e:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_IN_EP, USBD_EP_TYPE_INTR,
 8009390:	4b1f      	ldr	r3, [pc, #124]	@ (8009410 <USBD_CUSTOM_HID_Init+0x120>)
 8009392:	7819      	ldrb	r1, [r3, #0]
 8009394:	2302      	movs	r3, #2
 8009396:	2203      	movs	r2, #3
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f001 fda6 	bl	800aeea <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].is_used = 1U;
 800939e:	4b1c      	ldr	r3, [pc, #112]	@ (8009410 <USBD_CUSTOM_HID_Init+0x120>)
 80093a0:	781b      	ldrb	r3, [r3, #0]
 80093a2:	f003 020f 	and.w	r2, r3, #15
 80093a6:	6879      	ldr	r1, [r7, #4]
 80093a8:	4613      	mov	r3, r2
 80093aa:	009b      	lsls	r3, r3, #2
 80093ac:	4413      	add	r3, r2
 80093ae:	009b      	lsls	r3, r3, #2
 80093b0:	440b      	add	r3, r1
 80093b2:	3324      	adds	r3, #36	@ 0x24
 80093b4:	2201      	movs	r2, #1
 80093b6:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_OUT_EP, USBD_EP_TYPE_INTR,
 80093b8:	4b16      	ldr	r3, [pc, #88]	@ (8009414 <USBD_CUSTOM_HID_Init+0x124>)
 80093ba:	7819      	ldrb	r1, [r3, #0]
 80093bc:	2302      	movs	r3, #2
 80093be:	2203      	movs	r2, #3
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f001 fd92 	bl	800aeea <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].is_used = 1U;
 80093c6:	4b13      	ldr	r3, [pc, #76]	@ (8009414 <USBD_CUSTOM_HID_Init+0x124>)
 80093c8:	781b      	ldrb	r3, [r3, #0]
 80093ca:	f003 020f 	and.w	r2, r3, #15
 80093ce:	6879      	ldr	r1, [r7, #4]
 80093d0:	4613      	mov	r3, r2
 80093d2:	009b      	lsls	r3, r3, #2
 80093d4:	4413      	add	r3, r2
 80093d6:	009b      	lsls	r3, r3, #2
 80093d8:	440b      	add	r3, r1
 80093da:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80093de:	2201      	movs	r2, #1
 80093e0:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	2200      	movs	r2, #0
 80093e6:	751a      	strb	r2, [r3, #20]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->Init();
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_OUT_EP, hhid->Report_buf,
 80093f2:	4b08      	ldr	r3, [pc, #32]	@ (8009414 <USBD_CUSTOM_HID_Init+0x124>)
 80093f4:	7819      	ldrb	r1, [r3, #0]
 80093f6:	68fa      	ldr	r2, [r7, #12]
 80093f8:	2302      	movs	r3, #2
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f001 fe64 	bl	800b0c8 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8009400:	2300      	movs	r3, #0
}
 8009402:	4618      	mov	r0, r3
 8009404:	3710      	adds	r7, #16
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}
 800940a:	bf00      	nop
 800940c:	2000231c 	.word	0x2000231c
 8009410:	200001ce 	.word	0x200001ce
 8009414:	200001cf 	.word	0x200001cf

08009418 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b082      	sub	sp, #8
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	460b      	mov	r3, r1
 8009422:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_IN_EP);
 8009424:	4b2a      	ldr	r3, [pc, #168]	@ (80094d0 <USBD_CUSTOM_HID_DeInit+0xb8>)
 8009426:	781b      	ldrb	r3, [r3, #0]
 8009428:	4619      	mov	r1, r3
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f001 fd83 	bl	800af36 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].is_used = 0U;
 8009430:	4b27      	ldr	r3, [pc, #156]	@ (80094d0 <USBD_CUSTOM_HID_DeInit+0xb8>)
 8009432:	781b      	ldrb	r3, [r3, #0]
 8009434:	f003 020f 	and.w	r2, r3, #15
 8009438:	6879      	ldr	r1, [r7, #4]
 800943a:	4613      	mov	r3, r2
 800943c:	009b      	lsls	r3, r3, #2
 800943e:	4413      	add	r3, r2
 8009440:	009b      	lsls	r3, r3, #2
 8009442:	440b      	add	r3, r1
 8009444:	3324      	adds	r3, #36	@ 0x24
 8009446:	2200      	movs	r2, #0
 8009448:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = 0U;
 800944a:	4b21      	ldr	r3, [pc, #132]	@ (80094d0 <USBD_CUSTOM_HID_DeInit+0xb8>)
 800944c:	781b      	ldrb	r3, [r3, #0]
 800944e:	f003 020f 	and.w	r2, r3, #15
 8009452:	6879      	ldr	r1, [r7, #4]
 8009454:	4613      	mov	r3, r2
 8009456:	009b      	lsls	r3, r3, #2
 8009458:	4413      	add	r3, r2
 800945a:	009b      	lsls	r3, r3, #2
 800945c:	440b      	add	r3, r1
 800945e:	3326      	adds	r3, #38	@ 0x26
 8009460:	2200      	movs	r2, #0
 8009462:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_OUT_EP);
 8009464:	4b1b      	ldr	r3, [pc, #108]	@ (80094d4 <USBD_CUSTOM_HID_DeInit+0xbc>)
 8009466:	781b      	ldrb	r3, [r3, #0]
 8009468:	4619      	mov	r1, r3
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f001 fd63 	bl	800af36 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].is_used = 0U;
 8009470:	4b18      	ldr	r3, [pc, #96]	@ (80094d4 <USBD_CUSTOM_HID_DeInit+0xbc>)
 8009472:	781b      	ldrb	r3, [r3, #0]
 8009474:	f003 020f 	and.w	r2, r3, #15
 8009478:	6879      	ldr	r1, [r7, #4]
 800947a:	4613      	mov	r3, r2
 800947c:	009b      	lsls	r3, r3, #2
 800947e:	4413      	add	r3, r2
 8009480:	009b      	lsls	r3, r3, #2
 8009482:	440b      	add	r3, r1
 8009484:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009488:	2200      	movs	r2, #0
 800948a:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = 0U;
 800948c:	4b11      	ldr	r3, [pc, #68]	@ (80094d4 <USBD_CUSTOM_HID_DeInit+0xbc>)
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	f003 020f 	and.w	r2, r3, #15
 8009494:	6879      	ldr	r1, [r7, #4]
 8009496:	4613      	mov	r3, r2
 8009498:	009b      	lsls	r3, r3, #2
 800949a:	4413      	add	r3, r2
 800949c:	009b      	lsls	r3, r3, #2
 800949e:	440b      	add	r3, r1
 80094a0:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 80094a4:	2200      	movs	r2, #0
 80094a6:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassData_HID_Custom != NULL)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d008      	beq.n	80094c4 <USBD_CUSTOM_HID_DeInit+0xac>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->DeInit();
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 80094b8:	689b      	ldr	r3, [r3, #8]
 80094ba:	4798      	blx	r3
#if (0)
    USBD_free(pdev->pClassData_HID_Custom);
#endif
    pdev->pClassData_HID_Custom = NULL;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2200      	movs	r2, #0
 80094c0:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
  }

  return (uint8_t)USBD_OK;
 80094c4:	2300      	movs	r3, #0
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3708      	adds	r7, #8
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}
 80094ce:	bf00      	nop
 80094d0:	200001ce 	.word	0x200001ce
 80094d4:	200001cf 	.word	0x200001cf

080094d8 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b088      	sub	sp, #32
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
 80094e0:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80094e8:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80094ea:	2300      	movs	r3, #0
 80094ec:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 80094ee:	2300      	movs	r3, #0
 80094f0:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80094f2:	2300      	movs	r3, #0
 80094f4:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 80094f6:	2300      	movs	r3, #0
 80094f8:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 80094fa:	693b      	ldr	r3, [r7, #16]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d101      	bne.n	8009504 <USBD_CUSTOM_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8009500:	2303      	movs	r3, #3
 8009502:	e0ed      	b.n	80096e0 <USBD_CUSTOM_HID_Setup+0x208>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	781b      	ldrb	r3, [r3, #0]
 8009508:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800950c:	2b00      	cmp	r3, #0
 800950e:	d052      	beq.n	80095b6 <USBD_CUSTOM_HID_Setup+0xde>
 8009510:	2b20      	cmp	r3, #32
 8009512:	f040 80dd 	bne.w	80096d0 <USBD_CUSTOM_HID_Setup+0x1f8>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	785b      	ldrb	r3, [r3, #1]
 800951a:	3b02      	subs	r3, #2
 800951c:	2b09      	cmp	r3, #9
 800951e:	d842      	bhi.n	80095a6 <USBD_CUSTOM_HID_Setup+0xce>
 8009520:	a201      	add	r2, pc, #4	@ (adr r2, 8009528 <USBD_CUSTOM_HID_Setup+0x50>)
 8009522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009526:	bf00      	nop
 8009528:	08009581 	.word	0x08009581
 800952c:	0800955f 	.word	0x0800955f
 8009530:	080095a7 	.word	0x080095a7
 8009534:	080095a7 	.word	0x080095a7
 8009538:	080095a7 	.word	0x080095a7
 800953c:	080095a7 	.word	0x080095a7
 8009540:	080095a7 	.word	0x080095a7
 8009544:	08009591 	.word	0x08009591
 8009548:	0800956f 	.word	0x0800956f
 800954c:	08009551 	.word	0x08009551
    {
    case CUSTOM_HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	885b      	ldrh	r3, [r3, #2]
 8009554:	b2db      	uxtb	r3, r3
 8009556:	461a      	mov	r2, r3
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	605a      	str	r2, [r3, #4]
      break;
 800955c:	e02a      	b.n	80095b4 <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800955e:	693b      	ldr	r3, [r7, #16]
 8009560:	3304      	adds	r3, #4
 8009562:	2201      	movs	r2, #1
 8009564:	4619      	mov	r1, r3
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f001 faad 	bl	800aac6 <USBD_CtlSendData>
      break;
 800956c:	e022      	b.n	80095b4 <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	885b      	ldrh	r3, [r3, #2]
 8009572:	0a1b      	lsrs	r3, r3, #8
 8009574:	b29b      	uxth	r3, r3
 8009576:	b2db      	uxtb	r3, r3
 8009578:	461a      	mov	r2, r3
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	609a      	str	r2, [r3, #8]
      break;
 800957e:	e019      	b.n	80095b4 <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	3308      	adds	r3, #8
 8009584:	2201      	movs	r2, #1
 8009586:	4619      	mov	r1, r3
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f001 fa9c 	bl	800aac6 <USBD_CtlSendData>
      break;
 800958e:	e011      	b.n	80095b4 <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_SET_REPORT:
      hhid->IsReportAvailable = 1U;
 8009590:	693b      	ldr	r3, [r7, #16]
 8009592:	2201      	movs	r2, #1
 8009594:	611a      	str	r2, [r3, #16]
      (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8009596:	6939      	ldr	r1, [r7, #16]
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	88db      	ldrh	r3, [r3, #6]
 800959c:	461a      	mov	r2, r3
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f001 fabd 	bl	800ab1e <USBD_CtlPrepareRx>
      break;
 80095a4:	e006      	b.n	80095b4 <USBD_CUSTOM_HID_Setup+0xdc>

    default:
      USBD_CtlError(pdev, req);
 80095a6:	6839      	ldr	r1, [r7, #0]
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f001 fa1b 	bl	800a9e4 <USBD_CtlError>
      ret = USBD_FAIL;
 80095ae:	2303      	movs	r3, #3
 80095b0:	75fb      	strb	r3, [r7, #23]
      break;
 80095b2:	bf00      	nop
    }
    break;
 80095b4:	e093      	b.n	80096de <USBD_CUSTOM_HID_Setup+0x206>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	785b      	ldrb	r3, [r3, #1]
 80095ba:	2b0b      	cmp	r3, #11
 80095bc:	d87f      	bhi.n	80096be <USBD_CUSTOM_HID_Setup+0x1e6>
 80095be:	a201      	add	r2, pc, #4	@ (adr r2, 80095c4 <USBD_CUSTOM_HID_Setup+0xec>)
 80095c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095c4:	080095f5 	.word	0x080095f5
 80095c8:	080096cd 	.word	0x080096cd
 80095cc:	080096bf 	.word	0x080096bf
 80095d0:	080096bf 	.word	0x080096bf
 80095d4:	080096bf 	.word	0x080096bf
 80095d8:	080096bf 	.word	0x080096bf
 80095dc:	0800961f 	.word	0x0800961f
 80095e0:	080096bf 	.word	0x080096bf
 80095e4:	080096bf 	.word	0x080096bf
 80095e8:	080096bf 	.word	0x080096bf
 80095ec:	0800966d 	.word	0x0800966d
 80095f0:	08009697 	.word	0x08009697
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095fa:	b2db      	uxtb	r3, r3
 80095fc:	2b03      	cmp	r3, #3
 80095fe:	d107      	bne.n	8009610 <USBD_CUSTOM_HID_Setup+0x138>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009600:	f107 030e 	add.w	r3, r7, #14
 8009604:	2202      	movs	r2, #2
 8009606:	4619      	mov	r1, r3
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f001 fa5c 	bl	800aac6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800960e:	e05e      	b.n	80096ce <USBD_CUSTOM_HID_Setup+0x1f6>
        USBD_CtlError(pdev, req);
 8009610:	6839      	ldr	r1, [r7, #0]
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f001 f9e6 	bl	800a9e4 <USBD_CtlError>
        ret = USBD_FAIL;
 8009618:	2303      	movs	r3, #3
 800961a:	75fb      	strb	r3, [r7, #23]
      break;
 800961c:	e057      	b.n	80096ce <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	885b      	ldrh	r3, [r3, #2]
 8009622:	0a1b      	lsrs	r3, r3, #8
 8009624:	b29b      	uxth	r3, r3
 8009626:	2b22      	cmp	r3, #34	@ 0x22
 8009628:	d10b      	bne.n	8009642 <USBD_CUSTOM_HID_Setup+0x16a>
      {
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	88db      	ldrh	r3, [r3, #6]
 800962e:	2b21      	cmp	r3, #33	@ 0x21
 8009630:	bf28      	it	cs
 8009632:	2321      	movcs	r3, #33	@ 0x21
 8009634:	83fb      	strh	r3, [r7, #30]
        pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->pReport;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	61bb      	str	r3, [r7, #24]
 8009640:	e00d      	b.n	800965e <USBD_CUSTOM_HID_Setup+0x186>
      }
      else
      {
        if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	885b      	ldrh	r3, [r3, #2]
 8009646:	0a1b      	lsrs	r3, r3, #8
 8009648:	b29b      	uxth	r3, r3
 800964a:	2b21      	cmp	r3, #33	@ 0x21
 800964c:	d107      	bne.n	800965e <USBD_CUSTOM_HID_Setup+0x186>
        {
          pbuf = USBD_CUSTOM_HID_Desc;
 800964e:	4b26      	ldr	r3, [pc, #152]	@ (80096e8 <USBD_CUSTOM_HID_Setup+0x210>)
 8009650:	61bb      	str	r3, [r7, #24]
          len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	88db      	ldrh	r3, [r3, #6]
 8009656:	2b09      	cmp	r3, #9
 8009658:	bf28      	it	cs
 800965a:	2309      	movcs	r3, #9
 800965c:	83fb      	strh	r3, [r7, #30]
        }
      }

      (void)USBD_CtlSendData(pdev, pbuf, len);
 800965e:	8bfb      	ldrh	r3, [r7, #30]
 8009660:	461a      	mov	r2, r3
 8009662:	69b9      	ldr	r1, [r7, #24]
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f001 fa2e 	bl	800aac6 <USBD_CtlSendData>
      break;
 800966a:	e030      	b.n	80096ce <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009672:	b2db      	uxtb	r3, r3
 8009674:	2b03      	cmp	r3, #3
 8009676:	d107      	bne.n	8009688 <USBD_CUSTOM_HID_Setup+0x1b0>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8009678:	693b      	ldr	r3, [r7, #16]
 800967a:	330c      	adds	r3, #12
 800967c:	2201      	movs	r2, #1
 800967e:	4619      	mov	r1, r3
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f001 fa20 	bl	800aac6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8009686:	e022      	b.n	80096ce <USBD_CUSTOM_HID_Setup+0x1f6>
        USBD_CtlError(pdev, req);
 8009688:	6839      	ldr	r1, [r7, #0]
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f001 f9aa 	bl	800a9e4 <USBD_CtlError>
        ret = USBD_FAIL;
 8009690:	2303      	movs	r3, #3
 8009692:	75fb      	strb	r3, [r7, #23]
      break;
 8009694:	e01b      	b.n	80096ce <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800969c:	b2db      	uxtb	r3, r3
 800969e:	2b03      	cmp	r3, #3
 80096a0:	d106      	bne.n	80096b0 <USBD_CUSTOM_HID_Setup+0x1d8>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	885b      	ldrh	r3, [r3, #2]
 80096a6:	b2db      	uxtb	r3, r3
 80096a8:	461a      	mov	r2, r3
 80096aa:	693b      	ldr	r3, [r7, #16]
 80096ac:	60da      	str	r2, [r3, #12]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80096ae:	e00e      	b.n	80096ce <USBD_CUSTOM_HID_Setup+0x1f6>
        USBD_CtlError(pdev, req);
 80096b0:	6839      	ldr	r1, [r7, #0]
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f001 f996 	bl	800a9e4 <USBD_CtlError>
        ret = USBD_FAIL;
 80096b8:	2303      	movs	r3, #3
 80096ba:	75fb      	strb	r3, [r7, #23]
      break;
 80096bc:	e007      	b.n	80096ce <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80096be:	6839      	ldr	r1, [r7, #0]
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f001 f98f 	bl	800a9e4 <USBD_CtlError>
      ret = USBD_FAIL;
 80096c6:	2303      	movs	r3, #3
 80096c8:	75fb      	strb	r3, [r7, #23]
      break;
 80096ca:	e000      	b.n	80096ce <USBD_CUSTOM_HID_Setup+0x1f6>
      break;
 80096cc:	bf00      	nop
    }
    break;
 80096ce:	e006      	b.n	80096de <USBD_CUSTOM_HID_Setup+0x206>

  default:
    USBD_CtlError(pdev, req);
 80096d0:	6839      	ldr	r1, [r7, #0]
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f001 f986 	bl	800a9e4 <USBD_CtlError>
    ret = USBD_FAIL;
 80096d8:	2303      	movs	r3, #3
 80096da:	75fb      	strb	r3, [r7, #23]
    break;
 80096dc:	bf00      	nop
  }
  return (uint8_t)ret;
 80096de:	7dfb      	ldrb	r3, [r7, #23]
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	3720      	adds	r7, #32
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}
 80096e8:	20000290 	.word	0x20000290

080096ec <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 80096ec:	b480      	push	{r7}
 80096ee:	b083      	sub	sp, #12
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2229      	movs	r2, #41	@ 0x29
 80096f8:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgFSDesc;
 80096fa:	4b03      	ldr	r3, [pc, #12]	@ (8009708 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	370c      	adds	r7, #12
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr
 8009708:	2000020c 	.word	0x2000020c

0800970c <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 800970c:	b480      	push	{r7}
 800970e:	b083      	sub	sp, #12
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2229      	movs	r2, #41	@ 0x29
 8009718:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgHSDesc;
 800971a:	4b03      	ldr	r3, [pc, #12]	@ (8009728 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 800971c:	4618      	mov	r0, r3
 800971e:	370c      	adds	r7, #12
 8009720:	46bd      	mov	sp, r7
 8009722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009726:	4770      	bx	lr
 8009728:	20000238 	.word	0x20000238

0800972c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800972c:	b480      	push	{r7}
 800972e:	b083      	sub	sp, #12
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2229      	movs	r2, #41	@ 0x29
 8009738:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 800973a:	4b03      	ldr	r3, [pc, #12]	@ (8009748 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800973c:	4618      	mov	r0, r3
 800973e:	370c      	adds	r7, #12
 8009740:	46bd      	mov	sp, r7
 8009742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009746:	4770      	bx	lr
 8009748:	20000264 	.word	0x20000264

0800974c <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800974c:	b480      	push	{r7}
 800974e:	b083      	sub	sp, #12
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	460b      	mov	r3, r1
 8009756:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom)->state = CUSTOM_HID_IDLE;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800975e:	2200      	movs	r2, #0
 8009760:	751a      	strb	r2, [r3, #20]

  return (uint8_t)USBD_OK;
 8009762:	2300      	movs	r3, #0
}
 8009764:	4618      	mov	r0, r3
 8009766:	370c      	adds	r7, #12
 8009768:	46bd      	mov	sp, r7
 800976a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976e:	4770      	bx	lr

08009770 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b084      	sub	sp, #16
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
 8009778:	460b      	mov	r3, r1
 800977a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData_HID_Custom == NULL)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009782:	2b00      	cmp	r3, #0
 8009784:	d101      	bne.n	800978a <USBD_CUSTOM_HID_DataOut+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8009786:	2303      	movs	r3, #3
 8009788:	e00e      	b.n	80097a8 <USBD_CUSTOM_HID_DataOut+0x38>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009790:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->OutEvent(hhid->Report_buf[0], hhid->Report_buf[1]);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 8009798:	68db      	ldr	r3, [r3, #12]
 800979a:	68fa      	ldr	r2, [r7, #12]
 800979c:	7810      	ldrb	r0, [r2, #0]
 800979e:	68fa      	ldr	r2, [r7, #12]
 80097a0:	7852      	ldrb	r2, [r2, #1]
 80097a2:	4611      	mov	r1, r2
 80097a4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80097a6:	2300      	movs	r3, #0
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3710      	adds	r7, #16
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}

080097b0 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b084      	sub	sp, #16
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80097be:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d101      	bne.n	80097ca <USBD_CUSTOM_HID_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80097c6:	2303      	movs	r3, #3
 80097c8:	e011      	b.n	80097ee <USBD_CUSTOM_HID_EP0_RxReady+0x3e>
  }

  if (hhid->IsReportAvailable == 1U)
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	691b      	ldr	r3, [r3, #16]
 80097ce:	2b01      	cmp	r3, #1
 80097d0:	d10c      	bne.n	80097ec <USBD_CUSTOM_HID_EP0_RxReady+0x3c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->OutEvent(hhid->Report_buf[0], hhid->Report_buf[1]);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 80097d8:	68db      	ldr	r3, [r3, #12]
 80097da:	68fa      	ldr	r2, [r7, #12]
 80097dc:	7810      	ldrb	r0, [r2, #0]
 80097de:	68fa      	ldr	r2, [r7, #12]
 80097e0:	7852      	ldrb	r2, [r2, #1]
 80097e2:	4611      	mov	r1, r2
 80097e4:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	2200      	movs	r2, #0
 80097ea:	611a      	str	r2, [r3, #16]
  }

  return (uint8_t)USBD_OK;
 80097ec:	2300      	movs	r3, #0
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	3710      	adds	r7, #16
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}
	...

080097f8 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80097f8:	b480      	push	{r7}
 80097fa:	b083      	sub	sp, #12
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	220a      	movs	r2, #10
 8009804:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8009806:	4b03      	ldr	r3, [pc, #12]	@ (8009814 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8009808:	4618      	mov	r0, r3
 800980a:	370c      	adds	r7, #12
 800980c:	46bd      	mov	sp, r7
 800980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009812:	4770      	bx	lr
 8009814:	2000029c 	.word	0x2000029c

08009818 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8009818:	b480      	push	{r7}
 800981a:	b083      	sub	sp, #12
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d101      	bne.n	800982c <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009828:	2303      	movs	r3, #3
 800982a:	e004      	b.n	8009836 <USBD_CUSTOM_HID_RegisterInterface+0x1e>
  }

  pdev->pUserData_HID_Custom = fops;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	683a      	ldr	r2, [r7, #0]
 8009830:	f8c3 22dc 	str.w	r2, [r3, #732]	@ 0x2dc

  return (uint8_t)USBD_OK;
 8009834:	2300      	movs	r3, #0
}
 8009836:	4618      	mov	r0, r3
 8009838:	370c      	adds	r7, #12
 800983a:	46bd      	mov	sp, r7
 800983c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009840:	4770      	bx	lr
	...

08009844 <USBD_Update_HID_Custom_DESC>:

void USBD_Update_HID_Custom_DESC(uint8_t *desc, uint8_t itf_no, uint8_t in_ep, uint8_t out_ep, uint8_t str_idx)
{
 8009844:	b480      	push	{r7}
 8009846:	b083      	sub	sp, #12
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
 800984c:	4608      	mov	r0, r1
 800984e:	4611      	mov	r1, r2
 8009850:	461a      	mov	r2, r3
 8009852:	4603      	mov	r3, r0
 8009854:	70fb      	strb	r3, [r7, #3]
 8009856:	460b      	mov	r3, r1
 8009858:	70bb      	strb	r3, [r7, #2]
 800985a:	4613      	mov	r3, r2
 800985c:	707b      	strb	r3, [r7, #1]
  desc[11] = itf_no;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	330b      	adds	r3, #11
 8009862:	78fa      	ldrb	r2, [r7, #3]
 8009864:	701a      	strb	r2, [r3, #0]
  desc[17] = str_idx;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	3311      	adds	r3, #17
 800986a:	7c3a      	ldrb	r2, [r7, #16]
 800986c:	701a      	strb	r2, [r3, #0]
  desc[29] = in_ep;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	331d      	adds	r3, #29
 8009872:	78ba      	ldrb	r2, [r7, #2]
 8009874:	701a      	strb	r2, [r3, #0]
  desc[36] = out_ep;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	3324      	adds	r3, #36	@ 0x24
 800987a:	787a      	ldrb	r2, [r7, #1]
 800987c:	701a      	strb	r2, [r3, #0]

  CUSTOM_HID_IN_EP = in_ep;
 800987e:	4a09      	ldr	r2, [pc, #36]	@ (80098a4 <USBD_Update_HID_Custom_DESC+0x60>)
 8009880:	78bb      	ldrb	r3, [r7, #2]
 8009882:	7013      	strb	r3, [r2, #0]
  CUSTOM_HID_OUT_EP = out_ep;
 8009884:	4a08      	ldr	r2, [pc, #32]	@ (80098a8 <USBD_Update_HID_Custom_DESC+0x64>)
 8009886:	787b      	ldrb	r3, [r7, #1]
 8009888:	7013      	strb	r3, [r2, #0]
  CUSTOM_HID_ITF_NBR = itf_no;
 800988a:	4a08      	ldr	r2, [pc, #32]	@ (80098ac <USBD_Update_HID_Custom_DESC+0x68>)
 800988c:	78fb      	ldrb	r3, [r7, #3]
 800988e:	7013      	strb	r3, [r2, #0]
  CUSTOM_HID_STR_DESC_IDX = str_idx;
 8009890:	4a07      	ldr	r2, [pc, #28]	@ (80098b0 <USBD_Update_HID_Custom_DESC+0x6c>)
 8009892:	7c3b      	ldrb	r3, [r7, #16]
 8009894:	7013      	strb	r3, [r2, #0]
}
 8009896:	bf00      	nop
 8009898:	370c      	adds	r7, #12
 800989a:	46bd      	mov	sp, r7
 800989c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a0:	4770      	bx	lr
 80098a2:	bf00      	nop
 80098a4:	200001ce 	.word	0x200001ce
 80098a8:	200001cf 	.word	0x200001cf
 80098ac:	20002318 	.word	0x20002318
 80098b0:	20002319 	.word	0x20002319

080098b4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b086      	sub	sp, #24
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	60f8      	str	r0, [r7, #12]
 80098bc:	60b9      	str	r1, [r7, #8]
 80098be:	4613      	mov	r3, r2
 80098c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d101      	bne.n	80098cc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80098c8:	2303      	movs	r3, #3
 80098ca:	e01b      	b.n	8009904 <USBD_Init+0x50>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	2200      	movs	r2, #0
 80098d0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pConfDesc = NULL;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	2200      	movs	r2, #0
 80098d8:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d003      	beq.n	80098ea <USBD_Init+0x36>
  {
    pdev->pDesc = pdesc;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	68ba      	ldr	r2, [r7, #8]
 80098e6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	2201      	movs	r2, #1
 80098ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	79fa      	ldrb	r2, [r7, #7]
 80098f6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80098f8:	68f8      	ldr	r0, [r7, #12]
 80098fa:	f001 fa7d 	bl	800adf8 <USBD_LL_Init>
 80098fe:	4603      	mov	r3, r0
 8009900:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009902:	7dfb      	ldrb	r3, [r7, #23]
}
 8009904:	4618      	mov	r0, r3
 8009906:	3718      	adds	r7, #24
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}

0800990c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b084      	sub	sp, #16
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
 8009914:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009916:	2300      	movs	r3, #0
 8009918:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d101      	bne.n	8009924 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8009920:	2303      	movs	r3, #3
 8009922:	e02d      	b.n	8009980 <USBD_RegisterClass+0x74>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	683a      	ldr	r2, [r7, #0]
 8009928:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  /* Get Device Configuration Descriptor */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	7c1b      	ldrb	r3, [r3, #16]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d112      	bne.n	800995a <USBD_RegisterClass+0x4e>
  {
	  if (pdev->pClass->GetHSConfigDescriptor != NULL)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800993a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800993c:	2b00      	cmp	r3, #0
 800993e:	d01e      	beq.n	800997e <USBD_RegisterClass+0x72>
	  {
		  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009948:	f107 020e 	add.w	r2, r7, #14
 800994c:	4610      	mov	r0, r2
 800994e:	4798      	blx	r3
 8009950:	4602      	mov	r2, r0
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318
 8009958:	e011      	b.n	800997e <USBD_RegisterClass+0x72>
	  }
  }
  else if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009962:	2b00      	cmp	r3, #0
 8009964:	d00b      	beq.n	800997e <USBD_RegisterClass+0x72>
  {
	  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800996c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800996e:	f107 020e 	add.w	r2, r7, #14
 8009972:	4610      	mov	r0, r2
 8009974:	4798      	blx	r3
 8009976:	4602      	mov	r2, r0
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318
  }

  return USBD_OK;
 800997e:	2300      	movs	r3, #0
}
 8009980:	4618      	mov	r0, r3
 8009982:	3710      	adds	r7, #16
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}

08009988 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b082      	sub	sp, #8
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f001 fa8f 	bl	800aeb4 <USBD_LL_Start>
 8009996:	4603      	mov	r3, r0
}
 8009998:	4618      	mov	r0, r3
 800999a:	3708      	adds	r7, #8
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}

080099a0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b083      	sub	sp, #12
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80099a8:	2300      	movs	r3, #0
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	370c      	adds	r7, #12
 80099ae:	46bd      	mov	sp, r7
 80099b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b4:	4770      	bx	lr

080099b6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80099b6:	b580      	push	{r7, lr}
 80099b8:	b084      	sub	sp, #16
 80099ba:	af00      	add	r7, sp, #0
 80099bc:	6078      	str	r0, [r7, #4]
 80099be:	460b      	mov	r3, r1
 80099c0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80099c2:	2303      	movs	r3, #3
 80099c4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d009      	beq.n	80099e4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	78fa      	ldrb	r2, [r7, #3]
 80099da:	4611      	mov	r1, r2
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	4798      	blx	r3
 80099e0:	4603      	mov	r3, r0
 80099e2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80099e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3710      	adds	r7, #16
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}

080099ee <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80099ee:	b580      	push	{r7, lr}
 80099f0:	b082      	sub	sp, #8
 80099f2:	af00      	add	r7, sp, #0
 80099f4:	6078      	str	r0, [r7, #4]
 80099f6:	460b      	mov	r3, r1
 80099f8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d007      	beq.n	8009a14 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a0a:	685b      	ldr	r3, [r3, #4]
 8009a0c:	78fa      	ldrb	r2, [r7, #3]
 8009a0e:	4611      	mov	r1, r2
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	4798      	blx	r3
  }

  return USBD_OK;
 8009a14:	2300      	movs	r3, #0
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3708      	adds	r7, #8
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}

08009a1e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009a1e:	b580      	push	{r7, lr}
 8009a20:	b084      	sub	sp, #16
 8009a22:	af00      	add	r7, sp, #0
 8009a24:	6078      	str	r0, [r7, #4]
 8009a26:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009a2e:	6839      	ldr	r1, [r7, #0]
 8009a30:	4618      	mov	r0, r3
 8009a32:	f000 ff9d 	bl	800a970 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2201      	movs	r2, #1
 8009a3a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009a44:	461a      	mov	r2, r3
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009a52:	f003 031f 	and.w	r3, r3, #31
 8009a56:	2b02      	cmp	r3, #2
 8009a58:	d01a      	beq.n	8009a90 <USBD_LL_SetupStage+0x72>
 8009a5a:	2b02      	cmp	r3, #2
 8009a5c:	d822      	bhi.n	8009aa4 <USBD_LL_SetupStage+0x86>
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d002      	beq.n	8009a68 <USBD_LL_SetupStage+0x4a>
 8009a62:	2b01      	cmp	r3, #1
 8009a64:	d00a      	beq.n	8009a7c <USBD_LL_SetupStage+0x5e>
 8009a66:	e01d      	b.n	8009aa4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009a6e:	4619      	mov	r1, r3
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f000 fa5d 	bl	8009f30 <USBD_StdDevReq>
 8009a76:	4603      	mov	r3, r0
 8009a78:	73fb      	strb	r3, [r7, #15]
      break;
 8009a7a:	e020      	b.n	8009abe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009a82:	4619      	mov	r1, r3
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f000 fac1 	bl	800a00c <USBD_StdItfReq>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	73fb      	strb	r3, [r7, #15]
      break;
 8009a8e:	e016      	b.n	8009abe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009a96:	4619      	mov	r1, r3
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f000 fb00 	bl	800a09e <USBD_StdEPReq>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	73fb      	strb	r3, [r7, #15]
      break;
 8009aa2:	e00c      	b.n	8009abe <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009aaa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009aae:	b2db      	uxtb	r3, r3
 8009ab0:	4619      	mov	r1, r3
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f001 fa5e 	bl	800af74 <USBD_LL_StallEP>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	73fb      	strb	r3, [r7, #15]
      break;
 8009abc:	bf00      	nop
  }

  return ret;
 8009abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3710      	adds	r7, #16
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}

08009ac8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b086      	sub	sp, #24
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	60f8      	str	r0, [r7, #12]
 8009ad0:	460b      	mov	r3, r1
 8009ad2:	607a      	str	r2, [r7, #4]
 8009ad4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009ad6:	7afb      	ldrb	r3, [r7, #11]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d138      	bne.n	8009b4e <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009ae2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009aea:	2b03      	cmp	r3, #3
 8009aec:	d14a      	bne.n	8009b84 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	689a      	ldr	r2, [r3, #8]
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	68db      	ldr	r3, [r3, #12]
 8009af6:	429a      	cmp	r2, r3
 8009af8:	d913      	bls.n	8009b22 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009afa:	693b      	ldr	r3, [r7, #16]
 8009afc:	689a      	ldr	r2, [r3, #8]
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	68db      	ldr	r3, [r3, #12]
 8009b02:	1ad2      	subs	r2, r2, r3
 8009b04:	693b      	ldr	r3, [r7, #16]
 8009b06:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	68da      	ldr	r2, [r3, #12]
 8009b0c:	693b      	ldr	r3, [r7, #16]
 8009b0e:	689b      	ldr	r3, [r3, #8]
 8009b10:	4293      	cmp	r3, r2
 8009b12:	bf28      	it	cs
 8009b14:	4613      	movcs	r3, r2
 8009b16:	461a      	mov	r2, r3
 8009b18:	6879      	ldr	r1, [r7, #4]
 8009b1a:	68f8      	ldr	r0, [r7, #12]
 8009b1c:	f001 f81c 	bl	800ab58 <USBD_CtlContinueRx>
 8009b20:	e030      	b.n	8009b84 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b28:	b2db      	uxtb	r3, r3
 8009b2a:	2b03      	cmp	r3, #3
 8009b2c:	d10b      	bne.n	8009b46 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b34:	691b      	ldr	r3, [r3, #16]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d005      	beq.n	8009b46 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b40:	691b      	ldr	r3, [r3, #16]
 8009b42:	68f8      	ldr	r0, [r7, #12]
 8009b44:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009b46:	68f8      	ldr	r0, [r7, #12]
 8009b48:	f001 f817 	bl	800ab7a <USBD_CtlSendStatus>
 8009b4c:	e01a      	b.n	8009b84 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b54:	b2db      	uxtb	r3, r3
 8009b56:	2b03      	cmp	r3, #3
 8009b58:	d114      	bne.n	8009b84 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b60:	699b      	ldr	r3, [r3, #24]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d00e      	beq.n	8009b84 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b6c:	699b      	ldr	r3, [r3, #24]
 8009b6e:	7afa      	ldrb	r2, [r7, #11]
 8009b70:	4611      	mov	r1, r2
 8009b72:	68f8      	ldr	r0, [r7, #12]
 8009b74:	4798      	blx	r3
 8009b76:	4603      	mov	r3, r0
 8009b78:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009b7a:	7dfb      	ldrb	r3, [r7, #23]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d001      	beq.n	8009b84 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8009b80:	7dfb      	ldrb	r3, [r7, #23]
 8009b82:	e000      	b.n	8009b86 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8009b84:	2300      	movs	r3, #0
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3718      	adds	r7, #24
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}

08009b8e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009b8e:	b580      	push	{r7, lr}
 8009b90:	b086      	sub	sp, #24
 8009b92:	af00      	add	r7, sp, #0
 8009b94:	60f8      	str	r0, [r7, #12]
 8009b96:	460b      	mov	r3, r1
 8009b98:	607a      	str	r2, [r7, #4]
 8009b9a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009b9c:	7afb      	ldrb	r3, [r7, #11]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d16b      	bne.n	8009c7a <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	3314      	adds	r3, #20
 8009ba6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009bae:	2b02      	cmp	r3, #2
 8009bb0:	d156      	bne.n	8009c60 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	689a      	ldr	r2, [r3, #8]
 8009bb6:	693b      	ldr	r3, [r7, #16]
 8009bb8:	68db      	ldr	r3, [r3, #12]
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	d914      	bls.n	8009be8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009bbe:	693b      	ldr	r3, [r7, #16]
 8009bc0:	689a      	ldr	r2, [r3, #8]
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	68db      	ldr	r3, [r3, #12]
 8009bc6:	1ad2      	subs	r2, r2, r3
 8009bc8:	693b      	ldr	r3, [r7, #16]
 8009bca:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	689b      	ldr	r3, [r3, #8]
 8009bd0:	461a      	mov	r2, r3
 8009bd2:	6879      	ldr	r1, [r7, #4]
 8009bd4:	68f8      	ldr	r0, [r7, #12]
 8009bd6:	f000 ff91 	bl	800aafc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009bda:	2300      	movs	r3, #0
 8009bdc:	2200      	movs	r2, #0
 8009bde:	2100      	movs	r1, #0
 8009be0:	68f8      	ldr	r0, [r7, #12]
 8009be2:	f001 fa71 	bl	800b0c8 <USBD_LL_PrepareReceive>
 8009be6:	e03b      	b.n	8009c60 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	68da      	ldr	r2, [r3, #12]
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	689b      	ldr	r3, [r3, #8]
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	d11c      	bne.n	8009c2e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	685a      	ldr	r2, [r3, #4]
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	d316      	bcc.n	8009c2e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009c00:	693b      	ldr	r3, [r7, #16]
 8009c02:	685a      	ldr	r2, [r3, #4]
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009c0a:	429a      	cmp	r2, r3
 8009c0c:	d20f      	bcs.n	8009c2e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009c0e:	2200      	movs	r2, #0
 8009c10:	2100      	movs	r1, #0
 8009c12:	68f8      	ldr	r0, [r7, #12]
 8009c14:	f000 ff72 	bl	800aafc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009c20:	2300      	movs	r3, #0
 8009c22:	2200      	movs	r2, #0
 8009c24:	2100      	movs	r1, #0
 8009c26:	68f8      	ldr	r0, [r7, #12]
 8009c28:	f001 fa4e 	bl	800b0c8 <USBD_LL_PrepareReceive>
 8009c2c:	e018      	b.n	8009c60 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c34:	b2db      	uxtb	r3, r3
 8009c36:	2b03      	cmp	r3, #3
 8009c38:	d10b      	bne.n	8009c52 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c40:	68db      	ldr	r3, [r3, #12]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d005      	beq.n	8009c52 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c4c:	68db      	ldr	r3, [r3, #12]
 8009c4e:	68f8      	ldr	r0, [r7, #12]
 8009c50:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009c52:	2180      	movs	r1, #128	@ 0x80
 8009c54:	68f8      	ldr	r0, [r7, #12]
 8009c56:	f001 f98d 	bl	800af74 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009c5a:	68f8      	ldr	r0, [r7, #12]
 8009c5c:	f000 ffa0 	bl	800aba0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009c66:	2b01      	cmp	r3, #1
 8009c68:	d122      	bne.n	8009cb0 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009c6a:	68f8      	ldr	r0, [r7, #12]
 8009c6c:	f7ff fe98 	bl	80099a0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	2200      	movs	r2, #0
 8009c74:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009c78:	e01a      	b.n	8009cb0 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c80:	b2db      	uxtb	r3, r3
 8009c82:	2b03      	cmp	r3, #3
 8009c84:	d114      	bne.n	8009cb0 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c8c:	695b      	ldr	r3, [r3, #20]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d00e      	beq.n	8009cb0 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c98:	695b      	ldr	r3, [r3, #20]
 8009c9a:	7afa      	ldrb	r2, [r7, #11]
 8009c9c:	4611      	mov	r1, r2
 8009c9e:	68f8      	ldr	r0, [r7, #12]
 8009ca0:	4798      	blx	r3
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009ca6:	7dfb      	ldrb	r3, [r7, #23]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d001      	beq.n	8009cb0 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8009cac:	7dfb      	ldrb	r3, [r7, #23]
 8009cae:	e000      	b.n	8009cb2 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8009cb0:	2300      	movs	r3, #0
}
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	3718      	adds	r7, #24
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}

08009cba <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009cba:	b580      	push	{r7, lr}
 8009cbc:	b082      	sub	sp, #8
 8009cbe:	af00      	add	r7, sp, #0
 8009cc0:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2201      	movs	r2, #1
 8009cc6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d101      	bne.n	8009cee <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009cea:	2303      	movs	r3, #3
 8009cec:	e02a      	b.n	8009d44 <USBD_LL_Reset+0x8a>
  }

	if (pdev->pClass->DeInit != NULL)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009cf4:	685b      	ldr	r3, [r3, #4]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d009      	beq.n	8009d0e <USBD_LL_Reset+0x54>
	{
	  (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d00:	685b      	ldr	r3, [r3, #4]
 8009d02:	687a      	ldr	r2, [r7, #4]
 8009d04:	6852      	ldr	r2, [r2, #4]
 8009d06:	b2d2      	uxtb	r2, r2
 8009d08:	4611      	mov	r1, r2
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	4798      	blx	r3
	}

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009d0e:	2340      	movs	r3, #64	@ 0x40
 8009d10:	2200      	movs	r2, #0
 8009d12:	2100      	movs	r1, #0
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f001 f8e8 	bl	800aeea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2201      	movs	r2, #1
 8009d1e:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2240      	movs	r2, #64	@ 0x40
 8009d26:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009d2a:	2340      	movs	r3, #64	@ 0x40
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	2180      	movs	r1, #128	@ 0x80
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f001 f8da 	bl	800aeea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2201      	movs	r2, #1
 8009d3a:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2240      	movs	r2, #64	@ 0x40
 8009d40:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009d42:	2300      	movs	r3, #0
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	3708      	adds	r7, #8
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}

08009d4c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b083      	sub	sp, #12
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	460b      	mov	r3, r1
 8009d56:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	78fa      	ldrb	r2, [r7, #3]
 8009d5c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009d5e:	2300      	movs	r3, #0
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	370c      	adds	r7, #12
 8009d64:	46bd      	mov	sp, r7
 8009d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6a:	4770      	bx	lr

08009d6c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b083      	sub	sp, #12
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d7a:	b2da      	uxtb	r2, r3
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2204      	movs	r2, #4
 8009d86:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009d8a:	2300      	movs	r3, #0
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	370c      	adds	r7, #12
 8009d90:	46bd      	mov	sp, r7
 8009d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d96:	4770      	bx	lr

08009d98 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b083      	sub	sp, #12
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009da6:	b2db      	uxtb	r3, r3
 8009da8:	2b04      	cmp	r3, #4
 8009daa:	d106      	bne.n	8009dba <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009db2:	b2da      	uxtb	r2, r3
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009dba:	2300      	movs	r3, #0
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	370c      	adds	r7, #12
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc6:	4770      	bx	lr

08009dc8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b082      	sub	sp, #8
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d101      	bne.n	8009dde <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009dda:	2303      	movs	r3, #3
 8009ddc:	e012      	b.n	8009e04 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009de4:	b2db      	uxtb	r3, r3
 8009de6:	2b03      	cmp	r3, #3
 8009de8:	d10b      	bne.n	8009e02 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009df0:	69db      	ldr	r3, [r3, #28]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d005      	beq.n	8009e02 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009dfc:	69db      	ldr	r3, [r3, #28]
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009e02:	2300      	movs	r3, #0
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	3708      	adds	r7, #8
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}

08009e0c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b082      	sub	sp, #8
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
 8009e14:	460b      	mov	r3, r1
 8009e16:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d101      	bne.n	8009e26 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8009e22:	2303      	movs	r3, #3
 8009e24:	e014      	b.n	8009e50 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e2c:	b2db      	uxtb	r3, r3
 8009e2e:	2b03      	cmp	r3, #3
 8009e30:	d10d      	bne.n	8009e4e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e38:	6a1b      	ldr	r3, [r3, #32]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d007      	beq.n	8009e4e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e44:	6a1b      	ldr	r3, [r3, #32]
 8009e46:	78fa      	ldrb	r2, [r7, #3]
 8009e48:	4611      	mov	r1, r2
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009e4e:	2300      	movs	r3, #0
}
 8009e50:	4618      	mov	r0, r3
 8009e52:	3708      	adds	r7, #8
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}

08009e58 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b082      	sub	sp, #8
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
 8009e60:	460b      	mov	r3, r1
 8009e62:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d101      	bne.n	8009e72 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8009e6e:	2303      	movs	r3, #3
 8009e70:	e014      	b.n	8009e9c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e78:	b2db      	uxtb	r3, r3
 8009e7a:	2b03      	cmp	r3, #3
 8009e7c:	d10d      	bne.n	8009e9a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d007      	beq.n	8009e9a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e92:	78fa      	ldrb	r2, [r7, #3]
 8009e94:	4611      	mov	r1, r2
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009e9a:	2300      	movs	r3, #0
}
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	3708      	adds	r7, #8
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}

08009ea4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b083      	sub	sp, #12
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009eac:	2300      	movs	r3, #0
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	370c      	adds	r7, #12
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb8:	4770      	bx	lr

08009eba <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009eba:	b580      	push	{r7, lr}
 8009ebc:	b082      	sub	sp, #8
 8009ebe:	af00      	add	r7, sp, #0
 8009ec0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2201      	movs	r2, #1
 8009ec6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  if (pdev->pClass != NULL)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d009      	beq.n	8009ee8 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009eda:	685b      	ldr	r3, [r3, #4]
 8009edc:	687a      	ldr	r2, [r7, #4]
 8009ede:	6852      	ldr	r2, [r2, #4]
 8009ee0:	b2d2      	uxtb	r2, r2
 8009ee2:	4611      	mov	r1, r2
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	4798      	blx	r3
  }

  return USBD_OK;
 8009ee8:	2300      	movs	r3, #0
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	3708      	adds	r7, #8
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}

08009ef2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009ef2:	b480      	push	{r7}
 8009ef4:	b087      	sub	sp, #28
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	781b      	ldrb	r3, [r3, #0]
 8009f02:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009f04:	697b      	ldr	r3, [r7, #20]
 8009f06:	3301      	adds	r3, #1
 8009f08:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	781b      	ldrb	r3, [r3, #0]
 8009f0e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009f10:	8a3b      	ldrh	r3, [r7, #16]
 8009f12:	021b      	lsls	r3, r3, #8
 8009f14:	b21a      	sxth	r2, r3
 8009f16:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009f1a:	4313      	orrs	r3, r2
 8009f1c:	b21b      	sxth	r3, r3
 8009f1e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009f20:	89fb      	ldrh	r3, [r7, #14]
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	371c      	adds	r7, #28
 8009f26:	46bd      	mov	sp, r7
 8009f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2c:	4770      	bx	lr
	...

08009f30 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b084      	sub	sp, #16
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
 8009f38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	781b      	ldrb	r3, [r3, #0]
 8009f42:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009f46:	2b40      	cmp	r3, #64	@ 0x40
 8009f48:	d005      	beq.n	8009f56 <USBD_StdDevReq+0x26>
 8009f4a:	2b40      	cmp	r3, #64	@ 0x40
 8009f4c:	d853      	bhi.n	8009ff6 <USBD_StdDevReq+0xc6>
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d00b      	beq.n	8009f6a <USBD_StdDevReq+0x3a>
 8009f52:	2b20      	cmp	r3, #32
 8009f54:	d14f      	bne.n	8009ff6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f5c:	689b      	ldr	r3, [r3, #8]
 8009f5e:	6839      	ldr	r1, [r7, #0]
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	4798      	blx	r3
 8009f64:	4603      	mov	r3, r0
 8009f66:	73fb      	strb	r3, [r7, #15]
      break;
 8009f68:	e04a      	b.n	800a000 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	785b      	ldrb	r3, [r3, #1]
 8009f6e:	2b09      	cmp	r3, #9
 8009f70:	d83b      	bhi.n	8009fea <USBD_StdDevReq+0xba>
 8009f72:	a201      	add	r2, pc, #4	@ (adr r2, 8009f78 <USBD_StdDevReq+0x48>)
 8009f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f78:	08009fcd 	.word	0x08009fcd
 8009f7c:	08009fe1 	.word	0x08009fe1
 8009f80:	08009feb 	.word	0x08009feb
 8009f84:	08009fd7 	.word	0x08009fd7
 8009f88:	08009feb 	.word	0x08009feb
 8009f8c:	08009fab 	.word	0x08009fab
 8009f90:	08009fa1 	.word	0x08009fa1
 8009f94:	08009feb 	.word	0x08009feb
 8009f98:	08009fc3 	.word	0x08009fc3
 8009f9c:	08009fb5 	.word	0x08009fb5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009fa0:	6839      	ldr	r1, [r7, #0]
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f000 f9de 	bl	800a364 <USBD_GetDescriptor>
          break;
 8009fa8:	e024      	b.n	8009ff4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009faa:	6839      	ldr	r1, [r7, #0]
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f000 fb55 	bl	800a65c <USBD_SetAddress>
          break;
 8009fb2:	e01f      	b.n	8009ff4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009fb4:	6839      	ldr	r1, [r7, #0]
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f000 fb94 	bl	800a6e4 <USBD_SetConfig>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	73fb      	strb	r3, [r7, #15]
          break;
 8009fc0:	e018      	b.n	8009ff4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009fc2:	6839      	ldr	r1, [r7, #0]
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f000 fc33 	bl	800a830 <USBD_GetConfig>
          break;
 8009fca:	e013      	b.n	8009ff4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009fcc:	6839      	ldr	r1, [r7, #0]
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f000 fc64 	bl	800a89c <USBD_GetStatus>
          break;
 8009fd4:	e00e      	b.n	8009ff4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009fd6:	6839      	ldr	r1, [r7, #0]
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f000 fc93 	bl	800a904 <USBD_SetFeature>
          break;
 8009fde:	e009      	b.n	8009ff4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009fe0:	6839      	ldr	r1, [r7, #0]
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f000 fca2 	bl	800a92c <USBD_ClrFeature>
          break;
 8009fe8:	e004      	b.n	8009ff4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009fea:	6839      	ldr	r1, [r7, #0]
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f000 fcf9 	bl	800a9e4 <USBD_CtlError>
          break;
 8009ff2:	bf00      	nop
      }
      break;
 8009ff4:	e004      	b.n	800a000 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8009ff6:	6839      	ldr	r1, [r7, #0]
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f000 fcf3 	bl	800a9e4 <USBD_CtlError>
      break;
 8009ffe:	bf00      	nop
  }

  return ret;
 800a000:	7bfb      	ldrb	r3, [r7, #15]
}
 800a002:	4618      	mov	r0, r3
 800a004:	3710      	adds	r7, #16
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}
 800a00a:	bf00      	nop

0800a00c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b084      	sub	sp, #16
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a016:	2300      	movs	r3, #0
 800a018:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	781b      	ldrb	r3, [r3, #0]
 800a01e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a022:	2b40      	cmp	r3, #64	@ 0x40
 800a024:	d005      	beq.n	800a032 <USBD_StdItfReq+0x26>
 800a026:	2b40      	cmp	r3, #64	@ 0x40
 800a028:	d82f      	bhi.n	800a08a <USBD_StdItfReq+0x7e>
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d001      	beq.n	800a032 <USBD_StdItfReq+0x26>
 800a02e:	2b20      	cmp	r3, #32
 800a030:	d12b      	bne.n	800a08a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a038:	b2db      	uxtb	r3, r3
 800a03a:	3b01      	subs	r3, #1
 800a03c:	2b02      	cmp	r3, #2
 800a03e:	d81d      	bhi.n	800a07c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	889b      	ldrh	r3, [r3, #4]
 800a044:	b2db      	uxtb	r3, r3
 800a046:	2b0f      	cmp	r3, #15
 800a048:	d813      	bhi.n	800a072 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a050:	689b      	ldr	r3, [r3, #8]
 800a052:	6839      	ldr	r1, [r7, #0]
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	4798      	blx	r3
 800a058:	4603      	mov	r3, r0
 800a05a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	88db      	ldrh	r3, [r3, #6]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d110      	bne.n	800a086 <USBD_StdItfReq+0x7a>
 800a064:	7bfb      	ldrb	r3, [r7, #15]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d10d      	bne.n	800a086 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f000 fd85 	bl	800ab7a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a070:	e009      	b.n	800a086 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800a072:	6839      	ldr	r1, [r7, #0]
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f000 fcb5 	bl	800a9e4 <USBD_CtlError>
          break;
 800a07a:	e004      	b.n	800a086 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800a07c:	6839      	ldr	r1, [r7, #0]
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f000 fcb0 	bl	800a9e4 <USBD_CtlError>
          break;
 800a084:	e000      	b.n	800a088 <USBD_StdItfReq+0x7c>
          break;
 800a086:	bf00      	nop
      }
      break;
 800a088:	e004      	b.n	800a094 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800a08a:	6839      	ldr	r1, [r7, #0]
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f000 fca9 	bl	800a9e4 <USBD_CtlError>
      break;
 800a092:	bf00      	nop
  }

  return ret;
 800a094:	7bfb      	ldrb	r3, [r7, #15]
}
 800a096:	4618      	mov	r0, r3
 800a098:	3710      	adds	r7, #16
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}

0800a09e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a09e:	b580      	push	{r7, lr}
 800a0a0:	b084      	sub	sp, #16
 800a0a2:	af00      	add	r7, sp, #0
 800a0a4:	6078      	str	r0, [r7, #4]
 800a0a6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	889b      	ldrh	r3, [r3, #4]
 800a0b0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	781b      	ldrb	r3, [r3, #0]
 800a0b6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a0ba:	2b40      	cmp	r3, #64	@ 0x40
 800a0bc:	d007      	beq.n	800a0ce <USBD_StdEPReq+0x30>
 800a0be:	2b40      	cmp	r3, #64	@ 0x40
 800a0c0:	f200 8145 	bhi.w	800a34e <USBD_StdEPReq+0x2b0>
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d00c      	beq.n	800a0e2 <USBD_StdEPReq+0x44>
 800a0c8:	2b20      	cmp	r3, #32
 800a0ca:	f040 8140 	bne.w	800a34e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a0d4:	689b      	ldr	r3, [r3, #8]
 800a0d6:	6839      	ldr	r1, [r7, #0]
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	4798      	blx	r3
 800a0dc:	4603      	mov	r3, r0
 800a0de:	73fb      	strb	r3, [r7, #15]
      break;
 800a0e0:	e13a      	b.n	800a358 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	785b      	ldrb	r3, [r3, #1]
 800a0e6:	2b03      	cmp	r3, #3
 800a0e8:	d007      	beq.n	800a0fa <USBD_StdEPReq+0x5c>
 800a0ea:	2b03      	cmp	r3, #3
 800a0ec:	f300 8129 	bgt.w	800a342 <USBD_StdEPReq+0x2a4>
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d07f      	beq.n	800a1f4 <USBD_StdEPReq+0x156>
 800a0f4:	2b01      	cmp	r3, #1
 800a0f6:	d03c      	beq.n	800a172 <USBD_StdEPReq+0xd4>
 800a0f8:	e123      	b.n	800a342 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a100:	b2db      	uxtb	r3, r3
 800a102:	2b02      	cmp	r3, #2
 800a104:	d002      	beq.n	800a10c <USBD_StdEPReq+0x6e>
 800a106:	2b03      	cmp	r3, #3
 800a108:	d016      	beq.n	800a138 <USBD_StdEPReq+0x9a>
 800a10a:	e02c      	b.n	800a166 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a10c:	7bbb      	ldrb	r3, [r7, #14]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d00d      	beq.n	800a12e <USBD_StdEPReq+0x90>
 800a112:	7bbb      	ldrb	r3, [r7, #14]
 800a114:	2b80      	cmp	r3, #128	@ 0x80
 800a116:	d00a      	beq.n	800a12e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a118:	7bbb      	ldrb	r3, [r7, #14]
 800a11a:	4619      	mov	r1, r3
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f000 ff29 	bl	800af74 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a122:	2180      	movs	r1, #128	@ 0x80
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f000 ff25 	bl	800af74 <USBD_LL_StallEP>
 800a12a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a12c:	e020      	b.n	800a170 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800a12e:	6839      	ldr	r1, [r7, #0]
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f000 fc57 	bl	800a9e4 <USBD_CtlError>
              break;
 800a136:	e01b      	b.n	800a170 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	885b      	ldrh	r3, [r3, #2]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d10e      	bne.n	800a15e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a140:	7bbb      	ldrb	r3, [r7, #14]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d00b      	beq.n	800a15e <USBD_StdEPReq+0xc0>
 800a146:	7bbb      	ldrb	r3, [r7, #14]
 800a148:	2b80      	cmp	r3, #128	@ 0x80
 800a14a:	d008      	beq.n	800a15e <USBD_StdEPReq+0xc0>
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	88db      	ldrh	r3, [r3, #6]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d104      	bne.n	800a15e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a154:	7bbb      	ldrb	r3, [r7, #14]
 800a156:	4619      	mov	r1, r3
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f000 ff0b 	bl	800af74 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f000 fd0b 	bl	800ab7a <USBD_CtlSendStatus>

              break;
 800a164:	e004      	b.n	800a170 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800a166:	6839      	ldr	r1, [r7, #0]
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f000 fc3b 	bl	800a9e4 <USBD_CtlError>
              break;
 800a16e:	bf00      	nop
          }
          break;
 800a170:	e0ec      	b.n	800a34c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a178:	b2db      	uxtb	r3, r3
 800a17a:	2b02      	cmp	r3, #2
 800a17c:	d002      	beq.n	800a184 <USBD_StdEPReq+0xe6>
 800a17e:	2b03      	cmp	r3, #3
 800a180:	d016      	beq.n	800a1b0 <USBD_StdEPReq+0x112>
 800a182:	e030      	b.n	800a1e6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a184:	7bbb      	ldrb	r3, [r7, #14]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d00d      	beq.n	800a1a6 <USBD_StdEPReq+0x108>
 800a18a:	7bbb      	ldrb	r3, [r7, #14]
 800a18c:	2b80      	cmp	r3, #128	@ 0x80
 800a18e:	d00a      	beq.n	800a1a6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a190:	7bbb      	ldrb	r3, [r7, #14]
 800a192:	4619      	mov	r1, r3
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f000 feed 	bl	800af74 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a19a:	2180      	movs	r1, #128	@ 0x80
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f000 fee9 	bl	800af74 <USBD_LL_StallEP>
 800a1a2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a1a4:	e025      	b.n	800a1f2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800a1a6:	6839      	ldr	r1, [r7, #0]
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f000 fc1b 	bl	800a9e4 <USBD_CtlError>
              break;
 800a1ae:	e020      	b.n	800a1f2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	885b      	ldrh	r3, [r3, #2]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d11b      	bne.n	800a1f0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a1b8:	7bbb      	ldrb	r3, [r7, #14]
 800a1ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d004      	beq.n	800a1cc <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a1c2:	7bbb      	ldrb	r3, [r7, #14]
 800a1c4:	4619      	mov	r1, r3
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f000 fef3 	bl	800afb2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f000 fcd4 	bl	800ab7a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1d8:	689b      	ldr	r3, [r3, #8]
 800a1da:	6839      	ldr	r1, [r7, #0]
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	4798      	blx	r3
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800a1e4:	e004      	b.n	800a1f0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800a1e6:	6839      	ldr	r1, [r7, #0]
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f000 fbfb 	bl	800a9e4 <USBD_CtlError>
              break;
 800a1ee:	e000      	b.n	800a1f2 <USBD_StdEPReq+0x154>
              break;
 800a1f0:	bf00      	nop
          }
          break;
 800a1f2:	e0ab      	b.n	800a34c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1fa:	b2db      	uxtb	r3, r3
 800a1fc:	2b02      	cmp	r3, #2
 800a1fe:	d002      	beq.n	800a206 <USBD_StdEPReq+0x168>
 800a200:	2b03      	cmp	r3, #3
 800a202:	d032      	beq.n	800a26a <USBD_StdEPReq+0x1cc>
 800a204:	e097      	b.n	800a336 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a206:	7bbb      	ldrb	r3, [r7, #14]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d007      	beq.n	800a21c <USBD_StdEPReq+0x17e>
 800a20c:	7bbb      	ldrb	r3, [r7, #14]
 800a20e:	2b80      	cmp	r3, #128	@ 0x80
 800a210:	d004      	beq.n	800a21c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800a212:	6839      	ldr	r1, [r7, #0]
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f000 fbe5 	bl	800a9e4 <USBD_CtlError>
                break;
 800a21a:	e091      	b.n	800a340 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a21c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a220:	2b00      	cmp	r3, #0
 800a222:	da0b      	bge.n	800a23c <USBD_StdEPReq+0x19e>
 800a224:	7bbb      	ldrb	r3, [r7, #14]
 800a226:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a22a:	4613      	mov	r3, r2
 800a22c:	009b      	lsls	r3, r3, #2
 800a22e:	4413      	add	r3, r2
 800a230:	009b      	lsls	r3, r3, #2
 800a232:	3310      	adds	r3, #16
 800a234:	687a      	ldr	r2, [r7, #4]
 800a236:	4413      	add	r3, r2
 800a238:	3304      	adds	r3, #4
 800a23a:	e00b      	b.n	800a254 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a23c:	7bbb      	ldrb	r3, [r7, #14]
 800a23e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a242:	4613      	mov	r3, r2
 800a244:	009b      	lsls	r3, r3, #2
 800a246:	4413      	add	r3, r2
 800a248:	009b      	lsls	r3, r3, #2
 800a24a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a24e:	687a      	ldr	r2, [r7, #4]
 800a250:	4413      	add	r3, r2
 800a252:	3304      	adds	r3, #4
 800a254:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	2200      	movs	r2, #0
 800a25a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	2202      	movs	r2, #2
 800a260:	4619      	mov	r1, r3
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f000 fc2f 	bl	800aac6 <USBD_CtlSendData>
              break;
 800a268:	e06a      	b.n	800a340 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a26a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	da11      	bge.n	800a296 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a272:	7bbb      	ldrb	r3, [r7, #14]
 800a274:	f003 020f 	and.w	r2, r3, #15
 800a278:	6879      	ldr	r1, [r7, #4]
 800a27a:	4613      	mov	r3, r2
 800a27c:	009b      	lsls	r3, r3, #2
 800a27e:	4413      	add	r3, r2
 800a280:	009b      	lsls	r3, r3, #2
 800a282:	440b      	add	r3, r1
 800a284:	3324      	adds	r3, #36	@ 0x24
 800a286:	881b      	ldrh	r3, [r3, #0]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d117      	bne.n	800a2bc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a28c:	6839      	ldr	r1, [r7, #0]
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	f000 fba8 	bl	800a9e4 <USBD_CtlError>
                  break;
 800a294:	e054      	b.n	800a340 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a296:	7bbb      	ldrb	r3, [r7, #14]
 800a298:	f003 020f 	and.w	r2, r3, #15
 800a29c:	6879      	ldr	r1, [r7, #4]
 800a29e:	4613      	mov	r3, r2
 800a2a0:	009b      	lsls	r3, r3, #2
 800a2a2:	4413      	add	r3, r2
 800a2a4:	009b      	lsls	r3, r3, #2
 800a2a6:	440b      	add	r3, r1
 800a2a8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a2ac:	881b      	ldrh	r3, [r3, #0]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d104      	bne.n	800a2bc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a2b2:	6839      	ldr	r1, [r7, #0]
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f000 fb95 	bl	800a9e4 <USBD_CtlError>
                  break;
 800a2ba:	e041      	b.n	800a340 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a2bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	da0b      	bge.n	800a2dc <USBD_StdEPReq+0x23e>
 800a2c4:	7bbb      	ldrb	r3, [r7, #14]
 800a2c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a2ca:	4613      	mov	r3, r2
 800a2cc:	009b      	lsls	r3, r3, #2
 800a2ce:	4413      	add	r3, r2
 800a2d0:	009b      	lsls	r3, r3, #2
 800a2d2:	3310      	adds	r3, #16
 800a2d4:	687a      	ldr	r2, [r7, #4]
 800a2d6:	4413      	add	r3, r2
 800a2d8:	3304      	adds	r3, #4
 800a2da:	e00b      	b.n	800a2f4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a2dc:	7bbb      	ldrb	r3, [r7, #14]
 800a2de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a2e2:	4613      	mov	r3, r2
 800a2e4:	009b      	lsls	r3, r3, #2
 800a2e6:	4413      	add	r3, r2
 800a2e8:	009b      	lsls	r3, r3, #2
 800a2ea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a2ee:	687a      	ldr	r2, [r7, #4]
 800a2f0:	4413      	add	r3, r2
 800a2f2:	3304      	adds	r3, #4
 800a2f4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a2f6:	7bbb      	ldrb	r3, [r7, #14]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d002      	beq.n	800a302 <USBD_StdEPReq+0x264>
 800a2fc:	7bbb      	ldrb	r3, [r7, #14]
 800a2fe:	2b80      	cmp	r3, #128	@ 0x80
 800a300:	d103      	bne.n	800a30a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	2200      	movs	r2, #0
 800a306:	601a      	str	r2, [r3, #0]
 800a308:	e00e      	b.n	800a328 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a30a:	7bbb      	ldrb	r3, [r7, #14]
 800a30c:	4619      	mov	r1, r3
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f000 fe6e 	bl	800aff0 <USBD_LL_IsStallEP>
 800a314:	4603      	mov	r3, r0
 800a316:	2b00      	cmp	r3, #0
 800a318:	d003      	beq.n	800a322 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	2201      	movs	r2, #1
 800a31e:	601a      	str	r2, [r3, #0]
 800a320:	e002      	b.n	800a328 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	2200      	movs	r2, #0
 800a326:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	2202      	movs	r2, #2
 800a32c:	4619      	mov	r1, r3
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f000 fbc9 	bl	800aac6 <USBD_CtlSendData>
              break;
 800a334:	e004      	b.n	800a340 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800a336:	6839      	ldr	r1, [r7, #0]
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f000 fb53 	bl	800a9e4 <USBD_CtlError>
              break;
 800a33e:	bf00      	nop
          }
          break;
 800a340:	e004      	b.n	800a34c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800a342:	6839      	ldr	r1, [r7, #0]
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f000 fb4d 	bl	800a9e4 <USBD_CtlError>
          break;
 800a34a:	bf00      	nop
      }
      break;
 800a34c:	e004      	b.n	800a358 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800a34e:	6839      	ldr	r1, [r7, #0]
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f000 fb47 	bl	800a9e4 <USBD_CtlError>
      break;
 800a356:	bf00      	nop
  }

  return ret;
 800a358:	7bfb      	ldrb	r3, [r7, #15]
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	3710      	adds	r7, #16
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}
	...

0800a364 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b084      	sub	sp, #16
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
 800a36c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a36e:	2300      	movs	r3, #0
 800a370:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a372:	2300      	movs	r3, #0
 800a374:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a376:	2300      	movs	r3, #0
 800a378:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	885b      	ldrh	r3, [r3, #2]
 800a37e:	0a1b      	lsrs	r3, r3, #8
 800a380:	b29b      	uxth	r3, r3
 800a382:	3b01      	subs	r3, #1
 800a384:	2b06      	cmp	r3, #6
 800a386:	f200 813b 	bhi.w	800a600 <USBD_GetDescriptor+0x29c>
 800a38a:	a201      	add	r2, pc, #4	@ (adr r2, 800a390 <USBD_GetDescriptor+0x2c>)
 800a38c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a390:	0800a3ad 	.word	0x0800a3ad
 800a394:	0800a3c5 	.word	0x0800a3c5
 800a398:	0800a405 	.word	0x0800a405
 800a39c:	0800a601 	.word	0x0800a601
 800a3a0:	0800a601 	.word	0x0800a601
 800a3a4:	0800a5a1 	.word	0x0800a5a1
 800a3a8:	0800a5cd 	.word	0x0800a5cd
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	687a      	ldr	r2, [r7, #4]
 800a3b6:	7c12      	ldrb	r2, [r2, #16]
 800a3b8:	f107 0108 	add.w	r1, r7, #8
 800a3bc:	4610      	mov	r0, r2
 800a3be:	4798      	blx	r3
 800a3c0:	60f8      	str	r0, [r7, #12]
      break;
 800a3c2:	e125      	b.n	800a610 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	7c1b      	ldrb	r3, [r3, #16]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d10d      	bne.n	800a3e8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a3d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3d4:	f107 0208 	add.w	r2, r7, #8
 800a3d8:	4610      	mov	r0, r2
 800a3da:	4798      	blx	r3
 800a3dc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	3301      	adds	r3, #1
 800a3e2:	2202      	movs	r2, #2
 800a3e4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a3e6:	e113      	b.n	800a610 <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a3ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3f0:	f107 0208 	add.w	r2, r7, #8
 800a3f4:	4610      	mov	r0, r2
 800a3f6:	4798      	blx	r3
 800a3f8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	3301      	adds	r3, #1
 800a3fe:	2202      	movs	r2, #2
 800a400:	701a      	strb	r2, [r3, #0]
      break;
 800a402:	e105      	b.n	800a610 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	885b      	ldrh	r3, [r3, #2]
 800a408:	b2db      	uxtb	r3, r3
 800a40a:	2b05      	cmp	r3, #5
 800a40c:	f200 80ac 	bhi.w	800a568 <USBD_GetDescriptor+0x204>
 800a410:	a201      	add	r2, pc, #4	@ (adr r2, 800a418 <USBD_GetDescriptor+0xb4>)
 800a412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a416:	bf00      	nop
 800a418:	0800a431 	.word	0x0800a431
 800a41c:	0800a465 	.word	0x0800a465
 800a420:	0800a499 	.word	0x0800a499
 800a424:	0800a4cd 	.word	0x0800a4cd
 800a428:	0800a501 	.word	0x0800a501
 800a42c:	0800a535 	.word	0x0800a535
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a436:	685b      	ldr	r3, [r3, #4]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d00b      	beq.n	800a454 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a442:	685b      	ldr	r3, [r3, #4]
 800a444:	687a      	ldr	r2, [r7, #4]
 800a446:	7c12      	ldrb	r2, [r2, #16]
 800a448:	f107 0108 	add.w	r1, r7, #8
 800a44c:	4610      	mov	r0, r2
 800a44e:	4798      	blx	r3
 800a450:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a452:	e0a4      	b.n	800a59e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800a454:	6839      	ldr	r1, [r7, #0]
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f000 fac4 	bl	800a9e4 <USBD_CtlError>
            err++;
 800a45c:	7afb      	ldrb	r3, [r7, #11]
 800a45e:	3301      	adds	r3, #1
 800a460:	72fb      	strb	r3, [r7, #11]
          break;
 800a462:	e09c      	b.n	800a59e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a46a:	689b      	ldr	r3, [r3, #8]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d00b      	beq.n	800a488 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a476:	689b      	ldr	r3, [r3, #8]
 800a478:	687a      	ldr	r2, [r7, #4]
 800a47a:	7c12      	ldrb	r2, [r2, #16]
 800a47c:	f107 0108 	add.w	r1, r7, #8
 800a480:	4610      	mov	r0, r2
 800a482:	4798      	blx	r3
 800a484:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a486:	e08a      	b.n	800a59e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800a488:	6839      	ldr	r1, [r7, #0]
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f000 faaa 	bl	800a9e4 <USBD_CtlError>
            err++;
 800a490:	7afb      	ldrb	r3, [r7, #11]
 800a492:	3301      	adds	r3, #1
 800a494:	72fb      	strb	r3, [r7, #11]
          break;
 800a496:	e082      	b.n	800a59e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a49e:	68db      	ldr	r3, [r3, #12]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d00b      	beq.n	800a4bc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a4aa:	68db      	ldr	r3, [r3, #12]
 800a4ac:	687a      	ldr	r2, [r7, #4]
 800a4ae:	7c12      	ldrb	r2, [r2, #16]
 800a4b0:	f107 0108 	add.w	r1, r7, #8
 800a4b4:	4610      	mov	r0, r2
 800a4b6:	4798      	blx	r3
 800a4b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a4ba:	e070      	b.n	800a59e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800a4bc:	6839      	ldr	r1, [r7, #0]
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f000 fa90 	bl	800a9e4 <USBD_CtlError>
            err++;
 800a4c4:	7afb      	ldrb	r3, [r7, #11]
 800a4c6:	3301      	adds	r3, #1
 800a4c8:	72fb      	strb	r3, [r7, #11]
          break;
 800a4ca:	e068      	b.n	800a59e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a4d2:	691b      	ldr	r3, [r3, #16]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d00b      	beq.n	800a4f0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a4de:	691b      	ldr	r3, [r3, #16]
 800a4e0:	687a      	ldr	r2, [r7, #4]
 800a4e2:	7c12      	ldrb	r2, [r2, #16]
 800a4e4:	f107 0108 	add.w	r1, r7, #8
 800a4e8:	4610      	mov	r0, r2
 800a4ea:	4798      	blx	r3
 800a4ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a4ee:	e056      	b.n	800a59e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800a4f0:	6839      	ldr	r1, [r7, #0]
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f000 fa76 	bl	800a9e4 <USBD_CtlError>
            err++;
 800a4f8:	7afb      	ldrb	r3, [r7, #11]
 800a4fa:	3301      	adds	r3, #1
 800a4fc:	72fb      	strb	r3, [r7, #11]
          break;
 800a4fe:	e04e      	b.n	800a59e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a506:	695b      	ldr	r3, [r3, #20]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d00b      	beq.n	800a524 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a512:	695b      	ldr	r3, [r3, #20]
 800a514:	687a      	ldr	r2, [r7, #4]
 800a516:	7c12      	ldrb	r2, [r2, #16]
 800a518:	f107 0108 	add.w	r1, r7, #8
 800a51c:	4610      	mov	r0, r2
 800a51e:	4798      	blx	r3
 800a520:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a522:	e03c      	b.n	800a59e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800a524:	6839      	ldr	r1, [r7, #0]
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f000 fa5c 	bl	800a9e4 <USBD_CtlError>
            err++;
 800a52c:	7afb      	ldrb	r3, [r7, #11]
 800a52e:	3301      	adds	r3, #1
 800a530:	72fb      	strb	r3, [r7, #11]
          break;
 800a532:	e034      	b.n	800a59e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a53a:	699b      	ldr	r3, [r3, #24]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d00b      	beq.n	800a558 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a546:	699b      	ldr	r3, [r3, #24]
 800a548:	687a      	ldr	r2, [r7, #4]
 800a54a:	7c12      	ldrb	r2, [r2, #16]
 800a54c:	f107 0108 	add.w	r1, r7, #8
 800a550:	4610      	mov	r0, r2
 800a552:	4798      	blx	r3
 800a554:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a556:	e022      	b.n	800a59e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800a558:	6839      	ldr	r1, [r7, #0]
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f000 fa42 	bl	800a9e4 <USBD_CtlError>
            err++;
 800a560:	7afb      	ldrb	r3, [r7, #11]
 800a562:	3301      	adds	r3, #1
 800a564:	72fb      	strb	r3, [r7, #11]
          break;
 800a566:	e01a      	b.n	800a59e <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a56e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a570:	2b00      	cmp	r3, #0
 800a572:	d00c      	beq.n	800a58e <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a57a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a57c:	683a      	ldr	r2, [r7, #0]
 800a57e:	8852      	ldrh	r2, [r2, #2]
 800a580:	b2d1      	uxtb	r1, r2
 800a582:	f107 0208 	add.w	r2, r7, #8
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	4798      	blx	r3
 800a58a:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 800a58c:	e006      	b.n	800a59c <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 800a58e:	6839      	ldr	r1, [r7, #0]
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f000 fa27 	bl	800a9e4 <USBD_CtlError>
            err++;
 800a596:	7afb      	ldrb	r3, [r7, #11]
 800a598:	3301      	adds	r3, #1
 800a59a:	72fb      	strb	r3, [r7, #11]
          break;
 800a59c:	bf00      	nop
      }
      break;
 800a59e:	e037      	b.n	800a610 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	7c1b      	ldrb	r3, [r3, #16]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d109      	bne.n	800a5bc <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a5ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5b0:	f107 0208 	add.w	r2, r7, #8
 800a5b4:	4610      	mov	r0, r2
 800a5b6:	4798      	blx	r3
 800a5b8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a5ba:	e029      	b.n	800a610 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 800a5bc:	6839      	ldr	r1, [r7, #0]
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f000 fa10 	bl	800a9e4 <USBD_CtlError>
        err++;
 800a5c4:	7afb      	ldrb	r3, [r7, #11]
 800a5c6:	3301      	adds	r3, #1
 800a5c8:	72fb      	strb	r3, [r7, #11]
      break;
 800a5ca:	e021      	b.n	800a610 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	7c1b      	ldrb	r3, [r3, #16]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d10d      	bne.n	800a5f0 <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a5da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5dc:	f107 0208 	add.w	r2, r7, #8
 800a5e0:	4610      	mov	r0, r2
 800a5e2:	4798      	blx	r3
 800a5e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	3301      	adds	r3, #1
 800a5ea:	2207      	movs	r2, #7
 800a5ec:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a5ee:	e00f      	b.n	800a610 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 800a5f0:	6839      	ldr	r1, [r7, #0]
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f000 f9f6 	bl	800a9e4 <USBD_CtlError>
        err++;
 800a5f8:	7afb      	ldrb	r3, [r7, #11]
 800a5fa:	3301      	adds	r3, #1
 800a5fc:	72fb      	strb	r3, [r7, #11]
      break;
 800a5fe:	e007      	b.n	800a610 <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 800a600:	6839      	ldr	r1, [r7, #0]
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f000 f9ee 	bl	800a9e4 <USBD_CtlError>
      err++;
 800a608:	7afb      	ldrb	r3, [r7, #11]
 800a60a:	3301      	adds	r3, #1
 800a60c:	72fb      	strb	r3, [r7, #11]
      break;
 800a60e:	bf00      	nop
  }

  if (err != 0U)
 800a610:	7afb      	ldrb	r3, [r7, #11]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d11e      	bne.n	800a654 <USBD_GetDescriptor+0x2f0>
  {
    return;
  }

  if (req->wLength != 0U)
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	88db      	ldrh	r3, [r3, #6]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d016      	beq.n	800a64c <USBD_GetDescriptor+0x2e8>
  {
    if (len != 0U)
 800a61e:	893b      	ldrh	r3, [r7, #8]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d00e      	beq.n	800a642 <USBD_GetDescriptor+0x2de>
    {
      len = MIN(len, req->wLength);
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	88da      	ldrh	r2, [r3, #6]
 800a628:	893b      	ldrh	r3, [r7, #8]
 800a62a:	4293      	cmp	r3, r2
 800a62c:	bf28      	it	cs
 800a62e:	4613      	movcs	r3, r2
 800a630:	b29b      	uxth	r3, r3
 800a632:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a634:	893b      	ldrh	r3, [r7, #8]
 800a636:	461a      	mov	r2, r3
 800a638:	68f9      	ldr	r1, [r7, #12]
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	f000 fa43 	bl	800aac6 <USBD_CtlSendData>
 800a640:	e009      	b.n	800a656 <USBD_GetDescriptor+0x2f2>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a642:	6839      	ldr	r1, [r7, #0]
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f000 f9cd 	bl	800a9e4 <USBD_CtlError>
 800a64a:	e004      	b.n	800a656 <USBD_GetDescriptor+0x2f2>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a64c:	6878      	ldr	r0, [r7, #4]
 800a64e:	f000 fa94 	bl	800ab7a <USBD_CtlSendStatus>
 800a652:	e000      	b.n	800a656 <USBD_GetDescriptor+0x2f2>
    return;
 800a654:	bf00      	nop
  }
}
 800a656:	3710      	adds	r7, #16
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}

0800a65c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b084      	sub	sp, #16
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
 800a664:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	889b      	ldrh	r3, [r3, #4]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d131      	bne.n	800a6d2 <USBD_SetAddress+0x76>
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	88db      	ldrh	r3, [r3, #6]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d12d      	bne.n	800a6d2 <USBD_SetAddress+0x76>
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	885b      	ldrh	r3, [r3, #2]
 800a67a:	2b7f      	cmp	r3, #127	@ 0x7f
 800a67c:	d829      	bhi.n	800a6d2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	885b      	ldrh	r3, [r3, #2]
 800a682:	b2db      	uxtb	r3, r3
 800a684:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a688:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a690:	b2db      	uxtb	r3, r3
 800a692:	2b03      	cmp	r3, #3
 800a694:	d104      	bne.n	800a6a0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a696:	6839      	ldr	r1, [r7, #0]
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f000 f9a3 	bl	800a9e4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a69e:	e01d      	b.n	800a6dc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	7bfa      	ldrb	r2, [r7, #15]
 800a6a4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a6a8:	7bfb      	ldrb	r3, [r7, #15]
 800a6aa:	4619      	mov	r1, r3
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f000 fccb 	bl	800b048 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f000 fa61 	bl	800ab7a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a6b8:	7bfb      	ldrb	r3, [r7, #15]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d004      	beq.n	800a6c8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2202      	movs	r2, #2
 800a6c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6c6:	e009      	b.n	800a6dc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6d0:	e004      	b.n	800a6dc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a6d2:	6839      	ldr	r1, [r7, #0]
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f000 f985 	bl	800a9e4 <USBD_CtlError>
  }
}
 800a6da:	bf00      	nop
 800a6dc:	bf00      	nop
 800a6de:	3710      	adds	r7, #16
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b084      	sub	sp, #16
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
 800a6ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	885b      	ldrh	r3, [r3, #2]
 800a6f6:	b2da      	uxtb	r2, r3
 800a6f8:	4b4c      	ldr	r3, [pc, #304]	@ (800a82c <USBD_SetConfig+0x148>)
 800a6fa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a6fc:	4b4b      	ldr	r3, [pc, #300]	@ (800a82c <USBD_SetConfig+0x148>)
 800a6fe:	781b      	ldrb	r3, [r3, #0]
 800a700:	2b01      	cmp	r3, #1
 800a702:	d905      	bls.n	800a710 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a704:	6839      	ldr	r1, [r7, #0]
 800a706:	6878      	ldr	r0, [r7, #4]
 800a708:	f000 f96c 	bl	800a9e4 <USBD_CtlError>
    return USBD_FAIL;
 800a70c:	2303      	movs	r3, #3
 800a70e:	e088      	b.n	800a822 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a716:	b2db      	uxtb	r3, r3
 800a718:	2b02      	cmp	r3, #2
 800a71a:	d002      	beq.n	800a722 <USBD_SetConfig+0x3e>
 800a71c:	2b03      	cmp	r3, #3
 800a71e:	d025      	beq.n	800a76c <USBD_SetConfig+0x88>
 800a720:	e071      	b.n	800a806 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a722:	4b42      	ldr	r3, [pc, #264]	@ (800a82c <USBD_SetConfig+0x148>)
 800a724:	781b      	ldrb	r3, [r3, #0]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d01c      	beq.n	800a764 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800a72a:	4b40      	ldr	r3, [pc, #256]	@ (800a82c <USBD_SetConfig+0x148>)
 800a72c:	781b      	ldrb	r3, [r3, #0]
 800a72e:	461a      	mov	r2, r3
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a734:	4b3d      	ldr	r3, [pc, #244]	@ (800a82c <USBD_SetConfig+0x148>)
 800a736:	781b      	ldrb	r3, [r3, #0]
 800a738:	4619      	mov	r1, r3
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f7ff f93b 	bl	80099b6 <USBD_SetClassConfig>
 800a740:	4603      	mov	r3, r0
 800a742:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a744:	7bfb      	ldrb	r3, [r7, #15]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d004      	beq.n	800a754 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800a74a:	6839      	ldr	r1, [r7, #0]
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	f000 f949 	bl	800a9e4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a752:	e065      	b.n	800a820 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f000 fa10 	bl	800ab7a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2203      	movs	r2, #3
 800a75e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a762:	e05d      	b.n	800a820 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f000 fa08 	bl	800ab7a <USBD_CtlSendStatus>
      break;
 800a76a:	e059      	b.n	800a820 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a76c:	4b2f      	ldr	r3, [pc, #188]	@ (800a82c <USBD_SetConfig+0x148>)
 800a76e:	781b      	ldrb	r3, [r3, #0]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d112      	bne.n	800a79a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2202      	movs	r2, #2
 800a778:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a77c:	4b2b      	ldr	r3, [pc, #172]	@ (800a82c <USBD_SetConfig+0x148>)
 800a77e:	781b      	ldrb	r3, [r3, #0]
 800a780:	461a      	mov	r2, r3
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a786:	4b29      	ldr	r3, [pc, #164]	@ (800a82c <USBD_SetConfig+0x148>)
 800a788:	781b      	ldrb	r3, [r3, #0]
 800a78a:	4619      	mov	r1, r3
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f7ff f92e 	bl	80099ee <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f000 f9f1 	bl	800ab7a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a798:	e042      	b.n	800a820 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800a79a:	4b24      	ldr	r3, [pc, #144]	@ (800a82c <USBD_SetConfig+0x148>)
 800a79c:	781b      	ldrb	r3, [r3, #0]
 800a79e:	461a      	mov	r2, r3
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	685b      	ldr	r3, [r3, #4]
 800a7a4:	429a      	cmp	r2, r3
 800a7a6:	d02a      	beq.n	800a7fe <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	685b      	ldr	r3, [r3, #4]
 800a7ac:	b2db      	uxtb	r3, r3
 800a7ae:	4619      	mov	r1, r3
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	f7ff f91c 	bl	80099ee <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a7b6:	4b1d      	ldr	r3, [pc, #116]	@ (800a82c <USBD_SetConfig+0x148>)
 800a7b8:	781b      	ldrb	r3, [r3, #0]
 800a7ba:	461a      	mov	r2, r3
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a7c0:	4b1a      	ldr	r3, [pc, #104]	@ (800a82c <USBD_SetConfig+0x148>)
 800a7c2:	781b      	ldrb	r3, [r3, #0]
 800a7c4:	4619      	mov	r1, r3
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f7ff f8f5 	bl	80099b6 <USBD_SetClassConfig>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a7d0:	7bfb      	ldrb	r3, [r7, #15]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d00f      	beq.n	800a7f6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800a7d6:	6839      	ldr	r1, [r7, #0]
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f000 f903 	bl	800a9e4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	685b      	ldr	r3, [r3, #4]
 800a7e2:	b2db      	uxtb	r3, r3
 800a7e4:	4619      	mov	r1, r3
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f7ff f901 	bl	80099ee <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2202      	movs	r2, #2
 800a7f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a7f4:	e014      	b.n	800a820 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f000 f9bf 	bl	800ab7a <USBD_CtlSendStatus>
      break;
 800a7fc:	e010      	b.n	800a820 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f000 f9bb 	bl	800ab7a <USBD_CtlSendStatus>
      break;
 800a804:	e00c      	b.n	800a820 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a806:	6839      	ldr	r1, [r7, #0]
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f000 f8eb 	bl	800a9e4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a80e:	4b07      	ldr	r3, [pc, #28]	@ (800a82c <USBD_SetConfig+0x148>)
 800a810:	781b      	ldrb	r3, [r3, #0]
 800a812:	4619      	mov	r1, r3
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f7ff f8ea 	bl	80099ee <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a81a:	2303      	movs	r3, #3
 800a81c:	73fb      	strb	r3, [r7, #15]
      break;
 800a81e:	bf00      	nop
  }

  return ret;
 800a820:	7bfb      	ldrb	r3, [r7, #15]
}
 800a822:	4618      	mov	r0, r3
 800a824:	3710      	adds	r7, #16
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}
 800a82a:	bf00      	nop
 800a82c:	20002334 	.word	0x20002334

0800a830 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b082      	sub	sp, #8
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
 800a838:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	88db      	ldrh	r3, [r3, #6]
 800a83e:	2b01      	cmp	r3, #1
 800a840:	d004      	beq.n	800a84c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a842:	6839      	ldr	r1, [r7, #0]
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f000 f8cd 	bl	800a9e4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a84a:	e023      	b.n	800a894 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a852:	b2db      	uxtb	r3, r3
 800a854:	2b02      	cmp	r3, #2
 800a856:	dc02      	bgt.n	800a85e <USBD_GetConfig+0x2e>
 800a858:	2b00      	cmp	r3, #0
 800a85a:	dc03      	bgt.n	800a864 <USBD_GetConfig+0x34>
 800a85c:	e015      	b.n	800a88a <USBD_GetConfig+0x5a>
 800a85e:	2b03      	cmp	r3, #3
 800a860:	d00b      	beq.n	800a87a <USBD_GetConfig+0x4a>
 800a862:	e012      	b.n	800a88a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2200      	movs	r2, #0
 800a868:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	3308      	adds	r3, #8
 800a86e:	2201      	movs	r2, #1
 800a870:	4619      	mov	r1, r3
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f000 f927 	bl	800aac6 <USBD_CtlSendData>
        break;
 800a878:	e00c      	b.n	800a894 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	3304      	adds	r3, #4
 800a87e:	2201      	movs	r2, #1
 800a880:	4619      	mov	r1, r3
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f000 f91f 	bl	800aac6 <USBD_CtlSendData>
        break;
 800a888:	e004      	b.n	800a894 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a88a:	6839      	ldr	r1, [r7, #0]
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f000 f8a9 	bl	800a9e4 <USBD_CtlError>
        break;
 800a892:	bf00      	nop
}
 800a894:	bf00      	nop
 800a896:	3708      	adds	r7, #8
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}

0800a89c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b082      	sub	sp, #8
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
 800a8a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8ac:	b2db      	uxtb	r3, r3
 800a8ae:	3b01      	subs	r3, #1
 800a8b0:	2b02      	cmp	r3, #2
 800a8b2:	d81e      	bhi.n	800a8f2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	88db      	ldrh	r3, [r3, #6]
 800a8b8:	2b02      	cmp	r3, #2
 800a8ba:	d004      	beq.n	800a8c6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a8bc:	6839      	ldr	r1, [r7, #0]
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	f000 f890 	bl	800a9e4 <USBD_CtlError>
        break;
 800a8c4:	e01a      	b.n	800a8fc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2201      	movs	r2, #1
 800a8ca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d005      	beq.n	800a8e2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	68db      	ldr	r3, [r3, #12]
 800a8da:	f043 0202 	orr.w	r2, r3, #2
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	330c      	adds	r3, #12
 800a8e6:	2202      	movs	r2, #2
 800a8e8:	4619      	mov	r1, r3
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f000 f8eb 	bl	800aac6 <USBD_CtlSendData>
      break;
 800a8f0:	e004      	b.n	800a8fc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a8f2:	6839      	ldr	r1, [r7, #0]
 800a8f4:	6878      	ldr	r0, [r7, #4]
 800a8f6:	f000 f875 	bl	800a9e4 <USBD_CtlError>
      break;
 800a8fa:	bf00      	nop
  }
}
 800a8fc:	bf00      	nop
 800a8fe:	3708      	adds	r7, #8
 800a900:	46bd      	mov	sp, r7
 800a902:	bd80      	pop	{r7, pc}

0800a904 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b082      	sub	sp, #8
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
 800a90c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	885b      	ldrh	r3, [r3, #2]
 800a912:	2b01      	cmp	r3, #1
 800a914:	d106      	bne.n	800a924 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2201      	movs	r2, #1
 800a91a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f000 f92b 	bl	800ab7a <USBD_CtlSendStatus>
  }
}
 800a924:	bf00      	nop
 800a926:	3708      	adds	r7, #8
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}

0800a92c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b082      	sub	sp, #8
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
 800a934:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a93c:	b2db      	uxtb	r3, r3
 800a93e:	3b01      	subs	r3, #1
 800a940:	2b02      	cmp	r3, #2
 800a942:	d80b      	bhi.n	800a95c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	885b      	ldrh	r3, [r3, #2]
 800a948:	2b01      	cmp	r3, #1
 800a94a:	d10c      	bne.n	800a966 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2200      	movs	r2, #0
 800a950:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f000 f910 	bl	800ab7a <USBD_CtlSendStatus>
      }
      break;
 800a95a:	e004      	b.n	800a966 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a95c:	6839      	ldr	r1, [r7, #0]
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f000 f840 	bl	800a9e4 <USBD_CtlError>
      break;
 800a964:	e000      	b.n	800a968 <USBD_ClrFeature+0x3c>
      break;
 800a966:	bf00      	nop
  }
}
 800a968:	bf00      	nop
 800a96a:	3708      	adds	r7, #8
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd80      	pop	{r7, pc}

0800a970 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b084      	sub	sp, #16
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
 800a978:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	781a      	ldrb	r2, [r3, #0]
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	3301      	adds	r3, #1
 800a98a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	781a      	ldrb	r2, [r3, #0]
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	3301      	adds	r3, #1
 800a998:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a99a:	68f8      	ldr	r0, [r7, #12]
 800a99c:	f7ff faa9 	bl	8009ef2 <SWAPBYTE>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	461a      	mov	r2, r3
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	3301      	adds	r3, #1
 800a9ac:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	3301      	adds	r3, #1
 800a9b2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a9b4:	68f8      	ldr	r0, [r7, #12]
 800a9b6:	f7ff fa9c 	bl	8009ef2 <SWAPBYTE>
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	461a      	mov	r2, r3
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	3301      	adds	r3, #1
 800a9c6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	3301      	adds	r3, #1
 800a9cc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a9ce:	68f8      	ldr	r0, [r7, #12]
 800a9d0:	f7ff fa8f 	bl	8009ef2 <SWAPBYTE>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	461a      	mov	r2, r3
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	80da      	strh	r2, [r3, #6]
}
 800a9dc:	bf00      	nop
 800a9de:	3710      	adds	r7, #16
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd80      	pop	{r7, pc}

0800a9e4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b082      	sub	sp, #8
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
 800a9ec:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a9ee:	2180      	movs	r1, #128	@ 0x80
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	f000 fabf 	bl	800af74 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a9f6:	2100      	movs	r1, #0
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f000 fabb 	bl	800af74 <USBD_LL_StallEP>
}
 800a9fe:	bf00      	nop
 800aa00:	3708      	adds	r7, #8
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}

0800aa06 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800aa06:	b580      	push	{r7, lr}
 800aa08:	b086      	sub	sp, #24
 800aa0a:	af00      	add	r7, sp, #0
 800aa0c:	60f8      	str	r0, [r7, #12]
 800aa0e:	60b9      	str	r1, [r7, #8]
 800aa10:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800aa12:	2300      	movs	r3, #0
 800aa14:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d036      	beq.n	800aa8a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800aa20:	6938      	ldr	r0, [r7, #16]
 800aa22:	f000 f836 	bl	800aa92 <USBD_GetLen>
 800aa26:	4603      	mov	r3, r0
 800aa28:	3301      	adds	r3, #1
 800aa2a:	b29b      	uxth	r3, r3
 800aa2c:	005b      	lsls	r3, r3, #1
 800aa2e:	b29a      	uxth	r2, r3
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800aa34:	7dfb      	ldrb	r3, [r7, #23]
 800aa36:	68ba      	ldr	r2, [r7, #8]
 800aa38:	4413      	add	r3, r2
 800aa3a:	687a      	ldr	r2, [r7, #4]
 800aa3c:	7812      	ldrb	r2, [r2, #0]
 800aa3e:	701a      	strb	r2, [r3, #0]
  idx++;
 800aa40:	7dfb      	ldrb	r3, [r7, #23]
 800aa42:	3301      	adds	r3, #1
 800aa44:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800aa46:	7dfb      	ldrb	r3, [r7, #23]
 800aa48:	68ba      	ldr	r2, [r7, #8]
 800aa4a:	4413      	add	r3, r2
 800aa4c:	2203      	movs	r2, #3
 800aa4e:	701a      	strb	r2, [r3, #0]
  idx++;
 800aa50:	7dfb      	ldrb	r3, [r7, #23]
 800aa52:	3301      	adds	r3, #1
 800aa54:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800aa56:	e013      	b.n	800aa80 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800aa58:	7dfb      	ldrb	r3, [r7, #23]
 800aa5a:	68ba      	ldr	r2, [r7, #8]
 800aa5c:	4413      	add	r3, r2
 800aa5e:	693a      	ldr	r2, [r7, #16]
 800aa60:	7812      	ldrb	r2, [r2, #0]
 800aa62:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800aa64:	693b      	ldr	r3, [r7, #16]
 800aa66:	3301      	adds	r3, #1
 800aa68:	613b      	str	r3, [r7, #16]
    idx++;
 800aa6a:	7dfb      	ldrb	r3, [r7, #23]
 800aa6c:	3301      	adds	r3, #1
 800aa6e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800aa70:	7dfb      	ldrb	r3, [r7, #23]
 800aa72:	68ba      	ldr	r2, [r7, #8]
 800aa74:	4413      	add	r3, r2
 800aa76:	2200      	movs	r2, #0
 800aa78:	701a      	strb	r2, [r3, #0]
    idx++;
 800aa7a:	7dfb      	ldrb	r3, [r7, #23]
 800aa7c:	3301      	adds	r3, #1
 800aa7e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800aa80:	693b      	ldr	r3, [r7, #16]
 800aa82:	781b      	ldrb	r3, [r3, #0]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d1e7      	bne.n	800aa58 <USBD_GetString+0x52>
 800aa88:	e000      	b.n	800aa8c <USBD_GetString+0x86>
    return;
 800aa8a:	bf00      	nop
  }
}
 800aa8c:	3718      	adds	r7, #24
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}

0800aa92 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800aa92:	b480      	push	{r7}
 800aa94:	b085      	sub	sp, #20
 800aa96:	af00      	add	r7, sp, #0
 800aa98:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800aaa2:	e005      	b.n	800aab0 <USBD_GetLen+0x1e>
  {
    len++;
 800aaa4:	7bfb      	ldrb	r3, [r7, #15]
 800aaa6:	3301      	adds	r3, #1
 800aaa8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	3301      	adds	r3, #1
 800aaae:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	781b      	ldrb	r3, [r3, #0]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d1f5      	bne.n	800aaa4 <USBD_GetLen+0x12>
  }

  return len;
 800aab8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaba:	4618      	mov	r0, r3
 800aabc:	3714      	adds	r7, #20
 800aabe:	46bd      	mov	sp, r7
 800aac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac4:	4770      	bx	lr

0800aac6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800aac6:	b580      	push	{r7, lr}
 800aac8:	b084      	sub	sp, #16
 800aaca:	af00      	add	r7, sp, #0
 800aacc:	60f8      	str	r0, [r7, #12]
 800aace:	60b9      	str	r1, [r7, #8]
 800aad0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	2202      	movs	r2, #2
 800aad6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	687a      	ldr	r2, [r7, #4]
 800aade:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	687a      	ldr	r2, [r7, #4]
 800aae4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	68ba      	ldr	r2, [r7, #8]
 800aaea:	2100      	movs	r1, #0
 800aaec:	68f8      	ldr	r0, [r7, #12]
 800aaee:	f000 faca 	bl	800b086 <USBD_LL_Transmit>

  return USBD_OK;
 800aaf2:	2300      	movs	r3, #0
}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	3710      	adds	r7, #16
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}

0800aafc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b084      	sub	sp, #16
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	60f8      	str	r0, [r7, #12]
 800ab04:	60b9      	str	r1, [r7, #8]
 800ab06:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	68ba      	ldr	r2, [r7, #8]
 800ab0c:	2100      	movs	r1, #0
 800ab0e:	68f8      	ldr	r0, [r7, #12]
 800ab10:	f000 fab9 	bl	800b086 <USBD_LL_Transmit>

  return USBD_OK;
 800ab14:	2300      	movs	r3, #0
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	3710      	adds	r7, #16
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}

0800ab1e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ab1e:	b580      	push	{r7, lr}
 800ab20:	b084      	sub	sp, #16
 800ab22:	af00      	add	r7, sp, #0
 800ab24:	60f8      	str	r0, [r7, #12]
 800ab26:	60b9      	str	r1, [r7, #8]
 800ab28:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2203      	movs	r2, #3
 800ab2e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	687a      	ldr	r2, [r7, #4]
 800ab36:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	687a      	ldr	r2, [r7, #4]
 800ab3e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	68ba      	ldr	r2, [r7, #8]
 800ab46:	2100      	movs	r1, #0
 800ab48:	68f8      	ldr	r0, [r7, #12]
 800ab4a:	f000 fabd 	bl	800b0c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ab4e:	2300      	movs	r3, #0
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3710      	adds	r7, #16
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}

0800ab58 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b084      	sub	sp, #16
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	60f8      	str	r0, [r7, #12]
 800ab60:	60b9      	str	r1, [r7, #8]
 800ab62:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	68ba      	ldr	r2, [r7, #8]
 800ab68:	2100      	movs	r1, #0
 800ab6a:	68f8      	ldr	r0, [r7, #12]
 800ab6c:	f000 faac 	bl	800b0c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ab70:	2300      	movs	r3, #0
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3710      	adds	r7, #16
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}

0800ab7a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ab7a:	b580      	push	{r7, lr}
 800ab7c:	b082      	sub	sp, #8
 800ab7e:	af00      	add	r7, sp, #0
 800ab80:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2204      	movs	r2, #4
 800ab86:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	2100      	movs	r1, #0
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f000 fa78 	bl	800b086 <USBD_LL_Transmit>

  return USBD_OK;
 800ab96:	2300      	movs	r3, #0
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3708      	adds	r7, #8
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}

0800aba0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b082      	sub	sp, #8
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2205      	movs	r2, #5
 800abac:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800abb0:	2300      	movs	r3, #0
 800abb2:	2200      	movs	r2, #0
 800abb4:	2100      	movs	r1, #0
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f000 fa86 	bl	800b0c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800abbc:	2300      	movs	r3, #0
}
 800abbe:	4618      	mov	r0, r3
 800abc0:	3708      	adds	r7, #8
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}

0800abc6 <HAL_PCDEx_SetTxFiFoInBytes>:
/* Private functions ---------------------------------------------------------*/

/* USER CODE BEGIN 1 */
#if(!STM32F1_DEVICE)
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFoInBytes(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800abc6:	b580      	push	{r7, lr}
 800abc8:	b082      	sub	sp, #8
 800abca:	af00      	add	r7, sp, #0
 800abcc:	6078      	str	r0, [r7, #4]
 800abce:	460b      	mov	r3, r1
 800abd0:	70fb      	strb	r3, [r7, #3]
 800abd2:	4613      	mov	r3, r2
 800abd4:	803b      	strh	r3, [r7, #0]
	return HAL_PCDEx_SetTxFiFo(hpcd, fifo, (size/4));
 800abd6:	883b      	ldrh	r3, [r7, #0]
 800abd8:	089b      	lsrs	r3, r3, #2
 800abda:	b29a      	uxth	r2, r3
 800abdc:	78fb      	ldrb	r3, [r7, #3]
 800abde:	4619      	mov	r1, r3
 800abe0:	6878      	ldr	r0, [r7, #4]
 800abe2:	f7f9 f95b 	bl	8003e9c <HAL_PCDEx_SetTxFiFo>
 800abe6:	4603      	mov	r3, r0
}
 800abe8:	4618      	mov	r0, r3
 800abea:	3708      	adds	r7, #8
 800abec:	46bd      	mov	sp, r7
 800abee:	bd80      	pop	{r7, pc}

0800abf0 <HAL_PCDEx_SetRxFiFoInBytes>:

HAL_StatusTypeDef HAL_PCDEx_SetRxFiFoInBytes(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b082      	sub	sp, #8
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
 800abf8:	460b      	mov	r3, r1
 800abfa:	807b      	strh	r3, [r7, #2]
	return HAL_PCDEx_SetRxFiFo(hpcd, (size/4));
 800abfc:	887b      	ldrh	r3, [r7, #2]
 800abfe:	089b      	lsrs	r3, r3, #2
 800ac00:	b29b      	uxth	r3, r3
 800ac02:	4619      	mov	r1, r3
 800ac04:	6878      	ldr	r0, [r7, #4]
 800ac06:	f7f9 f990 	bl	8003f2a <HAL_PCDEx_SetRxFiFo>
 800ac0a:	4603      	mov	r3, r0
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	3708      	adds	r7, #8
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}

0800ac14 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b082      	sub	sp, #8
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef *)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800ac28:	4619      	mov	r1, r3
 800ac2a:	4610      	mov	r0, r2
 800ac2c:	f7fe fef7 	bl	8009a1e <USBD_LL_SetupStage>
}
 800ac30:	bf00      	nop
 800ac32:	3708      	adds	r7, #8
 800ac34:	46bd      	mov	sp, r7
 800ac36:	bd80      	pop	{r7, pc}

0800ac38 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b082      	sub	sp, #8
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
 800ac40:	460b      	mov	r3, r1
 800ac42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ac4a:	78fa      	ldrb	r2, [r7, #3]
 800ac4c:	6879      	ldr	r1, [r7, #4]
 800ac4e:	4613      	mov	r3, r2
 800ac50:	00db      	lsls	r3, r3, #3
 800ac52:	4413      	add	r3, r2
 800ac54:	009b      	lsls	r3, r3, #2
 800ac56:	440b      	add	r3, r1
 800ac58:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ac5c:	681a      	ldr	r2, [r3, #0]
 800ac5e:	78fb      	ldrb	r3, [r7, #3]
 800ac60:	4619      	mov	r1, r3
 800ac62:	f7fe ff31 	bl	8009ac8 <USBD_LL_DataOutStage>
}
 800ac66:	bf00      	nop
 800ac68:	3708      	adds	r7, #8
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}

0800ac6e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac6e:	b580      	push	{r7, lr}
 800ac70:	b082      	sub	sp, #8
 800ac72:	af00      	add	r7, sp, #0
 800ac74:	6078      	str	r0, [r7, #4]
 800ac76:	460b      	mov	r3, r1
 800ac78:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ac80:	78fa      	ldrb	r2, [r7, #3]
 800ac82:	6879      	ldr	r1, [r7, #4]
 800ac84:	4613      	mov	r3, r2
 800ac86:	00db      	lsls	r3, r3, #3
 800ac88:	4413      	add	r3, r2
 800ac8a:	009b      	lsls	r3, r3, #2
 800ac8c:	440b      	add	r3, r1
 800ac8e:	3320      	adds	r3, #32
 800ac90:	681a      	ldr	r2, [r3, #0]
 800ac92:	78fb      	ldrb	r3, [r7, #3]
 800ac94:	4619      	mov	r1, r3
 800ac96:	f7fe ff7a 	bl	8009b8e <USBD_LL_DataInStage>
}
 800ac9a:	bf00      	nop
 800ac9c:	3708      	adds	r7, #8
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}

0800aca2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aca2:	b580      	push	{r7, lr}
 800aca4:	b082      	sub	sp, #8
 800aca6:	af00      	add	r7, sp, #0
 800aca8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef *)hpcd->pData);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800acb0:	4618      	mov	r0, r3
 800acb2:	f7ff f889 	bl	8009dc8 <USBD_LL_SOF>
}
 800acb6:	bf00      	nop
 800acb8:	3708      	adds	r7, #8
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}

0800acbe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acbe:	b580      	push	{r7, lr}
 800acc0:	b084      	sub	sp, #16
 800acc2:	af00      	add	r7, sp, #0
 800acc4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800acc6:	2301      	movs	r3, #1
 800acc8:	73fb      	strb	r3, [r7, #15]

  if (hpcd->Init.speed == PCD_SPEED_FULL)
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	79db      	ldrb	r3, [r3, #7]
 800acce:	2b02      	cmp	r3, #2
 800acd0:	d102      	bne.n	800acd8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_FULL; 
 800acd2:	2301      	movs	r3, #1
 800acd4:	73fb      	strb	r3, [r7, #15]
 800acd6:	e008      	b.n	800acea <HAL_PCD_ResetCallback+0x2c>
  }
  #if(!STM32F1_DEVICE)
  else if (hpcd->Init.speed == PCD_SPEED_HIGH)
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	79db      	ldrb	r3, [r3, #7]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d102      	bne.n	800ace6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_HIGH;
 800ace0:	2300      	movs	r3, #0
 800ace2:	73fb      	strb	r3, [r7, #15]
 800ace4:	e001      	b.n	800acea <HAL_PCD_ResetCallback+0x2c>
  }
  #endif
  else
  {
    Error_Handler();
 800ace6:	f7f5 fe57 	bl	8000998 <Error_Handler>
  }
  /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef *)hpcd->pData, speed);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800acf0:	7bfa      	ldrb	r2, [r7, #15]
 800acf2:	4611      	mov	r1, r2
 800acf4:	4618      	mov	r0, r3
 800acf6:	f7ff f829 	bl	8009d4c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef *)hpcd->pData);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ad00:	4618      	mov	r0, r3
 800ad02:	f7fe ffda 	bl	8009cba <USBD_LL_Reset>
}
 800ad06:	bf00      	nop
 800ad08:	3710      	adds	r7, #16
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}
	...

0800ad10 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b082      	sub	sp, #8
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef *)hpcd->pData);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f7ff f824 	bl	8009d6c <USBD_LL_Suspend>
#if (!STM32F1_DEVICE)
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	687a      	ldr	r2, [r7, #4]
 800ad30:	6812      	ldr	r2, [r2, #0]
 800ad32:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ad36:	f043 0301 	orr.w	r3, r3, #1
 800ad3a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	7adb      	ldrb	r3, [r3, #11]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d005      	beq.n	800ad50 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ad44:	4b04      	ldr	r3, [pc, #16]	@ (800ad58 <HAL_PCD_SuspendCallback+0x48>)
 800ad46:	691b      	ldr	r3, [r3, #16]
 800ad48:	4a03      	ldr	r2, [pc, #12]	@ (800ad58 <HAL_PCD_SuspendCallback+0x48>)
 800ad4a:	f043 0306 	orr.w	r3, r3, #6
 800ad4e:	6113      	str	r3, [r2, #16]
  }
#endif
  /* USER CODE END 2 */
}
 800ad50:	bf00      	nop
 800ad52:	3708      	adds	r7, #8
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}
 800ad58:	e000ed00 	.word	0xe000ed00

0800ad5c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b082      	sub	sp, #8
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef *)hpcd->pData);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	f7ff f814 	bl	8009d98 <USBD_LL_Resume>
}
 800ad70:	bf00      	nop
 800ad72:	3708      	adds	r7, #8
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd80      	pop	{r7, pc}

0800ad78 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b082      	sub	sp, #8
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
 800ad80:	460b      	mov	r3, r1
 800ad82:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ad8a:	78fa      	ldrb	r2, [r7, #3]
 800ad8c:	4611      	mov	r1, r2
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f7ff f862 	bl	8009e58 <USBD_LL_IsoOUTIncomplete>
}
 800ad94:	bf00      	nop
 800ad96:	3708      	adds	r7, #8
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd80      	pop	{r7, pc}

0800ad9c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b082      	sub	sp, #8
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
 800ada4:	460b      	mov	r3, r1
 800ada6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800adae:	78fa      	ldrb	r2, [r7, #3]
 800adb0:	4611      	mov	r1, r2
 800adb2:	4618      	mov	r0, r3
 800adb4:	f7ff f82a 	bl	8009e0c <USBD_LL_IsoINIncomplete>
}
 800adb8:	bf00      	nop
 800adba:	3708      	adds	r7, #8
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bd80      	pop	{r7, pc}

0800adc0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b082      	sub	sp, #8
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef *)hpcd->pData);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800adce:	4618      	mov	r0, r3
 800add0:	f7ff f868 	bl	8009ea4 <USBD_LL_DevConnected>
}
 800add4:	bf00      	nop
 800add6:	3708      	adds	r7, #8
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}

0800addc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b082      	sub	sp, #8
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef *)hpcd->pData);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800adea:	4618      	mov	r0, r3
 800adec:	f7ff f865 	bl	8009eba <USBD_LL_DevDisconnected>
}
 800adf0:	bf00      	nop
 800adf2:	3708      	adds	r7, #8
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}

0800adf8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b084      	sub	sp, #16
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
#else
  /**FULL SPEED USB */
#if (STM32F1_DEVICE) /** for STM32F1 or similar */
  hpcd_USB_OTG_PTR = &hpcd_USB_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
#else
  hpcd_USB_OTG_PTR = &hpcd_USB_OTG_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
 800ae00:	4b27      	ldr	r3, [pc, #156]	@ (800aea0 <USBD_LL_Init+0xa8>)
 800ae02:	4a28      	ldr	r2, [pc, #160]	@ (800aea4 <USBD_LL_Init+0xac>)
 800ae04:	601a      	str	r2, [r3, #0]
#endif

  if (pdev->id == DEVICE_FS)
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	781b      	ldrb	r3, [r3, #0]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d143      	bne.n	800ae96 <USBD_LL_Init+0x9e>
  {
    /* Link the driver to the stack. */
    hpcd_USB_OTG_PTR->pData = pdev;
 800ae0e:	4b24      	ldr	r3, [pc, #144]	@ (800aea0 <USBD_LL_Init+0xa8>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	687a      	ldr	r2, [r7, #4]
 800ae14:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
    pdev->pData = hpcd_USB_OTG_PTR;
 800ae18:	4b21      	ldr	r3, [pc, #132]	@ (800aea0 <USBD_LL_Init+0xa8>)
 800ae1a:	681a      	ldr	r2, [r3, #0]
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f8c3 2310 	str.w	r2, [r3, #784]	@ 0x310
      pma_track += 8;
    }
#endif
#else /** if HAL_PCDEx_SetRxFiFo() is used by HAL driver */

    HAL_PCDEx_SetRxFiFoInBytes(hpcd_USB_OTG_PTR, 512); // ALL OUT EP Buffer
 800ae22:	4b1f      	ldr	r3, [pc, #124]	@ (800aea0 <USBD_LL_Init+0xa8>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	f7ff fee0 	bl	800abf0 <HAL_PCDEx_SetRxFiFoInBytes>

    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, 0, 64); // EP0 IN
 800ae30:	4b1b      	ldr	r3, [pc, #108]	@ (800aea0 <USBD_LL_Init+0xa8>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	2240      	movs	r2, #64	@ 0x40
 800ae36:	2100      	movs	r1, #0
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f7ff fec4 	bl	800abc6 <HAL_PCDEx_SetTxFiFoInBytes>
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (HID_KEYBOARD_IN_EP & 0x7F), 64);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CUSTOM_HID_IN_EP & 0x7F), 64);
 800ae3e:	4b18      	ldr	r3, [pc, #96]	@ (800aea0 <USBD_LL_Init+0xa8>)
 800ae40:	6818      	ldr	r0, [r3, #0]
 800ae42:	4b19      	ldr	r3, [pc, #100]	@ (800aea8 <USBD_LL_Init+0xb0>)
 800ae44:	781b      	ldrb	r3, [r3, #0]
 800ae46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae4a:	b2db      	uxtb	r3, r3
 800ae4c:	2240      	movs	r2, #64	@ 0x40
 800ae4e:	4619      	mov	r1, r3
 800ae50:	f7ff feb9 	bl	800abc6 <HAL_PCDEx_SetTxFiFoInBytes>
#endif
#if (USBD_USE_PRNTR == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (PRNT_IN_EP & 0x7F), 128);
#endif
#if (USBD_USE_CDC_ACM == 1)
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800ae54:	2300      	movs	r3, #0
 800ae56:	73fb      	strb	r3, [r7, #15]
 800ae58:	e01a      	b.n	800ae90 <USBD_LL_Init+0x98>
    {
      HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CDC_IN_EP[i] & 0x7F), 128);
 800ae5a:	4b11      	ldr	r3, [pc, #68]	@ (800aea0 <USBD_LL_Init+0xa8>)
 800ae5c:	6818      	ldr	r0, [r3, #0]
 800ae5e:	7bfb      	ldrb	r3, [r7, #15]
 800ae60:	4a12      	ldr	r2, [pc, #72]	@ (800aeac <USBD_LL_Init+0xb4>)
 800ae62:	5cd3      	ldrb	r3, [r2, r3]
 800ae64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae68:	b2db      	uxtb	r3, r3
 800ae6a:	2280      	movs	r2, #128	@ 0x80
 800ae6c:	4619      	mov	r1, r3
 800ae6e:	f7ff feaa 	bl	800abc6 <HAL_PCDEx_SetTxFiFoInBytes>
      HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CDC_CMD_EP[i] & 0x7F), 64);
 800ae72:	4b0b      	ldr	r3, [pc, #44]	@ (800aea0 <USBD_LL_Init+0xa8>)
 800ae74:	6818      	ldr	r0, [r3, #0]
 800ae76:	7bfb      	ldrb	r3, [r7, #15]
 800ae78:	4a0d      	ldr	r2, [pc, #52]	@ (800aeb0 <USBD_LL_Init+0xb8>)
 800ae7a:	5cd3      	ldrb	r3, [r2, r3]
 800ae7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae80:	b2db      	uxtb	r3, r3
 800ae82:	2240      	movs	r2, #64	@ 0x40
 800ae84:	4619      	mov	r1, r3
 800ae86:	f7ff fe9e 	bl	800abc6 <HAL_PCDEx_SetTxFiFoInBytes>
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800ae8a:	7bfb      	ldrb	r3, [r7, #15]
 800ae8c:	3301      	adds	r3, #1
 800ae8e:	73fb      	strb	r3, [r7, #15]
 800ae90:	7bfb      	ldrb	r3, [r7, #15]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d0e1      	beq.n	800ae5a <USBD_LL_Init+0x62>
  HAL_PCD_RegisterDataOutStageCallback(hpcd_USB_OTG_PTR, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(hpcd_USB_OTG_PTR, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  return USBD_OK;
 800ae96:	2300      	movs	r3, #0
}
 800ae98:	4618      	mov	r0, r3
 800ae9a:	3710      	adds	r7, #16
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}
 800aea0:	20002338 	.word	0x20002338
 800aea4:	2000052c 	.word	0x2000052c
 800aea8:	200001ce 	.word	0x200001ce
 800aeac:	20001fcc 	.word	0x20001fcc
 800aeb0:	20001fd4 	.word	0x20001fd4

0800aeb4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b084      	sub	sp, #16
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aebc:	2300      	movs	r3, #0
 800aebe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aec0:	2300      	movs	r3, #0
 800aec2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800aeca:	4618      	mov	r0, r3
 800aecc:	f7f7 ff07 	bl	8002cde <HAL_PCD_Start>
 800aed0:	4603      	mov	r3, r0
 800aed2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800aed4:	7bfb      	ldrb	r3, [r7, #15]
 800aed6:	4618      	mov	r0, r3
 800aed8:	f000 f92a 	bl	800b130 <USBD_Get_USB_Status>
 800aedc:	4603      	mov	r3, r0
 800aede:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aee0:	7bbb      	ldrb	r3, [r7, #14]
}
 800aee2:	4618      	mov	r0, r3
 800aee4:	3710      	adds	r7, #16
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}

0800aeea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800aeea:	b580      	push	{r7, lr}
 800aeec:	b084      	sub	sp, #16
 800aeee:	af00      	add	r7, sp, #0
 800aef0:	6078      	str	r0, [r7, #4]
 800aef2:	4608      	mov	r0, r1
 800aef4:	4611      	mov	r1, r2
 800aef6:	461a      	mov	r2, r3
 800aef8:	4603      	mov	r3, r0
 800aefa:	70fb      	strb	r3, [r7, #3]
 800aefc:	460b      	mov	r3, r1
 800aefe:	70bb      	strb	r3, [r7, #2]
 800af00:	4613      	mov	r3, r2
 800af02:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af04:	2300      	movs	r3, #0
 800af06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af08:	2300      	movs	r3, #0
 800af0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 800af12:	78bb      	ldrb	r3, [r7, #2]
 800af14:	883a      	ldrh	r2, [r7, #0]
 800af16:	78f9      	ldrb	r1, [r7, #3]
 800af18:	f7f8 fbdb 	bl	80036d2 <HAL_PCD_EP_Open>
 800af1c:	4603      	mov	r3, r0
 800af1e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800af20:	7bfb      	ldrb	r3, [r7, #15]
 800af22:	4618      	mov	r0, r3
 800af24:	f000 f904 	bl	800b130 <USBD_Get_USB_Status>
 800af28:	4603      	mov	r3, r0
 800af2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af2c:	7bbb      	ldrb	r3, [r7, #14]
}
 800af2e:	4618      	mov	r0, r3
 800af30:	3710      	adds	r7, #16
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}

0800af36 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af36:	b580      	push	{r7, lr}
 800af38:	b084      	sub	sp, #16
 800af3a:	af00      	add	r7, sp, #0
 800af3c:	6078      	str	r0, [r7, #4]
 800af3e:	460b      	mov	r3, r1
 800af40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af42:	2300      	movs	r3, #0
 800af44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af46:	2300      	movs	r3, #0
 800af48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800af50:	78fa      	ldrb	r2, [r7, #3]
 800af52:	4611      	mov	r1, r2
 800af54:	4618      	mov	r0, r3
 800af56:	f7f8 fc26 	bl	80037a6 <HAL_PCD_EP_Close>
 800af5a:	4603      	mov	r3, r0
 800af5c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800af5e:	7bfb      	ldrb	r3, [r7, #15]
 800af60:	4618      	mov	r0, r3
 800af62:	f000 f8e5 	bl	800b130 <USBD_Get_USB_Status>
 800af66:	4603      	mov	r3, r0
 800af68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af6a:	7bbb      	ldrb	r3, [r7, #14]
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	3710      	adds	r7, #16
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}

0800af74 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b084      	sub	sp, #16
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
 800af7c:	460b      	mov	r3, r1
 800af7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af80:	2300      	movs	r3, #0
 800af82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af84:	2300      	movs	r3, #0
 800af86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800af8e:	78fa      	ldrb	r2, [r7, #3]
 800af90:	4611      	mov	r1, r2
 800af92:	4618      	mov	r0, r3
 800af94:	f7f8 fcde 	bl	8003954 <HAL_PCD_EP_SetStall>
 800af98:	4603      	mov	r3, r0
 800af9a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800af9c:	7bfb      	ldrb	r3, [r7, #15]
 800af9e:	4618      	mov	r0, r3
 800afa0:	f000 f8c6 	bl	800b130 <USBD_Get_USB_Status>
 800afa4:	4603      	mov	r3, r0
 800afa6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800afa8:	7bbb      	ldrb	r3, [r7, #14]
}
 800afaa:	4618      	mov	r0, r3
 800afac:	3710      	adds	r7, #16
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}

0800afb2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800afb2:	b580      	push	{r7, lr}
 800afb4:	b084      	sub	sp, #16
 800afb6:	af00      	add	r7, sp, #0
 800afb8:	6078      	str	r0, [r7, #4]
 800afba:	460b      	mov	r3, r1
 800afbc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afbe:	2300      	movs	r3, #0
 800afc0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afc2:	2300      	movs	r3, #0
 800afc4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800afcc:	78fa      	ldrb	r2, [r7, #3]
 800afce:	4611      	mov	r1, r2
 800afd0:	4618      	mov	r0, r3
 800afd2:	f7f8 fd22 	bl	8003a1a <HAL_PCD_EP_ClrStall>
 800afd6:	4603      	mov	r3, r0
 800afd8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800afda:	7bfb      	ldrb	r3, [r7, #15]
 800afdc:	4618      	mov	r0, r3
 800afde:	f000 f8a7 	bl	800b130 <USBD_Get_USB_Status>
 800afe2:	4603      	mov	r3, r0
 800afe4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800afe6:	7bbb      	ldrb	r3, [r7, #14]
}
 800afe8:	4618      	mov	r0, r3
 800afea:	3710      	adds	r7, #16
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}

0800aff0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aff0:	b480      	push	{r7}
 800aff2:	b085      	sub	sp, #20
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
 800aff8:	460b      	mov	r3, r1
 800affa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800b002:	60fb      	str	r3, [r7, #12]

  if ((ep_addr & 0x80) == 0x80)
 800b004:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	da0b      	bge.n	800b024 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b00c:	78fb      	ldrb	r3, [r7, #3]
 800b00e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b012:	68f9      	ldr	r1, [r7, #12]
 800b014:	4613      	mov	r3, r2
 800b016:	00db      	lsls	r3, r3, #3
 800b018:	4413      	add	r3, r2
 800b01a:	009b      	lsls	r3, r3, #2
 800b01c:	440b      	add	r3, r1
 800b01e:	3316      	adds	r3, #22
 800b020:	781b      	ldrb	r3, [r3, #0]
 800b022:	e00b      	b.n	800b03c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b024:	78fb      	ldrb	r3, [r7, #3]
 800b026:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b02a:	68f9      	ldr	r1, [r7, #12]
 800b02c:	4613      	mov	r3, r2
 800b02e:	00db      	lsls	r3, r3, #3
 800b030:	4413      	add	r3, r2
 800b032:	009b      	lsls	r3, r3, #2
 800b034:	440b      	add	r3, r1
 800b036:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800b03a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	3714      	adds	r7, #20
 800b040:	46bd      	mov	sp, r7
 800b042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b046:	4770      	bx	lr

0800b048 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b084      	sub	sp, #16
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
 800b050:	460b      	mov	r3, r1
 800b052:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b054:	2300      	movs	r3, #0
 800b056:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b058:	2300      	movs	r3, #0
 800b05a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800b062:	78fa      	ldrb	r2, [r7, #3]
 800b064:	4611      	mov	r1, r2
 800b066:	4618      	mov	r0, r3
 800b068:	f7f8 fb0f 	bl	800368a <HAL_PCD_SetAddress>
 800b06c:	4603      	mov	r3, r0
 800b06e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800b070:	7bfb      	ldrb	r3, [r7, #15]
 800b072:	4618      	mov	r0, r3
 800b074:	f000 f85c 	bl	800b130 <USBD_Get_USB_Status>
 800b078:	4603      	mov	r3, r0
 800b07a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b07c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b07e:	4618      	mov	r0, r3
 800b080:	3710      	adds	r7, #16
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}

0800b086 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b086:	b580      	push	{r7, lr}
 800b088:	b086      	sub	sp, #24
 800b08a:	af00      	add	r7, sp, #0
 800b08c:	60f8      	str	r0, [r7, #12]
 800b08e:	607a      	str	r2, [r7, #4]
 800b090:	603b      	str	r3, [r7, #0]
 800b092:	460b      	mov	r3, r1
 800b094:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b096:	2300      	movs	r3, #0
 800b098:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b09a:	2300      	movs	r3, #0
 800b09c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 800b0a4:	7af9      	ldrb	r1, [r7, #11]
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	687a      	ldr	r2, [r7, #4]
 800b0aa:	f7f8 fc19 	bl	80038e0 <HAL_PCD_EP_Transmit>
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 800b0b2:	7dfb      	ldrb	r3, [r7, #23]
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	f000 f83b 	bl	800b130 <USBD_Get_USB_Status>
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b0be:	7dbb      	ldrb	r3, [r7, #22]
}
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	3718      	adds	r7, #24
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	bd80      	pop	{r7, pc}

0800b0c8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b086      	sub	sp, #24
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	60f8      	str	r0, [r7, #12]
 800b0d0:	607a      	str	r2, [r7, #4]
 800b0d2:	603b      	str	r3, [r7, #0]
 800b0d4:	460b      	mov	r3, r1
 800b0d6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0d8:	2300      	movs	r3, #0
 800b0da:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0dc:	2300      	movs	r3, #0
 800b0de:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 800b0e6:	7af9      	ldrb	r1, [r7, #11]
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	687a      	ldr	r2, [r7, #4]
 800b0ec:	f7f8 fba5 	bl	800383a <HAL_PCD_EP_Receive>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 800b0f4:	7dfb      	ldrb	r3, [r7, #23]
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	f000 f81a 	bl	800b130 <USBD_Get_USB_Status>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b100:	7dbb      	ldrb	r3, [r7, #22]
}
 800b102:	4618      	mov	r0, r3
 800b104:	3718      	adds	r7, #24
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}

0800b10a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b10a:	b580      	push	{r7, lr}
 800b10c:	b082      	sub	sp, #8
 800b10e:	af00      	add	r7, sp, #0
 800b110:	6078      	str	r0, [r7, #4]
 800b112:	460b      	mov	r3, r1
 800b114:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef *)pdev->pData, ep_addr);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800b11c:	78fa      	ldrb	r2, [r7, #3]
 800b11e:	4611      	mov	r1, r2
 800b120:	4618      	mov	r0, r3
 800b122:	f7f8 fbc5 	bl	80038b0 <HAL_PCD_EP_GetRxCount>
 800b126:	4603      	mov	r3, r0
}
 800b128:	4618      	mov	r0, r3
 800b12a:	3708      	adds	r7, #8
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd80      	pop	{r7, pc}

0800b130 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b130:	b480      	push	{r7}
 800b132:	b085      	sub	sp, #20
 800b134:	af00      	add	r7, sp, #0
 800b136:	4603      	mov	r3, r0
 800b138:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b13a:	2300      	movs	r3, #0
 800b13c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b13e:	79fb      	ldrb	r3, [r7, #7]
 800b140:	2b03      	cmp	r3, #3
 800b142:	d817      	bhi.n	800b174 <USBD_Get_USB_Status+0x44>
 800b144:	a201      	add	r2, pc, #4	@ (adr r2, 800b14c <USBD_Get_USB_Status+0x1c>)
 800b146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b14a:	bf00      	nop
 800b14c:	0800b15d 	.word	0x0800b15d
 800b150:	0800b163 	.word	0x0800b163
 800b154:	0800b169 	.word	0x0800b169
 800b158:	0800b16f 	.word	0x0800b16f
  {
  case HAL_OK:
    usb_status = USBD_OK;
 800b15c:	2300      	movs	r3, #0
 800b15e:	73fb      	strb	r3, [r7, #15]
    break;
 800b160:	e00b      	b.n	800b17a <USBD_Get_USB_Status+0x4a>
  case HAL_ERROR:
    usb_status = USBD_FAIL;
 800b162:	2303      	movs	r3, #3
 800b164:	73fb      	strb	r3, [r7, #15]
    break;
 800b166:	e008      	b.n	800b17a <USBD_Get_USB_Status+0x4a>
  case HAL_BUSY:
    usb_status = USBD_BUSY;
 800b168:	2301      	movs	r3, #1
 800b16a:	73fb      	strb	r3, [r7, #15]
    break;
 800b16c:	e005      	b.n	800b17a <USBD_Get_USB_Status+0x4a>
  case HAL_TIMEOUT:
    usb_status = USBD_FAIL;
 800b16e:	2303      	movs	r3, #3
 800b170:	73fb      	strb	r3, [r7, #15]
    break;
 800b172:	e002      	b.n	800b17a <USBD_Get_USB_Status+0x4a>
  default:
    usb_status = USBD_FAIL;
 800b174:	2303      	movs	r3, #3
 800b176:	73fb      	strb	r3, [r7, #15]
    break;
 800b178:	bf00      	nop
  }
  return usb_status;
 800b17a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b17c:	4618      	mov	r0, r3
 800b17e:	3714      	adds	r7, #20
 800b180:	46bd      	mov	sp, r7
 800b182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b186:	4770      	bx	lr

0800b188 <sniprintf>:
 800b188:	b40c      	push	{r2, r3}
 800b18a:	b530      	push	{r4, r5, lr}
 800b18c:	4b17      	ldr	r3, [pc, #92]	@ (800b1ec <sniprintf+0x64>)
 800b18e:	1e0c      	subs	r4, r1, #0
 800b190:	681d      	ldr	r5, [r3, #0]
 800b192:	b09d      	sub	sp, #116	@ 0x74
 800b194:	da08      	bge.n	800b1a8 <sniprintf+0x20>
 800b196:	238b      	movs	r3, #139	@ 0x8b
 800b198:	602b      	str	r3, [r5, #0]
 800b19a:	f04f 30ff 	mov.w	r0, #4294967295
 800b19e:	b01d      	add	sp, #116	@ 0x74
 800b1a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b1a4:	b002      	add	sp, #8
 800b1a6:	4770      	bx	lr
 800b1a8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b1ac:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b1b0:	bf14      	ite	ne
 800b1b2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b1b6:	4623      	moveq	r3, r4
 800b1b8:	9304      	str	r3, [sp, #16]
 800b1ba:	9307      	str	r3, [sp, #28]
 800b1bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b1c0:	9002      	str	r0, [sp, #8]
 800b1c2:	9006      	str	r0, [sp, #24]
 800b1c4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b1c8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b1ca:	ab21      	add	r3, sp, #132	@ 0x84
 800b1cc:	a902      	add	r1, sp, #8
 800b1ce:	4628      	mov	r0, r5
 800b1d0:	9301      	str	r3, [sp, #4]
 800b1d2:	f000 f9a3 	bl	800b51c <_svfiprintf_r>
 800b1d6:	1c43      	adds	r3, r0, #1
 800b1d8:	bfbc      	itt	lt
 800b1da:	238b      	movlt	r3, #139	@ 0x8b
 800b1dc:	602b      	strlt	r3, [r5, #0]
 800b1de:	2c00      	cmp	r4, #0
 800b1e0:	d0dd      	beq.n	800b19e <sniprintf+0x16>
 800b1e2:	9b02      	ldr	r3, [sp, #8]
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	701a      	strb	r2, [r3, #0]
 800b1e8:	e7d9      	b.n	800b19e <sniprintf+0x16>
 800b1ea:	bf00      	nop
 800b1ec:	200002a8 	.word	0x200002a8

0800b1f0 <memset>:
 800b1f0:	4402      	add	r2, r0
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	4293      	cmp	r3, r2
 800b1f6:	d100      	bne.n	800b1fa <memset+0xa>
 800b1f8:	4770      	bx	lr
 800b1fa:	f803 1b01 	strb.w	r1, [r3], #1
 800b1fe:	e7f9      	b.n	800b1f4 <memset+0x4>

0800b200 <__errno>:
 800b200:	4b01      	ldr	r3, [pc, #4]	@ (800b208 <__errno+0x8>)
 800b202:	6818      	ldr	r0, [r3, #0]
 800b204:	4770      	bx	lr
 800b206:	bf00      	nop
 800b208:	200002a8 	.word	0x200002a8

0800b20c <__libc_init_array>:
 800b20c:	b570      	push	{r4, r5, r6, lr}
 800b20e:	4d0d      	ldr	r5, [pc, #52]	@ (800b244 <__libc_init_array+0x38>)
 800b210:	4c0d      	ldr	r4, [pc, #52]	@ (800b248 <__libc_init_array+0x3c>)
 800b212:	1b64      	subs	r4, r4, r5
 800b214:	10a4      	asrs	r4, r4, #2
 800b216:	2600      	movs	r6, #0
 800b218:	42a6      	cmp	r6, r4
 800b21a:	d109      	bne.n	800b230 <__libc_init_array+0x24>
 800b21c:	4d0b      	ldr	r5, [pc, #44]	@ (800b24c <__libc_init_array+0x40>)
 800b21e:	4c0c      	ldr	r4, [pc, #48]	@ (800b250 <__libc_init_array+0x44>)
 800b220:	f000 fc66 	bl	800baf0 <_init>
 800b224:	1b64      	subs	r4, r4, r5
 800b226:	10a4      	asrs	r4, r4, #2
 800b228:	2600      	movs	r6, #0
 800b22a:	42a6      	cmp	r6, r4
 800b22c:	d105      	bne.n	800b23a <__libc_init_array+0x2e>
 800b22e:	bd70      	pop	{r4, r5, r6, pc}
 800b230:	f855 3b04 	ldr.w	r3, [r5], #4
 800b234:	4798      	blx	r3
 800b236:	3601      	adds	r6, #1
 800b238:	e7ee      	b.n	800b218 <__libc_init_array+0xc>
 800b23a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b23e:	4798      	blx	r3
 800b240:	3601      	adds	r6, #1
 800b242:	e7f2      	b.n	800b22a <__libc_init_array+0x1e>
 800b244:	0800bbd8 	.word	0x0800bbd8
 800b248:	0800bbd8 	.word	0x0800bbd8
 800b24c:	0800bbd8 	.word	0x0800bbd8
 800b250:	0800bbdc 	.word	0x0800bbdc

0800b254 <__retarget_lock_acquire_recursive>:
 800b254:	4770      	bx	lr

0800b256 <__retarget_lock_release_recursive>:
 800b256:	4770      	bx	lr

0800b258 <memcpy>:
 800b258:	440a      	add	r2, r1
 800b25a:	4291      	cmp	r1, r2
 800b25c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b260:	d100      	bne.n	800b264 <memcpy+0xc>
 800b262:	4770      	bx	lr
 800b264:	b510      	push	{r4, lr}
 800b266:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b26a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b26e:	4291      	cmp	r1, r2
 800b270:	d1f9      	bne.n	800b266 <memcpy+0xe>
 800b272:	bd10      	pop	{r4, pc}

0800b274 <_free_r>:
 800b274:	b538      	push	{r3, r4, r5, lr}
 800b276:	4605      	mov	r5, r0
 800b278:	2900      	cmp	r1, #0
 800b27a:	d041      	beq.n	800b300 <_free_r+0x8c>
 800b27c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b280:	1f0c      	subs	r4, r1, #4
 800b282:	2b00      	cmp	r3, #0
 800b284:	bfb8      	it	lt
 800b286:	18e4      	addlt	r4, r4, r3
 800b288:	f000 f8e0 	bl	800b44c <__malloc_lock>
 800b28c:	4a1d      	ldr	r2, [pc, #116]	@ (800b304 <_free_r+0x90>)
 800b28e:	6813      	ldr	r3, [r2, #0]
 800b290:	b933      	cbnz	r3, 800b2a0 <_free_r+0x2c>
 800b292:	6063      	str	r3, [r4, #4]
 800b294:	6014      	str	r4, [r2, #0]
 800b296:	4628      	mov	r0, r5
 800b298:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b29c:	f000 b8dc 	b.w	800b458 <__malloc_unlock>
 800b2a0:	42a3      	cmp	r3, r4
 800b2a2:	d908      	bls.n	800b2b6 <_free_r+0x42>
 800b2a4:	6820      	ldr	r0, [r4, #0]
 800b2a6:	1821      	adds	r1, r4, r0
 800b2a8:	428b      	cmp	r3, r1
 800b2aa:	bf01      	itttt	eq
 800b2ac:	6819      	ldreq	r1, [r3, #0]
 800b2ae:	685b      	ldreq	r3, [r3, #4]
 800b2b0:	1809      	addeq	r1, r1, r0
 800b2b2:	6021      	streq	r1, [r4, #0]
 800b2b4:	e7ed      	b.n	800b292 <_free_r+0x1e>
 800b2b6:	461a      	mov	r2, r3
 800b2b8:	685b      	ldr	r3, [r3, #4]
 800b2ba:	b10b      	cbz	r3, 800b2c0 <_free_r+0x4c>
 800b2bc:	42a3      	cmp	r3, r4
 800b2be:	d9fa      	bls.n	800b2b6 <_free_r+0x42>
 800b2c0:	6811      	ldr	r1, [r2, #0]
 800b2c2:	1850      	adds	r0, r2, r1
 800b2c4:	42a0      	cmp	r0, r4
 800b2c6:	d10b      	bne.n	800b2e0 <_free_r+0x6c>
 800b2c8:	6820      	ldr	r0, [r4, #0]
 800b2ca:	4401      	add	r1, r0
 800b2cc:	1850      	adds	r0, r2, r1
 800b2ce:	4283      	cmp	r3, r0
 800b2d0:	6011      	str	r1, [r2, #0]
 800b2d2:	d1e0      	bne.n	800b296 <_free_r+0x22>
 800b2d4:	6818      	ldr	r0, [r3, #0]
 800b2d6:	685b      	ldr	r3, [r3, #4]
 800b2d8:	6053      	str	r3, [r2, #4]
 800b2da:	4408      	add	r0, r1
 800b2dc:	6010      	str	r0, [r2, #0]
 800b2de:	e7da      	b.n	800b296 <_free_r+0x22>
 800b2e0:	d902      	bls.n	800b2e8 <_free_r+0x74>
 800b2e2:	230c      	movs	r3, #12
 800b2e4:	602b      	str	r3, [r5, #0]
 800b2e6:	e7d6      	b.n	800b296 <_free_r+0x22>
 800b2e8:	6820      	ldr	r0, [r4, #0]
 800b2ea:	1821      	adds	r1, r4, r0
 800b2ec:	428b      	cmp	r3, r1
 800b2ee:	bf04      	itt	eq
 800b2f0:	6819      	ldreq	r1, [r3, #0]
 800b2f2:	685b      	ldreq	r3, [r3, #4]
 800b2f4:	6063      	str	r3, [r4, #4]
 800b2f6:	bf04      	itt	eq
 800b2f8:	1809      	addeq	r1, r1, r0
 800b2fa:	6021      	streq	r1, [r4, #0]
 800b2fc:	6054      	str	r4, [r2, #4]
 800b2fe:	e7ca      	b.n	800b296 <_free_r+0x22>
 800b300:	bd38      	pop	{r3, r4, r5, pc}
 800b302:	bf00      	nop
 800b304:	20002480 	.word	0x20002480

0800b308 <sbrk_aligned>:
 800b308:	b570      	push	{r4, r5, r6, lr}
 800b30a:	4e0f      	ldr	r6, [pc, #60]	@ (800b348 <sbrk_aligned+0x40>)
 800b30c:	460c      	mov	r4, r1
 800b30e:	6831      	ldr	r1, [r6, #0]
 800b310:	4605      	mov	r5, r0
 800b312:	b911      	cbnz	r1, 800b31a <sbrk_aligned+0x12>
 800b314:	f000 fba6 	bl	800ba64 <_sbrk_r>
 800b318:	6030      	str	r0, [r6, #0]
 800b31a:	4621      	mov	r1, r4
 800b31c:	4628      	mov	r0, r5
 800b31e:	f000 fba1 	bl	800ba64 <_sbrk_r>
 800b322:	1c43      	adds	r3, r0, #1
 800b324:	d103      	bne.n	800b32e <sbrk_aligned+0x26>
 800b326:	f04f 34ff 	mov.w	r4, #4294967295
 800b32a:	4620      	mov	r0, r4
 800b32c:	bd70      	pop	{r4, r5, r6, pc}
 800b32e:	1cc4      	adds	r4, r0, #3
 800b330:	f024 0403 	bic.w	r4, r4, #3
 800b334:	42a0      	cmp	r0, r4
 800b336:	d0f8      	beq.n	800b32a <sbrk_aligned+0x22>
 800b338:	1a21      	subs	r1, r4, r0
 800b33a:	4628      	mov	r0, r5
 800b33c:	f000 fb92 	bl	800ba64 <_sbrk_r>
 800b340:	3001      	adds	r0, #1
 800b342:	d1f2      	bne.n	800b32a <sbrk_aligned+0x22>
 800b344:	e7ef      	b.n	800b326 <sbrk_aligned+0x1e>
 800b346:	bf00      	nop
 800b348:	2000247c 	.word	0x2000247c

0800b34c <_malloc_r>:
 800b34c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b350:	1ccd      	adds	r5, r1, #3
 800b352:	f025 0503 	bic.w	r5, r5, #3
 800b356:	3508      	adds	r5, #8
 800b358:	2d0c      	cmp	r5, #12
 800b35a:	bf38      	it	cc
 800b35c:	250c      	movcc	r5, #12
 800b35e:	2d00      	cmp	r5, #0
 800b360:	4606      	mov	r6, r0
 800b362:	db01      	blt.n	800b368 <_malloc_r+0x1c>
 800b364:	42a9      	cmp	r1, r5
 800b366:	d904      	bls.n	800b372 <_malloc_r+0x26>
 800b368:	230c      	movs	r3, #12
 800b36a:	6033      	str	r3, [r6, #0]
 800b36c:	2000      	movs	r0, #0
 800b36e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b372:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b448 <_malloc_r+0xfc>
 800b376:	f000 f869 	bl	800b44c <__malloc_lock>
 800b37a:	f8d8 3000 	ldr.w	r3, [r8]
 800b37e:	461c      	mov	r4, r3
 800b380:	bb44      	cbnz	r4, 800b3d4 <_malloc_r+0x88>
 800b382:	4629      	mov	r1, r5
 800b384:	4630      	mov	r0, r6
 800b386:	f7ff ffbf 	bl	800b308 <sbrk_aligned>
 800b38a:	1c43      	adds	r3, r0, #1
 800b38c:	4604      	mov	r4, r0
 800b38e:	d158      	bne.n	800b442 <_malloc_r+0xf6>
 800b390:	f8d8 4000 	ldr.w	r4, [r8]
 800b394:	4627      	mov	r7, r4
 800b396:	2f00      	cmp	r7, #0
 800b398:	d143      	bne.n	800b422 <_malloc_r+0xd6>
 800b39a:	2c00      	cmp	r4, #0
 800b39c:	d04b      	beq.n	800b436 <_malloc_r+0xea>
 800b39e:	6823      	ldr	r3, [r4, #0]
 800b3a0:	4639      	mov	r1, r7
 800b3a2:	4630      	mov	r0, r6
 800b3a4:	eb04 0903 	add.w	r9, r4, r3
 800b3a8:	f000 fb5c 	bl	800ba64 <_sbrk_r>
 800b3ac:	4581      	cmp	r9, r0
 800b3ae:	d142      	bne.n	800b436 <_malloc_r+0xea>
 800b3b0:	6821      	ldr	r1, [r4, #0]
 800b3b2:	1a6d      	subs	r5, r5, r1
 800b3b4:	4629      	mov	r1, r5
 800b3b6:	4630      	mov	r0, r6
 800b3b8:	f7ff ffa6 	bl	800b308 <sbrk_aligned>
 800b3bc:	3001      	adds	r0, #1
 800b3be:	d03a      	beq.n	800b436 <_malloc_r+0xea>
 800b3c0:	6823      	ldr	r3, [r4, #0]
 800b3c2:	442b      	add	r3, r5
 800b3c4:	6023      	str	r3, [r4, #0]
 800b3c6:	f8d8 3000 	ldr.w	r3, [r8]
 800b3ca:	685a      	ldr	r2, [r3, #4]
 800b3cc:	bb62      	cbnz	r2, 800b428 <_malloc_r+0xdc>
 800b3ce:	f8c8 7000 	str.w	r7, [r8]
 800b3d2:	e00f      	b.n	800b3f4 <_malloc_r+0xa8>
 800b3d4:	6822      	ldr	r2, [r4, #0]
 800b3d6:	1b52      	subs	r2, r2, r5
 800b3d8:	d420      	bmi.n	800b41c <_malloc_r+0xd0>
 800b3da:	2a0b      	cmp	r2, #11
 800b3dc:	d917      	bls.n	800b40e <_malloc_r+0xc2>
 800b3de:	1961      	adds	r1, r4, r5
 800b3e0:	42a3      	cmp	r3, r4
 800b3e2:	6025      	str	r5, [r4, #0]
 800b3e4:	bf18      	it	ne
 800b3e6:	6059      	strne	r1, [r3, #4]
 800b3e8:	6863      	ldr	r3, [r4, #4]
 800b3ea:	bf08      	it	eq
 800b3ec:	f8c8 1000 	streq.w	r1, [r8]
 800b3f0:	5162      	str	r2, [r4, r5]
 800b3f2:	604b      	str	r3, [r1, #4]
 800b3f4:	4630      	mov	r0, r6
 800b3f6:	f000 f82f 	bl	800b458 <__malloc_unlock>
 800b3fa:	f104 000b 	add.w	r0, r4, #11
 800b3fe:	1d23      	adds	r3, r4, #4
 800b400:	f020 0007 	bic.w	r0, r0, #7
 800b404:	1ac2      	subs	r2, r0, r3
 800b406:	bf1c      	itt	ne
 800b408:	1a1b      	subne	r3, r3, r0
 800b40a:	50a3      	strne	r3, [r4, r2]
 800b40c:	e7af      	b.n	800b36e <_malloc_r+0x22>
 800b40e:	6862      	ldr	r2, [r4, #4]
 800b410:	42a3      	cmp	r3, r4
 800b412:	bf0c      	ite	eq
 800b414:	f8c8 2000 	streq.w	r2, [r8]
 800b418:	605a      	strne	r2, [r3, #4]
 800b41a:	e7eb      	b.n	800b3f4 <_malloc_r+0xa8>
 800b41c:	4623      	mov	r3, r4
 800b41e:	6864      	ldr	r4, [r4, #4]
 800b420:	e7ae      	b.n	800b380 <_malloc_r+0x34>
 800b422:	463c      	mov	r4, r7
 800b424:	687f      	ldr	r7, [r7, #4]
 800b426:	e7b6      	b.n	800b396 <_malloc_r+0x4a>
 800b428:	461a      	mov	r2, r3
 800b42a:	685b      	ldr	r3, [r3, #4]
 800b42c:	42a3      	cmp	r3, r4
 800b42e:	d1fb      	bne.n	800b428 <_malloc_r+0xdc>
 800b430:	2300      	movs	r3, #0
 800b432:	6053      	str	r3, [r2, #4]
 800b434:	e7de      	b.n	800b3f4 <_malloc_r+0xa8>
 800b436:	230c      	movs	r3, #12
 800b438:	6033      	str	r3, [r6, #0]
 800b43a:	4630      	mov	r0, r6
 800b43c:	f000 f80c 	bl	800b458 <__malloc_unlock>
 800b440:	e794      	b.n	800b36c <_malloc_r+0x20>
 800b442:	6005      	str	r5, [r0, #0]
 800b444:	e7d6      	b.n	800b3f4 <_malloc_r+0xa8>
 800b446:	bf00      	nop
 800b448:	20002480 	.word	0x20002480

0800b44c <__malloc_lock>:
 800b44c:	4801      	ldr	r0, [pc, #4]	@ (800b454 <__malloc_lock+0x8>)
 800b44e:	f7ff bf01 	b.w	800b254 <__retarget_lock_acquire_recursive>
 800b452:	bf00      	nop
 800b454:	20002478 	.word	0x20002478

0800b458 <__malloc_unlock>:
 800b458:	4801      	ldr	r0, [pc, #4]	@ (800b460 <__malloc_unlock+0x8>)
 800b45a:	f7ff befc 	b.w	800b256 <__retarget_lock_release_recursive>
 800b45e:	bf00      	nop
 800b460:	20002478 	.word	0x20002478

0800b464 <__ssputs_r>:
 800b464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b468:	688e      	ldr	r6, [r1, #8]
 800b46a:	461f      	mov	r7, r3
 800b46c:	42be      	cmp	r6, r7
 800b46e:	680b      	ldr	r3, [r1, #0]
 800b470:	4682      	mov	sl, r0
 800b472:	460c      	mov	r4, r1
 800b474:	4690      	mov	r8, r2
 800b476:	d82d      	bhi.n	800b4d4 <__ssputs_r+0x70>
 800b478:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b47c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b480:	d026      	beq.n	800b4d0 <__ssputs_r+0x6c>
 800b482:	6965      	ldr	r5, [r4, #20]
 800b484:	6909      	ldr	r1, [r1, #16]
 800b486:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b48a:	eba3 0901 	sub.w	r9, r3, r1
 800b48e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b492:	1c7b      	adds	r3, r7, #1
 800b494:	444b      	add	r3, r9
 800b496:	106d      	asrs	r5, r5, #1
 800b498:	429d      	cmp	r5, r3
 800b49a:	bf38      	it	cc
 800b49c:	461d      	movcc	r5, r3
 800b49e:	0553      	lsls	r3, r2, #21
 800b4a0:	d527      	bpl.n	800b4f2 <__ssputs_r+0x8e>
 800b4a2:	4629      	mov	r1, r5
 800b4a4:	f7ff ff52 	bl	800b34c <_malloc_r>
 800b4a8:	4606      	mov	r6, r0
 800b4aa:	b360      	cbz	r0, 800b506 <__ssputs_r+0xa2>
 800b4ac:	6921      	ldr	r1, [r4, #16]
 800b4ae:	464a      	mov	r2, r9
 800b4b0:	f7ff fed2 	bl	800b258 <memcpy>
 800b4b4:	89a3      	ldrh	r3, [r4, #12]
 800b4b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b4ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b4be:	81a3      	strh	r3, [r4, #12]
 800b4c0:	6126      	str	r6, [r4, #16]
 800b4c2:	6165      	str	r5, [r4, #20]
 800b4c4:	444e      	add	r6, r9
 800b4c6:	eba5 0509 	sub.w	r5, r5, r9
 800b4ca:	6026      	str	r6, [r4, #0]
 800b4cc:	60a5      	str	r5, [r4, #8]
 800b4ce:	463e      	mov	r6, r7
 800b4d0:	42be      	cmp	r6, r7
 800b4d2:	d900      	bls.n	800b4d6 <__ssputs_r+0x72>
 800b4d4:	463e      	mov	r6, r7
 800b4d6:	6820      	ldr	r0, [r4, #0]
 800b4d8:	4632      	mov	r2, r6
 800b4da:	4641      	mov	r1, r8
 800b4dc:	f000 faa8 	bl	800ba30 <memmove>
 800b4e0:	68a3      	ldr	r3, [r4, #8]
 800b4e2:	1b9b      	subs	r3, r3, r6
 800b4e4:	60a3      	str	r3, [r4, #8]
 800b4e6:	6823      	ldr	r3, [r4, #0]
 800b4e8:	4433      	add	r3, r6
 800b4ea:	6023      	str	r3, [r4, #0]
 800b4ec:	2000      	movs	r0, #0
 800b4ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4f2:	462a      	mov	r2, r5
 800b4f4:	f000 fac6 	bl	800ba84 <_realloc_r>
 800b4f8:	4606      	mov	r6, r0
 800b4fa:	2800      	cmp	r0, #0
 800b4fc:	d1e0      	bne.n	800b4c0 <__ssputs_r+0x5c>
 800b4fe:	6921      	ldr	r1, [r4, #16]
 800b500:	4650      	mov	r0, sl
 800b502:	f7ff feb7 	bl	800b274 <_free_r>
 800b506:	230c      	movs	r3, #12
 800b508:	f8ca 3000 	str.w	r3, [sl]
 800b50c:	89a3      	ldrh	r3, [r4, #12]
 800b50e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b512:	81a3      	strh	r3, [r4, #12]
 800b514:	f04f 30ff 	mov.w	r0, #4294967295
 800b518:	e7e9      	b.n	800b4ee <__ssputs_r+0x8a>
	...

0800b51c <_svfiprintf_r>:
 800b51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b520:	4698      	mov	r8, r3
 800b522:	898b      	ldrh	r3, [r1, #12]
 800b524:	061b      	lsls	r3, r3, #24
 800b526:	b09d      	sub	sp, #116	@ 0x74
 800b528:	4607      	mov	r7, r0
 800b52a:	460d      	mov	r5, r1
 800b52c:	4614      	mov	r4, r2
 800b52e:	d510      	bpl.n	800b552 <_svfiprintf_r+0x36>
 800b530:	690b      	ldr	r3, [r1, #16]
 800b532:	b973      	cbnz	r3, 800b552 <_svfiprintf_r+0x36>
 800b534:	2140      	movs	r1, #64	@ 0x40
 800b536:	f7ff ff09 	bl	800b34c <_malloc_r>
 800b53a:	6028      	str	r0, [r5, #0]
 800b53c:	6128      	str	r0, [r5, #16]
 800b53e:	b930      	cbnz	r0, 800b54e <_svfiprintf_r+0x32>
 800b540:	230c      	movs	r3, #12
 800b542:	603b      	str	r3, [r7, #0]
 800b544:	f04f 30ff 	mov.w	r0, #4294967295
 800b548:	b01d      	add	sp, #116	@ 0x74
 800b54a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b54e:	2340      	movs	r3, #64	@ 0x40
 800b550:	616b      	str	r3, [r5, #20]
 800b552:	2300      	movs	r3, #0
 800b554:	9309      	str	r3, [sp, #36]	@ 0x24
 800b556:	2320      	movs	r3, #32
 800b558:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b55c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b560:	2330      	movs	r3, #48	@ 0x30
 800b562:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b700 <_svfiprintf_r+0x1e4>
 800b566:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b56a:	f04f 0901 	mov.w	r9, #1
 800b56e:	4623      	mov	r3, r4
 800b570:	469a      	mov	sl, r3
 800b572:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b576:	b10a      	cbz	r2, 800b57c <_svfiprintf_r+0x60>
 800b578:	2a25      	cmp	r2, #37	@ 0x25
 800b57a:	d1f9      	bne.n	800b570 <_svfiprintf_r+0x54>
 800b57c:	ebba 0b04 	subs.w	fp, sl, r4
 800b580:	d00b      	beq.n	800b59a <_svfiprintf_r+0x7e>
 800b582:	465b      	mov	r3, fp
 800b584:	4622      	mov	r2, r4
 800b586:	4629      	mov	r1, r5
 800b588:	4638      	mov	r0, r7
 800b58a:	f7ff ff6b 	bl	800b464 <__ssputs_r>
 800b58e:	3001      	adds	r0, #1
 800b590:	f000 80a7 	beq.w	800b6e2 <_svfiprintf_r+0x1c6>
 800b594:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b596:	445a      	add	r2, fp
 800b598:	9209      	str	r2, [sp, #36]	@ 0x24
 800b59a:	f89a 3000 	ldrb.w	r3, [sl]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	f000 809f 	beq.w	800b6e2 <_svfiprintf_r+0x1c6>
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	f04f 32ff 	mov.w	r2, #4294967295
 800b5aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5ae:	f10a 0a01 	add.w	sl, sl, #1
 800b5b2:	9304      	str	r3, [sp, #16]
 800b5b4:	9307      	str	r3, [sp, #28]
 800b5b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b5ba:	931a      	str	r3, [sp, #104]	@ 0x68
 800b5bc:	4654      	mov	r4, sl
 800b5be:	2205      	movs	r2, #5
 800b5c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5c4:	484e      	ldr	r0, [pc, #312]	@ (800b700 <_svfiprintf_r+0x1e4>)
 800b5c6:	f7f4 fe03 	bl	80001d0 <memchr>
 800b5ca:	9a04      	ldr	r2, [sp, #16]
 800b5cc:	b9d8      	cbnz	r0, 800b606 <_svfiprintf_r+0xea>
 800b5ce:	06d0      	lsls	r0, r2, #27
 800b5d0:	bf44      	itt	mi
 800b5d2:	2320      	movmi	r3, #32
 800b5d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b5d8:	0711      	lsls	r1, r2, #28
 800b5da:	bf44      	itt	mi
 800b5dc:	232b      	movmi	r3, #43	@ 0x2b
 800b5de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b5e2:	f89a 3000 	ldrb.w	r3, [sl]
 800b5e6:	2b2a      	cmp	r3, #42	@ 0x2a
 800b5e8:	d015      	beq.n	800b616 <_svfiprintf_r+0xfa>
 800b5ea:	9a07      	ldr	r2, [sp, #28]
 800b5ec:	4654      	mov	r4, sl
 800b5ee:	2000      	movs	r0, #0
 800b5f0:	f04f 0c0a 	mov.w	ip, #10
 800b5f4:	4621      	mov	r1, r4
 800b5f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b5fa:	3b30      	subs	r3, #48	@ 0x30
 800b5fc:	2b09      	cmp	r3, #9
 800b5fe:	d94b      	bls.n	800b698 <_svfiprintf_r+0x17c>
 800b600:	b1b0      	cbz	r0, 800b630 <_svfiprintf_r+0x114>
 800b602:	9207      	str	r2, [sp, #28]
 800b604:	e014      	b.n	800b630 <_svfiprintf_r+0x114>
 800b606:	eba0 0308 	sub.w	r3, r0, r8
 800b60a:	fa09 f303 	lsl.w	r3, r9, r3
 800b60e:	4313      	orrs	r3, r2
 800b610:	9304      	str	r3, [sp, #16]
 800b612:	46a2      	mov	sl, r4
 800b614:	e7d2      	b.n	800b5bc <_svfiprintf_r+0xa0>
 800b616:	9b03      	ldr	r3, [sp, #12]
 800b618:	1d19      	adds	r1, r3, #4
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	9103      	str	r1, [sp, #12]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	bfbb      	ittet	lt
 800b622:	425b      	neglt	r3, r3
 800b624:	f042 0202 	orrlt.w	r2, r2, #2
 800b628:	9307      	strge	r3, [sp, #28]
 800b62a:	9307      	strlt	r3, [sp, #28]
 800b62c:	bfb8      	it	lt
 800b62e:	9204      	strlt	r2, [sp, #16]
 800b630:	7823      	ldrb	r3, [r4, #0]
 800b632:	2b2e      	cmp	r3, #46	@ 0x2e
 800b634:	d10a      	bne.n	800b64c <_svfiprintf_r+0x130>
 800b636:	7863      	ldrb	r3, [r4, #1]
 800b638:	2b2a      	cmp	r3, #42	@ 0x2a
 800b63a:	d132      	bne.n	800b6a2 <_svfiprintf_r+0x186>
 800b63c:	9b03      	ldr	r3, [sp, #12]
 800b63e:	1d1a      	adds	r2, r3, #4
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	9203      	str	r2, [sp, #12]
 800b644:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b648:	3402      	adds	r4, #2
 800b64a:	9305      	str	r3, [sp, #20]
 800b64c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b710 <_svfiprintf_r+0x1f4>
 800b650:	7821      	ldrb	r1, [r4, #0]
 800b652:	2203      	movs	r2, #3
 800b654:	4650      	mov	r0, sl
 800b656:	f7f4 fdbb 	bl	80001d0 <memchr>
 800b65a:	b138      	cbz	r0, 800b66c <_svfiprintf_r+0x150>
 800b65c:	9b04      	ldr	r3, [sp, #16]
 800b65e:	eba0 000a 	sub.w	r0, r0, sl
 800b662:	2240      	movs	r2, #64	@ 0x40
 800b664:	4082      	lsls	r2, r0
 800b666:	4313      	orrs	r3, r2
 800b668:	3401      	adds	r4, #1
 800b66a:	9304      	str	r3, [sp, #16]
 800b66c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b670:	4824      	ldr	r0, [pc, #144]	@ (800b704 <_svfiprintf_r+0x1e8>)
 800b672:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b676:	2206      	movs	r2, #6
 800b678:	f7f4 fdaa 	bl	80001d0 <memchr>
 800b67c:	2800      	cmp	r0, #0
 800b67e:	d036      	beq.n	800b6ee <_svfiprintf_r+0x1d2>
 800b680:	4b21      	ldr	r3, [pc, #132]	@ (800b708 <_svfiprintf_r+0x1ec>)
 800b682:	bb1b      	cbnz	r3, 800b6cc <_svfiprintf_r+0x1b0>
 800b684:	9b03      	ldr	r3, [sp, #12]
 800b686:	3307      	adds	r3, #7
 800b688:	f023 0307 	bic.w	r3, r3, #7
 800b68c:	3308      	adds	r3, #8
 800b68e:	9303      	str	r3, [sp, #12]
 800b690:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b692:	4433      	add	r3, r6
 800b694:	9309      	str	r3, [sp, #36]	@ 0x24
 800b696:	e76a      	b.n	800b56e <_svfiprintf_r+0x52>
 800b698:	fb0c 3202 	mla	r2, ip, r2, r3
 800b69c:	460c      	mov	r4, r1
 800b69e:	2001      	movs	r0, #1
 800b6a0:	e7a8      	b.n	800b5f4 <_svfiprintf_r+0xd8>
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	3401      	adds	r4, #1
 800b6a6:	9305      	str	r3, [sp, #20]
 800b6a8:	4619      	mov	r1, r3
 800b6aa:	f04f 0c0a 	mov.w	ip, #10
 800b6ae:	4620      	mov	r0, r4
 800b6b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6b4:	3a30      	subs	r2, #48	@ 0x30
 800b6b6:	2a09      	cmp	r2, #9
 800b6b8:	d903      	bls.n	800b6c2 <_svfiprintf_r+0x1a6>
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d0c6      	beq.n	800b64c <_svfiprintf_r+0x130>
 800b6be:	9105      	str	r1, [sp, #20]
 800b6c0:	e7c4      	b.n	800b64c <_svfiprintf_r+0x130>
 800b6c2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6c6:	4604      	mov	r4, r0
 800b6c8:	2301      	movs	r3, #1
 800b6ca:	e7f0      	b.n	800b6ae <_svfiprintf_r+0x192>
 800b6cc:	ab03      	add	r3, sp, #12
 800b6ce:	9300      	str	r3, [sp, #0]
 800b6d0:	462a      	mov	r2, r5
 800b6d2:	4b0e      	ldr	r3, [pc, #56]	@ (800b70c <_svfiprintf_r+0x1f0>)
 800b6d4:	a904      	add	r1, sp, #16
 800b6d6:	4638      	mov	r0, r7
 800b6d8:	f3af 8000 	nop.w
 800b6dc:	1c42      	adds	r2, r0, #1
 800b6de:	4606      	mov	r6, r0
 800b6e0:	d1d6      	bne.n	800b690 <_svfiprintf_r+0x174>
 800b6e2:	89ab      	ldrh	r3, [r5, #12]
 800b6e4:	065b      	lsls	r3, r3, #25
 800b6e6:	f53f af2d 	bmi.w	800b544 <_svfiprintf_r+0x28>
 800b6ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b6ec:	e72c      	b.n	800b548 <_svfiprintf_r+0x2c>
 800b6ee:	ab03      	add	r3, sp, #12
 800b6f0:	9300      	str	r3, [sp, #0]
 800b6f2:	462a      	mov	r2, r5
 800b6f4:	4b05      	ldr	r3, [pc, #20]	@ (800b70c <_svfiprintf_r+0x1f0>)
 800b6f6:	a904      	add	r1, sp, #16
 800b6f8:	4638      	mov	r0, r7
 800b6fa:	f000 f879 	bl	800b7f0 <_printf_i>
 800b6fe:	e7ed      	b.n	800b6dc <_svfiprintf_r+0x1c0>
 800b700:	0800bb9c 	.word	0x0800bb9c
 800b704:	0800bba6 	.word	0x0800bba6
 800b708:	00000000 	.word	0x00000000
 800b70c:	0800b465 	.word	0x0800b465
 800b710:	0800bba2 	.word	0x0800bba2

0800b714 <_printf_common>:
 800b714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b718:	4616      	mov	r6, r2
 800b71a:	4698      	mov	r8, r3
 800b71c:	688a      	ldr	r2, [r1, #8]
 800b71e:	690b      	ldr	r3, [r1, #16]
 800b720:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b724:	4293      	cmp	r3, r2
 800b726:	bfb8      	it	lt
 800b728:	4613      	movlt	r3, r2
 800b72a:	6033      	str	r3, [r6, #0]
 800b72c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b730:	4607      	mov	r7, r0
 800b732:	460c      	mov	r4, r1
 800b734:	b10a      	cbz	r2, 800b73a <_printf_common+0x26>
 800b736:	3301      	adds	r3, #1
 800b738:	6033      	str	r3, [r6, #0]
 800b73a:	6823      	ldr	r3, [r4, #0]
 800b73c:	0699      	lsls	r1, r3, #26
 800b73e:	bf42      	ittt	mi
 800b740:	6833      	ldrmi	r3, [r6, #0]
 800b742:	3302      	addmi	r3, #2
 800b744:	6033      	strmi	r3, [r6, #0]
 800b746:	6825      	ldr	r5, [r4, #0]
 800b748:	f015 0506 	ands.w	r5, r5, #6
 800b74c:	d106      	bne.n	800b75c <_printf_common+0x48>
 800b74e:	f104 0a19 	add.w	sl, r4, #25
 800b752:	68e3      	ldr	r3, [r4, #12]
 800b754:	6832      	ldr	r2, [r6, #0]
 800b756:	1a9b      	subs	r3, r3, r2
 800b758:	42ab      	cmp	r3, r5
 800b75a:	dc26      	bgt.n	800b7aa <_printf_common+0x96>
 800b75c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b760:	6822      	ldr	r2, [r4, #0]
 800b762:	3b00      	subs	r3, #0
 800b764:	bf18      	it	ne
 800b766:	2301      	movne	r3, #1
 800b768:	0692      	lsls	r2, r2, #26
 800b76a:	d42b      	bmi.n	800b7c4 <_printf_common+0xb0>
 800b76c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b770:	4641      	mov	r1, r8
 800b772:	4638      	mov	r0, r7
 800b774:	47c8      	blx	r9
 800b776:	3001      	adds	r0, #1
 800b778:	d01e      	beq.n	800b7b8 <_printf_common+0xa4>
 800b77a:	6823      	ldr	r3, [r4, #0]
 800b77c:	6922      	ldr	r2, [r4, #16]
 800b77e:	f003 0306 	and.w	r3, r3, #6
 800b782:	2b04      	cmp	r3, #4
 800b784:	bf02      	ittt	eq
 800b786:	68e5      	ldreq	r5, [r4, #12]
 800b788:	6833      	ldreq	r3, [r6, #0]
 800b78a:	1aed      	subeq	r5, r5, r3
 800b78c:	68a3      	ldr	r3, [r4, #8]
 800b78e:	bf0c      	ite	eq
 800b790:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b794:	2500      	movne	r5, #0
 800b796:	4293      	cmp	r3, r2
 800b798:	bfc4      	itt	gt
 800b79a:	1a9b      	subgt	r3, r3, r2
 800b79c:	18ed      	addgt	r5, r5, r3
 800b79e:	2600      	movs	r6, #0
 800b7a0:	341a      	adds	r4, #26
 800b7a2:	42b5      	cmp	r5, r6
 800b7a4:	d11a      	bne.n	800b7dc <_printf_common+0xc8>
 800b7a6:	2000      	movs	r0, #0
 800b7a8:	e008      	b.n	800b7bc <_printf_common+0xa8>
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	4652      	mov	r2, sl
 800b7ae:	4641      	mov	r1, r8
 800b7b0:	4638      	mov	r0, r7
 800b7b2:	47c8      	blx	r9
 800b7b4:	3001      	adds	r0, #1
 800b7b6:	d103      	bne.n	800b7c0 <_printf_common+0xac>
 800b7b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b7bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7c0:	3501      	adds	r5, #1
 800b7c2:	e7c6      	b.n	800b752 <_printf_common+0x3e>
 800b7c4:	18e1      	adds	r1, r4, r3
 800b7c6:	1c5a      	adds	r2, r3, #1
 800b7c8:	2030      	movs	r0, #48	@ 0x30
 800b7ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b7ce:	4422      	add	r2, r4
 800b7d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b7d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b7d8:	3302      	adds	r3, #2
 800b7da:	e7c7      	b.n	800b76c <_printf_common+0x58>
 800b7dc:	2301      	movs	r3, #1
 800b7de:	4622      	mov	r2, r4
 800b7e0:	4641      	mov	r1, r8
 800b7e2:	4638      	mov	r0, r7
 800b7e4:	47c8      	blx	r9
 800b7e6:	3001      	adds	r0, #1
 800b7e8:	d0e6      	beq.n	800b7b8 <_printf_common+0xa4>
 800b7ea:	3601      	adds	r6, #1
 800b7ec:	e7d9      	b.n	800b7a2 <_printf_common+0x8e>
	...

0800b7f0 <_printf_i>:
 800b7f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b7f4:	7e0f      	ldrb	r7, [r1, #24]
 800b7f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b7f8:	2f78      	cmp	r7, #120	@ 0x78
 800b7fa:	4691      	mov	r9, r2
 800b7fc:	4680      	mov	r8, r0
 800b7fe:	460c      	mov	r4, r1
 800b800:	469a      	mov	sl, r3
 800b802:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b806:	d807      	bhi.n	800b818 <_printf_i+0x28>
 800b808:	2f62      	cmp	r7, #98	@ 0x62
 800b80a:	d80a      	bhi.n	800b822 <_printf_i+0x32>
 800b80c:	2f00      	cmp	r7, #0
 800b80e:	f000 80d2 	beq.w	800b9b6 <_printf_i+0x1c6>
 800b812:	2f58      	cmp	r7, #88	@ 0x58
 800b814:	f000 80b9 	beq.w	800b98a <_printf_i+0x19a>
 800b818:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b81c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b820:	e03a      	b.n	800b898 <_printf_i+0xa8>
 800b822:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b826:	2b15      	cmp	r3, #21
 800b828:	d8f6      	bhi.n	800b818 <_printf_i+0x28>
 800b82a:	a101      	add	r1, pc, #4	@ (adr r1, 800b830 <_printf_i+0x40>)
 800b82c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b830:	0800b889 	.word	0x0800b889
 800b834:	0800b89d 	.word	0x0800b89d
 800b838:	0800b819 	.word	0x0800b819
 800b83c:	0800b819 	.word	0x0800b819
 800b840:	0800b819 	.word	0x0800b819
 800b844:	0800b819 	.word	0x0800b819
 800b848:	0800b89d 	.word	0x0800b89d
 800b84c:	0800b819 	.word	0x0800b819
 800b850:	0800b819 	.word	0x0800b819
 800b854:	0800b819 	.word	0x0800b819
 800b858:	0800b819 	.word	0x0800b819
 800b85c:	0800b99d 	.word	0x0800b99d
 800b860:	0800b8c7 	.word	0x0800b8c7
 800b864:	0800b957 	.word	0x0800b957
 800b868:	0800b819 	.word	0x0800b819
 800b86c:	0800b819 	.word	0x0800b819
 800b870:	0800b9bf 	.word	0x0800b9bf
 800b874:	0800b819 	.word	0x0800b819
 800b878:	0800b8c7 	.word	0x0800b8c7
 800b87c:	0800b819 	.word	0x0800b819
 800b880:	0800b819 	.word	0x0800b819
 800b884:	0800b95f 	.word	0x0800b95f
 800b888:	6833      	ldr	r3, [r6, #0]
 800b88a:	1d1a      	adds	r2, r3, #4
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	6032      	str	r2, [r6, #0]
 800b890:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b894:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b898:	2301      	movs	r3, #1
 800b89a:	e09d      	b.n	800b9d8 <_printf_i+0x1e8>
 800b89c:	6833      	ldr	r3, [r6, #0]
 800b89e:	6820      	ldr	r0, [r4, #0]
 800b8a0:	1d19      	adds	r1, r3, #4
 800b8a2:	6031      	str	r1, [r6, #0]
 800b8a4:	0606      	lsls	r6, r0, #24
 800b8a6:	d501      	bpl.n	800b8ac <_printf_i+0xbc>
 800b8a8:	681d      	ldr	r5, [r3, #0]
 800b8aa:	e003      	b.n	800b8b4 <_printf_i+0xc4>
 800b8ac:	0645      	lsls	r5, r0, #25
 800b8ae:	d5fb      	bpl.n	800b8a8 <_printf_i+0xb8>
 800b8b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b8b4:	2d00      	cmp	r5, #0
 800b8b6:	da03      	bge.n	800b8c0 <_printf_i+0xd0>
 800b8b8:	232d      	movs	r3, #45	@ 0x2d
 800b8ba:	426d      	negs	r5, r5
 800b8bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b8c0:	4859      	ldr	r0, [pc, #356]	@ (800ba28 <_printf_i+0x238>)
 800b8c2:	230a      	movs	r3, #10
 800b8c4:	e011      	b.n	800b8ea <_printf_i+0xfa>
 800b8c6:	6821      	ldr	r1, [r4, #0]
 800b8c8:	6833      	ldr	r3, [r6, #0]
 800b8ca:	0608      	lsls	r0, r1, #24
 800b8cc:	f853 5b04 	ldr.w	r5, [r3], #4
 800b8d0:	d402      	bmi.n	800b8d8 <_printf_i+0xe8>
 800b8d2:	0649      	lsls	r1, r1, #25
 800b8d4:	bf48      	it	mi
 800b8d6:	b2ad      	uxthmi	r5, r5
 800b8d8:	2f6f      	cmp	r7, #111	@ 0x6f
 800b8da:	4853      	ldr	r0, [pc, #332]	@ (800ba28 <_printf_i+0x238>)
 800b8dc:	6033      	str	r3, [r6, #0]
 800b8de:	bf14      	ite	ne
 800b8e0:	230a      	movne	r3, #10
 800b8e2:	2308      	moveq	r3, #8
 800b8e4:	2100      	movs	r1, #0
 800b8e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b8ea:	6866      	ldr	r6, [r4, #4]
 800b8ec:	60a6      	str	r6, [r4, #8]
 800b8ee:	2e00      	cmp	r6, #0
 800b8f0:	bfa2      	ittt	ge
 800b8f2:	6821      	ldrge	r1, [r4, #0]
 800b8f4:	f021 0104 	bicge.w	r1, r1, #4
 800b8f8:	6021      	strge	r1, [r4, #0]
 800b8fa:	b90d      	cbnz	r5, 800b900 <_printf_i+0x110>
 800b8fc:	2e00      	cmp	r6, #0
 800b8fe:	d04b      	beq.n	800b998 <_printf_i+0x1a8>
 800b900:	4616      	mov	r6, r2
 800b902:	fbb5 f1f3 	udiv	r1, r5, r3
 800b906:	fb03 5711 	mls	r7, r3, r1, r5
 800b90a:	5dc7      	ldrb	r7, [r0, r7]
 800b90c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b910:	462f      	mov	r7, r5
 800b912:	42bb      	cmp	r3, r7
 800b914:	460d      	mov	r5, r1
 800b916:	d9f4      	bls.n	800b902 <_printf_i+0x112>
 800b918:	2b08      	cmp	r3, #8
 800b91a:	d10b      	bne.n	800b934 <_printf_i+0x144>
 800b91c:	6823      	ldr	r3, [r4, #0]
 800b91e:	07df      	lsls	r7, r3, #31
 800b920:	d508      	bpl.n	800b934 <_printf_i+0x144>
 800b922:	6923      	ldr	r3, [r4, #16]
 800b924:	6861      	ldr	r1, [r4, #4]
 800b926:	4299      	cmp	r1, r3
 800b928:	bfde      	ittt	le
 800b92a:	2330      	movle	r3, #48	@ 0x30
 800b92c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b930:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b934:	1b92      	subs	r2, r2, r6
 800b936:	6122      	str	r2, [r4, #16]
 800b938:	f8cd a000 	str.w	sl, [sp]
 800b93c:	464b      	mov	r3, r9
 800b93e:	aa03      	add	r2, sp, #12
 800b940:	4621      	mov	r1, r4
 800b942:	4640      	mov	r0, r8
 800b944:	f7ff fee6 	bl	800b714 <_printf_common>
 800b948:	3001      	adds	r0, #1
 800b94a:	d14a      	bne.n	800b9e2 <_printf_i+0x1f2>
 800b94c:	f04f 30ff 	mov.w	r0, #4294967295
 800b950:	b004      	add	sp, #16
 800b952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b956:	6823      	ldr	r3, [r4, #0]
 800b958:	f043 0320 	orr.w	r3, r3, #32
 800b95c:	6023      	str	r3, [r4, #0]
 800b95e:	4833      	ldr	r0, [pc, #204]	@ (800ba2c <_printf_i+0x23c>)
 800b960:	2778      	movs	r7, #120	@ 0x78
 800b962:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b966:	6823      	ldr	r3, [r4, #0]
 800b968:	6831      	ldr	r1, [r6, #0]
 800b96a:	061f      	lsls	r7, r3, #24
 800b96c:	f851 5b04 	ldr.w	r5, [r1], #4
 800b970:	d402      	bmi.n	800b978 <_printf_i+0x188>
 800b972:	065f      	lsls	r7, r3, #25
 800b974:	bf48      	it	mi
 800b976:	b2ad      	uxthmi	r5, r5
 800b978:	6031      	str	r1, [r6, #0]
 800b97a:	07d9      	lsls	r1, r3, #31
 800b97c:	bf44      	itt	mi
 800b97e:	f043 0320 	orrmi.w	r3, r3, #32
 800b982:	6023      	strmi	r3, [r4, #0]
 800b984:	b11d      	cbz	r5, 800b98e <_printf_i+0x19e>
 800b986:	2310      	movs	r3, #16
 800b988:	e7ac      	b.n	800b8e4 <_printf_i+0xf4>
 800b98a:	4827      	ldr	r0, [pc, #156]	@ (800ba28 <_printf_i+0x238>)
 800b98c:	e7e9      	b.n	800b962 <_printf_i+0x172>
 800b98e:	6823      	ldr	r3, [r4, #0]
 800b990:	f023 0320 	bic.w	r3, r3, #32
 800b994:	6023      	str	r3, [r4, #0]
 800b996:	e7f6      	b.n	800b986 <_printf_i+0x196>
 800b998:	4616      	mov	r6, r2
 800b99a:	e7bd      	b.n	800b918 <_printf_i+0x128>
 800b99c:	6833      	ldr	r3, [r6, #0]
 800b99e:	6825      	ldr	r5, [r4, #0]
 800b9a0:	6961      	ldr	r1, [r4, #20]
 800b9a2:	1d18      	adds	r0, r3, #4
 800b9a4:	6030      	str	r0, [r6, #0]
 800b9a6:	062e      	lsls	r6, r5, #24
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	d501      	bpl.n	800b9b0 <_printf_i+0x1c0>
 800b9ac:	6019      	str	r1, [r3, #0]
 800b9ae:	e002      	b.n	800b9b6 <_printf_i+0x1c6>
 800b9b0:	0668      	lsls	r0, r5, #25
 800b9b2:	d5fb      	bpl.n	800b9ac <_printf_i+0x1bc>
 800b9b4:	8019      	strh	r1, [r3, #0]
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	6123      	str	r3, [r4, #16]
 800b9ba:	4616      	mov	r6, r2
 800b9bc:	e7bc      	b.n	800b938 <_printf_i+0x148>
 800b9be:	6833      	ldr	r3, [r6, #0]
 800b9c0:	1d1a      	adds	r2, r3, #4
 800b9c2:	6032      	str	r2, [r6, #0]
 800b9c4:	681e      	ldr	r6, [r3, #0]
 800b9c6:	6862      	ldr	r2, [r4, #4]
 800b9c8:	2100      	movs	r1, #0
 800b9ca:	4630      	mov	r0, r6
 800b9cc:	f7f4 fc00 	bl	80001d0 <memchr>
 800b9d0:	b108      	cbz	r0, 800b9d6 <_printf_i+0x1e6>
 800b9d2:	1b80      	subs	r0, r0, r6
 800b9d4:	6060      	str	r0, [r4, #4]
 800b9d6:	6863      	ldr	r3, [r4, #4]
 800b9d8:	6123      	str	r3, [r4, #16]
 800b9da:	2300      	movs	r3, #0
 800b9dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b9e0:	e7aa      	b.n	800b938 <_printf_i+0x148>
 800b9e2:	6923      	ldr	r3, [r4, #16]
 800b9e4:	4632      	mov	r2, r6
 800b9e6:	4649      	mov	r1, r9
 800b9e8:	4640      	mov	r0, r8
 800b9ea:	47d0      	blx	sl
 800b9ec:	3001      	adds	r0, #1
 800b9ee:	d0ad      	beq.n	800b94c <_printf_i+0x15c>
 800b9f0:	6823      	ldr	r3, [r4, #0]
 800b9f2:	079b      	lsls	r3, r3, #30
 800b9f4:	d413      	bmi.n	800ba1e <_printf_i+0x22e>
 800b9f6:	68e0      	ldr	r0, [r4, #12]
 800b9f8:	9b03      	ldr	r3, [sp, #12]
 800b9fa:	4298      	cmp	r0, r3
 800b9fc:	bfb8      	it	lt
 800b9fe:	4618      	movlt	r0, r3
 800ba00:	e7a6      	b.n	800b950 <_printf_i+0x160>
 800ba02:	2301      	movs	r3, #1
 800ba04:	4632      	mov	r2, r6
 800ba06:	4649      	mov	r1, r9
 800ba08:	4640      	mov	r0, r8
 800ba0a:	47d0      	blx	sl
 800ba0c:	3001      	adds	r0, #1
 800ba0e:	d09d      	beq.n	800b94c <_printf_i+0x15c>
 800ba10:	3501      	adds	r5, #1
 800ba12:	68e3      	ldr	r3, [r4, #12]
 800ba14:	9903      	ldr	r1, [sp, #12]
 800ba16:	1a5b      	subs	r3, r3, r1
 800ba18:	42ab      	cmp	r3, r5
 800ba1a:	dcf2      	bgt.n	800ba02 <_printf_i+0x212>
 800ba1c:	e7eb      	b.n	800b9f6 <_printf_i+0x206>
 800ba1e:	2500      	movs	r5, #0
 800ba20:	f104 0619 	add.w	r6, r4, #25
 800ba24:	e7f5      	b.n	800ba12 <_printf_i+0x222>
 800ba26:	bf00      	nop
 800ba28:	0800bbad 	.word	0x0800bbad
 800ba2c:	0800bbbe 	.word	0x0800bbbe

0800ba30 <memmove>:
 800ba30:	4288      	cmp	r0, r1
 800ba32:	b510      	push	{r4, lr}
 800ba34:	eb01 0402 	add.w	r4, r1, r2
 800ba38:	d902      	bls.n	800ba40 <memmove+0x10>
 800ba3a:	4284      	cmp	r4, r0
 800ba3c:	4623      	mov	r3, r4
 800ba3e:	d807      	bhi.n	800ba50 <memmove+0x20>
 800ba40:	1e43      	subs	r3, r0, #1
 800ba42:	42a1      	cmp	r1, r4
 800ba44:	d008      	beq.n	800ba58 <memmove+0x28>
 800ba46:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ba4e:	e7f8      	b.n	800ba42 <memmove+0x12>
 800ba50:	4402      	add	r2, r0
 800ba52:	4601      	mov	r1, r0
 800ba54:	428a      	cmp	r2, r1
 800ba56:	d100      	bne.n	800ba5a <memmove+0x2a>
 800ba58:	bd10      	pop	{r4, pc}
 800ba5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ba5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ba62:	e7f7      	b.n	800ba54 <memmove+0x24>

0800ba64 <_sbrk_r>:
 800ba64:	b538      	push	{r3, r4, r5, lr}
 800ba66:	4d06      	ldr	r5, [pc, #24]	@ (800ba80 <_sbrk_r+0x1c>)
 800ba68:	2300      	movs	r3, #0
 800ba6a:	4604      	mov	r4, r0
 800ba6c:	4608      	mov	r0, r1
 800ba6e:	602b      	str	r3, [r5, #0]
 800ba70:	f7f5 f840 	bl	8000af4 <_sbrk>
 800ba74:	1c43      	adds	r3, r0, #1
 800ba76:	d102      	bne.n	800ba7e <_sbrk_r+0x1a>
 800ba78:	682b      	ldr	r3, [r5, #0]
 800ba7a:	b103      	cbz	r3, 800ba7e <_sbrk_r+0x1a>
 800ba7c:	6023      	str	r3, [r4, #0]
 800ba7e:	bd38      	pop	{r3, r4, r5, pc}
 800ba80:	20002474 	.word	0x20002474

0800ba84 <_realloc_r>:
 800ba84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba88:	4680      	mov	r8, r0
 800ba8a:	4615      	mov	r5, r2
 800ba8c:	460c      	mov	r4, r1
 800ba8e:	b921      	cbnz	r1, 800ba9a <_realloc_r+0x16>
 800ba90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba94:	4611      	mov	r1, r2
 800ba96:	f7ff bc59 	b.w	800b34c <_malloc_r>
 800ba9a:	b92a      	cbnz	r2, 800baa8 <_realloc_r+0x24>
 800ba9c:	f7ff fbea 	bl	800b274 <_free_r>
 800baa0:	2400      	movs	r4, #0
 800baa2:	4620      	mov	r0, r4
 800baa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800baa8:	f000 f81a 	bl	800bae0 <_malloc_usable_size_r>
 800baac:	4285      	cmp	r5, r0
 800baae:	4606      	mov	r6, r0
 800bab0:	d802      	bhi.n	800bab8 <_realloc_r+0x34>
 800bab2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bab6:	d8f4      	bhi.n	800baa2 <_realloc_r+0x1e>
 800bab8:	4629      	mov	r1, r5
 800baba:	4640      	mov	r0, r8
 800babc:	f7ff fc46 	bl	800b34c <_malloc_r>
 800bac0:	4607      	mov	r7, r0
 800bac2:	2800      	cmp	r0, #0
 800bac4:	d0ec      	beq.n	800baa0 <_realloc_r+0x1c>
 800bac6:	42b5      	cmp	r5, r6
 800bac8:	462a      	mov	r2, r5
 800baca:	4621      	mov	r1, r4
 800bacc:	bf28      	it	cs
 800bace:	4632      	movcs	r2, r6
 800bad0:	f7ff fbc2 	bl	800b258 <memcpy>
 800bad4:	4621      	mov	r1, r4
 800bad6:	4640      	mov	r0, r8
 800bad8:	f7ff fbcc 	bl	800b274 <_free_r>
 800badc:	463c      	mov	r4, r7
 800bade:	e7e0      	b.n	800baa2 <_realloc_r+0x1e>

0800bae0 <_malloc_usable_size_r>:
 800bae0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bae4:	1f18      	subs	r0, r3, #4
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	bfbc      	itt	lt
 800baea:	580b      	ldrlt	r3, [r1, r0]
 800baec:	18c0      	addlt	r0, r0, r3
 800baee:	4770      	bx	lr

0800baf0 <_init>:
 800baf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baf2:	bf00      	nop
 800baf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800baf6:	bc08      	pop	{r3}
 800baf8:	469e      	mov	lr, r3
 800bafa:	4770      	bx	lr

0800bafc <_fini>:
 800bafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bafe:	bf00      	nop
 800bb00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb02:	bc08      	pop	{r3}
 800bb04:	469e      	mov	lr, r3
 800bb06:	4770      	bx	lr
