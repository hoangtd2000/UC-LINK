
start_usb_composite.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c6f4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800c884  0800c884  0000d884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c934  0800c934  0000e2f8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c934  0800c934  0000d934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c93c  0800c93c  0000e2f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c93c  0800c93c  0000d93c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c940  0800c940  0000d940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002f8  20000000  0800c944  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e2f8  2**0
                  CONTENTS
 10 .bss          000024b8  200002f8  200002f8  0000e2f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200027b0  200027b0  0000e2f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e2f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020b28  00000000  00000000  0000e328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000050d1  00000000  00000000  0002ee50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a38  00000000  00000000  00033f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001433  00000000  00000000  00035960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026c45  00000000  00000000  00036d93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024c19  00000000  00000000  0005d9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5b04  00000000  00000000  000825f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001580f5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007254  00000000  00000000  00158138  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  0015f38c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002f8 	.word	0x200002f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c86c 	.word	0x0800c86c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002fc 	.word	0x200002fc
 80001cc:	0800c86c 	.word	0x0800c86c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80005a0:	4b17      	ldr	r3, [pc, #92]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005a2:	4a18      	ldr	r2, [pc, #96]	@ (8000604 <MX_CAN1_Init+0x68>)
 80005a4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80005a6:	4b16      	ldr	r3, [pc, #88]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005a8:	2206      	movs	r2, #6
 80005aa:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80005ac:	4b14      	ldr	r3, [pc, #80]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005b2:	4b13      	ldr	r3, [pc, #76]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80005b8:	4b11      	ldr	r3, [pc, #68]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005ba:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 80005be:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80005c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005c2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80005c6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80005c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80005ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80005d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80005da:	4b09      	ldr	r3, [pc, #36]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005dc:	2200      	movs	r2, #0
 80005de:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005e0:	4b07      	ldr	r3, [pc, #28]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80005e6:	4b06      	ldr	r3, [pc, #24]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005ec:	4804      	ldr	r0, [pc, #16]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005ee:	f001 f845 	bl	800167c <HAL_CAN_Init>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80005f8:	f000 fb1a 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000314 	.word	0x20000314
 8000604:	40006400 	.word	0x40006400

08000608 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b08a      	sub	sp, #40	@ 0x28
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000610:	f107 0314 	add.w	r3, r7, #20
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a21      	ldr	r2, [pc, #132]	@ (80006ac <HAL_CAN_MspInit+0xa4>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d13b      	bne.n	80006a2 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800062a:	2300      	movs	r3, #0
 800062c:	613b      	str	r3, [r7, #16]
 800062e:	4b20      	ldr	r3, [pc, #128]	@ (80006b0 <HAL_CAN_MspInit+0xa8>)
 8000630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000632:	4a1f      	ldr	r2, [pc, #124]	@ (80006b0 <HAL_CAN_MspInit+0xa8>)
 8000634:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000638:	6413      	str	r3, [r2, #64]	@ 0x40
 800063a:	4b1d      	ldr	r3, [pc, #116]	@ (80006b0 <HAL_CAN_MspInit+0xa8>)
 800063c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800063e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000642:	613b      	str	r3, [r7, #16]
 8000644:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	60fb      	str	r3, [r7, #12]
 800064a:	4b19      	ldr	r3, [pc, #100]	@ (80006b0 <HAL_CAN_MspInit+0xa8>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064e:	4a18      	ldr	r2, [pc, #96]	@ (80006b0 <HAL_CAN_MspInit+0xa8>)
 8000650:	f043 0308 	orr.w	r3, r3, #8
 8000654:	6313      	str	r3, [r2, #48]	@ 0x30
 8000656:	4b16      	ldr	r3, [pc, #88]	@ (80006b0 <HAL_CAN_MspInit+0xa8>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	f003 0308 	and.w	r3, r3, #8
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000662:	2303      	movs	r3, #3
 8000664:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000666:	2302      	movs	r3, #2
 8000668:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800066e:	2303      	movs	r3, #3
 8000670:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000672:	2309      	movs	r3, #9
 8000674:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000676:	f107 0314 	add.w	r3, r7, #20
 800067a:	4619      	mov	r1, r3
 800067c:	480d      	ldr	r0, [pc, #52]	@ (80006b4 <HAL_CAN_MspInit+0xac>)
 800067e:	f002 fb81 	bl	8002d84 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000682:	2200      	movs	r2, #0
 8000684:	2100      	movs	r1, #0
 8000686:	2014      	movs	r0, #20
 8000688:	f001 ff5d 	bl	8002546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800068c:	2014      	movs	r0, #20
 800068e:	f001 ff76 	bl	800257e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000692:	2200      	movs	r2, #0
 8000694:	2100      	movs	r1, #0
 8000696:	2015      	movs	r0, #21
 8000698:	f001 ff55 	bl	8002546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800069c:	2015      	movs	r0, #21
 800069e:	f001 ff6e 	bl	800257e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80006a2:	bf00      	nop
 80006a4:	3728      	adds	r7, #40	@ 0x28
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40006400 	.word	0x40006400
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40020c00 	.word	0x40020c00

080006b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	607b      	str	r3, [r7, #4]
 80006c2:	4b10      	ldr	r3, [pc, #64]	@ (8000704 <MX_DMA_Init+0x4c>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c6:	4a0f      	ldr	r2, [pc, #60]	@ (8000704 <MX_DMA_Init+0x4c>)
 80006c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80006cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000704 <MX_DMA_Init+0x4c>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80006da:	2200      	movs	r2, #0
 80006dc:	2100      	movs	r1, #0
 80006de:	200b      	movs	r0, #11
 80006e0:	f001 ff31 	bl	8002546 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80006e4:	200b      	movs	r0, #11
 80006e6:	f001 ff4a 	bl	800257e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2100      	movs	r1, #0
 80006ee:	202f      	movs	r0, #47	@ 0x2f
 80006f0:	f001 ff29 	bl	8002546 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80006f4:	202f      	movs	r0, #47	@ 0x2f
 80006f6:	f001 ff42 	bl	800257e <HAL_NVIC_EnableIRQ>

}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40023800 	.word	0x40023800

08000708 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b08a      	sub	sp, #40	@ 0x28
 800070c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070e:	f107 0314 	add.w	r3, r7, #20
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]
 800071c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	613b      	str	r3, [r7, #16]
 8000722:	4b2d      	ldr	r3, [pc, #180]	@ (80007d8 <MX_GPIO_Init+0xd0>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	4a2c      	ldr	r2, [pc, #176]	@ (80007d8 <MX_GPIO_Init+0xd0>)
 8000728:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800072c:	6313      	str	r3, [r2, #48]	@ 0x30
 800072e:	4b2a      	ldr	r3, [pc, #168]	@ (80007d8 <MX_GPIO_Init+0xd0>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000736:	613b      	str	r3, [r7, #16]
 8000738:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	60fb      	str	r3, [r7, #12]
 800073e:	4b26      	ldr	r3, [pc, #152]	@ (80007d8 <MX_GPIO_Init+0xd0>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	4a25      	ldr	r2, [pc, #148]	@ (80007d8 <MX_GPIO_Init+0xd0>)
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	6313      	str	r3, [r2, #48]	@ 0x30
 800074a:	4b23      	ldr	r3, [pc, #140]	@ (80007d8 <MX_GPIO_Init+0xd0>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	60bb      	str	r3, [r7, #8]
 800075a:	4b1f      	ldr	r3, [pc, #124]	@ (80007d8 <MX_GPIO_Init+0xd0>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	4a1e      	ldr	r2, [pc, #120]	@ (80007d8 <MX_GPIO_Init+0xd0>)
 8000760:	f043 0304 	orr.w	r3, r3, #4
 8000764:	6313      	str	r3, [r2, #48]	@ 0x30
 8000766:	4b1c      	ldr	r3, [pc, #112]	@ (80007d8 <MX_GPIO_Init+0xd0>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	f003 0304 	and.w	r3, r3, #4
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	4b18      	ldr	r3, [pc, #96]	@ (80007d8 <MX_GPIO_Init+0xd0>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	4a17      	ldr	r2, [pc, #92]	@ (80007d8 <MX_GPIO_Init+0xd0>)
 800077c:	f043 0308 	orr.w	r3, r3, #8
 8000780:	6313      	str	r3, [r2, #48]	@ 0x30
 8000782:	4b15      	ldr	r3, [pc, #84]	@ (80007d8 <MX_GPIO_Init+0xd0>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	f003 0308 	and.w	r3, r3, #8
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	603b      	str	r3, [r7, #0]
 8000792:	4b11      	ldr	r3, [pc, #68]	@ (80007d8 <MX_GPIO_Init+0xd0>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	4a10      	ldr	r2, [pc, #64]	@ (80007d8 <MX_GPIO_Init+0xd0>)
 8000798:	f043 0302 	orr.w	r3, r3, #2
 800079c:	6313      	str	r3, [r2, #48]	@ 0x30
 800079e:	4b0e      	ldr	r3, [pc, #56]	@ (80007d8 <MX_GPIO_Init+0xd0>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	f003 0302 	and.w	r3, r3, #2
 80007a6:	603b      	str	r3, [r7, #0]
 80007a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	21c0      	movs	r1, #192	@ 0xc0
 80007ae:	480b      	ldr	r0, [pc, #44]	@ (80007dc <MX_GPIO_Init+0xd4>)
 80007b0:	f002 fd80 	bl	80032b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007b4:	23c0      	movs	r3, #192	@ 0xc0
 80007b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b8:	2301      	movs	r3, #1
 80007ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c0:	2300      	movs	r3, #0
 80007c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	4619      	mov	r1, r3
 80007ca:	4804      	ldr	r0, [pc, #16]	@ (80007dc <MX_GPIO_Init+0xd4>)
 80007cc:	f002 fada 	bl	8002d84 <HAL_GPIO_Init>

}
 80007d0:	bf00      	nop
 80007d2:	3728      	adds	r7, #40	@ 0x28
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40023800 	.word	0x40023800
 80007dc:	40020000 	.word	0x40020000

080007e0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007e4:	4b12      	ldr	r3, [pc, #72]	@ (8000830 <MX_I2C1_Init+0x50>)
 80007e6:	4a13      	ldr	r2, [pc, #76]	@ (8000834 <MX_I2C1_Init+0x54>)
 80007e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80007ea:	4b11      	ldr	r3, [pc, #68]	@ (8000830 <MX_I2C1_Init+0x50>)
 80007ec:	4a12      	ldr	r2, [pc, #72]	@ (8000838 <MX_I2C1_Init+0x58>)
 80007ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000830 <MX_I2C1_Init+0x50>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000830 <MX_I2C1_Init+0x50>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000830 <MX_I2C1_Init+0x50>)
 80007fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000802:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000804:	4b0a      	ldr	r3, [pc, #40]	@ (8000830 <MX_I2C1_Init+0x50>)
 8000806:	2200      	movs	r2, #0
 8000808:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800080a:	4b09      	ldr	r3, [pc, #36]	@ (8000830 <MX_I2C1_Init+0x50>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000810:	4b07      	ldr	r3, [pc, #28]	@ (8000830 <MX_I2C1_Init+0x50>)
 8000812:	2200      	movs	r2, #0
 8000814:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000816:	4b06      	ldr	r3, [pc, #24]	@ (8000830 <MX_I2C1_Init+0x50>)
 8000818:	2200      	movs	r2, #0
 800081a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800081c:	4804      	ldr	r0, [pc, #16]	@ (8000830 <MX_I2C1_Init+0x50>)
 800081e:	f002 fd7d 	bl	800331c <HAL_I2C_Init>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000828:	f000 fa02 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}
 8000830:	2000033c 	.word	0x2000033c
 8000834:	40005400 	.word	0x40005400
 8000838:	00061a80 	.word	0x00061a80

0800083c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08a      	sub	sp, #40	@ 0x28
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a19      	ldr	r2, [pc, #100]	@ (80008c0 <HAL_I2C_MspInit+0x84>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d12b      	bne.n	80008b6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	613b      	str	r3, [r7, #16]
 8000862:	4b18      	ldr	r3, [pc, #96]	@ (80008c4 <HAL_I2C_MspInit+0x88>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	4a17      	ldr	r2, [pc, #92]	@ (80008c4 <HAL_I2C_MspInit+0x88>)
 8000868:	f043 0302 	orr.w	r3, r3, #2
 800086c:	6313      	str	r3, [r2, #48]	@ 0x30
 800086e:	4b15      	ldr	r3, [pc, #84]	@ (80008c4 <HAL_I2C_MspInit+0x88>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	f003 0302 	and.w	r3, r3, #2
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800087a:	23c0      	movs	r3, #192	@ 0xc0
 800087c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800087e:	2312      	movs	r3, #18
 8000880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000886:	2303      	movs	r3, #3
 8000888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800088a:	2304      	movs	r3, #4
 800088c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800088e:	f107 0314 	add.w	r3, r7, #20
 8000892:	4619      	mov	r1, r3
 8000894:	480c      	ldr	r0, [pc, #48]	@ (80008c8 <HAL_I2C_MspInit+0x8c>)
 8000896:	f002 fa75 	bl	8002d84 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	4b09      	ldr	r3, [pc, #36]	@ (80008c4 <HAL_I2C_MspInit+0x88>)
 80008a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a2:	4a08      	ldr	r2, [pc, #32]	@ (80008c4 <HAL_I2C_MspInit+0x88>)
 80008a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80008a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80008aa:	4b06      	ldr	r3, [pc, #24]	@ (80008c4 <HAL_I2C_MspInit+0x88>)
 80008ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80008b6:	bf00      	nop
 80008b8:	3728      	adds	r7, #40	@ 0x28
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40005400 	.word	0x40005400
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40020400 	.word	0x40020400

080008cc <Process_HID_Frames>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Process_HID_Frames(void) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b092      	sub	sp, #72	@ 0x48
 80008d0:	af00      	add	r7, sp, #0
    uint8_t frame[HID_FRAME_SIZE];

    while (HID_Frame_Read(frame)) {
 80008d2:	e00e      	b.n	80008f2 <Process_HID_Frames+0x26>
        // Xử lý từng frame ở đây
        // Ví dụ:

        if (frame[0] == 2) {
 80008d4:	793b      	ldrb	r3, [r7, #4]
 80008d6:	2b02      	cmp	r3, #2
 80008d8:	d10b      	bne.n	80008f2 <Process_HID_Frames+0x26>
        	uint32_t id = (frame[2]<< 8) | frame[3];
 80008da:	79bb      	ldrb	r3, [r7, #6]
 80008dc:	021b      	lsls	r3, r3, #8
 80008de:	79fa      	ldrb	r2, [r7, #7]
 80008e0:	4313      	orrs	r3, r2
 80008e2:	647b      	str	r3, [r7, #68]	@ 0x44
        	CanTx_init(id, frame[4], &frame[5]);
 80008e4:	7a39      	ldrb	r1, [r7, #8]
 80008e6:	1d3b      	adds	r3, r7, #4
 80008e8:	3305      	adds	r3, #5
 80008ea:	461a      	mov	r2, r3
 80008ec:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80008ee:	f000 f80d 	bl	800090c <CanTx_init>
    while (HID_Frame_Read(frame)) {
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	4618      	mov	r0, r3
 80008f6:	f008 fb8d 	bl	8009014 <HID_Frame_Read>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d1e9      	bne.n	80008d4 <Process_HID_Frames+0x8>
        	//USBD_CUSTOM_HID_SendReport(&hUsbDevice, test_process1, sizeof(test_process1));
        }

    }
}
 8000900:	bf00      	nop
 8000902:	bf00      	nop
 8000904:	3748      	adds	r7, #72	@ 0x48
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
	...

0800090c <CanTx_init>:

void CanTx_init(uint32_t id, uint8_t dlc, uint8_t *data){
 800090c:	b580      	push	{r7, lr}
 800090e:	b088      	sub	sp, #32
 8000910:	af00      	add	r7, sp, #0
 8000912:	60f8      	str	r0, [r7, #12]
 8000914:	460b      	mov	r3, r1
 8000916:	607a      	str	r2, [r7, #4]
 8000918:	72fb      	strb	r3, [r7, #11]
	uint8_t buffer[8] = {0};
 800091a:	f107 0318 	add.w	r3, r7, #24
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
	uint32_t txMailbox;

	TxHeader.StdId = id;
 8000924:	4a10      	ldr	r2, [pc, #64]	@ (8000968 <CanTx_init+0x5c>)
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	6013      	str	r3, [r2, #0]
	TxHeader.IDE = CAN_ID_STD;
 800092a:	4b0f      	ldr	r3, [pc, #60]	@ (8000968 <CanTx_init+0x5c>)
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8000930:	4b0d      	ldr	r3, [pc, #52]	@ (8000968 <CanTx_init+0x5c>)
 8000932:	2200      	movs	r2, #0
 8000934:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = dlc;
 8000936:	7afb      	ldrb	r3, [r7, #11]
 8000938:	4a0b      	ldr	r2, [pc, #44]	@ (8000968 <CanTx_init+0x5c>)
 800093a:	6113      	str	r3, [r2, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 800093c:	4b0a      	ldr	r3, [pc, #40]	@ (8000968 <CanTx_init+0x5c>)
 800093e:	2200      	movs	r2, #0
 8000940:	751a      	strb	r2, [r3, #20]

	memcpy(buffer, data, dlc);
 8000942:	7afa      	ldrb	r2, [r7, #11]
 8000944:	f107 0318 	add.w	r3, r7, #24
 8000948:	6879      	ldr	r1, [r7, #4]
 800094a:	4618      	mov	r0, r3
 800094c:	f00b fb44 	bl	800bfd8 <memcpy>

	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, buffer, &txMailbox);
 8000950:	f107 0314 	add.w	r3, r7, #20
 8000954:	f107 0218 	add.w	r2, r7, #24
 8000958:	4903      	ldr	r1, [pc, #12]	@ (8000968 <CanTx_init+0x5c>)
 800095a:	4804      	ldr	r0, [pc, #16]	@ (800096c <CanTx_init+0x60>)
 800095c:	f001 f8ac 	bl	8001ab8 <HAL_CAN_AddTxMessage>
}
 8000960:	bf00      	nop
 8000962:	3720      	adds	r7, #32
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	20000390 	.word	0x20000390
 800096c:	20000314 	.word	0x20000314

08000970 <CanRx_init>:

void CanRx_init(void){
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0

		//=================can filter==============//
		sFilterConfig.FilterBank = 0;
 8000974:	4b12      	ldr	r3, [pc, #72]	@ (80009c0 <CanRx_init+0x50>)
 8000976:	2200      	movs	r2, #0
 8000978:	615a      	str	r2, [r3, #20]
		sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800097a:	4b11      	ldr	r3, [pc, #68]	@ (80009c0 <CanRx_init+0x50>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]
		sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000980:	4b0f      	ldr	r3, [pc, #60]	@ (80009c0 <CanRx_init+0x50>)
 8000982:	2201      	movs	r2, #1
 8000984:	61da      	str	r2, [r3, #28]
		sFilterConfig.FilterIdHigh = 0x0000;
 8000986:	4b0e      	ldr	r3, [pc, #56]	@ (80009c0 <CanRx_init+0x50>)
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
		sFilterConfig.FilterIdLow = 0;
 800098c:	4b0c      	ldr	r3, [pc, #48]	@ (80009c0 <CanRx_init+0x50>)
 800098e:	2200      	movs	r2, #0
 8000990:	605a      	str	r2, [r3, #4]
		sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000992:	4b0b      	ldr	r3, [pc, #44]	@ (80009c0 <CanRx_init+0x50>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
		sFilterConfig.FilterMaskIdLow = 0;
 8000998:	4b09      	ldr	r3, [pc, #36]	@ (80009c0 <CanRx_init+0x50>)
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
		sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800099e:	4b08      	ldr	r3, [pc, #32]	@ (80009c0 <CanRx_init+0x50>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
		sFilterConfig.FilterActivation = ENABLE;
 80009a4:	4b06      	ldr	r3, [pc, #24]	@ (80009c0 <CanRx_init+0x50>)
 80009a6:	2201      	movs	r2, #1
 80009a8:	621a      	str	r2, [r3, #32]
		HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 80009aa:	4905      	ldr	r1, [pc, #20]	@ (80009c0 <CanRx_init+0x50>)
 80009ac:	4805      	ldr	r0, [pc, #20]	@ (80009c4 <CanRx_init+0x54>)
 80009ae:	f000 ff61 	bl	8001874 <HAL_CAN_ConfigFilter>
		HAL_CAN_ActivateNotification(&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING);
 80009b2:	2102      	movs	r1, #2
 80009b4:	4803      	ldr	r0, [pc, #12]	@ (80009c4 <CanRx_init+0x54>)
 80009b6:	f001 fa71 	bl	8001e9c <HAL_CAN_ActivateNotification>
}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	200003c4 	.word	0x200003c4
 80009c4:	20000314 	.word	0x20000314

080009c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009cc:	f000 fdc0 	bl	8001550 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d0:	f000 f82a 	bl	8000a28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009d4:	f7ff fe98 	bl	8000708 <MX_GPIO_Init>
  MX_DMA_Init();
 80009d8:	f7ff fe6e 	bl	80006b8 <MX_DMA_Init>
  MX_CAN1_Init();
 80009dc:	f7ff fdde 	bl	800059c <MX_CAN1_Init>
  MX_USB_OTG_FS_PCD_Init();
 80009e0:	f000 fd0a 	bl	80013f8 <MX_USB_OTG_FS_PCD_Init>
  MX_UART5_Init();
 80009e4:	f000 fbd4 	bl	8001190 <MX_UART5_Init>
  MX_I2C1_Init();
 80009e8:	f7ff fefa 	bl	80007e0 <MX_I2C1_Init>
  MX_TIM1_Init();
 80009ec:	f000 fa20 	bl	8000e30 <MX_TIM1_Init>
  MX_TIM2_Init();
 80009f0:	f000 fa6e 	bl	8000ed0 <MX_TIM2_Init>
  MX_TIM4_Init();
 80009f4:	f000 fab8 	bl	8000f68 <MX_TIM4_Init>
  MX_TIM5_Init();
 80009f8:	f000 fb04 	bl	8001004 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 80009fc:	f007 fda4 	bl	8008548 <MX_USB_DEVICE_Init>
  HAL_TIM_Base_Start(&htim5);
 8000a00:	4806      	ldr	r0, [pc, #24]	@ (8000a1c <main+0x54>)
 8000a02:	f004 fd09 	bl	8005418 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 8000a06:	4806      	ldr	r0, [pc, #24]	@ (8000a20 <main+0x58>)
 8000a08:	f004 fd6e 	bl	80054e8 <HAL_TIM_Base_Start_IT>
  HAL_CAN_Start(&hcan1);
 8000a0c:	4805      	ldr	r0, [pc, #20]	@ (8000a24 <main+0x5c>)
 8000a0e:	f001 f80f 	bl	8001a30 <HAL_CAN_Start>
  CanRx_init();
 8000a12:	f7ff ffad 	bl	8000970 <CanRx_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Process_HID_Frames();
 8000a16:	f7ff ff59 	bl	80008cc <Process_HID_Frames>
 8000a1a:	e7fc      	b.n	8000a16 <main+0x4e>
 8000a1c:	200004c8 	.word	0x200004c8
 8000a20:	20000480 	.word	0x20000480
 8000a24:	20000314 	.word	0x20000314

08000a28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b094      	sub	sp, #80	@ 0x50
 8000a2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a2e:	f107 0320 	add.w	r3, r7, #32
 8000a32:	2230      	movs	r2, #48	@ 0x30
 8000a34:	2100      	movs	r1, #0
 8000a36:	4618      	mov	r0, r3
 8000a38:	f00b fa9a 	bl	800bf70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a3c:	f107 030c 	add.w	r3, r7, #12
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60bb      	str	r3, [r7, #8]
 8000a50:	4b28      	ldr	r3, [pc, #160]	@ (8000af4 <SystemClock_Config+0xcc>)
 8000a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a54:	4a27      	ldr	r2, [pc, #156]	@ (8000af4 <SystemClock_Config+0xcc>)
 8000a56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a5c:	4b25      	ldr	r3, [pc, #148]	@ (8000af4 <SystemClock_Config+0xcc>)
 8000a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a64:	60bb      	str	r3, [r7, #8]
 8000a66:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a68:	2300      	movs	r3, #0
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	4b22      	ldr	r3, [pc, #136]	@ (8000af8 <SystemClock_Config+0xd0>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a21      	ldr	r2, [pc, #132]	@ (8000af8 <SystemClock_Config+0xd0>)
 8000a72:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a76:	6013      	str	r3, [r2, #0]
 8000a78:	4b1f      	ldr	r3, [pc, #124]	@ (8000af8 <SystemClock_Config+0xd0>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a80:	607b      	str	r3, [r7, #4]
 8000a82:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a84:	2301      	movs	r3, #1
 8000a86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a88:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a8c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a92:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a98:	2304      	movs	r3, #4
 8000a9a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a9c:	23a8      	movs	r3, #168	@ 0xa8
 8000a9e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000aa4:	2307      	movs	r3, #7
 8000aa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa8:	f107 0320 	add.w	r3, r7, #32
 8000aac:	4618      	mov	r0, r3
 8000aae:	f003 ffcb 	bl	8004a48 <HAL_RCC_OscConfig>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ab8:	f000 f8ba 	bl	8000c30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000abc:	230f      	movs	r3, #15
 8000abe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ac8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000acc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ace:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ad2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ad4:	f107 030c 	add.w	r3, r7, #12
 8000ad8:	2105      	movs	r1, #5
 8000ada:	4618      	mov	r0, r3
 8000adc:	f004 fa2c 	bl	8004f38 <HAL_RCC_ClockConfig>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000ae6:	f000 f8a3 	bl	8000c30 <Error_Handler>
  }
}
 8000aea:	bf00      	nop
 8000aec:	3750      	adds	r7, #80	@ 0x50
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40023800 	.word	0x40023800
 8000af8:	40007000 	.word	0x40007000

08000afc <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b096      	sub	sp, #88	@ 0x58
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
    uint8_t rxData[8];
    uint8_t usbFrame[64] = {0}; // clear buffer
 8000b04:	f107 0308 	add.w	r3, r7, #8
 8000b08:	2240      	movs	r2, #64	@ 0x40
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f00b fa2f 	bl	800bf70 <memset>
    uint8_t frameLen = 0;
 8000b12:	2300      	movs	r3, #0
 8000b14:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
    memset(usbFrame, 0, sizeof(usbFrame));
 8000b18:	f107 0308 	add.w	r3, r7, #8
 8000b1c:	2240      	movs	r2, #64	@ 0x40
 8000b1e:	2100      	movs	r1, #0
 8000b20:	4618      	mov	r0, r3
 8000b22:	f00b fa25 	bl	800bf70 <memset>

    if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rxData) == HAL_OK)
 8000b26:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000b2a:	4a3d      	ldr	r2, [pc, #244]	@ (8000c20 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>)
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	483d      	ldr	r0, [pc, #244]	@ (8000c24 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 8000b30:	f001 f892 	bl	8001c58 <HAL_CAN_GetRxMessage>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d16e      	bne.n	8000c18 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>
    {
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7); // báo nhận
 8000b3a:	2180      	movs	r1, #128	@ 0x80
 8000b3c:	483a      	ldr	r0, [pc, #232]	@ (8000c28 <HAL_CAN_RxFifo0MsgPendingCallback+0x12c>)
 8000b3e:	f002 fbd2 	bl	80032e6 <HAL_GPIO_TogglePin>

        // Byte 0: CMD
        usbFrame[0] = 0x03;
 8000b42:	2303      	movs	r3, #3
 8000b44:	723b      	strb	r3, [r7, #8]

        // Byte 1: DLC (4-bit high), FrameType (4-bit low)
        uint8_t dlc = RxHeader.DLC & 0x0F;
 8000b46:	4b36      	ldr	r3, [pc, #216]	@ (8000c20 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>)
 8000b48:	691b      	ldr	r3, [r3, #16]
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	f003 030f 	and.w	r3, r3, #15
 8000b50:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
        uint8_t frameType = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if (RxHeader.IDE == CAN_ID_EXT)
 8000b5a:	4b31      	ldr	r3, [pc, #196]	@ (8000c20 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>)
 8000b5c:	689b      	ldr	r3, [r3, #8]
 8000b5e:	2b04      	cmp	r3, #4
 8000b60:	d103      	bne.n	8000b6a <HAL_CAN_RxFifo0MsgPendingCallback+0x6e>
            frameType = 1;
 8000b62:	2301      	movs	r3, #1
 8000b64:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8000b68:	e006      	b.n	8000b78 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>
        else if (RxHeader.RTR == CAN_RTR_REMOTE)
 8000b6a:	4b2d      	ldr	r3, [pc, #180]	@ (8000c20 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>)
 8000b6c:	68db      	ldr	r3, [r3, #12]
 8000b6e:	2b02      	cmp	r3, #2
 8000b70:	d102      	bne.n	8000b78 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>
            frameType = 2;
 8000b72:	2302      	movs	r3, #2
 8000b74:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

        usbFrame[1] = (dlc << 4) | (frameType & 0x0F);
 8000b78:	f997 3054 	ldrsb.w	r3, [r7, #84]	@ 0x54
 8000b7c:	011b      	lsls	r3, r3, #4
 8000b7e:	b25a      	sxtb	r2, r3
 8000b80:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8000b84:	f003 030f 	and.w	r3, r3, #15
 8000b88:	b25b      	sxtb	r3, r3
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	b25b      	sxtb	r3, r3
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	727b      	strb	r3, [r7, #9]

        // Byte 2~5: CAN ID (big-endian)
        uint32_t canId = (RxHeader.IDE == CAN_ID_EXT) ? RxHeader.ExtId : RxHeader.StdId;
 8000b92:	4b23      	ldr	r3, [pc, #140]	@ (8000c20 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>)
 8000b94:	689b      	ldr	r3, [r3, #8]
 8000b96:	2b04      	cmp	r3, #4
 8000b98:	d102      	bne.n	8000ba0 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>
 8000b9a:	4b21      	ldr	r3, [pc, #132]	@ (8000c20 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>)
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	e001      	b.n	8000ba4 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>
 8000ba0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c20 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	653b      	str	r3, [r7, #80]	@ 0x50
        usbFrame[2] = (canId >> 24) & 0xFF;
 8000ba6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000ba8:	0e1b      	lsrs	r3, r3, #24
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	72bb      	strb	r3, [r7, #10]
        usbFrame[3] = (canId >> 16) & 0xFF;
 8000bae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000bb0:	0c1b      	lsrs	r3, r3, #16
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	72fb      	strb	r3, [r7, #11]
        usbFrame[4] = (canId >> 8) & 0xFF;
 8000bb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000bb8:	0a1b      	lsrs	r3, r3, #8
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	733b      	strb	r3, [r7, #12]
        usbFrame[5] = canId & 0xFF;
 8000bbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	737b      	strb	r3, [r7, #13]

        // Byte 6~6+DLC: data
        for (uint8_t i = 0; i < dlc; ++i)
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 8000bca:	e011      	b.n	8000bf0 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>
        {
            usbFrame[6 + i] = rxData[i];
 8000bcc:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 8000bd0:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8000bd4:	3306      	adds	r3, #6
 8000bd6:	3258      	adds	r2, #88	@ 0x58
 8000bd8:	443a      	add	r2, r7
 8000bda:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8000bde:	3358      	adds	r3, #88	@ 0x58
 8000be0:	443b      	add	r3, r7
 8000be2:	f803 2c50 	strb.w	r2, [r3, #-80]
        for (uint8_t i = 0; i < dlc; ++i)
 8000be6:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8000bea:	3301      	adds	r3, #1
 8000bec:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 8000bf0:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 8000bf4:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d3e7      	bcc.n	8000bcc <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>
        }

        frameLen = 6 + dlc;
 8000bfc:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8000c00:	3306      	adds	r3, #6
 8000c02:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55

        // ✅ Gửi đúng độ dài thực tế (frameLen), hoặc 64 nếu host yêu cầu cố định
        USBD_CUSTOM_HID_SendReport(&hUsbDevice, usbFrame, frameLen);
 8000c06:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000c0a:	b29a      	uxth	r2, r3
 8000c0c:	f107 0308 	add.w	r3, r7, #8
 8000c10:	4619      	mov	r1, r3
 8000c12:	4806      	ldr	r0, [pc, #24]	@ (8000c2c <HAL_CAN_RxFifo0MsgPendingCallback+0x130>)
 8000c14:	f009 fbee 	bl	800a3f4 <USBD_CUSTOM_HID_SendReport>
    }
}
 8000c18:	bf00      	nop
 8000c1a:	3758      	adds	r7, #88	@ 0x58
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	200003a8 	.word	0x200003a8
 8000c24:	20000314 	.word	0x20000314
 8000c28:	40020000 	.word	0x40020000
 8000c2c:	20000b00 	.word	0x20000b00

08000c30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c34:	b672      	cpsid	i
}
 8000c36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <Error_Handler+0x8>

08000c3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	607b      	str	r3, [r7, #4]
 8000c46:	4b10      	ldr	r3, [pc, #64]	@ (8000c88 <HAL_MspInit+0x4c>)
 8000c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c4a:	4a0f      	ldr	r2, [pc, #60]	@ (8000c88 <HAL_MspInit+0x4c>)
 8000c4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c50:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c52:	4b0d      	ldr	r3, [pc, #52]	@ (8000c88 <HAL_MspInit+0x4c>)
 8000c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	603b      	str	r3, [r7, #0]
 8000c62:	4b09      	ldr	r3, [pc, #36]	@ (8000c88 <HAL_MspInit+0x4c>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c66:	4a08      	ldr	r2, [pc, #32]	@ (8000c88 <HAL_MspInit+0x4c>)
 8000c68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c6e:	4b06      	ldr	r3, [pc, #24]	@ (8000c88 <HAL_MspInit+0x4c>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c76:	603b      	str	r3, [r7, #0]
 8000c78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	40023800 	.word	0x40023800

08000c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c90:	bf00      	nop
 8000c92:	e7fd      	b.n	8000c90 <NMI_Handler+0x4>

08000c94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c98:	bf00      	nop
 8000c9a:	e7fd      	b.n	8000c98 <HardFault_Handler+0x4>

08000c9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca0:	bf00      	nop
 8000ca2:	e7fd      	b.n	8000ca0 <MemManage_Handler+0x4>

08000ca4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca8:	bf00      	nop
 8000caa:	e7fd      	b.n	8000ca8 <BusFault_Handler+0x4>

08000cac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb0:	bf00      	nop
 8000cb2:	e7fd      	b.n	8000cb0 <UsageFault_Handler+0x4>

08000cb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr

08000cc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ce2:	f000 fc87 	bl	80015f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
	...

08000cec <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8000cf0:	4802      	ldr	r0, [pc, #8]	@ (8000cfc <DMA1_Stream0_IRQHandler+0x10>)
 8000cf2:	f001 fe0b 	bl	800290c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	200005b8 	.word	0x200005b8

08000d00 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000d04:	4802      	ldr	r0, [pc, #8]	@ (8000d10 <CAN1_RX0_IRQHandler+0x10>)
 8000d06:	f001 f8ef 	bl	8001ee8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000314 	.word	0x20000314

08000d14 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000d18:	4802      	ldr	r0, [pc, #8]	@ (8000d24 <CAN1_RX1_IRQHandler+0x10>)
 8000d1a:	f001 f8e5 	bl	8001ee8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000314 	.word	0x20000314

08000d28 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d2c:	4802      	ldr	r0, [pc, #8]	@ (8000d38 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000d2e:	f004 fc7a 	bl	8005626 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	200003f0 	.word	0x200003f0

08000d3c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d40:	4802      	ldr	r0, [pc, #8]	@ (8000d4c <TIM2_IRQHandler+0x10>)
 8000d42:	f004 fc70 	bl	8005626 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000438 	.word	0x20000438

08000d50 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000d54:	4802      	ldr	r0, [pc, #8]	@ (8000d60 <TIM4_IRQHandler+0x10>)
 8000d56:	f004 fc66 	bl	8005626 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000480 	.word	0x20000480

08000d64 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8000d68:	4802      	ldr	r0, [pc, #8]	@ (8000d74 <DMA1_Stream7_IRQHandler+0x10>)
 8000d6a:	f001 fdcf 	bl	800290c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20000558 	.word	0x20000558

08000d78 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000d7c:	4802      	ldr	r0, [pc, #8]	@ (8000d88 <UART5_IRQHandler+0x10>)
 8000d7e:	f005 f933 	bl	8005fe8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000510 	.word	0x20000510

08000d8c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000d90:	4802      	ldr	r0, [pc, #8]	@ (8000d9c <OTG_FS_IRQHandler+0x10>)
 8000d92:	f002 fd4b 	bl	800382c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000618 	.word	0x20000618

08000da0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b086      	sub	sp, #24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000da8:	4a14      	ldr	r2, [pc, #80]	@ (8000dfc <_sbrk+0x5c>)
 8000daa:	4b15      	ldr	r3, [pc, #84]	@ (8000e00 <_sbrk+0x60>)
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000db4:	4b13      	ldr	r3, [pc, #76]	@ (8000e04 <_sbrk+0x64>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d102      	bne.n	8000dc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dbc:	4b11      	ldr	r3, [pc, #68]	@ (8000e04 <_sbrk+0x64>)
 8000dbe:	4a12      	ldr	r2, [pc, #72]	@ (8000e08 <_sbrk+0x68>)
 8000dc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dc2:	4b10      	ldr	r3, [pc, #64]	@ (8000e04 <_sbrk+0x64>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4413      	add	r3, r2
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d207      	bcs.n	8000de0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dd0:	f00b f8d6 	bl	800bf80 <__errno>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	220c      	movs	r2, #12
 8000dd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dda:	f04f 33ff 	mov.w	r3, #4294967295
 8000dde:	e009      	b.n	8000df4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000de0:	4b08      	ldr	r3, [pc, #32]	@ (8000e04 <_sbrk+0x64>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000de6:	4b07      	ldr	r3, [pc, #28]	@ (8000e04 <_sbrk+0x64>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4413      	add	r3, r2
 8000dee:	4a05      	ldr	r2, [pc, #20]	@ (8000e04 <_sbrk+0x64>)
 8000df0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000df2:	68fb      	ldr	r3, [r7, #12]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3718      	adds	r7, #24
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	20020000 	.word	0x20020000
 8000e00:	00000400 	.word	0x00000400
 8000e04:	200003ec 	.word	0x200003ec
 8000e08:	200027b0 	.word	0x200027b0

08000e0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e10:	4b06      	ldr	r3, [pc, #24]	@ (8000e2c <SystemInit+0x20>)
 8000e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e16:	4a05      	ldr	r2, [pc, #20]	@ (8000e2c <SystemInit+0x20>)
 8000e18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e36:	f107 0308 	add.w	r3, r7, #8
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]
 8000e42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e44:	463b      	mov	r3, r7
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e4c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ec8 <MX_TIM1_Init+0x98>)
 8000e4e:	4a1f      	ldr	r2, [pc, #124]	@ (8000ecc <MX_TIM1_Init+0x9c>)
 8000e50:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 8000e52:	4b1d      	ldr	r3, [pc, #116]	@ (8000ec8 <MX_TIM1_Init+0x98>)
 8000e54:	22a7      	movs	r2, #167	@ 0xa7
 8000e56:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e58:	4b1b      	ldr	r3, [pc, #108]	@ (8000ec8 <MX_TIM1_Init+0x98>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000e5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec8 <MX_TIM1_Init+0x98>)
 8000e60:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e64:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e66:	4b18      	ldr	r3, [pc, #96]	@ (8000ec8 <MX_TIM1_Init+0x98>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e6c:	4b16      	ldr	r3, [pc, #88]	@ (8000ec8 <MX_TIM1_Init+0x98>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e72:	4b15      	ldr	r3, [pc, #84]	@ (8000ec8 <MX_TIM1_Init+0x98>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e78:	4813      	ldr	r0, [pc, #76]	@ (8000ec8 <MX_TIM1_Init+0x98>)
 8000e7a:	f004 fa7d 	bl	8005378 <HAL_TIM_Base_Init>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000e84:	f7ff fed4 	bl	8000c30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e8e:	f107 0308 	add.w	r3, r7, #8
 8000e92:	4619      	mov	r1, r3
 8000e94:	480c      	ldr	r0, [pc, #48]	@ (8000ec8 <MX_TIM1_Init+0x98>)
 8000e96:	f004 fcb6 	bl	8005806 <HAL_TIM_ConfigClockSource>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000ea0:	f7ff fec6 	bl	8000c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000eac:	463b      	mov	r3, r7
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4805      	ldr	r0, [pc, #20]	@ (8000ec8 <MX_TIM1_Init+0x98>)
 8000eb2:	f004 fed7 	bl	8005c64 <HAL_TIMEx_MasterConfigSynchronization>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000ebc:	f7ff feb8 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ec0:	bf00      	nop
 8000ec2:	3718      	adds	r7, #24
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	200003f0 	.word	0x200003f0
 8000ecc:	40010000 	.word	0x40010000

08000ed0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ed6:	f107 0308 	add.w	r3, r7, #8
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	605a      	str	r2, [r3, #4]
 8000ee0:	609a      	str	r2, [r3, #8]
 8000ee2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee4:	463b      	mov	r3, r7
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000eec:	4b1d      	ldr	r3, [pc, #116]	@ (8000f64 <MX_TIM2_Init+0x94>)
 8000eee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ef2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8000ef4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f64 <MX_TIM2_Init+0x94>)
 8000ef6:	2253      	movs	r2, #83	@ 0x53
 8000ef8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000efa:	4b1a      	ldr	r3, [pc, #104]	@ (8000f64 <MX_TIM2_Init+0x94>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3000;
 8000f00:	4b18      	ldr	r3, [pc, #96]	@ (8000f64 <MX_TIM2_Init+0x94>)
 8000f02:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000f06:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f08:	4b16      	ldr	r3, [pc, #88]	@ (8000f64 <MX_TIM2_Init+0x94>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f0e:	4b15      	ldr	r3, [pc, #84]	@ (8000f64 <MX_TIM2_Init+0x94>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f14:	4813      	ldr	r0, [pc, #76]	@ (8000f64 <MX_TIM2_Init+0x94>)
 8000f16:	f004 fa2f 	bl	8005378 <HAL_TIM_Base_Init>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f20:	f7ff fe86 	bl	8000c30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f2a:	f107 0308 	add.w	r3, r7, #8
 8000f2e:	4619      	mov	r1, r3
 8000f30:	480c      	ldr	r0, [pc, #48]	@ (8000f64 <MX_TIM2_Init+0x94>)
 8000f32:	f004 fc68 	bl	8005806 <HAL_TIM_ConfigClockSource>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f3c:	f7ff fe78 	bl	8000c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f40:	2300      	movs	r3, #0
 8000f42:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f44:	2300      	movs	r3, #0
 8000f46:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f48:	463b      	mov	r3, r7
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4805      	ldr	r0, [pc, #20]	@ (8000f64 <MX_TIM2_Init+0x94>)
 8000f4e:	f004 fe89 	bl	8005c64 <HAL_TIMEx_MasterConfigSynchronization>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f58:	f7ff fe6a 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f5c:	bf00      	nop
 8000f5e:	3718      	adds	r7, #24
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20000438 	.word	0x20000438

08000f68 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f6e:	f107 0308 	add.w	r3, r7, #8
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	605a      	str	r2, [r3, #4]
 8000f78:	609a      	str	r2, [r3, #8]
 8000f7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f7c:	463b      	mov	r3, r7
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f84:	4b1d      	ldr	r3, [pc, #116]	@ (8000ffc <MX_TIM4_Init+0x94>)
 8000f86:	4a1e      	ldr	r2, [pc, #120]	@ (8001000 <MX_TIM4_Init+0x98>)
 8000f88:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84;
 8000f8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000ffc <MX_TIM4_Init+0x94>)
 8000f8c:	2254      	movs	r2, #84	@ 0x54
 8000f8e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f90:	4b1a      	ldr	r3, [pc, #104]	@ (8000ffc <MX_TIM4_Init+0x94>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000f96:	4b19      	ldr	r3, [pc, #100]	@ (8000ffc <MX_TIM4_Init+0x94>)
 8000f98:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f9c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f9e:	4b17      	ldr	r3, [pc, #92]	@ (8000ffc <MX_TIM4_Init+0x94>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fa4:	4b15      	ldr	r3, [pc, #84]	@ (8000ffc <MX_TIM4_Init+0x94>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000faa:	4814      	ldr	r0, [pc, #80]	@ (8000ffc <MX_TIM4_Init+0x94>)
 8000fac:	f004 f9e4 	bl	8005378 <HAL_TIM_Base_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000fb6:	f7ff fe3b 	bl	8000c30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fbe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000fc0:	f107 0308 	add.w	r3, r7, #8
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	480d      	ldr	r0, [pc, #52]	@ (8000ffc <MX_TIM4_Init+0x94>)
 8000fc8:	f004 fc1d 	bl	8005806 <HAL_TIM_ConfigClockSource>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000fd2:	f7ff fe2d 	bl	8000c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000fde:	463b      	mov	r3, r7
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4806      	ldr	r0, [pc, #24]	@ (8000ffc <MX_TIM4_Init+0x94>)
 8000fe4:	f004 fe3e 	bl	8005c64 <HAL_TIMEx_MasterConfigSynchronization>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000fee:	f7ff fe1f 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000ff2:	bf00      	nop
 8000ff4:	3718      	adds	r7, #24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000480 	.word	0x20000480
 8001000:	40000800 	.word	0x40000800

08001004 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800100a:	f107 0308 	add.w	r3, r7, #8
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	605a      	str	r2, [r3, #4]
 8001014:	609a      	str	r2, [r3, #8]
 8001016:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001018:	463b      	mov	r3, r7
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001020:	4b1d      	ldr	r3, [pc, #116]	@ (8001098 <MX_TIM5_Init+0x94>)
 8001022:	4a1e      	ldr	r2, [pc, #120]	@ (800109c <MX_TIM5_Init+0x98>)
 8001024:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 8399;
 8001026:	4b1c      	ldr	r3, [pc, #112]	@ (8001098 <MX_TIM5_Init+0x94>)
 8001028:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 800102c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800102e:	4b1a      	ldr	r3, [pc, #104]	@ (8001098 <MX_TIM5_Init+0x94>)
 8001030:	2200      	movs	r2, #0
 8001032:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xffffffff;
 8001034:	4b18      	ldr	r3, [pc, #96]	@ (8001098 <MX_TIM5_Init+0x94>)
 8001036:	f04f 32ff 	mov.w	r2, #4294967295
 800103a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800103c:	4b16      	ldr	r3, [pc, #88]	@ (8001098 <MX_TIM5_Init+0x94>)
 800103e:	2200      	movs	r2, #0
 8001040:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001042:	4b15      	ldr	r3, [pc, #84]	@ (8001098 <MX_TIM5_Init+0x94>)
 8001044:	2200      	movs	r2, #0
 8001046:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001048:	4813      	ldr	r0, [pc, #76]	@ (8001098 <MX_TIM5_Init+0x94>)
 800104a:	f004 f995 	bl	8005378 <HAL_TIM_Base_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001054:	f7ff fdec 	bl	8000c30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001058:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800105c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800105e:	f107 0308 	add.w	r3, r7, #8
 8001062:	4619      	mov	r1, r3
 8001064:	480c      	ldr	r0, [pc, #48]	@ (8001098 <MX_TIM5_Init+0x94>)
 8001066:	f004 fbce 	bl	8005806 <HAL_TIM_ConfigClockSource>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001070:	f7ff fdde 	bl	8000c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001074:	2300      	movs	r3, #0
 8001076:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001078:	2300      	movs	r3, #0
 800107a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800107c:	463b      	mov	r3, r7
 800107e:	4619      	mov	r1, r3
 8001080:	4805      	ldr	r0, [pc, #20]	@ (8001098 <MX_TIM5_Init+0x94>)
 8001082:	f004 fdef 	bl	8005c64 <HAL_TIMEx_MasterConfigSynchronization>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800108c:	f7ff fdd0 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001090:	bf00      	nop
 8001092:	3718      	adds	r7, #24
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	200004c8 	.word	0x200004c8
 800109c:	40000c00 	.word	0x40000c00

080010a0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a34      	ldr	r2, [pc, #208]	@ (8001180 <HAL_TIM_Base_MspInit+0xe0>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d116      	bne.n	80010e0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	617b      	str	r3, [r7, #20]
 80010b6:	4b33      	ldr	r3, [pc, #204]	@ (8001184 <HAL_TIM_Base_MspInit+0xe4>)
 80010b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ba:	4a32      	ldr	r2, [pc, #200]	@ (8001184 <HAL_TIM_Base_MspInit+0xe4>)
 80010bc:	f043 0301 	orr.w	r3, r3, #1
 80010c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80010c2:	4b30      	ldr	r3, [pc, #192]	@ (8001184 <HAL_TIM_Base_MspInit+0xe4>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	617b      	str	r3, [r7, #20]
 80010cc:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2100      	movs	r1, #0
 80010d2:	2019      	movs	r0, #25
 80010d4:	f001 fa37 	bl	8002546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80010d8:	2019      	movs	r0, #25
 80010da:	f001 fa50 	bl	800257e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80010de:	e04a      	b.n	8001176 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM2)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010e8:	d116      	bne.n	8001118 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	613b      	str	r3, [r7, #16]
 80010ee:	4b25      	ldr	r3, [pc, #148]	@ (8001184 <HAL_TIM_Base_MspInit+0xe4>)
 80010f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f2:	4a24      	ldr	r2, [pc, #144]	@ (8001184 <HAL_TIM_Base_MspInit+0xe4>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80010fa:	4b22      	ldr	r3, [pc, #136]	@ (8001184 <HAL_TIM_Base_MspInit+0xe4>)
 80010fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	613b      	str	r3, [r7, #16]
 8001104:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001106:	2200      	movs	r2, #0
 8001108:	2100      	movs	r1, #0
 800110a:	201c      	movs	r0, #28
 800110c:	f001 fa1b 	bl	8002546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001110:	201c      	movs	r0, #28
 8001112:	f001 fa34 	bl	800257e <HAL_NVIC_EnableIRQ>
}
 8001116:	e02e      	b.n	8001176 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM4)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a1a      	ldr	r2, [pc, #104]	@ (8001188 <HAL_TIM_Base_MspInit+0xe8>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d116      	bne.n	8001150 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	4b17      	ldr	r3, [pc, #92]	@ (8001184 <HAL_TIM_Base_MspInit+0xe4>)
 8001128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112a:	4a16      	ldr	r2, [pc, #88]	@ (8001184 <HAL_TIM_Base_MspInit+0xe4>)
 800112c:	f043 0304 	orr.w	r3, r3, #4
 8001130:	6413      	str	r3, [r2, #64]	@ 0x40
 8001132:	4b14      	ldr	r3, [pc, #80]	@ (8001184 <HAL_TIM_Base_MspInit+0xe4>)
 8001134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001136:	f003 0304 	and.w	r3, r3, #4
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800113e:	2200      	movs	r2, #0
 8001140:	2100      	movs	r1, #0
 8001142:	201e      	movs	r0, #30
 8001144:	f001 f9ff 	bl	8002546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001148:	201e      	movs	r0, #30
 800114a:	f001 fa18 	bl	800257e <HAL_NVIC_EnableIRQ>
}
 800114e:	e012      	b.n	8001176 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM5)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a0d      	ldr	r2, [pc, #52]	@ (800118c <HAL_TIM_Base_MspInit+0xec>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d10d      	bne.n	8001176 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	60bb      	str	r3, [r7, #8]
 800115e:	4b09      	ldr	r3, [pc, #36]	@ (8001184 <HAL_TIM_Base_MspInit+0xe4>)
 8001160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001162:	4a08      	ldr	r2, [pc, #32]	@ (8001184 <HAL_TIM_Base_MspInit+0xe4>)
 8001164:	f043 0308 	orr.w	r3, r3, #8
 8001168:	6413      	str	r3, [r2, #64]	@ 0x40
 800116a:	4b06      	ldr	r3, [pc, #24]	@ (8001184 <HAL_TIM_Base_MspInit+0xe4>)
 800116c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800116e:	f003 0308 	and.w	r3, r3, #8
 8001172:	60bb      	str	r3, [r7, #8]
 8001174:	68bb      	ldr	r3, [r7, #8]
}
 8001176:	bf00      	nop
 8001178:	3718      	adds	r7, #24
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40010000 	.word	0x40010000
 8001184:	40023800 	.word	0x40023800
 8001188:	40000800 	.word	0x40000800
 800118c:	40000c00 	.word	0x40000c00

08001190 <MX_UART5_Init>:
DMA_HandleTypeDef hdma_uart5_tx;
DMA_HandleTypeDef hdma_uart5_rx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001194:	4b11      	ldr	r3, [pc, #68]	@ (80011dc <MX_UART5_Init+0x4c>)
 8001196:	4a12      	ldr	r2, [pc, #72]	@ (80011e0 <MX_UART5_Init+0x50>)
 8001198:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800119a:	4b10      	ldr	r3, [pc, #64]	@ (80011dc <MX_UART5_Init+0x4c>)
 800119c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011a0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80011a2:	4b0e      	ldr	r3, [pc, #56]	@ (80011dc <MX_UART5_Init+0x4c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80011a8:	4b0c      	ldr	r3, [pc, #48]	@ (80011dc <MX_UART5_Init+0x4c>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80011ae:	4b0b      	ldr	r3, [pc, #44]	@ (80011dc <MX_UART5_Init+0x4c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80011b4:	4b09      	ldr	r3, [pc, #36]	@ (80011dc <MX_UART5_Init+0x4c>)
 80011b6:	220c      	movs	r2, #12
 80011b8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ba:	4b08      	ldr	r3, [pc, #32]	@ (80011dc <MX_UART5_Init+0x4c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c0:	4b06      	ldr	r3, [pc, #24]	@ (80011dc <MX_UART5_Init+0x4c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80011c6:	4805      	ldr	r0, [pc, #20]	@ (80011dc <MX_UART5_Init+0x4c>)
 80011c8:	f004 fddc 	bl	8005d84 <HAL_UART_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80011d2:	f7ff fd2d 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */
 // HAL_UART_Receive_IT(&huart5, &uart5_rx_byte, UART5_RX_BUF_LEN);
  /* USER CODE END UART5_Init 2 */

}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000510 	.word	0x20000510
 80011e0:	40005000 	.word	0x40005000

080011e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08a      	sub	sp, #40	@ 0x28
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a5c      	ldr	r2, [pc, #368]	@ (8001374 <HAL_UART_MspInit+0x190>)
 8001202:	4293      	cmp	r3, r2
 8001204:	f040 80b1 	bne.w	800136a <HAL_UART_MspInit+0x186>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001208:	2300      	movs	r3, #0
 800120a:	613b      	str	r3, [r7, #16]
 800120c:	4b5a      	ldr	r3, [pc, #360]	@ (8001378 <HAL_UART_MspInit+0x194>)
 800120e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001210:	4a59      	ldr	r2, [pc, #356]	@ (8001378 <HAL_UART_MspInit+0x194>)
 8001212:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001216:	6413      	str	r3, [r2, #64]	@ 0x40
 8001218:	4b57      	ldr	r3, [pc, #348]	@ (8001378 <HAL_UART_MspInit+0x194>)
 800121a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001220:	613b      	str	r3, [r7, #16]
 8001222:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001224:	2300      	movs	r3, #0
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	4b53      	ldr	r3, [pc, #332]	@ (8001378 <HAL_UART_MspInit+0x194>)
 800122a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122c:	4a52      	ldr	r2, [pc, #328]	@ (8001378 <HAL_UART_MspInit+0x194>)
 800122e:	f043 0304 	orr.w	r3, r3, #4
 8001232:	6313      	str	r3, [r2, #48]	@ 0x30
 8001234:	4b50      	ldr	r3, [pc, #320]	@ (8001378 <HAL_UART_MspInit+0x194>)
 8001236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001238:	f003 0304 	and.w	r3, r3, #4
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001240:	2300      	movs	r3, #0
 8001242:	60bb      	str	r3, [r7, #8]
 8001244:	4b4c      	ldr	r3, [pc, #304]	@ (8001378 <HAL_UART_MspInit+0x194>)
 8001246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001248:	4a4b      	ldr	r2, [pc, #300]	@ (8001378 <HAL_UART_MspInit+0x194>)
 800124a:	f043 0308 	orr.w	r3, r3, #8
 800124e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001250:	4b49      	ldr	r3, [pc, #292]	@ (8001378 <HAL_UART_MspInit+0x194>)
 8001252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001254:	f003 0308 	and.w	r3, r3, #8
 8001258:	60bb      	str	r3, [r7, #8]
 800125a:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800125c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001260:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001262:	2302      	movs	r3, #2
 8001264:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800126a:	2303      	movs	r3, #3
 800126c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800126e:	2308      	movs	r3, #8
 8001270:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001272:	f107 0314 	add.w	r3, r7, #20
 8001276:	4619      	mov	r1, r3
 8001278:	4840      	ldr	r0, [pc, #256]	@ (800137c <HAL_UART_MspInit+0x198>)
 800127a:	f001 fd83 	bl	8002d84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800127e:	2304      	movs	r3, #4
 8001280:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001282:	2302      	movs	r3, #2
 8001284:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128a:	2303      	movs	r3, #3
 800128c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800128e:	2308      	movs	r3, #8
 8001290:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001292:	f107 0314 	add.w	r3, r7, #20
 8001296:	4619      	mov	r1, r3
 8001298:	4839      	ldr	r0, [pc, #228]	@ (8001380 <HAL_UART_MspInit+0x19c>)
 800129a:	f001 fd73 	bl	8002d84 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream7;
 800129e:	4b39      	ldr	r3, [pc, #228]	@ (8001384 <HAL_UART_MspInit+0x1a0>)
 80012a0:	4a39      	ldr	r2, [pc, #228]	@ (8001388 <HAL_UART_MspInit+0x1a4>)
 80012a2:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 80012a4:	4b37      	ldr	r3, [pc, #220]	@ (8001384 <HAL_UART_MspInit+0x1a0>)
 80012a6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80012aa:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012ac:	4b35      	ldr	r3, [pc, #212]	@ (8001384 <HAL_UART_MspInit+0x1a0>)
 80012ae:	2240      	movs	r2, #64	@ 0x40
 80012b0:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012b2:	4b34      	ldr	r3, [pc, #208]	@ (8001384 <HAL_UART_MspInit+0x1a0>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012b8:	4b32      	ldr	r3, [pc, #200]	@ (8001384 <HAL_UART_MspInit+0x1a0>)
 80012ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012be:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012c0:	4b30      	ldr	r3, [pc, #192]	@ (8001384 <HAL_UART_MspInit+0x1a0>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012c6:	4b2f      	ldr	r3, [pc, #188]	@ (8001384 <HAL_UART_MspInit+0x1a0>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 80012cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001384 <HAL_UART_MspInit+0x1a0>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80012d2:	4b2c      	ldr	r3, [pc, #176]	@ (8001384 <HAL_UART_MspInit+0x1a0>)
 80012d4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80012d8:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012da:	4b2a      	ldr	r3, [pc, #168]	@ (8001384 <HAL_UART_MspInit+0x1a0>)
 80012dc:	2200      	movs	r2, #0
 80012de:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 80012e0:	4828      	ldr	r0, [pc, #160]	@ (8001384 <HAL_UART_MspInit+0x1a0>)
 80012e2:	f001 f975 	bl	80025d0 <HAL_DMA_Init>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 80012ec:	f7ff fca0 	bl	8000c30 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a24      	ldr	r2, [pc, #144]	@ (8001384 <HAL_UART_MspInit+0x1a0>)
 80012f4:	639a      	str	r2, [r3, #56]	@ 0x38
 80012f6:	4a23      	ldr	r2, [pc, #140]	@ (8001384 <HAL_UART_MspInit+0x1a0>)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 80012fc:	4b23      	ldr	r3, [pc, #140]	@ (800138c <HAL_UART_MspInit+0x1a8>)
 80012fe:	4a24      	ldr	r2, [pc, #144]	@ (8001390 <HAL_UART_MspInit+0x1ac>)
 8001300:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8001302:	4b22      	ldr	r3, [pc, #136]	@ (800138c <HAL_UART_MspInit+0x1a8>)
 8001304:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001308:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800130a:	4b20      	ldr	r3, [pc, #128]	@ (800138c <HAL_UART_MspInit+0x1a8>)
 800130c:	2200      	movs	r2, #0
 800130e:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001310:	4b1e      	ldr	r3, [pc, #120]	@ (800138c <HAL_UART_MspInit+0x1a8>)
 8001312:	2200      	movs	r2, #0
 8001314:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001316:	4b1d      	ldr	r3, [pc, #116]	@ (800138c <HAL_UART_MspInit+0x1a8>)
 8001318:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800131c:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800131e:	4b1b      	ldr	r3, [pc, #108]	@ (800138c <HAL_UART_MspInit+0x1a8>)
 8001320:	2200      	movs	r2, #0
 8001322:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001324:	4b19      	ldr	r3, [pc, #100]	@ (800138c <HAL_UART_MspInit+0x1a8>)
 8001326:	2200      	movs	r2, #0
 8001328:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 800132a:	4b18      	ldr	r3, [pc, #96]	@ (800138c <HAL_UART_MspInit+0x1a8>)
 800132c:	2200      	movs	r2, #0
 800132e:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001330:	4b16      	ldr	r3, [pc, #88]	@ (800138c <HAL_UART_MspInit+0x1a8>)
 8001332:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001336:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001338:	4b14      	ldr	r3, [pc, #80]	@ (800138c <HAL_UART_MspInit+0x1a8>)
 800133a:	2200      	movs	r2, #0
 800133c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800133e:	4813      	ldr	r0, [pc, #76]	@ (800138c <HAL_UART_MspInit+0x1a8>)
 8001340:	f001 f946 	bl	80025d0 <HAL_DMA_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 800134a:	f7ff fc71 	bl	8000c30 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a0e      	ldr	r2, [pc, #56]	@ (800138c <HAL_UART_MspInit+0x1a8>)
 8001352:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001354:	4a0d      	ldr	r2, [pc, #52]	@ (800138c <HAL_UART_MspInit+0x1a8>)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800135a:	2200      	movs	r2, #0
 800135c:	2100      	movs	r1, #0
 800135e:	2035      	movs	r0, #53	@ 0x35
 8001360:	f001 f8f1 	bl	8002546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001364:	2035      	movs	r0, #53	@ 0x35
 8001366:	f001 f90a 	bl	800257e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 800136a:	bf00      	nop
 800136c:	3728      	adds	r7, #40	@ 0x28
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40005000 	.word	0x40005000
 8001378:	40023800 	.word	0x40023800
 800137c:	40020800 	.word	0x40020800
 8001380:	40020c00 	.word	0x40020c00
 8001384:	20000558 	.word	0x20000558
 8001388:	400260b8 	.word	0x400260b8
 800138c:	200005b8 	.word	0x200005b8
 8001390:	40026010 	.word	0x40026010

08001394 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==UART5)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a11      	ldr	r2, [pc, #68]	@ (80013e8 <HAL_UART_MspDeInit+0x54>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d11b      	bne.n	80013de <HAL_UART_MspDeInit+0x4a>
  {
  /* USER CODE BEGIN UART5_MspDeInit 0 */

  /* USER CODE END UART5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART5_CLK_DISABLE();
 80013a6:	4b11      	ldr	r3, [pc, #68]	@ (80013ec <HAL_UART_MspDeInit+0x58>)
 80013a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013aa:	4a10      	ldr	r2, [pc, #64]	@ (80013ec <HAL_UART_MspDeInit+0x58>)
 80013ac:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80013b0:	6413      	str	r3, [r2, #64]	@ 0x40

    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12);
 80013b2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013b6:	480e      	ldr	r0, [pc, #56]	@ (80013f0 <HAL_UART_MspDeInit+0x5c>)
 80013b8:	f001 fe80 	bl	80030bc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_2);
 80013bc:	2104      	movs	r1, #4
 80013be:	480d      	ldr	r0, [pc, #52]	@ (80013f4 <HAL_UART_MspDeInit+0x60>)
 80013c0:	f001 fe7c 	bl	80030bc <HAL_GPIO_DeInit>

    /* UART5 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013c8:	4618      	mov	r0, r3
 80013ca:	f001 f9af 	bl	800272c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013d2:	4618      	mov	r0, r3
 80013d4:	f001 f9aa 	bl	800272c <HAL_DMA_DeInit>

    /* UART5 interrupt Deinit */
    HAL_NVIC_DisableIRQ(UART5_IRQn);
 80013d8:	2035      	movs	r0, #53	@ 0x35
 80013da:	f001 f8de 	bl	800259a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN UART5_MspDeInit 1 */

  /* USER CODE END UART5_MspDeInit 1 */
  }
}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40005000 	.word	0x40005000
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40020800 	.word	0x40020800
 80013f4:	40020c00 	.word	0x40020c00

080013f8 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80013fc:	4b14      	ldr	r3, [pc, #80]	@ (8001450 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013fe:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001402:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001404:	4b12      	ldr	r3, [pc, #72]	@ (8001450 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001406:	2204      	movs	r2, #4
 8001408:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800140a:	4b11      	ldr	r3, [pc, #68]	@ (8001450 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800140c:	2202      	movs	r2, #2
 800140e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001410:	4b0f      	ldr	r3, [pc, #60]	@ (8001450 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001412:	2200      	movs	r2, #0
 8001414:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001416:	4b0e      	ldr	r3, [pc, #56]	@ (8001450 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001418:	2202      	movs	r2, #2
 800141a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800141c:	4b0c      	ldr	r3, [pc, #48]	@ (8001450 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800141e:	2200      	movs	r2, #0
 8001420:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001422:	4b0b      	ldr	r3, [pc, #44]	@ (8001450 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001424:	2200      	movs	r2, #0
 8001426:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001428:	4b09      	ldr	r3, [pc, #36]	@ (8001450 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800142a:	2200      	movs	r2, #0
 800142c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800142e:	4b08      	ldr	r3, [pc, #32]	@ (8001450 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001430:	2200      	movs	r2, #0
 8001432:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001434:	4b06      	ldr	r3, [pc, #24]	@ (8001450 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001436:	2200      	movs	r2, #0
 8001438:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800143a:	4805      	ldr	r0, [pc, #20]	@ (8001450 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800143c:	f002 f8b2 	bl	80035a4 <HAL_PCD_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001446:	f7ff fbf3 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20000618 	.word	0x20000618

08001454 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08a      	sub	sp, #40	@ 0x28
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145c:	f107 0314 	add.w	r3, r7, #20
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001474:	d13a      	bne.n	80014ec <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	613b      	str	r3, [r7, #16]
 800147a:	4b1e      	ldr	r3, [pc, #120]	@ (80014f4 <HAL_PCD_MspInit+0xa0>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147e:	4a1d      	ldr	r2, [pc, #116]	@ (80014f4 <HAL_PCD_MspInit+0xa0>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	6313      	str	r3, [r2, #48]	@ 0x30
 8001486:	4b1b      	ldr	r3, [pc, #108]	@ (80014f4 <HAL_PCD_MspInit+0xa0>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	613b      	str	r3, [r7, #16]
 8001490:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001492:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001496:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001498:	2302      	movs	r3, #2
 800149a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a0:	2303      	movs	r3, #3
 80014a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80014a4:	230a      	movs	r3, #10
 80014a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a8:	f107 0314 	add.w	r3, r7, #20
 80014ac:	4619      	mov	r1, r3
 80014ae:	4812      	ldr	r0, [pc, #72]	@ (80014f8 <HAL_PCD_MspInit+0xa4>)
 80014b0:	f001 fc68 	bl	8002d84 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80014b4:	4b0f      	ldr	r3, [pc, #60]	@ (80014f4 <HAL_PCD_MspInit+0xa0>)
 80014b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014b8:	4a0e      	ldr	r2, [pc, #56]	@ (80014f4 <HAL_PCD_MspInit+0xa0>)
 80014ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014be:	6353      	str	r3, [r2, #52]	@ 0x34
 80014c0:	2300      	movs	r3, #0
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	4b0b      	ldr	r3, [pc, #44]	@ (80014f4 <HAL_PCD_MspInit+0xa0>)
 80014c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014c8:	4a0a      	ldr	r2, [pc, #40]	@ (80014f4 <HAL_PCD_MspInit+0xa0>)
 80014ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014ce:	6453      	str	r3, [r2, #68]	@ 0x44
 80014d0:	4b08      	ldr	r3, [pc, #32]	@ (80014f4 <HAL_PCD_MspInit+0xa0>)
 80014d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	68fb      	ldr	r3, [r7, #12]

    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80014dc:	2200      	movs	r2, #0
 80014de:	2100      	movs	r1, #0
 80014e0:	2043      	movs	r0, #67	@ 0x43
 80014e2:	f001 f830 	bl	8002546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80014e6:	2043      	movs	r0, #67	@ 0x43
 80014e8:	f001 f849 	bl	800257e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80014ec:	bf00      	nop
 80014ee:	3728      	adds	r7, #40	@ 0x28
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40023800 	.word	0x40023800
 80014f8:	40020000 	.word	0x40020000

080014fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80014fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001534 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001500:	f7ff fc84 	bl	8000e0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001504:	480c      	ldr	r0, [pc, #48]	@ (8001538 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001506:	490d      	ldr	r1, [pc, #52]	@ (800153c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001508:	4a0d      	ldr	r2, [pc, #52]	@ (8001540 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800150a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800150c:	e002      	b.n	8001514 <LoopCopyDataInit>

0800150e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800150e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001510:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001512:	3304      	adds	r3, #4

08001514 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001514:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001516:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001518:	d3f9      	bcc.n	800150e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800151a:	4a0a      	ldr	r2, [pc, #40]	@ (8001544 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800151c:	4c0a      	ldr	r4, [pc, #40]	@ (8001548 <LoopFillZerobss+0x22>)
  movs r3, #0
 800151e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001520:	e001      	b.n	8001526 <LoopFillZerobss>

08001522 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001522:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001524:	3204      	adds	r2, #4

08001526 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001526:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001528:	d3fb      	bcc.n	8001522 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800152a:	f00a fd2f 	bl	800bf8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800152e:	f7ff fa4b 	bl	80009c8 <main>
  bx  lr    
 8001532:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001534:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001538:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800153c:	200002f8 	.word	0x200002f8
  ldr r2, =_sidata
 8001540:	0800c944 	.word	0x0800c944
  ldr r2, =_sbss
 8001544:	200002f8 	.word	0x200002f8
  ldr r4, =_ebss
 8001548:	200027b0 	.word	0x200027b0

0800154c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800154c:	e7fe      	b.n	800154c <ADC_IRQHandler>
	...

08001550 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001554:	4b0e      	ldr	r3, [pc, #56]	@ (8001590 <HAL_Init+0x40>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a0d      	ldr	r2, [pc, #52]	@ (8001590 <HAL_Init+0x40>)
 800155a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800155e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001560:	4b0b      	ldr	r3, [pc, #44]	@ (8001590 <HAL_Init+0x40>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a0a      	ldr	r2, [pc, #40]	@ (8001590 <HAL_Init+0x40>)
 8001566:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800156a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800156c:	4b08      	ldr	r3, [pc, #32]	@ (8001590 <HAL_Init+0x40>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a07      	ldr	r2, [pc, #28]	@ (8001590 <HAL_Init+0x40>)
 8001572:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001576:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001578:	2003      	movs	r0, #3
 800157a:	f000 ffd9 	bl	8002530 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800157e:	200f      	movs	r0, #15
 8001580:	f000 f808 	bl	8001594 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001584:	f7ff fb5a 	bl	8000c3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40023c00 	.word	0x40023c00

08001594 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800159c:	4b12      	ldr	r3, [pc, #72]	@ (80015e8 <HAL_InitTick+0x54>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	4b12      	ldr	r3, [pc, #72]	@ (80015ec <HAL_InitTick+0x58>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	4619      	mov	r1, r3
 80015a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80015b2:	4618      	mov	r0, r3
 80015b4:	f000 ffff 	bl	80025b6 <HAL_SYSTICK_Config>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e00e      	b.n	80015e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2b0f      	cmp	r3, #15
 80015c6:	d80a      	bhi.n	80015de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015c8:	2200      	movs	r2, #0
 80015ca:	6879      	ldr	r1, [r7, #4]
 80015cc:	f04f 30ff 	mov.w	r0, #4294967295
 80015d0:	f000 ffb9 	bl	8002546 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015d4:	4a06      	ldr	r2, [pc, #24]	@ (80015f0 <HAL_InitTick+0x5c>)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015da:	2300      	movs	r3, #0
 80015dc:	e000      	b.n	80015e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20000000 	.word	0x20000000
 80015ec:	20000008 	.word	0x20000008
 80015f0:	20000004 	.word	0x20000004

080015f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015f8:	4b06      	ldr	r3, [pc, #24]	@ (8001614 <HAL_IncTick+0x20>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	461a      	mov	r2, r3
 80015fe:	4b06      	ldr	r3, [pc, #24]	@ (8001618 <HAL_IncTick+0x24>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4413      	add	r3, r2
 8001604:	4a04      	ldr	r2, [pc, #16]	@ (8001618 <HAL_IncTick+0x24>)
 8001606:	6013      	str	r3, [r2, #0]
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	20000008 	.word	0x20000008
 8001618:	20000afc 	.word	0x20000afc

0800161c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  return uwTick;
 8001620:	4b03      	ldr	r3, [pc, #12]	@ (8001630 <HAL_GetTick+0x14>)
 8001622:	681b      	ldr	r3, [r3, #0]
}
 8001624:	4618      	mov	r0, r3
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	20000afc 	.word	0x20000afc

08001634 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800163c:	f7ff ffee 	bl	800161c <HAL_GetTick>
 8001640:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800164c:	d005      	beq.n	800165a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800164e:	4b0a      	ldr	r3, [pc, #40]	@ (8001678 <HAL_Delay+0x44>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	461a      	mov	r2, r3
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	4413      	add	r3, r2
 8001658:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800165a:	bf00      	nop
 800165c:	f7ff ffde 	bl	800161c <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	68fa      	ldr	r2, [r7, #12]
 8001668:	429a      	cmp	r2, r3
 800166a:	d8f7      	bhi.n	800165c <HAL_Delay+0x28>
  {
  }
}
 800166c:	bf00      	nop
 800166e:	bf00      	nop
 8001670:	3710      	adds	r7, #16
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000008 	.word	0x20000008

0800167c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d101      	bne.n	800168e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e0ed      	b.n	800186a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b00      	cmp	r3, #0
 8001698:	d102      	bne.n	80016a0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f7fe ffb4 	bl	8000608 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f042 0201 	orr.w	r2, r2, #1
 80016ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016b0:	f7ff ffb4 	bl	800161c <HAL_GetTick>
 80016b4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80016b6:	e012      	b.n	80016de <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016b8:	f7ff ffb0 	bl	800161c <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b0a      	cmp	r3, #10
 80016c4:	d90b      	bls.n	80016de <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ca:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2205      	movs	r2, #5
 80016d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e0c5      	b.n	800186a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f003 0301 	and.w	r3, r3, #1
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d0e5      	beq.n	80016b8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f022 0202 	bic.w	r2, r2, #2
 80016fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016fc:	f7ff ff8e 	bl	800161c <HAL_GetTick>
 8001700:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001702:	e012      	b.n	800172a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001704:	f7ff ff8a 	bl	800161c <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b0a      	cmp	r3, #10
 8001710:	d90b      	bls.n	800172a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001716:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2205      	movs	r2, #5
 8001722:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e09f      	b.n	800186a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d1e5      	bne.n	8001704 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	7e1b      	ldrb	r3, [r3, #24]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d108      	bne.n	8001752 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	e007      	b.n	8001762 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001760:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	7e5b      	ldrb	r3, [r3, #25]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d108      	bne.n	800177c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	e007      	b.n	800178c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800178a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	7e9b      	ldrb	r3, [r3, #26]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d108      	bne.n	80017a6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f042 0220 	orr.w	r2, r2, #32
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	e007      	b.n	80017b6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f022 0220 	bic.w	r2, r2, #32
 80017b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	7edb      	ldrb	r3, [r3, #27]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d108      	bne.n	80017d0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f022 0210 	bic.w	r2, r2, #16
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	e007      	b.n	80017e0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f042 0210 	orr.w	r2, r2, #16
 80017de:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	7f1b      	ldrb	r3, [r3, #28]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d108      	bne.n	80017fa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f042 0208 	orr.w	r2, r2, #8
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	e007      	b.n	800180a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f022 0208 	bic.w	r2, r2, #8
 8001808:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	7f5b      	ldrb	r3, [r3, #29]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d108      	bne.n	8001824 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f042 0204 	orr.w	r2, r2, #4
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	e007      	b.n	8001834 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f022 0204 	bic.w	r2, r2, #4
 8001832:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689a      	ldr	r2, [r3, #8]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	431a      	orrs	r2, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	691b      	ldr	r3, [r3, #16]
 8001842:	431a      	orrs	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	695b      	ldr	r3, [r3, #20]
 8001848:	ea42 0103 	orr.w	r1, r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	1e5a      	subs	r2, r3, #1
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	430a      	orrs	r2, r1
 8001858:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2201      	movs	r2, #1
 8001864:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
	...

08001874 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001874:	b480      	push	{r7}
 8001876:	b087      	sub	sp, #28
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001884:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 8001886:	7dfb      	ldrb	r3, [r7, #23]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d003      	beq.n	8001894 <HAL_CAN_ConfigFilter+0x20>
 800188c:	7dfb      	ldrb	r3, [r7, #23]
 800188e:	2b02      	cmp	r3, #2
 8001890:	f040 80be 	bne.w	8001a10 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001894:	4b65      	ldr	r3, [pc, #404]	@ (8001a2c <HAL_CAN_ConfigFilter+0x1b8>)
 8001896:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800189e:	f043 0201 	orr.w	r2, r3, #1
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80018ae:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c2:	021b      	lsls	r3, r3, #8
 80018c4:	431a      	orrs	r2, r3
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	695b      	ldr	r3, [r3, #20]
 80018d0:	f003 031f 	and.w	r3, r3, #31
 80018d4:	2201      	movs	r2, #1
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	43db      	mvns	r3, r3
 80018e6:	401a      	ands	r2, r3
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	69db      	ldr	r3, [r3, #28]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d123      	bne.n	800193e <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	43db      	mvns	r3, r3
 8001900:	401a      	ands	r2, r3
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001918:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	3248      	adds	r2, #72	@ 0x48
 800191e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001932:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001934:	6939      	ldr	r1, [r7, #16]
 8001936:	3348      	adds	r3, #72	@ 0x48
 8001938:	00db      	lsls	r3, r3, #3
 800193a:	440b      	add	r3, r1
 800193c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	69db      	ldr	r3, [r3, #28]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d122      	bne.n	800198c <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	431a      	orrs	r2, r3
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001962:	683a      	ldr	r2, [r7, #0]
 8001964:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001966:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	3248      	adds	r2, #72	@ 0x48
 800196c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001980:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001982:	6939      	ldr	r1, [r7, #16]
 8001984:	3348      	adds	r3, #72	@ 0x48
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	440b      	add	r3, r1
 800198a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d109      	bne.n	80019a8 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	43db      	mvns	r3, r3
 800199e:	401a      	ands	r2, r3
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80019a6:	e007      	b.n	80019b8 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	431a      	orrs	r2, r3
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	691b      	ldr	r3, [r3, #16]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d109      	bne.n	80019d4 <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	43db      	mvns	r3, r3
 80019ca:	401a      	ands	r2, r3
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80019d2:	e007      	b.n	80019e4 <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	431a      	orrs	r2, r3
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	6a1b      	ldr	r3, [r3, #32]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d107      	bne.n	80019fc <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	431a      	orrs	r2, r3
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001a02:	f023 0201 	bic.w	r2, r3, #1
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	e006      	b.n	8001a1e <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a14:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
  }
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	371c      	adds	r7, #28
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	40006400 	.word	0x40006400

08001a30 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d12e      	bne.n	8001aa2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2202      	movs	r2, #2
 8001a48:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f022 0201 	bic.w	r2, r2, #1
 8001a5a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001a5c:	f7ff fdde 	bl	800161c <HAL_GetTick>
 8001a60:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a62:	e012      	b.n	8001a8a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a64:	f7ff fdda 	bl	800161c <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b0a      	cmp	r3, #10
 8001a70:	d90b      	bls.n	8001a8a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a76:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2205      	movs	r2, #5
 8001a82:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e012      	b.n	8001ab0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f003 0301 	and.w	r3, r3, #1
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d1e5      	bne.n	8001a64 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	e006      	b.n	8001ab0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa6:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
  }
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b089      	sub	sp, #36	@ 0x24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
 8001ac4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001acc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ad6:	7ffb      	ldrb	r3, [r7, #31]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d003      	beq.n	8001ae4 <HAL_CAN_AddTxMessage+0x2c>
 8001adc:	7ffb      	ldrb	r3, [r7, #31]
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	f040 80ad 	bne.w	8001c3e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d10a      	bne.n	8001b04 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d105      	bne.n	8001b04 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f000 8095 	beq.w	8001c2e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	0e1b      	lsrs	r3, r3, #24
 8001b08:	f003 0303 	and.w	r3, r3, #3
 8001b0c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001b0e:	2201      	movs	r2, #1
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	409a      	lsls	r2, r3
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d10d      	bne.n	8001b3c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001b2a:	68f9      	ldr	r1, [r7, #12]
 8001b2c:	6809      	ldr	r1, [r1, #0]
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	3318      	adds	r3, #24
 8001b34:	011b      	lsls	r3, r3, #4
 8001b36:	440b      	add	r3, r1
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	e00f      	b.n	8001b5c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b46:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b4c:	68f9      	ldr	r1, [r7, #12]
 8001b4e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001b50:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	3318      	adds	r3, #24
 8001b56:	011b      	lsls	r3, r3, #4
 8001b58:	440b      	add	r3, r1
 8001b5a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6819      	ldr	r1, [r3, #0]
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	691a      	ldr	r2, [r3, #16]
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	3318      	adds	r3, #24
 8001b68:	011b      	lsls	r3, r3, #4
 8001b6a:	440b      	add	r3, r1
 8001b6c:	3304      	adds	r3, #4
 8001b6e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	7d1b      	ldrb	r3, [r3, #20]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d111      	bne.n	8001b9c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	3318      	adds	r3, #24
 8001b80:	011b      	lsls	r3, r3, #4
 8001b82:	4413      	add	r3, r2
 8001b84:	3304      	adds	r3, #4
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	68fa      	ldr	r2, [r7, #12]
 8001b8a:	6811      	ldr	r1, [r2, #0]
 8001b8c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	3318      	adds	r3, #24
 8001b94:	011b      	lsls	r3, r3, #4
 8001b96:	440b      	add	r3, r1
 8001b98:	3304      	adds	r3, #4
 8001b9a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3307      	adds	r3, #7
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	061a      	lsls	r2, r3, #24
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3306      	adds	r3, #6
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	041b      	lsls	r3, r3, #16
 8001bac:	431a      	orrs	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	3305      	adds	r3, #5
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	021b      	lsls	r3, r3, #8
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	3204      	adds	r2, #4
 8001bbc:	7812      	ldrb	r2, [r2, #0]
 8001bbe:	4610      	mov	r0, r2
 8001bc0:	68fa      	ldr	r2, [r7, #12]
 8001bc2:	6811      	ldr	r1, [r2, #0]
 8001bc4:	ea43 0200 	orr.w	r2, r3, r0
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	011b      	lsls	r3, r3, #4
 8001bcc:	440b      	add	r3, r1
 8001bce:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001bd2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3303      	adds	r3, #3
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	061a      	lsls	r2, r3, #24
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3302      	adds	r3, #2
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	041b      	lsls	r3, r3, #16
 8001be4:	431a      	orrs	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	3301      	adds	r3, #1
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	021b      	lsls	r3, r3, #8
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	7812      	ldrb	r2, [r2, #0]
 8001bf4:	4610      	mov	r0, r2
 8001bf6:	68fa      	ldr	r2, [r7, #12]
 8001bf8:	6811      	ldr	r1, [r2, #0]
 8001bfa:	ea43 0200 	orr.w	r2, r3, r0
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	011b      	lsls	r3, r3, #4
 8001c02:	440b      	add	r3, r1
 8001c04:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001c08:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	3318      	adds	r3, #24
 8001c12:	011b      	lsls	r3, r3, #4
 8001c14:	4413      	add	r3, r2
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	68fa      	ldr	r2, [r7, #12]
 8001c1a:	6811      	ldr	r1, [r2, #0]
 8001c1c:	f043 0201 	orr.w	r2, r3, #1
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	3318      	adds	r3, #24
 8001c24:	011b      	lsls	r3, r3, #4
 8001c26:	440b      	add	r3, r1
 8001c28:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	e00e      	b.n	8001c4c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c32:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e006      	b.n	8001c4c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c42:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
  }
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3724      	adds	r7, #36	@ 0x24
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b087      	sub	sp, #28
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
 8001c64:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c6c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c6e:	7dfb      	ldrb	r3, [r7, #23]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d003      	beq.n	8001c7c <HAL_CAN_GetRxMessage+0x24>
 8001c74:	7dfb      	ldrb	r3, [r7, #23]
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	f040 8103 	bne.w	8001e82 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d10e      	bne.n	8001ca0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	f003 0303 	and.w	r3, r3, #3
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d116      	bne.n	8001cbe <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c94:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e0f7      	b.n	8001e90 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	691b      	ldr	r3, [r3, #16]
 8001ca6:	f003 0303 	and.w	r3, r3, #3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d107      	bne.n	8001cbe <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e0e8      	b.n	8001e90 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	331b      	adds	r3, #27
 8001cc6:	011b      	lsls	r3, r3, #4
 8001cc8:	4413      	add	r3, r2
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0204 	and.w	r2, r3, #4
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d10c      	bne.n	8001cf6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	331b      	adds	r3, #27
 8001ce4:	011b      	lsls	r3, r3, #4
 8001ce6:	4413      	add	r3, r2
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	0d5b      	lsrs	r3, r3, #21
 8001cec:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	e00b      	b.n	8001d0e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	331b      	adds	r3, #27
 8001cfe:	011b      	lsls	r3, r3, #4
 8001d00:	4413      	add	r3, r2
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	08db      	lsrs	r3, r3, #3
 8001d06:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	331b      	adds	r3, #27
 8001d16:	011b      	lsls	r3, r3, #4
 8001d18:	4413      	add	r3, r2
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0202 	and.w	r2, r3, #2
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	331b      	adds	r3, #27
 8001d2c:	011b      	lsls	r3, r3, #4
 8001d2e:	4413      	add	r3, r2
 8001d30:	3304      	adds	r3, #4
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0308 	and.w	r3, r3, #8
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d003      	beq.n	8001d44 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2208      	movs	r2, #8
 8001d40:	611a      	str	r2, [r3, #16]
 8001d42:	e00b      	b.n	8001d5c <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	331b      	adds	r3, #27
 8001d4c:	011b      	lsls	r3, r3, #4
 8001d4e:	4413      	add	r3, r2
 8001d50:	3304      	adds	r3, #4
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 020f 	and.w	r2, r3, #15
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	331b      	adds	r3, #27
 8001d64:	011b      	lsls	r3, r3, #4
 8001d66:	4413      	add	r3, r2
 8001d68:	3304      	adds	r3, #4
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	0a1b      	lsrs	r3, r3, #8
 8001d6e:	b2da      	uxtb	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	331b      	adds	r3, #27
 8001d7c:	011b      	lsls	r3, r3, #4
 8001d7e:	4413      	add	r3, r2
 8001d80:	3304      	adds	r3, #4
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	0c1b      	lsrs	r3, r3, #16
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	011b      	lsls	r3, r3, #4
 8001d94:	4413      	add	r3, r2
 8001d96:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	011b      	lsls	r3, r3, #4
 8001daa:	4413      	add	r3, r2
 8001dac:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	0a1a      	lsrs	r2, r3, #8
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	3301      	adds	r3, #1
 8001db8:	b2d2      	uxtb	r2, r2
 8001dba:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	011b      	lsls	r3, r3, #4
 8001dc4:	4413      	add	r3, r2
 8001dc6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	0c1a      	lsrs	r2, r3, #16
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	3302      	adds	r3, #2
 8001dd2:	b2d2      	uxtb	r2, r2
 8001dd4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	011b      	lsls	r3, r3, #4
 8001dde:	4413      	add	r3, r2
 8001de0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	0e1a      	lsrs	r2, r3, #24
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	3303      	adds	r3, #3
 8001dec:	b2d2      	uxtb	r2, r2
 8001dee:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	011b      	lsls	r3, r3, #4
 8001df8:	4413      	add	r3, r2
 8001dfa:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	3304      	adds	r3, #4
 8001e04:	b2d2      	uxtb	r2, r2
 8001e06:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	011b      	lsls	r3, r3, #4
 8001e10:	4413      	add	r3, r2
 8001e12:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	0a1a      	lsrs	r2, r3, #8
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	3305      	adds	r3, #5
 8001e1e:	b2d2      	uxtb	r2, r2
 8001e20:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	011b      	lsls	r3, r3, #4
 8001e2a:	4413      	add	r3, r2
 8001e2c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	0c1a      	lsrs	r2, r3, #16
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	3306      	adds	r3, #6
 8001e38:	b2d2      	uxtb	r2, r2
 8001e3a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	011b      	lsls	r3, r3, #4
 8001e44:	4413      	add	r3, r2
 8001e46:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	0e1a      	lsrs	r2, r3, #24
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	3307      	adds	r3, #7
 8001e52:	b2d2      	uxtb	r2, r2
 8001e54:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d108      	bne.n	8001e6e <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68da      	ldr	r2, [r3, #12]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f042 0220 	orr.w	r2, r2, #32
 8001e6a:	60da      	str	r2, [r3, #12]
 8001e6c:	e007      	b.n	8001e7e <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	691a      	ldr	r2, [r3, #16]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f042 0220 	orr.w	r2, r2, #32
 8001e7c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	e006      	b.n	8001e90 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e86:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
  }
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	371c      	adds	r7, #28
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eac:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001eae:	7bfb      	ldrb	r3, [r7, #15]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d002      	beq.n	8001eba <HAL_CAN_ActivateNotification+0x1e>
 8001eb4:	7bfb      	ldrb	r3, [r7, #15]
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d109      	bne.n	8001ece <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	6959      	ldr	r1, [r3, #20]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	e006      	b.n	8001edc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
  }
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3714      	adds	r7, #20
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b08a      	sub	sp, #40	@ 0x28
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001f24:	6a3b      	ldr	r3, [r7, #32]
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d07c      	beq.n	8002028 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	f003 0301 	and.w	r3, r3, #1
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d023      	beq.n	8001f80 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f983 	bl	8002256 <HAL_CAN_TxMailbox0CompleteCallback>
 8001f50:	e016      	b.n	8001f80 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	f003 0304 	and.w	r3, r3, #4
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d004      	beq.n	8001f66 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f5e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f62:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f64:	e00c      	b.n	8001f80 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	f003 0308 	and.w	r3, r3, #8
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d004      	beq.n	8001f7a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f72:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f76:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f78:	e002      	b.n	8001f80 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f989 	bl	8002292 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d024      	beq.n	8001fd4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f92:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 f963 	bl	800226a <HAL_CAN_TxMailbox1CompleteCallback>
 8001fa4:	e016      	b.n	8001fd4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d004      	beq.n	8001fba <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001fb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fb8:	e00c      	b.n	8001fd4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d004      	beq.n	8001fce <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fca:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fcc:	e002      	b.n	8001fd4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 f969 	bl	80022a6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d024      	beq.n	8002028 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001fe6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f943 	bl	800227e <HAL_CAN_TxMailbox2CompleteCallback>
 8001ff8:	e016      	b.n	8002028 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d004      	beq.n	800200e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002006:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800200a:	627b      	str	r3, [r7, #36]	@ 0x24
 800200c:	e00c      	b.n	8002028 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d004      	beq.n	8002022 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800201e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002020:	e002      	b.n	8002028 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 f949 	bl	80022ba <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002028:	6a3b      	ldr	r3, [r7, #32]
 800202a:	f003 0308 	and.w	r3, r3, #8
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00c      	beq.n	800204c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	f003 0310 	and.w	r3, r3, #16
 8002038:	2b00      	cmp	r3, #0
 800203a:	d007      	beq.n	800204c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800203c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800203e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002042:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2210      	movs	r2, #16
 800204a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800204c:	6a3b      	ldr	r3, [r7, #32]
 800204e:	f003 0304 	and.w	r3, r3, #4
 8002052:	2b00      	cmp	r3, #0
 8002054:	d00b      	beq.n	800206e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	f003 0308 	and.w	r3, r3, #8
 800205c:	2b00      	cmp	r3, #0
 800205e:	d006      	beq.n	800206e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2208      	movs	r2, #8
 8002066:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 f930 	bl	80022ce <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800206e:	6a3b      	ldr	r3, [r7, #32]
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d009      	beq.n	800208c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d002      	beq.n	800208c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f7fe fd38 	bl	8000afc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800208c:	6a3b      	ldr	r3, [r7, #32]
 800208e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00c      	beq.n	80020b0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	f003 0310 	and.w	r3, r3, #16
 800209c:	2b00      	cmp	r3, #0
 800209e:	d007      	beq.n	80020b0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80020a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020a6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2210      	movs	r2, #16
 80020ae:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80020b0:	6a3b      	ldr	r3, [r7, #32]
 80020b2:	f003 0320 	and.w	r3, r3, #32
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00b      	beq.n	80020d2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	f003 0308 	and.w	r3, r3, #8
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d006      	beq.n	80020d2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2208      	movs	r2, #8
 80020ca:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f000 f912 	bl	80022f6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80020d2:	6a3b      	ldr	r3, [r7, #32]
 80020d4:	f003 0310 	and.w	r3, r3, #16
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d009      	beq.n	80020f0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	f003 0303 	and.w	r3, r3, #3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d002      	beq.n	80020f0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 f8f9 	bl	80022e2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80020f0:	6a3b      	ldr	r3, [r7, #32]
 80020f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d00b      	beq.n	8002112 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	f003 0310 	and.w	r3, r3, #16
 8002100:	2b00      	cmp	r3, #0
 8002102:	d006      	beq.n	8002112 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2210      	movs	r2, #16
 800210a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f000 f8fc 	bl	800230a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002112:	6a3b      	ldr	r3, [r7, #32]
 8002114:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d00b      	beq.n	8002134 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	f003 0308 	and.w	r3, r3, #8
 8002122:	2b00      	cmp	r3, #0
 8002124:	d006      	beq.n	8002134 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2208      	movs	r2, #8
 800212c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 f8f5 	bl	800231e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002134:	6a3b      	ldr	r3, [r7, #32]
 8002136:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d07b      	beq.n	8002236 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	2b00      	cmp	r3, #0
 8002146:	d072      	beq.n	800222e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002148:	6a3b      	ldr	r3, [r7, #32]
 800214a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800214e:	2b00      	cmp	r3, #0
 8002150:	d008      	beq.n	8002164 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002158:	2b00      	cmp	r3, #0
 800215a:	d003      	beq.n	8002164 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800215c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800215e:	f043 0301 	orr.w	r3, r3, #1
 8002162:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002164:	6a3b      	ldr	r3, [r7, #32]
 8002166:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800216a:	2b00      	cmp	r3, #0
 800216c:	d008      	beq.n	8002180 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002174:	2b00      	cmp	r3, #0
 8002176:	d003      	beq.n	8002180 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800217a:	f043 0302 	orr.w	r3, r3, #2
 800217e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002180:	6a3b      	ldr	r3, [r7, #32]
 8002182:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002186:	2b00      	cmp	r3, #0
 8002188:	d008      	beq.n	800219c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002190:	2b00      	cmp	r3, #0
 8002192:	d003      	beq.n	800219c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002196:	f043 0304 	orr.w	r3, r3, #4
 800219a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800219c:	6a3b      	ldr	r3, [r7, #32]
 800219e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d043      	beq.n	800222e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d03e      	beq.n	800222e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80021b6:	2b60      	cmp	r3, #96	@ 0x60
 80021b8:	d02b      	beq.n	8002212 <HAL_CAN_IRQHandler+0x32a>
 80021ba:	2b60      	cmp	r3, #96	@ 0x60
 80021bc:	d82e      	bhi.n	800221c <HAL_CAN_IRQHandler+0x334>
 80021be:	2b50      	cmp	r3, #80	@ 0x50
 80021c0:	d022      	beq.n	8002208 <HAL_CAN_IRQHandler+0x320>
 80021c2:	2b50      	cmp	r3, #80	@ 0x50
 80021c4:	d82a      	bhi.n	800221c <HAL_CAN_IRQHandler+0x334>
 80021c6:	2b40      	cmp	r3, #64	@ 0x40
 80021c8:	d019      	beq.n	80021fe <HAL_CAN_IRQHandler+0x316>
 80021ca:	2b40      	cmp	r3, #64	@ 0x40
 80021cc:	d826      	bhi.n	800221c <HAL_CAN_IRQHandler+0x334>
 80021ce:	2b30      	cmp	r3, #48	@ 0x30
 80021d0:	d010      	beq.n	80021f4 <HAL_CAN_IRQHandler+0x30c>
 80021d2:	2b30      	cmp	r3, #48	@ 0x30
 80021d4:	d822      	bhi.n	800221c <HAL_CAN_IRQHandler+0x334>
 80021d6:	2b10      	cmp	r3, #16
 80021d8:	d002      	beq.n	80021e0 <HAL_CAN_IRQHandler+0x2f8>
 80021da:	2b20      	cmp	r3, #32
 80021dc:	d005      	beq.n	80021ea <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80021de:	e01d      	b.n	800221c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80021e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e2:	f043 0308 	orr.w	r3, r3, #8
 80021e6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021e8:	e019      	b.n	800221e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80021ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ec:	f043 0310 	orr.w	r3, r3, #16
 80021f0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021f2:	e014      	b.n	800221e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80021f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f6:	f043 0320 	orr.w	r3, r3, #32
 80021fa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021fc:	e00f      	b.n	800221e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80021fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002200:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002204:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002206:	e00a      	b.n	800221e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800220e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002210:	e005      	b.n	800221e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002214:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002218:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800221a:	e000      	b.n	800221e <HAL_CAN_IRQHandler+0x336>
            break;
 800221c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	699a      	ldr	r2, [r3, #24]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800222c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2204      	movs	r2, #4
 8002234:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002238:	2b00      	cmp	r3, #0
 800223a:	d008      	beq.n	800224e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002242:	431a      	orrs	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f000 f872 	bl	8002332 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800224e:	bf00      	nop
 8002250:	3728      	adds	r7, #40	@ 0x28
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002256:	b480      	push	{r7}
 8002258:	b083      	sub	sp, #12
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800225e:	bf00      	nop
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr

0800226a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800226a:	b480      	push	{r7}
 800226c:	b083      	sub	sp, #12
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002272:	bf00      	nop
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800227e:	b480      	push	{r7}
 8002280:	b083      	sub	sp, #12
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002286:	bf00      	nop
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002292:	b480      	push	{r7}
 8002294:	b083      	sub	sp, #12
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80022a6:	b480      	push	{r7}
 80022a8:	b083      	sub	sp, #12
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80022ae:	bf00      	nop
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr

080022ba <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80022ba:	b480      	push	{r7}
 80022bc:	b083      	sub	sp, #12
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80022c2:	bf00      	nop
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80022d6:	bf00      	nop
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr

080022e2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80022e2:	b480      	push	{r7}
 80022e4:	b083      	sub	sp, #12
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80022ea:	bf00      	nop
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80022f6:	b480      	push	{r7}
 80022f8:	b083      	sub	sp, #12
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80022fe:	bf00      	nop
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr

0800230a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800230a:	b480      	push	{r7}
 800230c:	b083      	sub	sp, #12
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002312:	bf00      	nop
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800231e:	b480      	push	{r7}
 8002320:	b083      	sub	sp, #12
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002326:	bf00      	nop
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr

08002332 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002332:	b480      	push	{r7}
 8002334:	b083      	sub	sp, #12
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800233a:	bf00      	nop
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
	...

08002348 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f003 0307 	and.w	r3, r3, #7
 8002356:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002358:	4b0c      	ldr	r3, [pc, #48]	@ (800238c <__NVIC_SetPriorityGrouping+0x44>)
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800235e:	68ba      	ldr	r2, [r7, #8]
 8002360:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002364:	4013      	ands	r3, r2
 8002366:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002370:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002374:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002378:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800237a:	4a04      	ldr	r2, [pc, #16]	@ (800238c <__NVIC_SetPriorityGrouping+0x44>)
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	60d3      	str	r3, [r2, #12]
}
 8002380:	bf00      	nop
 8002382:	3714      	adds	r7, #20
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr
 800238c:	e000ed00 	.word	0xe000ed00

08002390 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002394:	4b04      	ldr	r3, [pc, #16]	@ (80023a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	0a1b      	lsrs	r3, r3, #8
 800239a:	f003 0307 	and.w	r3, r3, #7
}
 800239e:	4618      	mov	r0, r3
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	e000ed00 	.word	0xe000ed00

080023ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	4603      	mov	r3, r0
 80023b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	db0b      	blt.n	80023d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023be:	79fb      	ldrb	r3, [r7, #7]
 80023c0:	f003 021f 	and.w	r2, r3, #31
 80023c4:	4907      	ldr	r1, [pc, #28]	@ (80023e4 <__NVIC_EnableIRQ+0x38>)
 80023c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ca:	095b      	lsrs	r3, r3, #5
 80023cc:	2001      	movs	r0, #1
 80023ce:	fa00 f202 	lsl.w	r2, r0, r2
 80023d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023d6:	bf00      	nop
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	e000e100 	.word	0xe000e100

080023e8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	db12      	blt.n	8002420 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023fa:	79fb      	ldrb	r3, [r7, #7]
 80023fc:	f003 021f 	and.w	r2, r3, #31
 8002400:	490a      	ldr	r1, [pc, #40]	@ (800242c <__NVIC_DisableIRQ+0x44>)
 8002402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002406:	095b      	lsrs	r3, r3, #5
 8002408:	2001      	movs	r0, #1
 800240a:	fa00 f202 	lsl.w	r2, r0, r2
 800240e:	3320      	adds	r3, #32
 8002410:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002414:	f3bf 8f4f 	dsb	sy
}
 8002418:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800241a:	f3bf 8f6f 	isb	sy
}
 800241e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr
 800242c:	e000e100 	.word	0xe000e100

08002430 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	4603      	mov	r3, r0
 8002438:	6039      	str	r1, [r7, #0]
 800243a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800243c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002440:	2b00      	cmp	r3, #0
 8002442:	db0a      	blt.n	800245a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	b2da      	uxtb	r2, r3
 8002448:	490c      	ldr	r1, [pc, #48]	@ (800247c <__NVIC_SetPriority+0x4c>)
 800244a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244e:	0112      	lsls	r2, r2, #4
 8002450:	b2d2      	uxtb	r2, r2
 8002452:	440b      	add	r3, r1
 8002454:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002458:	e00a      	b.n	8002470 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	b2da      	uxtb	r2, r3
 800245e:	4908      	ldr	r1, [pc, #32]	@ (8002480 <__NVIC_SetPriority+0x50>)
 8002460:	79fb      	ldrb	r3, [r7, #7]
 8002462:	f003 030f 	and.w	r3, r3, #15
 8002466:	3b04      	subs	r3, #4
 8002468:	0112      	lsls	r2, r2, #4
 800246a:	b2d2      	uxtb	r2, r2
 800246c:	440b      	add	r3, r1
 800246e:	761a      	strb	r2, [r3, #24]
}
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	e000e100 	.word	0xe000e100
 8002480:	e000ed00 	.word	0xe000ed00

08002484 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002484:	b480      	push	{r7}
 8002486:	b089      	sub	sp, #36	@ 0x24
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	f1c3 0307 	rsb	r3, r3, #7
 800249e:	2b04      	cmp	r3, #4
 80024a0:	bf28      	it	cs
 80024a2:	2304      	movcs	r3, #4
 80024a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	3304      	adds	r3, #4
 80024aa:	2b06      	cmp	r3, #6
 80024ac:	d902      	bls.n	80024b4 <NVIC_EncodePriority+0x30>
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	3b03      	subs	r3, #3
 80024b2:	e000      	b.n	80024b6 <NVIC_EncodePriority+0x32>
 80024b4:	2300      	movs	r3, #0
 80024b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b8:	f04f 32ff 	mov.w	r2, #4294967295
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	43da      	mvns	r2, r3
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	401a      	ands	r2, r3
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024cc:	f04f 31ff 	mov.w	r1, #4294967295
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	fa01 f303 	lsl.w	r3, r1, r3
 80024d6:	43d9      	mvns	r1, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024dc:	4313      	orrs	r3, r2
         );
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3724      	adds	r7, #36	@ 0x24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
	...

080024ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	3b01      	subs	r3, #1
 80024f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024fc:	d301      	bcc.n	8002502 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024fe:	2301      	movs	r3, #1
 8002500:	e00f      	b.n	8002522 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002502:	4a0a      	ldr	r2, [pc, #40]	@ (800252c <SysTick_Config+0x40>)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3b01      	subs	r3, #1
 8002508:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800250a:	210f      	movs	r1, #15
 800250c:	f04f 30ff 	mov.w	r0, #4294967295
 8002510:	f7ff ff8e 	bl	8002430 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002514:	4b05      	ldr	r3, [pc, #20]	@ (800252c <SysTick_Config+0x40>)
 8002516:	2200      	movs	r2, #0
 8002518:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800251a:	4b04      	ldr	r3, [pc, #16]	@ (800252c <SysTick_Config+0x40>)
 800251c:	2207      	movs	r2, #7
 800251e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	e000e010 	.word	0xe000e010

08002530 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f7ff ff05 	bl	8002348 <__NVIC_SetPriorityGrouping>
}
 800253e:	bf00      	nop
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002546:	b580      	push	{r7, lr}
 8002548:	b086      	sub	sp, #24
 800254a:	af00      	add	r7, sp, #0
 800254c:	4603      	mov	r3, r0
 800254e:	60b9      	str	r1, [r7, #8]
 8002550:	607a      	str	r2, [r7, #4]
 8002552:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002554:	2300      	movs	r3, #0
 8002556:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002558:	f7ff ff1a 	bl	8002390 <__NVIC_GetPriorityGrouping>
 800255c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	68b9      	ldr	r1, [r7, #8]
 8002562:	6978      	ldr	r0, [r7, #20]
 8002564:	f7ff ff8e 	bl	8002484 <NVIC_EncodePriority>
 8002568:	4602      	mov	r2, r0
 800256a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800256e:	4611      	mov	r1, r2
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff ff5d 	bl	8002430 <__NVIC_SetPriority>
}
 8002576:	bf00      	nop
 8002578:	3718      	adds	r7, #24
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b082      	sub	sp, #8
 8002582:	af00      	add	r7, sp, #0
 8002584:	4603      	mov	r3, r0
 8002586:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff ff0d 	bl	80023ac <__NVIC_EnableIRQ>
}
 8002592:	bf00      	nop
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b082      	sub	sp, #8
 800259e:	af00      	add	r7, sp, #0
 80025a0:	4603      	mov	r3, r0
 80025a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80025a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff ff1d 	bl	80023e8 <__NVIC_DisableIRQ>
}
 80025ae:	bf00      	nop
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b082      	sub	sp, #8
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f7ff ff94 	bl	80024ec <SysTick_Config>
 80025c4:	4603      	mov	r3, r0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
	...

080025d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80025d8:	2300      	movs	r3, #0
 80025da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80025dc:	f7ff f81e 	bl	800161c <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d101      	bne.n	80025ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e099      	b.n	8002720 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2202      	movs	r2, #2
 80025f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f022 0201 	bic.w	r2, r2, #1
 800260a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800260c:	e00f      	b.n	800262e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800260e:	f7ff f805 	bl	800161c <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b05      	cmp	r3, #5
 800261a:	d908      	bls.n	800262e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2220      	movs	r2, #32
 8002620:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2203      	movs	r2, #3
 8002626:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e078      	b.n	8002720 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0301 	and.w	r3, r3, #1
 8002638:	2b00      	cmp	r3, #0
 800263a:	d1e8      	bne.n	800260e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002644:	697a      	ldr	r2, [r7, #20]
 8002646:	4b38      	ldr	r3, [pc, #224]	@ (8002728 <HAL_DMA_Init+0x158>)
 8002648:	4013      	ands	r3, r2
 800264a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685a      	ldr	r2, [r3, #4]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800265a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002666:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002672:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a1b      	ldr	r3, [r3, #32]
 8002678:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800267a:	697a      	ldr	r2, [r7, #20]
 800267c:	4313      	orrs	r3, r2
 800267e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002684:	2b04      	cmp	r3, #4
 8002686:	d107      	bne.n	8002698 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002690:	4313      	orrs	r3, r2
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	4313      	orrs	r3, r2
 8002696:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	f023 0307 	bic.w	r3, r3, #7
 80026ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b4:	697a      	ldr	r2, [r7, #20]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026be:	2b04      	cmp	r3, #4
 80026c0:	d117      	bne.n	80026f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026c6:	697a      	ldr	r2, [r7, #20]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d00e      	beq.n	80026f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 fad9 	bl	8002c8c <DMA_CheckFifoParam>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d008      	beq.n	80026f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2240      	movs	r2, #64	@ 0x40
 80026e4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2201      	movs	r2, #1
 80026ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80026ee:	2301      	movs	r3, #1
 80026f0:	e016      	b.n	8002720 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 fa90 	bl	8002c20 <DMA_CalcBaseAndBitshift>
 8002700:	4603      	mov	r3, r0
 8002702:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002708:	223f      	movs	r2, #63	@ 0x3f
 800270a:	409a      	lsls	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2201      	movs	r2, #1
 800271a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3718      	adds	r7, #24
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	f010803f 	.word	0xf010803f

0800272c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e050      	b.n	80027e0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d101      	bne.n	800274e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800274a:	2302      	movs	r3, #2
 800274c:	e048      	b.n	80027e0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f022 0201 	bic.w	r2, r2, #1
 800275c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2200      	movs	r2, #0
 8002764:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2200      	movs	r2, #0
 800276c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2200      	movs	r2, #0
 8002774:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2200      	movs	r2, #0
 800277c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2200      	movs	r2, #0
 8002784:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2221      	movs	r2, #33	@ 0x21
 800278c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 fa46 	bl	8002c20 <DMA_CalcBaseAndBitshift>
 8002794:	4603      	mov	r3, r0
 8002796:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027c0:	223f      	movs	r2, #63	@ 0x3f
 80027c2:	409a      	lsls	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027f4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80027f6:	f7fe ff11 	bl	800161c <HAL_GetTick>
 80027fa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002802:	b2db      	uxtb	r3, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d008      	beq.n	800281a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2280      	movs	r2, #128	@ 0x80
 800280c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e052      	b.n	80028c0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f022 0216 	bic.w	r2, r2, #22
 8002828:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	695a      	ldr	r2, [r3, #20]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002838:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283e:	2b00      	cmp	r3, #0
 8002840:	d103      	bne.n	800284a <HAL_DMA_Abort+0x62>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002846:	2b00      	cmp	r3, #0
 8002848:	d007      	beq.n	800285a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f022 0208 	bic.w	r2, r2, #8
 8002858:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f022 0201 	bic.w	r2, r2, #1
 8002868:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800286a:	e013      	b.n	8002894 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800286c:	f7fe fed6 	bl	800161c <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b05      	cmp	r3, #5
 8002878:	d90c      	bls.n	8002894 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2220      	movs	r2, #32
 800287e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2203      	movs	r2, #3
 8002884:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e015      	b.n	80028c0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1e4      	bne.n	800286c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028a6:	223f      	movs	r2, #63	@ 0x3f
 80028a8:	409a      	lsls	r2, r3
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d004      	beq.n	80028e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2280      	movs	r2, #128	@ 0x80
 80028e0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e00c      	b.n	8002900 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2205      	movs	r2, #5
 80028ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f022 0201 	bic.w	r2, r2, #1
 80028fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002914:	2300      	movs	r3, #0
 8002916:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002918:	4b8e      	ldr	r3, [pc, #568]	@ (8002b54 <HAL_DMA_IRQHandler+0x248>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a8e      	ldr	r2, [pc, #568]	@ (8002b58 <HAL_DMA_IRQHandler+0x24c>)
 800291e:	fba2 2303 	umull	r2, r3, r2, r3
 8002922:	0a9b      	lsrs	r3, r3, #10
 8002924:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800292a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002936:	2208      	movs	r2, #8
 8002938:	409a      	lsls	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	4013      	ands	r3, r2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d01a      	beq.n	8002978 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0304 	and.w	r3, r3, #4
 800294c:	2b00      	cmp	r3, #0
 800294e:	d013      	beq.n	8002978 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 0204 	bic.w	r2, r2, #4
 800295e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002964:	2208      	movs	r2, #8
 8002966:	409a      	lsls	r2, r3
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002970:	f043 0201 	orr.w	r2, r3, #1
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800297c:	2201      	movs	r2, #1
 800297e:	409a      	lsls	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	4013      	ands	r3, r2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d012      	beq.n	80029ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00b      	beq.n	80029ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800299a:	2201      	movs	r2, #1
 800299c:	409a      	lsls	r2, r3
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029a6:	f043 0202 	orr.w	r2, r3, #2
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029b2:	2204      	movs	r2, #4
 80029b4:	409a      	lsls	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	4013      	ands	r3, r2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d012      	beq.n	80029e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00b      	beq.n	80029e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029d0:	2204      	movs	r2, #4
 80029d2:	409a      	lsls	r2, r3
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029dc:	f043 0204 	orr.w	r2, r3, #4
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029e8:	2210      	movs	r2, #16
 80029ea:	409a      	lsls	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	4013      	ands	r3, r2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d043      	beq.n	8002a7c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0308 	and.w	r3, r3, #8
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d03c      	beq.n	8002a7c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a06:	2210      	movs	r2, #16
 8002a08:	409a      	lsls	r2, r3
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d018      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d108      	bne.n	8002a3c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d024      	beq.n	8002a7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	4798      	blx	r3
 8002a3a:	e01f      	b.n	8002a7c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d01b      	beq.n	8002a7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	4798      	blx	r3
 8002a4c:	e016      	b.n	8002a7c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d107      	bne.n	8002a6c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f022 0208 	bic.w	r2, r2, #8
 8002a6a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d003      	beq.n	8002a7c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a80:	2220      	movs	r2, #32
 8002a82:	409a      	lsls	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	4013      	ands	r3, r2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f000 808f 	beq.w	8002bac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0310 	and.w	r3, r3, #16
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 8087 	beq.w	8002bac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aa2:	2220      	movs	r2, #32
 8002aa4:	409a      	lsls	r2, r3
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b05      	cmp	r3, #5
 8002ab4:	d136      	bne.n	8002b24 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f022 0216 	bic.w	r2, r2, #22
 8002ac4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	695a      	ldr	r2, [r3, #20]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ad4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d103      	bne.n	8002ae6 <HAL_DMA_IRQHandler+0x1da>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d007      	beq.n	8002af6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 0208 	bic.w	r2, r2, #8
 8002af4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002afa:	223f      	movs	r2, #63	@ 0x3f
 8002afc:	409a      	lsls	r2, r3
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d07e      	beq.n	8002c18 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	4798      	blx	r3
        }
        return;
 8002b22:	e079      	b.n	8002c18 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d01d      	beq.n	8002b6e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d10d      	bne.n	8002b5c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d031      	beq.n	8002bac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	4798      	blx	r3
 8002b50:	e02c      	b.n	8002bac <HAL_DMA_IRQHandler+0x2a0>
 8002b52:	bf00      	nop
 8002b54:	20000000 	.word	0x20000000
 8002b58:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d023      	beq.n	8002bac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	4798      	blx	r3
 8002b6c:	e01e      	b.n	8002bac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d10f      	bne.n	8002b9c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f022 0210 	bic.w	r2, r2, #16
 8002b8a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d003      	beq.n	8002bac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d032      	beq.n	8002c1a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d022      	beq.n	8002c06 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2205      	movs	r2, #5
 8002bc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f022 0201 	bic.w	r2, r2, #1
 8002bd6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	3301      	adds	r3, #1
 8002bdc:	60bb      	str	r3, [r7, #8]
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d307      	bcc.n	8002bf4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1f2      	bne.n	8002bd8 <HAL_DMA_IRQHandler+0x2cc>
 8002bf2:	e000      	b.n	8002bf6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002bf4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d005      	beq.n	8002c1a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	4798      	blx	r3
 8002c16:	e000      	b.n	8002c1a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002c18:	bf00      	nop
    }
  }
}
 8002c1a:	3718      	adds	r7, #24
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	3b10      	subs	r3, #16
 8002c30:	4a14      	ldr	r2, [pc, #80]	@ (8002c84 <DMA_CalcBaseAndBitshift+0x64>)
 8002c32:	fba2 2303 	umull	r2, r3, r2, r3
 8002c36:	091b      	lsrs	r3, r3, #4
 8002c38:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c3a:	4a13      	ldr	r2, [pc, #76]	@ (8002c88 <DMA_CalcBaseAndBitshift+0x68>)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	4413      	add	r3, r2
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	461a      	mov	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2b03      	cmp	r3, #3
 8002c4c:	d909      	bls.n	8002c62 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002c56:	f023 0303 	bic.w	r3, r3, #3
 8002c5a:	1d1a      	adds	r2, r3, #4
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002c60:	e007      	b.n	8002c72 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002c6a:	f023 0303 	bic.w	r3, r3, #3
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3714      	adds	r7, #20
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	aaaaaaab 	.word	0xaaaaaaab
 8002c88:	0800c8f8 	.word	0x0800c8f8

08002c8c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c94:	2300      	movs	r3, #0
 8002c96:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c9c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d11f      	bne.n	8002ce6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	2b03      	cmp	r3, #3
 8002caa:	d856      	bhi.n	8002d5a <DMA_CheckFifoParam+0xce>
 8002cac:	a201      	add	r2, pc, #4	@ (adr r2, 8002cb4 <DMA_CheckFifoParam+0x28>)
 8002cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb2:	bf00      	nop
 8002cb4:	08002cc5 	.word	0x08002cc5
 8002cb8:	08002cd7 	.word	0x08002cd7
 8002cbc:	08002cc5 	.word	0x08002cc5
 8002cc0:	08002d5b 	.word	0x08002d5b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d046      	beq.n	8002d5e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cd4:	e043      	b.n	8002d5e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cda:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002cde:	d140      	bne.n	8002d62 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ce4:	e03d      	b.n	8002d62 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cee:	d121      	bne.n	8002d34 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	2b03      	cmp	r3, #3
 8002cf4:	d837      	bhi.n	8002d66 <DMA_CheckFifoParam+0xda>
 8002cf6:	a201      	add	r2, pc, #4	@ (adr r2, 8002cfc <DMA_CheckFifoParam+0x70>)
 8002cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cfc:	08002d0d 	.word	0x08002d0d
 8002d00:	08002d13 	.word	0x08002d13
 8002d04:	08002d0d 	.word	0x08002d0d
 8002d08:	08002d25 	.word	0x08002d25
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d10:	e030      	b.n	8002d74 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d16:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d025      	beq.n	8002d6a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d22:	e022      	b.n	8002d6a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d28:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002d2c:	d11f      	bne.n	8002d6e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d32:	e01c      	b.n	8002d6e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d903      	bls.n	8002d42 <DMA_CheckFifoParam+0xb6>
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	2b03      	cmp	r3, #3
 8002d3e:	d003      	beq.n	8002d48 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d40:	e018      	b.n	8002d74 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	73fb      	strb	r3, [r7, #15]
      break;
 8002d46:	e015      	b.n	8002d74 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d4c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00e      	beq.n	8002d72 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	73fb      	strb	r3, [r7, #15]
      break;
 8002d58:	e00b      	b.n	8002d72 <DMA_CheckFifoParam+0xe6>
      break;
 8002d5a:	bf00      	nop
 8002d5c:	e00a      	b.n	8002d74 <DMA_CheckFifoParam+0xe8>
      break;
 8002d5e:	bf00      	nop
 8002d60:	e008      	b.n	8002d74 <DMA_CheckFifoParam+0xe8>
      break;
 8002d62:	bf00      	nop
 8002d64:	e006      	b.n	8002d74 <DMA_CheckFifoParam+0xe8>
      break;
 8002d66:	bf00      	nop
 8002d68:	e004      	b.n	8002d74 <DMA_CheckFifoParam+0xe8>
      break;
 8002d6a:	bf00      	nop
 8002d6c:	e002      	b.n	8002d74 <DMA_CheckFifoParam+0xe8>
      break;   
 8002d6e:	bf00      	nop
 8002d70:	e000      	b.n	8002d74 <DMA_CheckFifoParam+0xe8>
      break;
 8002d72:	bf00      	nop
    }
  } 
  
  return status; 
 8002d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3714      	adds	r7, #20
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop

08002d84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b089      	sub	sp, #36	@ 0x24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d92:	2300      	movs	r3, #0
 8002d94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d96:	2300      	movs	r3, #0
 8002d98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	61fb      	str	r3, [r7, #28]
 8002d9e:	e16b      	b.n	8003078 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002da0:	2201      	movs	r2, #1
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	4013      	ands	r3, r2
 8002db2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002db4:	693a      	ldr	r2, [r7, #16]
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	f040 815a 	bne.w	8003072 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f003 0303 	and.w	r3, r3, #3
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d005      	beq.n	8002dd6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d130      	bne.n	8002e38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	2203      	movs	r2, #3
 8002de2:	fa02 f303 	lsl.w	r3, r2, r3
 8002de6:	43db      	mvns	r3, r3
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	4013      	ands	r3, r2
 8002dec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	68da      	ldr	r2, [r3, #12]
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	43db      	mvns	r3, r3
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	091b      	lsrs	r3, r3, #4
 8002e22:	f003 0201 	and.w	r2, r3, #1
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f003 0303 	and.w	r3, r3, #3
 8002e40:	2b03      	cmp	r3, #3
 8002e42:	d017      	beq.n	8002e74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	2203      	movs	r2, #3
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	43db      	mvns	r3, r3
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	689a      	ldr	r2, [r3, #8]
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f003 0303 	and.w	r3, r3, #3
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d123      	bne.n	8002ec8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	08da      	lsrs	r2, r3, #3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	3208      	adds	r2, #8
 8002e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	f003 0307 	and.w	r3, r3, #7
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	220f      	movs	r2, #15
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	43db      	mvns	r3, r3
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	691a      	ldr	r2, [r3, #16]
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	f003 0307 	and.w	r3, r3, #7
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	08da      	lsrs	r2, r3, #3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	3208      	adds	r2, #8
 8002ec2:	69b9      	ldr	r1, [r7, #24]
 8002ec4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	2203      	movs	r2, #3
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	43db      	mvns	r3, r3
 8002eda:	69ba      	ldr	r2, [r7, #24]
 8002edc:	4013      	ands	r3, r2
 8002ede:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f003 0203 	and.w	r2, r3, #3
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f000 80b4 	beq.w	8003072 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	60fb      	str	r3, [r7, #12]
 8002f0e:	4b60      	ldr	r3, [pc, #384]	@ (8003090 <HAL_GPIO_Init+0x30c>)
 8002f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f12:	4a5f      	ldr	r2, [pc, #380]	@ (8003090 <HAL_GPIO_Init+0x30c>)
 8002f14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f18:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f1a:	4b5d      	ldr	r3, [pc, #372]	@ (8003090 <HAL_GPIO_Init+0x30c>)
 8002f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f22:	60fb      	str	r3, [r7, #12]
 8002f24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f26:	4a5b      	ldr	r2, [pc, #364]	@ (8003094 <HAL_GPIO_Init+0x310>)
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	089b      	lsrs	r3, r3, #2
 8002f2c:	3302      	adds	r3, #2
 8002f2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	f003 0303 	and.w	r3, r3, #3
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	220f      	movs	r2, #15
 8002f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f42:	43db      	mvns	r3, r3
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	4013      	ands	r3, r2
 8002f48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a52      	ldr	r2, [pc, #328]	@ (8003098 <HAL_GPIO_Init+0x314>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d02b      	beq.n	8002faa <HAL_GPIO_Init+0x226>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a51      	ldr	r2, [pc, #324]	@ (800309c <HAL_GPIO_Init+0x318>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d025      	beq.n	8002fa6 <HAL_GPIO_Init+0x222>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a50      	ldr	r2, [pc, #320]	@ (80030a0 <HAL_GPIO_Init+0x31c>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d01f      	beq.n	8002fa2 <HAL_GPIO_Init+0x21e>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a4f      	ldr	r2, [pc, #316]	@ (80030a4 <HAL_GPIO_Init+0x320>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d019      	beq.n	8002f9e <HAL_GPIO_Init+0x21a>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a4e      	ldr	r2, [pc, #312]	@ (80030a8 <HAL_GPIO_Init+0x324>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d013      	beq.n	8002f9a <HAL_GPIO_Init+0x216>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a4d      	ldr	r2, [pc, #308]	@ (80030ac <HAL_GPIO_Init+0x328>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d00d      	beq.n	8002f96 <HAL_GPIO_Init+0x212>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a4c      	ldr	r2, [pc, #304]	@ (80030b0 <HAL_GPIO_Init+0x32c>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d007      	beq.n	8002f92 <HAL_GPIO_Init+0x20e>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a4b      	ldr	r2, [pc, #300]	@ (80030b4 <HAL_GPIO_Init+0x330>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d101      	bne.n	8002f8e <HAL_GPIO_Init+0x20a>
 8002f8a:	2307      	movs	r3, #7
 8002f8c:	e00e      	b.n	8002fac <HAL_GPIO_Init+0x228>
 8002f8e:	2308      	movs	r3, #8
 8002f90:	e00c      	b.n	8002fac <HAL_GPIO_Init+0x228>
 8002f92:	2306      	movs	r3, #6
 8002f94:	e00a      	b.n	8002fac <HAL_GPIO_Init+0x228>
 8002f96:	2305      	movs	r3, #5
 8002f98:	e008      	b.n	8002fac <HAL_GPIO_Init+0x228>
 8002f9a:	2304      	movs	r3, #4
 8002f9c:	e006      	b.n	8002fac <HAL_GPIO_Init+0x228>
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e004      	b.n	8002fac <HAL_GPIO_Init+0x228>
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	e002      	b.n	8002fac <HAL_GPIO_Init+0x228>
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e000      	b.n	8002fac <HAL_GPIO_Init+0x228>
 8002faa:	2300      	movs	r3, #0
 8002fac:	69fa      	ldr	r2, [r7, #28]
 8002fae:	f002 0203 	and.w	r2, r2, #3
 8002fb2:	0092      	lsls	r2, r2, #2
 8002fb4:	4093      	lsls	r3, r2
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fbc:	4935      	ldr	r1, [pc, #212]	@ (8003094 <HAL_GPIO_Init+0x310>)
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	089b      	lsrs	r3, r3, #2
 8002fc2:	3302      	adds	r3, #2
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fca:	4b3b      	ldr	r3, [pc, #236]	@ (80030b8 <HAL_GPIO_Init+0x334>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	43db      	mvns	r3, r3
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d003      	beq.n	8002fee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fee:	4a32      	ldr	r2, [pc, #200]	@ (80030b8 <HAL_GPIO_Init+0x334>)
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ff4:	4b30      	ldr	r3, [pc, #192]	@ (80030b8 <HAL_GPIO_Init+0x334>)
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	43db      	mvns	r3, r3
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	4013      	ands	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d003      	beq.n	8003018 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	4313      	orrs	r3, r2
 8003016:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003018:	4a27      	ldr	r2, [pc, #156]	@ (80030b8 <HAL_GPIO_Init+0x334>)
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800301e:	4b26      	ldr	r3, [pc, #152]	@ (80030b8 <HAL_GPIO_Init+0x334>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	43db      	mvns	r3, r3
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	4013      	ands	r3, r2
 800302c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d003      	beq.n	8003042 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	4313      	orrs	r3, r2
 8003040:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003042:	4a1d      	ldr	r2, [pc, #116]	@ (80030b8 <HAL_GPIO_Init+0x334>)
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003048:	4b1b      	ldr	r3, [pc, #108]	@ (80030b8 <HAL_GPIO_Init+0x334>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	43db      	mvns	r3, r3
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	4013      	ands	r3, r2
 8003056:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d003      	beq.n	800306c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	4313      	orrs	r3, r2
 800306a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800306c:	4a12      	ldr	r2, [pc, #72]	@ (80030b8 <HAL_GPIO_Init+0x334>)
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	3301      	adds	r3, #1
 8003076:	61fb      	str	r3, [r7, #28]
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	2b0f      	cmp	r3, #15
 800307c:	f67f ae90 	bls.w	8002da0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003080:	bf00      	nop
 8003082:	bf00      	nop
 8003084:	3724      	adds	r7, #36	@ 0x24
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	40023800 	.word	0x40023800
 8003094:	40013800 	.word	0x40013800
 8003098:	40020000 	.word	0x40020000
 800309c:	40020400 	.word	0x40020400
 80030a0:	40020800 	.word	0x40020800
 80030a4:	40020c00 	.word	0x40020c00
 80030a8:	40021000 	.word	0x40021000
 80030ac:	40021400 	.word	0x40021400
 80030b0:	40021800 	.word	0x40021800
 80030b4:	40021c00 	.word	0x40021c00
 80030b8:	40013c00 	.word	0x40013c00

080030bc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80030bc:	b480      	push	{r7}
 80030be:	b087      	sub	sp, #28
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030c6:	2300      	movs	r3, #0
 80030c8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80030ca:	2300      	movs	r3, #0
 80030cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80030ce:	2300      	movs	r3, #0
 80030d0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030d2:	2300      	movs	r3, #0
 80030d4:	617b      	str	r3, [r7, #20]
 80030d6:	e0cd      	b.n	8003274 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030d8:	2201      	movs	r2, #1
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	fa02 f303 	lsl.w	r3, r2, r3
 80030e0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80030e2:	683a      	ldr	r2, [r7, #0]
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	4013      	ands	r3, r2
 80030e8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	f040 80bd 	bne.w	800326e <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80030f4:	4a65      	ldr	r2, [pc, #404]	@ (800328c <HAL_GPIO_DeInit+0x1d0>)
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	089b      	lsrs	r3, r3, #2
 80030fa:	3302      	adds	r3, #2
 80030fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003100:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	f003 0303 	and.w	r3, r3, #3
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	220f      	movs	r2, #15
 800310c:	fa02 f303 	lsl.w	r3, r2, r3
 8003110:	68ba      	ldr	r2, [r7, #8]
 8003112:	4013      	ands	r3, r2
 8003114:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a5d      	ldr	r2, [pc, #372]	@ (8003290 <HAL_GPIO_DeInit+0x1d4>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d02b      	beq.n	8003176 <HAL_GPIO_DeInit+0xba>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a5c      	ldr	r2, [pc, #368]	@ (8003294 <HAL_GPIO_DeInit+0x1d8>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d025      	beq.n	8003172 <HAL_GPIO_DeInit+0xb6>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a5b      	ldr	r2, [pc, #364]	@ (8003298 <HAL_GPIO_DeInit+0x1dc>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d01f      	beq.n	800316e <HAL_GPIO_DeInit+0xb2>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a5a      	ldr	r2, [pc, #360]	@ (800329c <HAL_GPIO_DeInit+0x1e0>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d019      	beq.n	800316a <HAL_GPIO_DeInit+0xae>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a59      	ldr	r2, [pc, #356]	@ (80032a0 <HAL_GPIO_DeInit+0x1e4>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d013      	beq.n	8003166 <HAL_GPIO_DeInit+0xaa>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a58      	ldr	r2, [pc, #352]	@ (80032a4 <HAL_GPIO_DeInit+0x1e8>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d00d      	beq.n	8003162 <HAL_GPIO_DeInit+0xa6>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a57      	ldr	r2, [pc, #348]	@ (80032a8 <HAL_GPIO_DeInit+0x1ec>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d007      	beq.n	800315e <HAL_GPIO_DeInit+0xa2>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a56      	ldr	r2, [pc, #344]	@ (80032ac <HAL_GPIO_DeInit+0x1f0>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d101      	bne.n	800315a <HAL_GPIO_DeInit+0x9e>
 8003156:	2307      	movs	r3, #7
 8003158:	e00e      	b.n	8003178 <HAL_GPIO_DeInit+0xbc>
 800315a:	2308      	movs	r3, #8
 800315c:	e00c      	b.n	8003178 <HAL_GPIO_DeInit+0xbc>
 800315e:	2306      	movs	r3, #6
 8003160:	e00a      	b.n	8003178 <HAL_GPIO_DeInit+0xbc>
 8003162:	2305      	movs	r3, #5
 8003164:	e008      	b.n	8003178 <HAL_GPIO_DeInit+0xbc>
 8003166:	2304      	movs	r3, #4
 8003168:	e006      	b.n	8003178 <HAL_GPIO_DeInit+0xbc>
 800316a:	2303      	movs	r3, #3
 800316c:	e004      	b.n	8003178 <HAL_GPIO_DeInit+0xbc>
 800316e:	2302      	movs	r3, #2
 8003170:	e002      	b.n	8003178 <HAL_GPIO_DeInit+0xbc>
 8003172:	2301      	movs	r3, #1
 8003174:	e000      	b.n	8003178 <HAL_GPIO_DeInit+0xbc>
 8003176:	2300      	movs	r3, #0
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	f002 0203 	and.w	r2, r2, #3
 800317e:	0092      	lsls	r2, r2, #2
 8003180:	4093      	lsls	r3, r2
 8003182:	68ba      	ldr	r2, [r7, #8]
 8003184:	429a      	cmp	r2, r3
 8003186:	d132      	bne.n	80031ee <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003188:	4b49      	ldr	r3, [pc, #292]	@ (80032b0 <HAL_GPIO_DeInit+0x1f4>)
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	43db      	mvns	r3, r3
 8003190:	4947      	ldr	r1, [pc, #284]	@ (80032b0 <HAL_GPIO_DeInit+0x1f4>)
 8003192:	4013      	ands	r3, r2
 8003194:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003196:	4b46      	ldr	r3, [pc, #280]	@ (80032b0 <HAL_GPIO_DeInit+0x1f4>)
 8003198:	685a      	ldr	r2, [r3, #4]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	43db      	mvns	r3, r3
 800319e:	4944      	ldr	r1, [pc, #272]	@ (80032b0 <HAL_GPIO_DeInit+0x1f4>)
 80031a0:	4013      	ands	r3, r2
 80031a2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80031a4:	4b42      	ldr	r3, [pc, #264]	@ (80032b0 <HAL_GPIO_DeInit+0x1f4>)
 80031a6:	68da      	ldr	r2, [r3, #12]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	43db      	mvns	r3, r3
 80031ac:	4940      	ldr	r1, [pc, #256]	@ (80032b0 <HAL_GPIO_DeInit+0x1f4>)
 80031ae:	4013      	ands	r3, r2
 80031b0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80031b2:	4b3f      	ldr	r3, [pc, #252]	@ (80032b0 <HAL_GPIO_DeInit+0x1f4>)
 80031b4:	689a      	ldr	r2, [r3, #8]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	43db      	mvns	r3, r3
 80031ba:	493d      	ldr	r1, [pc, #244]	@ (80032b0 <HAL_GPIO_DeInit+0x1f4>)
 80031bc:	4013      	ands	r3, r2
 80031be:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	f003 0303 	and.w	r3, r3, #3
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	220f      	movs	r2, #15
 80031ca:	fa02 f303 	lsl.w	r3, r2, r3
 80031ce:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80031d0:	4a2e      	ldr	r2, [pc, #184]	@ (800328c <HAL_GPIO_DeInit+0x1d0>)
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	089b      	lsrs	r3, r3, #2
 80031d6:	3302      	adds	r3, #2
 80031d8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	43da      	mvns	r2, r3
 80031e0:	482a      	ldr	r0, [pc, #168]	@ (800328c <HAL_GPIO_DeInit+0x1d0>)
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	089b      	lsrs	r3, r3, #2
 80031e6:	400a      	ands	r2, r1
 80031e8:	3302      	adds	r3, #2
 80031ea:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	005b      	lsls	r3, r3, #1
 80031f6:	2103      	movs	r1, #3
 80031f8:	fa01 f303 	lsl.w	r3, r1, r3
 80031fc:	43db      	mvns	r3, r3
 80031fe:	401a      	ands	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	08da      	lsrs	r2, r3, #3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	3208      	adds	r2, #8
 800320c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	f003 0307 	and.w	r3, r3, #7
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	220f      	movs	r2, #15
 800321a:	fa02 f303 	lsl.w	r3, r2, r3
 800321e:	43db      	mvns	r3, r3
 8003220:	697a      	ldr	r2, [r7, #20]
 8003222:	08d2      	lsrs	r2, r2, #3
 8003224:	4019      	ands	r1, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	3208      	adds	r2, #8
 800322a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	68da      	ldr	r2, [r3, #12]
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	2103      	movs	r1, #3
 8003238:	fa01 f303 	lsl.w	r3, r1, r3
 800323c:	43db      	mvns	r3, r3
 800323e:	401a      	ands	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685a      	ldr	r2, [r3, #4]
 8003248:	2101      	movs	r1, #1
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	fa01 f303 	lsl.w	r3, r1, r3
 8003250:	43db      	mvns	r3, r3
 8003252:	401a      	ands	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689a      	ldr	r2, [r3, #8]
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	2103      	movs	r1, #3
 8003262:	fa01 f303 	lsl.w	r3, r1, r3
 8003266:	43db      	mvns	r3, r3
 8003268:	401a      	ands	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	3301      	adds	r3, #1
 8003272:	617b      	str	r3, [r7, #20]
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	2b0f      	cmp	r3, #15
 8003278:	f67f af2e 	bls.w	80030d8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800327c:	bf00      	nop
 800327e:	bf00      	nop
 8003280:	371c      	adds	r7, #28
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	40013800 	.word	0x40013800
 8003290:	40020000 	.word	0x40020000
 8003294:	40020400 	.word	0x40020400
 8003298:	40020800 	.word	0x40020800
 800329c:	40020c00 	.word	0x40020c00
 80032a0:	40021000 	.word	0x40021000
 80032a4:	40021400 	.word	0x40021400
 80032a8:	40021800 	.word	0x40021800
 80032ac:	40021c00 	.word	0x40021c00
 80032b0:	40013c00 	.word	0x40013c00

080032b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	460b      	mov	r3, r1
 80032be:	807b      	strh	r3, [r7, #2]
 80032c0:	4613      	mov	r3, r2
 80032c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032c4:	787b      	ldrb	r3, [r7, #1]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d003      	beq.n	80032d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032ca:	887a      	ldrh	r2, [r7, #2]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032d0:	e003      	b.n	80032da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032d2:	887b      	ldrh	r3, [r7, #2]
 80032d4:	041a      	lsls	r2, r3, #16
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	619a      	str	r2, [r3, #24]
}
 80032da:	bf00      	nop
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr

080032e6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b085      	sub	sp, #20
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
 80032ee:	460b      	mov	r3, r1
 80032f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80032f8:	887a      	ldrh	r2, [r7, #2]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	4013      	ands	r3, r2
 80032fe:	041a      	lsls	r2, r3, #16
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	43d9      	mvns	r1, r3
 8003304:	887b      	ldrh	r3, [r7, #2]
 8003306:	400b      	ands	r3, r1
 8003308:	431a      	orrs	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	619a      	str	r2, [r3, #24]
}
 800330e:	bf00      	nop
 8003310:	3714      	adds	r7, #20
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
	...

0800331c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e12b      	b.n	8003586 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d106      	bne.n	8003348 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f7fd fa7a 	bl	800083c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2224      	movs	r2, #36	@ 0x24
 800334c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f022 0201 	bic.w	r2, r2, #1
 800335e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800336e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800337e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003380:	f001 ffd2 	bl	8005328 <HAL_RCC_GetPCLK1Freq>
 8003384:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	4a81      	ldr	r2, [pc, #516]	@ (8003590 <HAL_I2C_Init+0x274>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d807      	bhi.n	80033a0 <HAL_I2C_Init+0x84>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	4a80      	ldr	r2, [pc, #512]	@ (8003594 <HAL_I2C_Init+0x278>)
 8003394:	4293      	cmp	r3, r2
 8003396:	bf94      	ite	ls
 8003398:	2301      	movls	r3, #1
 800339a:	2300      	movhi	r3, #0
 800339c:	b2db      	uxtb	r3, r3
 800339e:	e006      	b.n	80033ae <HAL_I2C_Init+0x92>
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	4a7d      	ldr	r2, [pc, #500]	@ (8003598 <HAL_I2C_Init+0x27c>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	bf94      	ite	ls
 80033a8:	2301      	movls	r3, #1
 80033aa:	2300      	movhi	r3, #0
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e0e7      	b.n	8003586 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	4a78      	ldr	r2, [pc, #480]	@ (800359c <HAL_I2C_Init+0x280>)
 80033ba:	fba2 2303 	umull	r2, r3, r2, r3
 80033be:	0c9b      	lsrs	r3, r3, #18
 80033c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68ba      	ldr	r2, [r7, #8]
 80033d2:	430a      	orrs	r2, r1
 80033d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	4a6a      	ldr	r2, [pc, #424]	@ (8003590 <HAL_I2C_Init+0x274>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d802      	bhi.n	80033f0 <HAL_I2C_Init+0xd4>
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	3301      	adds	r3, #1
 80033ee:	e009      	b.n	8003404 <HAL_I2C_Init+0xe8>
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80033f6:	fb02 f303 	mul.w	r3, r2, r3
 80033fa:	4a69      	ldr	r2, [pc, #420]	@ (80035a0 <HAL_I2C_Init+0x284>)
 80033fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003400:	099b      	lsrs	r3, r3, #6
 8003402:	3301      	adds	r3, #1
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	6812      	ldr	r2, [r2, #0]
 8003408:	430b      	orrs	r3, r1
 800340a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	69db      	ldr	r3, [r3, #28]
 8003412:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003416:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	495c      	ldr	r1, [pc, #368]	@ (8003590 <HAL_I2C_Init+0x274>)
 8003420:	428b      	cmp	r3, r1
 8003422:	d819      	bhi.n	8003458 <HAL_I2C_Init+0x13c>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	1e59      	subs	r1, r3, #1
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003432:	1c59      	adds	r1, r3, #1
 8003434:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003438:	400b      	ands	r3, r1
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00a      	beq.n	8003454 <HAL_I2C_Init+0x138>
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	1e59      	subs	r1, r3, #1
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	fbb1 f3f3 	udiv	r3, r1, r3
 800344c:	3301      	adds	r3, #1
 800344e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003452:	e051      	b.n	80034f8 <HAL_I2C_Init+0x1dc>
 8003454:	2304      	movs	r3, #4
 8003456:	e04f      	b.n	80034f8 <HAL_I2C_Init+0x1dc>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d111      	bne.n	8003484 <HAL_I2C_Init+0x168>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	1e58      	subs	r0, r3, #1
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6859      	ldr	r1, [r3, #4]
 8003468:	460b      	mov	r3, r1
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	440b      	add	r3, r1
 800346e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003472:	3301      	adds	r3, #1
 8003474:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003478:	2b00      	cmp	r3, #0
 800347a:	bf0c      	ite	eq
 800347c:	2301      	moveq	r3, #1
 800347e:	2300      	movne	r3, #0
 8003480:	b2db      	uxtb	r3, r3
 8003482:	e012      	b.n	80034aa <HAL_I2C_Init+0x18e>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	1e58      	subs	r0, r3, #1
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6859      	ldr	r1, [r3, #4]
 800348c:	460b      	mov	r3, r1
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	440b      	add	r3, r1
 8003492:	0099      	lsls	r1, r3, #2
 8003494:	440b      	add	r3, r1
 8003496:	fbb0 f3f3 	udiv	r3, r0, r3
 800349a:	3301      	adds	r3, #1
 800349c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	bf0c      	ite	eq
 80034a4:	2301      	moveq	r3, #1
 80034a6:	2300      	movne	r3, #0
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d001      	beq.n	80034b2 <HAL_I2C_Init+0x196>
 80034ae:	2301      	movs	r3, #1
 80034b0:	e022      	b.n	80034f8 <HAL_I2C_Init+0x1dc>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10e      	bne.n	80034d8 <HAL_I2C_Init+0x1bc>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	1e58      	subs	r0, r3, #1
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6859      	ldr	r1, [r3, #4]
 80034c2:	460b      	mov	r3, r1
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	440b      	add	r3, r1
 80034c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80034cc:	3301      	adds	r3, #1
 80034ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034d6:	e00f      	b.n	80034f8 <HAL_I2C_Init+0x1dc>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	1e58      	subs	r0, r3, #1
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6859      	ldr	r1, [r3, #4]
 80034e0:	460b      	mov	r3, r1
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	440b      	add	r3, r1
 80034e6:	0099      	lsls	r1, r3, #2
 80034e8:	440b      	add	r3, r1
 80034ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80034ee:	3301      	adds	r3, #1
 80034f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80034f8:	6879      	ldr	r1, [r7, #4]
 80034fa:	6809      	ldr	r1, [r1, #0]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	69da      	ldr	r2, [r3, #28]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	431a      	orrs	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	430a      	orrs	r2, r1
 800351a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003526:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	6911      	ldr	r1, [r2, #16]
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	68d2      	ldr	r2, [r2, #12]
 8003532:	4311      	orrs	r1, r2
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	6812      	ldr	r2, [r2, #0]
 8003538:	430b      	orrs	r3, r1
 800353a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	695a      	ldr	r2, [r3, #20]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	431a      	orrs	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	430a      	orrs	r2, r1
 8003556:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f042 0201 	orr.w	r2, r2, #1
 8003566:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2220      	movs	r2, #32
 8003572:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3710      	adds	r7, #16
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	000186a0 	.word	0x000186a0
 8003594:	001e847f 	.word	0x001e847f
 8003598:	003d08ff 	.word	0x003d08ff
 800359c:	431bde83 	.word	0x431bde83
 80035a0:	10624dd3 	.word	0x10624dd3

080035a4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b086      	sub	sp, #24
 80035a8:	af02      	add	r7, sp, #8
 80035aa:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d101      	bne.n	80035b6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e101      	b.n	80037ba <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d106      	bne.n	80035d6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f7fd ff3f 	bl	8001454 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2203      	movs	r2, #3
 80035da:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035e4:	d102      	bne.n	80035ec <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f003 fd72 	bl	80070da <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6818      	ldr	r0, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	7c1a      	ldrb	r2, [r3, #16]
 80035fe:	f88d 2000 	strb.w	r2, [sp]
 8003602:	3304      	adds	r3, #4
 8003604:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003606:	f003 fc51 	bl	8006eac <USB_CoreInit>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d005      	beq.n	800361c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2202      	movs	r2, #2
 8003614:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e0ce      	b.n	80037ba <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2100      	movs	r1, #0
 8003622:	4618      	mov	r0, r3
 8003624:	f003 fd6a 	bl	80070fc <USB_SetCurrentMode>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d005      	beq.n	800363a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2202      	movs	r2, #2
 8003632:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e0bf      	b.n	80037ba <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800363a:	2300      	movs	r3, #0
 800363c:	73fb      	strb	r3, [r7, #15]
 800363e:	e04a      	b.n	80036d6 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003640:	7bfa      	ldrb	r2, [r7, #15]
 8003642:	6879      	ldr	r1, [r7, #4]
 8003644:	4613      	mov	r3, r2
 8003646:	00db      	lsls	r3, r3, #3
 8003648:	4413      	add	r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	440b      	add	r3, r1
 800364e:	3315      	adds	r3, #21
 8003650:	2201      	movs	r2, #1
 8003652:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003654:	7bfa      	ldrb	r2, [r7, #15]
 8003656:	6879      	ldr	r1, [r7, #4]
 8003658:	4613      	mov	r3, r2
 800365a:	00db      	lsls	r3, r3, #3
 800365c:	4413      	add	r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	440b      	add	r3, r1
 8003662:	3314      	adds	r3, #20
 8003664:	7bfa      	ldrb	r2, [r7, #15]
 8003666:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003668:	7bfa      	ldrb	r2, [r7, #15]
 800366a:	7bfb      	ldrb	r3, [r7, #15]
 800366c:	b298      	uxth	r0, r3
 800366e:	6879      	ldr	r1, [r7, #4]
 8003670:	4613      	mov	r3, r2
 8003672:	00db      	lsls	r3, r3, #3
 8003674:	4413      	add	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	440b      	add	r3, r1
 800367a:	332e      	adds	r3, #46	@ 0x2e
 800367c:	4602      	mov	r2, r0
 800367e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003680:	7bfa      	ldrb	r2, [r7, #15]
 8003682:	6879      	ldr	r1, [r7, #4]
 8003684:	4613      	mov	r3, r2
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	4413      	add	r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	440b      	add	r3, r1
 800368e:	3318      	adds	r3, #24
 8003690:	2200      	movs	r2, #0
 8003692:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003694:	7bfa      	ldrb	r2, [r7, #15]
 8003696:	6879      	ldr	r1, [r7, #4]
 8003698:	4613      	mov	r3, r2
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	4413      	add	r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	440b      	add	r3, r1
 80036a2:	331c      	adds	r3, #28
 80036a4:	2200      	movs	r2, #0
 80036a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80036a8:	7bfa      	ldrb	r2, [r7, #15]
 80036aa:	6879      	ldr	r1, [r7, #4]
 80036ac:	4613      	mov	r3, r2
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	4413      	add	r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	440b      	add	r3, r1
 80036b6:	3320      	adds	r3, #32
 80036b8:	2200      	movs	r2, #0
 80036ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80036bc:	7bfa      	ldrb	r2, [r7, #15]
 80036be:	6879      	ldr	r1, [r7, #4]
 80036c0:	4613      	mov	r3, r2
 80036c2:	00db      	lsls	r3, r3, #3
 80036c4:	4413      	add	r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	440b      	add	r3, r1
 80036ca:	3324      	adds	r3, #36	@ 0x24
 80036cc:	2200      	movs	r2, #0
 80036ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036d0:	7bfb      	ldrb	r3, [r7, #15]
 80036d2:	3301      	adds	r3, #1
 80036d4:	73fb      	strb	r3, [r7, #15]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	791b      	ldrb	r3, [r3, #4]
 80036da:	7bfa      	ldrb	r2, [r7, #15]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d3af      	bcc.n	8003640 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036e0:	2300      	movs	r3, #0
 80036e2:	73fb      	strb	r3, [r7, #15]
 80036e4:	e044      	b.n	8003770 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80036e6:	7bfa      	ldrb	r2, [r7, #15]
 80036e8:	6879      	ldr	r1, [r7, #4]
 80036ea:	4613      	mov	r3, r2
 80036ec:	00db      	lsls	r3, r3, #3
 80036ee:	4413      	add	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	440b      	add	r3, r1
 80036f4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80036f8:	2200      	movs	r2, #0
 80036fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80036fc:	7bfa      	ldrb	r2, [r7, #15]
 80036fe:	6879      	ldr	r1, [r7, #4]
 8003700:	4613      	mov	r3, r2
 8003702:	00db      	lsls	r3, r3, #3
 8003704:	4413      	add	r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	440b      	add	r3, r1
 800370a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800370e:	7bfa      	ldrb	r2, [r7, #15]
 8003710:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003712:	7bfa      	ldrb	r2, [r7, #15]
 8003714:	6879      	ldr	r1, [r7, #4]
 8003716:	4613      	mov	r3, r2
 8003718:	00db      	lsls	r3, r3, #3
 800371a:	4413      	add	r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	440b      	add	r3, r1
 8003720:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003724:	2200      	movs	r2, #0
 8003726:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003728:	7bfa      	ldrb	r2, [r7, #15]
 800372a:	6879      	ldr	r1, [r7, #4]
 800372c:	4613      	mov	r3, r2
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	4413      	add	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	440b      	add	r3, r1
 8003736:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800373a:	2200      	movs	r2, #0
 800373c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800373e:	7bfa      	ldrb	r2, [r7, #15]
 8003740:	6879      	ldr	r1, [r7, #4]
 8003742:	4613      	mov	r3, r2
 8003744:	00db      	lsls	r3, r3, #3
 8003746:	4413      	add	r3, r2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	440b      	add	r3, r1
 800374c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003750:	2200      	movs	r2, #0
 8003752:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003754:	7bfa      	ldrb	r2, [r7, #15]
 8003756:	6879      	ldr	r1, [r7, #4]
 8003758:	4613      	mov	r3, r2
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	4413      	add	r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	440b      	add	r3, r1
 8003762:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003766:	2200      	movs	r2, #0
 8003768:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800376a:	7bfb      	ldrb	r3, [r7, #15]
 800376c:	3301      	adds	r3, #1
 800376e:	73fb      	strb	r3, [r7, #15]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	791b      	ldrb	r3, [r3, #4]
 8003774:	7bfa      	ldrb	r2, [r7, #15]
 8003776:	429a      	cmp	r2, r3
 8003778:	d3b5      	bcc.n	80036e6 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6818      	ldr	r0, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	7c1a      	ldrb	r2, [r3, #16]
 8003782:	f88d 2000 	strb.w	r2, [sp]
 8003786:	3304      	adds	r3, #4
 8003788:	cb0e      	ldmia	r3, {r1, r2, r3}
 800378a:	f003 fd03 	bl	8007194 <USB_DevInit>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d005      	beq.n	80037a0 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2202      	movs	r2, #2
 8003798:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e00c      	b.n	80037ba <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f004 fd4d 	bl	8008252 <USB_DevDisconnect>

  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3710      	adds	r7, #16
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b084      	sub	sp, #16
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d101      	bne.n	80037de <HAL_PCD_Start+0x1c>
 80037da:	2302      	movs	r3, #2
 80037dc:	e022      	b.n	8003824 <HAL_PCD_Start+0x62>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d009      	beq.n	8003806 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d105      	bne.n	8003806 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037fe:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4618      	mov	r0, r3
 800380c:	f003 fc54 	bl	80070b8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4618      	mov	r0, r3
 8003816:	f004 fcfb 	bl	8008210 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	3710      	adds	r7, #16
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800382c:	b590      	push	{r4, r7, lr}
 800382e:	b08d      	sub	sp, #52	@ 0x34
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800383a:	6a3b      	ldr	r3, [r7, #32]
 800383c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4618      	mov	r0, r3
 8003844:	f004 fdb9 	bl	80083ba <USB_GetMode>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	f040 848c 	bne.w	8004168 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4618      	mov	r0, r3
 8003856:	f004 fd1d 	bl	8008294 <USB_ReadInterrupts>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	f000 8482 	beq.w	8004166 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	0a1b      	lsrs	r3, r3, #8
 800386c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4618      	mov	r0, r3
 800387c:	f004 fd0a 	bl	8008294 <USB_ReadInterrupts>
 8003880:	4603      	mov	r3, r0
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	2b02      	cmp	r3, #2
 8003888:	d107      	bne.n	800389a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	695a      	ldr	r2, [r3, #20]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f002 0202 	and.w	r2, r2, #2
 8003898:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4618      	mov	r0, r3
 80038a0:	f004 fcf8 	bl	8008294 <USB_ReadInterrupts>
 80038a4:	4603      	mov	r3, r0
 80038a6:	f003 0310 	and.w	r3, r3, #16
 80038aa:	2b10      	cmp	r3, #16
 80038ac:	d161      	bne.n	8003972 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	699a      	ldr	r2, [r3, #24]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 0210 	bic.w	r2, r2, #16
 80038bc:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80038be:	6a3b      	ldr	r3, [r7, #32]
 80038c0:	6a1b      	ldr	r3, [r3, #32]
 80038c2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	f003 020f 	and.w	r2, r3, #15
 80038ca:	4613      	mov	r3, r2
 80038cc:	00db      	lsls	r3, r3, #3
 80038ce:	4413      	add	r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	4413      	add	r3, r2
 80038da:	3304      	adds	r3, #4
 80038dc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80038e4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80038e8:	d124      	bne.n	8003934 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80038ea:	69ba      	ldr	r2, [r7, #24]
 80038ec:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80038f0:	4013      	ands	r3, r2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d035      	beq.n	8003962 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	091b      	lsrs	r3, r3, #4
 80038fe:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003900:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003904:	b29b      	uxth	r3, r3
 8003906:	461a      	mov	r2, r3
 8003908:	6a38      	ldr	r0, [r7, #32]
 800390a:	f004 fb2f 	bl	8007f6c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	68da      	ldr	r2, [r3, #12]
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	091b      	lsrs	r3, r3, #4
 8003916:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800391a:	441a      	add	r2, r3
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	695a      	ldr	r2, [r3, #20]
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	091b      	lsrs	r3, r3, #4
 8003928:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800392c:	441a      	add	r2, r3
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	615a      	str	r2, [r3, #20]
 8003932:	e016      	b.n	8003962 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800393a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800393e:	d110      	bne.n	8003962 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003946:	2208      	movs	r2, #8
 8003948:	4619      	mov	r1, r3
 800394a:	6a38      	ldr	r0, [r7, #32]
 800394c:	f004 fb0e 	bl	8007f6c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	695a      	ldr	r2, [r3, #20]
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	091b      	lsrs	r3, r3, #4
 8003958:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800395c:	441a      	add	r2, r3
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	699a      	ldr	r2, [r3, #24]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f042 0210 	orr.w	r2, r2, #16
 8003970:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4618      	mov	r0, r3
 8003978:	f004 fc8c 	bl	8008294 <USB_ReadInterrupts>
 800397c:	4603      	mov	r3, r0
 800397e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003982:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003986:	f040 80a7 	bne.w	8003ad8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800398a:	2300      	movs	r3, #0
 800398c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4618      	mov	r0, r3
 8003994:	f004 fc91 	bl	80082ba <USB_ReadDevAllOutEpInterrupt>
 8003998:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800399a:	e099      	b.n	8003ad0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800399c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	f000 808e 	beq.w	8003ac4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039ae:	b2d2      	uxtb	r2, r2
 80039b0:	4611      	mov	r1, r2
 80039b2:	4618      	mov	r0, r3
 80039b4:	f004 fcb5 	bl	8008322 <USB_ReadDevOutEPInterrupt>
 80039b8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00c      	beq.n	80039de <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80039c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c6:	015a      	lsls	r2, r3, #5
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	4413      	add	r3, r2
 80039cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039d0:	461a      	mov	r2, r3
 80039d2:	2301      	movs	r3, #1
 80039d4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80039d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 fea3 	bl	8004724 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	f003 0308 	and.w	r3, r3, #8
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00c      	beq.n	8003a02 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80039e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ea:	015a      	lsls	r2, r3, #5
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	4413      	add	r3, r2
 80039f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039f4:	461a      	mov	r2, r3
 80039f6:	2308      	movs	r3, #8
 80039f8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80039fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 ff79 	bl	80048f4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	f003 0310 	and.w	r3, r3, #16
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d008      	beq.n	8003a1e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a0e:	015a      	lsls	r2, r3, #5
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	4413      	add	r3, r2
 8003a14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a18:	461a      	mov	r2, r3
 8003a1a:	2310      	movs	r3, #16
 8003a1c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d030      	beq.n	8003a8a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003a28:	6a3b      	ldr	r3, [r7, #32]
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a30:	2b80      	cmp	r3, #128	@ 0x80
 8003a32:	d109      	bne.n	8003a48 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	69fa      	ldr	r2, [r7, #28]
 8003a3e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a42:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a46:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003a48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	00db      	lsls	r3, r3, #3
 8003a4e:	4413      	add	r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	4413      	add	r3, r2
 8003a5a:	3304      	adds	r3, #4
 8003a5c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	78db      	ldrb	r3, [r3, #3]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d108      	bne.n	8003a78 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	4619      	mov	r1, r3
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f008 f83e 	bl	800baf4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a7a:	015a      	lsls	r2, r3, #5
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	4413      	add	r3, r2
 8003a80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a84:	461a      	mov	r2, r3
 8003a86:	2302      	movs	r3, #2
 8003a88:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	f003 0320 	and.w	r3, r3, #32
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d008      	beq.n	8003aa6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a96:	015a      	lsls	r2, r3, #5
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	2320      	movs	r3, #32
 8003aa4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d009      	beq.n	8003ac4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab2:	015a      	lsls	r2, r3, #5
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003abc:	461a      	mov	r2, r3
 8003abe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003ac2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003acc:	085b      	lsrs	r3, r3, #1
 8003ace:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f47f af62 	bne.w	800399c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f004 fbd9 	bl	8008294 <USB_ReadInterrupts>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ae8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003aec:	f040 80db 	bne.w	8003ca6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f004 fbfa 	bl	80082ee <USB_ReadDevAllInEpInterrupt>
 8003afa:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003afc:	2300      	movs	r3, #0
 8003afe:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003b00:	e0cd      	b.n	8003c9e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b04:	f003 0301 	and.w	r3, r3, #1
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f000 80c2 	beq.w	8003c92 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b14:	b2d2      	uxtb	r2, r2
 8003b16:	4611      	mov	r1, r2
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f004 fc20 	bl	800835e <USB_ReadDevInEPInterrupt>
 8003b1e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d057      	beq.n	8003bda <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b2c:	f003 030f 	and.w	r3, r3, #15
 8003b30:	2201      	movs	r2, #1
 8003b32:	fa02 f303 	lsl.w	r3, r2, r3
 8003b36:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	43db      	mvns	r3, r3
 8003b44:	69f9      	ldr	r1, [r7, #28]
 8003b46:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b50:	015a      	lsls	r2, r3, #5
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	4413      	add	r3, r2
 8003b56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	799b      	ldrb	r3, [r3, #6]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d132      	bne.n	8003bce <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003b68:	6879      	ldr	r1, [r7, #4]
 8003b6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	00db      	lsls	r3, r3, #3
 8003b70:	4413      	add	r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	440b      	add	r3, r1
 8003b76:	3320      	adds	r3, #32
 8003b78:	6819      	ldr	r1, [r3, #0]
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b7e:	4613      	mov	r3, r2
 8003b80:	00db      	lsls	r3, r3, #3
 8003b82:	4413      	add	r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	4403      	add	r3, r0
 8003b88:	331c      	adds	r3, #28
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4419      	add	r1, r3
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b92:	4613      	mov	r3, r2
 8003b94:	00db      	lsls	r3, r3, #3
 8003b96:	4413      	add	r3, r2
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	4403      	add	r3, r0
 8003b9c:	3320      	adds	r3, #32
 8003b9e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d113      	bne.n	8003bce <HAL_PCD_IRQHandler+0x3a2>
 8003ba6:	6879      	ldr	r1, [r7, #4]
 8003ba8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003baa:	4613      	mov	r3, r2
 8003bac:	00db      	lsls	r3, r3, #3
 8003bae:	4413      	add	r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	440b      	add	r3, r1
 8003bb4:	3324      	adds	r3, #36	@ 0x24
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d108      	bne.n	8003bce <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6818      	ldr	r0, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	2101      	movs	r1, #1
 8003bca:	f004 fc27 	bl	800841c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f007 ff08 	bl	800b9ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	f003 0308 	and.w	r3, r3, #8
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d008      	beq.n	8003bf6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be6:	015a      	lsls	r2, r3, #5
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	4413      	add	r3, r2
 8003bec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	2308      	movs	r3, #8
 8003bf4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	f003 0310 	and.w	r3, r3, #16
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d008      	beq.n	8003c12 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c02:	015a      	lsls	r2, r3, #5
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	4413      	add	r3, r2
 8003c08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	2310      	movs	r3, #16
 8003c10:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d008      	beq.n	8003c2e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c1e:	015a      	lsls	r2, r3, #5
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	4413      	add	r3, r2
 8003c24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c28:	461a      	mov	r2, r3
 8003c2a:	2340      	movs	r3, #64	@ 0x40
 8003c2c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	f003 0302 	and.w	r3, r3, #2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d023      	beq.n	8003c80 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003c38:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c3a:	6a38      	ldr	r0, [r7, #32]
 8003c3c:	f003 fc0e 	bl	800745c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003c40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c42:	4613      	mov	r3, r2
 8003c44:	00db      	lsls	r3, r3, #3
 8003c46:	4413      	add	r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	3310      	adds	r3, #16
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	4413      	add	r3, r2
 8003c50:	3304      	adds	r3, #4
 8003c52:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	78db      	ldrb	r3, [r3, #3]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d108      	bne.n	8003c6e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	4619      	mov	r1, r3
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f007 ff55 	bl	800bb18 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c70:	015a      	lsls	r2, r3, #5
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	4413      	add	r3, r2
 8003c76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d003      	beq.n	8003c92 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003c8a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f000 fcbd 	bl	800460c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c94:	3301      	adds	r3, #1
 8003c96:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c9a:	085b      	lsrs	r3, r3, #1
 8003c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	f47f af2e 	bne.w	8003b02 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4618      	mov	r0, r3
 8003cac:	f004 faf2 	bl	8008294 <USB_ReadInterrupts>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003cb6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003cba:	d122      	bne.n	8003d02 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	69fa      	ldr	r2, [r7, #28]
 8003cc6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003cca:	f023 0301 	bic.w	r3, r3, #1
 8003cce:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d108      	bne.n	8003cec <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003ce2:	2100      	movs	r1, #0
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f000 fea3 	bl	8004a30 <HAL_PCDEx_LPM_Callback>
 8003cea:	e002      	b.n	8003cf2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f007 fef3 	bl	800bad8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	695a      	ldr	r2, [r3, #20]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003d00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f004 fac4 	bl	8008294 <USB_ReadInterrupts>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d16:	d112      	bne.n	8003d3e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f003 0301 	and.w	r3, r3, #1
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d102      	bne.n	8003d2e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f007 feaf 	bl	800ba8c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	695a      	ldr	r2, [r3, #20]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003d3c:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f004 faa6 	bl	8008294 <USB_ReadInterrupts>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d52:	f040 80b7 	bne.w	8003ec4 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	69fa      	ldr	r2, [r7, #28]
 8003d60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d64:	f023 0301 	bic.w	r3, r3, #1
 8003d68:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2110      	movs	r1, #16
 8003d70:	4618      	mov	r0, r3
 8003d72:	f003 fb73 	bl	800745c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d76:	2300      	movs	r3, #0
 8003d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d7a:	e046      	b.n	8003e0a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d7e:	015a      	lsls	r2, r3, #5
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	4413      	add	r3, r2
 8003d84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d88:	461a      	mov	r2, r3
 8003d8a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003d8e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d92:	015a      	lsls	r2, r3, #5
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	4413      	add	r3, r2
 8003d98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003da0:	0151      	lsls	r1, r2, #5
 8003da2:	69fa      	ldr	r2, [r7, #28]
 8003da4:	440a      	add	r2, r1
 8003da6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003daa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003dae:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003db0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003db2:	015a      	lsls	r2, r3, #5
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	4413      	add	r3, r2
 8003db8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003dc2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dc6:	015a      	lsls	r2, r3, #5
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	4413      	add	r3, r2
 8003dcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003dd4:	0151      	lsls	r1, r2, #5
 8003dd6:	69fa      	ldr	r2, [r7, #28]
 8003dd8:	440a      	add	r2, r1
 8003dda:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003dde:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003de2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003de6:	015a      	lsls	r2, r3, #5
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	4413      	add	r3, r2
 8003dec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003df4:	0151      	lsls	r1, r2, #5
 8003df6:	69fa      	ldr	r2, [r7, #28]
 8003df8:	440a      	add	r2, r1
 8003dfa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003dfe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003e02:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e06:	3301      	adds	r3, #1
 8003e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	791b      	ldrb	r3, [r3, #4]
 8003e0e:	461a      	mov	r2, r3
 8003e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d3b2      	bcc.n	8003d7c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e1c:	69db      	ldr	r3, [r3, #28]
 8003e1e:	69fa      	ldr	r2, [r7, #28]
 8003e20:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e24:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003e28:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	7bdb      	ldrb	r3, [r3, #15]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d016      	beq.n	8003e60 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e3c:	69fa      	ldr	r2, [r7, #28]
 8003e3e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e42:	f043 030b 	orr.w	r3, r3, #11
 8003e46:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e52:	69fa      	ldr	r2, [r7, #28]
 8003e54:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e58:	f043 030b 	orr.w	r3, r3, #11
 8003e5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e5e:	e015      	b.n	8003e8c <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e66:	695b      	ldr	r3, [r3, #20]
 8003e68:	69fa      	ldr	r2, [r7, #28]
 8003e6a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e6e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003e72:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003e76:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	69fa      	ldr	r2, [r7, #28]
 8003e82:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e86:	f043 030b 	orr.w	r3, r3, #11
 8003e8a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	69fa      	ldr	r2, [r7, #28]
 8003e96:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e9a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003e9e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6818      	ldr	r0, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003eae:	461a      	mov	r2, r3
 8003eb0:	f004 fab4 	bl	800841c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	695a      	ldr	r2, [r3, #20]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003ec2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f004 f9e3 	bl	8008294 <USB_ReadInterrupts>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ed4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ed8:	d123      	bne.n	8003f22 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f004 fa79 	bl	80083d6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f003 fb30 	bl	800754e <USB_GetDevSpeed>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681c      	ldr	r4, [r3, #0]
 8003efa:	f001 fa09 	bl	8005310 <HAL_RCC_GetHCLKFreq>
 8003efe:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003f04:	461a      	mov	r2, r3
 8003f06:	4620      	mov	r0, r4
 8003f08:	f003 f834 	bl	8006f74 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f007 fd94 	bl	800ba3a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	695a      	ldr	r2, [r3, #20]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003f20:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f004 f9b4 	bl	8008294 <USB_ReadInterrupts>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	f003 0308 	and.w	r3, r3, #8
 8003f32:	2b08      	cmp	r3, #8
 8003f34:	d10a      	bne.n	8003f4c <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f007 fd71 	bl	800ba1e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	695a      	ldr	r2, [r3, #20]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f002 0208 	and.w	r2, r2, #8
 8003f4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4618      	mov	r0, r3
 8003f52:	f004 f99f 	bl	8008294 <USB_ReadInterrupts>
 8003f56:	4603      	mov	r3, r0
 8003f58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f5c:	2b80      	cmp	r3, #128	@ 0x80
 8003f5e:	d123      	bne.n	8003fa8 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003f60:	6a3b      	ldr	r3, [r7, #32]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f68:	6a3b      	ldr	r3, [r7, #32]
 8003f6a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f70:	e014      	b.n	8003f9c <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003f72:	6879      	ldr	r1, [r7, #4]
 8003f74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f76:	4613      	mov	r3, r2
 8003f78:	00db      	lsls	r3, r3, #3
 8003f7a:	4413      	add	r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	440b      	add	r3, r1
 8003f80:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d105      	bne.n	8003f96 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	4619      	mov	r1, r3
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 fb0a 	bl	80045aa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f98:	3301      	adds	r3, #1
 8003f9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	791b      	ldrb	r3, [r3, #4]
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d3e4      	bcc.n	8003f72 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4618      	mov	r0, r3
 8003fae:	f004 f971 	bl	8008294 <USB_ReadInterrupts>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003fb8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003fbc:	d13c      	bne.n	8004038 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fc2:	e02b      	b.n	800401c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc6:	015a      	lsls	r2, r3, #5
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	4413      	add	r3, r2
 8003fcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003fd4:	6879      	ldr	r1, [r7, #4]
 8003fd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fd8:	4613      	mov	r3, r2
 8003fda:	00db      	lsls	r3, r3, #3
 8003fdc:	4413      	add	r3, r2
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	440b      	add	r3, r1
 8003fe2:	3318      	adds	r3, #24
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d115      	bne.n	8004016 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003fea:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	da12      	bge.n	8004016 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003ff0:	6879      	ldr	r1, [r7, #4]
 8003ff2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	00db      	lsls	r3, r3, #3
 8003ff8:	4413      	add	r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	440b      	add	r3, r1
 8003ffe:	3317      	adds	r3, #23
 8004000:	2201      	movs	r2, #1
 8004002:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004006:	b2db      	uxtb	r3, r3
 8004008:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800400c:	b2db      	uxtb	r3, r3
 800400e:	4619      	mov	r1, r3
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 faca 	bl	80045aa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004018:	3301      	adds	r3, #1
 800401a:	627b      	str	r3, [r7, #36]	@ 0x24
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	791b      	ldrb	r3, [r3, #4]
 8004020:	461a      	mov	r2, r3
 8004022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004024:	4293      	cmp	r3, r2
 8004026:	d3cd      	bcc.n	8003fc4 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	695a      	ldr	r2, [r3, #20]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004036:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4618      	mov	r0, r3
 800403e:	f004 f929 	bl	8008294 <USB_ReadInterrupts>
 8004042:	4603      	mov	r3, r0
 8004044:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004048:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800404c:	d156      	bne.n	80040fc <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800404e:	2301      	movs	r3, #1
 8004050:	627b      	str	r3, [r7, #36]	@ 0x24
 8004052:	e045      	b.n	80040e0 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004056:	015a      	lsls	r2, r3, #5
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	4413      	add	r3, r2
 800405c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004064:	6879      	ldr	r1, [r7, #4]
 8004066:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004068:	4613      	mov	r3, r2
 800406a:	00db      	lsls	r3, r3, #3
 800406c:	4413      	add	r3, r2
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	440b      	add	r3, r1
 8004072:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d12e      	bne.n	80040da <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800407c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800407e:	2b00      	cmp	r3, #0
 8004080:	da2b      	bge.n	80040da <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	0c1a      	lsrs	r2, r3, #16
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800408c:	4053      	eors	r3, r2
 800408e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004092:	2b00      	cmp	r3, #0
 8004094:	d121      	bne.n	80040da <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004096:	6879      	ldr	r1, [r7, #4]
 8004098:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800409a:	4613      	mov	r3, r2
 800409c:	00db      	lsls	r3, r3, #3
 800409e:	4413      	add	r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	440b      	add	r3, r1
 80040a4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80040a8:	2201      	movs	r2, #1
 80040aa:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80040ac:	6a3b      	ldr	r3, [r7, #32]
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80040b4:	6a3b      	ldr	r3, [r7, #32]
 80040b6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80040b8:	6a3b      	ldr	r3, [r7, #32]
 80040ba:	695b      	ldr	r3, [r3, #20]
 80040bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d10a      	bne.n	80040da <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	69fa      	ldr	r2, [r7, #28]
 80040ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80040d6:	6053      	str	r3, [r2, #4]
            break;
 80040d8:	e008      	b.n	80040ec <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040dc:	3301      	adds	r3, #1
 80040de:	627b      	str	r3, [r7, #36]	@ 0x24
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	791b      	ldrb	r3, [r3, #4]
 80040e4:	461a      	mov	r2, r3
 80040e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d3b3      	bcc.n	8004054 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	695a      	ldr	r2, [r3, #20]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80040fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4618      	mov	r0, r3
 8004102:	f004 f8c7 	bl	8008294 <USB_ReadInterrupts>
 8004106:	4603      	mov	r3, r0
 8004108:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800410c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004110:	d10a      	bne.n	8004128 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f007 fd12 	bl	800bb3c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	695a      	ldr	r2, [r3, #20]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004126:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4618      	mov	r0, r3
 800412e:	f004 f8b1 	bl	8008294 <USB_ReadInterrupts>
 8004132:	4603      	mov	r3, r0
 8004134:	f003 0304 	and.w	r3, r3, #4
 8004138:	2b04      	cmp	r3, #4
 800413a:	d115      	bne.n	8004168 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	f003 0304 	and.w	r3, r3, #4
 800414a:	2b00      	cmp	r3, #0
 800414c:	d002      	beq.n	8004154 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f007 fd02 	bl	800bb58 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	6859      	ldr	r1, [r3, #4]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	69ba      	ldr	r2, [r7, #24]
 8004160:	430a      	orrs	r2, r1
 8004162:	605a      	str	r2, [r3, #4]
 8004164:	e000      	b.n	8004168 <HAL_PCD_IRQHandler+0x93c>
      return;
 8004166:	bf00      	nop
    }
  }
}
 8004168:	3734      	adds	r7, #52	@ 0x34
 800416a:	46bd      	mov	sp, r7
 800416c:	bd90      	pop	{r4, r7, pc}

0800416e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	b082      	sub	sp, #8
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
 8004176:	460b      	mov	r3, r1
 8004178:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004180:	2b01      	cmp	r3, #1
 8004182:	d101      	bne.n	8004188 <HAL_PCD_SetAddress+0x1a>
 8004184:	2302      	movs	r3, #2
 8004186:	e012      	b.n	80041ae <HAL_PCD_SetAddress+0x40>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	78fa      	ldrb	r2, [r7, #3]
 8004194:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	78fa      	ldrb	r2, [r7, #3]
 800419c:	4611      	mov	r1, r2
 800419e:	4618      	mov	r0, r3
 80041a0:	f004 f810 	bl	80081c4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3708      	adds	r7, #8
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b084      	sub	sp, #16
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
 80041be:	4608      	mov	r0, r1
 80041c0:	4611      	mov	r1, r2
 80041c2:	461a      	mov	r2, r3
 80041c4:	4603      	mov	r3, r0
 80041c6:	70fb      	strb	r3, [r7, #3]
 80041c8:	460b      	mov	r3, r1
 80041ca:	803b      	strh	r3, [r7, #0]
 80041cc:	4613      	mov	r3, r2
 80041ce:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80041d0:	2300      	movs	r3, #0
 80041d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80041d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	da0f      	bge.n	80041fc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041dc:	78fb      	ldrb	r3, [r7, #3]
 80041de:	f003 020f 	and.w	r2, r3, #15
 80041e2:	4613      	mov	r3, r2
 80041e4:	00db      	lsls	r3, r3, #3
 80041e6:	4413      	add	r3, r2
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	3310      	adds	r3, #16
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	4413      	add	r3, r2
 80041f0:	3304      	adds	r3, #4
 80041f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2201      	movs	r2, #1
 80041f8:	705a      	strb	r2, [r3, #1]
 80041fa:	e00f      	b.n	800421c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041fc:	78fb      	ldrb	r3, [r7, #3]
 80041fe:	f003 020f 	and.w	r2, r3, #15
 8004202:	4613      	mov	r3, r2
 8004204:	00db      	lsls	r3, r3, #3
 8004206:	4413      	add	r3, r2
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	4413      	add	r3, r2
 8004212:	3304      	adds	r3, #4
 8004214:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800421c:	78fb      	ldrb	r3, [r7, #3]
 800421e:	f003 030f 	and.w	r3, r3, #15
 8004222:	b2da      	uxtb	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004228:	883b      	ldrh	r3, [r7, #0]
 800422a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	78ba      	ldrb	r2, [r7, #2]
 8004236:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	785b      	ldrb	r3, [r3, #1]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d004      	beq.n	800424a <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	461a      	mov	r2, r3
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800424a:	78bb      	ldrb	r3, [r7, #2]
 800424c:	2b02      	cmp	r3, #2
 800424e:	d102      	bne.n	8004256 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2200      	movs	r2, #0
 8004254:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800425c:	2b01      	cmp	r3, #1
 800425e:	d101      	bne.n	8004264 <HAL_PCD_EP_Open+0xae>
 8004260:	2302      	movs	r3, #2
 8004262:	e00e      	b.n	8004282 <HAL_PCD_EP_Open+0xcc>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68f9      	ldr	r1, [r7, #12]
 8004272:	4618      	mov	r0, r3
 8004274:	f003 f990 	bl	8007598 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004280:	7afb      	ldrb	r3, [r7, #11]
}
 8004282:	4618      	mov	r0, r3
 8004284:	3710      	adds	r7, #16
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}

0800428a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800428a:	b580      	push	{r7, lr}
 800428c:	b084      	sub	sp, #16
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
 8004292:	460b      	mov	r3, r1
 8004294:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004296:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800429a:	2b00      	cmp	r3, #0
 800429c:	da0f      	bge.n	80042be <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800429e:	78fb      	ldrb	r3, [r7, #3]
 80042a0:	f003 020f 	and.w	r2, r3, #15
 80042a4:	4613      	mov	r3, r2
 80042a6:	00db      	lsls	r3, r3, #3
 80042a8:	4413      	add	r3, r2
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	3310      	adds	r3, #16
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	4413      	add	r3, r2
 80042b2:	3304      	adds	r3, #4
 80042b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2201      	movs	r2, #1
 80042ba:	705a      	strb	r2, [r3, #1]
 80042bc:	e00f      	b.n	80042de <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042be:	78fb      	ldrb	r3, [r7, #3]
 80042c0:	f003 020f 	and.w	r2, r3, #15
 80042c4:	4613      	mov	r3, r2
 80042c6:	00db      	lsls	r3, r3, #3
 80042c8:	4413      	add	r3, r2
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	4413      	add	r3, r2
 80042d4:	3304      	adds	r3, #4
 80042d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80042de:	78fb      	ldrb	r3, [r7, #3]
 80042e0:	f003 030f 	and.w	r3, r3, #15
 80042e4:	b2da      	uxtb	r2, r3
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d101      	bne.n	80042f8 <HAL_PCD_EP_Close+0x6e>
 80042f4:	2302      	movs	r3, #2
 80042f6:	e00e      	b.n	8004316 <HAL_PCD_EP_Close+0x8c>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68f9      	ldr	r1, [r7, #12]
 8004306:	4618      	mov	r0, r3
 8004308:	f003 f9ce 	bl	80076a8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3710      	adds	r7, #16
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}

0800431e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800431e:	b580      	push	{r7, lr}
 8004320:	b086      	sub	sp, #24
 8004322:	af00      	add	r7, sp, #0
 8004324:	60f8      	str	r0, [r7, #12]
 8004326:	607a      	str	r2, [r7, #4]
 8004328:	603b      	str	r3, [r7, #0]
 800432a:	460b      	mov	r3, r1
 800432c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800432e:	7afb      	ldrb	r3, [r7, #11]
 8004330:	f003 020f 	and.w	r2, r3, #15
 8004334:	4613      	mov	r3, r2
 8004336:	00db      	lsls	r3, r3, #3
 8004338:	4413      	add	r3, r2
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	4413      	add	r3, r2
 8004344:	3304      	adds	r3, #4
 8004346:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	683a      	ldr	r2, [r7, #0]
 8004352:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	2200      	movs	r2, #0
 8004358:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	2200      	movs	r2, #0
 800435e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004360:	7afb      	ldrb	r3, [r7, #11]
 8004362:	f003 030f 	and.w	r3, r3, #15
 8004366:	b2da      	uxtb	r2, r3
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	799b      	ldrb	r3, [r3, #6]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d102      	bne.n	800437a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6818      	ldr	r0, [r3, #0]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	799b      	ldrb	r3, [r3, #6]
 8004382:	461a      	mov	r2, r3
 8004384:	6979      	ldr	r1, [r7, #20]
 8004386:	f003 fa6b 	bl	8007860 <USB_EPStartXfer>

  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3718      	adds	r7, #24
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	460b      	mov	r3, r1
 800439e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80043a0:	78fb      	ldrb	r3, [r7, #3]
 80043a2:	f003 020f 	and.w	r2, r3, #15
 80043a6:	6879      	ldr	r1, [r7, #4]
 80043a8:	4613      	mov	r3, r2
 80043aa:	00db      	lsls	r3, r3, #3
 80043ac:	4413      	add	r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	440b      	add	r3, r1
 80043b2:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80043b6:	681b      	ldr	r3, [r3, #0]
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b086      	sub	sp, #24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	607a      	str	r2, [r7, #4]
 80043ce:	603b      	str	r3, [r7, #0]
 80043d0:	460b      	mov	r3, r1
 80043d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043d4:	7afb      	ldrb	r3, [r7, #11]
 80043d6:	f003 020f 	and.w	r2, r3, #15
 80043da:	4613      	mov	r3, r2
 80043dc:	00db      	lsls	r3, r3, #3
 80043de:	4413      	add	r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	3310      	adds	r3, #16
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	4413      	add	r3, r2
 80043e8:	3304      	adds	r3, #4
 80043ea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	683a      	ldr	r2, [r7, #0]
 80043f6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	2200      	movs	r2, #0
 80043fc:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	2201      	movs	r2, #1
 8004402:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004404:	7afb      	ldrb	r3, [r7, #11]
 8004406:	f003 030f 	and.w	r3, r3, #15
 800440a:	b2da      	uxtb	r2, r3
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	799b      	ldrb	r3, [r3, #6]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d102      	bne.n	800441e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6818      	ldr	r0, [r3, #0]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	799b      	ldrb	r3, [r3, #6]
 8004426:	461a      	mov	r2, r3
 8004428:	6979      	ldr	r1, [r7, #20]
 800442a:	f003 fa19 	bl	8007860 <USB_EPStartXfer>

  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3718      	adds	r7, #24
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	460b      	mov	r3, r1
 8004442:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004444:	78fb      	ldrb	r3, [r7, #3]
 8004446:	f003 030f 	and.w	r3, r3, #15
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	7912      	ldrb	r2, [r2, #4]
 800444e:	4293      	cmp	r3, r2
 8004450:	d901      	bls.n	8004456 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e04f      	b.n	80044f6 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004456:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800445a:	2b00      	cmp	r3, #0
 800445c:	da0f      	bge.n	800447e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800445e:	78fb      	ldrb	r3, [r7, #3]
 8004460:	f003 020f 	and.w	r2, r3, #15
 8004464:	4613      	mov	r3, r2
 8004466:	00db      	lsls	r3, r3, #3
 8004468:	4413      	add	r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	3310      	adds	r3, #16
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	4413      	add	r3, r2
 8004472:	3304      	adds	r3, #4
 8004474:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2201      	movs	r2, #1
 800447a:	705a      	strb	r2, [r3, #1]
 800447c:	e00d      	b.n	800449a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800447e:	78fa      	ldrb	r2, [r7, #3]
 8004480:	4613      	mov	r3, r2
 8004482:	00db      	lsls	r3, r3, #3
 8004484:	4413      	add	r3, r2
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	4413      	add	r3, r2
 8004490:	3304      	adds	r3, #4
 8004492:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2200      	movs	r2, #0
 8004498:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2201      	movs	r2, #1
 800449e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044a0:	78fb      	ldrb	r3, [r7, #3]
 80044a2:	f003 030f 	and.w	r3, r3, #15
 80044a6:	b2da      	uxtb	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d101      	bne.n	80044ba <HAL_PCD_EP_SetStall+0x82>
 80044b6:	2302      	movs	r3, #2
 80044b8:	e01d      	b.n	80044f6 <HAL_PCD_EP_SetStall+0xbe>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2201      	movs	r2, #1
 80044be:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68f9      	ldr	r1, [r7, #12]
 80044c8:	4618      	mov	r0, r3
 80044ca:	f003 fda7 	bl	800801c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80044ce:	78fb      	ldrb	r3, [r7, #3]
 80044d0:	f003 030f 	and.w	r3, r3, #15
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d109      	bne.n	80044ec <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6818      	ldr	r0, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	7999      	ldrb	r1, [r3, #6]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80044e6:	461a      	mov	r2, r3
 80044e8:	f003 ff98 	bl	800841c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3710      	adds	r7, #16
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044fe:	b580      	push	{r7, lr}
 8004500:	b084      	sub	sp, #16
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
 8004506:	460b      	mov	r3, r1
 8004508:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800450a:	78fb      	ldrb	r3, [r7, #3]
 800450c:	f003 030f 	and.w	r3, r3, #15
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	7912      	ldrb	r2, [r2, #4]
 8004514:	4293      	cmp	r3, r2
 8004516:	d901      	bls.n	800451c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e042      	b.n	80045a2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800451c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004520:	2b00      	cmp	r3, #0
 8004522:	da0f      	bge.n	8004544 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004524:	78fb      	ldrb	r3, [r7, #3]
 8004526:	f003 020f 	and.w	r2, r3, #15
 800452a:	4613      	mov	r3, r2
 800452c:	00db      	lsls	r3, r3, #3
 800452e:	4413      	add	r3, r2
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	3310      	adds	r3, #16
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	4413      	add	r3, r2
 8004538:	3304      	adds	r3, #4
 800453a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2201      	movs	r2, #1
 8004540:	705a      	strb	r2, [r3, #1]
 8004542:	e00f      	b.n	8004564 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004544:	78fb      	ldrb	r3, [r7, #3]
 8004546:	f003 020f 	and.w	r2, r3, #15
 800454a:	4613      	mov	r3, r2
 800454c:	00db      	lsls	r3, r3, #3
 800454e:	4413      	add	r3, r2
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	4413      	add	r3, r2
 800455a:	3304      	adds	r3, #4
 800455c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800456a:	78fb      	ldrb	r3, [r7, #3]
 800456c:	f003 030f 	and.w	r3, r3, #15
 8004570:	b2da      	uxtb	r2, r3
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800457c:	2b01      	cmp	r3, #1
 800457e:	d101      	bne.n	8004584 <HAL_PCD_EP_ClrStall+0x86>
 8004580:	2302      	movs	r3, #2
 8004582:	e00e      	b.n	80045a2 <HAL_PCD_EP_ClrStall+0xa4>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68f9      	ldr	r1, [r7, #12]
 8004592:	4618      	mov	r0, r3
 8004594:	f003 fdb0 	bl	80080f8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3710      	adds	r7, #16
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}

080045aa <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045aa:	b580      	push	{r7, lr}
 80045ac:	b084      	sub	sp, #16
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
 80045b2:	460b      	mov	r3, r1
 80045b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80045b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	da0c      	bge.n	80045d8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045be:	78fb      	ldrb	r3, [r7, #3]
 80045c0:	f003 020f 	and.w	r2, r3, #15
 80045c4:	4613      	mov	r3, r2
 80045c6:	00db      	lsls	r3, r3, #3
 80045c8:	4413      	add	r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	3310      	adds	r3, #16
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	4413      	add	r3, r2
 80045d2:	3304      	adds	r3, #4
 80045d4:	60fb      	str	r3, [r7, #12]
 80045d6:	e00c      	b.n	80045f2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045d8:	78fb      	ldrb	r3, [r7, #3]
 80045da:	f003 020f 	and.w	r2, r3, #15
 80045de:	4613      	mov	r3, r2
 80045e0:	00db      	lsls	r3, r3, #3
 80045e2:	4413      	add	r3, r2
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	4413      	add	r3, r2
 80045ee:	3304      	adds	r3, #4
 80045f0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68f9      	ldr	r1, [r7, #12]
 80045f8:	4618      	mov	r0, r3
 80045fa:	f003 fbcf 	bl	8007d9c <USB_EPStopXfer>
 80045fe:	4603      	mov	r3, r0
 8004600:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004602:	7afb      	ldrb	r3, [r7, #11]
}
 8004604:	4618      	mov	r0, r3
 8004606:	3710      	adds	r7, #16
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b08a      	sub	sp, #40	@ 0x28
 8004610:	af02      	add	r7, sp, #8
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004620:	683a      	ldr	r2, [r7, #0]
 8004622:	4613      	mov	r3, r2
 8004624:	00db      	lsls	r3, r3, #3
 8004626:	4413      	add	r3, r2
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	3310      	adds	r3, #16
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	4413      	add	r3, r2
 8004630:	3304      	adds	r3, #4
 8004632:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	695a      	ldr	r2, [r3, #20]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	429a      	cmp	r2, r3
 800463e:	d901      	bls.n	8004644 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e06b      	b.n	800471c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	691a      	ldr	r2, [r3, #16]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	695b      	ldr	r3, [r3, #20]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	69fa      	ldr	r2, [r7, #28]
 8004656:	429a      	cmp	r2, r3
 8004658:	d902      	bls.n	8004660 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	3303      	adds	r3, #3
 8004664:	089b      	lsrs	r3, r3, #2
 8004666:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004668:	e02a      	b.n	80046c0 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	691a      	ldr	r2, [r3, #16]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	69fa      	ldr	r2, [r7, #28]
 800467c:	429a      	cmp	r2, r3
 800467e:	d902      	bls.n	8004686 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	3303      	adds	r3, #3
 800468a:	089b      	lsrs	r3, r3, #2
 800468c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	68d9      	ldr	r1, [r3, #12]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	b2da      	uxtb	r2, r3
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800469e:	9300      	str	r3, [sp, #0]
 80046a0:	4603      	mov	r3, r0
 80046a2:	6978      	ldr	r0, [r7, #20]
 80046a4:	f003 fc24 	bl	8007ef0 <USB_WritePacket>

    ep->xfer_buff  += len;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	68da      	ldr	r2, [r3, #12]
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	441a      	add	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	695a      	ldr	r2, [r3, #20]
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	441a      	add	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	015a      	lsls	r2, r3, #5
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	4413      	add	r3, r2
 80046c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d809      	bhi.n	80046ea <PCD_WriteEmptyTxFifo+0xde>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	695a      	ldr	r2, [r3, #20]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80046de:	429a      	cmp	r2, r3
 80046e0:	d203      	bcs.n	80046ea <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1bf      	bne.n	800466a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	691a      	ldr	r2, [r3, #16]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d811      	bhi.n	800471a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	f003 030f 	and.w	r3, r3, #15
 80046fc:	2201      	movs	r2, #1
 80046fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004702:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800470a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	43db      	mvns	r3, r3
 8004710:	6939      	ldr	r1, [r7, #16]
 8004712:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004716:	4013      	ands	r3, r2
 8004718:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	3720      	adds	r7, #32
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b088      	sub	sp, #32
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	333c      	adds	r3, #60	@ 0x3c
 800473c:	3304      	adds	r3, #4
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	015a      	lsls	r2, r3, #5
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	4413      	add	r3, r2
 800474a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	799b      	ldrb	r3, [r3, #6]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d17b      	bne.n	8004852 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	f003 0308 	and.w	r3, r3, #8
 8004760:	2b00      	cmp	r3, #0
 8004762:	d015      	beq.n	8004790 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	4a61      	ldr	r2, [pc, #388]	@ (80048ec <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004768:	4293      	cmp	r3, r2
 800476a:	f240 80b9 	bls.w	80048e0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004774:	2b00      	cmp	r3, #0
 8004776:	f000 80b3 	beq.w	80048e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	015a      	lsls	r2, r3, #5
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	4413      	add	r3, r2
 8004782:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004786:	461a      	mov	r2, r3
 8004788:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800478c:	6093      	str	r3, [r2, #8]
 800478e:	e0a7      	b.n	80048e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	f003 0320 	and.w	r3, r3, #32
 8004796:	2b00      	cmp	r3, #0
 8004798:	d009      	beq.n	80047ae <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	015a      	lsls	r2, r3, #5
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	4413      	add	r3, r2
 80047a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047a6:	461a      	mov	r2, r3
 80047a8:	2320      	movs	r3, #32
 80047aa:	6093      	str	r3, [r2, #8]
 80047ac:	e098      	b.n	80048e0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f040 8093 	bne.w	80048e0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	4a4b      	ldr	r2, [pc, #300]	@ (80048ec <PCD_EP_OutXfrComplete_int+0x1c8>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d90f      	bls.n	80047e2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00a      	beq.n	80047e2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	015a      	lsls	r2, r3, #5
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	4413      	add	r3, r2
 80047d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047d8:	461a      	mov	r2, r3
 80047da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047de:	6093      	str	r3, [r2, #8]
 80047e0:	e07e      	b.n	80048e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80047e2:	683a      	ldr	r2, [r7, #0]
 80047e4:	4613      	mov	r3, r2
 80047e6:	00db      	lsls	r3, r3, #3
 80047e8:	4413      	add	r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	4413      	add	r3, r2
 80047f4:	3304      	adds	r3, #4
 80047f6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6a1a      	ldr	r2, [r3, #32]
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	0159      	lsls	r1, r3, #5
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	440b      	add	r3, r1
 8004804:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800480e:	1ad2      	subs	r2, r2, r3
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d114      	bne.n	8004844 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d109      	bne.n	8004836 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6818      	ldr	r0, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800482c:	461a      	mov	r2, r3
 800482e:	2101      	movs	r1, #1
 8004830:	f003 fdf4 	bl	800841c <USB_EP0_OutStart>
 8004834:	e006      	b.n	8004844 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	68da      	ldr	r2, [r3, #12]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	441a      	add	r2, r3
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	b2db      	uxtb	r3, r3
 8004848:	4619      	mov	r1, r3
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f007 f8b2 	bl	800b9b4 <HAL_PCD_DataOutStageCallback>
 8004850:	e046      	b.n	80048e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	4a26      	ldr	r2, [pc, #152]	@ (80048f0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d124      	bne.n	80048a4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d00a      	beq.n	800487a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	015a      	lsls	r2, r3, #5
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	4413      	add	r3, r2
 800486c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004870:	461a      	mov	r2, r3
 8004872:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004876:	6093      	str	r3, [r2, #8]
 8004878:	e032      	b.n	80048e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	f003 0320 	and.w	r3, r3, #32
 8004880:	2b00      	cmp	r3, #0
 8004882:	d008      	beq.n	8004896 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	015a      	lsls	r2, r3, #5
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	4413      	add	r3, r2
 800488c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004890:	461a      	mov	r2, r3
 8004892:	2320      	movs	r3, #32
 8004894:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	b2db      	uxtb	r3, r3
 800489a:	4619      	mov	r1, r3
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f007 f889 	bl	800b9b4 <HAL_PCD_DataOutStageCallback>
 80048a2:	e01d      	b.n	80048e0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d114      	bne.n	80048d4 <PCD_EP_OutXfrComplete_int+0x1b0>
 80048aa:	6879      	ldr	r1, [r7, #4]
 80048ac:	683a      	ldr	r2, [r7, #0]
 80048ae:	4613      	mov	r3, r2
 80048b0:	00db      	lsls	r3, r3, #3
 80048b2:	4413      	add	r3, r2
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	440b      	add	r3, r1
 80048b8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d108      	bne.n	80048d4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6818      	ldr	r0, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80048cc:	461a      	mov	r2, r3
 80048ce:	2100      	movs	r1, #0
 80048d0:	f003 fda4 	bl	800841c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	4619      	mov	r1, r3
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f007 f86a 	bl	800b9b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80048e0:	2300      	movs	r3, #0
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3720      	adds	r7, #32
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	4f54300a 	.word	0x4f54300a
 80048f0:	4f54310a 	.word	0x4f54310a

080048f4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b086      	sub	sp, #24
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	333c      	adds	r3, #60	@ 0x3c
 800490c:	3304      	adds	r3, #4
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	015a      	lsls	r2, r3, #5
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	4413      	add	r3, r2
 800491a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	4a15      	ldr	r2, [pc, #84]	@ (800497c <PCD_EP_OutSetupPacket_int+0x88>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d90e      	bls.n	8004948 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004930:	2b00      	cmp	r3, #0
 8004932:	d009      	beq.n	8004948 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	015a      	lsls	r2, r3, #5
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	4413      	add	r3, r2
 800493c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004940:	461a      	mov	r2, r3
 8004942:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004946:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f007 f821 	bl	800b990 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	4a0a      	ldr	r2, [pc, #40]	@ (800497c <PCD_EP_OutSetupPacket_int+0x88>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d90c      	bls.n	8004970 <PCD_EP_OutSetupPacket_int+0x7c>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	799b      	ldrb	r3, [r3, #6]
 800495a:	2b01      	cmp	r3, #1
 800495c:	d108      	bne.n	8004970 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6818      	ldr	r0, [r3, #0]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004968:	461a      	mov	r2, r3
 800496a:	2101      	movs	r1, #1
 800496c:	f003 fd56 	bl	800841c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3718      	adds	r7, #24
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	4f54300a 	.word	0x4f54300a

08004980 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	460b      	mov	r3, r1
 800498a:	70fb      	strb	r3, [r7, #3]
 800498c:	4613      	mov	r3, r2
 800498e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004996:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004998:	78fb      	ldrb	r3, [r7, #3]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d107      	bne.n	80049ae <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800499e:	883b      	ldrh	r3, [r7, #0]
 80049a0:	0419      	lsls	r1, r3, #16
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68ba      	ldr	r2, [r7, #8]
 80049a8:	430a      	orrs	r2, r1
 80049aa:	629a      	str	r2, [r3, #40]	@ 0x28
 80049ac:	e028      	b.n	8004a00 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049b4:	0c1b      	lsrs	r3, r3, #16
 80049b6:	68ba      	ldr	r2, [r7, #8]
 80049b8:	4413      	add	r3, r2
 80049ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80049bc:	2300      	movs	r3, #0
 80049be:	73fb      	strb	r3, [r7, #15]
 80049c0:	e00d      	b.n	80049de <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	7bfb      	ldrb	r3, [r7, #15]
 80049c8:	3340      	adds	r3, #64	@ 0x40
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	4413      	add	r3, r2
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	0c1b      	lsrs	r3, r3, #16
 80049d2:	68ba      	ldr	r2, [r7, #8]
 80049d4:	4413      	add	r3, r2
 80049d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80049d8:	7bfb      	ldrb	r3, [r7, #15]
 80049da:	3301      	adds	r3, #1
 80049dc:	73fb      	strb	r3, [r7, #15]
 80049de:	7bfa      	ldrb	r2, [r7, #15]
 80049e0:	78fb      	ldrb	r3, [r7, #3]
 80049e2:	3b01      	subs	r3, #1
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d3ec      	bcc.n	80049c2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80049e8:	883b      	ldrh	r3, [r7, #0]
 80049ea:	0418      	lsls	r0, r3, #16
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6819      	ldr	r1, [r3, #0]
 80049f0:	78fb      	ldrb	r3, [r7, #3]
 80049f2:	3b01      	subs	r3, #1
 80049f4:	68ba      	ldr	r2, [r7, #8]
 80049f6:	4302      	orrs	r2, r0
 80049f8:	3340      	adds	r3, #64	@ 0x40
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	440b      	add	r3, r1
 80049fe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3714      	adds	r7, #20
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr

08004a0e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004a0e:	b480      	push	{r7}
 8004a10:	b083      	sub	sp, #12
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
 8004a16:	460b      	mov	r3, r1
 8004a18:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	887a      	ldrh	r2, [r7, #2]
 8004a20:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004a22:	2300      	movs	r3, #0
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	460b      	mov	r3, r1
 8004a3a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004a3c:	bf00      	nop
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b086      	sub	sp, #24
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d101      	bne.n	8004a5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e267      	b.n	8004f2a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d075      	beq.n	8004b52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004a66:	4b88      	ldr	r3, [pc, #544]	@ (8004c88 <HAL_RCC_OscConfig+0x240>)
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f003 030c 	and.w	r3, r3, #12
 8004a6e:	2b04      	cmp	r3, #4
 8004a70:	d00c      	beq.n	8004a8c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a72:	4b85      	ldr	r3, [pc, #532]	@ (8004c88 <HAL_RCC_OscConfig+0x240>)
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004a7a:	2b08      	cmp	r3, #8
 8004a7c:	d112      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a7e:	4b82      	ldr	r3, [pc, #520]	@ (8004c88 <HAL_RCC_OscConfig+0x240>)
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a86:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a8a:	d10b      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a8c:	4b7e      	ldr	r3, [pc, #504]	@ (8004c88 <HAL_RCC_OscConfig+0x240>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d05b      	beq.n	8004b50 <HAL_RCC_OscConfig+0x108>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d157      	bne.n	8004b50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e242      	b.n	8004f2a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004aac:	d106      	bne.n	8004abc <HAL_RCC_OscConfig+0x74>
 8004aae:	4b76      	ldr	r3, [pc, #472]	@ (8004c88 <HAL_RCC_OscConfig+0x240>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a75      	ldr	r2, [pc, #468]	@ (8004c88 <HAL_RCC_OscConfig+0x240>)
 8004ab4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ab8:	6013      	str	r3, [r2, #0]
 8004aba:	e01d      	b.n	8004af8 <HAL_RCC_OscConfig+0xb0>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ac4:	d10c      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x98>
 8004ac6:	4b70      	ldr	r3, [pc, #448]	@ (8004c88 <HAL_RCC_OscConfig+0x240>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a6f      	ldr	r2, [pc, #444]	@ (8004c88 <HAL_RCC_OscConfig+0x240>)
 8004acc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ad0:	6013      	str	r3, [r2, #0]
 8004ad2:	4b6d      	ldr	r3, [pc, #436]	@ (8004c88 <HAL_RCC_OscConfig+0x240>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a6c      	ldr	r2, [pc, #432]	@ (8004c88 <HAL_RCC_OscConfig+0x240>)
 8004ad8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004adc:	6013      	str	r3, [r2, #0]
 8004ade:	e00b      	b.n	8004af8 <HAL_RCC_OscConfig+0xb0>
 8004ae0:	4b69      	ldr	r3, [pc, #420]	@ (8004c88 <HAL_RCC_OscConfig+0x240>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a68      	ldr	r2, [pc, #416]	@ (8004c88 <HAL_RCC_OscConfig+0x240>)
 8004ae6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004aea:	6013      	str	r3, [r2, #0]
 8004aec:	4b66      	ldr	r3, [pc, #408]	@ (8004c88 <HAL_RCC_OscConfig+0x240>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a65      	ldr	r2, [pc, #404]	@ (8004c88 <HAL_RCC_OscConfig+0x240>)
 8004af2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004af6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d013      	beq.n	8004b28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b00:	f7fc fd8c 	bl	800161c <HAL_GetTick>
 8004b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b06:	e008      	b.n	8004b1a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b08:	f7fc fd88 	bl	800161c <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	2b64      	cmp	r3, #100	@ 0x64
 8004b14:	d901      	bls.n	8004b1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e207      	b.n	8004f2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b1a:	4b5b      	ldr	r3, [pc, #364]	@ (8004c88 <HAL_RCC_OscConfig+0x240>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d0f0      	beq.n	8004b08 <HAL_RCC_OscConfig+0xc0>
 8004b26:	e014      	b.n	8004b52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b28:	f7fc fd78 	bl	800161c <HAL_GetTick>
 8004b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b2e:	e008      	b.n	8004b42 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b30:	f7fc fd74 	bl	800161c <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	2b64      	cmp	r3, #100	@ 0x64
 8004b3c:	d901      	bls.n	8004b42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e1f3      	b.n	8004f2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b42:	4b51      	ldr	r3, [pc, #324]	@ (8004c88 <HAL_RCC_OscConfig+0x240>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d1f0      	bne.n	8004b30 <HAL_RCC_OscConfig+0xe8>
 8004b4e:	e000      	b.n	8004b52 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0302 	and.w	r3, r3, #2
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d063      	beq.n	8004c26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004b5e:	4b4a      	ldr	r3, [pc, #296]	@ (8004c88 <HAL_RCC_OscConfig+0x240>)
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	f003 030c 	and.w	r3, r3, #12
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00b      	beq.n	8004b82 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b6a:	4b47      	ldr	r3, [pc, #284]	@ (8004c88 <HAL_RCC_OscConfig+0x240>)
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004b72:	2b08      	cmp	r3, #8
 8004b74:	d11c      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b76:	4b44      	ldr	r3, [pc, #272]	@ (8004c88 <HAL_RCC_OscConfig+0x240>)
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d116      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b82:	4b41      	ldr	r3, [pc, #260]	@ (8004c88 <HAL_RCC_OscConfig+0x240>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0302 	and.w	r3, r3, #2
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d005      	beq.n	8004b9a <HAL_RCC_OscConfig+0x152>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d001      	beq.n	8004b9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e1c7      	b.n	8004f2a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b9a:	4b3b      	ldr	r3, [pc, #236]	@ (8004c88 <HAL_RCC_OscConfig+0x240>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	00db      	lsls	r3, r3, #3
 8004ba8:	4937      	ldr	r1, [pc, #220]	@ (8004c88 <HAL_RCC_OscConfig+0x240>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bae:	e03a      	b.n	8004c26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d020      	beq.n	8004bfa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bb8:	4b34      	ldr	r3, [pc, #208]	@ (8004c8c <HAL_RCC_OscConfig+0x244>)
 8004bba:	2201      	movs	r2, #1
 8004bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bbe:	f7fc fd2d 	bl	800161c <HAL_GetTick>
 8004bc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bc4:	e008      	b.n	8004bd8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bc6:	f7fc fd29 	bl	800161c <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d901      	bls.n	8004bd8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e1a8      	b.n	8004f2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bd8:	4b2b      	ldr	r3, [pc, #172]	@ (8004c88 <HAL_RCC_OscConfig+0x240>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0302 	and.w	r3, r3, #2
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d0f0      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004be4:	4b28      	ldr	r3, [pc, #160]	@ (8004c88 <HAL_RCC_OscConfig+0x240>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	00db      	lsls	r3, r3, #3
 8004bf2:	4925      	ldr	r1, [pc, #148]	@ (8004c88 <HAL_RCC_OscConfig+0x240>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	600b      	str	r3, [r1, #0]
 8004bf8:	e015      	b.n	8004c26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bfa:	4b24      	ldr	r3, [pc, #144]	@ (8004c8c <HAL_RCC_OscConfig+0x244>)
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c00:	f7fc fd0c 	bl	800161c <HAL_GetTick>
 8004c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c06:	e008      	b.n	8004c1a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c08:	f7fc fd08 	bl	800161c <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d901      	bls.n	8004c1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e187      	b.n	8004f2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c1a:	4b1b      	ldr	r3, [pc, #108]	@ (8004c88 <HAL_RCC_OscConfig+0x240>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0302 	and.w	r3, r3, #2
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d1f0      	bne.n	8004c08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0308 	and.w	r3, r3, #8
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d036      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d016      	beq.n	8004c68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c3a:	4b15      	ldr	r3, [pc, #84]	@ (8004c90 <HAL_RCC_OscConfig+0x248>)
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c40:	f7fc fcec 	bl	800161c <HAL_GetTick>
 8004c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c46:	e008      	b.n	8004c5a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c48:	f7fc fce8 	bl	800161c <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d901      	bls.n	8004c5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e167      	b.n	8004f2a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c5a:	4b0b      	ldr	r3, [pc, #44]	@ (8004c88 <HAL_RCC_OscConfig+0x240>)
 8004c5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d0f0      	beq.n	8004c48 <HAL_RCC_OscConfig+0x200>
 8004c66:	e01b      	b.n	8004ca0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c68:	4b09      	ldr	r3, [pc, #36]	@ (8004c90 <HAL_RCC_OscConfig+0x248>)
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c6e:	f7fc fcd5 	bl	800161c <HAL_GetTick>
 8004c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c74:	e00e      	b.n	8004c94 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c76:	f7fc fcd1 	bl	800161c <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d907      	bls.n	8004c94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e150      	b.n	8004f2a <HAL_RCC_OscConfig+0x4e2>
 8004c88:	40023800 	.word	0x40023800
 8004c8c:	42470000 	.word	0x42470000
 8004c90:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c94:	4b88      	ldr	r3, [pc, #544]	@ (8004eb8 <HAL_RCC_OscConfig+0x470>)
 8004c96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c98:	f003 0302 	and.w	r3, r3, #2
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1ea      	bne.n	8004c76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0304 	and.w	r3, r3, #4
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	f000 8097 	beq.w	8004ddc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cb2:	4b81      	ldr	r3, [pc, #516]	@ (8004eb8 <HAL_RCC_OscConfig+0x470>)
 8004cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d10f      	bne.n	8004cde <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	60bb      	str	r3, [r7, #8]
 8004cc2:	4b7d      	ldr	r3, [pc, #500]	@ (8004eb8 <HAL_RCC_OscConfig+0x470>)
 8004cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cc6:	4a7c      	ldr	r2, [pc, #496]	@ (8004eb8 <HAL_RCC_OscConfig+0x470>)
 8004cc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ccc:	6413      	str	r3, [r2, #64]	@ 0x40
 8004cce:	4b7a      	ldr	r3, [pc, #488]	@ (8004eb8 <HAL_RCC_OscConfig+0x470>)
 8004cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cd6:	60bb      	str	r3, [r7, #8]
 8004cd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cde:	4b77      	ldr	r3, [pc, #476]	@ (8004ebc <HAL_RCC_OscConfig+0x474>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d118      	bne.n	8004d1c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cea:	4b74      	ldr	r3, [pc, #464]	@ (8004ebc <HAL_RCC_OscConfig+0x474>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a73      	ldr	r2, [pc, #460]	@ (8004ebc <HAL_RCC_OscConfig+0x474>)
 8004cf0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cf6:	f7fc fc91 	bl	800161c <HAL_GetTick>
 8004cfa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cfc:	e008      	b.n	8004d10 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cfe:	f7fc fc8d 	bl	800161c <HAL_GetTick>
 8004d02:	4602      	mov	r2, r0
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d901      	bls.n	8004d10 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	e10c      	b.n	8004f2a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d10:	4b6a      	ldr	r3, [pc, #424]	@ (8004ebc <HAL_RCC_OscConfig+0x474>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d0f0      	beq.n	8004cfe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d106      	bne.n	8004d32 <HAL_RCC_OscConfig+0x2ea>
 8004d24:	4b64      	ldr	r3, [pc, #400]	@ (8004eb8 <HAL_RCC_OscConfig+0x470>)
 8004d26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d28:	4a63      	ldr	r2, [pc, #396]	@ (8004eb8 <HAL_RCC_OscConfig+0x470>)
 8004d2a:	f043 0301 	orr.w	r3, r3, #1
 8004d2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d30:	e01c      	b.n	8004d6c <HAL_RCC_OscConfig+0x324>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	2b05      	cmp	r3, #5
 8004d38:	d10c      	bne.n	8004d54 <HAL_RCC_OscConfig+0x30c>
 8004d3a:	4b5f      	ldr	r3, [pc, #380]	@ (8004eb8 <HAL_RCC_OscConfig+0x470>)
 8004d3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d3e:	4a5e      	ldr	r2, [pc, #376]	@ (8004eb8 <HAL_RCC_OscConfig+0x470>)
 8004d40:	f043 0304 	orr.w	r3, r3, #4
 8004d44:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d46:	4b5c      	ldr	r3, [pc, #368]	@ (8004eb8 <HAL_RCC_OscConfig+0x470>)
 8004d48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d4a:	4a5b      	ldr	r2, [pc, #364]	@ (8004eb8 <HAL_RCC_OscConfig+0x470>)
 8004d4c:	f043 0301 	orr.w	r3, r3, #1
 8004d50:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d52:	e00b      	b.n	8004d6c <HAL_RCC_OscConfig+0x324>
 8004d54:	4b58      	ldr	r3, [pc, #352]	@ (8004eb8 <HAL_RCC_OscConfig+0x470>)
 8004d56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d58:	4a57      	ldr	r2, [pc, #348]	@ (8004eb8 <HAL_RCC_OscConfig+0x470>)
 8004d5a:	f023 0301 	bic.w	r3, r3, #1
 8004d5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d60:	4b55      	ldr	r3, [pc, #340]	@ (8004eb8 <HAL_RCC_OscConfig+0x470>)
 8004d62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d64:	4a54      	ldr	r2, [pc, #336]	@ (8004eb8 <HAL_RCC_OscConfig+0x470>)
 8004d66:	f023 0304 	bic.w	r3, r3, #4
 8004d6a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d015      	beq.n	8004da0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d74:	f7fc fc52 	bl	800161c <HAL_GetTick>
 8004d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d7a:	e00a      	b.n	8004d92 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d7c:	f7fc fc4e 	bl	800161c <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e0cb      	b.n	8004f2a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d92:	4b49      	ldr	r3, [pc, #292]	@ (8004eb8 <HAL_RCC_OscConfig+0x470>)
 8004d94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d96:	f003 0302 	and.w	r3, r3, #2
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d0ee      	beq.n	8004d7c <HAL_RCC_OscConfig+0x334>
 8004d9e:	e014      	b.n	8004dca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004da0:	f7fc fc3c 	bl	800161c <HAL_GetTick>
 8004da4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004da6:	e00a      	b.n	8004dbe <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004da8:	f7fc fc38 	bl	800161c <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d901      	bls.n	8004dbe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e0b5      	b.n	8004f2a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dbe:	4b3e      	ldr	r3, [pc, #248]	@ (8004eb8 <HAL_RCC_OscConfig+0x470>)
 8004dc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dc2:	f003 0302 	and.w	r3, r3, #2
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1ee      	bne.n	8004da8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004dca:	7dfb      	ldrb	r3, [r7, #23]
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d105      	bne.n	8004ddc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dd0:	4b39      	ldr	r3, [pc, #228]	@ (8004eb8 <HAL_RCC_OscConfig+0x470>)
 8004dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd4:	4a38      	ldr	r2, [pc, #224]	@ (8004eb8 <HAL_RCC_OscConfig+0x470>)
 8004dd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004dda:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	699b      	ldr	r3, [r3, #24]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	f000 80a1 	beq.w	8004f28 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004de6:	4b34      	ldr	r3, [pc, #208]	@ (8004eb8 <HAL_RCC_OscConfig+0x470>)
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	f003 030c 	and.w	r3, r3, #12
 8004dee:	2b08      	cmp	r3, #8
 8004df0:	d05c      	beq.n	8004eac <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d141      	bne.n	8004e7e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dfa:	4b31      	ldr	r3, [pc, #196]	@ (8004ec0 <HAL_RCC_OscConfig+0x478>)
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e00:	f7fc fc0c 	bl	800161c <HAL_GetTick>
 8004e04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e06:	e008      	b.n	8004e1a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e08:	f7fc fc08 	bl	800161c <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d901      	bls.n	8004e1a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e087      	b.n	8004f2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e1a:	4b27      	ldr	r3, [pc, #156]	@ (8004eb8 <HAL_RCC_OscConfig+0x470>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d1f0      	bne.n	8004e08 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	69da      	ldr	r2, [r3, #28]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a1b      	ldr	r3, [r3, #32]
 8004e2e:	431a      	orrs	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e34:	019b      	lsls	r3, r3, #6
 8004e36:	431a      	orrs	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e3c:	085b      	lsrs	r3, r3, #1
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	041b      	lsls	r3, r3, #16
 8004e42:	431a      	orrs	r2, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e48:	061b      	lsls	r3, r3, #24
 8004e4a:	491b      	ldr	r1, [pc, #108]	@ (8004eb8 <HAL_RCC_OscConfig+0x470>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e50:	4b1b      	ldr	r3, [pc, #108]	@ (8004ec0 <HAL_RCC_OscConfig+0x478>)
 8004e52:	2201      	movs	r2, #1
 8004e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e56:	f7fc fbe1 	bl	800161c <HAL_GetTick>
 8004e5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e5c:	e008      	b.n	8004e70 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e5e:	f7fc fbdd 	bl	800161c <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d901      	bls.n	8004e70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e05c      	b.n	8004f2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e70:	4b11      	ldr	r3, [pc, #68]	@ (8004eb8 <HAL_RCC_OscConfig+0x470>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d0f0      	beq.n	8004e5e <HAL_RCC_OscConfig+0x416>
 8004e7c:	e054      	b.n	8004f28 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e7e:	4b10      	ldr	r3, [pc, #64]	@ (8004ec0 <HAL_RCC_OscConfig+0x478>)
 8004e80:	2200      	movs	r2, #0
 8004e82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e84:	f7fc fbca 	bl	800161c <HAL_GetTick>
 8004e88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e8a:	e008      	b.n	8004e9e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e8c:	f7fc fbc6 	bl	800161c <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d901      	bls.n	8004e9e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e045      	b.n	8004f2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e9e:	4b06      	ldr	r3, [pc, #24]	@ (8004eb8 <HAL_RCC_OscConfig+0x470>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d1f0      	bne.n	8004e8c <HAL_RCC_OscConfig+0x444>
 8004eaa:	e03d      	b.n	8004f28 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	699b      	ldr	r3, [r3, #24]
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d107      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e038      	b.n	8004f2a <HAL_RCC_OscConfig+0x4e2>
 8004eb8:	40023800 	.word	0x40023800
 8004ebc:	40007000 	.word	0x40007000
 8004ec0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ec4:	4b1b      	ldr	r3, [pc, #108]	@ (8004f34 <HAL_RCC_OscConfig+0x4ec>)
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d028      	beq.n	8004f24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d121      	bne.n	8004f24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d11a      	bne.n	8004f24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004efa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d111      	bne.n	8004f24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f0a:	085b      	lsrs	r3, r3, #1
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d107      	bne.n	8004f24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d001      	beq.n	8004f28 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e000      	b.n	8004f2a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3718      	adds	r7, #24
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	40023800 	.word	0x40023800

08004f38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d101      	bne.n	8004f4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e0cc      	b.n	80050e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f4c:	4b68      	ldr	r3, [pc, #416]	@ (80050f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0307 	and.w	r3, r3, #7
 8004f54:	683a      	ldr	r2, [r7, #0]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d90c      	bls.n	8004f74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f5a:	4b65      	ldr	r3, [pc, #404]	@ (80050f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004f5c:	683a      	ldr	r2, [r7, #0]
 8004f5e:	b2d2      	uxtb	r2, r2
 8004f60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f62:	4b63      	ldr	r3, [pc, #396]	@ (80050f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0307 	and.w	r3, r3, #7
 8004f6a:	683a      	ldr	r2, [r7, #0]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d001      	beq.n	8004f74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e0b8      	b.n	80050e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0302 	and.w	r3, r3, #2
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d020      	beq.n	8004fc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0304 	and.w	r3, r3, #4
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d005      	beq.n	8004f98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f8c:	4b59      	ldr	r3, [pc, #356]	@ (80050f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	4a58      	ldr	r2, [pc, #352]	@ (80050f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f92:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004f96:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0308 	and.w	r3, r3, #8
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d005      	beq.n	8004fb0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fa4:	4b53      	ldr	r3, [pc, #332]	@ (80050f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	4a52      	ldr	r2, [pc, #328]	@ (80050f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004faa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004fae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fb0:	4b50      	ldr	r3, [pc, #320]	@ (80050f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	494d      	ldr	r1, [pc, #308]	@ (80050f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d044      	beq.n	8005058 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d107      	bne.n	8004fe6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fd6:	4b47      	ldr	r3, [pc, #284]	@ (80050f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d119      	bne.n	8005016 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e07f      	b.n	80050e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d003      	beq.n	8004ff6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ff2:	2b03      	cmp	r3, #3
 8004ff4:	d107      	bne.n	8005006 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ff6:	4b3f      	ldr	r3, [pc, #252]	@ (80050f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d109      	bne.n	8005016 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e06f      	b.n	80050e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005006:	4b3b      	ldr	r3, [pc, #236]	@ (80050f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0302 	and.w	r3, r3, #2
 800500e:	2b00      	cmp	r3, #0
 8005010:	d101      	bne.n	8005016 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e067      	b.n	80050e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005016:	4b37      	ldr	r3, [pc, #220]	@ (80050f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f023 0203 	bic.w	r2, r3, #3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	4934      	ldr	r1, [pc, #208]	@ (80050f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005024:	4313      	orrs	r3, r2
 8005026:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005028:	f7fc faf8 	bl	800161c <HAL_GetTick>
 800502c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800502e:	e00a      	b.n	8005046 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005030:	f7fc faf4 	bl	800161c <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800503e:	4293      	cmp	r3, r2
 8005040:	d901      	bls.n	8005046 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e04f      	b.n	80050e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005046:	4b2b      	ldr	r3, [pc, #172]	@ (80050f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f003 020c 	and.w	r2, r3, #12
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	429a      	cmp	r2, r3
 8005056:	d1eb      	bne.n	8005030 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005058:	4b25      	ldr	r3, [pc, #148]	@ (80050f0 <HAL_RCC_ClockConfig+0x1b8>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0307 	and.w	r3, r3, #7
 8005060:	683a      	ldr	r2, [r7, #0]
 8005062:	429a      	cmp	r2, r3
 8005064:	d20c      	bcs.n	8005080 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005066:	4b22      	ldr	r3, [pc, #136]	@ (80050f0 <HAL_RCC_ClockConfig+0x1b8>)
 8005068:	683a      	ldr	r2, [r7, #0]
 800506a:	b2d2      	uxtb	r2, r2
 800506c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800506e:	4b20      	ldr	r3, [pc, #128]	@ (80050f0 <HAL_RCC_ClockConfig+0x1b8>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0307 	and.w	r3, r3, #7
 8005076:	683a      	ldr	r2, [r7, #0]
 8005078:	429a      	cmp	r2, r3
 800507a:	d001      	beq.n	8005080 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e032      	b.n	80050e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 0304 	and.w	r3, r3, #4
 8005088:	2b00      	cmp	r3, #0
 800508a:	d008      	beq.n	800509e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800508c:	4b19      	ldr	r3, [pc, #100]	@ (80050f4 <HAL_RCC_ClockConfig+0x1bc>)
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	4916      	ldr	r1, [pc, #88]	@ (80050f4 <HAL_RCC_ClockConfig+0x1bc>)
 800509a:	4313      	orrs	r3, r2
 800509c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0308 	and.w	r3, r3, #8
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d009      	beq.n	80050be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050aa:	4b12      	ldr	r3, [pc, #72]	@ (80050f4 <HAL_RCC_ClockConfig+0x1bc>)
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	00db      	lsls	r3, r3, #3
 80050b8:	490e      	ldr	r1, [pc, #56]	@ (80050f4 <HAL_RCC_ClockConfig+0x1bc>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80050be:	f000 f821 	bl	8005104 <HAL_RCC_GetSysClockFreq>
 80050c2:	4602      	mov	r2, r0
 80050c4:	4b0b      	ldr	r3, [pc, #44]	@ (80050f4 <HAL_RCC_ClockConfig+0x1bc>)
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	091b      	lsrs	r3, r3, #4
 80050ca:	f003 030f 	and.w	r3, r3, #15
 80050ce:	490a      	ldr	r1, [pc, #40]	@ (80050f8 <HAL_RCC_ClockConfig+0x1c0>)
 80050d0:	5ccb      	ldrb	r3, [r1, r3]
 80050d2:	fa22 f303 	lsr.w	r3, r2, r3
 80050d6:	4a09      	ldr	r2, [pc, #36]	@ (80050fc <HAL_RCC_ClockConfig+0x1c4>)
 80050d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80050da:	4b09      	ldr	r3, [pc, #36]	@ (8005100 <HAL_RCC_ClockConfig+0x1c8>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4618      	mov	r0, r3
 80050e0:	f7fc fa58 	bl	8001594 <HAL_InitTick>

  return HAL_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	40023c00 	.word	0x40023c00
 80050f4:	40023800 	.word	0x40023800
 80050f8:	0800c8e0 	.word	0x0800c8e0
 80050fc:	20000000 	.word	0x20000000
 8005100:	20000004 	.word	0x20000004

08005104 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005104:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005108:	b094      	sub	sp, #80	@ 0x50
 800510a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800510c:	2300      	movs	r3, #0
 800510e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005110:	2300      	movs	r3, #0
 8005112:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005114:	2300      	movs	r3, #0
 8005116:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005118:	2300      	movs	r3, #0
 800511a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800511c:	4b79      	ldr	r3, [pc, #484]	@ (8005304 <HAL_RCC_GetSysClockFreq+0x200>)
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	f003 030c 	and.w	r3, r3, #12
 8005124:	2b08      	cmp	r3, #8
 8005126:	d00d      	beq.n	8005144 <HAL_RCC_GetSysClockFreq+0x40>
 8005128:	2b08      	cmp	r3, #8
 800512a:	f200 80e1 	bhi.w	80052f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800512e:	2b00      	cmp	r3, #0
 8005130:	d002      	beq.n	8005138 <HAL_RCC_GetSysClockFreq+0x34>
 8005132:	2b04      	cmp	r3, #4
 8005134:	d003      	beq.n	800513e <HAL_RCC_GetSysClockFreq+0x3a>
 8005136:	e0db      	b.n	80052f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005138:	4b73      	ldr	r3, [pc, #460]	@ (8005308 <HAL_RCC_GetSysClockFreq+0x204>)
 800513a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800513c:	e0db      	b.n	80052f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800513e:	4b73      	ldr	r3, [pc, #460]	@ (800530c <HAL_RCC_GetSysClockFreq+0x208>)
 8005140:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005142:	e0d8      	b.n	80052f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005144:	4b6f      	ldr	r3, [pc, #444]	@ (8005304 <HAL_RCC_GetSysClockFreq+0x200>)
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800514c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800514e:	4b6d      	ldr	r3, [pc, #436]	@ (8005304 <HAL_RCC_GetSysClockFreq+0x200>)
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d063      	beq.n	8005222 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800515a:	4b6a      	ldr	r3, [pc, #424]	@ (8005304 <HAL_RCC_GetSysClockFreq+0x200>)
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	099b      	lsrs	r3, r3, #6
 8005160:	2200      	movs	r2, #0
 8005162:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005164:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005168:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800516c:	633b      	str	r3, [r7, #48]	@ 0x30
 800516e:	2300      	movs	r3, #0
 8005170:	637b      	str	r3, [r7, #52]	@ 0x34
 8005172:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005176:	4622      	mov	r2, r4
 8005178:	462b      	mov	r3, r5
 800517a:	f04f 0000 	mov.w	r0, #0
 800517e:	f04f 0100 	mov.w	r1, #0
 8005182:	0159      	lsls	r1, r3, #5
 8005184:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005188:	0150      	lsls	r0, r2, #5
 800518a:	4602      	mov	r2, r0
 800518c:	460b      	mov	r3, r1
 800518e:	4621      	mov	r1, r4
 8005190:	1a51      	subs	r1, r2, r1
 8005192:	6139      	str	r1, [r7, #16]
 8005194:	4629      	mov	r1, r5
 8005196:	eb63 0301 	sbc.w	r3, r3, r1
 800519a:	617b      	str	r3, [r7, #20]
 800519c:	f04f 0200 	mov.w	r2, #0
 80051a0:	f04f 0300 	mov.w	r3, #0
 80051a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051a8:	4659      	mov	r1, fp
 80051aa:	018b      	lsls	r3, r1, #6
 80051ac:	4651      	mov	r1, sl
 80051ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80051b2:	4651      	mov	r1, sl
 80051b4:	018a      	lsls	r2, r1, #6
 80051b6:	4651      	mov	r1, sl
 80051b8:	ebb2 0801 	subs.w	r8, r2, r1
 80051bc:	4659      	mov	r1, fp
 80051be:	eb63 0901 	sbc.w	r9, r3, r1
 80051c2:	f04f 0200 	mov.w	r2, #0
 80051c6:	f04f 0300 	mov.w	r3, #0
 80051ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80051ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80051d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80051d6:	4690      	mov	r8, r2
 80051d8:	4699      	mov	r9, r3
 80051da:	4623      	mov	r3, r4
 80051dc:	eb18 0303 	adds.w	r3, r8, r3
 80051e0:	60bb      	str	r3, [r7, #8]
 80051e2:	462b      	mov	r3, r5
 80051e4:	eb49 0303 	adc.w	r3, r9, r3
 80051e8:	60fb      	str	r3, [r7, #12]
 80051ea:	f04f 0200 	mov.w	r2, #0
 80051ee:	f04f 0300 	mov.w	r3, #0
 80051f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80051f6:	4629      	mov	r1, r5
 80051f8:	024b      	lsls	r3, r1, #9
 80051fa:	4621      	mov	r1, r4
 80051fc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005200:	4621      	mov	r1, r4
 8005202:	024a      	lsls	r2, r1, #9
 8005204:	4610      	mov	r0, r2
 8005206:	4619      	mov	r1, r3
 8005208:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800520a:	2200      	movs	r2, #0
 800520c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800520e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005210:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005214:	f7fb f82c 	bl	8000270 <__aeabi_uldivmod>
 8005218:	4602      	mov	r2, r0
 800521a:	460b      	mov	r3, r1
 800521c:	4613      	mov	r3, r2
 800521e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005220:	e058      	b.n	80052d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005222:	4b38      	ldr	r3, [pc, #224]	@ (8005304 <HAL_RCC_GetSysClockFreq+0x200>)
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	099b      	lsrs	r3, r3, #6
 8005228:	2200      	movs	r2, #0
 800522a:	4618      	mov	r0, r3
 800522c:	4611      	mov	r1, r2
 800522e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005232:	623b      	str	r3, [r7, #32]
 8005234:	2300      	movs	r3, #0
 8005236:	627b      	str	r3, [r7, #36]	@ 0x24
 8005238:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800523c:	4642      	mov	r2, r8
 800523e:	464b      	mov	r3, r9
 8005240:	f04f 0000 	mov.w	r0, #0
 8005244:	f04f 0100 	mov.w	r1, #0
 8005248:	0159      	lsls	r1, r3, #5
 800524a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800524e:	0150      	lsls	r0, r2, #5
 8005250:	4602      	mov	r2, r0
 8005252:	460b      	mov	r3, r1
 8005254:	4641      	mov	r1, r8
 8005256:	ebb2 0a01 	subs.w	sl, r2, r1
 800525a:	4649      	mov	r1, r9
 800525c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005260:	f04f 0200 	mov.w	r2, #0
 8005264:	f04f 0300 	mov.w	r3, #0
 8005268:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800526c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005270:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005274:	ebb2 040a 	subs.w	r4, r2, sl
 8005278:	eb63 050b 	sbc.w	r5, r3, fp
 800527c:	f04f 0200 	mov.w	r2, #0
 8005280:	f04f 0300 	mov.w	r3, #0
 8005284:	00eb      	lsls	r3, r5, #3
 8005286:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800528a:	00e2      	lsls	r2, r4, #3
 800528c:	4614      	mov	r4, r2
 800528e:	461d      	mov	r5, r3
 8005290:	4643      	mov	r3, r8
 8005292:	18e3      	adds	r3, r4, r3
 8005294:	603b      	str	r3, [r7, #0]
 8005296:	464b      	mov	r3, r9
 8005298:	eb45 0303 	adc.w	r3, r5, r3
 800529c:	607b      	str	r3, [r7, #4]
 800529e:	f04f 0200 	mov.w	r2, #0
 80052a2:	f04f 0300 	mov.w	r3, #0
 80052a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80052aa:	4629      	mov	r1, r5
 80052ac:	028b      	lsls	r3, r1, #10
 80052ae:	4621      	mov	r1, r4
 80052b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80052b4:	4621      	mov	r1, r4
 80052b6:	028a      	lsls	r2, r1, #10
 80052b8:	4610      	mov	r0, r2
 80052ba:	4619      	mov	r1, r3
 80052bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052be:	2200      	movs	r2, #0
 80052c0:	61bb      	str	r3, [r7, #24]
 80052c2:	61fa      	str	r2, [r7, #28]
 80052c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052c8:	f7fa ffd2 	bl	8000270 <__aeabi_uldivmod>
 80052cc:	4602      	mov	r2, r0
 80052ce:	460b      	mov	r3, r1
 80052d0:	4613      	mov	r3, r2
 80052d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80052d4:	4b0b      	ldr	r3, [pc, #44]	@ (8005304 <HAL_RCC_GetSysClockFreq+0x200>)
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	0c1b      	lsrs	r3, r3, #16
 80052da:	f003 0303 	and.w	r3, r3, #3
 80052de:	3301      	adds	r3, #1
 80052e0:	005b      	lsls	r3, r3, #1
 80052e2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80052e4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80052e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80052ee:	e002      	b.n	80052f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80052f0:	4b05      	ldr	r3, [pc, #20]	@ (8005308 <HAL_RCC_GetSysClockFreq+0x204>)
 80052f2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80052f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3750      	adds	r7, #80	@ 0x50
 80052fc:	46bd      	mov	sp, r7
 80052fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005302:	bf00      	nop
 8005304:	40023800 	.word	0x40023800
 8005308:	00f42400 	.word	0x00f42400
 800530c:	007a1200 	.word	0x007a1200

08005310 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005310:	b480      	push	{r7}
 8005312:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005314:	4b03      	ldr	r3, [pc, #12]	@ (8005324 <HAL_RCC_GetHCLKFreq+0x14>)
 8005316:	681b      	ldr	r3, [r3, #0]
}
 8005318:	4618      	mov	r0, r3
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	20000000 	.word	0x20000000

08005328 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800532c:	f7ff fff0 	bl	8005310 <HAL_RCC_GetHCLKFreq>
 8005330:	4602      	mov	r2, r0
 8005332:	4b05      	ldr	r3, [pc, #20]	@ (8005348 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	0a9b      	lsrs	r3, r3, #10
 8005338:	f003 0307 	and.w	r3, r3, #7
 800533c:	4903      	ldr	r1, [pc, #12]	@ (800534c <HAL_RCC_GetPCLK1Freq+0x24>)
 800533e:	5ccb      	ldrb	r3, [r1, r3]
 8005340:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005344:	4618      	mov	r0, r3
 8005346:	bd80      	pop	{r7, pc}
 8005348:	40023800 	.word	0x40023800
 800534c:	0800c8f0 	.word	0x0800c8f0

08005350 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005354:	f7ff ffdc 	bl	8005310 <HAL_RCC_GetHCLKFreq>
 8005358:	4602      	mov	r2, r0
 800535a:	4b05      	ldr	r3, [pc, #20]	@ (8005370 <HAL_RCC_GetPCLK2Freq+0x20>)
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	0b5b      	lsrs	r3, r3, #13
 8005360:	f003 0307 	and.w	r3, r3, #7
 8005364:	4903      	ldr	r1, [pc, #12]	@ (8005374 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005366:	5ccb      	ldrb	r3, [r1, r3]
 8005368:	fa22 f303 	lsr.w	r3, r2, r3
}
 800536c:	4618      	mov	r0, r3
 800536e:	bd80      	pop	{r7, pc}
 8005370:	40023800 	.word	0x40023800
 8005374:	0800c8f0 	.word	0x0800c8f0

08005378 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d101      	bne.n	800538a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e041      	b.n	800540e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b00      	cmp	r3, #0
 8005394:	d106      	bne.n	80053a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f7fb fe7e 	bl	80010a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2202      	movs	r2, #2
 80053a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	3304      	adds	r3, #4
 80053b4:	4619      	mov	r1, r3
 80053b6:	4610      	mov	r0, r2
 80053b8:	f000 fb14 	bl	80059e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	3708      	adds	r7, #8
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
	...

08005418 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005418:	b480      	push	{r7}
 800541a:	b085      	sub	sp, #20
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005426:	b2db      	uxtb	r3, r3
 8005428:	2b01      	cmp	r3, #1
 800542a:	d001      	beq.n	8005430 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e046      	b.n	80054be <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2202      	movs	r2, #2
 8005434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a23      	ldr	r2, [pc, #140]	@ (80054cc <HAL_TIM_Base_Start+0xb4>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d022      	beq.n	8005488 <HAL_TIM_Base_Start+0x70>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800544a:	d01d      	beq.n	8005488 <HAL_TIM_Base_Start+0x70>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a1f      	ldr	r2, [pc, #124]	@ (80054d0 <HAL_TIM_Base_Start+0xb8>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d018      	beq.n	8005488 <HAL_TIM_Base_Start+0x70>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a1e      	ldr	r2, [pc, #120]	@ (80054d4 <HAL_TIM_Base_Start+0xbc>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d013      	beq.n	8005488 <HAL_TIM_Base_Start+0x70>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a1c      	ldr	r2, [pc, #112]	@ (80054d8 <HAL_TIM_Base_Start+0xc0>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d00e      	beq.n	8005488 <HAL_TIM_Base_Start+0x70>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a1b      	ldr	r2, [pc, #108]	@ (80054dc <HAL_TIM_Base_Start+0xc4>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d009      	beq.n	8005488 <HAL_TIM_Base_Start+0x70>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a19      	ldr	r2, [pc, #100]	@ (80054e0 <HAL_TIM_Base_Start+0xc8>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d004      	beq.n	8005488 <HAL_TIM_Base_Start+0x70>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a18      	ldr	r2, [pc, #96]	@ (80054e4 <HAL_TIM_Base_Start+0xcc>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d111      	bne.n	80054ac <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	f003 0307 	and.w	r3, r3, #7
 8005492:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2b06      	cmp	r3, #6
 8005498:	d010      	beq.n	80054bc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f042 0201 	orr.w	r2, r2, #1
 80054a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054aa:	e007      	b.n	80054bc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f042 0201 	orr.w	r2, r2, #1
 80054ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3714      	adds	r7, #20
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	40010000 	.word	0x40010000
 80054d0:	40000400 	.word	0x40000400
 80054d4:	40000800 	.word	0x40000800
 80054d8:	40000c00 	.word	0x40000c00
 80054dc:	40010400 	.word	0x40010400
 80054e0:	40014000 	.word	0x40014000
 80054e4:	40001800 	.word	0x40001800

080054e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b085      	sub	sp, #20
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d001      	beq.n	8005500 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e04e      	b.n	800559e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2202      	movs	r2, #2
 8005504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	68da      	ldr	r2, [r3, #12]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f042 0201 	orr.w	r2, r2, #1
 8005516:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a23      	ldr	r2, [pc, #140]	@ (80055ac <HAL_TIM_Base_Start_IT+0xc4>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d022      	beq.n	8005568 <HAL_TIM_Base_Start_IT+0x80>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800552a:	d01d      	beq.n	8005568 <HAL_TIM_Base_Start_IT+0x80>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a1f      	ldr	r2, [pc, #124]	@ (80055b0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d018      	beq.n	8005568 <HAL_TIM_Base_Start_IT+0x80>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a1e      	ldr	r2, [pc, #120]	@ (80055b4 <HAL_TIM_Base_Start_IT+0xcc>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d013      	beq.n	8005568 <HAL_TIM_Base_Start_IT+0x80>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a1c      	ldr	r2, [pc, #112]	@ (80055b8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d00e      	beq.n	8005568 <HAL_TIM_Base_Start_IT+0x80>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a1b      	ldr	r2, [pc, #108]	@ (80055bc <HAL_TIM_Base_Start_IT+0xd4>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d009      	beq.n	8005568 <HAL_TIM_Base_Start_IT+0x80>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a19      	ldr	r2, [pc, #100]	@ (80055c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d004      	beq.n	8005568 <HAL_TIM_Base_Start_IT+0x80>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a18      	ldr	r2, [pc, #96]	@ (80055c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d111      	bne.n	800558c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	f003 0307 	and.w	r3, r3, #7
 8005572:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2b06      	cmp	r3, #6
 8005578:	d010      	beq.n	800559c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f042 0201 	orr.w	r2, r2, #1
 8005588:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800558a:	e007      	b.n	800559c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f042 0201 	orr.w	r2, r2, #1
 800559a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3714      	adds	r7, #20
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	40010000 	.word	0x40010000
 80055b0:	40000400 	.word	0x40000400
 80055b4:	40000800 	.word	0x40000800
 80055b8:	40000c00 	.word	0x40000c00
 80055bc:	40010400 	.word	0x40010400
 80055c0:	40014000 	.word	0x40014000
 80055c4:	40001800 	.word	0x40001800

080055c8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68da      	ldr	r2, [r3, #12]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f022 0201 	bic.w	r2, r2, #1
 80055de:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	6a1a      	ldr	r2, [r3, #32]
 80055e6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80055ea:	4013      	ands	r3, r2
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d10f      	bne.n	8005610 <HAL_TIM_Base_Stop_IT+0x48>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	6a1a      	ldr	r2, [r3, #32]
 80055f6:	f240 4344 	movw	r3, #1092	@ 0x444
 80055fa:	4013      	ands	r3, r2
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d107      	bne.n	8005610 <HAL_TIM_Base_Stop_IT+0x48>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f022 0201 	bic.w	r2, r2, #1
 800560e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	370c      	adds	r7, #12
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr

08005626 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005626:	b580      	push	{r7, lr}
 8005628:	b084      	sub	sp, #16
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	f003 0302 	and.w	r3, r3, #2
 8005644:	2b00      	cmp	r3, #0
 8005646:	d020      	beq.n	800568a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f003 0302 	and.w	r3, r3, #2
 800564e:	2b00      	cmp	r3, #0
 8005650:	d01b      	beq.n	800568a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f06f 0202 	mvn.w	r2, #2
 800565a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	699b      	ldr	r3, [r3, #24]
 8005668:	f003 0303 	and.w	r3, r3, #3
 800566c:	2b00      	cmp	r3, #0
 800566e:	d003      	beq.n	8005678 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 f999 	bl	80059a8 <HAL_TIM_IC_CaptureCallback>
 8005676:	e005      	b.n	8005684 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 f98b 	bl	8005994 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 f99c 	bl	80059bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	f003 0304 	and.w	r3, r3, #4
 8005690:	2b00      	cmp	r3, #0
 8005692:	d020      	beq.n	80056d6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f003 0304 	and.w	r3, r3, #4
 800569a:	2b00      	cmp	r3, #0
 800569c:	d01b      	beq.n	80056d6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f06f 0204 	mvn.w	r2, #4
 80056a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2202      	movs	r2, #2
 80056ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	699b      	ldr	r3, [r3, #24]
 80056b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d003      	beq.n	80056c4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 f973 	bl	80059a8 <HAL_TIM_IC_CaptureCallback>
 80056c2:	e005      	b.n	80056d0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f000 f965 	bl	8005994 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 f976 	bl	80059bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	f003 0308 	and.w	r3, r3, #8
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d020      	beq.n	8005722 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f003 0308 	and.w	r3, r3, #8
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d01b      	beq.n	8005722 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f06f 0208 	mvn.w	r2, #8
 80056f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2204      	movs	r2, #4
 80056f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	69db      	ldr	r3, [r3, #28]
 8005700:	f003 0303 	and.w	r3, r3, #3
 8005704:	2b00      	cmp	r3, #0
 8005706:	d003      	beq.n	8005710 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f000 f94d 	bl	80059a8 <HAL_TIM_IC_CaptureCallback>
 800570e:	e005      	b.n	800571c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 f93f 	bl	8005994 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 f950 	bl	80059bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	f003 0310 	and.w	r3, r3, #16
 8005728:	2b00      	cmp	r3, #0
 800572a:	d020      	beq.n	800576e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f003 0310 	and.w	r3, r3, #16
 8005732:	2b00      	cmp	r3, #0
 8005734:	d01b      	beq.n	800576e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f06f 0210 	mvn.w	r2, #16
 800573e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2208      	movs	r2, #8
 8005744:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	69db      	ldr	r3, [r3, #28]
 800574c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005750:	2b00      	cmp	r3, #0
 8005752:	d003      	beq.n	800575c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 f927 	bl	80059a8 <HAL_TIM_IC_CaptureCallback>
 800575a:	e005      	b.n	8005768 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f000 f919 	bl	8005994 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 f92a 	bl	80059bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	f003 0301 	and.w	r3, r3, #1
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00c      	beq.n	8005792 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f003 0301 	and.w	r3, r3, #1
 800577e:	2b00      	cmp	r3, #0
 8005780:	d007      	beq.n	8005792 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f06f 0201 	mvn.w	r2, #1
 800578a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f003 f9cd 	bl	8008b2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005798:	2b00      	cmp	r3, #0
 800579a:	d00c      	beq.n	80057b6 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d007      	beq.n	80057b6 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80057ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 fadd 	bl	8005d70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d00c      	beq.n	80057da <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d007      	beq.n	80057da <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80057d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 f8fb 	bl	80059d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	f003 0320 	and.w	r3, r3, #32
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d00c      	beq.n	80057fe <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f003 0320 	and.w	r3, r3, #32
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d007      	beq.n	80057fe <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f06f 0220 	mvn.w	r2, #32
 80057f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f000 faaf 	bl	8005d5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057fe:	bf00      	nop
 8005800:	3710      	adds	r7, #16
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}

08005806 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005806:	b580      	push	{r7, lr}
 8005808:	b084      	sub	sp, #16
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
 800580e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005810:	2300      	movs	r3, #0
 8005812:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800581a:	2b01      	cmp	r3, #1
 800581c:	d101      	bne.n	8005822 <HAL_TIM_ConfigClockSource+0x1c>
 800581e:	2302      	movs	r3, #2
 8005820:	e0b4      	b.n	800598c <HAL_TIM_ConfigClockSource+0x186>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2201      	movs	r2, #1
 8005826:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2202      	movs	r2, #2
 800582e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005840:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005848:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68ba      	ldr	r2, [r7, #8]
 8005850:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800585a:	d03e      	beq.n	80058da <HAL_TIM_ConfigClockSource+0xd4>
 800585c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005860:	f200 8087 	bhi.w	8005972 <HAL_TIM_ConfigClockSource+0x16c>
 8005864:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005868:	f000 8086 	beq.w	8005978 <HAL_TIM_ConfigClockSource+0x172>
 800586c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005870:	d87f      	bhi.n	8005972 <HAL_TIM_ConfigClockSource+0x16c>
 8005872:	2b70      	cmp	r3, #112	@ 0x70
 8005874:	d01a      	beq.n	80058ac <HAL_TIM_ConfigClockSource+0xa6>
 8005876:	2b70      	cmp	r3, #112	@ 0x70
 8005878:	d87b      	bhi.n	8005972 <HAL_TIM_ConfigClockSource+0x16c>
 800587a:	2b60      	cmp	r3, #96	@ 0x60
 800587c:	d050      	beq.n	8005920 <HAL_TIM_ConfigClockSource+0x11a>
 800587e:	2b60      	cmp	r3, #96	@ 0x60
 8005880:	d877      	bhi.n	8005972 <HAL_TIM_ConfigClockSource+0x16c>
 8005882:	2b50      	cmp	r3, #80	@ 0x50
 8005884:	d03c      	beq.n	8005900 <HAL_TIM_ConfigClockSource+0xfa>
 8005886:	2b50      	cmp	r3, #80	@ 0x50
 8005888:	d873      	bhi.n	8005972 <HAL_TIM_ConfigClockSource+0x16c>
 800588a:	2b40      	cmp	r3, #64	@ 0x40
 800588c:	d058      	beq.n	8005940 <HAL_TIM_ConfigClockSource+0x13a>
 800588e:	2b40      	cmp	r3, #64	@ 0x40
 8005890:	d86f      	bhi.n	8005972 <HAL_TIM_ConfigClockSource+0x16c>
 8005892:	2b30      	cmp	r3, #48	@ 0x30
 8005894:	d064      	beq.n	8005960 <HAL_TIM_ConfigClockSource+0x15a>
 8005896:	2b30      	cmp	r3, #48	@ 0x30
 8005898:	d86b      	bhi.n	8005972 <HAL_TIM_ConfigClockSource+0x16c>
 800589a:	2b20      	cmp	r3, #32
 800589c:	d060      	beq.n	8005960 <HAL_TIM_ConfigClockSource+0x15a>
 800589e:	2b20      	cmp	r3, #32
 80058a0:	d867      	bhi.n	8005972 <HAL_TIM_ConfigClockSource+0x16c>
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d05c      	beq.n	8005960 <HAL_TIM_ConfigClockSource+0x15a>
 80058a6:	2b10      	cmp	r3, #16
 80058a8:	d05a      	beq.n	8005960 <HAL_TIM_ConfigClockSource+0x15a>
 80058aa:	e062      	b.n	8005972 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058bc:	f000 f9b2 	bl	8005c24 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80058ce:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68ba      	ldr	r2, [r7, #8]
 80058d6:	609a      	str	r2, [r3, #8]
      break;
 80058d8:	e04f      	b.n	800597a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058ea:	f000 f99b 	bl	8005c24 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	689a      	ldr	r2, [r3, #8]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80058fc:	609a      	str	r2, [r3, #8]
      break;
 80058fe:	e03c      	b.n	800597a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800590c:	461a      	mov	r2, r3
 800590e:	f000 f90f 	bl	8005b30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2150      	movs	r1, #80	@ 0x50
 8005918:	4618      	mov	r0, r3
 800591a:	f000 f968 	bl	8005bee <TIM_ITRx_SetConfig>
      break;
 800591e:	e02c      	b.n	800597a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800592c:	461a      	mov	r2, r3
 800592e:	f000 f92e 	bl	8005b8e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2160      	movs	r1, #96	@ 0x60
 8005938:	4618      	mov	r0, r3
 800593a:	f000 f958 	bl	8005bee <TIM_ITRx_SetConfig>
      break;
 800593e:	e01c      	b.n	800597a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800594c:	461a      	mov	r2, r3
 800594e:	f000 f8ef 	bl	8005b30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2140      	movs	r1, #64	@ 0x40
 8005958:	4618      	mov	r0, r3
 800595a:	f000 f948 	bl	8005bee <TIM_ITRx_SetConfig>
      break;
 800595e:	e00c      	b.n	800597a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4619      	mov	r1, r3
 800596a:	4610      	mov	r0, r2
 800596c:	f000 f93f 	bl	8005bee <TIM_ITRx_SetConfig>
      break;
 8005970:	e003      	b.n	800597a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	73fb      	strb	r3, [r7, #15]
      break;
 8005976:	e000      	b.n	800597a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005978:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2201      	movs	r2, #1
 800597e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800598a:	7bfb      	ldrb	r3, [r7, #15]
}
 800598c:	4618      	mov	r0, r3
 800598e:	3710      	adds	r7, #16
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800599c:	bf00      	nop
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059b0:	bf00      	nop
 80059b2:	370c      	adds	r7, #12
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059c4:	bf00      	nop
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059d8:	bf00      	nop
 80059da:	370c      	adds	r7, #12
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b085      	sub	sp, #20
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a43      	ldr	r2, [pc, #268]	@ (8005b04 <TIM_Base_SetConfig+0x120>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d013      	beq.n	8005a24 <TIM_Base_SetConfig+0x40>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a02:	d00f      	beq.n	8005a24 <TIM_Base_SetConfig+0x40>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a40      	ldr	r2, [pc, #256]	@ (8005b08 <TIM_Base_SetConfig+0x124>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d00b      	beq.n	8005a24 <TIM_Base_SetConfig+0x40>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a3f      	ldr	r2, [pc, #252]	@ (8005b0c <TIM_Base_SetConfig+0x128>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d007      	beq.n	8005a24 <TIM_Base_SetConfig+0x40>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a3e      	ldr	r2, [pc, #248]	@ (8005b10 <TIM_Base_SetConfig+0x12c>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d003      	beq.n	8005a24 <TIM_Base_SetConfig+0x40>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a3d      	ldr	r2, [pc, #244]	@ (8005b14 <TIM_Base_SetConfig+0x130>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d108      	bne.n	8005a36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a32      	ldr	r2, [pc, #200]	@ (8005b04 <TIM_Base_SetConfig+0x120>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d02b      	beq.n	8005a96 <TIM_Base_SetConfig+0xb2>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a44:	d027      	beq.n	8005a96 <TIM_Base_SetConfig+0xb2>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a2f      	ldr	r2, [pc, #188]	@ (8005b08 <TIM_Base_SetConfig+0x124>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d023      	beq.n	8005a96 <TIM_Base_SetConfig+0xb2>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a2e      	ldr	r2, [pc, #184]	@ (8005b0c <TIM_Base_SetConfig+0x128>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d01f      	beq.n	8005a96 <TIM_Base_SetConfig+0xb2>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a2d      	ldr	r2, [pc, #180]	@ (8005b10 <TIM_Base_SetConfig+0x12c>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d01b      	beq.n	8005a96 <TIM_Base_SetConfig+0xb2>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a2c      	ldr	r2, [pc, #176]	@ (8005b14 <TIM_Base_SetConfig+0x130>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d017      	beq.n	8005a96 <TIM_Base_SetConfig+0xb2>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a2b      	ldr	r2, [pc, #172]	@ (8005b18 <TIM_Base_SetConfig+0x134>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d013      	beq.n	8005a96 <TIM_Base_SetConfig+0xb2>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a2a      	ldr	r2, [pc, #168]	@ (8005b1c <TIM_Base_SetConfig+0x138>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d00f      	beq.n	8005a96 <TIM_Base_SetConfig+0xb2>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a29      	ldr	r2, [pc, #164]	@ (8005b20 <TIM_Base_SetConfig+0x13c>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d00b      	beq.n	8005a96 <TIM_Base_SetConfig+0xb2>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a28      	ldr	r2, [pc, #160]	@ (8005b24 <TIM_Base_SetConfig+0x140>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d007      	beq.n	8005a96 <TIM_Base_SetConfig+0xb2>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a27      	ldr	r2, [pc, #156]	@ (8005b28 <TIM_Base_SetConfig+0x144>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d003      	beq.n	8005a96 <TIM_Base_SetConfig+0xb2>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a26      	ldr	r2, [pc, #152]	@ (8005b2c <TIM_Base_SetConfig+0x148>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d108      	bne.n	8005aa8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	695b      	ldr	r3, [r3, #20]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	689a      	ldr	r2, [r3, #8]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a0e      	ldr	r2, [pc, #56]	@ (8005b04 <TIM_Base_SetConfig+0x120>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d003      	beq.n	8005ad6 <TIM_Base_SetConfig+0xf2>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a10      	ldr	r2, [pc, #64]	@ (8005b14 <TIM_Base_SetConfig+0x130>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d103      	bne.n	8005ade <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	691a      	ldr	r2, [r3, #16]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f043 0204 	orr.w	r2, r3, #4
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2201      	movs	r2, #1
 8005aee:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	601a      	str	r2, [r3, #0]
}
 8005af6:	bf00      	nop
 8005af8:	3714      	adds	r7, #20
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	40010000 	.word	0x40010000
 8005b08:	40000400 	.word	0x40000400
 8005b0c:	40000800 	.word	0x40000800
 8005b10:	40000c00 	.word	0x40000c00
 8005b14:	40010400 	.word	0x40010400
 8005b18:	40014000 	.word	0x40014000
 8005b1c:	40014400 	.word	0x40014400
 8005b20:	40014800 	.word	0x40014800
 8005b24:	40001800 	.word	0x40001800
 8005b28:	40001c00 	.word	0x40001c00
 8005b2c:	40002000 	.word	0x40002000

08005b30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b087      	sub	sp, #28
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6a1b      	ldr	r3, [r3, #32]
 8005b40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6a1b      	ldr	r3, [r3, #32]
 8005b46:	f023 0201 	bic.w	r2, r3, #1
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	699b      	ldr	r3, [r3, #24]
 8005b52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	011b      	lsls	r3, r3, #4
 8005b60:	693a      	ldr	r2, [r7, #16]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	f023 030a 	bic.w	r3, r3, #10
 8005b6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b6e:	697a      	ldr	r2, [r7, #20]
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	693a      	ldr	r2, [r7, #16]
 8005b7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	697a      	ldr	r2, [r7, #20]
 8005b80:	621a      	str	r2, [r3, #32]
}
 8005b82:	bf00      	nop
 8005b84:	371c      	adds	r7, #28
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr

08005b8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b8e:	b480      	push	{r7}
 8005b90:	b087      	sub	sp, #28
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	60f8      	str	r0, [r7, #12]
 8005b96:	60b9      	str	r1, [r7, #8]
 8005b98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6a1b      	ldr	r3, [r3, #32]
 8005b9e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6a1b      	ldr	r3, [r3, #32]
 8005ba4:	f023 0210 	bic.w	r2, r3, #16
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	699b      	ldr	r3, [r3, #24]
 8005bb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005bb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	031b      	lsls	r3, r3, #12
 8005bbe:	693a      	ldr	r2, [r7, #16]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005bca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	011b      	lsls	r3, r3, #4
 8005bd0:	697a      	ldr	r2, [r7, #20]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	693a      	ldr	r2, [r7, #16]
 8005bda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	621a      	str	r2, [r3, #32]
}
 8005be2:	bf00      	nop
 8005be4:	371c      	adds	r7, #28
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr

08005bee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005bee:	b480      	push	{r7}
 8005bf0:	b085      	sub	sp, #20
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
 8005bf6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c06:	683a      	ldr	r2, [r7, #0]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	f043 0307 	orr.w	r3, r3, #7
 8005c10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	68fa      	ldr	r2, [r7, #12]
 8005c16:	609a      	str	r2, [r3, #8]
}
 8005c18:	bf00      	nop
 8005c1a:	3714      	adds	r7, #20
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b087      	sub	sp, #28
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]
 8005c30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	021a      	lsls	r2, r3, #8
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	431a      	orrs	r2, r3
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	697a      	ldr	r2, [r7, #20]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	697a      	ldr	r2, [r7, #20]
 8005c56:	609a      	str	r2, [r3, #8]
}
 8005c58:	bf00      	nop
 8005c5a:	371c      	adds	r7, #28
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b085      	sub	sp, #20
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d101      	bne.n	8005c7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c78:	2302      	movs	r3, #2
 8005c7a:	e05a      	b.n	8005d32 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2202      	movs	r2, #2
 8005c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ca2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a21      	ldr	r2, [pc, #132]	@ (8005d40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d022      	beq.n	8005d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cc8:	d01d      	beq.n	8005d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a1d      	ldr	r2, [pc, #116]	@ (8005d44 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d018      	beq.n	8005d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a1b      	ldr	r2, [pc, #108]	@ (8005d48 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d013      	beq.n	8005d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a1a      	ldr	r2, [pc, #104]	@ (8005d4c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d00e      	beq.n	8005d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a18      	ldr	r2, [pc, #96]	@ (8005d50 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d009      	beq.n	8005d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a17      	ldr	r2, [pc, #92]	@ (8005d54 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d004      	beq.n	8005d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a15      	ldr	r2, [pc, #84]	@ (8005d58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d10c      	bne.n	8005d20 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	68ba      	ldr	r2, [r7, #8]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68ba      	ldr	r2, [r7, #8]
 8005d1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3714      	adds	r7, #20
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	40010000 	.word	0x40010000
 8005d44:	40000400 	.word	0x40000400
 8005d48:	40000800 	.word	0x40000800
 8005d4c:	40000c00 	.word	0x40000c00
 8005d50:	40010400 	.word	0x40010400
 8005d54:	40014000 	.word	0x40014000
 8005d58:	40001800 	.word	0x40001800

08005d5c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d64:	bf00      	nop
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d78:	bf00      	nop
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b082      	sub	sp, #8
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d101      	bne.n	8005d96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e042      	b.n	8005e1c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d106      	bne.n	8005db0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f7fb fa1a 	bl	80011e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2224      	movs	r2, #36	@ 0x24
 8005db4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	68da      	ldr	r2, [r3, #12]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005dc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f000 fdfb 	bl	80069c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	691a      	ldr	r2, [r3, #16]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005ddc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	695a      	ldr	r2, [r3, #20]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005dec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	68da      	ldr	r2, [r3, #12]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005dfc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2220      	movs	r2, #32
 8005e08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2220      	movs	r2, #32
 8005e10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005e1a:	2300      	movs	r3, #0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3708      	adds	r7, #8
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b082      	sub	sp, #8
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d101      	bne.n	8005e36 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	e024      	b.n	8005e80 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2224      	movs	r2, #36	@ 0x24
 8005e3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68da      	ldr	r2, [r3, #12]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005e4c:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f7fb faa0 	bl	8001394 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3708      	adds	r7, #8
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b08a      	sub	sp, #40	@ 0x28
 8005e8c:	af02      	add	r7, sp, #8
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	603b      	str	r3, [r7, #0]
 8005e94:	4613      	mov	r3, r2
 8005e96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	2b20      	cmp	r3, #32
 8005ea6:	d175      	bne.n	8005f94 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d002      	beq.n	8005eb4 <HAL_UART_Transmit+0x2c>
 8005eae:	88fb      	ldrh	r3, [r7, #6]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d101      	bne.n	8005eb8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e06e      	b.n	8005f96 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2221      	movs	r2, #33	@ 0x21
 8005ec2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ec6:	f7fb fba9 	bl	800161c <HAL_GetTick>
 8005eca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	88fa      	ldrh	r2, [r7, #6]
 8005ed0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	88fa      	ldrh	r2, [r7, #6]
 8005ed6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ee0:	d108      	bne.n	8005ef4 <HAL_UART_Transmit+0x6c>
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d104      	bne.n	8005ef4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005eea:	2300      	movs	r3, #0
 8005eec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	61bb      	str	r3, [r7, #24]
 8005ef2:	e003      	b.n	8005efc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005efc:	e02e      	b.n	8005f5c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	9300      	str	r3, [sp, #0]
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	2200      	movs	r2, #0
 8005f06:	2180      	movs	r1, #128	@ 0x80
 8005f08:	68f8      	ldr	r0, [r7, #12]
 8005f0a:	f000 fb2d 	bl	8006568 <UART_WaitOnFlagUntilTimeout>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d005      	beq.n	8005f20 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2220      	movs	r2, #32
 8005f18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	e03a      	b.n	8005f96 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d10b      	bne.n	8005f3e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	881b      	ldrh	r3, [r3, #0]
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	3302      	adds	r3, #2
 8005f3a:	61bb      	str	r3, [r7, #24]
 8005f3c:	e007      	b.n	8005f4e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	781a      	ldrb	r2, [r3, #0]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	3b01      	subs	r3, #1
 8005f56:	b29a      	uxth	r2, r3
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d1cb      	bne.n	8005efe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	9300      	str	r3, [sp, #0]
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	2140      	movs	r1, #64	@ 0x40
 8005f70:	68f8      	ldr	r0, [r7, #12]
 8005f72:	f000 faf9 	bl	8006568 <UART_WaitOnFlagUntilTimeout>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d005      	beq.n	8005f88 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2220      	movs	r2, #32
 8005f80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005f84:	2303      	movs	r3, #3
 8005f86:	e006      	b.n	8005f96 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2220      	movs	r2, #32
 8005f8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005f90:	2300      	movs	r3, #0
 8005f92:	e000      	b.n	8005f96 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005f94:	2302      	movs	r3, #2
  }
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3720      	adds	r7, #32
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f9e:	b580      	push	{r7, lr}
 8005fa0:	b084      	sub	sp, #16
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	60f8      	str	r0, [r7, #12]
 8005fa6:	60b9      	str	r1, [r7, #8]
 8005fa8:	4613      	mov	r3, r2
 8005faa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	2b20      	cmp	r3, #32
 8005fb6:	d112      	bne.n	8005fde <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d002      	beq.n	8005fc4 <HAL_UART_Receive_IT+0x26>
 8005fbe:	88fb      	ldrh	r3, [r7, #6]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d101      	bne.n	8005fc8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e00b      	b.n	8005fe0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005fce:	88fb      	ldrh	r3, [r7, #6]
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	68b9      	ldr	r1, [r7, #8]
 8005fd4:	68f8      	ldr	r0, [r7, #12]
 8005fd6:	f000 fb20 	bl	800661a <UART_Start_Receive_IT>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	e000      	b.n	8005fe0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005fde:	2302      	movs	r3, #2
  }
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3710      	adds	r7, #16
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b0ba      	sub	sp, #232	@ 0xe8
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800600e:	2300      	movs	r3, #0
 8006010:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006014:	2300      	movs	r3, #0
 8006016:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800601a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800601e:	f003 030f 	and.w	r3, r3, #15
 8006022:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006026:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800602a:	2b00      	cmp	r3, #0
 800602c:	d10f      	bne.n	800604e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800602e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006032:	f003 0320 	and.w	r3, r3, #32
 8006036:	2b00      	cmp	r3, #0
 8006038:	d009      	beq.n	800604e <HAL_UART_IRQHandler+0x66>
 800603a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800603e:	f003 0320 	and.w	r3, r3, #32
 8006042:	2b00      	cmp	r3, #0
 8006044:	d003      	beq.n	800604e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 fbfd 	bl	8006846 <UART_Receive_IT>
      return;
 800604c:	e273      	b.n	8006536 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800604e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006052:	2b00      	cmp	r3, #0
 8006054:	f000 80de 	beq.w	8006214 <HAL_UART_IRQHandler+0x22c>
 8006058:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800605c:	f003 0301 	and.w	r3, r3, #1
 8006060:	2b00      	cmp	r3, #0
 8006062:	d106      	bne.n	8006072 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006064:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006068:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800606c:	2b00      	cmp	r3, #0
 800606e:	f000 80d1 	beq.w	8006214 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006076:	f003 0301 	and.w	r3, r3, #1
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00b      	beq.n	8006096 <HAL_UART_IRQHandler+0xae>
 800607e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006082:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006086:	2b00      	cmp	r3, #0
 8006088:	d005      	beq.n	8006096 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800608e:	f043 0201 	orr.w	r2, r3, #1
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800609a:	f003 0304 	and.w	r3, r3, #4
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d00b      	beq.n	80060ba <HAL_UART_IRQHandler+0xd2>
 80060a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060a6:	f003 0301 	and.w	r3, r3, #1
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d005      	beq.n	80060ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060b2:	f043 0202 	orr.w	r2, r3, #2
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80060ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060be:	f003 0302 	and.w	r3, r3, #2
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d00b      	beq.n	80060de <HAL_UART_IRQHandler+0xf6>
 80060c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060ca:	f003 0301 	and.w	r3, r3, #1
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d005      	beq.n	80060de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060d6:	f043 0204 	orr.w	r2, r3, #4
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80060de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060e2:	f003 0308 	and.w	r3, r3, #8
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d011      	beq.n	800610e <HAL_UART_IRQHandler+0x126>
 80060ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060ee:	f003 0320 	and.w	r3, r3, #32
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d105      	bne.n	8006102 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80060f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060fa:	f003 0301 	and.w	r3, r3, #1
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d005      	beq.n	800610e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006106:	f043 0208 	orr.w	r2, r3, #8
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006112:	2b00      	cmp	r3, #0
 8006114:	f000 820a 	beq.w	800652c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800611c:	f003 0320 	and.w	r3, r3, #32
 8006120:	2b00      	cmp	r3, #0
 8006122:	d008      	beq.n	8006136 <HAL_UART_IRQHandler+0x14e>
 8006124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006128:	f003 0320 	and.w	r3, r3, #32
 800612c:	2b00      	cmp	r3, #0
 800612e:	d002      	beq.n	8006136 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 fb88 	bl	8006846 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	695b      	ldr	r3, [r3, #20]
 800613c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006140:	2b40      	cmp	r3, #64	@ 0x40
 8006142:	bf0c      	ite	eq
 8006144:	2301      	moveq	r3, #1
 8006146:	2300      	movne	r3, #0
 8006148:	b2db      	uxtb	r3, r3
 800614a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006152:	f003 0308 	and.w	r3, r3, #8
 8006156:	2b00      	cmp	r3, #0
 8006158:	d103      	bne.n	8006162 <HAL_UART_IRQHandler+0x17a>
 800615a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800615e:	2b00      	cmp	r3, #0
 8006160:	d04f      	beq.n	8006202 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 fa93 	bl	800668e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	695b      	ldr	r3, [r3, #20]
 800616e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006172:	2b40      	cmp	r3, #64	@ 0x40
 8006174:	d141      	bne.n	80061fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	3314      	adds	r3, #20
 800617c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006180:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006184:	e853 3f00 	ldrex	r3, [r3]
 8006188:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800618c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006190:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006194:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	3314      	adds	r3, #20
 800619e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80061a2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80061a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80061ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80061b2:	e841 2300 	strex	r3, r2, [r1]
 80061b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80061ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d1d9      	bne.n	8006176 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d013      	beq.n	80061f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061ce:	4a8a      	ldr	r2, [pc, #552]	@ (80063f8 <HAL_UART_IRQHandler+0x410>)
 80061d0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061d6:	4618      	mov	r0, r3
 80061d8:	f7fc fb76 	bl	80028c8 <HAL_DMA_Abort_IT>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d016      	beq.n	8006210 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80061ec:	4610      	mov	r0, r2
 80061ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061f0:	e00e      	b.n	8006210 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 f9a2 	bl	800653c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061f8:	e00a      	b.n	8006210 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 f99e 	bl	800653c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006200:	e006      	b.n	8006210 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 f99a 	bl	800653c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800620e:	e18d      	b.n	800652c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006210:	bf00      	nop
    return;
 8006212:	e18b      	b.n	800652c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006218:	2b01      	cmp	r3, #1
 800621a:	f040 8167 	bne.w	80064ec <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800621e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006222:	f003 0310 	and.w	r3, r3, #16
 8006226:	2b00      	cmp	r3, #0
 8006228:	f000 8160 	beq.w	80064ec <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800622c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006230:	f003 0310 	and.w	r3, r3, #16
 8006234:	2b00      	cmp	r3, #0
 8006236:	f000 8159 	beq.w	80064ec <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800623a:	2300      	movs	r3, #0
 800623c:	60bb      	str	r3, [r7, #8]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	60bb      	str	r3, [r7, #8]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	60bb      	str	r3, [r7, #8]
 800624e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	695b      	ldr	r3, [r3, #20]
 8006256:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800625a:	2b40      	cmp	r3, #64	@ 0x40
 800625c:	f040 80ce 	bne.w	80063fc <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800626c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006270:	2b00      	cmp	r3, #0
 8006272:	f000 80a9 	beq.w	80063c8 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800627a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800627e:	429a      	cmp	r2, r3
 8006280:	f080 80a2 	bcs.w	80063c8 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800628a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006290:	69db      	ldr	r3, [r3, #28]
 8006292:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006296:	f000 8088 	beq.w	80063aa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	330c      	adds	r3, #12
 80062a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80062a8:	e853 3f00 	ldrex	r3, [r3]
 80062ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80062b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80062b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80062b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	330c      	adds	r3, #12
 80062c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80062c6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80062ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80062d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80062d6:	e841 2300 	strex	r3, r2, [r1]
 80062da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80062de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d1d9      	bne.n	800629a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	3314      	adds	r3, #20
 80062ec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80062f0:	e853 3f00 	ldrex	r3, [r3]
 80062f4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80062f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80062f8:	f023 0301 	bic.w	r3, r3, #1
 80062fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	3314      	adds	r3, #20
 8006306:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800630a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800630e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006310:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006312:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006316:	e841 2300 	strex	r3, r2, [r1]
 800631a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800631c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800631e:	2b00      	cmp	r3, #0
 8006320:	d1e1      	bne.n	80062e6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	3314      	adds	r3, #20
 8006328:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800632a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800632c:	e853 3f00 	ldrex	r3, [r3]
 8006330:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006332:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006334:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006338:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	3314      	adds	r3, #20
 8006342:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006346:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006348:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800634a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800634c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800634e:	e841 2300 	strex	r3, r2, [r1]
 8006352:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006354:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006356:	2b00      	cmp	r3, #0
 8006358:	d1e3      	bne.n	8006322 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2220      	movs	r2, #32
 800635e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	330c      	adds	r3, #12
 800636e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006370:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006372:	e853 3f00 	ldrex	r3, [r3]
 8006376:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006378:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800637a:	f023 0310 	bic.w	r3, r3, #16
 800637e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	330c      	adds	r3, #12
 8006388:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800638c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800638e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006390:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006392:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006394:	e841 2300 	strex	r3, r2, [r1]
 8006398:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800639a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800639c:	2b00      	cmp	r3, #0
 800639e:	d1e3      	bne.n	8006368 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063a4:	4618      	mov	r0, r3
 80063a6:	f7fc fa1f 	bl	80027e8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2202      	movs	r2, #2
 80063ae:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	1ad3      	subs	r3, r2, r3
 80063bc:	b29b      	uxth	r3, r3
 80063be:	4619      	mov	r1, r3
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 f8c5 	bl	8006550 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80063c6:	e0b3      	b.n	8006530 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80063cc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80063d0:	429a      	cmp	r2, r3
 80063d2:	f040 80ad 	bne.w	8006530 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063da:	69db      	ldr	r3, [r3, #28]
 80063dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063e0:	f040 80a6 	bne.w	8006530 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2202      	movs	r2, #2
 80063e8:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80063ee:	4619      	mov	r1, r3
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f000 f8ad 	bl	8006550 <HAL_UARTEx_RxEventCallback>
      return;
 80063f6:	e09b      	b.n	8006530 <HAL_UART_IRQHandler+0x548>
 80063f8:	08006755 	.word	0x08006755
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006404:	b29b      	uxth	r3, r3
 8006406:	1ad3      	subs	r3, r2, r3
 8006408:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006410:	b29b      	uxth	r3, r3
 8006412:	2b00      	cmp	r3, #0
 8006414:	f000 808e 	beq.w	8006534 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8006418:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800641c:	2b00      	cmp	r3, #0
 800641e:	f000 8089 	beq.w	8006534 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	330c      	adds	r3, #12
 8006428:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800642a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800642c:	e853 3f00 	ldrex	r3, [r3]
 8006430:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006432:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006434:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006438:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	330c      	adds	r3, #12
 8006442:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006446:	647a      	str	r2, [r7, #68]	@ 0x44
 8006448:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800644a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800644c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800644e:	e841 2300 	strex	r3, r2, [r1]
 8006452:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006454:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006456:	2b00      	cmp	r3, #0
 8006458:	d1e3      	bne.n	8006422 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	3314      	adds	r3, #20
 8006460:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006464:	e853 3f00 	ldrex	r3, [r3]
 8006468:	623b      	str	r3, [r7, #32]
   return(result);
 800646a:	6a3b      	ldr	r3, [r7, #32]
 800646c:	f023 0301 	bic.w	r3, r3, #1
 8006470:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	3314      	adds	r3, #20
 800647a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800647e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006480:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006482:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006484:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006486:	e841 2300 	strex	r3, r2, [r1]
 800648a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800648c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800648e:	2b00      	cmp	r3, #0
 8006490:	d1e3      	bne.n	800645a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2220      	movs	r2, #32
 8006496:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	330c      	adds	r3, #12
 80064a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	e853 3f00 	ldrex	r3, [r3]
 80064ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f023 0310 	bic.w	r3, r3, #16
 80064b6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	330c      	adds	r3, #12
 80064c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80064c4:	61fa      	str	r2, [r7, #28]
 80064c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c8:	69b9      	ldr	r1, [r7, #24]
 80064ca:	69fa      	ldr	r2, [r7, #28]
 80064cc:	e841 2300 	strex	r3, r2, [r1]
 80064d0:	617b      	str	r3, [r7, #20]
   return(result);
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d1e3      	bne.n	80064a0 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2202      	movs	r2, #2
 80064dc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80064de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80064e2:	4619      	mov	r1, r3
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 f833 	bl	8006550 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80064ea:	e023      	b.n	8006534 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80064ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d009      	beq.n	800650c <HAL_UART_IRQHandler+0x524>
 80064f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006500:	2b00      	cmp	r3, #0
 8006502:	d003      	beq.n	800650c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f000 f936 	bl	8006776 <UART_Transmit_IT>
    return;
 800650a:	e014      	b.n	8006536 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800650c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006510:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006514:	2b00      	cmp	r3, #0
 8006516:	d00e      	beq.n	8006536 <HAL_UART_IRQHandler+0x54e>
 8006518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800651c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006520:	2b00      	cmp	r3, #0
 8006522:	d008      	beq.n	8006536 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 f976 	bl	8006816 <UART_EndTransmit_IT>
    return;
 800652a:	e004      	b.n	8006536 <HAL_UART_IRQHandler+0x54e>
    return;
 800652c:	bf00      	nop
 800652e:	e002      	b.n	8006536 <HAL_UART_IRQHandler+0x54e>
      return;
 8006530:	bf00      	nop
 8006532:	e000      	b.n	8006536 <HAL_UART_IRQHandler+0x54e>
      return;
 8006534:	bf00      	nop
  }
}
 8006536:	37e8      	adds	r7, #232	@ 0xe8
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006544:	bf00      	nop
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006550:	b480      	push	{r7}
 8006552:	b083      	sub	sp, #12
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	460b      	mov	r3, r1
 800655a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800655c:	bf00      	nop
 800655e:	370c      	adds	r7, #12
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b086      	sub	sp, #24
 800656c:	af00      	add	r7, sp, #0
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	60b9      	str	r1, [r7, #8]
 8006572:	603b      	str	r3, [r7, #0]
 8006574:	4613      	mov	r3, r2
 8006576:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006578:	e03b      	b.n	80065f2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800657a:	6a3b      	ldr	r3, [r7, #32]
 800657c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006580:	d037      	beq.n	80065f2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006582:	f7fb f84b 	bl	800161c <HAL_GetTick>
 8006586:	4602      	mov	r2, r0
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	1ad3      	subs	r3, r2, r3
 800658c:	6a3a      	ldr	r2, [r7, #32]
 800658e:	429a      	cmp	r2, r3
 8006590:	d302      	bcc.n	8006598 <UART_WaitOnFlagUntilTimeout+0x30>
 8006592:	6a3b      	ldr	r3, [r7, #32]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d101      	bne.n	800659c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006598:	2303      	movs	r3, #3
 800659a:	e03a      	b.n	8006612 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	f003 0304 	and.w	r3, r3, #4
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d023      	beq.n	80065f2 <UART_WaitOnFlagUntilTimeout+0x8a>
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	2b80      	cmp	r3, #128	@ 0x80
 80065ae:	d020      	beq.n	80065f2 <UART_WaitOnFlagUntilTimeout+0x8a>
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	2b40      	cmp	r3, #64	@ 0x40
 80065b4:	d01d      	beq.n	80065f2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 0308 	and.w	r3, r3, #8
 80065c0:	2b08      	cmp	r3, #8
 80065c2:	d116      	bne.n	80065f2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80065c4:	2300      	movs	r3, #0
 80065c6:	617b      	str	r3, [r7, #20]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	617b      	str	r3, [r7, #20]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	617b      	str	r3, [r7, #20]
 80065d8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065da:	68f8      	ldr	r0, [r7, #12]
 80065dc:	f000 f857 	bl	800668e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2208      	movs	r2, #8
 80065e4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	e00f      	b.n	8006612 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	4013      	ands	r3, r2
 80065fc:	68ba      	ldr	r2, [r7, #8]
 80065fe:	429a      	cmp	r2, r3
 8006600:	bf0c      	ite	eq
 8006602:	2301      	moveq	r3, #1
 8006604:	2300      	movne	r3, #0
 8006606:	b2db      	uxtb	r3, r3
 8006608:	461a      	mov	r2, r3
 800660a:	79fb      	ldrb	r3, [r7, #7]
 800660c:	429a      	cmp	r2, r3
 800660e:	d0b4      	beq.n	800657a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3718      	adds	r7, #24
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}

0800661a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800661a:	b480      	push	{r7}
 800661c:	b085      	sub	sp, #20
 800661e:	af00      	add	r7, sp, #0
 8006620:	60f8      	str	r0, [r7, #12]
 8006622:	60b9      	str	r1, [r7, #8]
 8006624:	4613      	mov	r3, r2
 8006626:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	68ba      	ldr	r2, [r7, #8]
 800662c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	88fa      	ldrh	r2, [r7, #6]
 8006632:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	88fa      	ldrh	r2, [r7, #6]
 8006638:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2200      	movs	r2, #0
 800663e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2222      	movs	r2, #34	@ 0x22
 8006644:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	691b      	ldr	r3, [r3, #16]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d007      	beq.n	8006660 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	68da      	ldr	r2, [r3, #12]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800665e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	695a      	ldr	r2, [r3, #20]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f042 0201 	orr.w	r2, r2, #1
 800666e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68da      	ldr	r2, [r3, #12]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f042 0220 	orr.w	r2, r2, #32
 800667e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	3714      	adds	r7, #20
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr

0800668e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800668e:	b480      	push	{r7}
 8006690:	b095      	sub	sp, #84	@ 0x54
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	330c      	adds	r3, #12
 800669c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066a0:	e853 3f00 	ldrex	r3, [r3]
 80066a4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80066a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	330c      	adds	r3, #12
 80066b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80066b6:	643a      	str	r2, [r7, #64]	@ 0x40
 80066b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80066bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80066be:	e841 2300 	strex	r3, r2, [r1]
 80066c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80066c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d1e5      	bne.n	8006696 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	3314      	adds	r3, #20
 80066d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d2:	6a3b      	ldr	r3, [r7, #32]
 80066d4:	e853 3f00 	ldrex	r3, [r3]
 80066d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80066da:	69fb      	ldr	r3, [r7, #28]
 80066dc:	f023 0301 	bic.w	r3, r3, #1
 80066e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	3314      	adds	r3, #20
 80066e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80066ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80066ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80066f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80066f2:	e841 2300 	strex	r3, r2, [r1]
 80066f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80066f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d1e5      	bne.n	80066ca <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006702:	2b01      	cmp	r3, #1
 8006704:	d119      	bne.n	800673a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	330c      	adds	r3, #12
 800670c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	e853 3f00 	ldrex	r3, [r3]
 8006714:	60bb      	str	r3, [r7, #8]
   return(result);
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	f023 0310 	bic.w	r3, r3, #16
 800671c:	647b      	str	r3, [r7, #68]	@ 0x44
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	330c      	adds	r3, #12
 8006724:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006726:	61ba      	str	r2, [r7, #24]
 8006728:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800672a:	6979      	ldr	r1, [r7, #20]
 800672c:	69ba      	ldr	r2, [r7, #24]
 800672e:	e841 2300 	strex	r3, r2, [r1]
 8006732:	613b      	str	r3, [r7, #16]
   return(result);
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d1e5      	bne.n	8006706 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2220      	movs	r2, #32
 800673e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006748:	bf00      	nop
 800674a:	3754      	adds	r7, #84	@ 0x54
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006760:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2200      	movs	r2, #0
 8006766:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006768:	68f8      	ldr	r0, [r7, #12]
 800676a:	f7ff fee7 	bl	800653c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800676e:	bf00      	nop
 8006770:	3710      	adds	r7, #16
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}

08006776 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006776:	b480      	push	{r7}
 8006778:	b085      	sub	sp, #20
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006784:	b2db      	uxtb	r3, r3
 8006786:	2b21      	cmp	r3, #33	@ 0x21
 8006788:	d13e      	bne.n	8006808 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006792:	d114      	bne.n	80067be <UART_Transmit_IT+0x48>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	691b      	ldr	r3, [r3, #16]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d110      	bne.n	80067be <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6a1b      	ldr	r3, [r3, #32]
 80067a0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	881b      	ldrh	r3, [r3, #0]
 80067a6:	461a      	mov	r2, r3
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067b0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a1b      	ldr	r3, [r3, #32]
 80067b6:	1c9a      	adds	r2, r3, #2
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	621a      	str	r2, [r3, #32]
 80067bc:	e008      	b.n	80067d0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6a1b      	ldr	r3, [r3, #32]
 80067c2:	1c59      	adds	r1, r3, #1
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	6211      	str	r1, [r2, #32]
 80067c8:	781a      	ldrb	r2, [r3, #0]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	3b01      	subs	r3, #1
 80067d8:	b29b      	uxth	r3, r3
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	4619      	mov	r1, r3
 80067de:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d10f      	bne.n	8006804 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	68da      	ldr	r2, [r3, #12]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80067f2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	68da      	ldr	r2, [r3, #12]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006802:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006804:	2300      	movs	r3, #0
 8006806:	e000      	b.n	800680a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006808:	2302      	movs	r3, #2
  }
}
 800680a:	4618      	mov	r0, r3
 800680c:	3714      	adds	r7, #20
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr

08006816 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006816:	b580      	push	{r7, lr}
 8006818:	b082      	sub	sp, #8
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	68da      	ldr	r2, [r3, #12]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800682c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2220      	movs	r2, #32
 8006832:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f002 f944 	bl	8008ac4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	3708      	adds	r7, #8
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}

08006846 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006846:	b580      	push	{r7, lr}
 8006848:	b08c      	sub	sp, #48	@ 0x30
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800684e:	2300      	movs	r3, #0
 8006850:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8006852:	2300      	movs	r3, #0
 8006854:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800685c:	b2db      	uxtb	r3, r3
 800685e:	2b22      	cmp	r3, #34	@ 0x22
 8006860:	f040 80aa 	bne.w	80069b8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800686c:	d115      	bne.n	800689a <UART_Receive_IT+0x54>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d111      	bne.n	800689a <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800687a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	b29b      	uxth	r3, r3
 8006884:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006888:	b29a      	uxth	r2, r3
 800688a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800688c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006892:	1c9a      	adds	r2, r3, #2
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	629a      	str	r2, [r3, #40]	@ 0x28
 8006898:	e024      	b.n	80068e4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800689e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068a8:	d007      	beq.n	80068ba <UART_Receive_IT+0x74>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d10a      	bne.n	80068c8 <UART_Receive_IT+0x82>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	691b      	ldr	r3, [r3, #16]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d106      	bne.n	80068c8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	b2da      	uxtb	r2, r3
 80068c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068c4:	701a      	strb	r2, [r3, #0]
 80068c6:	e008      	b.n	80068da <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068d4:	b2da      	uxtb	r2, r3
 80068d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068d8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068de:	1c5a      	adds	r2, r3, #1
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	3b01      	subs	r3, #1
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	4619      	mov	r1, r3
 80068f2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d15d      	bne.n	80069b4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	68da      	ldr	r2, [r3, #12]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f022 0220 	bic.w	r2, r2, #32
 8006906:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	68da      	ldr	r2, [r3, #12]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006916:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	695a      	ldr	r2, [r3, #20]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f022 0201 	bic.w	r2, r2, #1
 8006926:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2220      	movs	r2, #32
 800692c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800693a:	2b01      	cmp	r3, #1
 800693c:	d135      	bne.n	80069aa <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	330c      	adds	r3, #12
 800694a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	e853 3f00 	ldrex	r3, [r3]
 8006952:	613b      	str	r3, [r7, #16]
   return(result);
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	f023 0310 	bic.w	r3, r3, #16
 800695a:	627b      	str	r3, [r7, #36]	@ 0x24
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	330c      	adds	r3, #12
 8006962:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006964:	623a      	str	r2, [r7, #32]
 8006966:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006968:	69f9      	ldr	r1, [r7, #28]
 800696a:	6a3a      	ldr	r2, [r7, #32]
 800696c:	e841 2300 	strex	r3, r2, [r1]
 8006970:	61bb      	str	r3, [r7, #24]
   return(result);
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d1e5      	bne.n	8006944 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 0310 	and.w	r3, r3, #16
 8006982:	2b10      	cmp	r3, #16
 8006984:	d10a      	bne.n	800699c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006986:	2300      	movs	r3, #0
 8006988:	60fb      	str	r3, [r7, #12]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	60fb      	str	r3, [r7, #12]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	60fb      	str	r3, [r7, #12]
 800699a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80069a0:	4619      	mov	r1, r3
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f7ff fdd4 	bl	8006550 <HAL_UARTEx_RxEventCallback>
 80069a8:	e002      	b.n	80069b0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f002 f99c 	bl	8008ce8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80069b0:	2300      	movs	r3, #0
 80069b2:	e002      	b.n	80069ba <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80069b4:	2300      	movs	r3, #0
 80069b6:	e000      	b.n	80069ba <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80069b8:	2302      	movs	r3, #2
  }
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3730      	adds	r7, #48	@ 0x30
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
	...

080069c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069c8:	b0c0      	sub	sp, #256	@ 0x100
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	691b      	ldr	r3, [r3, #16]
 80069d8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80069dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069e0:	68d9      	ldr	r1, [r3, #12]
 80069e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	ea40 0301 	orr.w	r3, r0, r1
 80069ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80069ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069f2:	689a      	ldr	r2, [r3, #8]
 80069f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069f8:	691b      	ldr	r3, [r3, #16]
 80069fa:	431a      	orrs	r2, r3
 80069fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a00:	695b      	ldr	r3, [r3, #20]
 8006a02:	431a      	orrs	r2, r3
 8006a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a08:	69db      	ldr	r3, [r3, #28]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	68db      	ldr	r3, [r3, #12]
 8006a18:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006a1c:	f021 010c 	bic.w	r1, r1, #12
 8006a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006a2a:	430b      	orrs	r3, r1
 8006a2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	695b      	ldr	r3, [r3, #20]
 8006a36:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a3e:	6999      	ldr	r1, [r3, #24]
 8006a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	ea40 0301 	orr.w	r3, r0, r1
 8006a4a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	4b8f      	ldr	r3, [pc, #572]	@ (8006c90 <UART_SetConfig+0x2cc>)
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d005      	beq.n	8006a64 <UART_SetConfig+0xa0>
 8006a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	4b8d      	ldr	r3, [pc, #564]	@ (8006c94 <UART_SetConfig+0x2d0>)
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d104      	bne.n	8006a6e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a64:	f7fe fc74 	bl	8005350 <HAL_RCC_GetPCLK2Freq>
 8006a68:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006a6c:	e003      	b.n	8006a76 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a6e:	f7fe fc5b 	bl	8005328 <HAL_RCC_GetPCLK1Freq>
 8006a72:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a7a:	69db      	ldr	r3, [r3, #28]
 8006a7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a80:	f040 810c 	bne.w	8006c9c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006a84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006a8e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006a92:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006a96:	4622      	mov	r2, r4
 8006a98:	462b      	mov	r3, r5
 8006a9a:	1891      	adds	r1, r2, r2
 8006a9c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006a9e:	415b      	adcs	r3, r3
 8006aa0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006aa2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006aa6:	4621      	mov	r1, r4
 8006aa8:	eb12 0801 	adds.w	r8, r2, r1
 8006aac:	4629      	mov	r1, r5
 8006aae:	eb43 0901 	adc.w	r9, r3, r1
 8006ab2:	f04f 0200 	mov.w	r2, #0
 8006ab6:	f04f 0300 	mov.w	r3, #0
 8006aba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006abe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006ac2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006ac6:	4690      	mov	r8, r2
 8006ac8:	4699      	mov	r9, r3
 8006aca:	4623      	mov	r3, r4
 8006acc:	eb18 0303 	adds.w	r3, r8, r3
 8006ad0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006ad4:	462b      	mov	r3, r5
 8006ad6:	eb49 0303 	adc.w	r3, r9, r3
 8006ada:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006aea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006aee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006af2:	460b      	mov	r3, r1
 8006af4:	18db      	adds	r3, r3, r3
 8006af6:	653b      	str	r3, [r7, #80]	@ 0x50
 8006af8:	4613      	mov	r3, r2
 8006afa:	eb42 0303 	adc.w	r3, r2, r3
 8006afe:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b00:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006b04:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006b08:	f7f9 fbb2 	bl	8000270 <__aeabi_uldivmod>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	460b      	mov	r3, r1
 8006b10:	4b61      	ldr	r3, [pc, #388]	@ (8006c98 <UART_SetConfig+0x2d4>)
 8006b12:	fba3 2302 	umull	r2, r3, r3, r2
 8006b16:	095b      	lsrs	r3, r3, #5
 8006b18:	011c      	lsls	r4, r3, #4
 8006b1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006b24:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006b28:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006b2c:	4642      	mov	r2, r8
 8006b2e:	464b      	mov	r3, r9
 8006b30:	1891      	adds	r1, r2, r2
 8006b32:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006b34:	415b      	adcs	r3, r3
 8006b36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b38:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006b3c:	4641      	mov	r1, r8
 8006b3e:	eb12 0a01 	adds.w	sl, r2, r1
 8006b42:	4649      	mov	r1, r9
 8006b44:	eb43 0b01 	adc.w	fp, r3, r1
 8006b48:	f04f 0200 	mov.w	r2, #0
 8006b4c:	f04f 0300 	mov.w	r3, #0
 8006b50:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006b54:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006b58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b5c:	4692      	mov	sl, r2
 8006b5e:	469b      	mov	fp, r3
 8006b60:	4643      	mov	r3, r8
 8006b62:	eb1a 0303 	adds.w	r3, sl, r3
 8006b66:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006b6a:	464b      	mov	r3, r9
 8006b6c:	eb4b 0303 	adc.w	r3, fp, r3
 8006b70:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006b80:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006b84:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006b88:	460b      	mov	r3, r1
 8006b8a:	18db      	adds	r3, r3, r3
 8006b8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b8e:	4613      	mov	r3, r2
 8006b90:	eb42 0303 	adc.w	r3, r2, r3
 8006b94:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006b9a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006b9e:	f7f9 fb67 	bl	8000270 <__aeabi_uldivmod>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	4611      	mov	r1, r2
 8006ba8:	4b3b      	ldr	r3, [pc, #236]	@ (8006c98 <UART_SetConfig+0x2d4>)
 8006baa:	fba3 2301 	umull	r2, r3, r3, r1
 8006bae:	095b      	lsrs	r3, r3, #5
 8006bb0:	2264      	movs	r2, #100	@ 0x64
 8006bb2:	fb02 f303 	mul.w	r3, r2, r3
 8006bb6:	1acb      	subs	r3, r1, r3
 8006bb8:	00db      	lsls	r3, r3, #3
 8006bba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006bbe:	4b36      	ldr	r3, [pc, #216]	@ (8006c98 <UART_SetConfig+0x2d4>)
 8006bc0:	fba3 2302 	umull	r2, r3, r3, r2
 8006bc4:	095b      	lsrs	r3, r3, #5
 8006bc6:	005b      	lsls	r3, r3, #1
 8006bc8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006bcc:	441c      	add	r4, r3
 8006bce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006bd8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006bdc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006be0:	4642      	mov	r2, r8
 8006be2:	464b      	mov	r3, r9
 8006be4:	1891      	adds	r1, r2, r2
 8006be6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006be8:	415b      	adcs	r3, r3
 8006bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006bec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006bf0:	4641      	mov	r1, r8
 8006bf2:	1851      	adds	r1, r2, r1
 8006bf4:	6339      	str	r1, [r7, #48]	@ 0x30
 8006bf6:	4649      	mov	r1, r9
 8006bf8:	414b      	adcs	r3, r1
 8006bfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bfc:	f04f 0200 	mov.w	r2, #0
 8006c00:	f04f 0300 	mov.w	r3, #0
 8006c04:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006c08:	4659      	mov	r1, fp
 8006c0a:	00cb      	lsls	r3, r1, #3
 8006c0c:	4651      	mov	r1, sl
 8006c0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c12:	4651      	mov	r1, sl
 8006c14:	00ca      	lsls	r2, r1, #3
 8006c16:	4610      	mov	r0, r2
 8006c18:	4619      	mov	r1, r3
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	4642      	mov	r2, r8
 8006c1e:	189b      	adds	r3, r3, r2
 8006c20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006c24:	464b      	mov	r3, r9
 8006c26:	460a      	mov	r2, r1
 8006c28:	eb42 0303 	adc.w	r3, r2, r3
 8006c2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006c3c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006c40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006c44:	460b      	mov	r3, r1
 8006c46:	18db      	adds	r3, r3, r3
 8006c48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	eb42 0303 	adc.w	r3, r2, r3
 8006c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006c56:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006c5a:	f7f9 fb09 	bl	8000270 <__aeabi_uldivmod>
 8006c5e:	4602      	mov	r2, r0
 8006c60:	460b      	mov	r3, r1
 8006c62:	4b0d      	ldr	r3, [pc, #52]	@ (8006c98 <UART_SetConfig+0x2d4>)
 8006c64:	fba3 1302 	umull	r1, r3, r3, r2
 8006c68:	095b      	lsrs	r3, r3, #5
 8006c6a:	2164      	movs	r1, #100	@ 0x64
 8006c6c:	fb01 f303 	mul.w	r3, r1, r3
 8006c70:	1ad3      	subs	r3, r2, r3
 8006c72:	00db      	lsls	r3, r3, #3
 8006c74:	3332      	adds	r3, #50	@ 0x32
 8006c76:	4a08      	ldr	r2, [pc, #32]	@ (8006c98 <UART_SetConfig+0x2d4>)
 8006c78:	fba2 2303 	umull	r2, r3, r2, r3
 8006c7c:	095b      	lsrs	r3, r3, #5
 8006c7e:	f003 0207 	and.w	r2, r3, #7
 8006c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4422      	add	r2, r4
 8006c8a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006c8c:	e106      	b.n	8006e9c <UART_SetConfig+0x4d8>
 8006c8e:	bf00      	nop
 8006c90:	40011000 	.word	0x40011000
 8006c94:	40011400 	.word	0x40011400
 8006c98:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006ca6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006caa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006cae:	4642      	mov	r2, r8
 8006cb0:	464b      	mov	r3, r9
 8006cb2:	1891      	adds	r1, r2, r2
 8006cb4:	6239      	str	r1, [r7, #32]
 8006cb6:	415b      	adcs	r3, r3
 8006cb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006cbe:	4641      	mov	r1, r8
 8006cc0:	1854      	adds	r4, r2, r1
 8006cc2:	4649      	mov	r1, r9
 8006cc4:	eb43 0501 	adc.w	r5, r3, r1
 8006cc8:	f04f 0200 	mov.w	r2, #0
 8006ccc:	f04f 0300 	mov.w	r3, #0
 8006cd0:	00eb      	lsls	r3, r5, #3
 8006cd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006cd6:	00e2      	lsls	r2, r4, #3
 8006cd8:	4614      	mov	r4, r2
 8006cda:	461d      	mov	r5, r3
 8006cdc:	4643      	mov	r3, r8
 8006cde:	18e3      	adds	r3, r4, r3
 8006ce0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006ce4:	464b      	mov	r3, r9
 8006ce6:	eb45 0303 	adc.w	r3, r5, r3
 8006cea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006cfa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006cfe:	f04f 0200 	mov.w	r2, #0
 8006d02:	f04f 0300 	mov.w	r3, #0
 8006d06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006d0a:	4629      	mov	r1, r5
 8006d0c:	008b      	lsls	r3, r1, #2
 8006d0e:	4621      	mov	r1, r4
 8006d10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d14:	4621      	mov	r1, r4
 8006d16:	008a      	lsls	r2, r1, #2
 8006d18:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006d1c:	f7f9 faa8 	bl	8000270 <__aeabi_uldivmod>
 8006d20:	4602      	mov	r2, r0
 8006d22:	460b      	mov	r3, r1
 8006d24:	4b60      	ldr	r3, [pc, #384]	@ (8006ea8 <UART_SetConfig+0x4e4>)
 8006d26:	fba3 2302 	umull	r2, r3, r3, r2
 8006d2a:	095b      	lsrs	r3, r3, #5
 8006d2c:	011c      	lsls	r4, r3, #4
 8006d2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d32:	2200      	movs	r2, #0
 8006d34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006d38:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006d3c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006d40:	4642      	mov	r2, r8
 8006d42:	464b      	mov	r3, r9
 8006d44:	1891      	adds	r1, r2, r2
 8006d46:	61b9      	str	r1, [r7, #24]
 8006d48:	415b      	adcs	r3, r3
 8006d4a:	61fb      	str	r3, [r7, #28]
 8006d4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d50:	4641      	mov	r1, r8
 8006d52:	1851      	adds	r1, r2, r1
 8006d54:	6139      	str	r1, [r7, #16]
 8006d56:	4649      	mov	r1, r9
 8006d58:	414b      	adcs	r3, r1
 8006d5a:	617b      	str	r3, [r7, #20]
 8006d5c:	f04f 0200 	mov.w	r2, #0
 8006d60:	f04f 0300 	mov.w	r3, #0
 8006d64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d68:	4659      	mov	r1, fp
 8006d6a:	00cb      	lsls	r3, r1, #3
 8006d6c:	4651      	mov	r1, sl
 8006d6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d72:	4651      	mov	r1, sl
 8006d74:	00ca      	lsls	r2, r1, #3
 8006d76:	4610      	mov	r0, r2
 8006d78:	4619      	mov	r1, r3
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	4642      	mov	r2, r8
 8006d7e:	189b      	adds	r3, r3, r2
 8006d80:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006d84:	464b      	mov	r3, r9
 8006d86:	460a      	mov	r2, r1
 8006d88:	eb42 0303 	adc.w	r3, r2, r3
 8006d8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006d9a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006d9c:	f04f 0200 	mov.w	r2, #0
 8006da0:	f04f 0300 	mov.w	r3, #0
 8006da4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006da8:	4649      	mov	r1, r9
 8006daa:	008b      	lsls	r3, r1, #2
 8006dac:	4641      	mov	r1, r8
 8006dae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006db2:	4641      	mov	r1, r8
 8006db4:	008a      	lsls	r2, r1, #2
 8006db6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006dba:	f7f9 fa59 	bl	8000270 <__aeabi_uldivmod>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	4611      	mov	r1, r2
 8006dc4:	4b38      	ldr	r3, [pc, #224]	@ (8006ea8 <UART_SetConfig+0x4e4>)
 8006dc6:	fba3 2301 	umull	r2, r3, r3, r1
 8006dca:	095b      	lsrs	r3, r3, #5
 8006dcc:	2264      	movs	r2, #100	@ 0x64
 8006dce:	fb02 f303 	mul.w	r3, r2, r3
 8006dd2:	1acb      	subs	r3, r1, r3
 8006dd4:	011b      	lsls	r3, r3, #4
 8006dd6:	3332      	adds	r3, #50	@ 0x32
 8006dd8:	4a33      	ldr	r2, [pc, #204]	@ (8006ea8 <UART_SetConfig+0x4e4>)
 8006dda:	fba2 2303 	umull	r2, r3, r2, r3
 8006dde:	095b      	lsrs	r3, r3, #5
 8006de0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006de4:	441c      	add	r4, r3
 8006de6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006dea:	2200      	movs	r2, #0
 8006dec:	673b      	str	r3, [r7, #112]	@ 0x70
 8006dee:	677a      	str	r2, [r7, #116]	@ 0x74
 8006df0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006df4:	4642      	mov	r2, r8
 8006df6:	464b      	mov	r3, r9
 8006df8:	1891      	adds	r1, r2, r2
 8006dfa:	60b9      	str	r1, [r7, #8]
 8006dfc:	415b      	adcs	r3, r3
 8006dfe:	60fb      	str	r3, [r7, #12]
 8006e00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006e04:	4641      	mov	r1, r8
 8006e06:	1851      	adds	r1, r2, r1
 8006e08:	6039      	str	r1, [r7, #0]
 8006e0a:	4649      	mov	r1, r9
 8006e0c:	414b      	adcs	r3, r1
 8006e0e:	607b      	str	r3, [r7, #4]
 8006e10:	f04f 0200 	mov.w	r2, #0
 8006e14:	f04f 0300 	mov.w	r3, #0
 8006e18:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006e1c:	4659      	mov	r1, fp
 8006e1e:	00cb      	lsls	r3, r1, #3
 8006e20:	4651      	mov	r1, sl
 8006e22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e26:	4651      	mov	r1, sl
 8006e28:	00ca      	lsls	r2, r1, #3
 8006e2a:	4610      	mov	r0, r2
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	4603      	mov	r3, r0
 8006e30:	4642      	mov	r2, r8
 8006e32:	189b      	adds	r3, r3, r2
 8006e34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006e36:	464b      	mov	r3, r9
 8006e38:	460a      	mov	r2, r1
 8006e3a:	eb42 0303 	adc.w	r3, r2, r3
 8006e3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	2200      	movs	r2, #0
 8006e48:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e4a:	667a      	str	r2, [r7, #100]	@ 0x64
 8006e4c:	f04f 0200 	mov.w	r2, #0
 8006e50:	f04f 0300 	mov.w	r3, #0
 8006e54:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006e58:	4649      	mov	r1, r9
 8006e5a:	008b      	lsls	r3, r1, #2
 8006e5c:	4641      	mov	r1, r8
 8006e5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e62:	4641      	mov	r1, r8
 8006e64:	008a      	lsls	r2, r1, #2
 8006e66:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006e6a:	f7f9 fa01 	bl	8000270 <__aeabi_uldivmod>
 8006e6e:	4602      	mov	r2, r0
 8006e70:	460b      	mov	r3, r1
 8006e72:	4b0d      	ldr	r3, [pc, #52]	@ (8006ea8 <UART_SetConfig+0x4e4>)
 8006e74:	fba3 1302 	umull	r1, r3, r3, r2
 8006e78:	095b      	lsrs	r3, r3, #5
 8006e7a:	2164      	movs	r1, #100	@ 0x64
 8006e7c:	fb01 f303 	mul.w	r3, r1, r3
 8006e80:	1ad3      	subs	r3, r2, r3
 8006e82:	011b      	lsls	r3, r3, #4
 8006e84:	3332      	adds	r3, #50	@ 0x32
 8006e86:	4a08      	ldr	r2, [pc, #32]	@ (8006ea8 <UART_SetConfig+0x4e4>)
 8006e88:	fba2 2303 	umull	r2, r3, r2, r3
 8006e8c:	095b      	lsrs	r3, r3, #5
 8006e8e:	f003 020f 	and.w	r2, r3, #15
 8006e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4422      	add	r2, r4
 8006e9a:	609a      	str	r2, [r3, #8]
}
 8006e9c:	bf00      	nop
 8006e9e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ea8:	51eb851f 	.word	0x51eb851f

08006eac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006eac:	b084      	sub	sp, #16
 8006eae:	b580      	push	{r7, lr}
 8006eb0:	b084      	sub	sp, #16
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
 8006eb6:	f107 001c 	add.w	r0, r7, #28
 8006eba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006ebe:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d123      	bne.n	8006f0e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eca:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006eda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006eee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d105      	bne.n	8006f02 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f001 fae8 	bl	80084d8 <USB_CoreReset>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	73fb      	strb	r3, [r7, #15]
 8006f0c:	e01b      	b.n	8006f46 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	68db      	ldr	r3, [r3, #12]
 8006f12:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f001 fadc 	bl	80084d8 <USB_CoreReset>
 8006f20:	4603      	mov	r3, r0
 8006f22:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006f24:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d106      	bne.n	8006f3a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f30:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	639a      	str	r2, [r3, #56]	@ 0x38
 8006f38:	e005      	b.n	8006f46 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f3e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006f46:	7fbb      	ldrb	r3, [r7, #30]
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d10b      	bne.n	8006f64 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	f043 0206 	orr.w	r2, r3, #6
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	f043 0220 	orr.w	r2, r3, #32
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3710      	adds	r7, #16
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f70:	b004      	add	sp, #16
 8006f72:	4770      	bx	lr

08006f74 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b087      	sub	sp, #28
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	4613      	mov	r3, r2
 8006f80:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006f82:	79fb      	ldrb	r3, [r7, #7]
 8006f84:	2b02      	cmp	r3, #2
 8006f86:	d165      	bne.n	8007054 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	4a41      	ldr	r2, [pc, #260]	@ (8007090 <USB_SetTurnaroundTime+0x11c>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d906      	bls.n	8006f9e <USB_SetTurnaroundTime+0x2a>
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	4a40      	ldr	r2, [pc, #256]	@ (8007094 <USB_SetTurnaroundTime+0x120>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d202      	bcs.n	8006f9e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006f98:	230f      	movs	r3, #15
 8006f9a:	617b      	str	r3, [r7, #20]
 8006f9c:	e062      	b.n	8007064 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	4a3c      	ldr	r2, [pc, #240]	@ (8007094 <USB_SetTurnaroundTime+0x120>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d306      	bcc.n	8006fb4 <USB_SetTurnaroundTime+0x40>
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	4a3b      	ldr	r2, [pc, #236]	@ (8007098 <USB_SetTurnaroundTime+0x124>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d202      	bcs.n	8006fb4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006fae:	230e      	movs	r3, #14
 8006fb0:	617b      	str	r3, [r7, #20]
 8006fb2:	e057      	b.n	8007064 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	4a38      	ldr	r2, [pc, #224]	@ (8007098 <USB_SetTurnaroundTime+0x124>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d306      	bcc.n	8006fca <USB_SetTurnaroundTime+0x56>
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	4a37      	ldr	r2, [pc, #220]	@ (800709c <USB_SetTurnaroundTime+0x128>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d202      	bcs.n	8006fca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006fc4:	230d      	movs	r3, #13
 8006fc6:	617b      	str	r3, [r7, #20]
 8006fc8:	e04c      	b.n	8007064 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	4a33      	ldr	r2, [pc, #204]	@ (800709c <USB_SetTurnaroundTime+0x128>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d306      	bcc.n	8006fe0 <USB_SetTurnaroundTime+0x6c>
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	4a32      	ldr	r2, [pc, #200]	@ (80070a0 <USB_SetTurnaroundTime+0x12c>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d802      	bhi.n	8006fe0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006fda:	230c      	movs	r3, #12
 8006fdc:	617b      	str	r3, [r7, #20]
 8006fde:	e041      	b.n	8007064 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	4a2f      	ldr	r2, [pc, #188]	@ (80070a0 <USB_SetTurnaroundTime+0x12c>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d906      	bls.n	8006ff6 <USB_SetTurnaroundTime+0x82>
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	4a2e      	ldr	r2, [pc, #184]	@ (80070a4 <USB_SetTurnaroundTime+0x130>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d802      	bhi.n	8006ff6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006ff0:	230b      	movs	r3, #11
 8006ff2:	617b      	str	r3, [r7, #20]
 8006ff4:	e036      	b.n	8007064 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	4a2a      	ldr	r2, [pc, #168]	@ (80070a4 <USB_SetTurnaroundTime+0x130>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d906      	bls.n	800700c <USB_SetTurnaroundTime+0x98>
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	4a29      	ldr	r2, [pc, #164]	@ (80070a8 <USB_SetTurnaroundTime+0x134>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d802      	bhi.n	800700c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007006:	230a      	movs	r3, #10
 8007008:	617b      	str	r3, [r7, #20]
 800700a:	e02b      	b.n	8007064 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	4a26      	ldr	r2, [pc, #152]	@ (80070a8 <USB_SetTurnaroundTime+0x134>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d906      	bls.n	8007022 <USB_SetTurnaroundTime+0xae>
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	4a25      	ldr	r2, [pc, #148]	@ (80070ac <USB_SetTurnaroundTime+0x138>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d202      	bcs.n	8007022 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800701c:	2309      	movs	r3, #9
 800701e:	617b      	str	r3, [r7, #20]
 8007020:	e020      	b.n	8007064 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	4a21      	ldr	r2, [pc, #132]	@ (80070ac <USB_SetTurnaroundTime+0x138>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d306      	bcc.n	8007038 <USB_SetTurnaroundTime+0xc4>
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	4a20      	ldr	r2, [pc, #128]	@ (80070b0 <USB_SetTurnaroundTime+0x13c>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d802      	bhi.n	8007038 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007032:	2308      	movs	r3, #8
 8007034:	617b      	str	r3, [r7, #20]
 8007036:	e015      	b.n	8007064 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	4a1d      	ldr	r2, [pc, #116]	@ (80070b0 <USB_SetTurnaroundTime+0x13c>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d906      	bls.n	800704e <USB_SetTurnaroundTime+0xda>
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	4a1c      	ldr	r2, [pc, #112]	@ (80070b4 <USB_SetTurnaroundTime+0x140>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d202      	bcs.n	800704e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007048:	2307      	movs	r3, #7
 800704a:	617b      	str	r3, [r7, #20]
 800704c:	e00a      	b.n	8007064 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800704e:	2306      	movs	r3, #6
 8007050:	617b      	str	r3, [r7, #20]
 8007052:	e007      	b.n	8007064 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007054:	79fb      	ldrb	r3, [r7, #7]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d102      	bne.n	8007060 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800705a:	2309      	movs	r3, #9
 800705c:	617b      	str	r3, [r7, #20]
 800705e:	e001      	b.n	8007064 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007060:	2309      	movs	r3, #9
 8007062:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	68db      	ldr	r3, [r3, #12]
 8007068:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	68da      	ldr	r2, [r3, #12]
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	029b      	lsls	r3, r3, #10
 8007078:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800707c:	431a      	orrs	r2, r3
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007082:	2300      	movs	r3, #0
}
 8007084:	4618      	mov	r0, r3
 8007086:	371c      	adds	r7, #28
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr
 8007090:	00d8acbf 	.word	0x00d8acbf
 8007094:	00e4e1c0 	.word	0x00e4e1c0
 8007098:	00f42400 	.word	0x00f42400
 800709c:	01067380 	.word	0x01067380
 80070a0:	011a499f 	.word	0x011a499f
 80070a4:	01312cff 	.word	0x01312cff
 80070a8:	014ca43f 	.word	0x014ca43f
 80070ac:	016e3600 	.word	0x016e3600
 80070b0:	01a6ab1f 	.word	0x01a6ab1f
 80070b4:	01e84800 	.word	0x01e84800

080070b8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	f043 0201 	orr.w	r2, r3, #1
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80070cc:	2300      	movs	r3, #0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	370c      	adds	r7, #12
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr

080070da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80070da:	b480      	push	{r7}
 80070dc:	b083      	sub	sp, #12
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	f023 0201 	bic.w	r2, r3, #1
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80070ee:	2300      	movs	r3, #0
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	370c      	adds	r7, #12
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	460b      	mov	r3, r1
 8007106:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007108:	2300      	movs	r3, #0
 800710a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007118:	78fb      	ldrb	r3, [r7, #3]
 800711a:	2b01      	cmp	r3, #1
 800711c:	d115      	bne.n	800714a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	68db      	ldr	r3, [r3, #12]
 8007122:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800712a:	200a      	movs	r0, #10
 800712c:	f7fa fa82 	bl	8001634 <HAL_Delay>
      ms += 10U;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	330a      	adds	r3, #10
 8007134:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f001 f93f 	bl	80083ba <USB_GetMode>
 800713c:	4603      	mov	r3, r0
 800713e:	2b01      	cmp	r3, #1
 8007140:	d01e      	beq.n	8007180 <USB_SetCurrentMode+0x84>
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2bc7      	cmp	r3, #199	@ 0xc7
 8007146:	d9f0      	bls.n	800712a <USB_SetCurrentMode+0x2e>
 8007148:	e01a      	b.n	8007180 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800714a:	78fb      	ldrb	r3, [r7, #3]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d115      	bne.n	800717c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	68db      	ldr	r3, [r3, #12]
 8007154:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800715c:	200a      	movs	r0, #10
 800715e:	f7fa fa69 	bl	8001634 <HAL_Delay>
      ms += 10U;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	330a      	adds	r3, #10
 8007166:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f001 f926 	bl	80083ba <USB_GetMode>
 800716e:	4603      	mov	r3, r0
 8007170:	2b00      	cmp	r3, #0
 8007172:	d005      	beq.n	8007180 <USB_SetCurrentMode+0x84>
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2bc7      	cmp	r3, #199	@ 0xc7
 8007178:	d9f0      	bls.n	800715c <USB_SetCurrentMode+0x60>
 800717a:	e001      	b.n	8007180 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800717c:	2301      	movs	r3, #1
 800717e:	e005      	b.n	800718c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2bc8      	cmp	r3, #200	@ 0xc8
 8007184:	d101      	bne.n	800718a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	e000      	b.n	800718c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800718a:	2300      	movs	r3, #0
}
 800718c:	4618      	mov	r0, r3
 800718e:	3710      	adds	r7, #16
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007194:	b084      	sub	sp, #16
 8007196:	b580      	push	{r7, lr}
 8007198:	b086      	sub	sp, #24
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
 800719e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80071a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80071a6:	2300      	movs	r3, #0
 80071a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80071ae:	2300      	movs	r3, #0
 80071b0:	613b      	str	r3, [r7, #16]
 80071b2:	e009      	b.n	80071c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	3340      	adds	r3, #64	@ 0x40
 80071ba:	009b      	lsls	r3, r3, #2
 80071bc:	4413      	add	r3, r2
 80071be:	2200      	movs	r2, #0
 80071c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	3301      	adds	r3, #1
 80071c6:	613b      	str	r3, [r7, #16]
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	2b0e      	cmp	r3, #14
 80071cc:	d9f2      	bls.n	80071b4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80071ce:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d11c      	bne.n	8007210 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	68fa      	ldr	r2, [r7, #12]
 80071e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80071e4:	f043 0302 	orr.w	r3, r3, #2
 80071e8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071ee:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071fa:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007206:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	639a      	str	r2, [r3, #56]	@ 0x38
 800720e:	e00b      	b.n	8007228 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007214:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007220:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800722e:	461a      	mov	r2, r3
 8007230:	2300      	movs	r3, #0
 8007232:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007234:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007238:	2b01      	cmp	r3, #1
 800723a:	d10d      	bne.n	8007258 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800723c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007240:	2b00      	cmp	r3, #0
 8007242:	d104      	bne.n	800724e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007244:	2100      	movs	r1, #0
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 f968 	bl	800751c <USB_SetDevSpeed>
 800724c:	e008      	b.n	8007260 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800724e:	2101      	movs	r1, #1
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f000 f963 	bl	800751c <USB_SetDevSpeed>
 8007256:	e003      	b.n	8007260 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007258:	2103      	movs	r1, #3
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 f95e 	bl	800751c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007260:	2110      	movs	r1, #16
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 f8fa 	bl	800745c <USB_FlushTxFifo>
 8007268:	4603      	mov	r3, r0
 800726a:	2b00      	cmp	r3, #0
 800726c:	d001      	beq.n	8007272 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800726e:	2301      	movs	r3, #1
 8007270:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 f924 	bl	80074c0 <USB_FlushRxFifo>
 8007278:	4603      	mov	r3, r0
 800727a:	2b00      	cmp	r3, #0
 800727c:	d001      	beq.n	8007282 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007288:	461a      	mov	r2, r3
 800728a:	2300      	movs	r3, #0
 800728c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007294:	461a      	mov	r2, r3
 8007296:	2300      	movs	r3, #0
 8007298:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072a0:	461a      	mov	r2, r3
 80072a2:	2300      	movs	r3, #0
 80072a4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80072a6:	2300      	movs	r3, #0
 80072a8:	613b      	str	r3, [r7, #16]
 80072aa:	e043      	b.n	8007334 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	015a      	lsls	r2, r3, #5
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	4413      	add	r3, r2
 80072b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80072be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80072c2:	d118      	bne.n	80072f6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d10a      	bne.n	80072e0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	015a      	lsls	r2, r3, #5
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	4413      	add	r3, r2
 80072d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072d6:	461a      	mov	r2, r3
 80072d8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80072dc:	6013      	str	r3, [r2, #0]
 80072de:	e013      	b.n	8007308 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	015a      	lsls	r2, r3, #5
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	4413      	add	r3, r2
 80072e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072ec:	461a      	mov	r2, r3
 80072ee:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80072f2:	6013      	str	r3, [r2, #0]
 80072f4:	e008      	b.n	8007308 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	015a      	lsls	r2, r3, #5
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	4413      	add	r3, r2
 80072fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007302:	461a      	mov	r2, r3
 8007304:	2300      	movs	r3, #0
 8007306:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	015a      	lsls	r2, r3, #5
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	4413      	add	r3, r2
 8007310:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007314:	461a      	mov	r2, r3
 8007316:	2300      	movs	r3, #0
 8007318:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	015a      	lsls	r2, r3, #5
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	4413      	add	r3, r2
 8007322:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007326:	461a      	mov	r2, r3
 8007328:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800732c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	3301      	adds	r3, #1
 8007332:	613b      	str	r3, [r7, #16]
 8007334:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007338:	461a      	mov	r2, r3
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	4293      	cmp	r3, r2
 800733e:	d3b5      	bcc.n	80072ac <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007340:	2300      	movs	r3, #0
 8007342:	613b      	str	r3, [r7, #16]
 8007344:	e043      	b.n	80073ce <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	015a      	lsls	r2, r3, #5
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	4413      	add	r3, r2
 800734e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007358:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800735c:	d118      	bne.n	8007390 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d10a      	bne.n	800737a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	015a      	lsls	r2, r3, #5
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	4413      	add	r3, r2
 800736c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007370:	461a      	mov	r2, r3
 8007372:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007376:	6013      	str	r3, [r2, #0]
 8007378:	e013      	b.n	80073a2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	015a      	lsls	r2, r3, #5
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	4413      	add	r3, r2
 8007382:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007386:	461a      	mov	r2, r3
 8007388:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800738c:	6013      	str	r3, [r2, #0]
 800738e:	e008      	b.n	80073a2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	015a      	lsls	r2, r3, #5
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	4413      	add	r3, r2
 8007398:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800739c:	461a      	mov	r2, r3
 800739e:	2300      	movs	r3, #0
 80073a0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	015a      	lsls	r2, r3, #5
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	4413      	add	r3, r2
 80073aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073ae:	461a      	mov	r2, r3
 80073b0:	2300      	movs	r3, #0
 80073b2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	015a      	lsls	r2, r3, #5
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	4413      	add	r3, r2
 80073bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073c0:	461a      	mov	r2, r3
 80073c2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80073c6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	3301      	adds	r3, #1
 80073cc:	613b      	str	r3, [r7, #16]
 80073ce:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80073d2:	461a      	mov	r2, r3
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d3b5      	bcc.n	8007346 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073e0:	691b      	ldr	r3, [r3, #16]
 80073e2:	68fa      	ldr	r2, [r7, #12]
 80073e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80073e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80073ec:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80073fa:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80073fc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007400:	2b00      	cmp	r3, #0
 8007402:	d105      	bne.n	8007410 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	699b      	ldr	r3, [r3, #24]
 8007408:	f043 0210 	orr.w	r2, r3, #16
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	699a      	ldr	r2, [r3, #24]
 8007414:	4b10      	ldr	r3, [pc, #64]	@ (8007458 <USB_DevInit+0x2c4>)
 8007416:	4313      	orrs	r3, r2
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800741c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007420:	2b00      	cmp	r3, #0
 8007422:	d005      	beq.n	8007430 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	699b      	ldr	r3, [r3, #24]
 8007428:	f043 0208 	orr.w	r2, r3, #8
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007430:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007434:	2b01      	cmp	r3, #1
 8007436:	d107      	bne.n	8007448 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	699b      	ldr	r3, [r3, #24]
 800743c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007440:	f043 0304 	orr.w	r3, r3, #4
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007448:	7dfb      	ldrb	r3, [r7, #23]
}
 800744a:	4618      	mov	r0, r3
 800744c:	3718      	adds	r7, #24
 800744e:	46bd      	mov	sp, r7
 8007450:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007454:	b004      	add	sp, #16
 8007456:	4770      	bx	lr
 8007458:	803c3800 	.word	0x803c3800

0800745c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800745c:	b480      	push	{r7}
 800745e:	b085      	sub	sp, #20
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007466:	2300      	movs	r3, #0
 8007468:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	3301      	adds	r3, #1
 800746e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007476:	d901      	bls.n	800747c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007478:	2303      	movs	r3, #3
 800747a:	e01b      	b.n	80074b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	691b      	ldr	r3, [r3, #16]
 8007480:	2b00      	cmp	r3, #0
 8007482:	daf2      	bge.n	800746a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007484:	2300      	movs	r3, #0
 8007486:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	019b      	lsls	r3, r3, #6
 800748c:	f043 0220 	orr.w	r2, r3, #32
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	3301      	adds	r3, #1
 8007498:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80074a0:	d901      	bls.n	80074a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80074a2:	2303      	movs	r3, #3
 80074a4:	e006      	b.n	80074b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	691b      	ldr	r3, [r3, #16]
 80074aa:	f003 0320 	and.w	r3, r3, #32
 80074ae:	2b20      	cmp	r3, #32
 80074b0:	d0f0      	beq.n	8007494 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80074b2:	2300      	movs	r3, #0
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3714      	adds	r7, #20
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr

080074c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b085      	sub	sp, #20
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80074c8:	2300      	movs	r3, #0
 80074ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	3301      	adds	r3, #1
 80074d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80074d8:	d901      	bls.n	80074de <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80074da:	2303      	movs	r3, #3
 80074dc:	e018      	b.n	8007510 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	691b      	ldr	r3, [r3, #16]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	daf2      	bge.n	80074cc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80074e6:	2300      	movs	r3, #0
 80074e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2210      	movs	r2, #16
 80074ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	3301      	adds	r3, #1
 80074f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80074fc:	d901      	bls.n	8007502 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80074fe:	2303      	movs	r3, #3
 8007500:	e006      	b.n	8007510 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	691b      	ldr	r3, [r3, #16]
 8007506:	f003 0310 	and.w	r3, r3, #16
 800750a:	2b10      	cmp	r3, #16
 800750c:	d0f0      	beq.n	80074f0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800750e:	2300      	movs	r3, #0
}
 8007510:	4618      	mov	r0, r3
 8007512:	3714      	adds	r7, #20
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr

0800751c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800751c:	b480      	push	{r7}
 800751e:	b085      	sub	sp, #20
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	460b      	mov	r3, r1
 8007526:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	78fb      	ldrb	r3, [r7, #3]
 8007536:	68f9      	ldr	r1, [r7, #12]
 8007538:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800753c:	4313      	orrs	r3, r2
 800753e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007540:	2300      	movs	r3, #0
}
 8007542:	4618      	mov	r0, r3
 8007544:	3714      	adds	r7, #20
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr

0800754e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800754e:	b480      	push	{r7}
 8007550:	b087      	sub	sp, #28
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	f003 0306 	and.w	r3, r3, #6
 8007566:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d102      	bne.n	8007574 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800756e:	2300      	movs	r3, #0
 8007570:	75fb      	strb	r3, [r7, #23]
 8007572:	e00a      	b.n	800758a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2b02      	cmp	r3, #2
 8007578:	d002      	beq.n	8007580 <USB_GetDevSpeed+0x32>
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2b06      	cmp	r3, #6
 800757e:	d102      	bne.n	8007586 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007580:	2302      	movs	r3, #2
 8007582:	75fb      	strb	r3, [r7, #23]
 8007584:	e001      	b.n	800758a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007586:	230f      	movs	r3, #15
 8007588:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800758a:	7dfb      	ldrb	r3, [r7, #23]
}
 800758c:	4618      	mov	r0, r3
 800758e:	371c      	adds	r7, #28
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007598:	b480      	push	{r7}
 800759a:	b085      	sub	sp, #20
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	785b      	ldrb	r3, [r3, #1]
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d13a      	bne.n	800762a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075ba:	69da      	ldr	r2, [r3, #28]
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	f003 030f 	and.w	r3, r3, #15
 80075c4:	2101      	movs	r1, #1
 80075c6:	fa01 f303 	lsl.w	r3, r1, r3
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	68f9      	ldr	r1, [r7, #12]
 80075ce:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80075d2:	4313      	orrs	r3, r2
 80075d4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	015a      	lsls	r2, r3, #5
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	4413      	add	r3, r2
 80075de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d155      	bne.n	8007698 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	015a      	lsls	r2, r3, #5
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	4413      	add	r3, r2
 80075f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075f8:	681a      	ldr	r2, [r3, #0]
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	791b      	ldrb	r3, [r3, #4]
 8007606:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007608:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	059b      	lsls	r3, r3, #22
 800760e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007610:	4313      	orrs	r3, r2
 8007612:	68ba      	ldr	r2, [r7, #8]
 8007614:	0151      	lsls	r1, r2, #5
 8007616:	68fa      	ldr	r2, [r7, #12]
 8007618:	440a      	add	r2, r1
 800761a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800761e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007622:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007626:	6013      	str	r3, [r2, #0]
 8007628:	e036      	b.n	8007698 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007630:	69da      	ldr	r2, [r3, #28]
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	f003 030f 	and.w	r3, r3, #15
 800763a:	2101      	movs	r1, #1
 800763c:	fa01 f303 	lsl.w	r3, r1, r3
 8007640:	041b      	lsls	r3, r3, #16
 8007642:	68f9      	ldr	r1, [r7, #12]
 8007644:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007648:	4313      	orrs	r3, r2
 800764a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	015a      	lsls	r2, r3, #5
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	4413      	add	r3, r2
 8007654:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800765e:	2b00      	cmp	r3, #0
 8007660:	d11a      	bne.n	8007698 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	015a      	lsls	r2, r3, #5
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	4413      	add	r3, r2
 800766a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	791b      	ldrb	r3, [r3, #4]
 800767c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800767e:	430b      	orrs	r3, r1
 8007680:	4313      	orrs	r3, r2
 8007682:	68ba      	ldr	r2, [r7, #8]
 8007684:	0151      	lsls	r1, r2, #5
 8007686:	68fa      	ldr	r2, [r7, #12]
 8007688:	440a      	add	r2, r1
 800768a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800768e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007692:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007696:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007698:	2300      	movs	r3, #0
}
 800769a:	4618      	mov	r0, r3
 800769c:	3714      	adds	r7, #20
 800769e:	46bd      	mov	sp, r7
 80076a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a4:	4770      	bx	lr
	...

080076a8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b085      	sub	sp, #20
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	785b      	ldrb	r3, [r3, #1]
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d161      	bne.n	8007788 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	015a      	lsls	r2, r3, #5
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	4413      	add	r3, r2
 80076cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80076d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80076da:	d11f      	bne.n	800771c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	015a      	lsls	r2, r3, #5
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	4413      	add	r3, r2
 80076e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	68ba      	ldr	r2, [r7, #8]
 80076ec:	0151      	lsls	r1, r2, #5
 80076ee:	68fa      	ldr	r2, [r7, #12]
 80076f0:	440a      	add	r2, r1
 80076f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076f6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80076fa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	015a      	lsls	r2, r3, #5
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	4413      	add	r3, r2
 8007704:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	68ba      	ldr	r2, [r7, #8]
 800770c:	0151      	lsls	r1, r2, #5
 800770e:	68fa      	ldr	r2, [r7, #12]
 8007710:	440a      	add	r2, r1
 8007712:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007716:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800771a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007722:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	f003 030f 	and.w	r3, r3, #15
 800772c:	2101      	movs	r1, #1
 800772e:	fa01 f303 	lsl.w	r3, r1, r3
 8007732:	b29b      	uxth	r3, r3
 8007734:	43db      	mvns	r3, r3
 8007736:	68f9      	ldr	r1, [r7, #12]
 8007738:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800773c:	4013      	ands	r3, r2
 800773e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007746:	69da      	ldr	r2, [r3, #28]
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	f003 030f 	and.w	r3, r3, #15
 8007750:	2101      	movs	r1, #1
 8007752:	fa01 f303 	lsl.w	r3, r1, r3
 8007756:	b29b      	uxth	r3, r3
 8007758:	43db      	mvns	r3, r3
 800775a:	68f9      	ldr	r1, [r7, #12]
 800775c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007760:	4013      	ands	r3, r2
 8007762:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	015a      	lsls	r2, r3, #5
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	4413      	add	r3, r2
 800776c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	0159      	lsls	r1, r3, #5
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	440b      	add	r3, r1
 800777a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800777e:	4619      	mov	r1, r3
 8007780:	4b35      	ldr	r3, [pc, #212]	@ (8007858 <USB_DeactivateEndpoint+0x1b0>)
 8007782:	4013      	ands	r3, r2
 8007784:	600b      	str	r3, [r1, #0]
 8007786:	e060      	b.n	800784a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	015a      	lsls	r2, r3, #5
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	4413      	add	r3, r2
 8007790:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800779a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800779e:	d11f      	bne.n	80077e0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	015a      	lsls	r2, r3, #5
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	4413      	add	r3, r2
 80077a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	68ba      	ldr	r2, [r7, #8]
 80077b0:	0151      	lsls	r1, r2, #5
 80077b2:	68fa      	ldr	r2, [r7, #12]
 80077b4:	440a      	add	r2, r1
 80077b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077ba:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80077be:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	015a      	lsls	r2, r3, #5
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	4413      	add	r3, r2
 80077c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	68ba      	ldr	r2, [r7, #8]
 80077d0:	0151      	lsls	r1, r2, #5
 80077d2:	68fa      	ldr	r2, [r7, #12]
 80077d4:	440a      	add	r2, r1
 80077d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077da:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80077de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	f003 030f 	and.w	r3, r3, #15
 80077f0:	2101      	movs	r1, #1
 80077f2:	fa01 f303 	lsl.w	r3, r1, r3
 80077f6:	041b      	lsls	r3, r3, #16
 80077f8:	43db      	mvns	r3, r3
 80077fa:	68f9      	ldr	r1, [r7, #12]
 80077fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007800:	4013      	ands	r3, r2
 8007802:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800780a:	69da      	ldr	r2, [r3, #28]
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	f003 030f 	and.w	r3, r3, #15
 8007814:	2101      	movs	r1, #1
 8007816:	fa01 f303 	lsl.w	r3, r1, r3
 800781a:	041b      	lsls	r3, r3, #16
 800781c:	43db      	mvns	r3, r3
 800781e:	68f9      	ldr	r1, [r7, #12]
 8007820:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007824:	4013      	ands	r3, r2
 8007826:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	015a      	lsls	r2, r3, #5
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	4413      	add	r3, r2
 8007830:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007834:	681a      	ldr	r2, [r3, #0]
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	0159      	lsls	r1, r3, #5
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	440b      	add	r3, r1
 800783e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007842:	4619      	mov	r1, r3
 8007844:	4b05      	ldr	r3, [pc, #20]	@ (800785c <USB_DeactivateEndpoint+0x1b4>)
 8007846:	4013      	ands	r3, r2
 8007848:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800784a:	2300      	movs	r3, #0
}
 800784c:	4618      	mov	r0, r3
 800784e:	3714      	adds	r7, #20
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr
 8007858:	ec337800 	.word	0xec337800
 800785c:	eff37800 	.word	0xeff37800

08007860 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b08a      	sub	sp, #40	@ 0x28
 8007864:	af02      	add	r7, sp, #8
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	60b9      	str	r1, [r7, #8]
 800786a:	4613      	mov	r3, r2
 800786c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	785b      	ldrb	r3, [r3, #1]
 800787c:	2b01      	cmp	r3, #1
 800787e:	f040 817f 	bne.w	8007b80 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	691b      	ldr	r3, [r3, #16]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d132      	bne.n	80078f0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800788a:	69bb      	ldr	r3, [r7, #24]
 800788c:	015a      	lsls	r2, r3, #5
 800788e:	69fb      	ldr	r3, [r7, #28]
 8007890:	4413      	add	r3, r2
 8007892:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007896:	691b      	ldr	r3, [r3, #16]
 8007898:	69ba      	ldr	r2, [r7, #24]
 800789a:	0151      	lsls	r1, r2, #5
 800789c:	69fa      	ldr	r2, [r7, #28]
 800789e:	440a      	add	r2, r1
 80078a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80078a4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80078a8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80078ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80078ae:	69bb      	ldr	r3, [r7, #24]
 80078b0:	015a      	lsls	r2, r3, #5
 80078b2:	69fb      	ldr	r3, [r7, #28]
 80078b4:	4413      	add	r3, r2
 80078b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078ba:	691b      	ldr	r3, [r3, #16]
 80078bc:	69ba      	ldr	r2, [r7, #24]
 80078be:	0151      	lsls	r1, r2, #5
 80078c0:	69fa      	ldr	r2, [r7, #28]
 80078c2:	440a      	add	r2, r1
 80078c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80078c8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80078cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80078ce:	69bb      	ldr	r3, [r7, #24]
 80078d0:	015a      	lsls	r2, r3, #5
 80078d2:	69fb      	ldr	r3, [r7, #28]
 80078d4:	4413      	add	r3, r2
 80078d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078da:	691b      	ldr	r3, [r3, #16]
 80078dc:	69ba      	ldr	r2, [r7, #24]
 80078de:	0151      	lsls	r1, r2, #5
 80078e0:	69fa      	ldr	r2, [r7, #28]
 80078e2:	440a      	add	r2, r1
 80078e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80078e8:	0cdb      	lsrs	r3, r3, #19
 80078ea:	04db      	lsls	r3, r3, #19
 80078ec:	6113      	str	r3, [r2, #16]
 80078ee:	e097      	b.n	8007a20 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80078f0:	69bb      	ldr	r3, [r7, #24]
 80078f2:	015a      	lsls	r2, r3, #5
 80078f4:	69fb      	ldr	r3, [r7, #28]
 80078f6:	4413      	add	r3, r2
 80078f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078fc:	691b      	ldr	r3, [r3, #16]
 80078fe:	69ba      	ldr	r2, [r7, #24]
 8007900:	0151      	lsls	r1, r2, #5
 8007902:	69fa      	ldr	r2, [r7, #28]
 8007904:	440a      	add	r2, r1
 8007906:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800790a:	0cdb      	lsrs	r3, r3, #19
 800790c:	04db      	lsls	r3, r3, #19
 800790e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007910:	69bb      	ldr	r3, [r7, #24]
 8007912:	015a      	lsls	r2, r3, #5
 8007914:	69fb      	ldr	r3, [r7, #28]
 8007916:	4413      	add	r3, r2
 8007918:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800791c:	691b      	ldr	r3, [r3, #16]
 800791e:	69ba      	ldr	r2, [r7, #24]
 8007920:	0151      	lsls	r1, r2, #5
 8007922:	69fa      	ldr	r2, [r7, #28]
 8007924:	440a      	add	r2, r1
 8007926:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800792a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800792e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007932:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007934:	69bb      	ldr	r3, [r7, #24]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d11a      	bne.n	8007970 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	691a      	ldr	r2, [r3, #16]
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	429a      	cmp	r2, r3
 8007944:	d903      	bls.n	800794e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	689a      	ldr	r2, [r3, #8]
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800794e:	69bb      	ldr	r3, [r7, #24]
 8007950:	015a      	lsls	r2, r3, #5
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	4413      	add	r3, r2
 8007956:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800795a:	691b      	ldr	r3, [r3, #16]
 800795c:	69ba      	ldr	r2, [r7, #24]
 800795e:	0151      	lsls	r1, r2, #5
 8007960:	69fa      	ldr	r2, [r7, #28]
 8007962:	440a      	add	r2, r1
 8007964:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007968:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800796c:	6113      	str	r3, [r2, #16]
 800796e:	e044      	b.n	80079fa <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	691a      	ldr	r2, [r3, #16]
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	4413      	add	r3, r2
 800797a:	1e5a      	subs	r2, r3, #1
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	689b      	ldr	r3, [r3, #8]
 8007980:	fbb2 f3f3 	udiv	r3, r2, r3
 8007984:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8007986:	69bb      	ldr	r3, [r7, #24]
 8007988:	015a      	lsls	r2, r3, #5
 800798a:	69fb      	ldr	r3, [r7, #28]
 800798c:	4413      	add	r3, r2
 800798e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007992:	691a      	ldr	r2, [r3, #16]
 8007994:	8afb      	ldrh	r3, [r7, #22]
 8007996:	04d9      	lsls	r1, r3, #19
 8007998:	4ba4      	ldr	r3, [pc, #656]	@ (8007c2c <USB_EPStartXfer+0x3cc>)
 800799a:	400b      	ands	r3, r1
 800799c:	69b9      	ldr	r1, [r7, #24]
 800799e:	0148      	lsls	r0, r1, #5
 80079a0:	69f9      	ldr	r1, [r7, #28]
 80079a2:	4401      	add	r1, r0
 80079a4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80079a8:	4313      	orrs	r3, r2
 80079aa:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	791b      	ldrb	r3, [r3, #4]
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d122      	bne.n	80079fa <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80079b4:	69bb      	ldr	r3, [r7, #24]
 80079b6:	015a      	lsls	r2, r3, #5
 80079b8:	69fb      	ldr	r3, [r7, #28]
 80079ba:	4413      	add	r3, r2
 80079bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079c0:	691b      	ldr	r3, [r3, #16]
 80079c2:	69ba      	ldr	r2, [r7, #24]
 80079c4:	0151      	lsls	r1, r2, #5
 80079c6:	69fa      	ldr	r2, [r7, #28]
 80079c8:	440a      	add	r2, r1
 80079ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079ce:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80079d2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 80079d4:	69bb      	ldr	r3, [r7, #24]
 80079d6:	015a      	lsls	r2, r3, #5
 80079d8:	69fb      	ldr	r3, [r7, #28]
 80079da:	4413      	add	r3, r2
 80079dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079e0:	691a      	ldr	r2, [r3, #16]
 80079e2:	8afb      	ldrh	r3, [r7, #22]
 80079e4:	075b      	lsls	r3, r3, #29
 80079e6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80079ea:	69b9      	ldr	r1, [r7, #24]
 80079ec:	0148      	lsls	r0, r1, #5
 80079ee:	69f9      	ldr	r1, [r7, #28]
 80079f0:	4401      	add	r1, r0
 80079f2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80079f6:	4313      	orrs	r3, r2
 80079f8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80079fa:	69bb      	ldr	r3, [r7, #24]
 80079fc:	015a      	lsls	r2, r3, #5
 80079fe:	69fb      	ldr	r3, [r7, #28]
 8007a00:	4413      	add	r3, r2
 8007a02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a06:	691a      	ldr	r2, [r3, #16]
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	691b      	ldr	r3, [r3, #16]
 8007a0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a10:	69b9      	ldr	r1, [r7, #24]
 8007a12:	0148      	lsls	r0, r1, #5
 8007a14:	69f9      	ldr	r1, [r7, #28]
 8007a16:	4401      	add	r1, r0
 8007a18:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007a20:	79fb      	ldrb	r3, [r7, #7]
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d14b      	bne.n	8007abe <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	69db      	ldr	r3, [r3, #28]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d009      	beq.n	8007a42 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007a2e:	69bb      	ldr	r3, [r7, #24]
 8007a30:	015a      	lsls	r2, r3, #5
 8007a32:	69fb      	ldr	r3, [r7, #28]
 8007a34:	4413      	add	r3, r2
 8007a36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	69db      	ldr	r3, [r3, #28]
 8007a40:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	791b      	ldrb	r3, [r3, #4]
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d128      	bne.n	8007a9c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007a4a:	69fb      	ldr	r3, [r7, #28]
 8007a4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d110      	bne.n	8007a7c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007a5a:	69bb      	ldr	r3, [r7, #24]
 8007a5c:	015a      	lsls	r2, r3, #5
 8007a5e:	69fb      	ldr	r3, [r7, #28]
 8007a60:	4413      	add	r3, r2
 8007a62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	69ba      	ldr	r2, [r7, #24]
 8007a6a:	0151      	lsls	r1, r2, #5
 8007a6c:	69fa      	ldr	r2, [r7, #28]
 8007a6e:	440a      	add	r2, r1
 8007a70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a74:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007a78:	6013      	str	r3, [r2, #0]
 8007a7a:	e00f      	b.n	8007a9c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007a7c:	69bb      	ldr	r3, [r7, #24]
 8007a7e:	015a      	lsls	r2, r3, #5
 8007a80:	69fb      	ldr	r3, [r7, #28]
 8007a82:	4413      	add	r3, r2
 8007a84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	69ba      	ldr	r2, [r7, #24]
 8007a8c:	0151      	lsls	r1, r2, #5
 8007a8e:	69fa      	ldr	r2, [r7, #28]
 8007a90:	440a      	add	r2, r1
 8007a92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a9a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007a9c:	69bb      	ldr	r3, [r7, #24]
 8007a9e:	015a      	lsls	r2, r3, #5
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	4413      	add	r3, r2
 8007aa4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	69ba      	ldr	r2, [r7, #24]
 8007aac:	0151      	lsls	r1, r2, #5
 8007aae:	69fa      	ldr	r2, [r7, #28]
 8007ab0:	440a      	add	r2, r1
 8007ab2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ab6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007aba:	6013      	str	r3, [r2, #0]
 8007abc:	e166      	b.n	8007d8c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007abe:	69bb      	ldr	r3, [r7, #24]
 8007ac0:	015a      	lsls	r2, r3, #5
 8007ac2:	69fb      	ldr	r3, [r7, #28]
 8007ac4:	4413      	add	r3, r2
 8007ac6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	69ba      	ldr	r2, [r7, #24]
 8007ace:	0151      	lsls	r1, r2, #5
 8007ad0:	69fa      	ldr	r2, [r7, #28]
 8007ad2:	440a      	add	r2, r1
 8007ad4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ad8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007adc:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	791b      	ldrb	r3, [r3, #4]
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d015      	beq.n	8007b12 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	691b      	ldr	r3, [r3, #16]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	f000 814e 	beq.w	8007d8c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007af0:	69fb      	ldr	r3, [r7, #28]
 8007af2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007af6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	781b      	ldrb	r3, [r3, #0]
 8007afc:	f003 030f 	and.w	r3, r3, #15
 8007b00:	2101      	movs	r1, #1
 8007b02:	fa01 f303 	lsl.w	r3, r1, r3
 8007b06:	69f9      	ldr	r1, [r7, #28]
 8007b08:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	634b      	str	r3, [r1, #52]	@ 0x34
 8007b10:	e13c      	b.n	8007d8c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007b12:	69fb      	ldr	r3, [r7, #28]
 8007b14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d110      	bne.n	8007b44 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007b22:	69bb      	ldr	r3, [r7, #24]
 8007b24:	015a      	lsls	r2, r3, #5
 8007b26:	69fb      	ldr	r3, [r7, #28]
 8007b28:	4413      	add	r3, r2
 8007b2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	69ba      	ldr	r2, [r7, #24]
 8007b32:	0151      	lsls	r1, r2, #5
 8007b34:	69fa      	ldr	r2, [r7, #28]
 8007b36:	440a      	add	r2, r1
 8007b38:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b3c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007b40:	6013      	str	r3, [r2, #0]
 8007b42:	e00f      	b.n	8007b64 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007b44:	69bb      	ldr	r3, [r7, #24]
 8007b46:	015a      	lsls	r2, r3, #5
 8007b48:	69fb      	ldr	r3, [r7, #28]
 8007b4a:	4413      	add	r3, r2
 8007b4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	69ba      	ldr	r2, [r7, #24]
 8007b54:	0151      	lsls	r1, r2, #5
 8007b56:	69fa      	ldr	r2, [r7, #28]
 8007b58:	440a      	add	r2, r1
 8007b5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b62:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	68d9      	ldr	r1, [r3, #12]
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	781a      	ldrb	r2, [r3, #0]
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	691b      	ldr	r3, [r3, #16]
 8007b70:	b298      	uxth	r0, r3
 8007b72:	79fb      	ldrb	r3, [r7, #7]
 8007b74:	9300      	str	r3, [sp, #0]
 8007b76:	4603      	mov	r3, r0
 8007b78:	68f8      	ldr	r0, [r7, #12]
 8007b7a:	f000 f9b9 	bl	8007ef0 <USB_WritePacket>
 8007b7e:	e105      	b.n	8007d8c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007b80:	69bb      	ldr	r3, [r7, #24]
 8007b82:	015a      	lsls	r2, r3, #5
 8007b84:	69fb      	ldr	r3, [r7, #28]
 8007b86:	4413      	add	r3, r2
 8007b88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b8c:	691b      	ldr	r3, [r3, #16]
 8007b8e:	69ba      	ldr	r2, [r7, #24]
 8007b90:	0151      	lsls	r1, r2, #5
 8007b92:	69fa      	ldr	r2, [r7, #28]
 8007b94:	440a      	add	r2, r1
 8007b96:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b9a:	0cdb      	lsrs	r3, r3, #19
 8007b9c:	04db      	lsls	r3, r3, #19
 8007b9e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007ba0:	69bb      	ldr	r3, [r7, #24]
 8007ba2:	015a      	lsls	r2, r3, #5
 8007ba4:	69fb      	ldr	r3, [r7, #28]
 8007ba6:	4413      	add	r3, r2
 8007ba8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bac:	691b      	ldr	r3, [r3, #16]
 8007bae:	69ba      	ldr	r2, [r7, #24]
 8007bb0:	0151      	lsls	r1, r2, #5
 8007bb2:	69fa      	ldr	r2, [r7, #28]
 8007bb4:	440a      	add	r2, r1
 8007bb6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007bba:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007bbe:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007bc2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007bc4:	69bb      	ldr	r3, [r7, #24]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d132      	bne.n	8007c30 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	691b      	ldr	r3, [r3, #16]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d003      	beq.n	8007bda <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	689a      	ldr	r2, [r3, #8]
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	689a      	ldr	r2, [r3, #8]
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007be2:	69bb      	ldr	r3, [r7, #24]
 8007be4:	015a      	lsls	r2, r3, #5
 8007be6:	69fb      	ldr	r3, [r7, #28]
 8007be8:	4413      	add	r3, r2
 8007bea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bee:	691a      	ldr	r2, [r3, #16]
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	6a1b      	ldr	r3, [r3, #32]
 8007bf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007bf8:	69b9      	ldr	r1, [r7, #24]
 8007bfa:	0148      	lsls	r0, r1, #5
 8007bfc:	69f9      	ldr	r1, [r7, #28]
 8007bfe:	4401      	add	r1, r0
 8007c00:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007c04:	4313      	orrs	r3, r2
 8007c06:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007c08:	69bb      	ldr	r3, [r7, #24]
 8007c0a:	015a      	lsls	r2, r3, #5
 8007c0c:	69fb      	ldr	r3, [r7, #28]
 8007c0e:	4413      	add	r3, r2
 8007c10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c14:	691b      	ldr	r3, [r3, #16]
 8007c16:	69ba      	ldr	r2, [r7, #24]
 8007c18:	0151      	lsls	r1, r2, #5
 8007c1a:	69fa      	ldr	r2, [r7, #28]
 8007c1c:	440a      	add	r2, r1
 8007c1e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c22:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007c26:	6113      	str	r3, [r2, #16]
 8007c28:	e062      	b.n	8007cf0 <USB_EPStartXfer+0x490>
 8007c2a:	bf00      	nop
 8007c2c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	691b      	ldr	r3, [r3, #16]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d123      	bne.n	8007c80 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007c38:	69bb      	ldr	r3, [r7, #24]
 8007c3a:	015a      	lsls	r2, r3, #5
 8007c3c:	69fb      	ldr	r3, [r7, #28]
 8007c3e:	4413      	add	r3, r2
 8007c40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c44:	691a      	ldr	r2, [r3, #16]
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	689b      	ldr	r3, [r3, #8]
 8007c4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c4e:	69b9      	ldr	r1, [r7, #24]
 8007c50:	0148      	lsls	r0, r1, #5
 8007c52:	69f9      	ldr	r1, [r7, #28]
 8007c54:	4401      	add	r1, r0
 8007c56:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007c5e:	69bb      	ldr	r3, [r7, #24]
 8007c60:	015a      	lsls	r2, r3, #5
 8007c62:	69fb      	ldr	r3, [r7, #28]
 8007c64:	4413      	add	r3, r2
 8007c66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c6a:	691b      	ldr	r3, [r3, #16]
 8007c6c:	69ba      	ldr	r2, [r7, #24]
 8007c6e:	0151      	lsls	r1, r2, #5
 8007c70:	69fa      	ldr	r2, [r7, #28]
 8007c72:	440a      	add	r2, r1
 8007c74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c78:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007c7c:	6113      	str	r3, [r2, #16]
 8007c7e:	e037      	b.n	8007cf0 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	691a      	ldr	r2, [r3, #16]
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	4413      	add	r3, r2
 8007c8a:	1e5a      	subs	r2, r3, #1
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c94:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	8afa      	ldrh	r2, [r7, #22]
 8007c9c:	fb03 f202 	mul.w	r2, r3, r2
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007ca4:	69bb      	ldr	r3, [r7, #24]
 8007ca6:	015a      	lsls	r2, r3, #5
 8007ca8:	69fb      	ldr	r3, [r7, #28]
 8007caa:	4413      	add	r3, r2
 8007cac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cb0:	691a      	ldr	r2, [r3, #16]
 8007cb2:	8afb      	ldrh	r3, [r7, #22]
 8007cb4:	04d9      	lsls	r1, r3, #19
 8007cb6:	4b38      	ldr	r3, [pc, #224]	@ (8007d98 <USB_EPStartXfer+0x538>)
 8007cb8:	400b      	ands	r3, r1
 8007cba:	69b9      	ldr	r1, [r7, #24]
 8007cbc:	0148      	lsls	r0, r1, #5
 8007cbe:	69f9      	ldr	r1, [r7, #28]
 8007cc0:	4401      	add	r1, r0
 8007cc2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007cca:	69bb      	ldr	r3, [r7, #24]
 8007ccc:	015a      	lsls	r2, r3, #5
 8007cce:	69fb      	ldr	r3, [r7, #28]
 8007cd0:	4413      	add	r3, r2
 8007cd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cd6:	691a      	ldr	r2, [r3, #16]
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	6a1b      	ldr	r3, [r3, #32]
 8007cdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ce0:	69b9      	ldr	r1, [r7, #24]
 8007ce2:	0148      	lsls	r0, r1, #5
 8007ce4:	69f9      	ldr	r1, [r7, #28]
 8007ce6:	4401      	add	r1, r0
 8007ce8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007cec:	4313      	orrs	r3, r2
 8007cee:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007cf0:	79fb      	ldrb	r3, [r7, #7]
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	d10d      	bne.n	8007d12 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	68db      	ldr	r3, [r3, #12]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d009      	beq.n	8007d12 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	68d9      	ldr	r1, [r3, #12]
 8007d02:	69bb      	ldr	r3, [r7, #24]
 8007d04:	015a      	lsls	r2, r3, #5
 8007d06:	69fb      	ldr	r3, [r7, #28]
 8007d08:	4413      	add	r3, r2
 8007d0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d0e:	460a      	mov	r2, r1
 8007d10:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	791b      	ldrb	r3, [r3, #4]
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d128      	bne.n	8007d6c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007d1a:	69fb      	ldr	r3, [r7, #28]
 8007d1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d110      	bne.n	8007d4c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007d2a:	69bb      	ldr	r3, [r7, #24]
 8007d2c:	015a      	lsls	r2, r3, #5
 8007d2e:	69fb      	ldr	r3, [r7, #28]
 8007d30:	4413      	add	r3, r2
 8007d32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	69ba      	ldr	r2, [r7, #24]
 8007d3a:	0151      	lsls	r1, r2, #5
 8007d3c:	69fa      	ldr	r2, [r7, #28]
 8007d3e:	440a      	add	r2, r1
 8007d40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d44:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007d48:	6013      	str	r3, [r2, #0]
 8007d4a:	e00f      	b.n	8007d6c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007d4c:	69bb      	ldr	r3, [r7, #24]
 8007d4e:	015a      	lsls	r2, r3, #5
 8007d50:	69fb      	ldr	r3, [r7, #28]
 8007d52:	4413      	add	r3, r2
 8007d54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	69ba      	ldr	r2, [r7, #24]
 8007d5c:	0151      	lsls	r1, r2, #5
 8007d5e:	69fa      	ldr	r2, [r7, #28]
 8007d60:	440a      	add	r2, r1
 8007d62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d6a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007d6c:	69bb      	ldr	r3, [r7, #24]
 8007d6e:	015a      	lsls	r2, r3, #5
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	4413      	add	r3, r2
 8007d74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	69ba      	ldr	r2, [r7, #24]
 8007d7c:	0151      	lsls	r1, r2, #5
 8007d7e:	69fa      	ldr	r2, [r7, #28]
 8007d80:	440a      	add	r2, r1
 8007d82:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d86:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007d8a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007d8c:	2300      	movs	r3, #0
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3720      	adds	r7, #32
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}
 8007d96:	bf00      	nop
 8007d98:	1ff80000 	.word	0x1ff80000

08007d9c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b087      	sub	sp, #28
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007da6:	2300      	movs	r3, #0
 8007da8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007daa:	2300      	movs	r3, #0
 8007dac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	785b      	ldrb	r3, [r3, #1]
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d14a      	bne.n	8007e50 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	015a      	lsls	r2, r3, #5
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	4413      	add	r3, r2
 8007dc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007dce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007dd2:	f040 8086 	bne.w	8007ee2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	015a      	lsls	r2, r3, #5
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	4413      	add	r3, r2
 8007de0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	683a      	ldr	r2, [r7, #0]
 8007de8:	7812      	ldrb	r2, [r2, #0]
 8007dea:	0151      	lsls	r1, r2, #5
 8007dec:	693a      	ldr	r2, [r7, #16]
 8007dee:	440a      	add	r2, r1
 8007df0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007df4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007df8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	015a      	lsls	r2, r3, #5
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	4413      	add	r3, r2
 8007e04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	683a      	ldr	r2, [r7, #0]
 8007e0c:	7812      	ldrb	r2, [r2, #0]
 8007e0e:	0151      	lsls	r1, r2, #5
 8007e10:	693a      	ldr	r2, [r7, #16]
 8007e12:	440a      	add	r2, r1
 8007e14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e18:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007e1c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	3301      	adds	r3, #1
 8007e22:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d902      	bls.n	8007e34 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	75fb      	strb	r3, [r7, #23]
          break;
 8007e32:	e056      	b.n	8007ee2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	015a      	lsls	r2, r3, #5
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	4413      	add	r3, r2
 8007e3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e48:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e4c:	d0e7      	beq.n	8007e1e <USB_EPStopXfer+0x82>
 8007e4e:	e048      	b.n	8007ee2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	015a      	lsls	r2, r3, #5
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	4413      	add	r3, r2
 8007e5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e68:	d13b      	bne.n	8007ee2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	015a      	lsls	r2, r3, #5
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	4413      	add	r3, r2
 8007e74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	683a      	ldr	r2, [r7, #0]
 8007e7c:	7812      	ldrb	r2, [r2, #0]
 8007e7e:	0151      	lsls	r1, r2, #5
 8007e80:	693a      	ldr	r2, [r7, #16]
 8007e82:	440a      	add	r2, r1
 8007e84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e88:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007e8c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	015a      	lsls	r2, r3, #5
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	4413      	add	r3, r2
 8007e98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	683a      	ldr	r2, [r7, #0]
 8007ea0:	7812      	ldrb	r2, [r2, #0]
 8007ea2:	0151      	lsls	r1, r2, #5
 8007ea4:	693a      	ldr	r2, [r7, #16]
 8007ea6:	440a      	add	r2, r1
 8007ea8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007eac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007eb0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	3301      	adds	r3, #1
 8007eb6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d902      	bls.n	8007ec8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	75fb      	strb	r3, [r7, #23]
          break;
 8007ec6:	e00c      	b.n	8007ee2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	015a      	lsls	r2, r3, #5
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	4413      	add	r3, r2
 8007ed2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007edc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ee0:	d0e7      	beq.n	8007eb2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007ee2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	371c      	adds	r7, #28
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr

08007ef0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b089      	sub	sp, #36	@ 0x24
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	60f8      	str	r0, [r7, #12]
 8007ef8:	60b9      	str	r1, [r7, #8]
 8007efa:	4611      	mov	r1, r2
 8007efc:	461a      	mov	r2, r3
 8007efe:	460b      	mov	r3, r1
 8007f00:	71fb      	strb	r3, [r7, #7]
 8007f02:	4613      	mov	r3, r2
 8007f04:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007f0e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d123      	bne.n	8007f5e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007f16:	88bb      	ldrh	r3, [r7, #4]
 8007f18:	3303      	adds	r3, #3
 8007f1a:	089b      	lsrs	r3, r3, #2
 8007f1c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007f1e:	2300      	movs	r3, #0
 8007f20:	61bb      	str	r3, [r7, #24]
 8007f22:	e018      	b.n	8007f56 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007f24:	79fb      	ldrb	r3, [r7, #7]
 8007f26:	031a      	lsls	r2, r3, #12
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	4413      	add	r3, r2
 8007f2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f30:	461a      	mov	r2, r3
 8007f32:	69fb      	ldr	r3, [r7, #28]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007f38:	69fb      	ldr	r3, [r7, #28]
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007f3e:	69fb      	ldr	r3, [r7, #28]
 8007f40:	3301      	adds	r3, #1
 8007f42:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007f44:	69fb      	ldr	r3, [r7, #28]
 8007f46:	3301      	adds	r3, #1
 8007f48:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007f4a:	69fb      	ldr	r3, [r7, #28]
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007f50:	69bb      	ldr	r3, [r7, #24]
 8007f52:	3301      	adds	r3, #1
 8007f54:	61bb      	str	r3, [r7, #24]
 8007f56:	69ba      	ldr	r2, [r7, #24]
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d3e2      	bcc.n	8007f24 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007f5e:	2300      	movs	r3, #0
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3724      	adds	r7, #36	@ 0x24
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr

08007f6c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b08b      	sub	sp, #44	@ 0x2c
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	60f8      	str	r0, [r7, #12]
 8007f74:	60b9      	str	r1, [r7, #8]
 8007f76:	4613      	mov	r3, r2
 8007f78:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007f82:	88fb      	ldrh	r3, [r7, #6]
 8007f84:	089b      	lsrs	r3, r3, #2
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007f8a:	88fb      	ldrh	r3, [r7, #6]
 8007f8c:	f003 0303 	and.w	r3, r3, #3
 8007f90:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007f92:	2300      	movs	r3, #0
 8007f94:	623b      	str	r3, [r7, #32]
 8007f96:	e014      	b.n	8007fc2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007f98:	69bb      	ldr	r3, [r7, #24]
 8007f9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f9e:	681a      	ldr	r2, [r3, #0]
 8007fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa2:	601a      	str	r2, [r3, #0]
    pDest++;
 8007fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa6:	3301      	adds	r3, #1
 8007fa8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fac:	3301      	adds	r3, #1
 8007fae:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb2:	3301      	adds	r3, #1
 8007fb4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb8:	3301      	adds	r3, #1
 8007fba:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007fbc:	6a3b      	ldr	r3, [r7, #32]
 8007fbe:	3301      	adds	r3, #1
 8007fc0:	623b      	str	r3, [r7, #32]
 8007fc2:	6a3a      	ldr	r2, [r7, #32]
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	d3e6      	bcc.n	8007f98 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007fca:	8bfb      	ldrh	r3, [r7, #30]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d01e      	beq.n	800800e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007fd4:	69bb      	ldr	r3, [r7, #24]
 8007fd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007fda:	461a      	mov	r2, r3
 8007fdc:	f107 0310 	add.w	r3, r7, #16
 8007fe0:	6812      	ldr	r2, [r2, #0]
 8007fe2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007fe4:	693a      	ldr	r2, [r7, #16]
 8007fe6:	6a3b      	ldr	r3, [r7, #32]
 8007fe8:	b2db      	uxtb	r3, r3
 8007fea:	00db      	lsls	r3, r3, #3
 8007fec:	fa22 f303 	lsr.w	r3, r2, r3
 8007ff0:	b2da      	uxtb	r2, r3
 8007ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ff4:	701a      	strb	r2, [r3, #0]
      i++;
 8007ff6:	6a3b      	ldr	r3, [r7, #32]
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	623b      	str	r3, [r7, #32]
      pDest++;
 8007ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ffe:	3301      	adds	r3, #1
 8008000:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008002:	8bfb      	ldrh	r3, [r7, #30]
 8008004:	3b01      	subs	r3, #1
 8008006:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008008:	8bfb      	ldrh	r3, [r7, #30]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d1ea      	bne.n	8007fe4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800800e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008010:	4618      	mov	r0, r3
 8008012:	372c      	adds	r7, #44	@ 0x2c
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr

0800801c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800801c:	b480      	push	{r7}
 800801e:	b085      	sub	sp, #20
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	781b      	ldrb	r3, [r3, #0]
 800802e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	785b      	ldrb	r3, [r3, #1]
 8008034:	2b01      	cmp	r3, #1
 8008036:	d12c      	bne.n	8008092 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	015a      	lsls	r2, r3, #5
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	4413      	add	r3, r2
 8008040:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	2b00      	cmp	r3, #0
 8008048:	db12      	blt.n	8008070 <USB_EPSetStall+0x54>
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d00f      	beq.n	8008070 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	015a      	lsls	r2, r3, #5
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	4413      	add	r3, r2
 8008058:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	68ba      	ldr	r2, [r7, #8]
 8008060:	0151      	lsls	r1, r2, #5
 8008062:	68fa      	ldr	r2, [r7, #12]
 8008064:	440a      	add	r2, r1
 8008066:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800806a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800806e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	015a      	lsls	r2, r3, #5
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	4413      	add	r3, r2
 8008078:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	68ba      	ldr	r2, [r7, #8]
 8008080:	0151      	lsls	r1, r2, #5
 8008082:	68fa      	ldr	r2, [r7, #12]
 8008084:	440a      	add	r2, r1
 8008086:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800808a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800808e:	6013      	str	r3, [r2, #0]
 8008090:	e02b      	b.n	80080ea <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	015a      	lsls	r2, r3, #5
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	4413      	add	r3, r2
 800809a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	db12      	blt.n	80080ca <USB_EPSetStall+0xae>
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d00f      	beq.n	80080ca <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	015a      	lsls	r2, r3, #5
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	4413      	add	r3, r2
 80080b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	68ba      	ldr	r2, [r7, #8]
 80080ba:	0151      	lsls	r1, r2, #5
 80080bc:	68fa      	ldr	r2, [r7, #12]
 80080be:	440a      	add	r2, r1
 80080c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80080c4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80080c8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	015a      	lsls	r2, r3, #5
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	4413      	add	r3, r2
 80080d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	68ba      	ldr	r2, [r7, #8]
 80080da:	0151      	lsls	r1, r2, #5
 80080dc:	68fa      	ldr	r2, [r7, #12]
 80080de:	440a      	add	r2, r1
 80080e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80080e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80080e8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80080ea:	2300      	movs	r3, #0
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3714      	adds	r7, #20
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr

080080f8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b085      	sub	sp, #20
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	785b      	ldrb	r3, [r3, #1]
 8008110:	2b01      	cmp	r3, #1
 8008112:	d128      	bne.n	8008166 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	015a      	lsls	r2, r3, #5
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	4413      	add	r3, r2
 800811c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	68ba      	ldr	r2, [r7, #8]
 8008124:	0151      	lsls	r1, r2, #5
 8008126:	68fa      	ldr	r2, [r7, #12]
 8008128:	440a      	add	r2, r1
 800812a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800812e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008132:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	791b      	ldrb	r3, [r3, #4]
 8008138:	2b03      	cmp	r3, #3
 800813a:	d003      	beq.n	8008144 <USB_EPClearStall+0x4c>
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	791b      	ldrb	r3, [r3, #4]
 8008140:	2b02      	cmp	r3, #2
 8008142:	d138      	bne.n	80081b6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	015a      	lsls	r2, r3, #5
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	4413      	add	r3, r2
 800814c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	68ba      	ldr	r2, [r7, #8]
 8008154:	0151      	lsls	r1, r2, #5
 8008156:	68fa      	ldr	r2, [r7, #12]
 8008158:	440a      	add	r2, r1
 800815a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800815e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008162:	6013      	str	r3, [r2, #0]
 8008164:	e027      	b.n	80081b6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	015a      	lsls	r2, r3, #5
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	4413      	add	r3, r2
 800816e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	68ba      	ldr	r2, [r7, #8]
 8008176:	0151      	lsls	r1, r2, #5
 8008178:	68fa      	ldr	r2, [r7, #12]
 800817a:	440a      	add	r2, r1
 800817c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008180:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008184:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	791b      	ldrb	r3, [r3, #4]
 800818a:	2b03      	cmp	r3, #3
 800818c:	d003      	beq.n	8008196 <USB_EPClearStall+0x9e>
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	791b      	ldrb	r3, [r3, #4]
 8008192:	2b02      	cmp	r3, #2
 8008194:	d10f      	bne.n	80081b6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	015a      	lsls	r2, r3, #5
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	4413      	add	r3, r2
 800819e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	68ba      	ldr	r2, [r7, #8]
 80081a6:	0151      	lsls	r1, r2, #5
 80081a8:	68fa      	ldr	r2, [r7, #12]
 80081aa:	440a      	add	r2, r1
 80081ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80081b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80081b4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80081b6:	2300      	movs	r3, #0
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3714      	adds	r7, #20
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr

080081c4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b085      	sub	sp, #20
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	460b      	mov	r3, r1
 80081ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	68fa      	ldr	r2, [r7, #12]
 80081de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80081e2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80081e6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081ee:	681a      	ldr	r2, [r3, #0]
 80081f0:	78fb      	ldrb	r3, [r7, #3]
 80081f2:	011b      	lsls	r3, r3, #4
 80081f4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80081f8:	68f9      	ldr	r1, [r7, #12]
 80081fa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80081fe:	4313      	orrs	r3, r2
 8008200:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008202:	2300      	movs	r3, #0
}
 8008204:	4618      	mov	r0, r3
 8008206:	3714      	adds	r7, #20
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr

08008210 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008210:	b480      	push	{r7}
 8008212:	b085      	sub	sp, #20
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	68fa      	ldr	r2, [r7, #12]
 8008226:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800822a:	f023 0303 	bic.w	r3, r3, #3
 800822e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	68fa      	ldr	r2, [r7, #12]
 800823a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800823e:	f023 0302 	bic.w	r3, r3, #2
 8008242:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008244:	2300      	movs	r3, #0
}
 8008246:	4618      	mov	r0, r3
 8008248:	3714      	adds	r7, #20
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr

08008252 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008252:	b480      	push	{r7}
 8008254:	b085      	sub	sp, #20
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	68fa      	ldr	r2, [r7, #12]
 8008268:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800826c:	f023 0303 	bic.w	r3, r3, #3
 8008270:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008278:	685b      	ldr	r3, [r3, #4]
 800827a:	68fa      	ldr	r2, [r7, #12]
 800827c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008280:	f043 0302 	orr.w	r3, r3, #2
 8008284:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008286:	2300      	movs	r3, #0
}
 8008288:	4618      	mov	r0, r3
 800828a:	3714      	adds	r7, #20
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr

08008294 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008294:	b480      	push	{r7}
 8008296:	b085      	sub	sp, #20
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	695b      	ldr	r3, [r3, #20]
 80082a0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	699b      	ldr	r3, [r3, #24]
 80082a6:	68fa      	ldr	r2, [r7, #12]
 80082a8:	4013      	ands	r3, r2
 80082aa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80082ac:	68fb      	ldr	r3, [r7, #12]
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3714      	adds	r7, #20
 80082b2:	46bd      	mov	sp, r7
 80082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b8:	4770      	bx	lr

080082ba <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80082ba:	b480      	push	{r7}
 80082bc:	b085      	sub	sp, #20
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082cc:	699b      	ldr	r3, [r3, #24]
 80082ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082d6:	69db      	ldr	r3, [r3, #28]
 80082d8:	68ba      	ldr	r2, [r7, #8]
 80082da:	4013      	ands	r3, r2
 80082dc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	0c1b      	lsrs	r3, r3, #16
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3714      	adds	r7, #20
 80082e6:	46bd      	mov	sp, r7
 80082e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ec:	4770      	bx	lr

080082ee <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80082ee:	b480      	push	{r7}
 80082f0:	b085      	sub	sp, #20
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008300:	699b      	ldr	r3, [r3, #24]
 8008302:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800830a:	69db      	ldr	r3, [r3, #28]
 800830c:	68ba      	ldr	r2, [r7, #8]
 800830e:	4013      	ands	r3, r2
 8008310:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	b29b      	uxth	r3, r3
}
 8008316:	4618      	mov	r0, r3
 8008318:	3714      	adds	r7, #20
 800831a:	46bd      	mov	sp, r7
 800831c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008320:	4770      	bx	lr

08008322 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008322:	b480      	push	{r7}
 8008324:	b085      	sub	sp, #20
 8008326:	af00      	add	r7, sp, #0
 8008328:	6078      	str	r0, [r7, #4]
 800832a:	460b      	mov	r3, r1
 800832c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008332:	78fb      	ldrb	r3, [r7, #3]
 8008334:	015a      	lsls	r2, r3, #5
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	4413      	add	r3, r2
 800833a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008348:	695b      	ldr	r3, [r3, #20]
 800834a:	68ba      	ldr	r2, [r7, #8]
 800834c:	4013      	ands	r3, r2
 800834e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008350:	68bb      	ldr	r3, [r7, #8]
}
 8008352:	4618      	mov	r0, r3
 8008354:	3714      	adds	r7, #20
 8008356:	46bd      	mov	sp, r7
 8008358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835c:	4770      	bx	lr

0800835e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800835e:	b480      	push	{r7}
 8008360:	b087      	sub	sp, #28
 8008362:	af00      	add	r7, sp, #0
 8008364:	6078      	str	r0, [r7, #4]
 8008366:	460b      	mov	r3, r1
 8008368:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008374:	691b      	ldr	r3, [r3, #16]
 8008376:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800837e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008380:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008382:	78fb      	ldrb	r3, [r7, #3]
 8008384:	f003 030f 	and.w	r3, r3, #15
 8008388:	68fa      	ldr	r2, [r7, #12]
 800838a:	fa22 f303 	lsr.w	r3, r2, r3
 800838e:	01db      	lsls	r3, r3, #7
 8008390:	b2db      	uxtb	r3, r3
 8008392:	693a      	ldr	r2, [r7, #16]
 8008394:	4313      	orrs	r3, r2
 8008396:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008398:	78fb      	ldrb	r3, [r7, #3]
 800839a:	015a      	lsls	r2, r3, #5
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	4413      	add	r3, r2
 80083a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083a4:	689b      	ldr	r3, [r3, #8]
 80083a6:	693a      	ldr	r2, [r7, #16]
 80083a8:	4013      	ands	r3, r2
 80083aa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80083ac:	68bb      	ldr	r3, [r7, #8]
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	371c      	adds	r7, #28
 80083b2:	46bd      	mov	sp, r7
 80083b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b8:	4770      	bx	lr

080083ba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80083ba:	b480      	push	{r7}
 80083bc:	b083      	sub	sp, #12
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	695b      	ldr	r3, [r3, #20]
 80083c6:	f003 0301 	and.w	r3, r3, #1
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	370c      	adds	r7, #12
 80083ce:	46bd      	mov	sp, r7
 80083d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d4:	4770      	bx	lr

080083d6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80083d6:	b480      	push	{r7}
 80083d8:	b085      	sub	sp, #20
 80083da:	af00      	add	r7, sp, #0
 80083dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	68fa      	ldr	r2, [r7, #12]
 80083ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80083f0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80083f4:	f023 0307 	bic.w	r3, r3, #7
 80083f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	68fa      	ldr	r2, [r7, #12]
 8008404:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008408:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800840c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800840e:	2300      	movs	r3, #0
}
 8008410:	4618      	mov	r0, r3
 8008412:	3714      	adds	r7, #20
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800841c:	b480      	push	{r7}
 800841e:	b087      	sub	sp, #28
 8008420:	af00      	add	r7, sp, #0
 8008422:	60f8      	str	r0, [r7, #12]
 8008424:	460b      	mov	r3, r1
 8008426:	607a      	str	r2, [r7, #4]
 8008428:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	333c      	adds	r3, #60	@ 0x3c
 8008432:	3304      	adds	r3, #4
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	4a26      	ldr	r2, [pc, #152]	@ (80084d4 <USB_EP0_OutStart+0xb8>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d90a      	bls.n	8008456 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800844c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008450:	d101      	bne.n	8008456 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008452:	2300      	movs	r3, #0
 8008454:	e037      	b.n	80084c6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800845c:	461a      	mov	r2, r3
 800845e:	2300      	movs	r3, #0
 8008460:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008468:	691b      	ldr	r3, [r3, #16]
 800846a:	697a      	ldr	r2, [r7, #20]
 800846c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008470:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008474:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800847c:	691b      	ldr	r3, [r3, #16]
 800847e:	697a      	ldr	r2, [r7, #20]
 8008480:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008484:	f043 0318 	orr.w	r3, r3, #24
 8008488:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008490:	691b      	ldr	r3, [r3, #16]
 8008492:	697a      	ldr	r2, [r7, #20]
 8008494:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008498:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800849c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800849e:	7afb      	ldrb	r3, [r7, #11]
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d10f      	bne.n	80084c4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084aa:	461a      	mov	r2, r3
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	697a      	ldr	r2, [r7, #20]
 80084ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80084be:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80084c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80084c4:	2300      	movs	r3, #0
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	371c      	adds	r7, #28
 80084ca:	46bd      	mov	sp, r7
 80084cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d0:	4770      	bx	lr
 80084d2:	bf00      	nop
 80084d4:	4f54300a 	.word	0x4f54300a

080084d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80084d8:	b480      	push	{r7}
 80084da:	b085      	sub	sp, #20
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80084e0:	2300      	movs	r3, #0
 80084e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	3301      	adds	r3, #1
 80084e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80084f0:	d901      	bls.n	80084f6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80084f2:	2303      	movs	r3, #3
 80084f4:	e022      	b.n	800853c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	691b      	ldr	r3, [r3, #16]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	daf2      	bge.n	80084e4 <USB_CoreReset+0xc>

  count = 10U;
 80084fe:	230a      	movs	r3, #10
 8008500:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8008502:	e002      	b.n	800850a <USB_CoreReset+0x32>
  {
    count--;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	3b01      	subs	r3, #1
 8008508:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d1f9      	bne.n	8008504 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	691b      	ldr	r3, [r3, #16]
 8008514:	f043 0201 	orr.w	r2, r3, #1
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	3301      	adds	r3, #1
 8008520:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008528:	d901      	bls.n	800852e <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800852a:	2303      	movs	r3, #3
 800852c:	e006      	b.n	800853c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	691b      	ldr	r3, [r3, #16]
 8008532:	f003 0301 	and.w	r3, r3, #1
 8008536:	2b01      	cmp	r3, #1
 8008538:	d0f0      	beq.n	800851c <USB_CoreReset+0x44>

  return HAL_OK;
 800853a:	2300      	movs	r3, #0
}
 800853c:	4618      	mov	r0, r3
 800853e:	3714      	adds	r7, #20
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr

08008548 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  USBD_COMPOSITE_Mount_Class();
 800854c:	f001 fc4c 	bl	8009de8 <USBD_COMPOSITE_Mount_Class>
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_HS) != USBD_OK)
  {
    Error_Handler();
  }
#else
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_FS) != USBD_OK)
 8008550:	2200      	movs	r2, #0
 8008552:	4917      	ldr	r1, [pc, #92]	@ (80085b0 <MX_USB_DEVICE_Init+0x68>)
 8008554:	4817      	ldr	r0, [pc, #92]	@ (80085b4 <MX_USB_DEVICE_Init+0x6c>)
 8008556:	f002 f86b 	bl	800a630 <USBD_Init>
 800855a:	4603      	mov	r3, r0
 800855c:	2b00      	cmp	r3, #0
 800855e:	d001      	beq.n	8008564 <MX_USB_DEVICE_Init+0x1c>
  {
    Error_Handler();
 8008560:	f7f8 fb66 	bl	8000c30 <Error_Handler>
  }
#endif
  if (USBD_RegisterClass(&hUsbDevice, &USBD_COMPOSITE) != USBD_OK)
 8008564:	4914      	ldr	r1, [pc, #80]	@ (80085b8 <MX_USB_DEVICE_Init+0x70>)
 8008566:	4813      	ldr	r0, [pc, #76]	@ (80085b4 <MX_USB_DEVICE_Init+0x6c>)
 8008568:	f002 f88e 	bl	800a688 <USBD_RegisterClass>
 800856c:	4603      	mov	r3, r0
 800856e:	2b00      	cmp	r3, #0
 8008570:	d001      	beq.n	8008576 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8008572:	f7f8 fb5d 	bl	8000c30 <Error_Handler>
  }
#if (USBD_USE_CDC_ACM == 1)
  if (USBD_CDC_ACM_RegisterInterface(&hUsbDevice, &USBD_CDC_ACM_fops) != USBD_OK)
 8008576:	4911      	ldr	r1, [pc, #68]	@ (80085bc <MX_USB_DEVICE_Init+0x74>)
 8008578:	480e      	ldr	r0, [pc, #56]	@ (80085b4 <MX_USB_DEVICE_Init+0x6c>)
 800857a:	f001 f90f 	bl	800979c <USBD_CDC_ACM_RegisterInterface>
 800857e:	4603      	mov	r3, r0
 8008580:	2b00      	cmp	r3, #0
 8008582:	d001      	beq.n	8008588 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8008584:	f7f8 fb54 	bl	8000c30 <Error_Handler>
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDevice, &USBD_CustomHID_fops) != USBD_OK)
 8008588:	490d      	ldr	r1, [pc, #52]	@ (80085c0 <MX_USB_DEVICE_Init+0x78>)
 800858a:	480a      	ldr	r0, [pc, #40]	@ (80085b4 <MX_USB_DEVICE_Init+0x6c>)
 800858c:	f002 f802 	bl	800a594 <USBD_CUSTOM_HID_RegisterInterface>
 8008590:	4603      	mov	r3, r0
 8008592:	2b00      	cmp	r3, #0
 8008594:	d001      	beq.n	800859a <MX_USB_DEVICE_Init+0x52>
  {
    Error_Handler();
 8008596:	f7f8 fb4b 	bl	8000c30 <Error_Handler>
  if (USBD_PRNT_RegisterInterface(&hUsbDevice, &USBD_PRNT_fops) != USBD_OK)
  {
    Error_Handler();
  }
#endif
  if (USBD_Start(&hUsbDevice) != USBD_OK)
 800859a:	4806      	ldr	r0, [pc, #24]	@ (80085b4 <MX_USB_DEVICE_Init+0x6c>)
 800859c:	f002 f8b2 	bl	800a704 <USBD_Start>
 80085a0:	4603      	mov	r3, r0
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d001      	beq.n	80085aa <MX_USB_DEVICE_Init+0x62>
  {
    Error_Handler();
 80085a6:	f7f8 fb43 	bl	8000c30 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80085aa:	bf00      	nop
 80085ac:	bd80      	pop	{r7, pc}
 80085ae:	bf00      	nop
 80085b0:	20000020 	.word	0x20000020
 80085b4:	20000b00 	.word	0x20000b00
 80085b8:	20000184 	.word	0x20000184
 80085bc:	2000000c 	.word	0x2000000c
 80085c0:	20000094 	.word	0x20000094

080085c4 <CDC_CH_To_UART_Handle>:
static int8_t CDC_Receive(uint8_t cdc_ch, uint8_t *pbuf, uint32_t *Len);
static int8_t CDC_TransmitCplt(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len, uint8_t epnum);

/* USER CODE BEGIN PRIVATE_FUNCTIONS_DECLARATION */
UART_HandleTypeDef *CDC_CH_To_UART_Handle(uint8_t cdc_ch)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b085      	sub	sp, #20
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	4603      	mov	r3, r0
 80085cc:	71fb      	strb	r3, [r7, #7]
  UART_HandleTypeDef *handle = NULL;
 80085ce:	2300      	movs	r3, #0
 80085d0:	60fb      	str	r3, [r7, #12]

  if (cdc_ch == 0)
 80085d2:	79fb      	ldrb	r3, [r7, #7]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d101      	bne.n	80085dc <CDC_CH_To_UART_Handle+0x18>
  {
    handle = &huart5;
 80085d8:	4b04      	ldr	r3, [pc, #16]	@ (80085ec <CDC_CH_To_UART_Handle+0x28>)
 80085da:	60fb      	str	r3, [r7, #12]
  else if (cdc_ch == 2)
  {
    handle = &huart3;
  }
#endif
  return handle;
 80085dc:	68fb      	ldr	r3, [r7, #12]
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3714      	adds	r7, #20
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr
 80085ea:	bf00      	nop
 80085ec:	20000510 	.word	0x20000510

080085f0 <UART_Handle_TO_CDC_CH>:

uint8_t UART_Handle_TO_CDC_CH(UART_HandleTypeDef *handle)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b085      	sub	sp, #20
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  uint8_t cdc_ch = 0;
 80085f8:	2300      	movs	r3, #0
 80085fa:	73fb      	strb	r3, [r7, #15]

  if (handle == &huart5)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	4a06      	ldr	r2, [pc, #24]	@ (8008618 <UART_Handle_TO_CDC_CH+0x28>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d101      	bne.n	8008608 <UART_Handle_TO_CDC_CH+0x18>
  {
    cdc_ch = 0;
 8008604:	2300      	movs	r3, #0
 8008606:	73fb      	strb	r3, [r7, #15]
  else if (handle == &huart3)
  {
    cdc_ch = 2;
  }
#endif
  return cdc_ch;
 8008608:	7bfb      	ldrb	r3, [r7, #15]
}
 800860a:	4618      	mov	r0, r3
 800860c:	3714      	adds	r7, #20
 800860e:	46bd      	mov	sp, r7
 8008610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008614:	4770      	bx	lr
 8008616:	bf00      	nop
 8008618:	20000510 	.word	0x20000510

0800861c <Change_UART_Setting>:
//
void Change_UART_Setting(uint8_t cdc_ch)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b086      	sub	sp, #24
 8008620:	af00      	add	r7, sp, #0
 8008622:	4603      	mov	r3, r0
 8008624:	71fb      	strb	r3, [r7, #7]
  UART_HandleTypeDef *handle = CDC_CH_To_UART_Handle(cdc_ch);
 8008626:	79fb      	ldrb	r3, [r7, #7]
 8008628:	4618      	mov	r0, r3
 800862a:	f7ff ffcb 	bl	80085c4 <CDC_CH_To_UART_Handle>
 800862e:	6178      	str	r0, [r7, #20]

  if (HAL_UART_DeInit(handle) != HAL_OK)
 8008630:	6978      	ldr	r0, [r7, #20]
 8008632:	f7fd fbf7 	bl	8005e24 <HAL_UART_DeInit>
 8008636:	4603      	mov	r3, r0
 8008638:	2b00      	cmp	r3, #0
 800863a:	d001      	beq.n	8008640 <Change_UART_Setting+0x24>
  {
    /* Initialization Error */
    Error_Handler();
 800863c:	f7f8 faf8 	bl	8000c30 <Error_Handler>
  }
  /* set the Stop bit */
  switch (Line_Coding[cdc_ch].format)
 8008640:	79fb      	ldrb	r3, [r7, #7]
 8008642:	4a5c      	ldr	r2, [pc, #368]	@ (80087b4 <Change_UART_Setting+0x198>)
 8008644:	00db      	lsls	r3, r3, #3
 8008646:	4413      	add	r3, r2
 8008648:	791b      	ldrb	r3, [r3, #4]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d002      	beq.n	8008654 <Change_UART_Setting+0x38>
 800864e:	2b02      	cmp	r3, #2
 8008650:	d004      	beq.n	800865c <Change_UART_Setting+0x40>
 8008652:	e008      	b.n	8008666 <Change_UART_Setting+0x4a>
  {
  case 0:
    handle->Init.StopBits = UART_STOPBITS_1;
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	2200      	movs	r2, #0
 8008658:	60da      	str	r2, [r3, #12]
    break;
 800865a:	e008      	b.n	800866e <Change_UART_Setting+0x52>
  case 2:
    handle->Init.StopBits = UART_STOPBITS_2;
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008662:	60da      	str	r2, [r3, #12]
    break;
 8008664:	e003      	b.n	800866e <Change_UART_Setting+0x52>
  default:
    handle->Init.StopBits = UART_STOPBITS_1;
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	2200      	movs	r2, #0
 800866a:	60da      	str	r2, [r3, #12]
    break;
 800866c:	bf00      	nop
  }

  /* set the parity bit*/
  switch (Line_Coding[cdc_ch].paritytype)
 800866e:	79fb      	ldrb	r3, [r7, #7]
 8008670:	4a50      	ldr	r2, [pc, #320]	@ (80087b4 <Change_UART_Setting+0x198>)
 8008672:	00db      	lsls	r3, r3, #3
 8008674:	4413      	add	r3, r2
 8008676:	795b      	ldrb	r3, [r3, #5]
 8008678:	2b02      	cmp	r3, #2
 800867a:	d00f      	beq.n	800869c <Change_UART_Setting+0x80>
 800867c:	2b02      	cmp	r3, #2
 800867e:	dc12      	bgt.n	80086a6 <Change_UART_Setting+0x8a>
 8008680:	2b00      	cmp	r3, #0
 8008682:	d002      	beq.n	800868a <Change_UART_Setting+0x6e>
 8008684:	2b01      	cmp	r3, #1
 8008686:	d004      	beq.n	8008692 <Change_UART_Setting+0x76>
 8008688:	e00d      	b.n	80086a6 <Change_UART_Setting+0x8a>
  {
  case 0:
    handle->Init.Parity = UART_PARITY_NONE;
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	2200      	movs	r2, #0
 800868e:	611a      	str	r2, [r3, #16]
    break;
 8008690:	e00d      	b.n	80086ae <Change_UART_Setting+0x92>
  case 1:
    handle->Init.Parity = UART_PARITY_ODD;
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8008698:	611a      	str	r2, [r3, #16]
    break;
 800869a:	e008      	b.n	80086ae <Change_UART_Setting+0x92>
  case 2:
    handle->Init.Parity = UART_PARITY_EVEN;
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80086a2:	611a      	str	r2, [r3, #16]
    break;
 80086a4:	e003      	b.n	80086ae <Change_UART_Setting+0x92>
  default:
    handle->Init.Parity = UART_PARITY_NONE;
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	2200      	movs	r2, #0
 80086aa:	611a      	str	r2, [r3, #16]
    break;
 80086ac:	bf00      	nop
  }

  /*set the data type : only 8bits and 9bits is supported */
  switch (Line_Coding[cdc_ch].datatype)
 80086ae:	79fb      	ldrb	r3, [r7, #7]
 80086b0:	4a40      	ldr	r2, [pc, #256]	@ (80087b4 <Change_UART_Setting+0x198>)
 80086b2:	00db      	lsls	r3, r3, #3
 80086b4:	4413      	add	r3, r2
 80086b6:	799b      	ldrb	r3, [r3, #6]
 80086b8:	2b07      	cmp	r3, #7
 80086ba:	d002      	beq.n	80086c2 <Change_UART_Setting+0xa6>
 80086bc:	2b08      	cmp	r3, #8
 80086be:	d004      	beq.n	80086ca <Change_UART_Setting+0xae>
 80086c0:	e010      	b.n	80086e4 <Change_UART_Setting+0xc8>
  {
  case 0x07:
    /* With this configuration a parity (Even or Odd) must be set */
    handle->Init.WordLength = UART_WORDLENGTH_8B;
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	2200      	movs	r2, #0
 80086c6:	609a      	str	r2, [r3, #8]
    break;
 80086c8:	e010      	b.n	80086ec <Change_UART_Setting+0xd0>
  case 0x08:
    if (handle->Init.Parity == UART_PARITY_NONE)
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	691b      	ldr	r3, [r3, #16]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d103      	bne.n	80086da <Change_UART_Setting+0xbe>
    {
      handle->Init.WordLength = UART_WORDLENGTH_8B;
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	2200      	movs	r2, #0
 80086d6:	609a      	str	r2, [r3, #8]
    else
    {
      handle->Init.WordLength = UART_WORDLENGTH_9B;
    }

    break;
 80086d8:	e008      	b.n	80086ec <Change_UART_Setting+0xd0>
      handle->Init.WordLength = UART_WORDLENGTH_9B;
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80086e0:	609a      	str	r2, [r3, #8]
    break;
 80086e2:	e003      	b.n	80086ec <Change_UART_Setting+0xd0>
  default:
    handle->Init.WordLength = UART_WORDLENGTH_8B;
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	2200      	movs	r2, #0
 80086e8:	609a      	str	r2, [r3, #8]
    break;
 80086ea:	bf00      	nop
  }

  if (Line_Coding[cdc_ch].bitrate == 0)
 80086ec:	79fb      	ldrb	r3, [r7, #7]
 80086ee:	4a31      	ldr	r2, [pc, #196]	@ (80087b4 <Change_UART_Setting+0x198>)
 80086f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d105      	bne.n	8008704 <Change_UART_Setting+0xe8>
  {
    Line_Coding[cdc_ch].bitrate = 115200;
 80086f8:	79fb      	ldrb	r3, [r7, #7]
 80086fa:	4a2e      	ldr	r2, [pc, #184]	@ (80087b4 <Change_UART_Setting+0x198>)
 80086fc:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8008700:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
  }

  handle->Init.BaudRate = Line_Coding[cdc_ch].bitrate;
 8008704:	79fb      	ldrb	r3, [r7, #7]
 8008706:	4a2b      	ldr	r2, [pc, #172]	@ (80087b4 <Change_UART_Setting+0x198>)
 8008708:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	605a      	str	r2, [r3, #4]
  handle->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	2200      	movs	r2, #0
 8008714:	619a      	str	r2, [r3, #24]
  handle->Init.Mode = UART_MODE_TX_RX;
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	220c      	movs	r2, #12
 800871a:	615a      	str	r2, [r3, #20]
  handle->Init.OverSampling = UART_OVERSAMPLING_16;
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	2200      	movs	r2, #0
 8008720:	61da      	str	r2, [r3, #28]

  if (HAL_UART_Init(handle) != HAL_OK)
 8008722:	6978      	ldr	r0, [r7, #20]
 8008724:	f7fd fb2e 	bl	8005d84 <HAL_UART_Init>
 8008728:	4603      	mov	r3, r0
 800872a:	2b00      	cmp	r3, #0
 800872c:	d001      	beq.n	8008732 <Change_UART_Setting+0x116>
  {
    /* Initialization Error */
    Error_Handler();
 800872e:	f7f8 fa7f 	bl	8000c30 <Error_Handler>
  }

  /** rx for uart and tx buffer of usb */
  if (HAL_UART_Receive_IT(handle, TX_Buffer[cdc_ch], 1) != HAL_OK)
 8008732:	79fb      	ldrb	r3, [r7, #7]
 8008734:	019b      	lsls	r3, r3, #6
 8008736:	4a20      	ldr	r2, [pc, #128]	@ (80087b8 <Change_UART_Setting+0x19c>)
 8008738:	4413      	add	r3, r2
 800873a:	2201      	movs	r2, #1
 800873c:	4619      	mov	r1, r3
 800873e:	6978      	ldr	r0, [r7, #20]
 8008740:	f7fd fc2d 	bl	8005f9e <HAL_UART_Receive_IT>
 8008744:	4603      	mov	r3, r0
 8008746:	2b00      	cmp	r3, #0
 8008748:	d001      	beq.n	800874e <Change_UART_Setting+0x132>
  {
    /* Transfer error in reception process */
    Error_Handler();
 800874a:	f7f8 fa71 	bl	8000c30 <Error_Handler>
  }
  __HAL_UART_CLEAR_OREFLAG(handle);
 800874e:	2300      	movs	r3, #0
 8008750:	613b      	str	r3, [r7, #16]
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	613b      	str	r3, [r7, #16]
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	613b      	str	r3, [r7, #16]
 8008762:	693b      	ldr	r3, [r7, #16]
  __HAL_UART_CLEAR_NEFLAG(handle);
 8008764:	2300      	movs	r3, #0
 8008766:	60fb      	str	r3, [r7, #12]
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	60fb      	str	r3, [r7, #12]
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	60fb      	str	r3, [r7, #12]
 8008778:	68fb      	ldr	r3, [r7, #12]
  __HAL_UART_CLEAR_FEFLAG(handle);
 800877a:	2300      	movs	r3, #0
 800877c:	60bb      	str	r3, [r7, #8]
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	60bb      	str	r3, [r7, #8]
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	60bb      	str	r3, [r7, #8]
 800878e:	68bb      	ldr	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8008790:	f3bf 8f4f 	dsb	sy
}
 8008794:	bf00      	nop
  __DSB();  // Ensure instruction completion
  Write_Index[cdc_ch] = 0;
 8008796:	79fb      	ldrb	r3, [r7, #7]
 8008798:	4a08      	ldr	r2, [pc, #32]	@ (80087bc <Change_UART_Setting+0x1a0>)
 800879a:	2100      	movs	r1, #0
 800879c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  Read_Index[cdc_ch] = 0;
 80087a0:	79fb      	ldrb	r3, [r7, #7]
 80087a2:	4a07      	ldr	r2, [pc, #28]	@ (80087c0 <Change_UART_Setting+0x1a4>)
 80087a4:	2100      	movs	r1, #0
 80087a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80087aa:	bf00      	nop
 80087ac:	3718      	adds	r7, #24
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}
 80087b2:	bf00      	nop
 80087b4:	20000e9c 	.word	0x20000e9c
 80087b8:	20000e5c 	.word	0x20000e5c
 80087bc:	20000ea4 	.word	0x20000ea4
 80087c0:	20000ea8 	.word	0x20000ea8

080087c4 <CDC_Init>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init(uint8_t cdc_ch)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b082      	sub	sp, #8
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	4603      	mov	r3, r0
 80087cc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */

  /* ##-1- Set Application Buffers */
  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, RX_Buffer[cdc_ch]);
 80087ce:	79fb      	ldrb	r3, [r7, #7]
 80087d0:	019b      	lsls	r3, r3, #6
 80087d2:	4a0d      	ldr	r2, [pc, #52]	@ (8008808 <CDC_Init+0x44>)
 80087d4:	441a      	add	r2, r3
 80087d6:	79fb      	ldrb	r3, [r7, #7]
 80087d8:	490c      	ldr	r1, [pc, #48]	@ (800880c <CDC_Init+0x48>)
 80087da:	4618      	mov	r0, r3
 80087dc:	f001 f818 	bl	8009810 <USBD_CDC_SetRxBuffer>

  //  /*##-2- Start the TIM Base generation in interrupt mode ####################*/
  //  /* Start Channel1 */
    if ((HAL_TIM_Base_Start_IT(&htim1) != HAL_OK )||(HAL_TIM_Base_Start_IT(&htim2) != HAL_OK ))
 80087e0:	480b      	ldr	r0, [pc, #44]	@ (8008810 <CDC_Init+0x4c>)
 80087e2:	f7fc fe81 	bl	80054e8 <HAL_TIM_Base_Start_IT>
 80087e6:	4603      	mov	r3, r0
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d105      	bne.n	80087f8 <CDC_Init+0x34>
 80087ec:	4809      	ldr	r0, [pc, #36]	@ (8008814 <CDC_Init+0x50>)
 80087ee:	f7fc fe7b 	bl	80054e8 <HAL_TIM_Base_Start_IT>
 80087f2:	4603      	mov	r3, r0
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d001      	beq.n	80087fc <CDC_Init+0x38>
    {
      /* Starting Error */
    	//HAL_TIM_Base_Stop_IT
      Error_Handler();
 80087f8:	f7f8 fa1a 	bl	8000c30 <Error_Handler>
    }

  return (USBD_OK);
 80087fc:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3708      	adds	r7, #8
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}
 8008806:	bf00      	nop
 8008808:	20000e1c 	.word	0x20000e1c
 800880c:	20000b00 	.word	0x20000b00
 8008810:	200003f0 	.word	0x200003f0
 8008814:	20000438 	.word	0x20000438

08008818 <CDC_DeInit>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit(uint8_t cdc_ch)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b082      	sub	sp, #8
 800881c:	af00      	add	r7, sp, #0
 800881e:	4603      	mov	r3, r0
 8008820:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  /* DeInitialize the UART peripheral */
    if (HAL_UART_DeInit(CDC_CH_To_UART_Handle(cdc_ch)) != HAL_OK)
 8008822:	79fb      	ldrb	r3, [r7, #7]
 8008824:	4618      	mov	r0, r3
 8008826:	f7ff fecd 	bl	80085c4 <CDC_CH_To_UART_Handle>
 800882a:	4603      	mov	r3, r0
 800882c:	4618      	mov	r0, r3
 800882e:	f7fd faf9 	bl	8005e24 <HAL_UART_DeInit>
 8008832:	4603      	mov	r3, r0
 8008834:	2b00      	cmp	r3, #0
 8008836:	d001      	beq.n	800883c <CDC_DeInit+0x24>
    {
      /* Initialization Error */
      Error_Handler();
 8008838:	f7f8 f9fa 	bl	8000c30 <Error_Handler>
    }
    if ((HAL_TIM_Base_Stop_IT(&htim1) != HAL_OK )||(HAL_TIM_Base_Stop_IT(&htim2) != HAL_OK ))
 800883c:	4809      	ldr	r0, [pc, #36]	@ (8008864 <CDC_DeInit+0x4c>)
 800883e:	f7fc fec3 	bl	80055c8 <HAL_TIM_Base_Stop_IT>
 8008842:	4603      	mov	r3, r0
 8008844:	2b00      	cmp	r3, #0
 8008846:	d105      	bne.n	8008854 <CDC_DeInit+0x3c>
 8008848:	4807      	ldr	r0, [pc, #28]	@ (8008868 <CDC_DeInit+0x50>)
 800884a:	f7fc febd 	bl	80055c8 <HAL_TIM_Base_Stop_IT>
 800884e:	4603      	mov	r3, r0
 8008850:	2b00      	cmp	r3, #0
 8008852:	d001      	beq.n	8008858 <CDC_DeInit+0x40>
        {
          /* Starting Error */
          Error_Handler();
 8008854:	f7f8 f9ec 	bl	8000c30 <Error_Handler>
        }
  return (USBD_OK);
 8008858:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800885a:	4618      	mov	r0, r3
 800885c:	3708      	adds	r7, #8
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}
 8008862:	bf00      	nop
 8008864:	200003f0 	.word	0x200003f0
 8008868:	20000438 	.word	0x20000438

0800886c <CDC_Control>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control(uint8_t cdc_ch, uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b082      	sub	sp, #8
 8008870:	af00      	add	r7, sp, #0
 8008872:	603a      	str	r2, [r7, #0]
 8008874:	461a      	mov	r2, r3
 8008876:	4603      	mov	r3, r0
 8008878:	71fb      	strb	r3, [r7, #7]
 800887a:	460b      	mov	r3, r1
 800887c:	71bb      	strb	r3, [r7, #6]
 800887e:	4613      	mov	r3, r2
 8008880:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd)
 8008882:	79bb      	ldrb	r3, [r7, #6]
 8008884:	2b23      	cmp	r3, #35	@ 0x23
 8008886:	f200 80ba 	bhi.w	80089fe <CDC_Control+0x192>
 800888a:	a201      	add	r2, pc, #4	@ (adr r2, 8008890 <CDC_Control+0x24>)
 800888c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008890:	080089ff 	.word	0x080089ff
 8008894:	080089ff 	.word	0x080089ff
 8008898:	080089ff 	.word	0x080089ff
 800889c:	080089ff 	.word	0x080089ff
 80088a0:	080089ff 	.word	0x080089ff
 80088a4:	080089ff 	.word	0x080089ff
 80088a8:	080089ff 	.word	0x080089ff
 80088ac:	080089ff 	.word	0x080089ff
 80088b0:	080089ff 	.word	0x080089ff
 80088b4:	080089ff 	.word	0x080089ff
 80088b8:	080089ff 	.word	0x080089ff
 80088bc:	080089ff 	.word	0x080089ff
 80088c0:	080089ff 	.word	0x080089ff
 80088c4:	080089ff 	.word	0x080089ff
 80088c8:	080089ff 	.word	0x080089ff
 80088cc:	080089ff 	.word	0x080089ff
 80088d0:	080089ff 	.word	0x080089ff
 80088d4:	080089ff 	.word	0x080089ff
 80088d8:	080089ff 	.word	0x080089ff
 80088dc:	080089ff 	.word	0x080089ff
 80088e0:	080089ff 	.word	0x080089ff
 80088e4:	080089ff 	.word	0x080089ff
 80088e8:	080089ff 	.word	0x080089ff
 80088ec:	080089ff 	.word	0x080089ff
 80088f0:	080089ff 	.word	0x080089ff
 80088f4:	080089ff 	.word	0x080089ff
 80088f8:	080089ff 	.word	0x080089ff
 80088fc:	080089ff 	.word	0x080089ff
 8008900:	080089ff 	.word	0x080089ff
 8008904:	080089ff 	.word	0x080089ff
 8008908:	080089ff 	.word	0x080089ff
 800890c:	080089ff 	.word	0x080089ff
 8008910:	08008921 	.word	0x08008921
 8008914:	08008989 	.word	0x08008989
 8008918:	080089ff 	.word	0x080089ff
 800891c:	080089ff 	.word	0x080089ff
    /*                                        3 - Mark                             */
    /*                                        4 - Space                            */
    /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
    /*******************************************************************************/
  case CDC_SET_LINE_CODING:
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	781b      	ldrb	r3, [r3, #0]
 8008924:	461a      	mov	r2, r3
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	3301      	adds	r3, #1
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	021b      	lsls	r3, r3, #8
 800892e:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	3302      	adds	r3, #2
 8008934:	781b      	ldrb	r3, [r3, #0]
 8008936:	041b      	lsls	r3, r3, #16
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8008938:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	3303      	adds	r3, #3
 800893e:	781b      	ldrb	r3, [r3, #0]
 8008940:	061b      	lsls	r3, r3, #24
 8008942:	431a      	orrs	r2, r3
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8008944:	79fb      	ldrb	r3, [r7, #7]
 8008946:	4611      	mov	r1, r2
 8008948:	4a30      	ldr	r2, [pc, #192]	@ (8008a0c <CDC_Control+0x1a0>)
 800894a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    Line_Coding[cdc_ch].format = pbuf[4];
 800894e:	79fb      	ldrb	r3, [r7, #7]
 8008950:	683a      	ldr	r2, [r7, #0]
 8008952:	7911      	ldrb	r1, [r2, #4]
 8008954:	4a2d      	ldr	r2, [pc, #180]	@ (8008a0c <CDC_Control+0x1a0>)
 8008956:	00db      	lsls	r3, r3, #3
 8008958:	4413      	add	r3, r2
 800895a:	460a      	mov	r2, r1
 800895c:	711a      	strb	r2, [r3, #4]
    Line_Coding[cdc_ch].paritytype = pbuf[5];
 800895e:	79fb      	ldrb	r3, [r7, #7]
 8008960:	683a      	ldr	r2, [r7, #0]
 8008962:	7951      	ldrb	r1, [r2, #5]
 8008964:	4a29      	ldr	r2, [pc, #164]	@ (8008a0c <CDC_Control+0x1a0>)
 8008966:	00db      	lsls	r3, r3, #3
 8008968:	4413      	add	r3, r2
 800896a:	460a      	mov	r2, r1
 800896c:	715a      	strb	r2, [r3, #5]
    Line_Coding[cdc_ch].datatype = pbuf[6];
 800896e:	79fb      	ldrb	r3, [r7, #7]
 8008970:	683a      	ldr	r2, [r7, #0]
 8008972:	7991      	ldrb	r1, [r2, #6]
 8008974:	4a25      	ldr	r2, [pc, #148]	@ (8008a0c <CDC_Control+0x1a0>)
 8008976:	00db      	lsls	r3, r3, #3
 8008978:	4413      	add	r3, r2
 800897a:	460a      	mov	r2, r1
 800897c:	719a      	strb	r2, [r3, #6]

    Change_UART_Setting(cdc_ch);
 800897e:	79fb      	ldrb	r3, [r7, #7]
 8008980:	4618      	mov	r0, r3
 8008982:	f7ff fe4b 	bl	800861c <Change_UART_Setting>
    break;
 8008986:	e03b      	b.n	8008a00 <CDC_Control+0x194>

  case CDC_GET_LINE_CODING:
    pbuf[0] = (uint8_t)(Line_Coding[cdc_ch].bitrate);
 8008988:	79fb      	ldrb	r3, [r7, #7]
 800898a:	4a20      	ldr	r2, [pc, #128]	@ (8008a0c <CDC_Control+0x1a0>)
 800898c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008990:	b2da      	uxtb	r2, r3
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	701a      	strb	r2, [r3, #0]
    pbuf[1] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 8);
 8008996:	79fb      	ldrb	r3, [r7, #7]
 8008998:	4a1c      	ldr	r2, [pc, #112]	@ (8008a0c <CDC_Control+0x1a0>)
 800899a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800899e:	0a1a      	lsrs	r2, r3, #8
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	3301      	adds	r3, #1
 80089a4:	b2d2      	uxtb	r2, r2
 80089a6:	701a      	strb	r2, [r3, #0]
    pbuf[2] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 16);
 80089a8:	79fb      	ldrb	r3, [r7, #7]
 80089aa:	4a18      	ldr	r2, [pc, #96]	@ (8008a0c <CDC_Control+0x1a0>)
 80089ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80089b0:	0c1a      	lsrs	r2, r3, #16
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	3302      	adds	r3, #2
 80089b6:	b2d2      	uxtb	r2, r2
 80089b8:	701a      	strb	r2, [r3, #0]
    pbuf[3] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 24);
 80089ba:	79fb      	ldrb	r3, [r7, #7]
 80089bc:	4a13      	ldr	r2, [pc, #76]	@ (8008a0c <CDC_Control+0x1a0>)
 80089be:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80089c2:	0e1a      	lsrs	r2, r3, #24
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	3303      	adds	r3, #3
 80089c8:	b2d2      	uxtb	r2, r2
 80089ca:	701a      	strb	r2, [r3, #0]
    pbuf[4] = Line_Coding[cdc_ch].format;
 80089cc:	79fb      	ldrb	r3, [r7, #7]
 80089ce:	683a      	ldr	r2, [r7, #0]
 80089d0:	3204      	adds	r2, #4
 80089d2:	490e      	ldr	r1, [pc, #56]	@ (8008a0c <CDC_Control+0x1a0>)
 80089d4:	00db      	lsls	r3, r3, #3
 80089d6:	440b      	add	r3, r1
 80089d8:	791b      	ldrb	r3, [r3, #4]
 80089da:	7013      	strb	r3, [r2, #0]
    pbuf[5] = Line_Coding[cdc_ch].paritytype;
 80089dc:	79fb      	ldrb	r3, [r7, #7]
 80089de:	683a      	ldr	r2, [r7, #0]
 80089e0:	3205      	adds	r2, #5
 80089e2:	490a      	ldr	r1, [pc, #40]	@ (8008a0c <CDC_Control+0x1a0>)
 80089e4:	00db      	lsls	r3, r3, #3
 80089e6:	440b      	add	r3, r1
 80089e8:	795b      	ldrb	r3, [r3, #5]
 80089ea:	7013      	strb	r3, [r2, #0]
    pbuf[6] = Line_Coding[cdc_ch].datatype;
 80089ec:	79fb      	ldrb	r3, [r7, #7]
 80089ee:	683a      	ldr	r2, [r7, #0]
 80089f0:	3206      	adds	r2, #6
 80089f2:	4906      	ldr	r1, [pc, #24]	@ (8008a0c <CDC_Control+0x1a0>)
 80089f4:	00db      	lsls	r3, r3, #3
 80089f6:	440b      	add	r3, r1
 80089f8:	799b      	ldrb	r3, [r3, #6]
 80089fa:	7013      	strb	r3, [r2, #0]
    break;
 80089fc:	e000      	b.n	8008a00 <CDC_Control+0x194>
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 80089fe:	bf00      	nop
  }

  return (USBD_OK);
 8008a00:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3708      	adds	r7, #8
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
 8008a0a:	bf00      	nop
 8008a0c:	20000e9c 	.word	0x20000e9c

08008a10 <CDC_Receive>:
//  USBD_CDC_ReceivePacket(cdc_ch, &hUsbDevice);
//  return (USBD_OK);
//  /* USER CODE END 6 */
//}
static int8_t CDC_Receive(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len)
{
 8008a10:	b5b0      	push	{r4, r5, r7, lr}
 8008a12:	b086      	sub	sp, #24
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	4603      	mov	r3, r0
 8008a18:	60b9      	str	r1, [r7, #8]
 8008a1a:	607a      	str	r2, [r7, #4]
 8008a1c:	73fb      	strb	r3, [r7, #15]
  for (uint32_t i = 0; i < *Len; i++)
 8008a1e:	2300      	movs	r3, #0
 8008a20:	617b      	str	r3, [r7, #20]
 8008a22:	e021      	b.n	8008a68 <CDC_Receive+0x58>
  {
    CDC_RX_Buffer[cdc_ch][CDC_RX_WriteIndex[cdc_ch]++] = Buf[i];
 8008a24:	68ba      	ldr	r2, [r7, #8]
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	18d0      	adds	r0, r2, r3
 8008a2a:	7bf9      	ldrb	r1, [r7, #15]
 8008a2c:	7bfa      	ldrb	r2, [r7, #15]
 8008a2e:	4b19      	ldr	r3, [pc, #100]	@ (8008a94 <CDC_Receive+0x84>)
 8008a30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a34:	1c5c      	adds	r4, r3, #1
 8008a36:	4d17      	ldr	r5, [pc, #92]	@ (8008a94 <CDC_Receive+0x84>)
 8008a38:	f845 4022 	str.w	r4, [r5, r2, lsl #2]
 8008a3c:	7804      	ldrb	r4, [r0, #0]
 8008a3e:	4816      	ldr	r0, [pc, #88]	@ (8008a98 <CDC_Receive+0x88>)
 8008a40:	030a      	lsls	r2, r1, #12
 8008a42:	4402      	add	r2, r0
 8008a44:	4413      	add	r3, r2
 8008a46:	4622      	mov	r2, r4
 8008a48:	701a      	strb	r2, [r3, #0]
    if (CDC_RX_WriteIndex[cdc_ch] >= CDC_RX_BUFFER_SIZE)
 8008a4a:	7bfb      	ldrb	r3, [r7, #15]
 8008a4c:	4a11      	ldr	r2, [pc, #68]	@ (8008a94 <CDC_Receive+0x84>)
 8008a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a56:	d304      	bcc.n	8008a62 <CDC_Receive+0x52>
      CDC_RX_WriteIndex[cdc_ch] = 0;
 8008a58:	7bfb      	ldrb	r3, [r7, #15]
 8008a5a:	4a0e      	ldr	r2, [pc, #56]	@ (8008a94 <CDC_Receive+0x84>)
 8008a5c:	2100      	movs	r1, #0
 8008a5e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (uint32_t i = 0; i < *Len; i++)
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	3301      	adds	r3, #1
 8008a66:	617b      	str	r3, [r7, #20]
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	697a      	ldr	r2, [r7, #20]
 8008a6e:	429a      	cmp	r2, r3
 8008a70:	d3d8      	bcc.n	8008a24 <CDC_Receive+0x14>
  }

  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, Buf);
 8008a72:	7bfb      	ldrb	r3, [r7, #15]
 8008a74:	68ba      	ldr	r2, [r7, #8]
 8008a76:	4909      	ldr	r1, [pc, #36]	@ (8008a9c <CDC_Receive+0x8c>)
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f000 fec9 	bl	8009810 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(cdc_ch, &hUsbDevice);
 8008a7e:	7bfb      	ldrb	r3, [r7, #15]
 8008a80:	4906      	ldr	r1, [pc, #24]	@ (8008a9c <CDC_Receive+0x8c>)
 8008a82:	4618      	mov	r0, r3
 8008a84:	f000 ff24 	bl	80098d0 <USBD_CDC_ReceivePacket>
  return USBD_OK;
 8008a88:	2300      	movs	r3, #0
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3718      	adds	r7, #24
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bdb0      	pop	{r4, r5, r7, pc}
 8008a92:	bf00      	nop
 8008a94:	20001eac 	.word	0x20001eac
 8008a98:	20000eac 	.word	0x20000eac
 8008a9c:	20000b00 	.word	0x20000b00

08008aa0 <CDC_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b085      	sub	sp, #20
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	60b9      	str	r1, [r7, #8]
 8008aa8:	607a      	str	r2, [r7, #4]
 8008aaa:	461a      	mov	r2, r3
 8008aac:	4603      	mov	r3, r0
 8008aae:	73fb      	strb	r3, [r7, #15]
 8008ab0:	4613      	mov	r3, r2
 8008ab2:	73bb      	strb	r3, [r7, #14]
  return (USBD_OK);
 8008ab4:	2300      	movs	r3, #0
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3714      	adds	r7, #20
 8008aba:	46bd      	mov	sp, r7
 8008abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac0:	4770      	bx	lr
	...

08008ac4 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b084      	sub	sp, #16
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  uint8_t ch = UART_Handle_TO_CDC_CH(huart);
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f7ff fd8f 	bl	80085f0 <UART_Handle_TO_CDC_CH>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	73fb      	strb	r3, [r7, #15]
  if (ch >= NUMBER_OF_CDC) return;
 8008ad6:	7bfb      	ldrb	r3, [r7, #15]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d11c      	bne.n	8008b16 <HAL_UART_TxCpltCallback+0x52>

  // Cập nhật ReadIndex sau khi truyền xong
  if (CDC_RX_ReadIndex[ch] > CDC_RX_WriteIndex[ch])
 8008adc:	7bfb      	ldrb	r3, [r7, #15]
 8008ade:	4a10      	ldr	r2, [pc, #64]	@ (8008b20 <HAL_UART_TxCpltCallback+0x5c>)
 8008ae0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008ae4:	7bfb      	ldrb	r3, [r7, #15]
 8008ae6:	490f      	ldr	r1, [pc, #60]	@ (8008b24 <HAL_UART_TxCpltCallback+0x60>)
 8008ae8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008aec:	429a      	cmp	r2, r3
 8008aee:	d905      	bls.n	8008afc <HAL_UART_TxCpltCallback+0x38>
  {
    CDC_RX_ReadIndex[ch] = 0;
 8008af0:	7bfb      	ldrb	r3, [r7, #15]
 8008af2:	4a0b      	ldr	r2, [pc, #44]	@ (8008b20 <HAL_UART_TxCpltCallback+0x5c>)
 8008af4:	2100      	movs	r1, #0
 8008af6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8008afa:	e007      	b.n	8008b0c <HAL_UART_TxCpltCallback+0x48>
  }
  else
  {
    CDC_RX_ReadIndex[ch] = CDC_RX_WriteIndex[ch];
 8008afc:	7bfa      	ldrb	r2, [r7, #15]
 8008afe:	7bfb      	ldrb	r3, [r7, #15]
 8008b00:	4908      	ldr	r1, [pc, #32]	@ (8008b24 <HAL_UART_TxCpltCallback+0x60>)
 8008b02:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008b06:	4906      	ldr	r1, [pc, #24]	@ (8008b20 <HAL_UART_TxCpltCallback+0x5c>)
 8008b08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }

  uart_tx_busy[ch] = 0;
 8008b0c:	7bfb      	ldrb	r3, [r7, #15]
 8008b0e:	4a06      	ldr	r2, [pc, #24]	@ (8008b28 <HAL_UART_TxCpltCallback+0x64>)
 8008b10:	2100      	movs	r1, #0
 8008b12:	54d1      	strb	r1, [r2, r3]
 8008b14:	e000      	b.n	8008b18 <HAL_UART_TxCpltCallback+0x54>
  if (ch >= NUMBER_OF_CDC) return;
 8008b16:	bf00      	nop
}
 8008b18:	3710      	adds	r7, #16
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	bf00      	nop
 8008b20:	20001eb0 	.word	0x20001eb0
 8008b24:	20001eac 	.word	0x20001eac
 8008b28:	20001eb4 	.word	0x20001eb4

08008b2c <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b088      	sub	sp, #32
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	4a63      	ldr	r2, [pc, #396]	@ (8008cc4 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d15e      	bne.n	8008bfa <HAL_TIM_PeriodElapsedCallback+0xce>
	{
	  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	77fb      	strb	r3, [r7, #31]
 8008b40:	e058      	b.n	8008bf4 <HAL_TIM_PeriodElapsedCallback+0xc8>
	  {
	    if (CDC_RX_ReadIndex[i] != CDC_RX_WriteIndex[i])
 8008b42:	7ffb      	ldrb	r3, [r7, #31]
 8008b44:	4a60      	ldr	r2, [pc, #384]	@ (8008cc8 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8008b46:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008b4a:	7ffb      	ldrb	r3, [r7, #31]
 8008b4c:	495f      	ldr	r1, [pc, #380]	@ (8008ccc <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8008b4e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d04b      	beq.n	8008bee <HAL_TIM_PeriodElapsedCallback+0xc2>
	    {
	      uint32_t buffptr = CDC_RX_ReadIndex[i];
 8008b56:	7ffb      	ldrb	r3, [r7, #31]
 8008b58:	4a5b      	ldr	r2, [pc, #364]	@ (8008cc8 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8008b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b5e:	60fb      	str	r3, [r7, #12]
	      uint32_t buffsize;

	      if (CDC_RX_ReadIndex[i] > CDC_RX_WriteIndex[i])
 8008b60:	7ffb      	ldrb	r3, [r7, #31]
 8008b62:	4a59      	ldr	r2, [pc, #356]	@ (8008cc8 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8008b64:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008b68:	7ffb      	ldrb	r3, [r7, #31]
 8008b6a:	4958      	ldr	r1, [pc, #352]	@ (8008ccc <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8008b6c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d907      	bls.n	8008b84 <HAL_TIM_PeriodElapsedCallback+0x58>
	        buffsize = CDC_RX_BUFFER_SIZE - CDC_RX_ReadIndex[i];
 8008b74:	7ffb      	ldrb	r3, [r7, #31]
 8008b76:	4a54      	ldr	r2, [pc, #336]	@ (8008cc8 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8008b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b7c:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8008b80:	61bb      	str	r3, [r7, #24]
 8008b82:	e009      	b.n	8008b98 <HAL_TIM_PeriodElapsedCallback+0x6c>
	      else
	        buffsize = CDC_RX_WriteIndex[i] - CDC_RX_ReadIndex[i];
 8008b84:	7ffb      	ldrb	r3, [r7, #31]
 8008b86:	4a51      	ldr	r2, [pc, #324]	@ (8008ccc <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8008b88:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008b8c:	7ffb      	ldrb	r3, [r7, #31]
 8008b8e:	494e      	ldr	r1, [pc, #312]	@ (8008cc8 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8008b90:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008b94:	1ad3      	subs	r3, r2, r3
 8008b96:	61bb      	str	r3, [r7, #24]

	      // Chặn kích thước nếu quá lớn (optional)
	      if (buffsize > 64) buffsize = 64;
 8008b98:	69bb      	ldr	r3, [r7, #24]
 8008b9a:	2b40      	cmp	r3, #64	@ 0x40
 8008b9c:	d901      	bls.n	8008ba2 <HAL_TIM_PeriodElapsedCallback+0x76>
 8008b9e:	2340      	movs	r3, #64	@ 0x40
 8008ba0:	61bb      	str	r3, [r7, #24]

	      HAL_UART_Transmit(CDC_CH_To_UART_Handle(i), &CDC_RX_Buffer[i][buffptr], buffsize, HAL_MAX_DELAY);
 8008ba2:	7ffb      	ldrb	r3, [r7, #31]
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f7ff fd0d 	bl	80085c4 <CDC_CH_To_UART_Handle>
 8008baa:	7ffb      	ldrb	r3, [r7, #31]
 8008bac:	031a      	lsls	r2, r3, #12
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	4413      	add	r3, r2
 8008bb2:	4a47      	ldr	r2, [pc, #284]	@ (8008cd0 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8008bb4:	1899      	adds	r1, r3, r2
 8008bb6:	69bb      	ldr	r3, [r7, #24]
 8008bb8:	b29a      	uxth	r2, r3
 8008bba:	f04f 33ff 	mov.w	r3, #4294967295
 8008bbe:	f7fd f963 	bl	8005e88 <HAL_UART_Transmit>

	      CDC_RX_ReadIndex[i] += buffsize;
 8008bc2:	7ffb      	ldrb	r3, [r7, #31]
 8008bc4:	4a40      	ldr	r2, [pc, #256]	@ (8008cc8 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8008bc6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008bca:	7ffb      	ldrb	r3, [r7, #31]
 8008bcc:	69ba      	ldr	r2, [r7, #24]
 8008bce:	440a      	add	r2, r1
 8008bd0:	493d      	ldr	r1, [pc, #244]	@ (8008cc8 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8008bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	      if (CDC_RX_ReadIndex[i] >= CDC_RX_BUFFER_SIZE)
 8008bd6:	7ffb      	ldrb	r3, [r7, #31]
 8008bd8:	4a3b      	ldr	r2, [pc, #236]	@ (8008cc8 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8008bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008be2:	d304      	bcc.n	8008bee <HAL_TIM_PeriodElapsedCallback+0xc2>
	        CDC_RX_ReadIndex[i] = 0;
 8008be4:	7ffb      	ldrb	r3, [r7, #31]
 8008be6:	4a38      	ldr	r2, [pc, #224]	@ (8008cc8 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8008be8:	2100      	movs	r1, #0
 8008bea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8008bee:	7ffb      	ldrb	r3, [r7, #31]
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	77fb      	strb	r3, [r7, #31]
 8008bf4:	7ffb      	ldrb	r3, [r7, #31]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d0a3      	beq.n	8008b42 <HAL_TIM_PeriodElapsedCallback+0x16>
	    }
	  }
	}

if (htim == &htim1){
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	4a35      	ldr	r2, [pc, #212]	@ (8008cd4 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d15b      	bne.n	8008cba <HAL_TIM_PeriodElapsedCallback+0x18e>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8008c02:	2300      	movs	r3, #0
 8008c04:	75fb      	strb	r3, [r7, #23]
 8008c06:	e055      	b.n	8008cb4 <HAL_TIM_PeriodElapsedCallback+0x188>
  {
    uint32_t buffptr;
    uint32_t buffsize;

    if (Read_Index[i] != Write_Index[i])
 8008c08:	7dfb      	ldrb	r3, [r7, #23]
 8008c0a:	4a33      	ldr	r2, [pc, #204]	@ (8008cd8 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8008c0c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008c10:	7dfb      	ldrb	r3, [r7, #23]
 8008c12:	4932      	ldr	r1, [pc, #200]	@ (8008cdc <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8008c14:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d048      	beq.n	8008cae <HAL_TIM_PeriodElapsedCallback+0x182>
    {
      if (Read_Index[i] > Write_Index[i]) /* Rollback */
 8008c1c:	7dfb      	ldrb	r3, [r7, #23]
 8008c1e:	4a2e      	ldr	r2, [pc, #184]	@ (8008cd8 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8008c20:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008c24:	7dfb      	ldrb	r3, [r7, #23]
 8008c26:	492d      	ldr	r1, [pc, #180]	@ (8008cdc <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8008c28:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d907      	bls.n	8008c40 <HAL_TIM_PeriodElapsedCallback+0x114>
      {
        buffsize = APP_TX_DATA_SIZE - Read_Index[i];
 8008c30:	7dfb      	ldrb	r3, [r7, #23]
 8008c32:	4a29      	ldr	r2, [pc, #164]	@ (8008cd8 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8008c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c38:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8008c3c:	613b      	str	r3, [r7, #16]
 8008c3e:	e009      	b.n	8008c54 <HAL_TIM_PeriodElapsedCallback+0x128>
      }
      else
      {
        buffsize = Write_Index[i] - Read_Index[i];
 8008c40:	7dfb      	ldrb	r3, [r7, #23]
 8008c42:	4a26      	ldr	r2, [pc, #152]	@ (8008cdc <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8008c44:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008c48:	7dfb      	ldrb	r3, [r7, #23]
 8008c4a:	4923      	ldr	r1, [pc, #140]	@ (8008cd8 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8008c4c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008c50:	1ad3      	subs	r3, r2, r3
 8008c52:	613b      	str	r3, [r7, #16]
      }

      buffptr = Read_Index[i];
 8008c54:	7dfb      	ldrb	r3, [r7, #23]
 8008c56:	4a20      	ldr	r2, [pc, #128]	@ (8008cd8 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8008c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c5c:	60bb      	str	r3, [r7, #8]

      USBD_CDC_SetTxBuffer(i, &hUsbDevice, &TX_Buffer[i][buffptr], buffsize);
 8008c5e:	7dfb      	ldrb	r3, [r7, #23]
 8008c60:	019a      	lsls	r2, r3, #6
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	4413      	add	r3, r2
 8008c66:	4a1e      	ldr	r2, [pc, #120]	@ (8008ce0 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8008c68:	441a      	add	r2, r3
 8008c6a:	7df8      	ldrb	r0, [r7, #23]
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	491d      	ldr	r1, [pc, #116]	@ (8008ce4 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8008c70:	f000 fdaa 	bl	80097c8 <USBD_CDC_SetTxBuffer>

      if (USBD_CDC_TransmitPacket(i, &hUsbDevice) == USBD_OK)
 8008c74:	7dfb      	ldrb	r3, [r7, #23]
 8008c76:	491b      	ldr	r1, [pc, #108]	@ (8008ce4 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f000 fde7 	bl	800984c <USBD_CDC_TransmitPacket>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d114      	bne.n	8008cae <HAL_TIM_PeriodElapsedCallback+0x182>
      {
        Read_Index[i] += buffsize;
 8008c84:	7dfb      	ldrb	r3, [r7, #23]
 8008c86:	4a14      	ldr	r2, [pc, #80]	@ (8008cd8 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8008c88:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008c8c:	7dfb      	ldrb	r3, [r7, #23]
 8008c8e:	693a      	ldr	r2, [r7, #16]
 8008c90:	440a      	add	r2, r1
 8008c92:	4911      	ldr	r1, [pc, #68]	@ (8008cd8 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8008c94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if (Read_Index[i] == APP_RX_DATA_SIZE)
 8008c98:	7dfb      	ldrb	r3, [r7, #23]
 8008c9a:	4a0f      	ldr	r2, [pc, #60]	@ (8008cd8 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8008c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ca0:	2b40      	cmp	r3, #64	@ 0x40
 8008ca2:	d104      	bne.n	8008cae <HAL_TIM_PeriodElapsedCallback+0x182>
        {
          Read_Index[i] = 0;
 8008ca4:	7dfb      	ldrb	r3, [r7, #23]
 8008ca6:	4a0c      	ldr	r2, [pc, #48]	@ (8008cd8 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8008ca8:	2100      	movs	r1, #0
 8008caa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8008cae:	7dfb      	ldrb	r3, [r7, #23]
 8008cb0:	3301      	adds	r3, #1
 8008cb2:	75fb      	strb	r3, [r7, #23]
 8008cb4:	7dfb      	ldrb	r3, [r7, #23]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d0a6      	beq.n	8008c08 <HAL_TIM_PeriodElapsedCallback+0xdc>
      }
    }
  }
	}

}
 8008cba:	bf00      	nop
 8008cbc:	3720      	adds	r7, #32
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}
 8008cc2:	bf00      	nop
 8008cc4:	20000438 	.word	0x20000438
 8008cc8:	20001eb0 	.word	0x20001eb0
 8008ccc:	20001eac 	.word	0x20001eac
 8008cd0:	20000eac 	.word	0x20000eac
 8008cd4:	200003f0 	.word	0x200003f0
 8008cd8:	20000ea8 	.word	0x20000ea8
 8008cdc:	20000ea4 	.word	0x20000ea4
 8008ce0:	20000e5c 	.word	0x20000e5c
 8008ce4:	20000b00 	.word	0x20000b00

08008ce8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b084      	sub	sp, #16
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  uint8_t cdc_ch = UART_Handle_TO_CDC_CH(huart);
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f7ff fc7d 	bl	80085f0 <UART_Handle_TO_CDC_CH>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	73fb      	strb	r3, [r7, #15]
  //CDC_Transmit(cdc_ch, (TX_Buffer[cdc_ch] + Write_Index[cdc_ch]), 1);
  /* Increment Index for buffer writing */
  Write_Index[cdc_ch]++;
 8008cfa:	7bfb      	ldrb	r3, [r7, #15]
 8008cfc:	4a11      	ldr	r2, [pc, #68]	@ (8008d44 <HAL_UART_RxCpltCallback+0x5c>)
 8008cfe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008d02:	3201      	adds	r2, #1
 8008d04:	490f      	ldr	r1, [pc, #60]	@ (8008d44 <HAL_UART_RxCpltCallback+0x5c>)
 8008d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  /* To avoid buffer overflow */
  if (Write_Index[cdc_ch] == APP_RX_DATA_SIZE)
 8008d0a:	7bfb      	ldrb	r3, [r7, #15]
 8008d0c:	4a0d      	ldr	r2, [pc, #52]	@ (8008d44 <HAL_UART_RxCpltCallback+0x5c>)
 8008d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d12:	2b40      	cmp	r3, #64	@ 0x40
 8008d14:	d104      	bne.n	8008d20 <HAL_UART_RxCpltCallback+0x38>
  {
    Write_Index[cdc_ch] = 0;
 8008d16:	7bfb      	ldrb	r3, [r7, #15]
 8008d18:	4a0a      	ldr	r2, [pc, #40]	@ (8008d44 <HAL_UART_RxCpltCallback+0x5c>)
 8008d1a:	2100      	movs	r1, #0
 8008d1c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  }

  /* Start another reception: provide the buffer pointer with offset and the buffer size */
  HAL_UART_Receive_IT(huart, (TX_Buffer[cdc_ch] + Write_Index[cdc_ch]), 1);
 8008d20:	7bfb      	ldrb	r3, [r7, #15]
 8008d22:	019b      	lsls	r3, r3, #6
 8008d24:	4a08      	ldr	r2, [pc, #32]	@ (8008d48 <HAL_UART_RxCpltCallback+0x60>)
 8008d26:	441a      	add	r2, r3
 8008d28:	7bfb      	ldrb	r3, [r7, #15]
 8008d2a:	4906      	ldr	r1, [pc, #24]	@ (8008d44 <HAL_UART_RxCpltCallback+0x5c>)
 8008d2c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008d30:	4413      	add	r3, r2
 8008d32:	2201      	movs	r2, #1
 8008d34:	4619      	mov	r1, r3
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f7fd f931 	bl	8005f9e <HAL_UART_Receive_IT>
}
 8008d3c:	bf00      	nop
 8008d3e:	3710      	adds	r7, #16
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}
 8008d44:	20000ea4 	.word	0x20000ea4
 8008d48:	20000e5c 	.word	0x20000e5c

08008d4c <USBD_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b083      	sub	sp, #12
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	4603      	mov	r3, r0
 8008d54:	6039      	str	r1, [r7, #0]
 8008d56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_DeviceDesc);
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	2212      	movs	r2, #18
 8008d5c:	801a      	strh	r2, [r3, #0]
  return USBD_DeviceDesc;
 8008d5e:	4b03      	ldr	r3, [pc, #12]	@ (8008d6c <USBD_DeviceDescriptor+0x20>)
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	370c      	adds	r7, #12
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr
 8008d6c:	2000003c 	.word	0x2000003c

08008d70 <USBD_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b083      	sub	sp, #12
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	4603      	mov	r3, r0
 8008d78:	6039      	str	r1, [r7, #0]
 8008d7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	2204      	movs	r2, #4
 8008d80:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008d82:	4b03      	ldr	r3, [pc, #12]	@ (8008d90 <USBD_LangIDStrDescriptor+0x20>)
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	370c      	adds	r7, #12
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8e:	4770      	bx	lr
 8008d90:	20000050 	.word	0x20000050

08008d94 <USBD_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b082      	sub	sp, #8
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	6039      	str	r1, [r7, #0]
 8008d9e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008da0:	79fb      	ldrb	r3, [r7, #7]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d105      	bne.n	8008db2 <USBD_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8008da6:	683a      	ldr	r2, [r7, #0]
 8008da8:	4907      	ldr	r1, [pc, #28]	@ (8008dc8 <USBD_ProductStrDescriptor+0x34>)
 8008daa:	4808      	ldr	r0, [pc, #32]	@ (8008dcc <USBD_ProductStrDescriptor+0x38>)
 8008dac:	f002 fce9 	bl	800b782 <USBD_GetString>
 8008db0:	e004      	b.n	8008dbc <USBD_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8008db2:	683a      	ldr	r2, [r7, #0]
 8008db4:	4904      	ldr	r1, [pc, #16]	@ (8008dc8 <USBD_ProductStrDescriptor+0x34>)
 8008db6:	4805      	ldr	r0, [pc, #20]	@ (8008dcc <USBD_ProductStrDescriptor+0x38>)
 8008db8:	f002 fce3 	bl	800b782 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008dbc:	4b02      	ldr	r3, [pc, #8]	@ (8008dc8 <USBD_ProductStrDescriptor+0x34>)
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3708      	adds	r7, #8
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}
 8008dc6:	bf00      	nop
 8008dc8:	20001eb8 	.word	0x20001eb8
 8008dcc:	0800c884 	.word	0x0800c884

08008dd0 <USBD_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b082      	sub	sp, #8
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	6039      	str	r1, [r7, #0]
 8008dda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008ddc:	683a      	ldr	r2, [r7, #0]
 8008dde:	4904      	ldr	r1, [pc, #16]	@ (8008df0 <USBD_ManufacturerStrDescriptor+0x20>)
 8008de0:	4804      	ldr	r0, [pc, #16]	@ (8008df4 <USBD_ManufacturerStrDescriptor+0x24>)
 8008de2:	f002 fcce 	bl	800b782 <USBD_GetString>
  return USBD_StrDesc;
 8008de6:	4b02      	ldr	r3, [pc, #8]	@ (8008df0 <USBD_ManufacturerStrDescriptor+0x20>)
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3708      	adds	r7, #8
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}
 8008df0:	20001eb8 	.word	0x20001eb8
 8008df4:	0800c894 	.word	0x0800c894

08008df8 <USBD_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b082      	sub	sp, #8
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	4603      	mov	r3, r0
 8008e00:	6039      	str	r1, [r7, #0]
 8008e02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	221a      	movs	r2, #26
 8008e08:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008e0a:	f000 f843 	bl	8008e94 <Get_SerialNum>
  /* USER CODE BEGIN USBD_SerialStrDescriptor */

  /* USER CODE END USBD_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8008e0e:	4b02      	ldr	r3, [pc, #8]	@ (8008e18 <USBD_SerialStrDescriptor+0x20>)
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3708      	adds	r7, #8
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}
 8008e18:	20000054 	.word	0x20000054

08008e1c <USBD_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b082      	sub	sp, #8
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	4603      	mov	r3, r0
 8008e24:	6039      	str	r1, [r7, #0]
 8008e26:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008e28:	79fb      	ldrb	r3, [r7, #7]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d105      	bne.n	8008e3a <USBD_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8008e2e:	683a      	ldr	r2, [r7, #0]
 8008e30:	4907      	ldr	r1, [pc, #28]	@ (8008e50 <USBD_ConfigStrDescriptor+0x34>)
 8008e32:	4808      	ldr	r0, [pc, #32]	@ (8008e54 <USBD_ConfigStrDescriptor+0x38>)
 8008e34:	f002 fca5 	bl	800b782 <USBD_GetString>
 8008e38:	e004      	b.n	8008e44 <USBD_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8008e3a:	683a      	ldr	r2, [r7, #0]
 8008e3c:	4904      	ldr	r1, [pc, #16]	@ (8008e50 <USBD_ConfigStrDescriptor+0x34>)
 8008e3e:	4805      	ldr	r0, [pc, #20]	@ (8008e54 <USBD_ConfigStrDescriptor+0x38>)
 8008e40:	f002 fc9f 	bl	800b782 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e44:	4b02      	ldr	r3, [pc, #8]	@ (8008e50 <USBD_ConfigStrDescriptor+0x34>)
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3708      	adds	r7, #8
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}
 8008e4e:	bf00      	nop
 8008e50:	20001eb8 	.word	0x20001eb8
 8008e54:	0800c89c 	.word	0x0800c89c

08008e58 <USBD_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b082      	sub	sp, #8
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	4603      	mov	r3, r0
 8008e60:	6039      	str	r1, [r7, #0]
 8008e62:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008e64:	79fb      	ldrb	r3, [r7, #7]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d105      	bne.n	8008e76 <USBD_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008e6a:	683a      	ldr	r2, [r7, #0]
 8008e6c:	4907      	ldr	r1, [pc, #28]	@ (8008e8c <USBD_InterfaceStrDescriptor+0x34>)
 8008e6e:	4808      	ldr	r0, [pc, #32]	@ (8008e90 <USBD_InterfaceStrDescriptor+0x38>)
 8008e70:	f002 fc87 	bl	800b782 <USBD_GetString>
 8008e74:	e004      	b.n	8008e80 <USBD_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008e76:	683a      	ldr	r2, [r7, #0]
 8008e78:	4904      	ldr	r1, [pc, #16]	@ (8008e8c <USBD_InterfaceStrDescriptor+0x34>)
 8008e7a:	4805      	ldr	r0, [pc, #20]	@ (8008e90 <USBD_InterfaceStrDescriptor+0x38>)
 8008e7c:	f002 fc81 	bl	800b782 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e80:	4b02      	ldr	r3, [pc, #8]	@ (8008e8c <USBD_InterfaceStrDescriptor+0x34>)
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3708      	adds	r7, #8
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}
 8008e8a:	bf00      	nop
 8008e8c:	20001eb8 	.word	0x20001eb8
 8008e90:	0800c8ac 	.word	0x0800c8ac

08008e94 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b084      	sub	sp, #16
 8008e98:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008e9a:	4b0f      	ldr	r3, [pc, #60]	@ (8008ed8 <Get_SerialNum+0x44>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008ea0:	4b0e      	ldr	r3, [pc, #56]	@ (8008edc <Get_SerialNum+0x48>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8008ee0 <Get_SerialNum+0x4c>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008eac:	68fa      	ldr	r2, [r7, #12]
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	4413      	add	r3, r2
 8008eb2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d009      	beq.n	8008ece <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008eba:	2208      	movs	r2, #8
 8008ebc:	4909      	ldr	r1, [pc, #36]	@ (8008ee4 <Get_SerialNum+0x50>)
 8008ebe:	68f8      	ldr	r0, [r7, #12]
 8008ec0:	f000 f814 	bl	8008eec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008ec4:	2204      	movs	r2, #4
 8008ec6:	4908      	ldr	r1, [pc, #32]	@ (8008ee8 <Get_SerialNum+0x54>)
 8008ec8:	68b8      	ldr	r0, [r7, #8]
 8008eca:	f000 f80f 	bl	8008eec <IntToUnicode>
  }
}
 8008ece:	bf00      	nop
 8008ed0:	3710      	adds	r7, #16
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}
 8008ed6:	bf00      	nop
 8008ed8:	1fff7a10 	.word	0x1fff7a10
 8008edc:	1fff7a14 	.word	0x1fff7a14
 8008ee0:	1fff7a18 	.word	0x1fff7a18
 8008ee4:	20000056 	.word	0x20000056
 8008ee8:	20000066 	.word	0x20000066

08008eec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b087      	sub	sp, #28
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	60f8      	str	r0, [r7, #12]
 8008ef4:	60b9      	str	r1, [r7, #8]
 8008ef6:	4613      	mov	r3, r2
 8008ef8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008efa:	2300      	movs	r3, #0
 8008efc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008efe:	2300      	movs	r3, #0
 8008f00:	75fb      	strb	r3, [r7, #23]
 8008f02:	e027      	b.n	8008f54 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	0f1b      	lsrs	r3, r3, #28
 8008f08:	2b09      	cmp	r3, #9
 8008f0a:	d80b      	bhi.n	8008f24 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	0f1b      	lsrs	r3, r3, #28
 8008f10:	b2da      	uxtb	r2, r3
 8008f12:	7dfb      	ldrb	r3, [r7, #23]
 8008f14:	005b      	lsls	r3, r3, #1
 8008f16:	4619      	mov	r1, r3
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	440b      	add	r3, r1
 8008f1c:	3230      	adds	r2, #48	@ 0x30
 8008f1e:	b2d2      	uxtb	r2, r2
 8008f20:	701a      	strb	r2, [r3, #0]
 8008f22:	e00a      	b.n	8008f3a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	0f1b      	lsrs	r3, r3, #28
 8008f28:	b2da      	uxtb	r2, r3
 8008f2a:	7dfb      	ldrb	r3, [r7, #23]
 8008f2c:	005b      	lsls	r3, r3, #1
 8008f2e:	4619      	mov	r1, r3
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	440b      	add	r3, r1
 8008f34:	3237      	adds	r2, #55	@ 0x37
 8008f36:	b2d2      	uxtb	r2, r2
 8008f38:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	011b      	lsls	r3, r3, #4
 8008f3e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008f40:	7dfb      	ldrb	r3, [r7, #23]
 8008f42:	005b      	lsls	r3, r3, #1
 8008f44:	3301      	adds	r3, #1
 8008f46:	68ba      	ldr	r2, [r7, #8]
 8008f48:	4413      	add	r3, r2
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008f4e:	7dfb      	ldrb	r3, [r7, #23]
 8008f50:	3301      	adds	r3, #1
 8008f52:	75fb      	strb	r3, [r7, #23]
 8008f54:	7dfa      	ldrb	r2, [r7, #23]
 8008f56:	79fb      	ldrb	r3, [r7, #7]
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d3d3      	bcc.n	8008f04 <IntToUnicode+0x18>
  }
}
 8008f5c:	bf00      	nop
 8008f5e:	bf00      	nop
 8008f60:	371c      	adds	r7, #28
 8008f62:	46bd      	mov	sp, r7
 8008f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f68:	4770      	bx	lr

08008f6a <CUSTOM_HID_Init>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init(void)
{
 8008f6a:	b480      	push	{r7}
 8008f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008f6e:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	46bd      	mov	sp, r7
 8008f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f78:	4770      	bx	lr

08008f7a <CUSTOM_HID_DeInit>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit(void)
{
 8008f7a:	b480      	push	{r7}
 8008f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8008f7e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	46bd      	mov	sp, r7
 8008f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f88:	4770      	bx	lr

08008f8a <CUSTOM_HID_OutEvent>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent(uint8_t *data, uint16_t len)
{
 8008f8a:	b580      	push	{r7, lr}
 8008f8c:	b082      	sub	sp, #8
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	6078      	str	r0, [r7, #4]
 8008f92:	460b      	mov	r3, r1
 8008f94:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN 6 */
	HID_Frame_Write(data, len);
 8008f96:	887b      	ldrh	r3, [r7, #2]
 8008f98:	4619      	mov	r1, r3
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f000 f806 	bl	8008fac <HID_Frame_Write>
  //memcpy(buffer, state, 0x40);
  //USBD_CUSTOM_HID_SendReport(&hUsbDevice, (uint8_t *)buffer, 0x40);
  return (USBD_OK);
 8008fa0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3708      	adds	r7, #8
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}
	...

08008fac <HID_Frame_Write>:

/* USER CODE BEGIN 7 */
//Ghi từng gói vào FIFO
void HID_Frame_Write(uint8_t *data, uint16_t len) {
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b084      	sub	sp, #16
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	460b      	mov	r3, r1
 8008fb6:	807b      	strh	r3, [r7, #2]
    if (len > HID_FRAME_SIZE) return;
 8008fb8:	887b      	ldrh	r3, [r7, #2]
 8008fba:	2b40      	cmp	r3, #64	@ 0x40
 8008fbc:	d824      	bhi.n	8009008 <HID_Frame_Write+0x5c>

    uint8_t next_head = (hid_frame_fifo.head + 1) % HID_FRAME_BUFFER_SIZE;
 8008fbe:	4b14      	ldr	r3, [pc, #80]	@ (8009010 <HID_Frame_Write+0x64>)
 8008fc0:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008fc4:	b2db      	uxtb	r3, r3
 8008fc6:	3301      	adds	r3, #1
 8008fc8:	425a      	negs	r2, r3
 8008fca:	f003 0307 	and.w	r3, r3, #7
 8008fce:	f002 0207 	and.w	r2, r2, #7
 8008fd2:	bf58      	it	pl
 8008fd4:	4253      	negpl	r3, r2
 8008fd6:	73fb      	strb	r3, [r7, #15]
    if (next_head != hid_frame_fifo.tail) {
 8008fd8:	4b0d      	ldr	r3, [pc, #52]	@ (8009010 <HID_Frame_Write+0x64>)
 8008fda:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	7bfa      	ldrb	r2, [r7, #15]
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	d011      	beq.n	800900a <HID_Frame_Write+0x5e>
        memcpy(hid_frame_fifo.frame[hid_frame_fifo.head], data, len);
 8008fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8009010 <HID_Frame_Write+0x64>)
 8008fe8:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008fec:	b2db      	uxtb	r3, r3
 8008fee:	019b      	lsls	r3, r3, #6
 8008ff0:	4a07      	ldr	r2, [pc, #28]	@ (8009010 <HID_Frame_Write+0x64>)
 8008ff2:	4413      	add	r3, r2
 8008ff4:	887a      	ldrh	r2, [r7, #2]
 8008ff6:	6879      	ldr	r1, [r7, #4]
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f002 ffed 	bl	800bfd8 <memcpy>
        hid_frame_fifo.head = next_head;
 8008ffe:	4a04      	ldr	r2, [pc, #16]	@ (8009010 <HID_Frame_Write+0x64>)
 8009000:	7bfb      	ldrb	r3, [r7, #15]
 8009002:	f882 3200 	strb.w	r3, [r2, #512]	@ 0x200
 8009006:	e000      	b.n	800900a <HID_Frame_Write+0x5e>
    if (len > HID_FRAME_SIZE) return;
 8009008:	bf00      	nop
    } else {
        // FIFO đầy → có thể ghi log hoặc bỏ qua
    }
}
 800900a:	3710      	adds	r7, #16
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}
 8009010:	200020b8 	.word	0x200020b8

08009014 <HID_Frame_Read>:
int HID_Frame_Read(uint8_t *dest_buf) {
 8009014:	b580      	push	{r7, lr}
 8009016:	b082      	sub	sp, #8
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
    if (hid_frame_fifo.head == hid_frame_fifo.tail) {
 800901c:	4b16      	ldr	r3, [pc, #88]	@ (8009078 <HID_Frame_Read+0x64>)
 800901e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009022:	b2da      	uxtb	r2, r3
 8009024:	4b14      	ldr	r3, [pc, #80]	@ (8009078 <HID_Frame_Read+0x64>)
 8009026:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800902a:	b2db      	uxtb	r3, r3
 800902c:	429a      	cmp	r2, r3
 800902e:	d101      	bne.n	8009034 <HID_Frame_Read+0x20>
        return 0;  // Không có frame
 8009030:	2300      	movs	r3, #0
 8009032:	e01c      	b.n	800906e <HID_Frame_Read+0x5a>
    }

    memcpy(dest_buf, hid_frame_fifo.frame[hid_frame_fifo.tail], HID_FRAME_SIZE);
 8009034:	4b10      	ldr	r3, [pc, #64]	@ (8009078 <HID_Frame_Read+0x64>)
 8009036:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800903a:	b2db      	uxtb	r3, r3
 800903c:	019b      	lsls	r3, r3, #6
 800903e:	4a0e      	ldr	r2, [pc, #56]	@ (8009078 <HID_Frame_Read+0x64>)
 8009040:	4413      	add	r3, r2
 8009042:	2240      	movs	r2, #64	@ 0x40
 8009044:	4619      	mov	r1, r3
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f002 ffc6 	bl	800bfd8 <memcpy>
    hid_frame_fifo.tail = (hid_frame_fifo.tail + 1) % HID_FRAME_BUFFER_SIZE;
 800904c:	4b0a      	ldr	r3, [pc, #40]	@ (8009078 <HID_Frame_Read+0x64>)
 800904e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8009052:	b2db      	uxtb	r3, r3
 8009054:	3301      	adds	r3, #1
 8009056:	425a      	negs	r2, r3
 8009058:	f003 0307 	and.w	r3, r3, #7
 800905c:	f002 0207 	and.w	r2, r2, #7
 8009060:	bf58      	it	pl
 8009062:	4253      	negpl	r3, r2
 8009064:	b2da      	uxtb	r2, r3
 8009066:	4b04      	ldr	r3, [pc, #16]	@ (8009078 <HID_Frame_Read+0x64>)
 8009068:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
    return 1;
 800906c:	2301      	movs	r3, #1
}
 800906e:	4618      	mov	r0, r3
 8009070:	3708      	adds	r7, #8
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
 8009076:	bf00      	nop
 8009078:	200020b8 	.word	0x200020b8

0800907c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b084      	sub	sp, #16
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	460b      	mov	r3, r1
 8009086:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8009088:	2300      	movs	r3, #0
 800908a:	60bb      	str	r3, [r7, #8]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800908c:	2300      	movs	r3, #0
 800908e:	73fb      	strb	r3, [r7, #15]
 8009090:	e0c6      	b.n	8009220 <USBD_CDC_Init+0x1a4>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 8009092:	7bfb      	ldrb	r3, [r7, #15]
 8009094:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009098:	fb02 f303 	mul.w	r3, r2, r3
 800909c:	4a65      	ldr	r2, [pc, #404]	@ (8009234 <USBD_CDC_Init+0x1b8>)
 800909e:	4413      	add	r3, r2
 80090a0:	60bb      	str	r3, [r7, #8]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	7c1b      	ldrb	r3, [r3, #16]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d13d      	bne.n	8009126 <USBD_CDC_Init+0xaa>
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 80090aa:	7bfb      	ldrb	r3, [r7, #15]
 80090ac:	4a62      	ldr	r2, [pc, #392]	@ (8009238 <USBD_CDC_Init+0x1bc>)
 80090ae:	5cd1      	ldrb	r1, [r2, r3]
 80090b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80090b4:	2202      	movs	r2, #2
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f002 fdd5 	bl	800bc66 <USBD_LL_OpenEP>
                           CDC_DATA_HS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 80090bc:	7bfb      	ldrb	r3, [r7, #15]
 80090be:	4a5e      	ldr	r2, [pc, #376]	@ (8009238 <USBD_CDC_Init+0x1bc>)
 80090c0:	5cd3      	ldrb	r3, [r2, r3]
 80090c2:	f003 020f 	and.w	r2, r3, #15
 80090c6:	6879      	ldr	r1, [r7, #4]
 80090c8:	4613      	mov	r3, r2
 80090ca:	009b      	lsls	r3, r3, #2
 80090cc:	4413      	add	r3, r2
 80090ce:	009b      	lsls	r3, r3, #2
 80090d0:	440b      	add	r3, r1
 80090d2:	3324      	adds	r3, #36	@ 0x24
 80090d4:	2201      	movs	r2, #1
 80090d6:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 80090d8:	7bfb      	ldrb	r3, [r7, #15]
 80090da:	4a58      	ldr	r2, [pc, #352]	@ (800923c <USBD_CDC_Init+0x1c0>)
 80090dc:	5cd1      	ldrb	r1, [r2, r3]
 80090de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80090e2:	2202      	movs	r2, #2
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f002 fdbe 	bl	800bc66 <USBD_LL_OpenEP>
                           CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 80090ea:	7bfb      	ldrb	r3, [r7, #15]
 80090ec:	4a53      	ldr	r2, [pc, #332]	@ (800923c <USBD_CDC_Init+0x1c0>)
 80090ee:	5cd3      	ldrb	r3, [r2, r3]
 80090f0:	f003 020f 	and.w	r2, r3, #15
 80090f4:	6879      	ldr	r1, [r7, #4]
 80090f6:	4613      	mov	r3, r2
 80090f8:	009b      	lsls	r3, r3, #2
 80090fa:	4413      	add	r3, r2
 80090fc:	009b      	lsls	r3, r3, #2
 80090fe:	440b      	add	r3, r1
 8009100:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009104:	2201      	movs	r2, #1
 8009106:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009108:	7bfb      	ldrb	r3, [r7, #15]
 800910a:	4a4d      	ldr	r2, [pc, #308]	@ (8009240 <USBD_CDC_Init+0x1c4>)
 800910c:	5cd3      	ldrb	r3, [r2, r3]
 800910e:	f003 020f 	and.w	r2, r3, #15
 8009112:	6879      	ldr	r1, [r7, #4]
 8009114:	4613      	mov	r3, r2
 8009116:	009b      	lsls	r3, r3, #2
 8009118:	4413      	add	r3, r2
 800911a:	009b      	lsls	r3, r3, #2
 800911c:	440b      	add	r3, r1
 800911e:	3326      	adds	r3, #38	@ 0x26
 8009120:	2210      	movs	r2, #16
 8009122:	801a      	strh	r2, [r3, #0]
 8009124:	e03a      	b.n	800919c <USBD_CDC_Init+0x120>
    }
    else
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 8009126:	7bfb      	ldrb	r3, [r7, #15]
 8009128:	4a43      	ldr	r2, [pc, #268]	@ (8009238 <USBD_CDC_Init+0x1bc>)
 800912a:	5cd1      	ldrb	r1, [r2, r3]
 800912c:	2340      	movs	r3, #64	@ 0x40
 800912e:	2202      	movs	r2, #2
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f002 fd98 	bl	800bc66 <USBD_LL_OpenEP>
                           CDC_DATA_FS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 8009136:	7bfb      	ldrb	r3, [r7, #15]
 8009138:	4a3f      	ldr	r2, [pc, #252]	@ (8009238 <USBD_CDC_Init+0x1bc>)
 800913a:	5cd3      	ldrb	r3, [r2, r3]
 800913c:	f003 020f 	and.w	r2, r3, #15
 8009140:	6879      	ldr	r1, [r7, #4]
 8009142:	4613      	mov	r3, r2
 8009144:	009b      	lsls	r3, r3, #2
 8009146:	4413      	add	r3, r2
 8009148:	009b      	lsls	r3, r3, #2
 800914a:	440b      	add	r3, r1
 800914c:	3324      	adds	r3, #36	@ 0x24
 800914e:	2201      	movs	r2, #1
 8009150:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 8009152:	7bfb      	ldrb	r3, [r7, #15]
 8009154:	4a39      	ldr	r2, [pc, #228]	@ (800923c <USBD_CDC_Init+0x1c0>)
 8009156:	5cd1      	ldrb	r1, [r2, r3]
 8009158:	2340      	movs	r3, #64	@ 0x40
 800915a:	2202      	movs	r2, #2
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f002 fd82 	bl	800bc66 <USBD_LL_OpenEP>
                           CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 8009162:	7bfb      	ldrb	r3, [r7, #15]
 8009164:	4a35      	ldr	r2, [pc, #212]	@ (800923c <USBD_CDC_Init+0x1c0>)
 8009166:	5cd3      	ldrb	r3, [r2, r3]
 8009168:	f003 020f 	and.w	r2, r3, #15
 800916c:	6879      	ldr	r1, [r7, #4]
 800916e:	4613      	mov	r3, r2
 8009170:	009b      	lsls	r3, r3, #2
 8009172:	4413      	add	r3, r2
 8009174:	009b      	lsls	r3, r3, #2
 8009176:	440b      	add	r3, r1
 8009178:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800917c:	2201      	movs	r2, #1
 800917e:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009180:	7bfb      	ldrb	r3, [r7, #15]
 8009182:	4a2f      	ldr	r2, [pc, #188]	@ (8009240 <USBD_CDC_Init+0x1c4>)
 8009184:	5cd3      	ldrb	r3, [r2, r3]
 8009186:	f003 020f 	and.w	r2, r3, #15
 800918a:	6879      	ldr	r1, [r7, #4]
 800918c:	4613      	mov	r3, r2
 800918e:	009b      	lsls	r3, r3, #2
 8009190:	4413      	add	r3, r2
 8009192:	009b      	lsls	r3, r3, #2
 8009194:	440b      	add	r3, r1
 8009196:	3326      	adds	r3, #38	@ 0x26
 8009198:	2210      	movs	r2, #16
 800919a:	801a      	strh	r2, [r3, #0]
    }

    /* Open Command IN EP */
    (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP[i], USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800919c:	7bfb      	ldrb	r3, [r7, #15]
 800919e:	4a28      	ldr	r2, [pc, #160]	@ (8009240 <USBD_CDC_Init+0x1c4>)
 80091a0:	5cd1      	ldrb	r1, [r2, r3]
 80091a2:	2308      	movs	r3, #8
 80091a4:	2203      	movs	r2, #3
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f002 fd5d 	bl	800bc66 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 1U;
 80091ac:	7bfb      	ldrb	r3, [r7, #15]
 80091ae:	4a24      	ldr	r2, [pc, #144]	@ (8009240 <USBD_CDC_Init+0x1c4>)
 80091b0:	5cd3      	ldrb	r3, [r2, r3]
 80091b2:	f003 020f 	and.w	r2, r3, #15
 80091b6:	6879      	ldr	r1, [r7, #4]
 80091b8:	4613      	mov	r3, r2
 80091ba:	009b      	lsls	r3, r3, #2
 80091bc:	4413      	add	r3, r2
 80091be:	009b      	lsls	r3, r3, #2
 80091c0:	440b      	add	r3, r1
 80091c2:	3324      	adds	r3, #36	@ 0x24
 80091c4:	2201      	movs	r2, #1
 80091c6:	801a      	strh	r2, [r3, #0]

    /* Init  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Init(i);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	7bfa      	ldrb	r2, [r7, #15]
 80091d2:	4610      	mov	r0, r2
 80091d4:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	2200      	movs	r2, #0
 80091da:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	2200      	movs	r2, #0
 80091e2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	7c1b      	ldrb	r3, [r3, #16]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d10b      	bne.n	8009206 <USBD_CDC_Init+0x18a>
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 80091ee:	7bfb      	ldrb	r3, [r7, #15]
 80091f0:	4a12      	ldr	r2, [pc, #72]	@ (800923c <USBD_CDC_Init+0x1c0>)
 80091f2:	5cd1      	ldrb	r1, [r2, r3]
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80091fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f002 fe20 	bl	800be44 <USBD_LL_PrepareReceive>
 8009204:	e009      	b.n	800921a <USBD_CDC_Init+0x19e>
                                   CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 8009206:	7bfb      	ldrb	r3, [r7, #15]
 8009208:	4a0c      	ldr	r2, [pc, #48]	@ (800923c <USBD_CDC_Init+0x1c0>)
 800920a:	5cd1      	ldrb	r1, [r2, r3]
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009212:	2340      	movs	r3, #64	@ 0x40
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f002 fe15 	bl	800be44 <USBD_LL_PrepareReceive>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800921a:	7bfb      	ldrb	r3, [r7, #15]
 800921c:	3301      	adds	r3, #1
 800921e:	73fb      	strb	r3, [r7, #15]
 8009220:	7bfb      	ldrb	r3, [r7, #15]
 8009222:	2b00      	cmp	r3, #0
 8009224:	f43f af35 	beq.w	8009092 <USBD_CDC_Init+0x16>
                                   CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return (uint8_t)USBD_OK;
 8009228:	2300      	movs	r3, #0
}
 800922a:	4618      	mov	r0, r3
 800922c:	3710      	adds	r7, #16
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}
 8009232:	bf00      	nop
 8009234:	200022d4 	.word	0x200022d4
 8009238:	200022bc 	.word	0x200022bc
 800923c:	200022c0 	.word	0x200022c0
 8009240:	200022c4 	.word	0x200022c4

08009244 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b084      	sub	sp, #16
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	460b      	mov	r3, r1
 800924e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009250:	2300      	movs	r3, #0
 8009252:	73fb      	strb	r3, [r7, #15]
 8009254:	e057      	b.n	8009306 <USBD_CDC_DeInit+0xc2>
  {
    /* Close EP IN */
    (void)USBD_LL_CloseEP(pdev, CDC_IN_EP[i]);
 8009256:	7bfb      	ldrb	r3, [r7, #15]
 8009258:	4a2f      	ldr	r2, [pc, #188]	@ (8009318 <USBD_CDC_DeInit+0xd4>)
 800925a:	5cd3      	ldrb	r3, [r2, r3]
 800925c:	4619      	mov	r1, r3
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f002 fd27 	bl	800bcb2 <USBD_LL_CloseEP>
    pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 0U;
 8009264:	7bfb      	ldrb	r3, [r7, #15]
 8009266:	4a2c      	ldr	r2, [pc, #176]	@ (8009318 <USBD_CDC_DeInit+0xd4>)
 8009268:	5cd3      	ldrb	r3, [r2, r3]
 800926a:	f003 020f 	and.w	r2, r3, #15
 800926e:	6879      	ldr	r1, [r7, #4]
 8009270:	4613      	mov	r3, r2
 8009272:	009b      	lsls	r3, r3, #2
 8009274:	4413      	add	r3, r2
 8009276:	009b      	lsls	r3, r3, #2
 8009278:	440b      	add	r3, r1
 800927a:	3324      	adds	r3, #36	@ 0x24
 800927c:	2200      	movs	r2, #0
 800927e:	801a      	strh	r2, [r3, #0]

    /* Close EP OUT */
    (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP[i]);
 8009280:	7bfb      	ldrb	r3, [r7, #15]
 8009282:	4a26      	ldr	r2, [pc, #152]	@ (800931c <USBD_CDC_DeInit+0xd8>)
 8009284:	5cd3      	ldrb	r3, [r2, r3]
 8009286:	4619      	mov	r1, r3
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f002 fd12 	bl	800bcb2 <USBD_LL_CloseEP>
    pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 0U;
 800928e:	7bfb      	ldrb	r3, [r7, #15]
 8009290:	4a22      	ldr	r2, [pc, #136]	@ (800931c <USBD_CDC_DeInit+0xd8>)
 8009292:	5cd3      	ldrb	r3, [r2, r3]
 8009294:	f003 020f 	and.w	r2, r3, #15
 8009298:	6879      	ldr	r1, [r7, #4]
 800929a:	4613      	mov	r3, r2
 800929c:	009b      	lsls	r3, r3, #2
 800929e:	4413      	add	r3, r2
 80092a0:	009b      	lsls	r3, r3, #2
 80092a2:	440b      	add	r3, r1
 80092a4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80092a8:	2200      	movs	r2, #0
 80092aa:	801a      	strh	r2, [r3, #0]

    /* Close Command IN EP */
    (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP[i]);
 80092ac:	7bfb      	ldrb	r3, [r7, #15]
 80092ae:	4a1c      	ldr	r2, [pc, #112]	@ (8009320 <USBD_CDC_DeInit+0xdc>)
 80092b0:	5cd3      	ldrb	r3, [r2, r3]
 80092b2:	4619      	mov	r1, r3
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f002 fcfc 	bl	800bcb2 <USBD_LL_CloseEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 0U;
 80092ba:	7bfb      	ldrb	r3, [r7, #15]
 80092bc:	4a18      	ldr	r2, [pc, #96]	@ (8009320 <USBD_CDC_DeInit+0xdc>)
 80092be:	5cd3      	ldrb	r3, [r2, r3]
 80092c0:	f003 020f 	and.w	r2, r3, #15
 80092c4:	6879      	ldr	r1, [r7, #4]
 80092c6:	4613      	mov	r3, r2
 80092c8:	009b      	lsls	r3, r3, #2
 80092ca:	4413      	add	r3, r2
 80092cc:	009b      	lsls	r3, r3, #2
 80092ce:	440b      	add	r3, r1
 80092d0:	3324      	adds	r3, #36	@ 0x24
 80092d2:	2200      	movs	r2, #0
 80092d4:	801a      	strh	r2, [r3, #0]
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = 0U;
 80092d6:	7bfb      	ldrb	r3, [r7, #15]
 80092d8:	4a11      	ldr	r2, [pc, #68]	@ (8009320 <USBD_CDC_DeInit+0xdc>)
 80092da:	5cd3      	ldrb	r3, [r2, r3]
 80092dc:	f003 020f 	and.w	r2, r3, #15
 80092e0:	6879      	ldr	r1, [r7, #4]
 80092e2:	4613      	mov	r3, r2
 80092e4:	009b      	lsls	r3, r3, #2
 80092e6:	4413      	add	r3, r2
 80092e8:	009b      	lsls	r3, r3, #2
 80092ea:	440b      	add	r3, r1
 80092ec:	3326      	adds	r3, #38	@ 0x26
 80092ee:	2200      	movs	r2, #0
 80092f0:	801a      	strh	r2, [r3, #0]

    /* DeInit  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->DeInit(i);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80092f8:	685b      	ldr	r3, [r3, #4]
 80092fa:	7bfa      	ldrb	r2, [r7, #15]
 80092fc:	4610      	mov	r0, r2
 80092fe:	4798      	blx	r3
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009300:	7bfb      	ldrb	r3, [r7, #15]
 8009302:	3301      	adds	r3, #1
 8009304:	73fb      	strb	r3, [r7, #15]
 8009306:	7bfb      	ldrb	r3, [r7, #15]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d0a4      	beq.n	8009256 <USBD_CDC_DeInit+0x12>
  }
  return (uint8_t)USBD_OK;
 800930c:	2300      	movs	r3, #0
}
 800930e:	4618      	mov	r0, r3
 8009310:	3710      	adds	r7, #16
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
 8009316:	bf00      	nop
 8009318:	200022bc 	.word	0x200022bc
 800931c:	200022c0 	.word	0x200022c0
 8009320:	200022c4 	.word	0x200022c4

08009324 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009324:	b590      	push	{r4, r7, lr}
 8009326:	b087      	sub	sp, #28
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	6039      	str	r1, [r7, #0]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800932e:	2300      	movs	r3, #0
 8009330:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009332:	2300      	movs	r3, #0
 8009334:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009336:	2300      	movs	r3, #0
 8009338:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800933a:	2300      	movs	r3, #0
 800933c:	75fb      	strb	r3, [r7, #23]

  uint8_t windex_to_ch = 0;
 800933e:	2300      	movs	r3, #0
 8009340:	75bb      	strb	r3, [r7, #22]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009342:	2300      	movs	r3, #0
 8009344:	757b      	strb	r3, [r7, #21]
 8009346:	e015      	b.n	8009374 <USBD_CDC_Setup+0x50>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	889b      	ldrh	r3, [r3, #4]
 800934c:	b2da      	uxtb	r2, r3
 800934e:	7d7b      	ldrb	r3, [r7, #21]
 8009350:	496d      	ldr	r1, [pc, #436]	@ (8009508 <USBD_CDC_Setup+0x1e4>)
 8009352:	5ccb      	ldrb	r3, [r1, r3]
 8009354:	429a      	cmp	r2, r3
 8009356:	d007      	beq.n	8009368 <USBD_CDC_Setup+0x44>
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	889b      	ldrh	r3, [r3, #4]
 800935c:	b2da      	uxtb	r2, r3
 800935e:	7d7b      	ldrb	r3, [r7, #21]
 8009360:	496a      	ldr	r1, [pc, #424]	@ (800950c <USBD_CDC_Setup+0x1e8>)
 8009362:	5ccb      	ldrb	r3, [r1, r3]
 8009364:	429a      	cmp	r2, r3
 8009366:	d102      	bne.n	800936e <USBD_CDC_Setup+0x4a>
    {
      windex_to_ch = i;
 8009368:	7d7b      	ldrb	r3, [r7, #21]
 800936a:	75bb      	strb	r3, [r7, #22]
      break;
 800936c:	e005      	b.n	800937a <USBD_CDC_Setup+0x56>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800936e:	7d7b      	ldrb	r3, [r7, #21]
 8009370:	3301      	adds	r3, #1
 8009372:	757b      	strb	r3, [r7, #21]
 8009374:	7d7b      	ldrb	r3, [r7, #21]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d0e6      	beq.n	8009348 <USBD_CDC_Setup+0x24>
    }
  }

  hcdc = &CDC_ACM_Class_Data[windex_to_ch];
 800937a:	7dbb      	ldrb	r3, [r7, #22]
 800937c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009380:	fb02 f303 	mul.w	r3, r2, r3
 8009384:	4a62      	ldr	r2, [pc, #392]	@ (8009510 <USBD_CDC_Setup+0x1ec>)
 8009386:	4413      	add	r3, r2
 8009388:	613b      	str	r3, [r7, #16]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	781b      	ldrb	r3, [r3, #0]
 800938e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009392:	2b00      	cmp	r3, #0
 8009394:	d04a      	beq.n	800942c <USBD_CDC_Setup+0x108>
 8009396:	2b20      	cmp	r3, #32
 8009398:	f040 80aa 	bne.w	80094f0 <USBD_CDC_Setup+0x1cc>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	88db      	ldrh	r3, [r3, #6]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d038      	beq.n	8009416 <USBD_CDC_Setup+0xf2>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	781b      	ldrb	r3, [r3, #0]
 80093a8:	b25b      	sxtb	r3, r3
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	da1d      	bge.n	80093ea <USBD_CDC_Setup+0xc6>
      {
        ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80093b4:	689c      	ldr	r4, [r3, #8]
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	7859      	ldrb	r1, [r3, #1]
 80093ba:	7dbb      	ldrb	r3, [r7, #22]
 80093bc:	025b      	lsls	r3, r3, #9
 80093be:	693a      	ldr	r2, [r7, #16]
 80093c0:	441a      	add	r2, r3
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	88db      	ldrh	r3, [r3, #6]
 80093c6:	7db8      	ldrb	r0, [r7, #22]
 80093c8:	47a0      	blx	r4

        len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	88db      	ldrh	r3, [r3, #6]
 80093ce:	2b07      	cmp	r3, #7
 80093d0:	bf28      	it	cs
 80093d2:	2307      	movcs	r3, #7
 80093d4:	81fb      	strh	r3, [r7, #14]
        (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data[windex_to_ch], len);
 80093d6:	7dbb      	ldrb	r3, [r7, #22]
 80093d8:	025b      	lsls	r3, r3, #9
 80093da:	693a      	ldr	r2, [r7, #16]
 80093dc:	4413      	add	r3, r2
 80093de:	89fa      	ldrh	r2, [r7, #14]
 80093e0:	4619      	mov	r1, r3
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f002 fa2d 	bl	800b842 <USBD_CtlSendData>
    }
    else
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
    }
    break;
 80093e8:	e089      	b.n	80094fe <USBD_CDC_Setup+0x1da>
        hcdc->CmdOpCode = req->bRequest;
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	785a      	ldrb	r2, [r3, #1]
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	88db      	ldrh	r3, [r3, #6]
 80093f8:	b2da      	uxtb	r2, r3
 80093fa:	693b      	ldr	r3, [r7, #16]
 80093fc:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 8009400:	7dbb      	ldrb	r3, [r7, #22]
 8009402:	025b      	lsls	r3, r3, #9
 8009404:	693a      	ldr	r2, [r7, #16]
 8009406:	18d1      	adds	r1, r2, r3
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	88db      	ldrh	r3, [r3, #6]
 800940c:	461a      	mov	r2, r3
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f002 fa43 	bl	800b89a <USBD_CtlPrepareRx>
    break;
 8009414:	e073      	b.n	80094fe <USBD_CDC_Setup+0x1da>
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800941c:	689c      	ldr	r4, [r3, #8]
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	7859      	ldrb	r1, [r3, #1]
 8009422:	7db8      	ldrb	r0, [r7, #22]
 8009424:	2300      	movs	r3, #0
 8009426:	683a      	ldr	r2, [r7, #0]
 8009428:	47a0      	blx	r4
    break;
 800942a:	e068      	b.n	80094fe <USBD_CDC_Setup+0x1da>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	785b      	ldrb	r3, [r3, #1]
 8009430:	2b0b      	cmp	r3, #11
 8009432:	d852      	bhi.n	80094da <USBD_CDC_Setup+0x1b6>
 8009434:	a201      	add	r2, pc, #4	@ (adr r2, 800943c <USBD_CDC_Setup+0x118>)
 8009436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800943a:	bf00      	nop
 800943c:	0800946d 	.word	0x0800946d
 8009440:	080094e9 	.word	0x080094e9
 8009444:	080094db 	.word	0x080094db
 8009448:	080094db 	.word	0x080094db
 800944c:	080094db 	.word	0x080094db
 8009450:	080094db 	.word	0x080094db
 8009454:	080094db 	.word	0x080094db
 8009458:	080094db 	.word	0x080094db
 800945c:	080094db 	.word	0x080094db
 8009460:	080094db 	.word	0x080094db
 8009464:	08009497 	.word	0x08009497
 8009468:	080094c1 	.word	0x080094c1
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009472:	b2db      	uxtb	r3, r3
 8009474:	2b03      	cmp	r3, #3
 8009476:	d107      	bne.n	8009488 <USBD_CDC_Setup+0x164>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009478:	f107 030a 	add.w	r3, r7, #10
 800947c:	2202      	movs	r2, #2
 800947e:	4619      	mov	r1, r3
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f002 f9de 	bl	800b842 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8009486:	e032      	b.n	80094ee <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 8009488:	6839      	ldr	r1, [r7, #0]
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f002 f968 	bl	800b760 <USBD_CtlError>
        ret = USBD_FAIL;
 8009490:	2303      	movs	r3, #3
 8009492:	75fb      	strb	r3, [r7, #23]
      break;
 8009494:	e02b      	b.n	80094ee <USBD_CDC_Setup+0x1ca>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800949c:	b2db      	uxtb	r3, r3
 800949e:	2b03      	cmp	r3, #3
 80094a0:	d107      	bne.n	80094b2 <USBD_CDC_Setup+0x18e>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80094a2:	f107 030d 	add.w	r3, r7, #13
 80094a6:	2201      	movs	r2, #1
 80094a8:	4619      	mov	r1, r3
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f002 f9c9 	bl	800b842 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80094b0:	e01d      	b.n	80094ee <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 80094b2:	6839      	ldr	r1, [r7, #0]
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f002 f953 	bl	800b760 <USBD_CtlError>
        ret = USBD_FAIL;
 80094ba:	2303      	movs	r3, #3
 80094bc:	75fb      	strb	r3, [r7, #23]
      break;
 80094be:	e016      	b.n	80094ee <USBD_CDC_Setup+0x1ca>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094c6:	b2db      	uxtb	r3, r3
 80094c8:	2b03      	cmp	r3, #3
 80094ca:	d00f      	beq.n	80094ec <USBD_CDC_Setup+0x1c8>
      {
        USBD_CtlError(pdev, req);
 80094cc:	6839      	ldr	r1, [r7, #0]
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f002 f946 	bl	800b760 <USBD_CtlError>
        ret = USBD_FAIL;
 80094d4:	2303      	movs	r3, #3
 80094d6:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80094d8:	e008      	b.n	80094ec <USBD_CDC_Setup+0x1c8>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80094da:	6839      	ldr	r1, [r7, #0]
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f002 f93f 	bl	800b760 <USBD_CtlError>
      ret = USBD_FAIL;
 80094e2:	2303      	movs	r3, #3
 80094e4:	75fb      	strb	r3, [r7, #23]
      break;
 80094e6:	e002      	b.n	80094ee <USBD_CDC_Setup+0x1ca>
      break;
 80094e8:	bf00      	nop
 80094ea:	e008      	b.n	80094fe <USBD_CDC_Setup+0x1da>
      break;
 80094ec:	bf00      	nop
    }
    break;
 80094ee:	e006      	b.n	80094fe <USBD_CDC_Setup+0x1da>

  default:
    USBD_CtlError(pdev, req);
 80094f0:	6839      	ldr	r1, [r7, #0]
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f002 f934 	bl	800b760 <USBD_CtlError>
    ret = USBD_FAIL;
 80094f8:	2303      	movs	r3, #3
 80094fa:	75fb      	strb	r3, [r7, #23]
    break;
 80094fc:	bf00      	nop
  }

  return (uint8_t)ret;
 80094fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009500:	4618      	mov	r0, r3
 8009502:	371c      	adds	r7, #28
 8009504:	46bd      	mov	sp, r7
 8009506:	bd90      	pop	{r4, r7, pc}
 8009508:	200022c8 	.word	0x200022c8
 800950c:	200022cc 	.word	0x200022cc
 8009510:	200022d4 	.word	0x200022d4

08009514 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009514:	b590      	push	{r4, r7, lr}
 8009516:	b087      	sub	sp, #28
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	460b      	mov	r3, r1
 800951e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8009520:	2300      	movs	r3, #0
 8009522:	613b      	str	r3, [r7, #16]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800952a:	60fb      	str	r3, [r7, #12]
  uint8_t ep_to_ch = 0;
 800952c:	2300      	movs	r3, #0
 800952e:	75fb      	strb	r3, [r7, #23]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009530:	2300      	movs	r3, #0
 8009532:	75bb      	strb	r3, [r7, #22]
 8009534:	e00d      	b.n	8009552 <USBD_CDC_DataIn+0x3e>
  {
    if (epnum == (CDC_IN_EP[i] & 0x0F))
 8009536:	78fa      	ldrb	r2, [r7, #3]
 8009538:	7dbb      	ldrb	r3, [r7, #22]
 800953a:	4934      	ldr	r1, [pc, #208]	@ (800960c <USBD_CDC_DataIn+0xf8>)
 800953c:	5ccb      	ldrb	r3, [r1, r3]
 800953e:	f003 030f 	and.w	r3, r3, #15
 8009542:	429a      	cmp	r2, r3
 8009544:	d102      	bne.n	800954c <USBD_CDC_DataIn+0x38>
    {
      ep_to_ch = i;
 8009546:	7dbb      	ldrb	r3, [r7, #22]
 8009548:	75fb      	strb	r3, [r7, #23]
      break;
 800954a:	e005      	b.n	8009558 <USBD_CDC_DataIn+0x44>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800954c:	7dbb      	ldrb	r3, [r7, #22]
 800954e:	3301      	adds	r3, #1
 8009550:	75bb      	strb	r3, [r7, #22]
 8009552:	7dbb      	ldrb	r3, [r7, #22]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d0ee      	beq.n	8009536 <USBD_CDC_DataIn+0x22>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 8009558:	7dfb      	ldrb	r3, [r7, #23]
 800955a:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800955e:	fb02 f303 	mul.w	r3, r2, r3
 8009562:	4a2b      	ldr	r2, [pc, #172]	@ (8009610 <USBD_CDC_DataIn+0xfc>)
 8009564:	4413      	add	r3, r2
 8009566:	613b      	str	r3, [r7, #16]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009568:	78fa      	ldrb	r2, [r7, #3]
 800956a:	6879      	ldr	r1, [r7, #4]
 800956c:	4613      	mov	r3, r2
 800956e:	009b      	lsls	r3, r3, #2
 8009570:	4413      	add	r3, r2
 8009572:	009b      	lsls	r3, r3, #2
 8009574:	440b      	add	r3, r1
 8009576:	3318      	adds	r3, #24
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d029      	beq.n	80095d2 <USBD_CDC_DataIn+0xbe>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800957e:	78fa      	ldrb	r2, [r7, #3]
 8009580:	6879      	ldr	r1, [r7, #4]
 8009582:	4613      	mov	r3, r2
 8009584:	009b      	lsls	r3, r3, #2
 8009586:	4413      	add	r3, r2
 8009588:	009b      	lsls	r3, r3, #2
 800958a:	440b      	add	r3, r1
 800958c:	3318      	adds	r3, #24
 800958e:	681a      	ldr	r2, [r3, #0]
 8009590:	78f9      	ldrb	r1, [r7, #3]
 8009592:	68f8      	ldr	r0, [r7, #12]
 8009594:	460b      	mov	r3, r1
 8009596:	00db      	lsls	r3, r3, #3
 8009598:	440b      	add	r3, r1
 800959a:	009b      	lsls	r3, r3, #2
 800959c:	4403      	add	r3, r0
 800959e:	331c      	adds	r3, #28
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	fbb2 f1f3 	udiv	r1, r2, r3
 80095a6:	fb01 f303 	mul.w	r3, r1, r3
 80095aa:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d110      	bne.n	80095d2 <USBD_CDC_DataIn+0xbe>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80095b0:	78fa      	ldrb	r2, [r7, #3]
 80095b2:	6879      	ldr	r1, [r7, #4]
 80095b4:	4613      	mov	r3, r2
 80095b6:	009b      	lsls	r3, r3, #2
 80095b8:	4413      	add	r3, r2
 80095ba:	009b      	lsls	r3, r3, #2
 80095bc:	440b      	add	r3, r1
 80095be:	3318      	adds	r3, #24
 80095c0:	2200      	movs	r2, #0
 80095c2:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80095c4:	78f9      	ldrb	r1, [r7, #3]
 80095c6:	2300      	movs	r3, #0
 80095c8:	2200      	movs	r2, #0
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f002 fc19 	bl	800be02 <USBD_LL_Transmit>
 80095d0:	e016      	b.n	8009600 <USBD_CDC_DataIn+0xec>
  }
  else
  {
    hcdc->TxState = 0U;
 80095d2:	693b      	ldr	r3, [r7, #16]
 80095d4:	2200      	movs	r2, #0
 80095d6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt != NULL)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80095e0:	691b      	ldr	r3, [r3, #16]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d00c      	beq.n	8009600 <USBD_CDC_DataIn+0xec>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt(ep_to_ch, hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80095ec:	691c      	ldr	r4, [r3, #16]
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	f8d3 1208 	ldr.w	r1, [r3, #520]	@ 0x208
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 80095fa:	78fb      	ldrb	r3, [r7, #3]
 80095fc:	7df8      	ldrb	r0, [r7, #23]
 80095fe:	47a0      	blx	r4
    }
  }

  return (uint8_t)USBD_OK;
 8009600:	2300      	movs	r3, #0
}
 8009602:	4618      	mov	r0, r3
 8009604:	371c      	adds	r7, #28
 8009606:	46bd      	mov	sp, r7
 8009608:	bd90      	pop	{r4, r7, pc}
 800960a:	bf00      	nop
 800960c:	200022bc 	.word	0x200022bc
 8009610:	200022d4 	.word	0x200022d4

08009614 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b084      	sub	sp, #16
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
 800961c:	460b      	mov	r3, r1
 800961e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8009620:	2300      	movs	r3, #0
 8009622:	60bb      	str	r3, [r7, #8]
  uint8_t ep_to_ch = 0;
 8009624:	2300      	movs	r3, #0
 8009626:	73fb      	strb	r3, [r7, #15]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009628:	2300      	movs	r3, #0
 800962a:	73bb      	strb	r3, [r7, #14]
 800962c:	e00b      	b.n	8009646 <USBD_CDC_DataOut+0x32>
  {
    if (epnum == CDC_OUT_EP[i])
 800962e:	7bbb      	ldrb	r3, [r7, #14]
 8009630:	4a17      	ldr	r2, [pc, #92]	@ (8009690 <USBD_CDC_DataOut+0x7c>)
 8009632:	5cd3      	ldrb	r3, [r2, r3]
 8009634:	78fa      	ldrb	r2, [r7, #3]
 8009636:	429a      	cmp	r2, r3
 8009638:	d102      	bne.n	8009640 <USBD_CDC_DataOut+0x2c>
    {
      ep_to_ch = i;
 800963a:	7bbb      	ldrb	r3, [r7, #14]
 800963c:	73fb      	strb	r3, [r7, #15]
      break;
 800963e:	e005      	b.n	800964c <USBD_CDC_DataOut+0x38>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009640:	7bbb      	ldrb	r3, [r7, #14]
 8009642:	3301      	adds	r3, #1
 8009644:	73bb      	strb	r3, [r7, #14]
 8009646:	7bbb      	ldrb	r3, [r7, #14]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d0f0      	beq.n	800962e <USBD_CDC_DataOut+0x1a>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 800964c:	7bfb      	ldrb	r3, [r7, #15]
 800964e:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009652:	fb02 f303 	mul.w	r3, r2, r3
 8009656:	4a0f      	ldr	r2, [pc, #60]	@ (8009694 <USBD_CDC_DataOut+0x80>)
 8009658:	4413      	add	r3, r2
 800965a:	60bb      	str	r3, [r7, #8]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800965c:	78fb      	ldrb	r3, [r7, #3]
 800965e:	4619      	mov	r1, r3
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f002 fc10 	bl	800be86 <USBD_LL_GetRxDataSize>
 8009666:	4602      	mov	r2, r0
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Receive(ep_to_ch, hcdc->RxBuffer, &hcdc->RxLength);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009674:	68db      	ldr	r3, [r3, #12]
 8009676:	68ba      	ldr	r2, [r7, #8]
 8009678:	f8d2 1204 	ldr.w	r1, [r2, #516]	@ 0x204
 800967c:	68ba      	ldr	r2, [r7, #8]
 800967e:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009682:	7bf8      	ldrb	r0, [r7, #15]
 8009684:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009686:	2300      	movs	r3, #0
}
 8009688:	4618      	mov	r0, r3
 800968a:	3710      	adds	r7, #16
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}
 8009690:	200022c0 	.word	0x200022c0
 8009694:	200022d4 	.word	0x200022d4

08009698 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009698:	b590      	push	{r4, r7, lr}
 800969a:	b085      	sub	sp, #20
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 80096a0:	2300      	movs	r3, #0
 80096a2:	60bb      	str	r3, [r7, #8]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80096a4:	2300      	movs	r3, #0
 80096a6:	73fb      	strb	r3, [r7, #15]
 80096a8:	e02d      	b.n	8009706 <USBD_CDC_EP0_RxReady+0x6e>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 80096aa:	7bfb      	ldrb	r3, [r7, #15]
 80096ac:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80096b0:	fb02 f303 	mul.w	r3, r2, r3
 80096b4:	4a18      	ldr	r2, [pc, #96]	@ (8009718 <USBD_CDC_EP0_RxReady+0x80>)
 80096b6:	4413      	add	r3, r2
 80096b8:	60bb      	str	r3, [r7, #8]

    if (hcdc == NULL)
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d101      	bne.n	80096c4 <USBD_CDC_EP0_RxReady+0x2c>
    {
      return (uint8_t)USBD_FAIL;
 80096c0:	2303      	movs	r3, #3
 80096c2:	e024      	b.n	800970e <USBD_CDC_EP0_RxReady+0x76>
    }

    if ((pdev->pUserData_CDC_ACM != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d018      	beq.n	8009700 <USBD_CDC_EP0_RxReady+0x68>
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80096d4:	2bff      	cmp	r3, #255	@ 0xff
 80096d6:	d013      	beq.n	8009700 <USBD_CDC_EP0_RxReady+0x68>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(i, hcdc->CmdOpCode, (uint8_t *)hcdc->data[i], (uint16_t)hcdc->CmdLength);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80096de:	689c      	ldr	r4, [r3, #8]
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	f893 1200 	ldrb.w	r1, [r3, #512]	@ 0x200
 80096e6:	7bfb      	ldrb	r3, [r7, #15]
 80096e8:	025b      	lsls	r3, r3, #9
 80096ea:	68ba      	ldr	r2, [r7, #8]
 80096ec:	441a      	add	r2, r3
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80096f4:	7bf8      	ldrb	r0, [r7, #15]
 80096f6:	47a0      	blx	r4
      hcdc->CmdOpCode = 0xFFU;
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	22ff      	movs	r2, #255	@ 0xff
 80096fc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009700:	7bfb      	ldrb	r3, [r7, #15]
 8009702:	3301      	adds	r3, #1
 8009704:	73fb      	strb	r3, [r7, #15]
 8009706:	7bfb      	ldrb	r3, [r7, #15]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d0ce      	beq.n	80096aa <USBD_CDC_EP0_RxReady+0x12>
    }
  }

  return (uint8_t)USBD_OK;
 800970c:	2300      	movs	r3, #0
}
 800970e:	4618      	mov	r0, r3
 8009710:	3714      	adds	r7, #20
 8009712:	46bd      	mov	sp, r7
 8009714:	bd90      	pop	{r4, r7, pc}
 8009716:	bf00      	nop
 8009718:	200022d4 	.word	0x200022d4

0800971c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800971c:	b480      	push	{r7}
 800971e:	b083      	sub	sp, #12
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	224b      	movs	r2, #75	@ 0x4b
 8009728:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800972a:	4b03      	ldr	r3, [pc, #12]	@ (8009738 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800972c:	4618      	mov	r0, r3
 800972e:	370c      	adds	r7, #12
 8009730:	46bd      	mov	sp, r7
 8009732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009736:	4770      	bx	lr
 8009738:	20000138 	.word	0x20000138

0800973c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800973c:	b480      	push	{r7}
 800973e:	b083      	sub	sp, #12
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	224b      	movs	r2, #75	@ 0x4b
 8009748:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800974a:	4b03      	ldr	r3, [pc, #12]	@ (8009758 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800974c:	4618      	mov	r0, r3
 800974e:	370c      	adds	r7, #12
 8009750:	46bd      	mov	sp, r7
 8009752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009756:	4770      	bx	lr
 8009758:	200000ec 	.word	0x200000ec

0800975c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800975c:	b480      	push	{r7}
 800975e:	b083      	sub	sp, #12
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	224b      	movs	r2, #75	@ 0x4b
 8009768:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800976a:	4b03      	ldr	r3, [pc, #12]	@ (8009778 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800976c:	4618      	mov	r0, r3
 800976e:	370c      	adds	r7, #12
 8009770:	46bd      	mov	sp, r7
 8009772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009776:	4770      	bx	lr
 8009778:	20000138 	.word	0x20000138

0800977c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800977c:	b480      	push	{r7}
 800977e:	b083      	sub	sp, #12
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	220a      	movs	r2, #10
 8009788:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800978a:	4b03      	ldr	r3, [pc, #12]	@ (8009798 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800978c:	4618      	mov	r0, r3
 800978e:	370c      	adds	r7, #12
 8009790:	46bd      	mov	sp, r7
 8009792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009796:	4770      	bx	lr
 8009798:	200000a4 	.word	0x200000a4

0800979c <USBD_CDC_ACM_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_ACM_RegisterInterface(USBD_HandleTypeDef *pdev,
                                       USBD_CDC_ACM_ItfTypeDef *fops)
{
 800979c:	b480      	push	{r7}
 800979e:	b083      	sub	sp, #12
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
 80097a4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d101      	bne.n	80097b0 <USBD_CDC_ACM_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80097ac:	2303      	movs	r3, #3
 80097ae:	e004      	b.n	80097ba <USBD_CDC_ACM_RegisterInterface+0x1e>
  }

  pdev->pUserData_CDC_ACM = fops;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	683a      	ldr	r2, [r7, #0]
 80097b4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  return (uint8_t)USBD_OK;
 80097b8:	2300      	movs	r3, #0
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	370c      	adds	r7, #12
 80097be:	46bd      	mov	sp, r7
 80097c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c4:	4770      	bx	lr
	...

080097c8 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b087      	sub	sp, #28
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	60b9      	str	r1, [r7, #8]
 80097d0:	607a      	str	r2, [r7, #4]
 80097d2:	603b      	str	r3, [r7, #0]
 80097d4:	4603      	mov	r3, r0
 80097d6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 80097d8:	2300      	movs	r3, #0
 80097da:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 80097dc:	7bfb      	ldrb	r3, [r7, #15]
 80097de:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80097e2:	fb02 f303 	mul.w	r3, r2, r3
 80097e6:	4a09      	ldr	r2, [pc, #36]	@ (800980c <USBD_CDC_SetTxBuffer+0x44>)
 80097e8:	4413      	add	r3, r2
 80097ea:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	687a      	ldr	r2, [r7, #4]
 80097f0:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	683a      	ldr	r2, [r7, #0]
 80097f8:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80097fc:	2300      	movs	r3, #0
}
 80097fe:	4618      	mov	r0, r3
 8009800:	371c      	adds	r7, #28
 8009802:	46bd      	mov	sp, r7
 8009804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009808:	4770      	bx	lr
 800980a:	bf00      	nop
 800980c:	200022d4 	.word	0x200022d4

08009810 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009810:	b480      	push	{r7}
 8009812:	b087      	sub	sp, #28
 8009814:	af00      	add	r7, sp, #0
 8009816:	4603      	mov	r3, r0
 8009818:	60b9      	str	r1, [r7, #8]
 800981a:	607a      	str	r2, [r7, #4]
 800981c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800981e:	2300      	movs	r3, #0
 8009820:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 8009822:	7bfb      	ldrb	r3, [r7, #15]
 8009824:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009828:	fb02 f303 	mul.w	r3, r2, r3
 800982c:	4a06      	ldr	r2, [pc, #24]	@ (8009848 <USBD_CDC_SetRxBuffer+0x38>)
 800982e:	4413      	add	r3, r2
 8009830:	617b      	str	r3, [r7, #20]

  hcdc->RxBuffer = pbuff;
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	687a      	ldr	r2, [r7, #4]
 8009836:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800983a:	2300      	movs	r3, #0
}
 800983c:	4618      	mov	r0, r3
 800983e:	371c      	adds	r7, #28
 8009840:	46bd      	mov	sp, r7
 8009842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009846:	4770      	bx	lr
 8009848:	200022d4 	.word	0x200022d4

0800984c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b084      	sub	sp, #16
 8009850:	af00      	add	r7, sp, #0
 8009852:	4603      	mov	r3, r0
 8009854:	6039      	str	r1, [r7, #0]
 8009856:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8009858:	2300      	movs	r3, #0
 800985a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800985c:	2301      	movs	r3, #1
 800985e:	73fb      	strb	r3, [r7, #15]

  hcdc = &CDC_ACM_Class_Data[ch];
 8009860:	79fb      	ldrb	r3, [r7, #7]
 8009862:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009866:	fb02 f303 	mul.w	r3, r2, r3
 800986a:	4a17      	ldr	r2, [pc, #92]	@ (80098c8 <USBD_CDC_TransmitPacket+0x7c>)
 800986c:	4413      	add	r3, r2
 800986e:	60bb      	str	r3, [r7, #8]

  if (hcdc->TxState == 0U)
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009876:	2b00      	cmp	r3, #0
 8009878:	d121      	bne.n	80098be <USBD_CDC_TransmitPacket+0x72>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	2201      	movs	r2, #1
 800987e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP[ch] & 0xFU].total_length = hcdc->TxLength;
 8009882:	79fb      	ldrb	r3, [r7, #7]
 8009884:	4a11      	ldr	r2, [pc, #68]	@ (80098cc <USBD_CDC_TransmitPacket+0x80>)
 8009886:	5cd3      	ldrb	r3, [r2, r3]
 8009888:	f003 020f 	and.w	r2, r3, #15
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8009892:	6838      	ldr	r0, [r7, #0]
 8009894:	4613      	mov	r3, r2
 8009896:	009b      	lsls	r3, r3, #2
 8009898:	4413      	add	r3, r2
 800989a:	009b      	lsls	r3, r3, #2
 800989c:	4403      	add	r3, r0
 800989e:	3318      	adds	r3, #24
 80098a0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP[ch], hcdc->TxBuffer, hcdc->TxLength);
 80098a2:	79fb      	ldrb	r3, [r7, #7]
 80098a4:	4a09      	ldr	r2, [pc, #36]	@ (80098cc <USBD_CDC_TransmitPacket+0x80>)
 80098a6:	5cd1      	ldrb	r1, [r2, r3]
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80098b4:	6838      	ldr	r0, [r7, #0]
 80098b6:	f002 faa4 	bl	800be02 <USBD_LL_Transmit>

    ret = USBD_OK;
 80098ba:	2300      	movs	r3, #0
 80098bc:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80098be:	7bfb      	ldrb	r3, [r7, #15]
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3710      	adds	r7, #16
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}
 80098c8:	200022d4 	.word	0x200022d4
 80098cc:	200022bc 	.word	0x200022bc

080098d0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b084      	sub	sp, #16
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	4603      	mov	r3, r0
 80098d8:	6039      	str	r1, [r7, #0]
 80098da:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 80098dc:	2300      	movs	r3, #0
 80098de:	60fb      	str	r3, [r7, #12]

  hcdc = &CDC_ACM_Class_Data[ch];
 80098e0:	79fb      	ldrb	r3, [r7, #7]
 80098e2:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80098e6:	fb02 f303 	mul.w	r3, r2, r3
 80098ea:	4a11      	ldr	r2, [pc, #68]	@ (8009930 <USBD_CDC_ReceivePacket+0x60>)
 80098ec:	4413      	add	r3, r2
 80098ee:	60fb      	str	r3, [r7, #12]

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	7c1b      	ldrb	r3, [r3, #16]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d10b      	bne.n	8009910 <USBD_CDC_ReceivePacket+0x40>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 80098f8:	79fb      	ldrb	r3, [r7, #7]
 80098fa:	4a0e      	ldr	r2, [pc, #56]	@ (8009934 <USBD_CDC_ReceivePacket+0x64>)
 80098fc:	5cd1      	ldrb	r1, [r2, r3]
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009904:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009908:	6838      	ldr	r0, [r7, #0]
 800990a:	f002 fa9b 	bl	800be44 <USBD_LL_PrepareReceive>
 800990e:	e009      	b.n	8009924 <USBD_CDC_ReceivePacket+0x54>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 8009910:	79fb      	ldrb	r3, [r7, #7]
 8009912:	4a08      	ldr	r2, [pc, #32]	@ (8009934 <USBD_CDC_ReceivePacket+0x64>)
 8009914:	5cd1      	ldrb	r1, [r2, r3]
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800991c:	2340      	movs	r3, #64	@ 0x40
 800991e:	6838      	ldr	r0, [r7, #0]
 8009920:	f002 fa90 	bl	800be44 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009924:	2300      	movs	r3, #0
}
 8009926:	4618      	mov	r0, r3
 8009928:	3710      	adds	r7, #16
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}
 800992e:	bf00      	nop
 8009930:	200022d4 	.word	0x200022d4
 8009934:	200022c0 	.word	0x200022c0

08009938 <USBD_Update_CDC_ACM_DESC>:
                              uint8_t com_itf,
                              uint8_t in_ep,
                              uint8_t cmd_ep,
                              uint8_t out_ep,
                              uint8_t str_idx)
{
 8009938:	b480      	push	{r7}
 800993a:	b085      	sub	sp, #20
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
 8009940:	4608      	mov	r0, r1
 8009942:	4611      	mov	r1, r2
 8009944:	461a      	mov	r2, r3
 8009946:	4603      	mov	r3, r0
 8009948:	70fb      	strb	r3, [r7, #3]
 800994a:	460b      	mov	r3, r1
 800994c:	70bb      	strb	r3, [r7, #2]
 800994e:	4613      	mov	r3, r2
 8009950:	707b      	strb	r3, [r7, #1]
  desc += 9;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	3309      	adds	r3, #9
 8009956:	607b      	str	r3, [r7, #4]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009958:	2300      	movs	r3, #0
 800995a:	73fb      	strb	r3, [r7, #15]
 800995c:	e05b      	b.n	8009a16 <USBD_Update_CDC_ACM_DESC+0xde>
  {
    desc[2] = cmd_itf;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	3302      	adds	r3, #2
 8009962:	78fa      	ldrb	r2, [r7, #3]
 8009964:	701a      	strb	r2, [r3, #0]
    desc[16] = str_idx;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	3310      	adds	r3, #16
 800996a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800996e:	701a      	strb	r2, [r3, #0]
    desc[10] = cmd_itf;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	330a      	adds	r3, #10
 8009974:	78fa      	ldrb	r2, [r7, #3]
 8009976:	701a      	strb	r2, [r3, #0]
    desc[26] = com_itf;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	331a      	adds	r3, #26
 800997c:	78ba      	ldrb	r2, [r7, #2]
 800997e:	701a      	strb	r2, [r3, #0]
    desc[34] = cmd_itf;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	3322      	adds	r3, #34	@ 0x22
 8009984:	78fa      	ldrb	r2, [r7, #3]
 8009986:	701a      	strb	r2, [r3, #0]
    desc[35] = com_itf;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	3323      	adds	r3, #35	@ 0x23
 800998c:	78ba      	ldrb	r2, [r7, #2]
 800998e:	701a      	strb	r2, [r3, #0]
    desc[38] = cmd_ep;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	3326      	adds	r3, #38	@ 0x26
 8009994:	7e3a      	ldrb	r2, [r7, #24]
 8009996:	701a      	strb	r2, [r3, #0]
    desc[45] = com_itf;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	332d      	adds	r3, #45	@ 0x2d
 800999c:	78ba      	ldrb	r2, [r7, #2]
 800999e:	701a      	strb	r2, [r3, #0]
    desc[54] = out_ep;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	3336      	adds	r3, #54	@ 0x36
 80099a4:	7f3a      	ldrb	r2, [r7, #28]
 80099a6:	701a      	strb	r2, [r3, #0]
    desc[61] = in_ep;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	333d      	adds	r3, #61	@ 0x3d
 80099ac:	787a      	ldrb	r2, [r7, #1]
 80099ae:	701a      	strb	r2, [r3, #0]

    desc += 66;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	3342      	adds	r3, #66	@ 0x42
 80099b4:	607b      	str	r3, [r7, #4]
    CDC_IN_EP[i] = in_ep;
 80099b6:	7bfb      	ldrb	r3, [r7, #15]
 80099b8:	491c      	ldr	r1, [pc, #112]	@ (8009a2c <USBD_Update_CDC_ACM_DESC+0xf4>)
 80099ba:	787a      	ldrb	r2, [r7, #1]
 80099bc:	54ca      	strb	r2, [r1, r3]
    CDC_OUT_EP[i] = out_ep;
 80099be:	7bfb      	ldrb	r3, [r7, #15]
 80099c0:	491b      	ldr	r1, [pc, #108]	@ (8009a30 <USBD_Update_CDC_ACM_DESC+0xf8>)
 80099c2:	7f3a      	ldrb	r2, [r7, #28]
 80099c4:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_EP[i] = cmd_ep;
 80099c6:	7bfb      	ldrb	r3, [r7, #15]
 80099c8:	491a      	ldr	r1, [pc, #104]	@ (8009a34 <USBD_Update_CDC_ACM_DESC+0xfc>)
 80099ca:	7e3a      	ldrb	r2, [r7, #24]
 80099cc:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_ITF_NBR[i] = cmd_itf;
 80099ce:	7bfb      	ldrb	r3, [r7, #15]
 80099d0:	4919      	ldr	r1, [pc, #100]	@ (8009a38 <USBD_Update_CDC_ACM_DESC+0x100>)
 80099d2:	78fa      	ldrb	r2, [r7, #3]
 80099d4:	54ca      	strb	r2, [r1, r3]
    CDC_COM_ITF_NBR[i] = com_itf;
 80099d6:	7bfb      	ldrb	r3, [r7, #15]
 80099d8:	4918      	ldr	r1, [pc, #96]	@ (8009a3c <USBD_Update_CDC_ACM_DESC+0x104>)
 80099da:	78ba      	ldrb	r2, [r7, #2]
 80099dc:	54ca      	strb	r2, [r1, r3]
    CDC_STR_DESC_IDX[i] = str_idx;
 80099de:	7bfb      	ldrb	r3, [r7, #15]
 80099e0:	4917      	ldr	r1, [pc, #92]	@ (8009a40 <USBD_Update_CDC_ACM_DESC+0x108>)
 80099e2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80099e6:	54ca      	strb	r2, [r1, r3]

    in_ep += 2;
 80099e8:	787b      	ldrb	r3, [r7, #1]
 80099ea:	3302      	adds	r3, #2
 80099ec:	707b      	strb	r3, [r7, #1]
    cmd_ep = in_ep + 1;
 80099ee:	787b      	ldrb	r3, [r7, #1]
 80099f0:	3301      	adds	r3, #1
 80099f2:	763b      	strb	r3, [r7, #24]
    out_ep++;
 80099f4:	7f3b      	ldrb	r3, [r7, #28]
 80099f6:	3301      	adds	r3, #1
 80099f8:	773b      	strb	r3, [r7, #28]
    str_idx++;
 80099fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80099fe:	3301      	adds	r3, #1
 8009a00:	f887 3020 	strb.w	r3, [r7, #32]

    cmd_itf += 2;
 8009a04:	78fb      	ldrb	r3, [r7, #3]
 8009a06:	3302      	adds	r3, #2
 8009a08:	70fb      	strb	r3, [r7, #3]
    com_itf = cmd_itf + 1;
 8009a0a:	78fb      	ldrb	r3, [r7, #3]
 8009a0c:	3301      	adds	r3, #1
 8009a0e:	70bb      	strb	r3, [r7, #2]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009a10:	7bfb      	ldrb	r3, [r7, #15]
 8009a12:	3301      	adds	r3, #1
 8009a14:	73fb      	strb	r3, [r7, #15]
 8009a16:	7bfb      	ldrb	r3, [r7, #15]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d0a0      	beq.n	800995e <USBD_Update_CDC_ACM_DESC+0x26>
  }
}
 8009a1c:	bf00      	nop
 8009a1e:	bf00      	nop
 8009a20:	3714      	adds	r7, #20
 8009a22:	46bd      	mov	sp, r7
 8009a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a28:	4770      	bx	lr
 8009a2a:	bf00      	nop
 8009a2c:	200022bc 	.word	0x200022bc
 8009a30:	200022c0 	.word	0x200022c0
 8009a34:	200022c4 	.word	0x200022c4
 8009a38:	200022c8 	.word	0x200022c8
 8009a3c:	200022cc 	.word	0x200022cc
 8009a40:	200022d0 	.word	0x200022d0

08009a44 <USBD_COMPOSITE_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b082      	sub	sp, #8
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	460b      	mov	r3, r1
 8009a4e:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.Init(pdev, cfgidx);
 8009a50:	4b08      	ldr	r3, [pc, #32]	@ (8009a74 <USBD_COMPOSITE_Init+0x30>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	78fa      	ldrb	r2, [r7, #3]
 8009a56:	4611      	mov	r1, r2
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	4798      	blx	r3
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.Init(pdev, cfgidx);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.Init(pdev, cfgidx);
 8009a5c:	4b06      	ldr	r3, [pc, #24]	@ (8009a78 <USBD_COMPOSITE_Init+0x34>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	78fa      	ldrb	r2, [r7, #3]
 8009a62:	4611      	mov	r1, r2
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.Init(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 8009a68:	2300      	movs	r3, #0
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3708      	adds	r7, #8
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}
 8009a72:	bf00      	nop
 8009a74:	200000b0 	.word	0x200000b0
 8009a78:	200001d0 	.word	0x200001d0

08009a7c <USBD_COMPOSITE_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b082      	sub	sp, #8
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
 8009a84:	460b      	mov	r3, r1
 8009a86:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.DeInit(pdev, cfgidx);
 8009a88:	4b08      	ldr	r3, [pc, #32]	@ (8009aac <USBD_COMPOSITE_DeInit+0x30>)
 8009a8a:	685b      	ldr	r3, [r3, #4]
 8009a8c:	78fa      	ldrb	r2, [r7, #3]
 8009a8e:	4611      	mov	r1, r2
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	4798      	blx	r3
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.DeInit(pdev, cfgidx);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.DeInit(pdev, cfgidx);
 8009a94:	4b06      	ldr	r3, [pc, #24]	@ (8009ab0 <USBD_COMPOSITE_DeInit+0x34>)
 8009a96:	685b      	ldr	r3, [r3, #4]
 8009a98:	78fa      	ldrb	r2, [r7, #3]
 8009a9a:	4611      	mov	r1, r2
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.DeInit(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 8009aa0:	2300      	movs	r3, #0
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3708      	adds	r7, #8
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}
 8009aaa:	bf00      	nop
 8009aac:	200000b0 	.word	0x200000b0
 8009ab0:	200001d0 	.word	0x200001d0

08009ab4 <USBD_COMPOSITE_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Setup(USBD_HandleTypeDef *pdev,
                                    USBD_SetupReqTypedef *req)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b084      	sub	sp, #16
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	6039      	str	r1, [r7, #0]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8009abe:	2300      	movs	r3, #0
 8009ac0:	73fb      	strb	r3, [r7, #15]
 8009ac2:	e019      	b.n	8009af8 <USBD_COMPOSITE_Setup+0x44>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	889b      	ldrh	r3, [r3, #4]
 8009ac8:	b2da      	uxtb	r2, r3
 8009aca:	7bfb      	ldrb	r3, [r7, #15]
 8009acc:	4915      	ldr	r1, [pc, #84]	@ (8009b24 <USBD_COMPOSITE_Setup+0x70>)
 8009ace:	5ccb      	ldrb	r3, [r1, r3]
 8009ad0:	429a      	cmp	r2, r3
 8009ad2:	d007      	beq.n	8009ae4 <USBD_COMPOSITE_Setup+0x30>
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	889b      	ldrh	r3, [r3, #4]
 8009ad8:	b2da      	uxtb	r2, r3
 8009ada:	7bfb      	ldrb	r3, [r7, #15]
 8009adc:	4912      	ldr	r1, [pc, #72]	@ (8009b28 <USBD_COMPOSITE_Setup+0x74>)
 8009ade:	5ccb      	ldrb	r3, [r1, r3]
 8009ae0:	429a      	cmp	r2, r3
 8009ae2:	d106      	bne.n	8009af2 <USBD_COMPOSITE_Setup+0x3e>
    {
      return USBD_CDC_ACM.Setup(pdev, req);
 8009ae4:	4b11      	ldr	r3, [pc, #68]	@ (8009b2c <USBD_COMPOSITE_Setup+0x78>)
 8009ae6:	689b      	ldr	r3, [r3, #8]
 8009ae8:	6839      	ldr	r1, [r7, #0]
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	4798      	blx	r3
 8009aee:	4603      	mov	r3, r0
 8009af0:	e014      	b.n	8009b1c <USBD_COMPOSITE_Setup+0x68>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8009af2:	7bfb      	ldrb	r3, [r7, #15]
 8009af4:	3301      	adds	r3, #1
 8009af6:	73fb      	strb	r3, [r7, #15]
 8009af8:	7bfb      	ldrb	r3, [r7, #15]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d0e2      	beq.n	8009ac4 <USBD_COMPOSITE_Setup+0x10>
  {
    return USBD_HID_KEYBOARD.Setup(pdev, req);
  }
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (LOBYTE(req->wIndex) == CUSTOM_HID_ITF_NBR)
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	889b      	ldrh	r3, [r3, #4]
 8009b02:	b2da      	uxtb	r2, r3
 8009b04:	4b0a      	ldr	r3, [pc, #40]	@ (8009b30 <USBD_COMPOSITE_Setup+0x7c>)
 8009b06:	781b      	ldrb	r3, [r3, #0]
 8009b08:	429a      	cmp	r2, r3
 8009b0a:	d106      	bne.n	8009b1a <USBD_COMPOSITE_Setup+0x66>
  {
    return USBD_HID_CUSTOM.Setup(pdev, req);
 8009b0c:	4b09      	ldr	r3, [pc, #36]	@ (8009b34 <USBD_COMPOSITE_Setup+0x80>)
 8009b0e:	689b      	ldr	r3, [r3, #8]
 8009b10:	6839      	ldr	r1, [r7, #0]
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	4798      	blx	r3
 8009b16:	4603      	mov	r3, r0
 8009b18:	e000      	b.n	8009b1c <USBD_COMPOSITE_Setup+0x68>
  {
    USBD_PRNT.Setup(pdev, req);
  }
#endif

  return USBD_FAIL;
 8009b1a:	2303      	movs	r3, #3
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3710      	adds	r7, #16
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}
 8009b24:	200022c8 	.word	0x200022c8
 8009b28:	200022cc 	.word	0x200022cc
 8009b2c:	200000b0 	.word	0x200000b0
 8009b30:	20002608 	.word	0x20002608
 8009b34:	200001d0 	.word	0x200001d0

08009b38 <USBD_COMPOSITE_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b084      	sub	sp, #16
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
 8009b40:	460b      	mov	r3, r1
 8009b42:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8009b44:	2300      	movs	r3, #0
 8009b46:	73fb      	strb	r3, [r7, #15]
 8009b48:	e01a      	b.n	8009b80 <USBD_COMPOSITE_DataIn+0x48>
  {
    if (epnum == (CDC_IN_EP[i] & 0x7F) || epnum == (CDC_CMD_EP[i] & 0x7F))
 8009b4a:	78fa      	ldrb	r2, [r7, #3]
 8009b4c:	7bfb      	ldrb	r3, [r7, #15]
 8009b4e:	4918      	ldr	r1, [pc, #96]	@ (8009bb0 <USBD_COMPOSITE_DataIn+0x78>)
 8009b50:	5ccb      	ldrb	r3, [r1, r3]
 8009b52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b56:	429a      	cmp	r2, r3
 8009b58:	d007      	beq.n	8009b6a <USBD_COMPOSITE_DataIn+0x32>
 8009b5a:	78fa      	ldrb	r2, [r7, #3]
 8009b5c:	7bfb      	ldrb	r3, [r7, #15]
 8009b5e:	4915      	ldr	r1, [pc, #84]	@ (8009bb4 <USBD_COMPOSITE_DataIn+0x7c>)
 8009b60:	5ccb      	ldrb	r3, [r1, r3]
 8009b62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b66:	429a      	cmp	r2, r3
 8009b68:	d107      	bne.n	8009b7a <USBD_COMPOSITE_DataIn+0x42>
    {
      return USBD_CDC_ACM.DataIn(pdev, epnum);
 8009b6a:	4b13      	ldr	r3, [pc, #76]	@ (8009bb8 <USBD_COMPOSITE_DataIn+0x80>)
 8009b6c:	695b      	ldr	r3, [r3, #20]
 8009b6e:	78fa      	ldrb	r2, [r7, #3]
 8009b70:	4611      	mov	r1, r2
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	4798      	blx	r3
 8009b76:	4603      	mov	r3, r0
 8009b78:	e015      	b.n	8009ba6 <USBD_COMPOSITE_DataIn+0x6e>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8009b7a:	7bfb      	ldrb	r3, [r7, #15]
 8009b7c:	3301      	adds	r3, #1
 8009b7e:	73fb      	strb	r3, [r7, #15]
 8009b80:	7bfb      	ldrb	r3, [r7, #15]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d0e1      	beq.n	8009b4a <USBD_COMPOSITE_DataIn+0x12>
  {
    return USBD_HID_KEYBOARD.DataIn(pdev, epnum);
  }
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (epnum == (CUSTOM_HID_IN_EP & 0x7F))
 8009b86:	78fa      	ldrb	r2, [r7, #3]
 8009b88:	4b0c      	ldr	r3, [pc, #48]	@ (8009bbc <USBD_COMPOSITE_DataIn+0x84>)
 8009b8a:	781b      	ldrb	r3, [r3, #0]
 8009b8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b90:	429a      	cmp	r2, r3
 8009b92:	d107      	bne.n	8009ba4 <USBD_COMPOSITE_DataIn+0x6c>
  {
    return USBD_HID_CUSTOM.DataIn(pdev, epnum);
 8009b94:	4b0a      	ldr	r3, [pc, #40]	@ (8009bc0 <USBD_COMPOSITE_DataIn+0x88>)
 8009b96:	695b      	ldr	r3, [r3, #20]
 8009b98:	78fa      	ldrb	r2, [r7, #3]
 8009b9a:	4611      	mov	r1, r2
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	4798      	blx	r3
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	e000      	b.n	8009ba6 <USBD_COMPOSITE_DataIn+0x6e>
  {
    USBD_PRNT.DataIn(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 8009ba4:	2303      	movs	r3, #3
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3710      	adds	r7, #16
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}
 8009bae:	bf00      	nop
 8009bb0:	200022bc 	.word	0x200022bc
 8009bb4:	200022c4 	.word	0x200022c4
 8009bb8:	200000b0 	.word	0x200000b0
 8009bbc:	200001ce 	.word	0x200001ce
 8009bc0:	200001d0 	.word	0x200001d0

08009bc4 <USBD_COMPOSITE_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b082      	sub	sp, #8
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.EP0_RxReady(pdev);
 8009bcc:	4b06      	ldr	r3, [pc, #24]	@ (8009be8 <USBD_COMPOSITE_EP0_RxReady+0x24>)
 8009bce:	691b      	ldr	r3, [r3, #16]
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	4798      	blx	r3
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.EP0_RxReady(pdev);
 8009bd4:	4b05      	ldr	r3, [pc, #20]	@ (8009bec <USBD_COMPOSITE_EP0_RxReady+0x28>)
 8009bd6:	691b      	ldr	r3, [r3, #16]
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	4798      	blx	r3
  USBD_DFU.EP0_RxReady(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8009bdc:	2300      	movs	r3, #0
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3708      	adds	r7, #8
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}
 8009be6:	bf00      	nop
 8009be8:	200000b0 	.word	0x200000b0
 8009bec:	200001d0 	.word	0x200001d0

08009bf0 <USBD_COMPOSITE_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b083      	sub	sp, #12
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  USBD_DFU.EP0_TxSent(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8009bf8:	2300      	movs	r3, #0
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	370c      	adds	r7, #12
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c04:	4770      	bx	lr

08009c06 <USBD_COMPOSITE_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_SOF(USBD_HandleTypeDef *pdev)
{
 8009c06:	b480      	push	{r7}
 8009c08:	b083      	sub	sp, #12
 8009c0a:	af00      	add	r7, sp, #0
 8009c0c:	6078      	str	r0, [r7, #4]
  USBD_DFU.SOF(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8009c0e:	2300      	movs	r3, #0
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	370c      	adds	r7, #12
 8009c14:	46bd      	mov	sp, r7
 8009c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1a:	4770      	bx	lr

08009c1c <USBD_COMPOSITE_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b083      	sub	sp, #12
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
 8009c24:	460b      	mov	r3, r1
 8009c26:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8009c28:	2300      	movs	r3, #0
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	370c      	adds	r7, #12
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c34:	4770      	bx	lr

08009c36 <USBD_COMPOSITE_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009c36:	b480      	push	{r7}
 8009c38:	b083      	sub	sp, #12
 8009c3a:	af00      	add	r7, sp, #0
 8009c3c:	6078      	str	r0, [r7, #4]
 8009c3e:	460b      	mov	r3, r1
 8009c40:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8009c42:	2300      	movs	r3, #0
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	370c      	adds	r7, #12
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4e:	4770      	bx	lr

08009c50 <USBD_COMPOSITE_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b084      	sub	sp, #16
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
 8009c58:	460b      	mov	r3, r1
 8009c5a:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	73fb      	strb	r3, [r7, #15]
 8009c60:	e010      	b.n	8009c84 <USBD_COMPOSITE_DataOut+0x34>
  {
    if (epnum == CDC_OUT_EP[i])
 8009c62:	7bfb      	ldrb	r3, [r7, #15]
 8009c64:	4a12      	ldr	r2, [pc, #72]	@ (8009cb0 <USBD_COMPOSITE_DataOut+0x60>)
 8009c66:	5cd3      	ldrb	r3, [r2, r3]
 8009c68:	78fa      	ldrb	r2, [r7, #3]
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d107      	bne.n	8009c7e <USBD_COMPOSITE_DataOut+0x2e>
    {
      return USBD_CDC_ACM.DataOut(pdev, epnum);
 8009c6e:	4b11      	ldr	r3, [pc, #68]	@ (8009cb4 <USBD_COMPOSITE_DataOut+0x64>)
 8009c70:	699b      	ldr	r3, [r3, #24]
 8009c72:	78fa      	ldrb	r2, [r7, #3]
 8009c74:	4611      	mov	r1, r2
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	4798      	blx	r3
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	e013      	b.n	8009ca6 <USBD_COMPOSITE_DataOut+0x56>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8009c7e:	7bfb      	ldrb	r3, [r7, #15]
 8009c80:	3301      	adds	r3, #1
 8009c82:	73fb      	strb	r3, [r7, #15]
 8009c84:	7bfb      	ldrb	r3, [r7, #15]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d0eb      	beq.n	8009c62 <USBD_COMPOSITE_DataOut+0x12>
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (epnum == CUSTOM_HID_OUT_EP)
 8009c8a:	4b0b      	ldr	r3, [pc, #44]	@ (8009cb8 <USBD_COMPOSITE_DataOut+0x68>)
 8009c8c:	781b      	ldrb	r3, [r3, #0]
 8009c8e:	78fa      	ldrb	r2, [r7, #3]
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d107      	bne.n	8009ca4 <USBD_COMPOSITE_DataOut+0x54>
  {
    return USBD_HID_CUSTOM.DataOut(pdev, epnum);
 8009c94:	4b09      	ldr	r3, [pc, #36]	@ (8009cbc <USBD_COMPOSITE_DataOut+0x6c>)
 8009c96:	699b      	ldr	r3, [r3, #24]
 8009c98:	78fa      	ldrb	r2, [r7, #3]
 8009c9a:	4611      	mov	r1, r2
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	4798      	blx	r3
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	e000      	b.n	8009ca6 <USBD_COMPOSITE_DataOut+0x56>
  {
    USBD_PRNT.DataOut(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 8009ca4:	2303      	movs	r3, #3
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3710      	adds	r7, #16
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}
 8009cae:	bf00      	nop
 8009cb0:	200022c0 	.word	0x200022c0
 8009cb4:	200000b0 	.word	0x200000b0
 8009cb8:	200001cf 	.word	0x200001cf
 8009cbc:	200001d0 	.word	0x200001d0

08009cc0 <USBD_COMPOSITE_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetHSCfgDesc(uint16_t *length)
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b083      	sub	sp, #12
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	226b      	movs	r2, #107	@ 0x6b
 8009ccc:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 8009cce:	4b03      	ldr	r3, [pc, #12]	@ (8009cdc <USBD_COMPOSITE_GetHSCfgDesc+0x1c>)
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	370c      	adds	r7, #12
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cda:	4770      	bx	lr
 8009cdc:	2000255c 	.word	0x2000255c

08009ce0 <USBD_COMPOSITE_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetFSCfgDesc(uint16_t *length)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b083      	sub	sp, #12
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	226b      	movs	r2, #107	@ 0x6b
 8009cec:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
 8009cee:	4b03      	ldr	r3, [pc, #12]	@ (8009cfc <USBD_COMPOSITE_GetFSCfgDesc+0x1c>)
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	370c      	adds	r7, #12
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfa:	4770      	bx	lr
 8009cfc:	200024f0 	.word	0x200024f0

08009d00 <USBD_COMPOSITE_GetOtherSpeedCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009d00:	b480      	push	{r7}
 8009d02:	b083      	sub	sp, #12
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
#if (USBD_USE_HS == 1)
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
#else
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	226b      	movs	r2, #107	@ 0x6b
 8009d0c:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 8009d0e:	4b03      	ldr	r3, [pc, #12]	@ (8009d1c <USBD_COMPOSITE_GetOtherSpeedCfgDesc+0x1c>)
#endif
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	370c      	adds	r7, #12
 8009d14:	46bd      	mov	sp, r7
 8009d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1a:	4770      	bx	lr
 8009d1c:	2000255c 	.word	0x2000255c

08009d20 <USBD_COMPOSITE_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_COMPOSITE_GetDeviceQualifierDesc(uint16_t *length)
{
 8009d20:	b480      	push	{r7}
 8009d22:	b083      	sub	sp, #12
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_DeviceQualifierDesc);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	220a      	movs	r2, #10
 8009d2c:	801a      	strh	r2, [r3, #0]
  return USBD_COMPOSITE_DeviceQualifierDesc;
 8009d2e:	4b03      	ldr	r3, [pc, #12]	@ (8009d3c <USBD_COMPOSITE_GetDeviceQualifierDesc+0x1c>)
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	370c      	adds	r7, #12
 8009d34:	46bd      	mov	sp, r7
 8009d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3a:	4770      	bx	lr
 8009d3c:	200001c4 	.word	0x200001c4

08009d40 <USBD_COMPOSITE_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_COMPOSITE_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b08a      	sub	sp, #40	@ 0x28
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	60f8      	str	r0, [r7, #12]
 8009d48:	460b      	mov	r3, r1
 8009d4a:	607a      	str	r2, [r7, #4]
 8009d4c:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[64];

  /* Check if the requested string interface is supported */
  if (index <= USBD_Track_String_Index)
 8009d4e:	4b20      	ldr	r3, [pc, #128]	@ (8009dd0 <USBD_COMPOSITE_GetUsrStringDesc+0x90>)
 8009d50:	781b      	ldrb	r3, [r3, #0]
 8009d52:	7afa      	ldrb	r2, [r7, #11]
 8009d54:	429a      	cmp	r2, r3
 8009d56:	d835      	bhi.n	8009dc4 <USBD_COMPOSITE_GetUsrStringDesc+0x84>
  {
#if (USBD_USE_CDC_ACM == 1)
    char str_buffer[16] = "";
 8009d58:	f107 0314 	add.w	r3, r7, #20
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	601a      	str	r2, [r3, #0]
 8009d60:	605a      	str	r2, [r3, #4]
 8009d62:	609a      	str	r2, [r3, #8]
 8009d64:	60da      	str	r2, [r3, #12]
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8009d66:	2300      	movs	r3, #0
 8009d68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009d6c:	e01a      	b.n	8009da4 <USBD_COMPOSITE_GetUsrStringDesc+0x64>
    {
      if (index == CDC_STR_DESC_IDX[i])
 8009d6e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009d72:	4a18      	ldr	r2, [pc, #96]	@ (8009dd4 <USBD_COMPOSITE_GetUsrStringDesc+0x94>)
 8009d74:	5cd3      	ldrb	r3, [r2, r3]
 8009d76:	7afa      	ldrb	r2, [r7, #11]
 8009d78:	429a      	cmp	r2, r3
 8009d7a:	d10e      	bne.n	8009d9a <USBD_COMPOSITE_GetUsrStringDesc+0x5a>
      {
        snprintf(str_buffer, sizeof(str_buffer), CDC_ACM_STR_DESC, i);
 8009d7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009d80:	f107 0014 	add.w	r0, r7, #20
 8009d84:	4a14      	ldr	r2, [pc, #80]	@ (8009dd8 <USBD_COMPOSITE_GetUsrStringDesc+0x98>)
 8009d86:	2110      	movs	r1, #16
 8009d88:	f002 f8bc 	bl	800bf04 <sniprintf>
        USBD_GetString((uint8_t *)str_buffer, USBD_StrDesc, length);
 8009d8c:	f107 0314 	add.w	r3, r7, #20
 8009d90:	687a      	ldr	r2, [r7, #4]
 8009d92:	4912      	ldr	r1, [pc, #72]	@ (8009ddc <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 8009d94:	4618      	mov	r0, r3
 8009d96:	f001 fcf4 	bl	800b782 <USBD_GetString>
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8009d9a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009d9e:	3301      	adds	r3, #1
 8009da0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009da4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d0e0      	beq.n	8009d6e <USBD_COMPOSITE_GetUsrStringDesc+0x2e>
    {
      USBD_GetString((uint8_t *)HID_KEYBOARD_STR_DESC, USBD_StrDesc, length);
    }
#endif
#if (USBD_USE_HID_CUSTOM == 1)
    if (index == CUSTOM_HID_STR_DESC_IDX)
 8009dac:	4b0c      	ldr	r3, [pc, #48]	@ (8009de0 <USBD_COMPOSITE_GetUsrStringDesc+0xa0>)
 8009dae:	781b      	ldrb	r3, [r3, #0]
 8009db0:	7afa      	ldrb	r2, [r7, #11]
 8009db2:	429a      	cmp	r2, r3
 8009db4:	d104      	bne.n	8009dc0 <USBD_COMPOSITE_GetUsrStringDesc+0x80>
    {
      USBD_GetString((uint8_t *)CUSTOM_HID_STR_DESC, USBD_StrDesc, length);
 8009db6:	687a      	ldr	r2, [r7, #4]
 8009db8:	4908      	ldr	r1, [pc, #32]	@ (8009ddc <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 8009dba:	480a      	ldr	r0, [pc, #40]	@ (8009de4 <USBD_COMPOSITE_GetUsrStringDesc+0xa4>)
 8009dbc:	f001 fce1 	bl	800b782 <USBD_GetString>
    if (index == PRINTER_STR_DESC_IDX)
    {
      USBD_GetString((uint8_t *)PRNT_STR_DESC, USBD_StrDesc, length);
    }
#endif
    return USBD_StrDesc;
 8009dc0:	4b06      	ldr	r3, [pc, #24]	@ (8009ddc <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 8009dc2:	e000      	b.n	8009dc6 <USBD_COMPOSITE_GetUsrStringDesc+0x86>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 8009dc4:	2300      	movs	r3, #0
  }
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3728      	adds	r7, #40	@ 0x28
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
 8009dce:	bf00      	nop
 8009dd0:	200001c0 	.word	0x200001c0
 8009dd4:	200022d0 	.word	0x200022d0
 8009dd8:	0800c8c0 	.word	0x0800c8c0
 8009ddc:	200025c8 	.word	0x200025c8
 8009de0:	20002609 	.word	0x20002609
 8009de4:	0800c8d0 	.word	0x0800c8d0

08009de8 <USBD_COMPOSITE_Mount_Class>:
#endif

void USBD_COMPOSITE_Mount_Class(void)
{
 8009de8:	b590      	push	{r4, r7, lr}
 8009dea:	b089      	sub	sp, #36	@ 0x24
 8009dec:	af04      	add	r7, sp, #16
  uint16_t len = 0;
 8009dee:	2300      	movs	r3, #0
 8009df0:	80bb      	strh	r3, [r7, #4]
  uint8_t *ptr = NULL;
 8009df2:	2300      	movs	r3, #0
 8009df4:	60fb      	str	r3, [r7, #12]

  uint8_t in_ep_track = 0x81;
 8009df6:	2381      	movs	r3, #129	@ 0x81
 8009df8:	72fb      	strb	r3, [r7, #11]
  uint8_t out_ep_track = 0x01;
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	72bb      	strb	r3, [r7, #10]
  uint8_t interface_no_track = 0x00;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	727b      	strb	r3, [r7, #9]
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_HID_CUSTOM == 1)
  ptr = USBD_HID_CUSTOM.GetFSConfigDescriptor(&len);
 8009e02:	4b74      	ldr	r3, [pc, #464]	@ (8009fd4 <USBD_COMPOSITE_Mount_Class+0x1ec>)
 8009e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e06:	1d3a      	adds	r2, r7, #4
 8009e08:	4610      	mov	r0, r2
 8009e0a:	4798      	blx	r3
 8009e0c:	60f8      	str	r0, [r7, #12]
  USBD_Update_HID_Custom_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 8009e0e:	4b72      	ldr	r3, [pc, #456]	@ (8009fd8 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8009e10:	781b      	ldrb	r3, [r3, #0]
 8009e12:	7ab8      	ldrb	r0, [r7, #10]
 8009e14:	7afa      	ldrb	r2, [r7, #11]
 8009e16:	7a79      	ldrb	r1, [r7, #9]
 8009e18:	9300      	str	r3, [sp, #0]
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	68f8      	ldr	r0, [r7, #12]
 8009e1e:	f000 fbcf 	bl	800a5c0 <USBD_Update_HID_Custom_DESC>
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_HID_CUSTOM_DESC, ptr + 0x09, len - 0x09);
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	3309      	adds	r3, #9
 8009e26:	88ba      	ldrh	r2, [r7, #4]
 8009e28:	3a09      	subs	r2, #9
 8009e2a:	4619      	mov	r1, r3
 8009e2c:	486b      	ldr	r0, [pc, #428]	@ (8009fdc <USBD_COMPOSITE_Mount_Class+0x1f4>)
 8009e2e:	f002 f8d3 	bl	800bfd8 <memcpy>

  ptr = USBD_HID_CUSTOM.GetHSConfigDescriptor(&len);
 8009e32:	4b68      	ldr	r3, [pc, #416]	@ (8009fd4 <USBD_COMPOSITE_Mount_Class+0x1ec>)
 8009e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e36:	1d3a      	adds	r2, r7, #4
 8009e38:	4610      	mov	r0, r2
 8009e3a:	4798      	blx	r3
 8009e3c:	60f8      	str	r0, [r7, #12]
  USBD_Update_HID_Custom_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 8009e3e:	4b66      	ldr	r3, [pc, #408]	@ (8009fd8 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8009e40:	781b      	ldrb	r3, [r3, #0]
 8009e42:	7ab8      	ldrb	r0, [r7, #10]
 8009e44:	7afa      	ldrb	r2, [r7, #11]
 8009e46:	7a79      	ldrb	r1, [r7, #9]
 8009e48:	9300      	str	r3, [sp, #0]
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	68f8      	ldr	r0, [r7, #12]
 8009e4e:	f000 fbb7 	bl	800a5c0 <USBD_Update_HID_Custom_DESC>
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_HID_CUSTOM_DESC, ptr + 0x09, len - 0x09);
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	3309      	adds	r3, #9
 8009e56:	88ba      	ldrh	r2, [r7, #4]
 8009e58:	3a09      	subs	r2, #9
 8009e5a:	4619      	mov	r1, r3
 8009e5c:	4860      	ldr	r0, [pc, #384]	@ (8009fe0 <USBD_COMPOSITE_Mount_Class+0x1f8>)
 8009e5e:	f002 f8bb 	bl	800bfd8 <memcpy>

  in_ep_track += 1;
 8009e62:	7afb      	ldrb	r3, [r7, #11]
 8009e64:	3301      	adds	r3, #1
 8009e66:	72fb      	strb	r3, [r7, #11]
  out_ep_track += 1;
 8009e68:	7abb      	ldrb	r3, [r7, #10]
 8009e6a:	3301      	adds	r3, #1
 8009e6c:	72bb      	strb	r3, [r7, #10]
  interface_no_track += 1;
 8009e6e:	7a7b      	ldrb	r3, [r7, #9]
 8009e70:	3301      	adds	r3, #1
 8009e72:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += 1;
 8009e74:	4b58      	ldr	r3, [pc, #352]	@ (8009fd8 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8009e76:	781b      	ldrb	r3, [r3, #0]
 8009e78:	3301      	adds	r3, #1
 8009e7a:	b2da      	uxtb	r2, r3
 8009e7c:	4b56      	ldr	r3, [pc, #344]	@ (8009fd8 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8009e7e:	701a      	strb	r2, [r3, #0]
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_CDC_ACM == 1)
  ptr = USBD_CDC_ACM.GetFSConfigDescriptor(&len);
 8009e80:	4b58      	ldr	r3, [pc, #352]	@ (8009fe4 <USBD_COMPOSITE_Mount_Class+0x1fc>)
 8009e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e84:	1d3a      	adds	r2, r7, #4
 8009e86:	4610      	mov	r0, r2
 8009e88:	4798      	blx	r3
 8009e8a:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 8009e8c:	7a7b      	ldrb	r3, [r7, #9]
 8009e8e:	3301      	adds	r3, #1
 8009e90:	b2d8      	uxtb	r0, r3
 8009e92:	7afb      	ldrb	r3, [r7, #11]
 8009e94:	3301      	adds	r3, #1
 8009e96:	b2db      	uxtb	r3, r3
 8009e98:	4a4f      	ldr	r2, [pc, #316]	@ (8009fd8 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8009e9a:	7812      	ldrb	r2, [r2, #0]
 8009e9c:	7afc      	ldrb	r4, [r7, #11]
 8009e9e:	7a79      	ldrb	r1, [r7, #9]
 8009ea0:	9202      	str	r2, [sp, #8]
 8009ea2:	7aba      	ldrb	r2, [r7, #10]
 8009ea4:	9201      	str	r2, [sp, #4]
 8009ea6:	9300      	str	r3, [sp, #0]
 8009ea8:	4623      	mov	r3, r4
 8009eaa:	4602      	mov	r2, r0
 8009eac:	68f8      	ldr	r0, [r7, #12]
 8009eae:	f7ff fd43 	bl	8009938 <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	3309      	adds	r3, #9
 8009eb6:	88ba      	ldrh	r2, [r7, #4]
 8009eb8:	3a09      	subs	r2, #9
 8009eba:	4619      	mov	r1, r3
 8009ebc:	484a      	ldr	r0, [pc, #296]	@ (8009fe8 <USBD_COMPOSITE_Mount_Class+0x200>)
 8009ebe:	f002 f88b 	bl	800bfd8 <memcpy>

  ptr = USBD_CDC_ACM.GetHSConfigDescriptor(&len);
 8009ec2:	4b48      	ldr	r3, [pc, #288]	@ (8009fe4 <USBD_COMPOSITE_Mount_Class+0x1fc>)
 8009ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ec6:	1d3a      	adds	r2, r7, #4
 8009ec8:	4610      	mov	r0, r2
 8009eca:	4798      	blx	r3
 8009ecc:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 8009ece:	7a7b      	ldrb	r3, [r7, #9]
 8009ed0:	3301      	adds	r3, #1
 8009ed2:	b2d8      	uxtb	r0, r3
 8009ed4:	7afb      	ldrb	r3, [r7, #11]
 8009ed6:	3301      	adds	r3, #1
 8009ed8:	b2db      	uxtb	r3, r3
 8009eda:	4a3f      	ldr	r2, [pc, #252]	@ (8009fd8 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8009edc:	7812      	ldrb	r2, [r2, #0]
 8009ede:	7afc      	ldrb	r4, [r7, #11]
 8009ee0:	7a79      	ldrb	r1, [r7, #9]
 8009ee2:	9202      	str	r2, [sp, #8]
 8009ee4:	7aba      	ldrb	r2, [r7, #10]
 8009ee6:	9201      	str	r2, [sp, #4]
 8009ee8:	9300      	str	r3, [sp, #0]
 8009eea:	4623      	mov	r3, r4
 8009eec:	4602      	mov	r2, r0
 8009eee:	68f8      	ldr	r0, [r7, #12]
 8009ef0:	f7ff fd22 	bl	8009938 <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	3309      	adds	r3, #9
 8009ef8:	88ba      	ldrh	r2, [r7, #4]
 8009efa:	3a09      	subs	r2, #9
 8009efc:	4619      	mov	r1, r3
 8009efe:	483b      	ldr	r0, [pc, #236]	@ (8009fec <USBD_COMPOSITE_Mount_Class+0x204>)
 8009f00:	f002 f86a 	bl	800bfd8 <memcpy>

  in_ep_track += 2 * USBD_CDC_ACM_COUNT;
 8009f04:	7afb      	ldrb	r3, [r7, #11]
 8009f06:	3302      	adds	r3, #2
 8009f08:	72fb      	strb	r3, [r7, #11]
  out_ep_track += 1 * USBD_CDC_ACM_COUNT;
 8009f0a:	7abb      	ldrb	r3, [r7, #10]
 8009f0c:	3301      	adds	r3, #1
 8009f0e:	72bb      	strb	r3, [r7, #10]
  interface_no_track += 2 * USBD_CDC_ACM_COUNT;
 8009f10:	7a7b      	ldrb	r3, [r7, #9]
 8009f12:	3302      	adds	r3, #2
 8009f14:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += USBD_CDC_ACM_COUNT;
 8009f16:	4b30      	ldr	r3, [pc, #192]	@ (8009fd8 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8009f18:	781b      	ldrb	r3, [r3, #0]
 8009f1a:	3301      	adds	r3, #1
 8009f1c:	b2da      	uxtb	r2, r3
 8009f1e:	4b2e      	ldr	r3, [pc, #184]	@ (8009fd8 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8009f20:	701a      	strb	r2, [r3, #0]
#endif

  uint16_t CFG_SIZE = sizeof(USBD_COMPOSITE_CFG_DESC_t);
 8009f22:	236b      	movs	r3, #107	@ 0x6b
 8009f24:	80fb      	strh	r3, [r7, #6]
  ptr = USBD_COMPOSITE_HSCfgDesc.CONFIG_DESC;
 8009f26:	4b32      	ldr	r3, [pc, #200]	@ (8009ff0 <USBD_COMPOSITE_Mount_Class+0x208>)
 8009f28:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	2209      	movs	r2, #9
 8009f2e:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	3301      	adds	r3, #1
 8009f34:	2202      	movs	r2, #2
 8009f36:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	3302      	adds	r3, #2
 8009f3c:	88fa      	ldrh	r2, [r7, #6]
 8009f3e:	b2d2      	uxtb	r2, r2
 8009f40:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 8009f42:	88fb      	ldrh	r3, [r7, #6]
 8009f44:	0a1b      	lsrs	r3, r3, #8
 8009f46:	b29a      	uxth	r2, r3
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	3303      	adds	r3, #3
 8009f4c:	b2d2      	uxtb	r2, r2
 8009f4e:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	3304      	adds	r3, #4
 8009f54:	7a7a      	ldrb	r2, [r7, #9]
 8009f56:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	3305      	adds	r3, #5
 8009f5c:	2201      	movs	r2, #1
 8009f5e:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	3306      	adds	r3, #6
 8009f64:	2200      	movs	r2, #0
 8009f66:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	3307      	adds	r3, #7
 8009f6c:	22c0      	movs	r2, #192	@ 0xc0
 8009f6e:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	3308      	adds	r3, #8
 8009f74:	2232      	movs	r2, #50	@ 0x32
 8009f76:	701a      	strb	r2, [r3, #0]

  ptr = USBD_COMPOSITE_FSCfgDesc.CONFIG_DESC;
 8009f78:	4b1e      	ldr	r3, [pc, #120]	@ (8009ff4 <USBD_COMPOSITE_Mount_Class+0x20c>)
 8009f7a:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	2209      	movs	r2, #9
 8009f80:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	3301      	adds	r3, #1
 8009f86:	2202      	movs	r2, #2
 8009f88:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	3302      	adds	r3, #2
 8009f8e:	88fa      	ldrh	r2, [r7, #6]
 8009f90:	b2d2      	uxtb	r2, r2
 8009f92:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 8009f94:	88fb      	ldrh	r3, [r7, #6]
 8009f96:	0a1b      	lsrs	r3, r3, #8
 8009f98:	b29a      	uxth	r2, r3
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	3303      	adds	r3, #3
 8009f9e:	b2d2      	uxtb	r2, r2
 8009fa0:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	3304      	adds	r3, #4
 8009fa6:	7a7a      	ldrb	r2, [r7, #9]
 8009fa8:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	3305      	adds	r3, #5
 8009fae:	2201      	movs	r2, #1
 8009fb0:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	3306      	adds	r3, #6
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	3307      	adds	r3, #7
 8009fbe:	22c0      	movs	r2, #192	@ 0xc0
 8009fc0:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	3308      	adds	r3, #8
 8009fc6:	2232      	movs	r2, #50	@ 0x32
 8009fc8:	701a      	strb	r2, [r3, #0]

  (void)out_ep_track;
  (void)in_ep_track;
}
 8009fca:	bf00      	nop
 8009fcc:	3714      	adds	r7, #20
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd90      	pop	{r4, r7, pc}
 8009fd2:	bf00      	nop
 8009fd4:	200001d0 	.word	0x200001d0
 8009fd8:	200001c0 	.word	0x200001c0
 8009fdc:	200024f9 	.word	0x200024f9
 8009fe0:	20002565 	.word	0x20002565
 8009fe4:	200000b0 	.word	0x200000b0
 8009fe8:	20002519 	.word	0x20002519
 8009fec:	20002585 	.word	0x20002585
 8009ff0:	2000255c 	.word	0x2000255c
 8009ff4:	200024f0 	.word	0x200024f0

08009ff8 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b084      	sub	sp, #16
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
 800a000:	460b      	mov	r3, r1
 800a002:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = &CUSTOM_HID_Instance;
 800a004:	4b43      	ldr	r3, [pc, #268]	@ (800a114 <USBD_CUSTOM_HID_Init+0x11c>)
 800a006:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d105      	bne.n	800a01a <USBD_CUSTOM_HID_Init+0x22>
  {
    pdev->pClassData_HID_Custom = NULL;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2200      	movs	r2, #0
 800a012:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
    return (uint8_t)USBD_EMEM;
 800a016:	2302      	movs	r3, #2
 800a018:	e078      	b.n	800a10c <USBD_CUSTOM_HID_Init+0x114>
  }

  pdev->pClassData_HID_Custom = (void *)hhid;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	68fa      	ldr	r2, [r7, #12]
 800a01e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	7c1b      	ldrb	r3, [r3, #16]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d11b      	bne.n	800a062 <USBD_CUSTOM_HID_Init+0x6a>
  {
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800a02a:	4b3b      	ldr	r3, [pc, #236]	@ (800a118 <USBD_CUSTOM_HID_Init+0x120>)
 800a02c:	781b      	ldrb	r3, [r3, #0]
 800a02e:	f003 020f 	and.w	r2, r3, #15
 800a032:	6879      	ldr	r1, [r7, #4]
 800a034:	4613      	mov	r3, r2
 800a036:	009b      	lsls	r3, r3, #2
 800a038:	4413      	add	r3, r2
 800a03a:	009b      	lsls	r3, r3, #2
 800a03c:	440b      	add	r3, r1
 800a03e:	3326      	adds	r3, #38	@ 0x26
 800a040:	2205      	movs	r2, #5
 800a042:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800a044:	4b35      	ldr	r3, [pc, #212]	@ (800a11c <USBD_CUSTOM_HID_Init+0x124>)
 800a046:	781b      	ldrb	r3, [r3, #0]
 800a048:	f003 020f 	and.w	r2, r3, #15
 800a04c:	6879      	ldr	r1, [r7, #4]
 800a04e:	4613      	mov	r3, r2
 800a050:	009b      	lsls	r3, r3, #2
 800a052:	4413      	add	r3, r2
 800a054:	009b      	lsls	r3, r3, #2
 800a056:	440b      	add	r3, r1
 800a058:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800a05c:	2205      	movs	r2, #5
 800a05e:	801a      	strh	r2, [r3, #0]
 800a060:	e01a      	b.n	800a098 <USBD_CUSTOM_HID_Init+0xa0>
  }
  else /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800a062:	4b2d      	ldr	r3, [pc, #180]	@ (800a118 <USBD_CUSTOM_HID_Init+0x120>)
 800a064:	781b      	ldrb	r3, [r3, #0]
 800a066:	f003 020f 	and.w	r2, r3, #15
 800a06a:	6879      	ldr	r1, [r7, #4]
 800a06c:	4613      	mov	r3, r2
 800a06e:	009b      	lsls	r3, r3, #2
 800a070:	4413      	add	r3, r2
 800a072:	009b      	lsls	r3, r3, #2
 800a074:	440b      	add	r3, r1
 800a076:	3326      	adds	r3, #38	@ 0x26
 800a078:	2201      	movs	r2, #1
 800a07a:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800a07c:	4b27      	ldr	r3, [pc, #156]	@ (800a11c <USBD_CUSTOM_HID_Init+0x124>)
 800a07e:	781b      	ldrb	r3, [r3, #0]
 800a080:	f003 020f 	and.w	r2, r3, #15
 800a084:	6879      	ldr	r1, [r7, #4]
 800a086:	4613      	mov	r3, r2
 800a088:	009b      	lsls	r3, r3, #2
 800a08a:	4413      	add	r3, r2
 800a08c:	009b      	lsls	r3, r3, #2
 800a08e:	440b      	add	r3, r1
 800a090:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800a094:	2201      	movs	r2, #1
 800a096:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_IN_EP, USBD_EP_TYPE_INTR,
 800a098:	4b1f      	ldr	r3, [pc, #124]	@ (800a118 <USBD_CUSTOM_HID_Init+0x120>)
 800a09a:	7819      	ldrb	r1, [r3, #0]
 800a09c:	2340      	movs	r3, #64	@ 0x40
 800a09e:	2203      	movs	r2, #3
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f001 fde0 	bl	800bc66 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].is_used = 1U;
 800a0a6:	4b1c      	ldr	r3, [pc, #112]	@ (800a118 <USBD_CUSTOM_HID_Init+0x120>)
 800a0a8:	781b      	ldrb	r3, [r3, #0]
 800a0aa:	f003 020f 	and.w	r2, r3, #15
 800a0ae:	6879      	ldr	r1, [r7, #4]
 800a0b0:	4613      	mov	r3, r2
 800a0b2:	009b      	lsls	r3, r3, #2
 800a0b4:	4413      	add	r3, r2
 800a0b6:	009b      	lsls	r3, r3, #2
 800a0b8:	440b      	add	r3, r1
 800a0ba:	3324      	adds	r3, #36	@ 0x24
 800a0bc:	2201      	movs	r2, #1
 800a0be:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_OUT_EP, USBD_EP_TYPE_INTR,
 800a0c0:	4b16      	ldr	r3, [pc, #88]	@ (800a11c <USBD_CUSTOM_HID_Init+0x124>)
 800a0c2:	7819      	ldrb	r1, [r3, #0]
 800a0c4:	2340      	movs	r3, #64	@ 0x40
 800a0c6:	2203      	movs	r2, #3
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f001 fdcc 	bl	800bc66 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].is_used = 1U;
 800a0ce:	4b13      	ldr	r3, [pc, #76]	@ (800a11c <USBD_CUSTOM_HID_Init+0x124>)
 800a0d0:	781b      	ldrb	r3, [r3, #0]
 800a0d2:	f003 020f 	and.w	r2, r3, #15
 800a0d6:	6879      	ldr	r1, [r7, #4]
 800a0d8:	4613      	mov	r3, r2
 800a0da:	009b      	lsls	r3, r3, #2
 800a0dc:	4413      	add	r3, r2
 800a0de:	009b      	lsls	r3, r3, #2
 800a0e0:	440b      	add	r3, r1
 800a0e2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->Init();
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800a0f8:	685b      	ldr	r3, [r3, #4]
 800a0fa:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_OUT_EP, hhid->Report_buf,
 800a0fc:	4b07      	ldr	r3, [pc, #28]	@ (800a11c <USBD_CUSTOM_HID_Init+0x124>)
 800a0fe:	7819      	ldrb	r1, [r3, #0]
 800a100:	68fa      	ldr	r2, [r7, #12]
 800a102:	2340      	movs	r3, #64	@ 0x40
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f001 fe9d 	bl	800be44 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 800a10a:	2300      	movs	r3, #0
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	3710      	adds	r7, #16
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}
 800a114:	2000260c 	.word	0x2000260c
 800a118:	200001ce 	.word	0x200001ce
 800a11c:	200001cf 	.word	0x200001cf

0800a120 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b082      	sub	sp, #8
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
 800a128:	460b      	mov	r3, r1
 800a12a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_IN_EP);
 800a12c:	4b2a      	ldr	r3, [pc, #168]	@ (800a1d8 <USBD_CUSTOM_HID_DeInit+0xb8>)
 800a12e:	781b      	ldrb	r3, [r3, #0]
 800a130:	4619      	mov	r1, r3
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f001 fdbd 	bl	800bcb2 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].is_used = 0U;
 800a138:	4b27      	ldr	r3, [pc, #156]	@ (800a1d8 <USBD_CUSTOM_HID_DeInit+0xb8>)
 800a13a:	781b      	ldrb	r3, [r3, #0]
 800a13c:	f003 020f 	and.w	r2, r3, #15
 800a140:	6879      	ldr	r1, [r7, #4]
 800a142:	4613      	mov	r3, r2
 800a144:	009b      	lsls	r3, r3, #2
 800a146:	4413      	add	r3, r2
 800a148:	009b      	lsls	r3, r3, #2
 800a14a:	440b      	add	r3, r1
 800a14c:	3324      	adds	r3, #36	@ 0x24
 800a14e:	2200      	movs	r2, #0
 800a150:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = 0U;
 800a152:	4b21      	ldr	r3, [pc, #132]	@ (800a1d8 <USBD_CUSTOM_HID_DeInit+0xb8>)
 800a154:	781b      	ldrb	r3, [r3, #0]
 800a156:	f003 020f 	and.w	r2, r3, #15
 800a15a:	6879      	ldr	r1, [r7, #4]
 800a15c:	4613      	mov	r3, r2
 800a15e:	009b      	lsls	r3, r3, #2
 800a160:	4413      	add	r3, r2
 800a162:	009b      	lsls	r3, r3, #2
 800a164:	440b      	add	r3, r1
 800a166:	3326      	adds	r3, #38	@ 0x26
 800a168:	2200      	movs	r2, #0
 800a16a:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_OUT_EP);
 800a16c:	4b1b      	ldr	r3, [pc, #108]	@ (800a1dc <USBD_CUSTOM_HID_DeInit+0xbc>)
 800a16e:	781b      	ldrb	r3, [r3, #0]
 800a170:	4619      	mov	r1, r3
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f001 fd9d 	bl	800bcb2 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].is_used = 0U;
 800a178:	4b18      	ldr	r3, [pc, #96]	@ (800a1dc <USBD_CUSTOM_HID_DeInit+0xbc>)
 800a17a:	781b      	ldrb	r3, [r3, #0]
 800a17c:	f003 020f 	and.w	r2, r3, #15
 800a180:	6879      	ldr	r1, [r7, #4]
 800a182:	4613      	mov	r3, r2
 800a184:	009b      	lsls	r3, r3, #2
 800a186:	4413      	add	r3, r2
 800a188:	009b      	lsls	r3, r3, #2
 800a18a:	440b      	add	r3, r1
 800a18c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a190:	2200      	movs	r2, #0
 800a192:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = 0U;
 800a194:	4b11      	ldr	r3, [pc, #68]	@ (800a1dc <USBD_CUSTOM_HID_DeInit+0xbc>)
 800a196:	781b      	ldrb	r3, [r3, #0]
 800a198:	f003 020f 	and.w	r2, r3, #15
 800a19c:	6879      	ldr	r1, [r7, #4]
 800a19e:	4613      	mov	r3, r2
 800a1a0:	009b      	lsls	r3, r3, #2
 800a1a2:	4413      	add	r3, r2
 800a1a4:	009b      	lsls	r3, r3, #2
 800a1a6:	440b      	add	r3, r1
 800a1a8:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassData_HID_Custom != NULL)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d008      	beq.n	800a1cc <USBD_CUSTOM_HID_DeInit+0xac>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->DeInit();
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800a1c0:	689b      	ldr	r3, [r3, #8]
 800a1c2:	4798      	blx	r3
#if (0)
    USBD_free(pdev->pClassData_HID_Custom);
#endif
    pdev->pClassData_HID_Custom = NULL;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
  }

  return (uint8_t)USBD_OK;
 800a1cc:	2300      	movs	r3, #0
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3708      	adds	r7, #8
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}
 800a1d6:	bf00      	nop
 800a1d8:	200001ce 	.word	0x200001ce
 800a1dc:	200001cf 	.word	0x200001cf

0800a1e0 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b088      	sub	sp, #32
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
 800a1e8:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a1f0:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800a1fe:	2300      	movs	r3, #0
 800a200:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 800a202:	693b      	ldr	r3, [r7, #16]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d101      	bne.n	800a20c <USBD_CUSTOM_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800a208:	2303      	movs	r3, #3
 800a20a:	e0ed      	b.n	800a3e8 <USBD_CUSTOM_HID_Setup+0x208>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	781b      	ldrb	r3, [r3, #0]
 800a210:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a214:	2b00      	cmp	r3, #0
 800a216:	d052      	beq.n	800a2be <USBD_CUSTOM_HID_Setup+0xde>
 800a218:	2b20      	cmp	r3, #32
 800a21a:	f040 80dd 	bne.w	800a3d8 <USBD_CUSTOM_HID_Setup+0x1f8>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	785b      	ldrb	r3, [r3, #1]
 800a222:	3b02      	subs	r3, #2
 800a224:	2b09      	cmp	r3, #9
 800a226:	d842      	bhi.n	800a2ae <USBD_CUSTOM_HID_Setup+0xce>
 800a228:	a201      	add	r2, pc, #4	@ (adr r2, 800a230 <USBD_CUSTOM_HID_Setup+0x50>)
 800a22a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a22e:	bf00      	nop
 800a230:	0800a289 	.word	0x0800a289
 800a234:	0800a267 	.word	0x0800a267
 800a238:	0800a2af 	.word	0x0800a2af
 800a23c:	0800a2af 	.word	0x0800a2af
 800a240:	0800a2af 	.word	0x0800a2af
 800a244:	0800a2af 	.word	0x0800a2af
 800a248:	0800a2af 	.word	0x0800a2af
 800a24c:	0800a299 	.word	0x0800a299
 800a250:	0800a277 	.word	0x0800a277
 800a254:	0800a259 	.word	0x0800a259
    {
    case CUSTOM_HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	885b      	ldrh	r3, [r3, #2]
 800a25c:	b2db      	uxtb	r3, r3
 800a25e:	461a      	mov	r2, r3
 800a260:	693b      	ldr	r3, [r7, #16]
 800a262:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800a264:	e02a      	b.n	800a2bc <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800a266:	693b      	ldr	r3, [r7, #16]
 800a268:	3340      	adds	r3, #64	@ 0x40
 800a26a:	2201      	movs	r2, #1
 800a26c:	4619      	mov	r1, r3
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	f001 fae7 	bl	800b842 <USBD_CtlSendData>
      break;
 800a274:	e022      	b.n	800a2bc <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	885b      	ldrh	r3, [r3, #2]
 800a27a:	0a1b      	lsrs	r3, r3, #8
 800a27c:	b29b      	uxth	r3, r3
 800a27e:	b2db      	uxtb	r3, r3
 800a280:	461a      	mov	r2, r3
 800a282:	693b      	ldr	r3, [r7, #16]
 800a284:	645a      	str	r2, [r3, #68]	@ 0x44
      break;
 800a286:	e019      	b.n	800a2bc <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800a288:	693b      	ldr	r3, [r7, #16]
 800a28a:	3344      	adds	r3, #68	@ 0x44
 800a28c:	2201      	movs	r2, #1
 800a28e:	4619      	mov	r1, r3
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f001 fad6 	bl	800b842 <USBD_CtlSendData>
      break;
 800a296:	e011      	b.n	800a2bc <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_SET_REPORT:
      hhid->IsReportAvailable = 1U;
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	2201      	movs	r2, #1
 800a29c:	64da      	str	r2, [r3, #76]	@ 0x4c
      (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 800a29e:	6939      	ldr	r1, [r7, #16]
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	88db      	ldrh	r3, [r3, #6]
 800a2a4:	461a      	mov	r2, r3
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f001 faf7 	bl	800b89a <USBD_CtlPrepareRx>
      break;
 800a2ac:	e006      	b.n	800a2bc <USBD_CUSTOM_HID_Setup+0xdc>

    default:
      USBD_CtlError(pdev, req);
 800a2ae:	6839      	ldr	r1, [r7, #0]
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f001 fa55 	bl	800b760 <USBD_CtlError>
      ret = USBD_FAIL;
 800a2b6:	2303      	movs	r3, #3
 800a2b8:	75fb      	strb	r3, [r7, #23]
      break;
 800a2ba:	bf00      	nop
    }
    break;
 800a2bc:	e093      	b.n	800a3e6 <USBD_CUSTOM_HID_Setup+0x206>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	785b      	ldrb	r3, [r3, #1]
 800a2c2:	2b0b      	cmp	r3, #11
 800a2c4:	d87f      	bhi.n	800a3c6 <USBD_CUSTOM_HID_Setup+0x1e6>
 800a2c6:	a201      	add	r2, pc, #4	@ (adr r2, 800a2cc <USBD_CUSTOM_HID_Setup+0xec>)
 800a2c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2cc:	0800a2fd 	.word	0x0800a2fd
 800a2d0:	0800a3d5 	.word	0x0800a3d5
 800a2d4:	0800a3c7 	.word	0x0800a3c7
 800a2d8:	0800a3c7 	.word	0x0800a3c7
 800a2dc:	0800a3c7 	.word	0x0800a3c7
 800a2e0:	0800a3c7 	.word	0x0800a3c7
 800a2e4:	0800a327 	.word	0x0800a327
 800a2e8:	0800a3c7 	.word	0x0800a3c7
 800a2ec:	0800a3c7 	.word	0x0800a3c7
 800a2f0:	0800a3c7 	.word	0x0800a3c7
 800a2f4:	0800a375 	.word	0x0800a375
 800a2f8:	0800a39f 	.word	0x0800a39f
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a302:	b2db      	uxtb	r3, r3
 800a304:	2b03      	cmp	r3, #3
 800a306:	d107      	bne.n	800a318 <USBD_CUSTOM_HID_Setup+0x138>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a308:	f107 030e 	add.w	r3, r7, #14
 800a30c:	2202      	movs	r2, #2
 800a30e:	4619      	mov	r1, r3
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f001 fa96 	bl	800b842 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a316:	e05e      	b.n	800a3d6 <USBD_CUSTOM_HID_Setup+0x1f6>
        USBD_CtlError(pdev, req);
 800a318:	6839      	ldr	r1, [r7, #0]
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f001 fa20 	bl	800b760 <USBD_CtlError>
        ret = USBD_FAIL;
 800a320:	2303      	movs	r3, #3
 800a322:	75fb      	strb	r3, [r7, #23]
      break;
 800a324:	e057      	b.n	800a3d6 <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	885b      	ldrh	r3, [r3, #2]
 800a32a:	0a1b      	lsrs	r3, r3, #8
 800a32c:	b29b      	uxth	r3, r3
 800a32e:	2b22      	cmp	r3, #34	@ 0x22
 800a330:	d10b      	bne.n	800a34a <USBD_CUSTOM_HID_Setup+0x16a>
      {
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	88db      	ldrh	r3, [r3, #6]
 800a336:	2b21      	cmp	r3, #33	@ 0x21
 800a338:	bf28      	it	cs
 800a33a:	2321      	movcs	r3, #33	@ 0x21
 800a33c:	83fb      	strh	r3, [r7, #30]
        pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->pReport;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	61bb      	str	r3, [r7, #24]
 800a348:	e00d      	b.n	800a366 <USBD_CUSTOM_HID_Setup+0x186>
      }
      else
      {
        if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	885b      	ldrh	r3, [r3, #2]
 800a34e:	0a1b      	lsrs	r3, r3, #8
 800a350:	b29b      	uxth	r3, r3
 800a352:	2b21      	cmp	r3, #33	@ 0x21
 800a354:	d107      	bne.n	800a366 <USBD_CUSTOM_HID_Setup+0x186>
        {
          pbuf = USBD_CUSTOM_HID_Desc;
 800a356:	4b26      	ldr	r3, [pc, #152]	@ (800a3f0 <USBD_CUSTOM_HID_Setup+0x210>)
 800a358:	61bb      	str	r3, [r7, #24]
          len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	88db      	ldrh	r3, [r3, #6]
 800a35e:	2b09      	cmp	r3, #9
 800a360:	bf28      	it	cs
 800a362:	2309      	movcs	r3, #9
 800a364:	83fb      	strh	r3, [r7, #30]
        }
      }

      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a366:	8bfb      	ldrh	r3, [r7, #30]
 800a368:	461a      	mov	r2, r3
 800a36a:	69b9      	ldr	r1, [r7, #24]
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f001 fa68 	bl	800b842 <USBD_CtlSendData>
      break;
 800a372:	e030      	b.n	800a3d6 <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a37a:	b2db      	uxtb	r3, r3
 800a37c:	2b03      	cmp	r3, #3
 800a37e:	d107      	bne.n	800a390 <USBD_CUSTOM_HID_Setup+0x1b0>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	3348      	adds	r3, #72	@ 0x48
 800a384:	2201      	movs	r2, #1
 800a386:	4619      	mov	r1, r3
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f001 fa5a 	bl	800b842 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a38e:	e022      	b.n	800a3d6 <USBD_CUSTOM_HID_Setup+0x1f6>
        USBD_CtlError(pdev, req);
 800a390:	6839      	ldr	r1, [r7, #0]
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	f001 f9e4 	bl	800b760 <USBD_CtlError>
        ret = USBD_FAIL;
 800a398:	2303      	movs	r3, #3
 800a39a:	75fb      	strb	r3, [r7, #23]
      break;
 800a39c:	e01b      	b.n	800a3d6 <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3a4:	b2db      	uxtb	r3, r3
 800a3a6:	2b03      	cmp	r3, #3
 800a3a8:	d106      	bne.n	800a3b8 <USBD_CUSTOM_HID_Setup+0x1d8>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	885b      	ldrh	r3, [r3, #2]
 800a3ae:	b2db      	uxtb	r3, r3
 800a3b0:	461a      	mov	r2, r3
 800a3b2:	693b      	ldr	r3, [r7, #16]
 800a3b4:	649a      	str	r2, [r3, #72]	@ 0x48
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a3b6:	e00e      	b.n	800a3d6 <USBD_CUSTOM_HID_Setup+0x1f6>
        USBD_CtlError(pdev, req);
 800a3b8:	6839      	ldr	r1, [r7, #0]
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f001 f9d0 	bl	800b760 <USBD_CtlError>
        ret = USBD_FAIL;
 800a3c0:	2303      	movs	r3, #3
 800a3c2:	75fb      	strb	r3, [r7, #23]
      break;
 800a3c4:	e007      	b.n	800a3d6 <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800a3c6:	6839      	ldr	r1, [r7, #0]
 800a3c8:	6878      	ldr	r0, [r7, #4]
 800a3ca:	f001 f9c9 	bl	800b760 <USBD_CtlError>
      ret = USBD_FAIL;
 800a3ce:	2303      	movs	r3, #3
 800a3d0:	75fb      	strb	r3, [r7, #23]
      break;
 800a3d2:	e000      	b.n	800a3d6 <USBD_CUSTOM_HID_Setup+0x1f6>
      break;
 800a3d4:	bf00      	nop
    }
    break;
 800a3d6:	e006      	b.n	800a3e6 <USBD_CUSTOM_HID_Setup+0x206>

  default:
    USBD_CtlError(pdev, req);
 800a3d8:	6839      	ldr	r1, [r7, #0]
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f001 f9c0 	bl	800b760 <USBD_CtlError>
    ret = USBD_FAIL;
 800a3e0:	2303      	movs	r3, #3
 800a3e2:	75fb      	strb	r3, [r7, #23]
    break;
 800a3e4:	bf00      	nop
  }
  return (uint8_t)ret;
 800a3e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	3720      	adds	r7, #32
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}
 800a3f0:	20000290 	.word	0x20000290

0800a3f4 <USBD_CUSTOM_HID_SendReport>:
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b086      	sub	sp, #24
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	60f8      	str	r0, [r7, #12]
 800a3fc:	60b9      	str	r1, [r7, #8]
 800a3fe:	4613      	mov	r3, r2
 800a400:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData_HID_Custom == NULL)
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d101      	bne.n	800a410 <USBD_CUSTOM_HID_SendReport+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800a40c:	2303      	movs	r3, #3
 800a40e:	e01d      	b.n	800a44c <USBD_CUSTOM_HID_SendReport+0x58>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a416:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a41e:	b2db      	uxtb	r3, r3
 800a420:	2b03      	cmp	r3, #3
 800a422:	d112      	bne.n	800a44a <USBD_CUSTOM_HID_SendReport+0x56>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 800a424:	697b      	ldr	r3, [r7, #20]
 800a426:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d10b      	bne.n	800a446 <USBD_CUSTOM_HID_SendReport+0x52>
    {
      hhid->state = CUSTOM_HID_BUSY;
 800a42e:	697b      	ldr	r3, [r7, #20]
 800a430:	2201      	movs	r2, #1
 800a432:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      (void)USBD_LL_Transmit(pdev, CUSTOM_HID_IN_EP, report, len);
 800a436:	4b07      	ldr	r3, [pc, #28]	@ (800a454 <USBD_CUSTOM_HID_SendReport+0x60>)
 800a438:	7819      	ldrb	r1, [r3, #0]
 800a43a:	88fb      	ldrh	r3, [r7, #6]
 800a43c:	68ba      	ldr	r2, [r7, #8]
 800a43e:	68f8      	ldr	r0, [r7, #12]
 800a440:	f001 fcdf 	bl	800be02 <USBD_LL_Transmit>
 800a444:	e001      	b.n	800a44a <USBD_CUSTOM_HID_SendReport+0x56>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 800a446:	2301      	movs	r3, #1
 800a448:	e000      	b.n	800a44c <USBD_CUSTOM_HID_SendReport+0x58>
    }
  }
  return (uint8_t)USBD_OK;
 800a44a:	2300      	movs	r3, #0
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	3718      	adds	r7, #24
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}
 800a454:	200001ce 	.word	0x200001ce

0800a458 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 800a458:	b480      	push	{r7}
 800a45a:	b083      	sub	sp, #12
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2229      	movs	r2, #41	@ 0x29
 800a464:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgFSDesc;
 800a466:	4b03      	ldr	r3, [pc, #12]	@ (800a474 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 800a468:	4618      	mov	r0, r3
 800a46a:	370c      	adds	r7, #12
 800a46c:	46bd      	mov	sp, r7
 800a46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a472:	4770      	bx	lr
 800a474:	2000020c 	.word	0x2000020c

0800a478 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 800a478:	b480      	push	{r7}
 800a47a:	b083      	sub	sp, #12
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2229      	movs	r2, #41	@ 0x29
 800a484:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgHSDesc;
 800a486:	4b03      	ldr	r3, [pc, #12]	@ (800a494 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 800a488:	4618      	mov	r0, r3
 800a48a:	370c      	adds	r7, #12
 800a48c:	46bd      	mov	sp, r7
 800a48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a492:	4770      	bx	lr
 800a494:	20000238 	.word	0x20000238

0800a498 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a498:	b480      	push	{r7}
 800a49a:	b083      	sub	sp, #12
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2229      	movs	r2, #41	@ 0x29
 800a4a4:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 800a4a6:	4b03      	ldr	r3, [pc, #12]	@ (800a4b4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	370c      	adds	r7, #12
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b2:	4770      	bx	lr
 800a4b4:	20000264 	.word	0x20000264

0800a4b8 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */

static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b083      	sub	sp, #12
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
 800a4c0:	460b      	mov	r3, r1
 800a4c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom)->state = CUSTOM_HID_IDLE;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 // HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6); // hoặc nháy LED nếu có
  return (uint8_t)USBD_OK;
 800a4d0:	2300      	movs	r3, #0
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	370c      	adds	r7, #12
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4dc:	4770      	bx	lr
	...

0800a4e0 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b084      	sub	sp, #16
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
 800a4e8:	460b      	mov	r3, r1
 800a4ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData_HID_Custom == NULL)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d101      	bne.n	800a4fa <USBD_CUSTOM_HID_DataOut+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800a4f6:	2303      	movs	r3, #3
 800a4f8:	e013      	b.n	800a522 <USBD_CUSTOM_HID_DataOut+0x42>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a500:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->OutEvent(hhid->Report_buf, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800a508:	68db      	ldr	r3, [r3, #12]
 800a50a:	68fa      	ldr	r2, [r7, #12]
 800a50c:	2140      	movs	r1, #64	@ 0x40
 800a50e:	4610      	mov	r0, r2
 800a510:	4798      	blx	r3
 // HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
  USBD_LL_PrepareReceive(pdev,CUSTOM_HID_OUT_EP,hhid->Report_buf,
 800a512:	4b06      	ldr	r3, [pc, #24]	@ (800a52c <USBD_CUSTOM_HID_DataOut+0x4c>)
 800a514:	7819      	ldrb	r1, [r3, #0]
 800a516:	68fa      	ldr	r2, [r7, #12]
 800a518:	2340      	movs	r3, #64	@ 0x40
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f001 fc92 	bl	800be44 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  return (uint8_t)USBD_OK;
 800a520:	2300      	movs	r3, #0
}
 800a522:	4618      	mov	r0, r3
 800a524:	3710      	adds	r7, #16
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}
 800a52a:	bf00      	nop
 800a52c:	200001cf 	.word	0x200001cf

0800a530 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b084      	sub	sp, #16
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a53e:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d101      	bne.n	800a54a <USBD_CUSTOM_HID_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800a546:	2303      	movs	r3, #3
 800a548:	e00f      	b.n	800a56a <USBD_CUSTOM_HID_EP0_RxReady+0x3a>
  }

  if (hhid->IsReportAvailable == 1U)
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a54e:	2b01      	cmp	r3, #1
 800a550:	d10a      	bne.n	800a568 <USBD_CUSTOM_HID_EP0_RxReady+0x38>
  {
    //((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->OutEvent(hhid->Report_buf[0], hhid->Report_buf[1]);
	  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->OutEvent(hhid->Report_buf, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800a558:	68db      	ldr	r3, [r3, #12]
 800a55a:	68fa      	ldr	r2, [r7, #12]
 800a55c:	2140      	movs	r1, #64	@ 0x40
 800a55e:	4610      	mov	r0, r2
 800a560:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	2200      	movs	r2, #0
 800a566:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return (uint8_t)USBD_OK;
 800a568:	2300      	movs	r3, #0
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	3710      	adds	r7, #16
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}
	...

0800a574 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800a574:	b480      	push	{r7}
 800a576:	b083      	sub	sp, #12
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	220a      	movs	r2, #10
 800a580:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800a582:	4b03      	ldr	r3, [pc, #12]	@ (800a590 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 800a584:	4618      	mov	r0, r3
 800a586:	370c      	adds	r7, #12
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr
 800a590:	2000029c 	.word	0x2000029c

0800a594 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800a594:	b480      	push	{r7}
 800a596:	b083      	sub	sp, #12
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
 800a59c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d101      	bne.n	800a5a8 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a5a4:	2303      	movs	r3, #3
 800a5a6:	e004      	b.n	800a5b2 <USBD_CUSTOM_HID_RegisterInterface+0x1e>
  }

  pdev->pUserData_HID_Custom = fops;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	683a      	ldr	r2, [r7, #0]
 800a5ac:	f8c3 22dc 	str.w	r2, [r3, #732]	@ 0x2dc

  return (uint8_t)USBD_OK;
 800a5b0:	2300      	movs	r3, #0
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	370c      	adds	r7, #12
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5bc:	4770      	bx	lr
	...

0800a5c0 <USBD_Update_HID_Custom_DESC>:

void USBD_Update_HID_Custom_DESC(uint8_t *desc, uint8_t itf_no, uint8_t in_ep, uint8_t out_ep, uint8_t str_idx)
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	b083      	sub	sp, #12
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
 800a5c8:	4608      	mov	r0, r1
 800a5ca:	4611      	mov	r1, r2
 800a5cc:	461a      	mov	r2, r3
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	70fb      	strb	r3, [r7, #3]
 800a5d2:	460b      	mov	r3, r1
 800a5d4:	70bb      	strb	r3, [r7, #2]
 800a5d6:	4613      	mov	r3, r2
 800a5d8:	707b      	strb	r3, [r7, #1]
  desc[11] = itf_no;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	330b      	adds	r3, #11
 800a5de:	78fa      	ldrb	r2, [r7, #3]
 800a5e0:	701a      	strb	r2, [r3, #0]
  desc[17] = str_idx;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	3311      	adds	r3, #17
 800a5e6:	7c3a      	ldrb	r2, [r7, #16]
 800a5e8:	701a      	strb	r2, [r3, #0]
  desc[29] = in_ep;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	331d      	adds	r3, #29
 800a5ee:	78ba      	ldrb	r2, [r7, #2]
 800a5f0:	701a      	strb	r2, [r3, #0]
  desc[36] = out_ep;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	3324      	adds	r3, #36	@ 0x24
 800a5f6:	787a      	ldrb	r2, [r7, #1]
 800a5f8:	701a      	strb	r2, [r3, #0]

  CUSTOM_HID_IN_EP = in_ep;
 800a5fa:	4a09      	ldr	r2, [pc, #36]	@ (800a620 <USBD_Update_HID_Custom_DESC+0x60>)
 800a5fc:	78bb      	ldrb	r3, [r7, #2]
 800a5fe:	7013      	strb	r3, [r2, #0]
  CUSTOM_HID_OUT_EP = out_ep;
 800a600:	4a08      	ldr	r2, [pc, #32]	@ (800a624 <USBD_Update_HID_Custom_DESC+0x64>)
 800a602:	787b      	ldrb	r3, [r7, #1]
 800a604:	7013      	strb	r3, [r2, #0]
  CUSTOM_HID_ITF_NBR = itf_no;
 800a606:	4a08      	ldr	r2, [pc, #32]	@ (800a628 <USBD_Update_HID_Custom_DESC+0x68>)
 800a608:	78fb      	ldrb	r3, [r7, #3]
 800a60a:	7013      	strb	r3, [r2, #0]
  CUSTOM_HID_STR_DESC_IDX = str_idx;
 800a60c:	4a07      	ldr	r2, [pc, #28]	@ (800a62c <USBD_Update_HID_Custom_DESC+0x6c>)
 800a60e:	7c3b      	ldrb	r3, [r7, #16]
 800a610:	7013      	strb	r3, [r2, #0]
}
 800a612:	bf00      	nop
 800a614:	370c      	adds	r7, #12
 800a616:	46bd      	mov	sp, r7
 800a618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61c:	4770      	bx	lr
 800a61e:	bf00      	nop
 800a620:	200001ce 	.word	0x200001ce
 800a624:	200001cf 	.word	0x200001cf
 800a628:	20002608 	.word	0x20002608
 800a62c:	20002609 	.word	0x20002609

0800a630 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b086      	sub	sp, #24
 800a634:	af00      	add	r7, sp, #0
 800a636:	60f8      	str	r0, [r7, #12]
 800a638:	60b9      	str	r1, [r7, #8]
 800a63a:	4613      	mov	r3, r2
 800a63c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d101      	bne.n	800a648 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a644:	2303      	movs	r3, #3
 800a646:	e01b      	b.n	800a680 <USBD_Init+0x50>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	2200      	movs	r2, #0
 800a64c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pConfDesc = NULL;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	2200      	movs	r2, #0
 800a654:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d003      	beq.n	800a666 <USBD_Init+0x36>
  {
    pdev->pDesc = pdesc;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	68ba      	ldr	r2, [r7, #8]
 800a662:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	2201      	movs	r2, #1
 800a66a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	79fa      	ldrb	r2, [r7, #7]
 800a672:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a674:	68f8      	ldr	r0, [r7, #12]
 800a676:	f001 fa7d 	bl	800bb74 <USBD_LL_Init>
 800a67a:	4603      	mov	r3, r0
 800a67c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a67e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a680:	4618      	mov	r0, r3
 800a682:	3718      	adds	r7, #24
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}

0800a688 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b084      	sub	sp, #16
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
 800a690:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a692:	2300      	movs	r3, #0
 800a694:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d101      	bne.n	800a6a0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a69c:	2303      	movs	r3, #3
 800a69e:	e02d      	b.n	800a6fc <USBD_RegisterClass+0x74>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	683a      	ldr	r2, [r7, #0]
 800a6a4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  /* Get Device Configuration Descriptor */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	7c1b      	ldrb	r3, [r3, #16]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d112      	bne.n	800a6d6 <USBD_RegisterClass+0x4e>
  {
	  if (pdev->pClass->GetHSConfigDescriptor != NULL)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d01e      	beq.n	800a6fa <USBD_RegisterClass+0x72>
	  {
		  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6c4:	f107 020e 	add.w	r2, r7, #14
 800a6c8:	4610      	mov	r0, r2
 800a6ca:	4798      	blx	r3
 800a6cc:	4602      	mov	r2, r0
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318
 800a6d4:	e011      	b.n	800a6fa <USBD_RegisterClass+0x72>
	  }
  }
  else if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d00b      	beq.n	800a6fa <USBD_RegisterClass+0x72>
  {
	  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6ea:	f107 020e 	add.w	r2, r7, #14
 800a6ee:	4610      	mov	r0, r2
 800a6f0:	4798      	blx	r3
 800a6f2:	4602      	mov	r2, r0
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318
  }

  return USBD_OK;
 800a6fa:	2300      	movs	r3, #0
}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	3710      	adds	r7, #16
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}

0800a704 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b082      	sub	sp, #8
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f001 fa8f 	bl	800bc30 <USBD_LL_Start>
 800a712:	4603      	mov	r3, r0
}
 800a714:	4618      	mov	r0, r3
 800a716:	3708      	adds	r7, #8
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}

0800a71c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a71c:	b480      	push	{r7}
 800a71e:	b083      	sub	sp, #12
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a724:	2300      	movs	r3, #0
}
 800a726:	4618      	mov	r0, r3
 800a728:	370c      	adds	r7, #12
 800a72a:	46bd      	mov	sp, r7
 800a72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a730:	4770      	bx	lr

0800a732 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a732:	b580      	push	{r7, lr}
 800a734:	b084      	sub	sp, #16
 800a736:	af00      	add	r7, sp, #0
 800a738:	6078      	str	r0, [r7, #4]
 800a73a:	460b      	mov	r3, r1
 800a73c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a73e:	2303      	movs	r3, #3
 800a740:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d009      	beq.n	800a760 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	78fa      	ldrb	r2, [r7, #3]
 800a756:	4611      	mov	r1, r2
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	4798      	blx	r3
 800a75c:	4603      	mov	r3, r0
 800a75e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a760:	7bfb      	ldrb	r3, [r7, #15]
}
 800a762:	4618      	mov	r0, r3
 800a764:	3710      	adds	r7, #16
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}

0800a76a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a76a:	b580      	push	{r7, lr}
 800a76c:	b082      	sub	sp, #8
 800a76e:	af00      	add	r7, sp, #0
 800a770:	6078      	str	r0, [r7, #4]
 800a772:	460b      	mov	r3, r1
 800a774:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d007      	beq.n	800a790 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a786:	685b      	ldr	r3, [r3, #4]
 800a788:	78fa      	ldrb	r2, [r7, #3]
 800a78a:	4611      	mov	r1, r2
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	4798      	blx	r3
  }

  return USBD_OK;
 800a790:	2300      	movs	r3, #0
}
 800a792:	4618      	mov	r0, r3
 800a794:	3708      	adds	r7, #8
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}

0800a79a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a79a:	b580      	push	{r7, lr}
 800a79c:	b084      	sub	sp, #16
 800a79e:	af00      	add	r7, sp, #0
 800a7a0:	6078      	str	r0, [r7, #4]
 800a7a2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a7aa:	6839      	ldr	r1, [r7, #0]
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	f000 ff9d 	bl	800b6ec <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2201      	movs	r2, #1
 800a7b6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a7c0:	461a      	mov	r2, r3
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a7ce:	f003 031f 	and.w	r3, r3, #31
 800a7d2:	2b02      	cmp	r3, #2
 800a7d4:	d01a      	beq.n	800a80c <USBD_LL_SetupStage+0x72>
 800a7d6:	2b02      	cmp	r3, #2
 800a7d8:	d822      	bhi.n	800a820 <USBD_LL_SetupStage+0x86>
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d002      	beq.n	800a7e4 <USBD_LL_SetupStage+0x4a>
 800a7de:	2b01      	cmp	r3, #1
 800a7e0:	d00a      	beq.n	800a7f8 <USBD_LL_SetupStage+0x5e>
 800a7e2:	e01d      	b.n	800a820 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a7ea:	4619      	mov	r1, r3
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f000 fa5d 	bl	800acac <USBD_StdDevReq>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	73fb      	strb	r3, [r7, #15]
      break;
 800a7f6:	e020      	b.n	800a83a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a7fe:	4619      	mov	r1, r3
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f000 fac1 	bl	800ad88 <USBD_StdItfReq>
 800a806:	4603      	mov	r3, r0
 800a808:	73fb      	strb	r3, [r7, #15]
      break;
 800a80a:	e016      	b.n	800a83a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a812:	4619      	mov	r1, r3
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f000 fb00 	bl	800ae1a <USBD_StdEPReq>
 800a81a:	4603      	mov	r3, r0
 800a81c:	73fb      	strb	r3, [r7, #15]
      break;
 800a81e:	e00c      	b.n	800a83a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a826:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a82a:	b2db      	uxtb	r3, r3
 800a82c:	4619      	mov	r1, r3
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f001 fa5e 	bl	800bcf0 <USBD_LL_StallEP>
 800a834:	4603      	mov	r3, r0
 800a836:	73fb      	strb	r3, [r7, #15]
      break;
 800a838:	bf00      	nop
  }

  return ret;
 800a83a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3710      	adds	r7, #16
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}

0800a844 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b086      	sub	sp, #24
 800a848:	af00      	add	r7, sp, #0
 800a84a:	60f8      	str	r0, [r7, #12]
 800a84c:	460b      	mov	r3, r1
 800a84e:	607a      	str	r2, [r7, #4]
 800a850:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a852:	7afb      	ldrb	r3, [r7, #11]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d138      	bne.n	800a8ca <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a85e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a866:	2b03      	cmp	r3, #3
 800a868:	d14a      	bne.n	800a900 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a86a:	693b      	ldr	r3, [r7, #16]
 800a86c:	689a      	ldr	r2, [r3, #8]
 800a86e:	693b      	ldr	r3, [r7, #16]
 800a870:	68db      	ldr	r3, [r3, #12]
 800a872:	429a      	cmp	r2, r3
 800a874:	d913      	bls.n	800a89e <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a876:	693b      	ldr	r3, [r7, #16]
 800a878:	689a      	ldr	r2, [r3, #8]
 800a87a:	693b      	ldr	r3, [r7, #16]
 800a87c:	68db      	ldr	r3, [r3, #12]
 800a87e:	1ad2      	subs	r2, r2, r3
 800a880:	693b      	ldr	r3, [r7, #16]
 800a882:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a884:	693b      	ldr	r3, [r7, #16]
 800a886:	68da      	ldr	r2, [r3, #12]
 800a888:	693b      	ldr	r3, [r7, #16]
 800a88a:	689b      	ldr	r3, [r3, #8]
 800a88c:	4293      	cmp	r3, r2
 800a88e:	bf28      	it	cs
 800a890:	4613      	movcs	r3, r2
 800a892:	461a      	mov	r2, r3
 800a894:	6879      	ldr	r1, [r7, #4]
 800a896:	68f8      	ldr	r0, [r7, #12]
 800a898:	f001 f81c 	bl	800b8d4 <USBD_CtlContinueRx>
 800a89c:	e030      	b.n	800a900 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8a4:	b2db      	uxtb	r3, r3
 800a8a6:	2b03      	cmp	r3, #3
 800a8a8:	d10b      	bne.n	800a8c2 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8b0:	691b      	ldr	r3, [r3, #16]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d005      	beq.n	800a8c2 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8bc:	691b      	ldr	r3, [r3, #16]
 800a8be:	68f8      	ldr	r0, [r7, #12]
 800a8c0:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a8c2:	68f8      	ldr	r0, [r7, #12]
 800a8c4:	f001 f817 	bl	800b8f6 <USBD_CtlSendStatus>
 800a8c8:	e01a      	b.n	800a900 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8d0:	b2db      	uxtb	r3, r3
 800a8d2:	2b03      	cmp	r3, #3
 800a8d4:	d114      	bne.n	800a900 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8dc:	699b      	ldr	r3, [r3, #24]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d00e      	beq.n	800a900 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8e8:	699b      	ldr	r3, [r3, #24]
 800a8ea:	7afa      	ldrb	r2, [r7, #11]
 800a8ec:	4611      	mov	r1, r2
 800a8ee:	68f8      	ldr	r0, [r7, #12]
 800a8f0:	4798      	blx	r3
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a8f6:	7dfb      	ldrb	r3, [r7, #23]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d001      	beq.n	800a900 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800a8fc:	7dfb      	ldrb	r3, [r7, #23]
 800a8fe:	e000      	b.n	800a902 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800a900:	2300      	movs	r3, #0
}
 800a902:	4618      	mov	r0, r3
 800a904:	3718      	adds	r7, #24
 800a906:	46bd      	mov	sp, r7
 800a908:	bd80      	pop	{r7, pc}

0800a90a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a90a:	b580      	push	{r7, lr}
 800a90c:	b086      	sub	sp, #24
 800a90e:	af00      	add	r7, sp, #0
 800a910:	60f8      	str	r0, [r7, #12]
 800a912:	460b      	mov	r3, r1
 800a914:	607a      	str	r2, [r7, #4]
 800a916:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a918:	7afb      	ldrb	r3, [r7, #11]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d16b      	bne.n	800a9f6 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	3314      	adds	r3, #20
 800a922:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a92a:	2b02      	cmp	r3, #2
 800a92c:	d156      	bne.n	800a9dc <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800a92e:	693b      	ldr	r3, [r7, #16]
 800a930:	689a      	ldr	r2, [r3, #8]
 800a932:	693b      	ldr	r3, [r7, #16]
 800a934:	68db      	ldr	r3, [r3, #12]
 800a936:	429a      	cmp	r2, r3
 800a938:	d914      	bls.n	800a964 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a93a:	693b      	ldr	r3, [r7, #16]
 800a93c:	689a      	ldr	r2, [r3, #8]
 800a93e:	693b      	ldr	r3, [r7, #16]
 800a940:	68db      	ldr	r3, [r3, #12]
 800a942:	1ad2      	subs	r2, r2, r3
 800a944:	693b      	ldr	r3, [r7, #16]
 800a946:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a948:	693b      	ldr	r3, [r7, #16]
 800a94a:	689b      	ldr	r3, [r3, #8]
 800a94c:	461a      	mov	r2, r3
 800a94e:	6879      	ldr	r1, [r7, #4]
 800a950:	68f8      	ldr	r0, [r7, #12]
 800a952:	f000 ff91 	bl	800b878 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a956:	2300      	movs	r3, #0
 800a958:	2200      	movs	r2, #0
 800a95a:	2100      	movs	r1, #0
 800a95c:	68f8      	ldr	r0, [r7, #12]
 800a95e:	f001 fa71 	bl	800be44 <USBD_LL_PrepareReceive>
 800a962:	e03b      	b.n	800a9dc <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a964:	693b      	ldr	r3, [r7, #16]
 800a966:	68da      	ldr	r2, [r3, #12]
 800a968:	693b      	ldr	r3, [r7, #16]
 800a96a:	689b      	ldr	r3, [r3, #8]
 800a96c:	429a      	cmp	r2, r3
 800a96e:	d11c      	bne.n	800a9aa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a970:	693b      	ldr	r3, [r7, #16]
 800a972:	685a      	ldr	r2, [r3, #4]
 800a974:	693b      	ldr	r3, [r7, #16]
 800a976:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a978:	429a      	cmp	r2, r3
 800a97a:	d316      	bcc.n	800a9aa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a97c:	693b      	ldr	r3, [r7, #16]
 800a97e:	685a      	ldr	r2, [r3, #4]
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a986:	429a      	cmp	r2, r3
 800a988:	d20f      	bcs.n	800a9aa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a98a:	2200      	movs	r2, #0
 800a98c:	2100      	movs	r1, #0
 800a98e:	68f8      	ldr	r0, [r7, #12]
 800a990:	f000 ff72 	bl	800b878 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	2200      	movs	r2, #0
 800a998:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a99c:	2300      	movs	r3, #0
 800a99e:	2200      	movs	r2, #0
 800a9a0:	2100      	movs	r1, #0
 800a9a2:	68f8      	ldr	r0, [r7, #12]
 800a9a4:	f001 fa4e 	bl	800be44 <USBD_LL_PrepareReceive>
 800a9a8:	e018      	b.n	800a9dc <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9b0:	b2db      	uxtb	r3, r3
 800a9b2:	2b03      	cmp	r3, #3
 800a9b4:	d10b      	bne.n	800a9ce <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9bc:	68db      	ldr	r3, [r3, #12]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d005      	beq.n	800a9ce <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9c8:	68db      	ldr	r3, [r3, #12]
 800a9ca:	68f8      	ldr	r0, [r7, #12]
 800a9cc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a9ce:	2180      	movs	r1, #128	@ 0x80
 800a9d0:	68f8      	ldr	r0, [r7, #12]
 800a9d2:	f001 f98d 	bl	800bcf0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a9d6:	68f8      	ldr	r0, [r7, #12]
 800a9d8:	f000 ffa0 	bl	800b91c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a9e2:	2b01      	cmp	r3, #1
 800a9e4:	d122      	bne.n	800aa2c <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a9e6:	68f8      	ldr	r0, [r7, #12]
 800a9e8:	f7ff fe98 	bl	800a71c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a9f4:	e01a      	b.n	800aa2c <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9fc:	b2db      	uxtb	r3, r3
 800a9fe:	2b03      	cmp	r3, #3
 800aa00:	d114      	bne.n	800aa2c <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa08:	695b      	ldr	r3, [r3, #20]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d00e      	beq.n	800aa2c <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa14:	695b      	ldr	r3, [r3, #20]
 800aa16:	7afa      	ldrb	r2, [r7, #11]
 800aa18:	4611      	mov	r1, r2
 800aa1a:	68f8      	ldr	r0, [r7, #12]
 800aa1c:	4798      	blx	r3
 800aa1e:	4603      	mov	r3, r0
 800aa20:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800aa22:	7dfb      	ldrb	r3, [r7, #23]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d001      	beq.n	800aa2c <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800aa28:	7dfb      	ldrb	r3, [r7, #23]
 800aa2a:	e000      	b.n	800aa2e <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800aa2c:	2300      	movs	r3, #0
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	3718      	adds	r7, #24
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}

0800aa36 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800aa36:	b580      	push	{r7, lr}
 800aa38:	b082      	sub	sp, #8
 800aa3a:	af00      	add	r7, sp, #0
 800aa3c:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2201      	movs	r2, #1
 800aa42:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2200      	movs	r2, #0
 800aa4a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2200      	movs	r2, #0
 800aa52:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2200      	movs	r2, #0
 800aa58:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d101      	bne.n	800aa6a <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800aa66:	2303      	movs	r3, #3
 800aa68:	e02a      	b.n	800aac0 <USBD_LL_Reset+0x8a>
  }

	if (pdev->pClass->DeInit != NULL)
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa70:	685b      	ldr	r3, [r3, #4]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d009      	beq.n	800aa8a <USBD_LL_Reset+0x54>
	{
	  (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa7c:	685b      	ldr	r3, [r3, #4]
 800aa7e:	687a      	ldr	r2, [r7, #4]
 800aa80:	6852      	ldr	r2, [r2, #4]
 800aa82:	b2d2      	uxtb	r2, r2
 800aa84:	4611      	mov	r1, r2
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	4798      	blx	r3
	}

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aa8a:	2340      	movs	r3, #64	@ 0x40
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	2100      	movs	r1, #0
 800aa90:	6878      	ldr	r0, [r7, #4]
 800aa92:	f001 f8e8 	bl	800bc66 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2201      	movs	r2, #1
 800aa9a:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2240      	movs	r2, #64	@ 0x40
 800aaa2:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aaa6:	2340      	movs	r3, #64	@ 0x40
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	2180      	movs	r1, #128	@ 0x80
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f001 f8da 	bl	800bc66 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2201      	movs	r2, #1
 800aab6:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2240      	movs	r2, #64	@ 0x40
 800aabc:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800aabe:	2300      	movs	r3, #0
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	3708      	adds	r7, #8
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bd80      	pop	{r7, pc}

0800aac8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800aac8:	b480      	push	{r7}
 800aaca:	b083      	sub	sp, #12
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
 800aad0:	460b      	mov	r3, r1
 800aad2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	78fa      	ldrb	r2, [r7, #3]
 800aad8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800aada:	2300      	movs	r3, #0
}
 800aadc:	4618      	mov	r0, r3
 800aade:	370c      	adds	r7, #12
 800aae0:	46bd      	mov	sp, r7
 800aae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae6:	4770      	bx	lr

0800aae8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800aae8:	b480      	push	{r7}
 800aaea:	b083      	sub	sp, #12
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aaf6:	b2da      	uxtb	r2, r3
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2204      	movs	r2, #4
 800ab02:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800ab06:	2300      	movs	r3, #0
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	370c      	adds	r7, #12
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab12:	4770      	bx	lr

0800ab14 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ab14:	b480      	push	{r7}
 800ab16:	b083      	sub	sp, #12
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab22:	b2db      	uxtb	r3, r3
 800ab24:	2b04      	cmp	r3, #4
 800ab26:	d106      	bne.n	800ab36 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800ab2e:	b2da      	uxtb	r2, r3
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800ab36:	2300      	movs	r3, #0
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	370c      	adds	r7, #12
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab42:	4770      	bx	lr

0800ab44 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b082      	sub	sp, #8
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d101      	bne.n	800ab5a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800ab56:	2303      	movs	r3, #3
 800ab58:	e012      	b.n	800ab80 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab60:	b2db      	uxtb	r3, r3
 800ab62:	2b03      	cmp	r3, #3
 800ab64:	d10b      	bne.n	800ab7e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab6c:	69db      	ldr	r3, [r3, #28]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d005      	beq.n	800ab7e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab78:	69db      	ldr	r3, [r3, #28]
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ab7e:	2300      	movs	r3, #0
}
 800ab80:	4618      	mov	r0, r3
 800ab82:	3708      	adds	r7, #8
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}

0800ab88 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b082      	sub	sp, #8
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
 800ab90:	460b      	mov	r3, r1
 800ab92:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d101      	bne.n	800aba2 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800ab9e:	2303      	movs	r3, #3
 800aba0:	e014      	b.n	800abcc <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aba8:	b2db      	uxtb	r3, r3
 800abaa:	2b03      	cmp	r3, #3
 800abac:	d10d      	bne.n	800abca <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abb4:	6a1b      	ldr	r3, [r3, #32]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d007      	beq.n	800abca <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abc0:	6a1b      	ldr	r3, [r3, #32]
 800abc2:	78fa      	ldrb	r2, [r7, #3]
 800abc4:	4611      	mov	r1, r2
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800abca:	2300      	movs	r3, #0
}
 800abcc:	4618      	mov	r0, r3
 800abce:	3708      	adds	r7, #8
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}

0800abd4 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b082      	sub	sp, #8
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
 800abdc:	460b      	mov	r3, r1
 800abde:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d101      	bne.n	800abee <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800abea:	2303      	movs	r3, #3
 800abec:	e014      	b.n	800ac18 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800abf4:	b2db      	uxtb	r3, r3
 800abf6:	2b03      	cmp	r3, #3
 800abf8:	d10d      	bne.n	800ac16 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d007      	beq.n	800ac16 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac0e:	78fa      	ldrb	r2, [r7, #3]
 800ac10:	4611      	mov	r1, r2
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ac16:	2300      	movs	r3, #0
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	3708      	adds	r7, #8
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}

0800ac20 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ac20:	b480      	push	{r7}
 800ac22:	b083      	sub	sp, #12
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ac28:	2300      	movs	r3, #0
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	370c      	adds	r7, #12
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac34:	4770      	bx	lr

0800ac36 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ac36:	b580      	push	{r7, lr}
 800ac38:	b082      	sub	sp, #8
 800ac3a:	af00      	add	r7, sp, #0
 800ac3c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2201      	movs	r2, #1
 800ac42:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  if (pdev->pClass != NULL)
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d009      	beq.n	800ac64 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac56:	685b      	ldr	r3, [r3, #4]
 800ac58:	687a      	ldr	r2, [r7, #4]
 800ac5a:	6852      	ldr	r2, [r2, #4]
 800ac5c:	b2d2      	uxtb	r2, r2
 800ac5e:	4611      	mov	r1, r2
 800ac60:	6878      	ldr	r0, [r7, #4]
 800ac62:	4798      	blx	r3
  }

  return USBD_OK;
 800ac64:	2300      	movs	r3, #0
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	3708      	adds	r7, #8
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}

0800ac6e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ac6e:	b480      	push	{r7}
 800ac70:	b087      	sub	sp, #28
 800ac72:	af00      	add	r7, sp, #0
 800ac74:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	781b      	ldrb	r3, [r3, #0]
 800ac7e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ac80:	697b      	ldr	r3, [r7, #20]
 800ac82:	3301      	adds	r3, #1
 800ac84:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ac86:	697b      	ldr	r3, [r7, #20]
 800ac88:	781b      	ldrb	r3, [r3, #0]
 800ac8a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ac8c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800ac90:	021b      	lsls	r3, r3, #8
 800ac92:	b21a      	sxth	r2, r3
 800ac94:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ac98:	4313      	orrs	r3, r2
 800ac9a:	b21b      	sxth	r3, r3
 800ac9c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ac9e:	89fb      	ldrh	r3, [r7, #14]
}
 800aca0:	4618      	mov	r0, r3
 800aca2:	371c      	adds	r7, #28
 800aca4:	46bd      	mov	sp, r7
 800aca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acaa:	4770      	bx	lr

0800acac <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b084      	sub	sp, #16
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
 800acb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800acb6:	2300      	movs	r3, #0
 800acb8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	781b      	ldrb	r3, [r3, #0]
 800acbe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800acc2:	2b40      	cmp	r3, #64	@ 0x40
 800acc4:	d005      	beq.n	800acd2 <USBD_StdDevReq+0x26>
 800acc6:	2b40      	cmp	r3, #64	@ 0x40
 800acc8:	d853      	bhi.n	800ad72 <USBD_StdDevReq+0xc6>
 800acca:	2b00      	cmp	r3, #0
 800accc:	d00b      	beq.n	800ace6 <USBD_StdDevReq+0x3a>
 800acce:	2b20      	cmp	r3, #32
 800acd0:	d14f      	bne.n	800ad72 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800acd8:	689b      	ldr	r3, [r3, #8]
 800acda:	6839      	ldr	r1, [r7, #0]
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	4798      	blx	r3
 800ace0:	4603      	mov	r3, r0
 800ace2:	73fb      	strb	r3, [r7, #15]
      break;
 800ace4:	e04a      	b.n	800ad7c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	785b      	ldrb	r3, [r3, #1]
 800acea:	2b09      	cmp	r3, #9
 800acec:	d83b      	bhi.n	800ad66 <USBD_StdDevReq+0xba>
 800acee:	a201      	add	r2, pc, #4	@ (adr r2, 800acf4 <USBD_StdDevReq+0x48>)
 800acf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acf4:	0800ad49 	.word	0x0800ad49
 800acf8:	0800ad5d 	.word	0x0800ad5d
 800acfc:	0800ad67 	.word	0x0800ad67
 800ad00:	0800ad53 	.word	0x0800ad53
 800ad04:	0800ad67 	.word	0x0800ad67
 800ad08:	0800ad27 	.word	0x0800ad27
 800ad0c:	0800ad1d 	.word	0x0800ad1d
 800ad10:	0800ad67 	.word	0x0800ad67
 800ad14:	0800ad3f 	.word	0x0800ad3f
 800ad18:	0800ad31 	.word	0x0800ad31
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ad1c:	6839      	ldr	r1, [r7, #0]
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f000 f9de 	bl	800b0e0 <USBD_GetDescriptor>
          break;
 800ad24:	e024      	b.n	800ad70 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ad26:	6839      	ldr	r1, [r7, #0]
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f000 fb55 	bl	800b3d8 <USBD_SetAddress>
          break;
 800ad2e:	e01f      	b.n	800ad70 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ad30:	6839      	ldr	r1, [r7, #0]
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f000 fb94 	bl	800b460 <USBD_SetConfig>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	73fb      	strb	r3, [r7, #15]
          break;
 800ad3c:	e018      	b.n	800ad70 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ad3e:	6839      	ldr	r1, [r7, #0]
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	f000 fc33 	bl	800b5ac <USBD_GetConfig>
          break;
 800ad46:	e013      	b.n	800ad70 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ad48:	6839      	ldr	r1, [r7, #0]
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f000 fc64 	bl	800b618 <USBD_GetStatus>
          break;
 800ad50:	e00e      	b.n	800ad70 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ad52:	6839      	ldr	r1, [r7, #0]
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f000 fc93 	bl	800b680 <USBD_SetFeature>
          break;
 800ad5a:	e009      	b.n	800ad70 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ad5c:	6839      	ldr	r1, [r7, #0]
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f000 fca2 	bl	800b6a8 <USBD_ClrFeature>
          break;
 800ad64:	e004      	b.n	800ad70 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800ad66:	6839      	ldr	r1, [r7, #0]
 800ad68:	6878      	ldr	r0, [r7, #4]
 800ad6a:	f000 fcf9 	bl	800b760 <USBD_CtlError>
          break;
 800ad6e:	bf00      	nop
      }
      break;
 800ad70:	e004      	b.n	800ad7c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800ad72:	6839      	ldr	r1, [r7, #0]
 800ad74:	6878      	ldr	r0, [r7, #4]
 800ad76:	f000 fcf3 	bl	800b760 <USBD_CtlError>
      break;
 800ad7a:	bf00      	nop
  }

  return ret;
 800ad7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	3710      	adds	r7, #16
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}
 800ad86:	bf00      	nop

0800ad88 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b084      	sub	sp, #16
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
 800ad90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad92:	2300      	movs	r3, #0
 800ad94:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	781b      	ldrb	r3, [r3, #0]
 800ad9a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ad9e:	2b40      	cmp	r3, #64	@ 0x40
 800ada0:	d005      	beq.n	800adae <USBD_StdItfReq+0x26>
 800ada2:	2b40      	cmp	r3, #64	@ 0x40
 800ada4:	d82f      	bhi.n	800ae06 <USBD_StdItfReq+0x7e>
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d001      	beq.n	800adae <USBD_StdItfReq+0x26>
 800adaa:	2b20      	cmp	r3, #32
 800adac:	d12b      	bne.n	800ae06 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800adb4:	b2db      	uxtb	r3, r3
 800adb6:	3b01      	subs	r3, #1
 800adb8:	2b02      	cmp	r3, #2
 800adba:	d81d      	bhi.n	800adf8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	889b      	ldrh	r3, [r3, #4]
 800adc0:	b2db      	uxtb	r3, r3
 800adc2:	2b0f      	cmp	r3, #15
 800adc4:	d813      	bhi.n	800adee <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800adcc:	689b      	ldr	r3, [r3, #8]
 800adce:	6839      	ldr	r1, [r7, #0]
 800add0:	6878      	ldr	r0, [r7, #4]
 800add2:	4798      	blx	r3
 800add4:	4603      	mov	r3, r0
 800add6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	88db      	ldrh	r3, [r3, #6]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d110      	bne.n	800ae02 <USBD_StdItfReq+0x7a>
 800ade0:	7bfb      	ldrb	r3, [r7, #15]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d10d      	bne.n	800ae02 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f000 fd85 	bl	800b8f6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800adec:	e009      	b.n	800ae02 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800adee:	6839      	ldr	r1, [r7, #0]
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f000 fcb5 	bl	800b760 <USBD_CtlError>
          break;
 800adf6:	e004      	b.n	800ae02 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800adf8:	6839      	ldr	r1, [r7, #0]
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f000 fcb0 	bl	800b760 <USBD_CtlError>
          break;
 800ae00:	e000      	b.n	800ae04 <USBD_StdItfReq+0x7c>
          break;
 800ae02:	bf00      	nop
      }
      break;
 800ae04:	e004      	b.n	800ae10 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800ae06:	6839      	ldr	r1, [r7, #0]
 800ae08:	6878      	ldr	r0, [r7, #4]
 800ae0a:	f000 fca9 	bl	800b760 <USBD_CtlError>
      break;
 800ae0e:	bf00      	nop
  }

  return ret;
 800ae10:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae12:	4618      	mov	r0, r3
 800ae14:	3710      	adds	r7, #16
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}

0800ae1a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae1a:	b580      	push	{r7, lr}
 800ae1c:	b084      	sub	sp, #16
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	6078      	str	r0, [r7, #4]
 800ae22:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ae24:	2300      	movs	r3, #0
 800ae26:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	889b      	ldrh	r3, [r3, #4]
 800ae2c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	781b      	ldrb	r3, [r3, #0]
 800ae32:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ae36:	2b40      	cmp	r3, #64	@ 0x40
 800ae38:	d007      	beq.n	800ae4a <USBD_StdEPReq+0x30>
 800ae3a:	2b40      	cmp	r3, #64	@ 0x40
 800ae3c:	f200 8145 	bhi.w	800b0ca <USBD_StdEPReq+0x2b0>
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d00c      	beq.n	800ae5e <USBD_StdEPReq+0x44>
 800ae44:	2b20      	cmp	r3, #32
 800ae46:	f040 8140 	bne.w	800b0ca <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae50:	689b      	ldr	r3, [r3, #8]
 800ae52:	6839      	ldr	r1, [r7, #0]
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	4798      	blx	r3
 800ae58:	4603      	mov	r3, r0
 800ae5a:	73fb      	strb	r3, [r7, #15]
      break;
 800ae5c:	e13a      	b.n	800b0d4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	785b      	ldrb	r3, [r3, #1]
 800ae62:	2b03      	cmp	r3, #3
 800ae64:	d007      	beq.n	800ae76 <USBD_StdEPReq+0x5c>
 800ae66:	2b03      	cmp	r3, #3
 800ae68:	f300 8129 	bgt.w	800b0be <USBD_StdEPReq+0x2a4>
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d07f      	beq.n	800af70 <USBD_StdEPReq+0x156>
 800ae70:	2b01      	cmp	r3, #1
 800ae72:	d03c      	beq.n	800aeee <USBD_StdEPReq+0xd4>
 800ae74:	e123      	b.n	800b0be <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae7c:	b2db      	uxtb	r3, r3
 800ae7e:	2b02      	cmp	r3, #2
 800ae80:	d002      	beq.n	800ae88 <USBD_StdEPReq+0x6e>
 800ae82:	2b03      	cmp	r3, #3
 800ae84:	d016      	beq.n	800aeb4 <USBD_StdEPReq+0x9a>
 800ae86:	e02c      	b.n	800aee2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ae88:	7bbb      	ldrb	r3, [r7, #14]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d00d      	beq.n	800aeaa <USBD_StdEPReq+0x90>
 800ae8e:	7bbb      	ldrb	r3, [r7, #14]
 800ae90:	2b80      	cmp	r3, #128	@ 0x80
 800ae92:	d00a      	beq.n	800aeaa <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ae94:	7bbb      	ldrb	r3, [r7, #14]
 800ae96:	4619      	mov	r1, r3
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	f000 ff29 	bl	800bcf0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ae9e:	2180      	movs	r1, #128	@ 0x80
 800aea0:	6878      	ldr	r0, [r7, #4]
 800aea2:	f000 ff25 	bl	800bcf0 <USBD_LL_StallEP>
 800aea6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aea8:	e020      	b.n	800aeec <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800aeaa:	6839      	ldr	r1, [r7, #0]
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f000 fc57 	bl	800b760 <USBD_CtlError>
              break;
 800aeb2:	e01b      	b.n	800aeec <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	885b      	ldrh	r3, [r3, #2]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d10e      	bne.n	800aeda <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800aebc:	7bbb      	ldrb	r3, [r7, #14]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d00b      	beq.n	800aeda <USBD_StdEPReq+0xc0>
 800aec2:	7bbb      	ldrb	r3, [r7, #14]
 800aec4:	2b80      	cmp	r3, #128	@ 0x80
 800aec6:	d008      	beq.n	800aeda <USBD_StdEPReq+0xc0>
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	88db      	ldrh	r3, [r3, #6]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d104      	bne.n	800aeda <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800aed0:	7bbb      	ldrb	r3, [r7, #14]
 800aed2:	4619      	mov	r1, r3
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f000 ff0b 	bl	800bcf0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	f000 fd0b 	bl	800b8f6 <USBD_CtlSendStatus>

              break;
 800aee0:	e004      	b.n	800aeec <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800aee2:	6839      	ldr	r1, [r7, #0]
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f000 fc3b 	bl	800b760 <USBD_CtlError>
              break;
 800aeea:	bf00      	nop
          }
          break;
 800aeec:	e0ec      	b.n	800b0c8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aef4:	b2db      	uxtb	r3, r3
 800aef6:	2b02      	cmp	r3, #2
 800aef8:	d002      	beq.n	800af00 <USBD_StdEPReq+0xe6>
 800aefa:	2b03      	cmp	r3, #3
 800aefc:	d016      	beq.n	800af2c <USBD_StdEPReq+0x112>
 800aefe:	e030      	b.n	800af62 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800af00:	7bbb      	ldrb	r3, [r7, #14]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d00d      	beq.n	800af22 <USBD_StdEPReq+0x108>
 800af06:	7bbb      	ldrb	r3, [r7, #14]
 800af08:	2b80      	cmp	r3, #128	@ 0x80
 800af0a:	d00a      	beq.n	800af22 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800af0c:	7bbb      	ldrb	r3, [r7, #14]
 800af0e:	4619      	mov	r1, r3
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	f000 feed 	bl	800bcf0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800af16:	2180      	movs	r1, #128	@ 0x80
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f000 fee9 	bl	800bcf0 <USBD_LL_StallEP>
 800af1e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800af20:	e025      	b.n	800af6e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800af22:	6839      	ldr	r1, [r7, #0]
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	f000 fc1b 	bl	800b760 <USBD_CtlError>
              break;
 800af2a:	e020      	b.n	800af6e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	885b      	ldrh	r3, [r3, #2]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d11b      	bne.n	800af6c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800af34:	7bbb      	ldrb	r3, [r7, #14]
 800af36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d004      	beq.n	800af48 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800af3e:	7bbb      	ldrb	r3, [r7, #14]
 800af40:	4619      	mov	r1, r3
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f000 fef3 	bl	800bd2e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	f000 fcd4 	bl	800b8f6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af54:	689b      	ldr	r3, [r3, #8]
 800af56:	6839      	ldr	r1, [r7, #0]
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	4798      	blx	r3
 800af5c:	4603      	mov	r3, r0
 800af5e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800af60:	e004      	b.n	800af6c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800af62:	6839      	ldr	r1, [r7, #0]
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f000 fbfb 	bl	800b760 <USBD_CtlError>
              break;
 800af6a:	e000      	b.n	800af6e <USBD_StdEPReq+0x154>
              break;
 800af6c:	bf00      	nop
          }
          break;
 800af6e:	e0ab      	b.n	800b0c8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af76:	b2db      	uxtb	r3, r3
 800af78:	2b02      	cmp	r3, #2
 800af7a:	d002      	beq.n	800af82 <USBD_StdEPReq+0x168>
 800af7c:	2b03      	cmp	r3, #3
 800af7e:	d032      	beq.n	800afe6 <USBD_StdEPReq+0x1cc>
 800af80:	e097      	b.n	800b0b2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800af82:	7bbb      	ldrb	r3, [r7, #14]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d007      	beq.n	800af98 <USBD_StdEPReq+0x17e>
 800af88:	7bbb      	ldrb	r3, [r7, #14]
 800af8a:	2b80      	cmp	r3, #128	@ 0x80
 800af8c:	d004      	beq.n	800af98 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800af8e:	6839      	ldr	r1, [r7, #0]
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f000 fbe5 	bl	800b760 <USBD_CtlError>
                break;
 800af96:	e091      	b.n	800b0bc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	da0b      	bge.n	800afb8 <USBD_StdEPReq+0x19e>
 800afa0:	7bbb      	ldrb	r3, [r7, #14]
 800afa2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800afa6:	4613      	mov	r3, r2
 800afa8:	009b      	lsls	r3, r3, #2
 800afaa:	4413      	add	r3, r2
 800afac:	009b      	lsls	r3, r3, #2
 800afae:	3310      	adds	r3, #16
 800afb0:	687a      	ldr	r2, [r7, #4]
 800afb2:	4413      	add	r3, r2
 800afb4:	3304      	adds	r3, #4
 800afb6:	e00b      	b.n	800afd0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800afb8:	7bbb      	ldrb	r3, [r7, #14]
 800afba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800afbe:	4613      	mov	r3, r2
 800afc0:	009b      	lsls	r3, r3, #2
 800afc2:	4413      	add	r3, r2
 800afc4:	009b      	lsls	r3, r3, #2
 800afc6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800afca:	687a      	ldr	r2, [r7, #4]
 800afcc:	4413      	add	r3, r2
 800afce:	3304      	adds	r3, #4
 800afd0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	2200      	movs	r2, #0
 800afd6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	2202      	movs	r2, #2
 800afdc:	4619      	mov	r1, r3
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f000 fc2f 	bl	800b842 <USBD_CtlSendData>
              break;
 800afe4:	e06a      	b.n	800b0bc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800afe6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800afea:	2b00      	cmp	r3, #0
 800afec:	da11      	bge.n	800b012 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800afee:	7bbb      	ldrb	r3, [r7, #14]
 800aff0:	f003 020f 	and.w	r2, r3, #15
 800aff4:	6879      	ldr	r1, [r7, #4]
 800aff6:	4613      	mov	r3, r2
 800aff8:	009b      	lsls	r3, r3, #2
 800affa:	4413      	add	r3, r2
 800affc:	009b      	lsls	r3, r3, #2
 800affe:	440b      	add	r3, r1
 800b000:	3324      	adds	r3, #36	@ 0x24
 800b002:	881b      	ldrh	r3, [r3, #0]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d117      	bne.n	800b038 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b008:	6839      	ldr	r1, [r7, #0]
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	f000 fba8 	bl	800b760 <USBD_CtlError>
                  break;
 800b010:	e054      	b.n	800b0bc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b012:	7bbb      	ldrb	r3, [r7, #14]
 800b014:	f003 020f 	and.w	r2, r3, #15
 800b018:	6879      	ldr	r1, [r7, #4]
 800b01a:	4613      	mov	r3, r2
 800b01c:	009b      	lsls	r3, r3, #2
 800b01e:	4413      	add	r3, r2
 800b020:	009b      	lsls	r3, r3, #2
 800b022:	440b      	add	r3, r1
 800b024:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b028:	881b      	ldrh	r3, [r3, #0]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d104      	bne.n	800b038 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b02e:	6839      	ldr	r1, [r7, #0]
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f000 fb95 	bl	800b760 <USBD_CtlError>
                  break;
 800b036:	e041      	b.n	800b0bc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b038:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	da0b      	bge.n	800b058 <USBD_StdEPReq+0x23e>
 800b040:	7bbb      	ldrb	r3, [r7, #14]
 800b042:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b046:	4613      	mov	r3, r2
 800b048:	009b      	lsls	r3, r3, #2
 800b04a:	4413      	add	r3, r2
 800b04c:	009b      	lsls	r3, r3, #2
 800b04e:	3310      	adds	r3, #16
 800b050:	687a      	ldr	r2, [r7, #4]
 800b052:	4413      	add	r3, r2
 800b054:	3304      	adds	r3, #4
 800b056:	e00b      	b.n	800b070 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b058:	7bbb      	ldrb	r3, [r7, #14]
 800b05a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b05e:	4613      	mov	r3, r2
 800b060:	009b      	lsls	r3, r3, #2
 800b062:	4413      	add	r3, r2
 800b064:	009b      	lsls	r3, r3, #2
 800b066:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b06a:	687a      	ldr	r2, [r7, #4]
 800b06c:	4413      	add	r3, r2
 800b06e:	3304      	adds	r3, #4
 800b070:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b072:	7bbb      	ldrb	r3, [r7, #14]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d002      	beq.n	800b07e <USBD_StdEPReq+0x264>
 800b078:	7bbb      	ldrb	r3, [r7, #14]
 800b07a:	2b80      	cmp	r3, #128	@ 0x80
 800b07c:	d103      	bne.n	800b086 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	2200      	movs	r2, #0
 800b082:	601a      	str	r2, [r3, #0]
 800b084:	e00e      	b.n	800b0a4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b086:	7bbb      	ldrb	r3, [r7, #14]
 800b088:	4619      	mov	r1, r3
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f000 fe6e 	bl	800bd6c <USBD_LL_IsStallEP>
 800b090:	4603      	mov	r3, r0
 800b092:	2b00      	cmp	r3, #0
 800b094:	d003      	beq.n	800b09e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800b096:	68bb      	ldr	r3, [r7, #8]
 800b098:	2201      	movs	r2, #1
 800b09a:	601a      	str	r2, [r3, #0]
 800b09c:	e002      	b.n	800b0a4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	2202      	movs	r2, #2
 800b0a8:	4619      	mov	r1, r3
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f000 fbc9 	bl	800b842 <USBD_CtlSendData>
              break;
 800b0b0:	e004      	b.n	800b0bc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800b0b2:	6839      	ldr	r1, [r7, #0]
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f000 fb53 	bl	800b760 <USBD_CtlError>
              break;
 800b0ba:	bf00      	nop
          }
          break;
 800b0bc:	e004      	b.n	800b0c8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800b0be:	6839      	ldr	r1, [r7, #0]
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f000 fb4d 	bl	800b760 <USBD_CtlError>
          break;
 800b0c6:	bf00      	nop
      }
      break;
 800b0c8:	e004      	b.n	800b0d4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800b0ca:	6839      	ldr	r1, [r7, #0]
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f000 fb47 	bl	800b760 <USBD_CtlError>
      break;
 800b0d2:	bf00      	nop
  }

  return ret;
 800b0d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	3710      	adds	r7, #16
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}
	...

0800b0e0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b084      	sub	sp, #16
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
 800b0e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	885b      	ldrh	r3, [r3, #2]
 800b0fa:	0a1b      	lsrs	r3, r3, #8
 800b0fc:	b29b      	uxth	r3, r3
 800b0fe:	3b01      	subs	r3, #1
 800b100:	2b06      	cmp	r3, #6
 800b102:	f200 813b 	bhi.w	800b37c <USBD_GetDescriptor+0x29c>
 800b106:	a201      	add	r2, pc, #4	@ (adr r2, 800b10c <USBD_GetDescriptor+0x2c>)
 800b108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b10c:	0800b129 	.word	0x0800b129
 800b110:	0800b141 	.word	0x0800b141
 800b114:	0800b181 	.word	0x0800b181
 800b118:	0800b37d 	.word	0x0800b37d
 800b11c:	0800b37d 	.word	0x0800b37d
 800b120:	0800b31d 	.word	0x0800b31d
 800b124:	0800b349 	.word	0x0800b349
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	687a      	ldr	r2, [r7, #4]
 800b132:	7c12      	ldrb	r2, [r2, #16]
 800b134:	f107 0108 	add.w	r1, r7, #8
 800b138:	4610      	mov	r0, r2
 800b13a:	4798      	blx	r3
 800b13c:	60f8      	str	r0, [r7, #12]
      break;
 800b13e:	e125      	b.n	800b38c <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	7c1b      	ldrb	r3, [r3, #16]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d10d      	bne.n	800b164 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b14e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b150:	f107 0208 	add.w	r2, r7, #8
 800b154:	4610      	mov	r0, r2
 800b156:	4798      	blx	r3
 800b158:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	3301      	adds	r3, #1
 800b15e:	2202      	movs	r2, #2
 800b160:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b162:	e113      	b.n	800b38c <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b16a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b16c:	f107 0208 	add.w	r2, r7, #8
 800b170:	4610      	mov	r0, r2
 800b172:	4798      	blx	r3
 800b174:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	3301      	adds	r3, #1
 800b17a:	2202      	movs	r2, #2
 800b17c:	701a      	strb	r2, [r3, #0]
      break;
 800b17e:	e105      	b.n	800b38c <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	885b      	ldrh	r3, [r3, #2]
 800b184:	b2db      	uxtb	r3, r3
 800b186:	2b05      	cmp	r3, #5
 800b188:	f200 80ac 	bhi.w	800b2e4 <USBD_GetDescriptor+0x204>
 800b18c:	a201      	add	r2, pc, #4	@ (adr r2, 800b194 <USBD_GetDescriptor+0xb4>)
 800b18e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b192:	bf00      	nop
 800b194:	0800b1ad 	.word	0x0800b1ad
 800b198:	0800b1e1 	.word	0x0800b1e1
 800b19c:	0800b215 	.word	0x0800b215
 800b1a0:	0800b249 	.word	0x0800b249
 800b1a4:	0800b27d 	.word	0x0800b27d
 800b1a8:	0800b2b1 	.word	0x0800b2b1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b1b2:	685b      	ldr	r3, [r3, #4]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d00b      	beq.n	800b1d0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b1be:	685b      	ldr	r3, [r3, #4]
 800b1c0:	687a      	ldr	r2, [r7, #4]
 800b1c2:	7c12      	ldrb	r2, [r2, #16]
 800b1c4:	f107 0108 	add.w	r1, r7, #8
 800b1c8:	4610      	mov	r0, r2
 800b1ca:	4798      	blx	r3
 800b1cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b1ce:	e0a4      	b.n	800b31a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800b1d0:	6839      	ldr	r1, [r7, #0]
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f000 fac4 	bl	800b760 <USBD_CtlError>
            err++;
 800b1d8:	7afb      	ldrb	r3, [r7, #11]
 800b1da:	3301      	adds	r3, #1
 800b1dc:	72fb      	strb	r3, [r7, #11]
          break;
 800b1de:	e09c      	b.n	800b31a <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b1e6:	689b      	ldr	r3, [r3, #8]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d00b      	beq.n	800b204 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b1f2:	689b      	ldr	r3, [r3, #8]
 800b1f4:	687a      	ldr	r2, [r7, #4]
 800b1f6:	7c12      	ldrb	r2, [r2, #16]
 800b1f8:	f107 0108 	add.w	r1, r7, #8
 800b1fc:	4610      	mov	r0, r2
 800b1fe:	4798      	blx	r3
 800b200:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b202:	e08a      	b.n	800b31a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800b204:	6839      	ldr	r1, [r7, #0]
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f000 faaa 	bl	800b760 <USBD_CtlError>
            err++;
 800b20c:	7afb      	ldrb	r3, [r7, #11]
 800b20e:	3301      	adds	r3, #1
 800b210:	72fb      	strb	r3, [r7, #11]
          break;
 800b212:	e082      	b.n	800b31a <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b21a:	68db      	ldr	r3, [r3, #12]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d00b      	beq.n	800b238 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b226:	68db      	ldr	r3, [r3, #12]
 800b228:	687a      	ldr	r2, [r7, #4]
 800b22a:	7c12      	ldrb	r2, [r2, #16]
 800b22c:	f107 0108 	add.w	r1, r7, #8
 800b230:	4610      	mov	r0, r2
 800b232:	4798      	blx	r3
 800b234:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b236:	e070      	b.n	800b31a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800b238:	6839      	ldr	r1, [r7, #0]
 800b23a:	6878      	ldr	r0, [r7, #4]
 800b23c:	f000 fa90 	bl	800b760 <USBD_CtlError>
            err++;
 800b240:	7afb      	ldrb	r3, [r7, #11]
 800b242:	3301      	adds	r3, #1
 800b244:	72fb      	strb	r3, [r7, #11]
          break;
 800b246:	e068      	b.n	800b31a <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b24e:	691b      	ldr	r3, [r3, #16]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d00b      	beq.n	800b26c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b25a:	691b      	ldr	r3, [r3, #16]
 800b25c:	687a      	ldr	r2, [r7, #4]
 800b25e:	7c12      	ldrb	r2, [r2, #16]
 800b260:	f107 0108 	add.w	r1, r7, #8
 800b264:	4610      	mov	r0, r2
 800b266:	4798      	blx	r3
 800b268:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b26a:	e056      	b.n	800b31a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800b26c:	6839      	ldr	r1, [r7, #0]
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f000 fa76 	bl	800b760 <USBD_CtlError>
            err++;
 800b274:	7afb      	ldrb	r3, [r7, #11]
 800b276:	3301      	adds	r3, #1
 800b278:	72fb      	strb	r3, [r7, #11]
          break;
 800b27a:	e04e      	b.n	800b31a <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b282:	695b      	ldr	r3, [r3, #20]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d00b      	beq.n	800b2a0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b28e:	695b      	ldr	r3, [r3, #20]
 800b290:	687a      	ldr	r2, [r7, #4]
 800b292:	7c12      	ldrb	r2, [r2, #16]
 800b294:	f107 0108 	add.w	r1, r7, #8
 800b298:	4610      	mov	r0, r2
 800b29a:	4798      	blx	r3
 800b29c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b29e:	e03c      	b.n	800b31a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800b2a0:	6839      	ldr	r1, [r7, #0]
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f000 fa5c 	bl	800b760 <USBD_CtlError>
            err++;
 800b2a8:	7afb      	ldrb	r3, [r7, #11]
 800b2aa:	3301      	adds	r3, #1
 800b2ac:	72fb      	strb	r3, [r7, #11]
          break;
 800b2ae:	e034      	b.n	800b31a <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2b6:	699b      	ldr	r3, [r3, #24]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d00b      	beq.n	800b2d4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2c2:	699b      	ldr	r3, [r3, #24]
 800b2c4:	687a      	ldr	r2, [r7, #4]
 800b2c6:	7c12      	ldrb	r2, [r2, #16]
 800b2c8:	f107 0108 	add.w	r1, r7, #8
 800b2cc:	4610      	mov	r0, r2
 800b2ce:	4798      	blx	r3
 800b2d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2d2:	e022      	b.n	800b31a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800b2d4:	6839      	ldr	r1, [r7, #0]
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	f000 fa42 	bl	800b760 <USBD_CtlError>
            err++;
 800b2dc:	7afb      	ldrb	r3, [r7, #11]
 800b2de:	3301      	adds	r3, #1
 800b2e0:	72fb      	strb	r3, [r7, #11]
          break;
 800b2e2:	e01a      	b.n	800b31a <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b2ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d00c      	beq.n	800b30a <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b2f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2f8:	683a      	ldr	r2, [r7, #0]
 800b2fa:	8852      	ldrh	r2, [r2, #2]
 800b2fc:	b2d1      	uxtb	r1, r2
 800b2fe:	f107 0208 	add.w	r2, r7, #8
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	4798      	blx	r3
 800b306:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 800b308:	e006      	b.n	800b318 <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 800b30a:	6839      	ldr	r1, [r7, #0]
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f000 fa27 	bl	800b760 <USBD_CtlError>
            err++;
 800b312:	7afb      	ldrb	r3, [r7, #11]
 800b314:	3301      	adds	r3, #1
 800b316:	72fb      	strb	r3, [r7, #11]
          break;
 800b318:	bf00      	nop
      }
      break;
 800b31a:	e037      	b.n	800b38c <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	7c1b      	ldrb	r3, [r3, #16]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d109      	bne.n	800b338 <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b32a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b32c:	f107 0208 	add.w	r2, r7, #8
 800b330:	4610      	mov	r0, r2
 800b332:	4798      	blx	r3
 800b334:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b336:	e029      	b.n	800b38c <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 800b338:	6839      	ldr	r1, [r7, #0]
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f000 fa10 	bl	800b760 <USBD_CtlError>
        err++;
 800b340:	7afb      	ldrb	r3, [r7, #11]
 800b342:	3301      	adds	r3, #1
 800b344:	72fb      	strb	r3, [r7, #11]
      break;
 800b346:	e021      	b.n	800b38c <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	7c1b      	ldrb	r3, [r3, #16]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d10d      	bne.n	800b36c <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b358:	f107 0208 	add.w	r2, r7, #8
 800b35c:	4610      	mov	r0, r2
 800b35e:	4798      	blx	r3
 800b360:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	3301      	adds	r3, #1
 800b366:	2207      	movs	r2, #7
 800b368:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b36a:	e00f      	b.n	800b38c <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 800b36c:	6839      	ldr	r1, [r7, #0]
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	f000 f9f6 	bl	800b760 <USBD_CtlError>
        err++;
 800b374:	7afb      	ldrb	r3, [r7, #11]
 800b376:	3301      	adds	r3, #1
 800b378:	72fb      	strb	r3, [r7, #11]
      break;
 800b37a:	e007      	b.n	800b38c <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 800b37c:	6839      	ldr	r1, [r7, #0]
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	f000 f9ee 	bl	800b760 <USBD_CtlError>
      err++;
 800b384:	7afb      	ldrb	r3, [r7, #11]
 800b386:	3301      	adds	r3, #1
 800b388:	72fb      	strb	r3, [r7, #11]
      break;
 800b38a:	bf00      	nop
  }

  if (err != 0U)
 800b38c:	7afb      	ldrb	r3, [r7, #11]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d11e      	bne.n	800b3d0 <USBD_GetDescriptor+0x2f0>
  {
    return;
  }

  if (req->wLength != 0U)
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	88db      	ldrh	r3, [r3, #6]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d016      	beq.n	800b3c8 <USBD_GetDescriptor+0x2e8>
  {
    if (len != 0U)
 800b39a:	893b      	ldrh	r3, [r7, #8]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d00e      	beq.n	800b3be <USBD_GetDescriptor+0x2de>
    {
      len = MIN(len, req->wLength);
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	88da      	ldrh	r2, [r3, #6]
 800b3a4:	893b      	ldrh	r3, [r7, #8]
 800b3a6:	4293      	cmp	r3, r2
 800b3a8:	bf28      	it	cs
 800b3aa:	4613      	movcs	r3, r2
 800b3ac:	b29b      	uxth	r3, r3
 800b3ae:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b3b0:	893b      	ldrh	r3, [r7, #8]
 800b3b2:	461a      	mov	r2, r3
 800b3b4:	68f9      	ldr	r1, [r7, #12]
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f000 fa43 	bl	800b842 <USBD_CtlSendData>
 800b3bc:	e009      	b.n	800b3d2 <USBD_GetDescriptor+0x2f2>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b3be:	6839      	ldr	r1, [r7, #0]
 800b3c0:	6878      	ldr	r0, [r7, #4]
 800b3c2:	f000 f9cd 	bl	800b760 <USBD_CtlError>
 800b3c6:	e004      	b.n	800b3d2 <USBD_GetDescriptor+0x2f2>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b3c8:	6878      	ldr	r0, [r7, #4]
 800b3ca:	f000 fa94 	bl	800b8f6 <USBD_CtlSendStatus>
 800b3ce:	e000      	b.n	800b3d2 <USBD_GetDescriptor+0x2f2>
    return;
 800b3d0:	bf00      	nop
  }
}
 800b3d2:	3710      	adds	r7, #16
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	bd80      	pop	{r7, pc}

0800b3d8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b084      	sub	sp, #16
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
 800b3e0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	889b      	ldrh	r3, [r3, #4]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d131      	bne.n	800b44e <USBD_SetAddress+0x76>
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	88db      	ldrh	r3, [r3, #6]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d12d      	bne.n	800b44e <USBD_SetAddress+0x76>
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	885b      	ldrh	r3, [r3, #2]
 800b3f6:	2b7f      	cmp	r3, #127	@ 0x7f
 800b3f8:	d829      	bhi.n	800b44e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	885b      	ldrh	r3, [r3, #2]
 800b3fe:	b2db      	uxtb	r3, r3
 800b400:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b404:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b40c:	b2db      	uxtb	r3, r3
 800b40e:	2b03      	cmp	r3, #3
 800b410:	d104      	bne.n	800b41c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b412:	6839      	ldr	r1, [r7, #0]
 800b414:	6878      	ldr	r0, [r7, #4]
 800b416:	f000 f9a3 	bl	800b760 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b41a:	e01d      	b.n	800b458 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	7bfa      	ldrb	r2, [r7, #15]
 800b420:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b424:	7bfb      	ldrb	r3, [r7, #15]
 800b426:	4619      	mov	r1, r3
 800b428:	6878      	ldr	r0, [r7, #4]
 800b42a:	f000 fccb 	bl	800bdc4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f000 fa61 	bl	800b8f6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b434:	7bfb      	ldrb	r3, [r7, #15]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d004      	beq.n	800b444 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2202      	movs	r2, #2
 800b43e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b442:	e009      	b.n	800b458 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2201      	movs	r2, #1
 800b448:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b44c:	e004      	b.n	800b458 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b44e:	6839      	ldr	r1, [r7, #0]
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	f000 f985 	bl	800b760 <USBD_CtlError>
  }
}
 800b456:	bf00      	nop
 800b458:	bf00      	nop
 800b45a:	3710      	adds	r7, #16
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd80      	pop	{r7, pc}

0800b460 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b084      	sub	sp, #16
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
 800b468:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b46a:	2300      	movs	r3, #0
 800b46c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	885b      	ldrh	r3, [r3, #2]
 800b472:	b2da      	uxtb	r2, r3
 800b474:	4b4c      	ldr	r3, [pc, #304]	@ (800b5a8 <USBD_SetConfig+0x148>)
 800b476:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b478:	4b4b      	ldr	r3, [pc, #300]	@ (800b5a8 <USBD_SetConfig+0x148>)
 800b47a:	781b      	ldrb	r3, [r3, #0]
 800b47c:	2b01      	cmp	r3, #1
 800b47e:	d905      	bls.n	800b48c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b480:	6839      	ldr	r1, [r7, #0]
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	f000 f96c 	bl	800b760 <USBD_CtlError>
    return USBD_FAIL;
 800b488:	2303      	movs	r3, #3
 800b48a:	e088      	b.n	800b59e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b492:	b2db      	uxtb	r3, r3
 800b494:	2b02      	cmp	r3, #2
 800b496:	d002      	beq.n	800b49e <USBD_SetConfig+0x3e>
 800b498:	2b03      	cmp	r3, #3
 800b49a:	d025      	beq.n	800b4e8 <USBD_SetConfig+0x88>
 800b49c:	e071      	b.n	800b582 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b49e:	4b42      	ldr	r3, [pc, #264]	@ (800b5a8 <USBD_SetConfig+0x148>)
 800b4a0:	781b      	ldrb	r3, [r3, #0]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d01c      	beq.n	800b4e0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800b4a6:	4b40      	ldr	r3, [pc, #256]	@ (800b5a8 <USBD_SetConfig+0x148>)
 800b4a8:	781b      	ldrb	r3, [r3, #0]
 800b4aa:	461a      	mov	r2, r3
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b4b0:	4b3d      	ldr	r3, [pc, #244]	@ (800b5a8 <USBD_SetConfig+0x148>)
 800b4b2:	781b      	ldrb	r3, [r3, #0]
 800b4b4:	4619      	mov	r1, r3
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f7ff f93b 	bl	800a732 <USBD_SetClassConfig>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b4c0:	7bfb      	ldrb	r3, [r7, #15]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d004      	beq.n	800b4d0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800b4c6:	6839      	ldr	r1, [r7, #0]
 800b4c8:	6878      	ldr	r0, [r7, #4]
 800b4ca:	f000 f949 	bl	800b760 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b4ce:	e065      	b.n	800b59c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b4d0:	6878      	ldr	r0, [r7, #4]
 800b4d2:	f000 fa10 	bl	800b8f6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2203      	movs	r2, #3
 800b4da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b4de:	e05d      	b.n	800b59c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f000 fa08 	bl	800b8f6 <USBD_CtlSendStatus>
      break;
 800b4e6:	e059      	b.n	800b59c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b4e8:	4b2f      	ldr	r3, [pc, #188]	@ (800b5a8 <USBD_SetConfig+0x148>)
 800b4ea:	781b      	ldrb	r3, [r3, #0]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d112      	bne.n	800b516 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2202      	movs	r2, #2
 800b4f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b4f8:	4b2b      	ldr	r3, [pc, #172]	@ (800b5a8 <USBD_SetConfig+0x148>)
 800b4fa:	781b      	ldrb	r3, [r3, #0]
 800b4fc:	461a      	mov	r2, r3
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b502:	4b29      	ldr	r3, [pc, #164]	@ (800b5a8 <USBD_SetConfig+0x148>)
 800b504:	781b      	ldrb	r3, [r3, #0]
 800b506:	4619      	mov	r1, r3
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	f7ff f92e 	bl	800a76a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	f000 f9f1 	bl	800b8f6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b514:	e042      	b.n	800b59c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800b516:	4b24      	ldr	r3, [pc, #144]	@ (800b5a8 <USBD_SetConfig+0x148>)
 800b518:	781b      	ldrb	r3, [r3, #0]
 800b51a:	461a      	mov	r2, r3
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	685b      	ldr	r3, [r3, #4]
 800b520:	429a      	cmp	r2, r3
 800b522:	d02a      	beq.n	800b57a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	685b      	ldr	r3, [r3, #4]
 800b528:	b2db      	uxtb	r3, r3
 800b52a:	4619      	mov	r1, r3
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f7ff f91c 	bl	800a76a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b532:	4b1d      	ldr	r3, [pc, #116]	@ (800b5a8 <USBD_SetConfig+0x148>)
 800b534:	781b      	ldrb	r3, [r3, #0]
 800b536:	461a      	mov	r2, r3
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b53c:	4b1a      	ldr	r3, [pc, #104]	@ (800b5a8 <USBD_SetConfig+0x148>)
 800b53e:	781b      	ldrb	r3, [r3, #0]
 800b540:	4619      	mov	r1, r3
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	f7ff f8f5 	bl	800a732 <USBD_SetClassConfig>
 800b548:	4603      	mov	r3, r0
 800b54a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b54c:	7bfb      	ldrb	r3, [r7, #15]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d00f      	beq.n	800b572 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b552:	6839      	ldr	r1, [r7, #0]
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f000 f903 	bl	800b760 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	685b      	ldr	r3, [r3, #4]
 800b55e:	b2db      	uxtb	r3, r3
 800b560:	4619      	mov	r1, r3
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f7ff f901 	bl	800a76a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2202      	movs	r2, #2
 800b56c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b570:	e014      	b.n	800b59c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	f000 f9bf 	bl	800b8f6 <USBD_CtlSendStatus>
      break;
 800b578:	e010      	b.n	800b59c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b57a:	6878      	ldr	r0, [r7, #4]
 800b57c:	f000 f9bb 	bl	800b8f6 <USBD_CtlSendStatus>
      break;
 800b580:	e00c      	b.n	800b59c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b582:	6839      	ldr	r1, [r7, #0]
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f000 f8eb 	bl	800b760 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b58a:	4b07      	ldr	r3, [pc, #28]	@ (800b5a8 <USBD_SetConfig+0x148>)
 800b58c:	781b      	ldrb	r3, [r3, #0]
 800b58e:	4619      	mov	r1, r3
 800b590:	6878      	ldr	r0, [r7, #4]
 800b592:	f7ff f8ea 	bl	800a76a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b596:	2303      	movs	r3, #3
 800b598:	73fb      	strb	r3, [r7, #15]
      break;
 800b59a:	bf00      	nop
  }

  return ret;
 800b59c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	3710      	adds	r7, #16
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	bd80      	pop	{r7, pc}
 800b5a6:	bf00      	nop
 800b5a8:	20002660 	.word	0x20002660

0800b5ac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b082      	sub	sp, #8
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
 800b5b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	88db      	ldrh	r3, [r3, #6]
 800b5ba:	2b01      	cmp	r3, #1
 800b5bc:	d004      	beq.n	800b5c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b5be:	6839      	ldr	r1, [r7, #0]
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f000 f8cd 	bl	800b760 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b5c6:	e023      	b.n	800b610 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5ce:	b2db      	uxtb	r3, r3
 800b5d0:	2b02      	cmp	r3, #2
 800b5d2:	dc02      	bgt.n	800b5da <USBD_GetConfig+0x2e>
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	dc03      	bgt.n	800b5e0 <USBD_GetConfig+0x34>
 800b5d8:	e015      	b.n	800b606 <USBD_GetConfig+0x5a>
 800b5da:	2b03      	cmp	r3, #3
 800b5dc:	d00b      	beq.n	800b5f6 <USBD_GetConfig+0x4a>
 800b5de:	e012      	b.n	800b606 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	3308      	adds	r3, #8
 800b5ea:	2201      	movs	r2, #1
 800b5ec:	4619      	mov	r1, r3
 800b5ee:	6878      	ldr	r0, [r7, #4]
 800b5f0:	f000 f927 	bl	800b842 <USBD_CtlSendData>
        break;
 800b5f4:	e00c      	b.n	800b610 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	3304      	adds	r3, #4
 800b5fa:	2201      	movs	r2, #1
 800b5fc:	4619      	mov	r1, r3
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	f000 f91f 	bl	800b842 <USBD_CtlSendData>
        break;
 800b604:	e004      	b.n	800b610 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b606:	6839      	ldr	r1, [r7, #0]
 800b608:	6878      	ldr	r0, [r7, #4]
 800b60a:	f000 f8a9 	bl	800b760 <USBD_CtlError>
        break;
 800b60e:	bf00      	nop
}
 800b610:	bf00      	nop
 800b612:	3708      	adds	r7, #8
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}

0800b618 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b082      	sub	sp, #8
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
 800b620:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b628:	b2db      	uxtb	r3, r3
 800b62a:	3b01      	subs	r3, #1
 800b62c:	2b02      	cmp	r3, #2
 800b62e:	d81e      	bhi.n	800b66e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	88db      	ldrh	r3, [r3, #6]
 800b634:	2b02      	cmp	r3, #2
 800b636:	d004      	beq.n	800b642 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b638:	6839      	ldr	r1, [r7, #0]
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f000 f890 	bl	800b760 <USBD_CtlError>
        break;
 800b640:	e01a      	b.n	800b678 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2201      	movs	r2, #1
 800b646:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d005      	beq.n	800b65e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	68db      	ldr	r3, [r3, #12]
 800b656:	f043 0202 	orr.w	r2, r3, #2
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	330c      	adds	r3, #12
 800b662:	2202      	movs	r2, #2
 800b664:	4619      	mov	r1, r3
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f000 f8eb 	bl	800b842 <USBD_CtlSendData>
      break;
 800b66c:	e004      	b.n	800b678 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b66e:	6839      	ldr	r1, [r7, #0]
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	f000 f875 	bl	800b760 <USBD_CtlError>
      break;
 800b676:	bf00      	nop
  }
}
 800b678:	bf00      	nop
 800b67a:	3708      	adds	r7, #8
 800b67c:	46bd      	mov	sp, r7
 800b67e:	bd80      	pop	{r7, pc}

0800b680 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b082      	sub	sp, #8
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
 800b688:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	885b      	ldrh	r3, [r3, #2]
 800b68e:	2b01      	cmp	r3, #1
 800b690:	d106      	bne.n	800b6a0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2201      	movs	r2, #1
 800b696:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b69a:	6878      	ldr	r0, [r7, #4]
 800b69c:	f000 f92b 	bl	800b8f6 <USBD_CtlSendStatus>
  }
}
 800b6a0:	bf00      	nop
 800b6a2:	3708      	adds	r7, #8
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd80      	pop	{r7, pc}

0800b6a8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b082      	sub	sp, #8
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
 800b6b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6b8:	b2db      	uxtb	r3, r3
 800b6ba:	3b01      	subs	r3, #1
 800b6bc:	2b02      	cmp	r3, #2
 800b6be:	d80b      	bhi.n	800b6d8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	885b      	ldrh	r3, [r3, #2]
 800b6c4:	2b01      	cmp	r3, #1
 800b6c6:	d10c      	bne.n	800b6e2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b6d0:	6878      	ldr	r0, [r7, #4]
 800b6d2:	f000 f910 	bl	800b8f6 <USBD_CtlSendStatus>
      }
      break;
 800b6d6:	e004      	b.n	800b6e2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b6d8:	6839      	ldr	r1, [r7, #0]
 800b6da:	6878      	ldr	r0, [r7, #4]
 800b6dc:	f000 f840 	bl	800b760 <USBD_CtlError>
      break;
 800b6e0:	e000      	b.n	800b6e4 <USBD_ClrFeature+0x3c>
      break;
 800b6e2:	bf00      	nop
  }
}
 800b6e4:	bf00      	nop
 800b6e6:	3708      	adds	r7, #8
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}

0800b6ec <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b084      	sub	sp, #16
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
 800b6f4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	781a      	ldrb	r2, [r3, #0]
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	3301      	adds	r3, #1
 800b706:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	781a      	ldrb	r2, [r3, #0]
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	3301      	adds	r3, #1
 800b714:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b716:	68f8      	ldr	r0, [r7, #12]
 800b718:	f7ff faa9 	bl	800ac6e <SWAPBYTE>
 800b71c:	4603      	mov	r3, r0
 800b71e:	461a      	mov	r2, r3
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	3301      	adds	r3, #1
 800b728:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	3301      	adds	r3, #1
 800b72e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b730:	68f8      	ldr	r0, [r7, #12]
 800b732:	f7ff fa9c 	bl	800ac6e <SWAPBYTE>
 800b736:	4603      	mov	r3, r0
 800b738:	461a      	mov	r2, r3
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	3301      	adds	r3, #1
 800b742:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	3301      	adds	r3, #1
 800b748:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b74a:	68f8      	ldr	r0, [r7, #12]
 800b74c:	f7ff fa8f 	bl	800ac6e <SWAPBYTE>
 800b750:	4603      	mov	r3, r0
 800b752:	461a      	mov	r2, r3
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	80da      	strh	r2, [r3, #6]
}
 800b758:	bf00      	nop
 800b75a:	3710      	adds	r7, #16
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}

0800b760 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b082      	sub	sp, #8
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
 800b768:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b76a:	2180      	movs	r1, #128	@ 0x80
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f000 fabf 	bl	800bcf0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b772:	2100      	movs	r1, #0
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	f000 fabb 	bl	800bcf0 <USBD_LL_StallEP>
}
 800b77a:	bf00      	nop
 800b77c:	3708      	adds	r7, #8
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}

0800b782 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b782:	b580      	push	{r7, lr}
 800b784:	b086      	sub	sp, #24
 800b786:	af00      	add	r7, sp, #0
 800b788:	60f8      	str	r0, [r7, #12]
 800b78a:	60b9      	str	r1, [r7, #8]
 800b78c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b78e:	2300      	movs	r3, #0
 800b790:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d036      	beq.n	800b806 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b79c:	6938      	ldr	r0, [r7, #16]
 800b79e:	f000 f836 	bl	800b80e <USBD_GetLen>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	3301      	adds	r3, #1
 800b7a6:	b29b      	uxth	r3, r3
 800b7a8:	005b      	lsls	r3, r3, #1
 800b7aa:	b29a      	uxth	r2, r3
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b7b0:	7dfb      	ldrb	r3, [r7, #23]
 800b7b2:	68ba      	ldr	r2, [r7, #8]
 800b7b4:	4413      	add	r3, r2
 800b7b6:	687a      	ldr	r2, [r7, #4]
 800b7b8:	7812      	ldrb	r2, [r2, #0]
 800b7ba:	701a      	strb	r2, [r3, #0]
  idx++;
 800b7bc:	7dfb      	ldrb	r3, [r7, #23]
 800b7be:	3301      	adds	r3, #1
 800b7c0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b7c2:	7dfb      	ldrb	r3, [r7, #23]
 800b7c4:	68ba      	ldr	r2, [r7, #8]
 800b7c6:	4413      	add	r3, r2
 800b7c8:	2203      	movs	r2, #3
 800b7ca:	701a      	strb	r2, [r3, #0]
  idx++;
 800b7cc:	7dfb      	ldrb	r3, [r7, #23]
 800b7ce:	3301      	adds	r3, #1
 800b7d0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b7d2:	e013      	b.n	800b7fc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b7d4:	7dfb      	ldrb	r3, [r7, #23]
 800b7d6:	68ba      	ldr	r2, [r7, #8]
 800b7d8:	4413      	add	r3, r2
 800b7da:	693a      	ldr	r2, [r7, #16]
 800b7dc:	7812      	ldrb	r2, [r2, #0]
 800b7de:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b7e0:	693b      	ldr	r3, [r7, #16]
 800b7e2:	3301      	adds	r3, #1
 800b7e4:	613b      	str	r3, [r7, #16]
    idx++;
 800b7e6:	7dfb      	ldrb	r3, [r7, #23]
 800b7e8:	3301      	adds	r3, #1
 800b7ea:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b7ec:	7dfb      	ldrb	r3, [r7, #23]
 800b7ee:	68ba      	ldr	r2, [r7, #8]
 800b7f0:	4413      	add	r3, r2
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	701a      	strb	r2, [r3, #0]
    idx++;
 800b7f6:	7dfb      	ldrb	r3, [r7, #23]
 800b7f8:	3301      	adds	r3, #1
 800b7fa:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b7fc:	693b      	ldr	r3, [r7, #16]
 800b7fe:	781b      	ldrb	r3, [r3, #0]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d1e7      	bne.n	800b7d4 <USBD_GetString+0x52>
 800b804:	e000      	b.n	800b808 <USBD_GetString+0x86>
    return;
 800b806:	bf00      	nop
  }
}
 800b808:	3718      	adds	r7, #24
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bd80      	pop	{r7, pc}

0800b80e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b80e:	b480      	push	{r7}
 800b810:	b085      	sub	sp, #20
 800b812:	af00      	add	r7, sp, #0
 800b814:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b816:	2300      	movs	r3, #0
 800b818:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b81e:	e005      	b.n	800b82c <USBD_GetLen+0x1e>
  {
    len++;
 800b820:	7bfb      	ldrb	r3, [r7, #15]
 800b822:	3301      	adds	r3, #1
 800b824:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	3301      	adds	r3, #1
 800b82a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b82c:	68bb      	ldr	r3, [r7, #8]
 800b82e:	781b      	ldrb	r3, [r3, #0]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d1f5      	bne.n	800b820 <USBD_GetLen+0x12>
  }

  return len;
 800b834:	7bfb      	ldrb	r3, [r7, #15]
}
 800b836:	4618      	mov	r0, r3
 800b838:	3714      	adds	r7, #20
 800b83a:	46bd      	mov	sp, r7
 800b83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b840:	4770      	bx	lr

0800b842 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b842:	b580      	push	{r7, lr}
 800b844:	b084      	sub	sp, #16
 800b846:	af00      	add	r7, sp, #0
 800b848:	60f8      	str	r0, [r7, #12]
 800b84a:	60b9      	str	r1, [r7, #8]
 800b84c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	2202      	movs	r2, #2
 800b852:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	687a      	ldr	r2, [r7, #4]
 800b85a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	687a      	ldr	r2, [r7, #4]
 800b860:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	68ba      	ldr	r2, [r7, #8]
 800b866:	2100      	movs	r1, #0
 800b868:	68f8      	ldr	r0, [r7, #12]
 800b86a:	f000 faca 	bl	800be02 <USBD_LL_Transmit>

  return USBD_OK;
 800b86e:	2300      	movs	r3, #0
}
 800b870:	4618      	mov	r0, r3
 800b872:	3710      	adds	r7, #16
 800b874:	46bd      	mov	sp, r7
 800b876:	bd80      	pop	{r7, pc}

0800b878 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b084      	sub	sp, #16
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	60f8      	str	r0, [r7, #12]
 800b880:	60b9      	str	r1, [r7, #8]
 800b882:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	68ba      	ldr	r2, [r7, #8]
 800b888:	2100      	movs	r1, #0
 800b88a:	68f8      	ldr	r0, [r7, #12]
 800b88c:	f000 fab9 	bl	800be02 <USBD_LL_Transmit>

  return USBD_OK;
 800b890:	2300      	movs	r3, #0
}
 800b892:	4618      	mov	r0, r3
 800b894:	3710      	adds	r7, #16
 800b896:	46bd      	mov	sp, r7
 800b898:	bd80      	pop	{r7, pc}

0800b89a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b89a:	b580      	push	{r7, lr}
 800b89c:	b084      	sub	sp, #16
 800b89e:	af00      	add	r7, sp, #0
 800b8a0:	60f8      	str	r0, [r7, #12]
 800b8a2:	60b9      	str	r1, [r7, #8]
 800b8a4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	2203      	movs	r2, #3
 800b8aa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	687a      	ldr	r2, [r7, #4]
 800b8b2:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	687a      	ldr	r2, [r7, #4]
 800b8ba:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	68ba      	ldr	r2, [r7, #8]
 800b8c2:	2100      	movs	r1, #0
 800b8c4:	68f8      	ldr	r0, [r7, #12]
 800b8c6:	f000 fabd 	bl	800be44 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b8ca:	2300      	movs	r3, #0
}
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	3710      	adds	r7, #16
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}

0800b8d4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b084      	sub	sp, #16
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	60f8      	str	r0, [r7, #12]
 800b8dc:	60b9      	str	r1, [r7, #8]
 800b8de:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	68ba      	ldr	r2, [r7, #8]
 800b8e4:	2100      	movs	r1, #0
 800b8e6:	68f8      	ldr	r0, [r7, #12]
 800b8e8:	f000 faac 	bl	800be44 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b8ec:	2300      	movs	r3, #0
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	3710      	adds	r7, #16
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}

0800b8f6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b8f6:	b580      	push	{r7, lr}
 800b8f8:	b082      	sub	sp, #8
 800b8fa:	af00      	add	r7, sp, #0
 800b8fc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2204      	movs	r2, #4
 800b902:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b906:	2300      	movs	r3, #0
 800b908:	2200      	movs	r2, #0
 800b90a:	2100      	movs	r1, #0
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	f000 fa78 	bl	800be02 <USBD_LL_Transmit>

  return USBD_OK;
 800b912:	2300      	movs	r3, #0
}
 800b914:	4618      	mov	r0, r3
 800b916:	3708      	adds	r7, #8
 800b918:	46bd      	mov	sp, r7
 800b91a:	bd80      	pop	{r7, pc}

0800b91c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b082      	sub	sp, #8
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2205      	movs	r2, #5
 800b928:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b92c:	2300      	movs	r3, #0
 800b92e:	2200      	movs	r2, #0
 800b930:	2100      	movs	r1, #0
 800b932:	6878      	ldr	r0, [r7, #4]
 800b934:	f000 fa86 	bl	800be44 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b938:	2300      	movs	r3, #0
}
 800b93a:	4618      	mov	r0, r3
 800b93c:	3708      	adds	r7, #8
 800b93e:	46bd      	mov	sp, r7
 800b940:	bd80      	pop	{r7, pc}

0800b942 <HAL_PCDEx_SetTxFiFoInBytes>:
/* Private functions ---------------------------------------------------------*/

/* USER CODE BEGIN 1 */
#if(!STM32F1_DEVICE)
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFoInBytes(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800b942:	b580      	push	{r7, lr}
 800b944:	b082      	sub	sp, #8
 800b946:	af00      	add	r7, sp, #0
 800b948:	6078      	str	r0, [r7, #4]
 800b94a:	460b      	mov	r3, r1
 800b94c:	70fb      	strb	r3, [r7, #3]
 800b94e:	4613      	mov	r3, r2
 800b950:	803b      	strh	r3, [r7, #0]
	return HAL_PCDEx_SetTxFiFo(hpcd, fifo, (size/4));
 800b952:	883b      	ldrh	r3, [r7, #0]
 800b954:	089b      	lsrs	r3, r3, #2
 800b956:	b29a      	uxth	r2, r3
 800b958:	78fb      	ldrb	r3, [r7, #3]
 800b95a:	4619      	mov	r1, r3
 800b95c:	6878      	ldr	r0, [r7, #4]
 800b95e:	f7f9 f80f 	bl	8004980 <HAL_PCDEx_SetTxFiFo>
 800b962:	4603      	mov	r3, r0
}
 800b964:	4618      	mov	r0, r3
 800b966:	3708      	adds	r7, #8
 800b968:	46bd      	mov	sp, r7
 800b96a:	bd80      	pop	{r7, pc}

0800b96c <HAL_PCDEx_SetRxFiFoInBytes>:

HAL_StatusTypeDef HAL_PCDEx_SetRxFiFoInBytes(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b082      	sub	sp, #8
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
 800b974:	460b      	mov	r3, r1
 800b976:	807b      	strh	r3, [r7, #2]
	return HAL_PCDEx_SetRxFiFo(hpcd, (size/4));
 800b978:	887b      	ldrh	r3, [r7, #2]
 800b97a:	089b      	lsrs	r3, r3, #2
 800b97c:	b29b      	uxth	r3, r3
 800b97e:	4619      	mov	r1, r3
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	f7f9 f844 	bl	8004a0e <HAL_PCDEx_SetRxFiFo>
 800b986:	4603      	mov	r3, r0
}
 800b988:	4618      	mov	r0, r3
 800b98a:	3708      	adds	r7, #8
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bd80      	pop	{r7, pc}

0800b990 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b082      	sub	sp, #8
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef *)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b9a4:	4619      	mov	r1, r3
 800b9a6:	4610      	mov	r0, r2
 800b9a8:	f7fe fef7 	bl	800a79a <USBD_LL_SetupStage>
}
 800b9ac:	bf00      	nop
 800b9ae:	3708      	adds	r7, #8
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd80      	pop	{r7, pc}

0800b9b4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b082      	sub	sp, #8
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
 800b9bc:	460b      	mov	r3, r1
 800b9be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b9c6:	78fa      	ldrb	r2, [r7, #3]
 800b9c8:	6879      	ldr	r1, [r7, #4]
 800b9ca:	4613      	mov	r3, r2
 800b9cc:	00db      	lsls	r3, r3, #3
 800b9ce:	4413      	add	r3, r2
 800b9d0:	009b      	lsls	r3, r3, #2
 800b9d2:	440b      	add	r3, r1
 800b9d4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b9d8:	681a      	ldr	r2, [r3, #0]
 800b9da:	78fb      	ldrb	r3, [r7, #3]
 800b9dc:	4619      	mov	r1, r3
 800b9de:	f7fe ff31 	bl	800a844 <USBD_LL_DataOutStage>
}
 800b9e2:	bf00      	nop
 800b9e4:	3708      	adds	r7, #8
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}

0800b9ea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9ea:	b580      	push	{r7, lr}
 800b9ec:	b082      	sub	sp, #8
 800b9ee:	af00      	add	r7, sp, #0
 800b9f0:	6078      	str	r0, [r7, #4]
 800b9f2:	460b      	mov	r3, r1
 800b9f4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b9fc:	78fa      	ldrb	r2, [r7, #3]
 800b9fe:	6879      	ldr	r1, [r7, #4]
 800ba00:	4613      	mov	r3, r2
 800ba02:	00db      	lsls	r3, r3, #3
 800ba04:	4413      	add	r3, r2
 800ba06:	009b      	lsls	r3, r3, #2
 800ba08:	440b      	add	r3, r1
 800ba0a:	3320      	adds	r3, #32
 800ba0c:	681a      	ldr	r2, [r3, #0]
 800ba0e:	78fb      	ldrb	r3, [r7, #3]
 800ba10:	4619      	mov	r1, r3
 800ba12:	f7fe ff7a 	bl	800a90a <USBD_LL_DataInStage>
}
 800ba16:	bf00      	nop
 800ba18:	3708      	adds	r7, #8
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}

0800ba1e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba1e:	b580      	push	{r7, lr}
 800ba20:	b082      	sub	sp, #8
 800ba22:	af00      	add	r7, sp, #0
 800ba24:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef *)hpcd->pData);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	f7ff f889 	bl	800ab44 <USBD_LL_SOF>
}
 800ba32:	bf00      	nop
 800ba34:	3708      	adds	r7, #8
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bd80      	pop	{r7, pc}

0800ba3a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba3a:	b580      	push	{r7, lr}
 800ba3c:	b084      	sub	sp, #16
 800ba3e:	af00      	add	r7, sp, #0
 800ba40:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ba42:	2301      	movs	r3, #1
 800ba44:	73fb      	strb	r3, [r7, #15]

  if (hpcd->Init.speed == PCD_SPEED_FULL)
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	79db      	ldrb	r3, [r3, #7]
 800ba4a:	2b02      	cmp	r3, #2
 800ba4c:	d102      	bne.n	800ba54 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_FULL; 
 800ba4e:	2301      	movs	r3, #1
 800ba50:	73fb      	strb	r3, [r7, #15]
 800ba52:	e008      	b.n	800ba66 <HAL_PCD_ResetCallback+0x2c>
  }
  #if(!STM32F1_DEVICE)
  else if (hpcd->Init.speed == PCD_SPEED_HIGH)
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	79db      	ldrb	r3, [r3, #7]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d102      	bne.n	800ba62 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_HIGH;
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	73fb      	strb	r3, [r7, #15]
 800ba60:	e001      	b.n	800ba66 <HAL_PCD_ResetCallback+0x2c>
  }
  #endif
  else
  {
    Error_Handler();
 800ba62:	f7f5 f8e5 	bl	8000c30 <Error_Handler>
  }
  /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef *)hpcd->pData, speed);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ba6c:	7bfa      	ldrb	r2, [r7, #15]
 800ba6e:	4611      	mov	r1, r2
 800ba70:	4618      	mov	r0, r3
 800ba72:	f7ff f829 	bl	800aac8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef *)hpcd->pData);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f7fe ffda 	bl	800aa36 <USBD_LL_Reset>
}
 800ba82:	bf00      	nop
 800ba84:	3710      	adds	r7, #16
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}
	...

0800ba8c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b082      	sub	sp, #8
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef *)hpcd->pData);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f7ff f824 	bl	800aae8 <USBD_LL_Suspend>
#if (!STM32F1_DEVICE)
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	687a      	ldr	r2, [r7, #4]
 800baac:	6812      	ldr	r2, [r2, #0]
 800baae:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bab2:	f043 0301 	orr.w	r3, r3, #1
 800bab6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	7adb      	ldrb	r3, [r3, #11]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d005      	beq.n	800bacc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bac0:	4b04      	ldr	r3, [pc, #16]	@ (800bad4 <HAL_PCD_SuspendCallback+0x48>)
 800bac2:	691b      	ldr	r3, [r3, #16]
 800bac4:	4a03      	ldr	r2, [pc, #12]	@ (800bad4 <HAL_PCD_SuspendCallback+0x48>)
 800bac6:	f043 0306 	orr.w	r3, r3, #6
 800baca:	6113      	str	r3, [r2, #16]
  }
#endif
  /* USER CODE END 2 */
}
 800bacc:	bf00      	nop
 800bace:	3708      	adds	r7, #8
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd80      	pop	{r7, pc}
 800bad4:	e000ed00 	.word	0xe000ed00

0800bad8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b082      	sub	sp, #8
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef *)hpcd->pData);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bae6:	4618      	mov	r0, r3
 800bae8:	f7ff f814 	bl	800ab14 <USBD_LL_Resume>
}
 800baec:	bf00      	nop
 800baee:	3708      	adds	r7, #8
 800baf0:	46bd      	mov	sp, r7
 800baf2:	bd80      	pop	{r7, pc}

0800baf4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b082      	sub	sp, #8
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
 800bafc:	460b      	mov	r3, r1
 800bafe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bb06:	78fa      	ldrb	r2, [r7, #3]
 800bb08:	4611      	mov	r1, r2
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	f7ff f862 	bl	800abd4 <USBD_LL_IsoOUTIncomplete>
}
 800bb10:	bf00      	nop
 800bb12:	3708      	adds	r7, #8
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bd80      	pop	{r7, pc}

0800bb18 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b082      	sub	sp, #8
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
 800bb20:	460b      	mov	r3, r1
 800bb22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bb2a:	78fa      	ldrb	r2, [r7, #3]
 800bb2c:	4611      	mov	r1, r2
 800bb2e:	4618      	mov	r0, r3
 800bb30:	f7ff f82a 	bl	800ab88 <USBD_LL_IsoINIncomplete>
}
 800bb34:	bf00      	nop
 800bb36:	3708      	adds	r7, #8
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bd80      	pop	{r7, pc}

0800bb3c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b082      	sub	sp, #8
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef *)hpcd->pData);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f7ff f868 	bl	800ac20 <USBD_LL_DevConnected>
}
 800bb50:	bf00      	nop
 800bb52:	3708      	adds	r7, #8
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bd80      	pop	{r7, pc}

0800bb58 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b082      	sub	sp, #8
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef *)hpcd->pData);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bb66:	4618      	mov	r0, r3
 800bb68:	f7ff f865 	bl	800ac36 <USBD_LL_DevDisconnected>
}
 800bb6c:	bf00      	nop
 800bb6e:	3708      	adds	r7, #8
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bd80      	pop	{r7, pc}

0800bb74 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b084      	sub	sp, #16
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
#else
  /**FULL SPEED USB */
#if (STM32F1_DEVICE) /** for STM32F1 or similar */
  hpcd_USB_OTG_PTR = &hpcd_USB_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
#else
  hpcd_USB_OTG_PTR = &hpcd_USB_OTG_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
 800bb7c:	4b27      	ldr	r3, [pc, #156]	@ (800bc1c <USBD_LL_Init+0xa8>)
 800bb7e:	4a28      	ldr	r2, [pc, #160]	@ (800bc20 <USBD_LL_Init+0xac>)
 800bb80:	601a      	str	r2, [r3, #0]
#endif

  if (pdev->id == DEVICE_FS)
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	781b      	ldrb	r3, [r3, #0]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d143      	bne.n	800bc12 <USBD_LL_Init+0x9e>
  {
    /* Link the driver to the stack. */
    hpcd_USB_OTG_PTR->pData = pdev;
 800bb8a:	4b24      	ldr	r3, [pc, #144]	@ (800bc1c <USBD_LL_Init+0xa8>)
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	687a      	ldr	r2, [r7, #4]
 800bb90:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
    pdev->pData = hpcd_USB_OTG_PTR;
 800bb94:	4b21      	ldr	r3, [pc, #132]	@ (800bc1c <USBD_LL_Init+0xa8>)
 800bb96:	681a      	ldr	r2, [r3, #0]
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	f8c3 2310 	str.w	r2, [r3, #784]	@ 0x310
      pma_track += 8;
    }
#endif
#else /** if HAL_PCDEx_SetRxFiFo() is used by HAL driver */

    HAL_PCDEx_SetRxFiFoInBytes(hpcd_USB_OTG_PTR, 512); // ALL OUT EP Buffer
 800bb9e:	4b1f      	ldr	r3, [pc, #124]	@ (800bc1c <USBD_LL_Init+0xa8>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bba6:	4618      	mov	r0, r3
 800bba8:	f7ff fee0 	bl	800b96c <HAL_PCDEx_SetRxFiFoInBytes>

    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, 0, 64); // EP0 IN
 800bbac:	4b1b      	ldr	r3, [pc, #108]	@ (800bc1c <USBD_LL_Init+0xa8>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	2240      	movs	r2, #64	@ 0x40
 800bbb2:	2100      	movs	r1, #0
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f7ff fec4 	bl	800b942 <HAL_PCDEx_SetTxFiFoInBytes>
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (HID_KEYBOARD_IN_EP & 0x7F), 64);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CUSTOM_HID_IN_EP & 0x7F), 64);
 800bbba:	4b18      	ldr	r3, [pc, #96]	@ (800bc1c <USBD_LL_Init+0xa8>)
 800bbbc:	6818      	ldr	r0, [r3, #0]
 800bbbe:	4b19      	ldr	r3, [pc, #100]	@ (800bc24 <USBD_LL_Init+0xb0>)
 800bbc0:	781b      	ldrb	r3, [r3, #0]
 800bbc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bbc6:	b2db      	uxtb	r3, r3
 800bbc8:	2240      	movs	r2, #64	@ 0x40
 800bbca:	4619      	mov	r1, r3
 800bbcc:	f7ff feb9 	bl	800b942 <HAL_PCDEx_SetTxFiFoInBytes>
#endif
#if (USBD_USE_PRNTR == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (PRNT_IN_EP & 0x7F), 128);
#endif
#if (USBD_USE_CDC_ACM == 1)
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	73fb      	strb	r3, [r7, #15]
 800bbd4:	e01a      	b.n	800bc0c <USBD_LL_Init+0x98>
    {
      HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CDC_IN_EP[i] & 0x7F), 128);
 800bbd6:	4b11      	ldr	r3, [pc, #68]	@ (800bc1c <USBD_LL_Init+0xa8>)
 800bbd8:	6818      	ldr	r0, [r3, #0]
 800bbda:	7bfb      	ldrb	r3, [r7, #15]
 800bbdc:	4a12      	ldr	r2, [pc, #72]	@ (800bc28 <USBD_LL_Init+0xb4>)
 800bbde:	5cd3      	ldrb	r3, [r2, r3]
 800bbe0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bbe4:	b2db      	uxtb	r3, r3
 800bbe6:	2280      	movs	r2, #128	@ 0x80
 800bbe8:	4619      	mov	r1, r3
 800bbea:	f7ff feaa 	bl	800b942 <HAL_PCDEx_SetTxFiFoInBytes>
      HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CDC_CMD_EP[i] & 0x7F), 64);
 800bbee:	4b0b      	ldr	r3, [pc, #44]	@ (800bc1c <USBD_LL_Init+0xa8>)
 800bbf0:	6818      	ldr	r0, [r3, #0]
 800bbf2:	7bfb      	ldrb	r3, [r7, #15]
 800bbf4:	4a0d      	ldr	r2, [pc, #52]	@ (800bc2c <USBD_LL_Init+0xb8>)
 800bbf6:	5cd3      	ldrb	r3, [r2, r3]
 800bbf8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bbfc:	b2db      	uxtb	r3, r3
 800bbfe:	2240      	movs	r2, #64	@ 0x40
 800bc00:	4619      	mov	r1, r3
 800bc02:	f7ff fe9e 	bl	800b942 <HAL_PCDEx_SetTxFiFoInBytes>
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800bc06:	7bfb      	ldrb	r3, [r7, #15]
 800bc08:	3301      	adds	r3, #1
 800bc0a:	73fb      	strb	r3, [r7, #15]
 800bc0c:	7bfb      	ldrb	r3, [r7, #15]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d0e1      	beq.n	800bbd6 <USBD_LL_Init+0x62>
  HAL_PCD_RegisterDataOutStageCallback(hpcd_USB_OTG_PTR, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(hpcd_USB_OTG_PTR, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  return USBD_OK;
 800bc12:	2300      	movs	r3, #0
}
 800bc14:	4618      	mov	r0, r3
 800bc16:	3710      	adds	r7, #16
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}
 800bc1c:	20002664 	.word	0x20002664
 800bc20:	20000618 	.word	0x20000618
 800bc24:	200001ce 	.word	0x200001ce
 800bc28:	200022bc 	.word	0x200022bc
 800bc2c:	200022c4 	.word	0x200022c4

0800bc30 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b084      	sub	sp, #16
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc38:	2300      	movs	r3, #0
 800bc3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800bc46:	4618      	mov	r0, r3
 800bc48:	f7f7 fdbb 	bl	80037c2 <HAL_PCD_Start>
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800bc50:	7bfb      	ldrb	r3, [r7, #15]
 800bc52:	4618      	mov	r0, r3
 800bc54:	f000 f92a 	bl	800beac <USBD_Get_USB_Status>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc5c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc5e:	4618      	mov	r0, r3
 800bc60:	3710      	adds	r7, #16
 800bc62:	46bd      	mov	sp, r7
 800bc64:	bd80      	pop	{r7, pc}

0800bc66 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bc66:	b580      	push	{r7, lr}
 800bc68:	b084      	sub	sp, #16
 800bc6a:	af00      	add	r7, sp, #0
 800bc6c:	6078      	str	r0, [r7, #4]
 800bc6e:	4608      	mov	r0, r1
 800bc70:	4611      	mov	r1, r2
 800bc72:	461a      	mov	r2, r3
 800bc74:	4603      	mov	r3, r0
 800bc76:	70fb      	strb	r3, [r7, #3]
 800bc78:	460b      	mov	r3, r1
 800bc7a:	70bb      	strb	r3, [r7, #2]
 800bc7c:	4613      	mov	r3, r2
 800bc7e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc80:	2300      	movs	r3, #0
 800bc82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc84:	2300      	movs	r3, #0
 800bc86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 800bc8e:	78bb      	ldrb	r3, [r7, #2]
 800bc90:	883a      	ldrh	r2, [r7, #0]
 800bc92:	78f9      	ldrb	r1, [r7, #3]
 800bc94:	f7f8 fa8f 	bl	80041b6 <HAL_PCD_EP_Open>
 800bc98:	4603      	mov	r3, r0
 800bc9a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800bc9c:	7bfb      	ldrb	r3, [r7, #15]
 800bc9e:	4618      	mov	r0, r3
 800bca0:	f000 f904 	bl	800beac <USBD_Get_USB_Status>
 800bca4:	4603      	mov	r3, r0
 800bca6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bca8:	7bbb      	ldrb	r3, [r7, #14]
}
 800bcaa:	4618      	mov	r0, r3
 800bcac:	3710      	adds	r7, #16
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	bd80      	pop	{r7, pc}

0800bcb2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bcb2:	b580      	push	{r7, lr}
 800bcb4:	b084      	sub	sp, #16
 800bcb6:	af00      	add	r7, sp, #0
 800bcb8:	6078      	str	r0, [r7, #4]
 800bcba:	460b      	mov	r3, r1
 800bcbc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800bccc:	78fa      	ldrb	r2, [r7, #3]
 800bcce:	4611      	mov	r1, r2
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	f7f8 fada 	bl	800428a <HAL_PCD_EP_Close>
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800bcda:	7bfb      	ldrb	r3, [r7, #15]
 800bcdc:	4618      	mov	r0, r3
 800bcde:	f000 f8e5 	bl	800beac <USBD_Get_USB_Status>
 800bce2:	4603      	mov	r3, r0
 800bce4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bce6:	7bbb      	ldrb	r3, [r7, #14]
}
 800bce8:	4618      	mov	r0, r3
 800bcea:	3710      	adds	r7, #16
 800bcec:	46bd      	mov	sp, r7
 800bcee:	bd80      	pop	{r7, pc}

0800bcf0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b084      	sub	sp, #16
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
 800bcf8:	460b      	mov	r3, r1
 800bcfa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd00:	2300      	movs	r3, #0
 800bd02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800bd0a:	78fa      	ldrb	r2, [r7, #3]
 800bd0c:	4611      	mov	r1, r2
 800bd0e:	4618      	mov	r0, r3
 800bd10:	f7f8 fb92 	bl	8004438 <HAL_PCD_EP_SetStall>
 800bd14:	4603      	mov	r3, r0
 800bd16:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800bd18:	7bfb      	ldrb	r3, [r7, #15]
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f000 f8c6 	bl	800beac <USBD_Get_USB_Status>
 800bd20:	4603      	mov	r3, r0
 800bd22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd24:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd26:	4618      	mov	r0, r3
 800bd28:	3710      	adds	r7, #16
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	bd80      	pop	{r7, pc}

0800bd2e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd2e:	b580      	push	{r7, lr}
 800bd30:	b084      	sub	sp, #16
 800bd32:	af00      	add	r7, sp, #0
 800bd34:	6078      	str	r0, [r7, #4]
 800bd36:	460b      	mov	r3, r1
 800bd38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd3e:	2300      	movs	r3, #0
 800bd40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800bd48:	78fa      	ldrb	r2, [r7, #3]
 800bd4a:	4611      	mov	r1, r2
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	f7f8 fbd6 	bl	80044fe <HAL_PCD_EP_ClrStall>
 800bd52:	4603      	mov	r3, r0
 800bd54:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800bd56:	7bfb      	ldrb	r3, [r7, #15]
 800bd58:	4618      	mov	r0, r3
 800bd5a:	f000 f8a7 	bl	800beac <USBD_Get_USB_Status>
 800bd5e:	4603      	mov	r3, r0
 800bd60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd62:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd64:	4618      	mov	r0, r3
 800bd66:	3710      	adds	r7, #16
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	bd80      	pop	{r7, pc}

0800bd6c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd6c:	b480      	push	{r7}
 800bd6e:	b085      	sub	sp, #20
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
 800bd74:	460b      	mov	r3, r1
 800bd76:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800bd7e:	60fb      	str	r3, [r7, #12]

  if ((ep_addr & 0x80) == 0x80)
 800bd80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	da0b      	bge.n	800bda0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bd88:	78fb      	ldrb	r3, [r7, #3]
 800bd8a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bd8e:	68f9      	ldr	r1, [r7, #12]
 800bd90:	4613      	mov	r3, r2
 800bd92:	00db      	lsls	r3, r3, #3
 800bd94:	4413      	add	r3, r2
 800bd96:	009b      	lsls	r3, r3, #2
 800bd98:	440b      	add	r3, r1
 800bd9a:	3316      	adds	r3, #22
 800bd9c:	781b      	ldrb	r3, [r3, #0]
 800bd9e:	e00b      	b.n	800bdb8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bda0:	78fb      	ldrb	r3, [r7, #3]
 800bda2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bda6:	68f9      	ldr	r1, [r7, #12]
 800bda8:	4613      	mov	r3, r2
 800bdaa:	00db      	lsls	r3, r3, #3
 800bdac:	4413      	add	r3, r2
 800bdae:	009b      	lsls	r3, r3, #2
 800bdb0:	440b      	add	r3, r1
 800bdb2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800bdb6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	3714      	adds	r7, #20
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc2:	4770      	bx	lr

0800bdc4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b084      	sub	sp, #16
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
 800bdcc:	460b      	mov	r3, r1
 800bdce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800bdde:	78fa      	ldrb	r2, [r7, #3]
 800bde0:	4611      	mov	r1, r2
 800bde2:	4618      	mov	r0, r3
 800bde4:	f7f8 f9c3 	bl	800416e <HAL_PCD_SetAddress>
 800bde8:	4603      	mov	r3, r0
 800bdea:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800bdec:	7bfb      	ldrb	r3, [r7, #15]
 800bdee:	4618      	mov	r0, r3
 800bdf0:	f000 f85c 	bl	800beac <USBD_Get_USB_Status>
 800bdf4:	4603      	mov	r3, r0
 800bdf6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bdf8:	7bbb      	ldrb	r3, [r7, #14]
}
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	3710      	adds	r7, #16
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bd80      	pop	{r7, pc}

0800be02 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800be02:	b580      	push	{r7, lr}
 800be04:	b086      	sub	sp, #24
 800be06:	af00      	add	r7, sp, #0
 800be08:	60f8      	str	r0, [r7, #12]
 800be0a:	607a      	str	r2, [r7, #4]
 800be0c:	603b      	str	r3, [r7, #0]
 800be0e:	460b      	mov	r3, r1
 800be10:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be12:	2300      	movs	r3, #0
 800be14:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be16:	2300      	movs	r3, #0
 800be18:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 800be20:	7af9      	ldrb	r1, [r7, #11]
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	687a      	ldr	r2, [r7, #4]
 800be26:	f7f8 facd 	bl	80043c4 <HAL_PCD_EP_Transmit>
 800be2a:	4603      	mov	r3, r0
 800be2c:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 800be2e:	7dfb      	ldrb	r3, [r7, #23]
 800be30:	4618      	mov	r0, r3
 800be32:	f000 f83b 	bl	800beac <USBD_Get_USB_Status>
 800be36:	4603      	mov	r3, r0
 800be38:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800be3a:	7dbb      	ldrb	r3, [r7, #22]
}
 800be3c:	4618      	mov	r0, r3
 800be3e:	3718      	adds	r7, #24
 800be40:	46bd      	mov	sp, r7
 800be42:	bd80      	pop	{r7, pc}

0800be44 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b086      	sub	sp, #24
 800be48:	af00      	add	r7, sp, #0
 800be4a:	60f8      	str	r0, [r7, #12]
 800be4c:	607a      	str	r2, [r7, #4]
 800be4e:	603b      	str	r3, [r7, #0]
 800be50:	460b      	mov	r3, r1
 800be52:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be54:	2300      	movs	r3, #0
 800be56:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be58:	2300      	movs	r3, #0
 800be5a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 800be62:	7af9      	ldrb	r1, [r7, #11]
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	687a      	ldr	r2, [r7, #4]
 800be68:	f7f8 fa59 	bl	800431e <HAL_PCD_EP_Receive>
 800be6c:	4603      	mov	r3, r0
 800be6e:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 800be70:	7dfb      	ldrb	r3, [r7, #23]
 800be72:	4618      	mov	r0, r3
 800be74:	f000 f81a 	bl	800beac <USBD_Get_USB_Status>
 800be78:	4603      	mov	r3, r0
 800be7a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800be7c:	7dbb      	ldrb	r3, [r7, #22]
}
 800be7e:	4618      	mov	r0, r3
 800be80:	3718      	adds	r7, #24
 800be82:	46bd      	mov	sp, r7
 800be84:	bd80      	pop	{r7, pc}

0800be86 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be86:	b580      	push	{r7, lr}
 800be88:	b082      	sub	sp, #8
 800be8a:	af00      	add	r7, sp, #0
 800be8c:	6078      	str	r0, [r7, #4]
 800be8e:	460b      	mov	r3, r1
 800be90:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef *)pdev->pData, ep_addr);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800be98:	78fa      	ldrb	r2, [r7, #3]
 800be9a:	4611      	mov	r1, r2
 800be9c:	4618      	mov	r0, r3
 800be9e:	f7f8 fa79 	bl	8004394 <HAL_PCD_EP_GetRxCount>
 800bea2:	4603      	mov	r3, r0
}
 800bea4:	4618      	mov	r0, r3
 800bea6:	3708      	adds	r7, #8
 800bea8:	46bd      	mov	sp, r7
 800beaa:	bd80      	pop	{r7, pc}

0800beac <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800beac:	b480      	push	{r7}
 800beae:	b085      	sub	sp, #20
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	4603      	mov	r3, r0
 800beb4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800beb6:	2300      	movs	r3, #0
 800beb8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800beba:	79fb      	ldrb	r3, [r7, #7]
 800bebc:	2b03      	cmp	r3, #3
 800bebe:	d817      	bhi.n	800bef0 <USBD_Get_USB_Status+0x44>
 800bec0:	a201      	add	r2, pc, #4	@ (adr r2, 800bec8 <USBD_Get_USB_Status+0x1c>)
 800bec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bec6:	bf00      	nop
 800bec8:	0800bed9 	.word	0x0800bed9
 800becc:	0800bedf 	.word	0x0800bedf
 800bed0:	0800bee5 	.word	0x0800bee5
 800bed4:	0800beeb 	.word	0x0800beeb
  {
  case HAL_OK:
    usb_status = USBD_OK;
 800bed8:	2300      	movs	r3, #0
 800beda:	73fb      	strb	r3, [r7, #15]
    break;
 800bedc:	e00b      	b.n	800bef6 <USBD_Get_USB_Status+0x4a>
  case HAL_ERROR:
    usb_status = USBD_FAIL;
 800bede:	2303      	movs	r3, #3
 800bee0:	73fb      	strb	r3, [r7, #15]
    break;
 800bee2:	e008      	b.n	800bef6 <USBD_Get_USB_Status+0x4a>
  case HAL_BUSY:
    usb_status = USBD_BUSY;
 800bee4:	2301      	movs	r3, #1
 800bee6:	73fb      	strb	r3, [r7, #15]
    break;
 800bee8:	e005      	b.n	800bef6 <USBD_Get_USB_Status+0x4a>
  case HAL_TIMEOUT:
    usb_status = USBD_FAIL;
 800beea:	2303      	movs	r3, #3
 800beec:	73fb      	strb	r3, [r7, #15]
    break;
 800beee:	e002      	b.n	800bef6 <USBD_Get_USB_Status+0x4a>
  default:
    usb_status = USBD_FAIL;
 800bef0:	2303      	movs	r3, #3
 800bef2:	73fb      	strb	r3, [r7, #15]
    break;
 800bef4:	bf00      	nop
  }
  return usb_status;
 800bef6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bef8:	4618      	mov	r0, r3
 800befa:	3714      	adds	r7, #20
 800befc:	46bd      	mov	sp, r7
 800befe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf02:	4770      	bx	lr

0800bf04 <sniprintf>:
 800bf04:	b40c      	push	{r2, r3}
 800bf06:	b530      	push	{r4, r5, lr}
 800bf08:	4b18      	ldr	r3, [pc, #96]	@ (800bf6c <sniprintf+0x68>)
 800bf0a:	1e0c      	subs	r4, r1, #0
 800bf0c:	681d      	ldr	r5, [r3, #0]
 800bf0e:	b09d      	sub	sp, #116	@ 0x74
 800bf10:	da08      	bge.n	800bf24 <sniprintf+0x20>
 800bf12:	238b      	movs	r3, #139	@ 0x8b
 800bf14:	602b      	str	r3, [r5, #0]
 800bf16:	f04f 30ff 	mov.w	r0, #4294967295
 800bf1a:	b01d      	add	sp, #116	@ 0x74
 800bf1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bf20:	b002      	add	sp, #8
 800bf22:	4770      	bx	lr
 800bf24:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800bf28:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bf2c:	f04f 0300 	mov.w	r3, #0
 800bf30:	931b      	str	r3, [sp, #108]	@ 0x6c
 800bf32:	bf14      	ite	ne
 800bf34:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bf38:	4623      	moveq	r3, r4
 800bf3a:	9304      	str	r3, [sp, #16]
 800bf3c:	9307      	str	r3, [sp, #28]
 800bf3e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bf42:	9002      	str	r0, [sp, #8]
 800bf44:	9006      	str	r0, [sp, #24]
 800bf46:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bf4a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800bf4c:	ab21      	add	r3, sp, #132	@ 0x84
 800bf4e:	a902      	add	r1, sp, #8
 800bf50:	4628      	mov	r0, r5
 800bf52:	9301      	str	r3, [sp, #4]
 800bf54:	f000 f9a2 	bl	800c29c <_svfiprintf_r>
 800bf58:	1c43      	adds	r3, r0, #1
 800bf5a:	bfbc      	itt	lt
 800bf5c:	238b      	movlt	r3, #139	@ 0x8b
 800bf5e:	602b      	strlt	r3, [r5, #0]
 800bf60:	2c00      	cmp	r4, #0
 800bf62:	d0da      	beq.n	800bf1a <sniprintf+0x16>
 800bf64:	9b02      	ldr	r3, [sp, #8]
 800bf66:	2200      	movs	r2, #0
 800bf68:	701a      	strb	r2, [r3, #0]
 800bf6a:	e7d6      	b.n	800bf1a <sniprintf+0x16>
 800bf6c:	200002a8 	.word	0x200002a8

0800bf70 <memset>:
 800bf70:	4402      	add	r2, r0
 800bf72:	4603      	mov	r3, r0
 800bf74:	4293      	cmp	r3, r2
 800bf76:	d100      	bne.n	800bf7a <memset+0xa>
 800bf78:	4770      	bx	lr
 800bf7a:	f803 1b01 	strb.w	r1, [r3], #1
 800bf7e:	e7f9      	b.n	800bf74 <memset+0x4>

0800bf80 <__errno>:
 800bf80:	4b01      	ldr	r3, [pc, #4]	@ (800bf88 <__errno+0x8>)
 800bf82:	6818      	ldr	r0, [r3, #0]
 800bf84:	4770      	bx	lr
 800bf86:	bf00      	nop
 800bf88:	200002a8 	.word	0x200002a8

0800bf8c <__libc_init_array>:
 800bf8c:	b570      	push	{r4, r5, r6, lr}
 800bf8e:	4d0d      	ldr	r5, [pc, #52]	@ (800bfc4 <__libc_init_array+0x38>)
 800bf90:	4c0d      	ldr	r4, [pc, #52]	@ (800bfc8 <__libc_init_array+0x3c>)
 800bf92:	1b64      	subs	r4, r4, r5
 800bf94:	10a4      	asrs	r4, r4, #2
 800bf96:	2600      	movs	r6, #0
 800bf98:	42a6      	cmp	r6, r4
 800bf9a:	d109      	bne.n	800bfb0 <__libc_init_array+0x24>
 800bf9c:	4d0b      	ldr	r5, [pc, #44]	@ (800bfcc <__libc_init_array+0x40>)
 800bf9e:	4c0c      	ldr	r4, [pc, #48]	@ (800bfd0 <__libc_init_array+0x44>)
 800bfa0:	f000 fc64 	bl	800c86c <_init>
 800bfa4:	1b64      	subs	r4, r4, r5
 800bfa6:	10a4      	asrs	r4, r4, #2
 800bfa8:	2600      	movs	r6, #0
 800bfaa:	42a6      	cmp	r6, r4
 800bfac:	d105      	bne.n	800bfba <__libc_init_array+0x2e>
 800bfae:	bd70      	pop	{r4, r5, r6, pc}
 800bfb0:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfb4:	4798      	blx	r3
 800bfb6:	3601      	adds	r6, #1
 800bfb8:	e7ee      	b.n	800bf98 <__libc_init_array+0xc>
 800bfba:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfbe:	4798      	blx	r3
 800bfc0:	3601      	adds	r6, #1
 800bfc2:	e7f2      	b.n	800bfaa <__libc_init_array+0x1e>
 800bfc4:	0800c93c 	.word	0x0800c93c
 800bfc8:	0800c93c 	.word	0x0800c93c
 800bfcc:	0800c93c 	.word	0x0800c93c
 800bfd0:	0800c940 	.word	0x0800c940

0800bfd4 <__retarget_lock_acquire_recursive>:
 800bfd4:	4770      	bx	lr

0800bfd6 <__retarget_lock_release_recursive>:
 800bfd6:	4770      	bx	lr

0800bfd8 <memcpy>:
 800bfd8:	440a      	add	r2, r1
 800bfda:	4291      	cmp	r1, r2
 800bfdc:	f100 33ff 	add.w	r3, r0, #4294967295
 800bfe0:	d100      	bne.n	800bfe4 <memcpy+0xc>
 800bfe2:	4770      	bx	lr
 800bfe4:	b510      	push	{r4, lr}
 800bfe6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bfea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bfee:	4291      	cmp	r1, r2
 800bff0:	d1f9      	bne.n	800bfe6 <memcpy+0xe>
 800bff2:	bd10      	pop	{r4, pc}

0800bff4 <_free_r>:
 800bff4:	b538      	push	{r3, r4, r5, lr}
 800bff6:	4605      	mov	r5, r0
 800bff8:	2900      	cmp	r1, #0
 800bffa:	d041      	beq.n	800c080 <_free_r+0x8c>
 800bffc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c000:	1f0c      	subs	r4, r1, #4
 800c002:	2b00      	cmp	r3, #0
 800c004:	bfb8      	it	lt
 800c006:	18e4      	addlt	r4, r4, r3
 800c008:	f000 f8e0 	bl	800c1cc <__malloc_lock>
 800c00c:	4a1d      	ldr	r2, [pc, #116]	@ (800c084 <_free_r+0x90>)
 800c00e:	6813      	ldr	r3, [r2, #0]
 800c010:	b933      	cbnz	r3, 800c020 <_free_r+0x2c>
 800c012:	6063      	str	r3, [r4, #4]
 800c014:	6014      	str	r4, [r2, #0]
 800c016:	4628      	mov	r0, r5
 800c018:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c01c:	f000 b8dc 	b.w	800c1d8 <__malloc_unlock>
 800c020:	42a3      	cmp	r3, r4
 800c022:	d908      	bls.n	800c036 <_free_r+0x42>
 800c024:	6820      	ldr	r0, [r4, #0]
 800c026:	1821      	adds	r1, r4, r0
 800c028:	428b      	cmp	r3, r1
 800c02a:	bf01      	itttt	eq
 800c02c:	6819      	ldreq	r1, [r3, #0]
 800c02e:	685b      	ldreq	r3, [r3, #4]
 800c030:	1809      	addeq	r1, r1, r0
 800c032:	6021      	streq	r1, [r4, #0]
 800c034:	e7ed      	b.n	800c012 <_free_r+0x1e>
 800c036:	461a      	mov	r2, r3
 800c038:	685b      	ldr	r3, [r3, #4]
 800c03a:	b10b      	cbz	r3, 800c040 <_free_r+0x4c>
 800c03c:	42a3      	cmp	r3, r4
 800c03e:	d9fa      	bls.n	800c036 <_free_r+0x42>
 800c040:	6811      	ldr	r1, [r2, #0]
 800c042:	1850      	adds	r0, r2, r1
 800c044:	42a0      	cmp	r0, r4
 800c046:	d10b      	bne.n	800c060 <_free_r+0x6c>
 800c048:	6820      	ldr	r0, [r4, #0]
 800c04a:	4401      	add	r1, r0
 800c04c:	1850      	adds	r0, r2, r1
 800c04e:	4283      	cmp	r3, r0
 800c050:	6011      	str	r1, [r2, #0]
 800c052:	d1e0      	bne.n	800c016 <_free_r+0x22>
 800c054:	6818      	ldr	r0, [r3, #0]
 800c056:	685b      	ldr	r3, [r3, #4]
 800c058:	6053      	str	r3, [r2, #4]
 800c05a:	4408      	add	r0, r1
 800c05c:	6010      	str	r0, [r2, #0]
 800c05e:	e7da      	b.n	800c016 <_free_r+0x22>
 800c060:	d902      	bls.n	800c068 <_free_r+0x74>
 800c062:	230c      	movs	r3, #12
 800c064:	602b      	str	r3, [r5, #0]
 800c066:	e7d6      	b.n	800c016 <_free_r+0x22>
 800c068:	6820      	ldr	r0, [r4, #0]
 800c06a:	1821      	adds	r1, r4, r0
 800c06c:	428b      	cmp	r3, r1
 800c06e:	bf04      	itt	eq
 800c070:	6819      	ldreq	r1, [r3, #0]
 800c072:	685b      	ldreq	r3, [r3, #4]
 800c074:	6063      	str	r3, [r4, #4]
 800c076:	bf04      	itt	eq
 800c078:	1809      	addeq	r1, r1, r0
 800c07a:	6021      	streq	r1, [r4, #0]
 800c07c:	6054      	str	r4, [r2, #4]
 800c07e:	e7ca      	b.n	800c016 <_free_r+0x22>
 800c080:	bd38      	pop	{r3, r4, r5, pc}
 800c082:	bf00      	nop
 800c084:	200027ac 	.word	0x200027ac

0800c088 <sbrk_aligned>:
 800c088:	b570      	push	{r4, r5, r6, lr}
 800c08a:	4e0f      	ldr	r6, [pc, #60]	@ (800c0c8 <sbrk_aligned+0x40>)
 800c08c:	460c      	mov	r4, r1
 800c08e:	6831      	ldr	r1, [r6, #0]
 800c090:	4605      	mov	r5, r0
 800c092:	b911      	cbnz	r1, 800c09a <sbrk_aligned+0x12>
 800c094:	f000 fba4 	bl	800c7e0 <_sbrk_r>
 800c098:	6030      	str	r0, [r6, #0]
 800c09a:	4621      	mov	r1, r4
 800c09c:	4628      	mov	r0, r5
 800c09e:	f000 fb9f 	bl	800c7e0 <_sbrk_r>
 800c0a2:	1c43      	adds	r3, r0, #1
 800c0a4:	d103      	bne.n	800c0ae <sbrk_aligned+0x26>
 800c0a6:	f04f 34ff 	mov.w	r4, #4294967295
 800c0aa:	4620      	mov	r0, r4
 800c0ac:	bd70      	pop	{r4, r5, r6, pc}
 800c0ae:	1cc4      	adds	r4, r0, #3
 800c0b0:	f024 0403 	bic.w	r4, r4, #3
 800c0b4:	42a0      	cmp	r0, r4
 800c0b6:	d0f8      	beq.n	800c0aa <sbrk_aligned+0x22>
 800c0b8:	1a21      	subs	r1, r4, r0
 800c0ba:	4628      	mov	r0, r5
 800c0bc:	f000 fb90 	bl	800c7e0 <_sbrk_r>
 800c0c0:	3001      	adds	r0, #1
 800c0c2:	d1f2      	bne.n	800c0aa <sbrk_aligned+0x22>
 800c0c4:	e7ef      	b.n	800c0a6 <sbrk_aligned+0x1e>
 800c0c6:	bf00      	nop
 800c0c8:	200027a8 	.word	0x200027a8

0800c0cc <_malloc_r>:
 800c0cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0d0:	1ccd      	adds	r5, r1, #3
 800c0d2:	f025 0503 	bic.w	r5, r5, #3
 800c0d6:	3508      	adds	r5, #8
 800c0d8:	2d0c      	cmp	r5, #12
 800c0da:	bf38      	it	cc
 800c0dc:	250c      	movcc	r5, #12
 800c0de:	2d00      	cmp	r5, #0
 800c0e0:	4606      	mov	r6, r0
 800c0e2:	db01      	blt.n	800c0e8 <_malloc_r+0x1c>
 800c0e4:	42a9      	cmp	r1, r5
 800c0e6:	d904      	bls.n	800c0f2 <_malloc_r+0x26>
 800c0e8:	230c      	movs	r3, #12
 800c0ea:	6033      	str	r3, [r6, #0]
 800c0ec:	2000      	movs	r0, #0
 800c0ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c1c8 <_malloc_r+0xfc>
 800c0f6:	f000 f869 	bl	800c1cc <__malloc_lock>
 800c0fa:	f8d8 3000 	ldr.w	r3, [r8]
 800c0fe:	461c      	mov	r4, r3
 800c100:	bb44      	cbnz	r4, 800c154 <_malloc_r+0x88>
 800c102:	4629      	mov	r1, r5
 800c104:	4630      	mov	r0, r6
 800c106:	f7ff ffbf 	bl	800c088 <sbrk_aligned>
 800c10a:	1c43      	adds	r3, r0, #1
 800c10c:	4604      	mov	r4, r0
 800c10e:	d158      	bne.n	800c1c2 <_malloc_r+0xf6>
 800c110:	f8d8 4000 	ldr.w	r4, [r8]
 800c114:	4627      	mov	r7, r4
 800c116:	2f00      	cmp	r7, #0
 800c118:	d143      	bne.n	800c1a2 <_malloc_r+0xd6>
 800c11a:	2c00      	cmp	r4, #0
 800c11c:	d04b      	beq.n	800c1b6 <_malloc_r+0xea>
 800c11e:	6823      	ldr	r3, [r4, #0]
 800c120:	4639      	mov	r1, r7
 800c122:	4630      	mov	r0, r6
 800c124:	eb04 0903 	add.w	r9, r4, r3
 800c128:	f000 fb5a 	bl	800c7e0 <_sbrk_r>
 800c12c:	4581      	cmp	r9, r0
 800c12e:	d142      	bne.n	800c1b6 <_malloc_r+0xea>
 800c130:	6821      	ldr	r1, [r4, #0]
 800c132:	1a6d      	subs	r5, r5, r1
 800c134:	4629      	mov	r1, r5
 800c136:	4630      	mov	r0, r6
 800c138:	f7ff ffa6 	bl	800c088 <sbrk_aligned>
 800c13c:	3001      	adds	r0, #1
 800c13e:	d03a      	beq.n	800c1b6 <_malloc_r+0xea>
 800c140:	6823      	ldr	r3, [r4, #0]
 800c142:	442b      	add	r3, r5
 800c144:	6023      	str	r3, [r4, #0]
 800c146:	f8d8 3000 	ldr.w	r3, [r8]
 800c14a:	685a      	ldr	r2, [r3, #4]
 800c14c:	bb62      	cbnz	r2, 800c1a8 <_malloc_r+0xdc>
 800c14e:	f8c8 7000 	str.w	r7, [r8]
 800c152:	e00f      	b.n	800c174 <_malloc_r+0xa8>
 800c154:	6822      	ldr	r2, [r4, #0]
 800c156:	1b52      	subs	r2, r2, r5
 800c158:	d420      	bmi.n	800c19c <_malloc_r+0xd0>
 800c15a:	2a0b      	cmp	r2, #11
 800c15c:	d917      	bls.n	800c18e <_malloc_r+0xc2>
 800c15e:	1961      	adds	r1, r4, r5
 800c160:	42a3      	cmp	r3, r4
 800c162:	6025      	str	r5, [r4, #0]
 800c164:	bf18      	it	ne
 800c166:	6059      	strne	r1, [r3, #4]
 800c168:	6863      	ldr	r3, [r4, #4]
 800c16a:	bf08      	it	eq
 800c16c:	f8c8 1000 	streq.w	r1, [r8]
 800c170:	5162      	str	r2, [r4, r5]
 800c172:	604b      	str	r3, [r1, #4]
 800c174:	4630      	mov	r0, r6
 800c176:	f000 f82f 	bl	800c1d8 <__malloc_unlock>
 800c17a:	f104 000b 	add.w	r0, r4, #11
 800c17e:	1d23      	adds	r3, r4, #4
 800c180:	f020 0007 	bic.w	r0, r0, #7
 800c184:	1ac2      	subs	r2, r0, r3
 800c186:	bf1c      	itt	ne
 800c188:	1a1b      	subne	r3, r3, r0
 800c18a:	50a3      	strne	r3, [r4, r2]
 800c18c:	e7af      	b.n	800c0ee <_malloc_r+0x22>
 800c18e:	6862      	ldr	r2, [r4, #4]
 800c190:	42a3      	cmp	r3, r4
 800c192:	bf0c      	ite	eq
 800c194:	f8c8 2000 	streq.w	r2, [r8]
 800c198:	605a      	strne	r2, [r3, #4]
 800c19a:	e7eb      	b.n	800c174 <_malloc_r+0xa8>
 800c19c:	4623      	mov	r3, r4
 800c19e:	6864      	ldr	r4, [r4, #4]
 800c1a0:	e7ae      	b.n	800c100 <_malloc_r+0x34>
 800c1a2:	463c      	mov	r4, r7
 800c1a4:	687f      	ldr	r7, [r7, #4]
 800c1a6:	e7b6      	b.n	800c116 <_malloc_r+0x4a>
 800c1a8:	461a      	mov	r2, r3
 800c1aa:	685b      	ldr	r3, [r3, #4]
 800c1ac:	42a3      	cmp	r3, r4
 800c1ae:	d1fb      	bne.n	800c1a8 <_malloc_r+0xdc>
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	6053      	str	r3, [r2, #4]
 800c1b4:	e7de      	b.n	800c174 <_malloc_r+0xa8>
 800c1b6:	230c      	movs	r3, #12
 800c1b8:	6033      	str	r3, [r6, #0]
 800c1ba:	4630      	mov	r0, r6
 800c1bc:	f000 f80c 	bl	800c1d8 <__malloc_unlock>
 800c1c0:	e794      	b.n	800c0ec <_malloc_r+0x20>
 800c1c2:	6005      	str	r5, [r0, #0]
 800c1c4:	e7d6      	b.n	800c174 <_malloc_r+0xa8>
 800c1c6:	bf00      	nop
 800c1c8:	200027ac 	.word	0x200027ac

0800c1cc <__malloc_lock>:
 800c1cc:	4801      	ldr	r0, [pc, #4]	@ (800c1d4 <__malloc_lock+0x8>)
 800c1ce:	f7ff bf01 	b.w	800bfd4 <__retarget_lock_acquire_recursive>
 800c1d2:	bf00      	nop
 800c1d4:	200027a4 	.word	0x200027a4

0800c1d8 <__malloc_unlock>:
 800c1d8:	4801      	ldr	r0, [pc, #4]	@ (800c1e0 <__malloc_unlock+0x8>)
 800c1da:	f7ff befc 	b.w	800bfd6 <__retarget_lock_release_recursive>
 800c1de:	bf00      	nop
 800c1e0:	200027a4 	.word	0x200027a4

0800c1e4 <__ssputs_r>:
 800c1e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1e8:	688e      	ldr	r6, [r1, #8]
 800c1ea:	461f      	mov	r7, r3
 800c1ec:	42be      	cmp	r6, r7
 800c1ee:	680b      	ldr	r3, [r1, #0]
 800c1f0:	4682      	mov	sl, r0
 800c1f2:	460c      	mov	r4, r1
 800c1f4:	4690      	mov	r8, r2
 800c1f6:	d82d      	bhi.n	800c254 <__ssputs_r+0x70>
 800c1f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c1fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c200:	d026      	beq.n	800c250 <__ssputs_r+0x6c>
 800c202:	6965      	ldr	r5, [r4, #20]
 800c204:	6909      	ldr	r1, [r1, #16]
 800c206:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c20a:	eba3 0901 	sub.w	r9, r3, r1
 800c20e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c212:	1c7b      	adds	r3, r7, #1
 800c214:	444b      	add	r3, r9
 800c216:	106d      	asrs	r5, r5, #1
 800c218:	429d      	cmp	r5, r3
 800c21a:	bf38      	it	cc
 800c21c:	461d      	movcc	r5, r3
 800c21e:	0553      	lsls	r3, r2, #21
 800c220:	d527      	bpl.n	800c272 <__ssputs_r+0x8e>
 800c222:	4629      	mov	r1, r5
 800c224:	f7ff ff52 	bl	800c0cc <_malloc_r>
 800c228:	4606      	mov	r6, r0
 800c22a:	b360      	cbz	r0, 800c286 <__ssputs_r+0xa2>
 800c22c:	6921      	ldr	r1, [r4, #16]
 800c22e:	464a      	mov	r2, r9
 800c230:	f7ff fed2 	bl	800bfd8 <memcpy>
 800c234:	89a3      	ldrh	r3, [r4, #12]
 800c236:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c23a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c23e:	81a3      	strh	r3, [r4, #12]
 800c240:	6126      	str	r6, [r4, #16]
 800c242:	6165      	str	r5, [r4, #20]
 800c244:	444e      	add	r6, r9
 800c246:	eba5 0509 	sub.w	r5, r5, r9
 800c24a:	6026      	str	r6, [r4, #0]
 800c24c:	60a5      	str	r5, [r4, #8]
 800c24e:	463e      	mov	r6, r7
 800c250:	42be      	cmp	r6, r7
 800c252:	d900      	bls.n	800c256 <__ssputs_r+0x72>
 800c254:	463e      	mov	r6, r7
 800c256:	6820      	ldr	r0, [r4, #0]
 800c258:	4632      	mov	r2, r6
 800c25a:	4641      	mov	r1, r8
 800c25c:	f000 faa6 	bl	800c7ac <memmove>
 800c260:	68a3      	ldr	r3, [r4, #8]
 800c262:	1b9b      	subs	r3, r3, r6
 800c264:	60a3      	str	r3, [r4, #8]
 800c266:	6823      	ldr	r3, [r4, #0]
 800c268:	4433      	add	r3, r6
 800c26a:	6023      	str	r3, [r4, #0]
 800c26c:	2000      	movs	r0, #0
 800c26e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c272:	462a      	mov	r2, r5
 800c274:	f000 fac4 	bl	800c800 <_realloc_r>
 800c278:	4606      	mov	r6, r0
 800c27a:	2800      	cmp	r0, #0
 800c27c:	d1e0      	bne.n	800c240 <__ssputs_r+0x5c>
 800c27e:	6921      	ldr	r1, [r4, #16]
 800c280:	4650      	mov	r0, sl
 800c282:	f7ff feb7 	bl	800bff4 <_free_r>
 800c286:	230c      	movs	r3, #12
 800c288:	f8ca 3000 	str.w	r3, [sl]
 800c28c:	89a3      	ldrh	r3, [r4, #12]
 800c28e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c292:	81a3      	strh	r3, [r4, #12]
 800c294:	f04f 30ff 	mov.w	r0, #4294967295
 800c298:	e7e9      	b.n	800c26e <__ssputs_r+0x8a>
	...

0800c29c <_svfiprintf_r>:
 800c29c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2a0:	4698      	mov	r8, r3
 800c2a2:	898b      	ldrh	r3, [r1, #12]
 800c2a4:	061b      	lsls	r3, r3, #24
 800c2a6:	b09d      	sub	sp, #116	@ 0x74
 800c2a8:	4607      	mov	r7, r0
 800c2aa:	460d      	mov	r5, r1
 800c2ac:	4614      	mov	r4, r2
 800c2ae:	d510      	bpl.n	800c2d2 <_svfiprintf_r+0x36>
 800c2b0:	690b      	ldr	r3, [r1, #16]
 800c2b2:	b973      	cbnz	r3, 800c2d2 <_svfiprintf_r+0x36>
 800c2b4:	2140      	movs	r1, #64	@ 0x40
 800c2b6:	f7ff ff09 	bl	800c0cc <_malloc_r>
 800c2ba:	6028      	str	r0, [r5, #0]
 800c2bc:	6128      	str	r0, [r5, #16]
 800c2be:	b930      	cbnz	r0, 800c2ce <_svfiprintf_r+0x32>
 800c2c0:	230c      	movs	r3, #12
 800c2c2:	603b      	str	r3, [r7, #0]
 800c2c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c2c8:	b01d      	add	sp, #116	@ 0x74
 800c2ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2ce:	2340      	movs	r3, #64	@ 0x40
 800c2d0:	616b      	str	r3, [r5, #20]
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2d6:	2320      	movs	r3, #32
 800c2d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c2dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800c2e0:	2330      	movs	r3, #48	@ 0x30
 800c2e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c480 <_svfiprintf_r+0x1e4>
 800c2e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c2ea:	f04f 0901 	mov.w	r9, #1
 800c2ee:	4623      	mov	r3, r4
 800c2f0:	469a      	mov	sl, r3
 800c2f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2f6:	b10a      	cbz	r2, 800c2fc <_svfiprintf_r+0x60>
 800c2f8:	2a25      	cmp	r2, #37	@ 0x25
 800c2fa:	d1f9      	bne.n	800c2f0 <_svfiprintf_r+0x54>
 800c2fc:	ebba 0b04 	subs.w	fp, sl, r4
 800c300:	d00b      	beq.n	800c31a <_svfiprintf_r+0x7e>
 800c302:	465b      	mov	r3, fp
 800c304:	4622      	mov	r2, r4
 800c306:	4629      	mov	r1, r5
 800c308:	4638      	mov	r0, r7
 800c30a:	f7ff ff6b 	bl	800c1e4 <__ssputs_r>
 800c30e:	3001      	adds	r0, #1
 800c310:	f000 80a7 	beq.w	800c462 <_svfiprintf_r+0x1c6>
 800c314:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c316:	445a      	add	r2, fp
 800c318:	9209      	str	r2, [sp, #36]	@ 0x24
 800c31a:	f89a 3000 	ldrb.w	r3, [sl]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	f000 809f 	beq.w	800c462 <_svfiprintf_r+0x1c6>
 800c324:	2300      	movs	r3, #0
 800c326:	f04f 32ff 	mov.w	r2, #4294967295
 800c32a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c32e:	f10a 0a01 	add.w	sl, sl, #1
 800c332:	9304      	str	r3, [sp, #16]
 800c334:	9307      	str	r3, [sp, #28]
 800c336:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c33a:	931a      	str	r3, [sp, #104]	@ 0x68
 800c33c:	4654      	mov	r4, sl
 800c33e:	2205      	movs	r2, #5
 800c340:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c344:	484e      	ldr	r0, [pc, #312]	@ (800c480 <_svfiprintf_r+0x1e4>)
 800c346:	f7f3 ff43 	bl	80001d0 <memchr>
 800c34a:	9a04      	ldr	r2, [sp, #16]
 800c34c:	b9d8      	cbnz	r0, 800c386 <_svfiprintf_r+0xea>
 800c34e:	06d0      	lsls	r0, r2, #27
 800c350:	bf44      	itt	mi
 800c352:	2320      	movmi	r3, #32
 800c354:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c358:	0711      	lsls	r1, r2, #28
 800c35a:	bf44      	itt	mi
 800c35c:	232b      	movmi	r3, #43	@ 0x2b
 800c35e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c362:	f89a 3000 	ldrb.w	r3, [sl]
 800c366:	2b2a      	cmp	r3, #42	@ 0x2a
 800c368:	d015      	beq.n	800c396 <_svfiprintf_r+0xfa>
 800c36a:	9a07      	ldr	r2, [sp, #28]
 800c36c:	4654      	mov	r4, sl
 800c36e:	2000      	movs	r0, #0
 800c370:	f04f 0c0a 	mov.w	ip, #10
 800c374:	4621      	mov	r1, r4
 800c376:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c37a:	3b30      	subs	r3, #48	@ 0x30
 800c37c:	2b09      	cmp	r3, #9
 800c37e:	d94b      	bls.n	800c418 <_svfiprintf_r+0x17c>
 800c380:	b1b0      	cbz	r0, 800c3b0 <_svfiprintf_r+0x114>
 800c382:	9207      	str	r2, [sp, #28]
 800c384:	e014      	b.n	800c3b0 <_svfiprintf_r+0x114>
 800c386:	eba0 0308 	sub.w	r3, r0, r8
 800c38a:	fa09 f303 	lsl.w	r3, r9, r3
 800c38e:	4313      	orrs	r3, r2
 800c390:	9304      	str	r3, [sp, #16]
 800c392:	46a2      	mov	sl, r4
 800c394:	e7d2      	b.n	800c33c <_svfiprintf_r+0xa0>
 800c396:	9b03      	ldr	r3, [sp, #12]
 800c398:	1d19      	adds	r1, r3, #4
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	9103      	str	r1, [sp, #12]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	bfbb      	ittet	lt
 800c3a2:	425b      	neglt	r3, r3
 800c3a4:	f042 0202 	orrlt.w	r2, r2, #2
 800c3a8:	9307      	strge	r3, [sp, #28]
 800c3aa:	9307      	strlt	r3, [sp, #28]
 800c3ac:	bfb8      	it	lt
 800c3ae:	9204      	strlt	r2, [sp, #16]
 800c3b0:	7823      	ldrb	r3, [r4, #0]
 800c3b2:	2b2e      	cmp	r3, #46	@ 0x2e
 800c3b4:	d10a      	bne.n	800c3cc <_svfiprintf_r+0x130>
 800c3b6:	7863      	ldrb	r3, [r4, #1]
 800c3b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800c3ba:	d132      	bne.n	800c422 <_svfiprintf_r+0x186>
 800c3bc:	9b03      	ldr	r3, [sp, #12]
 800c3be:	1d1a      	adds	r2, r3, #4
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	9203      	str	r2, [sp, #12]
 800c3c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c3c8:	3402      	adds	r4, #2
 800c3ca:	9305      	str	r3, [sp, #20]
 800c3cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c490 <_svfiprintf_r+0x1f4>
 800c3d0:	7821      	ldrb	r1, [r4, #0]
 800c3d2:	2203      	movs	r2, #3
 800c3d4:	4650      	mov	r0, sl
 800c3d6:	f7f3 fefb 	bl	80001d0 <memchr>
 800c3da:	b138      	cbz	r0, 800c3ec <_svfiprintf_r+0x150>
 800c3dc:	9b04      	ldr	r3, [sp, #16]
 800c3de:	eba0 000a 	sub.w	r0, r0, sl
 800c3e2:	2240      	movs	r2, #64	@ 0x40
 800c3e4:	4082      	lsls	r2, r0
 800c3e6:	4313      	orrs	r3, r2
 800c3e8:	3401      	adds	r4, #1
 800c3ea:	9304      	str	r3, [sp, #16]
 800c3ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3f0:	4824      	ldr	r0, [pc, #144]	@ (800c484 <_svfiprintf_r+0x1e8>)
 800c3f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c3f6:	2206      	movs	r2, #6
 800c3f8:	f7f3 feea 	bl	80001d0 <memchr>
 800c3fc:	2800      	cmp	r0, #0
 800c3fe:	d036      	beq.n	800c46e <_svfiprintf_r+0x1d2>
 800c400:	4b21      	ldr	r3, [pc, #132]	@ (800c488 <_svfiprintf_r+0x1ec>)
 800c402:	bb1b      	cbnz	r3, 800c44c <_svfiprintf_r+0x1b0>
 800c404:	9b03      	ldr	r3, [sp, #12]
 800c406:	3307      	adds	r3, #7
 800c408:	f023 0307 	bic.w	r3, r3, #7
 800c40c:	3308      	adds	r3, #8
 800c40e:	9303      	str	r3, [sp, #12]
 800c410:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c412:	4433      	add	r3, r6
 800c414:	9309      	str	r3, [sp, #36]	@ 0x24
 800c416:	e76a      	b.n	800c2ee <_svfiprintf_r+0x52>
 800c418:	fb0c 3202 	mla	r2, ip, r2, r3
 800c41c:	460c      	mov	r4, r1
 800c41e:	2001      	movs	r0, #1
 800c420:	e7a8      	b.n	800c374 <_svfiprintf_r+0xd8>
 800c422:	2300      	movs	r3, #0
 800c424:	3401      	adds	r4, #1
 800c426:	9305      	str	r3, [sp, #20]
 800c428:	4619      	mov	r1, r3
 800c42a:	f04f 0c0a 	mov.w	ip, #10
 800c42e:	4620      	mov	r0, r4
 800c430:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c434:	3a30      	subs	r2, #48	@ 0x30
 800c436:	2a09      	cmp	r2, #9
 800c438:	d903      	bls.n	800c442 <_svfiprintf_r+0x1a6>
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d0c6      	beq.n	800c3cc <_svfiprintf_r+0x130>
 800c43e:	9105      	str	r1, [sp, #20]
 800c440:	e7c4      	b.n	800c3cc <_svfiprintf_r+0x130>
 800c442:	fb0c 2101 	mla	r1, ip, r1, r2
 800c446:	4604      	mov	r4, r0
 800c448:	2301      	movs	r3, #1
 800c44a:	e7f0      	b.n	800c42e <_svfiprintf_r+0x192>
 800c44c:	ab03      	add	r3, sp, #12
 800c44e:	9300      	str	r3, [sp, #0]
 800c450:	462a      	mov	r2, r5
 800c452:	4b0e      	ldr	r3, [pc, #56]	@ (800c48c <_svfiprintf_r+0x1f0>)
 800c454:	a904      	add	r1, sp, #16
 800c456:	4638      	mov	r0, r7
 800c458:	f3af 8000 	nop.w
 800c45c:	1c42      	adds	r2, r0, #1
 800c45e:	4606      	mov	r6, r0
 800c460:	d1d6      	bne.n	800c410 <_svfiprintf_r+0x174>
 800c462:	89ab      	ldrh	r3, [r5, #12]
 800c464:	065b      	lsls	r3, r3, #25
 800c466:	f53f af2d 	bmi.w	800c2c4 <_svfiprintf_r+0x28>
 800c46a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c46c:	e72c      	b.n	800c2c8 <_svfiprintf_r+0x2c>
 800c46e:	ab03      	add	r3, sp, #12
 800c470:	9300      	str	r3, [sp, #0]
 800c472:	462a      	mov	r2, r5
 800c474:	4b05      	ldr	r3, [pc, #20]	@ (800c48c <_svfiprintf_r+0x1f0>)
 800c476:	a904      	add	r1, sp, #16
 800c478:	4638      	mov	r0, r7
 800c47a:	f000 f879 	bl	800c570 <_printf_i>
 800c47e:	e7ed      	b.n	800c45c <_svfiprintf_r+0x1c0>
 800c480:	0800c900 	.word	0x0800c900
 800c484:	0800c90a 	.word	0x0800c90a
 800c488:	00000000 	.word	0x00000000
 800c48c:	0800c1e5 	.word	0x0800c1e5
 800c490:	0800c906 	.word	0x0800c906

0800c494 <_printf_common>:
 800c494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c498:	4616      	mov	r6, r2
 800c49a:	4698      	mov	r8, r3
 800c49c:	688a      	ldr	r2, [r1, #8]
 800c49e:	690b      	ldr	r3, [r1, #16]
 800c4a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c4a4:	4293      	cmp	r3, r2
 800c4a6:	bfb8      	it	lt
 800c4a8:	4613      	movlt	r3, r2
 800c4aa:	6033      	str	r3, [r6, #0]
 800c4ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c4b0:	4607      	mov	r7, r0
 800c4b2:	460c      	mov	r4, r1
 800c4b4:	b10a      	cbz	r2, 800c4ba <_printf_common+0x26>
 800c4b6:	3301      	adds	r3, #1
 800c4b8:	6033      	str	r3, [r6, #0]
 800c4ba:	6823      	ldr	r3, [r4, #0]
 800c4bc:	0699      	lsls	r1, r3, #26
 800c4be:	bf42      	ittt	mi
 800c4c0:	6833      	ldrmi	r3, [r6, #0]
 800c4c2:	3302      	addmi	r3, #2
 800c4c4:	6033      	strmi	r3, [r6, #0]
 800c4c6:	6825      	ldr	r5, [r4, #0]
 800c4c8:	f015 0506 	ands.w	r5, r5, #6
 800c4cc:	d106      	bne.n	800c4dc <_printf_common+0x48>
 800c4ce:	f104 0a19 	add.w	sl, r4, #25
 800c4d2:	68e3      	ldr	r3, [r4, #12]
 800c4d4:	6832      	ldr	r2, [r6, #0]
 800c4d6:	1a9b      	subs	r3, r3, r2
 800c4d8:	42ab      	cmp	r3, r5
 800c4da:	dc26      	bgt.n	800c52a <_printf_common+0x96>
 800c4dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c4e0:	6822      	ldr	r2, [r4, #0]
 800c4e2:	3b00      	subs	r3, #0
 800c4e4:	bf18      	it	ne
 800c4e6:	2301      	movne	r3, #1
 800c4e8:	0692      	lsls	r2, r2, #26
 800c4ea:	d42b      	bmi.n	800c544 <_printf_common+0xb0>
 800c4ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c4f0:	4641      	mov	r1, r8
 800c4f2:	4638      	mov	r0, r7
 800c4f4:	47c8      	blx	r9
 800c4f6:	3001      	adds	r0, #1
 800c4f8:	d01e      	beq.n	800c538 <_printf_common+0xa4>
 800c4fa:	6823      	ldr	r3, [r4, #0]
 800c4fc:	6922      	ldr	r2, [r4, #16]
 800c4fe:	f003 0306 	and.w	r3, r3, #6
 800c502:	2b04      	cmp	r3, #4
 800c504:	bf02      	ittt	eq
 800c506:	68e5      	ldreq	r5, [r4, #12]
 800c508:	6833      	ldreq	r3, [r6, #0]
 800c50a:	1aed      	subeq	r5, r5, r3
 800c50c:	68a3      	ldr	r3, [r4, #8]
 800c50e:	bf0c      	ite	eq
 800c510:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c514:	2500      	movne	r5, #0
 800c516:	4293      	cmp	r3, r2
 800c518:	bfc4      	itt	gt
 800c51a:	1a9b      	subgt	r3, r3, r2
 800c51c:	18ed      	addgt	r5, r5, r3
 800c51e:	2600      	movs	r6, #0
 800c520:	341a      	adds	r4, #26
 800c522:	42b5      	cmp	r5, r6
 800c524:	d11a      	bne.n	800c55c <_printf_common+0xc8>
 800c526:	2000      	movs	r0, #0
 800c528:	e008      	b.n	800c53c <_printf_common+0xa8>
 800c52a:	2301      	movs	r3, #1
 800c52c:	4652      	mov	r2, sl
 800c52e:	4641      	mov	r1, r8
 800c530:	4638      	mov	r0, r7
 800c532:	47c8      	blx	r9
 800c534:	3001      	adds	r0, #1
 800c536:	d103      	bne.n	800c540 <_printf_common+0xac>
 800c538:	f04f 30ff 	mov.w	r0, #4294967295
 800c53c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c540:	3501      	adds	r5, #1
 800c542:	e7c6      	b.n	800c4d2 <_printf_common+0x3e>
 800c544:	18e1      	adds	r1, r4, r3
 800c546:	1c5a      	adds	r2, r3, #1
 800c548:	2030      	movs	r0, #48	@ 0x30
 800c54a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c54e:	4422      	add	r2, r4
 800c550:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c554:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c558:	3302      	adds	r3, #2
 800c55a:	e7c7      	b.n	800c4ec <_printf_common+0x58>
 800c55c:	2301      	movs	r3, #1
 800c55e:	4622      	mov	r2, r4
 800c560:	4641      	mov	r1, r8
 800c562:	4638      	mov	r0, r7
 800c564:	47c8      	blx	r9
 800c566:	3001      	adds	r0, #1
 800c568:	d0e6      	beq.n	800c538 <_printf_common+0xa4>
 800c56a:	3601      	adds	r6, #1
 800c56c:	e7d9      	b.n	800c522 <_printf_common+0x8e>
	...

0800c570 <_printf_i>:
 800c570:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c574:	7e0f      	ldrb	r7, [r1, #24]
 800c576:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c578:	2f78      	cmp	r7, #120	@ 0x78
 800c57a:	4691      	mov	r9, r2
 800c57c:	4680      	mov	r8, r0
 800c57e:	460c      	mov	r4, r1
 800c580:	469a      	mov	sl, r3
 800c582:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c586:	d807      	bhi.n	800c598 <_printf_i+0x28>
 800c588:	2f62      	cmp	r7, #98	@ 0x62
 800c58a:	d80a      	bhi.n	800c5a2 <_printf_i+0x32>
 800c58c:	2f00      	cmp	r7, #0
 800c58e:	f000 80d1 	beq.w	800c734 <_printf_i+0x1c4>
 800c592:	2f58      	cmp	r7, #88	@ 0x58
 800c594:	f000 80b8 	beq.w	800c708 <_printf_i+0x198>
 800c598:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c59c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c5a0:	e03a      	b.n	800c618 <_printf_i+0xa8>
 800c5a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c5a6:	2b15      	cmp	r3, #21
 800c5a8:	d8f6      	bhi.n	800c598 <_printf_i+0x28>
 800c5aa:	a101      	add	r1, pc, #4	@ (adr r1, 800c5b0 <_printf_i+0x40>)
 800c5ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c5b0:	0800c609 	.word	0x0800c609
 800c5b4:	0800c61d 	.word	0x0800c61d
 800c5b8:	0800c599 	.word	0x0800c599
 800c5bc:	0800c599 	.word	0x0800c599
 800c5c0:	0800c599 	.word	0x0800c599
 800c5c4:	0800c599 	.word	0x0800c599
 800c5c8:	0800c61d 	.word	0x0800c61d
 800c5cc:	0800c599 	.word	0x0800c599
 800c5d0:	0800c599 	.word	0x0800c599
 800c5d4:	0800c599 	.word	0x0800c599
 800c5d8:	0800c599 	.word	0x0800c599
 800c5dc:	0800c71b 	.word	0x0800c71b
 800c5e0:	0800c647 	.word	0x0800c647
 800c5e4:	0800c6d5 	.word	0x0800c6d5
 800c5e8:	0800c599 	.word	0x0800c599
 800c5ec:	0800c599 	.word	0x0800c599
 800c5f0:	0800c73d 	.word	0x0800c73d
 800c5f4:	0800c599 	.word	0x0800c599
 800c5f8:	0800c647 	.word	0x0800c647
 800c5fc:	0800c599 	.word	0x0800c599
 800c600:	0800c599 	.word	0x0800c599
 800c604:	0800c6dd 	.word	0x0800c6dd
 800c608:	6833      	ldr	r3, [r6, #0]
 800c60a:	1d1a      	adds	r2, r3, #4
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	6032      	str	r2, [r6, #0]
 800c610:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c614:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c618:	2301      	movs	r3, #1
 800c61a:	e09c      	b.n	800c756 <_printf_i+0x1e6>
 800c61c:	6833      	ldr	r3, [r6, #0]
 800c61e:	6820      	ldr	r0, [r4, #0]
 800c620:	1d19      	adds	r1, r3, #4
 800c622:	6031      	str	r1, [r6, #0]
 800c624:	0606      	lsls	r6, r0, #24
 800c626:	d501      	bpl.n	800c62c <_printf_i+0xbc>
 800c628:	681d      	ldr	r5, [r3, #0]
 800c62a:	e003      	b.n	800c634 <_printf_i+0xc4>
 800c62c:	0645      	lsls	r5, r0, #25
 800c62e:	d5fb      	bpl.n	800c628 <_printf_i+0xb8>
 800c630:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c634:	2d00      	cmp	r5, #0
 800c636:	da03      	bge.n	800c640 <_printf_i+0xd0>
 800c638:	232d      	movs	r3, #45	@ 0x2d
 800c63a:	426d      	negs	r5, r5
 800c63c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c640:	4858      	ldr	r0, [pc, #352]	@ (800c7a4 <_printf_i+0x234>)
 800c642:	230a      	movs	r3, #10
 800c644:	e011      	b.n	800c66a <_printf_i+0xfa>
 800c646:	6821      	ldr	r1, [r4, #0]
 800c648:	6833      	ldr	r3, [r6, #0]
 800c64a:	0608      	lsls	r0, r1, #24
 800c64c:	f853 5b04 	ldr.w	r5, [r3], #4
 800c650:	d402      	bmi.n	800c658 <_printf_i+0xe8>
 800c652:	0649      	lsls	r1, r1, #25
 800c654:	bf48      	it	mi
 800c656:	b2ad      	uxthmi	r5, r5
 800c658:	2f6f      	cmp	r7, #111	@ 0x6f
 800c65a:	4852      	ldr	r0, [pc, #328]	@ (800c7a4 <_printf_i+0x234>)
 800c65c:	6033      	str	r3, [r6, #0]
 800c65e:	bf14      	ite	ne
 800c660:	230a      	movne	r3, #10
 800c662:	2308      	moveq	r3, #8
 800c664:	2100      	movs	r1, #0
 800c666:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c66a:	6866      	ldr	r6, [r4, #4]
 800c66c:	60a6      	str	r6, [r4, #8]
 800c66e:	2e00      	cmp	r6, #0
 800c670:	db05      	blt.n	800c67e <_printf_i+0x10e>
 800c672:	6821      	ldr	r1, [r4, #0]
 800c674:	432e      	orrs	r6, r5
 800c676:	f021 0104 	bic.w	r1, r1, #4
 800c67a:	6021      	str	r1, [r4, #0]
 800c67c:	d04b      	beq.n	800c716 <_printf_i+0x1a6>
 800c67e:	4616      	mov	r6, r2
 800c680:	fbb5 f1f3 	udiv	r1, r5, r3
 800c684:	fb03 5711 	mls	r7, r3, r1, r5
 800c688:	5dc7      	ldrb	r7, [r0, r7]
 800c68a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c68e:	462f      	mov	r7, r5
 800c690:	42bb      	cmp	r3, r7
 800c692:	460d      	mov	r5, r1
 800c694:	d9f4      	bls.n	800c680 <_printf_i+0x110>
 800c696:	2b08      	cmp	r3, #8
 800c698:	d10b      	bne.n	800c6b2 <_printf_i+0x142>
 800c69a:	6823      	ldr	r3, [r4, #0]
 800c69c:	07df      	lsls	r7, r3, #31
 800c69e:	d508      	bpl.n	800c6b2 <_printf_i+0x142>
 800c6a0:	6923      	ldr	r3, [r4, #16]
 800c6a2:	6861      	ldr	r1, [r4, #4]
 800c6a4:	4299      	cmp	r1, r3
 800c6a6:	bfde      	ittt	le
 800c6a8:	2330      	movle	r3, #48	@ 0x30
 800c6aa:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c6ae:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c6b2:	1b92      	subs	r2, r2, r6
 800c6b4:	6122      	str	r2, [r4, #16]
 800c6b6:	f8cd a000 	str.w	sl, [sp]
 800c6ba:	464b      	mov	r3, r9
 800c6bc:	aa03      	add	r2, sp, #12
 800c6be:	4621      	mov	r1, r4
 800c6c0:	4640      	mov	r0, r8
 800c6c2:	f7ff fee7 	bl	800c494 <_printf_common>
 800c6c6:	3001      	adds	r0, #1
 800c6c8:	d14a      	bne.n	800c760 <_printf_i+0x1f0>
 800c6ca:	f04f 30ff 	mov.w	r0, #4294967295
 800c6ce:	b004      	add	sp, #16
 800c6d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6d4:	6823      	ldr	r3, [r4, #0]
 800c6d6:	f043 0320 	orr.w	r3, r3, #32
 800c6da:	6023      	str	r3, [r4, #0]
 800c6dc:	4832      	ldr	r0, [pc, #200]	@ (800c7a8 <_printf_i+0x238>)
 800c6de:	2778      	movs	r7, #120	@ 0x78
 800c6e0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c6e4:	6823      	ldr	r3, [r4, #0]
 800c6e6:	6831      	ldr	r1, [r6, #0]
 800c6e8:	061f      	lsls	r7, r3, #24
 800c6ea:	f851 5b04 	ldr.w	r5, [r1], #4
 800c6ee:	d402      	bmi.n	800c6f6 <_printf_i+0x186>
 800c6f0:	065f      	lsls	r7, r3, #25
 800c6f2:	bf48      	it	mi
 800c6f4:	b2ad      	uxthmi	r5, r5
 800c6f6:	6031      	str	r1, [r6, #0]
 800c6f8:	07d9      	lsls	r1, r3, #31
 800c6fa:	bf44      	itt	mi
 800c6fc:	f043 0320 	orrmi.w	r3, r3, #32
 800c700:	6023      	strmi	r3, [r4, #0]
 800c702:	b11d      	cbz	r5, 800c70c <_printf_i+0x19c>
 800c704:	2310      	movs	r3, #16
 800c706:	e7ad      	b.n	800c664 <_printf_i+0xf4>
 800c708:	4826      	ldr	r0, [pc, #152]	@ (800c7a4 <_printf_i+0x234>)
 800c70a:	e7e9      	b.n	800c6e0 <_printf_i+0x170>
 800c70c:	6823      	ldr	r3, [r4, #0]
 800c70e:	f023 0320 	bic.w	r3, r3, #32
 800c712:	6023      	str	r3, [r4, #0]
 800c714:	e7f6      	b.n	800c704 <_printf_i+0x194>
 800c716:	4616      	mov	r6, r2
 800c718:	e7bd      	b.n	800c696 <_printf_i+0x126>
 800c71a:	6833      	ldr	r3, [r6, #0]
 800c71c:	6825      	ldr	r5, [r4, #0]
 800c71e:	6961      	ldr	r1, [r4, #20]
 800c720:	1d18      	adds	r0, r3, #4
 800c722:	6030      	str	r0, [r6, #0]
 800c724:	062e      	lsls	r6, r5, #24
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	d501      	bpl.n	800c72e <_printf_i+0x1be>
 800c72a:	6019      	str	r1, [r3, #0]
 800c72c:	e002      	b.n	800c734 <_printf_i+0x1c4>
 800c72e:	0668      	lsls	r0, r5, #25
 800c730:	d5fb      	bpl.n	800c72a <_printf_i+0x1ba>
 800c732:	8019      	strh	r1, [r3, #0]
 800c734:	2300      	movs	r3, #0
 800c736:	6123      	str	r3, [r4, #16]
 800c738:	4616      	mov	r6, r2
 800c73a:	e7bc      	b.n	800c6b6 <_printf_i+0x146>
 800c73c:	6833      	ldr	r3, [r6, #0]
 800c73e:	1d1a      	adds	r2, r3, #4
 800c740:	6032      	str	r2, [r6, #0]
 800c742:	681e      	ldr	r6, [r3, #0]
 800c744:	6862      	ldr	r2, [r4, #4]
 800c746:	2100      	movs	r1, #0
 800c748:	4630      	mov	r0, r6
 800c74a:	f7f3 fd41 	bl	80001d0 <memchr>
 800c74e:	b108      	cbz	r0, 800c754 <_printf_i+0x1e4>
 800c750:	1b80      	subs	r0, r0, r6
 800c752:	6060      	str	r0, [r4, #4]
 800c754:	6863      	ldr	r3, [r4, #4]
 800c756:	6123      	str	r3, [r4, #16]
 800c758:	2300      	movs	r3, #0
 800c75a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c75e:	e7aa      	b.n	800c6b6 <_printf_i+0x146>
 800c760:	6923      	ldr	r3, [r4, #16]
 800c762:	4632      	mov	r2, r6
 800c764:	4649      	mov	r1, r9
 800c766:	4640      	mov	r0, r8
 800c768:	47d0      	blx	sl
 800c76a:	3001      	adds	r0, #1
 800c76c:	d0ad      	beq.n	800c6ca <_printf_i+0x15a>
 800c76e:	6823      	ldr	r3, [r4, #0]
 800c770:	079b      	lsls	r3, r3, #30
 800c772:	d413      	bmi.n	800c79c <_printf_i+0x22c>
 800c774:	68e0      	ldr	r0, [r4, #12]
 800c776:	9b03      	ldr	r3, [sp, #12]
 800c778:	4298      	cmp	r0, r3
 800c77a:	bfb8      	it	lt
 800c77c:	4618      	movlt	r0, r3
 800c77e:	e7a6      	b.n	800c6ce <_printf_i+0x15e>
 800c780:	2301      	movs	r3, #1
 800c782:	4632      	mov	r2, r6
 800c784:	4649      	mov	r1, r9
 800c786:	4640      	mov	r0, r8
 800c788:	47d0      	blx	sl
 800c78a:	3001      	adds	r0, #1
 800c78c:	d09d      	beq.n	800c6ca <_printf_i+0x15a>
 800c78e:	3501      	adds	r5, #1
 800c790:	68e3      	ldr	r3, [r4, #12]
 800c792:	9903      	ldr	r1, [sp, #12]
 800c794:	1a5b      	subs	r3, r3, r1
 800c796:	42ab      	cmp	r3, r5
 800c798:	dcf2      	bgt.n	800c780 <_printf_i+0x210>
 800c79a:	e7eb      	b.n	800c774 <_printf_i+0x204>
 800c79c:	2500      	movs	r5, #0
 800c79e:	f104 0619 	add.w	r6, r4, #25
 800c7a2:	e7f5      	b.n	800c790 <_printf_i+0x220>
 800c7a4:	0800c911 	.word	0x0800c911
 800c7a8:	0800c922 	.word	0x0800c922

0800c7ac <memmove>:
 800c7ac:	4288      	cmp	r0, r1
 800c7ae:	b510      	push	{r4, lr}
 800c7b0:	eb01 0402 	add.w	r4, r1, r2
 800c7b4:	d902      	bls.n	800c7bc <memmove+0x10>
 800c7b6:	4284      	cmp	r4, r0
 800c7b8:	4623      	mov	r3, r4
 800c7ba:	d807      	bhi.n	800c7cc <memmove+0x20>
 800c7bc:	1e43      	subs	r3, r0, #1
 800c7be:	42a1      	cmp	r1, r4
 800c7c0:	d008      	beq.n	800c7d4 <memmove+0x28>
 800c7c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c7c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c7ca:	e7f8      	b.n	800c7be <memmove+0x12>
 800c7cc:	4402      	add	r2, r0
 800c7ce:	4601      	mov	r1, r0
 800c7d0:	428a      	cmp	r2, r1
 800c7d2:	d100      	bne.n	800c7d6 <memmove+0x2a>
 800c7d4:	bd10      	pop	{r4, pc}
 800c7d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c7da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c7de:	e7f7      	b.n	800c7d0 <memmove+0x24>

0800c7e0 <_sbrk_r>:
 800c7e0:	b538      	push	{r3, r4, r5, lr}
 800c7e2:	4d06      	ldr	r5, [pc, #24]	@ (800c7fc <_sbrk_r+0x1c>)
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	4604      	mov	r4, r0
 800c7e8:	4608      	mov	r0, r1
 800c7ea:	602b      	str	r3, [r5, #0]
 800c7ec:	f7f4 fad8 	bl	8000da0 <_sbrk>
 800c7f0:	1c43      	adds	r3, r0, #1
 800c7f2:	d102      	bne.n	800c7fa <_sbrk_r+0x1a>
 800c7f4:	682b      	ldr	r3, [r5, #0]
 800c7f6:	b103      	cbz	r3, 800c7fa <_sbrk_r+0x1a>
 800c7f8:	6023      	str	r3, [r4, #0]
 800c7fa:	bd38      	pop	{r3, r4, r5, pc}
 800c7fc:	200027a0 	.word	0x200027a0

0800c800 <_realloc_r>:
 800c800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c804:	4607      	mov	r7, r0
 800c806:	4614      	mov	r4, r2
 800c808:	460d      	mov	r5, r1
 800c80a:	b921      	cbnz	r1, 800c816 <_realloc_r+0x16>
 800c80c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c810:	4611      	mov	r1, r2
 800c812:	f7ff bc5b 	b.w	800c0cc <_malloc_r>
 800c816:	b92a      	cbnz	r2, 800c824 <_realloc_r+0x24>
 800c818:	f7ff fbec 	bl	800bff4 <_free_r>
 800c81c:	4625      	mov	r5, r4
 800c81e:	4628      	mov	r0, r5
 800c820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c824:	f000 f81a 	bl	800c85c <_malloc_usable_size_r>
 800c828:	4284      	cmp	r4, r0
 800c82a:	4606      	mov	r6, r0
 800c82c:	d802      	bhi.n	800c834 <_realloc_r+0x34>
 800c82e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c832:	d8f4      	bhi.n	800c81e <_realloc_r+0x1e>
 800c834:	4621      	mov	r1, r4
 800c836:	4638      	mov	r0, r7
 800c838:	f7ff fc48 	bl	800c0cc <_malloc_r>
 800c83c:	4680      	mov	r8, r0
 800c83e:	b908      	cbnz	r0, 800c844 <_realloc_r+0x44>
 800c840:	4645      	mov	r5, r8
 800c842:	e7ec      	b.n	800c81e <_realloc_r+0x1e>
 800c844:	42b4      	cmp	r4, r6
 800c846:	4622      	mov	r2, r4
 800c848:	4629      	mov	r1, r5
 800c84a:	bf28      	it	cs
 800c84c:	4632      	movcs	r2, r6
 800c84e:	f7ff fbc3 	bl	800bfd8 <memcpy>
 800c852:	4629      	mov	r1, r5
 800c854:	4638      	mov	r0, r7
 800c856:	f7ff fbcd 	bl	800bff4 <_free_r>
 800c85a:	e7f1      	b.n	800c840 <_realloc_r+0x40>

0800c85c <_malloc_usable_size_r>:
 800c85c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c860:	1f18      	subs	r0, r3, #4
 800c862:	2b00      	cmp	r3, #0
 800c864:	bfbc      	itt	lt
 800c866:	580b      	ldrlt	r3, [r1, r0]
 800c868:	18c0      	addlt	r0, r0, r3
 800c86a:	4770      	bx	lr

0800c86c <_init>:
 800c86c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c86e:	bf00      	nop
 800c870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c872:	bc08      	pop	{r3}
 800c874:	469e      	mov	lr, r3
 800c876:	4770      	bx	lr

0800c878 <_fini>:
 800c878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c87a:	bf00      	nop
 800c87c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c87e:	bc08      	pop	{r3}
 800c880:	469e      	mov	lr, r3
 800c882:	4770      	bx	lr
