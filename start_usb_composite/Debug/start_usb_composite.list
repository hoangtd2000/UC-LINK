
start_usb_composite.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc34  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800cdc4  0800cdc4  0000ddc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce74  0800ce74  0000e304  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ce74  0800ce74  0000de74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ce7c  0800ce7c  0000e304  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce7c  0800ce7c  0000de7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ce80  0800ce80  0000de80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000304  20000000  0800ce84  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e304  2**0
                  CONTENTS
 10 .bss          0000331c  20000304  20000304  0000e304  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20003620  20003620  0000e304  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e304  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020a8a  00000000  00000000  0000e334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000512c  00000000  00000000  0002edbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a88  00000000  00000000  00033ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001473  00000000  00000000  00035978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002701b  00000000  00000000  00036deb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025004  00000000  00000000  0005de06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6ac5  00000000  00000000  00082e0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001598cf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000073c0  00000000  00000000  00159914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  00160cd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000304 	.word	0x20000304
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cdac 	.word	0x0800cdac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000308 	.word	0x20000308
 80001cc:	0800cdac 	.word	0x0800cdac

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <HAL_CAN_MspInit>:
  /* USER CODE END CAN1_Init 2 */

}

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b08a      	sub	sp, #40	@ 0x28
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a4:	f107 0314 	add.w	r3, r7, #20
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a21      	ldr	r2, [pc, #132]	@ (8000640 <HAL_CAN_MspInit+0xa4>)
 80005ba:	4293      	cmp	r3, r2
 80005bc:	d13b      	bne.n	8000636 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005be:	2300      	movs	r3, #0
 80005c0:	613b      	str	r3, [r7, #16]
 80005c2:	4b20      	ldr	r3, [pc, #128]	@ (8000644 <HAL_CAN_MspInit+0xa8>)
 80005c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c6:	4a1f      	ldr	r2, [pc, #124]	@ (8000644 <HAL_CAN_MspInit+0xa8>)
 80005c8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80005cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80005ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000644 <HAL_CAN_MspInit+0xa8>)
 80005d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80005d6:	613b      	str	r3, [r7, #16]
 80005d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	60fb      	str	r3, [r7, #12]
 80005de:	4b19      	ldr	r3, [pc, #100]	@ (8000644 <HAL_CAN_MspInit+0xa8>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e2:	4a18      	ldr	r2, [pc, #96]	@ (8000644 <HAL_CAN_MspInit+0xa8>)
 80005e4:	f043 0308 	orr.w	r3, r3, #8
 80005e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ea:	4b16      	ldr	r3, [pc, #88]	@ (8000644 <HAL_CAN_MspInit+0xa8>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ee:	f003 0308 	and.w	r3, r3, #8
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80005f6:	2303      	movs	r3, #3
 80005f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005fa:	2302      	movs	r3, #2
 80005fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fe:	2300      	movs	r3, #0
 8000600:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000602:	2303      	movs	r3, #3
 8000604:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000606:	2309      	movs	r3, #9
 8000608:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	4619      	mov	r1, r3
 8000610:	480d      	ldr	r0, [pc, #52]	@ (8000648 <HAL_CAN_MspInit+0xac>)
 8000612:	f002 fe01 	bl	8003218 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000616:	2200      	movs	r2, #0
 8000618:	2100      	movs	r1, #0
 800061a:	2014      	movs	r0, #20
 800061c:	f002 f9dd 	bl	80029da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000620:	2014      	movs	r0, #20
 8000622:	f002 f9f6 	bl	8002a12 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000626:	2200      	movs	r2, #0
 8000628:	2100      	movs	r1, #0
 800062a:	2015      	movs	r0, #21
 800062c:	f002 f9d5 	bl	80029da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000630:	2015      	movs	r0, #21
 8000632:	f002 f9ee 	bl	8002a12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000636:	bf00      	nop
 8000638:	3728      	adds	r7, #40	@ 0x28
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40006400 	.word	0x40006400
 8000644:	40023800 	.word	0x40023800
 8000648:	40020c00 	.word	0x40020c00

0800064c <HAL_CAN_MspDeInit>:

void HAL_CAN_MspDeInit(CAN_HandleTypeDef* canHandle)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]

  if(canHandle->Instance==CAN1)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a0b      	ldr	r2, [pc, #44]	@ (8000688 <HAL_CAN_MspDeInit+0x3c>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d10f      	bne.n	800067e <HAL_CAN_MspDeInit+0x32>
  {
  /* USER CODE BEGIN CAN1_MspDeInit 0 */

  /* USER CODE END CAN1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CAN1_CLK_DISABLE();
 800065e:	4b0b      	ldr	r3, [pc, #44]	@ (800068c <HAL_CAN_MspDeInit+0x40>)
 8000660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000662:	4a0a      	ldr	r2, [pc, #40]	@ (800068c <HAL_CAN_MspDeInit+0x40>)
 8000664:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8000668:	6413      	str	r3, [r2, #64]	@ 0x40

    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1);
 800066a:	2103      	movs	r1, #3
 800066c:	4808      	ldr	r0, [pc, #32]	@ (8000690 <HAL_CAN_MspDeInit+0x44>)
 800066e:	f002 ff6f 	bl	8003550 <HAL_GPIO_DeInit>

    /* CAN1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(CAN1_RX0_IRQn);
 8000672:	2014      	movs	r0, #20
 8000674:	f002 f9db 	bl	8002a2e <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN1_RX1_IRQn);
 8000678:	2015      	movs	r0, #21
 800067a:	f002 f9d8 	bl	8002a2e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN CAN1_MspDeInit 1 */

  /* USER CODE END CAN1_MspDeInit 1 */
  }
}
 800067e:	bf00      	nop
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40006400 	.word	0x40006400
 800068c:	40023800 	.word	0x40023800
 8000690:	40020c00 	.word	0x40020c00

08000694 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	4b10      	ldr	r3, [pc, #64]	@ (80006e0 <MX_DMA_Init+0x4c>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	4a0f      	ldr	r2, [pc, #60]	@ (80006e0 <MX_DMA_Init+0x4c>)
 80006a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80006a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006aa:	4b0d      	ldr	r3, [pc, #52]	@ (80006e0 <MX_DMA_Init+0x4c>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2100      	movs	r1, #0
 80006ba:	200b      	movs	r0, #11
 80006bc:	f002 f98d 	bl	80029da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80006c0:	200b      	movs	r0, #11
 80006c2:	f002 f9a6 	bl	8002a12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2100      	movs	r1, #0
 80006ca:	202f      	movs	r0, #47	@ 0x2f
 80006cc:	f002 f985 	bl	80029da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80006d0:	202f      	movs	r0, #47	@ 0x2f
 80006d2:	f002 f99e 	bl	8002a12 <HAL_NVIC_EnableIRQ>

}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40023800 	.word	0x40023800

080006e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08a      	sub	sp, #40	@ 0x28
 80006e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ea:	f107 0314 	add.w	r3, r7, #20
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]
 80006f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	613b      	str	r3, [r7, #16]
 80006fe:	4b2d      	ldr	r3, [pc, #180]	@ (80007b4 <MX_GPIO_Init+0xd0>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000702:	4a2c      	ldr	r2, [pc, #176]	@ (80007b4 <MX_GPIO_Init+0xd0>)
 8000704:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000708:	6313      	str	r3, [r2, #48]	@ 0x30
 800070a:	4b2a      	ldr	r3, [pc, #168]	@ (80007b4 <MX_GPIO_Init+0xd0>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000712:	613b      	str	r3, [r7, #16]
 8000714:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	60fb      	str	r3, [r7, #12]
 800071a:	4b26      	ldr	r3, [pc, #152]	@ (80007b4 <MX_GPIO_Init+0xd0>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	4a25      	ldr	r2, [pc, #148]	@ (80007b4 <MX_GPIO_Init+0xd0>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	6313      	str	r3, [r2, #48]	@ 0x30
 8000726:	4b23      	ldr	r3, [pc, #140]	@ (80007b4 <MX_GPIO_Init+0xd0>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	60bb      	str	r3, [r7, #8]
 8000736:	4b1f      	ldr	r3, [pc, #124]	@ (80007b4 <MX_GPIO_Init+0xd0>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	4a1e      	ldr	r2, [pc, #120]	@ (80007b4 <MX_GPIO_Init+0xd0>)
 800073c:	f043 0304 	orr.w	r3, r3, #4
 8000740:	6313      	str	r3, [r2, #48]	@ 0x30
 8000742:	4b1c      	ldr	r3, [pc, #112]	@ (80007b4 <MX_GPIO_Init+0xd0>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	f003 0304 	and.w	r3, r3, #4
 800074a:	60bb      	str	r3, [r7, #8]
 800074c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	4b18      	ldr	r3, [pc, #96]	@ (80007b4 <MX_GPIO_Init+0xd0>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	4a17      	ldr	r2, [pc, #92]	@ (80007b4 <MX_GPIO_Init+0xd0>)
 8000758:	f043 0308 	orr.w	r3, r3, #8
 800075c:	6313      	str	r3, [r2, #48]	@ 0x30
 800075e:	4b15      	ldr	r3, [pc, #84]	@ (80007b4 <MX_GPIO_Init+0xd0>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	f003 0308 	and.w	r3, r3, #8
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	603b      	str	r3, [r7, #0]
 800076e:	4b11      	ldr	r3, [pc, #68]	@ (80007b4 <MX_GPIO_Init+0xd0>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	4a10      	ldr	r2, [pc, #64]	@ (80007b4 <MX_GPIO_Init+0xd0>)
 8000774:	f043 0302 	orr.w	r3, r3, #2
 8000778:	6313      	str	r3, [r2, #48]	@ 0x30
 800077a:	4b0e      	ldr	r3, [pc, #56]	@ (80007b4 <MX_GPIO_Init+0xd0>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	f003 0302 	and.w	r3, r3, #2
 8000782:	603b      	str	r3, [r7, #0]
 8000784:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	21c0      	movs	r1, #192	@ 0xc0
 800078a:	480b      	ldr	r0, [pc, #44]	@ (80007b8 <MX_GPIO_Init+0xd4>)
 800078c:	f002 ffdc 	bl	8003748 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000790:	23c0      	movs	r3, #192	@ 0xc0
 8000792:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000794:	2301      	movs	r3, #1
 8000796:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079c:	2300      	movs	r3, #0
 800079e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a0:	f107 0314 	add.w	r3, r7, #20
 80007a4:	4619      	mov	r1, r3
 80007a6:	4804      	ldr	r0, [pc, #16]	@ (80007b8 <MX_GPIO_Init+0xd4>)
 80007a8:	f002 fd36 	bl	8003218 <HAL_GPIO_Init>

}
 80007ac:	bf00      	nop
 80007ae:	3728      	adds	r7, #40	@ 0x28
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40020000 	.word	0x40020000

080007bc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007c0:	4b12      	ldr	r3, [pc, #72]	@ (800080c <MX_I2C1_Init+0x50>)
 80007c2:	4a13      	ldr	r2, [pc, #76]	@ (8000810 <MX_I2C1_Init+0x54>)
 80007c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80007c6:	4b11      	ldr	r3, [pc, #68]	@ (800080c <MX_I2C1_Init+0x50>)
 80007c8:	4a12      	ldr	r2, [pc, #72]	@ (8000814 <MX_I2C1_Init+0x58>)
 80007ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007cc:	4b0f      	ldr	r3, [pc, #60]	@ (800080c <MX_I2C1_Init+0x50>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007d2:	4b0e      	ldr	r3, [pc, #56]	@ (800080c <MX_I2C1_Init+0x50>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007d8:	4b0c      	ldr	r3, [pc, #48]	@ (800080c <MX_I2C1_Init+0x50>)
 80007da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007e0:	4b0a      	ldr	r3, [pc, #40]	@ (800080c <MX_I2C1_Init+0x50>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007e6:	4b09      	ldr	r3, [pc, #36]	@ (800080c <MX_I2C1_Init+0x50>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ec:	4b07      	ldr	r3, [pc, #28]	@ (800080c <MX_I2C1_Init+0x50>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007f2:	4b06      	ldr	r3, [pc, #24]	@ (800080c <MX_I2C1_Init+0x50>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007f8:	4804      	ldr	r0, [pc, #16]	@ (800080c <MX_I2C1_Init+0x50>)
 80007fa:	f002 ffd9 	bl	80037b0 <HAL_I2C_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000804:	f000 fbf4 	bl	8000ff0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20000348 	.word	0x20000348
 8000810:	40005400 	.word	0x40005400
 8000814:	00061a80 	.word	0x00061a80

08000818 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08a      	sub	sp, #40	@ 0x28
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a19      	ldr	r2, [pc, #100]	@ (800089c <HAL_I2C_MspInit+0x84>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d12b      	bne.n	8000892 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	613b      	str	r3, [r7, #16]
 800083e:	4b18      	ldr	r3, [pc, #96]	@ (80008a0 <HAL_I2C_MspInit+0x88>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	4a17      	ldr	r2, [pc, #92]	@ (80008a0 <HAL_I2C_MspInit+0x88>)
 8000844:	f043 0302 	orr.w	r3, r3, #2
 8000848:	6313      	str	r3, [r2, #48]	@ 0x30
 800084a:	4b15      	ldr	r3, [pc, #84]	@ (80008a0 <HAL_I2C_MspInit+0x88>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	f003 0302 	and.w	r3, r3, #2
 8000852:	613b      	str	r3, [r7, #16]
 8000854:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000856:	23c0      	movs	r3, #192	@ 0xc0
 8000858:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800085a:	2312      	movs	r3, #18
 800085c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000862:	2303      	movs	r3, #3
 8000864:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000866:	2304      	movs	r3, #4
 8000868:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800086a:	f107 0314 	add.w	r3, r7, #20
 800086e:	4619      	mov	r1, r3
 8000870:	480c      	ldr	r0, [pc, #48]	@ (80008a4 <HAL_I2C_MspInit+0x8c>)
 8000872:	f002 fcd1 	bl	8003218 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	4b09      	ldr	r3, [pc, #36]	@ (80008a0 <HAL_I2C_MspInit+0x88>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087e:	4a08      	ldr	r2, [pc, #32]	@ (80008a0 <HAL_I2C_MspInit+0x88>)
 8000880:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000884:	6413      	str	r3, [r2, #64]	@ 0x40
 8000886:	4b06      	ldr	r3, [pc, #24]	@ (80008a0 <HAL_I2C_MspInit+0x88>)
 8000888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800088a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000892:	bf00      	nop
 8000894:	3728      	adds	r7, #40	@ 0x28
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40005400 	.word	0x40005400
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40020400 	.word	0x40020400

080008a8 <Process_HID_Frames>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Process_HID_Frames(void) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b090      	sub	sp, #64	@ 0x40
 80008ac:	af00      	add	r7, sp, #0
    uint8_t frame[HID_FRAME_SIZE];

    while (HID_Frame_Read(&hid_frame_fifo,frame)) {
 80008ae:	e007      	b.n	80008c0 <Process_HID_Frames+0x18>
    	FuncSendCanArray[frame[0]](frame);
 80008b0:	783b      	ldrb	r3, [r7, #0]
 80008b2:	461a      	mov	r2, r3
 80008b4:	4b09      	ldr	r3, [pc, #36]	@ (80008dc <Process_HID_Frames+0x34>)
 80008b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008ba:	463a      	mov	r2, r7
 80008bc:	4610      	mov	r0, r2
 80008be:	4798      	blx	r3
    while (HID_Frame_Read(&hid_frame_fifo,frame)) {
 80008c0:	463b      	mov	r3, r7
 80008c2:	4619      	mov	r1, r3
 80008c4:	4806      	ldr	r0, [pc, #24]	@ (80008e0 <Process_HID_Frames+0x38>)
 80008c6:	f008 fe47 	bl	8009558 <HID_Frame_Read>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d1ef      	bne.n	80008b0 <Process_HID_Frames+0x8>
    }
}
 80008d0:	bf00      	nop
 80008d2:	bf00      	nop
 80008d4:	3740      	adds	r7, #64	@ 0x40
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000000 	.word	0x20000000
 80008e0:	20002928 	.word	0x20002928

080008e4 <SendCanConfig>:

uint8_t SendCanConfig(uint8_t *data){
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
	switch(data[1]){
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	3301      	adds	r3, #1
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d107      	bne.n	8000906 <SendCanConfig+0x22>
	case 0 :
		SendCanConfigDisconnect(data);
 80008f6:	6878      	ldr	r0, [r7, #4]
 80008f8:	f000 f832 	bl	8000960 <SendCanConfigDisconnect>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 80008fc:	2140      	movs	r1, #64	@ 0x40
 80008fe:	4808      	ldr	r0, [pc, #32]	@ (8000920 <SendCanConfig+0x3c>)
 8000900:	f002 ff3b 	bl	800377a <HAL_GPIO_TogglePin>
		break;
 8000904:	e007      	b.n	8000916 <SendCanConfig+0x32>
	default:
		SendCanConfigConnect(data);
 8000906:	6878      	ldr	r0, [r7, #4]
 8000908:	f000 f80c 	bl	8000924 <SendCanConfigConnect>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 800090c:	2180      	movs	r1, #128	@ 0x80
 800090e:	4804      	ldr	r0, [pc, #16]	@ (8000920 <SendCanConfig+0x3c>)
 8000910:	f002 ff33 	bl	800377a <HAL_GPIO_TogglePin>
		break;
 8000914:	bf00      	nop
	}
	return 1;
 8000916:	2301      	movs	r3, #1
}
 8000918:	4618      	mov	r0, r3
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40020000 	.word	0x40020000

08000924 <SendCanConfigConnect>:
uint8_t SendCanConfigConnect(uint8_t *data){
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
	  HAL_TIM_Base_Start(&htim5);
 800092c:	4809      	ldr	r0, [pc, #36]	@ (8000954 <SendCanConfigConnect+0x30>)
 800092e:	f004 ffbd 	bl	80058ac <HAL_TIM_Base_Start>
	  HAL_TIM_Base_Start_IT(&htim4);
 8000932:	4809      	ldr	r0, [pc, #36]	@ (8000958 <SendCanConfigConnect+0x34>)
 8000934:	f005 f84a 	bl	80059cc <HAL_TIM_Base_Start_IT>
	  SendCanConfigBaud(data);
 8000938:	6878      	ldr	r0, [r7, #4]
 800093a:	f000 f831 	bl	80009a0 <SendCanConfigBaud>
	  SendCanConfigFilter(data);
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	f000 f88e 	bl	8000a60 <SendCanConfigFilter>
	  HAL_CAN_Start(&hcan1);
 8000944:	4805      	ldr	r0, [pc, #20]	@ (800095c <SendCanConfigConnect+0x38>)
 8000946:	f001 fa75 	bl	8001e34 <HAL_CAN_Start>

	  //CanRx_init();
	  return 1;
 800094a:	2301      	movs	r3, #1
}
 800094c:	4618      	mov	r0, r3
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000d18 	.word	0x20000d18
 8000958:	20000cd0 	.word	0x20000cd0
 800095c:	20000320 	.word	0x20000320

08000960 <SendCanConfigDisconnect>:
uint8_t SendCanConfigDisconnect(uint8_t *data){
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
	  HAL_TIM_Base_Stop(&htim5);
 8000968:	480a      	ldr	r0, [pc, #40]	@ (8000994 <SendCanConfigDisconnect+0x34>)
 800096a:	f005 f807 	bl	800597c <HAL_TIM_Base_Stop>
	  HAL_TIM_Base_Stop_IT(&htim4);
 800096e:	480a      	ldr	r0, [pc, #40]	@ (8000998 <SendCanConfigDisconnect+0x38>)
 8000970:	f005 f89c 	bl	8005aac <HAL_TIM_Base_Stop_IT>
	  if (HAL_CAN_DeInit(&hcan1) != HAL_OK)
 8000974:	4809      	ldr	r0, [pc, #36]	@ (800099c <SendCanConfigDisconnect+0x3c>)
 8000976:	f001 f95c 	bl	8001c32 <HAL_CAN_DeInit>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <SendCanConfigDisconnect+0x24>
	   {
	     Error_Handler();
 8000980:	f000 fb36 	bl	8000ff0 <Error_Handler>
	   }
	  HAL_CAN_Stop(&hcan1);
 8000984:	4805      	ldr	r0, [pc, #20]	@ (800099c <SendCanConfigDisconnect+0x3c>)
 8000986:	f001 fa99 	bl	8001ebc <HAL_CAN_Stop>
	  return 1;
 800098a:	2301      	movs	r3, #1

}
 800098c:	4618      	mov	r0, r3
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	20000d18 	.word	0x20000d18
 8000998:	20000cd0 	.word	0x20000cd0
 800099c:	20000320 	.word	0x20000320

080009a0 <SendCanConfigBaud>:
uint8_t SendCanConfigBaud(uint8_t *data){
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08a      	sub	sp, #40	@ 0x28
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
	uint32_t baudrate = ((data[2] << 8) | data[1]) * 1000;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3302      	adds	r3, #2
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	021b      	lsls	r3, r3, #8
 80009b0:	687a      	ldr	r2, [r7, #4]
 80009b2:	3201      	adds	r2, #1
 80009b4:	7812      	ldrb	r2, [r2, #0]
 80009b6:	4313      	orrs	r3, r2
 80009b8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80009bc:	fb02 f303 	mul.w	r3, r2, r3
 80009c0:	627b      	str	r3, [r7, #36]	@ 0x24

	//uint16_t desired_sample_point = 875;
	uint16_t desired_sample_point = (data[4] << 8) | data[3];
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	3304      	adds	r3, #4
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	b21b      	sxth	r3, r3
 80009ca:	021b      	lsls	r3, r3, #8
 80009cc:	b21a      	sxth	r2, r3
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	3303      	adds	r3, #3
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	b21b      	sxth	r3, r3
 80009d6:	4313      	orrs	r3, r2
 80009d8:	b21b      	sxth	r3, r3
 80009da:	847b      	strh	r3, [r7, #34]	@ 0x22
    CAN_TimingConfig config = find_best_timing(baudrate, desired_sample_point);
 80009dc:	f107 0308 	add.w	r3, r7, #8
 80009e0:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80009e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80009e4:	4618      	mov	r0, r3
 80009e6:	f000 f873 	bl	8000ad0 <find_best_timing>
	hcan1.Instance = CAN1;
 80009ea:	4b1b      	ldr	r3, [pc, #108]	@ (8000a58 <SendCanConfigBaud+0xb8>)
 80009ec:	4a1b      	ldr	r2, [pc, #108]	@ (8000a5c <SendCanConfigBaud+0xbc>)
 80009ee:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = config.prescaler;
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	461a      	mov	r2, r3
 80009f4:	4b18      	ldr	r3, [pc, #96]	@ (8000a58 <SendCanConfigBaud+0xb8>)
 80009f6:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 80009f8:	4b17      	ldr	r3, [pc, #92]	@ (8000a58 <SendCanConfigBaud+0xb8>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80009fe:	4b16      	ldr	r3, [pc, #88]	@ (8000a58 <SendCanConfigBaud+0xb8>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = (config.tseg1 - 1 ) << 16;
 8000a04:	693b      	ldr	r3, [r7, #16]
 8000a06:	3b01      	subs	r3, #1
 8000a08:	041b      	lsls	r3, r3, #16
 8000a0a:	4a13      	ldr	r2, [pc, #76]	@ (8000a58 <SendCanConfigBaud+0xb8>)
 8000a0c:	6113      	str	r3, [r2, #16]
	hcan1.Init.TimeSeg2 = (config.tseg2 - 1 ) << 20;
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	3b01      	subs	r3, #1
 8000a12:	051b      	lsls	r3, r3, #20
 8000a14:	4a10      	ldr	r2, [pc, #64]	@ (8000a58 <SendCanConfigBaud+0xb8>)
 8000a16:	6153      	str	r3, [r2, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a18:	4b0f      	ldr	r3, [pc, #60]	@ (8000a58 <SendCanConfigBaud+0xb8>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a58 <SendCanConfigBaud+0xb8>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8000a24:	4b0c      	ldr	r3, [pc, #48]	@ (8000a58 <SendCanConfigBaud+0xb8>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a58 <SendCanConfigBaud+0xb8>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a30:	4b09      	ldr	r3, [pc, #36]	@ (8000a58 <SendCanConfigBaud+0xb8>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a36:	4b08      	ldr	r3, [pc, #32]	@ (8000a58 <SendCanConfigBaud+0xb8>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a3c:	4806      	ldr	r0, [pc, #24]	@ (8000a58 <SendCanConfigBaud+0xb8>)
 8000a3e:	f000 fffd 	bl	8001a3c <HAL_CAN_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <SendCanConfigBaud+0xac>
	{
		Error_Handler();
 8000a48:	f000 fad2 	bl	8000ff0 <Error_Handler>
	}
	return 1;
 8000a4c:	2301      	movs	r3, #1
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3728      	adds	r7, #40	@ 0x28
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000320 	.word	0x20000320
 8000a5c:	40006400 	.word	0x40006400

08000a60 <SendCanConfigFilter>:
uint8_t SendCanConfigFilter(uint8_t *data){
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
	uint32_t start_id =  (data[9] << 24 ) | (data[8] << 16 ) | (data[7] << 8 ) | data[6];
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	3309      	adds	r3, #9
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	061a      	lsls	r2, r3, #24
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	3308      	adds	r3, #8
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	041b      	lsls	r3, r3, #16
 8000a78:	431a      	orrs	r2, r3
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	3307      	adds	r3, #7
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	021b      	lsls	r3, r3, #8
 8000a82:	4313      	orrs	r3, r2
 8000a84:	687a      	ldr	r2, [r7, #4]
 8000a86:	3206      	adds	r2, #6
 8000a88:	7812      	ldrb	r2, [r2, #0]
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	60fb      	str	r3, [r7, #12]
	uint32_t end_id = (data[13] << 24 ) | (data[12] << 16 ) | (data[11] << 8 ) | data[10];
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	330d      	adds	r3, #13
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	061a      	lsls	r2, r3, #24
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	330c      	adds	r3, #12
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	041b      	lsls	r3, r3, #16
 8000a9e:	431a      	orrs	r2, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	330b      	adds	r3, #11
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	021b      	lsls	r3, r3, #8
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	687a      	ldr	r2, [r7, #4]
 8000aac:	320a      	adds	r2, #10
 8000aae:	7812      	ldrb	r2, [r2, #0]
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	60bb      	str	r3, [r7, #8]
	CanRx_FilterRange(start_id, end_id, data[5]);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	3305      	adds	r3, #5
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	461a      	mov	r2, r3
 8000abc:	68b9      	ldr	r1, [r7, #8]
 8000abe:	68f8      	ldr	r0, [r7, #12]
 8000ac0:	f000 f908 	bl	8000cd4 <CanRx_FilterRange>
	return 1;
 8000ac4:	2301      	movs	r3, #1
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3710      	adds	r7, #16
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
	...

08000ad0 <find_best_timing>:
 *                 - So sánh sai số với desired_sample_point_scaled
 *                 - Nếu sai số nhỏ hơn trước đó → lưu lại cấu hình tốt nhất
 *   [3] Trả về cấu hình có sai số nhỏ nhất với sample point mong muốn
 */
CAN_TimingConfig find_best_timing(uint32_t baudrate, uint16_t desired_sample_point_scaled)
{
 8000ad0:	b5b0      	push	{r4, r5, r7, lr}
 8000ad2:	b092      	sub	sp, #72	@ 0x48
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	4613      	mov	r3, r2
 8000adc:	80fb      	strh	r3, [r7, #6]
    CAN_TimingConfig best_config = {0};
 8000ade:	f107 0314 	add.w	r3, r7, #20
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
 8000ae8:	609a      	str	r2, [r3, #8]
 8000aea:	60da      	str	r2, [r3, #12]
 8000aec:	611a      	str	r2, [r3, #16]
 8000aee:	615a      	str	r2, [r3, #20]
    best_config.sample_point_error = FLT_MAX;
 8000af0:	4b47      	ldr	r3, [pc, #284]	@ (8000c10 <find_best_timing+0x140>)
 8000af2:	62bb      	str	r3, [r7, #40]	@ 0x28

    for (int tq_total = 8; tq_total <= 25; tq_total++) {
 8000af4:	2308      	movs	r3, #8
 8000af6:	647b      	str	r3, [r7, #68]	@ 0x44
 8000af8:	e078      	b.n	8000bec <find_best_timing+0x11c>
        if ((HAL_RCC_GetPCLK1Freq() / baudrate) % tq_total != 0)
 8000afa:	f004 fe5f 	bl	80057bc <HAL_RCC_GetPCLK1Freq>
 8000afe:	4602      	mov	r2, r0
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000b08:	fbb3 f1f2 	udiv	r1, r3, r2
 8000b0c:	fb01 f202 	mul.w	r2, r1, r2
 8000b10:	1a9b      	subs	r3, r3, r2
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d166      	bne.n	8000be4 <find_best_timing+0x114>
            continue;

        int prescaler = (HAL_RCC_GetPCLK1Freq() / baudrate) / tq_total;
 8000b16:	f004 fe51 	bl	80057bc <HAL_RCC_GetPCLK1Freq>
 8000b1a:	4602      	mov	r2, r0
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000b22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b28:	63bb      	str	r3, [r7, #56]	@ 0x38

        for (int tseg1 = 1; tseg1 <= 16; tseg1++) {
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8000b2e:	e055      	b.n	8000bdc <find_best_timing+0x10c>
            for (int tseg2 = 1; tseg2 <= 8; tseg2++) {
 8000b30:	2301      	movs	r3, #1
 8000b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000b34:	e04c      	b.n	8000bd0 <find_best_timing+0x100>
                if (1 + tseg1 + tseg2 != tq_total)
 8000b36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000b38:	1c5a      	adds	r2, r3, #1
 8000b3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000b3c:	4413      	add	r3, r2
 8000b3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d141      	bne.n	8000bc8 <find_best_timing+0xf8>
                    continue;

                float actual_sp = (1.0f + tseg1) / tq_total;
 8000b44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000b46:	ee07 3a90 	vmov	s15, r3
 8000b4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b4e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000b52:	ee77 6a87 	vadd.f32	s13, s15, s14
 8000b56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000b58:	ee07 3a90 	vmov	s15, r3
 8000b5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b64:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
                uint16_t actual_sp_scaled = (uint16_t)(actual_sp * SAMPLE_POINT_SCALE);
 8000b68:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000b6c:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8000c14 <find_best_timing+0x144>
 8000b70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b78:	ee17 3a90 	vmov	r3, s15
 8000b7c:	867b      	strh	r3, [r7, #50]	@ 0x32

                float error = fabsf((float)(actual_sp_scaled - desired_sample_point_scaled) / SAMPLE_POINT_SCALE);
 8000b7e:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8000b80:	88fb      	ldrh	r3, [r7, #6]
 8000b82:	1ad3      	subs	r3, r2, r3
 8000b84:	ee07 3a90 	vmov	s15, r3
 8000b88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b8c:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8000c14 <find_best_timing+0x144>
 8000b90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b94:	eef0 7ae7 	vabs.f32	s15, s15
 8000b98:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

                if (error < best_config.sample_point_error) {
 8000b9c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000ba0:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8000ba4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bac:	d50d      	bpl.n	8000bca <find_best_timing+0xfa>
                    best_config.tq_total = tq_total;
 8000bae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000bb0:	617b      	str	r3, [r7, #20]
                    best_config.prescaler = prescaler;
 8000bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000bb4:	61bb      	str	r3, [r7, #24]
                    best_config.tseg1 = tseg1;
 8000bb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000bb8:	61fb      	str	r3, [r7, #28]
                    best_config.tseg2 = tseg2;
 8000bba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000bbc:	623b      	str	r3, [r7, #32]
                    best_config.actual_sample_point = actual_sp;
 8000bbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bc0:	627b      	str	r3, [r7, #36]	@ 0x24
                    best_config.sample_point_error = error;
 8000bc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000bc6:	e000      	b.n	8000bca <find_best_timing+0xfa>
                    continue;
 8000bc8:	bf00      	nop
            for (int tseg2 = 1; tseg2 <= 8; tseg2++) {
 8000bca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000bcc:	3301      	adds	r3, #1
 8000bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000bd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000bd2:	2b08      	cmp	r3, #8
 8000bd4:	ddaf      	ble.n	8000b36 <find_best_timing+0x66>
        for (int tseg1 = 1; tseg1 <= 16; tseg1++) {
 8000bd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000bd8:	3301      	adds	r3, #1
 8000bda:	643b      	str	r3, [r7, #64]	@ 0x40
 8000bdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000bde:	2b10      	cmp	r3, #16
 8000be0:	dda6      	ble.n	8000b30 <find_best_timing+0x60>
 8000be2:	e000      	b.n	8000be6 <find_best_timing+0x116>
            continue;
 8000be4:	bf00      	nop
    for (int tq_total = 8; tq_total <= 25; tq_total++) {
 8000be6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000be8:	3301      	adds	r3, #1
 8000bea:	647b      	str	r3, [r7, #68]	@ 0x44
 8000bec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000bee:	2b19      	cmp	r3, #25
 8000bf0:	dd83      	ble.n	8000afa <find_best_timing+0x2a>
                }
            }
        }
    }

    return best_config;
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	461d      	mov	r5, r3
 8000bf6:	f107 0414 	add.w	r4, r7, #20
 8000bfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bfe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c02:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000c06:	68f8      	ldr	r0, [r7, #12]
 8000c08:	3748      	adds	r7, #72	@ 0x48
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bdb0      	pop	{r4, r5, r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	7f7fffff 	.word	0x7f7fffff
 8000c14:	447a0000 	.word	0x447a0000

08000c18 <SendCanMessage>:


uint8_t SendCanMessage(uint8_t *data){
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
	uint32_t id = (data[1]<< 24) |(data[2]<< 16) |(data[3]<< 8) | data[4];
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	3301      	adds	r3, #1
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	061a      	lsls	r2, r3, #24
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	3302      	adds	r3, #2
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	041b      	lsls	r3, r3, #16
 8000c30:	431a      	orrs	r2, r3
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	3303      	adds	r3, #3
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	021b      	lsls	r3, r3, #8
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	687a      	ldr	r2, [r7, #4]
 8000c3e:	3204      	adds	r2, #4
 8000c40:	7812      	ldrb	r2, [r2, #0]
 8000c42:	4313      	orrs	r3, r2
 8000c44:	60fb      	str	r3, [r7, #12]
	CanTx_init(id, data[5], &data[6]);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	3305      	adds	r3, #5
 8000c4a:	7819      	ldrb	r1, [r3, #0]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	3306      	adds	r3, #6
 8000c50:	461a      	mov	r2, r3
 8000c52:	68f8      	ldr	r0, [r7, #12]
 8000c54:	f000 f806 	bl	8000c64 <CanTx_init>
	return 1;
 8000c58:	2301      	movs	r3, #1
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <CanTx_init>:

void CanTx_init(uint32_t id, uint8_t DlcAndType, uint8_t *data){
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	60f8      	str	r0, [r7, #12]
 8000c6c:	460b      	mov	r3, r1
 8000c6e:	607a      	str	r2, [r7, #4]
 8000c70:	72fb      	strb	r3, [r7, #11]
	uint32_t txMailbox;
    switch(DlcAndType & 0x0F){
 8000c72:	7afb      	ldrb	r3, [r7, #11]
 8000c74:	f003 030f 	and.w	r3, r3, #15
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d008      	beq.n	8000c8e <CanTx_init+0x2a>
 8000c7c:	2b04      	cmp	r3, #4
 8000c7e:	d10d      	bne.n	8000c9c <CanTx_init+0x38>
    case CAN_ID_EXT:
    	TxHeader.IDE = CAN_ID_EXT;
 8000c80:	4b12      	ldr	r3, [pc, #72]	@ (8000ccc <CanTx_init+0x68>)
 8000c82:	2204      	movs	r2, #4
 8000c84:	609a      	str	r2, [r3, #8]
    	TxHeader.ExtId = id;
 8000c86:	4a11      	ldr	r2, [pc, #68]	@ (8000ccc <CanTx_init+0x68>)
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	6053      	str	r3, [r2, #4]
    	break;
 8000c8c:	e006      	b.n	8000c9c <CanTx_init+0x38>
    case CAN_ID_STD:
    	TxHeader.IDE = CAN_ID_STD;
 8000c8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000ccc <CanTx_init+0x68>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
    	TxHeader.StdId = id;
 8000c94:	4a0d      	ldr	r2, [pc, #52]	@ (8000ccc <CanTx_init+0x68>)
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	6013      	str	r3, [r2, #0]
    	break;
 8000c9a:	bf00      	nop
    }
	TxHeader.RTR = CAN_RTR_DATA;
 8000c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000ccc <CanTx_init+0x68>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = (DlcAndType >> 4);
 8000ca2:	7afb      	ldrb	r3, [r7, #11]
 8000ca4:	091b      	lsrs	r3, r3, #4
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	461a      	mov	r2, r3
 8000caa:	4b08      	ldr	r3, [pc, #32]	@ (8000ccc <CanTx_init+0x68>)
 8000cac:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 8000cae:	4b07      	ldr	r3, [pc, #28]	@ (8000ccc <CanTx_init+0x68>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	751a      	strb	r2, [r3, #20]
	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &txMailbox);
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	687a      	ldr	r2, [r7, #4]
 8000cba:	4904      	ldr	r1, [pc, #16]	@ (8000ccc <CanTx_init+0x68>)
 8000cbc:	4804      	ldr	r0, [pc, #16]	@ (8000cd0 <CanTx_init+0x6c>)
 8000cbe:	f001 f946 	bl	8001f4e <HAL_CAN_AddTxMessage>
}
 8000cc2:	bf00      	nop
 8000cc4:	3718      	adds	r7, #24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	2000039c 	.word	0x2000039c
 8000cd0:	20000320 	.word	0x20000320

08000cd4 <CanRx_FilterRange>:
		sFilterConfig.FilterActivation = ENABLE;
		HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
		HAL_CAN_ActivateNotification(&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING);
}
void CanRx_FilterRange(uint32_t start_id, uint32_t end_id, uint8_t is_extended)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b088      	sub	sp, #32
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	60f8      	str	r0, [r7, #12]
 8000cdc:	60b9      	str	r1, [r7, #8]
 8000cde:	4613      	mov	r3, r2
 8000ce0:	71fb      	strb	r3, [r7, #7]
    uint32_t range = end_id - start_id + 1;
 8000ce2:	68ba      	ldr	r2, [r7, #8]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	1ad3      	subs	r3, r2, r3
 8000ce8:	3301      	adds	r3, #1
 8000cea:	61fb      	str	r3, [r7, #28]

    // Kiểm tra range có phải là lũy thừa của 2
    if ((range & (range - 1)) != 0) {
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	1e5a      	subs	r2, r3, #1
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d177      	bne.n	8000de8 <CanRx_FilterRange+0x114>
        return; // Không phải lũy thừa của 2
    }

    uint32_t mask, id_filter;

    if (is_extended == 0) {
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d129      	bne.n	8000d52 <CanRx_FilterRange+0x7e>
        // Standard ID (11-bit)
        if (start_id > 0x7FF || end_id > 0x7FF) return;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000d04:	d272      	bcs.n	8000dec <CanRx_FilterRange+0x118>
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000d0c:	d26e      	bcs.n	8000dec <CanRx_FilterRange+0x118>

        mask = 0x7FF & ~(range - 1);
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	425b      	negs	r3, r3
 8000d12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000d16:	61bb      	str	r3, [r7, #24]

        if ((start_id & ~mask) != 0) return;
 8000d18:	69bb      	ldr	r3, [r7, #24]
 8000d1a:	43da      	mvns	r2, r3
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	4013      	ands	r3, r2
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d165      	bne.n	8000df0 <CanRx_FilterRange+0x11c>

        id_filter = start_id << 5;
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	015b      	lsls	r3, r3, #5
 8000d28:	617b      	str	r3, [r7, #20]
        mask <<= 5;
 8000d2a:	69bb      	ldr	r3, [r7, #24]
 8000d2c:	015b      	lsls	r3, r3, #5
 8000d2e:	61bb      	str	r3, [r7, #24]

        sFilterConfig.FilterIdHigh = (uint16_t)(id_filter);
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	461a      	mov	r2, r3
 8000d36:	4b32      	ldr	r3, [pc, #200]	@ (8000e00 <CanRx_FilterRange+0x12c>)
 8000d38:	601a      	str	r2, [r3, #0]
        sFilterConfig.FilterIdLow  = 0x0000;
 8000d3a:	4b31      	ldr	r3, [pc, #196]	@ (8000e00 <CanRx_FilterRange+0x12c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	605a      	str	r2, [r3, #4]
        sFilterConfig.FilterMaskIdHigh = (uint16_t)(mask);
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	461a      	mov	r2, r3
 8000d46:	4b2e      	ldr	r3, [pc, #184]	@ (8000e00 <CanRx_FilterRange+0x12c>)
 8000d48:	609a      	str	r2, [r3, #8]
        sFilterConfig.FilterMaskIdLow  = 0x0000;
 8000d4a:	4b2d      	ldr	r3, [pc, #180]	@ (8000e00 <CanRx_FilterRange+0x12c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	60da      	str	r2, [r3, #12]
 8000d50:	e032      	b.n	8000db8 <CanRx_FilterRange+0xe4>
    } else {
        // Extended ID (29-bit)
        if (start_id > 0x1FFFFFFF || end_id > 0x1FFFFFFF) return;
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000d58:	d24c      	bcs.n	8000df4 <CanRx_FilterRange+0x120>
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000d60:	d248      	bcs.n	8000df4 <CanRx_FilterRange+0x120>

        mask = 0x1FFFFFFF & ~(range - 1);
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	425b      	negs	r3, r3
 8000d66:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8000d6a:	61bb      	str	r3, [r7, #24]

        if ((start_id & ~mask) != 0) return;
 8000d6c:	69bb      	ldr	r3, [r7, #24]
 8000d6e:	43da      	mvns	r2, r3
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	4013      	ands	r3, r2
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d13f      	bne.n	8000df8 <CanRx_FilterRange+0x124>

        id_filter = (start_id << 3) | (1 << 2);  // IDE bit = 1 in ID field
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	00db      	lsls	r3, r3, #3
 8000d7c:	f043 0304 	orr.w	r3, r3, #4
 8000d80:	617b      	str	r3, [r7, #20]
        mask = (mask << 3) | (1 << 2);           // Mask includes IDE match
 8000d82:	69bb      	ldr	r3, [r7, #24]
 8000d84:	00db      	lsls	r3, r3, #3
 8000d86:	f043 0304 	orr.w	r3, r3, #4
 8000d8a:	61bb      	str	r3, [r7, #24]

        sFilterConfig.FilterIdHigh = (uint16_t)(id_filter >> 16);
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	0c1b      	lsrs	r3, r3, #16
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	461a      	mov	r2, r3
 8000d94:	4b1a      	ldr	r3, [pc, #104]	@ (8000e00 <CanRx_FilterRange+0x12c>)
 8000d96:	601a      	str	r2, [r3, #0]
        sFilterConfig.FilterIdLow  = (uint16_t)(id_filter & 0xFFFF);
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	b29b      	uxth	r3, r3
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	4b18      	ldr	r3, [pc, #96]	@ (8000e00 <CanRx_FilterRange+0x12c>)
 8000da0:	605a      	str	r2, [r3, #4]
        sFilterConfig.FilterMaskIdHigh = (uint16_t)(mask >> 16);
 8000da2:	69bb      	ldr	r3, [r7, #24]
 8000da4:	0c1b      	lsrs	r3, r3, #16
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	461a      	mov	r2, r3
 8000daa:	4b15      	ldr	r3, [pc, #84]	@ (8000e00 <CanRx_FilterRange+0x12c>)
 8000dac:	609a      	str	r2, [r3, #8]
        sFilterConfig.FilterMaskIdLow  = (uint16_t)(mask & 0xFFFF);
 8000dae:	69bb      	ldr	r3, [r7, #24]
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	461a      	mov	r2, r3
 8000db4:	4b12      	ldr	r3, [pc, #72]	@ (8000e00 <CanRx_FilterRange+0x12c>)
 8000db6:	60da      	str	r2, [r3, #12]
    }

    sFilterConfig.FilterBank = 0;
 8000db8:	4b11      	ldr	r3, [pc, #68]	@ (8000e00 <CanRx_FilterRange+0x12c>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	615a      	str	r2, [r3, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000dbe:	4b10      	ldr	r3, [pc, #64]	@ (8000e00 <CanRx_FilterRange+0x12c>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	619a      	str	r2, [r3, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000dc4:	4b0e      	ldr	r3, [pc, #56]	@ (8000e00 <CanRx_FilterRange+0x12c>)
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	61da      	str	r2, [r3, #28]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000dca:	4b0d      	ldr	r3, [pc, #52]	@ (8000e00 <CanRx_FilterRange+0x12c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	611a      	str	r2, [r3, #16]
    sFilterConfig.FilterActivation = ENABLE;
 8000dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8000e00 <CanRx_FilterRange+0x12c>)
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	621a      	str	r2, [r3, #32]

    HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8000dd6:	490a      	ldr	r1, [pc, #40]	@ (8000e00 <CanRx_FilterRange+0x12c>)
 8000dd8:	480a      	ldr	r0, [pc, #40]	@ (8000e04 <CanRx_FilterRange+0x130>)
 8000dda:	f000 ff4d 	bl	8001c78 <HAL_CAN_ConfigFilter>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000dde:	2102      	movs	r1, #2
 8000de0:	4808      	ldr	r0, [pc, #32]	@ (8000e04 <CanRx_FilterRange+0x130>)
 8000de2:	f001 faa6 	bl	8002332 <HAL_CAN_ActivateNotification>
 8000de6:	e008      	b.n	8000dfa <CanRx_FilterRange+0x126>
        return; // Không phải lũy thừa của 2
 8000de8:	bf00      	nop
 8000dea:	e006      	b.n	8000dfa <CanRx_FilterRange+0x126>
        if (start_id > 0x7FF || end_id > 0x7FF) return;
 8000dec:	bf00      	nop
 8000dee:	e004      	b.n	8000dfa <CanRx_FilterRange+0x126>
        if ((start_id & ~mask) != 0) return;
 8000df0:	bf00      	nop
 8000df2:	e002      	b.n	8000dfa <CanRx_FilterRange+0x126>
        if (start_id > 0x1FFFFFFF || end_id > 0x1FFFFFFF) return;
 8000df4:	bf00      	nop
 8000df6:	e000      	b.n	8000dfa <CanRx_FilterRange+0x126>
        if ((start_id & ~mask) != 0) return;
 8000df8:	bf00      	nop
}
 8000dfa:	3720      	adds	r7, #32
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	200003d0 	.word	0x200003d0
 8000e04:	20000320 	.word	0x20000320

08000e08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e0c:	f000 fd80 	bl	8001910 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e10:	f000 f818 	bl	8000e44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e14:	f7ff fc66 	bl	80006e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e18:	f7ff fc3c 	bl	8000694 <MX_DMA_Init>
  //MX_CAN1_Init();
  MX_USB_OTG_FS_PCD_Init();
 8000e1c:	f000 fccc 	bl	80017b8 <MX_USB_OTG_FS_PCD_Init>
  MX_UART5_Init();
 8000e20:	f000 fb96 	bl	8001550 <MX_UART5_Init>
  MX_I2C1_Init();
 8000e24:	f7ff fcca 	bl	80007bc <MX_I2C1_Init>
  MX_TIM1_Init();
 8000e28:	f000 f9e2 	bl	80011f0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000e2c:	f000 fa30 	bl	8001290 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000e30:	f000 fa7a 	bl	8001328 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000e34:	f000 fac6 	bl	80013c4 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 8000e38:	f007 fdf8 	bl	8008a2c <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Process_HID_Frames();
 8000e3c:	f7ff fd34 	bl	80008a8 <Process_HID_Frames>
 8000e40:	e7fc      	b.n	8000e3c <main+0x34>
	...

08000e44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b094      	sub	sp, #80	@ 0x50
 8000e48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e4a:	f107 0320 	add.w	r3, r7, #32
 8000e4e:	2230      	movs	r2, #48	@ 0x30
 8000e50:	2100      	movs	r1, #0
 8000e52:	4618      	mov	r0, r3
 8000e54:	f00b fb2c 	bl	800c4b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e58:	f107 030c 	add.w	r3, r7, #12
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	4b28      	ldr	r3, [pc, #160]	@ (8000f10 <SystemClock_Config+0xcc>)
 8000e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e70:	4a27      	ldr	r2, [pc, #156]	@ (8000f10 <SystemClock_Config+0xcc>)
 8000e72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e76:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e78:	4b25      	ldr	r3, [pc, #148]	@ (8000f10 <SystemClock_Config+0xcc>)
 8000e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e84:	2300      	movs	r3, #0
 8000e86:	607b      	str	r3, [r7, #4]
 8000e88:	4b22      	ldr	r3, [pc, #136]	@ (8000f14 <SystemClock_Config+0xd0>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a21      	ldr	r2, [pc, #132]	@ (8000f14 <SystemClock_Config+0xd0>)
 8000e8e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e92:	6013      	str	r3, [r2, #0]
 8000e94:	4b1f      	ldr	r3, [pc, #124]	@ (8000f14 <SystemClock_Config+0xd0>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e9c:	607b      	str	r3, [r7, #4]
 8000e9e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ea4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ea8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000eb4:	2304      	movs	r3, #4
 8000eb6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000eb8:	23a8      	movs	r3, #168	@ 0xa8
 8000eba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ec0:	2307      	movs	r3, #7
 8000ec2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ec4:	f107 0320 	add.w	r3, r7, #32
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f004 f807 	bl	8004edc <HAL_RCC_OscConfig>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ed4:	f000 f88c 	bl	8000ff0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ed8:	230f      	movs	r3, #15
 8000eda:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000edc:	2302      	movs	r3, #2
 8000ede:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ee4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ee8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000eea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ef0:	f107 030c 	add.w	r3, r7, #12
 8000ef4:	2105      	movs	r1, #5
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f004 fa68 	bl	80053cc <HAL_RCC_ClockConfig>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000f02:	f000 f875 	bl	8000ff0 <Error_Handler>
  }
}
 8000f06:	bf00      	nop
 8000f08:	3750      	adds	r7, #80	@ 0x50
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40023800 	.word	0x40023800
 8000f14:	40007000 	.word	0x40007000

08000f18 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
    //memset(usbFrame, 0, sizeof(usbFrame));
    if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, &usbFrame[6]) == HAL_OK)
 8000f20:	4b2d      	ldr	r3, [pc, #180]	@ (8000fd8 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8000f22:	4a2e      	ldr	r2, [pc, #184]	@ (8000fdc <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8000f24:	2100      	movs	r1, #0
 8000f26:	482e      	ldr	r0, [pc, #184]	@ (8000fe0 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 8000f28:	f001 f8e1 	bl	80020ee <HAL_CAN_GetRxMessage>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d14d      	bne.n	8000fce <HAL_CAN_RxFifo0MsgPendingCallback+0xb6>
    {
        uint32_t timestemp = __HAL_TIM_GET_COUNTER(&htim5);
 8000f32:	4b2c      	ldr	r3, [pc, #176]	@ (8000fe4 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f38:	617b      	str	r3, [r7, #20]
      // HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7); // báo nhận
        // Byte 0: CMD
        usbFrame[0] = 0x03;
 8000f3a:	4b2b      	ldr	r3, [pc, #172]	@ (8000fe8 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8000f3c:	2203      	movs	r2, #3
 8000f3e:	701a      	strb	r2, [r3, #0]
        // Byte 1: DLC (4-bit high), FrameType (4-bit low)
        uint8_t dlc = RxHeader.DLC & 0x0F;
 8000f40:	4b26      	ldr	r3, [pc, #152]	@ (8000fdc <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8000f42:	691b      	ldr	r3, [r3, #16]
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	f003 030f 	and.w	r3, r3, #15
 8000f4a:	74fb      	strb	r3, [r7, #19]
        usbFrame[1] = (dlc << 4) | (RxHeader.IDE & 0x0F);
 8000f4c:	7cfb      	ldrb	r3, [r7, #19]
 8000f4e:	011b      	lsls	r3, r3, #4
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	4b22      	ldr	r3, [pc, #136]	@ (8000fdc <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	f003 030f 	and.w	r3, r3, #15
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	b2da      	uxtb	r2, r3
 8000f62:	4b21      	ldr	r3, [pc, #132]	@ (8000fe8 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8000f64:	705a      	strb	r2, [r3, #1]

        // Byte 2~5: CAN ID (big-endian)
        uint32_t canId = (RxHeader.IDE == CAN_ID_EXT) ? RxHeader.ExtId : RxHeader.StdId;
 8000f66:	4b1d      	ldr	r3, [pc, #116]	@ (8000fdc <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	2b04      	cmp	r3, #4
 8000f6c:	d102      	bne.n	8000f74 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>
 8000f6e:	4b1b      	ldr	r3, [pc, #108]	@ (8000fdc <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	e001      	b.n	8000f78 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>
 8000f74:	4b19      	ldr	r3, [pc, #100]	@ (8000fdc <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	60fb      	str	r3, [r7, #12]
        usbFrame[2] = (canId >> 24) & 0xFF;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	0e1b      	lsrs	r3, r3, #24
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	4b19      	ldr	r3, [pc, #100]	@ (8000fe8 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8000f82:	709a      	strb	r2, [r3, #2]
        usbFrame[3] = (canId >> 16) & 0xFF;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	0c1b      	lsrs	r3, r3, #16
 8000f88:	b2da      	uxtb	r2, r3
 8000f8a:	4b17      	ldr	r3, [pc, #92]	@ (8000fe8 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8000f8c:	70da      	strb	r2, [r3, #3]
        usbFrame[4] = (canId >> 8) & 0xFF;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	0a1b      	lsrs	r3, r3, #8
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	4b14      	ldr	r3, [pc, #80]	@ (8000fe8 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8000f96:	711a      	strb	r2, [r3, #4]
        usbFrame[5] = canId & 0xFF;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	4b12      	ldr	r3, [pc, #72]	@ (8000fe8 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8000f9e:	715a      	strb	r2, [r3, #5]
        usbFrame[14] = (timestemp >> 24) & 0xFF;
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	0e1b      	lsrs	r3, r3, #24
 8000fa4:	b2da      	uxtb	r2, r3
 8000fa6:	4b10      	ldr	r3, [pc, #64]	@ (8000fe8 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8000fa8:	739a      	strb	r2, [r3, #14]
        usbFrame[15] = (timestemp >> 16) & 0xFF;
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	0c1b      	lsrs	r3, r3, #16
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	4b0d      	ldr	r3, [pc, #52]	@ (8000fe8 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8000fb2:	73da      	strb	r2, [r3, #15]
        usbFrame[16]= (timestemp >> 8) & 0xFF;
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	0a1b      	lsrs	r3, r3, #8
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe8 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8000fbc:	741a      	strb	r2, [r3, #16]
        usbFrame[17] = (timestemp ) & 0xFF;
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	4b09      	ldr	r3, [pc, #36]	@ (8000fe8 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8000fc4:	745a      	strb	r2, [r3, #17]
        HID_Frame_Write(&hid_frame_fifo_receive,usbFrame);
 8000fc6:	4908      	ldr	r1, [pc, #32]	@ (8000fe8 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8000fc8:	4808      	ldr	r0, [pc, #32]	@ (8000fec <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8000fca:	f008 fa95 	bl	80094f8 <HID_Frame_Write>
        //USBD_CUSTOM_HID_SendReport(&hUsbDevice,usbFrame, HID_FRAME_SIZE);
    }
}
 8000fce:	bf00      	nop
 8000fd0:	3718      	adds	r7, #24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	200003fe 	.word	0x200003fe
 8000fdc:	200003b4 	.word	0x200003b4
 8000fe0:	20000320 	.word	0x20000320
 8000fe4:	20000d18 	.word	0x20000d18
 8000fe8:	200003f8 	.word	0x200003f8
 8000fec:	20000438 	.word	0x20000438

08000ff0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ff4:	b672      	cpsid	i
}
 8000ff6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ff8:	bf00      	nop
 8000ffa:	e7fd      	b.n	8000ff8 <Error_Handler+0x8>

08000ffc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	607b      	str	r3, [r7, #4]
 8001006:	4b10      	ldr	r3, [pc, #64]	@ (8001048 <HAL_MspInit+0x4c>)
 8001008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800100a:	4a0f      	ldr	r2, [pc, #60]	@ (8001048 <HAL_MspInit+0x4c>)
 800100c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001010:	6453      	str	r3, [r2, #68]	@ 0x44
 8001012:	4b0d      	ldr	r3, [pc, #52]	@ (8001048 <HAL_MspInit+0x4c>)
 8001014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001016:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800101a:	607b      	str	r3, [r7, #4]
 800101c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	603b      	str	r3, [r7, #0]
 8001022:	4b09      	ldr	r3, [pc, #36]	@ (8001048 <HAL_MspInit+0x4c>)
 8001024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001026:	4a08      	ldr	r2, [pc, #32]	@ (8001048 <HAL_MspInit+0x4c>)
 8001028:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800102c:	6413      	str	r3, [r2, #64]	@ 0x40
 800102e:	4b06      	ldr	r3, [pc, #24]	@ (8001048 <HAL_MspInit+0x4c>)
 8001030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001032:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001036:	603b      	str	r3, [r7, #0]
 8001038:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	40023800 	.word	0x40023800

0800104c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001050:	bf00      	nop
 8001052:	e7fd      	b.n	8001050 <NMI_Handler+0x4>

08001054 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001058:	bf00      	nop
 800105a:	e7fd      	b.n	8001058 <HardFault_Handler+0x4>

0800105c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001060:	bf00      	nop
 8001062:	e7fd      	b.n	8001060 <MemManage_Handler+0x4>

08001064 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001068:	bf00      	nop
 800106a:	e7fd      	b.n	8001068 <BusFault_Handler+0x4>

0800106c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001070:	bf00      	nop
 8001072:	e7fd      	b.n	8001070 <UsageFault_Handler+0x4>

08001074 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010a2:	f000 fc87 	bl	80019b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
	...

080010ac <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80010b0:	4802      	ldr	r0, [pc, #8]	@ (80010bc <DMA1_Stream0_IRQHandler+0x10>)
 80010b2:	f001 fe75 	bl	8002da0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000e08 	.word	0x20000e08

080010c0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80010c4:	4802      	ldr	r0, [pc, #8]	@ (80010d0 <CAN1_RX0_IRQHandler+0x10>)
 80010c6:	f001 f95a 	bl	800237e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000320 	.word	0x20000320

080010d4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80010d8:	4802      	ldr	r0, [pc, #8]	@ (80010e4 <CAN1_RX1_IRQHandler+0x10>)
 80010da:	f001 f950 	bl	800237e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000320 	.word	0x20000320

080010e8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010ec:	4802      	ldr	r0, [pc, #8]	@ (80010f8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80010ee:	f004 fd0c 	bl	8005b0a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000c40 	.word	0x20000c40

080010fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001100:	4802      	ldr	r0, [pc, #8]	@ (800110c <TIM2_IRQHandler+0x10>)
 8001102:	f004 fd02 	bl	8005b0a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000c88 	.word	0x20000c88

08001110 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001114:	4802      	ldr	r0, [pc, #8]	@ (8001120 <TIM4_IRQHandler+0x10>)
 8001116:	f004 fcf8 	bl	8005b0a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000cd0 	.word	0x20000cd0

08001124 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8001128:	4802      	ldr	r0, [pc, #8]	@ (8001134 <DMA1_Stream7_IRQHandler+0x10>)
 800112a:	f001 fe39 	bl	8002da0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000da8 	.word	0x20000da8

08001138 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800113c:	4802      	ldr	r0, [pc, #8]	@ (8001148 <UART5_IRQHandler+0x10>)
 800113e:	f005 f9c5 	bl	80064cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000d60 	.word	0x20000d60

0800114c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001150:	4802      	ldr	r0, [pc, #8]	@ (800115c <OTG_FS_IRQHandler+0x10>)
 8001152:	f002 fdb5 	bl	8003cc0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000e68 	.word	0x20000e68

08001160 <_sbrk>:
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	4a14      	ldr	r2, [pc, #80]	@ (80011bc <_sbrk+0x5c>)
 800116a:	4b15      	ldr	r3, [pc, #84]	@ (80011c0 <_sbrk+0x60>)
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	617b      	str	r3, [r7, #20]
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	613b      	str	r3, [r7, #16]
 8001174:	4b13      	ldr	r3, [pc, #76]	@ (80011c4 <_sbrk+0x64>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d102      	bne.n	8001182 <_sbrk+0x22>
 800117c:	4b11      	ldr	r3, [pc, #68]	@ (80011c4 <_sbrk+0x64>)
 800117e:	4a12      	ldr	r2, [pc, #72]	@ (80011c8 <_sbrk+0x68>)
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	4b10      	ldr	r3, [pc, #64]	@ (80011c4 <_sbrk+0x64>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4413      	add	r3, r2
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	429a      	cmp	r2, r3
 800118e:	d207      	bcs.n	80011a0 <_sbrk+0x40>
 8001190:	f00b f996 	bl	800c4c0 <__errno>
 8001194:	4603      	mov	r3, r0
 8001196:	220c      	movs	r2, #12
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	f04f 33ff 	mov.w	r3, #4294967295
 800119e:	e009      	b.n	80011b4 <_sbrk+0x54>
 80011a0:	4b08      	ldr	r3, [pc, #32]	@ (80011c4 <_sbrk+0x64>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	4b07      	ldr	r3, [pc, #28]	@ (80011c4 <_sbrk+0x64>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4413      	add	r3, r2
 80011ae:	4a05      	ldr	r2, [pc, #20]	@ (80011c4 <_sbrk+0x64>)
 80011b0:	6013      	str	r3, [r2, #0]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	4618      	mov	r0, r3
 80011b6:	3718      	adds	r7, #24
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20020000 	.word	0x20020000
 80011c0:	00000400 	.word	0x00000400
 80011c4:	20000c3c 	.word	0x20000c3c
 80011c8:	20003620 	.word	0x20003620

080011cc <SystemInit>:
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	4b06      	ldr	r3, [pc, #24]	@ (80011ec <SystemInit+0x20>)
 80011d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011d6:	4a05      	ldr	r2, [pc, #20]	@ (80011ec <SystemInit+0x20>)
 80011d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011f6:	f107 0308 	add.w	r3, r7, #8
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001204:	463b      	mov	r3, r7
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800120c:	4b1e      	ldr	r3, [pc, #120]	@ (8001288 <MX_TIM1_Init+0x98>)
 800120e:	4a1f      	ldr	r2, [pc, #124]	@ (800128c <MX_TIM1_Init+0x9c>)
 8001210:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 8001212:	4b1d      	ldr	r3, [pc, #116]	@ (8001288 <MX_TIM1_Init+0x98>)
 8001214:	22a7      	movs	r2, #167	@ 0xa7
 8001216:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001218:	4b1b      	ldr	r3, [pc, #108]	@ (8001288 <MX_TIM1_Init+0x98>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800121e:	4b1a      	ldr	r3, [pc, #104]	@ (8001288 <MX_TIM1_Init+0x98>)
 8001220:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001224:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001226:	4b18      	ldr	r3, [pc, #96]	@ (8001288 <MX_TIM1_Init+0x98>)
 8001228:	2200      	movs	r2, #0
 800122a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800122c:	4b16      	ldr	r3, [pc, #88]	@ (8001288 <MX_TIM1_Init+0x98>)
 800122e:	2200      	movs	r2, #0
 8001230:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001232:	4b15      	ldr	r3, [pc, #84]	@ (8001288 <MX_TIM1_Init+0x98>)
 8001234:	2200      	movs	r2, #0
 8001236:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001238:	4813      	ldr	r0, [pc, #76]	@ (8001288 <MX_TIM1_Init+0x98>)
 800123a:	f004 fae7 	bl	800580c <HAL_TIM_Base_Init>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001244:	f7ff fed4 	bl	8000ff0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001248:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800124c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800124e:	f107 0308 	add.w	r3, r7, #8
 8001252:	4619      	mov	r1, r3
 8001254:	480c      	ldr	r0, [pc, #48]	@ (8001288 <MX_TIM1_Init+0x98>)
 8001256:	f004 fd48 	bl	8005cea <HAL_TIM_ConfigClockSource>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001260:	f7ff fec6 	bl	8000ff0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001264:	2300      	movs	r3, #0
 8001266:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001268:	2300      	movs	r3, #0
 800126a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800126c:	463b      	mov	r3, r7
 800126e:	4619      	mov	r1, r3
 8001270:	4805      	ldr	r0, [pc, #20]	@ (8001288 <MX_TIM1_Init+0x98>)
 8001272:	f004 ff69 	bl	8006148 <HAL_TIMEx_MasterConfigSynchronization>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800127c:	f7ff feb8 	bl	8000ff0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001280:	bf00      	nop
 8001282:	3718      	adds	r7, #24
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20000c40 	.word	0x20000c40
 800128c:	40010000 	.word	0x40010000

08001290 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001296:	f107 0308 	add.w	r3, r7, #8
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a4:	463b      	mov	r3, r7
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001324 <MX_TIM2_Init+0x94>)
 80012ae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 80012b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001324 <MX_TIM2_Init+0x94>)
 80012b6:	2253      	movs	r2, #83	@ 0x53
 80012b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001324 <MX_TIM2_Init+0x94>)
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3000;
 80012c0:	4b18      	ldr	r3, [pc, #96]	@ (8001324 <MX_TIM2_Init+0x94>)
 80012c2:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80012c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c8:	4b16      	ldr	r3, [pc, #88]	@ (8001324 <MX_TIM2_Init+0x94>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ce:	4b15      	ldr	r3, [pc, #84]	@ (8001324 <MX_TIM2_Init+0x94>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012d4:	4813      	ldr	r0, [pc, #76]	@ (8001324 <MX_TIM2_Init+0x94>)
 80012d6:	f004 fa99 	bl	800580c <HAL_TIM_Base_Init>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80012e0:	f7ff fe86 	bl	8000ff0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012ea:	f107 0308 	add.w	r3, r7, #8
 80012ee:	4619      	mov	r1, r3
 80012f0:	480c      	ldr	r0, [pc, #48]	@ (8001324 <MX_TIM2_Init+0x94>)
 80012f2:	f004 fcfa 	bl	8005cea <HAL_TIM_ConfigClockSource>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80012fc:	f7ff fe78 	bl	8000ff0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001300:	2300      	movs	r3, #0
 8001302:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001304:	2300      	movs	r3, #0
 8001306:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001308:	463b      	mov	r3, r7
 800130a:	4619      	mov	r1, r3
 800130c:	4805      	ldr	r0, [pc, #20]	@ (8001324 <MX_TIM2_Init+0x94>)
 800130e:	f004 ff1b 	bl	8006148 <HAL_TIMEx_MasterConfigSynchronization>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001318:	f7ff fe6a 	bl	8000ff0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800131c:	bf00      	nop
 800131e:	3718      	adds	r7, #24
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20000c88 	.word	0x20000c88

08001328 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800132e:	f107 0308 	add.w	r3, r7, #8
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]
 8001338:	609a      	str	r2, [r3, #8]
 800133a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800133c:	463b      	mov	r3, r7
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001344:	4b1d      	ldr	r3, [pc, #116]	@ (80013bc <MX_TIM4_Init+0x94>)
 8001346:	4a1e      	ldr	r2, [pc, #120]	@ (80013c0 <MX_TIM4_Init+0x98>)
 8001348:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 800134a:	4b1c      	ldr	r3, [pc, #112]	@ (80013bc <MX_TIM4_Init+0x94>)
 800134c:	2253      	movs	r2, #83	@ 0x53
 800134e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001350:	4b1a      	ldr	r3, [pc, #104]	@ (80013bc <MX_TIM4_Init+0x94>)
 8001352:	2200      	movs	r2, #0
 8001354:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 450;
 8001356:	4b19      	ldr	r3, [pc, #100]	@ (80013bc <MX_TIM4_Init+0x94>)
 8001358:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 800135c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800135e:	4b17      	ldr	r3, [pc, #92]	@ (80013bc <MX_TIM4_Init+0x94>)
 8001360:	2200      	movs	r2, #0
 8001362:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001364:	4b15      	ldr	r3, [pc, #84]	@ (80013bc <MX_TIM4_Init+0x94>)
 8001366:	2200      	movs	r2, #0
 8001368:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800136a:	4814      	ldr	r0, [pc, #80]	@ (80013bc <MX_TIM4_Init+0x94>)
 800136c:	f004 fa4e 	bl	800580c <HAL_TIM_Base_Init>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001376:	f7ff fe3b 	bl	8000ff0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800137a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800137e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001380:	f107 0308 	add.w	r3, r7, #8
 8001384:	4619      	mov	r1, r3
 8001386:	480d      	ldr	r0, [pc, #52]	@ (80013bc <MX_TIM4_Init+0x94>)
 8001388:	f004 fcaf 	bl	8005cea <HAL_TIM_ConfigClockSource>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001392:	f7ff fe2d 	bl	8000ff0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001396:	2300      	movs	r3, #0
 8001398:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800139a:	2300      	movs	r3, #0
 800139c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800139e:	463b      	mov	r3, r7
 80013a0:	4619      	mov	r1, r3
 80013a2:	4806      	ldr	r0, [pc, #24]	@ (80013bc <MX_TIM4_Init+0x94>)
 80013a4:	f004 fed0 	bl	8006148 <HAL_TIMEx_MasterConfigSynchronization>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80013ae:	f7ff fe1f 	bl	8000ff0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80013b2:	bf00      	nop
 80013b4:	3718      	adds	r7, #24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000cd0 	.word	0x20000cd0
 80013c0:	40000800 	.word	0x40000800

080013c4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ca:	f107 0308 	add.w	r3, r7, #8
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	609a      	str	r2, [r3, #8]
 80013d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d8:	463b      	mov	r3, r7
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80013e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001458 <MX_TIM5_Init+0x94>)
 80013e2:	4a1e      	ldr	r2, [pc, #120]	@ (800145c <MX_TIM5_Init+0x98>)
 80013e4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 8399;
 80013e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001458 <MX_TIM5_Init+0x94>)
 80013e8:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80013ec:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001458 <MX_TIM5_Init+0x94>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xffffffff;
 80013f4:	4b18      	ldr	r3, [pc, #96]	@ (8001458 <MX_TIM5_Init+0x94>)
 80013f6:	f04f 32ff 	mov.w	r2, #4294967295
 80013fa:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013fc:	4b16      	ldr	r3, [pc, #88]	@ (8001458 <MX_TIM5_Init+0x94>)
 80013fe:	2200      	movs	r2, #0
 8001400:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001402:	4b15      	ldr	r3, [pc, #84]	@ (8001458 <MX_TIM5_Init+0x94>)
 8001404:	2200      	movs	r2, #0
 8001406:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001408:	4813      	ldr	r0, [pc, #76]	@ (8001458 <MX_TIM5_Init+0x94>)
 800140a:	f004 f9ff 	bl	800580c <HAL_TIM_Base_Init>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001414:	f7ff fdec 	bl	8000ff0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001418:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800141c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800141e:	f107 0308 	add.w	r3, r7, #8
 8001422:	4619      	mov	r1, r3
 8001424:	480c      	ldr	r0, [pc, #48]	@ (8001458 <MX_TIM5_Init+0x94>)
 8001426:	f004 fc60 	bl	8005cea <HAL_TIM_ConfigClockSource>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001430:	f7ff fdde 	bl	8000ff0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001434:	2300      	movs	r3, #0
 8001436:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001438:	2300      	movs	r3, #0
 800143a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800143c:	463b      	mov	r3, r7
 800143e:	4619      	mov	r1, r3
 8001440:	4805      	ldr	r0, [pc, #20]	@ (8001458 <MX_TIM5_Init+0x94>)
 8001442:	f004 fe81 	bl	8006148 <HAL_TIMEx_MasterConfigSynchronization>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800144c:	f7ff fdd0 	bl	8000ff0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001450:	bf00      	nop
 8001452:	3718      	adds	r7, #24
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20000d18 	.word	0x20000d18
 800145c:	40000c00 	.word	0x40000c00

08001460 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a34      	ldr	r2, [pc, #208]	@ (8001540 <HAL_TIM_Base_MspInit+0xe0>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d116      	bne.n	80014a0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	617b      	str	r3, [r7, #20]
 8001476:	4b33      	ldr	r3, [pc, #204]	@ (8001544 <HAL_TIM_Base_MspInit+0xe4>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800147a:	4a32      	ldr	r2, [pc, #200]	@ (8001544 <HAL_TIM_Base_MspInit+0xe4>)
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	6453      	str	r3, [r2, #68]	@ 0x44
 8001482:	4b30      	ldr	r3, [pc, #192]	@ (8001544 <HAL_TIM_Base_MspInit+0xe4>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	617b      	str	r3, [r7, #20]
 800148c:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800148e:	2200      	movs	r2, #0
 8001490:	2100      	movs	r1, #0
 8001492:	2019      	movs	r0, #25
 8001494:	f001 faa1 	bl	80029da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001498:	2019      	movs	r0, #25
 800149a:	f001 faba 	bl	8002a12 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800149e:	e04a      	b.n	8001536 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM2)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014a8:	d116      	bne.n	80014d8 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	613b      	str	r3, [r7, #16]
 80014ae:	4b25      	ldr	r3, [pc, #148]	@ (8001544 <HAL_TIM_Base_MspInit+0xe4>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b2:	4a24      	ldr	r2, [pc, #144]	@ (8001544 <HAL_TIM_Base_MspInit+0xe4>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ba:	4b22      	ldr	r3, [pc, #136]	@ (8001544 <HAL_TIM_Base_MspInit+0xe4>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	613b      	str	r3, [r7, #16]
 80014c4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014c6:	2200      	movs	r2, #0
 80014c8:	2100      	movs	r1, #0
 80014ca:	201c      	movs	r0, #28
 80014cc:	f001 fa85 	bl	80029da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014d0:	201c      	movs	r0, #28
 80014d2:	f001 fa9e 	bl	8002a12 <HAL_NVIC_EnableIRQ>
}
 80014d6:	e02e      	b.n	8001536 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM4)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a1a      	ldr	r2, [pc, #104]	@ (8001548 <HAL_TIM_Base_MspInit+0xe8>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d116      	bne.n	8001510 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	4b17      	ldr	r3, [pc, #92]	@ (8001544 <HAL_TIM_Base_MspInit+0xe4>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ea:	4a16      	ldr	r2, [pc, #88]	@ (8001544 <HAL_TIM_Base_MspInit+0xe4>)
 80014ec:	f043 0304 	orr.w	r3, r3, #4
 80014f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80014f2:	4b14      	ldr	r3, [pc, #80]	@ (8001544 <HAL_TIM_Base_MspInit+0xe4>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f6:	f003 0304 	and.w	r3, r3, #4
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80014fe:	2200      	movs	r2, #0
 8001500:	2100      	movs	r1, #0
 8001502:	201e      	movs	r0, #30
 8001504:	f001 fa69 	bl	80029da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001508:	201e      	movs	r0, #30
 800150a:	f001 fa82 	bl	8002a12 <HAL_NVIC_EnableIRQ>
}
 800150e:	e012      	b.n	8001536 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM5)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a0d      	ldr	r2, [pc, #52]	@ (800154c <HAL_TIM_Base_MspInit+0xec>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d10d      	bne.n	8001536 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	60bb      	str	r3, [r7, #8]
 800151e:	4b09      	ldr	r3, [pc, #36]	@ (8001544 <HAL_TIM_Base_MspInit+0xe4>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001522:	4a08      	ldr	r2, [pc, #32]	@ (8001544 <HAL_TIM_Base_MspInit+0xe4>)
 8001524:	f043 0308 	orr.w	r3, r3, #8
 8001528:	6413      	str	r3, [r2, #64]	@ 0x40
 800152a:	4b06      	ldr	r3, [pc, #24]	@ (8001544 <HAL_TIM_Base_MspInit+0xe4>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152e:	f003 0308 	and.w	r3, r3, #8
 8001532:	60bb      	str	r3, [r7, #8]
 8001534:	68bb      	ldr	r3, [r7, #8]
}
 8001536:	bf00      	nop
 8001538:	3718      	adds	r7, #24
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40010000 	.word	0x40010000
 8001544:	40023800 	.word	0x40023800
 8001548:	40000800 	.word	0x40000800
 800154c:	40000c00 	.word	0x40000c00

08001550 <MX_UART5_Init>:
DMA_HandleTypeDef hdma_uart5_tx;
DMA_HandleTypeDef hdma_uart5_rx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001554:	4b11      	ldr	r3, [pc, #68]	@ (800159c <MX_UART5_Init+0x4c>)
 8001556:	4a12      	ldr	r2, [pc, #72]	@ (80015a0 <MX_UART5_Init+0x50>)
 8001558:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800155a:	4b10      	ldr	r3, [pc, #64]	@ (800159c <MX_UART5_Init+0x4c>)
 800155c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001560:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001562:	4b0e      	ldr	r3, [pc, #56]	@ (800159c <MX_UART5_Init+0x4c>)
 8001564:	2200      	movs	r2, #0
 8001566:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001568:	4b0c      	ldr	r3, [pc, #48]	@ (800159c <MX_UART5_Init+0x4c>)
 800156a:	2200      	movs	r2, #0
 800156c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800156e:	4b0b      	ldr	r3, [pc, #44]	@ (800159c <MX_UART5_Init+0x4c>)
 8001570:	2200      	movs	r2, #0
 8001572:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001574:	4b09      	ldr	r3, [pc, #36]	@ (800159c <MX_UART5_Init+0x4c>)
 8001576:	220c      	movs	r2, #12
 8001578:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800157a:	4b08      	ldr	r3, [pc, #32]	@ (800159c <MX_UART5_Init+0x4c>)
 800157c:	2200      	movs	r2, #0
 800157e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001580:	4b06      	ldr	r3, [pc, #24]	@ (800159c <MX_UART5_Init+0x4c>)
 8001582:	2200      	movs	r2, #0
 8001584:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001586:	4805      	ldr	r0, [pc, #20]	@ (800159c <MX_UART5_Init+0x4c>)
 8001588:	f004 fe6e 	bl	8006268 <HAL_UART_Init>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001592:	f7ff fd2d 	bl	8000ff0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */
 // HAL_UART_Receive_IT(&huart5, &uart5_rx_byte, UART5_RX_BUF_LEN);
  /* USER CODE END UART5_Init 2 */

}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000d60 	.word	0x20000d60
 80015a0:	40005000 	.word	0x40005000

080015a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b08a      	sub	sp, #40	@ 0x28
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a5c      	ldr	r2, [pc, #368]	@ (8001734 <HAL_UART_MspInit+0x190>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	f040 80b1 	bne.w	800172a <HAL_UART_MspInit+0x186>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80015c8:	2300      	movs	r3, #0
 80015ca:	613b      	str	r3, [r7, #16]
 80015cc:	4b5a      	ldr	r3, [pc, #360]	@ (8001738 <HAL_UART_MspInit+0x194>)
 80015ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d0:	4a59      	ldr	r2, [pc, #356]	@ (8001738 <HAL_UART_MspInit+0x194>)
 80015d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80015d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80015d8:	4b57      	ldr	r3, [pc, #348]	@ (8001738 <HAL_UART_MspInit+0x194>)
 80015da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015e0:	613b      	str	r3, [r7, #16]
 80015e2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015e4:	2300      	movs	r3, #0
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	4b53      	ldr	r3, [pc, #332]	@ (8001738 <HAL_UART_MspInit+0x194>)
 80015ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ec:	4a52      	ldr	r2, [pc, #328]	@ (8001738 <HAL_UART_MspInit+0x194>)
 80015ee:	f043 0304 	orr.w	r3, r3, #4
 80015f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80015f4:	4b50      	ldr	r3, [pc, #320]	@ (8001738 <HAL_UART_MspInit+0x194>)
 80015f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f8:	f003 0304 	and.w	r3, r3, #4
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001600:	2300      	movs	r3, #0
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	4b4c      	ldr	r3, [pc, #304]	@ (8001738 <HAL_UART_MspInit+0x194>)
 8001606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001608:	4a4b      	ldr	r2, [pc, #300]	@ (8001738 <HAL_UART_MspInit+0x194>)
 800160a:	f043 0308 	orr.w	r3, r3, #8
 800160e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001610:	4b49      	ldr	r3, [pc, #292]	@ (8001738 <HAL_UART_MspInit+0x194>)
 8001612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001614:	f003 0308 	and.w	r3, r3, #8
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800161c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001620:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001622:	2302      	movs	r3, #2
 8001624:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162a:	2303      	movs	r3, #3
 800162c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800162e:	2308      	movs	r3, #8
 8001630:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001632:	f107 0314 	add.w	r3, r7, #20
 8001636:	4619      	mov	r1, r3
 8001638:	4840      	ldr	r0, [pc, #256]	@ (800173c <HAL_UART_MspInit+0x198>)
 800163a:	f001 fded 	bl	8003218 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800163e:	2304      	movs	r3, #4
 8001640:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001642:	2302      	movs	r3, #2
 8001644:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164a:	2303      	movs	r3, #3
 800164c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800164e:	2308      	movs	r3, #8
 8001650:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001652:	f107 0314 	add.w	r3, r7, #20
 8001656:	4619      	mov	r1, r3
 8001658:	4839      	ldr	r0, [pc, #228]	@ (8001740 <HAL_UART_MspInit+0x19c>)
 800165a:	f001 fddd 	bl	8003218 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream7;
 800165e:	4b39      	ldr	r3, [pc, #228]	@ (8001744 <HAL_UART_MspInit+0x1a0>)
 8001660:	4a39      	ldr	r2, [pc, #228]	@ (8001748 <HAL_UART_MspInit+0x1a4>)
 8001662:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8001664:	4b37      	ldr	r3, [pc, #220]	@ (8001744 <HAL_UART_MspInit+0x1a0>)
 8001666:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800166a:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800166c:	4b35      	ldr	r3, [pc, #212]	@ (8001744 <HAL_UART_MspInit+0x1a0>)
 800166e:	2240      	movs	r2, #64	@ 0x40
 8001670:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001672:	4b34      	ldr	r3, [pc, #208]	@ (8001744 <HAL_UART_MspInit+0x1a0>)
 8001674:	2200      	movs	r2, #0
 8001676:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001678:	4b32      	ldr	r3, [pc, #200]	@ (8001744 <HAL_UART_MspInit+0x1a0>)
 800167a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800167e:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001680:	4b30      	ldr	r3, [pc, #192]	@ (8001744 <HAL_UART_MspInit+0x1a0>)
 8001682:	2200      	movs	r2, #0
 8001684:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001686:	4b2f      	ldr	r3, [pc, #188]	@ (8001744 <HAL_UART_MspInit+0x1a0>)
 8001688:	2200      	movs	r2, #0
 800168a:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 800168c:	4b2d      	ldr	r3, [pc, #180]	@ (8001744 <HAL_UART_MspInit+0x1a0>)
 800168e:	2200      	movs	r2, #0
 8001690:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001692:	4b2c      	ldr	r3, [pc, #176]	@ (8001744 <HAL_UART_MspInit+0x1a0>)
 8001694:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001698:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800169a:	4b2a      	ldr	r3, [pc, #168]	@ (8001744 <HAL_UART_MspInit+0x1a0>)
 800169c:	2200      	movs	r2, #0
 800169e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 80016a0:	4828      	ldr	r0, [pc, #160]	@ (8001744 <HAL_UART_MspInit+0x1a0>)
 80016a2:	f001 f9df 	bl	8002a64 <HAL_DMA_Init>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 80016ac:	f7ff fca0 	bl	8000ff0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4a24      	ldr	r2, [pc, #144]	@ (8001744 <HAL_UART_MspInit+0x1a0>)
 80016b4:	639a      	str	r2, [r3, #56]	@ 0x38
 80016b6:	4a23      	ldr	r2, [pc, #140]	@ (8001744 <HAL_UART_MspInit+0x1a0>)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 80016bc:	4b23      	ldr	r3, [pc, #140]	@ (800174c <HAL_UART_MspInit+0x1a8>)
 80016be:	4a24      	ldr	r2, [pc, #144]	@ (8001750 <HAL_UART_MspInit+0x1ac>)
 80016c0:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 80016c2:	4b22      	ldr	r3, [pc, #136]	@ (800174c <HAL_UART_MspInit+0x1a8>)
 80016c4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80016c8:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016ca:	4b20      	ldr	r3, [pc, #128]	@ (800174c <HAL_UART_MspInit+0x1a8>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016d0:	4b1e      	ldr	r3, [pc, #120]	@ (800174c <HAL_UART_MspInit+0x1a8>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016d6:	4b1d      	ldr	r3, [pc, #116]	@ (800174c <HAL_UART_MspInit+0x1a8>)
 80016d8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016dc:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016de:	4b1b      	ldr	r3, [pc, #108]	@ (800174c <HAL_UART_MspInit+0x1a8>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016e4:	4b19      	ldr	r3, [pc, #100]	@ (800174c <HAL_UART_MspInit+0x1a8>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 80016ea:	4b18      	ldr	r3, [pc, #96]	@ (800174c <HAL_UART_MspInit+0x1a8>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80016f0:	4b16      	ldr	r3, [pc, #88]	@ (800174c <HAL_UART_MspInit+0x1a8>)
 80016f2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80016f6:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016f8:	4b14      	ldr	r3, [pc, #80]	@ (800174c <HAL_UART_MspInit+0x1a8>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80016fe:	4813      	ldr	r0, [pc, #76]	@ (800174c <HAL_UART_MspInit+0x1a8>)
 8001700:	f001 f9b0 	bl	8002a64 <HAL_DMA_Init>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 800170a:	f7ff fc71 	bl	8000ff0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a0e      	ldr	r2, [pc, #56]	@ (800174c <HAL_UART_MspInit+0x1a8>)
 8001712:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001714:	4a0d      	ldr	r2, [pc, #52]	@ (800174c <HAL_UART_MspInit+0x1a8>)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800171a:	2200      	movs	r2, #0
 800171c:	2100      	movs	r1, #0
 800171e:	2035      	movs	r0, #53	@ 0x35
 8001720:	f001 f95b 	bl	80029da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001724:	2035      	movs	r0, #53	@ 0x35
 8001726:	f001 f974 	bl	8002a12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 800172a:	bf00      	nop
 800172c:	3728      	adds	r7, #40	@ 0x28
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40005000 	.word	0x40005000
 8001738:	40023800 	.word	0x40023800
 800173c:	40020800 	.word	0x40020800
 8001740:	40020c00 	.word	0x40020c00
 8001744:	20000da8 	.word	0x20000da8
 8001748:	400260b8 	.word	0x400260b8
 800174c:	20000e08 	.word	0x20000e08
 8001750:	40026010 	.word	0x40026010

08001754 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==UART5)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a11      	ldr	r2, [pc, #68]	@ (80017a8 <HAL_UART_MspDeInit+0x54>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d11b      	bne.n	800179e <HAL_UART_MspDeInit+0x4a>
  {
  /* USER CODE BEGIN UART5_MspDeInit 0 */

  /* USER CODE END UART5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART5_CLK_DISABLE();
 8001766:	4b11      	ldr	r3, [pc, #68]	@ (80017ac <HAL_UART_MspDeInit+0x58>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176a:	4a10      	ldr	r2, [pc, #64]	@ (80017ac <HAL_UART_MspDeInit+0x58>)
 800176c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001770:	6413      	str	r3, [r2, #64]	@ 0x40

    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12);
 8001772:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001776:	480e      	ldr	r0, [pc, #56]	@ (80017b0 <HAL_UART_MspDeInit+0x5c>)
 8001778:	f001 feea 	bl	8003550 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_2);
 800177c:	2104      	movs	r1, #4
 800177e:	480d      	ldr	r0, [pc, #52]	@ (80017b4 <HAL_UART_MspDeInit+0x60>)
 8001780:	f001 fee6 	bl	8003550 <HAL_GPIO_DeInit>

    /* UART5 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001788:	4618      	mov	r0, r3
 800178a:	f001 fa19 	bl	8002bc0 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001792:	4618      	mov	r0, r3
 8001794:	f001 fa14 	bl	8002bc0 <HAL_DMA_DeInit>

    /* UART5 interrupt Deinit */
    HAL_NVIC_DisableIRQ(UART5_IRQn);
 8001798:	2035      	movs	r0, #53	@ 0x35
 800179a:	f001 f948 	bl	8002a2e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN UART5_MspDeInit 1 */

  /* USER CODE END UART5_MspDeInit 1 */
  }
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40005000 	.word	0x40005000
 80017ac:	40023800 	.word	0x40023800
 80017b0:	40020800 	.word	0x40020800
 80017b4:	40020c00 	.word	0x40020c00

080017b8 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80017bc:	4b14      	ldr	r3, [pc, #80]	@ (8001810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017be:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80017c2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80017c4:	4b12      	ldr	r3, [pc, #72]	@ (8001810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017c6:	2204      	movs	r2, #4
 80017c8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80017ca:	4b11      	ldr	r3, [pc, #68]	@ (8001810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017cc:	2202      	movs	r2, #2
 80017ce:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80017d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80017d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017d8:	2202      	movs	r2, #2
 80017da:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80017dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017de:	2200      	movs	r2, #0
 80017e0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80017e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80017e8:	4b09      	ldr	r3, [pc, #36]	@ (8001810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80017ee:	4b08      	ldr	r3, [pc, #32]	@ (8001810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80017f4:	4b06      	ldr	r3, [pc, #24]	@ (8001810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80017fa:	4805      	ldr	r0, [pc, #20]	@ (8001810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017fc:	f002 f91c 	bl	8003a38 <HAL_PCD_Init>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001806:	f7ff fbf3 	bl	8000ff0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	20000e68 	.word	0x20000e68

08001814 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b08a      	sub	sp, #40	@ 0x28
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181c:	f107 0314 	add.w	r3, r7, #20
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001834:	d13a      	bne.n	80018ac <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	613b      	str	r3, [r7, #16]
 800183a:	4b1e      	ldr	r3, [pc, #120]	@ (80018b4 <HAL_PCD_MspInit+0xa0>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183e:	4a1d      	ldr	r2, [pc, #116]	@ (80018b4 <HAL_PCD_MspInit+0xa0>)
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	6313      	str	r3, [r2, #48]	@ 0x30
 8001846:	4b1b      	ldr	r3, [pc, #108]	@ (80018b4 <HAL_PCD_MspInit+0xa0>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	613b      	str	r3, [r7, #16]
 8001850:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001852:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001856:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001858:	2302      	movs	r3, #2
 800185a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001860:	2303      	movs	r3, #3
 8001862:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001864:	230a      	movs	r3, #10
 8001866:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001868:	f107 0314 	add.w	r3, r7, #20
 800186c:	4619      	mov	r1, r3
 800186e:	4812      	ldr	r0, [pc, #72]	@ (80018b8 <HAL_PCD_MspInit+0xa4>)
 8001870:	f001 fcd2 	bl	8003218 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001874:	4b0f      	ldr	r3, [pc, #60]	@ (80018b4 <HAL_PCD_MspInit+0xa0>)
 8001876:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001878:	4a0e      	ldr	r2, [pc, #56]	@ (80018b4 <HAL_PCD_MspInit+0xa0>)
 800187a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800187e:	6353      	str	r3, [r2, #52]	@ 0x34
 8001880:	2300      	movs	r3, #0
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	4b0b      	ldr	r3, [pc, #44]	@ (80018b4 <HAL_PCD_MspInit+0xa0>)
 8001886:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001888:	4a0a      	ldr	r2, [pc, #40]	@ (80018b4 <HAL_PCD_MspInit+0xa0>)
 800188a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800188e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001890:	4b08      	ldr	r3, [pc, #32]	@ (80018b4 <HAL_PCD_MspInit+0xa0>)
 8001892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001894:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	68fb      	ldr	r3, [r7, #12]

    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800189c:	2200      	movs	r2, #0
 800189e:	2100      	movs	r1, #0
 80018a0:	2043      	movs	r0, #67	@ 0x43
 80018a2:	f001 f89a 	bl	80029da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80018a6:	2043      	movs	r0, #67	@ 0x43
 80018a8:	f001 f8b3 	bl	8002a12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80018ac:	bf00      	nop
 80018ae:	3728      	adds	r7, #40	@ 0x28
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40023800 	.word	0x40023800
 80018b8:	40020000 	.word	0x40020000

080018bc <Reset_Handler>:
 80018bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018f4 <LoopFillZerobss+0xe>
 80018c0:	f7ff fc84 	bl	80011cc <SystemInit>
 80018c4:	480c      	ldr	r0, [pc, #48]	@ (80018f8 <LoopFillZerobss+0x12>)
 80018c6:	490d      	ldr	r1, [pc, #52]	@ (80018fc <LoopFillZerobss+0x16>)
 80018c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001900 <LoopFillZerobss+0x1a>)
 80018ca:	2300      	movs	r3, #0
 80018cc:	e002      	b.n	80018d4 <LoopCopyDataInit>

080018ce <CopyDataInit>:
 80018ce:	58d4      	ldr	r4, [r2, r3]
 80018d0:	50c4      	str	r4, [r0, r3]
 80018d2:	3304      	adds	r3, #4

080018d4 <LoopCopyDataInit>:
 80018d4:	18c4      	adds	r4, r0, r3
 80018d6:	428c      	cmp	r4, r1
 80018d8:	d3f9      	bcc.n	80018ce <CopyDataInit>
 80018da:	4a0a      	ldr	r2, [pc, #40]	@ (8001904 <LoopFillZerobss+0x1e>)
 80018dc:	4c0a      	ldr	r4, [pc, #40]	@ (8001908 <LoopFillZerobss+0x22>)
 80018de:	2300      	movs	r3, #0
 80018e0:	e001      	b.n	80018e6 <LoopFillZerobss>

080018e2 <FillZerobss>:
 80018e2:	6013      	str	r3, [r2, #0]
 80018e4:	3204      	adds	r2, #4

080018e6 <LoopFillZerobss>:
 80018e6:	42a2      	cmp	r2, r4
 80018e8:	d3fb      	bcc.n	80018e2 <FillZerobss>
 80018ea:	f00a fdef 	bl	800c4cc <__libc_init_array>
 80018ee:	f7ff fa8b 	bl	8000e08 <main>
 80018f2:	4770      	bx	lr
 80018f4:	20020000 	.word	0x20020000
 80018f8:	20000000 	.word	0x20000000
 80018fc:	20000304 	.word	0x20000304
 8001900:	0800ce84 	.word	0x0800ce84
 8001904:	20000304 	.word	0x20000304
 8001908:	20003620 	.word	0x20003620

0800190c <ADC_IRQHandler>:
 800190c:	e7fe      	b.n	800190c <ADC_IRQHandler>
	...

08001910 <HAL_Init>:
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
 8001914:	4b0e      	ldr	r3, [pc, #56]	@ (8001950 <HAL_Init+0x40>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a0d      	ldr	r2, [pc, #52]	@ (8001950 <HAL_Init+0x40>)
 800191a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800191e:	6013      	str	r3, [r2, #0]
 8001920:	4b0b      	ldr	r3, [pc, #44]	@ (8001950 <HAL_Init+0x40>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a0a      	ldr	r2, [pc, #40]	@ (8001950 <HAL_Init+0x40>)
 8001926:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800192a:	6013      	str	r3, [r2, #0]
 800192c:	4b08      	ldr	r3, [pc, #32]	@ (8001950 <HAL_Init+0x40>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a07      	ldr	r2, [pc, #28]	@ (8001950 <HAL_Init+0x40>)
 8001932:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001936:	6013      	str	r3, [r2, #0]
 8001938:	2003      	movs	r0, #3
 800193a:	f001 f843 	bl	80029c4 <HAL_NVIC_SetPriorityGrouping>
 800193e:	200f      	movs	r0, #15
 8001940:	f000 f808 	bl	8001954 <HAL_InitTick>
 8001944:	f7ff fb5a 	bl	8000ffc <HAL_MspInit>
 8001948:	2300      	movs	r3, #0
 800194a:	4618      	mov	r0, r3
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40023c00 	.word	0x40023c00

08001954 <HAL_InitTick>:
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	4b12      	ldr	r3, [pc, #72]	@ (80019a8 <HAL_InitTick+0x54>)
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	4b12      	ldr	r3, [pc, #72]	@ (80019ac <HAL_InitTick+0x58>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	4619      	mov	r1, r3
 8001966:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800196a:	fbb3 f3f1 	udiv	r3, r3, r1
 800196e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001972:	4618      	mov	r0, r3
 8001974:	f001 f869 	bl	8002a4a <HAL_SYSTICK_Config>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <HAL_InitTick+0x2e>
 800197e:	2301      	movs	r3, #1
 8001980:	e00e      	b.n	80019a0 <HAL_InitTick+0x4c>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2b0f      	cmp	r3, #15
 8001986:	d80a      	bhi.n	800199e <HAL_InitTick+0x4a>
 8001988:	2200      	movs	r2, #0
 800198a:	6879      	ldr	r1, [r7, #4]
 800198c:	f04f 30ff 	mov.w	r0, #4294967295
 8001990:	f001 f823 	bl	80029da <HAL_NVIC_SetPriority>
 8001994:	4a06      	ldr	r2, [pc, #24]	@ (80019b0 <HAL_InitTick+0x5c>)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6013      	str	r3, [r2, #0]
 800199a:	2300      	movs	r3, #0
 800199c:	e000      	b.n	80019a0 <HAL_InitTick+0x4c>
 800199e:	2301      	movs	r3, #1
 80019a0:	4618      	mov	r0, r3
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	2000000c 	.word	0x2000000c
 80019ac:	20000014 	.word	0x20000014
 80019b0:	20000010 	.word	0x20000010

080019b4 <HAL_IncTick>:
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	4b06      	ldr	r3, [pc, #24]	@ (80019d4 <HAL_IncTick+0x20>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	461a      	mov	r2, r3
 80019be:	4b06      	ldr	r3, [pc, #24]	@ (80019d8 <HAL_IncTick+0x24>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4413      	add	r3, r2
 80019c4:	4a04      	ldr	r2, [pc, #16]	@ (80019d8 <HAL_IncTick+0x24>)
 80019c6:	6013      	str	r3, [r2, #0]
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	20000014 	.word	0x20000014
 80019d8:	2000134c 	.word	0x2000134c

080019dc <HAL_GetTick>:
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
 80019e0:	4b03      	ldr	r3, [pc, #12]	@ (80019f0 <HAL_GetTick+0x14>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4618      	mov	r0, r3
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	2000134c 	.word	0x2000134c

080019f4 <HAL_Delay>:
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	f7ff ffee 	bl	80019dc <HAL_GetTick>
 8001a00:	60b8      	str	r0, [r7, #8]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a0c:	d005      	beq.n	8001a1a <HAL_Delay+0x26>
 8001a0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a38 <HAL_Delay+0x44>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	461a      	mov	r2, r3
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	4413      	add	r3, r2
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	bf00      	nop
 8001a1c:	f7ff ffde 	bl	80019dc <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	68fa      	ldr	r2, [r7, #12]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d8f7      	bhi.n	8001a1c <HAL_Delay+0x28>
 8001a2c:	bf00      	nop
 8001a2e:	bf00      	nop
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20000014 	.word	0x20000014

08001a3c <HAL_CAN_Init>:
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d101      	bne.n	8001a4e <HAL_CAN_Init+0x12>
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e0ed      	b.n	8001c2a <HAL_CAN_Init+0x1ee>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d102      	bne.n	8001a60 <HAL_CAN_Init+0x24>
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7fe fd9e 	bl	800059c <HAL_CAN_MspInit>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f042 0201 	orr.w	r2, r2, #1
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	f7ff ffb4 	bl	80019dc <HAL_GetTick>
 8001a74:	60f8      	str	r0, [r7, #12]
 8001a76:	e012      	b.n	8001a9e <HAL_CAN_Init+0x62>
 8001a78:	f7ff ffb0 	bl	80019dc <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b0a      	cmp	r3, #10
 8001a84:	d90b      	bls.n	8001a9e <HAL_CAN_Init+0x62>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a8a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	625a      	str	r2, [r3, #36]	@ 0x24
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2205      	movs	r2, #5
 8001a96:	f883 2020 	strb.w	r2, [r3, #32]
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e0c5      	b.n	8001c2a <HAL_CAN_Init+0x1ee>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d0e5      	beq.n	8001a78 <HAL_CAN_Init+0x3c>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f022 0202 	bic.w	r2, r2, #2
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	f7ff ff8e 	bl	80019dc <HAL_GetTick>
 8001ac0:	60f8      	str	r0, [r7, #12]
 8001ac2:	e012      	b.n	8001aea <HAL_CAN_Init+0xae>
 8001ac4:	f7ff ff8a 	bl	80019dc <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b0a      	cmp	r3, #10
 8001ad0:	d90b      	bls.n	8001aea <HAL_CAN_Init+0xae>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ad6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	625a      	str	r2, [r3, #36]	@ 0x24
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2205      	movs	r2, #5
 8001ae2:	f883 2020 	strb.w	r2, [r3, #32]
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e09f      	b.n	8001c2a <HAL_CAN_Init+0x1ee>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1e5      	bne.n	8001ac4 <HAL_CAN_Init+0x88>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	7e1b      	ldrb	r3, [r3, #24]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d108      	bne.n	8001b12 <HAL_CAN_Init+0xd6>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	e007      	b.n	8001b22 <HAL_CAN_Init+0xe6>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	7e5b      	ldrb	r3, [r3, #25]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d108      	bne.n	8001b3c <HAL_CAN_Init+0x100>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	e007      	b.n	8001b4c <HAL_CAN_Init+0x110>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	7e9b      	ldrb	r3, [r3, #26]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d108      	bne.n	8001b66 <HAL_CAN_Init+0x12a>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f042 0220 	orr.w	r2, r2, #32
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	e007      	b.n	8001b76 <HAL_CAN_Init+0x13a>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f022 0220 	bic.w	r2, r2, #32
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	7edb      	ldrb	r3, [r3, #27]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d108      	bne.n	8001b90 <HAL_CAN_Init+0x154>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f022 0210 	bic.w	r2, r2, #16
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	e007      	b.n	8001ba0 <HAL_CAN_Init+0x164>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f042 0210 	orr.w	r2, r2, #16
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	7f1b      	ldrb	r3, [r3, #28]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d108      	bne.n	8001bba <HAL_CAN_Init+0x17e>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f042 0208 	orr.w	r2, r2, #8
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	e007      	b.n	8001bca <HAL_CAN_Init+0x18e>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f022 0208 	bic.w	r2, r2, #8
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	7f5b      	ldrb	r3, [r3, #29]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d108      	bne.n	8001be4 <HAL_CAN_Init+0x1a8>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f042 0204 	orr.w	r2, r2, #4
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	e007      	b.n	8001bf4 <HAL_CAN_Init+0x1b8>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f022 0204 	bic.w	r2, r2, #4
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689a      	ldr	r2, [r3, #8]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	431a      	orrs	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	431a      	orrs	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	695b      	ldr	r3, [r3, #20]
 8001c08:	ea42 0103 	orr.w	r1, r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	1e5a      	subs	r2, r3, #1
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	430a      	orrs	r2, r1
 8001c18:	61da      	str	r2, [r3, #28]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 2020 	strb.w	r2, [r3, #32]
 8001c28:	2300      	movs	r3, #0
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <HAL_CAN_DeInit>:
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b082      	sub	sp, #8
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d101      	bne.n	8001c44 <HAL_CAN_DeInit+0x12>
 8001c40:	2301      	movs	r3, #1
 8001c42:	e015      	b.n	8001c70 <HAL_CAN_DeInit+0x3e>
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f000 f939 	bl	8001ebc <HAL_CAN_Stop>
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f7fe fcfe 	bl	800064c <HAL_CAN_MspDeInit>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	625a      	str	r2, [r3, #36]	@ 0x24
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 2020 	strb.w	r2, [r3, #32]
 8001c6e:	2300      	movs	r3, #0
 8001c70:	4618      	mov	r0, r3
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <HAL_CAN_ConfigFilter>:
 8001c78:	b480      	push	{r7}
 8001c7a:	b087      	sub	sp, #28
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c88:	75fb      	strb	r3, [r7, #23]
 8001c8a:	7dfb      	ldrb	r3, [r7, #23]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d003      	beq.n	8001c98 <HAL_CAN_ConfigFilter+0x20>
 8001c90:	7dfb      	ldrb	r3, [r7, #23]
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	f040 80be 	bne.w	8001e14 <HAL_CAN_ConfigFilter+0x19c>
 8001c98:	4b65      	ldr	r3, [pc, #404]	@ (8001e30 <HAL_CAN_ConfigFilter+0x1b8>)
 8001c9a:	613b      	str	r3, [r7, #16]
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001ca2:	f043 0201 	orr.w	r2, r3, #1
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001cb2:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc6:	021b      	lsls	r3, r3, #8
 8001cc8:	431a      	orrs	r2, r3
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	695b      	ldr	r3, [r3, #20]
 8001cd4:	f003 031f 	and.w	r3, r3, #31
 8001cd8:	2201      	movs	r2, #1
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	401a      	ands	r2, r3
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d123      	bne.n	8001d42 <HAL_CAN_ConfigFilter+0xca>
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	43db      	mvns	r3, r3
 8001d04:	401a      	ands	r2, r3
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	0419      	lsls	r1, r3, #16
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	6952      	ldr	r2, [r2, #20]
 8001d1c:	4319      	orrs	r1, r3
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	3248      	adds	r2, #72	@ 0x48
 8001d22:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	0419      	lsls	r1, r3, #16
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	695b      	ldr	r3, [r3, #20]
 8001d36:	430a      	orrs	r2, r1
 8001d38:	6939      	ldr	r1, [r7, #16]
 8001d3a:	3348      	adds	r3, #72	@ 0x48
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	440b      	add	r3, r1
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	69db      	ldr	r3, [r3, #28]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d122      	bne.n	8001d90 <HAL_CAN_ConfigFilter+0x118>
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	431a      	orrs	r2, r3
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	0419      	lsls	r1, r3, #16
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	683a      	ldr	r2, [r7, #0]
 8001d68:	6952      	ldr	r2, [r2, #20]
 8001d6a:	4319      	orrs	r1, r3
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	3248      	adds	r2, #72	@ 0x48
 8001d70:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	0419      	lsls	r1, r3, #16
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	695b      	ldr	r3, [r3, #20]
 8001d84:	430a      	orrs	r2, r1
 8001d86:	6939      	ldr	r1, [r7, #16]
 8001d88:	3348      	adds	r3, #72	@ 0x48
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	440b      	add	r3, r1
 8001d8e:	605a      	str	r2, [r3, #4]
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d109      	bne.n	8001dac <HAL_CAN_ConfigFilter+0x134>
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	43db      	mvns	r3, r3
 8001da2:	401a      	ands	r2, r3
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001daa:	e007      	b.n	8001dbc <HAL_CAN_ConfigFilter+0x144>
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	431a      	orrs	r2, r3
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d109      	bne.n	8001dd8 <HAL_CAN_ConfigFilter+0x160>
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	401a      	ands	r2, r3
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001dd6:	e007      	b.n	8001de8 <HAL_CAN_ConfigFilter+0x170>
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	431a      	orrs	r2, r3
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	6a1b      	ldr	r3, [r3, #32]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d107      	bne.n	8001e00 <HAL_CAN_ConfigFilter+0x188>
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	431a      	orrs	r2, r3
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001e06:	f023 0201 	bic.w	r2, r3, #1
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
 8001e10:	2300      	movs	r3, #0
 8001e12:	e006      	b.n	8001e22 <HAL_CAN_ConfigFilter+0x1aa>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e18:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001e20:	2301      	movs	r3, #1
 8001e22:	4618      	mov	r0, r3
 8001e24:	371c      	adds	r7, #28
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	40006400 	.word	0x40006400

08001e34 <HAL_CAN_Start>:
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d12e      	bne.n	8001ea6 <HAL_CAN_Start+0x72>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	f883 2020 	strb.w	r2, [r3, #32]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f022 0201 	bic.w	r2, r2, #1
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	f7ff fdbc 	bl	80019dc <HAL_GetTick>
 8001e64:	60f8      	str	r0, [r7, #12]
 8001e66:	e012      	b.n	8001e8e <HAL_CAN_Start+0x5a>
 8001e68:	f7ff fdb8 	bl	80019dc <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b0a      	cmp	r3, #10
 8001e74:	d90b      	bls.n	8001e8e <HAL_CAN_Start+0x5a>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e7a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	625a      	str	r2, [r3, #36]	@ 0x24
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2205      	movs	r2, #5
 8001e86:	f883 2020 	strb.w	r2, [r3, #32]
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e012      	b.n	8001eb4 <HAL_CAN_Start+0x80>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f003 0301 	and.w	r3, r3, #1
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d1e5      	bne.n	8001e68 <HAL_CAN_Start+0x34>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	625a      	str	r2, [r3, #36]	@ 0x24
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	e006      	b.n	8001eb4 <HAL_CAN_Start+0x80>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eaa:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	625a      	str	r2, [r3, #36]	@ 0x24
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3710      	adds	r7, #16
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <HAL_CAN_Stop>:
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d133      	bne.n	8001f38 <HAL_CAN_Stop+0x7c>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f042 0201 	orr.w	r2, r2, #1
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	f7ff fd7c 	bl	80019dc <HAL_GetTick>
 8001ee4:	60f8      	str	r0, [r7, #12]
 8001ee6:	e012      	b.n	8001f0e <HAL_CAN_Stop+0x52>
 8001ee8:	f7ff fd78 	bl	80019dc <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b0a      	cmp	r3, #10
 8001ef4:	d90b      	bls.n	8001f0e <HAL_CAN_Stop+0x52>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001efa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	625a      	str	r2, [r3, #36]	@ 0x24
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2205      	movs	r2, #5
 8001f06:	f883 2020 	strb.w	r2, [r3, #32]
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e01b      	b.n	8001f46 <HAL_CAN_Stop+0x8a>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f003 0301 	and.w	r3, r3, #1
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d0e5      	beq.n	8001ee8 <HAL_CAN_Stop+0x2c>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 0202 	bic.w	r2, r2, #2
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 2020 	strb.w	r2, [r3, #32]
 8001f34:	2300      	movs	r3, #0
 8001f36:	e006      	b.n	8001f46 <HAL_CAN_Stop+0x8a>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f3c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	625a      	str	r2, [r3, #36]	@ 0x24
 8001f44:	2301      	movs	r3, #1
 8001f46:	4618      	mov	r0, r3
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <HAL_CAN_AddTxMessage>:
 8001f4e:	b480      	push	{r7}
 8001f50:	b089      	sub	sp, #36	@ 0x24
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	60f8      	str	r0, [r7, #12]
 8001f56:	60b9      	str	r1, [r7, #8]
 8001f58:	607a      	str	r2, [r7, #4]
 8001f5a:	603b      	str	r3, [r7, #0]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f62:	77fb      	strb	r3, [r7, #31]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	61bb      	str	r3, [r7, #24]
 8001f6c:	7ffb      	ldrb	r3, [r7, #31]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d003      	beq.n	8001f7a <HAL_CAN_AddTxMessage+0x2c>
 8001f72:	7ffb      	ldrb	r3, [r7, #31]
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	f040 80ad 	bne.w	80020d4 <HAL_CAN_AddTxMessage+0x186>
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d10a      	bne.n	8001f9a <HAL_CAN_AddTxMessage+0x4c>
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d105      	bne.n	8001f9a <HAL_CAN_AddTxMessage+0x4c>
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	f000 8095 	beq.w	80020c4 <HAL_CAN_AddTxMessage+0x176>
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	0e1b      	lsrs	r3, r3, #24
 8001f9e:	f003 0303 	and.w	r3, r3, #3
 8001fa2:	617b      	str	r3, [r7, #20]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	409a      	lsls	r2, r3
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	601a      	str	r2, [r3, #0]
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10d      	bne.n	8001fd2 <HAL_CAN_AddTxMessage+0x84>
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	055a      	lsls	r2, r3, #21
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	68f9      	ldr	r1, [r7, #12]
 8001fc2:	6809      	ldr	r1, [r1, #0]
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	3318      	adds	r3, #24
 8001fca:	011b      	lsls	r3, r3, #4
 8001fcc:	440b      	add	r3, r1
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	e00f      	b.n	8001ff2 <HAL_CAN_AddTxMessage+0xa4>
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	00da      	lsls	r2, r3, #3
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	431a      	orrs	r2, r3
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	68f9      	ldr	r1, [r7, #12]
 8001fe4:	6809      	ldr	r1, [r1, #0]
 8001fe6:	431a      	orrs	r2, r3
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	3318      	adds	r3, #24
 8001fec:	011b      	lsls	r3, r3, #4
 8001fee:	440b      	add	r3, r1
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6819      	ldr	r1, [r3, #0]
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	691a      	ldr	r2, [r3, #16]
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	3318      	adds	r3, #24
 8001ffe:	011b      	lsls	r3, r3, #4
 8002000:	440b      	add	r3, r1
 8002002:	3304      	adds	r3, #4
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	7d1b      	ldrb	r3, [r3, #20]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d111      	bne.n	8002032 <HAL_CAN_AddTxMessage+0xe4>
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	3318      	adds	r3, #24
 8002016:	011b      	lsls	r3, r3, #4
 8002018:	4413      	add	r3, r2
 800201a:	3304      	adds	r3, #4
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	6811      	ldr	r1, [r2, #0]
 8002022:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	3318      	adds	r3, #24
 800202a:	011b      	lsls	r3, r3, #4
 800202c:	440b      	add	r3, r1
 800202e:	3304      	adds	r3, #4
 8002030:	601a      	str	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	3307      	adds	r3, #7
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	061a      	lsls	r2, r3, #24
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	3306      	adds	r3, #6
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	041b      	lsls	r3, r3, #16
 8002042:	431a      	orrs	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	3305      	adds	r3, #5
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	021b      	lsls	r3, r3, #8
 800204c:	4313      	orrs	r3, r2
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	3204      	adds	r2, #4
 8002052:	7812      	ldrb	r2, [r2, #0]
 8002054:	4610      	mov	r0, r2
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	6811      	ldr	r1, [r2, #0]
 800205a:	ea43 0200 	orr.w	r2, r3, r0
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	011b      	lsls	r3, r3, #4
 8002062:	440b      	add	r3, r1
 8002064:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	3303      	adds	r3, #3
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	061a      	lsls	r2, r3, #24
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	3302      	adds	r3, #2
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	041b      	lsls	r3, r3, #16
 800207a:	431a      	orrs	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3301      	adds	r3, #1
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	021b      	lsls	r3, r3, #8
 8002084:	4313      	orrs	r3, r2
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	7812      	ldrb	r2, [r2, #0]
 800208a:	4610      	mov	r0, r2
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	6811      	ldr	r1, [r2, #0]
 8002090:	ea43 0200 	orr.w	r2, r3, r0
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	011b      	lsls	r3, r3, #4
 8002098:	440b      	add	r3, r1
 800209a:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	3318      	adds	r3, #24
 80020a8:	011b      	lsls	r3, r3, #4
 80020aa:	4413      	add	r3, r2
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	6811      	ldr	r1, [r2, #0]
 80020b2:	f043 0201 	orr.w	r2, r3, #1
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	3318      	adds	r3, #24
 80020ba:	011b      	lsls	r3, r3, #4
 80020bc:	440b      	add	r3, r1
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	2300      	movs	r3, #0
 80020c2:	e00e      	b.n	80020e2 <HAL_CAN_AddTxMessage+0x194>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	625a      	str	r2, [r3, #36]	@ 0x24
 80020d0:	2301      	movs	r3, #1
 80020d2:	e006      	b.n	80020e2 <HAL_CAN_AddTxMessage+0x194>
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	625a      	str	r2, [r3, #36]	@ 0x24
 80020e0:	2301      	movs	r3, #1
 80020e2:	4618      	mov	r0, r3
 80020e4:	3724      	adds	r7, #36	@ 0x24
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <HAL_CAN_GetRxMessage>:
 80020ee:	b480      	push	{r7}
 80020f0:	b087      	sub	sp, #28
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	60f8      	str	r0, [r7, #12]
 80020f6:	60b9      	str	r1, [r7, #8]
 80020f8:	607a      	str	r2, [r7, #4]
 80020fa:	603b      	str	r3, [r7, #0]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002102:	75fb      	strb	r3, [r7, #23]
 8002104:	7dfb      	ldrb	r3, [r7, #23]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d003      	beq.n	8002112 <HAL_CAN_GetRxMessage+0x24>
 800210a:	7dfb      	ldrb	r3, [r7, #23]
 800210c:	2b02      	cmp	r3, #2
 800210e:	f040 8103 	bne.w	8002318 <HAL_CAN_GetRxMessage+0x22a>
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d10e      	bne.n	8002136 <HAL_CAN_GetRxMessage+0x48>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	f003 0303 	and.w	r3, r3, #3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d116      	bne.n	8002154 <HAL_CAN_GetRxMessage+0x66>
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800212a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	625a      	str	r2, [r3, #36]	@ 0x24
 8002132:	2301      	movs	r3, #1
 8002134:	e0f7      	b.n	8002326 <HAL_CAN_GetRxMessage+0x238>
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	f003 0303 	and.w	r3, r3, #3
 8002140:	2b00      	cmp	r3, #0
 8002142:	d107      	bne.n	8002154 <HAL_CAN_GetRxMessage+0x66>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002148:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002150:	2301      	movs	r3, #1
 8002152:	e0e8      	b.n	8002326 <HAL_CAN_GetRxMessage+0x238>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	331b      	adds	r3, #27
 800215c:	011b      	lsls	r3, r3, #4
 800215e:	4413      	add	r3, r2
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0204 	and.w	r2, r3, #4
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	609a      	str	r2, [r3, #8]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10c      	bne.n	800218c <HAL_CAN_GetRxMessage+0x9e>
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	331b      	adds	r3, #27
 800217a:	011b      	lsls	r3, r3, #4
 800217c:	4413      	add	r3, r2
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	0d5b      	lsrs	r3, r3, #21
 8002182:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	e00b      	b.n	80021a4 <HAL_CAN_GetRxMessage+0xb6>
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	331b      	adds	r3, #27
 8002194:	011b      	lsls	r3, r3, #4
 8002196:	4413      	add	r3, r2
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	08db      	lsrs	r3, r3, #3
 800219c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	605a      	str	r2, [r3, #4]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	331b      	adds	r3, #27
 80021ac:	011b      	lsls	r3, r3, #4
 80021ae:	4413      	add	r3, r2
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0202 	and.w	r2, r3, #2
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	60da      	str	r2, [r3, #12]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	331b      	adds	r3, #27
 80021c2:	011b      	lsls	r3, r3, #4
 80021c4:	4413      	add	r3, r2
 80021c6:	3304      	adds	r3, #4
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0308 	and.w	r3, r3, #8
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d003      	beq.n	80021da <HAL_CAN_GetRxMessage+0xec>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2208      	movs	r2, #8
 80021d6:	611a      	str	r2, [r3, #16]
 80021d8:	e00b      	b.n	80021f2 <HAL_CAN_GetRxMessage+0x104>
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	331b      	adds	r3, #27
 80021e2:	011b      	lsls	r3, r3, #4
 80021e4:	4413      	add	r3, r2
 80021e6:	3304      	adds	r3, #4
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 020f 	and.w	r2, r3, #15
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	611a      	str	r2, [r3, #16]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	331b      	adds	r3, #27
 80021fa:	011b      	lsls	r3, r3, #4
 80021fc:	4413      	add	r3, r2
 80021fe:	3304      	adds	r3, #4
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	0a1b      	lsrs	r3, r3, #8
 8002204:	b2da      	uxtb	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	619a      	str	r2, [r3, #24]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	331b      	adds	r3, #27
 8002212:	011b      	lsls	r3, r3, #4
 8002214:	4413      	add	r3, r2
 8002216:	3304      	adds	r3, #4
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	0c1b      	lsrs	r3, r3, #16
 800221c:	b29a      	uxth	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	615a      	str	r2, [r3, #20]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	011b      	lsls	r3, r3, #4
 800222a:	4413      	add	r3, r2
 800222c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	b2da      	uxtb	r2, r3
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	701a      	strb	r2, [r3, #0]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	011b      	lsls	r3, r3, #4
 8002240:	4413      	add	r3, r2
 8002242:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	0a1a      	lsrs	r2, r3, #8
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	3301      	adds	r3, #1
 800224e:	b2d2      	uxtb	r2, r2
 8002250:	701a      	strb	r2, [r3, #0]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	011b      	lsls	r3, r3, #4
 800225a:	4413      	add	r3, r2
 800225c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	0c1a      	lsrs	r2, r3, #16
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	3302      	adds	r3, #2
 8002268:	b2d2      	uxtb	r2, r2
 800226a:	701a      	strb	r2, [r3, #0]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	011b      	lsls	r3, r3, #4
 8002274:	4413      	add	r3, r2
 8002276:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	0e1a      	lsrs	r2, r3, #24
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	3303      	adds	r3, #3
 8002282:	b2d2      	uxtb	r2, r2
 8002284:	701a      	strb	r2, [r3, #0]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	011b      	lsls	r3, r3, #4
 800228e:	4413      	add	r3, r2
 8002290:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	3304      	adds	r3, #4
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	701a      	strb	r2, [r3, #0]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	011b      	lsls	r3, r3, #4
 80022a6:	4413      	add	r3, r2
 80022a8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	0a1a      	lsrs	r2, r3, #8
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	3305      	adds	r3, #5
 80022b4:	b2d2      	uxtb	r2, r2
 80022b6:	701a      	strb	r2, [r3, #0]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	011b      	lsls	r3, r3, #4
 80022c0:	4413      	add	r3, r2
 80022c2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	0c1a      	lsrs	r2, r3, #16
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	3306      	adds	r3, #6
 80022ce:	b2d2      	uxtb	r2, r2
 80022d0:	701a      	strb	r2, [r3, #0]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	011b      	lsls	r3, r3, #4
 80022da:	4413      	add	r3, r2
 80022dc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	0e1a      	lsrs	r2, r3, #24
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	3307      	adds	r3, #7
 80022e8:	b2d2      	uxtb	r2, r2
 80022ea:	701a      	strb	r2, [r3, #0]
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d108      	bne.n	8002304 <HAL_CAN_GetRxMessage+0x216>
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68da      	ldr	r2, [r3, #12]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f042 0220 	orr.w	r2, r2, #32
 8002300:	60da      	str	r2, [r3, #12]
 8002302:	e007      	b.n	8002314 <HAL_CAN_GetRxMessage+0x226>
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	691a      	ldr	r2, [r3, #16]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f042 0220 	orr.w	r2, r2, #32
 8002312:	611a      	str	r2, [r3, #16]
 8002314:	2300      	movs	r3, #0
 8002316:	e006      	b.n	8002326 <HAL_CAN_GetRxMessage+0x238>
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800231c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	625a      	str	r2, [r3, #36]	@ 0x24
 8002324:	2301      	movs	r3, #1
 8002326:	4618      	mov	r0, r3
 8002328:	371c      	adds	r7, #28
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr

08002332 <HAL_CAN_ActivateNotification>:
 8002332:	b480      	push	{r7}
 8002334:	b085      	sub	sp, #20
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
 800233a:	6039      	str	r1, [r7, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002342:	73fb      	strb	r3, [r7, #15]
 8002344:	7bfb      	ldrb	r3, [r7, #15]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d002      	beq.n	8002350 <HAL_CAN_ActivateNotification+0x1e>
 800234a:	7bfb      	ldrb	r3, [r7, #15]
 800234c:	2b02      	cmp	r3, #2
 800234e:	d109      	bne.n	8002364 <HAL_CAN_ActivateNotification+0x32>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6959      	ldr	r1, [r3, #20]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	430a      	orrs	r2, r1
 800235e:	615a      	str	r2, [r3, #20]
 8002360:	2300      	movs	r3, #0
 8002362:	e006      	b.n	8002372 <HAL_CAN_ActivateNotification+0x40>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002368:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002370:	2301      	movs	r3, #1
 8002372:	4618      	mov	r0, r3
 8002374:	3714      	adds	r7, #20
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <HAL_CAN_IRQHandler>:
 800237e:	b580      	push	{r7, lr}
 8002380:	b08a      	sub	sp, #40	@ 0x28
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
 8002386:	2300      	movs	r3, #0
 8002388:	627b      	str	r3, [r7, #36]	@ 0x24
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	695b      	ldr	r3, [r3, #20]
 8002390:	623b      	str	r3, [r7, #32]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	61fb      	str	r3, [r7, #28]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	61bb      	str	r3, [r7, #24]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	617b      	str	r3, [r7, #20]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	613b      	str	r3, [r7, #16]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	60fb      	str	r3, [r7, #12]
 80023ba:	6a3b      	ldr	r3, [r7, #32]
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d07c      	beq.n	80024be <HAL_CAN_IRQHandler+0x140>
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d023      	beq.n	8002416 <HAL_CAN_IRQHandler+0x98>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2201      	movs	r2, #1
 80023d4:	609a      	str	r2, [r3, #8]
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d003      	beq.n	80023e8 <HAL_CAN_IRQHandler+0x6a>
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f000 f983 	bl	80026ec <HAL_CAN_TxMailbox0CompleteCallback>
 80023e6:	e016      	b.n	8002416 <HAL_CAN_IRQHandler+0x98>
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	f003 0304 	and.w	r3, r3, #4
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d004      	beq.n	80023fc <HAL_CAN_IRQHandler+0x7e>
 80023f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80023f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80023fa:	e00c      	b.n	8002416 <HAL_CAN_IRQHandler+0x98>
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	f003 0308 	and.w	r3, r3, #8
 8002402:	2b00      	cmp	r3, #0
 8002404:	d004      	beq.n	8002410 <HAL_CAN_IRQHandler+0x92>
 8002406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002408:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800240c:	627b      	str	r3, [r7, #36]	@ 0x24
 800240e:	e002      	b.n	8002416 <HAL_CAN_IRQHandler+0x98>
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f000 f989 	bl	8002728 <HAL_CAN_TxMailbox0AbortCallback>
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800241c:	2b00      	cmp	r3, #0
 800241e:	d024      	beq.n	800246a <HAL_CAN_IRQHandler+0xec>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002428:	609a      	str	r2, [r3, #8]
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002430:	2b00      	cmp	r3, #0
 8002432:	d003      	beq.n	800243c <HAL_CAN_IRQHandler+0xbe>
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 f963 	bl	8002700 <HAL_CAN_TxMailbox1CompleteCallback>
 800243a:	e016      	b.n	800246a <HAL_CAN_IRQHandler+0xec>
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002442:	2b00      	cmp	r3, #0
 8002444:	d004      	beq.n	8002450 <HAL_CAN_IRQHandler+0xd2>
 8002446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002448:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800244c:	627b      	str	r3, [r7, #36]	@ 0x24
 800244e:	e00c      	b.n	800246a <HAL_CAN_IRQHandler+0xec>
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002456:	2b00      	cmp	r3, #0
 8002458:	d004      	beq.n	8002464 <HAL_CAN_IRQHandler+0xe6>
 800245a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800245c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002460:	627b      	str	r3, [r7, #36]	@ 0x24
 8002462:	e002      	b.n	800246a <HAL_CAN_IRQHandler+0xec>
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f000 f969 	bl	800273c <HAL_CAN_TxMailbox1AbortCallback>
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d024      	beq.n	80024be <HAL_CAN_IRQHandler+0x140>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800247c:	609a      	str	r2, [r3, #8]
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d003      	beq.n	8002490 <HAL_CAN_IRQHandler+0x112>
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f000 f943 	bl	8002714 <HAL_CAN_TxMailbox2CompleteCallback>
 800248e:	e016      	b.n	80024be <HAL_CAN_IRQHandler+0x140>
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d004      	beq.n	80024a4 <HAL_CAN_IRQHandler+0x126>
 800249a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80024a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80024a2:	e00c      	b.n	80024be <HAL_CAN_IRQHandler+0x140>
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d004      	beq.n	80024b8 <HAL_CAN_IRQHandler+0x13a>
 80024ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80024b6:	e002      	b.n	80024be <HAL_CAN_IRQHandler+0x140>
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f000 f949 	bl	8002750 <HAL_CAN_TxMailbox2AbortCallback>
 80024be:	6a3b      	ldr	r3, [r7, #32]
 80024c0:	f003 0308 	and.w	r3, r3, #8
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d00c      	beq.n	80024e2 <HAL_CAN_IRQHandler+0x164>
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	f003 0310 	and.w	r3, r3, #16
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d007      	beq.n	80024e2 <HAL_CAN_IRQHandler+0x164>
 80024d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80024d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2210      	movs	r2, #16
 80024e0:	60da      	str	r2, [r3, #12]
 80024e2:	6a3b      	ldr	r3, [r7, #32]
 80024e4:	f003 0304 	and.w	r3, r3, #4
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00b      	beq.n	8002504 <HAL_CAN_IRQHandler+0x186>
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	f003 0308 	and.w	r3, r3, #8
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d006      	beq.n	8002504 <HAL_CAN_IRQHandler+0x186>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2208      	movs	r2, #8
 80024fc:	60da      	str	r2, [r3, #12]
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 f930 	bl	8002764 <HAL_CAN_RxFifo0FullCallback>
 8002504:	6a3b      	ldr	r3, [r7, #32]
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d009      	beq.n	8002522 <HAL_CAN_IRQHandler+0x1a4>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	f003 0303 	and.w	r3, r3, #3
 8002518:	2b00      	cmp	r3, #0
 800251a:	d002      	beq.n	8002522 <HAL_CAN_IRQHandler+0x1a4>
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f7fe fcfb 	bl	8000f18 <HAL_CAN_RxFifo0MsgPendingCallback>
 8002522:	6a3b      	ldr	r3, [r7, #32]
 8002524:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002528:	2b00      	cmp	r3, #0
 800252a:	d00c      	beq.n	8002546 <HAL_CAN_IRQHandler+0x1c8>
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	f003 0310 	and.w	r3, r3, #16
 8002532:	2b00      	cmp	r3, #0
 8002534:	d007      	beq.n	8002546 <HAL_CAN_IRQHandler+0x1c8>
 8002536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002538:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800253c:	627b      	str	r3, [r7, #36]	@ 0x24
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2210      	movs	r2, #16
 8002544:	611a      	str	r2, [r3, #16]
 8002546:	6a3b      	ldr	r3, [r7, #32]
 8002548:	f003 0320 	and.w	r3, r3, #32
 800254c:	2b00      	cmp	r3, #0
 800254e:	d00b      	beq.n	8002568 <HAL_CAN_IRQHandler+0x1ea>
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	f003 0308 	and.w	r3, r3, #8
 8002556:	2b00      	cmp	r3, #0
 8002558:	d006      	beq.n	8002568 <HAL_CAN_IRQHandler+0x1ea>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2208      	movs	r2, #8
 8002560:	611a      	str	r2, [r3, #16]
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 f912 	bl	800278c <HAL_CAN_RxFifo1FullCallback>
 8002568:	6a3b      	ldr	r3, [r7, #32]
 800256a:	f003 0310 	and.w	r3, r3, #16
 800256e:	2b00      	cmp	r3, #0
 8002570:	d009      	beq.n	8002586 <HAL_CAN_IRQHandler+0x208>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	f003 0303 	and.w	r3, r3, #3
 800257c:	2b00      	cmp	r3, #0
 800257e:	d002      	beq.n	8002586 <HAL_CAN_IRQHandler+0x208>
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 f8f9 	bl	8002778 <HAL_CAN_RxFifo1MsgPendingCallback>
 8002586:	6a3b      	ldr	r3, [r7, #32]
 8002588:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d00b      	beq.n	80025a8 <HAL_CAN_IRQHandler+0x22a>
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	f003 0310 	and.w	r3, r3, #16
 8002596:	2b00      	cmp	r3, #0
 8002598:	d006      	beq.n	80025a8 <HAL_CAN_IRQHandler+0x22a>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2210      	movs	r2, #16
 80025a0:	605a      	str	r2, [r3, #4]
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f000 f8fc 	bl	80027a0 <HAL_CAN_SleepCallback>
 80025a8:	6a3b      	ldr	r3, [r7, #32]
 80025aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00b      	beq.n	80025ca <HAL_CAN_IRQHandler+0x24c>
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	f003 0308 	and.w	r3, r3, #8
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d006      	beq.n	80025ca <HAL_CAN_IRQHandler+0x24c>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2208      	movs	r2, #8
 80025c2:	605a      	str	r2, [r3, #4]
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f000 f8f5 	bl	80027b4 <HAL_CAN_WakeUpFromRxMsgCallback>
 80025ca:	6a3b      	ldr	r3, [r7, #32]
 80025cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d07b      	beq.n	80026cc <HAL_CAN_IRQHandler+0x34e>
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	f003 0304 	and.w	r3, r3, #4
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d072      	beq.n	80026c4 <HAL_CAN_IRQHandler+0x346>
 80025de:	6a3b      	ldr	r3, [r7, #32]
 80025e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d008      	beq.n	80025fa <HAL_CAN_IRQHandler+0x27c>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d003      	beq.n	80025fa <HAL_CAN_IRQHandler+0x27c>
 80025f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f4:	f043 0301 	orr.w	r3, r3, #1
 80025f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80025fa:	6a3b      	ldr	r3, [r7, #32]
 80025fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002600:	2b00      	cmp	r3, #0
 8002602:	d008      	beq.n	8002616 <HAL_CAN_IRQHandler+0x298>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <HAL_CAN_IRQHandler+0x298>
 800260e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002610:	f043 0302 	orr.w	r3, r3, #2
 8002614:	627b      	str	r3, [r7, #36]	@ 0x24
 8002616:	6a3b      	ldr	r3, [r7, #32]
 8002618:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800261c:	2b00      	cmp	r3, #0
 800261e:	d008      	beq.n	8002632 <HAL_CAN_IRQHandler+0x2b4>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f003 0304 	and.w	r3, r3, #4
 8002626:	2b00      	cmp	r3, #0
 8002628:	d003      	beq.n	8002632 <HAL_CAN_IRQHandler+0x2b4>
 800262a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800262c:	f043 0304 	orr.w	r3, r3, #4
 8002630:	627b      	str	r3, [r7, #36]	@ 0x24
 8002632:	6a3b      	ldr	r3, [r7, #32]
 8002634:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002638:	2b00      	cmp	r3, #0
 800263a:	d043      	beq.n	80026c4 <HAL_CAN_IRQHandler+0x346>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002642:	2b00      	cmp	r3, #0
 8002644:	d03e      	beq.n	80026c4 <HAL_CAN_IRQHandler+0x346>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800264c:	2b60      	cmp	r3, #96	@ 0x60
 800264e:	d02b      	beq.n	80026a8 <HAL_CAN_IRQHandler+0x32a>
 8002650:	2b60      	cmp	r3, #96	@ 0x60
 8002652:	d82e      	bhi.n	80026b2 <HAL_CAN_IRQHandler+0x334>
 8002654:	2b50      	cmp	r3, #80	@ 0x50
 8002656:	d022      	beq.n	800269e <HAL_CAN_IRQHandler+0x320>
 8002658:	2b50      	cmp	r3, #80	@ 0x50
 800265a:	d82a      	bhi.n	80026b2 <HAL_CAN_IRQHandler+0x334>
 800265c:	2b40      	cmp	r3, #64	@ 0x40
 800265e:	d019      	beq.n	8002694 <HAL_CAN_IRQHandler+0x316>
 8002660:	2b40      	cmp	r3, #64	@ 0x40
 8002662:	d826      	bhi.n	80026b2 <HAL_CAN_IRQHandler+0x334>
 8002664:	2b30      	cmp	r3, #48	@ 0x30
 8002666:	d010      	beq.n	800268a <HAL_CAN_IRQHandler+0x30c>
 8002668:	2b30      	cmp	r3, #48	@ 0x30
 800266a:	d822      	bhi.n	80026b2 <HAL_CAN_IRQHandler+0x334>
 800266c:	2b10      	cmp	r3, #16
 800266e:	d002      	beq.n	8002676 <HAL_CAN_IRQHandler+0x2f8>
 8002670:	2b20      	cmp	r3, #32
 8002672:	d005      	beq.n	8002680 <HAL_CAN_IRQHandler+0x302>
 8002674:	e01d      	b.n	80026b2 <HAL_CAN_IRQHandler+0x334>
 8002676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002678:	f043 0308 	orr.w	r3, r3, #8
 800267c:	627b      	str	r3, [r7, #36]	@ 0x24
 800267e:	e019      	b.n	80026b4 <HAL_CAN_IRQHandler+0x336>
 8002680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002682:	f043 0310 	orr.w	r3, r3, #16
 8002686:	627b      	str	r3, [r7, #36]	@ 0x24
 8002688:	e014      	b.n	80026b4 <HAL_CAN_IRQHandler+0x336>
 800268a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268c:	f043 0320 	orr.w	r3, r3, #32
 8002690:	627b      	str	r3, [r7, #36]	@ 0x24
 8002692:	e00f      	b.n	80026b4 <HAL_CAN_IRQHandler+0x336>
 8002694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002696:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800269a:	627b      	str	r3, [r7, #36]	@ 0x24
 800269c:	e00a      	b.n	80026b4 <HAL_CAN_IRQHandler+0x336>
 800269e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80026a6:	e005      	b.n	80026b4 <HAL_CAN_IRQHandler+0x336>
 80026a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80026b0:	e000      	b.n	80026b4 <HAL_CAN_IRQHandler+0x336>
 80026b2:	bf00      	nop
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	699a      	ldr	r2, [r3, #24]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80026c2:	619a      	str	r2, [r3, #24]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2204      	movs	r2, #4
 80026ca:	605a      	str	r2, [r3, #4]
 80026cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d008      	beq.n	80026e4 <HAL_CAN_IRQHandler+0x366>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d8:	431a      	orrs	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	625a      	str	r2, [r3, #36]	@ 0x24
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 f872 	bl	80027c8 <HAL_CAN_ErrorCallback>
 80026e4:	bf00      	nop
 80026e6:	3728      	adds	r7, #40	@ 0x28
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <HAL_CAN_TxMailbox0CompleteCallback>:
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	bf00      	nop
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <HAL_CAN_TxMailbox1CompleteCallback>:
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <HAL_CAN_TxMailbox2CompleteCallback>:
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <HAL_CAN_TxMailbox0AbortCallback>:
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	bf00      	nop
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <HAL_CAN_TxMailbox1AbortCallback>:
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <HAL_CAN_TxMailbox2AbortCallback>:
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <HAL_CAN_RxFifo0FullCallback>:
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <HAL_CAN_RxFifo1MsgPendingCallback>:
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	bf00      	nop
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <HAL_CAN_RxFifo1FullCallback>:
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <HAL_CAN_SleepCallback>:
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <HAL_CAN_WakeUpFromRxMsgCallback>:
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <HAL_CAN_ErrorCallback>:
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <__NVIC_SetPriorityGrouping>:
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f003 0307 	and.w	r3, r3, #7
 80027ea:	60fb      	str	r3, [r7, #12]
 80027ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002820 <__NVIC_SetPriorityGrouping+0x44>)
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	60bb      	str	r3, [r7, #8]
 80027f2:	68ba      	ldr	r2, [r7, #8]
 80027f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027f8:	4013      	ands	r3, r2
 80027fa:	60bb      	str	r3, [r7, #8]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	021a      	lsls	r2, r3, #8
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	4313      	orrs	r3, r2
 8002804:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002808:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800280c:	60bb      	str	r3, [r7, #8]
 800280e:	4a04      	ldr	r2, [pc, #16]	@ (8002820 <__NVIC_SetPriorityGrouping+0x44>)
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	60d3      	str	r3, [r2, #12]
 8002814:	bf00      	nop
 8002816:	3714      	adds	r7, #20
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr
 8002820:	e000ed00 	.word	0xe000ed00

08002824 <__NVIC_GetPriorityGrouping>:
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
 8002828:	4b04      	ldr	r3, [pc, #16]	@ (800283c <__NVIC_GetPriorityGrouping+0x18>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	0a1b      	lsrs	r3, r3, #8
 800282e:	f003 0307 	and.w	r3, r3, #7
 8002832:	4618      	mov	r0, r3
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	e000ed00 	.word	0xe000ed00

08002840 <__NVIC_EnableIRQ>:
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	71fb      	strb	r3, [r7, #7]
 800284a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284e:	2b00      	cmp	r3, #0
 8002850:	db0b      	blt.n	800286a <__NVIC_EnableIRQ+0x2a>
 8002852:	79fb      	ldrb	r3, [r7, #7]
 8002854:	f003 021f 	and.w	r2, r3, #31
 8002858:	4907      	ldr	r1, [pc, #28]	@ (8002878 <__NVIC_EnableIRQ+0x38>)
 800285a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285e:	095b      	lsrs	r3, r3, #5
 8002860:	2001      	movs	r0, #1
 8002862:	fa00 f202 	lsl.w	r2, r0, r2
 8002866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	e000e100 	.word	0xe000e100

0800287c <__NVIC_DisableIRQ>:
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	4603      	mov	r3, r0
 8002884:	71fb      	strb	r3, [r7, #7]
 8002886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288a:	2b00      	cmp	r3, #0
 800288c:	db12      	blt.n	80028b4 <__NVIC_DisableIRQ+0x38>
 800288e:	79fb      	ldrb	r3, [r7, #7]
 8002890:	f003 021f 	and.w	r2, r3, #31
 8002894:	490a      	ldr	r1, [pc, #40]	@ (80028c0 <__NVIC_DisableIRQ+0x44>)
 8002896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289a:	095b      	lsrs	r3, r3, #5
 800289c:	2001      	movs	r0, #1
 800289e:	fa00 f202 	lsl.w	r2, r0, r2
 80028a2:	3320      	adds	r3, #32
 80028a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80028a8:	f3bf 8f4f 	dsb	sy
 80028ac:	bf00      	nop
 80028ae:	f3bf 8f6f 	isb	sy
 80028b2:	bf00      	nop
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr
 80028c0:	e000e100 	.word	0xe000e100

080028c4 <__NVIC_SetPriority>:
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	4603      	mov	r3, r0
 80028cc:	6039      	str	r1, [r7, #0]
 80028ce:	71fb      	strb	r3, [r7, #7]
 80028d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	db0a      	blt.n	80028ee <__NVIC_SetPriority+0x2a>
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	b2da      	uxtb	r2, r3
 80028dc:	490c      	ldr	r1, [pc, #48]	@ (8002910 <__NVIC_SetPriority+0x4c>)
 80028de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e2:	0112      	lsls	r2, r2, #4
 80028e4:	b2d2      	uxtb	r2, r2
 80028e6:	440b      	add	r3, r1
 80028e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 80028ec:	e00a      	b.n	8002904 <__NVIC_SetPriority+0x40>
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	b2da      	uxtb	r2, r3
 80028f2:	4908      	ldr	r1, [pc, #32]	@ (8002914 <__NVIC_SetPriority+0x50>)
 80028f4:	79fb      	ldrb	r3, [r7, #7]
 80028f6:	f003 030f 	and.w	r3, r3, #15
 80028fa:	3b04      	subs	r3, #4
 80028fc:	0112      	lsls	r2, r2, #4
 80028fe:	b2d2      	uxtb	r2, r2
 8002900:	440b      	add	r3, r1
 8002902:	761a      	strb	r2, [r3, #24]
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr
 8002910:	e000e100 	.word	0xe000e100
 8002914:	e000ed00 	.word	0xe000ed00

08002918 <NVIC_EncodePriority>:
 8002918:	b480      	push	{r7}
 800291a:	b089      	sub	sp, #36	@ 0x24
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	61fb      	str	r3, [r7, #28]
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	f1c3 0307 	rsb	r3, r3, #7
 8002932:	2b04      	cmp	r3, #4
 8002934:	bf28      	it	cs
 8002936:	2304      	movcs	r3, #4
 8002938:	61bb      	str	r3, [r7, #24]
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	3304      	adds	r3, #4
 800293e:	2b06      	cmp	r3, #6
 8002940:	d902      	bls.n	8002948 <NVIC_EncodePriority+0x30>
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	3b03      	subs	r3, #3
 8002946:	e000      	b.n	800294a <NVIC_EncodePriority+0x32>
 8002948:	2300      	movs	r3, #0
 800294a:	617b      	str	r3, [r7, #20]
 800294c:	f04f 32ff 	mov.w	r2, #4294967295
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	43da      	mvns	r2, r3
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	401a      	ands	r2, r3
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	409a      	lsls	r2, r3
 8002960:	f04f 31ff 	mov.w	r1, #4294967295
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	fa01 f303 	lsl.w	r3, r1, r3
 800296a:	43d9      	mvns	r1, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	400b      	ands	r3, r1
 8002970:	4313      	orrs	r3, r2
 8002972:	4618      	mov	r0, r3
 8002974:	3724      	adds	r7, #36	@ 0x24
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
	...

08002980 <SysTick_Config>:
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	3b01      	subs	r3, #1
 800298c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002990:	d301      	bcc.n	8002996 <SysTick_Config+0x16>
 8002992:	2301      	movs	r3, #1
 8002994:	e00f      	b.n	80029b6 <SysTick_Config+0x36>
 8002996:	4a0a      	ldr	r2, [pc, #40]	@ (80029c0 <SysTick_Config+0x40>)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	3b01      	subs	r3, #1
 800299c:	6053      	str	r3, [r2, #4]
 800299e:	210f      	movs	r1, #15
 80029a0:	f04f 30ff 	mov.w	r0, #4294967295
 80029a4:	f7ff ff8e 	bl	80028c4 <__NVIC_SetPriority>
 80029a8:	4b05      	ldr	r3, [pc, #20]	@ (80029c0 <SysTick_Config+0x40>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	609a      	str	r2, [r3, #8]
 80029ae:	4b04      	ldr	r3, [pc, #16]	@ (80029c0 <SysTick_Config+0x40>)
 80029b0:	2207      	movs	r2, #7
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	2300      	movs	r3, #0
 80029b6:	4618      	mov	r0, r3
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	e000e010 	.word	0xe000e010

080029c4 <HAL_NVIC_SetPriorityGrouping>:
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f7ff ff05 	bl	80027dc <__NVIC_SetPriorityGrouping>
 80029d2:	bf00      	nop
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <HAL_NVIC_SetPriority>:
 80029da:	b580      	push	{r7, lr}
 80029dc:	b086      	sub	sp, #24
 80029de:	af00      	add	r7, sp, #0
 80029e0:	4603      	mov	r3, r0
 80029e2:	60b9      	str	r1, [r7, #8]
 80029e4:	607a      	str	r2, [r7, #4]
 80029e6:	73fb      	strb	r3, [r7, #15]
 80029e8:	2300      	movs	r3, #0
 80029ea:	617b      	str	r3, [r7, #20]
 80029ec:	f7ff ff1a 	bl	8002824 <__NVIC_GetPriorityGrouping>
 80029f0:	6178      	str	r0, [r7, #20]
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	68b9      	ldr	r1, [r7, #8]
 80029f6:	6978      	ldr	r0, [r7, #20]
 80029f8:	f7ff ff8e 	bl	8002918 <NVIC_EncodePriority>
 80029fc:	4602      	mov	r2, r0
 80029fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a02:	4611      	mov	r1, r2
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff ff5d 	bl	80028c4 <__NVIC_SetPriority>
 8002a0a:	bf00      	nop
 8002a0c:	3718      	adds	r7, #24
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <HAL_NVIC_EnableIRQ>:
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b082      	sub	sp, #8
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	4603      	mov	r3, r0
 8002a1a:	71fb      	strb	r3, [r7, #7]
 8002a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7ff ff0d 	bl	8002840 <__NVIC_EnableIRQ>
 8002a26:	bf00      	nop
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <HAL_NVIC_DisableIRQ>:
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b082      	sub	sp, #8
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	4603      	mov	r3, r0
 8002a36:	71fb      	strb	r3, [r7, #7]
 8002a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7ff ff1d 	bl	800287c <__NVIC_DisableIRQ>
 8002a42:	bf00      	nop
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <HAL_SYSTICK_Config>:
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b082      	sub	sp, #8
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f7ff ff94 	bl	8002980 <SysTick_Config>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
	...

08002a64 <HAL_DMA_Init>:
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	617b      	str	r3, [r7, #20]
 8002a70:	f7fe ffb4 	bl	80019dc <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d101      	bne.n	8002a80 <HAL_DMA_Init+0x1c>
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e099      	b.n	8002bb4 <HAL_DMA_Init+0x150>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2202      	movs	r2, #2
 8002a84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f022 0201 	bic.w	r2, r2, #1
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	e00f      	b.n	8002ac2 <HAL_DMA_Init+0x5e>
 8002aa2:	f7fe ff9b 	bl	80019dc <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b05      	cmp	r3, #5
 8002aae:	d908      	bls.n	8002ac2 <HAL_DMA_Init+0x5e>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2220      	movs	r2, #32
 8002ab4:	655a      	str	r2, [r3, #84]	@ 0x54
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2203      	movs	r2, #3
 8002aba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e078      	b.n	8002bb4 <HAL_DMA_Init+0x150>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1e8      	bne.n	8002aa2 <HAL_DMA_Init+0x3e>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	617b      	str	r3, [r7, #20]
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	4b38      	ldr	r3, [pc, #224]	@ (8002bbc <HAL_DMA_Init+0x158>)
 8002adc:	4013      	ands	r3, r2
 8002ade:	617b      	str	r3, [r7, #20]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685a      	ldr	r2, [r3, #4]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	431a      	orrs	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	431a      	orrs	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	431a      	orrs	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	431a      	orrs	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	431a      	orrs	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	69db      	ldr	r3, [r3, #28]
 8002b06:	431a      	orrs	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a1b      	ldr	r3, [r3, #32]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	617b      	str	r3, [r7, #20]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b18:	2b04      	cmp	r3, #4
 8002b1a:	d107      	bne.n	8002b2c <HAL_DMA_Init+0xc8>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b24:	4313      	orrs	r3, r2
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	617b      	str	r3, [r7, #20]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	697a      	ldr	r2, [r7, #20]
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	617b      	str	r3, [r7, #20]
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	f023 0307 	bic.w	r3, r3, #7
 8002b42:	617b      	str	r3, [r7, #20]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b48:	697a      	ldr	r2, [r7, #20]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	617b      	str	r3, [r7, #20]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b52:	2b04      	cmp	r3, #4
 8002b54:	d117      	bne.n	8002b86 <HAL_DMA_Init+0x122>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	617b      	str	r3, [r7, #20]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00e      	beq.n	8002b86 <HAL_DMA_Init+0x122>
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 fad9 	bl	8003120 <DMA_CheckFifoParam>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d008      	beq.n	8002b86 <HAL_DMA_Init+0x122>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2240      	movs	r2, #64	@ 0x40
 8002b78:	655a      	str	r2, [r3, #84]	@ 0x54
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8002b82:	2301      	movs	r3, #1
 8002b84:	e016      	b.n	8002bb4 <HAL_DMA_Init+0x150>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	615a      	str	r2, [r3, #20]
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 fa90 	bl	80030b4 <DMA_CalcBaseAndBitshift>
 8002b94:	4603      	mov	r3, r0
 8002b96:	60fb      	str	r3, [r7, #12]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b9c:	223f      	movs	r2, #63	@ 0x3f
 8002b9e:	409a      	lsls	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	609a      	str	r2, [r3, #8]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	655a      	str	r2, [r3, #84]	@ 0x54
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3718      	adds	r7, #24
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	f010803f 	.word	0xf010803f

08002bc0 <HAL_DMA_DeInit>:
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_DMA_DeInit+0x12>
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e050      	b.n	8002c74 <HAL_DMA_DeInit+0xb4>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d101      	bne.n	8002be2 <HAL_DMA_DeInit+0x22>
 8002bde:	2302      	movs	r3, #2
 8002be0:	e048      	b.n	8002c74 <HAL_DMA_DeInit+0xb4>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0201 	bic.w	r2, r2, #1
 8002bf0:	601a      	str	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	601a      	str	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	605a      	str	r2, [r3, #4]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2200      	movs	r2, #0
 8002c08:	609a      	str	r2, [r3, #8]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	60da      	str	r2, [r3, #12]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2200      	movs	r2, #0
 8002c18:	611a      	str	r2, [r3, #16]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2221      	movs	r2, #33	@ 0x21
 8002c20:	615a      	str	r2, [r3, #20]
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 fa46 	bl	80030b4 <DMA_CalcBaseAndBitshift>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	641a      	str	r2, [r3, #64]	@ 0x40
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	645a      	str	r2, [r3, #68]	@ 0x44
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	649a      	str	r2, [r3, #72]	@ 0x48
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	651a      	str	r2, [r3, #80]	@ 0x50
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c54:	223f      	movs	r2, #63	@ 0x3f
 8002c56:	409a      	lsls	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	609a      	str	r2, [r3, #8]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	655a      	str	r2, [r3, #84]	@ 0x54
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8002c72:	2300      	movs	r3, #0
 8002c74:	4618      	mov	r0, r3
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <HAL_DMA_Abort>:
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c88:	60fb      	str	r3, [r7, #12]
 8002c8a:	f7fe fea7 	bl	80019dc <HAL_GetTick>
 8002c8e:	60b8      	str	r0, [r7, #8]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d008      	beq.n	8002cae <HAL_DMA_Abort+0x32>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2280      	movs	r2, #128	@ 0x80
 8002ca0:	655a      	str	r2, [r3, #84]	@ 0x54
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8002caa:	2301      	movs	r3, #1
 8002cac:	e052      	b.n	8002d54 <HAL_DMA_Abort+0xd8>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f022 0216 	bic.w	r2, r2, #22
 8002cbc:	601a      	str	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	695a      	ldr	r2, [r3, #20]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ccc:	615a      	str	r2, [r3, #20]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d103      	bne.n	8002cde <HAL_DMA_Abort+0x62>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d007      	beq.n	8002cee <HAL_DMA_Abort+0x72>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 0208 	bic.w	r2, r2, #8
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f022 0201 	bic.w	r2, r2, #1
 8002cfc:	601a      	str	r2, [r3, #0]
 8002cfe:	e013      	b.n	8002d28 <HAL_DMA_Abort+0xac>
 8002d00:	f7fe fe6c 	bl	80019dc <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b05      	cmp	r3, #5
 8002d0c:	d90c      	bls.n	8002d28 <HAL_DMA_Abort+0xac>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2220      	movs	r2, #32
 8002d12:	655a      	str	r2, [r3, #84]	@ 0x54
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2203      	movs	r2, #3
 8002d18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8002d24:	2303      	movs	r3, #3
 8002d26:	e015      	b.n	8002d54 <HAL_DMA_Abort+0xd8>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1e4      	bne.n	8002d00 <HAL_DMA_Abort+0x84>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d3a:	223f      	movs	r2, #63	@ 0x3f
 8002d3c:	409a      	lsls	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	609a      	str	r2, [r3, #8]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8002d52:	2300      	movs	r3, #0
 8002d54:	4618      	mov	r0, r3
 8002d56:	3710      	adds	r7, #16
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <HAL_DMA_Abort_IT>:
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d004      	beq.n	8002d7a <HAL_DMA_Abort_IT+0x1e>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2280      	movs	r2, #128	@ 0x80
 8002d74:	655a      	str	r2, [r3, #84]	@ 0x54
 8002d76:	2301      	movs	r3, #1
 8002d78:	e00c      	b.n	8002d94 <HAL_DMA_Abort_IT+0x38>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2205      	movs	r2, #5
 8002d7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f022 0201 	bic.w	r2, r2, #1
 8002d90:	601a      	str	r2, [r3, #0]
 8002d92:	2300      	movs	r3, #0
 8002d94:	4618      	mov	r0, r3
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <HAL_DMA_IRQHandler>:
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	2300      	movs	r3, #0
 8002daa:	60bb      	str	r3, [r7, #8]
 8002dac:	4b8e      	ldr	r3, [pc, #568]	@ (8002fe8 <HAL_DMA_IRQHandler+0x248>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a8e      	ldr	r2, [pc, #568]	@ (8002fec <HAL_DMA_IRQHandler+0x24c>)
 8002db2:	fba2 2303 	umull	r2, r3, r2, r3
 8002db6:	0a9b      	lsrs	r3, r3, #10
 8002db8:	617b      	str	r3, [r7, #20]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dbe:	613b      	str	r3, [r7, #16]
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	60fb      	str	r3, [r7, #12]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dca:	2208      	movs	r2, #8
 8002dcc:	409a      	lsls	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d01a      	beq.n	8002e0c <HAL_DMA_IRQHandler+0x6c>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d013      	beq.n	8002e0c <HAL_DMA_IRQHandler+0x6c>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f022 0204 	bic.w	r2, r2, #4
 8002df2:	601a      	str	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002df8:	2208      	movs	r2, #8
 8002dfa:	409a      	lsls	r2, r3
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	609a      	str	r2, [r3, #8]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e04:	f043 0201 	orr.w	r2, r3, #1
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	655a      	str	r2, [r3, #84]	@ 0x54
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e10:	2201      	movs	r2, #1
 8002e12:	409a      	lsls	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	4013      	ands	r3, r2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d012      	beq.n	8002e42 <HAL_DMA_IRQHandler+0xa2>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00b      	beq.n	8002e42 <HAL_DMA_IRQHandler+0xa2>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e2e:	2201      	movs	r2, #1
 8002e30:	409a      	lsls	r2, r3
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	609a      	str	r2, [r3, #8]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e3a:	f043 0202 	orr.w	r2, r3, #2
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	655a      	str	r2, [r3, #84]	@ 0x54
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e46:	2204      	movs	r2, #4
 8002e48:	409a      	lsls	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d012      	beq.n	8002e78 <HAL_DMA_IRQHandler+0xd8>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00b      	beq.n	8002e78 <HAL_DMA_IRQHandler+0xd8>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e64:	2204      	movs	r2, #4
 8002e66:	409a      	lsls	r2, r3
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	609a      	str	r2, [r3, #8]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e70:	f043 0204 	orr.w	r2, r3, #4
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	655a      	str	r2, [r3, #84]	@ 0x54
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e7c:	2210      	movs	r2, #16
 8002e7e:	409a      	lsls	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	4013      	ands	r3, r2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d043      	beq.n	8002f10 <HAL_DMA_IRQHandler+0x170>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0308 	and.w	r3, r3, #8
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d03c      	beq.n	8002f10 <HAL_DMA_IRQHandler+0x170>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e9a:	2210      	movs	r2, #16
 8002e9c:	409a      	lsls	r2, r3
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	609a      	str	r2, [r3, #8]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d018      	beq.n	8002ee2 <HAL_DMA_IRQHandler+0x142>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d108      	bne.n	8002ed0 <HAL_DMA_IRQHandler+0x130>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d024      	beq.n	8002f10 <HAL_DMA_IRQHandler+0x170>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	4798      	blx	r3
 8002ece:	e01f      	b.n	8002f10 <HAL_DMA_IRQHandler+0x170>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d01b      	beq.n	8002f10 <HAL_DMA_IRQHandler+0x170>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	4798      	blx	r3
 8002ee0:	e016      	b.n	8002f10 <HAL_DMA_IRQHandler+0x170>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d107      	bne.n	8002f00 <HAL_DMA_IRQHandler+0x160>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0208 	bic.w	r2, r2, #8
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d003      	beq.n	8002f10 <HAL_DMA_IRQHandler+0x170>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	4798      	blx	r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f14:	2220      	movs	r2, #32
 8002f16:	409a      	lsls	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	f000 808f 	beq.w	8003040 <HAL_DMA_IRQHandler+0x2a0>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0310 	and.w	r3, r3, #16
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f000 8087 	beq.w	8003040 <HAL_DMA_IRQHandler+0x2a0>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f36:	2220      	movs	r2, #32
 8002f38:	409a      	lsls	r2, r3
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	609a      	str	r2, [r3, #8]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b05      	cmp	r3, #5
 8002f48:	d136      	bne.n	8002fb8 <HAL_DMA_IRQHandler+0x218>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 0216 	bic.w	r2, r2, #22
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	695a      	ldr	r2, [r3, #20]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f68:	615a      	str	r2, [r3, #20]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d103      	bne.n	8002f7a <HAL_DMA_IRQHandler+0x1da>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d007      	beq.n	8002f8a <HAL_DMA_IRQHandler+0x1ea>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f022 0208 	bic.w	r2, r2, #8
 8002f88:	601a      	str	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f8e:	223f      	movs	r2, #63	@ 0x3f
 8002f90:	409a      	lsls	r2, r3
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	609a      	str	r2, [r3, #8]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d07e      	beq.n	80030ac <HAL_DMA_IRQHandler+0x30c>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	4798      	blx	r3
 8002fb6:	e079      	b.n	80030ac <HAL_DMA_IRQHandler+0x30c>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d01d      	beq.n	8003002 <HAL_DMA_IRQHandler+0x262>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d10d      	bne.n	8002ff0 <HAL_DMA_IRQHandler+0x250>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d031      	beq.n	8003040 <HAL_DMA_IRQHandler+0x2a0>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	4798      	blx	r3
 8002fe4:	e02c      	b.n	8003040 <HAL_DMA_IRQHandler+0x2a0>
 8002fe6:	bf00      	nop
 8002fe8:	2000000c 	.word	0x2000000c
 8002fec:	1b4e81b5 	.word	0x1b4e81b5
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d023      	beq.n	8003040 <HAL_DMA_IRQHandler+0x2a0>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	4798      	blx	r3
 8003000:	e01e      	b.n	8003040 <HAL_DMA_IRQHandler+0x2a0>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800300c:	2b00      	cmp	r3, #0
 800300e:	d10f      	bne.n	8003030 <HAL_DMA_IRQHandler+0x290>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f022 0210 	bic.w	r2, r2, #16
 800301e:	601a      	str	r2, [r3, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003034:	2b00      	cmp	r3, #0
 8003036:	d003      	beq.n	8003040 <HAL_DMA_IRQHandler+0x2a0>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	4798      	blx	r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003044:	2b00      	cmp	r3, #0
 8003046:	d032      	beq.n	80030ae <HAL_DMA_IRQHandler+0x30e>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	2b00      	cmp	r3, #0
 8003052:	d022      	beq.n	800309a <HAL_DMA_IRQHandler+0x2fa>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2205      	movs	r2, #5
 8003058:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f022 0201 	bic.w	r2, r2, #1
 800306a:	601a      	str	r2, [r3, #0]
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	3301      	adds	r3, #1
 8003070:	60bb      	str	r3, [r7, #8]
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	429a      	cmp	r2, r3
 8003076:	d307      	bcc.n	8003088 <HAL_DMA_IRQHandler+0x2e8>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1f2      	bne.n	800306c <HAL_DMA_IRQHandler+0x2cc>
 8003086:	e000      	b.n	800308a <HAL_DMA_IRQHandler+0x2ea>
 8003088:	bf00      	nop
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2201      	movs	r2, #1
 800308e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d005      	beq.n	80030ae <HAL_DMA_IRQHandler+0x30e>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	4798      	blx	r3
 80030aa:	e000      	b.n	80030ae <HAL_DMA_IRQHandler+0x30e>
 80030ac:	bf00      	nop
 80030ae:	3718      	adds	r7, #24
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <DMA_CalcBaseAndBitshift>:
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	3b10      	subs	r3, #16
 80030c4:	4a14      	ldr	r2, [pc, #80]	@ (8003118 <DMA_CalcBaseAndBitshift+0x64>)
 80030c6:	fba2 2303 	umull	r2, r3, r2, r3
 80030ca:	091b      	lsrs	r3, r3, #4
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	4a13      	ldr	r2, [pc, #76]	@ (800311c <DMA_CalcBaseAndBitshift+0x68>)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	4413      	add	r3, r2
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	461a      	mov	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	65da      	str	r2, [r3, #92]	@ 0x5c
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2b03      	cmp	r3, #3
 80030e0:	d909      	bls.n	80030f6 <DMA_CalcBaseAndBitshift+0x42>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80030ea:	f023 0303 	bic.w	r3, r3, #3
 80030ee:	1d1a      	adds	r2, r3, #4
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	659a      	str	r2, [r3, #88]	@ 0x58
 80030f4:	e007      	b.n	8003106 <DMA_CalcBaseAndBitshift+0x52>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80030fe:	f023 0303 	bic.w	r3, r3, #3
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	6593      	str	r3, [r2, #88]	@ 0x58
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800310a:	4618      	mov	r0, r3
 800310c:	3714      	adds	r7, #20
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	aaaaaaab 	.word	0xaaaaaaab
 800311c:	0800ce38 	.word	0x0800ce38

08003120 <DMA_CheckFifoParam>:
 8003120:	b480      	push	{r7}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	2300      	movs	r3, #0
 800312a:	73fb      	strb	r3, [r7, #15]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003130:	60bb      	str	r3, [r7, #8]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d11f      	bne.n	800317a <DMA_CheckFifoParam+0x5a>
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	2b03      	cmp	r3, #3
 800313e:	d856      	bhi.n	80031ee <DMA_CheckFifoParam+0xce>
 8003140:	a201      	add	r2, pc, #4	@ (adr r2, 8003148 <DMA_CheckFifoParam+0x28>)
 8003142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003146:	bf00      	nop
 8003148:	08003159 	.word	0x08003159
 800314c:	0800316b 	.word	0x0800316b
 8003150:	08003159 	.word	0x08003159
 8003154:	080031ef 	.word	0x080031ef
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800315c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d046      	beq.n	80031f2 <DMA_CheckFifoParam+0xd2>
 8003164:	2301      	movs	r3, #1
 8003166:	73fb      	strb	r3, [r7, #15]
 8003168:	e043      	b.n	80031f2 <DMA_CheckFifoParam+0xd2>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800316e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003172:	d140      	bne.n	80031f6 <DMA_CheckFifoParam+0xd6>
 8003174:	2301      	movs	r3, #1
 8003176:	73fb      	strb	r3, [r7, #15]
 8003178:	e03d      	b.n	80031f6 <DMA_CheckFifoParam+0xd6>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003182:	d121      	bne.n	80031c8 <DMA_CheckFifoParam+0xa8>
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	2b03      	cmp	r3, #3
 8003188:	d837      	bhi.n	80031fa <DMA_CheckFifoParam+0xda>
 800318a:	a201      	add	r2, pc, #4	@ (adr r2, 8003190 <DMA_CheckFifoParam+0x70>)
 800318c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003190:	080031a1 	.word	0x080031a1
 8003194:	080031a7 	.word	0x080031a7
 8003198:	080031a1 	.word	0x080031a1
 800319c:	080031b9 	.word	0x080031b9
 80031a0:	2301      	movs	r3, #1
 80031a2:	73fb      	strb	r3, [r7, #15]
 80031a4:	e030      	b.n	8003208 <DMA_CheckFifoParam+0xe8>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031aa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d025      	beq.n	80031fe <DMA_CheckFifoParam+0xde>
 80031b2:	2301      	movs	r3, #1
 80031b4:	73fb      	strb	r3, [r7, #15]
 80031b6:	e022      	b.n	80031fe <DMA_CheckFifoParam+0xde>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031bc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80031c0:	d11f      	bne.n	8003202 <DMA_CheckFifoParam+0xe2>
 80031c2:	2301      	movs	r3, #1
 80031c4:	73fb      	strb	r3, [r7, #15]
 80031c6:	e01c      	b.n	8003202 <DMA_CheckFifoParam+0xe2>
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d903      	bls.n	80031d6 <DMA_CheckFifoParam+0xb6>
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	2b03      	cmp	r3, #3
 80031d2:	d003      	beq.n	80031dc <DMA_CheckFifoParam+0xbc>
 80031d4:	e018      	b.n	8003208 <DMA_CheckFifoParam+0xe8>
 80031d6:	2301      	movs	r3, #1
 80031d8:	73fb      	strb	r3, [r7, #15]
 80031da:	e015      	b.n	8003208 <DMA_CheckFifoParam+0xe8>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d00e      	beq.n	8003206 <DMA_CheckFifoParam+0xe6>
 80031e8:	2301      	movs	r3, #1
 80031ea:	73fb      	strb	r3, [r7, #15]
 80031ec:	e00b      	b.n	8003206 <DMA_CheckFifoParam+0xe6>
 80031ee:	bf00      	nop
 80031f0:	e00a      	b.n	8003208 <DMA_CheckFifoParam+0xe8>
 80031f2:	bf00      	nop
 80031f4:	e008      	b.n	8003208 <DMA_CheckFifoParam+0xe8>
 80031f6:	bf00      	nop
 80031f8:	e006      	b.n	8003208 <DMA_CheckFifoParam+0xe8>
 80031fa:	bf00      	nop
 80031fc:	e004      	b.n	8003208 <DMA_CheckFifoParam+0xe8>
 80031fe:	bf00      	nop
 8003200:	e002      	b.n	8003208 <DMA_CheckFifoParam+0xe8>
 8003202:	bf00      	nop
 8003204:	e000      	b.n	8003208 <DMA_CheckFifoParam+0xe8>
 8003206:	bf00      	nop
 8003208:	7bfb      	ldrb	r3, [r7, #15]
 800320a:	4618      	mov	r0, r3
 800320c:	3714      	adds	r7, #20
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop

08003218 <HAL_GPIO_Init>:
 8003218:	b480      	push	{r7}
 800321a:	b089      	sub	sp, #36	@ 0x24
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
 8003222:	2300      	movs	r3, #0
 8003224:	617b      	str	r3, [r7, #20]
 8003226:	2300      	movs	r3, #0
 8003228:	613b      	str	r3, [r7, #16]
 800322a:	2300      	movs	r3, #0
 800322c:	61bb      	str	r3, [r7, #24]
 800322e:	2300      	movs	r3, #0
 8003230:	61fb      	str	r3, [r7, #28]
 8003232:	e16b      	b.n	800350c <HAL_GPIO_Init+0x2f4>
 8003234:	2201      	movs	r2, #1
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	617b      	str	r3, [r7, #20]
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	4013      	ands	r3, r2
 8003246:	613b      	str	r3, [r7, #16]
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	429a      	cmp	r2, r3
 800324e:	f040 815a 	bne.w	8003506 <HAL_GPIO_Init+0x2ee>
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f003 0303 	and.w	r3, r3, #3
 800325a:	2b01      	cmp	r3, #1
 800325c:	d005      	beq.n	800326a <HAL_GPIO_Init+0x52>
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f003 0303 	and.w	r3, r3, #3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d130      	bne.n	80032cc <HAL_GPIO_Init+0xb4>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	61bb      	str	r3, [r7, #24]
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	2203      	movs	r2, #3
 8003276:	fa02 f303 	lsl.w	r3, r2, r3
 800327a:	43db      	mvns	r3, r3
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	4013      	ands	r3, r2
 8003280:	61bb      	str	r3, [r7, #24]
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	68da      	ldr	r2, [r3, #12]
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	fa02 f303 	lsl.w	r3, r2, r3
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	4313      	orrs	r3, r2
 8003292:	61bb      	str	r3, [r7, #24]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	69ba      	ldr	r2, [r7, #24]
 8003298:	609a      	str	r2, [r3, #8]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	61bb      	str	r3, [r7, #24]
 80032a0:	2201      	movs	r2, #1
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	fa02 f303 	lsl.w	r3, r2, r3
 80032a8:	43db      	mvns	r3, r3
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	4013      	ands	r3, r2
 80032ae:	61bb      	str	r3, [r7, #24]
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	091b      	lsrs	r3, r3, #4
 80032b6:	f003 0201 	and.w	r2, r3, #1
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	fa02 f303 	lsl.w	r3, r2, r3
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	61bb      	str	r3, [r7, #24]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	605a      	str	r2, [r3, #4]
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f003 0303 	and.w	r3, r3, #3
 80032d4:	2b03      	cmp	r3, #3
 80032d6:	d017      	beq.n	8003308 <HAL_GPIO_Init+0xf0>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	61bb      	str	r3, [r7, #24]
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	2203      	movs	r2, #3
 80032e4:	fa02 f303 	lsl.w	r3, r2, r3
 80032e8:	43db      	mvns	r3, r3
 80032ea:	69ba      	ldr	r2, [r7, #24]
 80032ec:	4013      	ands	r3, r2
 80032ee:	61bb      	str	r3, [r7, #24]
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	689a      	ldr	r2, [r3, #8]
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	4313      	orrs	r3, r2
 8003300:	61bb      	str	r3, [r7, #24]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	60da      	str	r2, [r3, #12]
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f003 0303 	and.w	r3, r3, #3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d123      	bne.n	800335c <HAL_GPIO_Init+0x144>
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	08da      	lsrs	r2, r3, #3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	3208      	adds	r2, #8
 800331c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003320:	61bb      	str	r3, [r7, #24]
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	f003 0307 	and.w	r3, r3, #7
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	220f      	movs	r2, #15
 800332c:	fa02 f303 	lsl.w	r3, r2, r3
 8003330:	43db      	mvns	r3, r3
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	4013      	ands	r3, r2
 8003336:	61bb      	str	r3, [r7, #24]
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	691a      	ldr	r2, [r3, #16]
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	f003 0307 	and.w	r3, r3, #7
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	4313      	orrs	r3, r2
 800334c:	61bb      	str	r3, [r7, #24]
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	08da      	lsrs	r2, r3, #3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	3208      	adds	r2, #8
 8003356:	69b9      	ldr	r1, [r7, #24]
 8003358:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	61bb      	str	r3, [r7, #24]
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	2203      	movs	r2, #3
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	43db      	mvns	r3, r3
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	4013      	ands	r3, r2
 8003372:	61bb      	str	r3, [r7, #24]
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f003 0203 	and.w	r2, r3, #3
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	fa02 f303 	lsl.w	r3, r2, r3
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	4313      	orrs	r3, r2
 8003388:	61bb      	str	r3, [r7, #24]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	601a      	str	r2, [r3, #0]
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003398:	2b00      	cmp	r3, #0
 800339a:	f000 80b4 	beq.w	8003506 <HAL_GPIO_Init+0x2ee>
 800339e:	2300      	movs	r3, #0
 80033a0:	60fb      	str	r3, [r7, #12]
 80033a2:	4b60      	ldr	r3, [pc, #384]	@ (8003524 <HAL_GPIO_Init+0x30c>)
 80033a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033a6:	4a5f      	ldr	r2, [pc, #380]	@ (8003524 <HAL_GPIO_Init+0x30c>)
 80033a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80033ae:	4b5d      	ldr	r3, [pc, #372]	@ (8003524 <HAL_GPIO_Init+0x30c>)
 80033b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033b6:	60fb      	str	r3, [r7, #12]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	4a5b      	ldr	r2, [pc, #364]	@ (8003528 <HAL_GPIO_Init+0x310>)
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	089b      	lsrs	r3, r3, #2
 80033c0:	3302      	adds	r3, #2
 80033c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033c6:	61bb      	str	r3, [r7, #24]
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	f003 0303 	and.w	r3, r3, #3
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	220f      	movs	r2, #15
 80033d2:	fa02 f303 	lsl.w	r3, r2, r3
 80033d6:	43db      	mvns	r3, r3
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	4013      	ands	r3, r2
 80033dc:	61bb      	str	r3, [r7, #24]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a52      	ldr	r2, [pc, #328]	@ (800352c <HAL_GPIO_Init+0x314>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d02b      	beq.n	800343e <HAL_GPIO_Init+0x226>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a51      	ldr	r2, [pc, #324]	@ (8003530 <HAL_GPIO_Init+0x318>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d025      	beq.n	800343a <HAL_GPIO_Init+0x222>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a50      	ldr	r2, [pc, #320]	@ (8003534 <HAL_GPIO_Init+0x31c>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d01f      	beq.n	8003436 <HAL_GPIO_Init+0x21e>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a4f      	ldr	r2, [pc, #316]	@ (8003538 <HAL_GPIO_Init+0x320>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d019      	beq.n	8003432 <HAL_GPIO_Init+0x21a>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a4e      	ldr	r2, [pc, #312]	@ (800353c <HAL_GPIO_Init+0x324>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d013      	beq.n	800342e <HAL_GPIO_Init+0x216>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a4d      	ldr	r2, [pc, #308]	@ (8003540 <HAL_GPIO_Init+0x328>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d00d      	beq.n	800342a <HAL_GPIO_Init+0x212>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a4c      	ldr	r2, [pc, #304]	@ (8003544 <HAL_GPIO_Init+0x32c>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d007      	beq.n	8003426 <HAL_GPIO_Init+0x20e>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a4b      	ldr	r2, [pc, #300]	@ (8003548 <HAL_GPIO_Init+0x330>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d101      	bne.n	8003422 <HAL_GPIO_Init+0x20a>
 800341e:	2307      	movs	r3, #7
 8003420:	e00e      	b.n	8003440 <HAL_GPIO_Init+0x228>
 8003422:	2308      	movs	r3, #8
 8003424:	e00c      	b.n	8003440 <HAL_GPIO_Init+0x228>
 8003426:	2306      	movs	r3, #6
 8003428:	e00a      	b.n	8003440 <HAL_GPIO_Init+0x228>
 800342a:	2305      	movs	r3, #5
 800342c:	e008      	b.n	8003440 <HAL_GPIO_Init+0x228>
 800342e:	2304      	movs	r3, #4
 8003430:	e006      	b.n	8003440 <HAL_GPIO_Init+0x228>
 8003432:	2303      	movs	r3, #3
 8003434:	e004      	b.n	8003440 <HAL_GPIO_Init+0x228>
 8003436:	2302      	movs	r3, #2
 8003438:	e002      	b.n	8003440 <HAL_GPIO_Init+0x228>
 800343a:	2301      	movs	r3, #1
 800343c:	e000      	b.n	8003440 <HAL_GPIO_Init+0x228>
 800343e:	2300      	movs	r3, #0
 8003440:	69fa      	ldr	r2, [r7, #28]
 8003442:	f002 0203 	and.w	r2, r2, #3
 8003446:	0092      	lsls	r2, r2, #2
 8003448:	4093      	lsls	r3, r2
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	4313      	orrs	r3, r2
 800344e:	61bb      	str	r3, [r7, #24]
 8003450:	4935      	ldr	r1, [pc, #212]	@ (8003528 <HAL_GPIO_Init+0x310>)
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	089b      	lsrs	r3, r3, #2
 8003456:	3302      	adds	r3, #2
 8003458:	69ba      	ldr	r2, [r7, #24]
 800345a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800345e:	4b3b      	ldr	r3, [pc, #236]	@ (800354c <HAL_GPIO_Init+0x334>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	61bb      	str	r3, [r7, #24]
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	43db      	mvns	r3, r3
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	4013      	ands	r3, r2
 800346c:	61bb      	str	r3, [r7, #24]
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d003      	beq.n	8003482 <HAL_GPIO_Init+0x26a>
 800347a:	69ba      	ldr	r2, [r7, #24]
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	4313      	orrs	r3, r2
 8003480:	61bb      	str	r3, [r7, #24]
 8003482:	4a32      	ldr	r2, [pc, #200]	@ (800354c <HAL_GPIO_Init+0x334>)
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	6093      	str	r3, [r2, #8]
 8003488:	4b30      	ldr	r3, [pc, #192]	@ (800354c <HAL_GPIO_Init+0x334>)
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	61bb      	str	r3, [r7, #24]
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	43db      	mvns	r3, r3
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	4013      	ands	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d003      	beq.n	80034ac <HAL_GPIO_Init+0x294>
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	61bb      	str	r3, [r7, #24]
 80034ac:	4a27      	ldr	r2, [pc, #156]	@ (800354c <HAL_GPIO_Init+0x334>)
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	60d3      	str	r3, [r2, #12]
 80034b2:	4b26      	ldr	r3, [pc, #152]	@ (800354c <HAL_GPIO_Init+0x334>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	61bb      	str	r3, [r7, #24]
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	43db      	mvns	r3, r3
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	4013      	ands	r3, r2
 80034c0:	61bb      	str	r3, [r7, #24]
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d003      	beq.n	80034d6 <HAL_GPIO_Init+0x2be>
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	61bb      	str	r3, [r7, #24]
 80034d6:	4a1d      	ldr	r2, [pc, #116]	@ (800354c <HAL_GPIO_Init+0x334>)
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	6053      	str	r3, [r2, #4]
 80034dc:	4b1b      	ldr	r3, [pc, #108]	@ (800354c <HAL_GPIO_Init+0x334>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	61bb      	str	r3, [r7, #24]
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	43db      	mvns	r3, r3
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	4013      	ands	r3, r2
 80034ea:	61bb      	str	r3, [r7, #24]
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d003      	beq.n	8003500 <HAL_GPIO_Init+0x2e8>
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	61bb      	str	r3, [r7, #24]
 8003500:	4a12      	ldr	r2, [pc, #72]	@ (800354c <HAL_GPIO_Init+0x334>)
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	6013      	str	r3, [r2, #0]
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	3301      	adds	r3, #1
 800350a:	61fb      	str	r3, [r7, #28]
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	2b0f      	cmp	r3, #15
 8003510:	f67f ae90 	bls.w	8003234 <HAL_GPIO_Init+0x1c>
 8003514:	bf00      	nop
 8003516:	bf00      	nop
 8003518:	3724      	adds	r7, #36	@ 0x24
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	40023800 	.word	0x40023800
 8003528:	40013800 	.word	0x40013800
 800352c:	40020000 	.word	0x40020000
 8003530:	40020400 	.word	0x40020400
 8003534:	40020800 	.word	0x40020800
 8003538:	40020c00 	.word	0x40020c00
 800353c:	40021000 	.word	0x40021000
 8003540:	40021400 	.word	0x40021400
 8003544:	40021800 	.word	0x40021800
 8003548:	40021c00 	.word	0x40021c00
 800354c:	40013c00 	.word	0x40013c00

08003550 <HAL_GPIO_DeInit>:
 8003550:	b480      	push	{r7}
 8003552:	b087      	sub	sp, #28
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
 800355a:	2300      	movs	r3, #0
 800355c:	613b      	str	r3, [r7, #16]
 800355e:	2300      	movs	r3, #0
 8003560:	60fb      	str	r3, [r7, #12]
 8003562:	2300      	movs	r3, #0
 8003564:	60bb      	str	r3, [r7, #8]
 8003566:	2300      	movs	r3, #0
 8003568:	617b      	str	r3, [r7, #20]
 800356a:	e0cd      	b.n	8003708 <HAL_GPIO_DeInit+0x1b8>
 800356c:	2201      	movs	r2, #1
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	fa02 f303 	lsl.w	r3, r2, r3
 8003574:	613b      	str	r3, [r7, #16]
 8003576:	683a      	ldr	r2, [r7, #0]
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	4013      	ands	r3, r2
 800357c:	60fb      	str	r3, [r7, #12]
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	429a      	cmp	r2, r3
 8003584:	f040 80bd 	bne.w	8003702 <HAL_GPIO_DeInit+0x1b2>
 8003588:	4a65      	ldr	r2, [pc, #404]	@ (8003720 <HAL_GPIO_DeInit+0x1d0>)
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	089b      	lsrs	r3, r3, #2
 800358e:	3302      	adds	r3, #2
 8003590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003594:	60bb      	str	r3, [r7, #8]
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	f003 0303 	and.w	r3, r3, #3
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	220f      	movs	r2, #15
 80035a0:	fa02 f303 	lsl.w	r3, r2, r3
 80035a4:	68ba      	ldr	r2, [r7, #8]
 80035a6:	4013      	ands	r3, r2
 80035a8:	60bb      	str	r3, [r7, #8]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a5d      	ldr	r2, [pc, #372]	@ (8003724 <HAL_GPIO_DeInit+0x1d4>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d02b      	beq.n	800360a <HAL_GPIO_DeInit+0xba>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a5c      	ldr	r2, [pc, #368]	@ (8003728 <HAL_GPIO_DeInit+0x1d8>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d025      	beq.n	8003606 <HAL_GPIO_DeInit+0xb6>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a5b      	ldr	r2, [pc, #364]	@ (800372c <HAL_GPIO_DeInit+0x1dc>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d01f      	beq.n	8003602 <HAL_GPIO_DeInit+0xb2>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a5a      	ldr	r2, [pc, #360]	@ (8003730 <HAL_GPIO_DeInit+0x1e0>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d019      	beq.n	80035fe <HAL_GPIO_DeInit+0xae>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a59      	ldr	r2, [pc, #356]	@ (8003734 <HAL_GPIO_DeInit+0x1e4>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d013      	beq.n	80035fa <HAL_GPIO_DeInit+0xaa>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a58      	ldr	r2, [pc, #352]	@ (8003738 <HAL_GPIO_DeInit+0x1e8>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d00d      	beq.n	80035f6 <HAL_GPIO_DeInit+0xa6>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a57      	ldr	r2, [pc, #348]	@ (800373c <HAL_GPIO_DeInit+0x1ec>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d007      	beq.n	80035f2 <HAL_GPIO_DeInit+0xa2>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a56      	ldr	r2, [pc, #344]	@ (8003740 <HAL_GPIO_DeInit+0x1f0>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d101      	bne.n	80035ee <HAL_GPIO_DeInit+0x9e>
 80035ea:	2307      	movs	r3, #7
 80035ec:	e00e      	b.n	800360c <HAL_GPIO_DeInit+0xbc>
 80035ee:	2308      	movs	r3, #8
 80035f0:	e00c      	b.n	800360c <HAL_GPIO_DeInit+0xbc>
 80035f2:	2306      	movs	r3, #6
 80035f4:	e00a      	b.n	800360c <HAL_GPIO_DeInit+0xbc>
 80035f6:	2305      	movs	r3, #5
 80035f8:	e008      	b.n	800360c <HAL_GPIO_DeInit+0xbc>
 80035fa:	2304      	movs	r3, #4
 80035fc:	e006      	b.n	800360c <HAL_GPIO_DeInit+0xbc>
 80035fe:	2303      	movs	r3, #3
 8003600:	e004      	b.n	800360c <HAL_GPIO_DeInit+0xbc>
 8003602:	2302      	movs	r3, #2
 8003604:	e002      	b.n	800360c <HAL_GPIO_DeInit+0xbc>
 8003606:	2301      	movs	r3, #1
 8003608:	e000      	b.n	800360c <HAL_GPIO_DeInit+0xbc>
 800360a:	2300      	movs	r3, #0
 800360c:	697a      	ldr	r2, [r7, #20]
 800360e:	f002 0203 	and.w	r2, r2, #3
 8003612:	0092      	lsls	r2, r2, #2
 8003614:	4093      	lsls	r3, r2
 8003616:	68ba      	ldr	r2, [r7, #8]
 8003618:	429a      	cmp	r2, r3
 800361a:	d132      	bne.n	8003682 <HAL_GPIO_DeInit+0x132>
 800361c:	4b49      	ldr	r3, [pc, #292]	@ (8003744 <HAL_GPIO_DeInit+0x1f4>)
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	43db      	mvns	r3, r3
 8003624:	4947      	ldr	r1, [pc, #284]	@ (8003744 <HAL_GPIO_DeInit+0x1f4>)
 8003626:	4013      	ands	r3, r2
 8003628:	600b      	str	r3, [r1, #0]
 800362a:	4b46      	ldr	r3, [pc, #280]	@ (8003744 <HAL_GPIO_DeInit+0x1f4>)
 800362c:	685a      	ldr	r2, [r3, #4]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	43db      	mvns	r3, r3
 8003632:	4944      	ldr	r1, [pc, #272]	@ (8003744 <HAL_GPIO_DeInit+0x1f4>)
 8003634:	4013      	ands	r3, r2
 8003636:	604b      	str	r3, [r1, #4]
 8003638:	4b42      	ldr	r3, [pc, #264]	@ (8003744 <HAL_GPIO_DeInit+0x1f4>)
 800363a:	68da      	ldr	r2, [r3, #12]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	43db      	mvns	r3, r3
 8003640:	4940      	ldr	r1, [pc, #256]	@ (8003744 <HAL_GPIO_DeInit+0x1f4>)
 8003642:	4013      	ands	r3, r2
 8003644:	60cb      	str	r3, [r1, #12]
 8003646:	4b3f      	ldr	r3, [pc, #252]	@ (8003744 <HAL_GPIO_DeInit+0x1f4>)
 8003648:	689a      	ldr	r2, [r3, #8]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	43db      	mvns	r3, r3
 800364e:	493d      	ldr	r1, [pc, #244]	@ (8003744 <HAL_GPIO_DeInit+0x1f4>)
 8003650:	4013      	ands	r3, r2
 8003652:	608b      	str	r3, [r1, #8]
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	f003 0303 	and.w	r3, r3, #3
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	220f      	movs	r2, #15
 800365e:	fa02 f303 	lsl.w	r3, r2, r3
 8003662:	60bb      	str	r3, [r7, #8]
 8003664:	4a2e      	ldr	r2, [pc, #184]	@ (8003720 <HAL_GPIO_DeInit+0x1d0>)
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	089b      	lsrs	r3, r3, #2
 800366a:	3302      	adds	r3, #2
 800366c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	43da      	mvns	r2, r3
 8003674:	482a      	ldr	r0, [pc, #168]	@ (8003720 <HAL_GPIO_DeInit+0x1d0>)
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	089b      	lsrs	r3, r3, #2
 800367a:	400a      	ands	r2, r1
 800367c:	3302      	adds	r3, #2
 800367e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	2103      	movs	r1, #3
 800368c:	fa01 f303 	lsl.w	r3, r1, r3
 8003690:	43db      	mvns	r3, r3
 8003692:	401a      	ands	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	601a      	str	r2, [r3, #0]
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	08da      	lsrs	r2, r3, #3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	3208      	adds	r2, #8
 80036a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	f003 0307 	and.w	r3, r3, #7
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	220f      	movs	r2, #15
 80036ae:	fa02 f303 	lsl.w	r3, r2, r3
 80036b2:	43db      	mvns	r3, r3
 80036b4:	697a      	ldr	r2, [r7, #20]
 80036b6:	08d2      	lsrs	r2, r2, #3
 80036b8:	4019      	ands	r1, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	3208      	adds	r2, #8
 80036be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68da      	ldr	r2, [r3, #12]
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	2103      	movs	r1, #3
 80036cc:	fa01 f303 	lsl.w	r3, r1, r3
 80036d0:	43db      	mvns	r3, r3
 80036d2:	401a      	ands	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	60da      	str	r2, [r3, #12]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685a      	ldr	r2, [r3, #4]
 80036dc:	2101      	movs	r1, #1
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	fa01 f303 	lsl.w	r3, r1, r3
 80036e4:	43db      	mvns	r3, r3
 80036e6:	401a      	ands	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	605a      	str	r2, [r3, #4]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	005b      	lsls	r3, r3, #1
 80036f4:	2103      	movs	r1, #3
 80036f6:	fa01 f303 	lsl.w	r3, r1, r3
 80036fa:	43db      	mvns	r3, r3
 80036fc:	401a      	ands	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	609a      	str	r2, [r3, #8]
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	3301      	adds	r3, #1
 8003706:	617b      	str	r3, [r7, #20]
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	2b0f      	cmp	r3, #15
 800370c:	f67f af2e 	bls.w	800356c <HAL_GPIO_DeInit+0x1c>
 8003710:	bf00      	nop
 8003712:	bf00      	nop
 8003714:	371c      	adds	r7, #28
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	40013800 	.word	0x40013800
 8003724:	40020000 	.word	0x40020000
 8003728:	40020400 	.word	0x40020400
 800372c:	40020800 	.word	0x40020800
 8003730:	40020c00 	.word	0x40020c00
 8003734:	40021000 	.word	0x40021000
 8003738:	40021400 	.word	0x40021400
 800373c:	40021800 	.word	0x40021800
 8003740:	40021c00 	.word	0x40021c00
 8003744:	40013c00 	.word	0x40013c00

08003748 <HAL_GPIO_WritePin>:
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	460b      	mov	r3, r1
 8003752:	807b      	strh	r3, [r7, #2]
 8003754:	4613      	mov	r3, r2
 8003756:	707b      	strb	r3, [r7, #1]
 8003758:	787b      	ldrb	r3, [r7, #1]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d003      	beq.n	8003766 <HAL_GPIO_WritePin+0x1e>
 800375e:	887a      	ldrh	r2, [r7, #2]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	619a      	str	r2, [r3, #24]
 8003764:	e003      	b.n	800376e <HAL_GPIO_WritePin+0x26>
 8003766:	887b      	ldrh	r3, [r7, #2]
 8003768:	041a      	lsls	r2, r3, #16
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	619a      	str	r2, [r3, #24]
 800376e:	bf00      	nop
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr

0800377a <HAL_GPIO_TogglePin>:
 800377a:	b480      	push	{r7}
 800377c:	b085      	sub	sp, #20
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
 8003782:	460b      	mov	r3, r1
 8003784:	807b      	strh	r3, [r7, #2]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	60fb      	str	r3, [r7, #12]
 800378c:	887a      	ldrh	r2, [r7, #2]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	4013      	ands	r3, r2
 8003792:	041a      	lsls	r2, r3, #16
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	43d9      	mvns	r1, r3
 8003798:	887b      	ldrh	r3, [r7, #2]
 800379a:	400b      	ands	r3, r1
 800379c:	431a      	orrs	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	619a      	str	r2, [r3, #24]
 80037a2:	bf00      	nop
 80037a4:	3714      	adds	r7, #20
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
	...

080037b0 <HAL_I2C_Init>:
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_I2C_Init+0x12>
 80037be:	2301      	movs	r3, #1
 80037c0:	e12b      	b.n	8003a1a <HAL_I2C_Init+0x26a>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d106      	bne.n	80037dc <HAL_I2C_Init+0x2c>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f7fd f81e 	bl	8000818 <HAL_I2C_MspInit>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2224      	movs	r2, #36	@ 0x24
 80037e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f022 0201 	bic.w	r2, r2, #1
 80037f2:	601a      	str	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003802:	601a      	str	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003812:	601a      	str	r2, [r3, #0]
 8003814:	f001 ffd2 	bl	80057bc <HAL_RCC_GetPCLK1Freq>
 8003818:	60f8      	str	r0, [r7, #12]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	4a81      	ldr	r2, [pc, #516]	@ (8003a24 <HAL_I2C_Init+0x274>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d807      	bhi.n	8003834 <HAL_I2C_Init+0x84>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	4a80      	ldr	r2, [pc, #512]	@ (8003a28 <HAL_I2C_Init+0x278>)
 8003828:	4293      	cmp	r3, r2
 800382a:	bf94      	ite	ls
 800382c:	2301      	movls	r3, #1
 800382e:	2300      	movhi	r3, #0
 8003830:	b2db      	uxtb	r3, r3
 8003832:	e006      	b.n	8003842 <HAL_I2C_Init+0x92>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	4a7d      	ldr	r2, [pc, #500]	@ (8003a2c <HAL_I2C_Init+0x27c>)
 8003838:	4293      	cmp	r3, r2
 800383a:	bf94      	ite	ls
 800383c:	2301      	movls	r3, #1
 800383e:	2300      	movhi	r3, #0
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <HAL_I2C_Init+0x9a>
 8003846:	2301      	movs	r3, #1
 8003848:	e0e7      	b.n	8003a1a <HAL_I2C_Init+0x26a>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	4a78      	ldr	r2, [pc, #480]	@ (8003a30 <HAL_I2C_Init+0x280>)
 800384e:	fba2 2303 	umull	r2, r3, r2, r3
 8003852:	0c9b      	lsrs	r3, r3, #18
 8003854:	60bb      	str	r3, [r7, #8]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68ba      	ldr	r2, [r7, #8]
 8003866:	430a      	orrs	r2, r1
 8003868:	605a      	str	r2, [r3, #4]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	6a1b      	ldr	r3, [r3, #32]
 8003870:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	4a6a      	ldr	r2, [pc, #424]	@ (8003a24 <HAL_I2C_Init+0x274>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d802      	bhi.n	8003884 <HAL_I2C_Init+0xd4>
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	3301      	adds	r3, #1
 8003882:	e009      	b.n	8003898 <HAL_I2C_Init+0xe8>
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800388a:	fb02 f303 	mul.w	r3, r2, r3
 800388e:	4a69      	ldr	r2, [pc, #420]	@ (8003a34 <HAL_I2C_Init+0x284>)
 8003890:	fba2 2303 	umull	r2, r3, r2, r3
 8003894:	099b      	lsrs	r3, r3, #6
 8003896:	3301      	adds	r3, #1
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	6812      	ldr	r2, [r2, #0]
 800389c:	430b      	orrs	r3, r1
 800389e:	6213      	str	r3, [r2, #32]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80038aa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	495c      	ldr	r1, [pc, #368]	@ (8003a24 <HAL_I2C_Init+0x274>)
 80038b4:	428b      	cmp	r3, r1
 80038b6:	d819      	bhi.n	80038ec <HAL_I2C_Init+0x13c>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	1e59      	subs	r1, r3, #1
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	005b      	lsls	r3, r3, #1
 80038c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80038c6:	1c59      	adds	r1, r3, #1
 80038c8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80038cc:	400b      	ands	r3, r1
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00a      	beq.n	80038e8 <HAL_I2C_Init+0x138>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	1e59      	subs	r1, r3, #1
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	005b      	lsls	r3, r3, #1
 80038dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80038e0:	3301      	adds	r3, #1
 80038e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038e6:	e051      	b.n	800398c <HAL_I2C_Init+0x1dc>
 80038e8:	2304      	movs	r3, #4
 80038ea:	e04f      	b.n	800398c <HAL_I2C_Init+0x1dc>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d111      	bne.n	8003918 <HAL_I2C_Init+0x168>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	1e58      	subs	r0, r3, #1
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6859      	ldr	r1, [r3, #4]
 80038fc:	460b      	mov	r3, r1
 80038fe:	005b      	lsls	r3, r3, #1
 8003900:	440b      	add	r3, r1
 8003902:	fbb0 f3f3 	udiv	r3, r0, r3
 8003906:	3301      	adds	r3, #1
 8003908:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800390c:	2b00      	cmp	r3, #0
 800390e:	bf0c      	ite	eq
 8003910:	2301      	moveq	r3, #1
 8003912:	2300      	movne	r3, #0
 8003914:	b2db      	uxtb	r3, r3
 8003916:	e012      	b.n	800393e <HAL_I2C_Init+0x18e>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	1e58      	subs	r0, r3, #1
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6859      	ldr	r1, [r3, #4]
 8003920:	460b      	mov	r3, r1
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	440b      	add	r3, r1
 8003926:	0099      	lsls	r1, r3, #2
 8003928:	440b      	add	r3, r1
 800392a:	fbb0 f3f3 	udiv	r3, r0, r3
 800392e:	3301      	adds	r3, #1
 8003930:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003934:	2b00      	cmp	r3, #0
 8003936:	bf0c      	ite	eq
 8003938:	2301      	moveq	r3, #1
 800393a:	2300      	movne	r3, #0
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <HAL_I2C_Init+0x196>
 8003942:	2301      	movs	r3, #1
 8003944:	e022      	b.n	800398c <HAL_I2C_Init+0x1dc>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d10e      	bne.n	800396c <HAL_I2C_Init+0x1bc>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	1e58      	subs	r0, r3, #1
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6859      	ldr	r1, [r3, #4]
 8003956:	460b      	mov	r3, r1
 8003958:	005b      	lsls	r3, r3, #1
 800395a:	440b      	add	r3, r1
 800395c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003960:	3301      	adds	r3, #1
 8003962:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003966:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800396a:	e00f      	b.n	800398c <HAL_I2C_Init+0x1dc>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	1e58      	subs	r0, r3, #1
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6859      	ldr	r1, [r3, #4]
 8003974:	460b      	mov	r3, r1
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	440b      	add	r3, r1
 800397a:	0099      	lsls	r1, r3, #2
 800397c:	440b      	add	r3, r1
 800397e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003982:	3301      	adds	r3, #1
 8003984:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003988:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800398c:	6879      	ldr	r1, [r7, #4]
 800398e:	6809      	ldr	r1, [r1, #0]
 8003990:	4313      	orrs	r3, r2
 8003992:	61cb      	str	r3, [r1, #28]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	69da      	ldr	r2, [r3, #28]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a1b      	ldr	r3, [r3, #32]
 80039a6:	431a      	orrs	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	430a      	orrs	r2, r1
 80039ae:	601a      	str	r2, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80039ba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	6911      	ldr	r1, [r2, #16]
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	68d2      	ldr	r2, [r2, #12]
 80039c6:	4311      	orrs	r1, r2
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	6812      	ldr	r2, [r2, #0]
 80039cc:	430b      	orrs	r3, r1
 80039ce:	6093      	str	r3, [r2, #8]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	695a      	ldr	r2, [r3, #20]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	431a      	orrs	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	430a      	orrs	r2, r1
 80039ea:	60da      	str	r2, [r3, #12]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f042 0201 	orr.w	r2, r2, #1
 80039fa:	601a      	str	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	641a      	str	r2, [r3, #64]	@ 0x40
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2220      	movs	r2, #32
 8003a06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a18:	2300      	movs	r3, #0
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	000186a0 	.word	0x000186a0
 8003a28:	001e847f 	.word	0x001e847f
 8003a2c:	003d08ff 	.word	0x003d08ff
 8003a30:	431bde83 	.word	0x431bde83
 8003a34:	10624dd3 	.word	0x10624dd3

08003a38 <HAL_PCD_Init>:
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b086      	sub	sp, #24
 8003a3c:	af02      	add	r7, sp, #8
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d101      	bne.n	8003a4a <HAL_PCD_Init+0x12>
 8003a46:	2301      	movs	r3, #1
 8003a48:	e101      	b.n	8003c4e <HAL_PCD_Init+0x216>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	60bb      	str	r3, [r7, #8]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d106      	bne.n	8003a6a <HAL_PCD_Init+0x32>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f7fd fed5 	bl	8001814 <HAL_PCD_MspInit>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2203      	movs	r2, #3
 8003a6e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a78:	d102      	bne.n	8003a80 <HAL_PCD_Init+0x48>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	719a      	strb	r2, [r3, #6]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4618      	mov	r0, r3
 8003a86:	f003 fd9a 	bl	80075be <USB_DisableGlobalInt>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6818      	ldr	r0, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	7c1a      	ldrb	r2, [r3, #16]
 8003a92:	f88d 2000 	strb.w	r2, [sp]
 8003a96:	3304      	adds	r3, #4
 8003a98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a9a:	f003 fc79 	bl	8007390 <USB_CoreInit>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d005      	beq.n	8003ab0 <HAL_PCD_Init+0x78>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
 8003aac:	2301      	movs	r3, #1
 8003aae:	e0ce      	b.n	8003c4e <HAL_PCD_Init+0x216>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f003 fd92 	bl	80075e0 <USB_SetCurrentMode>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d005      	beq.n	8003ace <HAL_PCD_Init+0x96>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2202      	movs	r2, #2
 8003ac6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
 8003aca:	2301      	movs	r3, #1
 8003acc:	e0bf      	b.n	8003c4e <HAL_PCD_Init+0x216>
 8003ace:	2300      	movs	r3, #0
 8003ad0:	73fb      	strb	r3, [r7, #15]
 8003ad2:	e04a      	b.n	8003b6a <HAL_PCD_Init+0x132>
 8003ad4:	7bfa      	ldrb	r2, [r7, #15]
 8003ad6:	6879      	ldr	r1, [r7, #4]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	00db      	lsls	r3, r3, #3
 8003adc:	4413      	add	r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	440b      	add	r3, r1
 8003ae2:	3315      	adds	r3, #21
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	701a      	strb	r2, [r3, #0]
 8003ae8:	7bfa      	ldrb	r2, [r7, #15]
 8003aea:	6879      	ldr	r1, [r7, #4]
 8003aec:	4613      	mov	r3, r2
 8003aee:	00db      	lsls	r3, r3, #3
 8003af0:	4413      	add	r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	440b      	add	r3, r1
 8003af6:	3314      	adds	r3, #20
 8003af8:	7bfa      	ldrb	r2, [r7, #15]
 8003afa:	701a      	strb	r2, [r3, #0]
 8003afc:	7bfa      	ldrb	r2, [r7, #15]
 8003afe:	7bfb      	ldrb	r3, [r7, #15]
 8003b00:	b298      	uxth	r0, r3
 8003b02:	6879      	ldr	r1, [r7, #4]
 8003b04:	4613      	mov	r3, r2
 8003b06:	00db      	lsls	r3, r3, #3
 8003b08:	4413      	add	r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	440b      	add	r3, r1
 8003b0e:	332e      	adds	r3, #46	@ 0x2e
 8003b10:	4602      	mov	r2, r0
 8003b12:	801a      	strh	r2, [r3, #0]
 8003b14:	7bfa      	ldrb	r2, [r7, #15]
 8003b16:	6879      	ldr	r1, [r7, #4]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	00db      	lsls	r3, r3, #3
 8003b1c:	4413      	add	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	440b      	add	r3, r1
 8003b22:	3318      	adds	r3, #24
 8003b24:	2200      	movs	r2, #0
 8003b26:	701a      	strb	r2, [r3, #0]
 8003b28:	7bfa      	ldrb	r2, [r7, #15]
 8003b2a:	6879      	ldr	r1, [r7, #4]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	00db      	lsls	r3, r3, #3
 8003b30:	4413      	add	r3, r2
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	440b      	add	r3, r1
 8003b36:	331c      	adds	r3, #28
 8003b38:	2200      	movs	r2, #0
 8003b3a:	601a      	str	r2, [r3, #0]
 8003b3c:	7bfa      	ldrb	r2, [r7, #15]
 8003b3e:	6879      	ldr	r1, [r7, #4]
 8003b40:	4613      	mov	r3, r2
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	4413      	add	r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	440b      	add	r3, r1
 8003b4a:	3320      	adds	r3, #32
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	601a      	str	r2, [r3, #0]
 8003b50:	7bfa      	ldrb	r2, [r7, #15]
 8003b52:	6879      	ldr	r1, [r7, #4]
 8003b54:	4613      	mov	r3, r2
 8003b56:	00db      	lsls	r3, r3, #3
 8003b58:	4413      	add	r3, r2
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	440b      	add	r3, r1
 8003b5e:	3324      	adds	r3, #36	@ 0x24
 8003b60:	2200      	movs	r2, #0
 8003b62:	601a      	str	r2, [r3, #0]
 8003b64:	7bfb      	ldrb	r3, [r7, #15]
 8003b66:	3301      	adds	r3, #1
 8003b68:	73fb      	strb	r3, [r7, #15]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	791b      	ldrb	r3, [r3, #4]
 8003b6e:	7bfa      	ldrb	r2, [r7, #15]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d3af      	bcc.n	8003ad4 <HAL_PCD_Init+0x9c>
 8003b74:	2300      	movs	r3, #0
 8003b76:	73fb      	strb	r3, [r7, #15]
 8003b78:	e044      	b.n	8003c04 <HAL_PCD_Init+0x1cc>
 8003b7a:	7bfa      	ldrb	r2, [r7, #15]
 8003b7c:	6879      	ldr	r1, [r7, #4]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	00db      	lsls	r3, r3, #3
 8003b82:	4413      	add	r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	440b      	add	r3, r1
 8003b88:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	701a      	strb	r2, [r3, #0]
 8003b90:	7bfa      	ldrb	r2, [r7, #15]
 8003b92:	6879      	ldr	r1, [r7, #4]
 8003b94:	4613      	mov	r3, r2
 8003b96:	00db      	lsls	r3, r3, #3
 8003b98:	4413      	add	r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	440b      	add	r3, r1
 8003b9e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003ba2:	7bfa      	ldrb	r2, [r7, #15]
 8003ba4:	701a      	strb	r2, [r3, #0]
 8003ba6:	7bfa      	ldrb	r2, [r7, #15]
 8003ba8:	6879      	ldr	r1, [r7, #4]
 8003baa:	4613      	mov	r3, r2
 8003bac:	00db      	lsls	r3, r3, #3
 8003bae:	4413      	add	r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	440b      	add	r3, r1
 8003bb4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003bb8:	2200      	movs	r2, #0
 8003bba:	701a      	strb	r2, [r3, #0]
 8003bbc:	7bfa      	ldrb	r2, [r7, #15]
 8003bbe:	6879      	ldr	r1, [r7, #4]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	4413      	add	r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	440b      	add	r3, r1
 8003bca:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003bce:	2200      	movs	r2, #0
 8003bd0:	601a      	str	r2, [r3, #0]
 8003bd2:	7bfa      	ldrb	r2, [r7, #15]
 8003bd4:	6879      	ldr	r1, [r7, #4]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	00db      	lsls	r3, r3, #3
 8003bda:	4413      	add	r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	440b      	add	r3, r1
 8003be0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003be4:	2200      	movs	r2, #0
 8003be6:	601a      	str	r2, [r3, #0]
 8003be8:	7bfa      	ldrb	r2, [r7, #15]
 8003bea:	6879      	ldr	r1, [r7, #4]
 8003bec:	4613      	mov	r3, r2
 8003bee:	00db      	lsls	r3, r3, #3
 8003bf0:	4413      	add	r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	440b      	add	r3, r1
 8003bf6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	601a      	str	r2, [r3, #0]
 8003bfe:	7bfb      	ldrb	r3, [r7, #15]
 8003c00:	3301      	adds	r3, #1
 8003c02:	73fb      	strb	r3, [r7, #15]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	791b      	ldrb	r3, [r3, #4]
 8003c08:	7bfa      	ldrb	r2, [r7, #15]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d3b5      	bcc.n	8003b7a <HAL_PCD_Init+0x142>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6818      	ldr	r0, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	7c1a      	ldrb	r2, [r3, #16]
 8003c16:	f88d 2000 	strb.w	r2, [sp]
 8003c1a:	3304      	adds	r3, #4
 8003c1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c1e:	f003 fd2b 	bl	8007678 <USB_DevInit>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d005      	beq.n	8003c34 <HAL_PCD_Init+0x1fc>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
 8003c30:	2301      	movs	r3, #1
 8003c32:	e00c      	b.n	8003c4e <HAL_PCD_Init+0x216>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	745a      	strb	r2, [r3, #17]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f004 fd75 	bl	8008736 <USB_DevDisconnect>
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <HAL_PCD_Start>:
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b084      	sub	sp, #16
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	60fb      	str	r3, [r7, #12]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d101      	bne.n	8003c72 <HAL_PCD_Start+0x1c>
 8003c6e:	2302      	movs	r3, #2
 8003c70:	e022      	b.n	8003cb8 <HAL_PCD_Start+0x62>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d009      	beq.n	8003c9a <HAL_PCD_Start+0x44>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	7b5b      	ldrb	r3, [r3, #13]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d105      	bne.n	8003c9a <HAL_PCD_Start+0x44>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c92:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	639a      	str	r2, [r3, #56]	@ 0x38
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f003 fc7c 	bl	800759c <USB_EnableGlobalInt>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f004 fd23 	bl	80086f4 <USB_DevConnect>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3710      	adds	r7, #16
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <HAL_PCD_IRQHandler>:
 8003cc0:	b590      	push	{r4, r7, lr}
 8003cc2:	b08d      	sub	sp, #52	@ 0x34
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	623b      	str	r3, [r7, #32]
 8003cce:	6a3b      	ldr	r3, [r7, #32]
 8003cd0:	61fb      	str	r3, [r7, #28]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f004 fde1 	bl	800889e <USB_GetMode>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	f040 848c 	bne.w	80045fc <HAL_PCD_IRQHandler+0x93c>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f004 fd45 	bl	8008778 <USB_ReadInterrupts>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f000 8482 	beq.w	80045fa <HAL_PCD_IRQHandler+0x93a>
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	0a1b      	lsrs	r3, r3, #8
 8003d00:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f004 fd32 	bl	8008778 <USB_ReadInterrupts>
 8003d14:	4603      	mov	r3, r0
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d107      	bne.n	8003d2e <HAL_PCD_IRQHandler+0x6e>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	695a      	ldr	r2, [r3, #20]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f002 0202 	and.w	r2, r2, #2
 8003d2c:	615a      	str	r2, [r3, #20]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f004 fd20 	bl	8008778 <USB_ReadInterrupts>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	f003 0310 	and.w	r3, r3, #16
 8003d3e:	2b10      	cmp	r3, #16
 8003d40:	d161      	bne.n	8003e06 <HAL_PCD_IRQHandler+0x146>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	699a      	ldr	r2, [r3, #24]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 0210 	bic.w	r2, r2, #16
 8003d50:	619a      	str	r2, [r3, #24]
 8003d52:	6a3b      	ldr	r3, [r7, #32]
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	61bb      	str	r3, [r7, #24]
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	f003 020f 	and.w	r2, r3, #15
 8003d5e:	4613      	mov	r3, r2
 8003d60:	00db      	lsls	r3, r3, #3
 8003d62:	4413      	add	r3, r2
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	3304      	adds	r3, #4
 8003d70:	617b      	str	r3, [r7, #20]
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003d78:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003d7c:	d124      	bne.n	8003dc8 <HAL_PCD_IRQHandler+0x108>
 8003d7e:	69ba      	ldr	r2, [r7, #24]
 8003d80:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003d84:	4013      	ands	r3, r2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d035      	beq.n	8003df6 <HAL_PCD_IRQHandler+0x136>
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	68d9      	ldr	r1, [r3, #12]
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	091b      	lsrs	r3, r3, #4
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	6a38      	ldr	r0, [r7, #32]
 8003d9e:	f004 fb57 	bl	8008450 <USB_ReadPacket>
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	68da      	ldr	r2, [r3, #12]
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	091b      	lsrs	r3, r3, #4
 8003daa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003dae:	441a      	add	r2, r3
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	60da      	str	r2, [r3, #12]
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	695a      	ldr	r2, [r3, #20]
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	091b      	lsrs	r3, r3, #4
 8003dbc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003dc0:	441a      	add	r2, r3
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	615a      	str	r2, [r3, #20]
 8003dc6:	e016      	b.n	8003df6 <HAL_PCD_IRQHandler+0x136>
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003dce:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003dd2:	d110      	bne.n	8003df6 <HAL_PCD_IRQHandler+0x136>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003dda:	2208      	movs	r2, #8
 8003ddc:	4619      	mov	r1, r3
 8003dde:	6a38      	ldr	r0, [r7, #32]
 8003de0:	f004 fb36 	bl	8008450 <USB_ReadPacket>
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	695a      	ldr	r2, [r3, #20]
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	091b      	lsrs	r3, r3, #4
 8003dec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003df0:	441a      	add	r2, r3
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	615a      	str	r2, [r3, #20]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	699a      	ldr	r2, [r3, #24]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f042 0210 	orr.w	r2, r2, #16
 8003e04:	619a      	str	r2, [r3, #24]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f004 fcb4 	bl	8008778 <USB_ReadInterrupts>
 8003e10:	4603      	mov	r3, r0
 8003e12:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e16:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003e1a:	f040 80a7 	bne.w	8003f6c <HAL_PCD_IRQHandler+0x2ac>
 8003e1e:	2300      	movs	r3, #0
 8003e20:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4618      	mov	r0, r3
 8003e28:	f004 fcb9 	bl	800879e <USB_ReadDevAllOutEpInterrupt>
 8003e2c:	62b8      	str	r0, [r7, #40]	@ 0x28
 8003e2e:	e099      	b.n	8003f64 <HAL_PCD_IRQHandler+0x2a4>
 8003e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	f000 808e 	beq.w	8003f58 <HAL_PCD_IRQHandler+0x298>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e42:	b2d2      	uxtb	r2, r2
 8003e44:	4611      	mov	r1, r2
 8003e46:	4618      	mov	r0, r3
 8003e48:	f004 fcdd 	bl	8008806 <USB_ReadDevOutEPInterrupt>
 8003e4c:	6138      	str	r0, [r7, #16]
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	f003 0301 	and.w	r3, r3, #1
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00c      	beq.n	8003e72 <HAL_PCD_IRQHandler+0x1b2>
 8003e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5a:	015a      	lsls	r2, r3, #5
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	4413      	add	r3, r2
 8003e60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e64:	461a      	mov	r2, r3
 8003e66:	2301      	movs	r3, #1
 8003e68:	6093      	str	r3, [r2, #8]
 8003e6a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 fea3 	bl	8004bb8 <PCD_EP_OutXfrComplete_int>
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	f003 0308 	and.w	r3, r3, #8
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00c      	beq.n	8003e96 <HAL_PCD_IRQHandler+0x1d6>
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e7e:	015a      	lsls	r2, r3, #5
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	4413      	add	r3, r2
 8003e84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e88:	461a      	mov	r2, r3
 8003e8a:	2308      	movs	r3, #8
 8003e8c:	6093      	str	r3, [r2, #8]
 8003e8e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 ff79 	bl	8004d88 <PCD_EP_OutSetupPacket_int>
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	f003 0310 	and.w	r3, r3, #16
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d008      	beq.n	8003eb2 <HAL_PCD_IRQHandler+0x1f2>
 8003ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea2:	015a      	lsls	r2, r3, #5
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003eac:	461a      	mov	r2, r3
 8003eae:	2310      	movs	r3, #16
 8003eb0:	6093      	str	r3, [r2, #8]
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	f003 0302 	and.w	r3, r3, #2
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d030      	beq.n	8003f1e <HAL_PCD_IRQHandler+0x25e>
 8003ebc:	6a3b      	ldr	r3, [r7, #32]
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ec4:	2b80      	cmp	r3, #128	@ 0x80
 8003ec6:	d109      	bne.n	8003edc <HAL_PCD_IRQHandler+0x21c>
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	69fa      	ldr	r2, [r7, #28]
 8003ed2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ed6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003eda:	6053      	str	r3, [r2, #4]
 8003edc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ede:	4613      	mov	r3, r2
 8003ee0:	00db      	lsls	r3, r3, #3
 8003ee2:	4413      	add	r3, r2
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	4413      	add	r3, r2
 8003eee:	3304      	adds	r3, #4
 8003ef0:	617b      	str	r3, [r7, #20]
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	78db      	ldrb	r3, [r3, #3]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d108      	bne.n	8003f0c <HAL_PCD_IRQHandler+0x24c>
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	2200      	movs	r2, #0
 8003efe:	70da      	strb	r2, [r3, #3]
 8003f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	4619      	mov	r1, r3
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f008 f894 	bl	800c034 <HAL_PCD_ISOOUTIncompleteCallback>
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f0e:	015a      	lsls	r2, r3, #5
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	4413      	add	r3, r2
 8003f14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f18:	461a      	mov	r2, r3
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	6093      	str	r3, [r2, #8]
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	f003 0320 	and.w	r3, r3, #32
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d008      	beq.n	8003f3a <HAL_PCD_IRQHandler+0x27a>
 8003f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f2a:	015a      	lsls	r2, r3, #5
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	4413      	add	r3, r2
 8003f30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f34:	461a      	mov	r2, r3
 8003f36:	2320      	movs	r3, #32
 8003f38:	6093      	str	r3, [r2, #8]
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d009      	beq.n	8003f58 <HAL_PCD_IRQHandler+0x298>
 8003f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f46:	015a      	lsls	r2, r3, #5
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f50:	461a      	mov	r2, r3
 8003f52:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003f56:	6093      	str	r3, [r2, #8]
 8003f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f60:	085b      	lsrs	r3, r3, #1
 8003f62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	f47f af62 	bne.w	8003e30 <HAL_PCD_IRQHandler+0x170>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4618      	mov	r0, r3
 8003f72:	f004 fc01 	bl	8008778 <USB_ReadInterrupts>
 8003f76:	4603      	mov	r3, r0
 8003f78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f7c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003f80:	f040 80db 	bne.w	800413a <HAL_PCD_IRQHandler+0x47a>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f004 fc22 	bl	80087d2 <USB_ReadDevAllInEpInterrupt>
 8003f8e:	62b8      	str	r0, [r7, #40]	@ 0x28
 8003f90:	2300      	movs	r3, #0
 8003f92:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f94:	e0cd      	b.n	8004132 <HAL_PCD_IRQHandler+0x472>
 8003f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f98:	f003 0301 	and.w	r3, r3, #1
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	f000 80c2 	beq.w	8004126 <HAL_PCD_IRQHandler+0x466>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fa8:	b2d2      	uxtb	r2, r2
 8003faa:	4611      	mov	r1, r2
 8003fac:	4618      	mov	r0, r3
 8003fae:	f004 fc48 	bl	8008842 <USB_ReadDevInEPInterrupt>
 8003fb2:	6138      	str	r0, [r7, #16]
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	f003 0301 	and.w	r3, r3, #1
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d057      	beq.n	800406e <HAL_PCD_IRQHandler+0x3ae>
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc0:	f003 030f 	and.w	r3, r3, #15
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fca:	60fb      	str	r3, [r7, #12]
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fd2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	43db      	mvns	r3, r3
 8003fd8:	69f9      	ldr	r1, [r7, #28]
 8003fda:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003fde:	4013      	ands	r3, r2
 8003fe0:	634b      	str	r3, [r1, #52]	@ 0x34
 8003fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe4:	015a      	lsls	r2, r3, #5
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	4413      	add	r3, r2
 8003fea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fee:	461a      	mov	r2, r3
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	6093      	str	r3, [r2, #8]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	799b      	ldrb	r3, [r3, #6]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d132      	bne.n	8004062 <HAL_PCD_IRQHandler+0x3a2>
 8003ffc:	6879      	ldr	r1, [r7, #4]
 8003ffe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004000:	4613      	mov	r3, r2
 8004002:	00db      	lsls	r3, r3, #3
 8004004:	4413      	add	r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	440b      	add	r3, r1
 800400a:	3320      	adds	r3, #32
 800400c:	6819      	ldr	r1, [r3, #0]
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004012:	4613      	mov	r3, r2
 8004014:	00db      	lsls	r3, r3, #3
 8004016:	4413      	add	r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	4403      	add	r3, r0
 800401c:	331c      	adds	r3, #28
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4419      	add	r1, r3
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004026:	4613      	mov	r3, r2
 8004028:	00db      	lsls	r3, r3, #3
 800402a:	4413      	add	r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	4403      	add	r3, r0
 8004030:	3320      	adds	r3, #32
 8004032:	6019      	str	r1, [r3, #0]
 8004034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004036:	2b00      	cmp	r3, #0
 8004038:	d113      	bne.n	8004062 <HAL_PCD_IRQHandler+0x3a2>
 800403a:	6879      	ldr	r1, [r7, #4]
 800403c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800403e:	4613      	mov	r3, r2
 8004040:	00db      	lsls	r3, r3, #3
 8004042:	4413      	add	r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	440b      	add	r3, r1
 8004048:	3324      	adds	r3, #36	@ 0x24
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d108      	bne.n	8004062 <HAL_PCD_IRQHandler+0x3a2>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6818      	ldr	r0, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800405a:	461a      	mov	r2, r3
 800405c:	2101      	movs	r1, #1
 800405e:	f004 fc4f 	bl	8008900 <USB_EP0_OutStart>
 8004062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004064:	b2db      	uxtb	r3, r3
 8004066:	4619      	mov	r1, r3
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f007 ff5e 	bl	800bf2a <HAL_PCD_DataInStageCallback>
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	f003 0308 	and.w	r3, r3, #8
 8004074:	2b00      	cmp	r3, #0
 8004076:	d008      	beq.n	800408a <HAL_PCD_IRQHandler+0x3ca>
 8004078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407a:	015a      	lsls	r2, r3, #5
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	4413      	add	r3, r2
 8004080:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004084:	461a      	mov	r2, r3
 8004086:	2308      	movs	r3, #8
 8004088:	6093      	str	r3, [r2, #8]
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	f003 0310 	and.w	r3, r3, #16
 8004090:	2b00      	cmp	r3, #0
 8004092:	d008      	beq.n	80040a6 <HAL_PCD_IRQHandler+0x3e6>
 8004094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004096:	015a      	lsls	r2, r3, #5
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	4413      	add	r3, r2
 800409c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040a0:	461a      	mov	r2, r3
 80040a2:	2310      	movs	r3, #16
 80040a4:	6093      	str	r3, [r2, #8]
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d008      	beq.n	80040c2 <HAL_PCD_IRQHandler+0x402>
 80040b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b2:	015a      	lsls	r2, r3, #5
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	4413      	add	r3, r2
 80040b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040bc:	461a      	mov	r2, r3
 80040be:	2340      	movs	r3, #64	@ 0x40
 80040c0:	6093      	str	r3, [r2, #8]
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d023      	beq.n	8004114 <HAL_PCD_IRQHandler+0x454>
 80040cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80040ce:	6a38      	ldr	r0, [r7, #32]
 80040d0:	f003 fc36 	bl	8007940 <USB_FlushTxFifo>
 80040d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040d6:	4613      	mov	r3, r2
 80040d8:	00db      	lsls	r3, r3, #3
 80040da:	4413      	add	r3, r2
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	3310      	adds	r3, #16
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	4413      	add	r3, r2
 80040e4:	3304      	adds	r3, #4
 80040e6:	617b      	str	r3, [r7, #20]
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	78db      	ldrb	r3, [r3, #3]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d108      	bne.n	8004102 <HAL_PCD_IRQHandler+0x442>
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	2200      	movs	r2, #0
 80040f4:	70da      	strb	r2, [r3, #3]
 80040f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	4619      	mov	r1, r3
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f007 ffab 	bl	800c058 <HAL_PCD_ISOINIncompleteCallback>
 8004102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004104:	015a      	lsls	r2, r3, #5
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	4413      	add	r3, r2
 800410a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800410e:	461a      	mov	r2, r3
 8004110:	2302      	movs	r3, #2
 8004112:	6093      	str	r3, [r2, #8]
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800411a:	2b00      	cmp	r3, #0
 800411c:	d003      	beq.n	8004126 <HAL_PCD_IRQHandler+0x466>
 800411e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 fcbd 	bl	8004aa0 <PCD_WriteEmptyTxFifo>
 8004126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004128:	3301      	adds	r3, #1
 800412a:	627b      	str	r3, [r7, #36]	@ 0x24
 800412c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800412e:	085b      	lsrs	r3, r3, #1
 8004130:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004134:	2b00      	cmp	r3, #0
 8004136:	f47f af2e 	bne.w	8003f96 <HAL_PCD_IRQHandler+0x2d6>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4618      	mov	r0, r3
 8004140:	f004 fb1a 	bl	8008778 <USB_ReadInterrupts>
 8004144:	4603      	mov	r3, r0
 8004146:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800414a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800414e:	d122      	bne.n	8004196 <HAL_PCD_IRQHandler+0x4d6>
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	69fa      	ldr	r2, [r7, #28]
 800415a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800415e:	f023 0301 	bic.w	r3, r3, #1
 8004162:	6053      	str	r3, [r2, #4]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800416a:	2b01      	cmp	r3, #1
 800416c:	d108      	bne.n	8004180 <HAL_PCD_IRQHandler+0x4c0>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
 8004176:	2100      	movs	r1, #0
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 fea3 	bl	8004ec4 <HAL_PCDEx_LPM_Callback>
 800417e:	e002      	b.n	8004186 <HAL_PCD_IRQHandler+0x4c6>
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f007 ff49 	bl	800c018 <HAL_PCD_ResumeCallback>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	695a      	ldr	r2, [r3, #20]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004194:	615a      	str	r2, [r3, #20]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4618      	mov	r0, r3
 800419c:	f004 faec 	bl	8008778 <USB_ReadInterrupts>
 80041a0:	4603      	mov	r3, r0
 80041a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041aa:	d112      	bne.n	80041d2 <HAL_PCD_IRQHandler+0x512>
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f003 0301 	and.w	r3, r3, #1
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d102      	bne.n	80041c2 <HAL_PCD_IRQHandler+0x502>
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f007 ff05 	bl	800bfcc <HAL_PCD_SuspendCallback>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	695a      	ldr	r2, [r3, #20]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80041d0:	615a      	str	r2, [r3, #20]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f004 face 	bl	8008778 <USB_ReadInterrupts>
 80041dc:	4603      	mov	r3, r0
 80041de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80041e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041e6:	f040 80b7 	bne.w	8004358 <HAL_PCD_IRQHandler+0x698>
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	69fa      	ldr	r2, [r7, #28]
 80041f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80041f8:	f023 0301 	bic.w	r3, r3, #1
 80041fc:	6053      	str	r3, [r2, #4]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2110      	movs	r1, #16
 8004204:	4618      	mov	r0, r3
 8004206:	f003 fb9b 	bl	8007940 <USB_FlushTxFifo>
 800420a:	2300      	movs	r3, #0
 800420c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800420e:	e046      	b.n	800429e <HAL_PCD_IRQHandler+0x5de>
 8004210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004212:	015a      	lsls	r2, r3, #5
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	4413      	add	r3, r2
 8004218:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800421c:	461a      	mov	r2, r3
 800421e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004222:	6093      	str	r3, [r2, #8]
 8004224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004226:	015a      	lsls	r2, r3, #5
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	4413      	add	r3, r2
 800422c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004234:	0151      	lsls	r1, r2, #5
 8004236:	69fa      	ldr	r2, [r7, #28]
 8004238:	440a      	add	r2, r1
 800423a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800423e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004242:	6013      	str	r3, [r2, #0]
 8004244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004246:	015a      	lsls	r2, r3, #5
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	4413      	add	r3, r2
 800424c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004250:	461a      	mov	r2, r3
 8004252:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004256:	6093      	str	r3, [r2, #8]
 8004258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800425a:	015a      	lsls	r2, r3, #5
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	4413      	add	r3, r2
 8004260:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004268:	0151      	lsls	r1, r2, #5
 800426a:	69fa      	ldr	r2, [r7, #28]
 800426c:	440a      	add	r2, r1
 800426e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004272:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004276:	6013      	str	r3, [r2, #0]
 8004278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800427a:	015a      	lsls	r2, r3, #5
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	4413      	add	r3, r2
 8004280:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004288:	0151      	lsls	r1, r2, #5
 800428a:	69fa      	ldr	r2, [r7, #28]
 800428c:	440a      	add	r2, r1
 800428e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004292:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004296:	6013      	str	r3, [r2, #0]
 8004298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800429a:	3301      	adds	r3, #1
 800429c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	791b      	ldrb	r3, [r3, #4]
 80042a2:	461a      	mov	r2, r3
 80042a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d3b2      	bcc.n	8004210 <HAL_PCD_IRQHandler+0x550>
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042b0:	69db      	ldr	r3, [r3, #28]
 80042b2:	69fa      	ldr	r2, [r7, #28]
 80042b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80042b8:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80042bc:	61d3      	str	r3, [r2, #28]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	7bdb      	ldrb	r3, [r3, #15]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d016      	beq.n	80042f4 <HAL_PCD_IRQHandler+0x634>
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042d0:	69fa      	ldr	r2, [r7, #28]
 80042d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80042d6:	f043 030b 	orr.w	r3, r3, #11
 80042da:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042e6:	69fa      	ldr	r2, [r7, #28]
 80042e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80042ec:	f043 030b 	orr.w	r3, r3, #11
 80042f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80042f2:	e015      	b.n	8004320 <HAL_PCD_IRQHandler+0x660>
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	69fa      	ldr	r2, [r7, #28]
 80042fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004302:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004306:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800430a:	6153      	str	r3, [r2, #20]
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	69fa      	ldr	r2, [r7, #28]
 8004316:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800431a:	f043 030b 	orr.w	r3, r3, #11
 800431e:	6113      	str	r3, [r2, #16]
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	69fa      	ldr	r2, [r7, #28]
 800432a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800432e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004332:	6013      	str	r3, [r2, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6818      	ldr	r0, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	7999      	ldrb	r1, [r3, #6]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004342:	461a      	mov	r2, r3
 8004344:	f004 fadc 	bl	8008900 <USB_EP0_OutStart>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	695a      	ldr	r2, [r3, #20]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004356:	615a      	str	r2, [r3, #20]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4618      	mov	r0, r3
 800435e:	f004 fa0b 	bl	8008778 <USB_ReadInterrupts>
 8004362:	4603      	mov	r3, r0
 8004364:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004368:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800436c:	d123      	bne.n	80043b6 <HAL_PCD_IRQHandler+0x6f6>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4618      	mov	r0, r3
 8004374:	f004 faa1 	bl	80088ba <USB_ActivateSetup>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4618      	mov	r0, r3
 800437e:	f003 fb58 	bl	8007a32 <USB_GetDevSpeed>
 8004382:	4603      	mov	r3, r0
 8004384:	461a      	mov	r2, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	71da      	strb	r2, [r3, #7]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681c      	ldr	r4, [r3, #0]
 800438e:	f001 fa09 	bl	80057a4 <HAL_RCC_GetHCLKFreq>
 8004392:	4601      	mov	r1, r0
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	79db      	ldrb	r3, [r3, #7]
 8004398:	461a      	mov	r2, r3
 800439a:	4620      	mov	r0, r4
 800439c:	f003 f85c 	bl	8007458 <USB_SetTurnaroundTime>
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f007 fdea 	bl	800bf7a <HAL_PCD_ResetCallback>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	695a      	ldr	r2, [r3, #20]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80043b4:	615a      	str	r2, [r3, #20]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4618      	mov	r0, r3
 80043bc:	f004 f9dc 	bl	8008778 <USB_ReadInterrupts>
 80043c0:	4603      	mov	r3, r0
 80043c2:	f003 0308 	and.w	r3, r3, #8
 80043c6:	2b08      	cmp	r3, #8
 80043c8:	d10a      	bne.n	80043e0 <HAL_PCD_IRQHandler+0x720>
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f007 fdc7 	bl	800bf5e <HAL_PCD_SOFCallback>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	695a      	ldr	r2, [r3, #20]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f002 0208 	and.w	r2, r2, #8
 80043de:	615a      	str	r2, [r3, #20]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4618      	mov	r0, r3
 80043e6:	f004 f9c7 	bl	8008778 <USB_ReadInterrupts>
 80043ea:	4603      	mov	r3, r0
 80043ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043f0:	2b80      	cmp	r3, #128	@ 0x80
 80043f2:	d123      	bne.n	800443c <HAL_PCD_IRQHandler+0x77c>
 80043f4:	6a3b      	ldr	r3, [r7, #32]
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80043fc:	6a3b      	ldr	r3, [r7, #32]
 80043fe:	619a      	str	r2, [r3, #24]
 8004400:	2301      	movs	r3, #1
 8004402:	627b      	str	r3, [r7, #36]	@ 0x24
 8004404:	e014      	b.n	8004430 <HAL_PCD_IRQHandler+0x770>
 8004406:	6879      	ldr	r1, [r7, #4]
 8004408:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800440a:	4613      	mov	r3, r2
 800440c:	00db      	lsls	r3, r3, #3
 800440e:	4413      	add	r3, r2
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	440b      	add	r3, r1
 8004414:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	2b01      	cmp	r3, #1
 800441c:	d105      	bne.n	800442a <HAL_PCD_IRQHandler+0x76a>
 800441e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004420:	b2db      	uxtb	r3, r3
 8004422:	4619      	mov	r1, r3
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 fb0a 	bl	8004a3e <HAL_PCD_EP_Abort>
 800442a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800442c:	3301      	adds	r3, #1
 800442e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	791b      	ldrb	r3, [r3, #4]
 8004434:	461a      	mov	r2, r3
 8004436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004438:	4293      	cmp	r3, r2
 800443a:	d3e4      	bcc.n	8004406 <HAL_PCD_IRQHandler+0x746>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4618      	mov	r0, r3
 8004442:	f004 f999 	bl	8008778 <USB_ReadInterrupts>
 8004446:	4603      	mov	r3, r0
 8004448:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800444c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004450:	d13c      	bne.n	80044cc <HAL_PCD_IRQHandler+0x80c>
 8004452:	2301      	movs	r3, #1
 8004454:	627b      	str	r3, [r7, #36]	@ 0x24
 8004456:	e02b      	b.n	80044b0 <HAL_PCD_IRQHandler+0x7f0>
 8004458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800445a:	015a      	lsls	r2, r3, #5
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	4413      	add	r3, r2
 8004460:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	61bb      	str	r3, [r7, #24]
 8004468:	6879      	ldr	r1, [r7, #4]
 800446a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800446c:	4613      	mov	r3, r2
 800446e:	00db      	lsls	r3, r3, #3
 8004470:	4413      	add	r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	440b      	add	r3, r1
 8004476:	3318      	adds	r3, #24
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	2b01      	cmp	r3, #1
 800447c:	d115      	bne.n	80044aa <HAL_PCD_IRQHandler+0x7ea>
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	2b00      	cmp	r3, #0
 8004482:	da12      	bge.n	80044aa <HAL_PCD_IRQHandler+0x7ea>
 8004484:	6879      	ldr	r1, [r7, #4]
 8004486:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004488:	4613      	mov	r3, r2
 800448a:	00db      	lsls	r3, r3, #3
 800448c:	4413      	add	r3, r2
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	440b      	add	r3, r1
 8004492:	3317      	adds	r3, #23
 8004494:	2201      	movs	r2, #1
 8004496:	701a      	strb	r2, [r3, #0]
 8004498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800449a:	b2db      	uxtb	r3, r3
 800449c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	4619      	mov	r1, r3
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 faca 	bl	8004a3e <HAL_PCD_EP_Abort>
 80044aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ac:	3301      	adds	r3, #1
 80044ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	791b      	ldrb	r3, [r3, #4]
 80044b4:	461a      	mov	r2, r3
 80044b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d3cd      	bcc.n	8004458 <HAL_PCD_IRQHandler+0x798>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	695a      	ldr	r2, [r3, #20]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80044ca:	615a      	str	r2, [r3, #20]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4618      	mov	r0, r3
 80044d2:	f004 f951 	bl	8008778 <USB_ReadInterrupts>
 80044d6:	4603      	mov	r3, r0
 80044d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80044dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80044e0:	d156      	bne.n	8004590 <HAL_PCD_IRQHandler+0x8d0>
 80044e2:	2301      	movs	r3, #1
 80044e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80044e6:	e045      	b.n	8004574 <HAL_PCD_IRQHandler+0x8b4>
 80044e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ea:	015a      	lsls	r2, r3, #5
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	4413      	add	r3, r2
 80044f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	61bb      	str	r3, [r7, #24]
 80044f8:	6879      	ldr	r1, [r7, #4]
 80044fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044fc:	4613      	mov	r3, r2
 80044fe:	00db      	lsls	r3, r3, #3
 8004500:	4413      	add	r3, r2
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	440b      	add	r3, r1
 8004506:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d12e      	bne.n	800456e <HAL_PCD_IRQHandler+0x8ae>
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	2b00      	cmp	r3, #0
 8004514:	da2b      	bge.n	800456e <HAL_PCD_IRQHandler+0x8ae>
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	0c1a      	lsrs	r2, r3, #16
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004520:	4053      	eors	r3, r2
 8004522:	f003 0301 	and.w	r3, r3, #1
 8004526:	2b00      	cmp	r3, #0
 8004528:	d121      	bne.n	800456e <HAL_PCD_IRQHandler+0x8ae>
 800452a:	6879      	ldr	r1, [r7, #4]
 800452c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800452e:	4613      	mov	r3, r2
 8004530:	00db      	lsls	r3, r3, #3
 8004532:	4413      	add	r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	440b      	add	r3, r1
 8004538:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800453c:	2201      	movs	r2, #1
 800453e:	701a      	strb	r2, [r3, #0]
 8004540:	6a3b      	ldr	r3, [r7, #32]
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004548:	6a3b      	ldr	r3, [r7, #32]
 800454a:	619a      	str	r2, [r3, #24]
 800454c:	6a3b      	ldr	r3, [r7, #32]
 800454e:	695b      	ldr	r3, [r3, #20]
 8004550:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004554:	2b00      	cmp	r3, #0
 8004556:	d10a      	bne.n	800456e <HAL_PCD_IRQHandler+0x8ae>
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	69fa      	ldr	r2, [r7, #28]
 8004562:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004566:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800456a:	6053      	str	r3, [r2, #4]
 800456c:	e008      	b.n	8004580 <HAL_PCD_IRQHandler+0x8c0>
 800456e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004570:	3301      	adds	r3, #1
 8004572:	627b      	str	r3, [r7, #36]	@ 0x24
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	791b      	ldrb	r3, [r3, #4]
 8004578:	461a      	mov	r2, r3
 800457a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800457c:	4293      	cmp	r3, r2
 800457e:	d3b3      	bcc.n	80044e8 <HAL_PCD_IRQHandler+0x828>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	695a      	ldr	r2, [r3, #20]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800458e:	615a      	str	r2, [r3, #20]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4618      	mov	r0, r3
 8004596:	f004 f8ef 	bl	8008778 <USB_ReadInterrupts>
 800459a:	4603      	mov	r3, r0
 800459c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80045a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045a4:	d10a      	bne.n	80045bc <HAL_PCD_IRQHandler+0x8fc>
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f007 fd68 	bl	800c07c <HAL_PCD_ConnectCallback>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	695a      	ldr	r2, [r3, #20]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80045ba:	615a      	str	r2, [r3, #20]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4618      	mov	r0, r3
 80045c2:	f004 f8d9 	bl	8008778 <USB_ReadInterrupts>
 80045c6:	4603      	mov	r3, r0
 80045c8:	f003 0304 	and.w	r3, r3, #4
 80045cc:	2b04      	cmp	r3, #4
 80045ce:	d115      	bne.n	80045fc <HAL_PCD_IRQHandler+0x93c>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	61bb      	str	r3, [r7, #24]
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	f003 0304 	and.w	r3, r3, #4
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d002      	beq.n	80045e8 <HAL_PCD_IRQHandler+0x928>
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f007 fd58 	bl	800c098 <HAL_PCD_DisconnectCallback>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	6859      	ldr	r1, [r3, #4]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	69ba      	ldr	r2, [r7, #24]
 80045f4:	430a      	orrs	r2, r1
 80045f6:	605a      	str	r2, [r3, #4]
 80045f8:	e000      	b.n	80045fc <HAL_PCD_IRQHandler+0x93c>
 80045fa:	bf00      	nop
 80045fc:	3734      	adds	r7, #52	@ 0x34
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd90      	pop	{r4, r7, pc}

08004602 <HAL_PCD_SetAddress>:
 8004602:	b580      	push	{r7, lr}
 8004604:	b082      	sub	sp, #8
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
 800460a:	460b      	mov	r3, r1
 800460c:	70fb      	strb	r3, [r7, #3]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004614:	2b01      	cmp	r3, #1
 8004616:	d101      	bne.n	800461c <HAL_PCD_SetAddress+0x1a>
 8004618:	2302      	movs	r3, #2
 800461a:	e012      	b.n	8004642 <HAL_PCD_SetAddress+0x40>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	78fa      	ldrb	r2, [r7, #3]
 8004628:	745a      	strb	r2, [r3, #17]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	78fa      	ldrb	r2, [r7, #3]
 8004630:	4611      	mov	r1, r2
 8004632:	4618      	mov	r0, r3
 8004634:	f004 f838 	bl	80086a8 <USB_SetDevAddress>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
 8004640:	2300      	movs	r3, #0
 8004642:	4618      	mov	r0, r3
 8004644:	3708      	adds	r7, #8
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}

0800464a <HAL_PCD_EP_Open>:
 800464a:	b580      	push	{r7, lr}
 800464c:	b084      	sub	sp, #16
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
 8004652:	4608      	mov	r0, r1
 8004654:	4611      	mov	r1, r2
 8004656:	461a      	mov	r2, r3
 8004658:	4603      	mov	r3, r0
 800465a:	70fb      	strb	r3, [r7, #3]
 800465c:	460b      	mov	r3, r1
 800465e:	803b      	strh	r3, [r7, #0]
 8004660:	4613      	mov	r3, r2
 8004662:	70bb      	strb	r3, [r7, #2]
 8004664:	2300      	movs	r3, #0
 8004666:	72fb      	strb	r3, [r7, #11]
 8004668:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800466c:	2b00      	cmp	r3, #0
 800466e:	da0f      	bge.n	8004690 <HAL_PCD_EP_Open+0x46>
 8004670:	78fb      	ldrb	r3, [r7, #3]
 8004672:	f003 020f 	and.w	r2, r3, #15
 8004676:	4613      	mov	r3, r2
 8004678:	00db      	lsls	r3, r3, #3
 800467a:	4413      	add	r3, r2
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	3310      	adds	r3, #16
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	4413      	add	r3, r2
 8004684:	3304      	adds	r3, #4
 8004686:	60fb      	str	r3, [r7, #12]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2201      	movs	r2, #1
 800468c:	705a      	strb	r2, [r3, #1]
 800468e:	e00f      	b.n	80046b0 <HAL_PCD_EP_Open+0x66>
 8004690:	78fb      	ldrb	r3, [r7, #3]
 8004692:	f003 020f 	and.w	r2, r3, #15
 8004696:	4613      	mov	r3, r2
 8004698:	00db      	lsls	r3, r3, #3
 800469a:	4413      	add	r3, r2
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	4413      	add	r3, r2
 80046a6:	3304      	adds	r3, #4
 80046a8:	60fb      	str	r3, [r7, #12]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	705a      	strb	r2, [r3, #1]
 80046b0:	78fb      	ldrb	r3, [r7, #3]
 80046b2:	f003 030f 	and.w	r3, r3, #15
 80046b6:	b2da      	uxtb	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	701a      	strb	r2, [r3, #0]
 80046bc:	883b      	ldrh	r3, [r7, #0]
 80046be:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	609a      	str	r2, [r3, #8]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	78ba      	ldrb	r2, [r7, #2]
 80046ca:	711a      	strb	r2, [r3, #4]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	785b      	ldrb	r3, [r3, #1]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d004      	beq.n	80046de <HAL_PCD_EP_Open+0x94>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	461a      	mov	r2, r3
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	835a      	strh	r2, [r3, #26]
 80046de:	78bb      	ldrb	r3, [r7, #2]
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d102      	bne.n	80046ea <HAL_PCD_EP_Open+0xa0>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	715a      	strb	r2, [r3, #5]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d101      	bne.n	80046f8 <HAL_PCD_EP_Open+0xae>
 80046f4:	2302      	movs	r3, #2
 80046f6:	e00e      	b.n	8004716 <HAL_PCD_EP_Open+0xcc>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68f9      	ldr	r1, [r7, #12]
 8004706:	4618      	mov	r0, r3
 8004708:	f003 f9b8 	bl	8007a7c <USB_ActivateEndpoint>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
 8004714:	7afb      	ldrb	r3, [r7, #11]
 8004716:	4618      	mov	r0, r3
 8004718:	3710      	adds	r7, #16
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}

0800471e <HAL_PCD_EP_Close>:
 800471e:	b580      	push	{r7, lr}
 8004720:	b084      	sub	sp, #16
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
 8004726:	460b      	mov	r3, r1
 8004728:	70fb      	strb	r3, [r7, #3]
 800472a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800472e:	2b00      	cmp	r3, #0
 8004730:	da0f      	bge.n	8004752 <HAL_PCD_EP_Close+0x34>
 8004732:	78fb      	ldrb	r3, [r7, #3]
 8004734:	f003 020f 	and.w	r2, r3, #15
 8004738:	4613      	mov	r3, r2
 800473a:	00db      	lsls	r3, r3, #3
 800473c:	4413      	add	r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	3310      	adds	r3, #16
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	4413      	add	r3, r2
 8004746:	3304      	adds	r3, #4
 8004748:	60fb      	str	r3, [r7, #12]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2201      	movs	r2, #1
 800474e:	705a      	strb	r2, [r3, #1]
 8004750:	e00f      	b.n	8004772 <HAL_PCD_EP_Close+0x54>
 8004752:	78fb      	ldrb	r3, [r7, #3]
 8004754:	f003 020f 	and.w	r2, r3, #15
 8004758:	4613      	mov	r3, r2
 800475a:	00db      	lsls	r3, r3, #3
 800475c:	4413      	add	r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	4413      	add	r3, r2
 8004768:	3304      	adds	r3, #4
 800476a:	60fb      	str	r3, [r7, #12]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	705a      	strb	r2, [r3, #1]
 8004772:	78fb      	ldrb	r3, [r7, #3]
 8004774:	f003 030f 	and.w	r3, r3, #15
 8004778:	b2da      	uxtb	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	701a      	strb	r2, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004784:	2b01      	cmp	r3, #1
 8004786:	d101      	bne.n	800478c <HAL_PCD_EP_Close+0x6e>
 8004788:	2302      	movs	r3, #2
 800478a:	e00e      	b.n	80047aa <HAL_PCD_EP_Close+0x8c>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68f9      	ldr	r1, [r7, #12]
 800479a:	4618      	mov	r0, r3
 800479c:	f003 f9f6 	bl	8007b8c <USB_DeactivateEndpoint>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
 80047a8:	2300      	movs	r3, #0
 80047aa:	4618      	mov	r0, r3
 80047ac:	3710      	adds	r7, #16
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}

080047b2 <HAL_PCD_EP_Receive>:
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b086      	sub	sp, #24
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	60f8      	str	r0, [r7, #12]
 80047ba:	607a      	str	r2, [r7, #4]
 80047bc:	603b      	str	r3, [r7, #0]
 80047be:	460b      	mov	r3, r1
 80047c0:	72fb      	strb	r3, [r7, #11]
 80047c2:	7afb      	ldrb	r3, [r7, #11]
 80047c4:	f003 020f 	and.w	r2, r3, #15
 80047c8:	4613      	mov	r3, r2
 80047ca:	00db      	lsls	r3, r3, #3
 80047cc:	4413      	add	r3, r2
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	4413      	add	r3, r2
 80047d8:	3304      	adds	r3, #4
 80047da:	617b      	str	r3, [r7, #20]
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	60da      	str	r2, [r3, #12]
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	683a      	ldr	r2, [r7, #0]
 80047e6:	611a      	str	r2, [r3, #16]
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	2200      	movs	r2, #0
 80047ec:	615a      	str	r2, [r3, #20]
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	2200      	movs	r2, #0
 80047f2:	705a      	strb	r2, [r3, #1]
 80047f4:	7afb      	ldrb	r3, [r7, #11]
 80047f6:	f003 030f 	and.w	r3, r3, #15
 80047fa:	b2da      	uxtb	r2, r3
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	701a      	strb	r2, [r3, #0]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	799b      	ldrb	r3, [r3, #6]
 8004804:	2b01      	cmp	r3, #1
 8004806:	d102      	bne.n	800480e <HAL_PCD_EP_Receive+0x5c>
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	61da      	str	r2, [r3, #28]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6818      	ldr	r0, [r3, #0]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	799b      	ldrb	r3, [r3, #6]
 8004816:	461a      	mov	r2, r3
 8004818:	6979      	ldr	r1, [r7, #20]
 800481a:	f003 fa93 	bl	8007d44 <USB_EPStartXfer>
 800481e:	2300      	movs	r3, #0
 8004820:	4618      	mov	r0, r3
 8004822:	3718      	adds	r7, #24
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <HAL_PCD_EP_GetRxCount>:
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	460b      	mov	r3, r1
 8004832:	70fb      	strb	r3, [r7, #3]
 8004834:	78fb      	ldrb	r3, [r7, #3]
 8004836:	f003 020f 	and.w	r2, r3, #15
 800483a:	6879      	ldr	r1, [r7, #4]
 800483c:	4613      	mov	r3, r2
 800483e:	00db      	lsls	r3, r3, #3
 8004840:	4413      	add	r3, r2
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	440b      	add	r3, r1
 8004846:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4618      	mov	r0, r3
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <HAL_PCD_EP_Transmit>:
 8004858:	b580      	push	{r7, lr}
 800485a:	b086      	sub	sp, #24
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	607a      	str	r2, [r7, #4]
 8004862:	603b      	str	r3, [r7, #0]
 8004864:	460b      	mov	r3, r1
 8004866:	72fb      	strb	r3, [r7, #11]
 8004868:	7afb      	ldrb	r3, [r7, #11]
 800486a:	f003 020f 	and.w	r2, r3, #15
 800486e:	4613      	mov	r3, r2
 8004870:	00db      	lsls	r3, r3, #3
 8004872:	4413      	add	r3, r2
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	3310      	adds	r3, #16
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	4413      	add	r3, r2
 800487c:	3304      	adds	r3, #4
 800487e:	617b      	str	r3, [r7, #20]
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	60da      	str	r2, [r3, #12]
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	683a      	ldr	r2, [r7, #0]
 800488a:	611a      	str	r2, [r3, #16]
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	2200      	movs	r2, #0
 8004890:	615a      	str	r2, [r3, #20]
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	2201      	movs	r2, #1
 8004896:	705a      	strb	r2, [r3, #1]
 8004898:	7afb      	ldrb	r3, [r7, #11]
 800489a:	f003 030f 	and.w	r3, r3, #15
 800489e:	b2da      	uxtb	r2, r3
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	701a      	strb	r2, [r3, #0]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	799b      	ldrb	r3, [r3, #6]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d102      	bne.n	80048b2 <HAL_PCD_EP_Transmit+0x5a>
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	61da      	str	r2, [r3, #28]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6818      	ldr	r0, [r3, #0]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	799b      	ldrb	r3, [r3, #6]
 80048ba:	461a      	mov	r2, r3
 80048bc:	6979      	ldr	r1, [r7, #20]
 80048be:	f003 fa41 	bl	8007d44 <USB_EPStartXfer>
 80048c2:	2300      	movs	r3, #0
 80048c4:	4618      	mov	r0, r3
 80048c6:	3718      	adds	r7, #24
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <HAL_PCD_EP_SetStall>:
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	460b      	mov	r3, r1
 80048d6:	70fb      	strb	r3, [r7, #3]
 80048d8:	78fb      	ldrb	r3, [r7, #3]
 80048da:	f003 030f 	and.w	r3, r3, #15
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	7912      	ldrb	r2, [r2, #4]
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d901      	bls.n	80048ea <HAL_PCD_EP_SetStall+0x1e>
 80048e6:	2301      	movs	r3, #1
 80048e8:	e04f      	b.n	800498a <HAL_PCD_EP_SetStall+0xbe>
 80048ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	da0f      	bge.n	8004912 <HAL_PCD_EP_SetStall+0x46>
 80048f2:	78fb      	ldrb	r3, [r7, #3]
 80048f4:	f003 020f 	and.w	r2, r3, #15
 80048f8:	4613      	mov	r3, r2
 80048fa:	00db      	lsls	r3, r3, #3
 80048fc:	4413      	add	r3, r2
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	3310      	adds	r3, #16
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	4413      	add	r3, r2
 8004906:	3304      	adds	r3, #4
 8004908:	60fb      	str	r3, [r7, #12]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2201      	movs	r2, #1
 800490e:	705a      	strb	r2, [r3, #1]
 8004910:	e00d      	b.n	800492e <HAL_PCD_EP_SetStall+0x62>
 8004912:	78fa      	ldrb	r2, [r7, #3]
 8004914:	4613      	mov	r3, r2
 8004916:	00db      	lsls	r3, r3, #3
 8004918:	4413      	add	r3, r2
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	4413      	add	r3, r2
 8004924:	3304      	adds	r3, #4
 8004926:	60fb      	str	r3, [r7, #12]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	705a      	strb	r2, [r3, #1]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2201      	movs	r2, #1
 8004932:	709a      	strb	r2, [r3, #2]
 8004934:	78fb      	ldrb	r3, [r7, #3]
 8004936:	f003 030f 	and.w	r3, r3, #15
 800493a:	b2da      	uxtb	r2, r3
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	701a      	strb	r2, [r3, #0]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004946:	2b01      	cmp	r3, #1
 8004948:	d101      	bne.n	800494e <HAL_PCD_EP_SetStall+0x82>
 800494a:	2302      	movs	r3, #2
 800494c:	e01d      	b.n	800498a <HAL_PCD_EP_SetStall+0xbe>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2201      	movs	r2, #1
 8004952:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68f9      	ldr	r1, [r7, #12]
 800495c:	4618      	mov	r0, r3
 800495e:	f003 fdcf 	bl	8008500 <USB_EPSetStall>
 8004962:	78fb      	ldrb	r3, [r7, #3]
 8004964:	f003 030f 	and.w	r3, r3, #15
 8004968:	2b00      	cmp	r3, #0
 800496a:	d109      	bne.n	8004980 <HAL_PCD_EP_SetStall+0xb4>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6818      	ldr	r0, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	7999      	ldrb	r1, [r3, #6]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800497a:	461a      	mov	r2, r3
 800497c:	f003 ffc0 	bl	8008900 <USB_EP0_OutStart>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
 8004988:	2300      	movs	r3, #0
 800498a:	4618      	mov	r0, r3
 800498c:	3710      	adds	r7, #16
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}

08004992 <HAL_PCD_EP_ClrStall>:
 8004992:	b580      	push	{r7, lr}
 8004994:	b084      	sub	sp, #16
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
 800499a:	460b      	mov	r3, r1
 800499c:	70fb      	strb	r3, [r7, #3]
 800499e:	78fb      	ldrb	r3, [r7, #3]
 80049a0:	f003 030f 	and.w	r3, r3, #15
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	7912      	ldrb	r2, [r2, #4]
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d901      	bls.n	80049b0 <HAL_PCD_EP_ClrStall+0x1e>
 80049ac:	2301      	movs	r3, #1
 80049ae:	e042      	b.n	8004a36 <HAL_PCD_EP_ClrStall+0xa4>
 80049b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	da0f      	bge.n	80049d8 <HAL_PCD_EP_ClrStall+0x46>
 80049b8:	78fb      	ldrb	r3, [r7, #3]
 80049ba:	f003 020f 	and.w	r2, r3, #15
 80049be:	4613      	mov	r3, r2
 80049c0:	00db      	lsls	r3, r3, #3
 80049c2:	4413      	add	r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	3310      	adds	r3, #16
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	4413      	add	r3, r2
 80049cc:	3304      	adds	r3, #4
 80049ce:	60fb      	str	r3, [r7, #12]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2201      	movs	r2, #1
 80049d4:	705a      	strb	r2, [r3, #1]
 80049d6:	e00f      	b.n	80049f8 <HAL_PCD_EP_ClrStall+0x66>
 80049d8:	78fb      	ldrb	r3, [r7, #3]
 80049da:	f003 020f 	and.w	r2, r3, #15
 80049de:	4613      	mov	r3, r2
 80049e0:	00db      	lsls	r3, r3, #3
 80049e2:	4413      	add	r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	4413      	add	r3, r2
 80049ee:	3304      	adds	r3, #4
 80049f0:	60fb      	str	r3, [r7, #12]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	705a      	strb	r2, [r3, #1]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	709a      	strb	r2, [r3, #2]
 80049fe:	78fb      	ldrb	r3, [r7, #3]
 8004a00:	f003 030f 	and.w	r3, r3, #15
 8004a04:	b2da      	uxtb	r2, r3
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	701a      	strb	r2, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d101      	bne.n	8004a18 <HAL_PCD_EP_ClrStall+0x86>
 8004a14:	2302      	movs	r3, #2
 8004a16:	e00e      	b.n	8004a36 <HAL_PCD_EP_ClrStall+0xa4>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68f9      	ldr	r1, [r7, #12]
 8004a26:	4618      	mov	r0, r3
 8004a28:	f003 fdd8 	bl	80085dc <USB_EPClearStall>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
 8004a34:	2300      	movs	r3, #0
 8004a36:	4618      	mov	r0, r3
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <HAL_PCD_EP_Abort>:
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b084      	sub	sp, #16
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
 8004a46:	460b      	mov	r3, r1
 8004a48:	70fb      	strb	r3, [r7, #3]
 8004a4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	da0c      	bge.n	8004a6c <HAL_PCD_EP_Abort+0x2e>
 8004a52:	78fb      	ldrb	r3, [r7, #3]
 8004a54:	f003 020f 	and.w	r2, r3, #15
 8004a58:	4613      	mov	r3, r2
 8004a5a:	00db      	lsls	r3, r3, #3
 8004a5c:	4413      	add	r3, r2
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	3310      	adds	r3, #16
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	4413      	add	r3, r2
 8004a66:	3304      	adds	r3, #4
 8004a68:	60fb      	str	r3, [r7, #12]
 8004a6a:	e00c      	b.n	8004a86 <HAL_PCD_EP_Abort+0x48>
 8004a6c:	78fb      	ldrb	r3, [r7, #3]
 8004a6e:	f003 020f 	and.w	r2, r3, #15
 8004a72:	4613      	mov	r3, r2
 8004a74:	00db      	lsls	r3, r3, #3
 8004a76:	4413      	add	r3, r2
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	4413      	add	r3, r2
 8004a82:	3304      	adds	r3, #4
 8004a84:	60fb      	str	r3, [r7, #12]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68f9      	ldr	r1, [r7, #12]
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f003 fbf7 	bl	8008280 <USB_EPStopXfer>
 8004a92:	4603      	mov	r3, r0
 8004a94:	72fb      	strb	r3, [r7, #11]
 8004a96:	7afb      	ldrb	r3, [r7, #11]
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <PCD_WriteEmptyTxFifo>:
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b08a      	sub	sp, #40	@ 0x28
 8004aa4:	af02      	add	r7, sp, #8
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	617b      	str	r3, [r7, #20]
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	613b      	str	r3, [r7, #16]
 8004ab4:	683a      	ldr	r2, [r7, #0]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	00db      	lsls	r3, r3, #3
 8004aba:	4413      	add	r3, r2
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	3310      	adds	r3, #16
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	3304      	adds	r3, #4
 8004ac6:	60fb      	str	r3, [r7, #12]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	695a      	ldr	r2, [r3, #20]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d901      	bls.n	8004ad8 <PCD_WriteEmptyTxFifo+0x38>
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e06b      	b.n	8004bb0 <PCD_WriteEmptyTxFifo+0x110>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	691a      	ldr	r2, [r3, #16]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	695b      	ldr	r3, [r3, #20]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	61fb      	str	r3, [r7, #28]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	69fa      	ldr	r2, [r7, #28]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d902      	bls.n	8004af4 <PCD_WriteEmptyTxFifo+0x54>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	61fb      	str	r3, [r7, #28]
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	3303      	adds	r3, #3
 8004af8:	089b      	lsrs	r3, r3, #2
 8004afa:	61bb      	str	r3, [r7, #24]
 8004afc:	e02a      	b.n	8004b54 <PCD_WriteEmptyTxFifo+0xb4>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	691a      	ldr	r2, [r3, #16]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	61fb      	str	r3, [r7, #28]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	69fa      	ldr	r2, [r7, #28]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d902      	bls.n	8004b1a <PCD_WriteEmptyTxFifo+0x7a>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	61fb      	str	r3, [r7, #28]
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	3303      	adds	r3, #3
 8004b1e:	089b      	lsrs	r3, r3, #2
 8004b20:	61bb      	str	r3, [r7, #24]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	68d9      	ldr	r1, [r3, #12]
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	b2da      	uxtb	r2, r3
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	b298      	uxth	r0, r3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	799b      	ldrb	r3, [r3, #6]
 8004b32:	9300      	str	r3, [sp, #0]
 8004b34:	4603      	mov	r3, r0
 8004b36:	6978      	ldr	r0, [r7, #20]
 8004b38:	f003 fc4c 	bl	80083d4 <USB_WritePacket>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	68da      	ldr	r2, [r3, #12]
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	441a      	add	r2, r3
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	60da      	str	r2, [r3, #12]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	695a      	ldr	r2, [r3, #20]
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	441a      	add	r2, r3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	615a      	str	r2, [r3, #20]
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	015a      	lsls	r2, r3, #5
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	69ba      	ldr	r2, [r7, #24]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d809      	bhi.n	8004b7e <PCD_WriteEmptyTxFifo+0xde>
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	695a      	ldr	r2, [r3, #20]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d203      	bcs.n	8004b7e <PCD_WriteEmptyTxFifo+0xde>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1bf      	bne.n	8004afe <PCD_WriteEmptyTxFifo+0x5e>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	691a      	ldr	r2, [r3, #16]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	695b      	ldr	r3, [r3, #20]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d811      	bhi.n	8004bae <PCD_WriteEmptyTxFifo+0x10e>
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	f003 030f 	and.w	r3, r3, #15
 8004b90:	2201      	movs	r2, #1
 8004b92:	fa02 f303 	lsl.w	r3, r2, r3
 8004b96:	60bb      	str	r3, [r7, #8]
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	43db      	mvns	r3, r3
 8004ba4:	6939      	ldr	r1, [r7, #16]
 8004ba6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004baa:	4013      	ands	r3, r2
 8004bac:	634b      	str	r3, [r1, #52]	@ 0x34
 8004bae:	2300      	movs	r3, #0
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3720      	adds	r7, #32
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <PCD_EP_OutXfrComplete_int>:
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b088      	sub	sp, #32
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	61fb      	str	r3, [r7, #28]
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	61bb      	str	r3, [r7, #24]
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	333c      	adds	r3, #60	@ 0x3c
 8004bd0:	3304      	adds	r3, #4
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	617b      	str	r3, [r7, #20]
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	015a      	lsls	r2, r3, #5
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	4413      	add	r3, r2
 8004bde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	613b      	str	r3, [r7, #16]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	799b      	ldrb	r3, [r3, #6]
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d17b      	bne.n	8004ce6 <PCD_EP_OutXfrComplete_int+0x12e>
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	f003 0308 	and.w	r3, r3, #8
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d015      	beq.n	8004c24 <PCD_EP_OutXfrComplete_int+0x6c>
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	4a61      	ldr	r2, [pc, #388]	@ (8004d80 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	f240 80b9 	bls.w	8004d74 <PCD_EP_OutXfrComplete_int+0x1bc>
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f000 80b3 	beq.w	8004d74 <PCD_EP_OutXfrComplete_int+0x1bc>
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	015a      	lsls	r2, r3, #5
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	4413      	add	r3, r2
 8004c16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c20:	6093      	str	r3, [r2, #8]
 8004c22:	e0a7      	b.n	8004d74 <PCD_EP_OutXfrComplete_int+0x1bc>
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	f003 0320 	and.w	r3, r3, #32
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d009      	beq.n	8004c42 <PCD_EP_OutXfrComplete_int+0x8a>
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	015a      	lsls	r2, r3, #5
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	4413      	add	r3, r2
 8004c36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	2320      	movs	r3, #32
 8004c3e:	6093      	str	r3, [r2, #8]
 8004c40:	e098      	b.n	8004d74 <PCD_EP_OutXfrComplete_int+0x1bc>
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	f040 8093 	bne.w	8004d74 <PCD_EP_OutXfrComplete_int+0x1bc>
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	4a4b      	ldr	r2, [pc, #300]	@ (8004d80 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d90f      	bls.n	8004c76 <PCD_EP_OutXfrComplete_int+0xbe>
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d00a      	beq.n	8004c76 <PCD_EP_OutXfrComplete_int+0xbe>
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	015a      	lsls	r2, r3, #5
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	4413      	add	r3, r2
 8004c68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c72:	6093      	str	r3, [r2, #8]
 8004c74:	e07e      	b.n	8004d74 <PCD_EP_OutXfrComplete_int+0x1bc>
 8004c76:	683a      	ldr	r2, [r7, #0]
 8004c78:	4613      	mov	r3, r2
 8004c7a:	00db      	lsls	r3, r3, #3
 8004c7c:	4413      	add	r3, r2
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	4413      	add	r3, r2
 8004c88:	3304      	adds	r3, #4
 8004c8a:	60fb      	str	r3, [r7, #12]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6a1a      	ldr	r2, [r3, #32]
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	0159      	lsls	r1, r3, #5
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	440b      	add	r3, r1
 8004c98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ca2:	1ad2      	subs	r2, r2, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	615a      	str	r2, [r3, #20]
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d114      	bne.n	8004cd8 <PCD_EP_OutXfrComplete_int+0x120>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d109      	bne.n	8004cca <PCD_EP_OutXfrComplete_int+0x112>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6818      	ldr	r0, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	2101      	movs	r1, #1
 8004cc4:	f003 fe1c 	bl	8008900 <USB_EP0_OutStart>
 8004cc8:	e006      	b.n	8004cd8 <PCD_EP_OutXfrComplete_int+0x120>
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	68da      	ldr	r2, [r3, #12]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	441a      	add	r2, r3
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	60da      	str	r2, [r3, #12]
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	4619      	mov	r1, r3
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f007 f908 	bl	800bef4 <HAL_PCD_DataOutStageCallback>
 8004ce4:	e046      	b.n	8004d74 <PCD_EP_OutXfrComplete_int+0x1bc>
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	4a26      	ldr	r2, [pc, #152]	@ (8004d84 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d124      	bne.n	8004d38 <PCD_EP_OutXfrComplete_int+0x180>
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d00a      	beq.n	8004d0e <PCD_EP_OutXfrComplete_int+0x156>
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	015a      	lsls	r2, r3, #5
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	4413      	add	r3, r2
 8004d00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d04:	461a      	mov	r2, r3
 8004d06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d0a:	6093      	str	r3, [r2, #8]
 8004d0c:	e032      	b.n	8004d74 <PCD_EP_OutXfrComplete_int+0x1bc>
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	f003 0320 	and.w	r3, r3, #32
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d008      	beq.n	8004d2a <PCD_EP_OutXfrComplete_int+0x172>
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	015a      	lsls	r2, r3, #5
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	4413      	add	r3, r2
 8004d20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d24:	461a      	mov	r2, r3
 8004d26:	2320      	movs	r3, #32
 8004d28:	6093      	str	r3, [r2, #8]
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	4619      	mov	r1, r3
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f007 f8df 	bl	800bef4 <HAL_PCD_DataOutStageCallback>
 8004d36:	e01d      	b.n	8004d74 <PCD_EP_OutXfrComplete_int+0x1bc>
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d114      	bne.n	8004d68 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004d3e:	6879      	ldr	r1, [r7, #4]
 8004d40:	683a      	ldr	r2, [r7, #0]
 8004d42:	4613      	mov	r3, r2
 8004d44:	00db      	lsls	r3, r3, #3
 8004d46:	4413      	add	r3, r2
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	440b      	add	r3, r1
 8004d4c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d108      	bne.n	8004d68 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6818      	ldr	r0, [r3, #0]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004d60:	461a      	mov	r2, r3
 8004d62:	2100      	movs	r1, #0
 8004d64:	f003 fdcc 	bl	8008900 <USB_EP0_OutStart>
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f007 f8c0 	bl	800bef4 <HAL_PCD_DataOutStageCallback>
 8004d74:	2300      	movs	r3, #0
 8004d76:	4618      	mov	r0, r3
 8004d78:	3720      	adds	r7, #32
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	4f54300a 	.word	0x4f54300a
 8004d84:	4f54310a 	.word	0x4f54310a

08004d88 <PCD_EP_OutSetupPacket_int>:
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b086      	sub	sp, #24
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	617b      	str	r3, [r7, #20]
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	613b      	str	r3, [r7, #16]
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	333c      	adds	r3, #60	@ 0x3c
 8004da0:	3304      	adds	r3, #4
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	60fb      	str	r3, [r7, #12]
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	015a      	lsls	r2, r3, #5
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	4413      	add	r3, r2
 8004dae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	60bb      	str	r3, [r7, #8]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	4a15      	ldr	r2, [pc, #84]	@ (8004e10 <PCD_EP_OutSetupPacket_int+0x88>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d90e      	bls.n	8004ddc <PCD_EP_OutSetupPacket_int+0x54>
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d009      	beq.n	8004ddc <PCD_EP_OutSetupPacket_int+0x54>
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	015a      	lsls	r2, r3, #5
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	4413      	add	r3, r2
 8004dd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dda:	6093      	str	r3, [r2, #8]
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f007 f877 	bl	800bed0 <HAL_PCD_SetupStageCallback>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	4a0a      	ldr	r2, [pc, #40]	@ (8004e10 <PCD_EP_OutSetupPacket_int+0x88>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d90c      	bls.n	8004e04 <PCD_EP_OutSetupPacket_int+0x7c>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	799b      	ldrb	r3, [r3, #6]
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d108      	bne.n	8004e04 <PCD_EP_OutSetupPacket_int+0x7c>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6818      	ldr	r0, [r3, #0]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	2101      	movs	r1, #1
 8004e00:	f003 fd7e 	bl	8008900 <USB_EP0_OutStart>
 8004e04:	2300      	movs	r3, #0
 8004e06:	4618      	mov	r0, r3
 8004e08:	3718      	adds	r7, #24
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	4f54300a 	.word	0x4f54300a

08004e14 <HAL_PCDEx_SetTxFiFo>:
 8004e14:	b480      	push	{r7}
 8004e16:	b085      	sub	sp, #20
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	70fb      	strb	r3, [r7, #3]
 8004e20:	4613      	mov	r3, r2
 8004e22:	803b      	strh	r3, [r7, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e2a:	60bb      	str	r3, [r7, #8]
 8004e2c:	78fb      	ldrb	r3, [r7, #3]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d107      	bne.n	8004e42 <HAL_PCDEx_SetTxFiFo+0x2e>
 8004e32:	883b      	ldrh	r3, [r7, #0]
 8004e34:	0419      	lsls	r1, r3, #16
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68ba      	ldr	r2, [r7, #8]
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004e40:	e028      	b.n	8004e94 <HAL_PCDEx_SetTxFiFo+0x80>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e48:	0c1b      	lsrs	r3, r3, #16
 8004e4a:	68ba      	ldr	r2, [r7, #8]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	60bb      	str	r3, [r7, #8]
 8004e50:	2300      	movs	r3, #0
 8004e52:	73fb      	strb	r3, [r7, #15]
 8004e54:	e00d      	b.n	8004e72 <HAL_PCDEx_SetTxFiFo+0x5e>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	7bfb      	ldrb	r3, [r7, #15]
 8004e5c:	3340      	adds	r3, #64	@ 0x40
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	4413      	add	r3, r2
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	0c1b      	lsrs	r3, r3, #16
 8004e66:	68ba      	ldr	r2, [r7, #8]
 8004e68:	4413      	add	r3, r2
 8004e6a:	60bb      	str	r3, [r7, #8]
 8004e6c:	7bfb      	ldrb	r3, [r7, #15]
 8004e6e:	3301      	adds	r3, #1
 8004e70:	73fb      	strb	r3, [r7, #15]
 8004e72:	7bfa      	ldrb	r2, [r7, #15]
 8004e74:	78fb      	ldrb	r3, [r7, #3]
 8004e76:	3b01      	subs	r3, #1
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d3ec      	bcc.n	8004e56 <HAL_PCDEx_SetTxFiFo+0x42>
 8004e7c:	883b      	ldrh	r3, [r7, #0]
 8004e7e:	0418      	lsls	r0, r3, #16
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6819      	ldr	r1, [r3, #0]
 8004e84:	78fb      	ldrb	r3, [r7, #3]
 8004e86:	3b01      	subs	r3, #1
 8004e88:	68ba      	ldr	r2, [r7, #8]
 8004e8a:	4302      	orrs	r2, r0
 8004e8c:	3340      	adds	r3, #64	@ 0x40
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	440b      	add	r3, r1
 8004e92:	605a      	str	r2, [r3, #4]
 8004e94:	2300      	movs	r3, #0
 8004e96:	4618      	mov	r0, r3
 8004e98:	3714      	adds	r7, #20
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr

08004ea2 <HAL_PCDEx_SetRxFiFo>:
 8004ea2:	b480      	push	{r7}
 8004ea4:	b083      	sub	sp, #12
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
 8004eaa:	460b      	mov	r3, r1
 8004eac:	807b      	strh	r3, [r7, #2]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	887a      	ldrh	r2, [r7, #2]
 8004eb4:	625a      	str	r2, [r3, #36]	@ 0x24
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	4618      	mov	r0, r3
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <HAL_PCDEx_LPM_Callback>:
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	460b      	mov	r3, r1
 8004ece:	70fb      	strb	r3, [r7, #3]
 8004ed0:	bf00      	nop
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <HAL_RCC_OscConfig>:
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b086      	sub	sp, #24
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d101      	bne.n	8004eee <HAL_RCC_OscConfig+0x12>
 8004eea:	2301      	movs	r3, #1
 8004eec:	e267      	b.n	80053be <HAL_RCC_OscConfig+0x4e2>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d075      	beq.n	8004fe6 <HAL_RCC_OscConfig+0x10a>
 8004efa:	4b88      	ldr	r3, [pc, #544]	@ (800511c <HAL_RCC_OscConfig+0x240>)
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f003 030c 	and.w	r3, r3, #12
 8004f02:	2b04      	cmp	r3, #4
 8004f04:	d00c      	beq.n	8004f20 <HAL_RCC_OscConfig+0x44>
 8004f06:	4b85      	ldr	r3, [pc, #532]	@ (800511c <HAL_RCC_OscConfig+0x240>)
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f003 030c 	and.w	r3, r3, #12
 8004f0e:	2b08      	cmp	r3, #8
 8004f10:	d112      	bne.n	8004f38 <HAL_RCC_OscConfig+0x5c>
 8004f12:	4b82      	ldr	r3, [pc, #520]	@ (800511c <HAL_RCC_OscConfig+0x240>)
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f1a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f1e:	d10b      	bne.n	8004f38 <HAL_RCC_OscConfig+0x5c>
 8004f20:	4b7e      	ldr	r3, [pc, #504]	@ (800511c <HAL_RCC_OscConfig+0x240>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d05b      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x108>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d157      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x108>
 8004f34:	2301      	movs	r3, #1
 8004f36:	e242      	b.n	80053be <HAL_RCC_OscConfig+0x4e2>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f40:	d106      	bne.n	8004f50 <HAL_RCC_OscConfig+0x74>
 8004f42:	4b76      	ldr	r3, [pc, #472]	@ (800511c <HAL_RCC_OscConfig+0x240>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a75      	ldr	r2, [pc, #468]	@ (800511c <HAL_RCC_OscConfig+0x240>)
 8004f48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f4c:	6013      	str	r3, [r2, #0]
 8004f4e:	e01d      	b.n	8004f8c <HAL_RCC_OscConfig+0xb0>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f58:	d10c      	bne.n	8004f74 <HAL_RCC_OscConfig+0x98>
 8004f5a:	4b70      	ldr	r3, [pc, #448]	@ (800511c <HAL_RCC_OscConfig+0x240>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a6f      	ldr	r2, [pc, #444]	@ (800511c <HAL_RCC_OscConfig+0x240>)
 8004f60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f64:	6013      	str	r3, [r2, #0]
 8004f66:	4b6d      	ldr	r3, [pc, #436]	@ (800511c <HAL_RCC_OscConfig+0x240>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a6c      	ldr	r2, [pc, #432]	@ (800511c <HAL_RCC_OscConfig+0x240>)
 8004f6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f70:	6013      	str	r3, [r2, #0]
 8004f72:	e00b      	b.n	8004f8c <HAL_RCC_OscConfig+0xb0>
 8004f74:	4b69      	ldr	r3, [pc, #420]	@ (800511c <HAL_RCC_OscConfig+0x240>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a68      	ldr	r2, [pc, #416]	@ (800511c <HAL_RCC_OscConfig+0x240>)
 8004f7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f7e:	6013      	str	r3, [r2, #0]
 8004f80:	4b66      	ldr	r3, [pc, #408]	@ (800511c <HAL_RCC_OscConfig+0x240>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a65      	ldr	r2, [pc, #404]	@ (800511c <HAL_RCC_OscConfig+0x240>)
 8004f86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f8a:	6013      	str	r3, [r2, #0]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d013      	beq.n	8004fbc <HAL_RCC_OscConfig+0xe0>
 8004f94:	f7fc fd22 	bl	80019dc <HAL_GetTick>
 8004f98:	6138      	str	r0, [r7, #16]
 8004f9a:	e008      	b.n	8004fae <HAL_RCC_OscConfig+0xd2>
 8004f9c:	f7fc fd1e 	bl	80019dc <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	2b64      	cmp	r3, #100	@ 0x64
 8004fa8:	d901      	bls.n	8004fae <HAL_RCC_OscConfig+0xd2>
 8004faa:	2303      	movs	r3, #3
 8004fac:	e207      	b.n	80053be <HAL_RCC_OscConfig+0x4e2>
 8004fae:	4b5b      	ldr	r3, [pc, #364]	@ (800511c <HAL_RCC_OscConfig+0x240>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d0f0      	beq.n	8004f9c <HAL_RCC_OscConfig+0xc0>
 8004fba:	e014      	b.n	8004fe6 <HAL_RCC_OscConfig+0x10a>
 8004fbc:	f7fc fd0e 	bl	80019dc <HAL_GetTick>
 8004fc0:	6138      	str	r0, [r7, #16]
 8004fc2:	e008      	b.n	8004fd6 <HAL_RCC_OscConfig+0xfa>
 8004fc4:	f7fc fd0a 	bl	80019dc <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	2b64      	cmp	r3, #100	@ 0x64
 8004fd0:	d901      	bls.n	8004fd6 <HAL_RCC_OscConfig+0xfa>
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e1f3      	b.n	80053be <HAL_RCC_OscConfig+0x4e2>
 8004fd6:	4b51      	ldr	r3, [pc, #324]	@ (800511c <HAL_RCC_OscConfig+0x240>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1f0      	bne.n	8004fc4 <HAL_RCC_OscConfig+0xe8>
 8004fe2:	e000      	b.n	8004fe6 <HAL_RCC_OscConfig+0x10a>
 8004fe4:	bf00      	nop
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0302 	and.w	r3, r3, #2
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d063      	beq.n	80050ba <HAL_RCC_OscConfig+0x1de>
 8004ff2:	4b4a      	ldr	r3, [pc, #296]	@ (800511c <HAL_RCC_OscConfig+0x240>)
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f003 030c 	and.w	r3, r3, #12
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00b      	beq.n	8005016 <HAL_RCC_OscConfig+0x13a>
 8004ffe:	4b47      	ldr	r3, [pc, #284]	@ (800511c <HAL_RCC_OscConfig+0x240>)
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f003 030c 	and.w	r3, r3, #12
 8005006:	2b08      	cmp	r3, #8
 8005008:	d11c      	bne.n	8005044 <HAL_RCC_OscConfig+0x168>
 800500a:	4b44      	ldr	r3, [pc, #272]	@ (800511c <HAL_RCC_OscConfig+0x240>)
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d116      	bne.n	8005044 <HAL_RCC_OscConfig+0x168>
 8005016:	4b41      	ldr	r3, [pc, #260]	@ (800511c <HAL_RCC_OscConfig+0x240>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0302 	and.w	r3, r3, #2
 800501e:	2b00      	cmp	r3, #0
 8005020:	d005      	beq.n	800502e <HAL_RCC_OscConfig+0x152>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	2b01      	cmp	r3, #1
 8005028:	d001      	beq.n	800502e <HAL_RCC_OscConfig+0x152>
 800502a:	2301      	movs	r3, #1
 800502c:	e1c7      	b.n	80053be <HAL_RCC_OscConfig+0x4e2>
 800502e:	4b3b      	ldr	r3, [pc, #236]	@ (800511c <HAL_RCC_OscConfig+0x240>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	00db      	lsls	r3, r3, #3
 800503c:	4937      	ldr	r1, [pc, #220]	@ (800511c <HAL_RCC_OscConfig+0x240>)
 800503e:	4313      	orrs	r3, r2
 8005040:	600b      	str	r3, [r1, #0]
 8005042:	e03a      	b.n	80050ba <HAL_RCC_OscConfig+0x1de>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d020      	beq.n	800508e <HAL_RCC_OscConfig+0x1b2>
 800504c:	4b34      	ldr	r3, [pc, #208]	@ (8005120 <HAL_RCC_OscConfig+0x244>)
 800504e:	2201      	movs	r2, #1
 8005050:	601a      	str	r2, [r3, #0]
 8005052:	f7fc fcc3 	bl	80019dc <HAL_GetTick>
 8005056:	6138      	str	r0, [r7, #16]
 8005058:	e008      	b.n	800506c <HAL_RCC_OscConfig+0x190>
 800505a:	f7fc fcbf 	bl	80019dc <HAL_GetTick>
 800505e:	4602      	mov	r2, r0
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	2b02      	cmp	r3, #2
 8005066:	d901      	bls.n	800506c <HAL_RCC_OscConfig+0x190>
 8005068:	2303      	movs	r3, #3
 800506a:	e1a8      	b.n	80053be <HAL_RCC_OscConfig+0x4e2>
 800506c:	4b2b      	ldr	r3, [pc, #172]	@ (800511c <HAL_RCC_OscConfig+0x240>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0302 	and.w	r3, r3, #2
 8005074:	2b00      	cmp	r3, #0
 8005076:	d0f0      	beq.n	800505a <HAL_RCC_OscConfig+0x17e>
 8005078:	4b28      	ldr	r3, [pc, #160]	@ (800511c <HAL_RCC_OscConfig+0x240>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	00db      	lsls	r3, r3, #3
 8005086:	4925      	ldr	r1, [pc, #148]	@ (800511c <HAL_RCC_OscConfig+0x240>)
 8005088:	4313      	orrs	r3, r2
 800508a:	600b      	str	r3, [r1, #0]
 800508c:	e015      	b.n	80050ba <HAL_RCC_OscConfig+0x1de>
 800508e:	4b24      	ldr	r3, [pc, #144]	@ (8005120 <HAL_RCC_OscConfig+0x244>)
 8005090:	2200      	movs	r2, #0
 8005092:	601a      	str	r2, [r3, #0]
 8005094:	f7fc fca2 	bl	80019dc <HAL_GetTick>
 8005098:	6138      	str	r0, [r7, #16]
 800509a:	e008      	b.n	80050ae <HAL_RCC_OscConfig+0x1d2>
 800509c:	f7fc fc9e 	bl	80019dc <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d901      	bls.n	80050ae <HAL_RCC_OscConfig+0x1d2>
 80050aa:	2303      	movs	r3, #3
 80050ac:	e187      	b.n	80053be <HAL_RCC_OscConfig+0x4e2>
 80050ae:	4b1b      	ldr	r3, [pc, #108]	@ (800511c <HAL_RCC_OscConfig+0x240>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0302 	and.w	r3, r3, #2
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1f0      	bne.n	800509c <HAL_RCC_OscConfig+0x1c0>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0308 	and.w	r3, r3, #8
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d036      	beq.n	8005134 <HAL_RCC_OscConfig+0x258>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d016      	beq.n	80050fc <HAL_RCC_OscConfig+0x220>
 80050ce:	4b15      	ldr	r3, [pc, #84]	@ (8005124 <HAL_RCC_OscConfig+0x248>)
 80050d0:	2201      	movs	r2, #1
 80050d2:	601a      	str	r2, [r3, #0]
 80050d4:	f7fc fc82 	bl	80019dc <HAL_GetTick>
 80050d8:	6138      	str	r0, [r7, #16]
 80050da:	e008      	b.n	80050ee <HAL_RCC_OscConfig+0x212>
 80050dc:	f7fc fc7e 	bl	80019dc <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d901      	bls.n	80050ee <HAL_RCC_OscConfig+0x212>
 80050ea:	2303      	movs	r3, #3
 80050ec:	e167      	b.n	80053be <HAL_RCC_OscConfig+0x4e2>
 80050ee:	4b0b      	ldr	r3, [pc, #44]	@ (800511c <HAL_RCC_OscConfig+0x240>)
 80050f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050f2:	f003 0302 	and.w	r3, r3, #2
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d0f0      	beq.n	80050dc <HAL_RCC_OscConfig+0x200>
 80050fa:	e01b      	b.n	8005134 <HAL_RCC_OscConfig+0x258>
 80050fc:	4b09      	ldr	r3, [pc, #36]	@ (8005124 <HAL_RCC_OscConfig+0x248>)
 80050fe:	2200      	movs	r2, #0
 8005100:	601a      	str	r2, [r3, #0]
 8005102:	f7fc fc6b 	bl	80019dc <HAL_GetTick>
 8005106:	6138      	str	r0, [r7, #16]
 8005108:	e00e      	b.n	8005128 <HAL_RCC_OscConfig+0x24c>
 800510a:	f7fc fc67 	bl	80019dc <HAL_GetTick>
 800510e:	4602      	mov	r2, r0
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	2b02      	cmp	r3, #2
 8005116:	d907      	bls.n	8005128 <HAL_RCC_OscConfig+0x24c>
 8005118:	2303      	movs	r3, #3
 800511a:	e150      	b.n	80053be <HAL_RCC_OscConfig+0x4e2>
 800511c:	40023800 	.word	0x40023800
 8005120:	42470000 	.word	0x42470000
 8005124:	42470e80 	.word	0x42470e80
 8005128:	4b88      	ldr	r3, [pc, #544]	@ (800534c <HAL_RCC_OscConfig+0x470>)
 800512a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800512c:	f003 0302 	and.w	r3, r3, #2
 8005130:	2b00      	cmp	r3, #0
 8005132:	d1ea      	bne.n	800510a <HAL_RCC_OscConfig+0x22e>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0304 	and.w	r3, r3, #4
 800513c:	2b00      	cmp	r3, #0
 800513e:	f000 8097 	beq.w	8005270 <HAL_RCC_OscConfig+0x394>
 8005142:	2300      	movs	r3, #0
 8005144:	75fb      	strb	r3, [r7, #23]
 8005146:	4b81      	ldr	r3, [pc, #516]	@ (800534c <HAL_RCC_OscConfig+0x470>)
 8005148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800514a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d10f      	bne.n	8005172 <HAL_RCC_OscConfig+0x296>
 8005152:	2300      	movs	r3, #0
 8005154:	60bb      	str	r3, [r7, #8]
 8005156:	4b7d      	ldr	r3, [pc, #500]	@ (800534c <HAL_RCC_OscConfig+0x470>)
 8005158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800515a:	4a7c      	ldr	r2, [pc, #496]	@ (800534c <HAL_RCC_OscConfig+0x470>)
 800515c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005160:	6413      	str	r3, [r2, #64]	@ 0x40
 8005162:	4b7a      	ldr	r3, [pc, #488]	@ (800534c <HAL_RCC_OscConfig+0x470>)
 8005164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005166:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800516a:	60bb      	str	r3, [r7, #8]
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	2301      	movs	r3, #1
 8005170:	75fb      	strb	r3, [r7, #23]
 8005172:	4b77      	ldr	r3, [pc, #476]	@ (8005350 <HAL_RCC_OscConfig+0x474>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800517a:	2b00      	cmp	r3, #0
 800517c:	d118      	bne.n	80051b0 <HAL_RCC_OscConfig+0x2d4>
 800517e:	4b74      	ldr	r3, [pc, #464]	@ (8005350 <HAL_RCC_OscConfig+0x474>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a73      	ldr	r2, [pc, #460]	@ (8005350 <HAL_RCC_OscConfig+0x474>)
 8005184:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005188:	6013      	str	r3, [r2, #0]
 800518a:	f7fc fc27 	bl	80019dc <HAL_GetTick>
 800518e:	6138      	str	r0, [r7, #16]
 8005190:	e008      	b.n	80051a4 <HAL_RCC_OscConfig+0x2c8>
 8005192:	f7fc fc23 	bl	80019dc <HAL_GetTick>
 8005196:	4602      	mov	r2, r0
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	2b02      	cmp	r3, #2
 800519e:	d901      	bls.n	80051a4 <HAL_RCC_OscConfig+0x2c8>
 80051a0:	2303      	movs	r3, #3
 80051a2:	e10c      	b.n	80053be <HAL_RCC_OscConfig+0x4e2>
 80051a4:	4b6a      	ldr	r3, [pc, #424]	@ (8005350 <HAL_RCC_OscConfig+0x474>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d0f0      	beq.n	8005192 <HAL_RCC_OscConfig+0x2b6>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d106      	bne.n	80051c6 <HAL_RCC_OscConfig+0x2ea>
 80051b8:	4b64      	ldr	r3, [pc, #400]	@ (800534c <HAL_RCC_OscConfig+0x470>)
 80051ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051bc:	4a63      	ldr	r2, [pc, #396]	@ (800534c <HAL_RCC_OscConfig+0x470>)
 80051be:	f043 0301 	orr.w	r3, r3, #1
 80051c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80051c4:	e01c      	b.n	8005200 <HAL_RCC_OscConfig+0x324>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	2b05      	cmp	r3, #5
 80051cc:	d10c      	bne.n	80051e8 <HAL_RCC_OscConfig+0x30c>
 80051ce:	4b5f      	ldr	r3, [pc, #380]	@ (800534c <HAL_RCC_OscConfig+0x470>)
 80051d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051d2:	4a5e      	ldr	r2, [pc, #376]	@ (800534c <HAL_RCC_OscConfig+0x470>)
 80051d4:	f043 0304 	orr.w	r3, r3, #4
 80051d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80051da:	4b5c      	ldr	r3, [pc, #368]	@ (800534c <HAL_RCC_OscConfig+0x470>)
 80051dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051de:	4a5b      	ldr	r2, [pc, #364]	@ (800534c <HAL_RCC_OscConfig+0x470>)
 80051e0:	f043 0301 	orr.w	r3, r3, #1
 80051e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80051e6:	e00b      	b.n	8005200 <HAL_RCC_OscConfig+0x324>
 80051e8:	4b58      	ldr	r3, [pc, #352]	@ (800534c <HAL_RCC_OscConfig+0x470>)
 80051ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051ec:	4a57      	ldr	r2, [pc, #348]	@ (800534c <HAL_RCC_OscConfig+0x470>)
 80051ee:	f023 0301 	bic.w	r3, r3, #1
 80051f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80051f4:	4b55      	ldr	r3, [pc, #340]	@ (800534c <HAL_RCC_OscConfig+0x470>)
 80051f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051f8:	4a54      	ldr	r2, [pc, #336]	@ (800534c <HAL_RCC_OscConfig+0x470>)
 80051fa:	f023 0304 	bic.w	r3, r3, #4
 80051fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d015      	beq.n	8005234 <HAL_RCC_OscConfig+0x358>
 8005208:	f7fc fbe8 	bl	80019dc <HAL_GetTick>
 800520c:	6138      	str	r0, [r7, #16]
 800520e:	e00a      	b.n	8005226 <HAL_RCC_OscConfig+0x34a>
 8005210:	f7fc fbe4 	bl	80019dc <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800521e:	4293      	cmp	r3, r2
 8005220:	d901      	bls.n	8005226 <HAL_RCC_OscConfig+0x34a>
 8005222:	2303      	movs	r3, #3
 8005224:	e0cb      	b.n	80053be <HAL_RCC_OscConfig+0x4e2>
 8005226:	4b49      	ldr	r3, [pc, #292]	@ (800534c <HAL_RCC_OscConfig+0x470>)
 8005228:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800522a:	f003 0302 	and.w	r3, r3, #2
 800522e:	2b00      	cmp	r3, #0
 8005230:	d0ee      	beq.n	8005210 <HAL_RCC_OscConfig+0x334>
 8005232:	e014      	b.n	800525e <HAL_RCC_OscConfig+0x382>
 8005234:	f7fc fbd2 	bl	80019dc <HAL_GetTick>
 8005238:	6138      	str	r0, [r7, #16]
 800523a:	e00a      	b.n	8005252 <HAL_RCC_OscConfig+0x376>
 800523c:	f7fc fbce 	bl	80019dc <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	f241 3288 	movw	r2, #5000	@ 0x1388
 800524a:	4293      	cmp	r3, r2
 800524c:	d901      	bls.n	8005252 <HAL_RCC_OscConfig+0x376>
 800524e:	2303      	movs	r3, #3
 8005250:	e0b5      	b.n	80053be <HAL_RCC_OscConfig+0x4e2>
 8005252:	4b3e      	ldr	r3, [pc, #248]	@ (800534c <HAL_RCC_OscConfig+0x470>)
 8005254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005256:	f003 0302 	and.w	r3, r3, #2
 800525a:	2b00      	cmp	r3, #0
 800525c:	d1ee      	bne.n	800523c <HAL_RCC_OscConfig+0x360>
 800525e:	7dfb      	ldrb	r3, [r7, #23]
 8005260:	2b01      	cmp	r3, #1
 8005262:	d105      	bne.n	8005270 <HAL_RCC_OscConfig+0x394>
 8005264:	4b39      	ldr	r3, [pc, #228]	@ (800534c <HAL_RCC_OscConfig+0x470>)
 8005266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005268:	4a38      	ldr	r2, [pc, #224]	@ (800534c <HAL_RCC_OscConfig+0x470>)
 800526a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800526e:	6413      	str	r3, [r2, #64]	@ 0x40
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	699b      	ldr	r3, [r3, #24]
 8005274:	2b00      	cmp	r3, #0
 8005276:	f000 80a1 	beq.w	80053bc <HAL_RCC_OscConfig+0x4e0>
 800527a:	4b34      	ldr	r3, [pc, #208]	@ (800534c <HAL_RCC_OscConfig+0x470>)
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	f003 030c 	and.w	r3, r3, #12
 8005282:	2b08      	cmp	r3, #8
 8005284:	d05c      	beq.n	8005340 <HAL_RCC_OscConfig+0x464>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	699b      	ldr	r3, [r3, #24]
 800528a:	2b02      	cmp	r3, #2
 800528c:	d141      	bne.n	8005312 <HAL_RCC_OscConfig+0x436>
 800528e:	4b31      	ldr	r3, [pc, #196]	@ (8005354 <HAL_RCC_OscConfig+0x478>)
 8005290:	2200      	movs	r2, #0
 8005292:	601a      	str	r2, [r3, #0]
 8005294:	f7fc fba2 	bl	80019dc <HAL_GetTick>
 8005298:	6138      	str	r0, [r7, #16]
 800529a:	e008      	b.n	80052ae <HAL_RCC_OscConfig+0x3d2>
 800529c:	f7fc fb9e 	bl	80019dc <HAL_GetTick>
 80052a0:	4602      	mov	r2, r0
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d901      	bls.n	80052ae <HAL_RCC_OscConfig+0x3d2>
 80052aa:	2303      	movs	r3, #3
 80052ac:	e087      	b.n	80053be <HAL_RCC_OscConfig+0x4e2>
 80052ae:	4b27      	ldr	r3, [pc, #156]	@ (800534c <HAL_RCC_OscConfig+0x470>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d1f0      	bne.n	800529c <HAL_RCC_OscConfig+0x3c0>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	69da      	ldr	r2, [r3, #28]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	431a      	orrs	r2, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052c8:	019b      	lsls	r3, r3, #6
 80052ca:	431a      	orrs	r2, r3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052d0:	085b      	lsrs	r3, r3, #1
 80052d2:	3b01      	subs	r3, #1
 80052d4:	041b      	lsls	r3, r3, #16
 80052d6:	431a      	orrs	r2, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052dc:	061b      	lsls	r3, r3, #24
 80052de:	491b      	ldr	r1, [pc, #108]	@ (800534c <HAL_RCC_OscConfig+0x470>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	604b      	str	r3, [r1, #4]
 80052e4:	4b1b      	ldr	r3, [pc, #108]	@ (8005354 <HAL_RCC_OscConfig+0x478>)
 80052e6:	2201      	movs	r2, #1
 80052e8:	601a      	str	r2, [r3, #0]
 80052ea:	f7fc fb77 	bl	80019dc <HAL_GetTick>
 80052ee:	6138      	str	r0, [r7, #16]
 80052f0:	e008      	b.n	8005304 <HAL_RCC_OscConfig+0x428>
 80052f2:	f7fc fb73 	bl	80019dc <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d901      	bls.n	8005304 <HAL_RCC_OscConfig+0x428>
 8005300:	2303      	movs	r3, #3
 8005302:	e05c      	b.n	80053be <HAL_RCC_OscConfig+0x4e2>
 8005304:	4b11      	ldr	r3, [pc, #68]	@ (800534c <HAL_RCC_OscConfig+0x470>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d0f0      	beq.n	80052f2 <HAL_RCC_OscConfig+0x416>
 8005310:	e054      	b.n	80053bc <HAL_RCC_OscConfig+0x4e0>
 8005312:	4b10      	ldr	r3, [pc, #64]	@ (8005354 <HAL_RCC_OscConfig+0x478>)
 8005314:	2200      	movs	r2, #0
 8005316:	601a      	str	r2, [r3, #0]
 8005318:	f7fc fb60 	bl	80019dc <HAL_GetTick>
 800531c:	6138      	str	r0, [r7, #16]
 800531e:	e008      	b.n	8005332 <HAL_RCC_OscConfig+0x456>
 8005320:	f7fc fb5c 	bl	80019dc <HAL_GetTick>
 8005324:	4602      	mov	r2, r0
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	2b02      	cmp	r3, #2
 800532c:	d901      	bls.n	8005332 <HAL_RCC_OscConfig+0x456>
 800532e:	2303      	movs	r3, #3
 8005330:	e045      	b.n	80053be <HAL_RCC_OscConfig+0x4e2>
 8005332:	4b06      	ldr	r3, [pc, #24]	@ (800534c <HAL_RCC_OscConfig+0x470>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1f0      	bne.n	8005320 <HAL_RCC_OscConfig+0x444>
 800533e:	e03d      	b.n	80053bc <HAL_RCC_OscConfig+0x4e0>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	699b      	ldr	r3, [r3, #24]
 8005344:	2b01      	cmp	r3, #1
 8005346:	d107      	bne.n	8005358 <HAL_RCC_OscConfig+0x47c>
 8005348:	2301      	movs	r3, #1
 800534a:	e038      	b.n	80053be <HAL_RCC_OscConfig+0x4e2>
 800534c:	40023800 	.word	0x40023800
 8005350:	40007000 	.word	0x40007000
 8005354:	42470060 	.word	0x42470060
 8005358:	4b1b      	ldr	r3, [pc, #108]	@ (80053c8 <HAL_RCC_OscConfig+0x4ec>)
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	60fb      	str	r3, [r7, #12]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d028      	beq.n	80053b8 <HAL_RCC_OscConfig+0x4dc>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	69db      	ldr	r3, [r3, #28]
 8005370:	429a      	cmp	r2, r3
 8005372:	d121      	bne.n	80053b8 <HAL_RCC_OscConfig+0x4dc>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a1b      	ldr	r3, [r3, #32]
 800537e:	429a      	cmp	r2, r3
 8005380:	d11a      	bne.n	80053b8 <HAL_RCC_OscConfig+0x4dc>
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005388:	4013      	ands	r3, r2
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800538e:	0192      	lsls	r2, r2, #6
 8005390:	4293      	cmp	r3, r2
 8005392:	d111      	bne.n	80053b8 <HAL_RCC_OscConfig+0x4dc>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800539e:	085b      	lsrs	r3, r3, #1
 80053a0:	3b01      	subs	r3, #1
 80053a2:	041b      	lsls	r3, r3, #16
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d107      	bne.n	80053b8 <HAL_RCC_OscConfig+0x4dc>
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b2:	061b      	lsls	r3, r3, #24
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d001      	beq.n	80053bc <HAL_RCC_OscConfig+0x4e0>
 80053b8:	2301      	movs	r3, #1
 80053ba:	e000      	b.n	80053be <HAL_RCC_OscConfig+0x4e2>
 80053bc:	2300      	movs	r3, #0
 80053be:	4618      	mov	r0, r3
 80053c0:	3718      	adds	r7, #24
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	40023800 	.word	0x40023800

080053cc <HAL_RCC_ClockConfig>:
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d101      	bne.n	80053e0 <HAL_RCC_ClockConfig+0x14>
 80053dc:	2301      	movs	r3, #1
 80053de:	e0cc      	b.n	800557a <HAL_RCC_ClockConfig+0x1ae>
 80053e0:	4b68      	ldr	r3, [pc, #416]	@ (8005584 <HAL_RCC_ClockConfig+0x1b8>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0307 	and.w	r3, r3, #7
 80053e8:	683a      	ldr	r2, [r7, #0]
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d90c      	bls.n	8005408 <HAL_RCC_ClockConfig+0x3c>
 80053ee:	4b65      	ldr	r3, [pc, #404]	@ (8005584 <HAL_RCC_ClockConfig+0x1b8>)
 80053f0:	683a      	ldr	r2, [r7, #0]
 80053f2:	b2d2      	uxtb	r2, r2
 80053f4:	701a      	strb	r2, [r3, #0]
 80053f6:	4b63      	ldr	r3, [pc, #396]	@ (8005584 <HAL_RCC_ClockConfig+0x1b8>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 0307 	and.w	r3, r3, #7
 80053fe:	683a      	ldr	r2, [r7, #0]
 8005400:	429a      	cmp	r2, r3
 8005402:	d001      	beq.n	8005408 <HAL_RCC_ClockConfig+0x3c>
 8005404:	2301      	movs	r3, #1
 8005406:	e0b8      	b.n	800557a <HAL_RCC_ClockConfig+0x1ae>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0302 	and.w	r3, r3, #2
 8005410:	2b00      	cmp	r3, #0
 8005412:	d020      	beq.n	8005456 <HAL_RCC_ClockConfig+0x8a>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0304 	and.w	r3, r3, #4
 800541c:	2b00      	cmp	r3, #0
 800541e:	d005      	beq.n	800542c <HAL_RCC_ClockConfig+0x60>
 8005420:	4b59      	ldr	r3, [pc, #356]	@ (8005588 <HAL_RCC_ClockConfig+0x1bc>)
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	4a58      	ldr	r2, [pc, #352]	@ (8005588 <HAL_RCC_ClockConfig+0x1bc>)
 8005426:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800542a:	6093      	str	r3, [r2, #8]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 0308 	and.w	r3, r3, #8
 8005434:	2b00      	cmp	r3, #0
 8005436:	d005      	beq.n	8005444 <HAL_RCC_ClockConfig+0x78>
 8005438:	4b53      	ldr	r3, [pc, #332]	@ (8005588 <HAL_RCC_ClockConfig+0x1bc>)
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	4a52      	ldr	r2, [pc, #328]	@ (8005588 <HAL_RCC_ClockConfig+0x1bc>)
 800543e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005442:	6093      	str	r3, [r2, #8]
 8005444:	4b50      	ldr	r3, [pc, #320]	@ (8005588 <HAL_RCC_ClockConfig+0x1bc>)
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	494d      	ldr	r1, [pc, #308]	@ (8005588 <HAL_RCC_ClockConfig+0x1bc>)
 8005452:	4313      	orrs	r3, r2
 8005454:	608b      	str	r3, [r1, #8]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0301 	and.w	r3, r3, #1
 800545e:	2b00      	cmp	r3, #0
 8005460:	d044      	beq.n	80054ec <HAL_RCC_ClockConfig+0x120>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	2b01      	cmp	r3, #1
 8005468:	d107      	bne.n	800547a <HAL_RCC_ClockConfig+0xae>
 800546a:	4b47      	ldr	r3, [pc, #284]	@ (8005588 <HAL_RCC_ClockConfig+0x1bc>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d119      	bne.n	80054aa <HAL_RCC_ClockConfig+0xde>
 8005476:	2301      	movs	r3, #1
 8005478:	e07f      	b.n	800557a <HAL_RCC_ClockConfig+0x1ae>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	2b02      	cmp	r3, #2
 8005480:	d003      	beq.n	800548a <HAL_RCC_ClockConfig+0xbe>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	2b03      	cmp	r3, #3
 8005488:	d107      	bne.n	800549a <HAL_RCC_ClockConfig+0xce>
 800548a:	4b3f      	ldr	r3, [pc, #252]	@ (8005588 <HAL_RCC_ClockConfig+0x1bc>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005492:	2b00      	cmp	r3, #0
 8005494:	d109      	bne.n	80054aa <HAL_RCC_ClockConfig+0xde>
 8005496:	2301      	movs	r3, #1
 8005498:	e06f      	b.n	800557a <HAL_RCC_ClockConfig+0x1ae>
 800549a:	4b3b      	ldr	r3, [pc, #236]	@ (8005588 <HAL_RCC_ClockConfig+0x1bc>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0302 	and.w	r3, r3, #2
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d101      	bne.n	80054aa <HAL_RCC_ClockConfig+0xde>
 80054a6:	2301      	movs	r3, #1
 80054a8:	e067      	b.n	800557a <HAL_RCC_ClockConfig+0x1ae>
 80054aa:	4b37      	ldr	r3, [pc, #220]	@ (8005588 <HAL_RCC_ClockConfig+0x1bc>)
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	f023 0203 	bic.w	r2, r3, #3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	4934      	ldr	r1, [pc, #208]	@ (8005588 <HAL_RCC_ClockConfig+0x1bc>)
 80054b8:	4313      	orrs	r3, r2
 80054ba:	608b      	str	r3, [r1, #8]
 80054bc:	f7fc fa8e 	bl	80019dc <HAL_GetTick>
 80054c0:	60f8      	str	r0, [r7, #12]
 80054c2:	e00a      	b.n	80054da <HAL_RCC_ClockConfig+0x10e>
 80054c4:	f7fc fa8a 	bl	80019dc <HAL_GetTick>
 80054c8:	4602      	mov	r2, r0
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d901      	bls.n	80054da <HAL_RCC_ClockConfig+0x10e>
 80054d6:	2303      	movs	r3, #3
 80054d8:	e04f      	b.n	800557a <HAL_RCC_ClockConfig+0x1ae>
 80054da:	4b2b      	ldr	r3, [pc, #172]	@ (8005588 <HAL_RCC_ClockConfig+0x1bc>)
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	f003 020c 	and.w	r2, r3, #12
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d1eb      	bne.n	80054c4 <HAL_RCC_ClockConfig+0xf8>
 80054ec:	4b25      	ldr	r3, [pc, #148]	@ (8005584 <HAL_RCC_ClockConfig+0x1b8>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0307 	and.w	r3, r3, #7
 80054f4:	683a      	ldr	r2, [r7, #0]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d20c      	bcs.n	8005514 <HAL_RCC_ClockConfig+0x148>
 80054fa:	4b22      	ldr	r3, [pc, #136]	@ (8005584 <HAL_RCC_ClockConfig+0x1b8>)
 80054fc:	683a      	ldr	r2, [r7, #0]
 80054fe:	b2d2      	uxtb	r2, r2
 8005500:	701a      	strb	r2, [r3, #0]
 8005502:	4b20      	ldr	r3, [pc, #128]	@ (8005584 <HAL_RCC_ClockConfig+0x1b8>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0307 	and.w	r3, r3, #7
 800550a:	683a      	ldr	r2, [r7, #0]
 800550c:	429a      	cmp	r2, r3
 800550e:	d001      	beq.n	8005514 <HAL_RCC_ClockConfig+0x148>
 8005510:	2301      	movs	r3, #1
 8005512:	e032      	b.n	800557a <HAL_RCC_ClockConfig+0x1ae>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 0304 	and.w	r3, r3, #4
 800551c:	2b00      	cmp	r3, #0
 800551e:	d008      	beq.n	8005532 <HAL_RCC_ClockConfig+0x166>
 8005520:	4b19      	ldr	r3, [pc, #100]	@ (8005588 <HAL_RCC_ClockConfig+0x1bc>)
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	4916      	ldr	r1, [pc, #88]	@ (8005588 <HAL_RCC_ClockConfig+0x1bc>)
 800552e:	4313      	orrs	r3, r2
 8005530:	608b      	str	r3, [r1, #8]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 0308 	and.w	r3, r3, #8
 800553a:	2b00      	cmp	r3, #0
 800553c:	d009      	beq.n	8005552 <HAL_RCC_ClockConfig+0x186>
 800553e:	4b12      	ldr	r3, [pc, #72]	@ (8005588 <HAL_RCC_ClockConfig+0x1bc>)
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	00db      	lsls	r3, r3, #3
 800554c:	490e      	ldr	r1, [pc, #56]	@ (8005588 <HAL_RCC_ClockConfig+0x1bc>)
 800554e:	4313      	orrs	r3, r2
 8005550:	608b      	str	r3, [r1, #8]
 8005552:	f000 f821 	bl	8005598 <HAL_RCC_GetSysClockFreq>
 8005556:	4602      	mov	r2, r0
 8005558:	4b0b      	ldr	r3, [pc, #44]	@ (8005588 <HAL_RCC_ClockConfig+0x1bc>)
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	091b      	lsrs	r3, r3, #4
 800555e:	f003 030f 	and.w	r3, r3, #15
 8005562:	490a      	ldr	r1, [pc, #40]	@ (800558c <HAL_RCC_ClockConfig+0x1c0>)
 8005564:	5ccb      	ldrb	r3, [r1, r3]
 8005566:	fa22 f303 	lsr.w	r3, r2, r3
 800556a:	4a09      	ldr	r2, [pc, #36]	@ (8005590 <HAL_RCC_ClockConfig+0x1c4>)
 800556c:	6013      	str	r3, [r2, #0]
 800556e:	4b09      	ldr	r3, [pc, #36]	@ (8005594 <HAL_RCC_ClockConfig+0x1c8>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4618      	mov	r0, r3
 8005574:	f7fc f9ee 	bl	8001954 <HAL_InitTick>
 8005578:	2300      	movs	r3, #0
 800557a:	4618      	mov	r0, r3
 800557c:	3710      	adds	r7, #16
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	40023c00 	.word	0x40023c00
 8005588:	40023800 	.word	0x40023800
 800558c:	0800ce20 	.word	0x0800ce20
 8005590:	2000000c 	.word	0x2000000c
 8005594:	20000010 	.word	0x20000010

08005598 <HAL_RCC_GetSysClockFreq>:
 8005598:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800559c:	b094      	sub	sp, #80	@ 0x50
 800559e:	af00      	add	r7, sp, #0
 80055a0:	2300      	movs	r3, #0
 80055a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80055a4:	2300      	movs	r3, #0
 80055a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055a8:	2300      	movs	r3, #0
 80055aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80055ac:	2300      	movs	r3, #0
 80055ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055b0:	4b79      	ldr	r3, [pc, #484]	@ (8005798 <HAL_RCC_GetSysClockFreq+0x200>)
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f003 030c 	and.w	r3, r3, #12
 80055b8:	2b08      	cmp	r3, #8
 80055ba:	d00d      	beq.n	80055d8 <HAL_RCC_GetSysClockFreq+0x40>
 80055bc:	2b08      	cmp	r3, #8
 80055be:	f200 80e1 	bhi.w	8005784 <HAL_RCC_GetSysClockFreq+0x1ec>
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d002      	beq.n	80055cc <HAL_RCC_GetSysClockFreq+0x34>
 80055c6:	2b04      	cmp	r3, #4
 80055c8:	d003      	beq.n	80055d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80055ca:	e0db      	b.n	8005784 <HAL_RCC_GetSysClockFreq+0x1ec>
 80055cc:	4b73      	ldr	r3, [pc, #460]	@ (800579c <HAL_RCC_GetSysClockFreq+0x204>)
 80055ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055d0:	e0db      	b.n	800578a <HAL_RCC_GetSysClockFreq+0x1f2>
 80055d2:	4b73      	ldr	r3, [pc, #460]	@ (80057a0 <HAL_RCC_GetSysClockFreq+0x208>)
 80055d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055d6:	e0d8      	b.n	800578a <HAL_RCC_GetSysClockFreq+0x1f2>
 80055d8:	4b6f      	ldr	r3, [pc, #444]	@ (8005798 <HAL_RCC_GetSysClockFreq+0x200>)
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80055e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80055e2:	4b6d      	ldr	r3, [pc, #436]	@ (8005798 <HAL_RCC_GetSysClockFreq+0x200>)
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d063      	beq.n	80056b6 <HAL_RCC_GetSysClockFreq+0x11e>
 80055ee:	4b6a      	ldr	r3, [pc, #424]	@ (8005798 <HAL_RCC_GetSysClockFreq+0x200>)
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	099b      	lsrs	r3, r3, #6
 80055f4:	2200      	movs	r2, #0
 80055f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80055f8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80055fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005600:	633b      	str	r3, [r7, #48]	@ 0x30
 8005602:	2300      	movs	r3, #0
 8005604:	637b      	str	r3, [r7, #52]	@ 0x34
 8005606:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800560a:	4622      	mov	r2, r4
 800560c:	462b      	mov	r3, r5
 800560e:	f04f 0000 	mov.w	r0, #0
 8005612:	f04f 0100 	mov.w	r1, #0
 8005616:	0159      	lsls	r1, r3, #5
 8005618:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800561c:	0150      	lsls	r0, r2, #5
 800561e:	4602      	mov	r2, r0
 8005620:	460b      	mov	r3, r1
 8005622:	4621      	mov	r1, r4
 8005624:	1a51      	subs	r1, r2, r1
 8005626:	6139      	str	r1, [r7, #16]
 8005628:	4629      	mov	r1, r5
 800562a:	eb63 0301 	sbc.w	r3, r3, r1
 800562e:	617b      	str	r3, [r7, #20]
 8005630:	f04f 0200 	mov.w	r2, #0
 8005634:	f04f 0300 	mov.w	r3, #0
 8005638:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800563c:	4659      	mov	r1, fp
 800563e:	018b      	lsls	r3, r1, #6
 8005640:	4651      	mov	r1, sl
 8005642:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005646:	4651      	mov	r1, sl
 8005648:	018a      	lsls	r2, r1, #6
 800564a:	4651      	mov	r1, sl
 800564c:	ebb2 0801 	subs.w	r8, r2, r1
 8005650:	4659      	mov	r1, fp
 8005652:	eb63 0901 	sbc.w	r9, r3, r1
 8005656:	f04f 0200 	mov.w	r2, #0
 800565a:	f04f 0300 	mov.w	r3, #0
 800565e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005662:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005666:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800566a:	4690      	mov	r8, r2
 800566c:	4699      	mov	r9, r3
 800566e:	4623      	mov	r3, r4
 8005670:	eb18 0303 	adds.w	r3, r8, r3
 8005674:	60bb      	str	r3, [r7, #8]
 8005676:	462b      	mov	r3, r5
 8005678:	eb49 0303 	adc.w	r3, r9, r3
 800567c:	60fb      	str	r3, [r7, #12]
 800567e:	f04f 0200 	mov.w	r2, #0
 8005682:	f04f 0300 	mov.w	r3, #0
 8005686:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800568a:	4629      	mov	r1, r5
 800568c:	024b      	lsls	r3, r1, #9
 800568e:	4621      	mov	r1, r4
 8005690:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005694:	4621      	mov	r1, r4
 8005696:	024a      	lsls	r2, r1, #9
 8005698:	4610      	mov	r0, r2
 800569a:	4619      	mov	r1, r3
 800569c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800569e:	2200      	movs	r2, #0
 80056a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80056a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80056a8:	f7fa fde2 	bl	8000270 <__aeabi_uldivmod>
 80056ac:	4602      	mov	r2, r0
 80056ae:	460b      	mov	r3, r1
 80056b0:	4613      	mov	r3, r2
 80056b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056b4:	e058      	b.n	8005768 <HAL_RCC_GetSysClockFreq+0x1d0>
 80056b6:	4b38      	ldr	r3, [pc, #224]	@ (8005798 <HAL_RCC_GetSysClockFreq+0x200>)
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	099b      	lsrs	r3, r3, #6
 80056bc:	2200      	movs	r2, #0
 80056be:	4618      	mov	r0, r3
 80056c0:	4611      	mov	r1, r2
 80056c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80056c6:	623b      	str	r3, [r7, #32]
 80056c8:	2300      	movs	r3, #0
 80056ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80056cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80056d0:	4642      	mov	r2, r8
 80056d2:	464b      	mov	r3, r9
 80056d4:	f04f 0000 	mov.w	r0, #0
 80056d8:	f04f 0100 	mov.w	r1, #0
 80056dc:	0159      	lsls	r1, r3, #5
 80056de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056e2:	0150      	lsls	r0, r2, #5
 80056e4:	4602      	mov	r2, r0
 80056e6:	460b      	mov	r3, r1
 80056e8:	4641      	mov	r1, r8
 80056ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80056ee:	4649      	mov	r1, r9
 80056f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80056f4:	f04f 0200 	mov.w	r2, #0
 80056f8:	f04f 0300 	mov.w	r3, #0
 80056fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005700:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005704:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005708:	ebb2 040a 	subs.w	r4, r2, sl
 800570c:	eb63 050b 	sbc.w	r5, r3, fp
 8005710:	f04f 0200 	mov.w	r2, #0
 8005714:	f04f 0300 	mov.w	r3, #0
 8005718:	00eb      	lsls	r3, r5, #3
 800571a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800571e:	00e2      	lsls	r2, r4, #3
 8005720:	4614      	mov	r4, r2
 8005722:	461d      	mov	r5, r3
 8005724:	4643      	mov	r3, r8
 8005726:	18e3      	adds	r3, r4, r3
 8005728:	603b      	str	r3, [r7, #0]
 800572a:	464b      	mov	r3, r9
 800572c:	eb45 0303 	adc.w	r3, r5, r3
 8005730:	607b      	str	r3, [r7, #4]
 8005732:	f04f 0200 	mov.w	r2, #0
 8005736:	f04f 0300 	mov.w	r3, #0
 800573a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800573e:	4629      	mov	r1, r5
 8005740:	028b      	lsls	r3, r1, #10
 8005742:	4621      	mov	r1, r4
 8005744:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005748:	4621      	mov	r1, r4
 800574a:	028a      	lsls	r2, r1, #10
 800574c:	4610      	mov	r0, r2
 800574e:	4619      	mov	r1, r3
 8005750:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005752:	2200      	movs	r2, #0
 8005754:	61bb      	str	r3, [r7, #24]
 8005756:	61fa      	str	r2, [r7, #28]
 8005758:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800575c:	f7fa fd88 	bl	8000270 <__aeabi_uldivmod>
 8005760:	4602      	mov	r2, r0
 8005762:	460b      	mov	r3, r1
 8005764:	4613      	mov	r3, r2
 8005766:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005768:	4b0b      	ldr	r3, [pc, #44]	@ (8005798 <HAL_RCC_GetSysClockFreq+0x200>)
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	0c1b      	lsrs	r3, r3, #16
 800576e:	f003 0303 	and.w	r3, r3, #3
 8005772:	3301      	adds	r3, #1
 8005774:	005b      	lsls	r3, r3, #1
 8005776:	643b      	str	r3, [r7, #64]	@ 0x40
 8005778:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800577a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800577c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005780:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005782:	e002      	b.n	800578a <HAL_RCC_GetSysClockFreq+0x1f2>
 8005784:	4b05      	ldr	r3, [pc, #20]	@ (800579c <HAL_RCC_GetSysClockFreq+0x204>)
 8005786:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005788:	bf00      	nop
 800578a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800578c:	4618      	mov	r0, r3
 800578e:	3750      	adds	r7, #80	@ 0x50
 8005790:	46bd      	mov	sp, r7
 8005792:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005796:	bf00      	nop
 8005798:	40023800 	.word	0x40023800
 800579c:	00f42400 	.word	0x00f42400
 80057a0:	007a1200 	.word	0x007a1200

080057a4 <HAL_RCC_GetHCLKFreq>:
 80057a4:	b480      	push	{r7}
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	4b03      	ldr	r3, [pc, #12]	@ (80057b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4618      	mov	r0, r3
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	2000000c 	.word	0x2000000c

080057bc <HAL_RCC_GetPCLK1Freq>:
 80057bc:	b580      	push	{r7, lr}
 80057be:	af00      	add	r7, sp, #0
 80057c0:	f7ff fff0 	bl	80057a4 <HAL_RCC_GetHCLKFreq>
 80057c4:	4602      	mov	r2, r0
 80057c6:	4b05      	ldr	r3, [pc, #20]	@ (80057dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	0a9b      	lsrs	r3, r3, #10
 80057cc:	f003 0307 	and.w	r3, r3, #7
 80057d0:	4903      	ldr	r1, [pc, #12]	@ (80057e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057d2:	5ccb      	ldrb	r3, [r1, r3]
 80057d4:	fa22 f303 	lsr.w	r3, r2, r3
 80057d8:	4618      	mov	r0, r3
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	40023800 	.word	0x40023800
 80057e0:	0800ce30 	.word	0x0800ce30

080057e4 <HAL_RCC_GetPCLK2Freq>:
 80057e4:	b580      	push	{r7, lr}
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	f7ff ffdc 	bl	80057a4 <HAL_RCC_GetHCLKFreq>
 80057ec:	4602      	mov	r2, r0
 80057ee:	4b05      	ldr	r3, [pc, #20]	@ (8005804 <HAL_RCC_GetPCLK2Freq+0x20>)
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	0b5b      	lsrs	r3, r3, #13
 80057f4:	f003 0307 	and.w	r3, r3, #7
 80057f8:	4903      	ldr	r1, [pc, #12]	@ (8005808 <HAL_RCC_GetPCLK2Freq+0x24>)
 80057fa:	5ccb      	ldrb	r3, [r1, r3]
 80057fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005800:	4618      	mov	r0, r3
 8005802:	bd80      	pop	{r7, pc}
 8005804:	40023800 	.word	0x40023800
 8005808:	0800ce30 	.word	0x0800ce30

0800580c <HAL_TIM_Base_Init>:
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d101      	bne.n	800581e <HAL_TIM_Base_Init+0x12>
 800581a:	2301      	movs	r3, #1
 800581c:	e041      	b.n	80058a2 <HAL_TIM_Base_Init+0x96>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005824:	b2db      	uxtb	r3, r3
 8005826:	2b00      	cmp	r3, #0
 8005828:	d106      	bne.n	8005838 <HAL_TIM_Base_Init+0x2c>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f7fb fe14 	bl	8001460 <HAL_TIM_Base_MspInit>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2202      	movs	r2, #2
 800583c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	3304      	adds	r3, #4
 8005848:	4619      	mov	r1, r3
 800584a:	4610      	mov	r0, r2
 800584c:	f000 fb3c 	bl	8005ec8 <TIM_Base_SetConfig>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80058a0:	2300      	movs	r3, #0
 80058a2:	4618      	mov	r0, r3
 80058a4:	3708      	adds	r7, #8
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
	...

080058ac <HAL_TIM_Base_Start>:
 80058ac:	b480      	push	{r7}
 80058ae:	b085      	sub	sp, #20
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d001      	beq.n	80058c4 <HAL_TIM_Base_Start+0x18>
 80058c0:	2301      	movs	r3, #1
 80058c2:	e046      	b.n	8005952 <HAL_TIM_Base_Start+0xa6>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2202      	movs	r2, #2
 80058c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a23      	ldr	r2, [pc, #140]	@ (8005960 <HAL_TIM_Base_Start+0xb4>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d022      	beq.n	800591c <HAL_TIM_Base_Start+0x70>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058de:	d01d      	beq.n	800591c <HAL_TIM_Base_Start+0x70>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a1f      	ldr	r2, [pc, #124]	@ (8005964 <HAL_TIM_Base_Start+0xb8>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d018      	beq.n	800591c <HAL_TIM_Base_Start+0x70>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a1e      	ldr	r2, [pc, #120]	@ (8005968 <HAL_TIM_Base_Start+0xbc>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d013      	beq.n	800591c <HAL_TIM_Base_Start+0x70>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a1c      	ldr	r2, [pc, #112]	@ (800596c <HAL_TIM_Base_Start+0xc0>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d00e      	beq.n	800591c <HAL_TIM_Base_Start+0x70>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a1b      	ldr	r2, [pc, #108]	@ (8005970 <HAL_TIM_Base_Start+0xc4>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d009      	beq.n	800591c <HAL_TIM_Base_Start+0x70>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a19      	ldr	r2, [pc, #100]	@ (8005974 <HAL_TIM_Base_Start+0xc8>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d004      	beq.n	800591c <HAL_TIM_Base_Start+0x70>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a18      	ldr	r2, [pc, #96]	@ (8005978 <HAL_TIM_Base_Start+0xcc>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d111      	bne.n	8005940 <HAL_TIM_Base_Start+0x94>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	f003 0307 	and.w	r3, r3, #7
 8005926:	60fb      	str	r3, [r7, #12]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2b06      	cmp	r3, #6
 800592c:	d010      	beq.n	8005950 <HAL_TIM_Base_Start+0xa4>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f042 0201 	orr.w	r2, r2, #1
 800593c:	601a      	str	r2, [r3, #0]
 800593e:	e007      	b.n	8005950 <HAL_TIM_Base_Start+0xa4>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f042 0201 	orr.w	r2, r2, #1
 800594e:	601a      	str	r2, [r3, #0]
 8005950:	2300      	movs	r3, #0
 8005952:	4618      	mov	r0, r3
 8005954:	3714      	adds	r7, #20
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop
 8005960:	40010000 	.word	0x40010000
 8005964:	40000400 	.word	0x40000400
 8005968:	40000800 	.word	0x40000800
 800596c:	40000c00 	.word	0x40000c00
 8005970:	40010400 	.word	0x40010400
 8005974:	40014000 	.word	0x40014000
 8005978:	40001800 	.word	0x40001800

0800597c <HAL_TIM_Base_Stop>:
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	6a1a      	ldr	r2, [r3, #32]
 800598a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800598e:	4013      	ands	r3, r2
 8005990:	2b00      	cmp	r3, #0
 8005992:	d10f      	bne.n	80059b4 <HAL_TIM_Base_Stop+0x38>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	6a1a      	ldr	r2, [r3, #32]
 800599a:	f240 4344 	movw	r3, #1092	@ 0x444
 800599e:	4013      	ands	r3, r2
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d107      	bne.n	80059b4 <HAL_TIM_Base_Stop+0x38>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f022 0201 	bic.w	r2, r2, #1
 80059b2:	601a      	str	r2, [r3, #0]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80059bc:	2300      	movs	r3, #0
 80059be:	4618      	mov	r0, r3
 80059c0:	370c      	adds	r7, #12
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr
	...

080059cc <HAL_TIM_Base_Start_IT>:
 80059cc:	b480      	push	{r7}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d001      	beq.n	80059e4 <HAL_TIM_Base_Start_IT+0x18>
 80059e0:	2301      	movs	r3, #1
 80059e2:	e04e      	b.n	8005a82 <HAL_TIM_Base_Start_IT+0xb6>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2202      	movs	r2, #2
 80059e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68da      	ldr	r2, [r3, #12]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f042 0201 	orr.w	r2, r2, #1
 80059fa:	60da      	str	r2, [r3, #12]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a23      	ldr	r2, [pc, #140]	@ (8005a90 <HAL_TIM_Base_Start_IT+0xc4>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d022      	beq.n	8005a4c <HAL_TIM_Base_Start_IT+0x80>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a0e:	d01d      	beq.n	8005a4c <HAL_TIM_Base_Start_IT+0x80>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a1f      	ldr	r2, [pc, #124]	@ (8005a94 <HAL_TIM_Base_Start_IT+0xc8>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d018      	beq.n	8005a4c <HAL_TIM_Base_Start_IT+0x80>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a1e      	ldr	r2, [pc, #120]	@ (8005a98 <HAL_TIM_Base_Start_IT+0xcc>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d013      	beq.n	8005a4c <HAL_TIM_Base_Start_IT+0x80>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a1c      	ldr	r2, [pc, #112]	@ (8005a9c <HAL_TIM_Base_Start_IT+0xd0>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d00e      	beq.n	8005a4c <HAL_TIM_Base_Start_IT+0x80>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a1b      	ldr	r2, [pc, #108]	@ (8005aa0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d009      	beq.n	8005a4c <HAL_TIM_Base_Start_IT+0x80>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a19      	ldr	r2, [pc, #100]	@ (8005aa4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d004      	beq.n	8005a4c <HAL_TIM_Base_Start_IT+0x80>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a18      	ldr	r2, [pc, #96]	@ (8005aa8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d111      	bne.n	8005a70 <HAL_TIM_Base_Start_IT+0xa4>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	f003 0307 	and.w	r3, r3, #7
 8005a56:	60fb      	str	r3, [r7, #12]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2b06      	cmp	r3, #6
 8005a5c:	d010      	beq.n	8005a80 <HAL_TIM_Base_Start_IT+0xb4>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f042 0201 	orr.w	r2, r2, #1
 8005a6c:	601a      	str	r2, [r3, #0]
 8005a6e:	e007      	b.n	8005a80 <HAL_TIM_Base_Start_IT+0xb4>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f042 0201 	orr.w	r2, r2, #1
 8005a7e:	601a      	str	r2, [r3, #0]
 8005a80:	2300      	movs	r3, #0
 8005a82:	4618      	mov	r0, r3
 8005a84:	3714      	adds	r7, #20
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr
 8005a8e:	bf00      	nop
 8005a90:	40010000 	.word	0x40010000
 8005a94:	40000400 	.word	0x40000400
 8005a98:	40000800 	.word	0x40000800
 8005a9c:	40000c00 	.word	0x40000c00
 8005aa0:	40010400 	.word	0x40010400
 8005aa4:	40014000 	.word	0x40014000
 8005aa8:	40001800 	.word	0x40001800

08005aac <HAL_TIM_Base_Stop_IT>:
 8005aac:	b480      	push	{r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	68da      	ldr	r2, [r3, #12]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f022 0201 	bic.w	r2, r2, #1
 8005ac2:	60da      	str	r2, [r3, #12]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	6a1a      	ldr	r2, [r3, #32]
 8005aca:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005ace:	4013      	ands	r3, r2
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d10f      	bne.n	8005af4 <HAL_TIM_Base_Stop_IT+0x48>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	6a1a      	ldr	r2, [r3, #32]
 8005ada:	f240 4344 	movw	r3, #1092	@ 0x444
 8005ade:	4013      	ands	r3, r2
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d107      	bne.n	8005af4 <HAL_TIM_Base_Stop_IT+0x48>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f022 0201 	bic.w	r2, r2, #1
 8005af2:	601a      	str	r2, [r3, #0]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005afc:	2300      	movs	r3, #0
 8005afe:	4618      	mov	r0, r3
 8005b00:	370c      	adds	r7, #12
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr

08005b0a <HAL_TIM_IRQHandler>:
 8005b0a:	b580      	push	{r7, lr}
 8005b0c:	b084      	sub	sp, #16
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	60fb      	str	r3, [r7, #12]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	691b      	ldr	r3, [r3, #16]
 8005b20:	60bb      	str	r3, [r7, #8]
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	f003 0302 	and.w	r3, r3, #2
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d020      	beq.n	8005b6e <HAL_TIM_IRQHandler+0x64>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f003 0302 	and.w	r3, r3, #2
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d01b      	beq.n	8005b6e <HAL_TIM_IRQHandler+0x64>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f06f 0202 	mvn.w	r2, #2
 8005b3e:	611a      	str	r2, [r3, #16]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	771a      	strb	r2, [r3, #28]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	699b      	ldr	r3, [r3, #24]
 8005b4c:	f003 0303 	and.w	r3, r3, #3
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d003      	beq.n	8005b5c <HAL_TIM_IRQHandler+0x52>
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f000 f999 	bl	8005e8c <HAL_TIM_IC_CaptureCallback>
 8005b5a:	e005      	b.n	8005b68 <HAL_TIM_IRQHandler+0x5e>
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f000 f98b 	bl	8005e78 <HAL_TIM_OC_DelayElapsedCallback>
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 f99c 	bl	8005ea0 <HAL_TIM_PWM_PulseFinishedCallback>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	771a      	strb	r2, [r3, #28]
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	f003 0304 	and.w	r3, r3, #4
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d020      	beq.n	8005bba <HAL_TIM_IRQHandler+0xb0>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f003 0304 	and.w	r3, r3, #4
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d01b      	beq.n	8005bba <HAL_TIM_IRQHandler+0xb0>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f06f 0204 	mvn.w	r2, #4
 8005b8a:	611a      	str	r2, [r3, #16]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2202      	movs	r2, #2
 8005b90:	771a      	strb	r2, [r3, #28]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	699b      	ldr	r3, [r3, #24]
 8005b98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d003      	beq.n	8005ba8 <HAL_TIM_IRQHandler+0x9e>
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 f973 	bl	8005e8c <HAL_TIM_IC_CaptureCallback>
 8005ba6:	e005      	b.n	8005bb4 <HAL_TIM_IRQHandler+0xaa>
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f000 f965 	bl	8005e78 <HAL_TIM_OC_DelayElapsedCallback>
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 f976 	bl	8005ea0 <HAL_TIM_PWM_PulseFinishedCallback>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	771a      	strb	r2, [r3, #28]
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	f003 0308 	and.w	r3, r3, #8
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d020      	beq.n	8005c06 <HAL_TIM_IRQHandler+0xfc>
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f003 0308 	and.w	r3, r3, #8
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d01b      	beq.n	8005c06 <HAL_TIM_IRQHandler+0xfc>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f06f 0208 	mvn.w	r2, #8
 8005bd6:	611a      	str	r2, [r3, #16]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2204      	movs	r2, #4
 8005bdc:	771a      	strb	r2, [r3, #28]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	69db      	ldr	r3, [r3, #28]
 8005be4:	f003 0303 	and.w	r3, r3, #3
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d003      	beq.n	8005bf4 <HAL_TIM_IRQHandler+0xea>
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f000 f94d 	bl	8005e8c <HAL_TIM_IC_CaptureCallback>
 8005bf2:	e005      	b.n	8005c00 <HAL_TIM_IRQHandler+0xf6>
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f000 f93f 	bl	8005e78 <HAL_TIM_OC_DelayElapsedCallback>
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 f950 	bl	8005ea0 <HAL_TIM_PWM_PulseFinishedCallback>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	771a      	strb	r2, [r3, #28]
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	f003 0310 	and.w	r3, r3, #16
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d020      	beq.n	8005c52 <HAL_TIM_IRQHandler+0x148>
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f003 0310 	and.w	r3, r3, #16
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d01b      	beq.n	8005c52 <HAL_TIM_IRQHandler+0x148>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f06f 0210 	mvn.w	r2, #16
 8005c22:	611a      	str	r2, [r3, #16]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2208      	movs	r2, #8
 8005c28:	771a      	strb	r2, [r3, #28]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	69db      	ldr	r3, [r3, #28]
 8005c30:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d003      	beq.n	8005c40 <HAL_TIM_IRQHandler+0x136>
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f000 f927 	bl	8005e8c <HAL_TIM_IC_CaptureCallback>
 8005c3e:	e005      	b.n	8005c4c <HAL_TIM_IRQHandler+0x142>
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 f919 	bl	8005e78 <HAL_TIM_OC_DelayElapsedCallback>
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 f92a 	bl	8005ea0 <HAL_TIM_PWM_PulseFinishedCallback>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	771a      	strb	r2, [r3, #28]
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	f003 0301 	and.w	r3, r3, #1
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d00c      	beq.n	8005c76 <HAL_TIM_IRQHandler+0x16c>
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f003 0301 	and.w	r3, r3, #1
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d007      	beq.n	8005c76 <HAL_TIM_IRQHandler+0x16c>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f06f 0201 	mvn.w	r2, #1
 8005c6e:	611a      	str	r2, [r3, #16]
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f003 faa5 	bl	80091c0 <HAL_TIM_PeriodElapsedCallback>
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d00c      	beq.n	8005c9a <HAL_TIM_IRQHandler+0x190>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d007      	beq.n	8005c9a <HAL_TIM_IRQHandler+0x190>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005c92:	611a      	str	r2, [r3, #16]
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f000 fadd 	bl	8006254 <HAL_TIMEx_BreakCallback>
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d00c      	beq.n	8005cbe <HAL_TIM_IRQHandler+0x1b4>
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d007      	beq.n	8005cbe <HAL_TIM_IRQHandler+0x1b4>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005cb6:	611a      	str	r2, [r3, #16]
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 f8fb 	bl	8005eb4 <HAL_TIM_TriggerCallback>
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	f003 0320 	and.w	r3, r3, #32
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d00c      	beq.n	8005ce2 <HAL_TIM_IRQHandler+0x1d8>
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f003 0320 	and.w	r3, r3, #32
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d007      	beq.n	8005ce2 <HAL_TIM_IRQHandler+0x1d8>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f06f 0220 	mvn.w	r2, #32
 8005cda:	611a      	str	r2, [r3, #16]
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f000 faaf 	bl	8006240 <HAL_TIMEx_CommutCallback>
 8005ce2:	bf00      	nop
 8005ce4:	3710      	adds	r7, #16
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}

08005cea <HAL_TIM_ConfigClockSource>:
 8005cea:	b580      	push	{r7, lr}
 8005cec:	b084      	sub	sp, #16
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
 8005cf2:	6039      	str	r1, [r7, #0]
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	73fb      	strb	r3, [r7, #15]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d101      	bne.n	8005d06 <HAL_TIM_ConfigClockSource+0x1c>
 8005d02:	2302      	movs	r3, #2
 8005d04:	e0b4      	b.n	8005e70 <HAL_TIM_ConfigClockSource+0x186>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2202      	movs	r2, #2
 8005d12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	60bb      	str	r3, [r7, #8]
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005d24:	60bb      	str	r3, [r7, #8]
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d2c:	60bb      	str	r3, [r7, #8]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	68ba      	ldr	r2, [r7, #8]
 8005d34:	609a      	str	r2, [r3, #8]
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d3e:	d03e      	beq.n	8005dbe <HAL_TIM_ConfigClockSource+0xd4>
 8005d40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d44:	f200 8087 	bhi.w	8005e56 <HAL_TIM_ConfigClockSource+0x16c>
 8005d48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d4c:	f000 8086 	beq.w	8005e5c <HAL_TIM_ConfigClockSource+0x172>
 8005d50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d54:	d87f      	bhi.n	8005e56 <HAL_TIM_ConfigClockSource+0x16c>
 8005d56:	2b70      	cmp	r3, #112	@ 0x70
 8005d58:	d01a      	beq.n	8005d90 <HAL_TIM_ConfigClockSource+0xa6>
 8005d5a:	2b70      	cmp	r3, #112	@ 0x70
 8005d5c:	d87b      	bhi.n	8005e56 <HAL_TIM_ConfigClockSource+0x16c>
 8005d5e:	2b60      	cmp	r3, #96	@ 0x60
 8005d60:	d050      	beq.n	8005e04 <HAL_TIM_ConfigClockSource+0x11a>
 8005d62:	2b60      	cmp	r3, #96	@ 0x60
 8005d64:	d877      	bhi.n	8005e56 <HAL_TIM_ConfigClockSource+0x16c>
 8005d66:	2b50      	cmp	r3, #80	@ 0x50
 8005d68:	d03c      	beq.n	8005de4 <HAL_TIM_ConfigClockSource+0xfa>
 8005d6a:	2b50      	cmp	r3, #80	@ 0x50
 8005d6c:	d873      	bhi.n	8005e56 <HAL_TIM_ConfigClockSource+0x16c>
 8005d6e:	2b40      	cmp	r3, #64	@ 0x40
 8005d70:	d058      	beq.n	8005e24 <HAL_TIM_ConfigClockSource+0x13a>
 8005d72:	2b40      	cmp	r3, #64	@ 0x40
 8005d74:	d86f      	bhi.n	8005e56 <HAL_TIM_ConfigClockSource+0x16c>
 8005d76:	2b30      	cmp	r3, #48	@ 0x30
 8005d78:	d064      	beq.n	8005e44 <HAL_TIM_ConfigClockSource+0x15a>
 8005d7a:	2b30      	cmp	r3, #48	@ 0x30
 8005d7c:	d86b      	bhi.n	8005e56 <HAL_TIM_ConfigClockSource+0x16c>
 8005d7e:	2b20      	cmp	r3, #32
 8005d80:	d060      	beq.n	8005e44 <HAL_TIM_ConfigClockSource+0x15a>
 8005d82:	2b20      	cmp	r3, #32
 8005d84:	d867      	bhi.n	8005e56 <HAL_TIM_ConfigClockSource+0x16c>
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d05c      	beq.n	8005e44 <HAL_TIM_ConfigClockSource+0x15a>
 8005d8a:	2b10      	cmp	r3, #16
 8005d8c:	d05a      	beq.n	8005e44 <HAL_TIM_ConfigClockSource+0x15a>
 8005d8e:	e062      	b.n	8005e56 <HAL_TIM_ConfigClockSource+0x16c>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6818      	ldr	r0, [r3, #0]
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	6899      	ldr	r1, [r3, #8]
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	685a      	ldr	r2, [r3, #4]
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	f000 f9b2 	bl	8006108 <TIM_ETR_SetConfig>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	60bb      	str	r3, [r7, #8]
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005db2:	60bb      	str	r3, [r7, #8]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68ba      	ldr	r2, [r7, #8]
 8005dba:	609a      	str	r2, [r3, #8]
 8005dbc:	e04f      	b.n	8005e5e <HAL_TIM_ConfigClockSource+0x174>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6818      	ldr	r0, [r3, #0]
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	6899      	ldr	r1, [r3, #8]
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	685a      	ldr	r2, [r3, #4]
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	f000 f99b 	bl	8006108 <TIM_ETR_SetConfig>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	689a      	ldr	r2, [r3, #8]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005de0:	609a      	str	r2, [r3, #8]
 8005de2:	e03c      	b.n	8005e5e <HAL_TIM_ConfigClockSource+0x174>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6818      	ldr	r0, [r3, #0]
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	6859      	ldr	r1, [r3, #4]
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	461a      	mov	r2, r3
 8005df2:	f000 f90f 	bl	8006014 <TIM_TI1_ConfigInputStage>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	2150      	movs	r1, #80	@ 0x50
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f000 f968 	bl	80060d2 <TIM_ITRx_SetConfig>
 8005e02:	e02c      	b.n	8005e5e <HAL_TIM_ConfigClockSource+0x174>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6818      	ldr	r0, [r3, #0]
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	6859      	ldr	r1, [r3, #4]
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	461a      	mov	r2, r3
 8005e12:	f000 f92e 	bl	8006072 <TIM_TI2_ConfigInputStage>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2160      	movs	r1, #96	@ 0x60
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f000 f958 	bl	80060d2 <TIM_ITRx_SetConfig>
 8005e22:	e01c      	b.n	8005e5e <HAL_TIM_ConfigClockSource+0x174>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6818      	ldr	r0, [r3, #0]
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	6859      	ldr	r1, [r3, #4]
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	461a      	mov	r2, r3
 8005e32:	f000 f8ef 	bl	8006014 <TIM_TI1_ConfigInputStage>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2140      	movs	r1, #64	@ 0x40
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f000 f948 	bl	80060d2 <TIM_ITRx_SetConfig>
 8005e42:	e00c      	b.n	8005e5e <HAL_TIM_ConfigClockSource+0x174>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	4610      	mov	r0, r2
 8005e50:	f000 f93f 	bl	80060d2 <TIM_ITRx_SetConfig>
 8005e54:	e003      	b.n	8005e5e <HAL_TIM_ConfigClockSource+0x174>
 8005e56:	2301      	movs	r3, #1
 8005e58:	73fb      	strb	r3, [r7, #15]
 8005e5a:	e000      	b.n	8005e5e <HAL_TIM_ConfigClockSource+0x174>
 8005e5c:	bf00      	nop
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2201      	movs	r2, #1
 8005e62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8005e6e:	7bfb      	ldrb	r3, [r7, #15]
 8005e70:	4618      	mov	r0, r3
 8005e72:	3710      	adds	r7, #16
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <HAL_TIM_OC_DelayElapsedCallback>:
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	bf00      	nop
 8005e82:	370c      	adds	r7, #12
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <HAL_TIM_IC_CaptureCallback>:
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	bf00      	nop
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <HAL_TIM_PWM_PulseFinishedCallback>:
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	bf00      	nop
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <HAL_TIM_TriggerCallback>:
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	bf00      	nop
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <TIM_Base_SetConfig>:
 8005ec8:	b480      	push	{r7}
 8005eca:	b085      	sub	sp, #20
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	60fb      	str	r3, [r7, #12]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4a43      	ldr	r2, [pc, #268]	@ (8005fe8 <TIM_Base_SetConfig+0x120>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d013      	beq.n	8005f08 <TIM_Base_SetConfig+0x40>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ee6:	d00f      	beq.n	8005f08 <TIM_Base_SetConfig+0x40>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4a40      	ldr	r2, [pc, #256]	@ (8005fec <TIM_Base_SetConfig+0x124>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d00b      	beq.n	8005f08 <TIM_Base_SetConfig+0x40>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a3f      	ldr	r2, [pc, #252]	@ (8005ff0 <TIM_Base_SetConfig+0x128>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d007      	beq.n	8005f08 <TIM_Base_SetConfig+0x40>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a3e      	ldr	r2, [pc, #248]	@ (8005ff4 <TIM_Base_SetConfig+0x12c>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d003      	beq.n	8005f08 <TIM_Base_SetConfig+0x40>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a3d      	ldr	r2, [pc, #244]	@ (8005ff8 <TIM_Base_SetConfig+0x130>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d108      	bne.n	8005f1a <TIM_Base_SetConfig+0x52>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f0e:	60fb      	str	r3, [r7, #12]
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	60fb      	str	r3, [r7, #12]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4a32      	ldr	r2, [pc, #200]	@ (8005fe8 <TIM_Base_SetConfig+0x120>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d02b      	beq.n	8005f7a <TIM_Base_SetConfig+0xb2>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f28:	d027      	beq.n	8005f7a <TIM_Base_SetConfig+0xb2>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a2f      	ldr	r2, [pc, #188]	@ (8005fec <TIM_Base_SetConfig+0x124>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d023      	beq.n	8005f7a <TIM_Base_SetConfig+0xb2>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	4a2e      	ldr	r2, [pc, #184]	@ (8005ff0 <TIM_Base_SetConfig+0x128>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d01f      	beq.n	8005f7a <TIM_Base_SetConfig+0xb2>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4a2d      	ldr	r2, [pc, #180]	@ (8005ff4 <TIM_Base_SetConfig+0x12c>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d01b      	beq.n	8005f7a <TIM_Base_SetConfig+0xb2>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4a2c      	ldr	r2, [pc, #176]	@ (8005ff8 <TIM_Base_SetConfig+0x130>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d017      	beq.n	8005f7a <TIM_Base_SetConfig+0xb2>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	4a2b      	ldr	r2, [pc, #172]	@ (8005ffc <TIM_Base_SetConfig+0x134>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d013      	beq.n	8005f7a <TIM_Base_SetConfig+0xb2>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4a2a      	ldr	r2, [pc, #168]	@ (8006000 <TIM_Base_SetConfig+0x138>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d00f      	beq.n	8005f7a <TIM_Base_SetConfig+0xb2>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a29      	ldr	r2, [pc, #164]	@ (8006004 <TIM_Base_SetConfig+0x13c>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d00b      	beq.n	8005f7a <TIM_Base_SetConfig+0xb2>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a28      	ldr	r2, [pc, #160]	@ (8006008 <TIM_Base_SetConfig+0x140>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d007      	beq.n	8005f7a <TIM_Base_SetConfig+0xb2>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a27      	ldr	r2, [pc, #156]	@ (800600c <TIM_Base_SetConfig+0x144>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d003      	beq.n	8005f7a <TIM_Base_SetConfig+0xb2>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a26      	ldr	r2, [pc, #152]	@ (8006010 <TIM_Base_SetConfig+0x148>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d108      	bne.n	8005f8c <TIM_Base_SetConfig+0xc4>
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f80:	60fb      	str	r3, [r7, #12]
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	60fb      	str	r3, [r7, #12]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	695b      	ldr	r3, [r3, #20]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	60fb      	str	r3, [r7, #12]
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	689a      	ldr	r2, [r3, #8]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	629a      	str	r2, [r3, #40]	@ 0x28
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a0e      	ldr	r2, [pc, #56]	@ (8005fe8 <TIM_Base_SetConfig+0x120>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d003      	beq.n	8005fba <TIM_Base_SetConfig+0xf2>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a10      	ldr	r2, [pc, #64]	@ (8005ff8 <TIM_Base_SetConfig+0x130>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d103      	bne.n	8005fc2 <TIM_Base_SetConfig+0xfa>
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	691a      	ldr	r2, [r3, #16]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	631a      	str	r2, [r3, #48]	@ 0x30
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f043 0204 	orr.w	r2, r3, #4
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	601a      	str	r2, [r3, #0]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	615a      	str	r2, [r3, #20]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	68fa      	ldr	r2, [r7, #12]
 8005fd8:	601a      	str	r2, [r3, #0]
 8005fda:	bf00      	nop
 8005fdc:	3714      	adds	r7, #20
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr
 8005fe6:	bf00      	nop
 8005fe8:	40010000 	.word	0x40010000
 8005fec:	40000400 	.word	0x40000400
 8005ff0:	40000800 	.word	0x40000800
 8005ff4:	40000c00 	.word	0x40000c00
 8005ff8:	40010400 	.word	0x40010400
 8005ffc:	40014000 	.word	0x40014000
 8006000:	40014400 	.word	0x40014400
 8006004:	40014800 	.word	0x40014800
 8006008:	40001800 	.word	0x40001800
 800600c:	40001c00 	.word	0x40001c00
 8006010:	40002000 	.word	0x40002000

08006014 <TIM_TI1_ConfigInputStage>:
 8006014:	b480      	push	{r7}
 8006016:	b087      	sub	sp, #28
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	607a      	str	r2, [r7, #4]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6a1b      	ldr	r3, [r3, #32]
 8006024:	617b      	str	r3, [r7, #20]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	f023 0201 	bic.w	r2, r3, #1
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	621a      	str	r2, [r3, #32]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	699b      	ldr	r3, [r3, #24]
 8006036:	613b      	str	r3, [r7, #16]
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800603e:	613b      	str	r3, [r7, #16]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	011b      	lsls	r3, r3, #4
 8006044:	693a      	ldr	r2, [r7, #16]
 8006046:	4313      	orrs	r3, r2
 8006048:	613b      	str	r3, [r7, #16]
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	f023 030a 	bic.w	r3, r3, #10
 8006050:	617b      	str	r3, [r7, #20]
 8006052:	697a      	ldr	r2, [r7, #20]
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	4313      	orrs	r3, r2
 8006058:	617b      	str	r3, [r7, #20]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	693a      	ldr	r2, [r7, #16]
 800605e:	619a      	str	r2, [r3, #24]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	697a      	ldr	r2, [r7, #20]
 8006064:	621a      	str	r2, [r3, #32]
 8006066:	bf00      	nop
 8006068:	371c      	adds	r7, #28
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr

08006072 <TIM_TI2_ConfigInputStage>:
 8006072:	b480      	push	{r7}
 8006074:	b087      	sub	sp, #28
 8006076:	af00      	add	r7, sp, #0
 8006078:	60f8      	str	r0, [r7, #12]
 800607a:	60b9      	str	r1, [r7, #8]
 800607c:	607a      	str	r2, [r7, #4]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6a1b      	ldr	r3, [r3, #32]
 8006082:	617b      	str	r3, [r7, #20]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6a1b      	ldr	r3, [r3, #32]
 8006088:	f023 0210 	bic.w	r2, r3, #16
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	621a      	str	r2, [r3, #32]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	699b      	ldr	r3, [r3, #24]
 8006094:	613b      	str	r3, [r7, #16]
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800609c:	613b      	str	r3, [r7, #16]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	031b      	lsls	r3, r3, #12
 80060a2:	693a      	ldr	r2, [r7, #16]
 80060a4:	4313      	orrs	r3, r2
 80060a6:	613b      	str	r3, [r7, #16]
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80060ae:	617b      	str	r3, [r7, #20]
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	011b      	lsls	r3, r3, #4
 80060b4:	697a      	ldr	r2, [r7, #20]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	617b      	str	r3, [r7, #20]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	693a      	ldr	r2, [r7, #16]
 80060be:	619a      	str	r2, [r3, #24]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	697a      	ldr	r2, [r7, #20]
 80060c4:	621a      	str	r2, [r3, #32]
 80060c6:	bf00      	nop
 80060c8:	371c      	adds	r7, #28
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr

080060d2 <TIM_ITRx_SetConfig>:
 80060d2:	b480      	push	{r7}
 80060d4:	b085      	sub	sp, #20
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
 80060da:	6039      	str	r1, [r7, #0]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	60fb      	str	r3, [r7, #12]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060e8:	60fb      	str	r3, [r7, #12]
 80060ea:	683a      	ldr	r2, [r7, #0]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	f043 0307 	orr.w	r3, r3, #7
 80060f4:	60fb      	str	r3, [r7, #12]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	609a      	str	r2, [r3, #8]
 80060fc:	bf00      	nop
 80060fe:	3714      	adds	r7, #20
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <TIM_ETR_SetConfig>:
 8006108:	b480      	push	{r7}
 800610a:	b087      	sub	sp, #28
 800610c:	af00      	add	r7, sp, #0
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	60b9      	str	r1, [r7, #8]
 8006112:	607a      	str	r2, [r7, #4]
 8006114:	603b      	str	r3, [r7, #0]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	617b      	str	r3, [r7, #20]
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006122:	617b      	str	r3, [r7, #20]
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	021a      	lsls	r2, r3, #8
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	431a      	orrs	r2, r3
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	4313      	orrs	r3, r2
 8006130:	697a      	ldr	r2, [r7, #20]
 8006132:	4313      	orrs	r3, r2
 8006134:	617b      	str	r3, [r7, #20]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	697a      	ldr	r2, [r7, #20]
 800613a:	609a      	str	r2, [r3, #8]
 800613c:	bf00      	nop
 800613e:	371c      	adds	r7, #28
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <HAL_TIMEx_MasterConfigSynchronization>:
 8006148:	b480      	push	{r7}
 800614a:	b085      	sub	sp, #20
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006158:	2b01      	cmp	r3, #1
 800615a:	d101      	bne.n	8006160 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800615c:	2302      	movs	r3, #2
 800615e:	e05a      	b.n	8006216 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2202      	movs	r2, #2
 800616c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	60fb      	str	r3, [r7, #12]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	60bb      	str	r3, [r7, #8]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006186:	60fb      	str	r3, [r7, #12]
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	4313      	orrs	r3, r2
 8006190:	60fb      	str	r3, [r7, #12]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	605a      	str	r2, [r3, #4]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a21      	ldr	r2, [pc, #132]	@ (8006224 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d022      	beq.n	80061ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061ac:	d01d      	beq.n	80061ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a1d      	ldr	r2, [pc, #116]	@ (8006228 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d018      	beq.n	80061ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a1b      	ldr	r2, [pc, #108]	@ (800622c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d013      	beq.n	80061ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a1a      	ldr	r2, [pc, #104]	@ (8006230 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d00e      	beq.n	80061ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a18      	ldr	r2, [pc, #96]	@ (8006234 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d009      	beq.n	80061ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a17      	ldr	r2, [pc, #92]	@ (8006238 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d004      	beq.n	80061ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a15      	ldr	r2, [pc, #84]	@ (800623c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d10c      	bne.n	8006204 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061f0:	60bb      	str	r3, [r7, #8]
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	68ba      	ldr	r2, [r7, #8]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	60bb      	str	r3, [r7, #8]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68ba      	ldr	r2, [r7, #8]
 8006202:	609a      	str	r2, [r3, #8]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8006214:	2300      	movs	r3, #0
 8006216:	4618      	mov	r0, r3
 8006218:	3714      	adds	r7, #20
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop
 8006224:	40010000 	.word	0x40010000
 8006228:	40000400 	.word	0x40000400
 800622c:	40000800 	.word	0x40000800
 8006230:	40000c00 	.word	0x40000c00
 8006234:	40010400 	.word	0x40010400
 8006238:	40014000 	.word	0x40014000
 800623c:	40001800 	.word	0x40001800

08006240 <HAL_TIMEx_CommutCallback>:
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <HAL_TIMEx_BreakCallback>:
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	bf00      	nop
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <HAL_UART_Init>:
 8006268:	b580      	push	{r7, lr}
 800626a:	b082      	sub	sp, #8
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d101      	bne.n	800627a <HAL_UART_Init+0x12>
 8006276:	2301      	movs	r3, #1
 8006278:	e042      	b.n	8006300 <HAL_UART_Init+0x98>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006280:	b2db      	uxtb	r3, r3
 8006282:	2b00      	cmp	r3, #0
 8006284:	d106      	bne.n	8006294 <HAL_UART_Init+0x2c>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f7fb f988 	bl	80015a4 <HAL_UART_MspInit>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2224      	movs	r2, #36	@ 0x24
 8006298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68da      	ldr	r2, [r3, #12]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80062aa:	60da      	str	r2, [r3, #12]
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 fdfb 	bl	8006ea8 <UART_SetConfig>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	691a      	ldr	r2, [r3, #16]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80062c0:	611a      	str	r2, [r3, #16]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	695a      	ldr	r2, [r3, #20]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80062d0:	615a      	str	r2, [r3, #20]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	68da      	ldr	r2, [r3, #12]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80062e0:	60da      	str	r2, [r3, #12]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	645a      	str	r2, [r3, #68]	@ 0x44
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2220      	movs	r2, #32
 80062ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2220      	movs	r2, #32
 80062f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80062fe:	2300      	movs	r3, #0
 8006300:	4618      	mov	r0, r3
 8006302:	3708      	adds	r7, #8
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <HAL_UART_DeInit>:
 8006308:	b580      	push	{r7, lr}
 800630a:	b082      	sub	sp, #8
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d101      	bne.n	800631a <HAL_UART_DeInit+0x12>
 8006316:	2301      	movs	r3, #1
 8006318:	e024      	b.n	8006364 <HAL_UART_DeInit+0x5c>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2224      	movs	r2, #36	@ 0x24
 800631e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68da      	ldr	r2, [r3, #12]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006330:	60da      	str	r2, [r3, #12]
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f7fb fa0e 	bl	8001754 <HAL_UART_MspDeInit>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	645a      	str	r2, [r3, #68]	@ 0x44
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	631a      	str	r2, [r3, #48]	@ 0x30
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	635a      	str	r2, [r3, #52]	@ 0x34
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006362:	2300      	movs	r3, #0
 8006364:	4618      	mov	r0, r3
 8006366:	3708      	adds	r7, #8
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <HAL_UART_Transmit>:
 800636c:	b580      	push	{r7, lr}
 800636e:	b08a      	sub	sp, #40	@ 0x28
 8006370:	af02      	add	r7, sp, #8
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	603b      	str	r3, [r7, #0]
 8006378:	4613      	mov	r3, r2
 800637a:	80fb      	strh	r3, [r7, #6]
 800637c:	2300      	movs	r3, #0
 800637e:	617b      	str	r3, [r7, #20]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006386:	b2db      	uxtb	r3, r3
 8006388:	2b20      	cmp	r3, #32
 800638a:	d175      	bne.n	8006478 <HAL_UART_Transmit+0x10c>
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d002      	beq.n	8006398 <HAL_UART_Transmit+0x2c>
 8006392:	88fb      	ldrh	r3, [r7, #6]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d101      	bne.n	800639c <HAL_UART_Transmit+0x30>
 8006398:	2301      	movs	r3, #1
 800639a:	e06e      	b.n	800647a <HAL_UART_Transmit+0x10e>
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2200      	movs	r2, #0
 80063a0:	645a      	str	r2, [r3, #68]	@ 0x44
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2221      	movs	r2, #33	@ 0x21
 80063a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80063aa:	f7fb fb17 	bl	80019dc <HAL_GetTick>
 80063ae:	6178      	str	r0, [r7, #20]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	88fa      	ldrh	r2, [r7, #6]
 80063b4:	849a      	strh	r2, [r3, #36]	@ 0x24
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	88fa      	ldrh	r2, [r7, #6]
 80063ba:	84da      	strh	r2, [r3, #38]	@ 0x26
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063c4:	d108      	bne.n	80063d8 <HAL_UART_Transmit+0x6c>
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	691b      	ldr	r3, [r3, #16]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d104      	bne.n	80063d8 <HAL_UART_Transmit+0x6c>
 80063ce:	2300      	movs	r3, #0
 80063d0:	61fb      	str	r3, [r7, #28]
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	61bb      	str	r3, [r7, #24]
 80063d6:	e003      	b.n	80063e0 <HAL_UART_Transmit+0x74>
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	61fb      	str	r3, [r7, #28]
 80063dc:	2300      	movs	r3, #0
 80063de:	61bb      	str	r3, [r7, #24]
 80063e0:	e02e      	b.n	8006440 <HAL_UART_Transmit+0xd4>
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	9300      	str	r3, [sp, #0]
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	2200      	movs	r2, #0
 80063ea:	2180      	movs	r1, #128	@ 0x80
 80063ec:	68f8      	ldr	r0, [r7, #12]
 80063ee:	f000 fb2d 	bl	8006a4c <UART_WaitOnFlagUntilTimeout>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d005      	beq.n	8006404 <HAL_UART_Transmit+0x98>
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2220      	movs	r2, #32
 80063fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006400:	2303      	movs	r3, #3
 8006402:	e03a      	b.n	800647a <HAL_UART_Transmit+0x10e>
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d10b      	bne.n	8006422 <HAL_UART_Transmit+0xb6>
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	881b      	ldrh	r3, [r3, #0]
 800640e:	461a      	mov	r2, r3
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006418:	605a      	str	r2, [r3, #4]
 800641a:	69bb      	ldr	r3, [r7, #24]
 800641c:	3302      	adds	r3, #2
 800641e:	61bb      	str	r3, [r7, #24]
 8006420:	e007      	b.n	8006432 <HAL_UART_Transmit+0xc6>
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	781a      	ldrb	r2, [r3, #0]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	605a      	str	r2, [r3, #4]
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	3301      	adds	r3, #1
 8006430:	61fb      	str	r3, [r7, #28]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006436:	b29b      	uxth	r3, r3
 8006438:	3b01      	subs	r3, #1
 800643a:	b29a      	uxth	r2, r3
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	84da      	strh	r2, [r3, #38]	@ 0x26
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006444:	b29b      	uxth	r3, r3
 8006446:	2b00      	cmp	r3, #0
 8006448:	d1cb      	bne.n	80063e2 <HAL_UART_Transmit+0x76>
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	9300      	str	r3, [sp, #0]
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	2200      	movs	r2, #0
 8006452:	2140      	movs	r1, #64	@ 0x40
 8006454:	68f8      	ldr	r0, [r7, #12]
 8006456:	f000 faf9 	bl	8006a4c <UART_WaitOnFlagUntilTimeout>
 800645a:	4603      	mov	r3, r0
 800645c:	2b00      	cmp	r3, #0
 800645e:	d005      	beq.n	800646c <HAL_UART_Transmit+0x100>
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2220      	movs	r2, #32
 8006464:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006468:	2303      	movs	r3, #3
 800646a:	e006      	b.n	800647a <HAL_UART_Transmit+0x10e>
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2220      	movs	r2, #32
 8006470:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006474:	2300      	movs	r3, #0
 8006476:	e000      	b.n	800647a <HAL_UART_Transmit+0x10e>
 8006478:	2302      	movs	r3, #2
 800647a:	4618      	mov	r0, r3
 800647c:	3720      	adds	r7, #32
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}

08006482 <HAL_UART_Receive_IT>:
 8006482:	b580      	push	{r7, lr}
 8006484:	b084      	sub	sp, #16
 8006486:	af00      	add	r7, sp, #0
 8006488:	60f8      	str	r0, [r7, #12]
 800648a:	60b9      	str	r1, [r7, #8]
 800648c:	4613      	mov	r3, r2
 800648e:	80fb      	strh	r3, [r7, #6]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006496:	b2db      	uxtb	r3, r3
 8006498:	2b20      	cmp	r3, #32
 800649a:	d112      	bne.n	80064c2 <HAL_UART_Receive_IT+0x40>
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d002      	beq.n	80064a8 <HAL_UART_Receive_IT+0x26>
 80064a2:	88fb      	ldrh	r3, [r7, #6]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d101      	bne.n	80064ac <HAL_UART_Receive_IT+0x2a>
 80064a8:	2301      	movs	r3, #1
 80064aa:	e00b      	b.n	80064c4 <HAL_UART_Receive_IT+0x42>
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2200      	movs	r2, #0
 80064b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80064b2:	88fb      	ldrh	r3, [r7, #6]
 80064b4:	461a      	mov	r2, r3
 80064b6:	68b9      	ldr	r1, [r7, #8]
 80064b8:	68f8      	ldr	r0, [r7, #12]
 80064ba:	f000 fb20 	bl	8006afe <UART_Start_Receive_IT>
 80064be:	4603      	mov	r3, r0
 80064c0:	e000      	b.n	80064c4 <HAL_UART_Receive_IT+0x42>
 80064c2:	2302      	movs	r3, #2
 80064c4:	4618      	mov	r0, r3
 80064c6:	3710      	adds	r7, #16
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <HAL_UART_IRQHandler>:
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b0ba      	sub	sp, #232	@ 0xe8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	695b      	ldr	r3, [r3, #20]
 80064ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80064f2:	2300      	movs	r3, #0
 80064f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80064f8:	2300      	movs	r3, #0
 80064fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80064fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006502:	f003 030f 	and.w	r3, r3, #15
 8006506:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800650a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800650e:	2b00      	cmp	r3, #0
 8006510:	d10f      	bne.n	8006532 <HAL_UART_IRQHandler+0x66>
 8006512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006516:	f003 0320 	and.w	r3, r3, #32
 800651a:	2b00      	cmp	r3, #0
 800651c:	d009      	beq.n	8006532 <HAL_UART_IRQHandler+0x66>
 800651e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006522:	f003 0320 	and.w	r3, r3, #32
 8006526:	2b00      	cmp	r3, #0
 8006528:	d003      	beq.n	8006532 <HAL_UART_IRQHandler+0x66>
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 fbfd 	bl	8006d2a <UART_Receive_IT>
 8006530:	e273      	b.n	8006a1a <HAL_UART_IRQHandler+0x54e>
 8006532:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006536:	2b00      	cmp	r3, #0
 8006538:	f000 80de 	beq.w	80066f8 <HAL_UART_IRQHandler+0x22c>
 800653c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006540:	f003 0301 	and.w	r3, r3, #1
 8006544:	2b00      	cmp	r3, #0
 8006546:	d106      	bne.n	8006556 <HAL_UART_IRQHandler+0x8a>
 8006548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800654c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006550:	2b00      	cmp	r3, #0
 8006552:	f000 80d1 	beq.w	80066f8 <HAL_UART_IRQHandler+0x22c>
 8006556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800655a:	f003 0301 	and.w	r3, r3, #1
 800655e:	2b00      	cmp	r3, #0
 8006560:	d00b      	beq.n	800657a <HAL_UART_IRQHandler+0xae>
 8006562:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006566:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800656a:	2b00      	cmp	r3, #0
 800656c:	d005      	beq.n	800657a <HAL_UART_IRQHandler+0xae>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006572:	f043 0201 	orr.w	r2, r3, #1
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	645a      	str	r2, [r3, #68]	@ 0x44
 800657a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800657e:	f003 0304 	and.w	r3, r3, #4
 8006582:	2b00      	cmp	r3, #0
 8006584:	d00b      	beq.n	800659e <HAL_UART_IRQHandler+0xd2>
 8006586:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800658a:	f003 0301 	and.w	r3, r3, #1
 800658e:	2b00      	cmp	r3, #0
 8006590:	d005      	beq.n	800659e <HAL_UART_IRQHandler+0xd2>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006596:	f043 0202 	orr.w	r2, r3, #2
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	645a      	str	r2, [r3, #68]	@ 0x44
 800659e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065a2:	f003 0302 	and.w	r3, r3, #2
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d00b      	beq.n	80065c2 <HAL_UART_IRQHandler+0xf6>
 80065aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065ae:	f003 0301 	and.w	r3, r3, #1
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d005      	beq.n	80065c2 <HAL_UART_IRQHandler+0xf6>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065ba:	f043 0204 	orr.w	r2, r3, #4
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	645a      	str	r2, [r3, #68]	@ 0x44
 80065c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065c6:	f003 0308 	and.w	r3, r3, #8
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d011      	beq.n	80065f2 <HAL_UART_IRQHandler+0x126>
 80065ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065d2:	f003 0320 	and.w	r3, r3, #32
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d105      	bne.n	80065e6 <HAL_UART_IRQHandler+0x11a>
 80065da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065de:	f003 0301 	and.w	r3, r3, #1
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d005      	beq.n	80065f2 <HAL_UART_IRQHandler+0x126>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065ea:	f043 0208 	orr.w	r2, r3, #8
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	645a      	str	r2, [r3, #68]	@ 0x44
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	f000 820a 	beq.w	8006a10 <HAL_UART_IRQHandler+0x544>
 80065fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006600:	f003 0320 	and.w	r3, r3, #32
 8006604:	2b00      	cmp	r3, #0
 8006606:	d008      	beq.n	800661a <HAL_UART_IRQHandler+0x14e>
 8006608:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800660c:	f003 0320 	and.w	r3, r3, #32
 8006610:	2b00      	cmp	r3, #0
 8006612:	d002      	beq.n	800661a <HAL_UART_IRQHandler+0x14e>
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f000 fb88 	bl	8006d2a <UART_Receive_IT>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	695b      	ldr	r3, [r3, #20]
 8006620:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006624:	2b40      	cmp	r3, #64	@ 0x40
 8006626:	bf0c      	ite	eq
 8006628:	2301      	moveq	r3, #1
 800662a:	2300      	movne	r3, #0
 800662c:	b2db      	uxtb	r3, r3
 800662e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006636:	f003 0308 	and.w	r3, r3, #8
 800663a:	2b00      	cmp	r3, #0
 800663c:	d103      	bne.n	8006646 <HAL_UART_IRQHandler+0x17a>
 800663e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006642:	2b00      	cmp	r3, #0
 8006644:	d04f      	beq.n	80066e6 <HAL_UART_IRQHandler+0x21a>
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 fa93 	bl	8006b72 <UART_EndRxTransfer>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	695b      	ldr	r3, [r3, #20]
 8006652:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006656:	2b40      	cmp	r3, #64	@ 0x40
 8006658:	d141      	bne.n	80066de <HAL_UART_IRQHandler+0x212>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	3314      	adds	r3, #20
 8006660:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006664:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006668:	e853 3f00 	ldrex	r3, [r3]
 800666c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006670:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006674:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006678:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	3314      	adds	r3, #20
 8006682:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006686:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800668a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800668e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006692:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006696:	e841 2300 	strex	r3, r2, [r1]
 800669a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800669e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d1d9      	bne.n	800665a <HAL_UART_IRQHandler+0x18e>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d013      	beq.n	80066d6 <HAL_UART_IRQHandler+0x20a>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066b2:	4a8a      	ldr	r2, [pc, #552]	@ (80068dc <HAL_UART_IRQHandler+0x410>)
 80066b4:	651a      	str	r2, [r3, #80]	@ 0x50
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066ba:	4618      	mov	r0, r3
 80066bc:	f7fc fb4e 	bl	8002d5c <HAL_DMA_Abort_IT>
 80066c0:	4603      	mov	r3, r0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d016      	beq.n	80066f4 <HAL_UART_IRQHandler+0x228>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80066d0:	4610      	mov	r0, r2
 80066d2:	4798      	blx	r3
 80066d4:	e00e      	b.n	80066f4 <HAL_UART_IRQHandler+0x228>
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 f9a2 	bl	8006a20 <HAL_UART_ErrorCallback>
 80066dc:	e00a      	b.n	80066f4 <HAL_UART_IRQHandler+0x228>
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 f99e 	bl	8006a20 <HAL_UART_ErrorCallback>
 80066e4:	e006      	b.n	80066f4 <HAL_UART_IRQHandler+0x228>
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 f99a 	bl	8006a20 <HAL_UART_ErrorCallback>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	645a      	str	r2, [r3, #68]	@ 0x44
 80066f2:	e18d      	b.n	8006a10 <HAL_UART_IRQHandler+0x544>
 80066f4:	bf00      	nop
 80066f6:	e18b      	b.n	8006a10 <HAL_UART_IRQHandler+0x544>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	f040 8167 	bne.w	80069d0 <HAL_UART_IRQHandler+0x504>
 8006702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006706:	f003 0310 	and.w	r3, r3, #16
 800670a:	2b00      	cmp	r3, #0
 800670c:	f000 8160 	beq.w	80069d0 <HAL_UART_IRQHandler+0x504>
 8006710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006714:	f003 0310 	and.w	r3, r3, #16
 8006718:	2b00      	cmp	r3, #0
 800671a:	f000 8159 	beq.w	80069d0 <HAL_UART_IRQHandler+0x504>
 800671e:	2300      	movs	r3, #0
 8006720:	60bb      	str	r3, [r7, #8]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	60bb      	str	r3, [r7, #8]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	60bb      	str	r3, [r7, #8]
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	695b      	ldr	r3, [r3, #20]
 800673a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800673e:	2b40      	cmp	r3, #64	@ 0x40
 8006740:	f040 80ce 	bne.w	80068e0 <HAL_UART_IRQHandler+0x414>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
 8006750:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006754:	2b00      	cmp	r3, #0
 8006756:	f000 80a9 	beq.w	80068ac <HAL_UART_IRQHandler+0x3e0>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800675e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006762:	429a      	cmp	r2, r3
 8006764:	f080 80a2 	bcs.w	80068ac <HAL_UART_IRQHandler+0x3e0>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800676e:	85da      	strh	r2, [r3, #46]	@ 0x2e
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006774:	69db      	ldr	r3, [r3, #28]
 8006776:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800677a:	f000 8088 	beq.w	800688e <HAL_UART_IRQHandler+0x3c2>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	330c      	adds	r3, #12
 8006784:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006788:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800678c:	e853 3f00 	ldrex	r3, [r3]
 8006790:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006794:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006798:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800679c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	330c      	adds	r3, #12
 80067a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80067aa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80067ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80067b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80067b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80067ba:	e841 2300 	strex	r3, r2, [r1]
 80067be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80067c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d1d9      	bne.n	800677e <HAL_UART_IRQHandler+0x2b2>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	3314      	adds	r3, #20
 80067d0:	677b      	str	r3, [r7, #116]	@ 0x74
 80067d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80067d4:	e853 3f00 	ldrex	r3, [r3]
 80067d8:	673b      	str	r3, [r7, #112]	@ 0x70
 80067da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80067dc:	f023 0301 	bic.w	r3, r3, #1
 80067e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	3314      	adds	r3, #20
 80067ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80067ee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80067f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80067f4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80067f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80067fa:	e841 2300 	strex	r3, r2, [r1]
 80067fe:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006800:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006802:	2b00      	cmp	r3, #0
 8006804:	d1e1      	bne.n	80067ca <HAL_UART_IRQHandler+0x2fe>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	3314      	adds	r3, #20
 800680c:	663b      	str	r3, [r7, #96]	@ 0x60
 800680e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006810:	e853 3f00 	ldrex	r3, [r3]
 8006814:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006816:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006818:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800681c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	3314      	adds	r3, #20
 8006826:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800682a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800682c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800682e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006830:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006832:	e841 2300 	strex	r3, r2, [r1]
 8006836:	667b      	str	r3, [r7, #100]	@ 0x64
 8006838:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800683a:	2b00      	cmp	r3, #0
 800683c:	d1e3      	bne.n	8006806 <HAL_UART_IRQHandler+0x33a>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2220      	movs	r2, #32
 8006842:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	631a      	str	r2, [r3, #48]	@ 0x30
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	330c      	adds	r3, #12
 8006852:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006854:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006856:	e853 3f00 	ldrex	r3, [r3]
 800685a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800685c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800685e:	f023 0310 	bic.w	r3, r3, #16
 8006862:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	330c      	adds	r3, #12
 800686c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006870:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006872:	657b      	str	r3, [r7, #84]	@ 0x54
 8006874:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006876:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006878:	e841 2300 	strex	r3, r2, [r1]
 800687c:	653b      	str	r3, [r7, #80]	@ 0x50
 800687e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006880:	2b00      	cmp	r3, #0
 8006882:	d1e3      	bne.n	800684c <HAL_UART_IRQHandler+0x380>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006888:	4618      	mov	r0, r3
 800688a:	f7fc f9f7 	bl	8002c7c <HAL_DMA_Abort>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2202      	movs	r2, #2
 8006892:	635a      	str	r2, [r3, #52]	@ 0x34
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800689c:	b29b      	uxth	r3, r3
 800689e:	1ad3      	subs	r3, r2, r3
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	4619      	mov	r1, r3
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 f8c5 	bl	8006a34 <HAL_UARTEx_RxEventCallback>
 80068aa:	e0b3      	b.n	8006a14 <HAL_UART_IRQHandler+0x548>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80068b0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80068b4:	429a      	cmp	r2, r3
 80068b6:	f040 80ad 	bne.w	8006a14 <HAL_UART_IRQHandler+0x548>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068be:	69db      	ldr	r3, [r3, #28]
 80068c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068c4:	f040 80a6 	bne.w	8006a14 <HAL_UART_IRQHandler+0x548>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2202      	movs	r2, #2
 80068cc:	635a      	str	r2, [r3, #52]	@ 0x34
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80068d2:	4619      	mov	r1, r3
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 f8ad 	bl	8006a34 <HAL_UARTEx_RxEventCallback>
 80068da:	e09b      	b.n	8006a14 <HAL_UART_IRQHandler+0x548>
 80068dc:	08006c39 	.word	0x08006c39
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	1ad3      	subs	r3, r2, r3
 80068ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	f000 808e 	beq.w	8006a18 <HAL_UART_IRQHandler+0x54c>
 80068fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006900:	2b00      	cmp	r3, #0
 8006902:	f000 8089 	beq.w	8006a18 <HAL_UART_IRQHandler+0x54c>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	330c      	adds	r3, #12
 800690c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800690e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006910:	e853 3f00 	ldrex	r3, [r3]
 8006914:	637b      	str	r3, [r7, #52]	@ 0x34
 8006916:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006918:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800691c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	330c      	adds	r3, #12
 8006926:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800692a:	647a      	str	r2, [r7, #68]	@ 0x44
 800692c:	643b      	str	r3, [r7, #64]	@ 0x40
 800692e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006930:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006932:	e841 2300 	strex	r3, r2, [r1]
 8006936:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006938:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800693a:	2b00      	cmp	r3, #0
 800693c:	d1e3      	bne.n	8006906 <HAL_UART_IRQHandler+0x43a>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	3314      	adds	r3, #20
 8006944:	627b      	str	r3, [r7, #36]	@ 0x24
 8006946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006948:	e853 3f00 	ldrex	r3, [r3]
 800694c:	623b      	str	r3, [r7, #32]
 800694e:	6a3b      	ldr	r3, [r7, #32]
 8006950:	f023 0301 	bic.w	r3, r3, #1
 8006954:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	3314      	adds	r3, #20
 800695e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006962:	633a      	str	r2, [r7, #48]	@ 0x30
 8006964:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006966:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006968:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800696a:	e841 2300 	strex	r3, r2, [r1]
 800696e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006972:	2b00      	cmp	r3, #0
 8006974:	d1e3      	bne.n	800693e <HAL_UART_IRQHandler+0x472>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2220      	movs	r2, #32
 800697a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	631a      	str	r2, [r3, #48]	@ 0x30
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	330c      	adds	r3, #12
 800698a:	613b      	str	r3, [r7, #16]
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	e853 3f00 	ldrex	r3, [r3]
 8006992:	60fb      	str	r3, [r7, #12]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f023 0310 	bic.w	r3, r3, #16
 800699a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	330c      	adds	r3, #12
 80069a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80069a8:	61fa      	str	r2, [r7, #28]
 80069aa:	61bb      	str	r3, [r7, #24]
 80069ac:	69b9      	ldr	r1, [r7, #24]
 80069ae:	69fa      	ldr	r2, [r7, #28]
 80069b0:	e841 2300 	strex	r3, r2, [r1]
 80069b4:	617b      	str	r3, [r7, #20]
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d1e3      	bne.n	8006984 <HAL_UART_IRQHandler+0x4b8>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2202      	movs	r2, #2
 80069c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80069c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80069c6:	4619      	mov	r1, r3
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f000 f833 	bl	8006a34 <HAL_UARTEx_RxEventCallback>
 80069ce:	e023      	b.n	8006a18 <HAL_UART_IRQHandler+0x54c>
 80069d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d009      	beq.n	80069f0 <HAL_UART_IRQHandler+0x524>
 80069dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d003      	beq.n	80069f0 <HAL_UART_IRQHandler+0x524>
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 f936 	bl	8006c5a <UART_Transmit_IT>
 80069ee:	e014      	b.n	8006a1a <HAL_UART_IRQHandler+0x54e>
 80069f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d00e      	beq.n	8006a1a <HAL_UART_IRQHandler+0x54e>
 80069fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d008      	beq.n	8006a1a <HAL_UART_IRQHandler+0x54e>
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 f976 	bl	8006cfa <UART_EndTransmit_IT>
 8006a0e:	e004      	b.n	8006a1a <HAL_UART_IRQHandler+0x54e>
 8006a10:	bf00      	nop
 8006a12:	e002      	b.n	8006a1a <HAL_UART_IRQHandler+0x54e>
 8006a14:	bf00      	nop
 8006a16:	e000      	b.n	8006a1a <HAL_UART_IRQHandler+0x54e>
 8006a18:	bf00      	nop
 8006a1a:	37e8      	adds	r7, #232	@ 0xe8
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <HAL_UART_ErrorCallback>:
 8006a20:	b480      	push	{r7}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	bf00      	nop
 8006a2a:	370c      	adds	r7, #12
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr

08006a34 <HAL_UARTEx_RxEventCallback>:
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	807b      	strh	r3, [r7, #2]
 8006a40:	bf00      	nop
 8006a42:	370c      	adds	r7, #12
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <UART_WaitOnFlagUntilTimeout>:
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b086      	sub	sp, #24
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	60f8      	str	r0, [r7, #12]
 8006a54:	60b9      	str	r1, [r7, #8]
 8006a56:	603b      	str	r3, [r7, #0]
 8006a58:	4613      	mov	r3, r2
 8006a5a:	71fb      	strb	r3, [r7, #7]
 8006a5c:	e03b      	b.n	8006ad6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006a5e:	6a3b      	ldr	r3, [r7, #32]
 8006a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a64:	d037      	beq.n	8006ad6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006a66:	f7fa ffb9 	bl	80019dc <HAL_GetTick>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	1ad3      	subs	r3, r2, r3
 8006a70:	6a3a      	ldr	r2, [r7, #32]
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d302      	bcc.n	8006a7c <UART_WaitOnFlagUntilTimeout+0x30>
 8006a76:	6a3b      	ldr	r3, [r7, #32]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d101      	bne.n	8006a80 <UART_WaitOnFlagUntilTimeout+0x34>
 8006a7c:	2303      	movs	r3, #3
 8006a7e:	e03a      	b.n	8006af6 <UART_WaitOnFlagUntilTimeout+0xaa>
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	68db      	ldr	r3, [r3, #12]
 8006a86:	f003 0304 	and.w	r3, r3, #4
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d023      	beq.n	8006ad6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	2b80      	cmp	r3, #128	@ 0x80
 8006a92:	d020      	beq.n	8006ad6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	2b40      	cmp	r3, #64	@ 0x40
 8006a98:	d01d      	beq.n	8006ad6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f003 0308 	and.w	r3, r3, #8
 8006aa4:	2b08      	cmp	r3, #8
 8006aa6:	d116      	bne.n	8006ad6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	617b      	str	r3, [r7, #20]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	617b      	str	r3, [r7, #20]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	617b      	str	r3, [r7, #20]
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	68f8      	ldr	r0, [r7, #12]
 8006ac0:	f000 f857 	bl	8006b72 <UART_EndRxTransfer>
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2208      	movs	r2, #8
 8006ac8:	645a      	str	r2, [r3, #68]	@ 0x44
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2200      	movs	r2, #0
 8006ace:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e00f      	b.n	8006af6 <UART_WaitOnFlagUntilTimeout+0xaa>
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	4013      	ands	r3, r2
 8006ae0:	68ba      	ldr	r2, [r7, #8]
 8006ae2:	429a      	cmp	r2, r3
 8006ae4:	bf0c      	ite	eq
 8006ae6:	2301      	moveq	r3, #1
 8006ae8:	2300      	movne	r3, #0
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	461a      	mov	r2, r3
 8006aee:	79fb      	ldrb	r3, [r7, #7]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d0b4      	beq.n	8006a5e <UART_WaitOnFlagUntilTimeout+0x12>
 8006af4:	2300      	movs	r3, #0
 8006af6:	4618      	mov	r0, r3
 8006af8:	3718      	adds	r7, #24
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}

08006afe <UART_Start_Receive_IT>:
 8006afe:	b480      	push	{r7}
 8006b00:	b085      	sub	sp, #20
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	60f8      	str	r0, [r7, #12]
 8006b06:	60b9      	str	r1, [r7, #8]
 8006b08:	4613      	mov	r3, r2
 8006b0a:	80fb      	strh	r3, [r7, #6]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	68ba      	ldr	r2, [r7, #8]
 8006b10:	629a      	str	r2, [r3, #40]	@ 0x28
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	88fa      	ldrh	r2, [r7, #6]
 8006b16:	859a      	strh	r2, [r3, #44]	@ 0x2c
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	88fa      	ldrh	r2, [r7, #6]
 8006b1c:	85da      	strh	r2, [r3, #46]	@ 0x2e
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2200      	movs	r2, #0
 8006b22:	645a      	str	r2, [r3, #68]	@ 0x44
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2222      	movs	r2, #34	@ 0x22
 8006b28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	691b      	ldr	r3, [r3, #16]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d007      	beq.n	8006b44 <UART_Start_Receive_IT+0x46>
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68da      	ldr	r2, [r3, #12]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006b42:	60da      	str	r2, [r3, #12]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	695a      	ldr	r2, [r3, #20]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f042 0201 	orr.w	r2, r2, #1
 8006b52:	615a      	str	r2, [r3, #20]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	68da      	ldr	r2, [r3, #12]
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f042 0220 	orr.w	r2, r2, #32
 8006b62:	60da      	str	r2, [r3, #12]
 8006b64:	2300      	movs	r3, #0
 8006b66:	4618      	mov	r0, r3
 8006b68:	3714      	adds	r7, #20
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr

08006b72 <UART_EndRxTransfer>:
 8006b72:	b480      	push	{r7}
 8006b74:	b095      	sub	sp, #84	@ 0x54
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	330c      	adds	r3, #12
 8006b80:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b84:	e853 3f00 	ldrex	r3, [r3]
 8006b88:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b90:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	330c      	adds	r3, #12
 8006b98:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006b9a:	643a      	str	r2, [r7, #64]	@ 0x40
 8006b9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b9e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006ba0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006ba2:	e841 2300 	strex	r3, r2, [r1]
 8006ba6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d1e5      	bne.n	8006b7a <UART_EndRxTransfer+0x8>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	3314      	adds	r3, #20
 8006bb4:	623b      	str	r3, [r7, #32]
 8006bb6:	6a3b      	ldr	r3, [r7, #32]
 8006bb8:	e853 3f00 	ldrex	r3, [r3]
 8006bbc:	61fb      	str	r3, [r7, #28]
 8006bbe:	69fb      	ldr	r3, [r7, #28]
 8006bc0:	f023 0301 	bic.w	r3, r3, #1
 8006bc4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	3314      	adds	r3, #20
 8006bcc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006bce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006bd2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006bd4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006bd6:	e841 2300 	strex	r3, r2, [r1]
 8006bda:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d1e5      	bne.n	8006bae <UART_EndRxTransfer+0x3c>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d119      	bne.n	8006c1e <UART_EndRxTransfer+0xac>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	330c      	adds	r3, #12
 8006bf0:	60fb      	str	r3, [r7, #12]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	e853 3f00 	ldrex	r3, [r3]
 8006bf8:	60bb      	str	r3, [r7, #8]
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	f023 0310 	bic.w	r3, r3, #16
 8006c00:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	330c      	adds	r3, #12
 8006c08:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c0a:	61ba      	str	r2, [r7, #24]
 8006c0c:	617b      	str	r3, [r7, #20]
 8006c0e:	6979      	ldr	r1, [r7, #20]
 8006c10:	69ba      	ldr	r2, [r7, #24]
 8006c12:	e841 2300 	strex	r3, r2, [r1]
 8006c16:	613b      	str	r3, [r7, #16]
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d1e5      	bne.n	8006bea <UART_EndRxTransfer+0x78>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2220      	movs	r2, #32
 8006c22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	631a      	str	r2, [r3, #48]	@ 0x30
 8006c2c:	bf00      	nop
 8006c2e:	3754      	adds	r7, #84	@ 0x54
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <UART_DMAAbortOnError>:
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c44:	60fb      	str	r3, [r7, #12]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	85da      	strh	r2, [r3, #46]	@ 0x2e
 8006c4c:	68f8      	ldr	r0, [r7, #12]
 8006c4e:	f7ff fee7 	bl	8006a20 <HAL_UART_ErrorCallback>
 8006c52:	bf00      	nop
 8006c54:	3710      	adds	r7, #16
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}

08006c5a <UART_Transmit_IT>:
 8006c5a:	b480      	push	{r7}
 8006c5c:	b085      	sub	sp, #20
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	2b21      	cmp	r3, #33	@ 0x21
 8006c6c:	d13e      	bne.n	8006cec <UART_Transmit_IT+0x92>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c76:	d114      	bne.n	8006ca2 <UART_Transmit_IT+0x48>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	691b      	ldr	r3, [r3, #16]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d110      	bne.n	8006ca2 <UART_Transmit_IT+0x48>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6a1b      	ldr	r3, [r3, #32]
 8006c84:	60fb      	str	r3, [r7, #12]
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	881b      	ldrh	r3, [r3, #0]
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c94:	605a      	str	r2, [r3, #4]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a1b      	ldr	r3, [r3, #32]
 8006c9a:	1c9a      	adds	r2, r3, #2
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	621a      	str	r2, [r3, #32]
 8006ca0:	e008      	b.n	8006cb4 <UART_Transmit_IT+0x5a>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a1b      	ldr	r3, [r3, #32]
 8006ca6:	1c59      	adds	r1, r3, #1
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	6211      	str	r1, [r2, #32]
 8006cac:	781a      	ldrb	r2, [r3, #0]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	605a      	str	r2, [r3, #4]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	3b01      	subs	r3, #1
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d10f      	bne.n	8006ce8 <UART_Transmit_IT+0x8e>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	68da      	ldr	r2, [r3, #12]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006cd6:	60da      	str	r2, [r3, #12]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	68da      	ldr	r2, [r3, #12]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ce6:	60da      	str	r2, [r3, #12]
 8006ce8:	2300      	movs	r3, #0
 8006cea:	e000      	b.n	8006cee <UART_Transmit_IT+0x94>
 8006cec:	2302      	movs	r3, #2
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3714      	adds	r7, #20
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr

08006cfa <UART_EndTransmit_IT>:
 8006cfa:	b580      	push	{r7, lr}
 8006cfc:	b082      	sub	sp, #8
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	68da      	ldr	r2, [r3, #12]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d10:	60da      	str	r2, [r3, #12]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2220      	movs	r2, #32
 8006d16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f002 f944 	bl	8008fa8 <HAL_UART_TxCpltCallback>
 8006d20:	2300      	movs	r3, #0
 8006d22:	4618      	mov	r0, r3
 8006d24:	3708      	adds	r7, #8
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}

08006d2a <UART_Receive_IT>:
 8006d2a:	b580      	push	{r7, lr}
 8006d2c:	b08c      	sub	sp, #48	@ 0x30
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
 8006d32:	2300      	movs	r3, #0
 8006d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d36:	2300      	movs	r3, #0
 8006d38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	2b22      	cmp	r3, #34	@ 0x22
 8006d44:	f040 80aa 	bne.w	8006e9c <UART_Receive_IT+0x172>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d50:	d115      	bne.n	8006d7e <UART_Receive_IT+0x54>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	691b      	ldr	r3, [r3, #16]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d111      	bne.n	8006d7e <UART_Receive_IT+0x54>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d6c:	b29a      	uxth	r2, r3
 8006d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d70:	801a      	strh	r2, [r3, #0]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d76:	1c9a      	adds	r2, r3, #2
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	629a      	str	r2, [r3, #40]	@ 0x28
 8006d7c:	e024      	b.n	8006dc8 <UART_Receive_IT+0x9e>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d8c:	d007      	beq.n	8006d9e <UART_Receive_IT+0x74>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d10a      	bne.n	8006dac <UART_Receive_IT+0x82>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	691b      	ldr	r3, [r3, #16]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d106      	bne.n	8006dac <UART_Receive_IT+0x82>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	b2da      	uxtb	r2, r3
 8006da6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006da8:	701a      	strb	r2, [r3, #0]
 8006daa:	e008      	b.n	8006dbe <UART_Receive_IT+0x94>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006db8:	b2da      	uxtb	r2, r3
 8006dba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dbc:	701a      	strb	r2, [r3, #0]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dc2:	1c5a      	adds	r2, r3, #1
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	629a      	str	r2, [r3, #40]	@ 0x28
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	3b01      	subs	r3, #1
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d15d      	bne.n	8006e98 <UART_Receive_IT+0x16e>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	68da      	ldr	r2, [r3, #12]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f022 0220 	bic.w	r2, r2, #32
 8006dea:	60da      	str	r2, [r3, #12]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	68da      	ldr	r2, [r3, #12]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006dfa:	60da      	str	r2, [r3, #12]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	695a      	ldr	r2, [r3, #20]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f022 0201 	bic.w	r2, r2, #1
 8006e0a:	615a      	str	r2, [r3, #20]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2220      	movs	r2, #32
 8006e10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	635a      	str	r2, [r3, #52]	@ 0x34
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d135      	bne.n	8006e8e <UART_Receive_IT+0x164>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	631a      	str	r2, [r3, #48]	@ 0x30
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	330c      	adds	r3, #12
 8006e2e:	617b      	str	r3, [r7, #20]
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	e853 3f00 	ldrex	r3, [r3]
 8006e36:	613b      	str	r3, [r7, #16]
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	f023 0310 	bic.w	r3, r3, #16
 8006e3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	330c      	adds	r3, #12
 8006e46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e48:	623a      	str	r2, [r7, #32]
 8006e4a:	61fb      	str	r3, [r7, #28]
 8006e4c:	69f9      	ldr	r1, [r7, #28]
 8006e4e:	6a3a      	ldr	r2, [r7, #32]
 8006e50:	e841 2300 	strex	r3, r2, [r1]
 8006e54:	61bb      	str	r3, [r7, #24]
 8006e56:	69bb      	ldr	r3, [r7, #24]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d1e5      	bne.n	8006e28 <UART_Receive_IT+0xfe>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f003 0310 	and.w	r3, r3, #16
 8006e66:	2b10      	cmp	r3, #16
 8006e68:	d10a      	bne.n	8006e80 <UART_Receive_IT+0x156>
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	60fb      	str	r3, [r7, #12]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	60fb      	str	r3, [r7, #12]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	60fb      	str	r3, [r7, #12]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006e84:	4619      	mov	r1, r3
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f7ff fdd4 	bl	8006a34 <HAL_UARTEx_RxEventCallback>
 8006e8c:	e002      	b.n	8006e94 <UART_Receive_IT+0x16a>
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f002 f9ce 	bl	8009230 <HAL_UART_RxCpltCallback>
 8006e94:	2300      	movs	r3, #0
 8006e96:	e002      	b.n	8006e9e <UART_Receive_IT+0x174>
 8006e98:	2300      	movs	r3, #0
 8006e9a:	e000      	b.n	8006e9e <UART_Receive_IT+0x174>
 8006e9c:	2302      	movs	r3, #2
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3730      	adds	r7, #48	@ 0x30
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
	...

08006ea8 <UART_SetConfig>:
 8006ea8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006eac:	b0c0      	sub	sp, #256	@ 0x100
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
 8006eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	691b      	ldr	r3, [r3, #16]
 8006ebc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ec4:	68d9      	ldr	r1, [r3, #12]
 8006ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	ea40 0301 	orr.w	r3, r0, r1
 8006ed0:	6113      	str	r3, [r2, #16]
 8006ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ed6:	689a      	ldr	r2, [r3, #8]
 8006ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006edc:	691b      	ldr	r3, [r3, #16]
 8006ede:	431a      	orrs	r2, r3
 8006ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ee4:	695b      	ldr	r3, [r3, #20]
 8006ee6:	431a      	orrs	r2, r3
 8006ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006eec:	69db      	ldr	r3, [r3, #28]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006f00:	f021 010c 	bic.w	r1, r1, #12
 8006f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006f0e:	430b      	orrs	r3, r1
 8006f10:	60d3      	str	r3, [r2, #12]
 8006f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	695b      	ldr	r3, [r3, #20]
 8006f1a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f22:	6999      	ldr	r1, [r3, #24]
 8006f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	ea40 0301 	orr.w	r3, r0, r1
 8006f2e:	6153      	str	r3, [r2, #20]
 8006f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	4b8f      	ldr	r3, [pc, #572]	@ (8007174 <UART_SetConfig+0x2cc>)
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d005      	beq.n	8006f48 <UART_SetConfig+0xa0>
 8006f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	4b8d      	ldr	r3, [pc, #564]	@ (8007178 <UART_SetConfig+0x2d0>)
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d104      	bne.n	8006f52 <UART_SetConfig+0xaa>
 8006f48:	f7fe fc4c 	bl	80057e4 <HAL_RCC_GetPCLK2Freq>
 8006f4c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006f50:	e003      	b.n	8006f5a <UART_SetConfig+0xb2>
 8006f52:	f7fe fc33 	bl	80057bc <HAL_RCC_GetPCLK1Freq>
 8006f56:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f5e:	69db      	ldr	r3, [r3, #28]
 8006f60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f64:	f040 810c 	bne.w	8007180 <UART_SetConfig+0x2d8>
 8006f68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006f72:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006f76:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006f7a:	4622      	mov	r2, r4
 8006f7c:	462b      	mov	r3, r5
 8006f7e:	1891      	adds	r1, r2, r2
 8006f80:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006f82:	415b      	adcs	r3, r3
 8006f84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f86:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006f8a:	4621      	mov	r1, r4
 8006f8c:	eb12 0801 	adds.w	r8, r2, r1
 8006f90:	4629      	mov	r1, r5
 8006f92:	eb43 0901 	adc.w	r9, r3, r1
 8006f96:	f04f 0200 	mov.w	r2, #0
 8006f9a:	f04f 0300 	mov.w	r3, #0
 8006f9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006fa2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006fa6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006faa:	4690      	mov	r8, r2
 8006fac:	4699      	mov	r9, r3
 8006fae:	4623      	mov	r3, r4
 8006fb0:	eb18 0303 	adds.w	r3, r8, r3
 8006fb4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006fb8:	462b      	mov	r3, r5
 8006fba:	eb49 0303 	adc.w	r3, r9, r3
 8006fbe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006fce:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006fd2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006fd6:	460b      	mov	r3, r1
 8006fd8:	18db      	adds	r3, r3, r3
 8006fda:	653b      	str	r3, [r7, #80]	@ 0x50
 8006fdc:	4613      	mov	r3, r2
 8006fde:	eb42 0303 	adc.w	r3, r2, r3
 8006fe2:	657b      	str	r3, [r7, #84]	@ 0x54
 8006fe4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006fe8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006fec:	f7f9 f940 	bl	8000270 <__aeabi_uldivmod>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	460b      	mov	r3, r1
 8006ff4:	4b61      	ldr	r3, [pc, #388]	@ (800717c <UART_SetConfig+0x2d4>)
 8006ff6:	fba3 2302 	umull	r2, r3, r3, r2
 8006ffa:	095b      	lsrs	r3, r3, #5
 8006ffc:	011c      	lsls	r4, r3, #4
 8006ffe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007002:	2200      	movs	r2, #0
 8007004:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007008:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800700c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007010:	4642      	mov	r2, r8
 8007012:	464b      	mov	r3, r9
 8007014:	1891      	adds	r1, r2, r2
 8007016:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007018:	415b      	adcs	r3, r3
 800701a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800701c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007020:	4641      	mov	r1, r8
 8007022:	eb12 0a01 	adds.w	sl, r2, r1
 8007026:	4649      	mov	r1, r9
 8007028:	eb43 0b01 	adc.w	fp, r3, r1
 800702c:	f04f 0200 	mov.w	r2, #0
 8007030:	f04f 0300 	mov.w	r3, #0
 8007034:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007038:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800703c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007040:	4692      	mov	sl, r2
 8007042:	469b      	mov	fp, r3
 8007044:	4643      	mov	r3, r8
 8007046:	eb1a 0303 	adds.w	r3, sl, r3
 800704a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800704e:	464b      	mov	r3, r9
 8007050:	eb4b 0303 	adc.w	r3, fp, r3
 8007054:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	2200      	movs	r2, #0
 8007060:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007064:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007068:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800706c:	460b      	mov	r3, r1
 800706e:	18db      	adds	r3, r3, r3
 8007070:	643b      	str	r3, [r7, #64]	@ 0x40
 8007072:	4613      	mov	r3, r2
 8007074:	eb42 0303 	adc.w	r3, r2, r3
 8007078:	647b      	str	r3, [r7, #68]	@ 0x44
 800707a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800707e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007082:	f7f9 f8f5 	bl	8000270 <__aeabi_uldivmod>
 8007086:	4602      	mov	r2, r0
 8007088:	460b      	mov	r3, r1
 800708a:	4611      	mov	r1, r2
 800708c:	4b3b      	ldr	r3, [pc, #236]	@ (800717c <UART_SetConfig+0x2d4>)
 800708e:	fba3 2301 	umull	r2, r3, r3, r1
 8007092:	095b      	lsrs	r3, r3, #5
 8007094:	2264      	movs	r2, #100	@ 0x64
 8007096:	fb02 f303 	mul.w	r3, r2, r3
 800709a:	1acb      	subs	r3, r1, r3
 800709c:	00db      	lsls	r3, r3, #3
 800709e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80070a2:	4b36      	ldr	r3, [pc, #216]	@ (800717c <UART_SetConfig+0x2d4>)
 80070a4:	fba3 2302 	umull	r2, r3, r3, r2
 80070a8:	095b      	lsrs	r3, r3, #5
 80070aa:	005b      	lsls	r3, r3, #1
 80070ac:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80070b0:	441c      	add	r4, r3
 80070b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070b6:	2200      	movs	r2, #0
 80070b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80070bc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80070c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80070c4:	4642      	mov	r2, r8
 80070c6:	464b      	mov	r3, r9
 80070c8:	1891      	adds	r1, r2, r2
 80070ca:	63b9      	str	r1, [r7, #56]	@ 0x38
 80070cc:	415b      	adcs	r3, r3
 80070ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80070d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80070d4:	4641      	mov	r1, r8
 80070d6:	1851      	adds	r1, r2, r1
 80070d8:	6339      	str	r1, [r7, #48]	@ 0x30
 80070da:	4649      	mov	r1, r9
 80070dc:	414b      	adcs	r3, r1
 80070de:	637b      	str	r3, [r7, #52]	@ 0x34
 80070e0:	f04f 0200 	mov.w	r2, #0
 80070e4:	f04f 0300 	mov.w	r3, #0
 80070e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80070ec:	4659      	mov	r1, fp
 80070ee:	00cb      	lsls	r3, r1, #3
 80070f0:	4651      	mov	r1, sl
 80070f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070f6:	4651      	mov	r1, sl
 80070f8:	00ca      	lsls	r2, r1, #3
 80070fa:	4610      	mov	r0, r2
 80070fc:	4619      	mov	r1, r3
 80070fe:	4603      	mov	r3, r0
 8007100:	4642      	mov	r2, r8
 8007102:	189b      	adds	r3, r3, r2
 8007104:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007108:	464b      	mov	r3, r9
 800710a:	460a      	mov	r2, r1
 800710c:	eb42 0303 	adc.w	r3, r2, r3
 8007110:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007120:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007124:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007128:	460b      	mov	r3, r1
 800712a:	18db      	adds	r3, r3, r3
 800712c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800712e:	4613      	mov	r3, r2
 8007130:	eb42 0303 	adc.w	r3, r2, r3
 8007134:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007136:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800713a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800713e:	f7f9 f897 	bl	8000270 <__aeabi_uldivmod>
 8007142:	4602      	mov	r2, r0
 8007144:	460b      	mov	r3, r1
 8007146:	4b0d      	ldr	r3, [pc, #52]	@ (800717c <UART_SetConfig+0x2d4>)
 8007148:	fba3 1302 	umull	r1, r3, r3, r2
 800714c:	095b      	lsrs	r3, r3, #5
 800714e:	2164      	movs	r1, #100	@ 0x64
 8007150:	fb01 f303 	mul.w	r3, r1, r3
 8007154:	1ad3      	subs	r3, r2, r3
 8007156:	00db      	lsls	r3, r3, #3
 8007158:	3332      	adds	r3, #50	@ 0x32
 800715a:	4a08      	ldr	r2, [pc, #32]	@ (800717c <UART_SetConfig+0x2d4>)
 800715c:	fba2 2303 	umull	r2, r3, r2, r3
 8007160:	095b      	lsrs	r3, r3, #5
 8007162:	f003 0207 	and.w	r2, r3, #7
 8007166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4422      	add	r2, r4
 800716e:	609a      	str	r2, [r3, #8]
 8007170:	e106      	b.n	8007380 <UART_SetConfig+0x4d8>
 8007172:	bf00      	nop
 8007174:	40011000 	.word	0x40011000
 8007178:	40011400 	.word	0x40011400
 800717c:	51eb851f 	.word	0x51eb851f
 8007180:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007184:	2200      	movs	r2, #0
 8007186:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800718a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800718e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007192:	4642      	mov	r2, r8
 8007194:	464b      	mov	r3, r9
 8007196:	1891      	adds	r1, r2, r2
 8007198:	6239      	str	r1, [r7, #32]
 800719a:	415b      	adcs	r3, r3
 800719c:	627b      	str	r3, [r7, #36]	@ 0x24
 800719e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80071a2:	4641      	mov	r1, r8
 80071a4:	1854      	adds	r4, r2, r1
 80071a6:	4649      	mov	r1, r9
 80071a8:	eb43 0501 	adc.w	r5, r3, r1
 80071ac:	f04f 0200 	mov.w	r2, #0
 80071b0:	f04f 0300 	mov.w	r3, #0
 80071b4:	00eb      	lsls	r3, r5, #3
 80071b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80071ba:	00e2      	lsls	r2, r4, #3
 80071bc:	4614      	mov	r4, r2
 80071be:	461d      	mov	r5, r3
 80071c0:	4643      	mov	r3, r8
 80071c2:	18e3      	adds	r3, r4, r3
 80071c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80071c8:	464b      	mov	r3, r9
 80071ca:	eb45 0303 	adc.w	r3, r5, r3
 80071ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80071d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	2200      	movs	r2, #0
 80071da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80071de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80071e2:	f04f 0200 	mov.w	r2, #0
 80071e6:	f04f 0300 	mov.w	r3, #0
 80071ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80071ee:	4629      	mov	r1, r5
 80071f0:	008b      	lsls	r3, r1, #2
 80071f2:	4621      	mov	r1, r4
 80071f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071f8:	4621      	mov	r1, r4
 80071fa:	008a      	lsls	r2, r1, #2
 80071fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007200:	f7f9 f836 	bl	8000270 <__aeabi_uldivmod>
 8007204:	4602      	mov	r2, r0
 8007206:	460b      	mov	r3, r1
 8007208:	4b60      	ldr	r3, [pc, #384]	@ (800738c <UART_SetConfig+0x4e4>)
 800720a:	fba3 2302 	umull	r2, r3, r3, r2
 800720e:	095b      	lsrs	r3, r3, #5
 8007210:	011c      	lsls	r4, r3, #4
 8007212:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007216:	2200      	movs	r2, #0
 8007218:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800721c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007220:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007224:	4642      	mov	r2, r8
 8007226:	464b      	mov	r3, r9
 8007228:	1891      	adds	r1, r2, r2
 800722a:	61b9      	str	r1, [r7, #24]
 800722c:	415b      	adcs	r3, r3
 800722e:	61fb      	str	r3, [r7, #28]
 8007230:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007234:	4641      	mov	r1, r8
 8007236:	1851      	adds	r1, r2, r1
 8007238:	6139      	str	r1, [r7, #16]
 800723a:	4649      	mov	r1, r9
 800723c:	414b      	adcs	r3, r1
 800723e:	617b      	str	r3, [r7, #20]
 8007240:	f04f 0200 	mov.w	r2, #0
 8007244:	f04f 0300 	mov.w	r3, #0
 8007248:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800724c:	4659      	mov	r1, fp
 800724e:	00cb      	lsls	r3, r1, #3
 8007250:	4651      	mov	r1, sl
 8007252:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007256:	4651      	mov	r1, sl
 8007258:	00ca      	lsls	r2, r1, #3
 800725a:	4610      	mov	r0, r2
 800725c:	4619      	mov	r1, r3
 800725e:	4603      	mov	r3, r0
 8007260:	4642      	mov	r2, r8
 8007262:	189b      	adds	r3, r3, r2
 8007264:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007268:	464b      	mov	r3, r9
 800726a:	460a      	mov	r2, r1
 800726c:	eb42 0303 	adc.w	r3, r2, r3
 8007270:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800727e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007280:	f04f 0200 	mov.w	r2, #0
 8007284:	f04f 0300 	mov.w	r3, #0
 8007288:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800728c:	4649      	mov	r1, r9
 800728e:	008b      	lsls	r3, r1, #2
 8007290:	4641      	mov	r1, r8
 8007292:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007296:	4641      	mov	r1, r8
 8007298:	008a      	lsls	r2, r1, #2
 800729a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800729e:	f7f8 ffe7 	bl	8000270 <__aeabi_uldivmod>
 80072a2:	4602      	mov	r2, r0
 80072a4:	460b      	mov	r3, r1
 80072a6:	4611      	mov	r1, r2
 80072a8:	4b38      	ldr	r3, [pc, #224]	@ (800738c <UART_SetConfig+0x4e4>)
 80072aa:	fba3 2301 	umull	r2, r3, r3, r1
 80072ae:	095b      	lsrs	r3, r3, #5
 80072b0:	2264      	movs	r2, #100	@ 0x64
 80072b2:	fb02 f303 	mul.w	r3, r2, r3
 80072b6:	1acb      	subs	r3, r1, r3
 80072b8:	011b      	lsls	r3, r3, #4
 80072ba:	3332      	adds	r3, #50	@ 0x32
 80072bc:	4a33      	ldr	r2, [pc, #204]	@ (800738c <UART_SetConfig+0x4e4>)
 80072be:	fba2 2303 	umull	r2, r3, r2, r3
 80072c2:	095b      	lsrs	r3, r3, #5
 80072c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80072c8:	441c      	add	r4, r3
 80072ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072ce:	2200      	movs	r2, #0
 80072d0:	673b      	str	r3, [r7, #112]	@ 0x70
 80072d2:	677a      	str	r2, [r7, #116]	@ 0x74
 80072d4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80072d8:	4642      	mov	r2, r8
 80072da:	464b      	mov	r3, r9
 80072dc:	1891      	adds	r1, r2, r2
 80072de:	60b9      	str	r1, [r7, #8]
 80072e0:	415b      	adcs	r3, r3
 80072e2:	60fb      	str	r3, [r7, #12]
 80072e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80072e8:	4641      	mov	r1, r8
 80072ea:	1851      	adds	r1, r2, r1
 80072ec:	6039      	str	r1, [r7, #0]
 80072ee:	4649      	mov	r1, r9
 80072f0:	414b      	adcs	r3, r1
 80072f2:	607b      	str	r3, [r7, #4]
 80072f4:	f04f 0200 	mov.w	r2, #0
 80072f8:	f04f 0300 	mov.w	r3, #0
 80072fc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007300:	4659      	mov	r1, fp
 8007302:	00cb      	lsls	r3, r1, #3
 8007304:	4651      	mov	r1, sl
 8007306:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800730a:	4651      	mov	r1, sl
 800730c:	00ca      	lsls	r2, r1, #3
 800730e:	4610      	mov	r0, r2
 8007310:	4619      	mov	r1, r3
 8007312:	4603      	mov	r3, r0
 8007314:	4642      	mov	r2, r8
 8007316:	189b      	adds	r3, r3, r2
 8007318:	66bb      	str	r3, [r7, #104]	@ 0x68
 800731a:	464b      	mov	r3, r9
 800731c:	460a      	mov	r2, r1
 800731e:	eb42 0303 	adc.w	r3, r2, r3
 8007322:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	2200      	movs	r2, #0
 800732c:	663b      	str	r3, [r7, #96]	@ 0x60
 800732e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007330:	f04f 0200 	mov.w	r2, #0
 8007334:	f04f 0300 	mov.w	r3, #0
 8007338:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800733c:	4649      	mov	r1, r9
 800733e:	008b      	lsls	r3, r1, #2
 8007340:	4641      	mov	r1, r8
 8007342:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007346:	4641      	mov	r1, r8
 8007348:	008a      	lsls	r2, r1, #2
 800734a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800734e:	f7f8 ff8f 	bl	8000270 <__aeabi_uldivmod>
 8007352:	4602      	mov	r2, r0
 8007354:	460b      	mov	r3, r1
 8007356:	4b0d      	ldr	r3, [pc, #52]	@ (800738c <UART_SetConfig+0x4e4>)
 8007358:	fba3 1302 	umull	r1, r3, r3, r2
 800735c:	095b      	lsrs	r3, r3, #5
 800735e:	2164      	movs	r1, #100	@ 0x64
 8007360:	fb01 f303 	mul.w	r3, r1, r3
 8007364:	1ad3      	subs	r3, r2, r3
 8007366:	011b      	lsls	r3, r3, #4
 8007368:	3332      	adds	r3, #50	@ 0x32
 800736a:	4a08      	ldr	r2, [pc, #32]	@ (800738c <UART_SetConfig+0x4e4>)
 800736c:	fba2 2303 	umull	r2, r3, r2, r3
 8007370:	095b      	lsrs	r3, r3, #5
 8007372:	f003 020f 	and.w	r2, r3, #15
 8007376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4422      	add	r2, r4
 800737e:	609a      	str	r2, [r3, #8]
 8007380:	bf00      	nop
 8007382:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007386:	46bd      	mov	sp, r7
 8007388:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800738c:	51eb851f 	.word	0x51eb851f

08007390 <USB_CoreInit>:
 8007390:	b084      	sub	sp, #16
 8007392:	b580      	push	{r7, lr}
 8007394:	b084      	sub	sp, #16
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
 800739a:	f107 001c 	add.w	r0, r7, #28
 800739e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80073a2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d123      	bne.n	80073f2 <USB_CoreInit+0x62>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073ae:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	639a      	str	r2, [r3, #56]	@ 0x38
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80073be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	60d3      	str	r3, [r2, #12]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	68db      	ldr	r3, [r3, #12]
 80073ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	60da      	str	r2, [r3, #12]
 80073d2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d105      	bne.n	80073e6 <USB_CoreInit+0x56>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	68db      	ldr	r3, [r3, #12]
 80073de:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	60da      	str	r2, [r3, #12]
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f001 fae8 	bl	80089bc <USB_CoreReset>
 80073ec:	4603      	mov	r3, r0
 80073ee:	73fb      	strb	r3, [r7, #15]
 80073f0:	e01b      	b.n	800742a <USB_CoreInit+0x9a>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	60da      	str	r2, [r3, #12]
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f001 fadc 	bl	80089bc <USB_CoreReset>
 8007404:	4603      	mov	r3, r0
 8007406:	73fb      	strb	r3, [r7, #15]
 8007408:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800740c:	2b00      	cmp	r3, #0
 800740e:	d106      	bne.n	800741e <USB_CoreInit+0x8e>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007414:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	639a      	str	r2, [r3, #56]	@ 0x38
 800741c:	e005      	b.n	800742a <USB_CoreInit+0x9a>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007422:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	639a      	str	r2, [r3, #56]	@ 0x38
 800742a:	7fbb      	ldrb	r3, [r7, #30]
 800742c:	2b01      	cmp	r3, #1
 800742e:	d10b      	bne.n	8007448 <USB_CoreInit+0xb8>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	f043 0206 	orr.w	r2, r3, #6
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	609a      	str	r2, [r3, #8]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	f043 0220 	orr.w	r2, r3, #32
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	609a      	str	r2, [r3, #8]
 8007448:	7bfb      	ldrb	r3, [r7, #15]
 800744a:	4618      	mov	r0, r3
 800744c:	3710      	adds	r7, #16
 800744e:	46bd      	mov	sp, r7
 8007450:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007454:	b004      	add	sp, #16
 8007456:	4770      	bx	lr

08007458 <USB_SetTurnaroundTime>:
 8007458:	b480      	push	{r7}
 800745a:	b087      	sub	sp, #28
 800745c:	af00      	add	r7, sp, #0
 800745e:	60f8      	str	r0, [r7, #12]
 8007460:	60b9      	str	r1, [r7, #8]
 8007462:	4613      	mov	r3, r2
 8007464:	71fb      	strb	r3, [r7, #7]
 8007466:	79fb      	ldrb	r3, [r7, #7]
 8007468:	2b02      	cmp	r3, #2
 800746a:	d165      	bne.n	8007538 <USB_SetTurnaroundTime+0xe0>
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	4a41      	ldr	r2, [pc, #260]	@ (8007574 <USB_SetTurnaroundTime+0x11c>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d906      	bls.n	8007482 <USB_SetTurnaroundTime+0x2a>
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	4a40      	ldr	r2, [pc, #256]	@ (8007578 <USB_SetTurnaroundTime+0x120>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d202      	bcs.n	8007482 <USB_SetTurnaroundTime+0x2a>
 800747c:	230f      	movs	r3, #15
 800747e:	617b      	str	r3, [r7, #20]
 8007480:	e062      	b.n	8007548 <USB_SetTurnaroundTime+0xf0>
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	4a3c      	ldr	r2, [pc, #240]	@ (8007578 <USB_SetTurnaroundTime+0x120>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d306      	bcc.n	8007498 <USB_SetTurnaroundTime+0x40>
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	4a3b      	ldr	r2, [pc, #236]	@ (800757c <USB_SetTurnaroundTime+0x124>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d202      	bcs.n	8007498 <USB_SetTurnaroundTime+0x40>
 8007492:	230e      	movs	r3, #14
 8007494:	617b      	str	r3, [r7, #20]
 8007496:	e057      	b.n	8007548 <USB_SetTurnaroundTime+0xf0>
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	4a38      	ldr	r2, [pc, #224]	@ (800757c <USB_SetTurnaroundTime+0x124>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d306      	bcc.n	80074ae <USB_SetTurnaroundTime+0x56>
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	4a37      	ldr	r2, [pc, #220]	@ (8007580 <USB_SetTurnaroundTime+0x128>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d202      	bcs.n	80074ae <USB_SetTurnaroundTime+0x56>
 80074a8:	230d      	movs	r3, #13
 80074aa:	617b      	str	r3, [r7, #20]
 80074ac:	e04c      	b.n	8007548 <USB_SetTurnaroundTime+0xf0>
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	4a33      	ldr	r2, [pc, #204]	@ (8007580 <USB_SetTurnaroundTime+0x128>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d306      	bcc.n	80074c4 <USB_SetTurnaroundTime+0x6c>
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	4a32      	ldr	r2, [pc, #200]	@ (8007584 <USB_SetTurnaroundTime+0x12c>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d802      	bhi.n	80074c4 <USB_SetTurnaroundTime+0x6c>
 80074be:	230c      	movs	r3, #12
 80074c0:	617b      	str	r3, [r7, #20]
 80074c2:	e041      	b.n	8007548 <USB_SetTurnaroundTime+0xf0>
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	4a2f      	ldr	r2, [pc, #188]	@ (8007584 <USB_SetTurnaroundTime+0x12c>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d906      	bls.n	80074da <USB_SetTurnaroundTime+0x82>
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	4a2e      	ldr	r2, [pc, #184]	@ (8007588 <USB_SetTurnaroundTime+0x130>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d802      	bhi.n	80074da <USB_SetTurnaroundTime+0x82>
 80074d4:	230b      	movs	r3, #11
 80074d6:	617b      	str	r3, [r7, #20]
 80074d8:	e036      	b.n	8007548 <USB_SetTurnaroundTime+0xf0>
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	4a2a      	ldr	r2, [pc, #168]	@ (8007588 <USB_SetTurnaroundTime+0x130>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d906      	bls.n	80074f0 <USB_SetTurnaroundTime+0x98>
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	4a29      	ldr	r2, [pc, #164]	@ (800758c <USB_SetTurnaroundTime+0x134>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d802      	bhi.n	80074f0 <USB_SetTurnaroundTime+0x98>
 80074ea:	230a      	movs	r3, #10
 80074ec:	617b      	str	r3, [r7, #20]
 80074ee:	e02b      	b.n	8007548 <USB_SetTurnaroundTime+0xf0>
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	4a26      	ldr	r2, [pc, #152]	@ (800758c <USB_SetTurnaroundTime+0x134>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d906      	bls.n	8007506 <USB_SetTurnaroundTime+0xae>
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	4a25      	ldr	r2, [pc, #148]	@ (8007590 <USB_SetTurnaroundTime+0x138>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d202      	bcs.n	8007506 <USB_SetTurnaroundTime+0xae>
 8007500:	2309      	movs	r3, #9
 8007502:	617b      	str	r3, [r7, #20]
 8007504:	e020      	b.n	8007548 <USB_SetTurnaroundTime+0xf0>
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	4a21      	ldr	r2, [pc, #132]	@ (8007590 <USB_SetTurnaroundTime+0x138>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d306      	bcc.n	800751c <USB_SetTurnaroundTime+0xc4>
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	4a20      	ldr	r2, [pc, #128]	@ (8007594 <USB_SetTurnaroundTime+0x13c>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d802      	bhi.n	800751c <USB_SetTurnaroundTime+0xc4>
 8007516:	2308      	movs	r3, #8
 8007518:	617b      	str	r3, [r7, #20]
 800751a:	e015      	b.n	8007548 <USB_SetTurnaroundTime+0xf0>
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	4a1d      	ldr	r2, [pc, #116]	@ (8007594 <USB_SetTurnaroundTime+0x13c>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d906      	bls.n	8007532 <USB_SetTurnaroundTime+0xda>
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	4a1c      	ldr	r2, [pc, #112]	@ (8007598 <USB_SetTurnaroundTime+0x140>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d202      	bcs.n	8007532 <USB_SetTurnaroundTime+0xda>
 800752c:	2307      	movs	r3, #7
 800752e:	617b      	str	r3, [r7, #20]
 8007530:	e00a      	b.n	8007548 <USB_SetTurnaroundTime+0xf0>
 8007532:	2306      	movs	r3, #6
 8007534:	617b      	str	r3, [r7, #20]
 8007536:	e007      	b.n	8007548 <USB_SetTurnaroundTime+0xf0>
 8007538:	79fb      	ldrb	r3, [r7, #7]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d102      	bne.n	8007544 <USB_SetTurnaroundTime+0xec>
 800753e:	2309      	movs	r3, #9
 8007540:	617b      	str	r3, [r7, #20]
 8007542:	e001      	b.n	8007548 <USB_SetTurnaroundTime+0xf0>
 8007544:	2309      	movs	r3, #9
 8007546:	617b      	str	r3, [r7, #20]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	68db      	ldr	r3, [r3, #12]
 800754c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	60da      	str	r2, [r3, #12]
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	68da      	ldr	r2, [r3, #12]
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	029b      	lsls	r3, r3, #10
 800755c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007560:	431a      	orrs	r2, r3
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	60da      	str	r2, [r3, #12]
 8007566:	2300      	movs	r3, #0
 8007568:	4618      	mov	r0, r3
 800756a:	371c      	adds	r7, #28
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr
 8007574:	00d8acbf 	.word	0x00d8acbf
 8007578:	00e4e1c0 	.word	0x00e4e1c0
 800757c:	00f42400 	.word	0x00f42400
 8007580:	01067380 	.word	0x01067380
 8007584:	011a499f 	.word	0x011a499f
 8007588:	01312cff 	.word	0x01312cff
 800758c:	014ca43f 	.word	0x014ca43f
 8007590:	016e3600 	.word	0x016e3600
 8007594:	01a6ab1f 	.word	0x01a6ab1f
 8007598:	01e84800 	.word	0x01e84800

0800759c <USB_EnableGlobalInt>:
 800759c:	b480      	push	{r7}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	689b      	ldr	r3, [r3, #8]
 80075a8:	f043 0201 	orr.w	r2, r3, #1
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	609a      	str	r2, [r3, #8]
 80075b0:	2300      	movs	r3, #0
 80075b2:	4618      	mov	r0, r3
 80075b4:	370c      	adds	r7, #12
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr

080075be <USB_DisableGlobalInt>:
 80075be:	b480      	push	{r7}
 80075c0:	b083      	sub	sp, #12
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	f023 0201 	bic.w	r2, r3, #1
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	609a      	str	r2, [r3, #8]
 80075d2:	2300      	movs	r3, #0
 80075d4:	4618      	mov	r0, r3
 80075d6:	370c      	adds	r7, #12
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr

080075e0 <USB_SetCurrentMode>:
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	460b      	mov	r3, r1
 80075ea:	70fb      	strb	r3, [r7, #3]
 80075ec:	2300      	movs	r3, #0
 80075ee:	60fb      	str	r3, [r7, #12]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	68db      	ldr	r3, [r3, #12]
 80075f4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	60da      	str	r2, [r3, #12]
 80075fc:	78fb      	ldrb	r3, [r7, #3]
 80075fe:	2b01      	cmp	r3, #1
 8007600:	d115      	bne.n	800762e <USB_SetCurrentMode+0x4e>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	68db      	ldr	r3, [r3, #12]
 8007606:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	60da      	str	r2, [r3, #12]
 800760e:	200a      	movs	r0, #10
 8007610:	f7fa f9f0 	bl	80019f4 <HAL_Delay>
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	330a      	adds	r3, #10
 8007618:	60fb      	str	r3, [r7, #12]
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f001 f93f 	bl	800889e <USB_GetMode>
 8007620:	4603      	mov	r3, r0
 8007622:	2b01      	cmp	r3, #1
 8007624:	d01e      	beq.n	8007664 <USB_SetCurrentMode+0x84>
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2bc7      	cmp	r3, #199	@ 0xc7
 800762a:	d9f0      	bls.n	800760e <USB_SetCurrentMode+0x2e>
 800762c:	e01a      	b.n	8007664 <USB_SetCurrentMode+0x84>
 800762e:	78fb      	ldrb	r3, [r7, #3]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d115      	bne.n	8007660 <USB_SetCurrentMode+0x80>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	60da      	str	r2, [r3, #12]
 8007640:	200a      	movs	r0, #10
 8007642:	f7fa f9d7 	bl	80019f4 <HAL_Delay>
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	330a      	adds	r3, #10
 800764a:	60fb      	str	r3, [r7, #12]
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f001 f926 	bl	800889e <USB_GetMode>
 8007652:	4603      	mov	r3, r0
 8007654:	2b00      	cmp	r3, #0
 8007656:	d005      	beq.n	8007664 <USB_SetCurrentMode+0x84>
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2bc7      	cmp	r3, #199	@ 0xc7
 800765c:	d9f0      	bls.n	8007640 <USB_SetCurrentMode+0x60>
 800765e:	e001      	b.n	8007664 <USB_SetCurrentMode+0x84>
 8007660:	2301      	movs	r3, #1
 8007662:	e005      	b.n	8007670 <USB_SetCurrentMode+0x90>
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2bc8      	cmp	r3, #200	@ 0xc8
 8007668:	d101      	bne.n	800766e <USB_SetCurrentMode+0x8e>
 800766a:	2301      	movs	r3, #1
 800766c:	e000      	b.n	8007670 <USB_SetCurrentMode+0x90>
 800766e:	2300      	movs	r3, #0
 8007670:	4618      	mov	r0, r3
 8007672:	3710      	adds	r7, #16
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <USB_DevInit>:
 8007678:	b084      	sub	sp, #16
 800767a:	b580      	push	{r7, lr}
 800767c:	b086      	sub	sp, #24
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
 8007682:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007686:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800768a:	2300      	movs	r3, #0
 800768c:	75fb      	strb	r3, [r7, #23]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	60fb      	str	r3, [r7, #12]
 8007692:	2300      	movs	r3, #0
 8007694:	613b      	str	r3, [r7, #16]
 8007696:	e009      	b.n	80076ac <USB_DevInit+0x34>
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	3340      	adds	r3, #64	@ 0x40
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	4413      	add	r3, r2
 80076a2:	2200      	movs	r2, #0
 80076a4:	605a      	str	r2, [r3, #4]
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	3301      	adds	r3, #1
 80076aa:	613b      	str	r3, [r7, #16]
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	2b0e      	cmp	r3, #14
 80076b0:	d9f2      	bls.n	8007698 <USB_DevInit+0x20>
 80076b2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d11c      	bne.n	80076f4 <USB_DevInit+0x7c>
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	68fa      	ldr	r2, [r7, #12]
 80076c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80076c8:	f043 0302 	orr.w	r3, r3, #2
 80076cc:	6053      	str	r3, [r2, #4]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076d2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	639a      	str	r2, [r3, #56]	@ 0x38
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076de:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	639a      	str	r2, [r3, #56]	@ 0x38
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076ea:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	639a      	str	r2, [r3, #56]	@ 0x38
 80076f2:	e00b      	b.n	800770c <USB_DevInit+0x94>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076f8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	639a      	str	r2, [r3, #56]	@ 0x38
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007704:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	639a      	str	r2, [r3, #56]	@ 0x38
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007712:	461a      	mov	r2, r3
 8007714:	2300      	movs	r3, #0
 8007716:	6013      	str	r3, [r2, #0]
 8007718:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800771c:	2b01      	cmp	r3, #1
 800771e:	d10d      	bne.n	800773c <USB_DevInit+0xc4>
 8007720:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007724:	2b00      	cmp	r3, #0
 8007726:	d104      	bne.n	8007732 <USB_DevInit+0xba>
 8007728:	2100      	movs	r1, #0
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 f968 	bl	8007a00 <USB_SetDevSpeed>
 8007730:	e008      	b.n	8007744 <USB_DevInit+0xcc>
 8007732:	2101      	movs	r1, #1
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 f963 	bl	8007a00 <USB_SetDevSpeed>
 800773a:	e003      	b.n	8007744 <USB_DevInit+0xcc>
 800773c:	2103      	movs	r1, #3
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 f95e 	bl	8007a00 <USB_SetDevSpeed>
 8007744:	2110      	movs	r1, #16
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 f8fa 	bl	8007940 <USB_FlushTxFifo>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d001      	beq.n	8007756 <USB_DevInit+0xde>
 8007752:	2301      	movs	r3, #1
 8007754:	75fb      	strb	r3, [r7, #23]
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 f924 	bl	80079a4 <USB_FlushRxFifo>
 800775c:	4603      	mov	r3, r0
 800775e:	2b00      	cmp	r3, #0
 8007760:	d001      	beq.n	8007766 <USB_DevInit+0xee>
 8007762:	2301      	movs	r3, #1
 8007764:	75fb      	strb	r3, [r7, #23]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800776c:	461a      	mov	r2, r3
 800776e:	2300      	movs	r3, #0
 8007770:	6113      	str	r3, [r2, #16]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007778:	461a      	mov	r2, r3
 800777a:	2300      	movs	r3, #0
 800777c:	6153      	str	r3, [r2, #20]
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007784:	461a      	mov	r2, r3
 8007786:	2300      	movs	r3, #0
 8007788:	61d3      	str	r3, [r2, #28]
 800778a:	2300      	movs	r3, #0
 800778c:	613b      	str	r3, [r7, #16]
 800778e:	e043      	b.n	8007818 <USB_DevInit+0x1a0>
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	015a      	lsls	r2, r3, #5
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	4413      	add	r3, r2
 8007798:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80077a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80077a6:	d118      	bne.n	80077da <USB_DevInit+0x162>
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d10a      	bne.n	80077c4 <USB_DevInit+0x14c>
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	015a      	lsls	r2, r3, #5
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	4413      	add	r3, r2
 80077b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077ba:	461a      	mov	r2, r3
 80077bc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80077c0:	6013      	str	r3, [r2, #0]
 80077c2:	e013      	b.n	80077ec <USB_DevInit+0x174>
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	015a      	lsls	r2, r3, #5
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	4413      	add	r3, r2
 80077cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077d0:	461a      	mov	r2, r3
 80077d2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80077d6:	6013      	str	r3, [r2, #0]
 80077d8:	e008      	b.n	80077ec <USB_DevInit+0x174>
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	015a      	lsls	r2, r3, #5
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	4413      	add	r3, r2
 80077e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077e6:	461a      	mov	r2, r3
 80077e8:	2300      	movs	r3, #0
 80077ea:	6013      	str	r3, [r2, #0]
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	015a      	lsls	r2, r3, #5
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	4413      	add	r3, r2
 80077f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077f8:	461a      	mov	r2, r3
 80077fa:	2300      	movs	r3, #0
 80077fc:	6113      	str	r3, [r2, #16]
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	015a      	lsls	r2, r3, #5
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	4413      	add	r3, r2
 8007806:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800780a:	461a      	mov	r2, r3
 800780c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007810:	6093      	str	r3, [r2, #8]
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	3301      	adds	r3, #1
 8007816:	613b      	str	r3, [r7, #16]
 8007818:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800781c:	461a      	mov	r2, r3
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	4293      	cmp	r3, r2
 8007822:	d3b5      	bcc.n	8007790 <USB_DevInit+0x118>
 8007824:	2300      	movs	r3, #0
 8007826:	613b      	str	r3, [r7, #16]
 8007828:	e043      	b.n	80078b2 <USB_DevInit+0x23a>
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	015a      	lsls	r2, r3, #5
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	4413      	add	r3, r2
 8007832:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800783c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007840:	d118      	bne.n	8007874 <USB_DevInit+0x1fc>
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d10a      	bne.n	800785e <USB_DevInit+0x1e6>
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	015a      	lsls	r2, r3, #5
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	4413      	add	r3, r2
 8007850:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007854:	461a      	mov	r2, r3
 8007856:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800785a:	6013      	str	r3, [r2, #0]
 800785c:	e013      	b.n	8007886 <USB_DevInit+0x20e>
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	015a      	lsls	r2, r3, #5
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	4413      	add	r3, r2
 8007866:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800786a:	461a      	mov	r2, r3
 800786c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007870:	6013      	str	r3, [r2, #0]
 8007872:	e008      	b.n	8007886 <USB_DevInit+0x20e>
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	015a      	lsls	r2, r3, #5
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	4413      	add	r3, r2
 800787c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007880:	461a      	mov	r2, r3
 8007882:	2300      	movs	r3, #0
 8007884:	6013      	str	r3, [r2, #0]
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	015a      	lsls	r2, r3, #5
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	4413      	add	r3, r2
 800788e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007892:	461a      	mov	r2, r3
 8007894:	2300      	movs	r3, #0
 8007896:	6113      	str	r3, [r2, #16]
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	015a      	lsls	r2, r3, #5
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	4413      	add	r3, r2
 80078a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078a4:	461a      	mov	r2, r3
 80078a6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80078aa:	6093      	str	r3, [r2, #8]
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	3301      	adds	r3, #1
 80078b0:	613b      	str	r3, [r7, #16]
 80078b2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80078b6:	461a      	mov	r2, r3
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d3b5      	bcc.n	800782a <USB_DevInit+0x1b2>
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078c4:	691b      	ldr	r3, [r3, #16]
 80078c6:	68fa      	ldr	r2, [r7, #12]
 80078c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80078cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80078d0:	6113      	str	r3, [r2, #16]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2200      	movs	r2, #0
 80078d6:	619a      	str	r2, [r3, #24]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80078de:	615a      	str	r2, [r3, #20]
 80078e0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d105      	bne.n	80078f4 <USB_DevInit+0x27c>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	699b      	ldr	r3, [r3, #24]
 80078ec:	f043 0210 	orr.w	r2, r3, #16
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	619a      	str	r2, [r3, #24]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	699a      	ldr	r2, [r3, #24]
 80078f8:	4b10      	ldr	r3, [pc, #64]	@ (800793c <USB_DevInit+0x2c4>)
 80078fa:	4313      	orrs	r3, r2
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	6193      	str	r3, [r2, #24]
 8007900:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007904:	2b00      	cmp	r3, #0
 8007906:	d005      	beq.n	8007914 <USB_DevInit+0x29c>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	699b      	ldr	r3, [r3, #24]
 800790c:	f043 0208 	orr.w	r2, r3, #8
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	619a      	str	r2, [r3, #24]
 8007914:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007918:	2b01      	cmp	r3, #1
 800791a:	d107      	bne.n	800792c <USB_DevInit+0x2b4>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	699b      	ldr	r3, [r3, #24]
 8007920:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007924:	f043 0304 	orr.w	r3, r3, #4
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	6193      	str	r3, [r2, #24]
 800792c:	7dfb      	ldrb	r3, [r7, #23]
 800792e:	4618      	mov	r0, r3
 8007930:	3718      	adds	r7, #24
 8007932:	46bd      	mov	sp, r7
 8007934:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007938:	b004      	add	sp, #16
 800793a:	4770      	bx	lr
 800793c:	803c3800 	.word	0x803c3800

08007940 <USB_FlushTxFifo>:
 8007940:	b480      	push	{r7}
 8007942:	b085      	sub	sp, #20
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	6039      	str	r1, [r7, #0]
 800794a:	2300      	movs	r3, #0
 800794c:	60fb      	str	r3, [r7, #12]
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	3301      	adds	r3, #1
 8007952:	60fb      	str	r3, [r7, #12]
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800795a:	d901      	bls.n	8007960 <USB_FlushTxFifo+0x20>
 800795c:	2303      	movs	r3, #3
 800795e:	e01b      	b.n	8007998 <USB_FlushTxFifo+0x58>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	691b      	ldr	r3, [r3, #16]
 8007964:	2b00      	cmp	r3, #0
 8007966:	daf2      	bge.n	800794e <USB_FlushTxFifo+0xe>
 8007968:	2300      	movs	r3, #0
 800796a:	60fb      	str	r3, [r7, #12]
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	019b      	lsls	r3, r3, #6
 8007970:	f043 0220 	orr.w	r2, r3, #32
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	611a      	str	r2, [r3, #16]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	3301      	adds	r3, #1
 800797c:	60fb      	str	r3, [r7, #12]
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007984:	d901      	bls.n	800798a <USB_FlushTxFifo+0x4a>
 8007986:	2303      	movs	r3, #3
 8007988:	e006      	b.n	8007998 <USB_FlushTxFifo+0x58>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	691b      	ldr	r3, [r3, #16]
 800798e:	f003 0320 	and.w	r3, r3, #32
 8007992:	2b20      	cmp	r3, #32
 8007994:	d0f0      	beq.n	8007978 <USB_FlushTxFifo+0x38>
 8007996:	2300      	movs	r3, #0
 8007998:	4618      	mov	r0, r3
 800799a:	3714      	adds	r7, #20
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <USB_FlushRxFifo>:
 80079a4:	b480      	push	{r7}
 80079a6:	b085      	sub	sp, #20
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	2300      	movs	r3, #0
 80079ae:	60fb      	str	r3, [r7, #12]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	3301      	adds	r3, #1
 80079b4:	60fb      	str	r3, [r7, #12]
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80079bc:	d901      	bls.n	80079c2 <USB_FlushRxFifo+0x1e>
 80079be:	2303      	movs	r3, #3
 80079c0:	e018      	b.n	80079f4 <USB_FlushRxFifo+0x50>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	691b      	ldr	r3, [r3, #16]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	daf2      	bge.n	80079b0 <USB_FlushRxFifo+0xc>
 80079ca:	2300      	movs	r3, #0
 80079cc:	60fb      	str	r3, [r7, #12]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2210      	movs	r2, #16
 80079d2:	611a      	str	r2, [r3, #16]
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	3301      	adds	r3, #1
 80079d8:	60fb      	str	r3, [r7, #12]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80079e0:	d901      	bls.n	80079e6 <USB_FlushRxFifo+0x42>
 80079e2:	2303      	movs	r3, #3
 80079e4:	e006      	b.n	80079f4 <USB_FlushRxFifo+0x50>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	691b      	ldr	r3, [r3, #16]
 80079ea:	f003 0310 	and.w	r3, r3, #16
 80079ee:	2b10      	cmp	r3, #16
 80079f0:	d0f0      	beq.n	80079d4 <USB_FlushRxFifo+0x30>
 80079f2:	2300      	movs	r3, #0
 80079f4:	4618      	mov	r0, r3
 80079f6:	3714      	adds	r7, #20
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr

08007a00 <USB_SetDevSpeed>:
 8007a00:	b480      	push	{r7}
 8007a02:	b085      	sub	sp, #20
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	460b      	mov	r3, r1
 8007a0a:	70fb      	strb	r3, [r7, #3]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	60fb      	str	r3, [r7, #12]
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	78fb      	ldrb	r3, [r7, #3]
 8007a1a:	68f9      	ldr	r1, [r7, #12]
 8007a1c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007a20:	4313      	orrs	r3, r2
 8007a22:	600b      	str	r3, [r1, #0]
 8007a24:	2300      	movs	r3, #0
 8007a26:	4618      	mov	r0, r3
 8007a28:	3714      	adds	r7, #20
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr

08007a32 <USB_GetDevSpeed>:
 8007a32:	b480      	push	{r7}
 8007a34:	b087      	sub	sp, #28
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	613b      	str	r3, [r7, #16]
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a44:	689b      	ldr	r3, [r3, #8]
 8007a46:	f003 0306 	and.w	r3, r3, #6
 8007a4a:	60fb      	str	r3, [r7, #12]
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d102      	bne.n	8007a58 <USB_GetDevSpeed+0x26>
 8007a52:	2300      	movs	r3, #0
 8007a54:	75fb      	strb	r3, [r7, #23]
 8007a56:	e00a      	b.n	8007a6e <USB_GetDevSpeed+0x3c>
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2b02      	cmp	r3, #2
 8007a5c:	d002      	beq.n	8007a64 <USB_GetDevSpeed+0x32>
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2b06      	cmp	r3, #6
 8007a62:	d102      	bne.n	8007a6a <USB_GetDevSpeed+0x38>
 8007a64:	2302      	movs	r3, #2
 8007a66:	75fb      	strb	r3, [r7, #23]
 8007a68:	e001      	b.n	8007a6e <USB_GetDevSpeed+0x3c>
 8007a6a:	230f      	movs	r3, #15
 8007a6c:	75fb      	strb	r3, [r7, #23]
 8007a6e:	7dfb      	ldrb	r3, [r7, #23]
 8007a70:	4618      	mov	r0, r3
 8007a72:	371c      	adds	r7, #28
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr

08007a7c <USB_ActivateEndpoint>:
 8007a7c:	b480      	push	{r7}
 8007a7e:	b085      	sub	sp, #20
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	60fb      	str	r3, [r7, #12]
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	60bb      	str	r3, [r7, #8]
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	785b      	ldrb	r3, [r3, #1]
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	d13a      	bne.n	8007b0e <USB_ActivateEndpoint+0x92>
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a9e:	69da      	ldr	r2, [r3, #28]
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	781b      	ldrb	r3, [r3, #0]
 8007aa4:	f003 030f 	and.w	r3, r3, #15
 8007aa8:	2101      	movs	r1, #1
 8007aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	68f9      	ldr	r1, [r7, #12]
 8007ab2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	61cb      	str	r3, [r1, #28]
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	015a      	lsls	r2, r3, #5
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	4413      	add	r3, r2
 8007ac2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d155      	bne.n	8007b7c <USB_ActivateEndpoint+0x100>
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	015a      	lsls	r2, r3, #5
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	4413      	add	r3, r2
 8007ad8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007adc:	681a      	ldr	r2, [r3, #0]
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	689b      	ldr	r3, [r3, #8]
 8007ae2:	f3c3 010a 	ubfx	r1, r3, #0, #11
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	791b      	ldrb	r3, [r3, #4]
 8007aea:	049b      	lsls	r3, r3, #18
 8007aec:	4319      	orrs	r1, r3
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	059b      	lsls	r3, r3, #22
 8007af2:	430b      	orrs	r3, r1
 8007af4:	4313      	orrs	r3, r2
 8007af6:	68ba      	ldr	r2, [r7, #8]
 8007af8:	0151      	lsls	r1, r2, #5
 8007afa:	68fa      	ldr	r2, [r7, #12]
 8007afc:	440a      	add	r2, r1
 8007afe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b0a:	6013      	str	r3, [r2, #0]
 8007b0c:	e036      	b.n	8007b7c <USB_ActivateEndpoint+0x100>
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b14:	69da      	ldr	r2, [r3, #28]
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	f003 030f 	and.w	r3, r3, #15
 8007b1e:	2101      	movs	r1, #1
 8007b20:	fa01 f303 	lsl.w	r3, r1, r3
 8007b24:	041b      	lsls	r3, r3, #16
 8007b26:	68f9      	ldr	r1, [r7, #12]
 8007b28:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	61cb      	str	r3, [r1, #28]
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	015a      	lsls	r2, r3, #5
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	4413      	add	r3, r2
 8007b38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d11a      	bne.n	8007b7c <USB_ActivateEndpoint+0x100>
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	015a      	lsls	r2, r3, #5
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	4413      	add	r3, r2
 8007b4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	f3c3 010a 	ubfx	r1, r3, #0, #11
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	791b      	ldrb	r3, [r3, #4]
 8007b60:	049b      	lsls	r3, r3, #18
 8007b62:	430b      	orrs	r3, r1
 8007b64:	4313      	orrs	r3, r2
 8007b66:	68ba      	ldr	r2, [r7, #8]
 8007b68:	0151      	lsls	r1, r2, #5
 8007b6a:	68fa      	ldr	r2, [r7, #12]
 8007b6c:	440a      	add	r2, r1
 8007b6e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b7a:	6013      	str	r3, [r2, #0]
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3714      	adds	r7, #20
 8007b82:	46bd      	mov	sp, r7
 8007b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b88:	4770      	bx	lr
	...

08007b8c <USB_DeactivateEndpoint>:
 8007b8c:	b480      	push	{r7}
 8007b8e:	b085      	sub	sp, #20
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	6039      	str	r1, [r7, #0]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	60fb      	str	r3, [r7, #12]
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	60bb      	str	r3, [r7, #8]
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	785b      	ldrb	r3, [r3, #1]
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d161      	bne.n	8007c6c <USB_DeactivateEndpoint+0xe0>
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	015a      	lsls	r2, r3, #5
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	4413      	add	r3, r2
 8007bb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007bba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007bbe:	d11f      	bne.n	8007c00 <USB_DeactivateEndpoint+0x74>
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	015a      	lsls	r2, r3, #5
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	4413      	add	r3, r2
 8007bc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	68ba      	ldr	r2, [r7, #8]
 8007bd0:	0151      	lsls	r1, r2, #5
 8007bd2:	68fa      	ldr	r2, [r7, #12]
 8007bd4:	440a      	add	r2, r1
 8007bd6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007bda:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007bde:	6013      	str	r3, [r2, #0]
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	015a      	lsls	r2, r3, #5
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	4413      	add	r3, r2
 8007be8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	68ba      	ldr	r2, [r7, #8]
 8007bf0:	0151      	lsls	r1, r2, #5
 8007bf2:	68fa      	ldr	r2, [r7, #12]
 8007bf4:	440a      	add	r2, r1
 8007bf6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007bfa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007bfe:	6013      	str	r3, [r2, #0]
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	f003 030f 	and.w	r3, r3, #15
 8007c10:	2101      	movs	r1, #1
 8007c12:	fa01 f303 	lsl.w	r3, r1, r3
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	43db      	mvns	r3, r3
 8007c1a:	68f9      	ldr	r1, [r7, #12]
 8007c1c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007c20:	4013      	ands	r3, r2
 8007c22:	63cb      	str	r3, [r1, #60]	@ 0x3c
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c2a:	69da      	ldr	r2, [r3, #28]
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	f003 030f 	and.w	r3, r3, #15
 8007c34:	2101      	movs	r1, #1
 8007c36:	fa01 f303 	lsl.w	r3, r1, r3
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	43db      	mvns	r3, r3
 8007c3e:	68f9      	ldr	r1, [r7, #12]
 8007c40:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007c44:	4013      	ands	r3, r2
 8007c46:	61cb      	str	r3, [r1, #28]
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	015a      	lsls	r2, r3, #5
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	4413      	add	r3, r2
 8007c50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c54:	681a      	ldr	r2, [r3, #0]
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	0159      	lsls	r1, r3, #5
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	440b      	add	r3, r1
 8007c5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c62:	4619      	mov	r1, r3
 8007c64:	4b35      	ldr	r3, [pc, #212]	@ (8007d3c <USB_DeactivateEndpoint+0x1b0>)
 8007c66:	4013      	ands	r3, r2
 8007c68:	600b      	str	r3, [r1, #0]
 8007c6a:	e060      	b.n	8007d2e <USB_DeactivateEndpoint+0x1a2>
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	015a      	lsls	r2, r3, #5
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	4413      	add	r3, r2
 8007c74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007c7e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c82:	d11f      	bne.n	8007cc4 <USB_DeactivateEndpoint+0x138>
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	015a      	lsls	r2, r3, #5
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	4413      	add	r3, r2
 8007c8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	68ba      	ldr	r2, [r7, #8]
 8007c94:	0151      	lsls	r1, r2, #5
 8007c96:	68fa      	ldr	r2, [r7, #12]
 8007c98:	440a      	add	r2, r1
 8007c9a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c9e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007ca2:	6013      	str	r3, [r2, #0]
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	015a      	lsls	r2, r3, #5
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	4413      	add	r3, r2
 8007cac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	68ba      	ldr	r2, [r7, #8]
 8007cb4:	0151      	lsls	r1, r2, #5
 8007cb6:	68fa      	ldr	r2, [r7, #12]
 8007cb8:	440a      	add	r2, r1
 8007cba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007cbe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007cc2:	6013      	str	r3, [r2, #0]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	781b      	ldrb	r3, [r3, #0]
 8007cd0:	f003 030f 	and.w	r3, r3, #15
 8007cd4:	2101      	movs	r1, #1
 8007cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8007cda:	041b      	lsls	r3, r3, #16
 8007cdc:	43db      	mvns	r3, r3
 8007cde:	68f9      	ldr	r1, [r7, #12]
 8007ce0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007ce4:	4013      	ands	r3, r2
 8007ce6:	63cb      	str	r3, [r1, #60]	@ 0x3c
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cee:	69da      	ldr	r2, [r3, #28]
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	781b      	ldrb	r3, [r3, #0]
 8007cf4:	f003 030f 	and.w	r3, r3, #15
 8007cf8:	2101      	movs	r1, #1
 8007cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8007cfe:	041b      	lsls	r3, r3, #16
 8007d00:	43db      	mvns	r3, r3
 8007d02:	68f9      	ldr	r1, [r7, #12]
 8007d04:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007d08:	4013      	ands	r3, r2
 8007d0a:	61cb      	str	r3, [r1, #28]
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	015a      	lsls	r2, r3, #5
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	4413      	add	r3, r2
 8007d14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	0159      	lsls	r1, r3, #5
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	440b      	add	r3, r1
 8007d22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d26:	4619      	mov	r1, r3
 8007d28:	4b05      	ldr	r3, [pc, #20]	@ (8007d40 <USB_DeactivateEndpoint+0x1b4>)
 8007d2a:	4013      	ands	r3, r2
 8007d2c:	600b      	str	r3, [r1, #0]
 8007d2e:	2300      	movs	r3, #0
 8007d30:	4618      	mov	r0, r3
 8007d32:	3714      	adds	r7, #20
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr
 8007d3c:	ec337800 	.word	0xec337800
 8007d40:	eff37800 	.word	0xeff37800

08007d44 <USB_EPStartXfer>:
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b08a      	sub	sp, #40	@ 0x28
 8007d48:	af02      	add	r7, sp, #8
 8007d4a:	60f8      	str	r0, [r7, #12]
 8007d4c:	60b9      	str	r1, [r7, #8]
 8007d4e:	4613      	mov	r3, r2
 8007d50:	71fb      	strb	r3, [r7, #7]
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	61fb      	str	r3, [r7, #28]
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	61bb      	str	r3, [r7, #24]
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	785b      	ldrb	r3, [r3, #1]
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	f040 817f 	bne.w	8008064 <USB_EPStartXfer+0x320>
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	691b      	ldr	r3, [r3, #16]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d132      	bne.n	8007dd4 <USB_EPStartXfer+0x90>
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	015a      	lsls	r2, r3, #5
 8007d72:	69fb      	ldr	r3, [r7, #28]
 8007d74:	4413      	add	r3, r2
 8007d76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d7a:	691b      	ldr	r3, [r3, #16]
 8007d7c:	69ba      	ldr	r2, [r7, #24]
 8007d7e:	0151      	lsls	r1, r2, #5
 8007d80:	69fa      	ldr	r2, [r7, #28]
 8007d82:	440a      	add	r2, r1
 8007d84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d88:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007d8c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007d90:	6113      	str	r3, [r2, #16]
 8007d92:	69bb      	ldr	r3, [r7, #24]
 8007d94:	015a      	lsls	r2, r3, #5
 8007d96:	69fb      	ldr	r3, [r7, #28]
 8007d98:	4413      	add	r3, r2
 8007d9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d9e:	691b      	ldr	r3, [r3, #16]
 8007da0:	69ba      	ldr	r2, [r7, #24]
 8007da2:	0151      	lsls	r1, r2, #5
 8007da4:	69fa      	ldr	r2, [r7, #28]
 8007da6:	440a      	add	r2, r1
 8007da8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007dac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007db0:	6113      	str	r3, [r2, #16]
 8007db2:	69bb      	ldr	r3, [r7, #24]
 8007db4:	015a      	lsls	r2, r3, #5
 8007db6:	69fb      	ldr	r3, [r7, #28]
 8007db8:	4413      	add	r3, r2
 8007dba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dbe:	691b      	ldr	r3, [r3, #16]
 8007dc0:	69ba      	ldr	r2, [r7, #24]
 8007dc2:	0151      	lsls	r1, r2, #5
 8007dc4:	69fa      	ldr	r2, [r7, #28]
 8007dc6:	440a      	add	r2, r1
 8007dc8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007dcc:	0cdb      	lsrs	r3, r3, #19
 8007dce:	04db      	lsls	r3, r3, #19
 8007dd0:	6113      	str	r3, [r2, #16]
 8007dd2:	e097      	b.n	8007f04 <USB_EPStartXfer+0x1c0>
 8007dd4:	69bb      	ldr	r3, [r7, #24]
 8007dd6:	015a      	lsls	r2, r3, #5
 8007dd8:	69fb      	ldr	r3, [r7, #28]
 8007dda:	4413      	add	r3, r2
 8007ddc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007de0:	691b      	ldr	r3, [r3, #16]
 8007de2:	69ba      	ldr	r2, [r7, #24]
 8007de4:	0151      	lsls	r1, r2, #5
 8007de6:	69fa      	ldr	r2, [r7, #28]
 8007de8:	440a      	add	r2, r1
 8007dea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007dee:	0cdb      	lsrs	r3, r3, #19
 8007df0:	04db      	lsls	r3, r3, #19
 8007df2:	6113      	str	r3, [r2, #16]
 8007df4:	69bb      	ldr	r3, [r7, #24]
 8007df6:	015a      	lsls	r2, r3, #5
 8007df8:	69fb      	ldr	r3, [r7, #28]
 8007dfa:	4413      	add	r3, r2
 8007dfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e00:	691b      	ldr	r3, [r3, #16]
 8007e02:	69ba      	ldr	r2, [r7, #24]
 8007e04:	0151      	lsls	r1, r2, #5
 8007e06:	69fa      	ldr	r2, [r7, #28]
 8007e08:	440a      	add	r2, r1
 8007e0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e0e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007e12:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007e16:	6113      	str	r3, [r2, #16]
 8007e18:	69bb      	ldr	r3, [r7, #24]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d11a      	bne.n	8007e54 <USB_EPStartXfer+0x110>
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	691a      	ldr	r2, [r3, #16]
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	429a      	cmp	r2, r3
 8007e28:	d903      	bls.n	8007e32 <USB_EPStartXfer+0xee>
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	689a      	ldr	r2, [r3, #8]
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	611a      	str	r2, [r3, #16]
 8007e32:	69bb      	ldr	r3, [r7, #24]
 8007e34:	015a      	lsls	r2, r3, #5
 8007e36:	69fb      	ldr	r3, [r7, #28]
 8007e38:	4413      	add	r3, r2
 8007e3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e3e:	691b      	ldr	r3, [r3, #16]
 8007e40:	69ba      	ldr	r2, [r7, #24]
 8007e42:	0151      	lsls	r1, r2, #5
 8007e44:	69fa      	ldr	r2, [r7, #28]
 8007e46:	440a      	add	r2, r1
 8007e48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e4c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007e50:	6113      	str	r3, [r2, #16]
 8007e52:	e044      	b.n	8007ede <USB_EPStartXfer+0x19a>
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	691a      	ldr	r2, [r3, #16]
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	689b      	ldr	r3, [r3, #8]
 8007e5c:	4413      	add	r3, r2
 8007e5e:	1e5a      	subs	r2, r3, #1
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e68:	82fb      	strh	r3, [r7, #22]
 8007e6a:	69bb      	ldr	r3, [r7, #24]
 8007e6c:	015a      	lsls	r2, r3, #5
 8007e6e:	69fb      	ldr	r3, [r7, #28]
 8007e70:	4413      	add	r3, r2
 8007e72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e76:	691a      	ldr	r2, [r3, #16]
 8007e78:	8afb      	ldrh	r3, [r7, #22]
 8007e7a:	04d9      	lsls	r1, r3, #19
 8007e7c:	4ba4      	ldr	r3, [pc, #656]	@ (8008110 <USB_EPStartXfer+0x3cc>)
 8007e7e:	400b      	ands	r3, r1
 8007e80:	69b9      	ldr	r1, [r7, #24]
 8007e82:	0148      	lsls	r0, r1, #5
 8007e84:	69f9      	ldr	r1, [r7, #28]
 8007e86:	4401      	add	r1, r0
 8007e88:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	610b      	str	r3, [r1, #16]
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	791b      	ldrb	r3, [r3, #4]
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d122      	bne.n	8007ede <USB_EPStartXfer+0x19a>
 8007e98:	69bb      	ldr	r3, [r7, #24]
 8007e9a:	015a      	lsls	r2, r3, #5
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	4413      	add	r3, r2
 8007ea0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ea4:	691b      	ldr	r3, [r3, #16]
 8007ea6:	69ba      	ldr	r2, [r7, #24]
 8007ea8:	0151      	lsls	r1, r2, #5
 8007eaa:	69fa      	ldr	r2, [r7, #28]
 8007eac:	440a      	add	r2, r1
 8007eae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007eb2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007eb6:	6113      	str	r3, [r2, #16]
 8007eb8:	69bb      	ldr	r3, [r7, #24]
 8007eba:	015a      	lsls	r2, r3, #5
 8007ebc:	69fb      	ldr	r3, [r7, #28]
 8007ebe:	4413      	add	r3, r2
 8007ec0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ec4:	691a      	ldr	r2, [r3, #16]
 8007ec6:	8afb      	ldrh	r3, [r7, #22]
 8007ec8:	075b      	lsls	r3, r3, #29
 8007eca:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8007ece:	69b9      	ldr	r1, [r7, #24]
 8007ed0:	0148      	lsls	r0, r1, #5
 8007ed2:	69f9      	ldr	r1, [r7, #28]
 8007ed4:	4401      	add	r1, r0
 8007ed6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007eda:	4313      	orrs	r3, r2
 8007edc:	610b      	str	r3, [r1, #16]
 8007ede:	69bb      	ldr	r3, [r7, #24]
 8007ee0:	015a      	lsls	r2, r3, #5
 8007ee2:	69fb      	ldr	r3, [r7, #28]
 8007ee4:	4413      	add	r3, r2
 8007ee6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007eea:	691a      	ldr	r2, [r3, #16]
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	691b      	ldr	r3, [r3, #16]
 8007ef0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ef4:	69b9      	ldr	r1, [r7, #24]
 8007ef6:	0148      	lsls	r0, r1, #5
 8007ef8:	69f9      	ldr	r1, [r7, #28]
 8007efa:	4401      	add	r1, r0
 8007efc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007f00:	4313      	orrs	r3, r2
 8007f02:	610b      	str	r3, [r1, #16]
 8007f04:	79fb      	ldrb	r3, [r7, #7]
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d14b      	bne.n	8007fa2 <USB_EPStartXfer+0x25e>
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	69db      	ldr	r3, [r3, #28]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d009      	beq.n	8007f26 <USB_EPStartXfer+0x1e2>
 8007f12:	69bb      	ldr	r3, [r7, #24]
 8007f14:	015a      	lsls	r2, r3, #5
 8007f16:	69fb      	ldr	r3, [r7, #28]
 8007f18:	4413      	add	r3, r2
 8007f1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f1e:	461a      	mov	r2, r3
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	69db      	ldr	r3, [r3, #28]
 8007f24:	6153      	str	r3, [r2, #20]
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	791b      	ldrb	r3, [r3, #4]
 8007f2a:	2b01      	cmp	r3, #1
 8007f2c:	d128      	bne.n	8007f80 <USB_EPStartXfer+0x23c>
 8007f2e:	69fb      	ldr	r3, [r7, #28]
 8007f30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f34:	689b      	ldr	r3, [r3, #8]
 8007f36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d110      	bne.n	8007f60 <USB_EPStartXfer+0x21c>
 8007f3e:	69bb      	ldr	r3, [r7, #24]
 8007f40:	015a      	lsls	r2, r3, #5
 8007f42:	69fb      	ldr	r3, [r7, #28]
 8007f44:	4413      	add	r3, r2
 8007f46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	69ba      	ldr	r2, [r7, #24]
 8007f4e:	0151      	lsls	r1, r2, #5
 8007f50:	69fa      	ldr	r2, [r7, #28]
 8007f52:	440a      	add	r2, r1
 8007f54:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f58:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007f5c:	6013      	str	r3, [r2, #0]
 8007f5e:	e00f      	b.n	8007f80 <USB_EPStartXfer+0x23c>
 8007f60:	69bb      	ldr	r3, [r7, #24]
 8007f62:	015a      	lsls	r2, r3, #5
 8007f64:	69fb      	ldr	r3, [r7, #28]
 8007f66:	4413      	add	r3, r2
 8007f68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	69ba      	ldr	r2, [r7, #24]
 8007f70:	0151      	lsls	r1, r2, #5
 8007f72:	69fa      	ldr	r2, [r7, #28]
 8007f74:	440a      	add	r2, r1
 8007f76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007f7e:	6013      	str	r3, [r2, #0]
 8007f80:	69bb      	ldr	r3, [r7, #24]
 8007f82:	015a      	lsls	r2, r3, #5
 8007f84:	69fb      	ldr	r3, [r7, #28]
 8007f86:	4413      	add	r3, r2
 8007f88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	69ba      	ldr	r2, [r7, #24]
 8007f90:	0151      	lsls	r1, r2, #5
 8007f92:	69fa      	ldr	r2, [r7, #28]
 8007f94:	440a      	add	r2, r1
 8007f96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f9a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007f9e:	6013      	str	r3, [r2, #0]
 8007fa0:	e166      	b.n	8008270 <USB_EPStartXfer+0x52c>
 8007fa2:	69bb      	ldr	r3, [r7, #24]
 8007fa4:	015a      	lsls	r2, r3, #5
 8007fa6:	69fb      	ldr	r3, [r7, #28]
 8007fa8:	4413      	add	r3, r2
 8007faa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	69ba      	ldr	r2, [r7, #24]
 8007fb2:	0151      	lsls	r1, r2, #5
 8007fb4:	69fa      	ldr	r2, [r7, #28]
 8007fb6:	440a      	add	r2, r1
 8007fb8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007fbc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007fc0:	6013      	str	r3, [r2, #0]
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	791b      	ldrb	r3, [r3, #4]
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d015      	beq.n	8007ff6 <USB_EPStartXfer+0x2b2>
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	691b      	ldr	r3, [r3, #16]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	f000 814e 	beq.w	8008270 <USB_EPStartXfer+0x52c>
 8007fd4:	69fb      	ldr	r3, [r7, #28]
 8007fd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	f003 030f 	and.w	r3, r3, #15
 8007fe4:	2101      	movs	r1, #1
 8007fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8007fea:	69f9      	ldr	r1, [r7, #28]
 8007fec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	634b      	str	r3, [r1, #52]	@ 0x34
 8007ff4:	e13c      	b.n	8008270 <USB_EPStartXfer+0x52c>
 8007ff6:	69fb      	ldr	r3, [r7, #28]
 8007ff8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008002:	2b00      	cmp	r3, #0
 8008004:	d110      	bne.n	8008028 <USB_EPStartXfer+0x2e4>
 8008006:	69bb      	ldr	r3, [r7, #24]
 8008008:	015a      	lsls	r2, r3, #5
 800800a:	69fb      	ldr	r3, [r7, #28]
 800800c:	4413      	add	r3, r2
 800800e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	69ba      	ldr	r2, [r7, #24]
 8008016:	0151      	lsls	r1, r2, #5
 8008018:	69fa      	ldr	r2, [r7, #28]
 800801a:	440a      	add	r2, r1
 800801c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008020:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008024:	6013      	str	r3, [r2, #0]
 8008026:	e00f      	b.n	8008048 <USB_EPStartXfer+0x304>
 8008028:	69bb      	ldr	r3, [r7, #24]
 800802a:	015a      	lsls	r2, r3, #5
 800802c:	69fb      	ldr	r3, [r7, #28]
 800802e:	4413      	add	r3, r2
 8008030:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	69ba      	ldr	r2, [r7, #24]
 8008038:	0151      	lsls	r1, r2, #5
 800803a:	69fa      	ldr	r2, [r7, #28]
 800803c:	440a      	add	r2, r1
 800803e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008042:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008046:	6013      	str	r3, [r2, #0]
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	68d9      	ldr	r1, [r3, #12]
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	781a      	ldrb	r2, [r3, #0]
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	691b      	ldr	r3, [r3, #16]
 8008054:	b298      	uxth	r0, r3
 8008056:	79fb      	ldrb	r3, [r7, #7]
 8008058:	9300      	str	r3, [sp, #0]
 800805a:	4603      	mov	r3, r0
 800805c:	68f8      	ldr	r0, [r7, #12]
 800805e:	f000 f9b9 	bl	80083d4 <USB_WritePacket>
 8008062:	e105      	b.n	8008270 <USB_EPStartXfer+0x52c>
 8008064:	69bb      	ldr	r3, [r7, #24]
 8008066:	015a      	lsls	r2, r3, #5
 8008068:	69fb      	ldr	r3, [r7, #28]
 800806a:	4413      	add	r3, r2
 800806c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008070:	691b      	ldr	r3, [r3, #16]
 8008072:	69ba      	ldr	r2, [r7, #24]
 8008074:	0151      	lsls	r1, r2, #5
 8008076:	69fa      	ldr	r2, [r7, #28]
 8008078:	440a      	add	r2, r1
 800807a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800807e:	0cdb      	lsrs	r3, r3, #19
 8008080:	04db      	lsls	r3, r3, #19
 8008082:	6113      	str	r3, [r2, #16]
 8008084:	69bb      	ldr	r3, [r7, #24]
 8008086:	015a      	lsls	r2, r3, #5
 8008088:	69fb      	ldr	r3, [r7, #28]
 800808a:	4413      	add	r3, r2
 800808c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008090:	691b      	ldr	r3, [r3, #16]
 8008092:	69ba      	ldr	r2, [r7, #24]
 8008094:	0151      	lsls	r1, r2, #5
 8008096:	69fa      	ldr	r2, [r7, #28]
 8008098:	440a      	add	r2, r1
 800809a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800809e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80080a2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80080a6:	6113      	str	r3, [r2, #16]
 80080a8:	69bb      	ldr	r3, [r7, #24]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d132      	bne.n	8008114 <USB_EPStartXfer+0x3d0>
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	691b      	ldr	r3, [r3, #16]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d003      	beq.n	80080be <USB_EPStartXfer+0x37a>
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	689a      	ldr	r2, [r3, #8]
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	611a      	str	r2, [r3, #16]
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	689a      	ldr	r2, [r3, #8]
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	621a      	str	r2, [r3, #32]
 80080c6:	69bb      	ldr	r3, [r7, #24]
 80080c8:	015a      	lsls	r2, r3, #5
 80080ca:	69fb      	ldr	r3, [r7, #28]
 80080cc:	4413      	add	r3, r2
 80080ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080d2:	691a      	ldr	r2, [r3, #16]
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	6a1b      	ldr	r3, [r3, #32]
 80080d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080dc:	69b9      	ldr	r1, [r7, #24]
 80080de:	0148      	lsls	r0, r1, #5
 80080e0:	69f9      	ldr	r1, [r7, #28]
 80080e2:	4401      	add	r1, r0
 80080e4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80080e8:	4313      	orrs	r3, r2
 80080ea:	610b      	str	r3, [r1, #16]
 80080ec:	69bb      	ldr	r3, [r7, #24]
 80080ee:	015a      	lsls	r2, r3, #5
 80080f0:	69fb      	ldr	r3, [r7, #28]
 80080f2:	4413      	add	r3, r2
 80080f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080f8:	691b      	ldr	r3, [r3, #16]
 80080fa:	69ba      	ldr	r2, [r7, #24]
 80080fc:	0151      	lsls	r1, r2, #5
 80080fe:	69fa      	ldr	r2, [r7, #28]
 8008100:	440a      	add	r2, r1
 8008102:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008106:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800810a:	6113      	str	r3, [r2, #16]
 800810c:	e062      	b.n	80081d4 <USB_EPStartXfer+0x490>
 800810e:	bf00      	nop
 8008110:	1ff80000 	.word	0x1ff80000
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	691b      	ldr	r3, [r3, #16]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d123      	bne.n	8008164 <USB_EPStartXfer+0x420>
 800811c:	69bb      	ldr	r3, [r7, #24]
 800811e:	015a      	lsls	r2, r3, #5
 8008120:	69fb      	ldr	r3, [r7, #28]
 8008122:	4413      	add	r3, r2
 8008124:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008128:	691a      	ldr	r2, [r3, #16]
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008132:	69b9      	ldr	r1, [r7, #24]
 8008134:	0148      	lsls	r0, r1, #5
 8008136:	69f9      	ldr	r1, [r7, #28]
 8008138:	4401      	add	r1, r0
 800813a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800813e:	4313      	orrs	r3, r2
 8008140:	610b      	str	r3, [r1, #16]
 8008142:	69bb      	ldr	r3, [r7, #24]
 8008144:	015a      	lsls	r2, r3, #5
 8008146:	69fb      	ldr	r3, [r7, #28]
 8008148:	4413      	add	r3, r2
 800814a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800814e:	691b      	ldr	r3, [r3, #16]
 8008150:	69ba      	ldr	r2, [r7, #24]
 8008152:	0151      	lsls	r1, r2, #5
 8008154:	69fa      	ldr	r2, [r7, #28]
 8008156:	440a      	add	r2, r1
 8008158:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800815c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008160:	6113      	str	r3, [r2, #16]
 8008162:	e037      	b.n	80081d4 <USB_EPStartXfer+0x490>
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	691a      	ldr	r2, [r3, #16]
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	4413      	add	r3, r2
 800816e:	1e5a      	subs	r2, r3, #1
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	689b      	ldr	r3, [r3, #8]
 8008174:	fbb2 f3f3 	udiv	r3, r2, r3
 8008178:	82fb      	strh	r3, [r7, #22]
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	689b      	ldr	r3, [r3, #8]
 800817e:	8afa      	ldrh	r2, [r7, #22]
 8008180:	fb03 f202 	mul.w	r2, r3, r2
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	621a      	str	r2, [r3, #32]
 8008188:	69bb      	ldr	r3, [r7, #24]
 800818a:	015a      	lsls	r2, r3, #5
 800818c:	69fb      	ldr	r3, [r7, #28]
 800818e:	4413      	add	r3, r2
 8008190:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008194:	691a      	ldr	r2, [r3, #16]
 8008196:	8afb      	ldrh	r3, [r7, #22]
 8008198:	04d9      	lsls	r1, r3, #19
 800819a:	4b38      	ldr	r3, [pc, #224]	@ (800827c <USB_EPStartXfer+0x538>)
 800819c:	400b      	ands	r3, r1
 800819e:	69b9      	ldr	r1, [r7, #24]
 80081a0:	0148      	lsls	r0, r1, #5
 80081a2:	69f9      	ldr	r1, [r7, #28]
 80081a4:	4401      	add	r1, r0
 80081a6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80081aa:	4313      	orrs	r3, r2
 80081ac:	610b      	str	r3, [r1, #16]
 80081ae:	69bb      	ldr	r3, [r7, #24]
 80081b0:	015a      	lsls	r2, r3, #5
 80081b2:	69fb      	ldr	r3, [r7, #28]
 80081b4:	4413      	add	r3, r2
 80081b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081ba:	691a      	ldr	r2, [r3, #16]
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	6a1b      	ldr	r3, [r3, #32]
 80081c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081c4:	69b9      	ldr	r1, [r7, #24]
 80081c6:	0148      	lsls	r0, r1, #5
 80081c8:	69f9      	ldr	r1, [r7, #28]
 80081ca:	4401      	add	r1, r0
 80081cc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80081d0:	4313      	orrs	r3, r2
 80081d2:	610b      	str	r3, [r1, #16]
 80081d4:	79fb      	ldrb	r3, [r7, #7]
 80081d6:	2b01      	cmp	r3, #1
 80081d8:	d10d      	bne.n	80081f6 <USB_EPStartXfer+0x4b2>
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	68db      	ldr	r3, [r3, #12]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d009      	beq.n	80081f6 <USB_EPStartXfer+0x4b2>
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	68d9      	ldr	r1, [r3, #12]
 80081e6:	69bb      	ldr	r3, [r7, #24]
 80081e8:	015a      	lsls	r2, r3, #5
 80081ea:	69fb      	ldr	r3, [r7, #28]
 80081ec:	4413      	add	r3, r2
 80081ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081f2:	460a      	mov	r2, r1
 80081f4:	615a      	str	r2, [r3, #20]
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	791b      	ldrb	r3, [r3, #4]
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	d128      	bne.n	8008250 <USB_EPStartXfer+0x50c>
 80081fe:	69fb      	ldr	r3, [r7, #28]
 8008200:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008204:	689b      	ldr	r3, [r3, #8]
 8008206:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800820a:	2b00      	cmp	r3, #0
 800820c:	d110      	bne.n	8008230 <USB_EPStartXfer+0x4ec>
 800820e:	69bb      	ldr	r3, [r7, #24]
 8008210:	015a      	lsls	r2, r3, #5
 8008212:	69fb      	ldr	r3, [r7, #28]
 8008214:	4413      	add	r3, r2
 8008216:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	69ba      	ldr	r2, [r7, #24]
 800821e:	0151      	lsls	r1, r2, #5
 8008220:	69fa      	ldr	r2, [r7, #28]
 8008222:	440a      	add	r2, r1
 8008224:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008228:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800822c:	6013      	str	r3, [r2, #0]
 800822e:	e00f      	b.n	8008250 <USB_EPStartXfer+0x50c>
 8008230:	69bb      	ldr	r3, [r7, #24]
 8008232:	015a      	lsls	r2, r3, #5
 8008234:	69fb      	ldr	r3, [r7, #28]
 8008236:	4413      	add	r3, r2
 8008238:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	69ba      	ldr	r2, [r7, #24]
 8008240:	0151      	lsls	r1, r2, #5
 8008242:	69fa      	ldr	r2, [r7, #28]
 8008244:	440a      	add	r2, r1
 8008246:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800824a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800824e:	6013      	str	r3, [r2, #0]
 8008250:	69bb      	ldr	r3, [r7, #24]
 8008252:	015a      	lsls	r2, r3, #5
 8008254:	69fb      	ldr	r3, [r7, #28]
 8008256:	4413      	add	r3, r2
 8008258:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	69ba      	ldr	r2, [r7, #24]
 8008260:	0151      	lsls	r1, r2, #5
 8008262:	69fa      	ldr	r2, [r7, #28]
 8008264:	440a      	add	r2, r1
 8008266:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800826a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800826e:	6013      	str	r3, [r2, #0]
 8008270:	2300      	movs	r3, #0
 8008272:	4618      	mov	r0, r3
 8008274:	3720      	adds	r7, #32
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
 800827a:	bf00      	nop
 800827c:	1ff80000 	.word	0x1ff80000

08008280 <USB_EPStopXfer>:
 8008280:	b480      	push	{r7}
 8008282:	b087      	sub	sp, #28
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	6039      	str	r1, [r7, #0]
 800828a:	2300      	movs	r3, #0
 800828c:	60fb      	str	r3, [r7, #12]
 800828e:	2300      	movs	r3, #0
 8008290:	75fb      	strb	r3, [r7, #23]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	613b      	str	r3, [r7, #16]
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	785b      	ldrb	r3, [r3, #1]
 800829a:	2b01      	cmp	r3, #1
 800829c:	d14a      	bne.n	8008334 <USB_EPStopXfer+0xb4>
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	015a      	lsls	r2, r3, #5
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	4413      	add	r3, r2
 80082a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80082b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80082b6:	f040 8086 	bne.w	80083c6 <USB_EPStopXfer+0x146>
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	015a      	lsls	r2, r3, #5
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	4413      	add	r3, r2
 80082c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	683a      	ldr	r2, [r7, #0]
 80082cc:	7812      	ldrb	r2, [r2, #0]
 80082ce:	0151      	lsls	r1, r2, #5
 80082d0:	693a      	ldr	r2, [r7, #16]
 80082d2:	440a      	add	r2, r1
 80082d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082d8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80082dc:	6013      	str	r3, [r2, #0]
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	015a      	lsls	r2, r3, #5
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	4413      	add	r3, r2
 80082e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	683a      	ldr	r2, [r7, #0]
 80082f0:	7812      	ldrb	r2, [r2, #0]
 80082f2:	0151      	lsls	r1, r2, #5
 80082f4:	693a      	ldr	r2, [r7, #16]
 80082f6:	440a      	add	r2, r1
 80082f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008300:	6013      	str	r3, [r2, #0]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	3301      	adds	r3, #1
 8008306:	60fb      	str	r3, [r7, #12]
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800830e:	4293      	cmp	r3, r2
 8008310:	d902      	bls.n	8008318 <USB_EPStopXfer+0x98>
 8008312:	2301      	movs	r3, #1
 8008314:	75fb      	strb	r3, [r7, #23]
 8008316:	e056      	b.n	80083c6 <USB_EPStopXfer+0x146>
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	781b      	ldrb	r3, [r3, #0]
 800831c:	015a      	lsls	r2, r3, #5
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	4413      	add	r3, r2
 8008322:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800832c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008330:	d0e7      	beq.n	8008302 <USB_EPStopXfer+0x82>
 8008332:	e048      	b.n	80083c6 <USB_EPStopXfer+0x146>
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	781b      	ldrb	r3, [r3, #0]
 8008338:	015a      	lsls	r2, r3, #5
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	4413      	add	r3, r2
 800833e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008348:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800834c:	d13b      	bne.n	80083c6 <USB_EPStopXfer+0x146>
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	015a      	lsls	r2, r3, #5
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	4413      	add	r3, r2
 8008358:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	683a      	ldr	r2, [r7, #0]
 8008360:	7812      	ldrb	r2, [r2, #0]
 8008362:	0151      	lsls	r1, r2, #5
 8008364:	693a      	ldr	r2, [r7, #16]
 8008366:	440a      	add	r2, r1
 8008368:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800836c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008370:	6013      	str	r3, [r2, #0]
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	781b      	ldrb	r3, [r3, #0]
 8008376:	015a      	lsls	r2, r3, #5
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	4413      	add	r3, r2
 800837c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	683a      	ldr	r2, [r7, #0]
 8008384:	7812      	ldrb	r2, [r2, #0]
 8008386:	0151      	lsls	r1, r2, #5
 8008388:	693a      	ldr	r2, [r7, #16]
 800838a:	440a      	add	r2, r1
 800838c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008390:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008394:	6013      	str	r3, [r2, #0]
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	3301      	adds	r3, #1
 800839a:	60fb      	str	r3, [r7, #12]
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f242 7210 	movw	r2, #10000	@ 0x2710
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d902      	bls.n	80083ac <USB_EPStopXfer+0x12c>
 80083a6:	2301      	movs	r3, #1
 80083a8:	75fb      	strb	r3, [r7, #23]
 80083aa:	e00c      	b.n	80083c6 <USB_EPStopXfer+0x146>
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	015a      	lsls	r2, r3, #5
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	4413      	add	r3, r2
 80083b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80083c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80083c4:	d0e7      	beq.n	8008396 <USB_EPStopXfer+0x116>
 80083c6:	7dfb      	ldrb	r3, [r7, #23]
 80083c8:	4618      	mov	r0, r3
 80083ca:	371c      	adds	r7, #28
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr

080083d4 <USB_WritePacket>:
 80083d4:	b480      	push	{r7}
 80083d6:	b089      	sub	sp, #36	@ 0x24
 80083d8:	af00      	add	r7, sp, #0
 80083da:	60f8      	str	r0, [r7, #12]
 80083dc:	60b9      	str	r1, [r7, #8]
 80083de:	4611      	mov	r1, r2
 80083e0:	461a      	mov	r2, r3
 80083e2:	460b      	mov	r3, r1
 80083e4:	71fb      	strb	r3, [r7, #7]
 80083e6:	4613      	mov	r3, r2
 80083e8:	80bb      	strh	r3, [r7, #4]
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	617b      	str	r3, [r7, #20]
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	61fb      	str	r3, [r7, #28]
 80083f2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d123      	bne.n	8008442 <USB_WritePacket+0x6e>
 80083fa:	88bb      	ldrh	r3, [r7, #4]
 80083fc:	3303      	adds	r3, #3
 80083fe:	089b      	lsrs	r3, r3, #2
 8008400:	613b      	str	r3, [r7, #16]
 8008402:	2300      	movs	r3, #0
 8008404:	61bb      	str	r3, [r7, #24]
 8008406:	e018      	b.n	800843a <USB_WritePacket+0x66>
 8008408:	79fb      	ldrb	r3, [r7, #7]
 800840a:	031a      	lsls	r2, r3, #12
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	4413      	add	r3, r2
 8008410:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008414:	461a      	mov	r2, r3
 8008416:	69fb      	ldr	r3, [r7, #28]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	6013      	str	r3, [r2, #0]
 800841c:	69fb      	ldr	r3, [r7, #28]
 800841e:	3301      	adds	r3, #1
 8008420:	61fb      	str	r3, [r7, #28]
 8008422:	69fb      	ldr	r3, [r7, #28]
 8008424:	3301      	adds	r3, #1
 8008426:	61fb      	str	r3, [r7, #28]
 8008428:	69fb      	ldr	r3, [r7, #28]
 800842a:	3301      	adds	r3, #1
 800842c:	61fb      	str	r3, [r7, #28]
 800842e:	69fb      	ldr	r3, [r7, #28]
 8008430:	3301      	adds	r3, #1
 8008432:	61fb      	str	r3, [r7, #28]
 8008434:	69bb      	ldr	r3, [r7, #24]
 8008436:	3301      	adds	r3, #1
 8008438:	61bb      	str	r3, [r7, #24]
 800843a:	69ba      	ldr	r2, [r7, #24]
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	429a      	cmp	r2, r3
 8008440:	d3e2      	bcc.n	8008408 <USB_WritePacket+0x34>
 8008442:	2300      	movs	r3, #0
 8008444:	4618      	mov	r0, r3
 8008446:	3724      	adds	r7, #36	@ 0x24
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr

08008450 <USB_ReadPacket>:
 8008450:	b480      	push	{r7}
 8008452:	b08b      	sub	sp, #44	@ 0x2c
 8008454:	af00      	add	r7, sp, #0
 8008456:	60f8      	str	r0, [r7, #12]
 8008458:	60b9      	str	r1, [r7, #8]
 800845a:	4613      	mov	r3, r2
 800845c:	80fb      	strh	r3, [r7, #6]
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	61bb      	str	r3, [r7, #24]
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	627b      	str	r3, [r7, #36]	@ 0x24
 8008466:	88fb      	ldrh	r3, [r7, #6]
 8008468:	089b      	lsrs	r3, r3, #2
 800846a:	b29b      	uxth	r3, r3
 800846c:	617b      	str	r3, [r7, #20]
 800846e:	88fb      	ldrh	r3, [r7, #6]
 8008470:	f003 0303 	and.w	r3, r3, #3
 8008474:	83fb      	strh	r3, [r7, #30]
 8008476:	2300      	movs	r3, #0
 8008478:	623b      	str	r3, [r7, #32]
 800847a:	e014      	b.n	80084a6 <USB_ReadPacket+0x56>
 800847c:	69bb      	ldr	r3, [r7, #24]
 800847e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008486:	601a      	str	r2, [r3, #0]
 8008488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800848a:	3301      	adds	r3, #1
 800848c:	627b      	str	r3, [r7, #36]	@ 0x24
 800848e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008490:	3301      	adds	r3, #1
 8008492:	627b      	str	r3, [r7, #36]	@ 0x24
 8008494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008496:	3301      	adds	r3, #1
 8008498:	627b      	str	r3, [r7, #36]	@ 0x24
 800849a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800849c:	3301      	adds	r3, #1
 800849e:	627b      	str	r3, [r7, #36]	@ 0x24
 80084a0:	6a3b      	ldr	r3, [r7, #32]
 80084a2:	3301      	adds	r3, #1
 80084a4:	623b      	str	r3, [r7, #32]
 80084a6:	6a3a      	ldr	r2, [r7, #32]
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	429a      	cmp	r2, r3
 80084ac:	d3e6      	bcc.n	800847c <USB_ReadPacket+0x2c>
 80084ae:	8bfb      	ldrh	r3, [r7, #30]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d01e      	beq.n	80084f2 <USB_ReadPacket+0xa2>
 80084b4:	2300      	movs	r3, #0
 80084b6:	623b      	str	r3, [r7, #32]
 80084b8:	69bb      	ldr	r3, [r7, #24]
 80084ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80084be:	461a      	mov	r2, r3
 80084c0:	f107 0310 	add.w	r3, r7, #16
 80084c4:	6812      	ldr	r2, [r2, #0]
 80084c6:	601a      	str	r2, [r3, #0]
 80084c8:	693a      	ldr	r2, [r7, #16]
 80084ca:	6a3b      	ldr	r3, [r7, #32]
 80084cc:	b2db      	uxtb	r3, r3
 80084ce:	00db      	lsls	r3, r3, #3
 80084d0:	fa22 f303 	lsr.w	r3, r2, r3
 80084d4:	b2da      	uxtb	r2, r3
 80084d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d8:	701a      	strb	r2, [r3, #0]
 80084da:	6a3b      	ldr	r3, [r7, #32]
 80084dc:	3301      	adds	r3, #1
 80084de:	623b      	str	r3, [r7, #32]
 80084e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e2:	3301      	adds	r3, #1
 80084e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80084e6:	8bfb      	ldrh	r3, [r7, #30]
 80084e8:	3b01      	subs	r3, #1
 80084ea:	83fb      	strh	r3, [r7, #30]
 80084ec:	8bfb      	ldrh	r3, [r7, #30]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d1ea      	bne.n	80084c8 <USB_ReadPacket+0x78>
 80084f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084f4:	4618      	mov	r0, r3
 80084f6:	372c      	adds	r7, #44	@ 0x2c
 80084f8:	46bd      	mov	sp, r7
 80084fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fe:	4770      	bx	lr

08008500 <USB_EPSetStall>:
 8008500:	b480      	push	{r7}
 8008502:	b085      	sub	sp, #20
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	6039      	str	r1, [r7, #0]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	60fb      	str	r3, [r7, #12]
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	781b      	ldrb	r3, [r3, #0]
 8008512:	60bb      	str	r3, [r7, #8]
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	785b      	ldrb	r3, [r3, #1]
 8008518:	2b01      	cmp	r3, #1
 800851a:	d12c      	bne.n	8008576 <USB_EPSetStall+0x76>
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	015a      	lsls	r2, r3, #5
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	4413      	add	r3, r2
 8008524:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	2b00      	cmp	r3, #0
 800852c:	db12      	blt.n	8008554 <USB_EPSetStall+0x54>
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d00f      	beq.n	8008554 <USB_EPSetStall+0x54>
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	015a      	lsls	r2, r3, #5
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	4413      	add	r3, r2
 800853c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	68ba      	ldr	r2, [r7, #8]
 8008544:	0151      	lsls	r1, r2, #5
 8008546:	68fa      	ldr	r2, [r7, #12]
 8008548:	440a      	add	r2, r1
 800854a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800854e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008552:	6013      	str	r3, [r2, #0]
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	015a      	lsls	r2, r3, #5
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	4413      	add	r3, r2
 800855c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	68ba      	ldr	r2, [r7, #8]
 8008564:	0151      	lsls	r1, r2, #5
 8008566:	68fa      	ldr	r2, [r7, #12]
 8008568:	440a      	add	r2, r1
 800856a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800856e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008572:	6013      	str	r3, [r2, #0]
 8008574:	e02b      	b.n	80085ce <USB_EPSetStall+0xce>
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	015a      	lsls	r2, r3, #5
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	4413      	add	r3, r2
 800857e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	2b00      	cmp	r3, #0
 8008586:	db12      	blt.n	80085ae <USB_EPSetStall+0xae>
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d00f      	beq.n	80085ae <USB_EPSetStall+0xae>
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	015a      	lsls	r2, r3, #5
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	4413      	add	r3, r2
 8008596:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	68ba      	ldr	r2, [r7, #8]
 800859e:	0151      	lsls	r1, r2, #5
 80085a0:	68fa      	ldr	r2, [r7, #12]
 80085a2:	440a      	add	r2, r1
 80085a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085a8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80085ac:	6013      	str	r3, [r2, #0]
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	015a      	lsls	r2, r3, #5
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	4413      	add	r3, r2
 80085b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	68ba      	ldr	r2, [r7, #8]
 80085be:	0151      	lsls	r1, r2, #5
 80085c0:	68fa      	ldr	r2, [r7, #12]
 80085c2:	440a      	add	r2, r1
 80085c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80085cc:	6013      	str	r3, [r2, #0]
 80085ce:	2300      	movs	r3, #0
 80085d0:	4618      	mov	r0, r3
 80085d2:	3714      	adds	r7, #20
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr

080085dc <USB_EPClearStall>:
 80085dc:	b480      	push	{r7}
 80085de:	b085      	sub	sp, #20
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	6039      	str	r1, [r7, #0]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	60fb      	str	r3, [r7, #12]
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	60bb      	str	r3, [r7, #8]
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	785b      	ldrb	r3, [r3, #1]
 80085f4:	2b01      	cmp	r3, #1
 80085f6:	d128      	bne.n	800864a <USB_EPClearStall+0x6e>
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	015a      	lsls	r2, r3, #5
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	4413      	add	r3, r2
 8008600:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	68ba      	ldr	r2, [r7, #8]
 8008608:	0151      	lsls	r1, r2, #5
 800860a:	68fa      	ldr	r2, [r7, #12]
 800860c:	440a      	add	r2, r1
 800860e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008612:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008616:	6013      	str	r3, [r2, #0]
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	791b      	ldrb	r3, [r3, #4]
 800861c:	2b03      	cmp	r3, #3
 800861e:	d003      	beq.n	8008628 <USB_EPClearStall+0x4c>
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	791b      	ldrb	r3, [r3, #4]
 8008624:	2b02      	cmp	r3, #2
 8008626:	d138      	bne.n	800869a <USB_EPClearStall+0xbe>
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	015a      	lsls	r2, r3, #5
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	4413      	add	r3, r2
 8008630:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	68ba      	ldr	r2, [r7, #8]
 8008638:	0151      	lsls	r1, r2, #5
 800863a:	68fa      	ldr	r2, [r7, #12]
 800863c:	440a      	add	r2, r1
 800863e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008642:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008646:	6013      	str	r3, [r2, #0]
 8008648:	e027      	b.n	800869a <USB_EPClearStall+0xbe>
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	015a      	lsls	r2, r3, #5
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	4413      	add	r3, r2
 8008652:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	68ba      	ldr	r2, [r7, #8]
 800865a:	0151      	lsls	r1, r2, #5
 800865c:	68fa      	ldr	r2, [r7, #12]
 800865e:	440a      	add	r2, r1
 8008660:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008664:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008668:	6013      	str	r3, [r2, #0]
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	791b      	ldrb	r3, [r3, #4]
 800866e:	2b03      	cmp	r3, #3
 8008670:	d003      	beq.n	800867a <USB_EPClearStall+0x9e>
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	791b      	ldrb	r3, [r3, #4]
 8008676:	2b02      	cmp	r3, #2
 8008678:	d10f      	bne.n	800869a <USB_EPClearStall+0xbe>
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	015a      	lsls	r2, r3, #5
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	4413      	add	r3, r2
 8008682:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	68ba      	ldr	r2, [r7, #8]
 800868a:	0151      	lsls	r1, r2, #5
 800868c:	68fa      	ldr	r2, [r7, #12]
 800868e:	440a      	add	r2, r1
 8008690:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008694:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008698:	6013      	str	r3, [r2, #0]
 800869a:	2300      	movs	r3, #0
 800869c:	4618      	mov	r0, r3
 800869e:	3714      	adds	r7, #20
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr

080086a8 <USB_SetDevAddress>:
 80086a8:	b480      	push	{r7}
 80086aa:	b085      	sub	sp, #20
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	460b      	mov	r3, r1
 80086b2:	70fb      	strb	r3, [r7, #3]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	60fb      	str	r3, [r7, #12]
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	68fa      	ldr	r2, [r7, #12]
 80086c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80086c6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80086ca:	6013      	str	r3, [r2, #0]
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086d2:	681a      	ldr	r2, [r3, #0]
 80086d4:	78fb      	ldrb	r3, [r7, #3]
 80086d6:	011b      	lsls	r3, r3, #4
 80086d8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80086dc:	68f9      	ldr	r1, [r7, #12]
 80086de:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80086e2:	4313      	orrs	r3, r2
 80086e4:	600b      	str	r3, [r1, #0]
 80086e6:	2300      	movs	r3, #0
 80086e8:	4618      	mov	r0, r3
 80086ea:	3714      	adds	r7, #20
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr

080086f4 <USB_DevConnect>:
 80086f4:	b480      	push	{r7}
 80086f6:	b085      	sub	sp, #20
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	60fb      	str	r3, [r7, #12]
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	68fa      	ldr	r2, [r7, #12]
 800870a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800870e:	f023 0303 	bic.w	r3, r3, #3
 8008712:	6013      	str	r3, [r2, #0]
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	68fa      	ldr	r2, [r7, #12]
 800871e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008722:	f023 0302 	bic.w	r3, r3, #2
 8008726:	6053      	str	r3, [r2, #4]
 8008728:	2300      	movs	r3, #0
 800872a:	4618      	mov	r0, r3
 800872c:	3714      	adds	r7, #20
 800872e:	46bd      	mov	sp, r7
 8008730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008734:	4770      	bx	lr

08008736 <USB_DevDisconnect>:
 8008736:	b480      	push	{r7}
 8008738:	b085      	sub	sp, #20
 800873a:	af00      	add	r7, sp, #0
 800873c:	6078      	str	r0, [r7, #4]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	60fb      	str	r3, [r7, #12]
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	68fa      	ldr	r2, [r7, #12]
 800874c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008750:	f023 0303 	bic.w	r3, r3, #3
 8008754:	6013      	str	r3, [r2, #0]
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	68fa      	ldr	r2, [r7, #12]
 8008760:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008764:	f043 0302 	orr.w	r3, r3, #2
 8008768:	6053      	str	r3, [r2, #4]
 800876a:	2300      	movs	r3, #0
 800876c:	4618      	mov	r0, r3
 800876e:	3714      	adds	r7, #20
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr

08008778 <USB_ReadInterrupts>:
 8008778:	b480      	push	{r7}
 800877a:	b085      	sub	sp, #20
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	695b      	ldr	r3, [r3, #20]
 8008784:	60fb      	str	r3, [r7, #12]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	699b      	ldr	r3, [r3, #24]
 800878a:	68fa      	ldr	r2, [r7, #12]
 800878c:	4013      	ands	r3, r2
 800878e:	60fb      	str	r3, [r7, #12]
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	4618      	mov	r0, r3
 8008794:	3714      	adds	r7, #20
 8008796:	46bd      	mov	sp, r7
 8008798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879c:	4770      	bx	lr

0800879e <USB_ReadDevAllOutEpInterrupt>:
 800879e:	b480      	push	{r7}
 80087a0:	b085      	sub	sp, #20
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	6078      	str	r0, [r7, #4]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	60fb      	str	r3, [r7, #12]
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087b0:	699b      	ldr	r3, [r3, #24]
 80087b2:	60bb      	str	r3, [r7, #8]
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087ba:	69db      	ldr	r3, [r3, #28]
 80087bc:	68ba      	ldr	r2, [r7, #8]
 80087be:	4013      	ands	r3, r2
 80087c0:	60bb      	str	r3, [r7, #8]
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	0c1b      	lsrs	r3, r3, #16
 80087c6:	4618      	mov	r0, r3
 80087c8:	3714      	adds	r7, #20
 80087ca:	46bd      	mov	sp, r7
 80087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d0:	4770      	bx	lr

080087d2 <USB_ReadDevAllInEpInterrupt>:
 80087d2:	b480      	push	{r7}
 80087d4:	b085      	sub	sp, #20
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	6078      	str	r0, [r7, #4]
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	60fb      	str	r3, [r7, #12]
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087e4:	699b      	ldr	r3, [r3, #24]
 80087e6:	60bb      	str	r3, [r7, #8]
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087ee:	69db      	ldr	r3, [r3, #28]
 80087f0:	68ba      	ldr	r2, [r7, #8]
 80087f2:	4013      	ands	r3, r2
 80087f4:	60bb      	str	r3, [r7, #8]
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	b29b      	uxth	r3, r3
 80087fa:	4618      	mov	r0, r3
 80087fc:	3714      	adds	r7, #20
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr

08008806 <USB_ReadDevOutEPInterrupt>:
 8008806:	b480      	push	{r7}
 8008808:	b085      	sub	sp, #20
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
 800880e:	460b      	mov	r3, r1
 8008810:	70fb      	strb	r3, [r7, #3]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	60fb      	str	r3, [r7, #12]
 8008816:	78fb      	ldrb	r3, [r7, #3]
 8008818:	015a      	lsls	r2, r3, #5
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	4413      	add	r3, r2
 800881e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008822:	689b      	ldr	r3, [r3, #8]
 8008824:	60bb      	str	r3, [r7, #8]
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800882c:	695b      	ldr	r3, [r3, #20]
 800882e:	68ba      	ldr	r2, [r7, #8]
 8008830:	4013      	ands	r3, r2
 8008832:	60bb      	str	r3, [r7, #8]
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	4618      	mov	r0, r3
 8008838:	3714      	adds	r7, #20
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr

08008842 <USB_ReadDevInEPInterrupt>:
 8008842:	b480      	push	{r7}
 8008844:	b087      	sub	sp, #28
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
 800884a:	460b      	mov	r3, r1
 800884c:	70fb      	strb	r3, [r7, #3]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	617b      	str	r3, [r7, #20]
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008858:	691b      	ldr	r3, [r3, #16]
 800885a:	613b      	str	r3, [r7, #16]
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008862:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008864:	60fb      	str	r3, [r7, #12]
 8008866:	78fb      	ldrb	r3, [r7, #3]
 8008868:	f003 030f 	and.w	r3, r3, #15
 800886c:	68fa      	ldr	r2, [r7, #12]
 800886e:	fa22 f303 	lsr.w	r3, r2, r3
 8008872:	01db      	lsls	r3, r3, #7
 8008874:	b2db      	uxtb	r3, r3
 8008876:	693a      	ldr	r2, [r7, #16]
 8008878:	4313      	orrs	r3, r2
 800887a:	613b      	str	r3, [r7, #16]
 800887c:	78fb      	ldrb	r3, [r7, #3]
 800887e:	015a      	lsls	r2, r3, #5
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	4413      	add	r3, r2
 8008884:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008888:	689b      	ldr	r3, [r3, #8]
 800888a:	693a      	ldr	r2, [r7, #16]
 800888c:	4013      	ands	r3, r2
 800888e:	60bb      	str	r3, [r7, #8]
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	4618      	mov	r0, r3
 8008894:	371c      	adds	r7, #28
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr

0800889e <USB_GetMode>:
 800889e:	b480      	push	{r7}
 80088a0:	b083      	sub	sp, #12
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6078      	str	r0, [r7, #4]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	695b      	ldr	r3, [r3, #20]
 80088aa:	f003 0301 	and.w	r3, r3, #1
 80088ae:	4618      	mov	r0, r3
 80088b0:	370c      	adds	r7, #12
 80088b2:	46bd      	mov	sp, r7
 80088b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b8:	4770      	bx	lr

080088ba <USB_ActivateSetup>:
 80088ba:	b480      	push	{r7}
 80088bc:	b085      	sub	sp, #20
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6078      	str	r0, [r7, #4]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	60fb      	str	r3, [r7, #12]
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	68fa      	ldr	r2, [r7, #12]
 80088d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80088d4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80088d8:	f023 0307 	bic.w	r3, r3, #7
 80088dc:	6013      	str	r3, [r2, #0]
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	68fa      	ldr	r2, [r7, #12]
 80088e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80088ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80088f0:	6053      	str	r3, [r2, #4]
 80088f2:	2300      	movs	r3, #0
 80088f4:	4618      	mov	r0, r3
 80088f6:	3714      	adds	r7, #20
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr

08008900 <USB_EP0_OutStart>:
 8008900:	b480      	push	{r7}
 8008902:	b087      	sub	sp, #28
 8008904:	af00      	add	r7, sp, #0
 8008906:	60f8      	str	r0, [r7, #12]
 8008908:	460b      	mov	r3, r1
 800890a:	607a      	str	r2, [r7, #4]
 800890c:	72fb      	strb	r3, [r7, #11]
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	617b      	str	r3, [r7, #20]
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	333c      	adds	r3, #60	@ 0x3c
 8008916:	3304      	adds	r3, #4
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	613b      	str	r3, [r7, #16]
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	4a26      	ldr	r2, [pc, #152]	@ (80089b8 <USB_EP0_OutStart+0xb8>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d90a      	bls.n	800893a <USB_EP0_OutStart+0x3a>
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008930:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008934:	d101      	bne.n	800893a <USB_EP0_OutStart+0x3a>
 8008936:	2300      	movs	r3, #0
 8008938:	e037      	b.n	80089aa <USB_EP0_OutStart+0xaa>
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008940:	461a      	mov	r2, r3
 8008942:	2300      	movs	r3, #0
 8008944:	6113      	str	r3, [r2, #16]
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800894c:	691b      	ldr	r3, [r3, #16]
 800894e:	697a      	ldr	r2, [r7, #20]
 8008950:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008954:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008958:	6113      	str	r3, [r2, #16]
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008960:	691b      	ldr	r3, [r3, #16]
 8008962:	697a      	ldr	r2, [r7, #20]
 8008964:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008968:	f043 0318 	orr.w	r3, r3, #24
 800896c:	6113      	str	r3, [r2, #16]
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008974:	691b      	ldr	r3, [r3, #16]
 8008976:	697a      	ldr	r2, [r7, #20]
 8008978:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800897c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008980:	6113      	str	r3, [r2, #16]
 8008982:	7afb      	ldrb	r3, [r7, #11]
 8008984:	2b01      	cmp	r3, #1
 8008986:	d10f      	bne.n	80089a8 <USB_EP0_OutStart+0xa8>
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800898e:	461a      	mov	r2, r3
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6153      	str	r3, [r2, #20]
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	697a      	ldr	r2, [r7, #20]
 800899e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80089a2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80089a6:	6013      	str	r3, [r2, #0]
 80089a8:	2300      	movs	r3, #0
 80089aa:	4618      	mov	r0, r3
 80089ac:	371c      	adds	r7, #28
 80089ae:	46bd      	mov	sp, r7
 80089b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b4:	4770      	bx	lr
 80089b6:	bf00      	nop
 80089b8:	4f54300a 	.word	0x4f54300a

080089bc <USB_CoreReset>:
 80089bc:	b480      	push	{r7}
 80089be:	b085      	sub	sp, #20
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	2300      	movs	r3, #0
 80089c6:	60fb      	str	r3, [r7, #12]
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	3301      	adds	r3, #1
 80089cc:	60fb      	str	r3, [r7, #12]
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80089d4:	d901      	bls.n	80089da <USB_CoreReset+0x1e>
 80089d6:	2303      	movs	r3, #3
 80089d8:	e022      	b.n	8008a20 <USB_CoreReset+0x64>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	691b      	ldr	r3, [r3, #16]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	daf2      	bge.n	80089c8 <USB_CoreReset+0xc>
 80089e2:	230a      	movs	r3, #10
 80089e4:	60fb      	str	r3, [r7, #12]
 80089e6:	e002      	b.n	80089ee <USB_CoreReset+0x32>
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	3b01      	subs	r3, #1
 80089ec:	60fb      	str	r3, [r7, #12]
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d1f9      	bne.n	80089e8 <USB_CoreReset+0x2c>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	691b      	ldr	r3, [r3, #16]
 80089f8:	f043 0201 	orr.w	r2, r3, #1
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	611a      	str	r2, [r3, #16]
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	3301      	adds	r3, #1
 8008a04:	60fb      	str	r3, [r7, #12]
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008a0c:	d901      	bls.n	8008a12 <USB_CoreReset+0x56>
 8008a0e:	2303      	movs	r3, #3
 8008a10:	e006      	b.n	8008a20 <USB_CoreReset+0x64>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	691b      	ldr	r3, [r3, #16]
 8008a16:	f003 0301 	and.w	r3, r3, #1
 8008a1a:	2b01      	cmp	r3, #1
 8008a1c:	d0f0      	beq.n	8008a00 <USB_CoreReset+0x44>
 8008a1e:	2300      	movs	r3, #0
 8008a20:	4618      	mov	r0, r3
 8008a22:	3714      	adds	r7, #20
 8008a24:	46bd      	mov	sp, r7
 8008a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2a:	4770      	bx	lr

08008a2c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  USBD_COMPOSITE_Mount_Class();
 8008a30:	f001 fc7a 	bl	800a328 <USBD_COMPOSITE_Mount_Class>
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_HS) != USBD_OK)
  {
    Error_Handler();
  }
#else
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_FS) != USBD_OK)
 8008a34:	2200      	movs	r2, #0
 8008a36:	4917      	ldr	r1, [pc, #92]	@ (8008a94 <MX_USB_DEVICE_Init+0x68>)
 8008a38:	4817      	ldr	r0, [pc, #92]	@ (8008a98 <MX_USB_DEVICE_Init+0x6c>)
 8008a3a:	f002 f899 	bl	800ab70 <USBD_Init>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d001      	beq.n	8008a48 <MX_USB_DEVICE_Init+0x1c>
  {
    Error_Handler();
 8008a44:	f7f8 fad4 	bl	8000ff0 <Error_Handler>
  }
#endif
  if (USBD_RegisterClass(&hUsbDevice, &USBD_COMPOSITE) != USBD_OK)
 8008a48:	4914      	ldr	r1, [pc, #80]	@ (8008a9c <MX_USB_DEVICE_Init+0x70>)
 8008a4a:	4813      	ldr	r0, [pc, #76]	@ (8008a98 <MX_USB_DEVICE_Init+0x6c>)
 8008a4c:	f002 f8bc 	bl	800abc8 <USBD_RegisterClass>
 8008a50:	4603      	mov	r3, r0
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d001      	beq.n	8008a5a <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8008a56:	f7f8 facb 	bl	8000ff0 <Error_Handler>
  }
#if (USBD_USE_CDC_ACM == 1)
  if (USBD_CDC_ACM_RegisterInterface(&hUsbDevice, &USBD_CDC_ACM_fops) != USBD_OK)
 8008a5a:	4911      	ldr	r1, [pc, #68]	@ (8008aa0 <MX_USB_DEVICE_Init+0x74>)
 8008a5c:	480e      	ldr	r0, [pc, #56]	@ (8008a98 <MX_USB_DEVICE_Init+0x6c>)
 8008a5e:	f001 f93d 	bl	8009cdc <USBD_CDC_ACM_RegisterInterface>
 8008a62:	4603      	mov	r3, r0
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d001      	beq.n	8008a6c <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8008a68:	f7f8 fac2 	bl	8000ff0 <Error_Handler>
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDevice, &USBD_CustomHID_fops) != USBD_OK)
 8008a6c:	490d      	ldr	r1, [pc, #52]	@ (8008aa4 <MX_USB_DEVICE_Init+0x78>)
 8008a6e:	480a      	ldr	r0, [pc, #40]	@ (8008a98 <MX_USB_DEVICE_Init+0x6c>)
 8008a70:	f002 f830 	bl	800aad4 <USBD_CUSTOM_HID_RegisterInterface>
 8008a74:	4603      	mov	r3, r0
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d001      	beq.n	8008a7e <MX_USB_DEVICE_Init+0x52>
  {
    Error_Handler();
 8008a7a:	f7f8 fab9 	bl	8000ff0 <Error_Handler>
  if (USBD_PRNT_RegisterInterface(&hUsbDevice, &USBD_PRNT_fops) != USBD_OK)
  {
    Error_Handler();
  }
#endif
  if (USBD_Start(&hUsbDevice) != USBD_OK)
 8008a7e:	4806      	ldr	r0, [pc, #24]	@ (8008a98 <MX_USB_DEVICE_Init+0x6c>)
 8008a80:	f002 f8e0 	bl	800ac44 <USBD_Start>
 8008a84:	4603      	mov	r3, r0
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d001      	beq.n	8008a8e <MX_USB_DEVICE_Init+0x62>
  {
    Error_Handler();
 8008a8a:	f7f8 fab1 	bl	8000ff0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008a8e:	bf00      	nop
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	bf00      	nop
 8008a94:	2000002c 	.word	0x2000002c
 8008a98:	20001350 	.word	0x20001350
 8008a9c:	20000190 	.word	0x20000190
 8008aa0:	20000018 	.word	0x20000018
 8008aa4:	200000a0 	.word	0x200000a0

08008aa8 <CDC_CH_To_UART_Handle>:
static int8_t CDC_Receive(uint8_t cdc_ch, uint8_t *pbuf, uint32_t *Len);
static int8_t CDC_TransmitCplt(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len, uint8_t epnum);

/* USER CODE BEGIN PRIVATE_FUNCTIONS_DECLARATION */
UART_HandleTypeDef *CDC_CH_To_UART_Handle(uint8_t cdc_ch)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b085      	sub	sp, #20
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	4603      	mov	r3, r0
 8008ab0:	71fb      	strb	r3, [r7, #7]
  UART_HandleTypeDef *handle = NULL;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	60fb      	str	r3, [r7, #12]

  if (cdc_ch == 0)
 8008ab6:	79fb      	ldrb	r3, [r7, #7]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d101      	bne.n	8008ac0 <CDC_CH_To_UART_Handle+0x18>
  {
    handle = &huart5;
 8008abc:	4b04      	ldr	r3, [pc, #16]	@ (8008ad0 <CDC_CH_To_UART_Handle+0x28>)
 8008abe:	60fb      	str	r3, [r7, #12]
  else if (cdc_ch == 2)
  {
    handle = &huart3;
  }
#endif
  return handle;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3714      	adds	r7, #20
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008acc:	4770      	bx	lr
 8008ace:	bf00      	nop
 8008ad0:	20000d60 	.word	0x20000d60

08008ad4 <UART_Handle_TO_CDC_CH>:

uint8_t UART_Handle_TO_CDC_CH(UART_HandleTypeDef *handle)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b085      	sub	sp, #20
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  uint8_t cdc_ch = 0;
 8008adc:	2300      	movs	r3, #0
 8008ade:	73fb      	strb	r3, [r7, #15]

  if (handle == &huart5)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	4a06      	ldr	r2, [pc, #24]	@ (8008afc <UART_Handle_TO_CDC_CH+0x28>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d101      	bne.n	8008aec <UART_Handle_TO_CDC_CH+0x18>
  {
    cdc_ch = 0;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	73fb      	strb	r3, [r7, #15]
  else if (handle == &huart3)
  {
    cdc_ch = 2;
  }
#endif
  return cdc_ch;
 8008aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3714      	adds	r7, #20
 8008af2:	46bd      	mov	sp, r7
 8008af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af8:	4770      	bx	lr
 8008afa:	bf00      	nop
 8008afc:	20000d60 	.word	0x20000d60

08008b00 <Change_UART_Setting>:
//
void Change_UART_Setting(uint8_t cdc_ch)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b086      	sub	sp, #24
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	4603      	mov	r3, r0
 8008b08:	71fb      	strb	r3, [r7, #7]
  UART_HandleTypeDef *handle = CDC_CH_To_UART_Handle(cdc_ch);
 8008b0a:	79fb      	ldrb	r3, [r7, #7]
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f7ff ffcb 	bl	8008aa8 <CDC_CH_To_UART_Handle>
 8008b12:	6178      	str	r0, [r7, #20]

  if (HAL_UART_DeInit(handle) != HAL_OK)
 8008b14:	6978      	ldr	r0, [r7, #20]
 8008b16:	f7fd fbf7 	bl	8006308 <HAL_UART_DeInit>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d001      	beq.n	8008b24 <Change_UART_Setting+0x24>
  {
    /* Initialization Error */
    Error_Handler();
 8008b20:	f7f8 fa66 	bl	8000ff0 <Error_Handler>
  }
  /* set the Stop bit */
  switch (Line_Coding[cdc_ch].format)
 8008b24:	79fb      	ldrb	r3, [r7, #7]
 8008b26:	4a5c      	ldr	r2, [pc, #368]	@ (8008c98 <Change_UART_Setting+0x198>)
 8008b28:	00db      	lsls	r3, r3, #3
 8008b2a:	4413      	add	r3, r2
 8008b2c:	791b      	ldrb	r3, [r3, #4]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d002      	beq.n	8008b38 <Change_UART_Setting+0x38>
 8008b32:	2b02      	cmp	r3, #2
 8008b34:	d004      	beq.n	8008b40 <Change_UART_Setting+0x40>
 8008b36:	e008      	b.n	8008b4a <Change_UART_Setting+0x4a>
  {
  case 0:
    handle->Init.StopBits = UART_STOPBITS_1;
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	60da      	str	r2, [r3, #12]
    break;
 8008b3e:	e008      	b.n	8008b52 <Change_UART_Setting+0x52>
  case 2:
    handle->Init.StopBits = UART_STOPBITS_2;
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008b46:	60da      	str	r2, [r3, #12]
    break;
 8008b48:	e003      	b.n	8008b52 <Change_UART_Setting+0x52>
  default:
    handle->Init.StopBits = UART_STOPBITS_1;
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	60da      	str	r2, [r3, #12]
    break;
 8008b50:	bf00      	nop
  }

  /* set the parity bit*/
  switch (Line_Coding[cdc_ch].paritytype)
 8008b52:	79fb      	ldrb	r3, [r7, #7]
 8008b54:	4a50      	ldr	r2, [pc, #320]	@ (8008c98 <Change_UART_Setting+0x198>)
 8008b56:	00db      	lsls	r3, r3, #3
 8008b58:	4413      	add	r3, r2
 8008b5a:	795b      	ldrb	r3, [r3, #5]
 8008b5c:	2b02      	cmp	r3, #2
 8008b5e:	d00f      	beq.n	8008b80 <Change_UART_Setting+0x80>
 8008b60:	2b02      	cmp	r3, #2
 8008b62:	dc12      	bgt.n	8008b8a <Change_UART_Setting+0x8a>
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d002      	beq.n	8008b6e <Change_UART_Setting+0x6e>
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d004      	beq.n	8008b76 <Change_UART_Setting+0x76>
 8008b6c:	e00d      	b.n	8008b8a <Change_UART_Setting+0x8a>
  {
  case 0:
    handle->Init.Parity = UART_PARITY_NONE;
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	2200      	movs	r2, #0
 8008b72:	611a      	str	r2, [r3, #16]
    break;
 8008b74:	e00d      	b.n	8008b92 <Change_UART_Setting+0x92>
  case 1:
    handle->Init.Parity = UART_PARITY_ODD;
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8008b7c:	611a      	str	r2, [r3, #16]
    break;
 8008b7e:	e008      	b.n	8008b92 <Change_UART_Setting+0x92>
  case 2:
    handle->Init.Parity = UART_PARITY_EVEN;
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008b86:	611a      	str	r2, [r3, #16]
    break;
 8008b88:	e003      	b.n	8008b92 <Change_UART_Setting+0x92>
  default:
    handle->Init.Parity = UART_PARITY_NONE;
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	611a      	str	r2, [r3, #16]
    break;
 8008b90:	bf00      	nop
  }

  /*set the data type : only 8bits and 9bits is supported */
  switch (Line_Coding[cdc_ch].datatype)
 8008b92:	79fb      	ldrb	r3, [r7, #7]
 8008b94:	4a40      	ldr	r2, [pc, #256]	@ (8008c98 <Change_UART_Setting+0x198>)
 8008b96:	00db      	lsls	r3, r3, #3
 8008b98:	4413      	add	r3, r2
 8008b9a:	799b      	ldrb	r3, [r3, #6]
 8008b9c:	2b07      	cmp	r3, #7
 8008b9e:	d002      	beq.n	8008ba6 <Change_UART_Setting+0xa6>
 8008ba0:	2b08      	cmp	r3, #8
 8008ba2:	d004      	beq.n	8008bae <Change_UART_Setting+0xae>
 8008ba4:	e010      	b.n	8008bc8 <Change_UART_Setting+0xc8>
  {
  case 0x07:
    /* With this configuration a parity (Even or Odd) must be set */
    handle->Init.WordLength = UART_WORDLENGTH_8B;
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	609a      	str	r2, [r3, #8]
    break;
 8008bac:	e010      	b.n	8008bd0 <Change_UART_Setting+0xd0>
  case 0x08:
    if (handle->Init.Parity == UART_PARITY_NONE)
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	691b      	ldr	r3, [r3, #16]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d103      	bne.n	8008bbe <Change_UART_Setting+0xbe>
    {
      handle->Init.WordLength = UART_WORDLENGTH_8B;
 8008bb6:	697b      	ldr	r3, [r7, #20]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	609a      	str	r2, [r3, #8]
    else
    {
      handle->Init.WordLength = UART_WORDLENGTH_9B;
    }

    break;
 8008bbc:	e008      	b.n	8008bd0 <Change_UART_Setting+0xd0>
      handle->Init.WordLength = UART_WORDLENGTH_9B;
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8008bc4:	609a      	str	r2, [r3, #8]
    break;
 8008bc6:	e003      	b.n	8008bd0 <Change_UART_Setting+0xd0>
  default:
    handle->Init.WordLength = UART_WORDLENGTH_8B;
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	609a      	str	r2, [r3, #8]
    break;
 8008bce:	bf00      	nop
  }

  if (Line_Coding[cdc_ch].bitrate == 0)
 8008bd0:	79fb      	ldrb	r3, [r7, #7]
 8008bd2:	4a31      	ldr	r2, [pc, #196]	@ (8008c98 <Change_UART_Setting+0x198>)
 8008bd4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d105      	bne.n	8008be8 <Change_UART_Setting+0xe8>
  {
    Line_Coding[cdc_ch].bitrate = 115200;
 8008bdc:	79fb      	ldrb	r3, [r7, #7]
 8008bde:	4a2e      	ldr	r2, [pc, #184]	@ (8008c98 <Change_UART_Setting+0x198>)
 8008be0:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8008be4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
  }

  handle->Init.BaudRate = Line_Coding[cdc_ch].bitrate;
 8008be8:	79fb      	ldrb	r3, [r7, #7]
 8008bea:	4a2b      	ldr	r2, [pc, #172]	@ (8008c98 <Change_UART_Setting+0x198>)
 8008bec:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	605a      	str	r2, [r3, #4]
  handle->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	619a      	str	r2, [r3, #24]
  handle->Init.Mode = UART_MODE_TX_RX;
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	220c      	movs	r2, #12
 8008bfe:	615a      	str	r2, [r3, #20]
  handle->Init.OverSampling = UART_OVERSAMPLING_16;
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	2200      	movs	r2, #0
 8008c04:	61da      	str	r2, [r3, #28]

  if (HAL_UART_Init(handle) != HAL_OK)
 8008c06:	6978      	ldr	r0, [r7, #20]
 8008c08:	f7fd fb2e 	bl	8006268 <HAL_UART_Init>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d001      	beq.n	8008c16 <Change_UART_Setting+0x116>
  {
    /* Initialization Error */
    Error_Handler();
 8008c12:	f7f8 f9ed 	bl	8000ff0 <Error_Handler>
  }

  /** rx for uart and tx buffer of usb */
  if (HAL_UART_Receive_IT(handle, TX_Buffer[cdc_ch], 1) != HAL_OK)
 8008c16:	79fb      	ldrb	r3, [r7, #7]
 8008c18:	019b      	lsls	r3, r3, #6
 8008c1a:	4a20      	ldr	r2, [pc, #128]	@ (8008c9c <Change_UART_Setting+0x19c>)
 8008c1c:	4413      	add	r3, r2
 8008c1e:	2201      	movs	r2, #1
 8008c20:	4619      	mov	r1, r3
 8008c22:	6978      	ldr	r0, [r7, #20]
 8008c24:	f7fd fc2d 	bl	8006482 <HAL_UART_Receive_IT>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d001      	beq.n	8008c32 <Change_UART_Setting+0x132>
  {
    /* Transfer error in reception process */
    Error_Handler();
 8008c2e:	f7f8 f9df 	bl	8000ff0 <Error_Handler>
  }
  __HAL_UART_CLEAR_OREFLAG(handle);
 8008c32:	2300      	movs	r3, #0
 8008c34:	613b      	str	r3, [r7, #16]
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	613b      	str	r3, [r7, #16]
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	613b      	str	r3, [r7, #16]
 8008c46:	693b      	ldr	r3, [r7, #16]
  __HAL_UART_CLEAR_NEFLAG(handle);
 8008c48:	2300      	movs	r3, #0
 8008c4a:	60fb      	str	r3, [r7, #12]
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	60fb      	str	r3, [r7, #12]
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	60fb      	str	r3, [r7, #12]
 8008c5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_UART_CLEAR_FEFLAG(handle);
 8008c5e:	2300      	movs	r3, #0
 8008c60:	60bb      	str	r3, [r7, #8]
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	60bb      	str	r3, [r7, #8]
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	60bb      	str	r3, [r7, #8]
 8008c72:	68bb      	ldr	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8008c74:	f3bf 8f4f 	dsb	sy
}
 8008c78:	bf00      	nop
  __DSB();  // Ensure instruction completion
  Write_Index[cdc_ch] = 0;
 8008c7a:	79fb      	ldrb	r3, [r7, #7]
 8008c7c:	4a08      	ldr	r2, [pc, #32]	@ (8008ca0 <Change_UART_Setting+0x1a0>)
 8008c7e:	2100      	movs	r1, #0
 8008c80:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  Read_Index[cdc_ch] = 0;
 8008c84:	79fb      	ldrb	r3, [r7, #7]
 8008c86:	4a07      	ldr	r2, [pc, #28]	@ (8008ca4 <Change_UART_Setting+0x1a4>)
 8008c88:	2100      	movs	r1, #0
 8008c8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8008c8e:	bf00      	nop
 8008c90:	3718      	adds	r7, #24
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
 8008c96:	bf00      	nop
 8008c98:	200016ec 	.word	0x200016ec
 8008c9c:	200016ac 	.word	0x200016ac
 8008ca0:	200016f4 	.word	0x200016f4
 8008ca4:	200016f8 	.word	0x200016f8

08008ca8 <CDC_Init>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init(uint8_t cdc_ch)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b082      	sub	sp, #8
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	4603      	mov	r3, r0
 8008cb0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */

  /* ##-1- Set Application Buffers */
  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, RX_Buffer[cdc_ch]);
 8008cb2:	79fb      	ldrb	r3, [r7, #7]
 8008cb4:	019b      	lsls	r3, r3, #6
 8008cb6:	4a0d      	ldr	r2, [pc, #52]	@ (8008cec <CDC_Init+0x44>)
 8008cb8:	441a      	add	r2, r3
 8008cba:	79fb      	ldrb	r3, [r7, #7]
 8008cbc:	490c      	ldr	r1, [pc, #48]	@ (8008cf0 <CDC_Init+0x48>)
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f001 f846 	bl	8009d50 <USBD_CDC_SetRxBuffer>

  //  /*##-2- Start the TIM Base generation in interrupt mode ####################*/
  //  /* Start Channel1 */
    if ((HAL_TIM_Base_Start_IT(&htim1) != HAL_OK )||(HAL_TIM_Base_Start_IT(&htim2) != HAL_OK ))
 8008cc4:	480b      	ldr	r0, [pc, #44]	@ (8008cf4 <CDC_Init+0x4c>)
 8008cc6:	f7fc fe81 	bl	80059cc <HAL_TIM_Base_Start_IT>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d105      	bne.n	8008cdc <CDC_Init+0x34>
 8008cd0:	4809      	ldr	r0, [pc, #36]	@ (8008cf8 <CDC_Init+0x50>)
 8008cd2:	f7fc fe7b 	bl	80059cc <HAL_TIM_Base_Start_IT>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d001      	beq.n	8008ce0 <CDC_Init+0x38>
    {
      /* Starting Error */
    	//HAL_TIM_Base_Stop_IT
      Error_Handler();
 8008cdc:	f7f8 f988 	bl	8000ff0 <Error_Handler>
    }

  return (USBD_OK);
 8008ce0:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3708      	adds	r7, #8
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
 8008cea:	bf00      	nop
 8008cec:	2000166c 	.word	0x2000166c
 8008cf0:	20001350 	.word	0x20001350
 8008cf4:	20000c40 	.word	0x20000c40
 8008cf8:	20000c88 	.word	0x20000c88

08008cfc <CDC_DeInit>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit(uint8_t cdc_ch)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b082      	sub	sp, #8
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	4603      	mov	r3, r0
 8008d04:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  /* DeInitialize the UART peripheral */
    if (HAL_UART_DeInit(CDC_CH_To_UART_Handle(cdc_ch)) != HAL_OK)
 8008d06:	79fb      	ldrb	r3, [r7, #7]
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f7ff fecd 	bl	8008aa8 <CDC_CH_To_UART_Handle>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	4618      	mov	r0, r3
 8008d12:	f7fd faf9 	bl	8006308 <HAL_UART_DeInit>
 8008d16:	4603      	mov	r3, r0
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d001      	beq.n	8008d20 <CDC_DeInit+0x24>
    {
      /* Initialization Error */
      Error_Handler();
 8008d1c:	f7f8 f968 	bl	8000ff0 <Error_Handler>
    }
    if ((HAL_TIM_Base_Stop_IT(&htim1) != HAL_OK )||(HAL_TIM_Base_Stop_IT(&htim2) != HAL_OK ))
 8008d20:	4809      	ldr	r0, [pc, #36]	@ (8008d48 <CDC_DeInit+0x4c>)
 8008d22:	f7fc fec3 	bl	8005aac <HAL_TIM_Base_Stop_IT>
 8008d26:	4603      	mov	r3, r0
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d105      	bne.n	8008d38 <CDC_DeInit+0x3c>
 8008d2c:	4807      	ldr	r0, [pc, #28]	@ (8008d4c <CDC_DeInit+0x50>)
 8008d2e:	f7fc febd 	bl	8005aac <HAL_TIM_Base_Stop_IT>
 8008d32:	4603      	mov	r3, r0
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d001      	beq.n	8008d3c <CDC_DeInit+0x40>
        {
          /* Starting Error */
          Error_Handler();
 8008d38:	f7f8 f95a 	bl	8000ff0 <Error_Handler>
        }
  return (USBD_OK);
 8008d3c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3708      	adds	r7, #8
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}
 8008d46:	bf00      	nop
 8008d48:	20000c40 	.word	0x20000c40
 8008d4c:	20000c88 	.word	0x20000c88

08008d50 <CDC_Control>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control(uint8_t cdc_ch, uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b082      	sub	sp, #8
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	603a      	str	r2, [r7, #0]
 8008d58:	461a      	mov	r2, r3
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	71fb      	strb	r3, [r7, #7]
 8008d5e:	460b      	mov	r3, r1
 8008d60:	71bb      	strb	r3, [r7, #6]
 8008d62:	4613      	mov	r3, r2
 8008d64:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd)
 8008d66:	79bb      	ldrb	r3, [r7, #6]
 8008d68:	2b23      	cmp	r3, #35	@ 0x23
 8008d6a:	f200 80ba 	bhi.w	8008ee2 <CDC_Control+0x192>
 8008d6e:	a201      	add	r2, pc, #4	@ (adr r2, 8008d74 <CDC_Control+0x24>)
 8008d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d74:	08008ee3 	.word	0x08008ee3
 8008d78:	08008ee3 	.word	0x08008ee3
 8008d7c:	08008ee3 	.word	0x08008ee3
 8008d80:	08008ee3 	.word	0x08008ee3
 8008d84:	08008ee3 	.word	0x08008ee3
 8008d88:	08008ee3 	.word	0x08008ee3
 8008d8c:	08008ee3 	.word	0x08008ee3
 8008d90:	08008ee3 	.word	0x08008ee3
 8008d94:	08008ee3 	.word	0x08008ee3
 8008d98:	08008ee3 	.word	0x08008ee3
 8008d9c:	08008ee3 	.word	0x08008ee3
 8008da0:	08008ee3 	.word	0x08008ee3
 8008da4:	08008ee3 	.word	0x08008ee3
 8008da8:	08008ee3 	.word	0x08008ee3
 8008dac:	08008ee3 	.word	0x08008ee3
 8008db0:	08008ee3 	.word	0x08008ee3
 8008db4:	08008ee3 	.word	0x08008ee3
 8008db8:	08008ee3 	.word	0x08008ee3
 8008dbc:	08008ee3 	.word	0x08008ee3
 8008dc0:	08008ee3 	.word	0x08008ee3
 8008dc4:	08008ee3 	.word	0x08008ee3
 8008dc8:	08008ee3 	.word	0x08008ee3
 8008dcc:	08008ee3 	.word	0x08008ee3
 8008dd0:	08008ee3 	.word	0x08008ee3
 8008dd4:	08008ee3 	.word	0x08008ee3
 8008dd8:	08008ee3 	.word	0x08008ee3
 8008ddc:	08008ee3 	.word	0x08008ee3
 8008de0:	08008ee3 	.word	0x08008ee3
 8008de4:	08008ee3 	.word	0x08008ee3
 8008de8:	08008ee3 	.word	0x08008ee3
 8008dec:	08008ee3 	.word	0x08008ee3
 8008df0:	08008ee3 	.word	0x08008ee3
 8008df4:	08008e05 	.word	0x08008e05
 8008df8:	08008e6d 	.word	0x08008e6d
 8008dfc:	08008ee3 	.word	0x08008ee3
 8008e00:	08008ee3 	.word	0x08008ee3
    /*                                        3 - Mark                             */
    /*                                        4 - Space                            */
    /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
    /*******************************************************************************/
  case CDC_SET_LINE_CODING:
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	781b      	ldrb	r3, [r3, #0]
 8008e08:	461a      	mov	r2, r3
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	781b      	ldrb	r3, [r3, #0]
 8008e10:	021b      	lsls	r3, r3, #8
 8008e12:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	3302      	adds	r3, #2
 8008e18:	781b      	ldrb	r3, [r3, #0]
 8008e1a:	041b      	lsls	r3, r3, #16
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8008e1c:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	3303      	adds	r3, #3
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	061b      	lsls	r3, r3, #24
 8008e26:	431a      	orrs	r2, r3
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8008e28:	79fb      	ldrb	r3, [r7, #7]
 8008e2a:	4611      	mov	r1, r2
 8008e2c:	4a30      	ldr	r2, [pc, #192]	@ (8008ef0 <CDC_Control+0x1a0>)
 8008e2e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    Line_Coding[cdc_ch].format = pbuf[4];
 8008e32:	79fb      	ldrb	r3, [r7, #7]
 8008e34:	683a      	ldr	r2, [r7, #0]
 8008e36:	7911      	ldrb	r1, [r2, #4]
 8008e38:	4a2d      	ldr	r2, [pc, #180]	@ (8008ef0 <CDC_Control+0x1a0>)
 8008e3a:	00db      	lsls	r3, r3, #3
 8008e3c:	4413      	add	r3, r2
 8008e3e:	460a      	mov	r2, r1
 8008e40:	711a      	strb	r2, [r3, #4]
    Line_Coding[cdc_ch].paritytype = pbuf[5];
 8008e42:	79fb      	ldrb	r3, [r7, #7]
 8008e44:	683a      	ldr	r2, [r7, #0]
 8008e46:	7951      	ldrb	r1, [r2, #5]
 8008e48:	4a29      	ldr	r2, [pc, #164]	@ (8008ef0 <CDC_Control+0x1a0>)
 8008e4a:	00db      	lsls	r3, r3, #3
 8008e4c:	4413      	add	r3, r2
 8008e4e:	460a      	mov	r2, r1
 8008e50:	715a      	strb	r2, [r3, #5]
    Line_Coding[cdc_ch].datatype = pbuf[6];
 8008e52:	79fb      	ldrb	r3, [r7, #7]
 8008e54:	683a      	ldr	r2, [r7, #0]
 8008e56:	7991      	ldrb	r1, [r2, #6]
 8008e58:	4a25      	ldr	r2, [pc, #148]	@ (8008ef0 <CDC_Control+0x1a0>)
 8008e5a:	00db      	lsls	r3, r3, #3
 8008e5c:	4413      	add	r3, r2
 8008e5e:	460a      	mov	r2, r1
 8008e60:	719a      	strb	r2, [r3, #6]

    Change_UART_Setting(cdc_ch);
 8008e62:	79fb      	ldrb	r3, [r7, #7]
 8008e64:	4618      	mov	r0, r3
 8008e66:	f7ff fe4b 	bl	8008b00 <Change_UART_Setting>
    break;
 8008e6a:	e03b      	b.n	8008ee4 <CDC_Control+0x194>

  case CDC_GET_LINE_CODING:
    pbuf[0] = (uint8_t)(Line_Coding[cdc_ch].bitrate);
 8008e6c:	79fb      	ldrb	r3, [r7, #7]
 8008e6e:	4a20      	ldr	r2, [pc, #128]	@ (8008ef0 <CDC_Control+0x1a0>)
 8008e70:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008e74:	b2da      	uxtb	r2, r3
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	701a      	strb	r2, [r3, #0]
    pbuf[1] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 8);
 8008e7a:	79fb      	ldrb	r3, [r7, #7]
 8008e7c:	4a1c      	ldr	r2, [pc, #112]	@ (8008ef0 <CDC_Control+0x1a0>)
 8008e7e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008e82:	0a1a      	lsrs	r2, r3, #8
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	3301      	adds	r3, #1
 8008e88:	b2d2      	uxtb	r2, r2
 8008e8a:	701a      	strb	r2, [r3, #0]
    pbuf[2] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 16);
 8008e8c:	79fb      	ldrb	r3, [r7, #7]
 8008e8e:	4a18      	ldr	r2, [pc, #96]	@ (8008ef0 <CDC_Control+0x1a0>)
 8008e90:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008e94:	0c1a      	lsrs	r2, r3, #16
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	3302      	adds	r3, #2
 8008e9a:	b2d2      	uxtb	r2, r2
 8008e9c:	701a      	strb	r2, [r3, #0]
    pbuf[3] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 24);
 8008e9e:	79fb      	ldrb	r3, [r7, #7]
 8008ea0:	4a13      	ldr	r2, [pc, #76]	@ (8008ef0 <CDC_Control+0x1a0>)
 8008ea2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008ea6:	0e1a      	lsrs	r2, r3, #24
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	3303      	adds	r3, #3
 8008eac:	b2d2      	uxtb	r2, r2
 8008eae:	701a      	strb	r2, [r3, #0]
    pbuf[4] = Line_Coding[cdc_ch].format;
 8008eb0:	79fb      	ldrb	r3, [r7, #7]
 8008eb2:	683a      	ldr	r2, [r7, #0]
 8008eb4:	3204      	adds	r2, #4
 8008eb6:	490e      	ldr	r1, [pc, #56]	@ (8008ef0 <CDC_Control+0x1a0>)
 8008eb8:	00db      	lsls	r3, r3, #3
 8008eba:	440b      	add	r3, r1
 8008ebc:	791b      	ldrb	r3, [r3, #4]
 8008ebe:	7013      	strb	r3, [r2, #0]
    pbuf[5] = Line_Coding[cdc_ch].paritytype;
 8008ec0:	79fb      	ldrb	r3, [r7, #7]
 8008ec2:	683a      	ldr	r2, [r7, #0]
 8008ec4:	3205      	adds	r2, #5
 8008ec6:	490a      	ldr	r1, [pc, #40]	@ (8008ef0 <CDC_Control+0x1a0>)
 8008ec8:	00db      	lsls	r3, r3, #3
 8008eca:	440b      	add	r3, r1
 8008ecc:	795b      	ldrb	r3, [r3, #5]
 8008ece:	7013      	strb	r3, [r2, #0]
    pbuf[6] = Line_Coding[cdc_ch].datatype;
 8008ed0:	79fb      	ldrb	r3, [r7, #7]
 8008ed2:	683a      	ldr	r2, [r7, #0]
 8008ed4:	3206      	adds	r2, #6
 8008ed6:	4906      	ldr	r1, [pc, #24]	@ (8008ef0 <CDC_Control+0x1a0>)
 8008ed8:	00db      	lsls	r3, r3, #3
 8008eda:	440b      	add	r3, r1
 8008edc:	799b      	ldrb	r3, [r3, #6]
 8008ede:	7013      	strb	r3, [r2, #0]
    break;
 8008ee0:	e000      	b.n	8008ee4 <CDC_Control+0x194>
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008ee2:	bf00      	nop
  }

  return (USBD_OK);
 8008ee4:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3708      	adds	r7, #8
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	200016ec 	.word	0x200016ec

08008ef4 <CDC_Receive>:
//  USBD_CDC_ReceivePacket(cdc_ch, &hUsbDevice);
//  return (USBD_OK);
//  /* USER CODE END 6 */
//}
static int8_t CDC_Receive(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len)
{
 8008ef4:	b5b0      	push	{r4, r5, r7, lr}
 8008ef6:	b086      	sub	sp, #24
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	4603      	mov	r3, r0
 8008efc:	60b9      	str	r1, [r7, #8]
 8008efe:	607a      	str	r2, [r7, #4]
 8008f00:	73fb      	strb	r3, [r7, #15]
  for (uint32_t i = 0; i < *Len; i++)
 8008f02:	2300      	movs	r3, #0
 8008f04:	617b      	str	r3, [r7, #20]
 8008f06:	e021      	b.n	8008f4c <CDC_Receive+0x58>
  {
    CDC_RX_Buffer[cdc_ch][CDC_RX_WriteIndex[cdc_ch]++] = Buf[i];
 8008f08:	68ba      	ldr	r2, [r7, #8]
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	18d0      	adds	r0, r2, r3
 8008f0e:	7bf9      	ldrb	r1, [r7, #15]
 8008f10:	7bfa      	ldrb	r2, [r7, #15]
 8008f12:	4b19      	ldr	r3, [pc, #100]	@ (8008f78 <CDC_Receive+0x84>)
 8008f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f18:	1c5c      	adds	r4, r3, #1
 8008f1a:	4d17      	ldr	r5, [pc, #92]	@ (8008f78 <CDC_Receive+0x84>)
 8008f1c:	f845 4022 	str.w	r4, [r5, r2, lsl #2]
 8008f20:	7804      	ldrb	r4, [r0, #0]
 8008f22:	4816      	ldr	r0, [pc, #88]	@ (8008f7c <CDC_Receive+0x88>)
 8008f24:	030a      	lsls	r2, r1, #12
 8008f26:	4402      	add	r2, r0
 8008f28:	4413      	add	r3, r2
 8008f2a:	4622      	mov	r2, r4
 8008f2c:	701a      	strb	r2, [r3, #0]
    if (CDC_RX_WriteIndex[cdc_ch] >= CDC_RX_BUFFER_SIZE)
 8008f2e:	7bfb      	ldrb	r3, [r7, #15]
 8008f30:	4a11      	ldr	r2, [pc, #68]	@ (8008f78 <CDC_Receive+0x84>)
 8008f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f3a:	d304      	bcc.n	8008f46 <CDC_Receive+0x52>
      CDC_RX_WriteIndex[cdc_ch] = 0;
 8008f3c:	7bfb      	ldrb	r3, [r7, #15]
 8008f3e:	4a0e      	ldr	r2, [pc, #56]	@ (8008f78 <CDC_Receive+0x84>)
 8008f40:	2100      	movs	r1, #0
 8008f42:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (uint32_t i = 0; i < *Len; i++)
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	3301      	adds	r3, #1
 8008f4a:	617b      	str	r3, [r7, #20]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	697a      	ldr	r2, [r7, #20]
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d3d8      	bcc.n	8008f08 <CDC_Receive+0x14>
  }

  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, Buf);
 8008f56:	7bfb      	ldrb	r3, [r7, #15]
 8008f58:	68ba      	ldr	r2, [r7, #8]
 8008f5a:	4909      	ldr	r1, [pc, #36]	@ (8008f80 <CDC_Receive+0x8c>)
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f000 fef7 	bl	8009d50 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(cdc_ch, &hUsbDevice);
 8008f62:	7bfb      	ldrb	r3, [r7, #15]
 8008f64:	4906      	ldr	r1, [pc, #24]	@ (8008f80 <CDC_Receive+0x8c>)
 8008f66:	4618      	mov	r0, r3
 8008f68:	f000 ff52 	bl	8009e10 <USBD_CDC_ReceivePacket>
  return USBD_OK;
 8008f6c:	2300      	movs	r3, #0
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3718      	adds	r7, #24
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bdb0      	pop	{r4, r5, r7, pc}
 8008f76:	bf00      	nop
 8008f78:	200026fc 	.word	0x200026fc
 8008f7c:	200016fc 	.word	0x200016fc
 8008f80:	20001350 	.word	0x20001350

08008f84 <CDC_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b085      	sub	sp, #20
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	60b9      	str	r1, [r7, #8]
 8008f8c:	607a      	str	r2, [r7, #4]
 8008f8e:	461a      	mov	r2, r3
 8008f90:	4603      	mov	r3, r0
 8008f92:	73fb      	strb	r3, [r7, #15]
 8008f94:	4613      	mov	r3, r2
 8008f96:	73bb      	strb	r3, [r7, #14]
  return (USBD_OK);
 8008f98:	2300      	movs	r3, #0
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3714      	adds	r7, #20
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa4:	4770      	bx	lr
	...

08008fa8 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b084      	sub	sp, #16
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  uint8_t ch = UART_Handle_TO_CDC_CH(huart);
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f7ff fd8f 	bl	8008ad4 <UART_Handle_TO_CDC_CH>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	73fb      	strb	r3, [r7, #15]
  if (ch >= NUMBER_OF_CDC) return;
 8008fba:	7bfb      	ldrb	r3, [r7, #15]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d11c      	bne.n	8008ffa <HAL_UART_TxCpltCallback+0x52>

  // Cập nhật ReadIndex sau khi truyền xong
  if (CDC_RX_ReadIndex[ch] > CDC_RX_WriteIndex[ch])
 8008fc0:	7bfb      	ldrb	r3, [r7, #15]
 8008fc2:	4a10      	ldr	r2, [pc, #64]	@ (8009004 <HAL_UART_TxCpltCallback+0x5c>)
 8008fc4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008fc8:	7bfb      	ldrb	r3, [r7, #15]
 8008fca:	490f      	ldr	r1, [pc, #60]	@ (8009008 <HAL_UART_TxCpltCallback+0x60>)
 8008fcc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d905      	bls.n	8008fe0 <HAL_UART_TxCpltCallback+0x38>
  {
    CDC_RX_ReadIndex[ch] = 0;
 8008fd4:	7bfb      	ldrb	r3, [r7, #15]
 8008fd6:	4a0b      	ldr	r2, [pc, #44]	@ (8009004 <HAL_UART_TxCpltCallback+0x5c>)
 8008fd8:	2100      	movs	r1, #0
 8008fda:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8008fde:	e007      	b.n	8008ff0 <HAL_UART_TxCpltCallback+0x48>
  }
  else
  {
    CDC_RX_ReadIndex[ch] = CDC_RX_WriteIndex[ch];
 8008fe0:	7bfa      	ldrb	r2, [r7, #15]
 8008fe2:	7bfb      	ldrb	r3, [r7, #15]
 8008fe4:	4908      	ldr	r1, [pc, #32]	@ (8009008 <HAL_UART_TxCpltCallback+0x60>)
 8008fe6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008fea:	4906      	ldr	r1, [pc, #24]	@ (8009004 <HAL_UART_TxCpltCallback+0x5c>)
 8008fec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }

  uart_tx_busy[ch] = 0;
 8008ff0:	7bfb      	ldrb	r3, [r7, #15]
 8008ff2:	4a06      	ldr	r2, [pc, #24]	@ (800900c <HAL_UART_TxCpltCallback+0x64>)
 8008ff4:	2100      	movs	r1, #0
 8008ff6:	54d1      	strb	r1, [r2, r3]
 8008ff8:	e000      	b.n	8008ffc <HAL_UART_TxCpltCallback+0x54>
  if (ch >= NUMBER_OF_CDC) return;
 8008ffa:	bf00      	nop
}
 8008ffc:	3710      	adds	r7, #16
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
 8009002:	bf00      	nop
 8009004:	20002700 	.word	0x20002700
 8009008:	200026fc 	.word	0x200026fc
 800900c:	20002704 	.word	0x20002704

08009010 <ProcessCDC_RX>:

void ProcessCDC_RX(void) {
 8009010:	b580      	push	{r7, lr}
 8009012:	b084      	sub	sp, #16
 8009014:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < NUMBER_OF_CDC; i++) {
 8009016:	2300      	movs	r3, #0
 8009018:	73fb      	strb	r3, [r7, #15]
 800901a:	e057      	b.n	80090cc <ProcessCDC_RX+0xbc>
        if (CDC_RX_ReadIndex[i] != CDC_RX_WriteIndex[i]) {
 800901c:	7bfb      	ldrb	r3, [r7, #15]
 800901e:	4a2f      	ldr	r2, [pc, #188]	@ (80090dc <ProcessCDC_RX+0xcc>)
 8009020:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009024:	7bfb      	ldrb	r3, [r7, #15]
 8009026:	492e      	ldr	r1, [pc, #184]	@ (80090e0 <ProcessCDC_RX+0xd0>)
 8009028:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800902c:	429a      	cmp	r2, r3
 800902e:	d04a      	beq.n	80090c6 <ProcessCDC_RX+0xb6>
            uint32_t buffptr = CDC_RX_ReadIndex[i];
 8009030:	7bfb      	ldrb	r3, [r7, #15]
 8009032:	4a2a      	ldr	r2, [pc, #168]	@ (80090dc <ProcessCDC_RX+0xcc>)
 8009034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009038:	607b      	str	r3, [r7, #4]
            uint32_t buffsize = (CDC_RX_ReadIndex[i] > CDC_RX_WriteIndex[i]) ?
 800903a:	7bfb      	ldrb	r3, [r7, #15]
 800903c:	4a27      	ldr	r2, [pc, #156]	@ (80090dc <ProcessCDC_RX+0xcc>)
 800903e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009042:	7bfb      	ldrb	r3, [r7, #15]
 8009044:	4926      	ldr	r1, [pc, #152]	@ (80090e0 <ProcessCDC_RX+0xd0>)
 8009046:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                                (CDC_RX_BUFFER_SIZE - CDC_RX_ReadIndex[i]) :
 800904a:	429a      	cmp	r2, r3
 800904c:	d906      	bls.n	800905c <ProcessCDC_RX+0x4c>
 800904e:	7bfb      	ldrb	r3, [r7, #15]
 8009050:	4a22      	ldr	r2, [pc, #136]	@ (80090dc <ProcessCDC_RX+0xcc>)
 8009052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009056:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 800905a:	e008      	b.n	800906e <ProcessCDC_RX+0x5e>
                                (CDC_RX_WriteIndex[i] - CDC_RX_ReadIndex[i]);
 800905c:	7bfb      	ldrb	r3, [r7, #15]
 800905e:	4a20      	ldr	r2, [pc, #128]	@ (80090e0 <ProcessCDC_RX+0xd0>)
 8009060:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009064:	7bfb      	ldrb	r3, [r7, #15]
 8009066:	491d      	ldr	r1, [pc, #116]	@ (80090dc <ProcessCDC_RX+0xcc>)
 8009068:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                                (CDC_RX_BUFFER_SIZE - CDC_RX_ReadIndex[i]) :
 800906c:	1ad3      	subs	r3, r2, r3
            uint32_t buffsize = (CDC_RX_ReadIndex[i] > CDC_RX_WriteIndex[i]) ?
 800906e:	60bb      	str	r3, [r7, #8]

            if (buffsize > 64) buffsize = 64;
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	2b40      	cmp	r3, #64	@ 0x40
 8009074:	d901      	bls.n	800907a <ProcessCDC_RX+0x6a>
 8009076:	2340      	movs	r3, #64	@ 0x40
 8009078:	60bb      	str	r3, [r7, #8]

            HAL_UART_Transmit(CDC_CH_To_UART_Handle(i), &CDC_RX_Buffer[i][buffptr], buffsize, HAL_MAX_DELAY);
 800907a:	7bfb      	ldrb	r3, [r7, #15]
 800907c:	4618      	mov	r0, r3
 800907e:	f7ff fd13 	bl	8008aa8 <CDC_CH_To_UART_Handle>
 8009082:	7bfb      	ldrb	r3, [r7, #15]
 8009084:	031a      	lsls	r2, r3, #12
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	4413      	add	r3, r2
 800908a:	4a16      	ldr	r2, [pc, #88]	@ (80090e4 <ProcessCDC_RX+0xd4>)
 800908c:	1899      	adds	r1, r3, r2
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	b29a      	uxth	r2, r3
 8009092:	f04f 33ff 	mov.w	r3, #4294967295
 8009096:	f7fd f969 	bl	800636c <HAL_UART_Transmit>

            CDC_RX_ReadIndex[i] += buffsize;
 800909a:	7bfb      	ldrb	r3, [r7, #15]
 800909c:	4a0f      	ldr	r2, [pc, #60]	@ (80090dc <ProcessCDC_RX+0xcc>)
 800909e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80090a2:	7bfb      	ldrb	r3, [r7, #15]
 80090a4:	68ba      	ldr	r2, [r7, #8]
 80090a6:	440a      	add	r2, r1
 80090a8:	490c      	ldr	r1, [pc, #48]	@ (80090dc <ProcessCDC_RX+0xcc>)
 80090aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            if (CDC_RX_ReadIndex[i] >= CDC_RX_BUFFER_SIZE)
 80090ae:	7bfb      	ldrb	r3, [r7, #15]
 80090b0:	4a0a      	ldr	r2, [pc, #40]	@ (80090dc <ProcessCDC_RX+0xcc>)
 80090b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80090ba:	d304      	bcc.n	80090c6 <ProcessCDC_RX+0xb6>
                CDC_RX_ReadIndex[i] = 0;
 80090bc:	7bfb      	ldrb	r3, [r7, #15]
 80090be:	4a07      	ldr	r2, [pc, #28]	@ (80090dc <ProcessCDC_RX+0xcc>)
 80090c0:	2100      	movs	r1, #0
 80090c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (uint8_t i = 0; i < NUMBER_OF_CDC; i++) {
 80090c6:	7bfb      	ldrb	r3, [r7, #15]
 80090c8:	3301      	adds	r3, #1
 80090ca:	73fb      	strb	r3, [r7, #15]
 80090cc:	7bfb      	ldrb	r3, [r7, #15]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d0a4      	beq.n	800901c <ProcessCDC_RX+0xc>
        }
    }
}
 80090d2:	bf00      	nop
 80090d4:	bf00      	nop
 80090d6:	3710      	adds	r7, #16
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}
 80090dc:	20002700 	.word	0x20002700
 80090e0:	200026fc 	.word	0x200026fc
 80090e4:	200016fc 	.word	0x200016fc

080090e8 <ProcessCDC_TX>:

void ProcessCDC_TX(void) {
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b084      	sub	sp, #16
 80090ec:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < NUMBER_OF_CDC; i++) {
 80090ee:	2300      	movs	r3, #0
 80090f0:	73fb      	strb	r3, [r7, #15]
 80090f2:	e054      	b.n	800919e <ProcessCDC_TX+0xb6>
        if (Read_Index[i] != Write_Index[i]) {
 80090f4:	7bfb      	ldrb	r3, [r7, #15]
 80090f6:	4a2e      	ldr	r2, [pc, #184]	@ (80091b0 <ProcessCDC_TX+0xc8>)
 80090f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80090fc:	7bfb      	ldrb	r3, [r7, #15]
 80090fe:	492d      	ldr	r1, [pc, #180]	@ (80091b4 <ProcessCDC_TX+0xcc>)
 8009100:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009104:	429a      	cmp	r2, r3
 8009106:	d047      	beq.n	8009198 <ProcessCDC_TX+0xb0>
            uint32_t buffptr = Read_Index[i];
 8009108:	7bfb      	ldrb	r3, [r7, #15]
 800910a:	4a29      	ldr	r2, [pc, #164]	@ (80091b0 <ProcessCDC_TX+0xc8>)
 800910c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009110:	60bb      	str	r3, [r7, #8]
            uint32_t buffsize = (Read_Index[i] > Write_Index[i]) ?
 8009112:	7bfb      	ldrb	r3, [r7, #15]
 8009114:	4a26      	ldr	r2, [pc, #152]	@ (80091b0 <ProcessCDC_TX+0xc8>)
 8009116:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800911a:	7bfb      	ldrb	r3, [r7, #15]
 800911c:	4925      	ldr	r1, [pc, #148]	@ (80091b4 <ProcessCDC_TX+0xcc>)
 800911e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                                (APP_TX_DATA_SIZE - Read_Index[i]) :
 8009122:	429a      	cmp	r2, r3
 8009124:	d906      	bls.n	8009134 <ProcessCDC_TX+0x4c>
 8009126:	7bfb      	ldrb	r3, [r7, #15]
 8009128:	4a21      	ldr	r2, [pc, #132]	@ (80091b0 <ProcessCDC_TX+0xc8>)
 800912a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800912e:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8009132:	e008      	b.n	8009146 <ProcessCDC_TX+0x5e>
                                (Write_Index[i] - Read_Index[i]);
 8009134:	7bfb      	ldrb	r3, [r7, #15]
 8009136:	4a1f      	ldr	r2, [pc, #124]	@ (80091b4 <ProcessCDC_TX+0xcc>)
 8009138:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800913c:	7bfb      	ldrb	r3, [r7, #15]
 800913e:	491c      	ldr	r1, [pc, #112]	@ (80091b0 <ProcessCDC_TX+0xc8>)
 8009140:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                                (APP_TX_DATA_SIZE - Read_Index[i]) :
 8009144:	1ad3      	subs	r3, r2, r3
            uint32_t buffsize = (Read_Index[i] > Write_Index[i]) ?
 8009146:	607b      	str	r3, [r7, #4]

            USBD_CDC_SetTxBuffer(i, &hUsbDevice, &TX_Buffer[i][buffptr], buffsize);
 8009148:	7bfb      	ldrb	r3, [r7, #15]
 800914a:	019a      	lsls	r2, r3, #6
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	4413      	add	r3, r2
 8009150:	4a19      	ldr	r2, [pc, #100]	@ (80091b8 <ProcessCDC_TX+0xd0>)
 8009152:	441a      	add	r2, r3
 8009154:	7bf8      	ldrb	r0, [r7, #15]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	4918      	ldr	r1, [pc, #96]	@ (80091bc <ProcessCDC_TX+0xd4>)
 800915a:	f000 fdd5 	bl	8009d08 <USBD_CDC_SetTxBuffer>

            if (USBD_CDC_TransmitPacket(i, &hUsbDevice) == USBD_OK) {
 800915e:	7bfb      	ldrb	r3, [r7, #15]
 8009160:	4916      	ldr	r1, [pc, #88]	@ (80091bc <ProcessCDC_TX+0xd4>)
 8009162:	4618      	mov	r0, r3
 8009164:	f000 fe12 	bl	8009d8c <USBD_CDC_TransmitPacket>
 8009168:	4603      	mov	r3, r0
 800916a:	2b00      	cmp	r3, #0
 800916c:	d114      	bne.n	8009198 <ProcessCDC_TX+0xb0>
                Read_Index[i] += buffsize;
 800916e:	7bfb      	ldrb	r3, [r7, #15]
 8009170:	4a0f      	ldr	r2, [pc, #60]	@ (80091b0 <ProcessCDC_TX+0xc8>)
 8009172:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009176:	7bfb      	ldrb	r3, [r7, #15]
 8009178:	687a      	ldr	r2, [r7, #4]
 800917a:	440a      	add	r2, r1
 800917c:	490c      	ldr	r1, [pc, #48]	@ (80091b0 <ProcessCDC_TX+0xc8>)
 800917e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                if (Read_Index[i] == APP_RX_DATA_SIZE)
 8009182:	7bfb      	ldrb	r3, [r7, #15]
 8009184:	4a0a      	ldr	r2, [pc, #40]	@ (80091b0 <ProcessCDC_TX+0xc8>)
 8009186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800918a:	2b40      	cmp	r3, #64	@ 0x40
 800918c:	d104      	bne.n	8009198 <ProcessCDC_TX+0xb0>
                    Read_Index[i] = 0;
 800918e:	7bfb      	ldrb	r3, [r7, #15]
 8009190:	4a07      	ldr	r2, [pc, #28]	@ (80091b0 <ProcessCDC_TX+0xc8>)
 8009192:	2100      	movs	r1, #0
 8009194:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (uint8_t i = 0; i < NUMBER_OF_CDC; i++) {
 8009198:	7bfb      	ldrb	r3, [r7, #15]
 800919a:	3301      	adds	r3, #1
 800919c:	73fb      	strb	r3, [r7, #15]
 800919e:	7bfb      	ldrb	r3, [r7, #15]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d0a7      	beq.n	80090f4 <ProcessCDC_TX+0xc>
            }
        }
    }
}
 80091a4:	bf00      	nop
 80091a6:	bf00      	nop
 80091a8:	3710      	adds	r7, #16
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}
 80091ae:	bf00      	nop
 80091b0:	200016f8 	.word	0x200016f8
 80091b4:	200016f4 	.word	0x200016f4
 80091b8:	200016ac 	.word	0x200016ac
 80091bc:	20001350 	.word	0x20001350

080091c0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b082      	sub	sp, #8
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
    if (htim == &htim2)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	4a12      	ldr	r2, [pc, #72]	@ (8009214 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d102      	bne.n	80091d6 <HAL_TIM_PeriodElapsedCallback+0x16>
        ProcessCDC_RX();
 80091d0:	f7ff ff1e 	bl	8009010 <ProcessCDC_RX>
        ProcessCDC_TX();
    else if((htim == &htim4)  && (HID_Frame_Read(&hid_frame_fifo_receive,process_sendframe))){
    		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
    	USBD_CUSTOM_HID_SendReport(&hUsbDevice,process_sendframe, HID_FRAME_SIZE);
    }
}
 80091d4:	e01a      	b.n	800920c <HAL_TIM_PeriodElapsedCallback+0x4c>
    else if (htim == &htim1)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	4a0f      	ldr	r2, [pc, #60]	@ (8009218 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d102      	bne.n	80091e4 <HAL_TIM_PeriodElapsedCallback+0x24>
        ProcessCDC_TX();
 80091de:	f7ff ff83 	bl	80090e8 <ProcessCDC_TX>
}
 80091e2:	e013      	b.n	800920c <HAL_TIM_PeriodElapsedCallback+0x4c>
    else if((htim == &htim4)  && (HID_Frame_Read(&hid_frame_fifo_receive,process_sendframe))){
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	4a0d      	ldr	r2, [pc, #52]	@ (800921c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d10f      	bne.n	800920c <HAL_TIM_PeriodElapsedCallback+0x4c>
 80091ec:	490c      	ldr	r1, [pc, #48]	@ (8009220 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80091ee:	480d      	ldr	r0, [pc, #52]	@ (8009224 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80091f0:	f000 f9b2 	bl	8009558 <HID_Frame_Read>
 80091f4:	4603      	mov	r3, r0
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d008      	beq.n	800920c <HAL_TIM_PeriodElapsedCallback+0x4c>
    		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 80091fa:	2140      	movs	r1, #64	@ 0x40
 80091fc:	480a      	ldr	r0, [pc, #40]	@ (8009228 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80091fe:	f7fa fabc 	bl	800377a <HAL_GPIO_TogglePin>
    	USBD_CUSTOM_HID_SendReport(&hUsbDevice,process_sendframe, HID_FRAME_SIZE);
 8009202:	2240      	movs	r2, #64	@ 0x40
 8009204:	4906      	ldr	r1, [pc, #24]	@ (8009220 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8009206:	4809      	ldr	r0, [pc, #36]	@ (800922c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8009208:	f001 fb94 	bl	800a934 <USBD_CUSTOM_HID_SendReport>
}
 800920c:	bf00      	nop
 800920e:	3708      	adds	r7, #8
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}
 8009214:	20000c88 	.word	0x20000c88
 8009218:	20000c40 	.word	0x20000c40
 800921c:	20000cd0 	.word	0x20000cd0
 8009220:	20002708 	.word	0x20002708
 8009224:	20000438 	.word	0x20000438
 8009228:	40020000 	.word	0x40020000
 800922c:	20001350 	.word	0x20001350

08009230 <HAL_UART_RxCpltCallback>:
//
//
//}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b084      	sub	sp, #16
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  uint8_t cdc_ch = UART_Handle_TO_CDC_CH(huart);
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f7ff fc4b 	bl	8008ad4 <UART_Handle_TO_CDC_CH>
 800923e:	4603      	mov	r3, r0
 8009240:	73fb      	strb	r3, [r7, #15]
  //CDC_Transmit(cdc_ch, (TX_Buffer[cdc_ch] + Write_Index[cdc_ch]), 1);
  /* Increment Index for buffer writing */
  Write_Index[cdc_ch]++;
 8009242:	7bfb      	ldrb	r3, [r7, #15]
 8009244:	4a11      	ldr	r2, [pc, #68]	@ (800928c <HAL_UART_RxCpltCallback+0x5c>)
 8009246:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800924a:	3201      	adds	r2, #1
 800924c:	490f      	ldr	r1, [pc, #60]	@ (800928c <HAL_UART_RxCpltCallback+0x5c>)
 800924e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  /* To avoid buffer overflow */
  if (Write_Index[cdc_ch] == APP_RX_DATA_SIZE)
 8009252:	7bfb      	ldrb	r3, [r7, #15]
 8009254:	4a0d      	ldr	r2, [pc, #52]	@ (800928c <HAL_UART_RxCpltCallback+0x5c>)
 8009256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800925a:	2b40      	cmp	r3, #64	@ 0x40
 800925c:	d104      	bne.n	8009268 <HAL_UART_RxCpltCallback+0x38>
  {
    Write_Index[cdc_ch] = 0;
 800925e:	7bfb      	ldrb	r3, [r7, #15]
 8009260:	4a0a      	ldr	r2, [pc, #40]	@ (800928c <HAL_UART_RxCpltCallback+0x5c>)
 8009262:	2100      	movs	r1, #0
 8009264:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  }

  /* Start another reception: provide the buffer pointer with offset and the buffer size */
  HAL_UART_Receive_IT(huart, (TX_Buffer[cdc_ch] + Write_Index[cdc_ch]), 1);
 8009268:	7bfb      	ldrb	r3, [r7, #15]
 800926a:	019b      	lsls	r3, r3, #6
 800926c:	4a08      	ldr	r2, [pc, #32]	@ (8009290 <HAL_UART_RxCpltCallback+0x60>)
 800926e:	441a      	add	r2, r3
 8009270:	7bfb      	ldrb	r3, [r7, #15]
 8009272:	4906      	ldr	r1, [pc, #24]	@ (800928c <HAL_UART_RxCpltCallback+0x5c>)
 8009274:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009278:	4413      	add	r3, r2
 800927a:	2201      	movs	r2, #1
 800927c:	4619      	mov	r1, r3
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f7fd f8ff 	bl	8006482 <HAL_UART_Receive_IT>
}
 8009284:	bf00      	nop
 8009286:	3710      	adds	r7, #16
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}
 800928c:	200016f4 	.word	0x200016f4
 8009290:	200016ac 	.word	0x200016ac

08009294 <USBD_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009294:	b480      	push	{r7}
 8009296:	b083      	sub	sp, #12
 8009298:	af00      	add	r7, sp, #0
 800929a:	4603      	mov	r3, r0
 800929c:	6039      	str	r1, [r7, #0]
 800929e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_DeviceDesc);
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	2212      	movs	r2, #18
 80092a4:	801a      	strh	r2, [r3, #0]
  return USBD_DeviceDesc;
 80092a6:	4b03      	ldr	r3, [pc, #12]	@ (80092b4 <USBD_DeviceDescriptor+0x20>)
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	370c      	adds	r7, #12
 80092ac:	46bd      	mov	sp, r7
 80092ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b2:	4770      	bx	lr
 80092b4:	20000048 	.word	0x20000048

080092b8 <USBD_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092b8:	b480      	push	{r7}
 80092ba:	b083      	sub	sp, #12
 80092bc:	af00      	add	r7, sp, #0
 80092be:	4603      	mov	r3, r0
 80092c0:	6039      	str	r1, [r7, #0]
 80092c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	2204      	movs	r2, #4
 80092c8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80092ca:	4b03      	ldr	r3, [pc, #12]	@ (80092d8 <USBD_LangIDStrDescriptor+0x20>)
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	370c      	adds	r7, #12
 80092d0:	46bd      	mov	sp, r7
 80092d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d6:	4770      	bx	lr
 80092d8:	2000005c 	.word	0x2000005c

080092dc <USBD_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b082      	sub	sp, #8
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	4603      	mov	r3, r0
 80092e4:	6039      	str	r1, [r7, #0]
 80092e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80092e8:	79fb      	ldrb	r3, [r7, #7]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d105      	bne.n	80092fa <USBD_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80092ee:	683a      	ldr	r2, [r7, #0]
 80092f0:	4907      	ldr	r1, [pc, #28]	@ (8009310 <USBD_ProductStrDescriptor+0x34>)
 80092f2:	4808      	ldr	r0, [pc, #32]	@ (8009314 <USBD_ProductStrDescriptor+0x38>)
 80092f4:	f002 fce5 	bl	800bcc2 <USBD_GetString>
 80092f8:	e004      	b.n	8009304 <USBD_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80092fa:	683a      	ldr	r2, [r7, #0]
 80092fc:	4904      	ldr	r1, [pc, #16]	@ (8009310 <USBD_ProductStrDescriptor+0x34>)
 80092fe:	4805      	ldr	r0, [pc, #20]	@ (8009314 <USBD_ProductStrDescriptor+0x38>)
 8009300:	f002 fcdf 	bl	800bcc2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009304:	4b02      	ldr	r3, [pc, #8]	@ (8009310 <USBD_ProductStrDescriptor+0x34>)
}
 8009306:	4618      	mov	r0, r3
 8009308:	3708      	adds	r7, #8
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}
 800930e:	bf00      	nop
 8009310:	20002728 	.word	0x20002728
 8009314:	0800cdc4 	.word	0x0800cdc4

08009318 <USBD_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b082      	sub	sp, #8
 800931c:	af00      	add	r7, sp, #0
 800931e:	4603      	mov	r3, r0
 8009320:	6039      	str	r1, [r7, #0]
 8009322:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009324:	683a      	ldr	r2, [r7, #0]
 8009326:	4904      	ldr	r1, [pc, #16]	@ (8009338 <USBD_ManufacturerStrDescriptor+0x20>)
 8009328:	4804      	ldr	r0, [pc, #16]	@ (800933c <USBD_ManufacturerStrDescriptor+0x24>)
 800932a:	f002 fcca 	bl	800bcc2 <USBD_GetString>
  return USBD_StrDesc;
 800932e:	4b02      	ldr	r3, [pc, #8]	@ (8009338 <USBD_ManufacturerStrDescriptor+0x20>)
}
 8009330:	4618      	mov	r0, r3
 8009332:	3708      	adds	r7, #8
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}
 8009338:	20002728 	.word	0x20002728
 800933c:	0800cdd4 	.word	0x0800cdd4

08009340 <USBD_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b082      	sub	sp, #8
 8009344:	af00      	add	r7, sp, #0
 8009346:	4603      	mov	r3, r0
 8009348:	6039      	str	r1, [r7, #0]
 800934a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	221a      	movs	r2, #26
 8009350:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009352:	f000 f843 	bl	80093dc <Get_SerialNum>
  /* USER CODE BEGIN USBD_SerialStrDescriptor */

  /* USER CODE END USBD_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009356:	4b02      	ldr	r3, [pc, #8]	@ (8009360 <USBD_SerialStrDescriptor+0x20>)
}
 8009358:	4618      	mov	r0, r3
 800935a:	3708      	adds	r7, #8
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}
 8009360:	20000060 	.word	0x20000060

08009364 <USBD_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b082      	sub	sp, #8
 8009368:	af00      	add	r7, sp, #0
 800936a:	4603      	mov	r3, r0
 800936c:	6039      	str	r1, [r7, #0]
 800936e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009370:	79fb      	ldrb	r3, [r7, #7]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d105      	bne.n	8009382 <USBD_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009376:	683a      	ldr	r2, [r7, #0]
 8009378:	4907      	ldr	r1, [pc, #28]	@ (8009398 <USBD_ConfigStrDescriptor+0x34>)
 800937a:	4808      	ldr	r0, [pc, #32]	@ (800939c <USBD_ConfigStrDescriptor+0x38>)
 800937c:	f002 fca1 	bl	800bcc2 <USBD_GetString>
 8009380:	e004      	b.n	800938c <USBD_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009382:	683a      	ldr	r2, [r7, #0]
 8009384:	4904      	ldr	r1, [pc, #16]	@ (8009398 <USBD_ConfigStrDescriptor+0x34>)
 8009386:	4805      	ldr	r0, [pc, #20]	@ (800939c <USBD_ConfigStrDescriptor+0x38>)
 8009388:	f002 fc9b 	bl	800bcc2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800938c:	4b02      	ldr	r3, [pc, #8]	@ (8009398 <USBD_ConfigStrDescriptor+0x34>)
}
 800938e:	4618      	mov	r0, r3
 8009390:	3708      	adds	r7, #8
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}
 8009396:	bf00      	nop
 8009398:	20002728 	.word	0x20002728
 800939c:	0800cddc 	.word	0x0800cddc

080093a0 <USBD_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b082      	sub	sp, #8
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	4603      	mov	r3, r0
 80093a8:	6039      	str	r1, [r7, #0]
 80093aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80093ac:	79fb      	ldrb	r3, [r7, #7]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d105      	bne.n	80093be <USBD_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80093b2:	683a      	ldr	r2, [r7, #0]
 80093b4:	4907      	ldr	r1, [pc, #28]	@ (80093d4 <USBD_InterfaceStrDescriptor+0x34>)
 80093b6:	4808      	ldr	r0, [pc, #32]	@ (80093d8 <USBD_InterfaceStrDescriptor+0x38>)
 80093b8:	f002 fc83 	bl	800bcc2 <USBD_GetString>
 80093bc:	e004      	b.n	80093c8 <USBD_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80093be:	683a      	ldr	r2, [r7, #0]
 80093c0:	4904      	ldr	r1, [pc, #16]	@ (80093d4 <USBD_InterfaceStrDescriptor+0x34>)
 80093c2:	4805      	ldr	r0, [pc, #20]	@ (80093d8 <USBD_InterfaceStrDescriptor+0x38>)
 80093c4:	f002 fc7d 	bl	800bcc2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80093c8:	4b02      	ldr	r3, [pc, #8]	@ (80093d4 <USBD_InterfaceStrDescriptor+0x34>)
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3708      	adds	r7, #8
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}
 80093d2:	bf00      	nop
 80093d4:	20002728 	.word	0x20002728
 80093d8:	0800cdec 	.word	0x0800cdec

080093dc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b084      	sub	sp, #16
 80093e0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80093e2:	4b0f      	ldr	r3, [pc, #60]	@ (8009420 <Get_SerialNum+0x44>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80093e8:	4b0e      	ldr	r3, [pc, #56]	@ (8009424 <Get_SerialNum+0x48>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80093ee:	4b0e      	ldr	r3, [pc, #56]	@ (8009428 <Get_SerialNum+0x4c>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80093f4:	68fa      	ldr	r2, [r7, #12]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	4413      	add	r3, r2
 80093fa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d009      	beq.n	8009416 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009402:	2208      	movs	r2, #8
 8009404:	4909      	ldr	r1, [pc, #36]	@ (800942c <Get_SerialNum+0x50>)
 8009406:	68f8      	ldr	r0, [r7, #12]
 8009408:	f000 f814 	bl	8009434 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800940c:	2204      	movs	r2, #4
 800940e:	4908      	ldr	r1, [pc, #32]	@ (8009430 <Get_SerialNum+0x54>)
 8009410:	68b8      	ldr	r0, [r7, #8]
 8009412:	f000 f80f 	bl	8009434 <IntToUnicode>
  }
}
 8009416:	bf00      	nop
 8009418:	3710      	adds	r7, #16
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}
 800941e:	bf00      	nop
 8009420:	1fff7a10 	.word	0x1fff7a10
 8009424:	1fff7a14 	.word	0x1fff7a14
 8009428:	1fff7a18 	.word	0x1fff7a18
 800942c:	20000062 	.word	0x20000062
 8009430:	20000072 	.word	0x20000072

08009434 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009434:	b480      	push	{r7}
 8009436:	b087      	sub	sp, #28
 8009438:	af00      	add	r7, sp, #0
 800943a:	60f8      	str	r0, [r7, #12]
 800943c:	60b9      	str	r1, [r7, #8]
 800943e:	4613      	mov	r3, r2
 8009440:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009442:	2300      	movs	r3, #0
 8009444:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009446:	2300      	movs	r3, #0
 8009448:	75fb      	strb	r3, [r7, #23]
 800944a:	e027      	b.n	800949c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	0f1b      	lsrs	r3, r3, #28
 8009450:	2b09      	cmp	r3, #9
 8009452:	d80b      	bhi.n	800946c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	0f1b      	lsrs	r3, r3, #28
 8009458:	b2da      	uxtb	r2, r3
 800945a:	7dfb      	ldrb	r3, [r7, #23]
 800945c:	005b      	lsls	r3, r3, #1
 800945e:	4619      	mov	r1, r3
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	440b      	add	r3, r1
 8009464:	3230      	adds	r2, #48	@ 0x30
 8009466:	b2d2      	uxtb	r2, r2
 8009468:	701a      	strb	r2, [r3, #0]
 800946a:	e00a      	b.n	8009482 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	0f1b      	lsrs	r3, r3, #28
 8009470:	b2da      	uxtb	r2, r3
 8009472:	7dfb      	ldrb	r3, [r7, #23]
 8009474:	005b      	lsls	r3, r3, #1
 8009476:	4619      	mov	r1, r3
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	440b      	add	r3, r1
 800947c:	3237      	adds	r2, #55	@ 0x37
 800947e:	b2d2      	uxtb	r2, r2
 8009480:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	011b      	lsls	r3, r3, #4
 8009486:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009488:	7dfb      	ldrb	r3, [r7, #23]
 800948a:	005b      	lsls	r3, r3, #1
 800948c:	3301      	adds	r3, #1
 800948e:	68ba      	ldr	r2, [r7, #8]
 8009490:	4413      	add	r3, r2
 8009492:	2200      	movs	r2, #0
 8009494:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009496:	7dfb      	ldrb	r3, [r7, #23]
 8009498:	3301      	adds	r3, #1
 800949a:	75fb      	strb	r3, [r7, #23]
 800949c:	7dfa      	ldrb	r2, [r7, #23]
 800949e:	79fb      	ldrb	r3, [r7, #7]
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d3d3      	bcc.n	800944c <IntToUnicode+0x18>
  }
}
 80094a4:	bf00      	nop
 80094a6:	bf00      	nop
 80094a8:	371c      	adds	r7, #28
 80094aa:	46bd      	mov	sp, r7
 80094ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b0:	4770      	bx	lr

080094b2 <CUSTOM_HID_Init>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init(void)
{
 80094b2:	b480      	push	{r7}
 80094b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80094b6:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	46bd      	mov	sp, r7
 80094bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c0:	4770      	bx	lr

080094c2 <CUSTOM_HID_DeInit>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit(void)
{
 80094c2:	b480      	push	{r7}
 80094c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 80094c6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	46bd      	mov	sp, r7
 80094cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d0:	4770      	bx	lr
	...

080094d4 <CUSTOM_HID_OutEvent>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent(uint8_t *data, uint16_t len)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b082      	sub	sp, #8
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	460b      	mov	r3, r1
 80094de:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN 6 */
	HID_Frame_Write(&hid_frame_fifo,data);
 80094e0:	6879      	ldr	r1, [r7, #4]
 80094e2:	4804      	ldr	r0, [pc, #16]	@ (80094f4 <CUSTOM_HID_OutEvent+0x20>)
 80094e4:	f000 f808 	bl	80094f8 <HID_Frame_Write>
  //memcpy(buffer, state, 0x40);
  //USBD_CUSTOM_HID_SendReport(&hUsbDevice, (uint8_t *)buffer, 0x40);
  return (USBD_OK);
 80094e8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3708      	adds	r7, #8
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}
 80094f2:	bf00      	nop
 80094f4:	20002928 	.word	0x20002928

080094f8 <HID_Frame_Write>:
//    }
//}


uint8_t HID_Frame_Write(HID_FrameFIFO_t *fifo, uint8_t *data)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b084      	sub	sp, #16
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	6039      	str	r1, [r7, #0]
    uint8_t nextHead = (fifo->head + 1) % HID_FRAME_BUFFER_SIZE;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f893 3800 	ldrb.w	r3, [r3, #2048]	@ 0x800
 8009508:	b2db      	uxtb	r3, r3
 800950a:	3301      	adds	r3, #1
 800950c:	425a      	negs	r2, r3
 800950e:	f003 031f 	and.w	r3, r3, #31
 8009512:	f002 021f 	and.w	r2, r2, #31
 8009516:	bf58      	it	pl
 8009518:	4253      	negpl	r3, r2
 800951a:	73fb      	strb	r3, [r7, #15]

    // Kiểm tra tràn bộ đệm
    if (nextHead == fifo->tail) {
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f893 3801 	ldrb.w	r3, [r3, #2049]	@ 0x801
 8009522:	b2db      	uxtb	r3, r3
 8009524:	7bfa      	ldrb	r2, [r7, #15]
 8009526:	429a      	cmp	r2, r3
 8009528:	d101      	bne.n	800952e <HID_Frame_Write+0x36>
        // Buffer đầy
        return 0;
 800952a:	2300      	movs	r3, #0
 800952c:	e010      	b.n	8009550 <HID_Frame_Write+0x58>
    }

    memcpy(fifo->frame[fifo->head], data, HID_FRAME_SIZE);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f893 3800 	ldrb.w	r3, [r3, #2048]	@ 0x800
 8009534:	b2db      	uxtb	r3, r3
 8009536:	019b      	lsls	r3, r3, #6
 8009538:	687a      	ldr	r2, [r7, #4]
 800953a:	4413      	add	r3, r2
 800953c:	2240      	movs	r2, #64	@ 0x40
 800953e:	6839      	ldr	r1, [r7, #0]
 8009540:	4618      	mov	r0, r3
 8009542:	f002 ffe9 	bl	800c518 <memcpy>
    fifo->head = nextHead;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	7bfa      	ldrb	r2, [r7, #15]
 800954a:	f883 2800 	strb.w	r2, [r3, #2048]	@ 0x800
    return 1;
 800954e:	2301      	movs	r3, #1
}
 8009550:	4618      	mov	r0, r3
 8009552:	3710      	adds	r7, #16
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <HID_Frame_Read>:




uint8_t HID_Frame_Read(HID_FrameFIFO_t *fifo, uint8_t *dest_buf) {
 8009558:	b580      	push	{r7, lr}
 800955a:	b082      	sub	sp, #8
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	6039      	str	r1, [r7, #0]
    if (fifo->head == fifo->tail) {
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f893 3800 	ldrb.w	r3, [r3, #2048]	@ 0x800
 8009568:	b2da      	uxtb	r2, r3
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f893 3801 	ldrb.w	r3, [r3, #2049]	@ 0x801
 8009570:	b2db      	uxtb	r3, r3
 8009572:	429a      	cmp	r2, r3
 8009574:	d101      	bne.n	800957a <HID_Frame_Read+0x22>
        return 0;  // Không có frame
 8009576:	2300      	movs	r3, #0
 8009578:	e01c      	b.n	80095b4 <HID_Frame_Read+0x5c>
    }

    memcpy(dest_buf, fifo->frame[fifo->tail], HID_FRAME_SIZE);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f893 3801 	ldrb.w	r3, [r3, #2049]	@ 0x801
 8009580:	b2db      	uxtb	r3, r3
 8009582:	019b      	lsls	r3, r3, #6
 8009584:	687a      	ldr	r2, [r7, #4]
 8009586:	4413      	add	r3, r2
 8009588:	2240      	movs	r2, #64	@ 0x40
 800958a:	4619      	mov	r1, r3
 800958c:	6838      	ldr	r0, [r7, #0]
 800958e:	f002 ffc3 	bl	800c518 <memcpy>
    fifo->tail = (fifo->tail + 1) % HID_FRAME_BUFFER_SIZE;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f893 3801 	ldrb.w	r3, [r3, #2049]	@ 0x801
 8009598:	b2db      	uxtb	r3, r3
 800959a:	3301      	adds	r3, #1
 800959c:	425a      	negs	r2, r3
 800959e:	f003 031f 	and.w	r3, r3, #31
 80095a2:	f002 021f 	and.w	r2, r2, #31
 80095a6:	bf58      	it	pl
 80095a8:	4253      	negpl	r3, r2
 80095aa:	b2da      	uxtb	r2, r3
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f883 2801 	strb.w	r2, [r3, #2049]	@ 0x801
    return 1;
 80095b2:	2301      	movs	r3, #1
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3708      	adds	r7, #8
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}

080095bc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b084      	sub	sp, #16
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	460b      	mov	r3, r1
 80095c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 80095c8:	2300      	movs	r3, #0
 80095ca:	60bb      	str	r3, [r7, #8]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80095cc:	2300      	movs	r3, #0
 80095ce:	73fb      	strb	r3, [r7, #15]
 80095d0:	e0c6      	b.n	8009760 <USBD_CDC_Init+0x1a4>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 80095d2:	7bfb      	ldrb	r3, [r7, #15]
 80095d4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80095d8:	fb02 f303 	mul.w	r3, r2, r3
 80095dc:	4a65      	ldr	r2, [pc, #404]	@ (8009774 <USBD_CDC_Init+0x1b8>)
 80095de:	4413      	add	r3, r2
 80095e0:	60bb      	str	r3, [r7, #8]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	7c1b      	ldrb	r3, [r3, #16]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d13d      	bne.n	8009666 <USBD_CDC_Init+0xaa>
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 80095ea:	7bfb      	ldrb	r3, [r7, #15]
 80095ec:	4a62      	ldr	r2, [pc, #392]	@ (8009778 <USBD_CDC_Init+0x1bc>)
 80095ee:	5cd1      	ldrb	r1, [r2, r3]
 80095f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80095f4:	2202      	movs	r2, #2
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f002 fdd5 	bl	800c1a6 <USBD_LL_OpenEP>
                           CDC_DATA_HS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 80095fc:	7bfb      	ldrb	r3, [r7, #15]
 80095fe:	4a5e      	ldr	r2, [pc, #376]	@ (8009778 <USBD_CDC_Init+0x1bc>)
 8009600:	5cd3      	ldrb	r3, [r2, r3]
 8009602:	f003 020f 	and.w	r2, r3, #15
 8009606:	6879      	ldr	r1, [r7, #4]
 8009608:	4613      	mov	r3, r2
 800960a:	009b      	lsls	r3, r3, #2
 800960c:	4413      	add	r3, r2
 800960e:	009b      	lsls	r3, r3, #2
 8009610:	440b      	add	r3, r1
 8009612:	3324      	adds	r3, #36	@ 0x24
 8009614:	2201      	movs	r2, #1
 8009616:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 8009618:	7bfb      	ldrb	r3, [r7, #15]
 800961a:	4a58      	ldr	r2, [pc, #352]	@ (800977c <USBD_CDC_Init+0x1c0>)
 800961c:	5cd1      	ldrb	r1, [r2, r3]
 800961e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009622:	2202      	movs	r2, #2
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f002 fdbe 	bl	800c1a6 <USBD_LL_OpenEP>
                           CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 800962a:	7bfb      	ldrb	r3, [r7, #15]
 800962c:	4a53      	ldr	r2, [pc, #332]	@ (800977c <USBD_CDC_Init+0x1c0>)
 800962e:	5cd3      	ldrb	r3, [r2, r3]
 8009630:	f003 020f 	and.w	r2, r3, #15
 8009634:	6879      	ldr	r1, [r7, #4]
 8009636:	4613      	mov	r3, r2
 8009638:	009b      	lsls	r3, r3, #2
 800963a:	4413      	add	r3, r2
 800963c:	009b      	lsls	r3, r3, #2
 800963e:	440b      	add	r3, r1
 8009640:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009644:	2201      	movs	r2, #1
 8009646:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009648:	7bfb      	ldrb	r3, [r7, #15]
 800964a:	4a4d      	ldr	r2, [pc, #308]	@ (8009780 <USBD_CDC_Init+0x1c4>)
 800964c:	5cd3      	ldrb	r3, [r2, r3]
 800964e:	f003 020f 	and.w	r2, r3, #15
 8009652:	6879      	ldr	r1, [r7, #4]
 8009654:	4613      	mov	r3, r2
 8009656:	009b      	lsls	r3, r3, #2
 8009658:	4413      	add	r3, r2
 800965a:	009b      	lsls	r3, r3, #2
 800965c:	440b      	add	r3, r1
 800965e:	3326      	adds	r3, #38	@ 0x26
 8009660:	2210      	movs	r2, #16
 8009662:	801a      	strh	r2, [r3, #0]
 8009664:	e03a      	b.n	80096dc <USBD_CDC_Init+0x120>
    }
    else
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 8009666:	7bfb      	ldrb	r3, [r7, #15]
 8009668:	4a43      	ldr	r2, [pc, #268]	@ (8009778 <USBD_CDC_Init+0x1bc>)
 800966a:	5cd1      	ldrb	r1, [r2, r3]
 800966c:	2340      	movs	r3, #64	@ 0x40
 800966e:	2202      	movs	r2, #2
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f002 fd98 	bl	800c1a6 <USBD_LL_OpenEP>
                           CDC_DATA_FS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 8009676:	7bfb      	ldrb	r3, [r7, #15]
 8009678:	4a3f      	ldr	r2, [pc, #252]	@ (8009778 <USBD_CDC_Init+0x1bc>)
 800967a:	5cd3      	ldrb	r3, [r2, r3]
 800967c:	f003 020f 	and.w	r2, r3, #15
 8009680:	6879      	ldr	r1, [r7, #4]
 8009682:	4613      	mov	r3, r2
 8009684:	009b      	lsls	r3, r3, #2
 8009686:	4413      	add	r3, r2
 8009688:	009b      	lsls	r3, r3, #2
 800968a:	440b      	add	r3, r1
 800968c:	3324      	adds	r3, #36	@ 0x24
 800968e:	2201      	movs	r2, #1
 8009690:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 8009692:	7bfb      	ldrb	r3, [r7, #15]
 8009694:	4a39      	ldr	r2, [pc, #228]	@ (800977c <USBD_CDC_Init+0x1c0>)
 8009696:	5cd1      	ldrb	r1, [r2, r3]
 8009698:	2340      	movs	r3, #64	@ 0x40
 800969a:	2202      	movs	r2, #2
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f002 fd82 	bl	800c1a6 <USBD_LL_OpenEP>
                           CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 80096a2:	7bfb      	ldrb	r3, [r7, #15]
 80096a4:	4a35      	ldr	r2, [pc, #212]	@ (800977c <USBD_CDC_Init+0x1c0>)
 80096a6:	5cd3      	ldrb	r3, [r2, r3]
 80096a8:	f003 020f 	and.w	r2, r3, #15
 80096ac:	6879      	ldr	r1, [r7, #4]
 80096ae:	4613      	mov	r3, r2
 80096b0:	009b      	lsls	r3, r3, #2
 80096b2:	4413      	add	r3, r2
 80096b4:	009b      	lsls	r3, r3, #2
 80096b6:	440b      	add	r3, r1
 80096b8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80096bc:	2201      	movs	r2, #1
 80096be:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80096c0:	7bfb      	ldrb	r3, [r7, #15]
 80096c2:	4a2f      	ldr	r2, [pc, #188]	@ (8009780 <USBD_CDC_Init+0x1c4>)
 80096c4:	5cd3      	ldrb	r3, [r2, r3]
 80096c6:	f003 020f 	and.w	r2, r3, #15
 80096ca:	6879      	ldr	r1, [r7, #4]
 80096cc:	4613      	mov	r3, r2
 80096ce:	009b      	lsls	r3, r3, #2
 80096d0:	4413      	add	r3, r2
 80096d2:	009b      	lsls	r3, r3, #2
 80096d4:	440b      	add	r3, r1
 80096d6:	3326      	adds	r3, #38	@ 0x26
 80096d8:	2210      	movs	r2, #16
 80096da:	801a      	strh	r2, [r3, #0]
    }

    /* Open Command IN EP */
    (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP[i], USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80096dc:	7bfb      	ldrb	r3, [r7, #15]
 80096de:	4a28      	ldr	r2, [pc, #160]	@ (8009780 <USBD_CDC_Init+0x1c4>)
 80096e0:	5cd1      	ldrb	r1, [r2, r3]
 80096e2:	2308      	movs	r3, #8
 80096e4:	2203      	movs	r2, #3
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f002 fd5d 	bl	800c1a6 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 1U;
 80096ec:	7bfb      	ldrb	r3, [r7, #15]
 80096ee:	4a24      	ldr	r2, [pc, #144]	@ (8009780 <USBD_CDC_Init+0x1c4>)
 80096f0:	5cd3      	ldrb	r3, [r2, r3]
 80096f2:	f003 020f 	and.w	r2, r3, #15
 80096f6:	6879      	ldr	r1, [r7, #4]
 80096f8:	4613      	mov	r3, r2
 80096fa:	009b      	lsls	r3, r3, #2
 80096fc:	4413      	add	r3, r2
 80096fe:	009b      	lsls	r3, r3, #2
 8009700:	440b      	add	r3, r1
 8009702:	3324      	adds	r3, #36	@ 0x24
 8009704:	2201      	movs	r2, #1
 8009706:	801a      	strh	r2, [r3, #0]

    /* Init  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Init(i);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	7bfa      	ldrb	r2, [r7, #15]
 8009712:	4610      	mov	r0, r2
 8009714:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	2200      	movs	r2, #0
 800971a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	2200      	movs	r2, #0
 8009722:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	7c1b      	ldrb	r3, [r3, #16]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d10b      	bne.n	8009746 <USBD_CDC_Init+0x18a>
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 800972e:	7bfb      	ldrb	r3, [r7, #15]
 8009730:	4a12      	ldr	r2, [pc, #72]	@ (800977c <USBD_CDC_Init+0x1c0>)
 8009732:	5cd1      	ldrb	r1, [r2, r3]
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800973a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f002 fe20 	bl	800c384 <USBD_LL_PrepareReceive>
 8009744:	e009      	b.n	800975a <USBD_CDC_Init+0x19e>
                                   CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 8009746:	7bfb      	ldrb	r3, [r7, #15]
 8009748:	4a0c      	ldr	r2, [pc, #48]	@ (800977c <USBD_CDC_Init+0x1c0>)
 800974a:	5cd1      	ldrb	r1, [r2, r3]
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009752:	2340      	movs	r3, #64	@ 0x40
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f002 fe15 	bl	800c384 <USBD_LL_PrepareReceive>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800975a:	7bfb      	ldrb	r3, [r7, #15]
 800975c:	3301      	adds	r3, #1
 800975e:	73fb      	strb	r3, [r7, #15]
 8009760:	7bfb      	ldrb	r3, [r7, #15]
 8009762:	2b00      	cmp	r3, #0
 8009764:	f43f af35 	beq.w	80095d2 <USBD_CDC_Init+0x16>
                                   CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return (uint8_t)USBD_OK;
 8009768:	2300      	movs	r3, #0
}
 800976a:	4618      	mov	r0, r3
 800976c:	3710      	adds	r7, #16
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}
 8009772:	bf00      	nop
 8009774:	20003144 	.word	0x20003144
 8009778:	2000312c 	.word	0x2000312c
 800977c:	20003130 	.word	0x20003130
 8009780:	20003134 	.word	0x20003134

08009784 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b084      	sub	sp, #16
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
 800978c:	460b      	mov	r3, r1
 800978e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009790:	2300      	movs	r3, #0
 8009792:	73fb      	strb	r3, [r7, #15]
 8009794:	e057      	b.n	8009846 <USBD_CDC_DeInit+0xc2>
  {
    /* Close EP IN */
    (void)USBD_LL_CloseEP(pdev, CDC_IN_EP[i]);
 8009796:	7bfb      	ldrb	r3, [r7, #15]
 8009798:	4a2f      	ldr	r2, [pc, #188]	@ (8009858 <USBD_CDC_DeInit+0xd4>)
 800979a:	5cd3      	ldrb	r3, [r2, r3]
 800979c:	4619      	mov	r1, r3
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f002 fd27 	bl	800c1f2 <USBD_LL_CloseEP>
    pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 0U;
 80097a4:	7bfb      	ldrb	r3, [r7, #15]
 80097a6:	4a2c      	ldr	r2, [pc, #176]	@ (8009858 <USBD_CDC_DeInit+0xd4>)
 80097a8:	5cd3      	ldrb	r3, [r2, r3]
 80097aa:	f003 020f 	and.w	r2, r3, #15
 80097ae:	6879      	ldr	r1, [r7, #4]
 80097b0:	4613      	mov	r3, r2
 80097b2:	009b      	lsls	r3, r3, #2
 80097b4:	4413      	add	r3, r2
 80097b6:	009b      	lsls	r3, r3, #2
 80097b8:	440b      	add	r3, r1
 80097ba:	3324      	adds	r3, #36	@ 0x24
 80097bc:	2200      	movs	r2, #0
 80097be:	801a      	strh	r2, [r3, #0]

    /* Close EP OUT */
    (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP[i]);
 80097c0:	7bfb      	ldrb	r3, [r7, #15]
 80097c2:	4a26      	ldr	r2, [pc, #152]	@ (800985c <USBD_CDC_DeInit+0xd8>)
 80097c4:	5cd3      	ldrb	r3, [r2, r3]
 80097c6:	4619      	mov	r1, r3
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f002 fd12 	bl	800c1f2 <USBD_LL_CloseEP>
    pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 0U;
 80097ce:	7bfb      	ldrb	r3, [r7, #15]
 80097d0:	4a22      	ldr	r2, [pc, #136]	@ (800985c <USBD_CDC_DeInit+0xd8>)
 80097d2:	5cd3      	ldrb	r3, [r2, r3]
 80097d4:	f003 020f 	and.w	r2, r3, #15
 80097d8:	6879      	ldr	r1, [r7, #4]
 80097da:	4613      	mov	r3, r2
 80097dc:	009b      	lsls	r3, r3, #2
 80097de:	4413      	add	r3, r2
 80097e0:	009b      	lsls	r3, r3, #2
 80097e2:	440b      	add	r3, r1
 80097e4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80097e8:	2200      	movs	r2, #0
 80097ea:	801a      	strh	r2, [r3, #0]

    /* Close Command IN EP */
    (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP[i]);
 80097ec:	7bfb      	ldrb	r3, [r7, #15]
 80097ee:	4a1c      	ldr	r2, [pc, #112]	@ (8009860 <USBD_CDC_DeInit+0xdc>)
 80097f0:	5cd3      	ldrb	r3, [r2, r3]
 80097f2:	4619      	mov	r1, r3
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f002 fcfc 	bl	800c1f2 <USBD_LL_CloseEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 0U;
 80097fa:	7bfb      	ldrb	r3, [r7, #15]
 80097fc:	4a18      	ldr	r2, [pc, #96]	@ (8009860 <USBD_CDC_DeInit+0xdc>)
 80097fe:	5cd3      	ldrb	r3, [r2, r3]
 8009800:	f003 020f 	and.w	r2, r3, #15
 8009804:	6879      	ldr	r1, [r7, #4]
 8009806:	4613      	mov	r3, r2
 8009808:	009b      	lsls	r3, r3, #2
 800980a:	4413      	add	r3, r2
 800980c:	009b      	lsls	r3, r3, #2
 800980e:	440b      	add	r3, r1
 8009810:	3324      	adds	r3, #36	@ 0x24
 8009812:	2200      	movs	r2, #0
 8009814:	801a      	strh	r2, [r3, #0]
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = 0U;
 8009816:	7bfb      	ldrb	r3, [r7, #15]
 8009818:	4a11      	ldr	r2, [pc, #68]	@ (8009860 <USBD_CDC_DeInit+0xdc>)
 800981a:	5cd3      	ldrb	r3, [r2, r3]
 800981c:	f003 020f 	and.w	r2, r3, #15
 8009820:	6879      	ldr	r1, [r7, #4]
 8009822:	4613      	mov	r3, r2
 8009824:	009b      	lsls	r3, r3, #2
 8009826:	4413      	add	r3, r2
 8009828:	009b      	lsls	r3, r3, #2
 800982a:	440b      	add	r3, r1
 800982c:	3326      	adds	r3, #38	@ 0x26
 800982e:	2200      	movs	r2, #0
 8009830:	801a      	strh	r2, [r3, #0]

    /* DeInit  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->DeInit(i);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009838:	685b      	ldr	r3, [r3, #4]
 800983a:	7bfa      	ldrb	r2, [r7, #15]
 800983c:	4610      	mov	r0, r2
 800983e:	4798      	blx	r3
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009840:	7bfb      	ldrb	r3, [r7, #15]
 8009842:	3301      	adds	r3, #1
 8009844:	73fb      	strb	r3, [r7, #15]
 8009846:	7bfb      	ldrb	r3, [r7, #15]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d0a4      	beq.n	8009796 <USBD_CDC_DeInit+0x12>
  }
  return (uint8_t)USBD_OK;
 800984c:	2300      	movs	r3, #0
}
 800984e:	4618      	mov	r0, r3
 8009850:	3710      	adds	r7, #16
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}
 8009856:	bf00      	nop
 8009858:	2000312c 	.word	0x2000312c
 800985c:	20003130 	.word	0x20003130
 8009860:	20003134 	.word	0x20003134

08009864 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009864:	b590      	push	{r4, r7, lr}
 8009866:	b087      	sub	sp, #28
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
 800986c:	6039      	str	r1, [r7, #0]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800986e:	2300      	movs	r3, #0
 8009870:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009872:	2300      	movs	r3, #0
 8009874:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009876:	2300      	movs	r3, #0
 8009878:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800987a:	2300      	movs	r3, #0
 800987c:	75fb      	strb	r3, [r7, #23]

  uint8_t windex_to_ch = 0;
 800987e:	2300      	movs	r3, #0
 8009880:	75bb      	strb	r3, [r7, #22]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009882:	2300      	movs	r3, #0
 8009884:	757b      	strb	r3, [r7, #21]
 8009886:	e015      	b.n	80098b4 <USBD_CDC_Setup+0x50>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	889b      	ldrh	r3, [r3, #4]
 800988c:	b2da      	uxtb	r2, r3
 800988e:	7d7b      	ldrb	r3, [r7, #21]
 8009890:	496d      	ldr	r1, [pc, #436]	@ (8009a48 <USBD_CDC_Setup+0x1e4>)
 8009892:	5ccb      	ldrb	r3, [r1, r3]
 8009894:	429a      	cmp	r2, r3
 8009896:	d007      	beq.n	80098a8 <USBD_CDC_Setup+0x44>
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	889b      	ldrh	r3, [r3, #4]
 800989c:	b2da      	uxtb	r2, r3
 800989e:	7d7b      	ldrb	r3, [r7, #21]
 80098a0:	496a      	ldr	r1, [pc, #424]	@ (8009a4c <USBD_CDC_Setup+0x1e8>)
 80098a2:	5ccb      	ldrb	r3, [r1, r3]
 80098a4:	429a      	cmp	r2, r3
 80098a6:	d102      	bne.n	80098ae <USBD_CDC_Setup+0x4a>
    {
      windex_to_ch = i;
 80098a8:	7d7b      	ldrb	r3, [r7, #21]
 80098aa:	75bb      	strb	r3, [r7, #22]
      break;
 80098ac:	e005      	b.n	80098ba <USBD_CDC_Setup+0x56>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80098ae:	7d7b      	ldrb	r3, [r7, #21]
 80098b0:	3301      	adds	r3, #1
 80098b2:	757b      	strb	r3, [r7, #21]
 80098b4:	7d7b      	ldrb	r3, [r7, #21]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d0e6      	beq.n	8009888 <USBD_CDC_Setup+0x24>
    }
  }

  hcdc = &CDC_ACM_Class_Data[windex_to_ch];
 80098ba:	7dbb      	ldrb	r3, [r7, #22]
 80098bc:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80098c0:	fb02 f303 	mul.w	r3, r2, r3
 80098c4:	4a62      	ldr	r2, [pc, #392]	@ (8009a50 <USBD_CDC_Setup+0x1ec>)
 80098c6:	4413      	add	r3, r2
 80098c8:	613b      	str	r3, [r7, #16]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	781b      	ldrb	r3, [r3, #0]
 80098ce:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d04a      	beq.n	800996c <USBD_CDC_Setup+0x108>
 80098d6:	2b20      	cmp	r3, #32
 80098d8:	f040 80aa 	bne.w	8009a30 <USBD_CDC_Setup+0x1cc>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	88db      	ldrh	r3, [r3, #6]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d038      	beq.n	8009956 <USBD_CDC_Setup+0xf2>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	781b      	ldrb	r3, [r3, #0]
 80098e8:	b25b      	sxtb	r3, r3
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	da1d      	bge.n	800992a <USBD_CDC_Setup+0xc6>
      {
        ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80098f4:	689c      	ldr	r4, [r3, #8]
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	7859      	ldrb	r1, [r3, #1]
 80098fa:	7dbb      	ldrb	r3, [r7, #22]
 80098fc:	025b      	lsls	r3, r3, #9
 80098fe:	693a      	ldr	r2, [r7, #16]
 8009900:	441a      	add	r2, r3
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	88db      	ldrh	r3, [r3, #6]
 8009906:	7db8      	ldrb	r0, [r7, #22]
 8009908:	47a0      	blx	r4

        len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	88db      	ldrh	r3, [r3, #6]
 800990e:	2b07      	cmp	r3, #7
 8009910:	bf28      	it	cs
 8009912:	2307      	movcs	r3, #7
 8009914:	81fb      	strh	r3, [r7, #14]
        (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data[windex_to_ch], len);
 8009916:	7dbb      	ldrb	r3, [r7, #22]
 8009918:	025b      	lsls	r3, r3, #9
 800991a:	693a      	ldr	r2, [r7, #16]
 800991c:	4413      	add	r3, r2
 800991e:	89fa      	ldrh	r2, [r7, #14]
 8009920:	4619      	mov	r1, r3
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f002 fa2d 	bl	800bd82 <USBD_CtlSendData>
    }
    else
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
    }
    break;
 8009928:	e089      	b.n	8009a3e <USBD_CDC_Setup+0x1da>
        hcdc->CmdOpCode = req->bRequest;
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	785a      	ldrb	r2, [r3, #1]
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	88db      	ldrh	r3, [r3, #6]
 8009938:	b2da      	uxtb	r2, r3
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 8009940:	7dbb      	ldrb	r3, [r7, #22]
 8009942:	025b      	lsls	r3, r3, #9
 8009944:	693a      	ldr	r2, [r7, #16]
 8009946:	18d1      	adds	r1, r2, r3
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	88db      	ldrh	r3, [r3, #6]
 800994c:	461a      	mov	r2, r3
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f002 fa43 	bl	800bdda <USBD_CtlPrepareRx>
    break;
 8009954:	e073      	b.n	8009a3e <USBD_CDC_Setup+0x1da>
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800995c:	689c      	ldr	r4, [r3, #8]
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	7859      	ldrb	r1, [r3, #1]
 8009962:	7db8      	ldrb	r0, [r7, #22]
 8009964:	2300      	movs	r3, #0
 8009966:	683a      	ldr	r2, [r7, #0]
 8009968:	47a0      	blx	r4
    break;
 800996a:	e068      	b.n	8009a3e <USBD_CDC_Setup+0x1da>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	785b      	ldrb	r3, [r3, #1]
 8009970:	2b0b      	cmp	r3, #11
 8009972:	d852      	bhi.n	8009a1a <USBD_CDC_Setup+0x1b6>
 8009974:	a201      	add	r2, pc, #4	@ (adr r2, 800997c <USBD_CDC_Setup+0x118>)
 8009976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800997a:	bf00      	nop
 800997c:	080099ad 	.word	0x080099ad
 8009980:	08009a29 	.word	0x08009a29
 8009984:	08009a1b 	.word	0x08009a1b
 8009988:	08009a1b 	.word	0x08009a1b
 800998c:	08009a1b 	.word	0x08009a1b
 8009990:	08009a1b 	.word	0x08009a1b
 8009994:	08009a1b 	.word	0x08009a1b
 8009998:	08009a1b 	.word	0x08009a1b
 800999c:	08009a1b 	.word	0x08009a1b
 80099a0:	08009a1b 	.word	0x08009a1b
 80099a4:	080099d7 	.word	0x080099d7
 80099a8:	08009a01 	.word	0x08009a01
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099b2:	b2db      	uxtb	r3, r3
 80099b4:	2b03      	cmp	r3, #3
 80099b6:	d107      	bne.n	80099c8 <USBD_CDC_Setup+0x164>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80099b8:	f107 030a 	add.w	r3, r7, #10
 80099bc:	2202      	movs	r2, #2
 80099be:	4619      	mov	r1, r3
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f002 f9de 	bl	800bd82 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80099c6:	e032      	b.n	8009a2e <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 80099c8:	6839      	ldr	r1, [r7, #0]
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f002 f968 	bl	800bca0 <USBD_CtlError>
        ret = USBD_FAIL;
 80099d0:	2303      	movs	r3, #3
 80099d2:	75fb      	strb	r3, [r7, #23]
      break;
 80099d4:	e02b      	b.n	8009a2e <USBD_CDC_Setup+0x1ca>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099dc:	b2db      	uxtb	r3, r3
 80099de:	2b03      	cmp	r3, #3
 80099e0:	d107      	bne.n	80099f2 <USBD_CDC_Setup+0x18e>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80099e2:	f107 030d 	add.w	r3, r7, #13
 80099e6:	2201      	movs	r2, #1
 80099e8:	4619      	mov	r1, r3
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f002 f9c9 	bl	800bd82 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80099f0:	e01d      	b.n	8009a2e <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 80099f2:	6839      	ldr	r1, [r7, #0]
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f002 f953 	bl	800bca0 <USBD_CtlError>
        ret = USBD_FAIL;
 80099fa:	2303      	movs	r3, #3
 80099fc:	75fb      	strb	r3, [r7, #23]
      break;
 80099fe:	e016      	b.n	8009a2e <USBD_CDC_Setup+0x1ca>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a06:	b2db      	uxtb	r3, r3
 8009a08:	2b03      	cmp	r3, #3
 8009a0a:	d00f      	beq.n	8009a2c <USBD_CDC_Setup+0x1c8>
      {
        USBD_CtlError(pdev, req);
 8009a0c:	6839      	ldr	r1, [r7, #0]
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f002 f946 	bl	800bca0 <USBD_CtlError>
        ret = USBD_FAIL;
 8009a14:	2303      	movs	r3, #3
 8009a16:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8009a18:	e008      	b.n	8009a2c <USBD_CDC_Setup+0x1c8>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8009a1a:	6839      	ldr	r1, [r7, #0]
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f002 f93f 	bl	800bca0 <USBD_CtlError>
      ret = USBD_FAIL;
 8009a22:	2303      	movs	r3, #3
 8009a24:	75fb      	strb	r3, [r7, #23]
      break;
 8009a26:	e002      	b.n	8009a2e <USBD_CDC_Setup+0x1ca>
      break;
 8009a28:	bf00      	nop
 8009a2a:	e008      	b.n	8009a3e <USBD_CDC_Setup+0x1da>
      break;
 8009a2c:	bf00      	nop
    }
    break;
 8009a2e:	e006      	b.n	8009a3e <USBD_CDC_Setup+0x1da>

  default:
    USBD_CtlError(pdev, req);
 8009a30:	6839      	ldr	r1, [r7, #0]
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f002 f934 	bl	800bca0 <USBD_CtlError>
    ret = USBD_FAIL;
 8009a38:	2303      	movs	r3, #3
 8009a3a:	75fb      	strb	r3, [r7, #23]
    break;
 8009a3c:	bf00      	nop
  }

  return (uint8_t)ret;
 8009a3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	371c      	adds	r7, #28
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd90      	pop	{r4, r7, pc}
 8009a48:	20003138 	.word	0x20003138
 8009a4c:	2000313c 	.word	0x2000313c
 8009a50:	20003144 	.word	0x20003144

08009a54 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009a54:	b590      	push	{r4, r7, lr}
 8009a56:	b087      	sub	sp, #28
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
 8009a5c:	460b      	mov	r3, r1
 8009a5e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8009a60:	2300      	movs	r3, #0
 8009a62:	613b      	str	r3, [r7, #16]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 8009a6a:	60fb      	str	r3, [r7, #12]
  uint8_t ep_to_ch = 0;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	75fb      	strb	r3, [r7, #23]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009a70:	2300      	movs	r3, #0
 8009a72:	75bb      	strb	r3, [r7, #22]
 8009a74:	e00d      	b.n	8009a92 <USBD_CDC_DataIn+0x3e>
  {
    if (epnum == (CDC_IN_EP[i] & 0x0F))
 8009a76:	78fa      	ldrb	r2, [r7, #3]
 8009a78:	7dbb      	ldrb	r3, [r7, #22]
 8009a7a:	4934      	ldr	r1, [pc, #208]	@ (8009b4c <USBD_CDC_DataIn+0xf8>)
 8009a7c:	5ccb      	ldrb	r3, [r1, r3]
 8009a7e:	f003 030f 	and.w	r3, r3, #15
 8009a82:	429a      	cmp	r2, r3
 8009a84:	d102      	bne.n	8009a8c <USBD_CDC_DataIn+0x38>
    {
      ep_to_ch = i;
 8009a86:	7dbb      	ldrb	r3, [r7, #22]
 8009a88:	75fb      	strb	r3, [r7, #23]
      break;
 8009a8a:	e005      	b.n	8009a98 <USBD_CDC_DataIn+0x44>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009a8c:	7dbb      	ldrb	r3, [r7, #22]
 8009a8e:	3301      	adds	r3, #1
 8009a90:	75bb      	strb	r3, [r7, #22]
 8009a92:	7dbb      	ldrb	r3, [r7, #22]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d0ee      	beq.n	8009a76 <USBD_CDC_DataIn+0x22>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 8009a98:	7dfb      	ldrb	r3, [r7, #23]
 8009a9a:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009a9e:	fb02 f303 	mul.w	r3, r2, r3
 8009aa2:	4a2b      	ldr	r2, [pc, #172]	@ (8009b50 <USBD_CDC_DataIn+0xfc>)
 8009aa4:	4413      	add	r3, r2
 8009aa6:	613b      	str	r3, [r7, #16]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009aa8:	78fa      	ldrb	r2, [r7, #3]
 8009aaa:	6879      	ldr	r1, [r7, #4]
 8009aac:	4613      	mov	r3, r2
 8009aae:	009b      	lsls	r3, r3, #2
 8009ab0:	4413      	add	r3, r2
 8009ab2:	009b      	lsls	r3, r3, #2
 8009ab4:	440b      	add	r3, r1
 8009ab6:	3318      	adds	r3, #24
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d029      	beq.n	8009b12 <USBD_CDC_DataIn+0xbe>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009abe:	78fa      	ldrb	r2, [r7, #3]
 8009ac0:	6879      	ldr	r1, [r7, #4]
 8009ac2:	4613      	mov	r3, r2
 8009ac4:	009b      	lsls	r3, r3, #2
 8009ac6:	4413      	add	r3, r2
 8009ac8:	009b      	lsls	r3, r3, #2
 8009aca:	440b      	add	r3, r1
 8009acc:	3318      	adds	r3, #24
 8009ace:	681a      	ldr	r2, [r3, #0]
 8009ad0:	78f9      	ldrb	r1, [r7, #3]
 8009ad2:	68f8      	ldr	r0, [r7, #12]
 8009ad4:	460b      	mov	r3, r1
 8009ad6:	00db      	lsls	r3, r3, #3
 8009ad8:	440b      	add	r3, r1
 8009ada:	009b      	lsls	r3, r3, #2
 8009adc:	4403      	add	r3, r0
 8009ade:	331c      	adds	r3, #28
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	fbb2 f1f3 	udiv	r1, r2, r3
 8009ae6:	fb01 f303 	mul.w	r3, r1, r3
 8009aea:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d110      	bne.n	8009b12 <USBD_CDC_DataIn+0xbe>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8009af0:	78fa      	ldrb	r2, [r7, #3]
 8009af2:	6879      	ldr	r1, [r7, #4]
 8009af4:	4613      	mov	r3, r2
 8009af6:	009b      	lsls	r3, r3, #2
 8009af8:	4413      	add	r3, r2
 8009afa:	009b      	lsls	r3, r3, #2
 8009afc:	440b      	add	r3, r1
 8009afe:	3318      	adds	r3, #24
 8009b00:	2200      	movs	r2, #0
 8009b02:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009b04:	78f9      	ldrb	r1, [r7, #3]
 8009b06:	2300      	movs	r3, #0
 8009b08:	2200      	movs	r2, #0
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f002 fc19 	bl	800c342 <USBD_LL_Transmit>
 8009b10:	e016      	b.n	8009b40 <USBD_CDC_DataIn+0xec>
  }
  else
  {
    hcdc->TxState = 0U;
 8009b12:	693b      	ldr	r3, [r7, #16]
 8009b14:	2200      	movs	r2, #0
 8009b16:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt != NULL)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009b20:	691b      	ldr	r3, [r3, #16]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d00c      	beq.n	8009b40 <USBD_CDC_DataIn+0xec>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt(ep_to_ch, hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009b2c:	691c      	ldr	r4, [r3, #16]
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	f8d3 1208 	ldr.w	r1, [r3, #520]	@ 0x208
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8009b3a:	78fb      	ldrb	r3, [r7, #3]
 8009b3c:	7df8      	ldrb	r0, [r7, #23]
 8009b3e:	47a0      	blx	r4
    }
  }

  return (uint8_t)USBD_OK;
 8009b40:	2300      	movs	r3, #0
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	371c      	adds	r7, #28
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd90      	pop	{r4, r7, pc}
 8009b4a:	bf00      	nop
 8009b4c:	2000312c 	.word	0x2000312c
 8009b50:	20003144 	.word	0x20003144

08009b54 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b084      	sub	sp, #16
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
 8009b5c:	460b      	mov	r3, r1
 8009b5e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8009b60:	2300      	movs	r3, #0
 8009b62:	60bb      	str	r3, [r7, #8]
  uint8_t ep_to_ch = 0;
 8009b64:	2300      	movs	r3, #0
 8009b66:	73fb      	strb	r3, [r7, #15]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009b68:	2300      	movs	r3, #0
 8009b6a:	73bb      	strb	r3, [r7, #14]
 8009b6c:	e00b      	b.n	8009b86 <USBD_CDC_DataOut+0x32>
  {
    if (epnum == CDC_OUT_EP[i])
 8009b6e:	7bbb      	ldrb	r3, [r7, #14]
 8009b70:	4a17      	ldr	r2, [pc, #92]	@ (8009bd0 <USBD_CDC_DataOut+0x7c>)
 8009b72:	5cd3      	ldrb	r3, [r2, r3]
 8009b74:	78fa      	ldrb	r2, [r7, #3]
 8009b76:	429a      	cmp	r2, r3
 8009b78:	d102      	bne.n	8009b80 <USBD_CDC_DataOut+0x2c>
    {
      ep_to_ch = i;
 8009b7a:	7bbb      	ldrb	r3, [r7, #14]
 8009b7c:	73fb      	strb	r3, [r7, #15]
      break;
 8009b7e:	e005      	b.n	8009b8c <USBD_CDC_DataOut+0x38>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009b80:	7bbb      	ldrb	r3, [r7, #14]
 8009b82:	3301      	adds	r3, #1
 8009b84:	73bb      	strb	r3, [r7, #14]
 8009b86:	7bbb      	ldrb	r3, [r7, #14]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d0f0      	beq.n	8009b6e <USBD_CDC_DataOut+0x1a>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 8009b8c:	7bfb      	ldrb	r3, [r7, #15]
 8009b8e:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009b92:	fb02 f303 	mul.w	r3, r2, r3
 8009b96:	4a0f      	ldr	r2, [pc, #60]	@ (8009bd4 <USBD_CDC_DataOut+0x80>)
 8009b98:	4413      	add	r3, r2
 8009b9a:	60bb      	str	r3, [r7, #8]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009b9c:	78fb      	ldrb	r3, [r7, #3]
 8009b9e:	4619      	mov	r1, r3
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f002 fc10 	bl	800c3c6 <USBD_LL_GetRxDataSize>
 8009ba6:	4602      	mov	r2, r0
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Receive(ep_to_ch, hcdc->RxBuffer, &hcdc->RxLength);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009bb4:	68db      	ldr	r3, [r3, #12]
 8009bb6:	68ba      	ldr	r2, [r7, #8]
 8009bb8:	f8d2 1204 	ldr.w	r1, [r2, #516]	@ 0x204
 8009bbc:	68ba      	ldr	r2, [r7, #8]
 8009bbe:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009bc2:	7bf8      	ldrb	r0, [r7, #15]
 8009bc4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009bc6:	2300      	movs	r3, #0
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3710      	adds	r7, #16
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}
 8009bd0:	20003130 	.word	0x20003130
 8009bd4:	20003144 	.word	0x20003144

08009bd8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009bd8:	b590      	push	{r4, r7, lr}
 8009bda:	b085      	sub	sp, #20
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8009be0:	2300      	movs	r3, #0
 8009be2:	60bb      	str	r3, [r7, #8]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009be4:	2300      	movs	r3, #0
 8009be6:	73fb      	strb	r3, [r7, #15]
 8009be8:	e02d      	b.n	8009c46 <USBD_CDC_EP0_RxReady+0x6e>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 8009bea:	7bfb      	ldrb	r3, [r7, #15]
 8009bec:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009bf0:	fb02 f303 	mul.w	r3, r2, r3
 8009bf4:	4a18      	ldr	r2, [pc, #96]	@ (8009c58 <USBD_CDC_EP0_RxReady+0x80>)
 8009bf6:	4413      	add	r3, r2
 8009bf8:	60bb      	str	r3, [r7, #8]

    if (hcdc == NULL)
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d101      	bne.n	8009c04 <USBD_CDC_EP0_RxReady+0x2c>
    {
      return (uint8_t)USBD_FAIL;
 8009c00:	2303      	movs	r3, #3
 8009c02:	e024      	b.n	8009c4e <USBD_CDC_EP0_RxReady+0x76>
    }

    if ((pdev->pUserData_CDC_ACM != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d018      	beq.n	8009c40 <USBD_CDC_EP0_RxReady+0x68>
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009c14:	2bff      	cmp	r3, #255	@ 0xff
 8009c16:	d013      	beq.n	8009c40 <USBD_CDC_EP0_RxReady+0x68>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(i, hcdc->CmdOpCode, (uint8_t *)hcdc->data[i], (uint16_t)hcdc->CmdLength);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009c1e:	689c      	ldr	r4, [r3, #8]
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	f893 1200 	ldrb.w	r1, [r3, #512]	@ 0x200
 8009c26:	7bfb      	ldrb	r3, [r7, #15]
 8009c28:	025b      	lsls	r3, r3, #9
 8009c2a:	68ba      	ldr	r2, [r7, #8]
 8009c2c:	441a      	add	r2, r3
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8009c34:	7bf8      	ldrb	r0, [r7, #15]
 8009c36:	47a0      	blx	r4
      hcdc->CmdOpCode = 0xFFU;
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	22ff      	movs	r2, #255	@ 0xff
 8009c3c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009c40:	7bfb      	ldrb	r3, [r7, #15]
 8009c42:	3301      	adds	r3, #1
 8009c44:	73fb      	strb	r3, [r7, #15]
 8009c46:	7bfb      	ldrb	r3, [r7, #15]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d0ce      	beq.n	8009bea <USBD_CDC_EP0_RxReady+0x12>
    }
  }

  return (uint8_t)USBD_OK;
 8009c4c:	2300      	movs	r3, #0
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	3714      	adds	r7, #20
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd90      	pop	{r4, r7, pc}
 8009c56:	bf00      	nop
 8009c58:	20003144 	.word	0x20003144

08009c5c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b083      	sub	sp, #12
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	224b      	movs	r2, #75	@ 0x4b
 8009c68:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8009c6a:	4b03      	ldr	r3, [pc, #12]	@ (8009c78 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	370c      	adds	r7, #12
 8009c70:	46bd      	mov	sp, r7
 8009c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c76:	4770      	bx	lr
 8009c78:	20000144 	.word	0x20000144

08009c7c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b083      	sub	sp, #12
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	224b      	movs	r2, #75	@ 0x4b
 8009c88:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8009c8a:	4b03      	ldr	r3, [pc, #12]	@ (8009c98 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	370c      	adds	r7, #12
 8009c90:	46bd      	mov	sp, r7
 8009c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c96:	4770      	bx	lr
 8009c98:	200000f8 	.word	0x200000f8

08009c9c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b083      	sub	sp, #12
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	224b      	movs	r2, #75	@ 0x4b
 8009ca8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8009caa:	4b03      	ldr	r3, [pc, #12]	@ (8009cb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	370c      	adds	r7, #12
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb6:	4770      	bx	lr
 8009cb8:	20000144 	.word	0x20000144

08009cbc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b083      	sub	sp, #12
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	220a      	movs	r2, #10
 8009cc8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009cca:	4b03      	ldr	r3, [pc, #12]	@ (8009cd8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	370c      	adds	r7, #12
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd6:	4770      	bx	lr
 8009cd8:	200000b0 	.word	0x200000b0

08009cdc <USBD_CDC_ACM_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_ACM_RegisterInterface(USBD_HandleTypeDef *pdev,
                                       USBD_CDC_ACM_ItfTypeDef *fops)
{
 8009cdc:	b480      	push	{r7}
 8009cde:	b083      	sub	sp, #12
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
 8009ce4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d101      	bne.n	8009cf0 <USBD_CDC_ACM_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009cec:	2303      	movs	r3, #3
 8009cee:	e004      	b.n	8009cfa <USBD_CDC_ACM_RegisterInterface+0x1e>
  }

  pdev->pUserData_CDC_ACM = fops;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	683a      	ldr	r2, [r7, #0]
 8009cf4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  return (uint8_t)USBD_OK;
 8009cf8:	2300      	movs	r3, #0
}
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	370c      	adds	r7, #12
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d04:	4770      	bx	lr
	...

08009d08 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009d08:	b480      	push	{r7}
 8009d0a:	b087      	sub	sp, #28
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	60b9      	str	r1, [r7, #8]
 8009d10:	607a      	str	r2, [r7, #4]
 8009d12:	603b      	str	r3, [r7, #0]
 8009d14:	4603      	mov	r3, r0
 8009d16:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 8009d1c:	7bfb      	ldrb	r3, [r7, #15]
 8009d1e:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009d22:	fb02 f303 	mul.w	r3, r2, r3
 8009d26:	4a09      	ldr	r2, [pc, #36]	@ (8009d4c <USBD_CDC_SetTxBuffer+0x44>)
 8009d28:	4413      	add	r3, r2
 8009d2a:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	687a      	ldr	r2, [r7, #4]
 8009d30:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	683a      	ldr	r2, [r7, #0]
 8009d38:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009d3c:	2300      	movs	r3, #0
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	371c      	adds	r7, #28
 8009d42:	46bd      	mov	sp, r7
 8009d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d48:	4770      	bx	lr
 8009d4a:	bf00      	nop
 8009d4c:	20003144 	.word	0x20003144

08009d50 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009d50:	b480      	push	{r7}
 8009d52:	b087      	sub	sp, #28
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	4603      	mov	r3, r0
 8009d58:	60b9      	str	r1, [r7, #8]
 8009d5a:	607a      	str	r2, [r7, #4]
 8009d5c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 8009d62:	7bfb      	ldrb	r3, [r7, #15]
 8009d64:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009d68:	fb02 f303 	mul.w	r3, r2, r3
 8009d6c:	4a06      	ldr	r2, [pc, #24]	@ (8009d88 <USBD_CDC_SetRxBuffer+0x38>)
 8009d6e:	4413      	add	r3, r2
 8009d70:	617b      	str	r3, [r7, #20]

  hcdc->RxBuffer = pbuff;
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	687a      	ldr	r2, [r7, #4]
 8009d76:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009d7a:	2300      	movs	r3, #0
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	371c      	adds	r7, #28
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr
 8009d88:	20003144 	.word	0x20003144

08009d8c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b084      	sub	sp, #16
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	4603      	mov	r3, r0
 8009d94:	6039      	str	r1, [r7, #0]
 8009d96:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8009d98:	2300      	movs	r3, #0
 8009d9a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	73fb      	strb	r3, [r7, #15]

  hcdc = &CDC_ACM_Class_Data[ch];
 8009da0:	79fb      	ldrb	r3, [r7, #7]
 8009da2:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009da6:	fb02 f303 	mul.w	r3, r2, r3
 8009daa:	4a17      	ldr	r2, [pc, #92]	@ (8009e08 <USBD_CDC_TransmitPacket+0x7c>)
 8009dac:	4413      	add	r3, r2
 8009dae:	60bb      	str	r3, [r7, #8]

  if (hcdc->TxState == 0U)
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d121      	bne.n	8009dfe <USBD_CDC_TransmitPacket+0x72>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	2201      	movs	r2, #1
 8009dbe:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP[ch] & 0xFU].total_length = hcdc->TxLength;
 8009dc2:	79fb      	ldrb	r3, [r7, #7]
 8009dc4:	4a11      	ldr	r2, [pc, #68]	@ (8009e0c <USBD_CDC_TransmitPacket+0x80>)
 8009dc6:	5cd3      	ldrb	r3, [r2, r3]
 8009dc8:	f003 020f 	and.w	r2, r3, #15
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8009dd2:	6838      	ldr	r0, [r7, #0]
 8009dd4:	4613      	mov	r3, r2
 8009dd6:	009b      	lsls	r3, r3, #2
 8009dd8:	4413      	add	r3, r2
 8009dda:	009b      	lsls	r3, r3, #2
 8009ddc:	4403      	add	r3, r0
 8009dde:	3318      	adds	r3, #24
 8009de0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP[ch], hcdc->TxBuffer, hcdc->TxLength);
 8009de2:	79fb      	ldrb	r3, [r7, #7]
 8009de4:	4a09      	ldr	r2, [pc, #36]	@ (8009e0c <USBD_CDC_TransmitPacket+0x80>)
 8009de6:	5cd1      	ldrb	r1, [r2, r3]
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8009df4:	6838      	ldr	r0, [r7, #0]
 8009df6:	f002 faa4 	bl	800c342 <USBD_LL_Transmit>

    ret = USBD_OK;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3710      	adds	r7, #16
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}
 8009e08:	20003144 	.word	0x20003144
 8009e0c:	2000312c 	.word	0x2000312c

08009e10 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b084      	sub	sp, #16
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	4603      	mov	r3, r0
 8009e18:	6039      	str	r1, [r7, #0]
 8009e1a:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	60fb      	str	r3, [r7, #12]

  hcdc = &CDC_ACM_Class_Data[ch];
 8009e20:	79fb      	ldrb	r3, [r7, #7]
 8009e22:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009e26:	fb02 f303 	mul.w	r3, r2, r3
 8009e2a:	4a11      	ldr	r2, [pc, #68]	@ (8009e70 <USBD_CDC_ReceivePacket+0x60>)
 8009e2c:	4413      	add	r3, r2
 8009e2e:	60fb      	str	r3, [r7, #12]

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	7c1b      	ldrb	r3, [r3, #16]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d10b      	bne.n	8009e50 <USBD_CDC_ReceivePacket+0x40>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 8009e38:	79fb      	ldrb	r3, [r7, #7]
 8009e3a:	4a0e      	ldr	r2, [pc, #56]	@ (8009e74 <USBD_CDC_ReceivePacket+0x64>)
 8009e3c:	5cd1      	ldrb	r1, [r2, r3]
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009e44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009e48:	6838      	ldr	r0, [r7, #0]
 8009e4a:	f002 fa9b 	bl	800c384 <USBD_LL_PrepareReceive>
 8009e4e:	e009      	b.n	8009e64 <USBD_CDC_ReceivePacket+0x54>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 8009e50:	79fb      	ldrb	r3, [r7, #7]
 8009e52:	4a08      	ldr	r2, [pc, #32]	@ (8009e74 <USBD_CDC_ReceivePacket+0x64>)
 8009e54:	5cd1      	ldrb	r1, [r2, r3]
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009e5c:	2340      	movs	r3, #64	@ 0x40
 8009e5e:	6838      	ldr	r0, [r7, #0]
 8009e60:	f002 fa90 	bl	800c384 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009e64:	2300      	movs	r3, #0
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3710      	adds	r7, #16
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}
 8009e6e:	bf00      	nop
 8009e70:	20003144 	.word	0x20003144
 8009e74:	20003130 	.word	0x20003130

08009e78 <USBD_Update_CDC_ACM_DESC>:
                              uint8_t com_itf,
                              uint8_t in_ep,
                              uint8_t cmd_ep,
                              uint8_t out_ep,
                              uint8_t str_idx)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b085      	sub	sp, #20
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
 8009e80:	4608      	mov	r0, r1
 8009e82:	4611      	mov	r1, r2
 8009e84:	461a      	mov	r2, r3
 8009e86:	4603      	mov	r3, r0
 8009e88:	70fb      	strb	r3, [r7, #3]
 8009e8a:	460b      	mov	r3, r1
 8009e8c:	70bb      	strb	r3, [r7, #2]
 8009e8e:	4613      	mov	r3, r2
 8009e90:	707b      	strb	r3, [r7, #1]
  desc += 9;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	3309      	adds	r3, #9
 8009e96:	607b      	str	r3, [r7, #4]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009e98:	2300      	movs	r3, #0
 8009e9a:	73fb      	strb	r3, [r7, #15]
 8009e9c:	e05b      	b.n	8009f56 <USBD_Update_CDC_ACM_DESC+0xde>
  {
    desc[2] = cmd_itf;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	3302      	adds	r3, #2
 8009ea2:	78fa      	ldrb	r2, [r7, #3]
 8009ea4:	701a      	strb	r2, [r3, #0]
    desc[16] = str_idx;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	3310      	adds	r3, #16
 8009eaa:	f897 2020 	ldrb.w	r2, [r7, #32]
 8009eae:	701a      	strb	r2, [r3, #0]
    desc[10] = cmd_itf;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	330a      	adds	r3, #10
 8009eb4:	78fa      	ldrb	r2, [r7, #3]
 8009eb6:	701a      	strb	r2, [r3, #0]
    desc[26] = com_itf;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	331a      	adds	r3, #26
 8009ebc:	78ba      	ldrb	r2, [r7, #2]
 8009ebe:	701a      	strb	r2, [r3, #0]
    desc[34] = cmd_itf;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	3322      	adds	r3, #34	@ 0x22
 8009ec4:	78fa      	ldrb	r2, [r7, #3]
 8009ec6:	701a      	strb	r2, [r3, #0]
    desc[35] = com_itf;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	3323      	adds	r3, #35	@ 0x23
 8009ecc:	78ba      	ldrb	r2, [r7, #2]
 8009ece:	701a      	strb	r2, [r3, #0]
    desc[38] = cmd_ep;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	3326      	adds	r3, #38	@ 0x26
 8009ed4:	7e3a      	ldrb	r2, [r7, #24]
 8009ed6:	701a      	strb	r2, [r3, #0]
    desc[45] = com_itf;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	332d      	adds	r3, #45	@ 0x2d
 8009edc:	78ba      	ldrb	r2, [r7, #2]
 8009ede:	701a      	strb	r2, [r3, #0]
    desc[54] = out_ep;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	3336      	adds	r3, #54	@ 0x36
 8009ee4:	7f3a      	ldrb	r2, [r7, #28]
 8009ee6:	701a      	strb	r2, [r3, #0]
    desc[61] = in_ep;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	333d      	adds	r3, #61	@ 0x3d
 8009eec:	787a      	ldrb	r2, [r7, #1]
 8009eee:	701a      	strb	r2, [r3, #0]

    desc += 66;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	3342      	adds	r3, #66	@ 0x42
 8009ef4:	607b      	str	r3, [r7, #4]
    CDC_IN_EP[i] = in_ep;
 8009ef6:	7bfb      	ldrb	r3, [r7, #15]
 8009ef8:	491c      	ldr	r1, [pc, #112]	@ (8009f6c <USBD_Update_CDC_ACM_DESC+0xf4>)
 8009efa:	787a      	ldrb	r2, [r7, #1]
 8009efc:	54ca      	strb	r2, [r1, r3]
    CDC_OUT_EP[i] = out_ep;
 8009efe:	7bfb      	ldrb	r3, [r7, #15]
 8009f00:	491b      	ldr	r1, [pc, #108]	@ (8009f70 <USBD_Update_CDC_ACM_DESC+0xf8>)
 8009f02:	7f3a      	ldrb	r2, [r7, #28]
 8009f04:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_EP[i] = cmd_ep;
 8009f06:	7bfb      	ldrb	r3, [r7, #15]
 8009f08:	491a      	ldr	r1, [pc, #104]	@ (8009f74 <USBD_Update_CDC_ACM_DESC+0xfc>)
 8009f0a:	7e3a      	ldrb	r2, [r7, #24]
 8009f0c:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_ITF_NBR[i] = cmd_itf;
 8009f0e:	7bfb      	ldrb	r3, [r7, #15]
 8009f10:	4919      	ldr	r1, [pc, #100]	@ (8009f78 <USBD_Update_CDC_ACM_DESC+0x100>)
 8009f12:	78fa      	ldrb	r2, [r7, #3]
 8009f14:	54ca      	strb	r2, [r1, r3]
    CDC_COM_ITF_NBR[i] = com_itf;
 8009f16:	7bfb      	ldrb	r3, [r7, #15]
 8009f18:	4918      	ldr	r1, [pc, #96]	@ (8009f7c <USBD_Update_CDC_ACM_DESC+0x104>)
 8009f1a:	78ba      	ldrb	r2, [r7, #2]
 8009f1c:	54ca      	strb	r2, [r1, r3]
    CDC_STR_DESC_IDX[i] = str_idx;
 8009f1e:	7bfb      	ldrb	r3, [r7, #15]
 8009f20:	4917      	ldr	r1, [pc, #92]	@ (8009f80 <USBD_Update_CDC_ACM_DESC+0x108>)
 8009f22:	f897 2020 	ldrb.w	r2, [r7, #32]
 8009f26:	54ca      	strb	r2, [r1, r3]

    in_ep += 2;
 8009f28:	787b      	ldrb	r3, [r7, #1]
 8009f2a:	3302      	adds	r3, #2
 8009f2c:	707b      	strb	r3, [r7, #1]
    cmd_ep = in_ep + 1;
 8009f2e:	787b      	ldrb	r3, [r7, #1]
 8009f30:	3301      	adds	r3, #1
 8009f32:	763b      	strb	r3, [r7, #24]
    out_ep++;
 8009f34:	7f3b      	ldrb	r3, [r7, #28]
 8009f36:	3301      	adds	r3, #1
 8009f38:	773b      	strb	r3, [r7, #28]
    str_idx++;
 8009f3a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009f3e:	3301      	adds	r3, #1
 8009f40:	f887 3020 	strb.w	r3, [r7, #32]

    cmd_itf += 2;
 8009f44:	78fb      	ldrb	r3, [r7, #3]
 8009f46:	3302      	adds	r3, #2
 8009f48:	70fb      	strb	r3, [r7, #3]
    com_itf = cmd_itf + 1;
 8009f4a:	78fb      	ldrb	r3, [r7, #3]
 8009f4c:	3301      	adds	r3, #1
 8009f4e:	70bb      	strb	r3, [r7, #2]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009f50:	7bfb      	ldrb	r3, [r7, #15]
 8009f52:	3301      	adds	r3, #1
 8009f54:	73fb      	strb	r3, [r7, #15]
 8009f56:	7bfb      	ldrb	r3, [r7, #15]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d0a0      	beq.n	8009e9e <USBD_Update_CDC_ACM_DESC+0x26>
  }
}
 8009f5c:	bf00      	nop
 8009f5e:	bf00      	nop
 8009f60:	3714      	adds	r7, #20
 8009f62:	46bd      	mov	sp, r7
 8009f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f68:	4770      	bx	lr
 8009f6a:	bf00      	nop
 8009f6c:	2000312c 	.word	0x2000312c
 8009f70:	20003130 	.word	0x20003130
 8009f74:	20003134 	.word	0x20003134
 8009f78:	20003138 	.word	0x20003138
 8009f7c:	2000313c 	.word	0x2000313c
 8009f80:	20003140 	.word	0x20003140

08009f84 <USBD_COMPOSITE_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b082      	sub	sp, #8
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
 8009f8c:	460b      	mov	r3, r1
 8009f8e:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.Init(pdev, cfgidx);
 8009f90:	4b08      	ldr	r3, [pc, #32]	@ (8009fb4 <USBD_COMPOSITE_Init+0x30>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	78fa      	ldrb	r2, [r7, #3]
 8009f96:	4611      	mov	r1, r2
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	4798      	blx	r3
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.Init(pdev, cfgidx);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.Init(pdev, cfgidx);
 8009f9c:	4b06      	ldr	r3, [pc, #24]	@ (8009fb8 <USBD_COMPOSITE_Init+0x34>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	78fa      	ldrb	r2, [r7, #3]
 8009fa2:	4611      	mov	r1, r2
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.Init(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 8009fa8:	2300      	movs	r3, #0
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	3708      	adds	r7, #8
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}
 8009fb2:	bf00      	nop
 8009fb4:	200000bc 	.word	0x200000bc
 8009fb8:	200001dc 	.word	0x200001dc

08009fbc <USBD_COMPOSITE_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b082      	sub	sp, #8
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
 8009fc4:	460b      	mov	r3, r1
 8009fc6:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.DeInit(pdev, cfgidx);
 8009fc8:	4b08      	ldr	r3, [pc, #32]	@ (8009fec <USBD_COMPOSITE_DeInit+0x30>)
 8009fca:	685b      	ldr	r3, [r3, #4]
 8009fcc:	78fa      	ldrb	r2, [r7, #3]
 8009fce:	4611      	mov	r1, r2
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	4798      	blx	r3
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.DeInit(pdev, cfgidx);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.DeInit(pdev, cfgidx);
 8009fd4:	4b06      	ldr	r3, [pc, #24]	@ (8009ff0 <USBD_COMPOSITE_DeInit+0x34>)
 8009fd6:	685b      	ldr	r3, [r3, #4]
 8009fd8:	78fa      	ldrb	r2, [r7, #3]
 8009fda:	4611      	mov	r1, r2
 8009fdc:	6878      	ldr	r0, [r7, #4]
 8009fde:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.DeInit(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 8009fe0:	2300      	movs	r3, #0
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3708      	adds	r7, #8
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}
 8009fea:	bf00      	nop
 8009fec:	200000bc 	.word	0x200000bc
 8009ff0:	200001dc 	.word	0x200001dc

08009ff4 <USBD_COMPOSITE_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Setup(USBD_HandleTypeDef *pdev,
                                    USBD_SetupReqTypedef *req)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b084      	sub	sp, #16
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
 8009ffc:	6039      	str	r1, [r7, #0]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8009ffe:	2300      	movs	r3, #0
 800a000:	73fb      	strb	r3, [r7, #15]
 800a002:	e019      	b.n	800a038 <USBD_COMPOSITE_Setup+0x44>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	889b      	ldrh	r3, [r3, #4]
 800a008:	b2da      	uxtb	r2, r3
 800a00a:	7bfb      	ldrb	r3, [r7, #15]
 800a00c:	4915      	ldr	r1, [pc, #84]	@ (800a064 <USBD_COMPOSITE_Setup+0x70>)
 800a00e:	5ccb      	ldrb	r3, [r1, r3]
 800a010:	429a      	cmp	r2, r3
 800a012:	d007      	beq.n	800a024 <USBD_COMPOSITE_Setup+0x30>
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	889b      	ldrh	r3, [r3, #4]
 800a018:	b2da      	uxtb	r2, r3
 800a01a:	7bfb      	ldrb	r3, [r7, #15]
 800a01c:	4912      	ldr	r1, [pc, #72]	@ (800a068 <USBD_COMPOSITE_Setup+0x74>)
 800a01e:	5ccb      	ldrb	r3, [r1, r3]
 800a020:	429a      	cmp	r2, r3
 800a022:	d106      	bne.n	800a032 <USBD_COMPOSITE_Setup+0x3e>
    {
      return USBD_CDC_ACM.Setup(pdev, req);
 800a024:	4b11      	ldr	r3, [pc, #68]	@ (800a06c <USBD_COMPOSITE_Setup+0x78>)
 800a026:	689b      	ldr	r3, [r3, #8]
 800a028:	6839      	ldr	r1, [r7, #0]
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	4798      	blx	r3
 800a02e:	4603      	mov	r3, r0
 800a030:	e014      	b.n	800a05c <USBD_COMPOSITE_Setup+0x68>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800a032:	7bfb      	ldrb	r3, [r7, #15]
 800a034:	3301      	adds	r3, #1
 800a036:	73fb      	strb	r3, [r7, #15]
 800a038:	7bfb      	ldrb	r3, [r7, #15]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d0e2      	beq.n	800a004 <USBD_COMPOSITE_Setup+0x10>
  {
    return USBD_HID_KEYBOARD.Setup(pdev, req);
  }
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (LOBYTE(req->wIndex) == CUSTOM_HID_ITF_NBR)
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	889b      	ldrh	r3, [r3, #4]
 800a042:	b2da      	uxtb	r2, r3
 800a044:	4b0a      	ldr	r3, [pc, #40]	@ (800a070 <USBD_COMPOSITE_Setup+0x7c>)
 800a046:	781b      	ldrb	r3, [r3, #0]
 800a048:	429a      	cmp	r2, r3
 800a04a:	d106      	bne.n	800a05a <USBD_COMPOSITE_Setup+0x66>
  {
    return USBD_HID_CUSTOM.Setup(pdev, req);
 800a04c:	4b09      	ldr	r3, [pc, #36]	@ (800a074 <USBD_COMPOSITE_Setup+0x80>)
 800a04e:	689b      	ldr	r3, [r3, #8]
 800a050:	6839      	ldr	r1, [r7, #0]
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	4798      	blx	r3
 800a056:	4603      	mov	r3, r0
 800a058:	e000      	b.n	800a05c <USBD_COMPOSITE_Setup+0x68>
  {
    USBD_PRNT.Setup(pdev, req);
  }
#endif

  return USBD_FAIL;
 800a05a:	2303      	movs	r3, #3
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	3710      	adds	r7, #16
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}
 800a064:	20003138 	.word	0x20003138
 800a068:	2000313c 	.word	0x2000313c
 800a06c:	200000bc 	.word	0x200000bc
 800a070:	20003478 	.word	0x20003478
 800a074:	200001dc 	.word	0x200001dc

0800a078 <USBD_COMPOSITE_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b084      	sub	sp, #16
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
 800a080:	460b      	mov	r3, r1
 800a082:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800a084:	2300      	movs	r3, #0
 800a086:	73fb      	strb	r3, [r7, #15]
 800a088:	e01a      	b.n	800a0c0 <USBD_COMPOSITE_DataIn+0x48>
  {
    if (epnum == (CDC_IN_EP[i] & 0x7F) || epnum == (CDC_CMD_EP[i] & 0x7F))
 800a08a:	78fa      	ldrb	r2, [r7, #3]
 800a08c:	7bfb      	ldrb	r3, [r7, #15]
 800a08e:	4918      	ldr	r1, [pc, #96]	@ (800a0f0 <USBD_COMPOSITE_DataIn+0x78>)
 800a090:	5ccb      	ldrb	r3, [r1, r3]
 800a092:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a096:	429a      	cmp	r2, r3
 800a098:	d007      	beq.n	800a0aa <USBD_COMPOSITE_DataIn+0x32>
 800a09a:	78fa      	ldrb	r2, [r7, #3]
 800a09c:	7bfb      	ldrb	r3, [r7, #15]
 800a09e:	4915      	ldr	r1, [pc, #84]	@ (800a0f4 <USBD_COMPOSITE_DataIn+0x7c>)
 800a0a0:	5ccb      	ldrb	r3, [r1, r3]
 800a0a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	d107      	bne.n	800a0ba <USBD_COMPOSITE_DataIn+0x42>
    {
      return USBD_CDC_ACM.DataIn(pdev, epnum);
 800a0aa:	4b13      	ldr	r3, [pc, #76]	@ (800a0f8 <USBD_COMPOSITE_DataIn+0x80>)
 800a0ac:	695b      	ldr	r3, [r3, #20]
 800a0ae:	78fa      	ldrb	r2, [r7, #3]
 800a0b0:	4611      	mov	r1, r2
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	4798      	blx	r3
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	e015      	b.n	800a0e6 <USBD_COMPOSITE_DataIn+0x6e>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800a0ba:	7bfb      	ldrb	r3, [r7, #15]
 800a0bc:	3301      	adds	r3, #1
 800a0be:	73fb      	strb	r3, [r7, #15]
 800a0c0:	7bfb      	ldrb	r3, [r7, #15]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d0e1      	beq.n	800a08a <USBD_COMPOSITE_DataIn+0x12>
  {
    return USBD_HID_KEYBOARD.DataIn(pdev, epnum);
  }
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (epnum == (CUSTOM_HID_IN_EP & 0x7F))
 800a0c6:	78fa      	ldrb	r2, [r7, #3]
 800a0c8:	4b0c      	ldr	r3, [pc, #48]	@ (800a0fc <USBD_COMPOSITE_DataIn+0x84>)
 800a0ca:	781b      	ldrb	r3, [r3, #0]
 800a0cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a0d0:	429a      	cmp	r2, r3
 800a0d2:	d107      	bne.n	800a0e4 <USBD_COMPOSITE_DataIn+0x6c>
  {
    return USBD_HID_CUSTOM.DataIn(pdev, epnum);
 800a0d4:	4b0a      	ldr	r3, [pc, #40]	@ (800a100 <USBD_COMPOSITE_DataIn+0x88>)
 800a0d6:	695b      	ldr	r3, [r3, #20]
 800a0d8:	78fa      	ldrb	r2, [r7, #3]
 800a0da:	4611      	mov	r1, r2
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	4798      	blx	r3
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	e000      	b.n	800a0e6 <USBD_COMPOSITE_DataIn+0x6e>
  {
    USBD_PRNT.DataIn(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 800a0e4:	2303      	movs	r3, #3
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3710      	adds	r7, #16
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}
 800a0ee:	bf00      	nop
 800a0f0:	2000312c 	.word	0x2000312c
 800a0f4:	20003134 	.word	0x20003134
 800a0f8:	200000bc 	.word	0x200000bc
 800a0fc:	200001da 	.word	0x200001da
 800a100:	200001dc 	.word	0x200001dc

0800a104 <USBD_COMPOSITE_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b082      	sub	sp, #8
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.EP0_RxReady(pdev);
 800a10c:	4b06      	ldr	r3, [pc, #24]	@ (800a128 <USBD_COMPOSITE_EP0_RxReady+0x24>)
 800a10e:	691b      	ldr	r3, [r3, #16]
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	4798      	blx	r3
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.EP0_RxReady(pdev);
 800a114:	4b05      	ldr	r3, [pc, #20]	@ (800a12c <USBD_COMPOSITE_EP0_RxReady+0x28>)
 800a116:	691b      	ldr	r3, [r3, #16]
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	4798      	blx	r3
  USBD_DFU.EP0_RxReady(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800a11c:	2300      	movs	r3, #0
}
 800a11e:	4618      	mov	r0, r3
 800a120:	3708      	adds	r7, #8
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}
 800a126:	bf00      	nop
 800a128:	200000bc 	.word	0x200000bc
 800a12c:	200001dc 	.word	0x200001dc

0800a130 <USBD_COMPOSITE_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 800a130:	b480      	push	{r7}
 800a132:	b083      	sub	sp, #12
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
  USBD_DFU.EP0_TxSent(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800a138:	2300      	movs	r3, #0
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	370c      	adds	r7, #12
 800a13e:	46bd      	mov	sp, r7
 800a140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a144:	4770      	bx	lr

0800a146 <USBD_COMPOSITE_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_SOF(USBD_HandleTypeDef *pdev)
{
 800a146:	b480      	push	{r7}
 800a148:	b083      	sub	sp, #12
 800a14a:	af00      	add	r7, sp, #0
 800a14c:	6078      	str	r0, [r7, #4]
  USBD_DFU.SOF(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800a14e:	2300      	movs	r3, #0
}
 800a150:	4618      	mov	r0, r3
 800a152:	370c      	adds	r7, #12
 800a154:	46bd      	mov	sp, r7
 800a156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15a:	4770      	bx	lr

0800a15c <USBD_COMPOSITE_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a15c:	b480      	push	{r7}
 800a15e:	b083      	sub	sp, #12
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
 800a164:	460b      	mov	r3, r1
 800a166:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800a168:	2300      	movs	r3, #0
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	370c      	adds	r7, #12
 800a16e:	46bd      	mov	sp, r7
 800a170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a174:	4770      	bx	lr

0800a176 <USBD_COMPOSITE_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a176:	b480      	push	{r7}
 800a178:	b083      	sub	sp, #12
 800a17a:	af00      	add	r7, sp, #0
 800a17c:	6078      	str	r0, [r7, #4]
 800a17e:	460b      	mov	r3, r1
 800a180:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800a182:	2300      	movs	r3, #0
}
 800a184:	4618      	mov	r0, r3
 800a186:	370c      	adds	r7, #12
 800a188:	46bd      	mov	sp, r7
 800a18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18e:	4770      	bx	lr

0800a190 <USBD_COMPOSITE_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b084      	sub	sp, #16
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
 800a198:	460b      	mov	r3, r1
 800a19a:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800a19c:	2300      	movs	r3, #0
 800a19e:	73fb      	strb	r3, [r7, #15]
 800a1a0:	e010      	b.n	800a1c4 <USBD_COMPOSITE_DataOut+0x34>
  {
    if (epnum == CDC_OUT_EP[i])
 800a1a2:	7bfb      	ldrb	r3, [r7, #15]
 800a1a4:	4a12      	ldr	r2, [pc, #72]	@ (800a1f0 <USBD_COMPOSITE_DataOut+0x60>)
 800a1a6:	5cd3      	ldrb	r3, [r2, r3]
 800a1a8:	78fa      	ldrb	r2, [r7, #3]
 800a1aa:	429a      	cmp	r2, r3
 800a1ac:	d107      	bne.n	800a1be <USBD_COMPOSITE_DataOut+0x2e>
    {
      return USBD_CDC_ACM.DataOut(pdev, epnum);
 800a1ae:	4b11      	ldr	r3, [pc, #68]	@ (800a1f4 <USBD_COMPOSITE_DataOut+0x64>)
 800a1b0:	699b      	ldr	r3, [r3, #24]
 800a1b2:	78fa      	ldrb	r2, [r7, #3]
 800a1b4:	4611      	mov	r1, r2
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	4798      	blx	r3
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	e013      	b.n	800a1e6 <USBD_COMPOSITE_DataOut+0x56>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800a1be:	7bfb      	ldrb	r3, [r7, #15]
 800a1c0:	3301      	adds	r3, #1
 800a1c2:	73fb      	strb	r3, [r7, #15]
 800a1c4:	7bfb      	ldrb	r3, [r7, #15]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d0eb      	beq.n	800a1a2 <USBD_COMPOSITE_DataOut+0x12>
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (epnum == CUSTOM_HID_OUT_EP)
 800a1ca:	4b0b      	ldr	r3, [pc, #44]	@ (800a1f8 <USBD_COMPOSITE_DataOut+0x68>)
 800a1cc:	781b      	ldrb	r3, [r3, #0]
 800a1ce:	78fa      	ldrb	r2, [r7, #3]
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	d107      	bne.n	800a1e4 <USBD_COMPOSITE_DataOut+0x54>
  {
    return USBD_HID_CUSTOM.DataOut(pdev, epnum);
 800a1d4:	4b09      	ldr	r3, [pc, #36]	@ (800a1fc <USBD_COMPOSITE_DataOut+0x6c>)
 800a1d6:	699b      	ldr	r3, [r3, #24]
 800a1d8:	78fa      	ldrb	r2, [r7, #3]
 800a1da:	4611      	mov	r1, r2
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	4798      	blx	r3
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	e000      	b.n	800a1e6 <USBD_COMPOSITE_DataOut+0x56>
  {
    USBD_PRNT.DataOut(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 800a1e4:	2303      	movs	r3, #3
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	3710      	adds	r7, #16
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}
 800a1ee:	bf00      	nop
 800a1f0:	20003130 	.word	0x20003130
 800a1f4:	200000bc 	.word	0x200000bc
 800a1f8:	200001db 	.word	0x200001db
 800a1fc:	200001dc 	.word	0x200001dc

0800a200 <USBD_COMPOSITE_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetHSCfgDesc(uint16_t *length)
{
 800a200:	b480      	push	{r7}
 800a202:	b083      	sub	sp, #12
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	226b      	movs	r2, #107	@ 0x6b
 800a20c:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 800a20e:	4b03      	ldr	r3, [pc, #12]	@ (800a21c <USBD_COMPOSITE_GetHSCfgDesc+0x1c>)
}
 800a210:	4618      	mov	r0, r3
 800a212:	370c      	adds	r7, #12
 800a214:	46bd      	mov	sp, r7
 800a216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21a:	4770      	bx	lr
 800a21c:	200033cc 	.word	0x200033cc

0800a220 <USBD_COMPOSITE_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetFSCfgDesc(uint16_t *length)
{
 800a220:	b480      	push	{r7}
 800a222:	b083      	sub	sp, #12
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	226b      	movs	r2, #107	@ 0x6b
 800a22c:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
 800a22e:	4b03      	ldr	r3, [pc, #12]	@ (800a23c <USBD_COMPOSITE_GetFSCfgDesc+0x1c>)
}
 800a230:	4618      	mov	r0, r3
 800a232:	370c      	adds	r7, #12
 800a234:	46bd      	mov	sp, r7
 800a236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23a:	4770      	bx	lr
 800a23c:	20003360 	.word	0x20003360

0800a240 <USBD_COMPOSITE_GetOtherSpeedCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a240:	b480      	push	{r7}
 800a242:	b083      	sub	sp, #12
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
#if (USBD_USE_HS == 1)
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
#else
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	226b      	movs	r2, #107	@ 0x6b
 800a24c:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 800a24e:	4b03      	ldr	r3, [pc, #12]	@ (800a25c <USBD_COMPOSITE_GetOtherSpeedCfgDesc+0x1c>)
#endif
}
 800a250:	4618      	mov	r0, r3
 800a252:	370c      	adds	r7, #12
 800a254:	46bd      	mov	sp, r7
 800a256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25a:	4770      	bx	lr
 800a25c:	200033cc 	.word	0x200033cc

0800a260 <USBD_COMPOSITE_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_COMPOSITE_GetDeviceQualifierDesc(uint16_t *length)
{
 800a260:	b480      	push	{r7}
 800a262:	b083      	sub	sp, #12
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_DeviceQualifierDesc);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	220a      	movs	r2, #10
 800a26c:	801a      	strh	r2, [r3, #0]
  return USBD_COMPOSITE_DeviceQualifierDesc;
 800a26e:	4b03      	ldr	r3, [pc, #12]	@ (800a27c <USBD_COMPOSITE_GetDeviceQualifierDesc+0x1c>)
}
 800a270:	4618      	mov	r0, r3
 800a272:	370c      	adds	r7, #12
 800a274:	46bd      	mov	sp, r7
 800a276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27a:	4770      	bx	lr
 800a27c:	200001d0 	.word	0x200001d0

0800a280 <USBD_COMPOSITE_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_COMPOSITE_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b08a      	sub	sp, #40	@ 0x28
 800a284:	af00      	add	r7, sp, #0
 800a286:	60f8      	str	r0, [r7, #12]
 800a288:	460b      	mov	r3, r1
 800a28a:	607a      	str	r2, [r7, #4]
 800a28c:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[64];

  /* Check if the requested string interface is supported */
  if (index <= USBD_Track_String_Index)
 800a28e:	4b20      	ldr	r3, [pc, #128]	@ (800a310 <USBD_COMPOSITE_GetUsrStringDesc+0x90>)
 800a290:	781b      	ldrb	r3, [r3, #0]
 800a292:	7afa      	ldrb	r2, [r7, #11]
 800a294:	429a      	cmp	r2, r3
 800a296:	d835      	bhi.n	800a304 <USBD_COMPOSITE_GetUsrStringDesc+0x84>
  {
#if (USBD_USE_CDC_ACM == 1)
    char str_buffer[16] = "";
 800a298:	f107 0314 	add.w	r3, r7, #20
 800a29c:	2200      	movs	r2, #0
 800a29e:	601a      	str	r2, [r3, #0]
 800a2a0:	605a      	str	r2, [r3, #4]
 800a2a2:	609a      	str	r2, [r3, #8]
 800a2a4:	60da      	str	r2, [r3, #12]
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a2ac:	e01a      	b.n	800a2e4 <USBD_COMPOSITE_GetUsrStringDesc+0x64>
    {
      if (index == CDC_STR_DESC_IDX[i])
 800a2ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a2b2:	4a18      	ldr	r2, [pc, #96]	@ (800a314 <USBD_COMPOSITE_GetUsrStringDesc+0x94>)
 800a2b4:	5cd3      	ldrb	r3, [r2, r3]
 800a2b6:	7afa      	ldrb	r2, [r7, #11]
 800a2b8:	429a      	cmp	r2, r3
 800a2ba:	d10e      	bne.n	800a2da <USBD_COMPOSITE_GetUsrStringDesc+0x5a>
      {
        snprintf(str_buffer, sizeof(str_buffer), CDC_ACM_STR_DESC, i);
 800a2bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a2c0:	f107 0014 	add.w	r0, r7, #20
 800a2c4:	4a14      	ldr	r2, [pc, #80]	@ (800a318 <USBD_COMPOSITE_GetUsrStringDesc+0x98>)
 800a2c6:	2110      	movs	r1, #16
 800a2c8:	f002 f8bc 	bl	800c444 <sniprintf>
        USBD_GetString((uint8_t *)str_buffer, USBD_StrDesc, length);
 800a2cc:	f107 0314 	add.w	r3, r7, #20
 800a2d0:	687a      	ldr	r2, [r7, #4]
 800a2d2:	4912      	ldr	r1, [pc, #72]	@ (800a31c <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f001 fcf4 	bl	800bcc2 <USBD_GetString>
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800a2da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a2de:	3301      	adds	r3, #1
 800a2e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a2e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d0e0      	beq.n	800a2ae <USBD_COMPOSITE_GetUsrStringDesc+0x2e>
    {
      USBD_GetString((uint8_t *)HID_KEYBOARD_STR_DESC, USBD_StrDesc, length);
    }
#endif
#if (USBD_USE_HID_CUSTOM == 1)
    if (index == CUSTOM_HID_STR_DESC_IDX)
 800a2ec:	4b0c      	ldr	r3, [pc, #48]	@ (800a320 <USBD_COMPOSITE_GetUsrStringDesc+0xa0>)
 800a2ee:	781b      	ldrb	r3, [r3, #0]
 800a2f0:	7afa      	ldrb	r2, [r7, #11]
 800a2f2:	429a      	cmp	r2, r3
 800a2f4:	d104      	bne.n	800a300 <USBD_COMPOSITE_GetUsrStringDesc+0x80>
    {
      USBD_GetString((uint8_t *)CUSTOM_HID_STR_DESC, USBD_StrDesc, length);
 800a2f6:	687a      	ldr	r2, [r7, #4]
 800a2f8:	4908      	ldr	r1, [pc, #32]	@ (800a31c <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 800a2fa:	480a      	ldr	r0, [pc, #40]	@ (800a324 <USBD_COMPOSITE_GetUsrStringDesc+0xa4>)
 800a2fc:	f001 fce1 	bl	800bcc2 <USBD_GetString>
    if (index == PRINTER_STR_DESC_IDX)
    {
      USBD_GetString((uint8_t *)PRNT_STR_DESC, USBD_StrDesc, length);
    }
#endif
    return USBD_StrDesc;
 800a300:	4b06      	ldr	r3, [pc, #24]	@ (800a31c <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 800a302:	e000      	b.n	800a306 <USBD_COMPOSITE_GetUsrStringDesc+0x86>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 800a304:	2300      	movs	r3, #0
  }
}
 800a306:	4618      	mov	r0, r3
 800a308:	3728      	adds	r7, #40	@ 0x28
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}
 800a30e:	bf00      	nop
 800a310:	200001cc 	.word	0x200001cc
 800a314:	20003140 	.word	0x20003140
 800a318:	0800ce00 	.word	0x0800ce00
 800a31c:	20003438 	.word	0x20003438
 800a320:	20003479 	.word	0x20003479
 800a324:	0800ce10 	.word	0x0800ce10

0800a328 <USBD_COMPOSITE_Mount_Class>:
#endif

void USBD_COMPOSITE_Mount_Class(void)
{
 800a328:	b590      	push	{r4, r7, lr}
 800a32a:	b089      	sub	sp, #36	@ 0x24
 800a32c:	af04      	add	r7, sp, #16
  uint16_t len = 0;
 800a32e:	2300      	movs	r3, #0
 800a330:	80bb      	strh	r3, [r7, #4]
  uint8_t *ptr = NULL;
 800a332:	2300      	movs	r3, #0
 800a334:	60fb      	str	r3, [r7, #12]

  uint8_t in_ep_track = 0x81;
 800a336:	2381      	movs	r3, #129	@ 0x81
 800a338:	72fb      	strb	r3, [r7, #11]
  uint8_t out_ep_track = 0x01;
 800a33a:	2301      	movs	r3, #1
 800a33c:	72bb      	strb	r3, [r7, #10]
  uint8_t interface_no_track = 0x00;
 800a33e:	2300      	movs	r3, #0
 800a340:	727b      	strb	r3, [r7, #9]
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_HID_CUSTOM == 1)
  ptr = USBD_HID_CUSTOM.GetFSConfigDescriptor(&len);
 800a342:	4b74      	ldr	r3, [pc, #464]	@ (800a514 <USBD_COMPOSITE_Mount_Class+0x1ec>)
 800a344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a346:	1d3a      	adds	r2, r7, #4
 800a348:	4610      	mov	r0, r2
 800a34a:	4798      	blx	r3
 800a34c:	60f8      	str	r0, [r7, #12]
  USBD_Update_HID_Custom_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 800a34e:	4b72      	ldr	r3, [pc, #456]	@ (800a518 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800a350:	781b      	ldrb	r3, [r3, #0]
 800a352:	7ab8      	ldrb	r0, [r7, #10]
 800a354:	7afa      	ldrb	r2, [r7, #11]
 800a356:	7a79      	ldrb	r1, [r7, #9]
 800a358:	9300      	str	r3, [sp, #0]
 800a35a:	4603      	mov	r3, r0
 800a35c:	68f8      	ldr	r0, [r7, #12]
 800a35e:	f000 fbcf 	bl	800ab00 <USBD_Update_HID_Custom_DESC>
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_HID_CUSTOM_DESC, ptr + 0x09, len - 0x09);
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	3309      	adds	r3, #9
 800a366:	88ba      	ldrh	r2, [r7, #4]
 800a368:	3a09      	subs	r2, #9
 800a36a:	4619      	mov	r1, r3
 800a36c:	486b      	ldr	r0, [pc, #428]	@ (800a51c <USBD_COMPOSITE_Mount_Class+0x1f4>)
 800a36e:	f002 f8d3 	bl	800c518 <memcpy>

  ptr = USBD_HID_CUSTOM.GetHSConfigDescriptor(&len);
 800a372:	4b68      	ldr	r3, [pc, #416]	@ (800a514 <USBD_COMPOSITE_Mount_Class+0x1ec>)
 800a374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a376:	1d3a      	adds	r2, r7, #4
 800a378:	4610      	mov	r0, r2
 800a37a:	4798      	blx	r3
 800a37c:	60f8      	str	r0, [r7, #12]
  USBD_Update_HID_Custom_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 800a37e:	4b66      	ldr	r3, [pc, #408]	@ (800a518 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800a380:	781b      	ldrb	r3, [r3, #0]
 800a382:	7ab8      	ldrb	r0, [r7, #10]
 800a384:	7afa      	ldrb	r2, [r7, #11]
 800a386:	7a79      	ldrb	r1, [r7, #9]
 800a388:	9300      	str	r3, [sp, #0]
 800a38a:	4603      	mov	r3, r0
 800a38c:	68f8      	ldr	r0, [r7, #12]
 800a38e:	f000 fbb7 	bl	800ab00 <USBD_Update_HID_Custom_DESC>
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_HID_CUSTOM_DESC, ptr + 0x09, len - 0x09);
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	3309      	adds	r3, #9
 800a396:	88ba      	ldrh	r2, [r7, #4]
 800a398:	3a09      	subs	r2, #9
 800a39a:	4619      	mov	r1, r3
 800a39c:	4860      	ldr	r0, [pc, #384]	@ (800a520 <USBD_COMPOSITE_Mount_Class+0x1f8>)
 800a39e:	f002 f8bb 	bl	800c518 <memcpy>

  in_ep_track += 1;
 800a3a2:	7afb      	ldrb	r3, [r7, #11]
 800a3a4:	3301      	adds	r3, #1
 800a3a6:	72fb      	strb	r3, [r7, #11]
  out_ep_track += 1;
 800a3a8:	7abb      	ldrb	r3, [r7, #10]
 800a3aa:	3301      	adds	r3, #1
 800a3ac:	72bb      	strb	r3, [r7, #10]
  interface_no_track += 1;
 800a3ae:	7a7b      	ldrb	r3, [r7, #9]
 800a3b0:	3301      	adds	r3, #1
 800a3b2:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += 1;
 800a3b4:	4b58      	ldr	r3, [pc, #352]	@ (800a518 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800a3b6:	781b      	ldrb	r3, [r3, #0]
 800a3b8:	3301      	adds	r3, #1
 800a3ba:	b2da      	uxtb	r2, r3
 800a3bc:	4b56      	ldr	r3, [pc, #344]	@ (800a518 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800a3be:	701a      	strb	r2, [r3, #0]
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_CDC_ACM == 1)
  ptr = USBD_CDC_ACM.GetFSConfigDescriptor(&len);
 800a3c0:	4b58      	ldr	r3, [pc, #352]	@ (800a524 <USBD_COMPOSITE_Mount_Class+0x1fc>)
 800a3c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3c4:	1d3a      	adds	r2, r7, #4
 800a3c6:	4610      	mov	r0, r2
 800a3c8:	4798      	blx	r3
 800a3ca:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 800a3cc:	7a7b      	ldrb	r3, [r7, #9]
 800a3ce:	3301      	adds	r3, #1
 800a3d0:	b2d8      	uxtb	r0, r3
 800a3d2:	7afb      	ldrb	r3, [r7, #11]
 800a3d4:	3301      	adds	r3, #1
 800a3d6:	b2db      	uxtb	r3, r3
 800a3d8:	4a4f      	ldr	r2, [pc, #316]	@ (800a518 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800a3da:	7812      	ldrb	r2, [r2, #0]
 800a3dc:	7afc      	ldrb	r4, [r7, #11]
 800a3de:	7a79      	ldrb	r1, [r7, #9]
 800a3e0:	9202      	str	r2, [sp, #8]
 800a3e2:	7aba      	ldrb	r2, [r7, #10]
 800a3e4:	9201      	str	r2, [sp, #4]
 800a3e6:	9300      	str	r3, [sp, #0]
 800a3e8:	4623      	mov	r3, r4
 800a3ea:	4602      	mov	r2, r0
 800a3ec:	68f8      	ldr	r0, [r7, #12]
 800a3ee:	f7ff fd43 	bl	8009e78 <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	3309      	adds	r3, #9
 800a3f6:	88ba      	ldrh	r2, [r7, #4]
 800a3f8:	3a09      	subs	r2, #9
 800a3fa:	4619      	mov	r1, r3
 800a3fc:	484a      	ldr	r0, [pc, #296]	@ (800a528 <USBD_COMPOSITE_Mount_Class+0x200>)
 800a3fe:	f002 f88b 	bl	800c518 <memcpy>

  ptr = USBD_CDC_ACM.GetHSConfigDescriptor(&len);
 800a402:	4b48      	ldr	r3, [pc, #288]	@ (800a524 <USBD_COMPOSITE_Mount_Class+0x1fc>)
 800a404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a406:	1d3a      	adds	r2, r7, #4
 800a408:	4610      	mov	r0, r2
 800a40a:	4798      	blx	r3
 800a40c:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 800a40e:	7a7b      	ldrb	r3, [r7, #9]
 800a410:	3301      	adds	r3, #1
 800a412:	b2d8      	uxtb	r0, r3
 800a414:	7afb      	ldrb	r3, [r7, #11]
 800a416:	3301      	adds	r3, #1
 800a418:	b2db      	uxtb	r3, r3
 800a41a:	4a3f      	ldr	r2, [pc, #252]	@ (800a518 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800a41c:	7812      	ldrb	r2, [r2, #0]
 800a41e:	7afc      	ldrb	r4, [r7, #11]
 800a420:	7a79      	ldrb	r1, [r7, #9]
 800a422:	9202      	str	r2, [sp, #8]
 800a424:	7aba      	ldrb	r2, [r7, #10]
 800a426:	9201      	str	r2, [sp, #4]
 800a428:	9300      	str	r3, [sp, #0]
 800a42a:	4623      	mov	r3, r4
 800a42c:	4602      	mov	r2, r0
 800a42e:	68f8      	ldr	r0, [r7, #12]
 800a430:	f7ff fd22 	bl	8009e78 <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	3309      	adds	r3, #9
 800a438:	88ba      	ldrh	r2, [r7, #4]
 800a43a:	3a09      	subs	r2, #9
 800a43c:	4619      	mov	r1, r3
 800a43e:	483b      	ldr	r0, [pc, #236]	@ (800a52c <USBD_COMPOSITE_Mount_Class+0x204>)
 800a440:	f002 f86a 	bl	800c518 <memcpy>

  in_ep_track += 2 * USBD_CDC_ACM_COUNT;
 800a444:	7afb      	ldrb	r3, [r7, #11]
 800a446:	3302      	adds	r3, #2
 800a448:	72fb      	strb	r3, [r7, #11]
  out_ep_track += 1 * USBD_CDC_ACM_COUNT;
 800a44a:	7abb      	ldrb	r3, [r7, #10]
 800a44c:	3301      	adds	r3, #1
 800a44e:	72bb      	strb	r3, [r7, #10]
  interface_no_track += 2 * USBD_CDC_ACM_COUNT;
 800a450:	7a7b      	ldrb	r3, [r7, #9]
 800a452:	3302      	adds	r3, #2
 800a454:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += USBD_CDC_ACM_COUNT;
 800a456:	4b30      	ldr	r3, [pc, #192]	@ (800a518 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800a458:	781b      	ldrb	r3, [r3, #0]
 800a45a:	3301      	adds	r3, #1
 800a45c:	b2da      	uxtb	r2, r3
 800a45e:	4b2e      	ldr	r3, [pc, #184]	@ (800a518 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800a460:	701a      	strb	r2, [r3, #0]
#endif

  uint16_t CFG_SIZE = sizeof(USBD_COMPOSITE_CFG_DESC_t);
 800a462:	236b      	movs	r3, #107	@ 0x6b
 800a464:	80fb      	strh	r3, [r7, #6]
  ptr = USBD_COMPOSITE_HSCfgDesc.CONFIG_DESC;
 800a466:	4b32      	ldr	r3, [pc, #200]	@ (800a530 <USBD_COMPOSITE_Mount_Class+0x208>)
 800a468:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	2209      	movs	r2, #9
 800a46e:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	3301      	adds	r3, #1
 800a474:	2202      	movs	r2, #2
 800a476:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	3302      	adds	r3, #2
 800a47c:	88fa      	ldrh	r2, [r7, #6]
 800a47e:	b2d2      	uxtb	r2, r2
 800a480:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 800a482:	88fb      	ldrh	r3, [r7, #6]
 800a484:	0a1b      	lsrs	r3, r3, #8
 800a486:	b29a      	uxth	r2, r3
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	3303      	adds	r3, #3
 800a48c:	b2d2      	uxtb	r2, r2
 800a48e:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	3304      	adds	r3, #4
 800a494:	7a7a      	ldrb	r2, [r7, #9]
 800a496:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	3305      	adds	r3, #5
 800a49c:	2201      	movs	r2, #1
 800a49e:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	3306      	adds	r3, #6
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	3307      	adds	r3, #7
 800a4ac:	22c0      	movs	r2, #192	@ 0xc0
 800a4ae:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	3308      	adds	r3, #8
 800a4b4:	2232      	movs	r2, #50	@ 0x32
 800a4b6:	701a      	strb	r2, [r3, #0]

  ptr = USBD_COMPOSITE_FSCfgDesc.CONFIG_DESC;
 800a4b8:	4b1e      	ldr	r3, [pc, #120]	@ (800a534 <USBD_COMPOSITE_Mount_Class+0x20c>)
 800a4ba:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	2209      	movs	r2, #9
 800a4c0:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	3301      	adds	r3, #1
 800a4c6:	2202      	movs	r2, #2
 800a4c8:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	3302      	adds	r3, #2
 800a4ce:	88fa      	ldrh	r2, [r7, #6]
 800a4d0:	b2d2      	uxtb	r2, r2
 800a4d2:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 800a4d4:	88fb      	ldrh	r3, [r7, #6]
 800a4d6:	0a1b      	lsrs	r3, r3, #8
 800a4d8:	b29a      	uxth	r2, r3
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	3303      	adds	r3, #3
 800a4de:	b2d2      	uxtb	r2, r2
 800a4e0:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	3304      	adds	r3, #4
 800a4e6:	7a7a      	ldrb	r2, [r7, #9]
 800a4e8:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	3305      	adds	r3, #5
 800a4ee:	2201      	movs	r2, #1
 800a4f0:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	3306      	adds	r3, #6
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	3307      	adds	r3, #7
 800a4fe:	22c0      	movs	r2, #192	@ 0xc0
 800a500:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	3308      	adds	r3, #8
 800a506:	2232      	movs	r2, #50	@ 0x32
 800a508:	701a      	strb	r2, [r3, #0]

  (void)out_ep_track;
  (void)in_ep_track;
}
 800a50a:	bf00      	nop
 800a50c:	3714      	adds	r7, #20
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd90      	pop	{r4, r7, pc}
 800a512:	bf00      	nop
 800a514:	200001dc 	.word	0x200001dc
 800a518:	200001cc 	.word	0x200001cc
 800a51c:	20003369 	.word	0x20003369
 800a520:	200033d5 	.word	0x200033d5
 800a524:	200000bc 	.word	0x200000bc
 800a528:	20003389 	.word	0x20003389
 800a52c:	200033f5 	.word	0x200033f5
 800a530:	200033cc 	.word	0x200033cc
 800a534:	20003360 	.word	0x20003360

0800a538 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b084      	sub	sp, #16
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	460b      	mov	r3, r1
 800a542:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = &CUSTOM_HID_Instance;
 800a544:	4b43      	ldr	r3, [pc, #268]	@ (800a654 <USBD_CUSTOM_HID_Init+0x11c>)
 800a546:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d105      	bne.n	800a55a <USBD_CUSTOM_HID_Init+0x22>
  {
    pdev->pClassData_HID_Custom = NULL;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2200      	movs	r2, #0
 800a552:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
    return (uint8_t)USBD_EMEM;
 800a556:	2302      	movs	r3, #2
 800a558:	e078      	b.n	800a64c <USBD_CUSTOM_HID_Init+0x114>
  }

  pdev->pClassData_HID_Custom = (void *)hhid;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	68fa      	ldr	r2, [r7, #12]
 800a55e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	7c1b      	ldrb	r3, [r3, #16]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d11b      	bne.n	800a5a2 <USBD_CUSTOM_HID_Init+0x6a>
  {
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800a56a:	4b3b      	ldr	r3, [pc, #236]	@ (800a658 <USBD_CUSTOM_HID_Init+0x120>)
 800a56c:	781b      	ldrb	r3, [r3, #0]
 800a56e:	f003 020f 	and.w	r2, r3, #15
 800a572:	6879      	ldr	r1, [r7, #4]
 800a574:	4613      	mov	r3, r2
 800a576:	009b      	lsls	r3, r3, #2
 800a578:	4413      	add	r3, r2
 800a57a:	009b      	lsls	r3, r3, #2
 800a57c:	440b      	add	r3, r1
 800a57e:	3326      	adds	r3, #38	@ 0x26
 800a580:	2205      	movs	r2, #5
 800a582:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800a584:	4b35      	ldr	r3, [pc, #212]	@ (800a65c <USBD_CUSTOM_HID_Init+0x124>)
 800a586:	781b      	ldrb	r3, [r3, #0]
 800a588:	f003 020f 	and.w	r2, r3, #15
 800a58c:	6879      	ldr	r1, [r7, #4]
 800a58e:	4613      	mov	r3, r2
 800a590:	009b      	lsls	r3, r3, #2
 800a592:	4413      	add	r3, r2
 800a594:	009b      	lsls	r3, r3, #2
 800a596:	440b      	add	r3, r1
 800a598:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800a59c:	2205      	movs	r2, #5
 800a59e:	801a      	strh	r2, [r3, #0]
 800a5a0:	e01a      	b.n	800a5d8 <USBD_CUSTOM_HID_Init+0xa0>
  }
  else /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800a5a2:	4b2d      	ldr	r3, [pc, #180]	@ (800a658 <USBD_CUSTOM_HID_Init+0x120>)
 800a5a4:	781b      	ldrb	r3, [r3, #0]
 800a5a6:	f003 020f 	and.w	r2, r3, #15
 800a5aa:	6879      	ldr	r1, [r7, #4]
 800a5ac:	4613      	mov	r3, r2
 800a5ae:	009b      	lsls	r3, r3, #2
 800a5b0:	4413      	add	r3, r2
 800a5b2:	009b      	lsls	r3, r3, #2
 800a5b4:	440b      	add	r3, r1
 800a5b6:	3326      	adds	r3, #38	@ 0x26
 800a5b8:	2201      	movs	r2, #1
 800a5ba:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800a5bc:	4b27      	ldr	r3, [pc, #156]	@ (800a65c <USBD_CUSTOM_HID_Init+0x124>)
 800a5be:	781b      	ldrb	r3, [r3, #0]
 800a5c0:	f003 020f 	and.w	r2, r3, #15
 800a5c4:	6879      	ldr	r1, [r7, #4]
 800a5c6:	4613      	mov	r3, r2
 800a5c8:	009b      	lsls	r3, r3, #2
 800a5ca:	4413      	add	r3, r2
 800a5cc:	009b      	lsls	r3, r3, #2
 800a5ce:	440b      	add	r3, r1
 800a5d0:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800a5d4:	2201      	movs	r2, #1
 800a5d6:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_IN_EP, USBD_EP_TYPE_INTR,
 800a5d8:	4b1f      	ldr	r3, [pc, #124]	@ (800a658 <USBD_CUSTOM_HID_Init+0x120>)
 800a5da:	7819      	ldrb	r1, [r3, #0]
 800a5dc:	2340      	movs	r3, #64	@ 0x40
 800a5de:	2203      	movs	r2, #3
 800a5e0:	6878      	ldr	r0, [r7, #4]
 800a5e2:	f001 fde0 	bl	800c1a6 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].is_used = 1U;
 800a5e6:	4b1c      	ldr	r3, [pc, #112]	@ (800a658 <USBD_CUSTOM_HID_Init+0x120>)
 800a5e8:	781b      	ldrb	r3, [r3, #0]
 800a5ea:	f003 020f 	and.w	r2, r3, #15
 800a5ee:	6879      	ldr	r1, [r7, #4]
 800a5f0:	4613      	mov	r3, r2
 800a5f2:	009b      	lsls	r3, r3, #2
 800a5f4:	4413      	add	r3, r2
 800a5f6:	009b      	lsls	r3, r3, #2
 800a5f8:	440b      	add	r3, r1
 800a5fa:	3324      	adds	r3, #36	@ 0x24
 800a5fc:	2201      	movs	r2, #1
 800a5fe:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_OUT_EP, USBD_EP_TYPE_INTR,
 800a600:	4b16      	ldr	r3, [pc, #88]	@ (800a65c <USBD_CUSTOM_HID_Init+0x124>)
 800a602:	7819      	ldrb	r1, [r3, #0]
 800a604:	2340      	movs	r3, #64	@ 0x40
 800a606:	2203      	movs	r2, #3
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	f001 fdcc 	bl	800c1a6 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].is_used = 1U;
 800a60e:	4b13      	ldr	r3, [pc, #76]	@ (800a65c <USBD_CUSTOM_HID_Init+0x124>)
 800a610:	781b      	ldrb	r3, [r3, #0]
 800a612:	f003 020f 	and.w	r2, r3, #15
 800a616:	6879      	ldr	r1, [r7, #4]
 800a618:	4613      	mov	r3, r2
 800a61a:	009b      	lsls	r3, r3, #2
 800a61c:	4413      	add	r3, r2
 800a61e:	009b      	lsls	r3, r3, #2
 800a620:	440b      	add	r3, r1
 800a622:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a626:	2201      	movs	r2, #1
 800a628:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	2200      	movs	r2, #0
 800a62e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->Init();
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800a638:	685b      	ldr	r3, [r3, #4]
 800a63a:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_OUT_EP, hhid->Report_buf,
 800a63c:	4b07      	ldr	r3, [pc, #28]	@ (800a65c <USBD_CUSTOM_HID_Init+0x124>)
 800a63e:	7819      	ldrb	r1, [r3, #0]
 800a640:	68fa      	ldr	r2, [r7, #12]
 800a642:	2340      	movs	r3, #64	@ 0x40
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f001 fe9d 	bl	800c384 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 800a64a:	2300      	movs	r3, #0
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3710      	adds	r7, #16
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}
 800a654:	2000347c 	.word	0x2000347c
 800a658:	200001da 	.word	0x200001da
 800a65c:	200001db 	.word	0x200001db

0800a660 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b082      	sub	sp, #8
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
 800a668:	460b      	mov	r3, r1
 800a66a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_IN_EP);
 800a66c:	4b2a      	ldr	r3, [pc, #168]	@ (800a718 <USBD_CUSTOM_HID_DeInit+0xb8>)
 800a66e:	781b      	ldrb	r3, [r3, #0]
 800a670:	4619      	mov	r1, r3
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f001 fdbd 	bl	800c1f2 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].is_used = 0U;
 800a678:	4b27      	ldr	r3, [pc, #156]	@ (800a718 <USBD_CUSTOM_HID_DeInit+0xb8>)
 800a67a:	781b      	ldrb	r3, [r3, #0]
 800a67c:	f003 020f 	and.w	r2, r3, #15
 800a680:	6879      	ldr	r1, [r7, #4]
 800a682:	4613      	mov	r3, r2
 800a684:	009b      	lsls	r3, r3, #2
 800a686:	4413      	add	r3, r2
 800a688:	009b      	lsls	r3, r3, #2
 800a68a:	440b      	add	r3, r1
 800a68c:	3324      	adds	r3, #36	@ 0x24
 800a68e:	2200      	movs	r2, #0
 800a690:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = 0U;
 800a692:	4b21      	ldr	r3, [pc, #132]	@ (800a718 <USBD_CUSTOM_HID_DeInit+0xb8>)
 800a694:	781b      	ldrb	r3, [r3, #0]
 800a696:	f003 020f 	and.w	r2, r3, #15
 800a69a:	6879      	ldr	r1, [r7, #4]
 800a69c:	4613      	mov	r3, r2
 800a69e:	009b      	lsls	r3, r3, #2
 800a6a0:	4413      	add	r3, r2
 800a6a2:	009b      	lsls	r3, r3, #2
 800a6a4:	440b      	add	r3, r1
 800a6a6:	3326      	adds	r3, #38	@ 0x26
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_OUT_EP);
 800a6ac:	4b1b      	ldr	r3, [pc, #108]	@ (800a71c <USBD_CUSTOM_HID_DeInit+0xbc>)
 800a6ae:	781b      	ldrb	r3, [r3, #0]
 800a6b0:	4619      	mov	r1, r3
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f001 fd9d 	bl	800c1f2 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].is_used = 0U;
 800a6b8:	4b18      	ldr	r3, [pc, #96]	@ (800a71c <USBD_CUSTOM_HID_DeInit+0xbc>)
 800a6ba:	781b      	ldrb	r3, [r3, #0]
 800a6bc:	f003 020f 	and.w	r2, r3, #15
 800a6c0:	6879      	ldr	r1, [r7, #4]
 800a6c2:	4613      	mov	r3, r2
 800a6c4:	009b      	lsls	r3, r3, #2
 800a6c6:	4413      	add	r3, r2
 800a6c8:	009b      	lsls	r3, r3, #2
 800a6ca:	440b      	add	r3, r1
 800a6cc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = 0U;
 800a6d4:	4b11      	ldr	r3, [pc, #68]	@ (800a71c <USBD_CUSTOM_HID_DeInit+0xbc>)
 800a6d6:	781b      	ldrb	r3, [r3, #0]
 800a6d8:	f003 020f 	and.w	r2, r3, #15
 800a6dc:	6879      	ldr	r1, [r7, #4]
 800a6de:	4613      	mov	r3, r2
 800a6e0:	009b      	lsls	r3, r3, #2
 800a6e2:	4413      	add	r3, r2
 800a6e4:	009b      	lsls	r3, r3, #2
 800a6e6:	440b      	add	r3, r1
 800a6e8:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassData_HID_Custom != NULL)
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d008      	beq.n	800a70c <USBD_CUSTOM_HID_DeInit+0xac>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->DeInit();
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800a700:	689b      	ldr	r3, [r3, #8]
 800a702:	4798      	blx	r3
#if (0)
    USBD_free(pdev->pClassData_HID_Custom);
#endif
    pdev->pClassData_HID_Custom = NULL;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2200      	movs	r2, #0
 800a708:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
  }

  return (uint8_t)USBD_OK;
 800a70c:	2300      	movs	r3, #0
}
 800a70e:	4618      	mov	r0, r3
 800a710:	3708      	adds	r7, #8
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}
 800a716:	bf00      	nop
 800a718:	200001da 	.word	0x200001da
 800a71c:	200001db 	.word	0x200001db

0800a720 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b088      	sub	sp, #32
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
 800a728:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a730:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800a732:	2300      	movs	r3, #0
 800a734:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 800a736:	2300      	movs	r3, #0
 800a738:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800a73a:	2300      	movs	r3, #0
 800a73c:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800a73e:	2300      	movs	r3, #0
 800a740:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 800a742:	693b      	ldr	r3, [r7, #16]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d101      	bne.n	800a74c <USBD_CUSTOM_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800a748:	2303      	movs	r3, #3
 800a74a:	e0ed      	b.n	800a928 <USBD_CUSTOM_HID_Setup+0x208>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	781b      	ldrb	r3, [r3, #0]
 800a750:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a754:	2b00      	cmp	r3, #0
 800a756:	d052      	beq.n	800a7fe <USBD_CUSTOM_HID_Setup+0xde>
 800a758:	2b20      	cmp	r3, #32
 800a75a:	f040 80dd 	bne.w	800a918 <USBD_CUSTOM_HID_Setup+0x1f8>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	785b      	ldrb	r3, [r3, #1]
 800a762:	3b02      	subs	r3, #2
 800a764:	2b09      	cmp	r3, #9
 800a766:	d842      	bhi.n	800a7ee <USBD_CUSTOM_HID_Setup+0xce>
 800a768:	a201      	add	r2, pc, #4	@ (adr r2, 800a770 <USBD_CUSTOM_HID_Setup+0x50>)
 800a76a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a76e:	bf00      	nop
 800a770:	0800a7c9 	.word	0x0800a7c9
 800a774:	0800a7a7 	.word	0x0800a7a7
 800a778:	0800a7ef 	.word	0x0800a7ef
 800a77c:	0800a7ef 	.word	0x0800a7ef
 800a780:	0800a7ef 	.word	0x0800a7ef
 800a784:	0800a7ef 	.word	0x0800a7ef
 800a788:	0800a7ef 	.word	0x0800a7ef
 800a78c:	0800a7d9 	.word	0x0800a7d9
 800a790:	0800a7b7 	.word	0x0800a7b7
 800a794:	0800a799 	.word	0x0800a799
    {
    case CUSTOM_HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	885b      	ldrh	r3, [r3, #2]
 800a79c:	b2db      	uxtb	r3, r3
 800a79e:	461a      	mov	r2, r3
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800a7a4:	e02a      	b.n	800a7fc <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800a7a6:	693b      	ldr	r3, [r7, #16]
 800a7a8:	3340      	adds	r3, #64	@ 0x40
 800a7aa:	2201      	movs	r2, #1
 800a7ac:	4619      	mov	r1, r3
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	f001 fae7 	bl	800bd82 <USBD_CtlSendData>
      break;
 800a7b4:	e022      	b.n	800a7fc <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	885b      	ldrh	r3, [r3, #2]
 800a7ba:	0a1b      	lsrs	r3, r3, #8
 800a7bc:	b29b      	uxth	r3, r3
 800a7be:	b2db      	uxtb	r3, r3
 800a7c0:	461a      	mov	r2, r3
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	645a      	str	r2, [r3, #68]	@ 0x44
      break;
 800a7c6:	e019      	b.n	800a7fc <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800a7c8:	693b      	ldr	r3, [r7, #16]
 800a7ca:	3344      	adds	r3, #68	@ 0x44
 800a7cc:	2201      	movs	r2, #1
 800a7ce:	4619      	mov	r1, r3
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f001 fad6 	bl	800bd82 <USBD_CtlSendData>
      break;
 800a7d6:	e011      	b.n	800a7fc <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_SET_REPORT:
      hhid->IsReportAvailable = 1U;
 800a7d8:	693b      	ldr	r3, [r7, #16]
 800a7da:	2201      	movs	r2, #1
 800a7dc:	64da      	str	r2, [r3, #76]	@ 0x4c
      (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 800a7de:	6939      	ldr	r1, [r7, #16]
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	88db      	ldrh	r3, [r3, #6]
 800a7e4:	461a      	mov	r2, r3
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f001 faf7 	bl	800bdda <USBD_CtlPrepareRx>
      break;
 800a7ec:	e006      	b.n	800a7fc <USBD_CUSTOM_HID_Setup+0xdc>

    default:
      USBD_CtlError(pdev, req);
 800a7ee:	6839      	ldr	r1, [r7, #0]
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f001 fa55 	bl	800bca0 <USBD_CtlError>
      ret = USBD_FAIL;
 800a7f6:	2303      	movs	r3, #3
 800a7f8:	75fb      	strb	r3, [r7, #23]
      break;
 800a7fa:	bf00      	nop
    }
    break;
 800a7fc:	e093      	b.n	800a926 <USBD_CUSTOM_HID_Setup+0x206>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	785b      	ldrb	r3, [r3, #1]
 800a802:	2b0b      	cmp	r3, #11
 800a804:	d87f      	bhi.n	800a906 <USBD_CUSTOM_HID_Setup+0x1e6>
 800a806:	a201      	add	r2, pc, #4	@ (adr r2, 800a80c <USBD_CUSTOM_HID_Setup+0xec>)
 800a808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a80c:	0800a83d 	.word	0x0800a83d
 800a810:	0800a915 	.word	0x0800a915
 800a814:	0800a907 	.word	0x0800a907
 800a818:	0800a907 	.word	0x0800a907
 800a81c:	0800a907 	.word	0x0800a907
 800a820:	0800a907 	.word	0x0800a907
 800a824:	0800a867 	.word	0x0800a867
 800a828:	0800a907 	.word	0x0800a907
 800a82c:	0800a907 	.word	0x0800a907
 800a830:	0800a907 	.word	0x0800a907
 800a834:	0800a8b5 	.word	0x0800a8b5
 800a838:	0800a8df 	.word	0x0800a8df
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a842:	b2db      	uxtb	r3, r3
 800a844:	2b03      	cmp	r3, #3
 800a846:	d107      	bne.n	800a858 <USBD_CUSTOM_HID_Setup+0x138>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a848:	f107 030e 	add.w	r3, r7, #14
 800a84c:	2202      	movs	r2, #2
 800a84e:	4619      	mov	r1, r3
 800a850:	6878      	ldr	r0, [r7, #4]
 800a852:	f001 fa96 	bl	800bd82 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a856:	e05e      	b.n	800a916 <USBD_CUSTOM_HID_Setup+0x1f6>
        USBD_CtlError(pdev, req);
 800a858:	6839      	ldr	r1, [r7, #0]
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f001 fa20 	bl	800bca0 <USBD_CtlError>
        ret = USBD_FAIL;
 800a860:	2303      	movs	r3, #3
 800a862:	75fb      	strb	r3, [r7, #23]
      break;
 800a864:	e057      	b.n	800a916 <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	885b      	ldrh	r3, [r3, #2]
 800a86a:	0a1b      	lsrs	r3, r3, #8
 800a86c:	b29b      	uxth	r3, r3
 800a86e:	2b22      	cmp	r3, #34	@ 0x22
 800a870:	d10b      	bne.n	800a88a <USBD_CUSTOM_HID_Setup+0x16a>
      {
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	88db      	ldrh	r3, [r3, #6]
 800a876:	2b21      	cmp	r3, #33	@ 0x21
 800a878:	bf28      	it	cs
 800a87a:	2321      	movcs	r3, #33	@ 0x21
 800a87c:	83fb      	strh	r3, [r7, #30]
        pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->pReport;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	61bb      	str	r3, [r7, #24]
 800a888:	e00d      	b.n	800a8a6 <USBD_CUSTOM_HID_Setup+0x186>
      }
      else
      {
        if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	885b      	ldrh	r3, [r3, #2]
 800a88e:	0a1b      	lsrs	r3, r3, #8
 800a890:	b29b      	uxth	r3, r3
 800a892:	2b21      	cmp	r3, #33	@ 0x21
 800a894:	d107      	bne.n	800a8a6 <USBD_CUSTOM_HID_Setup+0x186>
        {
          pbuf = USBD_CUSTOM_HID_Desc;
 800a896:	4b26      	ldr	r3, [pc, #152]	@ (800a930 <USBD_CUSTOM_HID_Setup+0x210>)
 800a898:	61bb      	str	r3, [r7, #24]
          len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	88db      	ldrh	r3, [r3, #6]
 800a89e:	2b09      	cmp	r3, #9
 800a8a0:	bf28      	it	cs
 800a8a2:	2309      	movcs	r3, #9
 800a8a4:	83fb      	strh	r3, [r7, #30]
        }
      }

      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a8a6:	8bfb      	ldrh	r3, [r7, #30]
 800a8a8:	461a      	mov	r2, r3
 800a8aa:	69b9      	ldr	r1, [r7, #24]
 800a8ac:	6878      	ldr	r0, [r7, #4]
 800a8ae:	f001 fa68 	bl	800bd82 <USBD_CtlSendData>
      break;
 800a8b2:	e030      	b.n	800a916 <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8ba:	b2db      	uxtb	r3, r3
 800a8bc:	2b03      	cmp	r3, #3
 800a8be:	d107      	bne.n	800a8d0 <USBD_CUSTOM_HID_Setup+0x1b0>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800a8c0:	693b      	ldr	r3, [r7, #16]
 800a8c2:	3348      	adds	r3, #72	@ 0x48
 800a8c4:	2201      	movs	r2, #1
 800a8c6:	4619      	mov	r1, r3
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	f001 fa5a 	bl	800bd82 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a8ce:	e022      	b.n	800a916 <USBD_CUSTOM_HID_Setup+0x1f6>
        USBD_CtlError(pdev, req);
 800a8d0:	6839      	ldr	r1, [r7, #0]
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f001 f9e4 	bl	800bca0 <USBD_CtlError>
        ret = USBD_FAIL;
 800a8d8:	2303      	movs	r3, #3
 800a8da:	75fb      	strb	r3, [r7, #23]
      break;
 800a8dc:	e01b      	b.n	800a916 <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8e4:	b2db      	uxtb	r3, r3
 800a8e6:	2b03      	cmp	r3, #3
 800a8e8:	d106      	bne.n	800a8f8 <USBD_CUSTOM_HID_Setup+0x1d8>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	885b      	ldrh	r3, [r3, #2]
 800a8ee:	b2db      	uxtb	r3, r3
 800a8f0:	461a      	mov	r2, r3
 800a8f2:	693b      	ldr	r3, [r7, #16]
 800a8f4:	649a      	str	r2, [r3, #72]	@ 0x48
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a8f6:	e00e      	b.n	800a916 <USBD_CUSTOM_HID_Setup+0x1f6>
        USBD_CtlError(pdev, req);
 800a8f8:	6839      	ldr	r1, [r7, #0]
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	f001 f9d0 	bl	800bca0 <USBD_CtlError>
        ret = USBD_FAIL;
 800a900:	2303      	movs	r3, #3
 800a902:	75fb      	strb	r3, [r7, #23]
      break;
 800a904:	e007      	b.n	800a916 <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800a906:	6839      	ldr	r1, [r7, #0]
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	f001 f9c9 	bl	800bca0 <USBD_CtlError>
      ret = USBD_FAIL;
 800a90e:	2303      	movs	r3, #3
 800a910:	75fb      	strb	r3, [r7, #23]
      break;
 800a912:	e000      	b.n	800a916 <USBD_CUSTOM_HID_Setup+0x1f6>
      break;
 800a914:	bf00      	nop
    }
    break;
 800a916:	e006      	b.n	800a926 <USBD_CUSTOM_HID_Setup+0x206>

  default:
    USBD_CtlError(pdev, req);
 800a918:	6839      	ldr	r1, [r7, #0]
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f001 f9c0 	bl	800bca0 <USBD_CtlError>
    ret = USBD_FAIL;
 800a920:	2303      	movs	r3, #3
 800a922:	75fb      	strb	r3, [r7, #23]
    break;
 800a924:	bf00      	nop
  }
  return (uint8_t)ret;
 800a926:	7dfb      	ldrb	r3, [r7, #23]
}
 800a928:	4618      	mov	r0, r3
 800a92a:	3720      	adds	r7, #32
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}
 800a930:	2000029c 	.word	0x2000029c

0800a934 <USBD_CUSTOM_HID_SendReport>:
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b086      	sub	sp, #24
 800a938:	af00      	add	r7, sp, #0
 800a93a:	60f8      	str	r0, [r7, #12]
 800a93c:	60b9      	str	r1, [r7, #8]
 800a93e:	4613      	mov	r3, r2
 800a940:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData_HID_Custom == NULL)
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d101      	bne.n	800a950 <USBD_CUSTOM_HID_SendReport+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800a94c:	2303      	movs	r3, #3
 800a94e:	e01d      	b.n	800a98c <USBD_CUSTOM_HID_SendReport+0x58>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a956:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a95e:	b2db      	uxtb	r3, r3
 800a960:	2b03      	cmp	r3, #3
 800a962:	d112      	bne.n	800a98a <USBD_CUSTOM_HID_SendReport+0x56>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d10b      	bne.n	800a986 <USBD_CUSTOM_HID_SendReport+0x52>
    {
      hhid->state = CUSTOM_HID_BUSY;
 800a96e:	697b      	ldr	r3, [r7, #20]
 800a970:	2201      	movs	r2, #1
 800a972:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      (void)USBD_LL_Transmit(pdev, CUSTOM_HID_IN_EP, report, len);
 800a976:	4b07      	ldr	r3, [pc, #28]	@ (800a994 <USBD_CUSTOM_HID_SendReport+0x60>)
 800a978:	7819      	ldrb	r1, [r3, #0]
 800a97a:	88fb      	ldrh	r3, [r7, #6]
 800a97c:	68ba      	ldr	r2, [r7, #8]
 800a97e:	68f8      	ldr	r0, [r7, #12]
 800a980:	f001 fcdf 	bl	800c342 <USBD_LL_Transmit>
 800a984:	e001      	b.n	800a98a <USBD_CUSTOM_HID_SendReport+0x56>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 800a986:	2301      	movs	r3, #1
 800a988:	e000      	b.n	800a98c <USBD_CUSTOM_HID_SendReport+0x58>
    }
  }
  return (uint8_t)USBD_OK;
 800a98a:	2300      	movs	r3, #0
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	3718      	adds	r7, #24
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}
 800a994:	200001da 	.word	0x200001da

0800a998 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 800a998:	b480      	push	{r7}
 800a99a:	b083      	sub	sp, #12
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2229      	movs	r2, #41	@ 0x29
 800a9a4:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgFSDesc;
 800a9a6:	4b03      	ldr	r3, [pc, #12]	@ (800a9b4 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	370c      	adds	r7, #12
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b2:	4770      	bx	lr
 800a9b4:	20000218 	.word	0x20000218

0800a9b8 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b083      	sub	sp, #12
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2229      	movs	r2, #41	@ 0x29
 800a9c4:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgHSDesc;
 800a9c6:	4b03      	ldr	r3, [pc, #12]	@ (800a9d4 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	370c      	adds	r7, #12
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d2:	4770      	bx	lr
 800a9d4:	20000244 	.word	0x20000244

0800a9d8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a9d8:	b480      	push	{r7}
 800a9da:	b083      	sub	sp, #12
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2229      	movs	r2, #41	@ 0x29
 800a9e4:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 800a9e6:	4b03      	ldr	r3, [pc, #12]	@ (800a9f4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	370c      	adds	r7, #12
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f2:	4770      	bx	lr
 800a9f4:	20000270 	.word	0x20000270

0800a9f8 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */

static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b083      	sub	sp, #12
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
 800aa00:	460b      	mov	r3, r1
 800aa02:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom)->state = CUSTOM_HID_IDLE;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 // HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6); // hoặc nháy LED nếu có
  return (uint8_t)USBD_OK;
 800aa10:	2300      	movs	r3, #0
}
 800aa12:	4618      	mov	r0, r3
 800aa14:	370c      	adds	r7, #12
 800aa16:	46bd      	mov	sp, r7
 800aa18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1c:	4770      	bx	lr
	...

0800aa20 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b084      	sub	sp, #16
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
 800aa28:	460b      	mov	r3, r1
 800aa2a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData_HID_Custom == NULL)
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d101      	bne.n	800aa3a <USBD_CUSTOM_HID_DataOut+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800aa36:	2303      	movs	r3, #3
 800aa38:	e013      	b.n	800aa62 <USBD_CUSTOM_HID_DataOut+0x42>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800aa40:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->OutEvent(hhid->Report_buf, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800aa48:	68db      	ldr	r3, [r3, #12]
 800aa4a:	68fa      	ldr	r2, [r7, #12]
 800aa4c:	2140      	movs	r1, #64	@ 0x40
 800aa4e:	4610      	mov	r0, r2
 800aa50:	4798      	blx	r3
 // HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
  USBD_LL_PrepareReceive(pdev,CUSTOM_HID_OUT_EP,hhid->Report_buf,
 800aa52:	4b06      	ldr	r3, [pc, #24]	@ (800aa6c <USBD_CUSTOM_HID_DataOut+0x4c>)
 800aa54:	7819      	ldrb	r1, [r3, #0]
 800aa56:	68fa      	ldr	r2, [r7, #12]
 800aa58:	2340      	movs	r3, #64	@ 0x40
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	f001 fc92 	bl	800c384 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  return (uint8_t)USBD_OK;
 800aa60:	2300      	movs	r3, #0
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	3710      	adds	r7, #16
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}
 800aa6a:	bf00      	nop
 800aa6c:	200001db 	.word	0x200001db

0800aa70 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b084      	sub	sp, #16
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800aa7e:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d101      	bne.n	800aa8a <USBD_CUSTOM_HID_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800aa86:	2303      	movs	r3, #3
 800aa88:	e00f      	b.n	800aaaa <USBD_CUSTOM_HID_EP0_RxReady+0x3a>
  }

  if (hhid->IsReportAvailable == 1U)
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa8e:	2b01      	cmp	r3, #1
 800aa90:	d10a      	bne.n	800aaa8 <USBD_CUSTOM_HID_EP0_RxReady+0x38>
  {
    //((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->OutEvent(hhid->Report_buf[0], hhid->Report_buf[1]);
	  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->OutEvent(hhid->Report_buf, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800aa98:	68db      	ldr	r3, [r3, #12]
 800aa9a:	68fa      	ldr	r2, [r7, #12]
 800aa9c:	2140      	movs	r1, #64	@ 0x40
 800aa9e:	4610      	mov	r0, r2
 800aaa0:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return (uint8_t)USBD_OK;
 800aaa8:	2300      	movs	r3, #0
}
 800aaaa:	4618      	mov	r0, r3
 800aaac:	3710      	adds	r7, #16
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd80      	pop	{r7, pc}
	...

0800aab4 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800aab4:	b480      	push	{r7}
 800aab6:	b083      	sub	sp, #12
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	220a      	movs	r2, #10
 800aac0:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800aac2:	4b03      	ldr	r3, [pc, #12]	@ (800aad0 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	370c      	adds	r7, #12
 800aac8:	46bd      	mov	sp, r7
 800aaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aace:	4770      	bx	lr
 800aad0:	200002a8 	.word	0x200002a8

0800aad4 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800aad4:	b480      	push	{r7}
 800aad6:	b083      	sub	sp, #12
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
 800aadc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d101      	bne.n	800aae8 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800aae4:	2303      	movs	r3, #3
 800aae6:	e004      	b.n	800aaf2 <USBD_CUSTOM_HID_RegisterInterface+0x1e>
  }

  pdev->pUserData_HID_Custom = fops;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	683a      	ldr	r2, [r7, #0]
 800aaec:	f8c3 22dc 	str.w	r2, [r3, #732]	@ 0x2dc

  return (uint8_t)USBD_OK;
 800aaf0:	2300      	movs	r3, #0
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	370c      	adds	r7, #12
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafc:	4770      	bx	lr
	...

0800ab00 <USBD_Update_HID_Custom_DESC>:

void USBD_Update_HID_Custom_DESC(uint8_t *desc, uint8_t itf_no, uint8_t in_ep, uint8_t out_ep, uint8_t str_idx)
{
 800ab00:	b480      	push	{r7}
 800ab02:	b083      	sub	sp, #12
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
 800ab08:	4608      	mov	r0, r1
 800ab0a:	4611      	mov	r1, r2
 800ab0c:	461a      	mov	r2, r3
 800ab0e:	4603      	mov	r3, r0
 800ab10:	70fb      	strb	r3, [r7, #3]
 800ab12:	460b      	mov	r3, r1
 800ab14:	70bb      	strb	r3, [r7, #2]
 800ab16:	4613      	mov	r3, r2
 800ab18:	707b      	strb	r3, [r7, #1]
  desc[11] = itf_no;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	330b      	adds	r3, #11
 800ab1e:	78fa      	ldrb	r2, [r7, #3]
 800ab20:	701a      	strb	r2, [r3, #0]
  desc[17] = str_idx;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	3311      	adds	r3, #17
 800ab26:	7c3a      	ldrb	r2, [r7, #16]
 800ab28:	701a      	strb	r2, [r3, #0]
  desc[29] = in_ep;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	331d      	adds	r3, #29
 800ab2e:	78ba      	ldrb	r2, [r7, #2]
 800ab30:	701a      	strb	r2, [r3, #0]
  desc[36] = out_ep;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	3324      	adds	r3, #36	@ 0x24
 800ab36:	787a      	ldrb	r2, [r7, #1]
 800ab38:	701a      	strb	r2, [r3, #0]

  CUSTOM_HID_IN_EP = in_ep;
 800ab3a:	4a09      	ldr	r2, [pc, #36]	@ (800ab60 <USBD_Update_HID_Custom_DESC+0x60>)
 800ab3c:	78bb      	ldrb	r3, [r7, #2]
 800ab3e:	7013      	strb	r3, [r2, #0]
  CUSTOM_HID_OUT_EP = out_ep;
 800ab40:	4a08      	ldr	r2, [pc, #32]	@ (800ab64 <USBD_Update_HID_Custom_DESC+0x64>)
 800ab42:	787b      	ldrb	r3, [r7, #1]
 800ab44:	7013      	strb	r3, [r2, #0]
  CUSTOM_HID_ITF_NBR = itf_no;
 800ab46:	4a08      	ldr	r2, [pc, #32]	@ (800ab68 <USBD_Update_HID_Custom_DESC+0x68>)
 800ab48:	78fb      	ldrb	r3, [r7, #3]
 800ab4a:	7013      	strb	r3, [r2, #0]
  CUSTOM_HID_STR_DESC_IDX = str_idx;
 800ab4c:	4a07      	ldr	r2, [pc, #28]	@ (800ab6c <USBD_Update_HID_Custom_DESC+0x6c>)
 800ab4e:	7c3b      	ldrb	r3, [r7, #16]
 800ab50:	7013      	strb	r3, [r2, #0]
}
 800ab52:	bf00      	nop
 800ab54:	370c      	adds	r7, #12
 800ab56:	46bd      	mov	sp, r7
 800ab58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5c:	4770      	bx	lr
 800ab5e:	bf00      	nop
 800ab60:	200001da 	.word	0x200001da
 800ab64:	200001db 	.word	0x200001db
 800ab68:	20003478 	.word	0x20003478
 800ab6c:	20003479 	.word	0x20003479

0800ab70 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b086      	sub	sp, #24
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	60f8      	str	r0, [r7, #12]
 800ab78:	60b9      	str	r1, [r7, #8]
 800ab7a:	4613      	mov	r3, r2
 800ab7c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d101      	bne.n	800ab88 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ab84:	2303      	movs	r3, #3
 800ab86:	e01b      	b.n	800abc0 <USBD_Init+0x50>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pConfDesc = NULL;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	2200      	movs	r2, #0
 800ab94:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d003      	beq.n	800aba6 <USBD_Init+0x36>
  {
    pdev->pDesc = pdesc;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	68ba      	ldr	r2, [r7, #8]
 800aba2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	2201      	movs	r2, #1
 800abaa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	79fa      	ldrb	r2, [r7, #7]
 800abb2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800abb4:	68f8      	ldr	r0, [r7, #12]
 800abb6:	f001 fa7d 	bl	800c0b4 <USBD_LL_Init>
 800abba:	4603      	mov	r3, r0
 800abbc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800abbe:	7dfb      	ldrb	r3, [r7, #23]
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	3718      	adds	r7, #24
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}

0800abc8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b084      	sub	sp, #16
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
 800abd0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800abd2:	2300      	movs	r3, #0
 800abd4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d101      	bne.n	800abe0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800abdc:	2303      	movs	r3, #3
 800abde:	e02d      	b.n	800ac3c <USBD_RegisterClass+0x74>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	683a      	ldr	r2, [r7, #0]
 800abe4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  /* Get Device Configuration Descriptor */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	7c1b      	ldrb	r3, [r3, #16]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d112      	bne.n	800ac16 <USBD_RegisterClass+0x4e>
  {
	  if (pdev->pClass->GetHSConfigDescriptor != NULL)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d01e      	beq.n	800ac3a <USBD_RegisterClass+0x72>
	  {
		  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac04:	f107 020e 	add.w	r2, r7, #14
 800ac08:	4610      	mov	r0, r2
 800ac0a:	4798      	blx	r3
 800ac0c:	4602      	mov	r2, r0
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318
 800ac14:	e011      	b.n	800ac3a <USBD_RegisterClass+0x72>
	  }
  }
  else if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d00b      	beq.n	800ac3a <USBD_RegisterClass+0x72>
  {
	  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac2a:	f107 020e 	add.w	r2, r7, #14
 800ac2e:	4610      	mov	r0, r2
 800ac30:	4798      	blx	r3
 800ac32:	4602      	mov	r2, r0
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318
  }

  return USBD_OK;
 800ac3a:	2300      	movs	r3, #0
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	3710      	adds	r7, #16
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}

0800ac44 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b082      	sub	sp, #8
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ac4c:	6878      	ldr	r0, [r7, #4]
 800ac4e:	f001 fa8f 	bl	800c170 <USBD_LL_Start>
 800ac52:	4603      	mov	r3, r0
}
 800ac54:	4618      	mov	r0, r3
 800ac56:	3708      	adds	r7, #8
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}

0800ac5c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ac5c:	b480      	push	{r7}
 800ac5e:	b083      	sub	sp, #12
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ac64:	2300      	movs	r3, #0
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	370c      	adds	r7, #12
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac70:	4770      	bx	lr

0800ac72 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ac72:	b580      	push	{r7, lr}
 800ac74:	b084      	sub	sp, #16
 800ac76:	af00      	add	r7, sp, #0
 800ac78:	6078      	str	r0, [r7, #4]
 800ac7a:	460b      	mov	r3, r1
 800ac7c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ac7e:	2303      	movs	r3, #3
 800ac80:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d009      	beq.n	800aca0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	78fa      	ldrb	r2, [r7, #3]
 800ac96:	4611      	mov	r1, r2
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	4798      	blx	r3
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800aca0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aca2:	4618      	mov	r0, r3
 800aca4:	3710      	adds	r7, #16
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}

0800acaa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800acaa:	b580      	push	{r7, lr}
 800acac:	b082      	sub	sp, #8
 800acae:	af00      	add	r7, sp, #0
 800acb0:	6078      	str	r0, [r7, #4]
 800acb2:	460b      	mov	r3, r1
 800acb4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d007      	beq.n	800acd0 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800acc6:	685b      	ldr	r3, [r3, #4]
 800acc8:	78fa      	ldrb	r2, [r7, #3]
 800acca:	4611      	mov	r1, r2
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	4798      	blx	r3
  }

  return USBD_OK;
 800acd0:	2300      	movs	r3, #0
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	3708      	adds	r7, #8
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}

0800acda <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800acda:	b580      	push	{r7, lr}
 800acdc:	b084      	sub	sp, #16
 800acde:	af00      	add	r7, sp, #0
 800ace0:	6078      	str	r0, [r7, #4]
 800ace2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800acea:	6839      	ldr	r1, [r7, #0]
 800acec:	4618      	mov	r0, r3
 800acee:	f000 ff9d 	bl	800bc2c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2201      	movs	r2, #1
 800acf6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800ad00:	461a      	mov	r2, r3
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ad0e:	f003 031f 	and.w	r3, r3, #31
 800ad12:	2b02      	cmp	r3, #2
 800ad14:	d01a      	beq.n	800ad4c <USBD_LL_SetupStage+0x72>
 800ad16:	2b02      	cmp	r3, #2
 800ad18:	d822      	bhi.n	800ad60 <USBD_LL_SetupStage+0x86>
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d002      	beq.n	800ad24 <USBD_LL_SetupStage+0x4a>
 800ad1e:	2b01      	cmp	r3, #1
 800ad20:	d00a      	beq.n	800ad38 <USBD_LL_SetupStage+0x5e>
 800ad22:	e01d      	b.n	800ad60 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ad2a:	4619      	mov	r1, r3
 800ad2c:	6878      	ldr	r0, [r7, #4]
 800ad2e:	f000 fa5d 	bl	800b1ec <USBD_StdDevReq>
 800ad32:	4603      	mov	r3, r0
 800ad34:	73fb      	strb	r3, [r7, #15]
      break;
 800ad36:	e020      	b.n	800ad7a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ad3e:	4619      	mov	r1, r3
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	f000 fac1 	bl	800b2c8 <USBD_StdItfReq>
 800ad46:	4603      	mov	r3, r0
 800ad48:	73fb      	strb	r3, [r7, #15]
      break;
 800ad4a:	e016      	b.n	800ad7a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ad52:	4619      	mov	r1, r3
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f000 fb00 	bl	800b35a <USBD_StdEPReq>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	73fb      	strb	r3, [r7, #15]
      break;
 800ad5e:	e00c      	b.n	800ad7a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ad66:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ad6a:	b2db      	uxtb	r3, r3
 800ad6c:	4619      	mov	r1, r3
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f001 fa5e 	bl	800c230 <USBD_LL_StallEP>
 800ad74:	4603      	mov	r3, r0
 800ad76:	73fb      	strb	r3, [r7, #15]
      break;
 800ad78:	bf00      	nop
  }

  return ret;
 800ad7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	3710      	adds	r7, #16
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}

0800ad84 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b086      	sub	sp, #24
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	60f8      	str	r0, [r7, #12]
 800ad8c:	460b      	mov	r3, r1
 800ad8e:	607a      	str	r2, [r7, #4]
 800ad90:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ad92:	7afb      	ldrb	r3, [r7, #11]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d138      	bne.n	800ae0a <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800ad9e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ada6:	2b03      	cmp	r3, #3
 800ada8:	d14a      	bne.n	800ae40 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800adaa:	693b      	ldr	r3, [r7, #16]
 800adac:	689a      	ldr	r2, [r3, #8]
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	68db      	ldr	r3, [r3, #12]
 800adb2:	429a      	cmp	r2, r3
 800adb4:	d913      	bls.n	800adde <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	689a      	ldr	r2, [r3, #8]
 800adba:	693b      	ldr	r3, [r7, #16]
 800adbc:	68db      	ldr	r3, [r3, #12]
 800adbe:	1ad2      	subs	r2, r2, r3
 800adc0:	693b      	ldr	r3, [r7, #16]
 800adc2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800adc4:	693b      	ldr	r3, [r7, #16]
 800adc6:	68da      	ldr	r2, [r3, #12]
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	689b      	ldr	r3, [r3, #8]
 800adcc:	4293      	cmp	r3, r2
 800adce:	bf28      	it	cs
 800add0:	4613      	movcs	r3, r2
 800add2:	461a      	mov	r2, r3
 800add4:	6879      	ldr	r1, [r7, #4]
 800add6:	68f8      	ldr	r0, [r7, #12]
 800add8:	f001 f81c 	bl	800be14 <USBD_CtlContinueRx>
 800addc:	e030      	b.n	800ae40 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ade4:	b2db      	uxtb	r3, r3
 800ade6:	2b03      	cmp	r3, #3
 800ade8:	d10b      	bne.n	800ae02 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800adf0:	691b      	ldr	r3, [r3, #16]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d005      	beq.n	800ae02 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800adfc:	691b      	ldr	r3, [r3, #16]
 800adfe:	68f8      	ldr	r0, [r7, #12]
 800ae00:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ae02:	68f8      	ldr	r0, [r7, #12]
 800ae04:	f001 f817 	bl	800be36 <USBD_CtlSendStatus>
 800ae08:	e01a      	b.n	800ae40 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae10:	b2db      	uxtb	r3, r3
 800ae12:	2b03      	cmp	r3, #3
 800ae14:	d114      	bne.n	800ae40 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae1c:	699b      	ldr	r3, [r3, #24]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d00e      	beq.n	800ae40 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae28:	699b      	ldr	r3, [r3, #24]
 800ae2a:	7afa      	ldrb	r2, [r7, #11]
 800ae2c:	4611      	mov	r1, r2
 800ae2e:	68f8      	ldr	r0, [r7, #12]
 800ae30:	4798      	blx	r3
 800ae32:	4603      	mov	r3, r0
 800ae34:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ae36:	7dfb      	ldrb	r3, [r7, #23]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d001      	beq.n	800ae40 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800ae3c:	7dfb      	ldrb	r3, [r7, #23]
 800ae3e:	e000      	b.n	800ae42 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800ae40:	2300      	movs	r3, #0
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	3718      	adds	r7, #24
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}

0800ae4a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ae4a:	b580      	push	{r7, lr}
 800ae4c:	b086      	sub	sp, #24
 800ae4e:	af00      	add	r7, sp, #0
 800ae50:	60f8      	str	r0, [r7, #12]
 800ae52:	460b      	mov	r3, r1
 800ae54:	607a      	str	r2, [r7, #4]
 800ae56:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ae58:	7afb      	ldrb	r3, [r7, #11]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d16b      	bne.n	800af36 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	3314      	adds	r3, #20
 800ae62:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ae6a:	2b02      	cmp	r3, #2
 800ae6c:	d156      	bne.n	800af1c <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800ae6e:	693b      	ldr	r3, [r7, #16]
 800ae70:	689a      	ldr	r2, [r3, #8]
 800ae72:	693b      	ldr	r3, [r7, #16]
 800ae74:	68db      	ldr	r3, [r3, #12]
 800ae76:	429a      	cmp	r2, r3
 800ae78:	d914      	bls.n	800aea4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ae7a:	693b      	ldr	r3, [r7, #16]
 800ae7c:	689a      	ldr	r2, [r3, #8]
 800ae7e:	693b      	ldr	r3, [r7, #16]
 800ae80:	68db      	ldr	r3, [r3, #12]
 800ae82:	1ad2      	subs	r2, r2, r3
 800ae84:	693b      	ldr	r3, [r7, #16]
 800ae86:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ae88:	693b      	ldr	r3, [r7, #16]
 800ae8a:	689b      	ldr	r3, [r3, #8]
 800ae8c:	461a      	mov	r2, r3
 800ae8e:	6879      	ldr	r1, [r7, #4]
 800ae90:	68f8      	ldr	r0, [r7, #12]
 800ae92:	f000 ff91 	bl	800bdb8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ae96:	2300      	movs	r3, #0
 800ae98:	2200      	movs	r2, #0
 800ae9a:	2100      	movs	r1, #0
 800ae9c:	68f8      	ldr	r0, [r7, #12]
 800ae9e:	f001 fa71 	bl	800c384 <USBD_LL_PrepareReceive>
 800aea2:	e03b      	b.n	800af1c <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800aea4:	693b      	ldr	r3, [r7, #16]
 800aea6:	68da      	ldr	r2, [r3, #12]
 800aea8:	693b      	ldr	r3, [r7, #16]
 800aeaa:	689b      	ldr	r3, [r3, #8]
 800aeac:	429a      	cmp	r2, r3
 800aeae:	d11c      	bne.n	800aeea <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800aeb0:	693b      	ldr	r3, [r7, #16]
 800aeb2:	685a      	ldr	r2, [r3, #4]
 800aeb4:	693b      	ldr	r3, [r7, #16]
 800aeb6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800aeb8:	429a      	cmp	r2, r3
 800aeba:	d316      	bcc.n	800aeea <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800aebc:	693b      	ldr	r3, [r7, #16]
 800aebe:	685a      	ldr	r2, [r3, #4]
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800aec6:	429a      	cmp	r2, r3
 800aec8:	d20f      	bcs.n	800aeea <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800aeca:	2200      	movs	r2, #0
 800aecc:	2100      	movs	r1, #0
 800aece:	68f8      	ldr	r0, [r7, #12]
 800aed0:	f000 ff72 	bl	800bdb8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	2200      	movs	r2, #0
 800aed8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aedc:	2300      	movs	r3, #0
 800aede:	2200      	movs	r2, #0
 800aee0:	2100      	movs	r1, #0
 800aee2:	68f8      	ldr	r0, [r7, #12]
 800aee4:	f001 fa4e 	bl	800c384 <USBD_LL_PrepareReceive>
 800aee8:	e018      	b.n	800af1c <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aef0:	b2db      	uxtb	r3, r3
 800aef2:	2b03      	cmp	r3, #3
 800aef4:	d10b      	bne.n	800af0e <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aefc:	68db      	ldr	r3, [r3, #12]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d005      	beq.n	800af0e <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af08:	68db      	ldr	r3, [r3, #12]
 800af0a:	68f8      	ldr	r0, [r7, #12]
 800af0c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800af0e:	2180      	movs	r1, #128	@ 0x80
 800af10:	68f8      	ldr	r0, [r7, #12]
 800af12:	f001 f98d 	bl	800c230 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800af16:	68f8      	ldr	r0, [r7, #12]
 800af18:	f000 ffa0 	bl	800be5c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800af22:	2b01      	cmp	r3, #1
 800af24:	d122      	bne.n	800af6c <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800af26:	68f8      	ldr	r0, [r7, #12]
 800af28:	f7ff fe98 	bl	800ac5c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	2200      	movs	r2, #0
 800af30:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800af34:	e01a      	b.n	800af6c <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af3c:	b2db      	uxtb	r3, r3
 800af3e:	2b03      	cmp	r3, #3
 800af40:	d114      	bne.n	800af6c <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af48:	695b      	ldr	r3, [r3, #20]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d00e      	beq.n	800af6c <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af54:	695b      	ldr	r3, [r3, #20]
 800af56:	7afa      	ldrb	r2, [r7, #11]
 800af58:	4611      	mov	r1, r2
 800af5a:	68f8      	ldr	r0, [r7, #12]
 800af5c:	4798      	blx	r3
 800af5e:	4603      	mov	r3, r0
 800af60:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800af62:	7dfb      	ldrb	r3, [r7, #23]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d001      	beq.n	800af6c <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800af68:	7dfb      	ldrb	r3, [r7, #23]
 800af6a:	e000      	b.n	800af6e <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800af6c:	2300      	movs	r3, #0
}
 800af6e:	4618      	mov	r0, r3
 800af70:	3718      	adds	r7, #24
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}

0800af76 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800af76:	b580      	push	{r7, lr}
 800af78:	b082      	sub	sp, #8
 800af7a:	af00      	add	r7, sp, #0
 800af7c:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2201      	movs	r2, #1
 800af82:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2200      	movs	r2, #0
 800af8a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2200      	movs	r2, #0
 800af92:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2200      	movs	r2, #0
 800af98:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d101      	bne.n	800afaa <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800afa6:	2303      	movs	r3, #3
 800afa8:	e02a      	b.n	800b000 <USBD_LL_Reset+0x8a>
  }

	if (pdev->pClass->DeInit != NULL)
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afb0:	685b      	ldr	r3, [r3, #4]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d009      	beq.n	800afca <USBD_LL_Reset+0x54>
	{
	  (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afbc:	685b      	ldr	r3, [r3, #4]
 800afbe:	687a      	ldr	r2, [r7, #4]
 800afc0:	6852      	ldr	r2, [r2, #4]
 800afc2:	b2d2      	uxtb	r2, r2
 800afc4:	4611      	mov	r1, r2
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	4798      	blx	r3
	}

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800afca:	2340      	movs	r3, #64	@ 0x40
 800afcc:	2200      	movs	r2, #0
 800afce:	2100      	movs	r1, #0
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f001 f8e8 	bl	800c1a6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2201      	movs	r2, #1
 800afda:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	2240      	movs	r2, #64	@ 0x40
 800afe2:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800afe6:	2340      	movs	r3, #64	@ 0x40
 800afe8:	2200      	movs	r2, #0
 800afea:	2180      	movs	r1, #128	@ 0x80
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f001 f8da 	bl	800c1a6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2201      	movs	r2, #1
 800aff6:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2240      	movs	r2, #64	@ 0x40
 800affc:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800affe:	2300      	movs	r3, #0
}
 800b000:	4618      	mov	r0, r3
 800b002:	3708      	adds	r7, #8
 800b004:	46bd      	mov	sp, r7
 800b006:	bd80      	pop	{r7, pc}

0800b008 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b008:	b480      	push	{r7}
 800b00a:	b083      	sub	sp, #12
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
 800b010:	460b      	mov	r3, r1
 800b012:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	78fa      	ldrb	r2, [r7, #3]
 800b018:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b01a:	2300      	movs	r3, #0
}
 800b01c:	4618      	mov	r0, r3
 800b01e:	370c      	adds	r7, #12
 800b020:	46bd      	mov	sp, r7
 800b022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b026:	4770      	bx	lr

0800b028 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b028:	b480      	push	{r7}
 800b02a:	b083      	sub	sp, #12
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b036:	b2da      	uxtb	r2, r3
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2204      	movs	r2, #4
 800b042:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b046:	2300      	movs	r3, #0
}
 800b048:	4618      	mov	r0, r3
 800b04a:	370c      	adds	r7, #12
 800b04c:	46bd      	mov	sp, r7
 800b04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b052:	4770      	bx	lr

0800b054 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b054:	b480      	push	{r7}
 800b056:	b083      	sub	sp, #12
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b062:	b2db      	uxtb	r3, r3
 800b064:	2b04      	cmp	r3, #4
 800b066:	d106      	bne.n	800b076 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b06e:	b2da      	uxtb	r2, r3
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b076:	2300      	movs	r3, #0
}
 800b078:	4618      	mov	r0, r3
 800b07a:	370c      	adds	r7, #12
 800b07c:	46bd      	mov	sp, r7
 800b07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b082:	4770      	bx	lr

0800b084 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b082      	sub	sp, #8
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b092:	2b00      	cmp	r3, #0
 800b094:	d101      	bne.n	800b09a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800b096:	2303      	movs	r3, #3
 800b098:	e012      	b.n	800b0c0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b0a0:	b2db      	uxtb	r3, r3
 800b0a2:	2b03      	cmp	r3, #3
 800b0a4:	d10b      	bne.n	800b0be <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0ac:	69db      	ldr	r3, [r3, #28]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d005      	beq.n	800b0be <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0b8:	69db      	ldr	r3, [r3, #28]
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b0be:	2300      	movs	r3, #0
}
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	3708      	adds	r7, #8
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	bd80      	pop	{r7, pc}

0800b0c8 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b082      	sub	sp, #8
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
 800b0d0:	460b      	mov	r3, r1
 800b0d2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d101      	bne.n	800b0e2 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800b0de:	2303      	movs	r3, #3
 800b0e0:	e014      	b.n	800b10c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b0e8:	b2db      	uxtb	r3, r3
 800b0ea:	2b03      	cmp	r3, #3
 800b0ec:	d10d      	bne.n	800b10a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0f4:	6a1b      	ldr	r3, [r3, #32]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d007      	beq.n	800b10a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b100:	6a1b      	ldr	r3, [r3, #32]
 800b102:	78fa      	ldrb	r2, [r7, #3]
 800b104:	4611      	mov	r1, r2
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b10a:	2300      	movs	r3, #0
}
 800b10c:	4618      	mov	r0, r3
 800b10e:	3708      	adds	r7, #8
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}

0800b114 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b082      	sub	sp, #8
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
 800b11c:	460b      	mov	r3, r1
 800b11e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b126:	2b00      	cmp	r3, #0
 800b128:	d101      	bne.n	800b12e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800b12a:	2303      	movs	r3, #3
 800b12c:	e014      	b.n	800b158 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b134:	b2db      	uxtb	r3, r3
 800b136:	2b03      	cmp	r3, #3
 800b138:	d10d      	bne.n	800b156 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b142:	2b00      	cmp	r3, #0
 800b144:	d007      	beq.n	800b156 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b14c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b14e:	78fa      	ldrb	r2, [r7, #3]
 800b150:	4611      	mov	r1, r2
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b156:	2300      	movs	r3, #0
}
 800b158:	4618      	mov	r0, r3
 800b15a:	3708      	adds	r7, #8
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}

0800b160 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b160:	b480      	push	{r7}
 800b162:	b083      	sub	sp, #12
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b168:	2300      	movs	r3, #0
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	370c      	adds	r7, #12
 800b16e:	46bd      	mov	sp, r7
 800b170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b174:	4770      	bx	lr

0800b176 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b176:	b580      	push	{r7, lr}
 800b178:	b082      	sub	sp, #8
 800b17a:	af00      	add	r7, sp, #0
 800b17c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2201      	movs	r2, #1
 800b182:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  if (pdev->pClass != NULL)
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d009      	beq.n	800b1a4 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b196:	685b      	ldr	r3, [r3, #4]
 800b198:	687a      	ldr	r2, [r7, #4]
 800b19a:	6852      	ldr	r2, [r2, #4]
 800b19c:	b2d2      	uxtb	r2, r2
 800b19e:	4611      	mov	r1, r2
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	4798      	blx	r3
  }

  return USBD_OK;
 800b1a4:	2300      	movs	r3, #0
}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	3708      	adds	r7, #8
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}

0800b1ae <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b1ae:	b480      	push	{r7}
 800b1b0:	b087      	sub	sp, #28
 800b1b2:	af00      	add	r7, sp, #0
 800b1b4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b1ba:	697b      	ldr	r3, [r7, #20]
 800b1bc:	781b      	ldrb	r3, [r3, #0]
 800b1be:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b1c0:	697b      	ldr	r3, [r7, #20]
 800b1c2:	3301      	adds	r3, #1
 800b1c4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b1c6:	697b      	ldr	r3, [r7, #20]
 800b1c8:	781b      	ldrb	r3, [r3, #0]
 800b1ca:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b1cc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800b1d0:	021b      	lsls	r3, r3, #8
 800b1d2:	b21a      	sxth	r2, r3
 800b1d4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b1d8:	4313      	orrs	r3, r2
 800b1da:	b21b      	sxth	r3, r3
 800b1dc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b1de:	89fb      	ldrh	r3, [r7, #14]
}
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	371c      	adds	r7, #28
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ea:	4770      	bx	lr

0800b1ec <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b084      	sub	sp, #16
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
 800b1f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	781b      	ldrb	r3, [r3, #0]
 800b1fe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b202:	2b40      	cmp	r3, #64	@ 0x40
 800b204:	d005      	beq.n	800b212 <USBD_StdDevReq+0x26>
 800b206:	2b40      	cmp	r3, #64	@ 0x40
 800b208:	d853      	bhi.n	800b2b2 <USBD_StdDevReq+0xc6>
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d00b      	beq.n	800b226 <USBD_StdDevReq+0x3a>
 800b20e:	2b20      	cmp	r3, #32
 800b210:	d14f      	bne.n	800b2b2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b218:	689b      	ldr	r3, [r3, #8]
 800b21a:	6839      	ldr	r1, [r7, #0]
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	4798      	blx	r3
 800b220:	4603      	mov	r3, r0
 800b222:	73fb      	strb	r3, [r7, #15]
      break;
 800b224:	e04a      	b.n	800b2bc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	785b      	ldrb	r3, [r3, #1]
 800b22a:	2b09      	cmp	r3, #9
 800b22c:	d83b      	bhi.n	800b2a6 <USBD_StdDevReq+0xba>
 800b22e:	a201      	add	r2, pc, #4	@ (adr r2, 800b234 <USBD_StdDevReq+0x48>)
 800b230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b234:	0800b289 	.word	0x0800b289
 800b238:	0800b29d 	.word	0x0800b29d
 800b23c:	0800b2a7 	.word	0x0800b2a7
 800b240:	0800b293 	.word	0x0800b293
 800b244:	0800b2a7 	.word	0x0800b2a7
 800b248:	0800b267 	.word	0x0800b267
 800b24c:	0800b25d 	.word	0x0800b25d
 800b250:	0800b2a7 	.word	0x0800b2a7
 800b254:	0800b27f 	.word	0x0800b27f
 800b258:	0800b271 	.word	0x0800b271
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b25c:	6839      	ldr	r1, [r7, #0]
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	f000 f9de 	bl	800b620 <USBD_GetDescriptor>
          break;
 800b264:	e024      	b.n	800b2b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b266:	6839      	ldr	r1, [r7, #0]
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	f000 fb55 	bl	800b918 <USBD_SetAddress>
          break;
 800b26e:	e01f      	b.n	800b2b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b270:	6839      	ldr	r1, [r7, #0]
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f000 fb94 	bl	800b9a0 <USBD_SetConfig>
 800b278:	4603      	mov	r3, r0
 800b27a:	73fb      	strb	r3, [r7, #15]
          break;
 800b27c:	e018      	b.n	800b2b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b27e:	6839      	ldr	r1, [r7, #0]
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	f000 fc33 	bl	800baec <USBD_GetConfig>
          break;
 800b286:	e013      	b.n	800b2b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b288:	6839      	ldr	r1, [r7, #0]
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f000 fc64 	bl	800bb58 <USBD_GetStatus>
          break;
 800b290:	e00e      	b.n	800b2b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b292:	6839      	ldr	r1, [r7, #0]
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	f000 fc93 	bl	800bbc0 <USBD_SetFeature>
          break;
 800b29a:	e009      	b.n	800b2b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b29c:	6839      	ldr	r1, [r7, #0]
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f000 fca2 	bl	800bbe8 <USBD_ClrFeature>
          break;
 800b2a4:	e004      	b.n	800b2b0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800b2a6:	6839      	ldr	r1, [r7, #0]
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	f000 fcf9 	bl	800bca0 <USBD_CtlError>
          break;
 800b2ae:	bf00      	nop
      }
      break;
 800b2b0:	e004      	b.n	800b2bc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800b2b2:	6839      	ldr	r1, [r7, #0]
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	f000 fcf3 	bl	800bca0 <USBD_CtlError>
      break;
 800b2ba:	bf00      	nop
  }

  return ret;
 800b2bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3710      	adds	r7, #16
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}
 800b2c6:	bf00      	nop

0800b2c8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b084      	sub	sp, #16
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
 800b2d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	781b      	ldrb	r3, [r3, #0]
 800b2da:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b2de:	2b40      	cmp	r3, #64	@ 0x40
 800b2e0:	d005      	beq.n	800b2ee <USBD_StdItfReq+0x26>
 800b2e2:	2b40      	cmp	r3, #64	@ 0x40
 800b2e4:	d82f      	bhi.n	800b346 <USBD_StdItfReq+0x7e>
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d001      	beq.n	800b2ee <USBD_StdItfReq+0x26>
 800b2ea:	2b20      	cmp	r3, #32
 800b2ec:	d12b      	bne.n	800b346 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b2f4:	b2db      	uxtb	r3, r3
 800b2f6:	3b01      	subs	r3, #1
 800b2f8:	2b02      	cmp	r3, #2
 800b2fa:	d81d      	bhi.n	800b338 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	889b      	ldrh	r3, [r3, #4]
 800b300:	b2db      	uxtb	r3, r3
 800b302:	2b0f      	cmp	r3, #15
 800b304:	d813      	bhi.n	800b32e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b30c:	689b      	ldr	r3, [r3, #8]
 800b30e:	6839      	ldr	r1, [r7, #0]
 800b310:	6878      	ldr	r0, [r7, #4]
 800b312:	4798      	blx	r3
 800b314:	4603      	mov	r3, r0
 800b316:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	88db      	ldrh	r3, [r3, #6]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d110      	bne.n	800b342 <USBD_StdItfReq+0x7a>
 800b320:	7bfb      	ldrb	r3, [r7, #15]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d10d      	bne.n	800b342 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	f000 fd85 	bl	800be36 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b32c:	e009      	b.n	800b342 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800b32e:	6839      	ldr	r1, [r7, #0]
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	f000 fcb5 	bl	800bca0 <USBD_CtlError>
          break;
 800b336:	e004      	b.n	800b342 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800b338:	6839      	ldr	r1, [r7, #0]
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f000 fcb0 	bl	800bca0 <USBD_CtlError>
          break;
 800b340:	e000      	b.n	800b344 <USBD_StdItfReq+0x7c>
          break;
 800b342:	bf00      	nop
      }
      break;
 800b344:	e004      	b.n	800b350 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800b346:	6839      	ldr	r1, [r7, #0]
 800b348:	6878      	ldr	r0, [r7, #4]
 800b34a:	f000 fca9 	bl	800bca0 <USBD_CtlError>
      break;
 800b34e:	bf00      	nop
  }

  return ret;
 800b350:	7bfb      	ldrb	r3, [r7, #15]
}
 800b352:	4618      	mov	r0, r3
 800b354:	3710      	adds	r7, #16
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}

0800b35a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b35a:	b580      	push	{r7, lr}
 800b35c:	b084      	sub	sp, #16
 800b35e:	af00      	add	r7, sp, #0
 800b360:	6078      	str	r0, [r7, #4]
 800b362:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b364:	2300      	movs	r3, #0
 800b366:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	889b      	ldrh	r3, [r3, #4]
 800b36c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	781b      	ldrb	r3, [r3, #0]
 800b372:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b376:	2b40      	cmp	r3, #64	@ 0x40
 800b378:	d007      	beq.n	800b38a <USBD_StdEPReq+0x30>
 800b37a:	2b40      	cmp	r3, #64	@ 0x40
 800b37c:	f200 8145 	bhi.w	800b60a <USBD_StdEPReq+0x2b0>
 800b380:	2b00      	cmp	r3, #0
 800b382:	d00c      	beq.n	800b39e <USBD_StdEPReq+0x44>
 800b384:	2b20      	cmp	r3, #32
 800b386:	f040 8140 	bne.w	800b60a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b390:	689b      	ldr	r3, [r3, #8]
 800b392:	6839      	ldr	r1, [r7, #0]
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	4798      	blx	r3
 800b398:	4603      	mov	r3, r0
 800b39a:	73fb      	strb	r3, [r7, #15]
      break;
 800b39c:	e13a      	b.n	800b614 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	785b      	ldrb	r3, [r3, #1]
 800b3a2:	2b03      	cmp	r3, #3
 800b3a4:	d007      	beq.n	800b3b6 <USBD_StdEPReq+0x5c>
 800b3a6:	2b03      	cmp	r3, #3
 800b3a8:	f300 8129 	bgt.w	800b5fe <USBD_StdEPReq+0x2a4>
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d07f      	beq.n	800b4b0 <USBD_StdEPReq+0x156>
 800b3b0:	2b01      	cmp	r3, #1
 800b3b2:	d03c      	beq.n	800b42e <USBD_StdEPReq+0xd4>
 800b3b4:	e123      	b.n	800b5fe <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b3bc:	b2db      	uxtb	r3, r3
 800b3be:	2b02      	cmp	r3, #2
 800b3c0:	d002      	beq.n	800b3c8 <USBD_StdEPReq+0x6e>
 800b3c2:	2b03      	cmp	r3, #3
 800b3c4:	d016      	beq.n	800b3f4 <USBD_StdEPReq+0x9a>
 800b3c6:	e02c      	b.n	800b422 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b3c8:	7bbb      	ldrb	r3, [r7, #14]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d00d      	beq.n	800b3ea <USBD_StdEPReq+0x90>
 800b3ce:	7bbb      	ldrb	r3, [r7, #14]
 800b3d0:	2b80      	cmp	r3, #128	@ 0x80
 800b3d2:	d00a      	beq.n	800b3ea <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b3d4:	7bbb      	ldrb	r3, [r7, #14]
 800b3d6:	4619      	mov	r1, r3
 800b3d8:	6878      	ldr	r0, [r7, #4]
 800b3da:	f000 ff29 	bl	800c230 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b3de:	2180      	movs	r1, #128	@ 0x80
 800b3e0:	6878      	ldr	r0, [r7, #4]
 800b3e2:	f000 ff25 	bl	800c230 <USBD_LL_StallEP>
 800b3e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b3e8:	e020      	b.n	800b42c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800b3ea:	6839      	ldr	r1, [r7, #0]
 800b3ec:	6878      	ldr	r0, [r7, #4]
 800b3ee:	f000 fc57 	bl	800bca0 <USBD_CtlError>
              break;
 800b3f2:	e01b      	b.n	800b42c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	885b      	ldrh	r3, [r3, #2]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d10e      	bne.n	800b41a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b3fc:	7bbb      	ldrb	r3, [r7, #14]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d00b      	beq.n	800b41a <USBD_StdEPReq+0xc0>
 800b402:	7bbb      	ldrb	r3, [r7, #14]
 800b404:	2b80      	cmp	r3, #128	@ 0x80
 800b406:	d008      	beq.n	800b41a <USBD_StdEPReq+0xc0>
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	88db      	ldrh	r3, [r3, #6]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d104      	bne.n	800b41a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b410:	7bbb      	ldrb	r3, [r7, #14]
 800b412:	4619      	mov	r1, r3
 800b414:	6878      	ldr	r0, [r7, #4]
 800b416:	f000 ff0b 	bl	800c230 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f000 fd0b 	bl	800be36 <USBD_CtlSendStatus>

              break;
 800b420:	e004      	b.n	800b42c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800b422:	6839      	ldr	r1, [r7, #0]
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f000 fc3b 	bl	800bca0 <USBD_CtlError>
              break;
 800b42a:	bf00      	nop
          }
          break;
 800b42c:	e0ec      	b.n	800b608 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b434:	b2db      	uxtb	r3, r3
 800b436:	2b02      	cmp	r3, #2
 800b438:	d002      	beq.n	800b440 <USBD_StdEPReq+0xe6>
 800b43a:	2b03      	cmp	r3, #3
 800b43c:	d016      	beq.n	800b46c <USBD_StdEPReq+0x112>
 800b43e:	e030      	b.n	800b4a2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b440:	7bbb      	ldrb	r3, [r7, #14]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d00d      	beq.n	800b462 <USBD_StdEPReq+0x108>
 800b446:	7bbb      	ldrb	r3, [r7, #14]
 800b448:	2b80      	cmp	r3, #128	@ 0x80
 800b44a:	d00a      	beq.n	800b462 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b44c:	7bbb      	ldrb	r3, [r7, #14]
 800b44e:	4619      	mov	r1, r3
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	f000 feed 	bl	800c230 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b456:	2180      	movs	r1, #128	@ 0x80
 800b458:	6878      	ldr	r0, [r7, #4]
 800b45a:	f000 fee9 	bl	800c230 <USBD_LL_StallEP>
 800b45e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b460:	e025      	b.n	800b4ae <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800b462:	6839      	ldr	r1, [r7, #0]
 800b464:	6878      	ldr	r0, [r7, #4]
 800b466:	f000 fc1b 	bl	800bca0 <USBD_CtlError>
              break;
 800b46a:	e020      	b.n	800b4ae <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	885b      	ldrh	r3, [r3, #2]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d11b      	bne.n	800b4ac <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b474:	7bbb      	ldrb	r3, [r7, #14]
 800b476:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d004      	beq.n	800b488 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b47e:	7bbb      	ldrb	r3, [r7, #14]
 800b480:	4619      	mov	r1, r3
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	f000 fef3 	bl	800c26e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b488:	6878      	ldr	r0, [r7, #4]
 800b48a:	f000 fcd4 	bl	800be36 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b494:	689b      	ldr	r3, [r3, #8]
 800b496:	6839      	ldr	r1, [r7, #0]
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	4798      	blx	r3
 800b49c:	4603      	mov	r3, r0
 800b49e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800b4a0:	e004      	b.n	800b4ac <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800b4a2:	6839      	ldr	r1, [r7, #0]
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	f000 fbfb 	bl	800bca0 <USBD_CtlError>
              break;
 800b4aa:	e000      	b.n	800b4ae <USBD_StdEPReq+0x154>
              break;
 800b4ac:	bf00      	nop
          }
          break;
 800b4ae:	e0ab      	b.n	800b608 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b4b6:	b2db      	uxtb	r3, r3
 800b4b8:	2b02      	cmp	r3, #2
 800b4ba:	d002      	beq.n	800b4c2 <USBD_StdEPReq+0x168>
 800b4bc:	2b03      	cmp	r3, #3
 800b4be:	d032      	beq.n	800b526 <USBD_StdEPReq+0x1cc>
 800b4c0:	e097      	b.n	800b5f2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b4c2:	7bbb      	ldrb	r3, [r7, #14]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d007      	beq.n	800b4d8 <USBD_StdEPReq+0x17e>
 800b4c8:	7bbb      	ldrb	r3, [r7, #14]
 800b4ca:	2b80      	cmp	r3, #128	@ 0x80
 800b4cc:	d004      	beq.n	800b4d8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800b4ce:	6839      	ldr	r1, [r7, #0]
 800b4d0:	6878      	ldr	r0, [r7, #4]
 800b4d2:	f000 fbe5 	bl	800bca0 <USBD_CtlError>
                break;
 800b4d6:	e091      	b.n	800b5fc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b4d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	da0b      	bge.n	800b4f8 <USBD_StdEPReq+0x19e>
 800b4e0:	7bbb      	ldrb	r3, [r7, #14]
 800b4e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b4e6:	4613      	mov	r3, r2
 800b4e8:	009b      	lsls	r3, r3, #2
 800b4ea:	4413      	add	r3, r2
 800b4ec:	009b      	lsls	r3, r3, #2
 800b4ee:	3310      	adds	r3, #16
 800b4f0:	687a      	ldr	r2, [r7, #4]
 800b4f2:	4413      	add	r3, r2
 800b4f4:	3304      	adds	r3, #4
 800b4f6:	e00b      	b.n	800b510 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b4f8:	7bbb      	ldrb	r3, [r7, #14]
 800b4fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b4fe:	4613      	mov	r3, r2
 800b500:	009b      	lsls	r3, r3, #2
 800b502:	4413      	add	r3, r2
 800b504:	009b      	lsls	r3, r3, #2
 800b506:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b50a:	687a      	ldr	r2, [r7, #4]
 800b50c:	4413      	add	r3, r2
 800b50e:	3304      	adds	r3, #4
 800b510:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	2200      	movs	r2, #0
 800b516:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	2202      	movs	r2, #2
 800b51c:	4619      	mov	r1, r3
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f000 fc2f 	bl	800bd82 <USBD_CtlSendData>
              break;
 800b524:	e06a      	b.n	800b5fc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b526:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	da11      	bge.n	800b552 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b52e:	7bbb      	ldrb	r3, [r7, #14]
 800b530:	f003 020f 	and.w	r2, r3, #15
 800b534:	6879      	ldr	r1, [r7, #4]
 800b536:	4613      	mov	r3, r2
 800b538:	009b      	lsls	r3, r3, #2
 800b53a:	4413      	add	r3, r2
 800b53c:	009b      	lsls	r3, r3, #2
 800b53e:	440b      	add	r3, r1
 800b540:	3324      	adds	r3, #36	@ 0x24
 800b542:	881b      	ldrh	r3, [r3, #0]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d117      	bne.n	800b578 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b548:	6839      	ldr	r1, [r7, #0]
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f000 fba8 	bl	800bca0 <USBD_CtlError>
                  break;
 800b550:	e054      	b.n	800b5fc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b552:	7bbb      	ldrb	r3, [r7, #14]
 800b554:	f003 020f 	and.w	r2, r3, #15
 800b558:	6879      	ldr	r1, [r7, #4]
 800b55a:	4613      	mov	r3, r2
 800b55c:	009b      	lsls	r3, r3, #2
 800b55e:	4413      	add	r3, r2
 800b560:	009b      	lsls	r3, r3, #2
 800b562:	440b      	add	r3, r1
 800b564:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b568:	881b      	ldrh	r3, [r3, #0]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d104      	bne.n	800b578 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b56e:	6839      	ldr	r1, [r7, #0]
 800b570:	6878      	ldr	r0, [r7, #4]
 800b572:	f000 fb95 	bl	800bca0 <USBD_CtlError>
                  break;
 800b576:	e041      	b.n	800b5fc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b578:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	da0b      	bge.n	800b598 <USBD_StdEPReq+0x23e>
 800b580:	7bbb      	ldrb	r3, [r7, #14]
 800b582:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b586:	4613      	mov	r3, r2
 800b588:	009b      	lsls	r3, r3, #2
 800b58a:	4413      	add	r3, r2
 800b58c:	009b      	lsls	r3, r3, #2
 800b58e:	3310      	adds	r3, #16
 800b590:	687a      	ldr	r2, [r7, #4]
 800b592:	4413      	add	r3, r2
 800b594:	3304      	adds	r3, #4
 800b596:	e00b      	b.n	800b5b0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b598:	7bbb      	ldrb	r3, [r7, #14]
 800b59a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b59e:	4613      	mov	r3, r2
 800b5a0:	009b      	lsls	r3, r3, #2
 800b5a2:	4413      	add	r3, r2
 800b5a4:	009b      	lsls	r3, r3, #2
 800b5a6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b5aa:	687a      	ldr	r2, [r7, #4]
 800b5ac:	4413      	add	r3, r2
 800b5ae:	3304      	adds	r3, #4
 800b5b0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b5b2:	7bbb      	ldrb	r3, [r7, #14]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d002      	beq.n	800b5be <USBD_StdEPReq+0x264>
 800b5b8:	7bbb      	ldrb	r3, [r7, #14]
 800b5ba:	2b80      	cmp	r3, #128	@ 0x80
 800b5bc:	d103      	bne.n	800b5c6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	601a      	str	r2, [r3, #0]
 800b5c4:	e00e      	b.n	800b5e4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b5c6:	7bbb      	ldrb	r3, [r7, #14]
 800b5c8:	4619      	mov	r1, r3
 800b5ca:	6878      	ldr	r0, [r7, #4]
 800b5cc:	f000 fe6e 	bl	800c2ac <USBD_LL_IsStallEP>
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d003      	beq.n	800b5de <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	2201      	movs	r2, #1
 800b5da:	601a      	str	r2, [r3, #0]
 800b5dc:	e002      	b.n	800b5e4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800b5de:	68bb      	ldr	r3, [r7, #8]
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	2202      	movs	r2, #2
 800b5e8:	4619      	mov	r1, r3
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f000 fbc9 	bl	800bd82 <USBD_CtlSendData>
              break;
 800b5f0:	e004      	b.n	800b5fc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800b5f2:	6839      	ldr	r1, [r7, #0]
 800b5f4:	6878      	ldr	r0, [r7, #4]
 800b5f6:	f000 fb53 	bl	800bca0 <USBD_CtlError>
              break;
 800b5fa:	bf00      	nop
          }
          break;
 800b5fc:	e004      	b.n	800b608 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800b5fe:	6839      	ldr	r1, [r7, #0]
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f000 fb4d 	bl	800bca0 <USBD_CtlError>
          break;
 800b606:	bf00      	nop
      }
      break;
 800b608:	e004      	b.n	800b614 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800b60a:	6839      	ldr	r1, [r7, #0]
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f000 fb47 	bl	800bca0 <USBD_CtlError>
      break;
 800b612:	bf00      	nop
  }

  return ret;
 800b614:	7bfb      	ldrb	r3, [r7, #15]
}
 800b616:	4618      	mov	r0, r3
 800b618:	3710      	adds	r7, #16
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}
	...

0800b620 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b084      	sub	sp, #16
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
 800b628:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b62a:	2300      	movs	r3, #0
 800b62c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b62e:	2300      	movs	r3, #0
 800b630:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b632:	2300      	movs	r3, #0
 800b634:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	885b      	ldrh	r3, [r3, #2]
 800b63a:	0a1b      	lsrs	r3, r3, #8
 800b63c:	b29b      	uxth	r3, r3
 800b63e:	3b01      	subs	r3, #1
 800b640:	2b06      	cmp	r3, #6
 800b642:	f200 813b 	bhi.w	800b8bc <USBD_GetDescriptor+0x29c>
 800b646:	a201      	add	r2, pc, #4	@ (adr r2, 800b64c <USBD_GetDescriptor+0x2c>)
 800b648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b64c:	0800b669 	.word	0x0800b669
 800b650:	0800b681 	.word	0x0800b681
 800b654:	0800b6c1 	.word	0x0800b6c1
 800b658:	0800b8bd 	.word	0x0800b8bd
 800b65c:	0800b8bd 	.word	0x0800b8bd
 800b660:	0800b85d 	.word	0x0800b85d
 800b664:	0800b889 	.word	0x0800b889
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	687a      	ldr	r2, [r7, #4]
 800b672:	7c12      	ldrb	r2, [r2, #16]
 800b674:	f107 0108 	add.w	r1, r7, #8
 800b678:	4610      	mov	r0, r2
 800b67a:	4798      	blx	r3
 800b67c:	60f8      	str	r0, [r7, #12]
      break;
 800b67e:	e125      	b.n	800b8cc <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	7c1b      	ldrb	r3, [r3, #16]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d10d      	bne.n	800b6a4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b68e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b690:	f107 0208 	add.w	r2, r7, #8
 800b694:	4610      	mov	r0, r2
 800b696:	4798      	blx	r3
 800b698:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	3301      	adds	r3, #1
 800b69e:	2202      	movs	r2, #2
 800b6a0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b6a2:	e113      	b.n	800b8cc <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6ac:	f107 0208 	add.w	r2, r7, #8
 800b6b0:	4610      	mov	r0, r2
 800b6b2:	4798      	blx	r3
 800b6b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	3301      	adds	r3, #1
 800b6ba:	2202      	movs	r2, #2
 800b6bc:	701a      	strb	r2, [r3, #0]
      break;
 800b6be:	e105      	b.n	800b8cc <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	885b      	ldrh	r3, [r3, #2]
 800b6c4:	b2db      	uxtb	r3, r3
 800b6c6:	2b05      	cmp	r3, #5
 800b6c8:	f200 80ac 	bhi.w	800b824 <USBD_GetDescriptor+0x204>
 800b6cc:	a201      	add	r2, pc, #4	@ (adr r2, 800b6d4 <USBD_GetDescriptor+0xb4>)
 800b6ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6d2:	bf00      	nop
 800b6d4:	0800b6ed 	.word	0x0800b6ed
 800b6d8:	0800b721 	.word	0x0800b721
 800b6dc:	0800b755 	.word	0x0800b755
 800b6e0:	0800b789 	.word	0x0800b789
 800b6e4:	0800b7bd 	.word	0x0800b7bd
 800b6e8:	0800b7f1 	.word	0x0800b7f1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b6f2:	685b      	ldr	r3, [r3, #4]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d00b      	beq.n	800b710 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b6fe:	685b      	ldr	r3, [r3, #4]
 800b700:	687a      	ldr	r2, [r7, #4]
 800b702:	7c12      	ldrb	r2, [r2, #16]
 800b704:	f107 0108 	add.w	r1, r7, #8
 800b708:	4610      	mov	r0, r2
 800b70a:	4798      	blx	r3
 800b70c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b70e:	e0a4      	b.n	800b85a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800b710:	6839      	ldr	r1, [r7, #0]
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f000 fac4 	bl	800bca0 <USBD_CtlError>
            err++;
 800b718:	7afb      	ldrb	r3, [r7, #11]
 800b71a:	3301      	adds	r3, #1
 800b71c:	72fb      	strb	r3, [r7, #11]
          break;
 800b71e:	e09c      	b.n	800b85a <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b726:	689b      	ldr	r3, [r3, #8]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d00b      	beq.n	800b744 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b732:	689b      	ldr	r3, [r3, #8]
 800b734:	687a      	ldr	r2, [r7, #4]
 800b736:	7c12      	ldrb	r2, [r2, #16]
 800b738:	f107 0108 	add.w	r1, r7, #8
 800b73c:	4610      	mov	r0, r2
 800b73e:	4798      	blx	r3
 800b740:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b742:	e08a      	b.n	800b85a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800b744:	6839      	ldr	r1, [r7, #0]
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f000 faaa 	bl	800bca0 <USBD_CtlError>
            err++;
 800b74c:	7afb      	ldrb	r3, [r7, #11]
 800b74e:	3301      	adds	r3, #1
 800b750:	72fb      	strb	r3, [r7, #11]
          break;
 800b752:	e082      	b.n	800b85a <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b75a:	68db      	ldr	r3, [r3, #12]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d00b      	beq.n	800b778 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b766:	68db      	ldr	r3, [r3, #12]
 800b768:	687a      	ldr	r2, [r7, #4]
 800b76a:	7c12      	ldrb	r2, [r2, #16]
 800b76c:	f107 0108 	add.w	r1, r7, #8
 800b770:	4610      	mov	r0, r2
 800b772:	4798      	blx	r3
 800b774:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b776:	e070      	b.n	800b85a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800b778:	6839      	ldr	r1, [r7, #0]
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f000 fa90 	bl	800bca0 <USBD_CtlError>
            err++;
 800b780:	7afb      	ldrb	r3, [r7, #11]
 800b782:	3301      	adds	r3, #1
 800b784:	72fb      	strb	r3, [r7, #11]
          break;
 800b786:	e068      	b.n	800b85a <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b78e:	691b      	ldr	r3, [r3, #16]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d00b      	beq.n	800b7ac <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b79a:	691b      	ldr	r3, [r3, #16]
 800b79c:	687a      	ldr	r2, [r7, #4]
 800b79e:	7c12      	ldrb	r2, [r2, #16]
 800b7a0:	f107 0108 	add.w	r1, r7, #8
 800b7a4:	4610      	mov	r0, r2
 800b7a6:	4798      	blx	r3
 800b7a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b7aa:	e056      	b.n	800b85a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800b7ac:	6839      	ldr	r1, [r7, #0]
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f000 fa76 	bl	800bca0 <USBD_CtlError>
            err++;
 800b7b4:	7afb      	ldrb	r3, [r7, #11]
 800b7b6:	3301      	adds	r3, #1
 800b7b8:	72fb      	strb	r3, [r7, #11]
          break;
 800b7ba:	e04e      	b.n	800b85a <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b7c2:	695b      	ldr	r3, [r3, #20]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d00b      	beq.n	800b7e0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b7ce:	695b      	ldr	r3, [r3, #20]
 800b7d0:	687a      	ldr	r2, [r7, #4]
 800b7d2:	7c12      	ldrb	r2, [r2, #16]
 800b7d4:	f107 0108 	add.w	r1, r7, #8
 800b7d8:	4610      	mov	r0, r2
 800b7da:	4798      	blx	r3
 800b7dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b7de:	e03c      	b.n	800b85a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800b7e0:	6839      	ldr	r1, [r7, #0]
 800b7e2:	6878      	ldr	r0, [r7, #4]
 800b7e4:	f000 fa5c 	bl	800bca0 <USBD_CtlError>
            err++;
 800b7e8:	7afb      	ldrb	r3, [r7, #11]
 800b7ea:	3301      	adds	r3, #1
 800b7ec:	72fb      	strb	r3, [r7, #11]
          break;
 800b7ee:	e034      	b.n	800b85a <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b7f6:	699b      	ldr	r3, [r3, #24]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d00b      	beq.n	800b814 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b802:	699b      	ldr	r3, [r3, #24]
 800b804:	687a      	ldr	r2, [r7, #4]
 800b806:	7c12      	ldrb	r2, [r2, #16]
 800b808:	f107 0108 	add.w	r1, r7, #8
 800b80c:	4610      	mov	r0, r2
 800b80e:	4798      	blx	r3
 800b810:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b812:	e022      	b.n	800b85a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800b814:	6839      	ldr	r1, [r7, #0]
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f000 fa42 	bl	800bca0 <USBD_CtlError>
            err++;
 800b81c:	7afb      	ldrb	r3, [r7, #11]
 800b81e:	3301      	adds	r3, #1
 800b820:	72fb      	strb	r3, [r7, #11]
          break;
 800b822:	e01a      	b.n	800b85a <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b82a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d00c      	beq.n	800b84a <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b838:	683a      	ldr	r2, [r7, #0]
 800b83a:	8852      	ldrh	r2, [r2, #2]
 800b83c:	b2d1      	uxtb	r1, r2
 800b83e:	f107 0208 	add.w	r2, r7, #8
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	4798      	blx	r3
 800b846:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 800b848:	e006      	b.n	800b858 <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 800b84a:	6839      	ldr	r1, [r7, #0]
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	f000 fa27 	bl	800bca0 <USBD_CtlError>
            err++;
 800b852:	7afb      	ldrb	r3, [r7, #11]
 800b854:	3301      	adds	r3, #1
 800b856:	72fb      	strb	r3, [r7, #11]
          break;
 800b858:	bf00      	nop
      }
      break;
 800b85a:	e037      	b.n	800b8cc <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	7c1b      	ldrb	r3, [r3, #16]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d109      	bne.n	800b878 <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b86a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b86c:	f107 0208 	add.w	r2, r7, #8
 800b870:	4610      	mov	r0, r2
 800b872:	4798      	blx	r3
 800b874:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b876:	e029      	b.n	800b8cc <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 800b878:	6839      	ldr	r1, [r7, #0]
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f000 fa10 	bl	800bca0 <USBD_CtlError>
        err++;
 800b880:	7afb      	ldrb	r3, [r7, #11]
 800b882:	3301      	adds	r3, #1
 800b884:	72fb      	strb	r3, [r7, #11]
      break;
 800b886:	e021      	b.n	800b8cc <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	7c1b      	ldrb	r3, [r3, #16]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d10d      	bne.n	800b8ac <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b898:	f107 0208 	add.w	r2, r7, #8
 800b89c:	4610      	mov	r0, r2
 800b89e:	4798      	blx	r3
 800b8a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	3301      	adds	r3, #1
 800b8a6:	2207      	movs	r2, #7
 800b8a8:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b8aa:	e00f      	b.n	800b8cc <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 800b8ac:	6839      	ldr	r1, [r7, #0]
 800b8ae:	6878      	ldr	r0, [r7, #4]
 800b8b0:	f000 f9f6 	bl	800bca0 <USBD_CtlError>
        err++;
 800b8b4:	7afb      	ldrb	r3, [r7, #11]
 800b8b6:	3301      	adds	r3, #1
 800b8b8:	72fb      	strb	r3, [r7, #11]
      break;
 800b8ba:	e007      	b.n	800b8cc <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 800b8bc:	6839      	ldr	r1, [r7, #0]
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f000 f9ee 	bl	800bca0 <USBD_CtlError>
      err++;
 800b8c4:	7afb      	ldrb	r3, [r7, #11]
 800b8c6:	3301      	adds	r3, #1
 800b8c8:	72fb      	strb	r3, [r7, #11]
      break;
 800b8ca:	bf00      	nop
  }

  if (err != 0U)
 800b8cc:	7afb      	ldrb	r3, [r7, #11]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d11e      	bne.n	800b910 <USBD_GetDescriptor+0x2f0>
  {
    return;
  }

  if (req->wLength != 0U)
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	88db      	ldrh	r3, [r3, #6]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d016      	beq.n	800b908 <USBD_GetDescriptor+0x2e8>
  {
    if (len != 0U)
 800b8da:	893b      	ldrh	r3, [r7, #8]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d00e      	beq.n	800b8fe <USBD_GetDescriptor+0x2de>
    {
      len = MIN(len, req->wLength);
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	88da      	ldrh	r2, [r3, #6]
 800b8e4:	893b      	ldrh	r3, [r7, #8]
 800b8e6:	4293      	cmp	r3, r2
 800b8e8:	bf28      	it	cs
 800b8ea:	4613      	movcs	r3, r2
 800b8ec:	b29b      	uxth	r3, r3
 800b8ee:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b8f0:	893b      	ldrh	r3, [r7, #8]
 800b8f2:	461a      	mov	r2, r3
 800b8f4:	68f9      	ldr	r1, [r7, #12]
 800b8f6:	6878      	ldr	r0, [r7, #4]
 800b8f8:	f000 fa43 	bl	800bd82 <USBD_CtlSendData>
 800b8fc:	e009      	b.n	800b912 <USBD_GetDescriptor+0x2f2>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b8fe:	6839      	ldr	r1, [r7, #0]
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	f000 f9cd 	bl	800bca0 <USBD_CtlError>
 800b906:	e004      	b.n	800b912 <USBD_GetDescriptor+0x2f2>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f000 fa94 	bl	800be36 <USBD_CtlSendStatus>
 800b90e:	e000      	b.n	800b912 <USBD_GetDescriptor+0x2f2>
    return;
 800b910:	bf00      	nop
  }
}
 800b912:	3710      	adds	r7, #16
 800b914:	46bd      	mov	sp, r7
 800b916:	bd80      	pop	{r7, pc}

0800b918 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b084      	sub	sp, #16
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
 800b920:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	889b      	ldrh	r3, [r3, #4]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d131      	bne.n	800b98e <USBD_SetAddress+0x76>
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	88db      	ldrh	r3, [r3, #6]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d12d      	bne.n	800b98e <USBD_SetAddress+0x76>
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	885b      	ldrh	r3, [r3, #2]
 800b936:	2b7f      	cmp	r3, #127	@ 0x7f
 800b938:	d829      	bhi.n	800b98e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	885b      	ldrh	r3, [r3, #2]
 800b93e:	b2db      	uxtb	r3, r3
 800b940:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b944:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b94c:	b2db      	uxtb	r3, r3
 800b94e:	2b03      	cmp	r3, #3
 800b950:	d104      	bne.n	800b95c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b952:	6839      	ldr	r1, [r7, #0]
 800b954:	6878      	ldr	r0, [r7, #4]
 800b956:	f000 f9a3 	bl	800bca0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b95a:	e01d      	b.n	800b998 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	7bfa      	ldrb	r2, [r7, #15]
 800b960:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b964:	7bfb      	ldrb	r3, [r7, #15]
 800b966:	4619      	mov	r1, r3
 800b968:	6878      	ldr	r0, [r7, #4]
 800b96a:	f000 fccb 	bl	800c304 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b96e:	6878      	ldr	r0, [r7, #4]
 800b970:	f000 fa61 	bl	800be36 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b974:	7bfb      	ldrb	r3, [r7, #15]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d004      	beq.n	800b984 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2202      	movs	r2, #2
 800b97e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b982:	e009      	b.n	800b998 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2201      	movs	r2, #1
 800b988:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b98c:	e004      	b.n	800b998 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b98e:	6839      	ldr	r1, [r7, #0]
 800b990:	6878      	ldr	r0, [r7, #4]
 800b992:	f000 f985 	bl	800bca0 <USBD_CtlError>
  }
}
 800b996:	bf00      	nop
 800b998:	bf00      	nop
 800b99a:	3710      	adds	r7, #16
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bd80      	pop	{r7, pc}

0800b9a0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b084      	sub	sp, #16
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
 800b9a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	885b      	ldrh	r3, [r3, #2]
 800b9b2:	b2da      	uxtb	r2, r3
 800b9b4:	4b4c      	ldr	r3, [pc, #304]	@ (800bae8 <USBD_SetConfig+0x148>)
 800b9b6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b9b8:	4b4b      	ldr	r3, [pc, #300]	@ (800bae8 <USBD_SetConfig+0x148>)
 800b9ba:	781b      	ldrb	r3, [r3, #0]
 800b9bc:	2b01      	cmp	r3, #1
 800b9be:	d905      	bls.n	800b9cc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b9c0:	6839      	ldr	r1, [r7, #0]
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f000 f96c 	bl	800bca0 <USBD_CtlError>
    return USBD_FAIL;
 800b9c8:	2303      	movs	r3, #3
 800b9ca:	e088      	b.n	800bade <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b9d2:	b2db      	uxtb	r3, r3
 800b9d4:	2b02      	cmp	r3, #2
 800b9d6:	d002      	beq.n	800b9de <USBD_SetConfig+0x3e>
 800b9d8:	2b03      	cmp	r3, #3
 800b9da:	d025      	beq.n	800ba28 <USBD_SetConfig+0x88>
 800b9dc:	e071      	b.n	800bac2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b9de:	4b42      	ldr	r3, [pc, #264]	@ (800bae8 <USBD_SetConfig+0x148>)
 800b9e0:	781b      	ldrb	r3, [r3, #0]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d01c      	beq.n	800ba20 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800b9e6:	4b40      	ldr	r3, [pc, #256]	@ (800bae8 <USBD_SetConfig+0x148>)
 800b9e8:	781b      	ldrb	r3, [r3, #0]
 800b9ea:	461a      	mov	r2, r3
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b9f0:	4b3d      	ldr	r3, [pc, #244]	@ (800bae8 <USBD_SetConfig+0x148>)
 800b9f2:	781b      	ldrb	r3, [r3, #0]
 800b9f4:	4619      	mov	r1, r3
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	f7ff f93b 	bl	800ac72 <USBD_SetClassConfig>
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ba00:	7bfb      	ldrb	r3, [r7, #15]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d004      	beq.n	800ba10 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800ba06:	6839      	ldr	r1, [r7, #0]
 800ba08:	6878      	ldr	r0, [r7, #4]
 800ba0a:	f000 f949 	bl	800bca0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ba0e:	e065      	b.n	800badc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ba10:	6878      	ldr	r0, [r7, #4]
 800ba12:	f000 fa10 	bl	800be36 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	2203      	movs	r2, #3
 800ba1a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ba1e:	e05d      	b.n	800badc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ba20:	6878      	ldr	r0, [r7, #4]
 800ba22:	f000 fa08 	bl	800be36 <USBD_CtlSendStatus>
      break;
 800ba26:	e059      	b.n	800badc <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ba28:	4b2f      	ldr	r3, [pc, #188]	@ (800bae8 <USBD_SetConfig+0x148>)
 800ba2a:	781b      	ldrb	r3, [r3, #0]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d112      	bne.n	800ba56 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2202      	movs	r2, #2
 800ba34:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800ba38:	4b2b      	ldr	r3, [pc, #172]	@ (800bae8 <USBD_SetConfig+0x148>)
 800ba3a:	781b      	ldrb	r3, [r3, #0]
 800ba3c:	461a      	mov	r2, r3
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ba42:	4b29      	ldr	r3, [pc, #164]	@ (800bae8 <USBD_SetConfig+0x148>)
 800ba44:	781b      	ldrb	r3, [r3, #0]
 800ba46:	4619      	mov	r1, r3
 800ba48:	6878      	ldr	r0, [r7, #4]
 800ba4a:	f7ff f92e 	bl	800acaa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f000 f9f1 	bl	800be36 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ba54:	e042      	b.n	800badc <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800ba56:	4b24      	ldr	r3, [pc, #144]	@ (800bae8 <USBD_SetConfig+0x148>)
 800ba58:	781b      	ldrb	r3, [r3, #0]
 800ba5a:	461a      	mov	r2, r3
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	685b      	ldr	r3, [r3, #4]
 800ba60:	429a      	cmp	r2, r3
 800ba62:	d02a      	beq.n	800baba <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	685b      	ldr	r3, [r3, #4]
 800ba68:	b2db      	uxtb	r3, r3
 800ba6a:	4619      	mov	r1, r3
 800ba6c:	6878      	ldr	r0, [r7, #4]
 800ba6e:	f7ff f91c 	bl	800acaa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ba72:	4b1d      	ldr	r3, [pc, #116]	@ (800bae8 <USBD_SetConfig+0x148>)
 800ba74:	781b      	ldrb	r3, [r3, #0]
 800ba76:	461a      	mov	r2, r3
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ba7c:	4b1a      	ldr	r3, [pc, #104]	@ (800bae8 <USBD_SetConfig+0x148>)
 800ba7e:	781b      	ldrb	r3, [r3, #0]
 800ba80:	4619      	mov	r1, r3
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	f7ff f8f5 	bl	800ac72 <USBD_SetClassConfig>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ba8c:	7bfb      	ldrb	r3, [r7, #15]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d00f      	beq.n	800bab2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800ba92:	6839      	ldr	r1, [r7, #0]
 800ba94:	6878      	ldr	r0, [r7, #4]
 800ba96:	f000 f903 	bl	800bca0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	685b      	ldr	r3, [r3, #4]
 800ba9e:	b2db      	uxtb	r3, r3
 800baa0:	4619      	mov	r1, r3
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	f7ff f901 	bl	800acaa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2202      	movs	r2, #2
 800baac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800bab0:	e014      	b.n	800badc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	f000 f9bf 	bl	800be36 <USBD_CtlSendStatus>
      break;
 800bab8:	e010      	b.n	800badc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800baba:	6878      	ldr	r0, [r7, #4]
 800babc:	f000 f9bb 	bl	800be36 <USBD_CtlSendStatus>
      break;
 800bac0:	e00c      	b.n	800badc <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800bac2:	6839      	ldr	r1, [r7, #0]
 800bac4:	6878      	ldr	r0, [r7, #4]
 800bac6:	f000 f8eb 	bl	800bca0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800baca:	4b07      	ldr	r3, [pc, #28]	@ (800bae8 <USBD_SetConfig+0x148>)
 800bacc:	781b      	ldrb	r3, [r3, #0]
 800bace:	4619      	mov	r1, r3
 800bad0:	6878      	ldr	r0, [r7, #4]
 800bad2:	f7ff f8ea 	bl	800acaa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bad6:	2303      	movs	r3, #3
 800bad8:	73fb      	strb	r3, [r7, #15]
      break;
 800bada:	bf00      	nop
  }

  return ret;
 800badc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bade:	4618      	mov	r0, r3
 800bae0:	3710      	adds	r7, #16
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}
 800bae6:	bf00      	nop
 800bae8:	200034d0 	.word	0x200034d0

0800baec <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b082      	sub	sp, #8
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
 800baf4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	88db      	ldrh	r3, [r3, #6]
 800bafa:	2b01      	cmp	r3, #1
 800bafc:	d004      	beq.n	800bb08 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bafe:	6839      	ldr	r1, [r7, #0]
 800bb00:	6878      	ldr	r0, [r7, #4]
 800bb02:	f000 f8cd 	bl	800bca0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bb06:	e023      	b.n	800bb50 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb0e:	b2db      	uxtb	r3, r3
 800bb10:	2b02      	cmp	r3, #2
 800bb12:	dc02      	bgt.n	800bb1a <USBD_GetConfig+0x2e>
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	dc03      	bgt.n	800bb20 <USBD_GetConfig+0x34>
 800bb18:	e015      	b.n	800bb46 <USBD_GetConfig+0x5a>
 800bb1a:	2b03      	cmp	r3, #3
 800bb1c:	d00b      	beq.n	800bb36 <USBD_GetConfig+0x4a>
 800bb1e:	e012      	b.n	800bb46 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2200      	movs	r2, #0
 800bb24:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	3308      	adds	r3, #8
 800bb2a:	2201      	movs	r2, #1
 800bb2c:	4619      	mov	r1, r3
 800bb2e:	6878      	ldr	r0, [r7, #4]
 800bb30:	f000 f927 	bl	800bd82 <USBD_CtlSendData>
        break;
 800bb34:	e00c      	b.n	800bb50 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	3304      	adds	r3, #4
 800bb3a:	2201      	movs	r2, #1
 800bb3c:	4619      	mov	r1, r3
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f000 f91f 	bl	800bd82 <USBD_CtlSendData>
        break;
 800bb44:	e004      	b.n	800bb50 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800bb46:	6839      	ldr	r1, [r7, #0]
 800bb48:	6878      	ldr	r0, [r7, #4]
 800bb4a:	f000 f8a9 	bl	800bca0 <USBD_CtlError>
        break;
 800bb4e:	bf00      	nop
}
 800bb50:	bf00      	nop
 800bb52:	3708      	adds	r7, #8
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bd80      	pop	{r7, pc}

0800bb58 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b082      	sub	sp, #8
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
 800bb60:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb68:	b2db      	uxtb	r3, r3
 800bb6a:	3b01      	subs	r3, #1
 800bb6c:	2b02      	cmp	r3, #2
 800bb6e:	d81e      	bhi.n	800bbae <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	88db      	ldrh	r3, [r3, #6]
 800bb74:	2b02      	cmp	r3, #2
 800bb76:	d004      	beq.n	800bb82 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800bb78:	6839      	ldr	r1, [r7, #0]
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	f000 f890 	bl	800bca0 <USBD_CtlError>
        break;
 800bb80:	e01a      	b.n	800bbb8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	2201      	movs	r2, #1
 800bb86:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d005      	beq.n	800bb9e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	68db      	ldr	r3, [r3, #12]
 800bb96:	f043 0202 	orr.w	r2, r3, #2
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	330c      	adds	r3, #12
 800bba2:	2202      	movs	r2, #2
 800bba4:	4619      	mov	r1, r3
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	f000 f8eb 	bl	800bd82 <USBD_CtlSendData>
      break;
 800bbac:	e004      	b.n	800bbb8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800bbae:	6839      	ldr	r1, [r7, #0]
 800bbb0:	6878      	ldr	r0, [r7, #4]
 800bbb2:	f000 f875 	bl	800bca0 <USBD_CtlError>
      break;
 800bbb6:	bf00      	nop
  }
}
 800bbb8:	bf00      	nop
 800bbba:	3708      	adds	r7, #8
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	bd80      	pop	{r7, pc}

0800bbc0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b082      	sub	sp, #8
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
 800bbc8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	885b      	ldrh	r3, [r3, #2]
 800bbce:	2b01      	cmp	r3, #1
 800bbd0:	d106      	bne.n	800bbe0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	2201      	movs	r2, #1
 800bbd6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	f000 f92b 	bl	800be36 <USBD_CtlSendStatus>
  }
}
 800bbe0:	bf00      	nop
 800bbe2:	3708      	adds	r7, #8
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bd80      	pop	{r7, pc}

0800bbe8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b082      	sub	sp, #8
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
 800bbf0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbf8:	b2db      	uxtb	r3, r3
 800bbfa:	3b01      	subs	r3, #1
 800bbfc:	2b02      	cmp	r3, #2
 800bbfe:	d80b      	bhi.n	800bc18 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	885b      	ldrh	r3, [r3, #2]
 800bc04:	2b01      	cmp	r3, #1
 800bc06:	d10c      	bne.n	800bc22 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bc10:	6878      	ldr	r0, [r7, #4]
 800bc12:	f000 f910 	bl	800be36 <USBD_CtlSendStatus>
      }
      break;
 800bc16:	e004      	b.n	800bc22 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800bc18:	6839      	ldr	r1, [r7, #0]
 800bc1a:	6878      	ldr	r0, [r7, #4]
 800bc1c:	f000 f840 	bl	800bca0 <USBD_CtlError>
      break;
 800bc20:	e000      	b.n	800bc24 <USBD_ClrFeature+0x3c>
      break;
 800bc22:	bf00      	nop
  }
}
 800bc24:	bf00      	nop
 800bc26:	3708      	adds	r7, #8
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	bd80      	pop	{r7, pc}

0800bc2c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b084      	sub	sp, #16
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
 800bc34:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	781a      	ldrb	r2, [r3, #0]
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	3301      	adds	r3, #1
 800bc46:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	781a      	ldrb	r2, [r3, #0]
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	3301      	adds	r3, #1
 800bc54:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800bc56:	68f8      	ldr	r0, [r7, #12]
 800bc58:	f7ff faa9 	bl	800b1ae <SWAPBYTE>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	461a      	mov	r2, r3
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	3301      	adds	r3, #1
 800bc68:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	3301      	adds	r3, #1
 800bc6e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800bc70:	68f8      	ldr	r0, [r7, #12]
 800bc72:	f7ff fa9c 	bl	800b1ae <SWAPBYTE>
 800bc76:	4603      	mov	r3, r0
 800bc78:	461a      	mov	r2, r3
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	3301      	adds	r3, #1
 800bc82:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	3301      	adds	r3, #1
 800bc88:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bc8a:	68f8      	ldr	r0, [r7, #12]
 800bc8c:	f7ff fa8f 	bl	800b1ae <SWAPBYTE>
 800bc90:	4603      	mov	r3, r0
 800bc92:	461a      	mov	r2, r3
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	80da      	strh	r2, [r3, #6]
}
 800bc98:	bf00      	nop
 800bc9a:	3710      	adds	r7, #16
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	bd80      	pop	{r7, pc}

0800bca0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b082      	sub	sp, #8
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
 800bca8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bcaa:	2180      	movs	r1, #128	@ 0x80
 800bcac:	6878      	ldr	r0, [r7, #4]
 800bcae:	f000 fabf 	bl	800c230 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bcb2:	2100      	movs	r1, #0
 800bcb4:	6878      	ldr	r0, [r7, #4]
 800bcb6:	f000 fabb 	bl	800c230 <USBD_LL_StallEP>
}
 800bcba:	bf00      	nop
 800bcbc:	3708      	adds	r7, #8
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	bd80      	pop	{r7, pc}

0800bcc2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bcc2:	b580      	push	{r7, lr}
 800bcc4:	b086      	sub	sp, #24
 800bcc6:	af00      	add	r7, sp, #0
 800bcc8:	60f8      	str	r0, [r7, #12]
 800bcca:	60b9      	str	r1, [r7, #8]
 800bccc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bcce:	2300      	movs	r3, #0
 800bcd0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d036      	beq.n	800bd46 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800bcdc:	6938      	ldr	r0, [r7, #16]
 800bcde:	f000 f836 	bl	800bd4e <USBD_GetLen>
 800bce2:	4603      	mov	r3, r0
 800bce4:	3301      	adds	r3, #1
 800bce6:	b29b      	uxth	r3, r3
 800bce8:	005b      	lsls	r3, r3, #1
 800bcea:	b29a      	uxth	r2, r3
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bcf0:	7dfb      	ldrb	r3, [r7, #23]
 800bcf2:	68ba      	ldr	r2, [r7, #8]
 800bcf4:	4413      	add	r3, r2
 800bcf6:	687a      	ldr	r2, [r7, #4]
 800bcf8:	7812      	ldrb	r2, [r2, #0]
 800bcfa:	701a      	strb	r2, [r3, #0]
  idx++;
 800bcfc:	7dfb      	ldrb	r3, [r7, #23]
 800bcfe:	3301      	adds	r3, #1
 800bd00:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bd02:	7dfb      	ldrb	r3, [r7, #23]
 800bd04:	68ba      	ldr	r2, [r7, #8]
 800bd06:	4413      	add	r3, r2
 800bd08:	2203      	movs	r2, #3
 800bd0a:	701a      	strb	r2, [r3, #0]
  idx++;
 800bd0c:	7dfb      	ldrb	r3, [r7, #23]
 800bd0e:	3301      	adds	r3, #1
 800bd10:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bd12:	e013      	b.n	800bd3c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800bd14:	7dfb      	ldrb	r3, [r7, #23]
 800bd16:	68ba      	ldr	r2, [r7, #8]
 800bd18:	4413      	add	r3, r2
 800bd1a:	693a      	ldr	r2, [r7, #16]
 800bd1c:	7812      	ldrb	r2, [r2, #0]
 800bd1e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bd20:	693b      	ldr	r3, [r7, #16]
 800bd22:	3301      	adds	r3, #1
 800bd24:	613b      	str	r3, [r7, #16]
    idx++;
 800bd26:	7dfb      	ldrb	r3, [r7, #23]
 800bd28:	3301      	adds	r3, #1
 800bd2a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bd2c:	7dfb      	ldrb	r3, [r7, #23]
 800bd2e:	68ba      	ldr	r2, [r7, #8]
 800bd30:	4413      	add	r3, r2
 800bd32:	2200      	movs	r2, #0
 800bd34:	701a      	strb	r2, [r3, #0]
    idx++;
 800bd36:	7dfb      	ldrb	r3, [r7, #23]
 800bd38:	3301      	adds	r3, #1
 800bd3a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bd3c:	693b      	ldr	r3, [r7, #16]
 800bd3e:	781b      	ldrb	r3, [r3, #0]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d1e7      	bne.n	800bd14 <USBD_GetString+0x52>
 800bd44:	e000      	b.n	800bd48 <USBD_GetString+0x86>
    return;
 800bd46:	bf00      	nop
  }
}
 800bd48:	3718      	adds	r7, #24
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bd80      	pop	{r7, pc}

0800bd4e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bd4e:	b480      	push	{r7}
 800bd50:	b085      	sub	sp, #20
 800bd52:	af00      	add	r7, sp, #0
 800bd54:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bd56:	2300      	movs	r3, #0
 800bd58:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bd5e:	e005      	b.n	800bd6c <USBD_GetLen+0x1e>
  {
    len++;
 800bd60:	7bfb      	ldrb	r3, [r7, #15]
 800bd62:	3301      	adds	r3, #1
 800bd64:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	3301      	adds	r3, #1
 800bd6a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bd6c:	68bb      	ldr	r3, [r7, #8]
 800bd6e:	781b      	ldrb	r3, [r3, #0]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d1f5      	bne.n	800bd60 <USBD_GetLen+0x12>
  }

  return len;
 800bd74:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd76:	4618      	mov	r0, r3
 800bd78:	3714      	adds	r7, #20
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd80:	4770      	bx	lr

0800bd82 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bd82:	b580      	push	{r7, lr}
 800bd84:	b084      	sub	sp, #16
 800bd86:	af00      	add	r7, sp, #0
 800bd88:	60f8      	str	r0, [r7, #12]
 800bd8a:	60b9      	str	r1, [r7, #8]
 800bd8c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	2202      	movs	r2, #2
 800bd92:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	687a      	ldr	r2, [r7, #4]
 800bd9a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	687a      	ldr	r2, [r7, #4]
 800bda0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	68ba      	ldr	r2, [r7, #8]
 800bda6:	2100      	movs	r1, #0
 800bda8:	68f8      	ldr	r0, [r7, #12]
 800bdaa:	f000 faca 	bl	800c342 <USBD_LL_Transmit>

  return USBD_OK;
 800bdae:	2300      	movs	r3, #0
}
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	3710      	adds	r7, #16
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	bd80      	pop	{r7, pc}

0800bdb8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b084      	sub	sp, #16
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	60f8      	str	r0, [r7, #12]
 800bdc0:	60b9      	str	r1, [r7, #8]
 800bdc2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	68ba      	ldr	r2, [r7, #8]
 800bdc8:	2100      	movs	r1, #0
 800bdca:	68f8      	ldr	r0, [r7, #12]
 800bdcc:	f000 fab9 	bl	800c342 <USBD_LL_Transmit>

  return USBD_OK;
 800bdd0:	2300      	movs	r3, #0
}
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	3710      	adds	r7, #16
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd80      	pop	{r7, pc}

0800bdda <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bdda:	b580      	push	{r7, lr}
 800bddc:	b084      	sub	sp, #16
 800bdde:	af00      	add	r7, sp, #0
 800bde0:	60f8      	str	r0, [r7, #12]
 800bde2:	60b9      	str	r1, [r7, #8]
 800bde4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	2203      	movs	r2, #3
 800bdea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	687a      	ldr	r2, [r7, #4]
 800bdf2:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	687a      	ldr	r2, [r7, #4]
 800bdfa:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	68ba      	ldr	r2, [r7, #8]
 800be02:	2100      	movs	r1, #0
 800be04:	68f8      	ldr	r0, [r7, #12]
 800be06:	f000 fabd 	bl	800c384 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800be0a:	2300      	movs	r3, #0
}
 800be0c:	4618      	mov	r0, r3
 800be0e:	3710      	adds	r7, #16
 800be10:	46bd      	mov	sp, r7
 800be12:	bd80      	pop	{r7, pc}

0800be14 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b084      	sub	sp, #16
 800be18:	af00      	add	r7, sp, #0
 800be1a:	60f8      	str	r0, [r7, #12]
 800be1c:	60b9      	str	r1, [r7, #8]
 800be1e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	68ba      	ldr	r2, [r7, #8]
 800be24:	2100      	movs	r1, #0
 800be26:	68f8      	ldr	r0, [r7, #12]
 800be28:	f000 faac 	bl	800c384 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800be2c:	2300      	movs	r3, #0
}
 800be2e:	4618      	mov	r0, r3
 800be30:	3710      	adds	r7, #16
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}

0800be36 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800be36:	b580      	push	{r7, lr}
 800be38:	b082      	sub	sp, #8
 800be3a:	af00      	add	r7, sp, #0
 800be3c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	2204      	movs	r2, #4
 800be42:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800be46:	2300      	movs	r3, #0
 800be48:	2200      	movs	r2, #0
 800be4a:	2100      	movs	r1, #0
 800be4c:	6878      	ldr	r0, [r7, #4]
 800be4e:	f000 fa78 	bl	800c342 <USBD_LL_Transmit>

  return USBD_OK;
 800be52:	2300      	movs	r3, #0
}
 800be54:	4618      	mov	r0, r3
 800be56:	3708      	adds	r7, #8
 800be58:	46bd      	mov	sp, r7
 800be5a:	bd80      	pop	{r7, pc}

0800be5c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b082      	sub	sp, #8
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2205      	movs	r2, #5
 800be68:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800be6c:	2300      	movs	r3, #0
 800be6e:	2200      	movs	r2, #0
 800be70:	2100      	movs	r1, #0
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	f000 fa86 	bl	800c384 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800be78:	2300      	movs	r3, #0
}
 800be7a:	4618      	mov	r0, r3
 800be7c:	3708      	adds	r7, #8
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd80      	pop	{r7, pc}

0800be82 <HAL_PCDEx_SetTxFiFoInBytes>:
/* Private functions ---------------------------------------------------------*/

/* USER CODE BEGIN 1 */
#if(!STM32F1_DEVICE)
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFoInBytes(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800be82:	b580      	push	{r7, lr}
 800be84:	b082      	sub	sp, #8
 800be86:	af00      	add	r7, sp, #0
 800be88:	6078      	str	r0, [r7, #4]
 800be8a:	460b      	mov	r3, r1
 800be8c:	70fb      	strb	r3, [r7, #3]
 800be8e:	4613      	mov	r3, r2
 800be90:	803b      	strh	r3, [r7, #0]
	return HAL_PCDEx_SetTxFiFo(hpcd, fifo, (size/4));
 800be92:	883b      	ldrh	r3, [r7, #0]
 800be94:	089b      	lsrs	r3, r3, #2
 800be96:	b29a      	uxth	r2, r3
 800be98:	78fb      	ldrb	r3, [r7, #3]
 800be9a:	4619      	mov	r1, r3
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f7f8 ffb9 	bl	8004e14 <HAL_PCDEx_SetTxFiFo>
 800bea2:	4603      	mov	r3, r0
}
 800bea4:	4618      	mov	r0, r3
 800bea6:	3708      	adds	r7, #8
 800bea8:	46bd      	mov	sp, r7
 800beaa:	bd80      	pop	{r7, pc}

0800beac <HAL_PCDEx_SetRxFiFoInBytes>:

HAL_StatusTypeDef HAL_PCDEx_SetRxFiFoInBytes(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b082      	sub	sp, #8
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
 800beb4:	460b      	mov	r3, r1
 800beb6:	807b      	strh	r3, [r7, #2]
	return HAL_PCDEx_SetRxFiFo(hpcd, (size/4));
 800beb8:	887b      	ldrh	r3, [r7, #2]
 800beba:	089b      	lsrs	r3, r3, #2
 800bebc:	b29b      	uxth	r3, r3
 800bebe:	4619      	mov	r1, r3
 800bec0:	6878      	ldr	r0, [r7, #4]
 800bec2:	f7f8 ffee 	bl	8004ea2 <HAL_PCDEx_SetRxFiFo>
 800bec6:	4603      	mov	r3, r0
}
 800bec8:	4618      	mov	r0, r3
 800beca:	3708      	adds	r7, #8
 800becc:	46bd      	mov	sp, r7
 800bece:	bd80      	pop	{r7, pc}

0800bed0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b082      	sub	sp, #8
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef *)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800bee4:	4619      	mov	r1, r3
 800bee6:	4610      	mov	r0, r2
 800bee8:	f7fe fef7 	bl	800acda <USBD_LL_SetupStage>
}
 800beec:	bf00      	nop
 800beee:	3708      	adds	r7, #8
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}

0800bef4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b082      	sub	sp, #8
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
 800befc:	460b      	mov	r3, r1
 800befe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800bf06:	78fa      	ldrb	r2, [r7, #3]
 800bf08:	6879      	ldr	r1, [r7, #4]
 800bf0a:	4613      	mov	r3, r2
 800bf0c:	00db      	lsls	r3, r3, #3
 800bf0e:	4413      	add	r3, r2
 800bf10:	009b      	lsls	r3, r3, #2
 800bf12:	440b      	add	r3, r1
 800bf14:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800bf18:	681a      	ldr	r2, [r3, #0]
 800bf1a:	78fb      	ldrb	r3, [r7, #3]
 800bf1c:	4619      	mov	r1, r3
 800bf1e:	f7fe ff31 	bl	800ad84 <USBD_LL_DataOutStage>
}
 800bf22:	bf00      	nop
 800bf24:	3708      	adds	r7, #8
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd80      	pop	{r7, pc}

0800bf2a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf2a:	b580      	push	{r7, lr}
 800bf2c:	b082      	sub	sp, #8
 800bf2e:	af00      	add	r7, sp, #0
 800bf30:	6078      	str	r0, [r7, #4]
 800bf32:	460b      	mov	r3, r1
 800bf34:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800bf3c:	78fa      	ldrb	r2, [r7, #3]
 800bf3e:	6879      	ldr	r1, [r7, #4]
 800bf40:	4613      	mov	r3, r2
 800bf42:	00db      	lsls	r3, r3, #3
 800bf44:	4413      	add	r3, r2
 800bf46:	009b      	lsls	r3, r3, #2
 800bf48:	440b      	add	r3, r1
 800bf4a:	3320      	adds	r3, #32
 800bf4c:	681a      	ldr	r2, [r3, #0]
 800bf4e:	78fb      	ldrb	r3, [r7, #3]
 800bf50:	4619      	mov	r1, r3
 800bf52:	f7fe ff7a 	bl	800ae4a <USBD_LL_DataInStage>
}
 800bf56:	bf00      	nop
 800bf58:	3708      	adds	r7, #8
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bd80      	pop	{r7, pc}

0800bf5e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf5e:	b580      	push	{r7, lr}
 800bf60:	b082      	sub	sp, #8
 800bf62:	af00      	add	r7, sp, #0
 800bf64:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef *)hpcd->pData);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f7ff f889 	bl	800b084 <USBD_LL_SOF>
}
 800bf72:	bf00      	nop
 800bf74:	3708      	adds	r7, #8
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}

0800bf7a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf7a:	b580      	push	{r7, lr}
 800bf7c:	b084      	sub	sp, #16
 800bf7e:	af00      	add	r7, sp, #0
 800bf80:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bf82:	2301      	movs	r3, #1
 800bf84:	73fb      	strb	r3, [r7, #15]

  if (hpcd->Init.speed == PCD_SPEED_FULL)
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	79db      	ldrb	r3, [r3, #7]
 800bf8a:	2b02      	cmp	r3, #2
 800bf8c:	d102      	bne.n	800bf94 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_FULL; 
 800bf8e:	2301      	movs	r3, #1
 800bf90:	73fb      	strb	r3, [r7, #15]
 800bf92:	e008      	b.n	800bfa6 <HAL_PCD_ResetCallback+0x2c>
  }
  #if(!STM32F1_DEVICE)
  else if (hpcd->Init.speed == PCD_SPEED_HIGH)
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	79db      	ldrb	r3, [r3, #7]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d102      	bne.n	800bfa2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_HIGH;
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	73fb      	strb	r3, [r7, #15]
 800bfa0:	e001      	b.n	800bfa6 <HAL_PCD_ResetCallback+0x2c>
  }
  #endif
  else
  {
    Error_Handler();
 800bfa2:	f7f5 f825 	bl	8000ff0 <Error_Handler>
  }
  /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef *)hpcd->pData, speed);
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bfac:	7bfa      	ldrb	r2, [r7, #15]
 800bfae:	4611      	mov	r1, r2
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	f7ff f829 	bl	800b008 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef *)hpcd->pData);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	f7fe ffda 	bl	800af76 <USBD_LL_Reset>
}
 800bfc2:	bf00      	nop
 800bfc4:	3710      	adds	r7, #16
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bd80      	pop	{r7, pc}
	...

0800bfcc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b082      	sub	sp, #8
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef *)hpcd->pData);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f7ff f824 	bl	800b028 <USBD_LL_Suspend>
#if (!STM32F1_DEVICE)
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	687a      	ldr	r2, [r7, #4]
 800bfec:	6812      	ldr	r2, [r2, #0]
 800bfee:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bff2:	f043 0301 	orr.w	r3, r3, #1
 800bff6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	7adb      	ldrb	r3, [r3, #11]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d005      	beq.n	800c00c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c000:	4b04      	ldr	r3, [pc, #16]	@ (800c014 <HAL_PCD_SuspendCallback+0x48>)
 800c002:	691b      	ldr	r3, [r3, #16]
 800c004:	4a03      	ldr	r2, [pc, #12]	@ (800c014 <HAL_PCD_SuspendCallback+0x48>)
 800c006:	f043 0306 	orr.w	r3, r3, #6
 800c00a:	6113      	str	r3, [r2, #16]
  }
#endif
  /* USER CODE END 2 */
}
 800c00c:	bf00      	nop
 800c00e:	3708      	adds	r7, #8
 800c010:	46bd      	mov	sp, r7
 800c012:	bd80      	pop	{r7, pc}
 800c014:	e000ed00 	.word	0xe000ed00

0800c018 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b082      	sub	sp, #8
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef *)hpcd->pData);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c026:	4618      	mov	r0, r3
 800c028:	f7ff f814 	bl	800b054 <USBD_LL_Resume>
}
 800c02c:	bf00      	nop
 800c02e:	3708      	adds	r7, #8
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}

0800c034 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b082      	sub	sp, #8
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
 800c03c:	460b      	mov	r3, r1
 800c03e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c046:	78fa      	ldrb	r2, [r7, #3]
 800c048:	4611      	mov	r1, r2
 800c04a:	4618      	mov	r0, r3
 800c04c:	f7ff f862 	bl	800b114 <USBD_LL_IsoOUTIncomplete>
}
 800c050:	bf00      	nop
 800c052:	3708      	adds	r7, #8
 800c054:	46bd      	mov	sp, r7
 800c056:	bd80      	pop	{r7, pc}

0800c058 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b082      	sub	sp, #8
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
 800c060:	460b      	mov	r3, r1
 800c062:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c06a:	78fa      	ldrb	r2, [r7, #3]
 800c06c:	4611      	mov	r1, r2
 800c06e:	4618      	mov	r0, r3
 800c070:	f7ff f82a 	bl	800b0c8 <USBD_LL_IsoINIncomplete>
}
 800c074:	bf00      	nop
 800c076:	3708      	adds	r7, #8
 800c078:	46bd      	mov	sp, r7
 800c07a:	bd80      	pop	{r7, pc}

0800c07c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b082      	sub	sp, #8
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef *)hpcd->pData);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c08a:	4618      	mov	r0, r3
 800c08c:	f7ff f868 	bl	800b160 <USBD_LL_DevConnected>
}
 800c090:	bf00      	nop
 800c092:	3708      	adds	r7, #8
 800c094:	46bd      	mov	sp, r7
 800c096:	bd80      	pop	{r7, pc}

0800c098 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b082      	sub	sp, #8
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef *)hpcd->pData);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	f7ff f865 	bl	800b176 <USBD_LL_DevDisconnected>
}
 800c0ac:	bf00      	nop
 800c0ae:	3708      	adds	r7, #8
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	bd80      	pop	{r7, pc}

0800c0b4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b084      	sub	sp, #16
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
#else
  /**FULL SPEED USB */
#if (STM32F1_DEVICE) /** for STM32F1 or similar */
  hpcd_USB_OTG_PTR = &hpcd_USB_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
#else
  hpcd_USB_OTG_PTR = &hpcd_USB_OTG_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
 800c0bc:	4b27      	ldr	r3, [pc, #156]	@ (800c15c <USBD_LL_Init+0xa8>)
 800c0be:	4a28      	ldr	r2, [pc, #160]	@ (800c160 <USBD_LL_Init+0xac>)
 800c0c0:	601a      	str	r2, [r3, #0]
#endif

  if (pdev->id == DEVICE_FS)
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	781b      	ldrb	r3, [r3, #0]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d143      	bne.n	800c152 <USBD_LL_Init+0x9e>
  {
    /* Link the driver to the stack. */
    hpcd_USB_OTG_PTR->pData = pdev;
 800c0ca:	4b24      	ldr	r3, [pc, #144]	@ (800c15c <USBD_LL_Init+0xa8>)
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	687a      	ldr	r2, [r7, #4]
 800c0d0:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
    pdev->pData = hpcd_USB_OTG_PTR;
 800c0d4:	4b21      	ldr	r3, [pc, #132]	@ (800c15c <USBD_LL_Init+0xa8>)
 800c0d6:	681a      	ldr	r2, [r3, #0]
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	f8c3 2310 	str.w	r2, [r3, #784]	@ 0x310
      pma_track += 8;
    }
#endif
#else /** if HAL_PCDEx_SetRxFiFo() is used by HAL driver */

    HAL_PCDEx_SetRxFiFoInBytes(hpcd_USB_OTG_PTR, 512); // ALL OUT EP Buffer
 800c0de:	4b1f      	ldr	r3, [pc, #124]	@ (800c15c <USBD_LL_Init+0xa8>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f7ff fee0 	bl	800beac <HAL_PCDEx_SetRxFiFoInBytes>

    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, 0, 64); // EP0 IN
 800c0ec:	4b1b      	ldr	r3, [pc, #108]	@ (800c15c <USBD_LL_Init+0xa8>)
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	2240      	movs	r2, #64	@ 0x40
 800c0f2:	2100      	movs	r1, #0
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	f7ff fec4 	bl	800be82 <HAL_PCDEx_SetTxFiFoInBytes>
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (HID_KEYBOARD_IN_EP & 0x7F), 64);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CUSTOM_HID_IN_EP & 0x7F), 64);
 800c0fa:	4b18      	ldr	r3, [pc, #96]	@ (800c15c <USBD_LL_Init+0xa8>)
 800c0fc:	6818      	ldr	r0, [r3, #0]
 800c0fe:	4b19      	ldr	r3, [pc, #100]	@ (800c164 <USBD_LL_Init+0xb0>)
 800c100:	781b      	ldrb	r3, [r3, #0]
 800c102:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c106:	b2db      	uxtb	r3, r3
 800c108:	2240      	movs	r2, #64	@ 0x40
 800c10a:	4619      	mov	r1, r3
 800c10c:	f7ff feb9 	bl	800be82 <HAL_PCDEx_SetTxFiFoInBytes>
#endif
#if (USBD_USE_PRNTR == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (PRNT_IN_EP & 0x7F), 128);
#endif
#if (USBD_USE_CDC_ACM == 1)
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800c110:	2300      	movs	r3, #0
 800c112:	73fb      	strb	r3, [r7, #15]
 800c114:	e01a      	b.n	800c14c <USBD_LL_Init+0x98>
    {
      HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CDC_IN_EP[i] & 0x7F), 128);
 800c116:	4b11      	ldr	r3, [pc, #68]	@ (800c15c <USBD_LL_Init+0xa8>)
 800c118:	6818      	ldr	r0, [r3, #0]
 800c11a:	7bfb      	ldrb	r3, [r7, #15]
 800c11c:	4a12      	ldr	r2, [pc, #72]	@ (800c168 <USBD_LL_Init+0xb4>)
 800c11e:	5cd3      	ldrb	r3, [r2, r3]
 800c120:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c124:	b2db      	uxtb	r3, r3
 800c126:	2280      	movs	r2, #128	@ 0x80
 800c128:	4619      	mov	r1, r3
 800c12a:	f7ff feaa 	bl	800be82 <HAL_PCDEx_SetTxFiFoInBytes>
      HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CDC_CMD_EP[i] & 0x7F), 64);
 800c12e:	4b0b      	ldr	r3, [pc, #44]	@ (800c15c <USBD_LL_Init+0xa8>)
 800c130:	6818      	ldr	r0, [r3, #0]
 800c132:	7bfb      	ldrb	r3, [r7, #15]
 800c134:	4a0d      	ldr	r2, [pc, #52]	@ (800c16c <USBD_LL_Init+0xb8>)
 800c136:	5cd3      	ldrb	r3, [r2, r3]
 800c138:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c13c:	b2db      	uxtb	r3, r3
 800c13e:	2240      	movs	r2, #64	@ 0x40
 800c140:	4619      	mov	r1, r3
 800c142:	f7ff fe9e 	bl	800be82 <HAL_PCDEx_SetTxFiFoInBytes>
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800c146:	7bfb      	ldrb	r3, [r7, #15]
 800c148:	3301      	adds	r3, #1
 800c14a:	73fb      	strb	r3, [r7, #15]
 800c14c:	7bfb      	ldrb	r3, [r7, #15]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d0e1      	beq.n	800c116 <USBD_LL_Init+0x62>
  HAL_PCD_RegisterDataOutStageCallback(hpcd_USB_OTG_PTR, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(hpcd_USB_OTG_PTR, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  return USBD_OK;
 800c152:	2300      	movs	r3, #0
}
 800c154:	4618      	mov	r0, r3
 800c156:	3710      	adds	r7, #16
 800c158:	46bd      	mov	sp, r7
 800c15a:	bd80      	pop	{r7, pc}
 800c15c:	200034d4 	.word	0x200034d4
 800c160:	20000e68 	.word	0x20000e68
 800c164:	200001da 	.word	0x200001da
 800c168:	2000312c 	.word	0x2000312c
 800c16c:	20003134 	.word	0x20003134

0800c170 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b084      	sub	sp, #16
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c178:	2300      	movs	r3, #0
 800c17a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c17c:	2300      	movs	r3, #0
 800c17e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800c186:	4618      	mov	r0, r3
 800c188:	f7f7 fd65 	bl	8003c56 <HAL_PCD_Start>
 800c18c:	4603      	mov	r3, r0
 800c18e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800c190:	7bfb      	ldrb	r3, [r7, #15]
 800c192:	4618      	mov	r0, r3
 800c194:	f000 f92a 	bl	800c3ec <USBD_Get_USB_Status>
 800c198:	4603      	mov	r3, r0
 800c19a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c19c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c19e:	4618      	mov	r0, r3
 800c1a0:	3710      	adds	r7, #16
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	bd80      	pop	{r7, pc}

0800c1a6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c1a6:	b580      	push	{r7, lr}
 800c1a8:	b084      	sub	sp, #16
 800c1aa:	af00      	add	r7, sp, #0
 800c1ac:	6078      	str	r0, [r7, #4]
 800c1ae:	4608      	mov	r0, r1
 800c1b0:	4611      	mov	r1, r2
 800c1b2:	461a      	mov	r2, r3
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	70fb      	strb	r3, [r7, #3]
 800c1b8:	460b      	mov	r3, r1
 800c1ba:	70bb      	strb	r3, [r7, #2]
 800c1bc:	4613      	mov	r3, r2
 800c1be:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 800c1ce:	78bb      	ldrb	r3, [r7, #2]
 800c1d0:	883a      	ldrh	r2, [r7, #0]
 800c1d2:	78f9      	ldrb	r1, [r7, #3]
 800c1d4:	f7f8 fa39 	bl	800464a <HAL_PCD_EP_Open>
 800c1d8:	4603      	mov	r3, r0
 800c1da:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800c1dc:	7bfb      	ldrb	r3, [r7, #15]
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f000 f904 	bl	800c3ec <USBD_Get_USB_Status>
 800c1e4:	4603      	mov	r3, r0
 800c1e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	3710      	adds	r7, #16
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	bd80      	pop	{r7, pc}

0800c1f2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c1f2:	b580      	push	{r7, lr}
 800c1f4:	b084      	sub	sp, #16
 800c1f6:	af00      	add	r7, sp, #0
 800c1f8:	6078      	str	r0, [r7, #4]
 800c1fa:	460b      	mov	r3, r1
 800c1fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1fe:	2300      	movs	r3, #0
 800c200:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c202:	2300      	movs	r3, #0
 800c204:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800c20c:	78fa      	ldrb	r2, [r7, #3]
 800c20e:	4611      	mov	r1, r2
 800c210:	4618      	mov	r0, r3
 800c212:	f7f8 fa84 	bl	800471e <HAL_PCD_EP_Close>
 800c216:	4603      	mov	r3, r0
 800c218:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800c21a:	7bfb      	ldrb	r3, [r7, #15]
 800c21c:	4618      	mov	r0, r3
 800c21e:	f000 f8e5 	bl	800c3ec <USBD_Get_USB_Status>
 800c222:	4603      	mov	r3, r0
 800c224:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c226:	7bbb      	ldrb	r3, [r7, #14]
}
 800c228:	4618      	mov	r0, r3
 800c22a:	3710      	adds	r7, #16
 800c22c:	46bd      	mov	sp, r7
 800c22e:	bd80      	pop	{r7, pc}

0800c230 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b084      	sub	sp, #16
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
 800c238:	460b      	mov	r3, r1
 800c23a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c23c:	2300      	movs	r3, #0
 800c23e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c240:	2300      	movs	r3, #0
 800c242:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800c24a:	78fa      	ldrb	r2, [r7, #3]
 800c24c:	4611      	mov	r1, r2
 800c24e:	4618      	mov	r0, r3
 800c250:	f7f8 fb3c 	bl	80048cc <HAL_PCD_EP_SetStall>
 800c254:	4603      	mov	r3, r0
 800c256:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800c258:	7bfb      	ldrb	r3, [r7, #15]
 800c25a:	4618      	mov	r0, r3
 800c25c:	f000 f8c6 	bl	800c3ec <USBD_Get_USB_Status>
 800c260:	4603      	mov	r3, r0
 800c262:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c264:	7bbb      	ldrb	r3, [r7, #14]
}
 800c266:	4618      	mov	r0, r3
 800c268:	3710      	adds	r7, #16
 800c26a:	46bd      	mov	sp, r7
 800c26c:	bd80      	pop	{r7, pc}

0800c26e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c26e:	b580      	push	{r7, lr}
 800c270:	b084      	sub	sp, #16
 800c272:	af00      	add	r7, sp, #0
 800c274:	6078      	str	r0, [r7, #4]
 800c276:	460b      	mov	r3, r1
 800c278:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c27a:	2300      	movs	r3, #0
 800c27c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c27e:	2300      	movs	r3, #0
 800c280:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800c288:	78fa      	ldrb	r2, [r7, #3]
 800c28a:	4611      	mov	r1, r2
 800c28c:	4618      	mov	r0, r3
 800c28e:	f7f8 fb80 	bl	8004992 <HAL_PCD_EP_ClrStall>
 800c292:	4603      	mov	r3, r0
 800c294:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800c296:	7bfb      	ldrb	r3, [r7, #15]
 800c298:	4618      	mov	r0, r3
 800c29a:	f000 f8a7 	bl	800c3ec <USBD_Get_USB_Status>
 800c29e:	4603      	mov	r3, r0
 800c2a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	3710      	adds	r7, #16
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bd80      	pop	{r7, pc}

0800c2ac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c2ac:	b480      	push	{r7}
 800c2ae:	b085      	sub	sp, #20
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
 800c2b4:	460b      	mov	r3, r1
 800c2b6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800c2be:	60fb      	str	r3, [r7, #12]

  if ((ep_addr & 0x80) == 0x80)
 800c2c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	da0b      	bge.n	800c2e0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c2c8:	78fb      	ldrb	r3, [r7, #3]
 800c2ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c2ce:	68f9      	ldr	r1, [r7, #12]
 800c2d0:	4613      	mov	r3, r2
 800c2d2:	00db      	lsls	r3, r3, #3
 800c2d4:	4413      	add	r3, r2
 800c2d6:	009b      	lsls	r3, r3, #2
 800c2d8:	440b      	add	r3, r1
 800c2da:	3316      	adds	r3, #22
 800c2dc:	781b      	ldrb	r3, [r3, #0]
 800c2de:	e00b      	b.n	800c2f8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c2e0:	78fb      	ldrb	r3, [r7, #3]
 800c2e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c2e6:	68f9      	ldr	r1, [r7, #12]
 800c2e8:	4613      	mov	r3, r2
 800c2ea:	00db      	lsls	r3, r3, #3
 800c2ec:	4413      	add	r3, r2
 800c2ee:	009b      	lsls	r3, r3, #2
 800c2f0:	440b      	add	r3, r1
 800c2f2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800c2f6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	3714      	adds	r7, #20
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c302:	4770      	bx	lr

0800c304 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b084      	sub	sp, #16
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
 800c30c:	460b      	mov	r3, r1
 800c30e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c310:	2300      	movs	r3, #0
 800c312:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c314:	2300      	movs	r3, #0
 800c316:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800c31e:	78fa      	ldrb	r2, [r7, #3]
 800c320:	4611      	mov	r1, r2
 800c322:	4618      	mov	r0, r3
 800c324:	f7f8 f96d 	bl	8004602 <HAL_PCD_SetAddress>
 800c328:	4603      	mov	r3, r0
 800c32a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800c32c:	7bfb      	ldrb	r3, [r7, #15]
 800c32e:	4618      	mov	r0, r3
 800c330:	f000 f85c 	bl	800c3ec <USBD_Get_USB_Status>
 800c334:	4603      	mov	r3, r0
 800c336:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c338:	7bbb      	ldrb	r3, [r7, #14]
}
 800c33a:	4618      	mov	r0, r3
 800c33c:	3710      	adds	r7, #16
 800c33e:	46bd      	mov	sp, r7
 800c340:	bd80      	pop	{r7, pc}

0800c342 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c342:	b580      	push	{r7, lr}
 800c344:	b086      	sub	sp, #24
 800c346:	af00      	add	r7, sp, #0
 800c348:	60f8      	str	r0, [r7, #12]
 800c34a:	607a      	str	r2, [r7, #4]
 800c34c:	603b      	str	r3, [r7, #0]
 800c34e:	460b      	mov	r3, r1
 800c350:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c352:	2300      	movs	r3, #0
 800c354:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c356:	2300      	movs	r3, #0
 800c358:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 800c360:	7af9      	ldrb	r1, [r7, #11]
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	687a      	ldr	r2, [r7, #4]
 800c366:	f7f8 fa77 	bl	8004858 <HAL_PCD_EP_Transmit>
 800c36a:	4603      	mov	r3, r0
 800c36c:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 800c36e:	7dfb      	ldrb	r3, [r7, #23]
 800c370:	4618      	mov	r0, r3
 800c372:	f000 f83b 	bl	800c3ec <USBD_Get_USB_Status>
 800c376:	4603      	mov	r3, r0
 800c378:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c37a:	7dbb      	ldrb	r3, [r7, #22]
}
 800c37c:	4618      	mov	r0, r3
 800c37e:	3718      	adds	r7, #24
 800c380:	46bd      	mov	sp, r7
 800c382:	bd80      	pop	{r7, pc}

0800c384 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b086      	sub	sp, #24
 800c388:	af00      	add	r7, sp, #0
 800c38a:	60f8      	str	r0, [r7, #12]
 800c38c:	607a      	str	r2, [r7, #4]
 800c38e:	603b      	str	r3, [r7, #0]
 800c390:	460b      	mov	r3, r1
 800c392:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c394:	2300      	movs	r3, #0
 800c396:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c398:	2300      	movs	r3, #0
 800c39a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 800c3a2:	7af9      	ldrb	r1, [r7, #11]
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	687a      	ldr	r2, [r7, #4]
 800c3a8:	f7f8 fa03 	bl	80047b2 <HAL_PCD_EP_Receive>
 800c3ac:	4603      	mov	r3, r0
 800c3ae:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 800c3b0:	7dfb      	ldrb	r3, [r7, #23]
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	f000 f81a 	bl	800c3ec <USBD_Get_USB_Status>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c3bc:	7dbb      	ldrb	r3, [r7, #22]
}
 800c3be:	4618      	mov	r0, r3
 800c3c0:	3718      	adds	r7, #24
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	bd80      	pop	{r7, pc}

0800c3c6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3c6:	b580      	push	{r7, lr}
 800c3c8:	b082      	sub	sp, #8
 800c3ca:	af00      	add	r7, sp, #0
 800c3cc:	6078      	str	r0, [r7, #4]
 800c3ce:	460b      	mov	r3, r1
 800c3d0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef *)pdev->pData, ep_addr);
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800c3d8:	78fa      	ldrb	r2, [r7, #3]
 800c3da:	4611      	mov	r1, r2
 800c3dc:	4618      	mov	r0, r3
 800c3de:	f7f8 fa23 	bl	8004828 <HAL_PCD_EP_GetRxCount>
 800c3e2:	4603      	mov	r3, r0
}
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	3708      	adds	r7, #8
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	bd80      	pop	{r7, pc}

0800c3ec <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c3ec:	b480      	push	{r7}
 800c3ee:	b085      	sub	sp, #20
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c3fa:	79fb      	ldrb	r3, [r7, #7]
 800c3fc:	2b03      	cmp	r3, #3
 800c3fe:	d817      	bhi.n	800c430 <USBD_Get_USB_Status+0x44>
 800c400:	a201      	add	r2, pc, #4	@ (adr r2, 800c408 <USBD_Get_USB_Status+0x1c>)
 800c402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c406:	bf00      	nop
 800c408:	0800c419 	.word	0x0800c419
 800c40c:	0800c41f 	.word	0x0800c41f
 800c410:	0800c425 	.word	0x0800c425
 800c414:	0800c42b 	.word	0x0800c42b
  {
  case HAL_OK:
    usb_status = USBD_OK;
 800c418:	2300      	movs	r3, #0
 800c41a:	73fb      	strb	r3, [r7, #15]
    break;
 800c41c:	e00b      	b.n	800c436 <USBD_Get_USB_Status+0x4a>
  case HAL_ERROR:
    usb_status = USBD_FAIL;
 800c41e:	2303      	movs	r3, #3
 800c420:	73fb      	strb	r3, [r7, #15]
    break;
 800c422:	e008      	b.n	800c436 <USBD_Get_USB_Status+0x4a>
  case HAL_BUSY:
    usb_status = USBD_BUSY;
 800c424:	2301      	movs	r3, #1
 800c426:	73fb      	strb	r3, [r7, #15]
    break;
 800c428:	e005      	b.n	800c436 <USBD_Get_USB_Status+0x4a>
  case HAL_TIMEOUT:
    usb_status = USBD_FAIL;
 800c42a:	2303      	movs	r3, #3
 800c42c:	73fb      	strb	r3, [r7, #15]
    break;
 800c42e:	e002      	b.n	800c436 <USBD_Get_USB_Status+0x4a>
  default:
    usb_status = USBD_FAIL;
 800c430:	2303      	movs	r3, #3
 800c432:	73fb      	strb	r3, [r7, #15]
    break;
 800c434:	bf00      	nop
  }
  return usb_status;
 800c436:	7bfb      	ldrb	r3, [r7, #15]
}
 800c438:	4618      	mov	r0, r3
 800c43a:	3714      	adds	r7, #20
 800c43c:	46bd      	mov	sp, r7
 800c43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c442:	4770      	bx	lr

0800c444 <sniprintf>:
 800c444:	b40c      	push	{r2, r3}
 800c446:	b530      	push	{r4, r5, lr}
 800c448:	4b18      	ldr	r3, [pc, #96]	@ (800c4ac <sniprintf+0x68>)
 800c44a:	1e0c      	subs	r4, r1, #0
 800c44c:	681d      	ldr	r5, [r3, #0]
 800c44e:	b09d      	sub	sp, #116	@ 0x74
 800c450:	da08      	bge.n	800c464 <sniprintf+0x20>
 800c452:	238b      	movs	r3, #139	@ 0x8b
 800c454:	602b      	str	r3, [r5, #0]
 800c456:	f04f 30ff 	mov.w	r0, #4294967295
 800c45a:	b01d      	add	sp, #116	@ 0x74
 800c45c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c460:	b002      	add	sp, #8
 800c462:	4770      	bx	lr
 800c464:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c468:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c46c:	f04f 0300 	mov.w	r3, #0
 800c470:	931b      	str	r3, [sp, #108]	@ 0x6c
 800c472:	bf14      	ite	ne
 800c474:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c478:	4623      	moveq	r3, r4
 800c47a:	9304      	str	r3, [sp, #16]
 800c47c:	9307      	str	r3, [sp, #28]
 800c47e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c482:	9002      	str	r0, [sp, #8]
 800c484:	9006      	str	r0, [sp, #24]
 800c486:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c48a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c48c:	ab21      	add	r3, sp, #132	@ 0x84
 800c48e:	a902      	add	r1, sp, #8
 800c490:	4628      	mov	r0, r5
 800c492:	9301      	str	r3, [sp, #4]
 800c494:	f000 f9a2 	bl	800c7dc <_svfiprintf_r>
 800c498:	1c43      	adds	r3, r0, #1
 800c49a:	bfbc      	itt	lt
 800c49c:	238b      	movlt	r3, #139	@ 0x8b
 800c49e:	602b      	strlt	r3, [r5, #0]
 800c4a0:	2c00      	cmp	r4, #0
 800c4a2:	d0da      	beq.n	800c45a <sniprintf+0x16>
 800c4a4:	9b02      	ldr	r3, [sp, #8]
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	701a      	strb	r2, [r3, #0]
 800c4aa:	e7d6      	b.n	800c45a <sniprintf+0x16>
 800c4ac:	200002b4 	.word	0x200002b4

0800c4b0 <memset>:
 800c4b0:	4402      	add	r2, r0
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	4293      	cmp	r3, r2
 800c4b6:	d100      	bne.n	800c4ba <memset+0xa>
 800c4b8:	4770      	bx	lr
 800c4ba:	f803 1b01 	strb.w	r1, [r3], #1
 800c4be:	e7f9      	b.n	800c4b4 <memset+0x4>

0800c4c0 <__errno>:
 800c4c0:	4b01      	ldr	r3, [pc, #4]	@ (800c4c8 <__errno+0x8>)
 800c4c2:	6818      	ldr	r0, [r3, #0]
 800c4c4:	4770      	bx	lr
 800c4c6:	bf00      	nop
 800c4c8:	200002b4 	.word	0x200002b4

0800c4cc <__libc_init_array>:
 800c4cc:	b570      	push	{r4, r5, r6, lr}
 800c4ce:	4d0d      	ldr	r5, [pc, #52]	@ (800c504 <__libc_init_array+0x38>)
 800c4d0:	4c0d      	ldr	r4, [pc, #52]	@ (800c508 <__libc_init_array+0x3c>)
 800c4d2:	1b64      	subs	r4, r4, r5
 800c4d4:	10a4      	asrs	r4, r4, #2
 800c4d6:	2600      	movs	r6, #0
 800c4d8:	42a6      	cmp	r6, r4
 800c4da:	d109      	bne.n	800c4f0 <__libc_init_array+0x24>
 800c4dc:	4d0b      	ldr	r5, [pc, #44]	@ (800c50c <__libc_init_array+0x40>)
 800c4de:	4c0c      	ldr	r4, [pc, #48]	@ (800c510 <__libc_init_array+0x44>)
 800c4e0:	f000 fc64 	bl	800cdac <_init>
 800c4e4:	1b64      	subs	r4, r4, r5
 800c4e6:	10a4      	asrs	r4, r4, #2
 800c4e8:	2600      	movs	r6, #0
 800c4ea:	42a6      	cmp	r6, r4
 800c4ec:	d105      	bne.n	800c4fa <__libc_init_array+0x2e>
 800c4ee:	bd70      	pop	{r4, r5, r6, pc}
 800c4f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4f4:	4798      	blx	r3
 800c4f6:	3601      	adds	r6, #1
 800c4f8:	e7ee      	b.n	800c4d8 <__libc_init_array+0xc>
 800c4fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4fe:	4798      	blx	r3
 800c500:	3601      	adds	r6, #1
 800c502:	e7f2      	b.n	800c4ea <__libc_init_array+0x1e>
 800c504:	0800ce7c 	.word	0x0800ce7c
 800c508:	0800ce7c 	.word	0x0800ce7c
 800c50c:	0800ce7c 	.word	0x0800ce7c
 800c510:	0800ce80 	.word	0x0800ce80

0800c514 <__retarget_lock_acquire_recursive>:
 800c514:	4770      	bx	lr

0800c516 <__retarget_lock_release_recursive>:
 800c516:	4770      	bx	lr

0800c518 <memcpy>:
 800c518:	440a      	add	r2, r1
 800c51a:	4291      	cmp	r1, r2
 800c51c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c520:	d100      	bne.n	800c524 <memcpy+0xc>
 800c522:	4770      	bx	lr
 800c524:	b510      	push	{r4, lr}
 800c526:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c52a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c52e:	4291      	cmp	r1, r2
 800c530:	d1f9      	bne.n	800c526 <memcpy+0xe>
 800c532:	bd10      	pop	{r4, pc}

0800c534 <_free_r>:
 800c534:	b538      	push	{r3, r4, r5, lr}
 800c536:	4605      	mov	r5, r0
 800c538:	2900      	cmp	r1, #0
 800c53a:	d041      	beq.n	800c5c0 <_free_r+0x8c>
 800c53c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c540:	1f0c      	subs	r4, r1, #4
 800c542:	2b00      	cmp	r3, #0
 800c544:	bfb8      	it	lt
 800c546:	18e4      	addlt	r4, r4, r3
 800c548:	f000 f8e0 	bl	800c70c <__malloc_lock>
 800c54c:	4a1d      	ldr	r2, [pc, #116]	@ (800c5c4 <_free_r+0x90>)
 800c54e:	6813      	ldr	r3, [r2, #0]
 800c550:	b933      	cbnz	r3, 800c560 <_free_r+0x2c>
 800c552:	6063      	str	r3, [r4, #4]
 800c554:	6014      	str	r4, [r2, #0]
 800c556:	4628      	mov	r0, r5
 800c558:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c55c:	f000 b8dc 	b.w	800c718 <__malloc_unlock>
 800c560:	42a3      	cmp	r3, r4
 800c562:	d908      	bls.n	800c576 <_free_r+0x42>
 800c564:	6820      	ldr	r0, [r4, #0]
 800c566:	1821      	adds	r1, r4, r0
 800c568:	428b      	cmp	r3, r1
 800c56a:	bf01      	itttt	eq
 800c56c:	6819      	ldreq	r1, [r3, #0]
 800c56e:	685b      	ldreq	r3, [r3, #4]
 800c570:	1809      	addeq	r1, r1, r0
 800c572:	6021      	streq	r1, [r4, #0]
 800c574:	e7ed      	b.n	800c552 <_free_r+0x1e>
 800c576:	461a      	mov	r2, r3
 800c578:	685b      	ldr	r3, [r3, #4]
 800c57a:	b10b      	cbz	r3, 800c580 <_free_r+0x4c>
 800c57c:	42a3      	cmp	r3, r4
 800c57e:	d9fa      	bls.n	800c576 <_free_r+0x42>
 800c580:	6811      	ldr	r1, [r2, #0]
 800c582:	1850      	adds	r0, r2, r1
 800c584:	42a0      	cmp	r0, r4
 800c586:	d10b      	bne.n	800c5a0 <_free_r+0x6c>
 800c588:	6820      	ldr	r0, [r4, #0]
 800c58a:	4401      	add	r1, r0
 800c58c:	1850      	adds	r0, r2, r1
 800c58e:	4283      	cmp	r3, r0
 800c590:	6011      	str	r1, [r2, #0]
 800c592:	d1e0      	bne.n	800c556 <_free_r+0x22>
 800c594:	6818      	ldr	r0, [r3, #0]
 800c596:	685b      	ldr	r3, [r3, #4]
 800c598:	6053      	str	r3, [r2, #4]
 800c59a:	4408      	add	r0, r1
 800c59c:	6010      	str	r0, [r2, #0]
 800c59e:	e7da      	b.n	800c556 <_free_r+0x22>
 800c5a0:	d902      	bls.n	800c5a8 <_free_r+0x74>
 800c5a2:	230c      	movs	r3, #12
 800c5a4:	602b      	str	r3, [r5, #0]
 800c5a6:	e7d6      	b.n	800c556 <_free_r+0x22>
 800c5a8:	6820      	ldr	r0, [r4, #0]
 800c5aa:	1821      	adds	r1, r4, r0
 800c5ac:	428b      	cmp	r3, r1
 800c5ae:	bf04      	itt	eq
 800c5b0:	6819      	ldreq	r1, [r3, #0]
 800c5b2:	685b      	ldreq	r3, [r3, #4]
 800c5b4:	6063      	str	r3, [r4, #4]
 800c5b6:	bf04      	itt	eq
 800c5b8:	1809      	addeq	r1, r1, r0
 800c5ba:	6021      	streq	r1, [r4, #0]
 800c5bc:	6054      	str	r4, [r2, #4]
 800c5be:	e7ca      	b.n	800c556 <_free_r+0x22>
 800c5c0:	bd38      	pop	{r3, r4, r5, pc}
 800c5c2:	bf00      	nop
 800c5c4:	2000361c 	.word	0x2000361c

0800c5c8 <sbrk_aligned>:
 800c5c8:	b570      	push	{r4, r5, r6, lr}
 800c5ca:	4e0f      	ldr	r6, [pc, #60]	@ (800c608 <sbrk_aligned+0x40>)
 800c5cc:	460c      	mov	r4, r1
 800c5ce:	6831      	ldr	r1, [r6, #0]
 800c5d0:	4605      	mov	r5, r0
 800c5d2:	b911      	cbnz	r1, 800c5da <sbrk_aligned+0x12>
 800c5d4:	f000 fba4 	bl	800cd20 <_sbrk_r>
 800c5d8:	6030      	str	r0, [r6, #0]
 800c5da:	4621      	mov	r1, r4
 800c5dc:	4628      	mov	r0, r5
 800c5de:	f000 fb9f 	bl	800cd20 <_sbrk_r>
 800c5e2:	1c43      	adds	r3, r0, #1
 800c5e4:	d103      	bne.n	800c5ee <sbrk_aligned+0x26>
 800c5e6:	f04f 34ff 	mov.w	r4, #4294967295
 800c5ea:	4620      	mov	r0, r4
 800c5ec:	bd70      	pop	{r4, r5, r6, pc}
 800c5ee:	1cc4      	adds	r4, r0, #3
 800c5f0:	f024 0403 	bic.w	r4, r4, #3
 800c5f4:	42a0      	cmp	r0, r4
 800c5f6:	d0f8      	beq.n	800c5ea <sbrk_aligned+0x22>
 800c5f8:	1a21      	subs	r1, r4, r0
 800c5fa:	4628      	mov	r0, r5
 800c5fc:	f000 fb90 	bl	800cd20 <_sbrk_r>
 800c600:	3001      	adds	r0, #1
 800c602:	d1f2      	bne.n	800c5ea <sbrk_aligned+0x22>
 800c604:	e7ef      	b.n	800c5e6 <sbrk_aligned+0x1e>
 800c606:	bf00      	nop
 800c608:	20003618 	.word	0x20003618

0800c60c <_malloc_r>:
 800c60c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c610:	1ccd      	adds	r5, r1, #3
 800c612:	f025 0503 	bic.w	r5, r5, #3
 800c616:	3508      	adds	r5, #8
 800c618:	2d0c      	cmp	r5, #12
 800c61a:	bf38      	it	cc
 800c61c:	250c      	movcc	r5, #12
 800c61e:	2d00      	cmp	r5, #0
 800c620:	4606      	mov	r6, r0
 800c622:	db01      	blt.n	800c628 <_malloc_r+0x1c>
 800c624:	42a9      	cmp	r1, r5
 800c626:	d904      	bls.n	800c632 <_malloc_r+0x26>
 800c628:	230c      	movs	r3, #12
 800c62a:	6033      	str	r3, [r6, #0]
 800c62c:	2000      	movs	r0, #0
 800c62e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c632:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c708 <_malloc_r+0xfc>
 800c636:	f000 f869 	bl	800c70c <__malloc_lock>
 800c63a:	f8d8 3000 	ldr.w	r3, [r8]
 800c63e:	461c      	mov	r4, r3
 800c640:	bb44      	cbnz	r4, 800c694 <_malloc_r+0x88>
 800c642:	4629      	mov	r1, r5
 800c644:	4630      	mov	r0, r6
 800c646:	f7ff ffbf 	bl	800c5c8 <sbrk_aligned>
 800c64a:	1c43      	adds	r3, r0, #1
 800c64c:	4604      	mov	r4, r0
 800c64e:	d158      	bne.n	800c702 <_malloc_r+0xf6>
 800c650:	f8d8 4000 	ldr.w	r4, [r8]
 800c654:	4627      	mov	r7, r4
 800c656:	2f00      	cmp	r7, #0
 800c658:	d143      	bne.n	800c6e2 <_malloc_r+0xd6>
 800c65a:	2c00      	cmp	r4, #0
 800c65c:	d04b      	beq.n	800c6f6 <_malloc_r+0xea>
 800c65e:	6823      	ldr	r3, [r4, #0]
 800c660:	4639      	mov	r1, r7
 800c662:	4630      	mov	r0, r6
 800c664:	eb04 0903 	add.w	r9, r4, r3
 800c668:	f000 fb5a 	bl	800cd20 <_sbrk_r>
 800c66c:	4581      	cmp	r9, r0
 800c66e:	d142      	bne.n	800c6f6 <_malloc_r+0xea>
 800c670:	6821      	ldr	r1, [r4, #0]
 800c672:	1a6d      	subs	r5, r5, r1
 800c674:	4629      	mov	r1, r5
 800c676:	4630      	mov	r0, r6
 800c678:	f7ff ffa6 	bl	800c5c8 <sbrk_aligned>
 800c67c:	3001      	adds	r0, #1
 800c67e:	d03a      	beq.n	800c6f6 <_malloc_r+0xea>
 800c680:	6823      	ldr	r3, [r4, #0]
 800c682:	442b      	add	r3, r5
 800c684:	6023      	str	r3, [r4, #0]
 800c686:	f8d8 3000 	ldr.w	r3, [r8]
 800c68a:	685a      	ldr	r2, [r3, #4]
 800c68c:	bb62      	cbnz	r2, 800c6e8 <_malloc_r+0xdc>
 800c68e:	f8c8 7000 	str.w	r7, [r8]
 800c692:	e00f      	b.n	800c6b4 <_malloc_r+0xa8>
 800c694:	6822      	ldr	r2, [r4, #0]
 800c696:	1b52      	subs	r2, r2, r5
 800c698:	d420      	bmi.n	800c6dc <_malloc_r+0xd0>
 800c69a:	2a0b      	cmp	r2, #11
 800c69c:	d917      	bls.n	800c6ce <_malloc_r+0xc2>
 800c69e:	1961      	adds	r1, r4, r5
 800c6a0:	42a3      	cmp	r3, r4
 800c6a2:	6025      	str	r5, [r4, #0]
 800c6a4:	bf18      	it	ne
 800c6a6:	6059      	strne	r1, [r3, #4]
 800c6a8:	6863      	ldr	r3, [r4, #4]
 800c6aa:	bf08      	it	eq
 800c6ac:	f8c8 1000 	streq.w	r1, [r8]
 800c6b0:	5162      	str	r2, [r4, r5]
 800c6b2:	604b      	str	r3, [r1, #4]
 800c6b4:	4630      	mov	r0, r6
 800c6b6:	f000 f82f 	bl	800c718 <__malloc_unlock>
 800c6ba:	f104 000b 	add.w	r0, r4, #11
 800c6be:	1d23      	adds	r3, r4, #4
 800c6c0:	f020 0007 	bic.w	r0, r0, #7
 800c6c4:	1ac2      	subs	r2, r0, r3
 800c6c6:	bf1c      	itt	ne
 800c6c8:	1a1b      	subne	r3, r3, r0
 800c6ca:	50a3      	strne	r3, [r4, r2]
 800c6cc:	e7af      	b.n	800c62e <_malloc_r+0x22>
 800c6ce:	6862      	ldr	r2, [r4, #4]
 800c6d0:	42a3      	cmp	r3, r4
 800c6d2:	bf0c      	ite	eq
 800c6d4:	f8c8 2000 	streq.w	r2, [r8]
 800c6d8:	605a      	strne	r2, [r3, #4]
 800c6da:	e7eb      	b.n	800c6b4 <_malloc_r+0xa8>
 800c6dc:	4623      	mov	r3, r4
 800c6de:	6864      	ldr	r4, [r4, #4]
 800c6e0:	e7ae      	b.n	800c640 <_malloc_r+0x34>
 800c6e2:	463c      	mov	r4, r7
 800c6e4:	687f      	ldr	r7, [r7, #4]
 800c6e6:	e7b6      	b.n	800c656 <_malloc_r+0x4a>
 800c6e8:	461a      	mov	r2, r3
 800c6ea:	685b      	ldr	r3, [r3, #4]
 800c6ec:	42a3      	cmp	r3, r4
 800c6ee:	d1fb      	bne.n	800c6e8 <_malloc_r+0xdc>
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	6053      	str	r3, [r2, #4]
 800c6f4:	e7de      	b.n	800c6b4 <_malloc_r+0xa8>
 800c6f6:	230c      	movs	r3, #12
 800c6f8:	6033      	str	r3, [r6, #0]
 800c6fa:	4630      	mov	r0, r6
 800c6fc:	f000 f80c 	bl	800c718 <__malloc_unlock>
 800c700:	e794      	b.n	800c62c <_malloc_r+0x20>
 800c702:	6005      	str	r5, [r0, #0]
 800c704:	e7d6      	b.n	800c6b4 <_malloc_r+0xa8>
 800c706:	bf00      	nop
 800c708:	2000361c 	.word	0x2000361c

0800c70c <__malloc_lock>:
 800c70c:	4801      	ldr	r0, [pc, #4]	@ (800c714 <__malloc_lock+0x8>)
 800c70e:	f7ff bf01 	b.w	800c514 <__retarget_lock_acquire_recursive>
 800c712:	bf00      	nop
 800c714:	20003614 	.word	0x20003614

0800c718 <__malloc_unlock>:
 800c718:	4801      	ldr	r0, [pc, #4]	@ (800c720 <__malloc_unlock+0x8>)
 800c71a:	f7ff befc 	b.w	800c516 <__retarget_lock_release_recursive>
 800c71e:	bf00      	nop
 800c720:	20003614 	.word	0x20003614

0800c724 <__ssputs_r>:
 800c724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c728:	688e      	ldr	r6, [r1, #8]
 800c72a:	461f      	mov	r7, r3
 800c72c:	42be      	cmp	r6, r7
 800c72e:	680b      	ldr	r3, [r1, #0]
 800c730:	4682      	mov	sl, r0
 800c732:	460c      	mov	r4, r1
 800c734:	4690      	mov	r8, r2
 800c736:	d82d      	bhi.n	800c794 <__ssputs_r+0x70>
 800c738:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c73c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c740:	d026      	beq.n	800c790 <__ssputs_r+0x6c>
 800c742:	6965      	ldr	r5, [r4, #20]
 800c744:	6909      	ldr	r1, [r1, #16]
 800c746:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c74a:	eba3 0901 	sub.w	r9, r3, r1
 800c74e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c752:	1c7b      	adds	r3, r7, #1
 800c754:	444b      	add	r3, r9
 800c756:	106d      	asrs	r5, r5, #1
 800c758:	429d      	cmp	r5, r3
 800c75a:	bf38      	it	cc
 800c75c:	461d      	movcc	r5, r3
 800c75e:	0553      	lsls	r3, r2, #21
 800c760:	d527      	bpl.n	800c7b2 <__ssputs_r+0x8e>
 800c762:	4629      	mov	r1, r5
 800c764:	f7ff ff52 	bl	800c60c <_malloc_r>
 800c768:	4606      	mov	r6, r0
 800c76a:	b360      	cbz	r0, 800c7c6 <__ssputs_r+0xa2>
 800c76c:	6921      	ldr	r1, [r4, #16]
 800c76e:	464a      	mov	r2, r9
 800c770:	f7ff fed2 	bl	800c518 <memcpy>
 800c774:	89a3      	ldrh	r3, [r4, #12]
 800c776:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c77a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c77e:	81a3      	strh	r3, [r4, #12]
 800c780:	6126      	str	r6, [r4, #16]
 800c782:	6165      	str	r5, [r4, #20]
 800c784:	444e      	add	r6, r9
 800c786:	eba5 0509 	sub.w	r5, r5, r9
 800c78a:	6026      	str	r6, [r4, #0]
 800c78c:	60a5      	str	r5, [r4, #8]
 800c78e:	463e      	mov	r6, r7
 800c790:	42be      	cmp	r6, r7
 800c792:	d900      	bls.n	800c796 <__ssputs_r+0x72>
 800c794:	463e      	mov	r6, r7
 800c796:	6820      	ldr	r0, [r4, #0]
 800c798:	4632      	mov	r2, r6
 800c79a:	4641      	mov	r1, r8
 800c79c:	f000 faa6 	bl	800ccec <memmove>
 800c7a0:	68a3      	ldr	r3, [r4, #8]
 800c7a2:	1b9b      	subs	r3, r3, r6
 800c7a4:	60a3      	str	r3, [r4, #8]
 800c7a6:	6823      	ldr	r3, [r4, #0]
 800c7a8:	4433      	add	r3, r6
 800c7aa:	6023      	str	r3, [r4, #0]
 800c7ac:	2000      	movs	r0, #0
 800c7ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7b2:	462a      	mov	r2, r5
 800c7b4:	f000 fac4 	bl	800cd40 <_realloc_r>
 800c7b8:	4606      	mov	r6, r0
 800c7ba:	2800      	cmp	r0, #0
 800c7bc:	d1e0      	bne.n	800c780 <__ssputs_r+0x5c>
 800c7be:	6921      	ldr	r1, [r4, #16]
 800c7c0:	4650      	mov	r0, sl
 800c7c2:	f7ff feb7 	bl	800c534 <_free_r>
 800c7c6:	230c      	movs	r3, #12
 800c7c8:	f8ca 3000 	str.w	r3, [sl]
 800c7cc:	89a3      	ldrh	r3, [r4, #12]
 800c7ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c7d2:	81a3      	strh	r3, [r4, #12]
 800c7d4:	f04f 30ff 	mov.w	r0, #4294967295
 800c7d8:	e7e9      	b.n	800c7ae <__ssputs_r+0x8a>
	...

0800c7dc <_svfiprintf_r>:
 800c7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7e0:	4698      	mov	r8, r3
 800c7e2:	898b      	ldrh	r3, [r1, #12]
 800c7e4:	061b      	lsls	r3, r3, #24
 800c7e6:	b09d      	sub	sp, #116	@ 0x74
 800c7e8:	4607      	mov	r7, r0
 800c7ea:	460d      	mov	r5, r1
 800c7ec:	4614      	mov	r4, r2
 800c7ee:	d510      	bpl.n	800c812 <_svfiprintf_r+0x36>
 800c7f0:	690b      	ldr	r3, [r1, #16]
 800c7f2:	b973      	cbnz	r3, 800c812 <_svfiprintf_r+0x36>
 800c7f4:	2140      	movs	r1, #64	@ 0x40
 800c7f6:	f7ff ff09 	bl	800c60c <_malloc_r>
 800c7fa:	6028      	str	r0, [r5, #0]
 800c7fc:	6128      	str	r0, [r5, #16]
 800c7fe:	b930      	cbnz	r0, 800c80e <_svfiprintf_r+0x32>
 800c800:	230c      	movs	r3, #12
 800c802:	603b      	str	r3, [r7, #0]
 800c804:	f04f 30ff 	mov.w	r0, #4294967295
 800c808:	b01d      	add	sp, #116	@ 0x74
 800c80a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c80e:	2340      	movs	r3, #64	@ 0x40
 800c810:	616b      	str	r3, [r5, #20]
 800c812:	2300      	movs	r3, #0
 800c814:	9309      	str	r3, [sp, #36]	@ 0x24
 800c816:	2320      	movs	r3, #32
 800c818:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c81c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c820:	2330      	movs	r3, #48	@ 0x30
 800c822:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c9c0 <_svfiprintf_r+0x1e4>
 800c826:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c82a:	f04f 0901 	mov.w	r9, #1
 800c82e:	4623      	mov	r3, r4
 800c830:	469a      	mov	sl, r3
 800c832:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c836:	b10a      	cbz	r2, 800c83c <_svfiprintf_r+0x60>
 800c838:	2a25      	cmp	r2, #37	@ 0x25
 800c83a:	d1f9      	bne.n	800c830 <_svfiprintf_r+0x54>
 800c83c:	ebba 0b04 	subs.w	fp, sl, r4
 800c840:	d00b      	beq.n	800c85a <_svfiprintf_r+0x7e>
 800c842:	465b      	mov	r3, fp
 800c844:	4622      	mov	r2, r4
 800c846:	4629      	mov	r1, r5
 800c848:	4638      	mov	r0, r7
 800c84a:	f7ff ff6b 	bl	800c724 <__ssputs_r>
 800c84e:	3001      	adds	r0, #1
 800c850:	f000 80a7 	beq.w	800c9a2 <_svfiprintf_r+0x1c6>
 800c854:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c856:	445a      	add	r2, fp
 800c858:	9209      	str	r2, [sp, #36]	@ 0x24
 800c85a:	f89a 3000 	ldrb.w	r3, [sl]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	f000 809f 	beq.w	800c9a2 <_svfiprintf_r+0x1c6>
 800c864:	2300      	movs	r3, #0
 800c866:	f04f 32ff 	mov.w	r2, #4294967295
 800c86a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c86e:	f10a 0a01 	add.w	sl, sl, #1
 800c872:	9304      	str	r3, [sp, #16]
 800c874:	9307      	str	r3, [sp, #28]
 800c876:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c87a:	931a      	str	r3, [sp, #104]	@ 0x68
 800c87c:	4654      	mov	r4, sl
 800c87e:	2205      	movs	r2, #5
 800c880:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c884:	484e      	ldr	r0, [pc, #312]	@ (800c9c0 <_svfiprintf_r+0x1e4>)
 800c886:	f7f3 fca3 	bl	80001d0 <memchr>
 800c88a:	9a04      	ldr	r2, [sp, #16]
 800c88c:	b9d8      	cbnz	r0, 800c8c6 <_svfiprintf_r+0xea>
 800c88e:	06d0      	lsls	r0, r2, #27
 800c890:	bf44      	itt	mi
 800c892:	2320      	movmi	r3, #32
 800c894:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c898:	0711      	lsls	r1, r2, #28
 800c89a:	bf44      	itt	mi
 800c89c:	232b      	movmi	r3, #43	@ 0x2b
 800c89e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c8a2:	f89a 3000 	ldrb.w	r3, [sl]
 800c8a6:	2b2a      	cmp	r3, #42	@ 0x2a
 800c8a8:	d015      	beq.n	800c8d6 <_svfiprintf_r+0xfa>
 800c8aa:	9a07      	ldr	r2, [sp, #28]
 800c8ac:	4654      	mov	r4, sl
 800c8ae:	2000      	movs	r0, #0
 800c8b0:	f04f 0c0a 	mov.w	ip, #10
 800c8b4:	4621      	mov	r1, r4
 800c8b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c8ba:	3b30      	subs	r3, #48	@ 0x30
 800c8bc:	2b09      	cmp	r3, #9
 800c8be:	d94b      	bls.n	800c958 <_svfiprintf_r+0x17c>
 800c8c0:	b1b0      	cbz	r0, 800c8f0 <_svfiprintf_r+0x114>
 800c8c2:	9207      	str	r2, [sp, #28]
 800c8c4:	e014      	b.n	800c8f0 <_svfiprintf_r+0x114>
 800c8c6:	eba0 0308 	sub.w	r3, r0, r8
 800c8ca:	fa09 f303 	lsl.w	r3, r9, r3
 800c8ce:	4313      	orrs	r3, r2
 800c8d0:	9304      	str	r3, [sp, #16]
 800c8d2:	46a2      	mov	sl, r4
 800c8d4:	e7d2      	b.n	800c87c <_svfiprintf_r+0xa0>
 800c8d6:	9b03      	ldr	r3, [sp, #12]
 800c8d8:	1d19      	adds	r1, r3, #4
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	9103      	str	r1, [sp, #12]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	bfbb      	ittet	lt
 800c8e2:	425b      	neglt	r3, r3
 800c8e4:	f042 0202 	orrlt.w	r2, r2, #2
 800c8e8:	9307      	strge	r3, [sp, #28]
 800c8ea:	9307      	strlt	r3, [sp, #28]
 800c8ec:	bfb8      	it	lt
 800c8ee:	9204      	strlt	r2, [sp, #16]
 800c8f0:	7823      	ldrb	r3, [r4, #0]
 800c8f2:	2b2e      	cmp	r3, #46	@ 0x2e
 800c8f4:	d10a      	bne.n	800c90c <_svfiprintf_r+0x130>
 800c8f6:	7863      	ldrb	r3, [r4, #1]
 800c8f8:	2b2a      	cmp	r3, #42	@ 0x2a
 800c8fa:	d132      	bne.n	800c962 <_svfiprintf_r+0x186>
 800c8fc:	9b03      	ldr	r3, [sp, #12]
 800c8fe:	1d1a      	adds	r2, r3, #4
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	9203      	str	r2, [sp, #12]
 800c904:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c908:	3402      	adds	r4, #2
 800c90a:	9305      	str	r3, [sp, #20]
 800c90c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c9d0 <_svfiprintf_r+0x1f4>
 800c910:	7821      	ldrb	r1, [r4, #0]
 800c912:	2203      	movs	r2, #3
 800c914:	4650      	mov	r0, sl
 800c916:	f7f3 fc5b 	bl	80001d0 <memchr>
 800c91a:	b138      	cbz	r0, 800c92c <_svfiprintf_r+0x150>
 800c91c:	9b04      	ldr	r3, [sp, #16]
 800c91e:	eba0 000a 	sub.w	r0, r0, sl
 800c922:	2240      	movs	r2, #64	@ 0x40
 800c924:	4082      	lsls	r2, r0
 800c926:	4313      	orrs	r3, r2
 800c928:	3401      	adds	r4, #1
 800c92a:	9304      	str	r3, [sp, #16]
 800c92c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c930:	4824      	ldr	r0, [pc, #144]	@ (800c9c4 <_svfiprintf_r+0x1e8>)
 800c932:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c936:	2206      	movs	r2, #6
 800c938:	f7f3 fc4a 	bl	80001d0 <memchr>
 800c93c:	2800      	cmp	r0, #0
 800c93e:	d036      	beq.n	800c9ae <_svfiprintf_r+0x1d2>
 800c940:	4b21      	ldr	r3, [pc, #132]	@ (800c9c8 <_svfiprintf_r+0x1ec>)
 800c942:	bb1b      	cbnz	r3, 800c98c <_svfiprintf_r+0x1b0>
 800c944:	9b03      	ldr	r3, [sp, #12]
 800c946:	3307      	adds	r3, #7
 800c948:	f023 0307 	bic.w	r3, r3, #7
 800c94c:	3308      	adds	r3, #8
 800c94e:	9303      	str	r3, [sp, #12]
 800c950:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c952:	4433      	add	r3, r6
 800c954:	9309      	str	r3, [sp, #36]	@ 0x24
 800c956:	e76a      	b.n	800c82e <_svfiprintf_r+0x52>
 800c958:	fb0c 3202 	mla	r2, ip, r2, r3
 800c95c:	460c      	mov	r4, r1
 800c95e:	2001      	movs	r0, #1
 800c960:	e7a8      	b.n	800c8b4 <_svfiprintf_r+0xd8>
 800c962:	2300      	movs	r3, #0
 800c964:	3401      	adds	r4, #1
 800c966:	9305      	str	r3, [sp, #20]
 800c968:	4619      	mov	r1, r3
 800c96a:	f04f 0c0a 	mov.w	ip, #10
 800c96e:	4620      	mov	r0, r4
 800c970:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c974:	3a30      	subs	r2, #48	@ 0x30
 800c976:	2a09      	cmp	r2, #9
 800c978:	d903      	bls.n	800c982 <_svfiprintf_r+0x1a6>
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d0c6      	beq.n	800c90c <_svfiprintf_r+0x130>
 800c97e:	9105      	str	r1, [sp, #20]
 800c980:	e7c4      	b.n	800c90c <_svfiprintf_r+0x130>
 800c982:	fb0c 2101 	mla	r1, ip, r1, r2
 800c986:	4604      	mov	r4, r0
 800c988:	2301      	movs	r3, #1
 800c98a:	e7f0      	b.n	800c96e <_svfiprintf_r+0x192>
 800c98c:	ab03      	add	r3, sp, #12
 800c98e:	9300      	str	r3, [sp, #0]
 800c990:	462a      	mov	r2, r5
 800c992:	4b0e      	ldr	r3, [pc, #56]	@ (800c9cc <_svfiprintf_r+0x1f0>)
 800c994:	a904      	add	r1, sp, #16
 800c996:	4638      	mov	r0, r7
 800c998:	f3af 8000 	nop.w
 800c99c:	1c42      	adds	r2, r0, #1
 800c99e:	4606      	mov	r6, r0
 800c9a0:	d1d6      	bne.n	800c950 <_svfiprintf_r+0x174>
 800c9a2:	89ab      	ldrh	r3, [r5, #12]
 800c9a4:	065b      	lsls	r3, r3, #25
 800c9a6:	f53f af2d 	bmi.w	800c804 <_svfiprintf_r+0x28>
 800c9aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c9ac:	e72c      	b.n	800c808 <_svfiprintf_r+0x2c>
 800c9ae:	ab03      	add	r3, sp, #12
 800c9b0:	9300      	str	r3, [sp, #0]
 800c9b2:	462a      	mov	r2, r5
 800c9b4:	4b05      	ldr	r3, [pc, #20]	@ (800c9cc <_svfiprintf_r+0x1f0>)
 800c9b6:	a904      	add	r1, sp, #16
 800c9b8:	4638      	mov	r0, r7
 800c9ba:	f000 f879 	bl	800cab0 <_printf_i>
 800c9be:	e7ed      	b.n	800c99c <_svfiprintf_r+0x1c0>
 800c9c0:	0800ce40 	.word	0x0800ce40
 800c9c4:	0800ce4a 	.word	0x0800ce4a
 800c9c8:	00000000 	.word	0x00000000
 800c9cc:	0800c725 	.word	0x0800c725
 800c9d0:	0800ce46 	.word	0x0800ce46

0800c9d4 <_printf_common>:
 800c9d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9d8:	4616      	mov	r6, r2
 800c9da:	4698      	mov	r8, r3
 800c9dc:	688a      	ldr	r2, [r1, #8]
 800c9de:	690b      	ldr	r3, [r1, #16]
 800c9e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c9e4:	4293      	cmp	r3, r2
 800c9e6:	bfb8      	it	lt
 800c9e8:	4613      	movlt	r3, r2
 800c9ea:	6033      	str	r3, [r6, #0]
 800c9ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c9f0:	4607      	mov	r7, r0
 800c9f2:	460c      	mov	r4, r1
 800c9f4:	b10a      	cbz	r2, 800c9fa <_printf_common+0x26>
 800c9f6:	3301      	adds	r3, #1
 800c9f8:	6033      	str	r3, [r6, #0]
 800c9fa:	6823      	ldr	r3, [r4, #0]
 800c9fc:	0699      	lsls	r1, r3, #26
 800c9fe:	bf42      	ittt	mi
 800ca00:	6833      	ldrmi	r3, [r6, #0]
 800ca02:	3302      	addmi	r3, #2
 800ca04:	6033      	strmi	r3, [r6, #0]
 800ca06:	6825      	ldr	r5, [r4, #0]
 800ca08:	f015 0506 	ands.w	r5, r5, #6
 800ca0c:	d106      	bne.n	800ca1c <_printf_common+0x48>
 800ca0e:	f104 0a19 	add.w	sl, r4, #25
 800ca12:	68e3      	ldr	r3, [r4, #12]
 800ca14:	6832      	ldr	r2, [r6, #0]
 800ca16:	1a9b      	subs	r3, r3, r2
 800ca18:	42ab      	cmp	r3, r5
 800ca1a:	dc26      	bgt.n	800ca6a <_printf_common+0x96>
 800ca1c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ca20:	6822      	ldr	r2, [r4, #0]
 800ca22:	3b00      	subs	r3, #0
 800ca24:	bf18      	it	ne
 800ca26:	2301      	movne	r3, #1
 800ca28:	0692      	lsls	r2, r2, #26
 800ca2a:	d42b      	bmi.n	800ca84 <_printf_common+0xb0>
 800ca2c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ca30:	4641      	mov	r1, r8
 800ca32:	4638      	mov	r0, r7
 800ca34:	47c8      	blx	r9
 800ca36:	3001      	adds	r0, #1
 800ca38:	d01e      	beq.n	800ca78 <_printf_common+0xa4>
 800ca3a:	6823      	ldr	r3, [r4, #0]
 800ca3c:	6922      	ldr	r2, [r4, #16]
 800ca3e:	f003 0306 	and.w	r3, r3, #6
 800ca42:	2b04      	cmp	r3, #4
 800ca44:	bf02      	ittt	eq
 800ca46:	68e5      	ldreq	r5, [r4, #12]
 800ca48:	6833      	ldreq	r3, [r6, #0]
 800ca4a:	1aed      	subeq	r5, r5, r3
 800ca4c:	68a3      	ldr	r3, [r4, #8]
 800ca4e:	bf0c      	ite	eq
 800ca50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ca54:	2500      	movne	r5, #0
 800ca56:	4293      	cmp	r3, r2
 800ca58:	bfc4      	itt	gt
 800ca5a:	1a9b      	subgt	r3, r3, r2
 800ca5c:	18ed      	addgt	r5, r5, r3
 800ca5e:	2600      	movs	r6, #0
 800ca60:	341a      	adds	r4, #26
 800ca62:	42b5      	cmp	r5, r6
 800ca64:	d11a      	bne.n	800ca9c <_printf_common+0xc8>
 800ca66:	2000      	movs	r0, #0
 800ca68:	e008      	b.n	800ca7c <_printf_common+0xa8>
 800ca6a:	2301      	movs	r3, #1
 800ca6c:	4652      	mov	r2, sl
 800ca6e:	4641      	mov	r1, r8
 800ca70:	4638      	mov	r0, r7
 800ca72:	47c8      	blx	r9
 800ca74:	3001      	adds	r0, #1
 800ca76:	d103      	bne.n	800ca80 <_printf_common+0xac>
 800ca78:	f04f 30ff 	mov.w	r0, #4294967295
 800ca7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca80:	3501      	adds	r5, #1
 800ca82:	e7c6      	b.n	800ca12 <_printf_common+0x3e>
 800ca84:	18e1      	adds	r1, r4, r3
 800ca86:	1c5a      	adds	r2, r3, #1
 800ca88:	2030      	movs	r0, #48	@ 0x30
 800ca8a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ca8e:	4422      	add	r2, r4
 800ca90:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ca94:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ca98:	3302      	adds	r3, #2
 800ca9a:	e7c7      	b.n	800ca2c <_printf_common+0x58>
 800ca9c:	2301      	movs	r3, #1
 800ca9e:	4622      	mov	r2, r4
 800caa0:	4641      	mov	r1, r8
 800caa2:	4638      	mov	r0, r7
 800caa4:	47c8      	blx	r9
 800caa6:	3001      	adds	r0, #1
 800caa8:	d0e6      	beq.n	800ca78 <_printf_common+0xa4>
 800caaa:	3601      	adds	r6, #1
 800caac:	e7d9      	b.n	800ca62 <_printf_common+0x8e>
	...

0800cab0 <_printf_i>:
 800cab0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cab4:	7e0f      	ldrb	r7, [r1, #24]
 800cab6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cab8:	2f78      	cmp	r7, #120	@ 0x78
 800caba:	4691      	mov	r9, r2
 800cabc:	4680      	mov	r8, r0
 800cabe:	460c      	mov	r4, r1
 800cac0:	469a      	mov	sl, r3
 800cac2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cac6:	d807      	bhi.n	800cad8 <_printf_i+0x28>
 800cac8:	2f62      	cmp	r7, #98	@ 0x62
 800caca:	d80a      	bhi.n	800cae2 <_printf_i+0x32>
 800cacc:	2f00      	cmp	r7, #0
 800cace:	f000 80d1 	beq.w	800cc74 <_printf_i+0x1c4>
 800cad2:	2f58      	cmp	r7, #88	@ 0x58
 800cad4:	f000 80b8 	beq.w	800cc48 <_printf_i+0x198>
 800cad8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cadc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cae0:	e03a      	b.n	800cb58 <_printf_i+0xa8>
 800cae2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cae6:	2b15      	cmp	r3, #21
 800cae8:	d8f6      	bhi.n	800cad8 <_printf_i+0x28>
 800caea:	a101      	add	r1, pc, #4	@ (adr r1, 800caf0 <_printf_i+0x40>)
 800caec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800caf0:	0800cb49 	.word	0x0800cb49
 800caf4:	0800cb5d 	.word	0x0800cb5d
 800caf8:	0800cad9 	.word	0x0800cad9
 800cafc:	0800cad9 	.word	0x0800cad9
 800cb00:	0800cad9 	.word	0x0800cad9
 800cb04:	0800cad9 	.word	0x0800cad9
 800cb08:	0800cb5d 	.word	0x0800cb5d
 800cb0c:	0800cad9 	.word	0x0800cad9
 800cb10:	0800cad9 	.word	0x0800cad9
 800cb14:	0800cad9 	.word	0x0800cad9
 800cb18:	0800cad9 	.word	0x0800cad9
 800cb1c:	0800cc5b 	.word	0x0800cc5b
 800cb20:	0800cb87 	.word	0x0800cb87
 800cb24:	0800cc15 	.word	0x0800cc15
 800cb28:	0800cad9 	.word	0x0800cad9
 800cb2c:	0800cad9 	.word	0x0800cad9
 800cb30:	0800cc7d 	.word	0x0800cc7d
 800cb34:	0800cad9 	.word	0x0800cad9
 800cb38:	0800cb87 	.word	0x0800cb87
 800cb3c:	0800cad9 	.word	0x0800cad9
 800cb40:	0800cad9 	.word	0x0800cad9
 800cb44:	0800cc1d 	.word	0x0800cc1d
 800cb48:	6833      	ldr	r3, [r6, #0]
 800cb4a:	1d1a      	adds	r2, r3, #4
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	6032      	str	r2, [r6, #0]
 800cb50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cb54:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cb58:	2301      	movs	r3, #1
 800cb5a:	e09c      	b.n	800cc96 <_printf_i+0x1e6>
 800cb5c:	6833      	ldr	r3, [r6, #0]
 800cb5e:	6820      	ldr	r0, [r4, #0]
 800cb60:	1d19      	adds	r1, r3, #4
 800cb62:	6031      	str	r1, [r6, #0]
 800cb64:	0606      	lsls	r6, r0, #24
 800cb66:	d501      	bpl.n	800cb6c <_printf_i+0xbc>
 800cb68:	681d      	ldr	r5, [r3, #0]
 800cb6a:	e003      	b.n	800cb74 <_printf_i+0xc4>
 800cb6c:	0645      	lsls	r5, r0, #25
 800cb6e:	d5fb      	bpl.n	800cb68 <_printf_i+0xb8>
 800cb70:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cb74:	2d00      	cmp	r5, #0
 800cb76:	da03      	bge.n	800cb80 <_printf_i+0xd0>
 800cb78:	232d      	movs	r3, #45	@ 0x2d
 800cb7a:	426d      	negs	r5, r5
 800cb7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cb80:	4858      	ldr	r0, [pc, #352]	@ (800cce4 <_printf_i+0x234>)
 800cb82:	230a      	movs	r3, #10
 800cb84:	e011      	b.n	800cbaa <_printf_i+0xfa>
 800cb86:	6821      	ldr	r1, [r4, #0]
 800cb88:	6833      	ldr	r3, [r6, #0]
 800cb8a:	0608      	lsls	r0, r1, #24
 800cb8c:	f853 5b04 	ldr.w	r5, [r3], #4
 800cb90:	d402      	bmi.n	800cb98 <_printf_i+0xe8>
 800cb92:	0649      	lsls	r1, r1, #25
 800cb94:	bf48      	it	mi
 800cb96:	b2ad      	uxthmi	r5, r5
 800cb98:	2f6f      	cmp	r7, #111	@ 0x6f
 800cb9a:	4852      	ldr	r0, [pc, #328]	@ (800cce4 <_printf_i+0x234>)
 800cb9c:	6033      	str	r3, [r6, #0]
 800cb9e:	bf14      	ite	ne
 800cba0:	230a      	movne	r3, #10
 800cba2:	2308      	moveq	r3, #8
 800cba4:	2100      	movs	r1, #0
 800cba6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cbaa:	6866      	ldr	r6, [r4, #4]
 800cbac:	60a6      	str	r6, [r4, #8]
 800cbae:	2e00      	cmp	r6, #0
 800cbb0:	db05      	blt.n	800cbbe <_printf_i+0x10e>
 800cbb2:	6821      	ldr	r1, [r4, #0]
 800cbb4:	432e      	orrs	r6, r5
 800cbb6:	f021 0104 	bic.w	r1, r1, #4
 800cbba:	6021      	str	r1, [r4, #0]
 800cbbc:	d04b      	beq.n	800cc56 <_printf_i+0x1a6>
 800cbbe:	4616      	mov	r6, r2
 800cbc0:	fbb5 f1f3 	udiv	r1, r5, r3
 800cbc4:	fb03 5711 	mls	r7, r3, r1, r5
 800cbc8:	5dc7      	ldrb	r7, [r0, r7]
 800cbca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cbce:	462f      	mov	r7, r5
 800cbd0:	42bb      	cmp	r3, r7
 800cbd2:	460d      	mov	r5, r1
 800cbd4:	d9f4      	bls.n	800cbc0 <_printf_i+0x110>
 800cbd6:	2b08      	cmp	r3, #8
 800cbd8:	d10b      	bne.n	800cbf2 <_printf_i+0x142>
 800cbda:	6823      	ldr	r3, [r4, #0]
 800cbdc:	07df      	lsls	r7, r3, #31
 800cbde:	d508      	bpl.n	800cbf2 <_printf_i+0x142>
 800cbe0:	6923      	ldr	r3, [r4, #16]
 800cbe2:	6861      	ldr	r1, [r4, #4]
 800cbe4:	4299      	cmp	r1, r3
 800cbe6:	bfde      	ittt	le
 800cbe8:	2330      	movle	r3, #48	@ 0x30
 800cbea:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cbee:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cbf2:	1b92      	subs	r2, r2, r6
 800cbf4:	6122      	str	r2, [r4, #16]
 800cbf6:	f8cd a000 	str.w	sl, [sp]
 800cbfa:	464b      	mov	r3, r9
 800cbfc:	aa03      	add	r2, sp, #12
 800cbfe:	4621      	mov	r1, r4
 800cc00:	4640      	mov	r0, r8
 800cc02:	f7ff fee7 	bl	800c9d4 <_printf_common>
 800cc06:	3001      	adds	r0, #1
 800cc08:	d14a      	bne.n	800cca0 <_printf_i+0x1f0>
 800cc0a:	f04f 30ff 	mov.w	r0, #4294967295
 800cc0e:	b004      	add	sp, #16
 800cc10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc14:	6823      	ldr	r3, [r4, #0]
 800cc16:	f043 0320 	orr.w	r3, r3, #32
 800cc1a:	6023      	str	r3, [r4, #0]
 800cc1c:	4832      	ldr	r0, [pc, #200]	@ (800cce8 <_printf_i+0x238>)
 800cc1e:	2778      	movs	r7, #120	@ 0x78
 800cc20:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cc24:	6823      	ldr	r3, [r4, #0]
 800cc26:	6831      	ldr	r1, [r6, #0]
 800cc28:	061f      	lsls	r7, r3, #24
 800cc2a:	f851 5b04 	ldr.w	r5, [r1], #4
 800cc2e:	d402      	bmi.n	800cc36 <_printf_i+0x186>
 800cc30:	065f      	lsls	r7, r3, #25
 800cc32:	bf48      	it	mi
 800cc34:	b2ad      	uxthmi	r5, r5
 800cc36:	6031      	str	r1, [r6, #0]
 800cc38:	07d9      	lsls	r1, r3, #31
 800cc3a:	bf44      	itt	mi
 800cc3c:	f043 0320 	orrmi.w	r3, r3, #32
 800cc40:	6023      	strmi	r3, [r4, #0]
 800cc42:	b11d      	cbz	r5, 800cc4c <_printf_i+0x19c>
 800cc44:	2310      	movs	r3, #16
 800cc46:	e7ad      	b.n	800cba4 <_printf_i+0xf4>
 800cc48:	4826      	ldr	r0, [pc, #152]	@ (800cce4 <_printf_i+0x234>)
 800cc4a:	e7e9      	b.n	800cc20 <_printf_i+0x170>
 800cc4c:	6823      	ldr	r3, [r4, #0]
 800cc4e:	f023 0320 	bic.w	r3, r3, #32
 800cc52:	6023      	str	r3, [r4, #0]
 800cc54:	e7f6      	b.n	800cc44 <_printf_i+0x194>
 800cc56:	4616      	mov	r6, r2
 800cc58:	e7bd      	b.n	800cbd6 <_printf_i+0x126>
 800cc5a:	6833      	ldr	r3, [r6, #0]
 800cc5c:	6825      	ldr	r5, [r4, #0]
 800cc5e:	6961      	ldr	r1, [r4, #20]
 800cc60:	1d18      	adds	r0, r3, #4
 800cc62:	6030      	str	r0, [r6, #0]
 800cc64:	062e      	lsls	r6, r5, #24
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	d501      	bpl.n	800cc6e <_printf_i+0x1be>
 800cc6a:	6019      	str	r1, [r3, #0]
 800cc6c:	e002      	b.n	800cc74 <_printf_i+0x1c4>
 800cc6e:	0668      	lsls	r0, r5, #25
 800cc70:	d5fb      	bpl.n	800cc6a <_printf_i+0x1ba>
 800cc72:	8019      	strh	r1, [r3, #0]
 800cc74:	2300      	movs	r3, #0
 800cc76:	6123      	str	r3, [r4, #16]
 800cc78:	4616      	mov	r6, r2
 800cc7a:	e7bc      	b.n	800cbf6 <_printf_i+0x146>
 800cc7c:	6833      	ldr	r3, [r6, #0]
 800cc7e:	1d1a      	adds	r2, r3, #4
 800cc80:	6032      	str	r2, [r6, #0]
 800cc82:	681e      	ldr	r6, [r3, #0]
 800cc84:	6862      	ldr	r2, [r4, #4]
 800cc86:	2100      	movs	r1, #0
 800cc88:	4630      	mov	r0, r6
 800cc8a:	f7f3 faa1 	bl	80001d0 <memchr>
 800cc8e:	b108      	cbz	r0, 800cc94 <_printf_i+0x1e4>
 800cc90:	1b80      	subs	r0, r0, r6
 800cc92:	6060      	str	r0, [r4, #4]
 800cc94:	6863      	ldr	r3, [r4, #4]
 800cc96:	6123      	str	r3, [r4, #16]
 800cc98:	2300      	movs	r3, #0
 800cc9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cc9e:	e7aa      	b.n	800cbf6 <_printf_i+0x146>
 800cca0:	6923      	ldr	r3, [r4, #16]
 800cca2:	4632      	mov	r2, r6
 800cca4:	4649      	mov	r1, r9
 800cca6:	4640      	mov	r0, r8
 800cca8:	47d0      	blx	sl
 800ccaa:	3001      	adds	r0, #1
 800ccac:	d0ad      	beq.n	800cc0a <_printf_i+0x15a>
 800ccae:	6823      	ldr	r3, [r4, #0]
 800ccb0:	079b      	lsls	r3, r3, #30
 800ccb2:	d413      	bmi.n	800ccdc <_printf_i+0x22c>
 800ccb4:	68e0      	ldr	r0, [r4, #12]
 800ccb6:	9b03      	ldr	r3, [sp, #12]
 800ccb8:	4298      	cmp	r0, r3
 800ccba:	bfb8      	it	lt
 800ccbc:	4618      	movlt	r0, r3
 800ccbe:	e7a6      	b.n	800cc0e <_printf_i+0x15e>
 800ccc0:	2301      	movs	r3, #1
 800ccc2:	4632      	mov	r2, r6
 800ccc4:	4649      	mov	r1, r9
 800ccc6:	4640      	mov	r0, r8
 800ccc8:	47d0      	blx	sl
 800ccca:	3001      	adds	r0, #1
 800cccc:	d09d      	beq.n	800cc0a <_printf_i+0x15a>
 800ccce:	3501      	adds	r5, #1
 800ccd0:	68e3      	ldr	r3, [r4, #12]
 800ccd2:	9903      	ldr	r1, [sp, #12]
 800ccd4:	1a5b      	subs	r3, r3, r1
 800ccd6:	42ab      	cmp	r3, r5
 800ccd8:	dcf2      	bgt.n	800ccc0 <_printf_i+0x210>
 800ccda:	e7eb      	b.n	800ccb4 <_printf_i+0x204>
 800ccdc:	2500      	movs	r5, #0
 800ccde:	f104 0619 	add.w	r6, r4, #25
 800cce2:	e7f5      	b.n	800ccd0 <_printf_i+0x220>
 800cce4:	0800ce51 	.word	0x0800ce51
 800cce8:	0800ce62 	.word	0x0800ce62

0800ccec <memmove>:
 800ccec:	4288      	cmp	r0, r1
 800ccee:	b510      	push	{r4, lr}
 800ccf0:	eb01 0402 	add.w	r4, r1, r2
 800ccf4:	d902      	bls.n	800ccfc <memmove+0x10>
 800ccf6:	4284      	cmp	r4, r0
 800ccf8:	4623      	mov	r3, r4
 800ccfa:	d807      	bhi.n	800cd0c <memmove+0x20>
 800ccfc:	1e43      	subs	r3, r0, #1
 800ccfe:	42a1      	cmp	r1, r4
 800cd00:	d008      	beq.n	800cd14 <memmove+0x28>
 800cd02:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cd06:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cd0a:	e7f8      	b.n	800ccfe <memmove+0x12>
 800cd0c:	4402      	add	r2, r0
 800cd0e:	4601      	mov	r1, r0
 800cd10:	428a      	cmp	r2, r1
 800cd12:	d100      	bne.n	800cd16 <memmove+0x2a>
 800cd14:	bd10      	pop	{r4, pc}
 800cd16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cd1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cd1e:	e7f7      	b.n	800cd10 <memmove+0x24>

0800cd20 <_sbrk_r>:
 800cd20:	b538      	push	{r3, r4, r5, lr}
 800cd22:	4d06      	ldr	r5, [pc, #24]	@ (800cd3c <_sbrk_r+0x1c>)
 800cd24:	2300      	movs	r3, #0
 800cd26:	4604      	mov	r4, r0
 800cd28:	4608      	mov	r0, r1
 800cd2a:	602b      	str	r3, [r5, #0]
 800cd2c:	f7f4 fa18 	bl	8001160 <_sbrk>
 800cd30:	1c43      	adds	r3, r0, #1
 800cd32:	d102      	bne.n	800cd3a <_sbrk_r+0x1a>
 800cd34:	682b      	ldr	r3, [r5, #0]
 800cd36:	b103      	cbz	r3, 800cd3a <_sbrk_r+0x1a>
 800cd38:	6023      	str	r3, [r4, #0]
 800cd3a:	bd38      	pop	{r3, r4, r5, pc}
 800cd3c:	20003610 	.word	0x20003610

0800cd40 <_realloc_r>:
 800cd40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd44:	4607      	mov	r7, r0
 800cd46:	4614      	mov	r4, r2
 800cd48:	460d      	mov	r5, r1
 800cd4a:	b921      	cbnz	r1, 800cd56 <_realloc_r+0x16>
 800cd4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd50:	4611      	mov	r1, r2
 800cd52:	f7ff bc5b 	b.w	800c60c <_malloc_r>
 800cd56:	b92a      	cbnz	r2, 800cd64 <_realloc_r+0x24>
 800cd58:	f7ff fbec 	bl	800c534 <_free_r>
 800cd5c:	4625      	mov	r5, r4
 800cd5e:	4628      	mov	r0, r5
 800cd60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd64:	f000 f81a 	bl	800cd9c <_malloc_usable_size_r>
 800cd68:	4284      	cmp	r4, r0
 800cd6a:	4606      	mov	r6, r0
 800cd6c:	d802      	bhi.n	800cd74 <_realloc_r+0x34>
 800cd6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cd72:	d8f4      	bhi.n	800cd5e <_realloc_r+0x1e>
 800cd74:	4621      	mov	r1, r4
 800cd76:	4638      	mov	r0, r7
 800cd78:	f7ff fc48 	bl	800c60c <_malloc_r>
 800cd7c:	4680      	mov	r8, r0
 800cd7e:	b908      	cbnz	r0, 800cd84 <_realloc_r+0x44>
 800cd80:	4645      	mov	r5, r8
 800cd82:	e7ec      	b.n	800cd5e <_realloc_r+0x1e>
 800cd84:	42b4      	cmp	r4, r6
 800cd86:	4622      	mov	r2, r4
 800cd88:	4629      	mov	r1, r5
 800cd8a:	bf28      	it	cs
 800cd8c:	4632      	movcs	r2, r6
 800cd8e:	f7ff fbc3 	bl	800c518 <memcpy>
 800cd92:	4629      	mov	r1, r5
 800cd94:	4638      	mov	r0, r7
 800cd96:	f7ff fbcd 	bl	800c534 <_free_r>
 800cd9a:	e7f1      	b.n	800cd80 <_realloc_r+0x40>

0800cd9c <_malloc_usable_size_r>:
 800cd9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cda0:	1f18      	subs	r0, r3, #4
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	bfbc      	itt	lt
 800cda6:	580b      	ldrlt	r3, [r1, r0]
 800cda8:	18c0      	addlt	r0, r0, r3
 800cdaa:	4770      	bx	lr

0800cdac <_init>:
 800cdac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdae:	bf00      	nop
 800cdb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdb2:	bc08      	pop	{r3}
 800cdb4:	469e      	mov	lr, r3
 800cdb6:	4770      	bx	lr

0800cdb8 <_fini>:
 800cdb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdba:	bf00      	nop
 800cdbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdbe:	bc08      	pop	{r3}
 800cdc0:	469e      	mov	lr, r3
 800cdc2:	4770      	bx	lr
