
start_usb_composite.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bbc8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800bd58  0800bd58  0000cd58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be08  0800be08  0000d378  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800be08  0800be08  0000ce08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be10  0800be10  0000d378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be10  0800be10  0000ce10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800be14  0800be14  0000ce14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000378  20000000  0800be18  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d378  2**0
                  CONTENTS
 10 .bss          000023cc  20000378  20000378  0000d378  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002744  20002744  0000d378  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d378  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fc59  00000000  00000000  0000d3a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005008  00000000  00000000  0002d001  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a08  00000000  00000000  00032010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000140c  00000000  00000000  00033a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026c45  00000000  00000000  00034e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000249fa  00000000  00000000  0005ba69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5a70  00000000  00000000  00080463  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00155ed3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007188  00000000  00000000  00155f18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  0015d0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000378 	.word	0x20000378
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bd40 	.word	0x0800bd40

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000037c 	.word	0x2000037c
 80001cc:	0800bd40 	.word	0x0800bd40

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80005a0:	4b17      	ldr	r3, [pc, #92]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005a2:	4a18      	ldr	r2, [pc, #96]	@ (8000604 <MX_CAN1_Init+0x68>)
 80005a4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80005a6:	4b16      	ldr	r3, [pc, #88]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005a8:	2206      	movs	r2, #6
 80005aa:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80005ac:	4b14      	ldr	r3, [pc, #80]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005b2:	4b13      	ldr	r3, [pc, #76]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80005b8:	4b11      	ldr	r3, [pc, #68]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005ba:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 80005be:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80005c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005c2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80005c6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80005c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80005ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80005d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80005da:	4b09      	ldr	r3, [pc, #36]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005dc:	2200      	movs	r2, #0
 80005de:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005e0:	4b07      	ldr	r3, [pc, #28]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80005e6:	4b06      	ldr	r3, [pc, #24]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005ec:	4804      	ldr	r0, [pc, #16]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005ee:	f000 fe7f 	bl	80012f0 <HAL_CAN_Init>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80005f8:	f000 fa2e 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000394 	.word	0x20000394
 8000604:	40006400 	.word	0x40006400

08000608 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b08a      	sub	sp, #40	@ 0x28
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000610:	f107 0314 	add.w	r3, r7, #20
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a21      	ldr	r2, [pc, #132]	@ (80006ac <HAL_CAN_MspInit+0xa4>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d13b      	bne.n	80006a2 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800062a:	2300      	movs	r3, #0
 800062c:	613b      	str	r3, [r7, #16]
 800062e:	4b20      	ldr	r3, [pc, #128]	@ (80006b0 <HAL_CAN_MspInit+0xa8>)
 8000630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000632:	4a1f      	ldr	r2, [pc, #124]	@ (80006b0 <HAL_CAN_MspInit+0xa8>)
 8000634:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000638:	6413      	str	r3, [r2, #64]	@ 0x40
 800063a:	4b1d      	ldr	r3, [pc, #116]	@ (80006b0 <HAL_CAN_MspInit+0xa8>)
 800063c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800063e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000642:	613b      	str	r3, [r7, #16]
 8000644:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	60fb      	str	r3, [r7, #12]
 800064a:	4b19      	ldr	r3, [pc, #100]	@ (80006b0 <HAL_CAN_MspInit+0xa8>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064e:	4a18      	ldr	r2, [pc, #96]	@ (80006b0 <HAL_CAN_MspInit+0xa8>)
 8000650:	f043 0308 	orr.w	r3, r3, #8
 8000654:	6313      	str	r3, [r2, #48]	@ 0x30
 8000656:	4b16      	ldr	r3, [pc, #88]	@ (80006b0 <HAL_CAN_MspInit+0xa8>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	f003 0308 	and.w	r3, r3, #8
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000662:	2303      	movs	r3, #3
 8000664:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000666:	2302      	movs	r3, #2
 8000668:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800066e:	2303      	movs	r3, #3
 8000670:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000672:	2309      	movs	r3, #9
 8000674:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000676:	f107 0314 	add.w	r3, r7, #20
 800067a:	4619      	mov	r1, r3
 800067c:	480d      	ldr	r0, [pc, #52]	@ (80006b4 <HAL_CAN_MspInit+0xac>)
 800067e:	f001 fe89 	bl	8002394 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000682:	2200      	movs	r2, #0
 8000684:	2100      	movs	r1, #0
 8000686:	2014      	movs	r0, #20
 8000688:	f001 fa65 	bl	8001b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800068c:	2014      	movs	r0, #20
 800068e:	f001 fa7e 	bl	8001b8e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000692:	2200      	movs	r2, #0
 8000694:	2100      	movs	r1, #0
 8000696:	2015      	movs	r0, #21
 8000698:	f001 fa5d 	bl	8001b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800069c:	2015      	movs	r0, #21
 800069e:	f001 fa76 	bl	8001b8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80006a2:	bf00      	nop
 80006a4:	3728      	adds	r7, #40	@ 0x28
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40006400 	.word	0x40006400
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40020c00 	.word	0x40020c00

080006b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	607b      	str	r3, [r7, #4]
 80006c2:	4b10      	ldr	r3, [pc, #64]	@ (8000704 <MX_DMA_Init+0x4c>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c6:	4a0f      	ldr	r2, [pc, #60]	@ (8000704 <MX_DMA_Init+0x4c>)
 80006c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80006cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000704 <MX_DMA_Init+0x4c>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80006da:	2200      	movs	r2, #0
 80006dc:	2100      	movs	r1, #0
 80006de:	200b      	movs	r0, #11
 80006e0:	f001 fa39 	bl	8001b56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80006e4:	200b      	movs	r0, #11
 80006e6:	f001 fa52 	bl	8001b8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2100      	movs	r1, #0
 80006ee:	202f      	movs	r0, #47	@ 0x2f
 80006f0:	f001 fa31 	bl	8001b56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80006f4:	202f      	movs	r0, #47	@ 0x2f
 80006f6:	f001 fa4a 	bl	8001b8e <HAL_NVIC_EnableIRQ>

}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40023800 	.word	0x40023800

08000708 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b08a      	sub	sp, #40	@ 0x28
 800070c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070e:	f107 0314 	add.w	r3, r7, #20
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]
 800071c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	613b      	str	r3, [r7, #16]
 8000722:	4b2d      	ldr	r3, [pc, #180]	@ (80007d8 <MX_GPIO_Init+0xd0>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	4a2c      	ldr	r2, [pc, #176]	@ (80007d8 <MX_GPIO_Init+0xd0>)
 8000728:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800072c:	6313      	str	r3, [r2, #48]	@ 0x30
 800072e:	4b2a      	ldr	r3, [pc, #168]	@ (80007d8 <MX_GPIO_Init+0xd0>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000736:	613b      	str	r3, [r7, #16]
 8000738:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	60fb      	str	r3, [r7, #12]
 800073e:	4b26      	ldr	r3, [pc, #152]	@ (80007d8 <MX_GPIO_Init+0xd0>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	4a25      	ldr	r2, [pc, #148]	@ (80007d8 <MX_GPIO_Init+0xd0>)
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	6313      	str	r3, [r2, #48]	@ 0x30
 800074a:	4b23      	ldr	r3, [pc, #140]	@ (80007d8 <MX_GPIO_Init+0xd0>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	60bb      	str	r3, [r7, #8]
 800075a:	4b1f      	ldr	r3, [pc, #124]	@ (80007d8 <MX_GPIO_Init+0xd0>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	4a1e      	ldr	r2, [pc, #120]	@ (80007d8 <MX_GPIO_Init+0xd0>)
 8000760:	f043 0304 	orr.w	r3, r3, #4
 8000764:	6313      	str	r3, [r2, #48]	@ 0x30
 8000766:	4b1c      	ldr	r3, [pc, #112]	@ (80007d8 <MX_GPIO_Init+0xd0>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	f003 0304 	and.w	r3, r3, #4
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	4b18      	ldr	r3, [pc, #96]	@ (80007d8 <MX_GPIO_Init+0xd0>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	4a17      	ldr	r2, [pc, #92]	@ (80007d8 <MX_GPIO_Init+0xd0>)
 800077c:	f043 0308 	orr.w	r3, r3, #8
 8000780:	6313      	str	r3, [r2, #48]	@ 0x30
 8000782:	4b15      	ldr	r3, [pc, #84]	@ (80007d8 <MX_GPIO_Init+0xd0>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	f003 0308 	and.w	r3, r3, #8
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	603b      	str	r3, [r7, #0]
 8000792:	4b11      	ldr	r3, [pc, #68]	@ (80007d8 <MX_GPIO_Init+0xd0>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	4a10      	ldr	r2, [pc, #64]	@ (80007d8 <MX_GPIO_Init+0xd0>)
 8000798:	f043 0302 	orr.w	r3, r3, #2
 800079c:	6313      	str	r3, [r2, #48]	@ 0x30
 800079e:	4b0e      	ldr	r3, [pc, #56]	@ (80007d8 <MX_GPIO_Init+0xd0>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	f003 0302 	and.w	r3, r3, #2
 80007a6:	603b      	str	r3, [r7, #0]
 80007a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	21c0      	movs	r1, #192	@ 0xc0
 80007ae:	480b      	ldr	r0, [pc, #44]	@ (80007dc <MX_GPIO_Init+0xd4>)
 80007b0:	f002 f888 	bl	80028c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007b4:	23c0      	movs	r3, #192	@ 0xc0
 80007b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b8:	2301      	movs	r3, #1
 80007ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c0:	2300      	movs	r3, #0
 80007c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	4619      	mov	r1, r3
 80007ca:	4804      	ldr	r0, [pc, #16]	@ (80007dc <MX_GPIO_Init+0xd4>)
 80007cc:	f001 fde2 	bl	8002394 <HAL_GPIO_Init>

}
 80007d0:	bf00      	nop
 80007d2:	3728      	adds	r7, #40	@ 0x28
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40023800 	.word	0x40023800
 80007dc:	40020000 	.word	0x40020000

080007e0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007e4:	4b12      	ldr	r3, [pc, #72]	@ (8000830 <MX_I2C1_Init+0x50>)
 80007e6:	4a13      	ldr	r2, [pc, #76]	@ (8000834 <MX_I2C1_Init+0x54>)
 80007e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80007ea:	4b11      	ldr	r3, [pc, #68]	@ (8000830 <MX_I2C1_Init+0x50>)
 80007ec:	4a12      	ldr	r2, [pc, #72]	@ (8000838 <MX_I2C1_Init+0x58>)
 80007ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000830 <MX_I2C1_Init+0x50>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000830 <MX_I2C1_Init+0x50>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000830 <MX_I2C1_Init+0x50>)
 80007fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000802:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000804:	4b0a      	ldr	r3, [pc, #40]	@ (8000830 <MX_I2C1_Init+0x50>)
 8000806:	2200      	movs	r2, #0
 8000808:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800080a:	4b09      	ldr	r3, [pc, #36]	@ (8000830 <MX_I2C1_Init+0x50>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000810:	4b07      	ldr	r3, [pc, #28]	@ (8000830 <MX_I2C1_Init+0x50>)
 8000812:	2200      	movs	r2, #0
 8000814:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000816:	4b06      	ldr	r3, [pc, #24]	@ (8000830 <MX_I2C1_Init+0x50>)
 8000818:	2200      	movs	r2, #0
 800081a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800081c:	4804      	ldr	r0, [pc, #16]	@ (8000830 <MX_I2C1_Init+0x50>)
 800081e:	f002 f885 	bl	800292c <HAL_I2C_Init>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000828:	f000 f916 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}
 8000830:	200003bc 	.word	0x200003bc
 8000834:	40005400 	.word	0x40005400
 8000838:	00061a80 	.word	0x00061a80

0800083c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08a      	sub	sp, #40	@ 0x28
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a19      	ldr	r2, [pc, #100]	@ (80008c0 <HAL_I2C_MspInit+0x84>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d12b      	bne.n	80008b6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	613b      	str	r3, [r7, #16]
 8000862:	4b18      	ldr	r3, [pc, #96]	@ (80008c4 <HAL_I2C_MspInit+0x88>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	4a17      	ldr	r2, [pc, #92]	@ (80008c4 <HAL_I2C_MspInit+0x88>)
 8000868:	f043 0302 	orr.w	r3, r3, #2
 800086c:	6313      	str	r3, [r2, #48]	@ 0x30
 800086e:	4b15      	ldr	r3, [pc, #84]	@ (80008c4 <HAL_I2C_MspInit+0x88>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	f003 0302 	and.w	r3, r3, #2
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800087a:	23c0      	movs	r3, #192	@ 0xc0
 800087c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800087e:	2312      	movs	r3, #18
 8000880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000886:	2303      	movs	r3, #3
 8000888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800088a:	2304      	movs	r3, #4
 800088c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800088e:	f107 0314 	add.w	r3, r7, #20
 8000892:	4619      	mov	r1, r3
 8000894:	480c      	ldr	r0, [pc, #48]	@ (80008c8 <HAL_I2C_MspInit+0x8c>)
 8000896:	f001 fd7d 	bl	8002394 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	4b09      	ldr	r3, [pc, #36]	@ (80008c4 <HAL_I2C_MspInit+0x88>)
 80008a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a2:	4a08      	ldr	r2, [pc, #32]	@ (80008c4 <HAL_I2C_MspInit+0x88>)
 80008a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80008a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80008aa:	4b06      	ldr	r3, [pc, #24]	@ (80008c4 <HAL_I2C_MspInit+0x88>)
 80008ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80008b6:	bf00      	nop
 80008b8:	3728      	adds	r7, #40	@ 0x28
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40005400 	.word	0x40005400
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40020400 	.word	0x40020400

080008cc <Process_HID_Frames>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Process_HID_Frames(void) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b090      	sub	sp, #64	@ 0x40
 80008d0:	af00      	add	r7, sp, #0
    uint8_t frame[HID_FRAME_SIZE];

    while (HID_Frame_Read(frame)) {
 80008d2:	e028      	b.n	8000926 <Process_HID_Frames+0x5a>
        // Xử lý từng frame ở đây
        // Ví dụ:
        if (frame[0] == 2) {
 80008d4:	783b      	ldrb	r3, [r7, #0]
 80008d6:	2b02      	cmp	r3, #2
 80008d8:	d111      	bne.n	80008fe <Process_HID_Frames+0x32>
        	test_process1[6] +=2;
 80008da:	4b19      	ldr	r3, [pc, #100]	@ (8000940 <Process_HID_Frames+0x74>)
 80008dc:	799b      	ldrb	r3, [r3, #6]
 80008de:	3302      	adds	r3, #2
 80008e0:	b2da      	uxtb	r2, r3
 80008e2:	4b17      	ldr	r3, [pc, #92]	@ (8000940 <Process_HID_Frames+0x74>)
 80008e4:	719a      	strb	r2, [r3, #6]
        	test_process1[7] +=1;
 80008e6:	4b16      	ldr	r3, [pc, #88]	@ (8000940 <Process_HID_Frames+0x74>)
 80008e8:	79db      	ldrb	r3, [r3, #7]
 80008ea:	3301      	adds	r3, #1
 80008ec:	b2da      	uxtb	r2, r3
 80008ee:	4b14      	ldr	r3, [pc, #80]	@ (8000940 <Process_HID_Frames+0x74>)
 80008f0:	71da      	strb	r2, [r3, #7]
        	USBD_CUSTOM_HID_SendReport(&hUsbDevice, test_process1, sizeof(test_process1));
 80008f2:	2240      	movs	r2, #64	@ 0x40
 80008f4:	4912      	ldr	r1, [pc, #72]	@ (8000940 <Process_HID_Frames+0x74>)
 80008f6:	4813      	ldr	r0, [pc, #76]	@ (8000944 <Process_HID_Frames+0x78>)
 80008f8:	f008 ffdc 	bl	80098b4 <USBD_CUSTOM_HID_SendReport>
 80008fc:	e013      	b.n	8000926 <Process_HID_Frames+0x5a>
        }
        else if(frame[5] == 85){
 80008fe:	797b      	ldrb	r3, [r7, #5]
 8000900:	2b55      	cmp	r3, #85	@ 0x55
 8000902:	d110      	bne.n	8000926 <Process_HID_Frames+0x5a>
        	test_process2[6] +=1;
 8000904:	4b10      	ldr	r3, [pc, #64]	@ (8000948 <Process_HID_Frames+0x7c>)
 8000906:	799b      	ldrb	r3, [r3, #6]
 8000908:	3301      	adds	r3, #1
 800090a:	b2da      	uxtb	r2, r3
 800090c:	4b0e      	ldr	r3, [pc, #56]	@ (8000948 <Process_HID_Frames+0x7c>)
 800090e:	719a      	strb	r2, [r3, #6]
        	test_process2[7] +=2;
 8000910:	4b0d      	ldr	r3, [pc, #52]	@ (8000948 <Process_HID_Frames+0x7c>)
 8000912:	79db      	ldrb	r3, [r3, #7]
 8000914:	3302      	adds	r3, #2
 8000916:	b2da      	uxtb	r2, r3
 8000918:	4b0b      	ldr	r3, [pc, #44]	@ (8000948 <Process_HID_Frames+0x7c>)
 800091a:	71da      	strb	r2, [r3, #7]
        	USBD_CUSTOM_HID_SendReport(&hUsbDevice, test_process2, sizeof(test_process2));
 800091c:	2240      	movs	r2, #64	@ 0x40
 800091e:	490a      	ldr	r1, [pc, #40]	@ (8000948 <Process_HID_Frames+0x7c>)
 8000920:	4808      	ldr	r0, [pc, #32]	@ (8000944 <Process_HID_Frames+0x78>)
 8000922:	f008 ffc7 	bl	80098b4 <USBD_CUSTOM_HID_SendReport>
    while (HID_Frame_Read(frame)) {
 8000926:	463b      	mov	r3, r7
 8000928:	4618      	mov	r0, r3
 800092a:	f007 fdd3 	bl	80084d4 <HID_Frame_Read>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d1cf      	bne.n	80008d4 <Process_HID_Frames+0x8>
        }

    }
}
 8000934:	bf00      	nop
 8000936:	bf00      	nop
 8000938:	3740      	adds	r7, #64	@ 0x40
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000000 	.word	0x20000000
 8000944:	20000a94 	.word	0x20000a94
 8000948:	20000040 	.word	0x20000040

0800094c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000950:	f000 fc38 	bl	80011c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000954:	f000 f816 	bl	8000984 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000958:	f7ff fed6 	bl	8000708 <MX_GPIO_Init>
  MX_DMA_Init();
 800095c:	f7ff feac 	bl	80006b8 <MX_DMA_Init>
  MX_CAN1_Init();
 8000960:	f7ff fe1c 	bl	800059c <MX_CAN1_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000964:	f000 fb82 	bl	800106c <MX_USB_OTG_FS_PCD_Init>
  MX_UART5_Init();
 8000968:	f000 fa4c 	bl	8000e04 <MX_UART5_Init>
  MX_I2C1_Init();
 800096c:	f7ff ff38 	bl	80007e0 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000970:	f000 f968 	bl	8000c44 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000974:	f000 f9b6 	bl	8000ce4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 8000978:	f007 f858 	bl	8007a2c <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Process_HID_Frames();
 800097c:	f7ff ffa6 	bl	80008cc <Process_HID_Frames>
 8000980:	e7fc      	b.n	800097c <main+0x30>
	...

08000984 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b094      	sub	sp, #80	@ 0x50
 8000988:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800098a:	f107 0320 	add.w	r3, r7, #32
 800098e:	2230      	movs	r2, #48	@ 0x30
 8000990:	2100      	movs	r1, #0
 8000992:	4618      	mov	r0, r3
 8000994:	f00a fd56 	bl	800b444 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000998:	f107 030c 	add.w	r3, r7, #12
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a8:	2300      	movs	r3, #0
 80009aa:	60bb      	str	r3, [r7, #8]
 80009ac:	4b28      	ldr	r3, [pc, #160]	@ (8000a50 <SystemClock_Config+0xcc>)
 80009ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b0:	4a27      	ldr	r2, [pc, #156]	@ (8000a50 <SystemClock_Config+0xcc>)
 80009b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80009b8:	4b25      	ldr	r3, [pc, #148]	@ (8000a50 <SystemClock_Config+0xcc>)
 80009ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009c0:	60bb      	str	r3, [r7, #8]
 80009c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009c4:	2300      	movs	r3, #0
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	4b22      	ldr	r3, [pc, #136]	@ (8000a54 <SystemClock_Config+0xd0>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a21      	ldr	r2, [pc, #132]	@ (8000a54 <SystemClock_Config+0xd0>)
 80009ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009d2:	6013      	str	r3, [r2, #0]
 80009d4:	4b1f      	ldr	r3, [pc, #124]	@ (8000a54 <SystemClock_Config+0xd0>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009dc:	607b      	str	r3, [r7, #4]
 80009de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009e0:	2301      	movs	r3, #1
 80009e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009e8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ea:	2302      	movs	r3, #2
 80009ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009ee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80009f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009f4:	2304      	movs	r3, #4
 80009f6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80009f8:	23a8      	movs	r3, #168	@ 0xa8
 80009fa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009fc:	2302      	movs	r3, #2
 80009fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a00:	2307      	movs	r3, #7
 8000a02:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a04:	f107 0320 	add.w	r3, r7, #32
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f003 fb25 	bl	8004058 <HAL_RCC_OscConfig>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a14:	f000 f820 	bl	8000a58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a18:	230f      	movs	r3, #15
 8000a1a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a20:	2300      	movs	r3, #0
 8000a22:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a24:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a2e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a30:	f107 030c 	add.w	r3, r7, #12
 8000a34:	2105      	movs	r1, #5
 8000a36:	4618      	mov	r0, r3
 8000a38:	f003 fd86 	bl	8004548 <HAL_RCC_ClockConfig>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a42:	f000 f809 	bl	8000a58 <Error_Handler>
  }
}
 8000a46:	bf00      	nop
 8000a48:	3750      	adds	r7, #80	@ 0x50
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40023800 	.word	0x40023800
 8000a54:	40007000 	.word	0x40007000

08000a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a5c:	b672      	cpsid	i
}
 8000a5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a60:	bf00      	nop
 8000a62:	e7fd      	b.n	8000a60 <Error_Handler+0x8>

08000a64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	607b      	str	r3, [r7, #4]
 8000a6e:	4b10      	ldr	r3, [pc, #64]	@ (8000ab0 <HAL_MspInit+0x4c>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a72:	4a0f      	ldr	r2, [pc, #60]	@ (8000ab0 <HAL_MspInit+0x4c>)
 8000a74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a78:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab0 <HAL_MspInit+0x4c>)
 8000a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	603b      	str	r3, [r7, #0]
 8000a8a:	4b09      	ldr	r3, [pc, #36]	@ (8000ab0 <HAL_MspInit+0x4c>)
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8e:	4a08      	ldr	r2, [pc, #32]	@ (8000ab0 <HAL_MspInit+0x4c>)
 8000a90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a94:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a96:	4b06      	ldr	r3, [pc, #24]	@ (8000ab0 <HAL_MspInit+0x4c>)
 8000a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a9e:	603b      	str	r3, [r7, #0]
 8000aa0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	40023800 	.word	0x40023800

08000ab4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <NMI_Handler+0x4>

08000abc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <HardFault_Handler+0x4>

08000ac4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <MemManage_Handler+0x4>

08000acc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <BusFault_Handler+0x4>

08000ad4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <UsageFault_Handler+0x4>

08000adc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr

08000aea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr

08000af8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b0a:	f000 fbad 	bl	8001268 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
	...

08000b14 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8000b18:	4802      	ldr	r0, [pc, #8]	@ (8000b24 <DMA1_Stream0_IRQHandler+0x10>)
 8000b1a:	f001 f9ff 	bl	8001f1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	2000054c 	.word	0x2000054c

08000b28 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000b2c:	4802      	ldr	r0, [pc, #8]	@ (8000b38 <CAN1_RX0_IRQHandler+0x10>)
 8000b2e:	f000 fcda 	bl	80014e6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000394 	.word	0x20000394

08000b3c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000b40:	4802      	ldr	r0, [pc, #8]	@ (8000b4c <CAN1_RX1_IRQHandler+0x10>)
 8000b42:	f000 fcd0 	bl	80014e6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000394 	.word	0x20000394

08000b50 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b54:	4802      	ldr	r0, [pc, #8]	@ (8000b60 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b56:	f003 ffd7 	bl	8004b08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000414 	.word	0x20000414

08000b64 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b68:	4802      	ldr	r0, [pc, #8]	@ (8000b74 <TIM2_IRQHandler+0x10>)
 8000b6a:	f003 ffcd 	bl	8004b08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	2000045c 	.word	0x2000045c

08000b78 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8000b7c:	4802      	ldr	r0, [pc, #8]	@ (8000b88 <DMA1_Stream7_IRQHandler+0x10>)
 8000b7e:	f001 f9cd 	bl	8001f1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	200004ec 	.word	0x200004ec

08000b8c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000b90:	4802      	ldr	r0, [pc, #8]	@ (8000b9c <UART5_IRQHandler+0x10>)
 8000b92:	f004 fc9b 	bl	80054cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	200004a4 	.word	0x200004a4

08000ba0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000ba4:	4802      	ldr	r0, [pc, #8]	@ (8000bb0 <OTG_FS_IRQHandler+0x10>)
 8000ba6:	f002 f949 	bl	8002e3c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	200005ac 	.word	0x200005ac

08000bb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bbc:	4a14      	ldr	r2, [pc, #80]	@ (8000c10 <_sbrk+0x5c>)
 8000bbe:	4b15      	ldr	r3, [pc, #84]	@ (8000c14 <_sbrk+0x60>)
 8000bc0:	1ad3      	subs	r3, r2, r3
 8000bc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bc8:	4b13      	ldr	r3, [pc, #76]	@ (8000c18 <_sbrk+0x64>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d102      	bne.n	8000bd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bd0:	4b11      	ldr	r3, [pc, #68]	@ (8000c18 <_sbrk+0x64>)
 8000bd2:	4a12      	ldr	r2, [pc, #72]	@ (8000c1c <_sbrk+0x68>)
 8000bd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bd6:	4b10      	ldr	r3, [pc, #64]	@ (8000c18 <_sbrk+0x64>)
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4413      	add	r3, r2
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d207      	bcs.n	8000bf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000be4:	f00a fc36 	bl	800b454 <__errno>
 8000be8:	4603      	mov	r3, r0
 8000bea:	220c      	movs	r2, #12
 8000bec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bee:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf2:	e009      	b.n	8000c08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bf4:	4b08      	ldr	r3, [pc, #32]	@ (8000c18 <_sbrk+0x64>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bfa:	4b07      	ldr	r3, [pc, #28]	@ (8000c18 <_sbrk+0x64>)
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4413      	add	r3, r2
 8000c02:	4a05      	ldr	r2, [pc, #20]	@ (8000c18 <_sbrk+0x64>)
 8000c04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c06:	68fb      	ldr	r3, [r7, #12]
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3718      	adds	r7, #24
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20020000 	.word	0x20020000
 8000c14:	00000400 	.word	0x00000400
 8000c18:	20000410 	.word	0x20000410
 8000c1c:	20002748 	.word	0x20002748

08000c20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c24:	4b06      	ldr	r3, [pc, #24]	@ (8000c40 <SystemInit+0x20>)
 8000c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c2a:	4a05      	ldr	r2, [pc, #20]	@ (8000c40 <SystemInit+0x20>)
 8000c2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c4a:	f107 0308 	add.w	r3, r7, #8
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
 8000c54:	609a      	str	r2, [r3, #8]
 8000c56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c58:	463b      	mov	r3, r7
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c60:	4b1e      	ldr	r3, [pc, #120]	@ (8000cdc <MX_TIM1_Init+0x98>)
 8000c62:	4a1f      	ldr	r2, [pc, #124]	@ (8000ce0 <MX_TIM1_Init+0x9c>)
 8000c64:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 8000c66:	4b1d      	ldr	r3, [pc, #116]	@ (8000cdc <MX_TIM1_Init+0x98>)
 8000c68:	22a7      	movs	r2, #167	@ 0xa7
 8000c6a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000cdc <MX_TIM1_Init+0x98>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8000c72:	4b1a      	ldr	r3, [pc, #104]	@ (8000cdc <MX_TIM1_Init+0x98>)
 8000c74:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000c78:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c7a:	4b18      	ldr	r3, [pc, #96]	@ (8000cdc <MX_TIM1_Init+0x98>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c80:	4b16      	ldr	r3, [pc, #88]	@ (8000cdc <MX_TIM1_Init+0x98>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c86:	4b15      	ldr	r3, [pc, #84]	@ (8000cdc <MX_TIM1_Init+0x98>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c8c:	4813      	ldr	r0, [pc, #76]	@ (8000cdc <MX_TIM1_Init+0x98>)
 8000c8e:	f003 fe7b 	bl	8004988 <HAL_TIM_Base_Init>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000c98:	f7ff fede 	bl	8000a58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ca0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ca2:	f107 0308 	add.w	r3, r7, #8
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	480c      	ldr	r0, [pc, #48]	@ (8000cdc <MX_TIM1_Init+0x98>)
 8000caa:	f004 f81d 	bl	8004ce8 <HAL_TIM_ConfigClockSource>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000cb4:	f7ff fed0 	bl	8000a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cc0:	463b      	mov	r3, r7
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4805      	ldr	r0, [pc, #20]	@ (8000cdc <MX_TIM1_Init+0x98>)
 8000cc6:	f004 fa3f 	bl	8005148 <HAL_TIMEx_MasterConfigSynchronization>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000cd0:	f7ff fec2 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000cd4:	bf00      	nop
 8000cd6:	3718      	adds	r7, #24
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20000414 	.word	0x20000414
 8000ce0:	40010000 	.word	0x40010000

08000ce4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cea:	f107 0308 	add.w	r3, r7, #8
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf8:	463b      	mov	r3, r7
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d00:	4b1d      	ldr	r3, [pc, #116]	@ (8000d78 <MX_TIM2_Init+0x94>)
 8000d02:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d06:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8000d08:	4b1b      	ldr	r3, [pc, #108]	@ (8000d78 <MX_TIM2_Init+0x94>)
 8000d0a:	2253      	movs	r2, #83	@ 0x53
 8000d0c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000d78 <MX_TIM2_Init+0x94>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2999;
 8000d14:	4b18      	ldr	r3, [pc, #96]	@ (8000d78 <MX_TIM2_Init+0x94>)
 8000d16:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8000d1a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d1c:	4b16      	ldr	r3, [pc, #88]	@ (8000d78 <MX_TIM2_Init+0x94>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d22:	4b15      	ldr	r3, [pc, #84]	@ (8000d78 <MX_TIM2_Init+0x94>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d28:	4813      	ldr	r0, [pc, #76]	@ (8000d78 <MX_TIM2_Init+0x94>)
 8000d2a:	f003 fe2d 	bl	8004988 <HAL_TIM_Base_Init>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d34:	f7ff fe90 	bl	8000a58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d3e:	f107 0308 	add.w	r3, r7, #8
 8000d42:	4619      	mov	r1, r3
 8000d44:	480c      	ldr	r0, [pc, #48]	@ (8000d78 <MX_TIM2_Init+0x94>)
 8000d46:	f003 ffcf 	bl	8004ce8 <HAL_TIM_ConfigClockSource>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d50:	f7ff fe82 	bl	8000a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d54:	2300      	movs	r3, #0
 8000d56:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d5c:	463b      	mov	r3, r7
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4805      	ldr	r0, [pc, #20]	@ (8000d78 <MX_TIM2_Init+0x94>)
 8000d62:	f004 f9f1 	bl	8005148 <HAL_TIMEx_MasterConfigSynchronization>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d6c:	f7ff fe74 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d70:	bf00      	nop
 8000d72:	3718      	adds	r7, #24
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	2000045c 	.word	0x2000045c

08000d7c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a1c      	ldr	r2, [pc, #112]	@ (8000dfc <HAL_TIM_Base_MspInit+0x80>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d116      	bne.n	8000dbc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	4b1b      	ldr	r3, [pc, #108]	@ (8000e00 <HAL_TIM_Base_MspInit+0x84>)
 8000d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d96:	4a1a      	ldr	r2, [pc, #104]	@ (8000e00 <HAL_TIM_Base_MspInit+0x84>)
 8000d98:	f043 0301 	orr.w	r3, r3, #1
 8000d9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d9e:	4b18      	ldr	r3, [pc, #96]	@ (8000e00 <HAL_TIM_Base_MspInit+0x84>)
 8000da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2100      	movs	r1, #0
 8000dae:	2019      	movs	r0, #25
 8000db0:	f000 fed1 	bl	8001b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000db4:	2019      	movs	r0, #25
 8000db6:	f000 feea 	bl	8001b8e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000dba:	e01a      	b.n	8000df2 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM2)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000dc4:	d115      	bne.n	8000df2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60bb      	str	r3, [r7, #8]
 8000dca:	4b0d      	ldr	r3, [pc, #52]	@ (8000e00 <HAL_TIM_Base_MspInit+0x84>)
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dce:	4a0c      	ldr	r2, [pc, #48]	@ (8000e00 <HAL_TIM_Base_MspInit+0x84>)
 8000dd0:	f043 0301 	orr.w	r3, r3, #1
 8000dd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8000e00 <HAL_TIM_Base_MspInit+0x84>)
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	60bb      	str	r3, [r7, #8]
 8000de0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2100      	movs	r1, #0
 8000de6:	201c      	movs	r0, #28
 8000de8:	f000 feb5 	bl	8001b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000dec:	201c      	movs	r0, #28
 8000dee:	f000 fece 	bl	8001b8e <HAL_NVIC_EnableIRQ>
}
 8000df2:	bf00      	nop
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40010000 	.word	0x40010000
 8000e00:	40023800 	.word	0x40023800

08000e04 <MX_UART5_Init>:
DMA_HandleTypeDef hdma_uart5_tx;
DMA_HandleTypeDef hdma_uart5_rx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000e08:	4b11      	ldr	r3, [pc, #68]	@ (8000e50 <MX_UART5_Init+0x4c>)
 8000e0a:	4a12      	ldr	r2, [pc, #72]	@ (8000e54 <MX_UART5_Init+0x50>)
 8000e0c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000e0e:	4b10      	ldr	r3, [pc, #64]	@ (8000e50 <MX_UART5_Init+0x4c>)
 8000e10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e14:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000e16:	4b0e      	ldr	r3, [pc, #56]	@ (8000e50 <MX_UART5_Init+0x4c>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e50 <MX_UART5_Init+0x4c>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000e22:	4b0b      	ldr	r3, [pc, #44]	@ (8000e50 <MX_UART5_Init+0x4c>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000e28:	4b09      	ldr	r3, [pc, #36]	@ (8000e50 <MX_UART5_Init+0x4c>)
 8000e2a:	220c      	movs	r2, #12
 8000e2c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e2e:	4b08      	ldr	r3, [pc, #32]	@ (8000e50 <MX_UART5_Init+0x4c>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e34:	4b06      	ldr	r3, [pc, #24]	@ (8000e50 <MX_UART5_Init+0x4c>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000e3a:	4805      	ldr	r0, [pc, #20]	@ (8000e50 <MX_UART5_Init+0x4c>)
 8000e3c:	f004 fa14 	bl	8005268 <HAL_UART_Init>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000e46:	f7ff fe07 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */
 // HAL_UART_Receive_IT(&huart5, &uart5_rx_byte, UART5_RX_BUF_LEN);
  /* USER CODE END UART5_Init 2 */

}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	200004a4 	.word	0x200004a4
 8000e54:	40005000 	.word	0x40005000

08000e58 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08a      	sub	sp, #40	@ 0x28
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a5c      	ldr	r2, [pc, #368]	@ (8000fe8 <HAL_UART_MspInit+0x190>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	f040 80b1 	bne.w	8000fde <HAL_UART_MspInit+0x186>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	613b      	str	r3, [r7, #16]
 8000e80:	4b5a      	ldr	r3, [pc, #360]	@ (8000fec <HAL_UART_MspInit+0x194>)
 8000e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e84:	4a59      	ldr	r2, [pc, #356]	@ (8000fec <HAL_UART_MspInit+0x194>)
 8000e86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000e8a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e8c:	4b57      	ldr	r3, [pc, #348]	@ (8000fec <HAL_UART_MspInit+0x194>)
 8000e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e94:	613b      	str	r3, [r7, #16]
 8000e96:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	4b53      	ldr	r3, [pc, #332]	@ (8000fec <HAL_UART_MspInit+0x194>)
 8000e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea0:	4a52      	ldr	r2, [pc, #328]	@ (8000fec <HAL_UART_MspInit+0x194>)
 8000ea2:	f043 0304 	orr.w	r3, r3, #4
 8000ea6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ea8:	4b50      	ldr	r3, [pc, #320]	@ (8000fec <HAL_UART_MspInit+0x194>)
 8000eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eac:	f003 0304 	and.w	r3, r3, #4
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	60bb      	str	r3, [r7, #8]
 8000eb8:	4b4c      	ldr	r3, [pc, #304]	@ (8000fec <HAL_UART_MspInit+0x194>)
 8000eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ebc:	4a4b      	ldr	r2, [pc, #300]	@ (8000fec <HAL_UART_MspInit+0x194>)
 8000ebe:	f043 0308 	orr.w	r3, r3, #8
 8000ec2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec4:	4b49      	ldr	r3, [pc, #292]	@ (8000fec <HAL_UART_MspInit+0x194>)
 8000ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec8:	f003 0308 	and.w	r3, r3, #8
 8000ecc:	60bb      	str	r3, [r7, #8]
 8000ece:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000ed0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ed4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000ee2:	2308      	movs	r3, #8
 8000ee4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ee6:	f107 0314 	add.w	r3, r7, #20
 8000eea:	4619      	mov	r1, r3
 8000eec:	4840      	ldr	r0, [pc, #256]	@ (8000ff0 <HAL_UART_MspInit+0x198>)
 8000eee:	f001 fa51 	bl	8002394 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ef2:	2304      	movs	r3, #4
 8000ef4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efe:	2303      	movs	r3, #3
 8000f00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000f02:	2308      	movs	r3, #8
 8000f04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f06:	f107 0314 	add.w	r3, r7, #20
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4839      	ldr	r0, [pc, #228]	@ (8000ff4 <HAL_UART_MspInit+0x19c>)
 8000f0e:	f001 fa41 	bl	8002394 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8000f12:	4b39      	ldr	r3, [pc, #228]	@ (8000ff8 <HAL_UART_MspInit+0x1a0>)
 8000f14:	4a39      	ldr	r2, [pc, #228]	@ (8000ffc <HAL_UART_MspInit+0x1a4>)
 8000f16:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8000f18:	4b37      	ldr	r3, [pc, #220]	@ (8000ff8 <HAL_UART_MspInit+0x1a0>)
 8000f1a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000f1e:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f20:	4b35      	ldr	r3, [pc, #212]	@ (8000ff8 <HAL_UART_MspInit+0x1a0>)
 8000f22:	2240      	movs	r2, #64	@ 0x40
 8000f24:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f26:	4b34      	ldr	r3, [pc, #208]	@ (8000ff8 <HAL_UART_MspInit+0x1a0>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f2c:	4b32      	ldr	r3, [pc, #200]	@ (8000ff8 <HAL_UART_MspInit+0x1a0>)
 8000f2e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f32:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f34:	4b30      	ldr	r3, [pc, #192]	@ (8000ff8 <HAL_UART_MspInit+0x1a0>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f3a:	4b2f      	ldr	r3, [pc, #188]	@ (8000ff8 <HAL_UART_MspInit+0x1a0>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8000f40:	4b2d      	ldr	r3, [pc, #180]	@ (8000ff8 <HAL_UART_MspInit+0x1a0>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000f46:	4b2c      	ldr	r3, [pc, #176]	@ (8000ff8 <HAL_UART_MspInit+0x1a0>)
 8000f48:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000f4c:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f4e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ff8 <HAL_UART_MspInit+0x1a0>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8000f54:	4828      	ldr	r0, [pc, #160]	@ (8000ff8 <HAL_UART_MspInit+0x1a0>)
 8000f56:	f000 fe43 	bl	8001be0 <HAL_DMA_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8000f60:	f7ff fd7a 	bl	8000a58 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4a24      	ldr	r2, [pc, #144]	@ (8000ff8 <HAL_UART_MspInit+0x1a0>)
 8000f68:	639a      	str	r2, [r3, #56]	@ 0x38
 8000f6a:	4a23      	ldr	r2, [pc, #140]	@ (8000ff8 <HAL_UART_MspInit+0x1a0>)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8000f70:	4b23      	ldr	r3, [pc, #140]	@ (8001000 <HAL_UART_MspInit+0x1a8>)
 8000f72:	4a24      	ldr	r2, [pc, #144]	@ (8001004 <HAL_UART_MspInit+0x1ac>)
 8000f74:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8000f76:	4b22      	ldr	r3, [pc, #136]	@ (8001000 <HAL_UART_MspInit+0x1a8>)
 8000f78:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000f7c:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f7e:	4b20      	ldr	r3, [pc, #128]	@ (8001000 <HAL_UART_MspInit+0x1a8>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f84:	4b1e      	ldr	r3, [pc, #120]	@ (8001000 <HAL_UART_MspInit+0x1a8>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f8a:	4b1d      	ldr	r3, [pc, #116]	@ (8001000 <HAL_UART_MspInit+0x1a8>)
 8000f8c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f90:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f92:	4b1b      	ldr	r3, [pc, #108]	@ (8001000 <HAL_UART_MspInit+0x1a8>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f98:	4b19      	ldr	r3, [pc, #100]	@ (8001000 <HAL_UART_MspInit+0x1a8>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8000f9e:	4b18      	ldr	r3, [pc, #96]	@ (8001000 <HAL_UART_MspInit+0x1a8>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000fa4:	4b16      	ldr	r3, [pc, #88]	@ (8001000 <HAL_UART_MspInit+0x1a8>)
 8000fa6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000faa:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fac:	4b14      	ldr	r3, [pc, #80]	@ (8001000 <HAL_UART_MspInit+0x1a8>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8000fb2:	4813      	ldr	r0, [pc, #76]	@ (8001000 <HAL_UART_MspInit+0x1a8>)
 8000fb4:	f000 fe14 	bl	8001be0 <HAL_DMA_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 8000fbe:	f7ff fd4b 	bl	8000a58 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a0e      	ldr	r2, [pc, #56]	@ (8001000 <HAL_UART_MspInit+0x1a8>)
 8000fc6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000fc8:	4a0d      	ldr	r2, [pc, #52]	@ (8001000 <HAL_UART_MspInit+0x1a8>)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	2035      	movs	r0, #53	@ 0x35
 8000fd4:	f000 fdbf 	bl	8001b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000fd8:	2035      	movs	r0, #53	@ 0x35
 8000fda:	f000 fdd8 	bl	8001b8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8000fde:	bf00      	nop
 8000fe0:	3728      	adds	r7, #40	@ 0x28
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40005000 	.word	0x40005000
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40020800 	.word	0x40020800
 8000ff4:	40020c00 	.word	0x40020c00
 8000ff8:	200004ec 	.word	0x200004ec
 8000ffc:	400260b8 	.word	0x400260b8
 8001000:	2000054c 	.word	0x2000054c
 8001004:	40026010 	.word	0x40026010

08001008 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==UART5)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a11      	ldr	r2, [pc, #68]	@ (800105c <HAL_UART_MspDeInit+0x54>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d11b      	bne.n	8001052 <HAL_UART_MspDeInit+0x4a>
  {
  /* USER CODE BEGIN UART5_MspDeInit 0 */

  /* USER CODE END UART5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART5_CLK_DISABLE();
 800101a:	4b11      	ldr	r3, [pc, #68]	@ (8001060 <HAL_UART_MspDeInit+0x58>)
 800101c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101e:	4a10      	ldr	r2, [pc, #64]	@ (8001060 <HAL_UART_MspDeInit+0x58>)
 8001020:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001024:	6413      	str	r3, [r2, #64]	@ 0x40

    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12);
 8001026:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800102a:	480e      	ldr	r0, [pc, #56]	@ (8001064 <HAL_UART_MspDeInit+0x5c>)
 800102c:	f001 fb4e 	bl	80026cc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_2);
 8001030:	2104      	movs	r1, #4
 8001032:	480d      	ldr	r0, [pc, #52]	@ (8001068 <HAL_UART_MspDeInit+0x60>)
 8001034:	f001 fb4a 	bl	80026cc <HAL_GPIO_DeInit>

    /* UART5 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800103c:	4618      	mov	r0, r3
 800103e:	f000 fe7d 	bl	8001d3c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001046:	4618      	mov	r0, r3
 8001048:	f000 fe78 	bl	8001d3c <HAL_DMA_DeInit>

    /* UART5 interrupt Deinit */
    HAL_NVIC_DisableIRQ(UART5_IRQn);
 800104c:	2035      	movs	r0, #53	@ 0x35
 800104e:	f000 fdac 	bl	8001baa <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN UART5_MspDeInit 1 */

  /* USER CODE END UART5_MspDeInit 1 */
  }
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40005000 	.word	0x40005000
 8001060:	40023800 	.word	0x40023800
 8001064:	40020800 	.word	0x40020800
 8001068:	40020c00 	.word	0x40020c00

0800106c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001070:	4b14      	ldr	r3, [pc, #80]	@ (80010c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001072:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001076:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001078:	4b12      	ldr	r3, [pc, #72]	@ (80010c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800107a:	2204      	movs	r2, #4
 800107c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800107e:	4b11      	ldr	r3, [pc, #68]	@ (80010c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001080:	2202      	movs	r2, #2
 8001082:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001084:	4b0f      	ldr	r3, [pc, #60]	@ (80010c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001086:	2200      	movs	r2, #0
 8001088:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800108a:	4b0e      	ldr	r3, [pc, #56]	@ (80010c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800108c:	2202      	movs	r2, #2
 800108e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001090:	4b0c      	ldr	r3, [pc, #48]	@ (80010c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001092:	2200      	movs	r2, #0
 8001094:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001096:	4b0b      	ldr	r3, [pc, #44]	@ (80010c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001098:	2200      	movs	r2, #0
 800109a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800109c:	4b09      	ldr	r3, [pc, #36]	@ (80010c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800109e:	2200      	movs	r2, #0
 80010a0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80010a2:	4b08      	ldr	r3, [pc, #32]	@ (80010c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80010a8:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80010ae:	4805      	ldr	r0, [pc, #20]	@ (80010c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010b0:	f001 fd80 	bl	8002bb4 <HAL_PCD_Init>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80010ba:	f7ff fccd 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	200005ac 	.word	0x200005ac

080010c8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08a      	sub	sp, #40	@ 0x28
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80010e8:	d13a      	bne.n	8001160 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	613b      	str	r3, [r7, #16]
 80010ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001168 <HAL_PCD_MspInit+0xa0>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f2:	4a1d      	ldr	r2, [pc, #116]	@ (8001168 <HAL_PCD_MspInit+0xa0>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001168 <HAL_PCD_MspInit+0xa0>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	613b      	str	r3, [r7, #16]
 8001104:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001106:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800110a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110c:	2302      	movs	r3, #2
 800110e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001114:	2303      	movs	r3, #3
 8001116:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001118:	230a      	movs	r3, #10
 800111a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	4619      	mov	r1, r3
 8001122:	4812      	ldr	r0, [pc, #72]	@ (800116c <HAL_PCD_MspInit+0xa4>)
 8001124:	f001 f936 	bl	8002394 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001128:	4b0f      	ldr	r3, [pc, #60]	@ (8001168 <HAL_PCD_MspInit+0xa0>)
 800112a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800112c:	4a0e      	ldr	r2, [pc, #56]	@ (8001168 <HAL_PCD_MspInit+0xa0>)
 800112e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001132:	6353      	str	r3, [r2, #52]	@ 0x34
 8001134:	2300      	movs	r3, #0
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	4b0b      	ldr	r3, [pc, #44]	@ (8001168 <HAL_PCD_MspInit+0xa0>)
 800113a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800113c:	4a0a      	ldr	r2, [pc, #40]	@ (8001168 <HAL_PCD_MspInit+0xa0>)
 800113e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001142:	6453      	str	r3, [r2, #68]	@ 0x44
 8001144:	4b08      	ldr	r3, [pc, #32]	@ (8001168 <HAL_PCD_MspInit+0xa0>)
 8001146:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001148:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	68fb      	ldr	r3, [r7, #12]

    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8001150:	2200      	movs	r2, #0
 8001152:	2100      	movs	r1, #0
 8001154:	2043      	movs	r0, #67	@ 0x43
 8001156:	f000 fcfe 	bl	8001b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800115a:	2043      	movs	r0, #67	@ 0x43
 800115c:	f000 fd17 	bl	8001b8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001160:	bf00      	nop
 8001162:	3728      	adds	r7, #40	@ 0x28
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40023800 	.word	0x40023800
 800116c:	40020000 	.word	0x40020000

08001170 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001170:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011a8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001174:	f7ff fd54 	bl	8000c20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001178:	480c      	ldr	r0, [pc, #48]	@ (80011ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800117a:	490d      	ldr	r1, [pc, #52]	@ (80011b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800117c:	4a0d      	ldr	r2, [pc, #52]	@ (80011b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800117e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001180:	e002      	b.n	8001188 <LoopCopyDataInit>

08001182 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001182:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001184:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001186:	3304      	adds	r3, #4

08001188 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001188:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800118a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800118c:	d3f9      	bcc.n	8001182 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800118e:	4a0a      	ldr	r2, [pc, #40]	@ (80011b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001190:	4c0a      	ldr	r4, [pc, #40]	@ (80011bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001192:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001194:	e001      	b.n	800119a <LoopFillZerobss>

08001196 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001196:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001198:	3204      	adds	r2, #4

0800119a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800119a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800119c:	d3fb      	bcc.n	8001196 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800119e:	f00a f95f 	bl	800b460 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011a2:	f7ff fbd3 	bl	800094c <main>
  bx  lr    
 80011a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80011a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b0:	20000378 	.word	0x20000378
  ldr r2, =_sidata
 80011b4:	0800be18 	.word	0x0800be18
  ldr r2, =_sbss
 80011b8:	20000378 	.word	0x20000378
  ldr r4, =_ebss
 80011bc:	20002744 	.word	0x20002744

080011c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011c0:	e7fe      	b.n	80011c0 <ADC_IRQHandler>
	...

080011c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001204 <HAL_Init+0x40>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001204 <HAL_Init+0x40>)
 80011ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001204 <HAL_Init+0x40>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a0a      	ldr	r2, [pc, #40]	@ (8001204 <HAL_Init+0x40>)
 80011da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011e0:	4b08      	ldr	r3, [pc, #32]	@ (8001204 <HAL_Init+0x40>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a07      	ldr	r2, [pc, #28]	@ (8001204 <HAL_Init+0x40>)
 80011e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ec:	2003      	movs	r0, #3
 80011ee:	f000 fca7 	bl	8001b40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011f2:	200f      	movs	r0, #15
 80011f4:	f000 f808 	bl	8001208 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011f8:	f7ff fc34 	bl	8000a64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40023c00 	.word	0x40023c00

08001208 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001210:	4b12      	ldr	r3, [pc, #72]	@ (800125c <HAL_InitTick+0x54>)
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	4b12      	ldr	r3, [pc, #72]	@ (8001260 <HAL_InitTick+0x58>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	4619      	mov	r1, r3
 800121a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800121e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001222:	fbb2 f3f3 	udiv	r3, r2, r3
 8001226:	4618      	mov	r0, r3
 8001228:	f000 fccd 	bl	8001bc6 <HAL_SYSTICK_Config>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e00e      	b.n	8001254 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2b0f      	cmp	r3, #15
 800123a:	d80a      	bhi.n	8001252 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800123c:	2200      	movs	r2, #0
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	f04f 30ff 	mov.w	r0, #4294967295
 8001244:	f000 fc87 	bl	8001b56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001248:	4a06      	ldr	r2, [pc, #24]	@ (8001264 <HAL_InitTick+0x5c>)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800124e:	2300      	movs	r3, #0
 8001250:	e000      	b.n	8001254 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
}
 8001254:	4618      	mov	r0, r3
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20000080 	.word	0x20000080
 8001260:	20000088 	.word	0x20000088
 8001264:	20000084 	.word	0x20000084

08001268 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800126c:	4b06      	ldr	r3, [pc, #24]	@ (8001288 <HAL_IncTick+0x20>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	461a      	mov	r2, r3
 8001272:	4b06      	ldr	r3, [pc, #24]	@ (800128c <HAL_IncTick+0x24>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4413      	add	r3, r2
 8001278:	4a04      	ldr	r2, [pc, #16]	@ (800128c <HAL_IncTick+0x24>)
 800127a:	6013      	str	r3, [r2, #0]
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	20000088 	.word	0x20000088
 800128c:	20000a90 	.word	0x20000a90

08001290 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  return uwTick;
 8001294:	4b03      	ldr	r3, [pc, #12]	@ (80012a4 <HAL_GetTick+0x14>)
 8001296:	681b      	ldr	r3, [r3, #0]
}
 8001298:	4618      	mov	r0, r3
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	20000a90 	.word	0x20000a90

080012a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012b0:	f7ff ffee 	bl	8001290 <HAL_GetTick>
 80012b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012c0:	d005      	beq.n	80012ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012c2:	4b0a      	ldr	r3, [pc, #40]	@ (80012ec <HAL_Delay+0x44>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	461a      	mov	r2, r3
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4413      	add	r3, r2
 80012cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012ce:	bf00      	nop
 80012d0:	f7ff ffde 	bl	8001290 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d8f7      	bhi.n	80012d0 <HAL_Delay+0x28>
  {
  }
}
 80012e0:	bf00      	nop
 80012e2:	bf00      	nop
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000088 	.word	0x20000088

080012f0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d101      	bne.n	8001302 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e0ed      	b.n	80014de <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001308:	b2db      	uxtb	r3, r3
 800130a:	2b00      	cmp	r3, #0
 800130c:	d102      	bne.n	8001314 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f7ff f97a 	bl	8000608 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f042 0201 	orr.w	r2, r2, #1
 8001322:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001324:	f7ff ffb4 	bl	8001290 <HAL_GetTick>
 8001328:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800132a:	e012      	b.n	8001352 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800132c:	f7ff ffb0 	bl	8001290 <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	2b0a      	cmp	r3, #10
 8001338:	d90b      	bls.n	8001352 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800133e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2205      	movs	r2, #5
 800134a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e0c5      	b.n	80014de <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f003 0301 	and.w	r3, r3, #1
 800135c:	2b00      	cmp	r3, #0
 800135e:	d0e5      	beq.n	800132c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f022 0202 	bic.w	r2, r2, #2
 800136e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001370:	f7ff ff8e 	bl	8001290 <HAL_GetTick>
 8001374:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001376:	e012      	b.n	800139e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001378:	f7ff ff8a 	bl	8001290 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b0a      	cmp	r3, #10
 8001384:	d90b      	bls.n	800139e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800138a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2205      	movs	r2, #5
 8001396:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e09f      	b.n	80014de <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f003 0302 	and.w	r3, r3, #2
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d1e5      	bne.n	8001378 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	7e1b      	ldrb	r3, [r3, #24]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d108      	bne.n	80013c6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	e007      	b.n	80013d6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80013d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	7e5b      	ldrb	r3, [r3, #25]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d108      	bne.n	80013f0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	e007      	b.n	8001400 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80013fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	7e9b      	ldrb	r3, [r3, #26]
 8001404:	2b01      	cmp	r3, #1
 8001406:	d108      	bne.n	800141a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f042 0220 	orr.w	r2, r2, #32
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	e007      	b.n	800142a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f022 0220 	bic.w	r2, r2, #32
 8001428:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	7edb      	ldrb	r3, [r3, #27]
 800142e:	2b01      	cmp	r3, #1
 8001430:	d108      	bne.n	8001444 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f022 0210 	bic.w	r2, r2, #16
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	e007      	b.n	8001454 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f042 0210 	orr.w	r2, r2, #16
 8001452:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	7f1b      	ldrb	r3, [r3, #28]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d108      	bne.n	800146e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f042 0208 	orr.w	r2, r2, #8
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	e007      	b.n	800147e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f022 0208 	bic.w	r2, r2, #8
 800147c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	7f5b      	ldrb	r3, [r3, #29]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d108      	bne.n	8001498 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f042 0204 	orr.w	r2, r2, #4
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	e007      	b.n	80014a8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f022 0204 	bic.w	r2, r2, #4
 80014a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689a      	ldr	r2, [r3, #8]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	431a      	orrs	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	691b      	ldr	r3, [r3, #16]
 80014b6:	431a      	orrs	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	695b      	ldr	r3, [r3, #20]
 80014bc:	ea42 0103 	orr.w	r1, r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	1e5a      	subs	r2, r3, #1
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	430a      	orrs	r2, r1
 80014cc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2201      	movs	r2, #1
 80014d8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b08a      	sub	sp, #40	@ 0x28
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80014ee:	2300      	movs	r3, #0
 80014f0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	695b      	ldr	r3, [r3, #20]
 80014f8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	691b      	ldr	r3, [r3, #16]
 8001518:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001522:	6a3b      	ldr	r3, [r7, #32]
 8001524:	f003 0301 	and.w	r3, r3, #1
 8001528:	2b00      	cmp	r3, #0
 800152a:	d07c      	beq.n	8001626 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	2b00      	cmp	r3, #0
 8001534:	d023      	beq.n	800157e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2201      	movs	r2, #1
 800153c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	f003 0302 	and.w	r3, r3, #2
 8001544:	2b00      	cmp	r3, #0
 8001546:	d003      	beq.n	8001550 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f000 f983 	bl	8001854 <HAL_CAN_TxMailbox0CompleteCallback>
 800154e:	e016      	b.n	800157e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	f003 0304 	and.w	r3, r3, #4
 8001556:	2b00      	cmp	r3, #0
 8001558:	d004      	beq.n	8001564 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800155a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800155c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001560:	627b      	str	r3, [r7, #36]	@ 0x24
 8001562:	e00c      	b.n	800157e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	f003 0308 	and.w	r3, r3, #8
 800156a:	2b00      	cmp	r3, #0
 800156c:	d004      	beq.n	8001578 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800156e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001570:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001574:	627b      	str	r3, [r7, #36]	@ 0x24
 8001576:	e002      	b.n	800157e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f000 f989 	bl	8001890 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001584:	2b00      	cmp	r3, #0
 8001586:	d024      	beq.n	80015d2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001590:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001598:	2b00      	cmp	r3, #0
 800159a:	d003      	beq.n	80015a4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f000 f963 	bl	8001868 <HAL_CAN_TxMailbox1CompleteCallback>
 80015a2:	e016      	b.n	80015d2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d004      	beq.n	80015b8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80015ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80015b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80015b6:	e00c      	b.n	80015d2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d004      	beq.n	80015cc <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80015c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80015ca:	e002      	b.n	80015d2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f000 f969 	bl	80018a4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d024      	beq.n	8001626 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80015e4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d003      	beq.n	80015f8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f000 f943 	bl	800187c <HAL_CAN_TxMailbox2CompleteCallback>
 80015f6:	e016      	b.n	8001626 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d004      	beq.n	800160c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001604:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001608:	627b      	str	r3, [r7, #36]	@ 0x24
 800160a:	e00c      	b.n	8001626 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d004      	beq.n	8001620 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001618:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800161c:	627b      	str	r3, [r7, #36]	@ 0x24
 800161e:	e002      	b.n	8001626 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f000 f949 	bl	80018b8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001626:	6a3b      	ldr	r3, [r7, #32]
 8001628:	f003 0308 	and.w	r3, r3, #8
 800162c:	2b00      	cmp	r3, #0
 800162e:	d00c      	beq.n	800164a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	f003 0310 	and.w	r3, r3, #16
 8001636:	2b00      	cmp	r3, #0
 8001638:	d007      	beq.n	800164a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800163a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800163c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001640:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2210      	movs	r2, #16
 8001648:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800164a:	6a3b      	ldr	r3, [r7, #32]
 800164c:	f003 0304 	and.w	r3, r3, #4
 8001650:	2b00      	cmp	r3, #0
 8001652:	d00b      	beq.n	800166c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	f003 0308 	and.w	r3, r3, #8
 800165a:	2b00      	cmp	r3, #0
 800165c:	d006      	beq.n	800166c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2208      	movs	r2, #8
 8001664:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f000 f93a 	bl	80018e0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800166c:	6a3b      	ldr	r3, [r7, #32]
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d009      	beq.n	800168a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	f003 0303 	and.w	r3, r3, #3
 8001680:	2b00      	cmp	r3, #0
 8001682:	d002      	beq.n	800168a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f000 f921 	bl	80018cc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800168a:	6a3b      	ldr	r3, [r7, #32]
 800168c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001690:	2b00      	cmp	r3, #0
 8001692:	d00c      	beq.n	80016ae <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	f003 0310 	and.w	r3, r3, #16
 800169a:	2b00      	cmp	r3, #0
 800169c:	d007      	beq.n	80016ae <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800169e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016a4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2210      	movs	r2, #16
 80016ac:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80016ae:	6a3b      	ldr	r3, [r7, #32]
 80016b0:	f003 0320 	and.w	r3, r3, #32
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d00b      	beq.n	80016d0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	f003 0308 	and.w	r3, r3, #8
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d006      	beq.n	80016d0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2208      	movs	r2, #8
 80016c8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f000 f91c 	bl	8001908 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80016d0:	6a3b      	ldr	r3, [r7, #32]
 80016d2:	f003 0310 	and.w	r3, r3, #16
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d009      	beq.n	80016ee <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	691b      	ldr	r3, [r3, #16]
 80016e0:	f003 0303 	and.w	r3, r3, #3
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d002      	beq.n	80016ee <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f000 f903 	bl	80018f4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80016ee:	6a3b      	ldr	r3, [r7, #32]
 80016f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d00b      	beq.n	8001710 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	f003 0310 	and.w	r3, r3, #16
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d006      	beq.n	8001710 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2210      	movs	r2, #16
 8001708:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f000 f906 	bl	800191c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001710:	6a3b      	ldr	r3, [r7, #32]
 8001712:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d00b      	beq.n	8001732 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	f003 0308 	and.w	r3, r3, #8
 8001720:	2b00      	cmp	r3, #0
 8001722:	d006      	beq.n	8001732 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2208      	movs	r2, #8
 800172a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f000 f8ff 	bl	8001930 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001732:	6a3b      	ldr	r3, [r7, #32]
 8001734:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d07b      	beq.n	8001834 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	f003 0304 	and.w	r3, r3, #4
 8001742:	2b00      	cmp	r3, #0
 8001744:	d072      	beq.n	800182c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001746:	6a3b      	ldr	r3, [r7, #32]
 8001748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800174c:	2b00      	cmp	r3, #0
 800174e:	d008      	beq.n	8001762 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001756:	2b00      	cmp	r3, #0
 8001758:	d003      	beq.n	8001762 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800175a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001762:	6a3b      	ldr	r3, [r7, #32]
 8001764:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001768:	2b00      	cmp	r3, #0
 800176a:	d008      	beq.n	800177e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001772:	2b00      	cmp	r3, #0
 8001774:	d003      	beq.n	800177e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001778:	f043 0302 	orr.w	r3, r3, #2
 800177c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800177e:	6a3b      	ldr	r3, [r7, #32]
 8001780:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001784:	2b00      	cmp	r3, #0
 8001786:	d008      	beq.n	800179a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800178e:	2b00      	cmp	r3, #0
 8001790:	d003      	beq.n	800179a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001794:	f043 0304 	orr.w	r3, r3, #4
 8001798:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800179a:	6a3b      	ldr	r3, [r7, #32]
 800179c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d043      	beq.n	800182c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d03e      	beq.n	800182c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80017b4:	2b60      	cmp	r3, #96	@ 0x60
 80017b6:	d02b      	beq.n	8001810 <HAL_CAN_IRQHandler+0x32a>
 80017b8:	2b60      	cmp	r3, #96	@ 0x60
 80017ba:	d82e      	bhi.n	800181a <HAL_CAN_IRQHandler+0x334>
 80017bc:	2b50      	cmp	r3, #80	@ 0x50
 80017be:	d022      	beq.n	8001806 <HAL_CAN_IRQHandler+0x320>
 80017c0:	2b50      	cmp	r3, #80	@ 0x50
 80017c2:	d82a      	bhi.n	800181a <HAL_CAN_IRQHandler+0x334>
 80017c4:	2b40      	cmp	r3, #64	@ 0x40
 80017c6:	d019      	beq.n	80017fc <HAL_CAN_IRQHandler+0x316>
 80017c8:	2b40      	cmp	r3, #64	@ 0x40
 80017ca:	d826      	bhi.n	800181a <HAL_CAN_IRQHandler+0x334>
 80017cc:	2b30      	cmp	r3, #48	@ 0x30
 80017ce:	d010      	beq.n	80017f2 <HAL_CAN_IRQHandler+0x30c>
 80017d0:	2b30      	cmp	r3, #48	@ 0x30
 80017d2:	d822      	bhi.n	800181a <HAL_CAN_IRQHandler+0x334>
 80017d4:	2b10      	cmp	r3, #16
 80017d6:	d002      	beq.n	80017de <HAL_CAN_IRQHandler+0x2f8>
 80017d8:	2b20      	cmp	r3, #32
 80017da:	d005      	beq.n	80017e8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80017dc:	e01d      	b.n	800181a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80017de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e0:	f043 0308 	orr.w	r3, r3, #8
 80017e4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80017e6:	e019      	b.n	800181c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80017e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ea:	f043 0310 	orr.w	r3, r3, #16
 80017ee:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80017f0:	e014      	b.n	800181c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80017f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f4:	f043 0320 	orr.w	r3, r3, #32
 80017f8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80017fa:	e00f      	b.n	800181c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80017fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001802:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001804:	e00a      	b.n	800181c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001808:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800180c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800180e:	e005      	b.n	800181c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001812:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001816:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001818:	e000      	b.n	800181c <HAL_CAN_IRQHandler+0x336>
            break;
 800181a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	699a      	ldr	r2, [r3, #24]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800182a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2204      	movs	r2, #4
 8001832:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001836:	2b00      	cmp	r3, #0
 8001838:	d008      	beq.n	800184c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800183e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001840:	431a      	orrs	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f000 f87c 	bl	8001944 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800184c:	bf00      	nop
 800184e:	3728      	adds	r7, #40	@ 0x28
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800185c:	bf00      	nop
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001968:	4b0c      	ldr	r3, [pc, #48]	@ (800199c <__NVIC_SetPriorityGrouping+0x44>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800196e:	68ba      	ldr	r2, [r7, #8]
 8001970:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001974:	4013      	ands	r3, r2
 8001976:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001980:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001984:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800198a:	4a04      	ldr	r2, [pc, #16]	@ (800199c <__NVIC_SetPriorityGrouping+0x44>)
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	60d3      	str	r3, [r2, #12]
}
 8001990:	bf00      	nop
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019a4:	4b04      	ldr	r3, [pc, #16]	@ (80019b8 <__NVIC_GetPriorityGrouping+0x18>)
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	0a1b      	lsrs	r3, r3, #8
 80019aa:	f003 0307 	and.w	r3, r3, #7
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	db0b      	blt.n	80019e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	f003 021f 	and.w	r2, r3, #31
 80019d4:	4907      	ldr	r1, [pc, #28]	@ (80019f4 <__NVIC_EnableIRQ+0x38>)
 80019d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019da:	095b      	lsrs	r3, r3, #5
 80019dc:	2001      	movs	r0, #1
 80019de:	fa00 f202 	lsl.w	r2, r0, r2
 80019e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019e6:	bf00      	nop
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	e000e100 	.word	0xe000e100

080019f8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	db12      	blt.n	8001a30 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	f003 021f 	and.w	r2, r3, #31
 8001a10:	490a      	ldr	r1, [pc, #40]	@ (8001a3c <__NVIC_DisableIRQ+0x44>)
 8001a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a16:	095b      	lsrs	r3, r3, #5
 8001a18:	2001      	movs	r0, #1
 8001a1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a1e:	3320      	adds	r3, #32
 8001a20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001a24:	f3bf 8f4f 	dsb	sy
}
 8001a28:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001a2a:	f3bf 8f6f 	isb	sy
}
 8001a2e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	e000e100 	.word	0xe000e100

08001a40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	6039      	str	r1, [r7, #0]
 8001a4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	db0a      	blt.n	8001a6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	b2da      	uxtb	r2, r3
 8001a58:	490c      	ldr	r1, [pc, #48]	@ (8001a8c <__NVIC_SetPriority+0x4c>)
 8001a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5e:	0112      	lsls	r2, r2, #4
 8001a60:	b2d2      	uxtb	r2, r2
 8001a62:	440b      	add	r3, r1
 8001a64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a68:	e00a      	b.n	8001a80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	b2da      	uxtb	r2, r3
 8001a6e:	4908      	ldr	r1, [pc, #32]	@ (8001a90 <__NVIC_SetPriority+0x50>)
 8001a70:	79fb      	ldrb	r3, [r7, #7]
 8001a72:	f003 030f 	and.w	r3, r3, #15
 8001a76:	3b04      	subs	r3, #4
 8001a78:	0112      	lsls	r2, r2, #4
 8001a7a:	b2d2      	uxtb	r2, r2
 8001a7c:	440b      	add	r3, r1
 8001a7e:	761a      	strb	r2, [r3, #24]
}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	e000e100 	.word	0xe000e100
 8001a90:	e000ed00 	.word	0xe000ed00

08001a94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b089      	sub	sp, #36	@ 0x24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	f1c3 0307 	rsb	r3, r3, #7
 8001aae:	2b04      	cmp	r3, #4
 8001ab0:	bf28      	it	cs
 8001ab2:	2304      	movcs	r3, #4
 8001ab4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	3304      	adds	r3, #4
 8001aba:	2b06      	cmp	r3, #6
 8001abc:	d902      	bls.n	8001ac4 <NVIC_EncodePriority+0x30>
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	3b03      	subs	r3, #3
 8001ac2:	e000      	b.n	8001ac6 <NVIC_EncodePriority+0x32>
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	43da      	mvns	r2, r3
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	401a      	ands	r2, r3
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001adc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae6:	43d9      	mvns	r1, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aec:	4313      	orrs	r3, r2
         );
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3724      	adds	r7, #36	@ 0x24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
	...

08001afc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3b01      	subs	r3, #1
 8001b08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b0c:	d301      	bcc.n	8001b12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e00f      	b.n	8001b32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b12:	4a0a      	ldr	r2, [pc, #40]	@ (8001b3c <SysTick_Config+0x40>)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3b01      	subs	r3, #1
 8001b18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b1a:	210f      	movs	r1, #15
 8001b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b20:	f7ff ff8e 	bl	8001a40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b24:	4b05      	ldr	r3, [pc, #20]	@ (8001b3c <SysTick_Config+0x40>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b2a:	4b04      	ldr	r3, [pc, #16]	@ (8001b3c <SysTick_Config+0x40>)
 8001b2c:	2207      	movs	r2, #7
 8001b2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	e000e010 	.word	0xe000e010

08001b40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f7ff ff05 	bl	8001958 <__NVIC_SetPriorityGrouping>
}
 8001b4e:	bf00      	nop
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b086      	sub	sp, #24
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	60b9      	str	r1, [r7, #8]
 8001b60:	607a      	str	r2, [r7, #4]
 8001b62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b64:	2300      	movs	r3, #0
 8001b66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b68:	f7ff ff1a 	bl	80019a0 <__NVIC_GetPriorityGrouping>
 8001b6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	68b9      	ldr	r1, [r7, #8]
 8001b72:	6978      	ldr	r0, [r7, #20]
 8001b74:	f7ff ff8e 	bl	8001a94 <NVIC_EncodePriority>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b7e:	4611      	mov	r1, r2
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff ff5d 	bl	8001a40 <__NVIC_SetPriority>
}
 8001b86:	bf00      	nop
 8001b88:	3718      	adds	r7, #24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b082      	sub	sp, #8
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	4603      	mov	r3, r0
 8001b96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff ff0d 	bl	80019bc <__NVIC_EnableIRQ>
}
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b082      	sub	sp, #8
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff ff1d 	bl	80019f8 <__NVIC_DisableIRQ>
}
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b082      	sub	sp, #8
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7ff ff94 	bl	8001afc <SysTick_Config>
 8001bd4:	4603      	mov	r3, r0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
	...

08001be0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001be8:	2300      	movs	r3, #0
 8001bea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001bec:	f7ff fb50 	bl	8001290 <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d101      	bne.n	8001bfc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e099      	b.n	8001d30 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2202      	movs	r2, #2
 8001c00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f022 0201 	bic.w	r2, r2, #1
 8001c1a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c1c:	e00f      	b.n	8001c3e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c1e:	f7ff fb37 	bl	8001290 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b05      	cmp	r3, #5
 8001c2a:	d908      	bls.n	8001c3e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2220      	movs	r2, #32
 8001c30:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2203      	movs	r2, #3
 8001c36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e078      	b.n	8001d30 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d1e8      	bne.n	8001c1e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c54:	697a      	ldr	r2, [r7, #20]
 8001c56:	4b38      	ldr	r3, [pc, #224]	@ (8001d38 <HAL_DMA_Init+0x158>)
 8001c58:	4013      	ands	r3, r2
 8001c5a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685a      	ldr	r2, [r3, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	691b      	ldr	r3, [r3, #16]
 8001c70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a1b      	ldr	r3, [r3, #32]
 8001c88:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c8a:	697a      	ldr	r2, [r7, #20]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c94:	2b04      	cmp	r3, #4
 8001c96:	d107      	bne.n	8001ca8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	697a      	ldr	r2, [r7, #20]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	f023 0307 	bic.w	r3, r3, #7
 8001cbe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc4:	697a      	ldr	r2, [r7, #20]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cce:	2b04      	cmp	r3, #4
 8001cd0:	d117      	bne.n	8001d02 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cd6:	697a      	ldr	r2, [r7, #20]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d00e      	beq.n	8001d02 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f000 fad9 	bl	800229c <DMA_CheckFifoParam>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d008      	beq.n	8001d02 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2240      	movs	r2, #64	@ 0x40
 8001cf4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e016      	b.n	8001d30 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	697a      	ldr	r2, [r7, #20]
 8001d08:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 fa90 	bl	8002230 <DMA_CalcBaseAndBitshift>
 8001d10:	4603      	mov	r3, r0
 8001d12:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d18:	223f      	movs	r2, #63	@ 0x3f
 8001d1a:	409a      	lsls	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3718      	adds	r7, #24
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	f010803f 	.word	0xf010803f

08001d3c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e050      	b.n	8001df0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d101      	bne.n	8001d5e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	e048      	b.n	8001df0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f022 0201 	bic.w	r2, r2, #1
 8001d6c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2200      	movs	r2, #0
 8001d84:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2200      	movs	r2, #0
 8001d94:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2221      	movs	r2, #33	@ 0x21
 8001d9c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 fa46 	bl	8002230 <DMA_CalcBaseAndBitshift>
 8001da4:	4603      	mov	r3, r0
 8001da6:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dd0:	223f      	movs	r2, #63	@ 0x3f
 8001dd2:	409a      	lsls	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3710      	adds	r7, #16
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e04:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e06:	f7ff fa43 	bl	8001290 <HAL_GetTick>
 8001e0a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d008      	beq.n	8001e2a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2280      	movs	r2, #128	@ 0x80
 8001e1c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e052      	b.n	8001ed0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f022 0216 	bic.w	r2, r2, #22
 8001e38:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	695a      	ldr	r2, [r3, #20]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e48:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d103      	bne.n	8001e5a <HAL_DMA_Abort+0x62>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d007      	beq.n	8001e6a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f022 0208 	bic.w	r2, r2, #8
 8001e68:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f022 0201 	bic.w	r2, r2, #1
 8001e78:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e7a:	e013      	b.n	8001ea4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e7c:	f7ff fa08 	bl	8001290 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b05      	cmp	r3, #5
 8001e88:	d90c      	bls.n	8001ea4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2220      	movs	r2, #32
 8001e8e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2203      	movs	r2, #3
 8001e94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e015      	b.n	8001ed0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1e4      	bne.n	8001e7c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eb6:	223f      	movs	r2, #63	@ 0x3f
 8001eb8:	409a      	lsls	r2, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3710      	adds	r7, #16
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d004      	beq.n	8001ef6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2280      	movs	r2, #128	@ 0x80
 8001ef0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e00c      	b.n	8001f10 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2205      	movs	r2, #5
 8001efa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f022 0201 	bic.w	r2, r2, #1
 8001f0c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f24:	2300      	movs	r3, #0
 8001f26:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f28:	4b8e      	ldr	r3, [pc, #568]	@ (8002164 <HAL_DMA_IRQHandler+0x248>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a8e      	ldr	r2, [pc, #568]	@ (8002168 <HAL_DMA_IRQHandler+0x24c>)
 8001f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f32:	0a9b      	lsrs	r3, r3, #10
 8001f34:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f3a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f46:	2208      	movs	r2, #8
 8001f48:	409a      	lsls	r2, r3
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d01a      	beq.n	8001f88 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0304 	and.w	r3, r3, #4
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d013      	beq.n	8001f88 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f022 0204 	bic.w	r2, r2, #4
 8001f6e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f74:	2208      	movs	r2, #8
 8001f76:	409a      	lsls	r2, r3
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f80:	f043 0201 	orr.w	r2, r3, #1
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	409a      	lsls	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	4013      	ands	r3, r2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d012      	beq.n	8001fbe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00b      	beq.n	8001fbe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001faa:	2201      	movs	r2, #1
 8001fac:	409a      	lsls	r2, r3
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fb6:	f043 0202 	orr.w	r2, r3, #2
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fc2:	2204      	movs	r2, #4
 8001fc4:	409a      	lsls	r2, r3
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d012      	beq.n	8001ff4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d00b      	beq.n	8001ff4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fe0:	2204      	movs	r2, #4
 8001fe2:	409a      	lsls	r2, r3
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fec:	f043 0204 	orr.w	r2, r3, #4
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ff8:	2210      	movs	r2, #16
 8001ffa:	409a      	lsls	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	4013      	ands	r3, r2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d043      	beq.n	800208c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0308 	and.w	r3, r3, #8
 800200e:	2b00      	cmp	r3, #0
 8002010:	d03c      	beq.n	800208c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002016:	2210      	movs	r2, #16
 8002018:	409a      	lsls	r2, r3
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d018      	beq.n	800205e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d108      	bne.n	800204c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203e:	2b00      	cmp	r3, #0
 8002040:	d024      	beq.n	800208c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	4798      	blx	r3
 800204a:	e01f      	b.n	800208c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002050:	2b00      	cmp	r3, #0
 8002052:	d01b      	beq.n	800208c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	4798      	blx	r3
 800205c:	e016      	b.n	800208c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002068:	2b00      	cmp	r3, #0
 800206a:	d107      	bne.n	800207c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f022 0208 	bic.w	r2, r2, #8
 800207a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002080:	2b00      	cmp	r3, #0
 8002082:	d003      	beq.n	800208c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002090:	2220      	movs	r2, #32
 8002092:	409a      	lsls	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	4013      	ands	r3, r2
 8002098:	2b00      	cmp	r3, #0
 800209a:	f000 808f 	beq.w	80021bc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0310 	and.w	r3, r3, #16
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f000 8087 	beq.w	80021bc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020b2:	2220      	movs	r2, #32
 80020b4:	409a      	lsls	r2, r3
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b05      	cmp	r3, #5
 80020c4:	d136      	bne.n	8002134 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 0216 	bic.w	r2, r2, #22
 80020d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	695a      	ldr	r2, [r3, #20]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80020e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d103      	bne.n	80020f6 <HAL_DMA_IRQHandler+0x1da>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d007      	beq.n	8002106 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f022 0208 	bic.w	r2, r2, #8
 8002104:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800210a:	223f      	movs	r2, #63	@ 0x3f
 800210c:	409a      	lsls	r2, r3
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2201      	movs	r2, #1
 8002116:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002126:	2b00      	cmp	r3, #0
 8002128:	d07e      	beq.n	8002228 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	4798      	blx	r3
        }
        return;
 8002132:	e079      	b.n	8002228 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d01d      	beq.n	800217e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d10d      	bne.n	800216c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002154:	2b00      	cmp	r3, #0
 8002156:	d031      	beq.n	80021bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	4798      	blx	r3
 8002160:	e02c      	b.n	80021bc <HAL_DMA_IRQHandler+0x2a0>
 8002162:	bf00      	nop
 8002164:	20000080 	.word	0x20000080
 8002168:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002170:	2b00      	cmp	r3, #0
 8002172:	d023      	beq.n	80021bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	4798      	blx	r3
 800217c:	e01e      	b.n	80021bc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002188:	2b00      	cmp	r3, #0
 800218a:	d10f      	bne.n	80021ac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f022 0210 	bic.w	r2, r2, #16
 800219a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d003      	beq.n	80021bc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d032      	beq.n	800222a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d022      	beq.n	8002216 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2205      	movs	r2, #5
 80021d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f022 0201 	bic.w	r2, r2, #1
 80021e6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	3301      	adds	r3, #1
 80021ec:	60bb      	str	r3, [r7, #8]
 80021ee:	697a      	ldr	r2, [r7, #20]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d307      	bcc.n	8002204 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1f2      	bne.n	80021e8 <HAL_DMA_IRQHandler+0x2cc>
 8002202:	e000      	b.n	8002206 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002204:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2201      	movs	r2, #1
 800220a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800221a:	2b00      	cmp	r3, #0
 800221c:	d005      	beq.n	800222a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	4798      	blx	r3
 8002226:	e000      	b.n	800222a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002228:	bf00      	nop
    }
  }
}
 800222a:	3718      	adds	r7, #24
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	b2db      	uxtb	r3, r3
 800223e:	3b10      	subs	r3, #16
 8002240:	4a14      	ldr	r2, [pc, #80]	@ (8002294 <DMA_CalcBaseAndBitshift+0x64>)
 8002242:	fba2 2303 	umull	r2, r3, r2, r3
 8002246:	091b      	lsrs	r3, r3, #4
 8002248:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800224a:	4a13      	ldr	r2, [pc, #76]	@ (8002298 <DMA_CalcBaseAndBitshift+0x68>)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	4413      	add	r3, r2
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	461a      	mov	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2b03      	cmp	r3, #3
 800225c:	d909      	bls.n	8002272 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002266:	f023 0303 	bic.w	r3, r3, #3
 800226a:	1d1a      	adds	r2, r3, #4
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002270:	e007      	b.n	8002282 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800227a:	f023 0303 	bic.w	r3, r3, #3
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002286:	4618      	mov	r0, r3
 8002288:	3714      	adds	r7, #20
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	aaaaaaab 	.word	0xaaaaaaab
 8002298:	0800bdcc 	.word	0x0800bdcc

0800229c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022a4:	2300      	movs	r3, #0
 80022a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d11f      	bne.n	80022f6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	2b03      	cmp	r3, #3
 80022ba:	d856      	bhi.n	800236a <DMA_CheckFifoParam+0xce>
 80022bc:	a201      	add	r2, pc, #4	@ (adr r2, 80022c4 <DMA_CheckFifoParam+0x28>)
 80022be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c2:	bf00      	nop
 80022c4:	080022d5 	.word	0x080022d5
 80022c8:	080022e7 	.word	0x080022e7
 80022cc:	080022d5 	.word	0x080022d5
 80022d0:	0800236b 	.word	0x0800236b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d046      	beq.n	800236e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022e4:	e043      	b.n	800236e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ea:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80022ee:	d140      	bne.n	8002372 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022f4:	e03d      	b.n	8002372 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80022fe:	d121      	bne.n	8002344 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	2b03      	cmp	r3, #3
 8002304:	d837      	bhi.n	8002376 <DMA_CheckFifoParam+0xda>
 8002306:	a201      	add	r2, pc, #4	@ (adr r2, 800230c <DMA_CheckFifoParam+0x70>)
 8002308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800230c:	0800231d 	.word	0x0800231d
 8002310:	08002323 	.word	0x08002323
 8002314:	0800231d 	.word	0x0800231d
 8002318:	08002335 	.word	0x08002335
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	73fb      	strb	r3, [r7, #15]
      break;
 8002320:	e030      	b.n	8002384 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002326:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d025      	beq.n	800237a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002332:	e022      	b.n	800237a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002338:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800233c:	d11f      	bne.n	800237e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002342:	e01c      	b.n	800237e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	2b02      	cmp	r3, #2
 8002348:	d903      	bls.n	8002352 <DMA_CheckFifoParam+0xb6>
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	2b03      	cmp	r3, #3
 800234e:	d003      	beq.n	8002358 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002350:	e018      	b.n	8002384 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	73fb      	strb	r3, [r7, #15]
      break;
 8002356:	e015      	b.n	8002384 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800235c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d00e      	beq.n	8002382 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	73fb      	strb	r3, [r7, #15]
      break;
 8002368:	e00b      	b.n	8002382 <DMA_CheckFifoParam+0xe6>
      break;
 800236a:	bf00      	nop
 800236c:	e00a      	b.n	8002384 <DMA_CheckFifoParam+0xe8>
      break;
 800236e:	bf00      	nop
 8002370:	e008      	b.n	8002384 <DMA_CheckFifoParam+0xe8>
      break;
 8002372:	bf00      	nop
 8002374:	e006      	b.n	8002384 <DMA_CheckFifoParam+0xe8>
      break;
 8002376:	bf00      	nop
 8002378:	e004      	b.n	8002384 <DMA_CheckFifoParam+0xe8>
      break;
 800237a:	bf00      	nop
 800237c:	e002      	b.n	8002384 <DMA_CheckFifoParam+0xe8>
      break;   
 800237e:	bf00      	nop
 8002380:	e000      	b.n	8002384 <DMA_CheckFifoParam+0xe8>
      break;
 8002382:	bf00      	nop
    }
  } 
  
  return status; 
 8002384:	7bfb      	ldrb	r3, [r7, #15]
}
 8002386:	4618      	mov	r0, r3
 8002388:	3714      	adds	r7, #20
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop

08002394 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002394:	b480      	push	{r7}
 8002396:	b089      	sub	sp, #36	@ 0x24
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800239e:	2300      	movs	r3, #0
 80023a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023a2:	2300      	movs	r3, #0
 80023a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023a6:	2300      	movs	r3, #0
 80023a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023aa:	2300      	movs	r3, #0
 80023ac:	61fb      	str	r3, [r7, #28]
 80023ae:	e16b      	b.n	8002688 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023b0:	2201      	movs	r2, #1
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	4013      	ands	r3, r2
 80023c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	f040 815a 	bne.w	8002682 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f003 0303 	and.w	r3, r3, #3
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d005      	beq.n	80023e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d130      	bne.n	8002448 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	2203      	movs	r2, #3
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	43db      	mvns	r3, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4013      	ands	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	68da      	ldr	r2, [r3, #12]
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	4313      	orrs	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800241c:	2201      	movs	r2, #1
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	43db      	mvns	r3, r3
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	4013      	ands	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	091b      	lsrs	r3, r3, #4
 8002432:	f003 0201 	and.w	r2, r3, #1
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	4313      	orrs	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f003 0303 	and.w	r3, r3, #3
 8002450:	2b03      	cmp	r3, #3
 8002452:	d017      	beq.n	8002484 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	2203      	movs	r2, #3
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	43db      	mvns	r3, r3
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4013      	ands	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	4313      	orrs	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f003 0303 	and.w	r3, r3, #3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d123      	bne.n	80024d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	08da      	lsrs	r2, r3, #3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	3208      	adds	r2, #8
 8002498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800249c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	f003 0307 	and.w	r3, r3, #7
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	220f      	movs	r2, #15
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	43db      	mvns	r3, r3
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4013      	ands	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	691a      	ldr	r2, [r3, #16]
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	f003 0307 	and.w	r3, r3, #7
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	08da      	lsrs	r2, r3, #3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	3208      	adds	r2, #8
 80024d2:	69b9      	ldr	r1, [r7, #24]
 80024d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	2203      	movs	r2, #3
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	43db      	mvns	r3, r3
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	4013      	ands	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f003 0203 	and.w	r2, r3, #3
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	4313      	orrs	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002514:	2b00      	cmp	r3, #0
 8002516:	f000 80b4 	beq.w	8002682 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800251a:	2300      	movs	r3, #0
 800251c:	60fb      	str	r3, [r7, #12]
 800251e:	4b60      	ldr	r3, [pc, #384]	@ (80026a0 <HAL_GPIO_Init+0x30c>)
 8002520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002522:	4a5f      	ldr	r2, [pc, #380]	@ (80026a0 <HAL_GPIO_Init+0x30c>)
 8002524:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002528:	6453      	str	r3, [r2, #68]	@ 0x44
 800252a:	4b5d      	ldr	r3, [pc, #372]	@ (80026a0 <HAL_GPIO_Init+0x30c>)
 800252c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800252e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002532:	60fb      	str	r3, [r7, #12]
 8002534:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002536:	4a5b      	ldr	r2, [pc, #364]	@ (80026a4 <HAL_GPIO_Init+0x310>)
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	089b      	lsrs	r3, r3, #2
 800253c:	3302      	adds	r3, #2
 800253e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002542:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	f003 0303 	and.w	r3, r3, #3
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	220f      	movs	r2, #15
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	43db      	mvns	r3, r3
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	4013      	ands	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a52      	ldr	r2, [pc, #328]	@ (80026a8 <HAL_GPIO_Init+0x314>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d02b      	beq.n	80025ba <HAL_GPIO_Init+0x226>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a51      	ldr	r2, [pc, #324]	@ (80026ac <HAL_GPIO_Init+0x318>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d025      	beq.n	80025b6 <HAL_GPIO_Init+0x222>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a50      	ldr	r2, [pc, #320]	@ (80026b0 <HAL_GPIO_Init+0x31c>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d01f      	beq.n	80025b2 <HAL_GPIO_Init+0x21e>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a4f      	ldr	r2, [pc, #316]	@ (80026b4 <HAL_GPIO_Init+0x320>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d019      	beq.n	80025ae <HAL_GPIO_Init+0x21a>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a4e      	ldr	r2, [pc, #312]	@ (80026b8 <HAL_GPIO_Init+0x324>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d013      	beq.n	80025aa <HAL_GPIO_Init+0x216>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a4d      	ldr	r2, [pc, #308]	@ (80026bc <HAL_GPIO_Init+0x328>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d00d      	beq.n	80025a6 <HAL_GPIO_Init+0x212>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a4c      	ldr	r2, [pc, #304]	@ (80026c0 <HAL_GPIO_Init+0x32c>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d007      	beq.n	80025a2 <HAL_GPIO_Init+0x20e>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a4b      	ldr	r2, [pc, #300]	@ (80026c4 <HAL_GPIO_Init+0x330>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d101      	bne.n	800259e <HAL_GPIO_Init+0x20a>
 800259a:	2307      	movs	r3, #7
 800259c:	e00e      	b.n	80025bc <HAL_GPIO_Init+0x228>
 800259e:	2308      	movs	r3, #8
 80025a0:	e00c      	b.n	80025bc <HAL_GPIO_Init+0x228>
 80025a2:	2306      	movs	r3, #6
 80025a4:	e00a      	b.n	80025bc <HAL_GPIO_Init+0x228>
 80025a6:	2305      	movs	r3, #5
 80025a8:	e008      	b.n	80025bc <HAL_GPIO_Init+0x228>
 80025aa:	2304      	movs	r3, #4
 80025ac:	e006      	b.n	80025bc <HAL_GPIO_Init+0x228>
 80025ae:	2303      	movs	r3, #3
 80025b0:	e004      	b.n	80025bc <HAL_GPIO_Init+0x228>
 80025b2:	2302      	movs	r3, #2
 80025b4:	e002      	b.n	80025bc <HAL_GPIO_Init+0x228>
 80025b6:	2301      	movs	r3, #1
 80025b8:	e000      	b.n	80025bc <HAL_GPIO_Init+0x228>
 80025ba:	2300      	movs	r3, #0
 80025bc:	69fa      	ldr	r2, [r7, #28]
 80025be:	f002 0203 	and.w	r2, r2, #3
 80025c2:	0092      	lsls	r2, r2, #2
 80025c4:	4093      	lsls	r3, r2
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025cc:	4935      	ldr	r1, [pc, #212]	@ (80026a4 <HAL_GPIO_Init+0x310>)
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	089b      	lsrs	r3, r3, #2
 80025d2:	3302      	adds	r3, #2
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025da:	4b3b      	ldr	r3, [pc, #236]	@ (80026c8 <HAL_GPIO_Init+0x334>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	43db      	mvns	r3, r3
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4013      	ands	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d003      	beq.n	80025fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025fe:	4a32      	ldr	r2, [pc, #200]	@ (80026c8 <HAL_GPIO_Init+0x334>)
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002604:	4b30      	ldr	r3, [pc, #192]	@ (80026c8 <HAL_GPIO_Init+0x334>)
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	43db      	mvns	r3, r3
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4013      	ands	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d003      	beq.n	8002628 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	4313      	orrs	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002628:	4a27      	ldr	r2, [pc, #156]	@ (80026c8 <HAL_GPIO_Init+0x334>)
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800262e:	4b26      	ldr	r3, [pc, #152]	@ (80026c8 <HAL_GPIO_Init+0x334>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	43db      	mvns	r3, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4013      	ands	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d003      	beq.n	8002652 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	4313      	orrs	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002652:	4a1d      	ldr	r2, [pc, #116]	@ (80026c8 <HAL_GPIO_Init+0x334>)
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002658:	4b1b      	ldr	r3, [pc, #108]	@ (80026c8 <HAL_GPIO_Init+0x334>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	43db      	mvns	r3, r3
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	4013      	ands	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d003      	beq.n	800267c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	4313      	orrs	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800267c:	4a12      	ldr	r2, [pc, #72]	@ (80026c8 <HAL_GPIO_Init+0x334>)
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	3301      	adds	r3, #1
 8002686:	61fb      	str	r3, [r7, #28]
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	2b0f      	cmp	r3, #15
 800268c:	f67f ae90 	bls.w	80023b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002690:	bf00      	nop
 8002692:	bf00      	nop
 8002694:	3724      	adds	r7, #36	@ 0x24
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	40023800 	.word	0x40023800
 80026a4:	40013800 	.word	0x40013800
 80026a8:	40020000 	.word	0x40020000
 80026ac:	40020400 	.word	0x40020400
 80026b0:	40020800 	.word	0x40020800
 80026b4:	40020c00 	.word	0x40020c00
 80026b8:	40021000 	.word	0x40021000
 80026bc:	40021400 	.word	0x40021400
 80026c0:	40021800 	.word	0x40021800
 80026c4:	40021c00 	.word	0x40021c00
 80026c8:	40013c00 	.word	0x40013c00

080026cc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b087      	sub	sp, #28
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026d6:	2300      	movs	r3, #0
 80026d8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80026da:	2300      	movs	r3, #0
 80026dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80026de:	2300      	movs	r3, #0
 80026e0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026e2:	2300      	movs	r3, #0
 80026e4:	617b      	str	r3, [r7, #20]
 80026e6:	e0cd      	b.n	8002884 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026e8:	2201      	movs	r2, #1
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	4013      	ands	r3, r2
 80026f8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	429a      	cmp	r2, r3
 8002700:	f040 80bd 	bne.w	800287e <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002704:	4a65      	ldr	r2, [pc, #404]	@ (800289c <HAL_GPIO_DeInit+0x1d0>)
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	089b      	lsrs	r3, r3, #2
 800270a:	3302      	adds	r3, #2
 800270c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002710:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	f003 0303 	and.w	r3, r3, #3
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	220f      	movs	r2, #15
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	68ba      	ldr	r2, [r7, #8]
 8002722:	4013      	ands	r3, r2
 8002724:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a5d      	ldr	r2, [pc, #372]	@ (80028a0 <HAL_GPIO_DeInit+0x1d4>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d02b      	beq.n	8002786 <HAL_GPIO_DeInit+0xba>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a5c      	ldr	r2, [pc, #368]	@ (80028a4 <HAL_GPIO_DeInit+0x1d8>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d025      	beq.n	8002782 <HAL_GPIO_DeInit+0xb6>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a5b      	ldr	r2, [pc, #364]	@ (80028a8 <HAL_GPIO_DeInit+0x1dc>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d01f      	beq.n	800277e <HAL_GPIO_DeInit+0xb2>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a5a      	ldr	r2, [pc, #360]	@ (80028ac <HAL_GPIO_DeInit+0x1e0>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d019      	beq.n	800277a <HAL_GPIO_DeInit+0xae>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a59      	ldr	r2, [pc, #356]	@ (80028b0 <HAL_GPIO_DeInit+0x1e4>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d013      	beq.n	8002776 <HAL_GPIO_DeInit+0xaa>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a58      	ldr	r2, [pc, #352]	@ (80028b4 <HAL_GPIO_DeInit+0x1e8>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d00d      	beq.n	8002772 <HAL_GPIO_DeInit+0xa6>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a57      	ldr	r2, [pc, #348]	@ (80028b8 <HAL_GPIO_DeInit+0x1ec>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d007      	beq.n	800276e <HAL_GPIO_DeInit+0xa2>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a56      	ldr	r2, [pc, #344]	@ (80028bc <HAL_GPIO_DeInit+0x1f0>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d101      	bne.n	800276a <HAL_GPIO_DeInit+0x9e>
 8002766:	2307      	movs	r3, #7
 8002768:	e00e      	b.n	8002788 <HAL_GPIO_DeInit+0xbc>
 800276a:	2308      	movs	r3, #8
 800276c:	e00c      	b.n	8002788 <HAL_GPIO_DeInit+0xbc>
 800276e:	2306      	movs	r3, #6
 8002770:	e00a      	b.n	8002788 <HAL_GPIO_DeInit+0xbc>
 8002772:	2305      	movs	r3, #5
 8002774:	e008      	b.n	8002788 <HAL_GPIO_DeInit+0xbc>
 8002776:	2304      	movs	r3, #4
 8002778:	e006      	b.n	8002788 <HAL_GPIO_DeInit+0xbc>
 800277a:	2303      	movs	r3, #3
 800277c:	e004      	b.n	8002788 <HAL_GPIO_DeInit+0xbc>
 800277e:	2302      	movs	r3, #2
 8002780:	e002      	b.n	8002788 <HAL_GPIO_DeInit+0xbc>
 8002782:	2301      	movs	r3, #1
 8002784:	e000      	b.n	8002788 <HAL_GPIO_DeInit+0xbc>
 8002786:	2300      	movs	r3, #0
 8002788:	697a      	ldr	r2, [r7, #20]
 800278a:	f002 0203 	and.w	r2, r2, #3
 800278e:	0092      	lsls	r2, r2, #2
 8002790:	4093      	lsls	r3, r2
 8002792:	68ba      	ldr	r2, [r7, #8]
 8002794:	429a      	cmp	r2, r3
 8002796:	d132      	bne.n	80027fe <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002798:	4b49      	ldr	r3, [pc, #292]	@ (80028c0 <HAL_GPIO_DeInit+0x1f4>)
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	43db      	mvns	r3, r3
 80027a0:	4947      	ldr	r1, [pc, #284]	@ (80028c0 <HAL_GPIO_DeInit+0x1f4>)
 80027a2:	4013      	ands	r3, r2
 80027a4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80027a6:	4b46      	ldr	r3, [pc, #280]	@ (80028c0 <HAL_GPIO_DeInit+0x1f4>)
 80027a8:	685a      	ldr	r2, [r3, #4]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	43db      	mvns	r3, r3
 80027ae:	4944      	ldr	r1, [pc, #272]	@ (80028c0 <HAL_GPIO_DeInit+0x1f4>)
 80027b0:	4013      	ands	r3, r2
 80027b2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80027b4:	4b42      	ldr	r3, [pc, #264]	@ (80028c0 <HAL_GPIO_DeInit+0x1f4>)
 80027b6:	68da      	ldr	r2, [r3, #12]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	43db      	mvns	r3, r3
 80027bc:	4940      	ldr	r1, [pc, #256]	@ (80028c0 <HAL_GPIO_DeInit+0x1f4>)
 80027be:	4013      	ands	r3, r2
 80027c0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80027c2:	4b3f      	ldr	r3, [pc, #252]	@ (80028c0 <HAL_GPIO_DeInit+0x1f4>)
 80027c4:	689a      	ldr	r2, [r3, #8]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	43db      	mvns	r3, r3
 80027ca:	493d      	ldr	r1, [pc, #244]	@ (80028c0 <HAL_GPIO_DeInit+0x1f4>)
 80027cc:	4013      	ands	r3, r2
 80027ce:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	f003 0303 	and.w	r3, r3, #3
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	220f      	movs	r2, #15
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80027e0:	4a2e      	ldr	r2, [pc, #184]	@ (800289c <HAL_GPIO_DeInit+0x1d0>)
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	089b      	lsrs	r3, r3, #2
 80027e6:	3302      	adds	r3, #2
 80027e8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	43da      	mvns	r2, r3
 80027f0:	482a      	ldr	r0, [pc, #168]	@ (800289c <HAL_GPIO_DeInit+0x1d0>)
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	089b      	lsrs	r3, r3, #2
 80027f6:	400a      	ands	r2, r1
 80027f8:	3302      	adds	r3, #2
 80027fa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	2103      	movs	r1, #3
 8002808:	fa01 f303 	lsl.w	r3, r1, r3
 800280c:	43db      	mvns	r3, r3
 800280e:	401a      	ands	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	08da      	lsrs	r2, r3, #3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	3208      	adds	r2, #8
 800281c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	f003 0307 	and.w	r3, r3, #7
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	220f      	movs	r2, #15
 800282a:	fa02 f303 	lsl.w	r3, r2, r3
 800282e:	43db      	mvns	r3, r3
 8002830:	697a      	ldr	r2, [r7, #20]
 8002832:	08d2      	lsrs	r2, r2, #3
 8002834:	4019      	ands	r1, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	3208      	adds	r2, #8
 800283a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	68da      	ldr	r2, [r3, #12]
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	2103      	movs	r1, #3
 8002848:	fa01 f303 	lsl.w	r3, r1, r3
 800284c:	43db      	mvns	r3, r3
 800284e:	401a      	ands	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685a      	ldr	r2, [r3, #4]
 8002858:	2101      	movs	r1, #1
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	fa01 f303 	lsl.w	r3, r1, r3
 8002860:	43db      	mvns	r3, r3
 8002862:	401a      	ands	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	2103      	movs	r1, #3
 8002872:	fa01 f303 	lsl.w	r3, r1, r3
 8002876:	43db      	mvns	r3, r3
 8002878:	401a      	ands	r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	3301      	adds	r3, #1
 8002882:	617b      	str	r3, [r7, #20]
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	2b0f      	cmp	r3, #15
 8002888:	f67f af2e 	bls.w	80026e8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800288c:	bf00      	nop
 800288e:	bf00      	nop
 8002890:	371c      	adds	r7, #28
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	40013800 	.word	0x40013800
 80028a0:	40020000 	.word	0x40020000
 80028a4:	40020400 	.word	0x40020400
 80028a8:	40020800 	.word	0x40020800
 80028ac:	40020c00 	.word	0x40020c00
 80028b0:	40021000 	.word	0x40021000
 80028b4:	40021400 	.word	0x40021400
 80028b8:	40021800 	.word	0x40021800
 80028bc:	40021c00 	.word	0x40021c00
 80028c0:	40013c00 	.word	0x40013c00

080028c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	460b      	mov	r3, r1
 80028ce:	807b      	strh	r3, [r7, #2]
 80028d0:	4613      	mov	r3, r2
 80028d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028d4:	787b      	ldrb	r3, [r7, #1]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d003      	beq.n	80028e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028da:	887a      	ldrh	r2, [r7, #2]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028e0:	e003      	b.n	80028ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028e2:	887b      	ldrh	r3, [r7, #2]
 80028e4:	041a      	lsls	r2, r3, #16
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	619a      	str	r2, [r3, #24]
}
 80028ea:	bf00      	nop
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028f6:	b480      	push	{r7}
 80028f8:	b085      	sub	sp, #20
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
 80028fe:	460b      	mov	r3, r1
 8002900:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002908:	887a      	ldrh	r2, [r7, #2]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	4013      	ands	r3, r2
 800290e:	041a      	lsls	r2, r3, #16
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	43d9      	mvns	r1, r3
 8002914:	887b      	ldrh	r3, [r7, #2]
 8002916:	400b      	ands	r3, r1
 8002918:	431a      	orrs	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	619a      	str	r2, [r3, #24]
}
 800291e:	bf00      	nop
 8002920:	3714      	adds	r7, #20
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
	...

0800292c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e12b      	b.n	8002b96 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d106      	bne.n	8002958 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f7fd ff72 	bl	800083c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2224      	movs	r2, #36	@ 0x24
 800295c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 0201 	bic.w	r2, r2, #1
 800296e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800297e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800298e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002990:	f001 ffd2 	bl	8004938 <HAL_RCC_GetPCLK1Freq>
 8002994:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	4a81      	ldr	r2, [pc, #516]	@ (8002ba0 <HAL_I2C_Init+0x274>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d807      	bhi.n	80029b0 <HAL_I2C_Init+0x84>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	4a80      	ldr	r2, [pc, #512]	@ (8002ba4 <HAL_I2C_Init+0x278>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	bf94      	ite	ls
 80029a8:	2301      	movls	r3, #1
 80029aa:	2300      	movhi	r3, #0
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	e006      	b.n	80029be <HAL_I2C_Init+0x92>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	4a7d      	ldr	r2, [pc, #500]	@ (8002ba8 <HAL_I2C_Init+0x27c>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	bf94      	ite	ls
 80029b8:	2301      	movls	r3, #1
 80029ba:	2300      	movhi	r3, #0
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e0e7      	b.n	8002b96 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	4a78      	ldr	r2, [pc, #480]	@ (8002bac <HAL_I2C_Init+0x280>)
 80029ca:	fba2 2303 	umull	r2, r3, r2, r3
 80029ce:	0c9b      	lsrs	r3, r3, #18
 80029d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68ba      	ldr	r2, [r7, #8]
 80029e2:	430a      	orrs	r2, r1
 80029e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	4a6a      	ldr	r2, [pc, #424]	@ (8002ba0 <HAL_I2C_Init+0x274>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d802      	bhi.n	8002a00 <HAL_I2C_Init+0xd4>
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	3301      	adds	r3, #1
 80029fe:	e009      	b.n	8002a14 <HAL_I2C_Init+0xe8>
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002a06:	fb02 f303 	mul.w	r3, r2, r3
 8002a0a:	4a69      	ldr	r2, [pc, #420]	@ (8002bb0 <HAL_I2C_Init+0x284>)
 8002a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a10:	099b      	lsrs	r3, r3, #6
 8002a12:	3301      	adds	r3, #1
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	6812      	ldr	r2, [r2, #0]
 8002a18:	430b      	orrs	r3, r1
 8002a1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002a26:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	495c      	ldr	r1, [pc, #368]	@ (8002ba0 <HAL_I2C_Init+0x274>)
 8002a30:	428b      	cmp	r3, r1
 8002a32:	d819      	bhi.n	8002a68 <HAL_I2C_Init+0x13c>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	1e59      	subs	r1, r3, #1
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a42:	1c59      	adds	r1, r3, #1
 8002a44:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002a48:	400b      	ands	r3, r1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00a      	beq.n	8002a64 <HAL_I2C_Init+0x138>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	1e59      	subs	r1, r3, #1
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a62:	e051      	b.n	8002b08 <HAL_I2C_Init+0x1dc>
 8002a64:	2304      	movs	r3, #4
 8002a66:	e04f      	b.n	8002b08 <HAL_I2C_Init+0x1dc>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d111      	bne.n	8002a94 <HAL_I2C_Init+0x168>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	1e58      	subs	r0, r3, #1
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6859      	ldr	r1, [r3, #4]
 8002a78:	460b      	mov	r3, r1
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	440b      	add	r3, r1
 8002a7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a82:	3301      	adds	r3, #1
 8002a84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	bf0c      	ite	eq
 8002a8c:	2301      	moveq	r3, #1
 8002a8e:	2300      	movne	r3, #0
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	e012      	b.n	8002aba <HAL_I2C_Init+0x18e>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	1e58      	subs	r0, r3, #1
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6859      	ldr	r1, [r3, #4]
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	440b      	add	r3, r1
 8002aa2:	0099      	lsls	r1, r3, #2
 8002aa4:	440b      	add	r3, r1
 8002aa6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aaa:	3301      	adds	r3, #1
 8002aac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	bf0c      	ite	eq
 8002ab4:	2301      	moveq	r3, #1
 8002ab6:	2300      	movne	r3, #0
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <HAL_I2C_Init+0x196>
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e022      	b.n	8002b08 <HAL_I2C_Init+0x1dc>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d10e      	bne.n	8002ae8 <HAL_I2C_Init+0x1bc>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	1e58      	subs	r0, r3, #1
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6859      	ldr	r1, [r3, #4]
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	440b      	add	r3, r1
 8002ad8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002adc:	3301      	adds	r3, #1
 8002ade:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ae2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ae6:	e00f      	b.n	8002b08 <HAL_I2C_Init+0x1dc>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	1e58      	subs	r0, r3, #1
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6859      	ldr	r1, [r3, #4]
 8002af0:	460b      	mov	r3, r1
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	440b      	add	r3, r1
 8002af6:	0099      	lsls	r1, r3, #2
 8002af8:	440b      	add	r3, r1
 8002afa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002afe:	3301      	adds	r3, #1
 8002b00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b04:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b08:	6879      	ldr	r1, [r7, #4]
 8002b0a:	6809      	ldr	r1, [r1, #0]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	69da      	ldr	r2, [r3, #28]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a1b      	ldr	r3, [r3, #32]
 8002b22:	431a      	orrs	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002b36:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	6911      	ldr	r1, [r2, #16]
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	68d2      	ldr	r2, [r2, #12]
 8002b42:	4311      	orrs	r1, r2
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	6812      	ldr	r2, [r2, #0]
 8002b48:	430b      	orrs	r3, r1
 8002b4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	695a      	ldr	r2, [r3, #20]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	430a      	orrs	r2, r1
 8002b66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f042 0201 	orr.w	r2, r2, #1
 8002b76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2220      	movs	r2, #32
 8002b82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	000186a0 	.word	0x000186a0
 8002ba4:	001e847f 	.word	0x001e847f
 8002ba8:	003d08ff 	.word	0x003d08ff
 8002bac:	431bde83 	.word	0x431bde83
 8002bb0:	10624dd3 	.word	0x10624dd3

08002bb4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af02      	add	r7, sp, #8
 8002bba:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e101      	b.n	8002dca <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d106      	bne.n	8002be6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f7fe fa71 	bl	80010c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2203      	movs	r2, #3
 8002bea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002bf4:	d102      	bne.n	8002bfc <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f003 fcdc 	bl	80065be <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6818      	ldr	r0, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	7c1a      	ldrb	r2, [r3, #16]
 8002c0e:	f88d 2000 	strb.w	r2, [sp]
 8002c12:	3304      	adds	r3, #4
 8002c14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c16:	f003 fbbb 	bl	8006390 <USB_CoreInit>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d005      	beq.n	8002c2c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2202      	movs	r2, #2
 8002c24:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e0ce      	b.n	8002dca <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2100      	movs	r1, #0
 8002c32:	4618      	mov	r0, r3
 8002c34:	f003 fcd4 	bl	80065e0 <USB_SetCurrentMode>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d005      	beq.n	8002c4a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2202      	movs	r2, #2
 8002c42:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e0bf      	b.n	8002dca <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	73fb      	strb	r3, [r7, #15]
 8002c4e:	e04a      	b.n	8002ce6 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c50:	7bfa      	ldrb	r2, [r7, #15]
 8002c52:	6879      	ldr	r1, [r7, #4]
 8002c54:	4613      	mov	r3, r2
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	4413      	add	r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	440b      	add	r3, r1
 8002c5e:	3315      	adds	r3, #21
 8002c60:	2201      	movs	r2, #1
 8002c62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c64:	7bfa      	ldrb	r2, [r7, #15]
 8002c66:	6879      	ldr	r1, [r7, #4]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	4413      	add	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	440b      	add	r3, r1
 8002c72:	3314      	adds	r3, #20
 8002c74:	7bfa      	ldrb	r2, [r7, #15]
 8002c76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c78:	7bfa      	ldrb	r2, [r7, #15]
 8002c7a:	7bfb      	ldrb	r3, [r7, #15]
 8002c7c:	b298      	uxth	r0, r3
 8002c7e:	6879      	ldr	r1, [r7, #4]
 8002c80:	4613      	mov	r3, r2
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	4413      	add	r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	440b      	add	r3, r1
 8002c8a:	332e      	adds	r3, #46	@ 0x2e
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c90:	7bfa      	ldrb	r2, [r7, #15]
 8002c92:	6879      	ldr	r1, [r7, #4]
 8002c94:	4613      	mov	r3, r2
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	4413      	add	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	3318      	adds	r3, #24
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ca4:	7bfa      	ldrb	r2, [r7, #15]
 8002ca6:	6879      	ldr	r1, [r7, #4]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	4413      	add	r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	440b      	add	r3, r1
 8002cb2:	331c      	adds	r3, #28
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002cb8:	7bfa      	ldrb	r2, [r7, #15]
 8002cba:	6879      	ldr	r1, [r7, #4]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	4413      	add	r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	440b      	add	r3, r1
 8002cc6:	3320      	adds	r3, #32
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ccc:	7bfa      	ldrb	r2, [r7, #15]
 8002cce:	6879      	ldr	r1, [r7, #4]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	4413      	add	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	440b      	add	r3, r1
 8002cda:	3324      	adds	r3, #36	@ 0x24
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ce0:	7bfb      	ldrb	r3, [r7, #15]
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	73fb      	strb	r3, [r7, #15]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	791b      	ldrb	r3, [r3, #4]
 8002cea:	7bfa      	ldrb	r2, [r7, #15]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d3af      	bcc.n	8002c50 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	73fb      	strb	r3, [r7, #15]
 8002cf4:	e044      	b.n	8002d80 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002cf6:	7bfa      	ldrb	r2, [r7, #15]
 8002cf8:	6879      	ldr	r1, [r7, #4]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	4413      	add	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	440b      	add	r3, r1
 8002d04:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002d08:	2200      	movs	r2, #0
 8002d0a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d0c:	7bfa      	ldrb	r2, [r7, #15]
 8002d0e:	6879      	ldr	r1, [r7, #4]
 8002d10:	4613      	mov	r3, r2
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	4413      	add	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	440b      	add	r3, r1
 8002d1a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002d1e:	7bfa      	ldrb	r2, [r7, #15]
 8002d20:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d22:	7bfa      	ldrb	r2, [r7, #15]
 8002d24:	6879      	ldr	r1, [r7, #4]
 8002d26:	4613      	mov	r3, r2
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	4413      	add	r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	440b      	add	r3, r1
 8002d30:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002d34:	2200      	movs	r2, #0
 8002d36:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d38:	7bfa      	ldrb	r2, [r7, #15]
 8002d3a:	6879      	ldr	r1, [r7, #4]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	4413      	add	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	440b      	add	r3, r1
 8002d46:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d4e:	7bfa      	ldrb	r2, [r7, #15]
 8002d50:	6879      	ldr	r1, [r7, #4]
 8002d52:	4613      	mov	r3, r2
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	4413      	add	r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	440b      	add	r3, r1
 8002d5c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002d60:	2200      	movs	r2, #0
 8002d62:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d64:	7bfa      	ldrb	r2, [r7, #15]
 8002d66:	6879      	ldr	r1, [r7, #4]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	4413      	add	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	440b      	add	r3, r1
 8002d72:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002d76:	2200      	movs	r2, #0
 8002d78:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d7a:	7bfb      	ldrb	r3, [r7, #15]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	73fb      	strb	r3, [r7, #15]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	791b      	ldrb	r3, [r3, #4]
 8002d84:	7bfa      	ldrb	r2, [r7, #15]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d3b5      	bcc.n	8002cf6 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6818      	ldr	r0, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	7c1a      	ldrb	r2, [r3, #16]
 8002d92:	f88d 2000 	strb.w	r2, [sp]
 8002d96:	3304      	adds	r3, #4
 8002d98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d9a:	f003 fc6d 	bl	8006678 <USB_DevInit>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d005      	beq.n	8002db0 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2202      	movs	r2, #2
 8002da8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e00c      	b.n	8002dca <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f004 fcb7 	bl	8007736 <USB_DevDisconnect>

  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b084      	sub	sp, #16
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d101      	bne.n	8002dee <HAL_PCD_Start+0x1c>
 8002dea:	2302      	movs	r3, #2
 8002dec:	e022      	b.n	8002e34 <HAL_PCD_Start+0x62>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d009      	beq.n	8002e16 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d105      	bne.n	8002e16 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e0e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f003 fbbe 	bl	800659c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f004 fc65 	bl	80076f4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002e32:	2300      	movs	r3, #0
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3710      	adds	r7, #16
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002e3c:	b590      	push	{r4, r7, lr}
 8002e3e:	b08d      	sub	sp, #52	@ 0x34
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e4a:	6a3b      	ldr	r3, [r7, #32]
 8002e4c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f004 fd23 	bl	800789e <USB_GetMode>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f040 848c 	bne.w	8003778 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f004 fc87 	bl	8007778 <USB_ReadInterrupts>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	f000 8482 	beq.w	8003776 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	0a1b      	lsrs	r3, r3, #8
 8002e7c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f004 fc74 	bl	8007778 <USB_ReadInterrupts>
 8002e90:	4603      	mov	r3, r0
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d107      	bne.n	8002eaa <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	695a      	ldr	r2, [r3, #20]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f002 0202 	and.w	r2, r2, #2
 8002ea8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f004 fc62 	bl	8007778 <USB_ReadInterrupts>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	f003 0310 	and.w	r3, r3, #16
 8002eba:	2b10      	cmp	r3, #16
 8002ebc:	d161      	bne.n	8002f82 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	699a      	ldr	r2, [r3, #24]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f022 0210 	bic.w	r2, r2, #16
 8002ecc:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002ece:	6a3b      	ldr	r3, [r7, #32]
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	f003 020f 	and.w	r2, r3, #15
 8002eda:	4613      	mov	r3, r2
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	4413      	add	r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	4413      	add	r3, r2
 8002eea:	3304      	adds	r3, #4
 8002eec:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002ef4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002ef8:	d124      	bne.n	8002f44 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002f00:	4013      	ands	r3, r2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d035      	beq.n	8002f72 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	091b      	lsrs	r3, r3, #4
 8002f0e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002f10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	461a      	mov	r2, r3
 8002f18:	6a38      	ldr	r0, [r7, #32]
 8002f1a:	f004 fa99 	bl	8007450 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	68da      	ldr	r2, [r3, #12]
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	091b      	lsrs	r3, r3, #4
 8002f26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f2a:	441a      	add	r2, r3
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	695a      	ldr	r2, [r3, #20]
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	091b      	lsrs	r3, r3, #4
 8002f38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f3c:	441a      	add	r2, r3
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	615a      	str	r2, [r3, #20]
 8002f42:	e016      	b.n	8002f72 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002f4a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002f4e:	d110      	bne.n	8002f72 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002f56:	2208      	movs	r2, #8
 8002f58:	4619      	mov	r1, r3
 8002f5a:	6a38      	ldr	r0, [r7, #32]
 8002f5c:	f004 fa78 	bl	8007450 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	695a      	ldr	r2, [r3, #20]
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	091b      	lsrs	r3, r3, #4
 8002f68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f6c:	441a      	add	r2, r3
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	699a      	ldr	r2, [r3, #24]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f042 0210 	orr.w	r2, r2, #16
 8002f80:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f004 fbf6 	bl	8007778 <USB_ReadInterrupts>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f92:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002f96:	f040 80a7 	bne.w	80030e8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f004 fbfb 	bl	800779e <USB_ReadDevAllOutEpInterrupt>
 8002fa8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002faa:	e099      	b.n	80030e0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	f000 808e 	beq.w	80030d4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fbe:	b2d2      	uxtb	r2, r2
 8002fc0:	4611      	mov	r1, r2
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f004 fc1f 	bl	8007806 <USB_ReadDevOutEPInterrupt>
 8002fc8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	f003 0301 	and.w	r3, r3, #1
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00c      	beq.n	8002fee <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd6:	015a      	lsls	r2, r3, #5
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	4413      	add	r3, r2
 8002fdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002fe6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f000 fea3 	bl	8003d34 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	f003 0308 	and.w	r3, r3, #8
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d00c      	beq.n	8003012 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ffa:	015a      	lsls	r2, r3, #5
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	4413      	add	r3, r2
 8003000:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003004:	461a      	mov	r2, r3
 8003006:	2308      	movs	r3, #8
 8003008:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800300a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 ff79 	bl	8003f04 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	f003 0310 	and.w	r3, r3, #16
 8003018:	2b00      	cmp	r3, #0
 800301a:	d008      	beq.n	800302e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800301c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800301e:	015a      	lsls	r2, r3, #5
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	4413      	add	r3, r2
 8003024:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003028:	461a      	mov	r2, r3
 800302a:	2310      	movs	r3, #16
 800302c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d030      	beq.n	800309a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003038:	6a3b      	ldr	r3, [r7, #32]
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003040:	2b80      	cmp	r3, #128	@ 0x80
 8003042:	d109      	bne.n	8003058 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	69fa      	ldr	r2, [r7, #28]
 800304e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003052:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003056:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003058:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800305a:	4613      	mov	r3, r2
 800305c:	00db      	lsls	r3, r3, #3
 800305e:	4413      	add	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	4413      	add	r3, r2
 800306a:	3304      	adds	r3, #4
 800306c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	78db      	ldrb	r3, [r3, #3]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d108      	bne.n	8003088 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	2200      	movs	r2, #0
 800307a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800307c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800307e:	b2db      	uxtb	r3, r3
 8003080:	4619      	mov	r1, r3
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f007 ffa0 	bl	800afc8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800308a:	015a      	lsls	r2, r3, #5
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	4413      	add	r3, r2
 8003090:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003094:	461a      	mov	r2, r3
 8003096:	2302      	movs	r3, #2
 8003098:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	f003 0320 	and.w	r3, r3, #32
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d008      	beq.n	80030b6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80030a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a6:	015a      	lsls	r2, r3, #5
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	4413      	add	r3, r2
 80030ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030b0:	461a      	mov	r2, r3
 80030b2:	2320      	movs	r3, #32
 80030b4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d009      	beq.n	80030d4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80030c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c2:	015a      	lsls	r2, r3, #5
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	4413      	add	r3, r2
 80030c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030cc:	461a      	mov	r2, r3
 80030ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80030d2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80030d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d6:	3301      	adds	r3, #1
 80030d8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80030da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030dc:	085b      	lsrs	r3, r3, #1
 80030de:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80030e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	f47f af62 	bne.w	8002fac <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f004 fb43 	bl	8007778 <USB_ReadInterrupts>
 80030f2:	4603      	mov	r3, r0
 80030f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030f8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80030fc:	f040 80db 	bne.w	80032b6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4618      	mov	r0, r3
 8003106:	f004 fb64 	bl	80077d2 <USB_ReadDevAllInEpInterrupt>
 800310a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800310c:	2300      	movs	r3, #0
 800310e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003110:	e0cd      	b.n	80032ae <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	2b00      	cmp	r3, #0
 800311a:	f000 80c2 	beq.w	80032a2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003124:	b2d2      	uxtb	r2, r2
 8003126:	4611      	mov	r1, r2
 8003128:	4618      	mov	r0, r3
 800312a:	f004 fb8a 	bl	8007842 <USB_ReadDevInEPInterrupt>
 800312e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d057      	beq.n	80031ea <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800313a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800313c:	f003 030f 	and.w	r3, r3, #15
 8003140:	2201      	movs	r2, #1
 8003142:	fa02 f303 	lsl.w	r3, r2, r3
 8003146:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800314e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	43db      	mvns	r3, r3
 8003154:	69f9      	ldr	r1, [r7, #28]
 8003156:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800315a:	4013      	ands	r3, r2
 800315c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800315e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003160:	015a      	lsls	r2, r3, #5
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	4413      	add	r3, r2
 8003166:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800316a:	461a      	mov	r2, r3
 800316c:	2301      	movs	r3, #1
 800316e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	799b      	ldrb	r3, [r3, #6]
 8003174:	2b01      	cmp	r3, #1
 8003176:	d132      	bne.n	80031de <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003178:	6879      	ldr	r1, [r7, #4]
 800317a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800317c:	4613      	mov	r3, r2
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	4413      	add	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	440b      	add	r3, r1
 8003186:	3320      	adds	r3, #32
 8003188:	6819      	ldr	r1, [r3, #0]
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800318e:	4613      	mov	r3, r2
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	4413      	add	r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	4403      	add	r3, r0
 8003198:	331c      	adds	r3, #28
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4419      	add	r1, r3
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031a2:	4613      	mov	r3, r2
 80031a4:	00db      	lsls	r3, r3, #3
 80031a6:	4413      	add	r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	4403      	add	r3, r0
 80031ac:	3320      	adds	r3, #32
 80031ae:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80031b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d113      	bne.n	80031de <HAL_PCD_IRQHandler+0x3a2>
 80031b6:	6879      	ldr	r1, [r7, #4]
 80031b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031ba:	4613      	mov	r3, r2
 80031bc:	00db      	lsls	r3, r3, #3
 80031be:	4413      	add	r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	440b      	add	r3, r1
 80031c4:	3324      	adds	r3, #36	@ 0x24
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d108      	bne.n	80031de <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6818      	ldr	r0, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80031d6:	461a      	mov	r2, r3
 80031d8:	2101      	movs	r1, #1
 80031da:	f004 fb91 	bl	8007900 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80031de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	4619      	mov	r1, r3
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f007 fe6a 	bl	800aebe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	f003 0308 	and.w	r3, r3, #8
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d008      	beq.n	8003206 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80031f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f6:	015a      	lsls	r2, r3, #5
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	4413      	add	r3, r2
 80031fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003200:	461a      	mov	r2, r3
 8003202:	2308      	movs	r3, #8
 8003204:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	f003 0310 	and.w	r3, r3, #16
 800320c:	2b00      	cmp	r3, #0
 800320e:	d008      	beq.n	8003222 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003212:	015a      	lsls	r2, r3, #5
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	4413      	add	r3, r2
 8003218:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800321c:	461a      	mov	r2, r3
 800321e:	2310      	movs	r3, #16
 8003220:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003228:	2b00      	cmp	r3, #0
 800322a:	d008      	beq.n	800323e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800322c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800322e:	015a      	lsls	r2, r3, #5
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	4413      	add	r3, r2
 8003234:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003238:	461a      	mov	r2, r3
 800323a:	2340      	movs	r3, #64	@ 0x40
 800323c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	f003 0302 	and.w	r3, r3, #2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d023      	beq.n	8003290 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003248:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800324a:	6a38      	ldr	r0, [r7, #32]
 800324c:	f003 fb78 	bl	8006940 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003250:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003252:	4613      	mov	r3, r2
 8003254:	00db      	lsls	r3, r3, #3
 8003256:	4413      	add	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	3310      	adds	r3, #16
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	4413      	add	r3, r2
 8003260:	3304      	adds	r3, #4
 8003262:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	78db      	ldrb	r3, [r3, #3]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d108      	bne.n	800327e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	2200      	movs	r2, #0
 8003270:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003274:	b2db      	uxtb	r3, r3
 8003276:	4619      	mov	r1, r3
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f007 feb7 	bl	800afec <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800327e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003280:	015a      	lsls	r2, r3, #5
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	4413      	add	r3, r2
 8003286:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800328a:	461a      	mov	r2, r3
 800328c:	2302      	movs	r3, #2
 800328e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003296:	2b00      	cmp	r3, #0
 8003298:	d003      	beq.n	80032a2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800329a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 fcbd 	bl	8003c1c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80032a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a4:	3301      	adds	r3, #1
 80032a6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80032a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032aa:	085b      	lsrs	r3, r3, #1
 80032ac:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80032ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f47f af2e 	bne.w	8003112 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f004 fa5c 	bl	8007778 <USB_ReadInterrupts>
 80032c0:	4603      	mov	r3, r0
 80032c2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80032c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80032ca:	d122      	bne.n	8003312 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	69fa      	ldr	r2, [r7, #28]
 80032d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80032da:	f023 0301 	bic.w	r3, r3, #1
 80032de:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d108      	bne.n	80032fc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80032f2:	2100      	movs	r1, #0
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f000 fea3 	bl	8004040 <HAL_PCDEx_LPM_Callback>
 80032fa:	e002      	b.n	8003302 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f007 fe55 	bl	800afac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	695a      	ldr	r2, [r3, #20]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003310:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4618      	mov	r0, r3
 8003318:	f004 fa2e 	bl	8007778 <USB_ReadInterrupts>
 800331c:	4603      	mov	r3, r0
 800331e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003322:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003326:	d112      	bne.n	800334e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f003 0301 	and.w	r3, r3, #1
 8003334:	2b01      	cmp	r3, #1
 8003336:	d102      	bne.n	800333e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f007 fe11 	bl	800af60 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	695a      	ldr	r2, [r3, #20]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800334c:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4618      	mov	r0, r3
 8003354:	f004 fa10 	bl	8007778 <USB_ReadInterrupts>
 8003358:	4603      	mov	r3, r0
 800335a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800335e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003362:	f040 80b7 	bne.w	80034d4 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	69fa      	ldr	r2, [r7, #28]
 8003370:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003374:	f023 0301 	bic.w	r3, r3, #1
 8003378:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2110      	movs	r1, #16
 8003380:	4618      	mov	r0, r3
 8003382:	f003 fadd 	bl	8006940 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003386:	2300      	movs	r3, #0
 8003388:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800338a:	e046      	b.n	800341a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800338c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800338e:	015a      	lsls	r2, r3, #5
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	4413      	add	r3, r2
 8003394:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003398:	461a      	mov	r2, r3
 800339a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800339e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80033a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033a2:	015a      	lsls	r2, r3, #5
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	4413      	add	r3, r2
 80033a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033b0:	0151      	lsls	r1, r2, #5
 80033b2:	69fa      	ldr	r2, [r7, #28]
 80033b4:	440a      	add	r2, r1
 80033b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80033ba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80033be:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80033c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033c2:	015a      	lsls	r2, r3, #5
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	4413      	add	r3, r2
 80033c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033cc:	461a      	mov	r2, r3
 80033ce:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80033d2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80033d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033d6:	015a      	lsls	r2, r3, #5
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	4413      	add	r3, r2
 80033dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033e4:	0151      	lsls	r1, r2, #5
 80033e6:	69fa      	ldr	r2, [r7, #28]
 80033e8:	440a      	add	r2, r1
 80033ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80033ee:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80033f2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80033f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033f6:	015a      	lsls	r2, r3, #5
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	4413      	add	r3, r2
 80033fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003404:	0151      	lsls	r1, r2, #5
 8003406:	69fa      	ldr	r2, [r7, #28]
 8003408:	440a      	add	r2, r1
 800340a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800340e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003412:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003416:	3301      	adds	r3, #1
 8003418:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	791b      	ldrb	r3, [r3, #4]
 800341e:	461a      	mov	r2, r3
 8003420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003422:	4293      	cmp	r3, r2
 8003424:	d3b2      	bcc.n	800338c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	69fa      	ldr	r2, [r7, #28]
 8003430:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003434:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003438:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	7bdb      	ldrb	r3, [r3, #15]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d016      	beq.n	8003470 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003448:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800344c:	69fa      	ldr	r2, [r7, #28]
 800344e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003452:	f043 030b 	orr.w	r3, r3, #11
 8003456:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003462:	69fa      	ldr	r2, [r7, #28]
 8003464:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003468:	f043 030b 	orr.w	r3, r3, #11
 800346c:	6453      	str	r3, [r2, #68]	@ 0x44
 800346e:	e015      	b.n	800349c <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003476:	695b      	ldr	r3, [r3, #20]
 8003478:	69fa      	ldr	r2, [r7, #28]
 800347a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800347e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003482:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003486:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	69fa      	ldr	r2, [r7, #28]
 8003492:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003496:	f043 030b 	orr.w	r3, r3, #11
 800349a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	69fa      	ldr	r2, [r7, #28]
 80034a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80034aa:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80034ae:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6818      	ldr	r0, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80034be:	461a      	mov	r2, r3
 80034c0:	f004 fa1e 	bl	8007900 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	695a      	ldr	r2, [r3, #20]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80034d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4618      	mov	r0, r3
 80034da:	f004 f94d 	bl	8007778 <USB_ReadInterrupts>
 80034de:	4603      	mov	r3, r0
 80034e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034e8:	d123      	bne.n	8003532 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f004 f9e3 	bl	80078ba <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f003 fa9a 	bl	8006a32 <USB_GetDevSpeed>
 80034fe:	4603      	mov	r3, r0
 8003500:	461a      	mov	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681c      	ldr	r4, [r3, #0]
 800350a:	f001 fa09 	bl	8004920 <HAL_RCC_GetHCLKFreq>
 800350e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003514:	461a      	mov	r2, r3
 8003516:	4620      	mov	r0, r4
 8003518:	f002 ff9e 	bl	8006458 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f007 fcf6 	bl	800af0e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	695a      	ldr	r2, [r3, #20]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003530:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4618      	mov	r0, r3
 8003538:	f004 f91e 	bl	8007778 <USB_ReadInterrupts>
 800353c:	4603      	mov	r3, r0
 800353e:	f003 0308 	and.w	r3, r3, #8
 8003542:	2b08      	cmp	r3, #8
 8003544:	d10a      	bne.n	800355c <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f007 fcd3 	bl	800aef2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	695a      	ldr	r2, [r3, #20]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f002 0208 	and.w	r2, r2, #8
 800355a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4618      	mov	r0, r3
 8003562:	f004 f909 	bl	8007778 <USB_ReadInterrupts>
 8003566:	4603      	mov	r3, r0
 8003568:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800356c:	2b80      	cmp	r3, #128	@ 0x80
 800356e:	d123      	bne.n	80035b8 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003570:	6a3b      	ldr	r3, [r7, #32]
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003578:	6a3b      	ldr	r3, [r7, #32]
 800357a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800357c:	2301      	movs	r3, #1
 800357e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003580:	e014      	b.n	80035ac <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003582:	6879      	ldr	r1, [r7, #4]
 8003584:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003586:	4613      	mov	r3, r2
 8003588:	00db      	lsls	r3, r3, #3
 800358a:	4413      	add	r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	440b      	add	r3, r1
 8003590:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d105      	bne.n	80035a6 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800359a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800359c:	b2db      	uxtb	r3, r3
 800359e:	4619      	mov	r1, r3
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f000 fb0a 	bl	8003bba <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a8:	3301      	adds	r3, #1
 80035aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	791b      	ldrb	r3, [r3, #4]
 80035b0:	461a      	mov	r2, r3
 80035b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d3e4      	bcc.n	8003582 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4618      	mov	r0, r3
 80035be:	f004 f8db 	bl	8007778 <USB_ReadInterrupts>
 80035c2:	4603      	mov	r3, r0
 80035c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035cc:	d13c      	bne.n	8003648 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035ce:	2301      	movs	r3, #1
 80035d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80035d2:	e02b      	b.n	800362c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80035d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d6:	015a      	lsls	r2, r3, #5
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	4413      	add	r3, r2
 80035dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80035e4:	6879      	ldr	r1, [r7, #4]
 80035e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035e8:	4613      	mov	r3, r2
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	4413      	add	r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	440b      	add	r3, r1
 80035f2:	3318      	adds	r3, #24
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d115      	bne.n	8003626 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80035fa:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	da12      	bge.n	8003626 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003600:	6879      	ldr	r1, [r7, #4]
 8003602:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003604:	4613      	mov	r3, r2
 8003606:	00db      	lsls	r3, r3, #3
 8003608:	4413      	add	r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	440b      	add	r3, r1
 800360e:	3317      	adds	r3, #23
 8003610:	2201      	movs	r2, #1
 8003612:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003616:	b2db      	uxtb	r3, r3
 8003618:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800361c:	b2db      	uxtb	r3, r3
 800361e:	4619      	mov	r1, r3
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 faca 	bl	8003bba <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003628:	3301      	adds	r3, #1
 800362a:	627b      	str	r3, [r7, #36]	@ 0x24
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	791b      	ldrb	r3, [r3, #4]
 8003630:	461a      	mov	r2, r3
 8003632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003634:	4293      	cmp	r3, r2
 8003636:	d3cd      	bcc.n	80035d4 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	695a      	ldr	r2, [r3, #20]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003646:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4618      	mov	r0, r3
 800364e:	f004 f893 	bl	8007778 <USB_ReadInterrupts>
 8003652:	4603      	mov	r3, r0
 8003654:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003658:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800365c:	d156      	bne.n	800370c <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800365e:	2301      	movs	r3, #1
 8003660:	627b      	str	r3, [r7, #36]	@ 0x24
 8003662:	e045      	b.n	80036f0 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003666:	015a      	lsls	r2, r3, #5
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	4413      	add	r3, r2
 800366c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003674:	6879      	ldr	r1, [r7, #4]
 8003676:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003678:	4613      	mov	r3, r2
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	4413      	add	r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	440b      	add	r3, r1
 8003682:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d12e      	bne.n	80036ea <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800368c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800368e:	2b00      	cmp	r3, #0
 8003690:	da2b      	bge.n	80036ea <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	0c1a      	lsrs	r2, r3, #16
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800369c:	4053      	eors	r3, r2
 800369e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d121      	bne.n	80036ea <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80036a6:	6879      	ldr	r1, [r7, #4]
 80036a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036aa:	4613      	mov	r3, r2
 80036ac:	00db      	lsls	r3, r3, #3
 80036ae:	4413      	add	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	440b      	add	r3, r1
 80036b4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80036b8:	2201      	movs	r2, #1
 80036ba:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80036bc:	6a3b      	ldr	r3, [r7, #32]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80036c4:	6a3b      	ldr	r3, [r7, #32]
 80036c6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80036c8:	6a3b      	ldr	r3, [r7, #32]
 80036ca:	695b      	ldr	r3, [r3, #20]
 80036cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d10a      	bne.n	80036ea <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	69fa      	ldr	r2, [r7, #28]
 80036de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80036e6:	6053      	str	r3, [r2, #4]
            break;
 80036e8:	e008      	b.n	80036fc <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80036ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ec:	3301      	adds	r3, #1
 80036ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	791b      	ldrb	r3, [r3, #4]
 80036f4:	461a      	mov	r2, r3
 80036f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d3b3      	bcc.n	8003664 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	695a      	ldr	r2, [r3, #20]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800370a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4618      	mov	r0, r3
 8003712:	f004 f831 	bl	8007778 <USB_ReadInterrupts>
 8003716:	4603      	mov	r3, r0
 8003718:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800371c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003720:	d10a      	bne.n	8003738 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f007 fc74 	bl	800b010 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	695a      	ldr	r2, [r3, #20]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003736:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4618      	mov	r0, r3
 800373e:	f004 f81b 	bl	8007778 <USB_ReadInterrupts>
 8003742:	4603      	mov	r3, r0
 8003744:	f003 0304 	and.w	r3, r3, #4
 8003748:	2b04      	cmp	r3, #4
 800374a:	d115      	bne.n	8003778 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	f003 0304 	and.w	r3, r3, #4
 800375a:	2b00      	cmp	r3, #0
 800375c:	d002      	beq.n	8003764 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f007 fc64 	bl	800b02c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6859      	ldr	r1, [r3, #4]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	69ba      	ldr	r2, [r7, #24]
 8003770:	430a      	orrs	r2, r1
 8003772:	605a      	str	r2, [r3, #4]
 8003774:	e000      	b.n	8003778 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003776:	bf00      	nop
    }
  }
}
 8003778:	3734      	adds	r7, #52	@ 0x34
 800377a:	46bd      	mov	sp, r7
 800377c:	bd90      	pop	{r4, r7, pc}

0800377e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b082      	sub	sp, #8
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
 8003786:	460b      	mov	r3, r1
 8003788:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003790:	2b01      	cmp	r3, #1
 8003792:	d101      	bne.n	8003798 <HAL_PCD_SetAddress+0x1a>
 8003794:	2302      	movs	r3, #2
 8003796:	e012      	b.n	80037be <HAL_PCD_SetAddress+0x40>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	78fa      	ldrb	r2, [r7, #3]
 80037a4:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	78fa      	ldrb	r2, [r7, #3]
 80037ac:	4611      	mov	r1, r2
 80037ae:	4618      	mov	r0, r3
 80037b0:	f003 ff7a 	bl	80076a8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3708      	adds	r7, #8
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b084      	sub	sp, #16
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
 80037ce:	4608      	mov	r0, r1
 80037d0:	4611      	mov	r1, r2
 80037d2:	461a      	mov	r2, r3
 80037d4:	4603      	mov	r3, r0
 80037d6:	70fb      	strb	r3, [r7, #3]
 80037d8:	460b      	mov	r3, r1
 80037da:	803b      	strh	r3, [r7, #0]
 80037dc:	4613      	mov	r3, r2
 80037de:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80037e0:	2300      	movs	r3, #0
 80037e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80037e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	da0f      	bge.n	800380c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037ec:	78fb      	ldrb	r3, [r7, #3]
 80037ee:	f003 020f 	and.w	r2, r3, #15
 80037f2:	4613      	mov	r3, r2
 80037f4:	00db      	lsls	r3, r3, #3
 80037f6:	4413      	add	r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	3310      	adds	r3, #16
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	4413      	add	r3, r2
 8003800:	3304      	adds	r3, #4
 8003802:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2201      	movs	r2, #1
 8003808:	705a      	strb	r2, [r3, #1]
 800380a:	e00f      	b.n	800382c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800380c:	78fb      	ldrb	r3, [r7, #3]
 800380e:	f003 020f 	and.w	r2, r3, #15
 8003812:	4613      	mov	r3, r2
 8003814:	00db      	lsls	r3, r3, #3
 8003816:	4413      	add	r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	4413      	add	r3, r2
 8003822:	3304      	adds	r3, #4
 8003824:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800382c:	78fb      	ldrb	r3, [r7, #3]
 800382e:	f003 030f 	and.w	r3, r3, #15
 8003832:	b2da      	uxtb	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003838:	883b      	ldrh	r3, [r7, #0]
 800383a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	78ba      	ldrb	r2, [r7, #2]
 8003846:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	785b      	ldrb	r3, [r3, #1]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d004      	beq.n	800385a <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	461a      	mov	r2, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800385a:	78bb      	ldrb	r3, [r7, #2]
 800385c:	2b02      	cmp	r3, #2
 800385e:	d102      	bne.n	8003866 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800386c:	2b01      	cmp	r3, #1
 800386e:	d101      	bne.n	8003874 <HAL_PCD_EP_Open+0xae>
 8003870:	2302      	movs	r3, #2
 8003872:	e00e      	b.n	8003892 <HAL_PCD_EP_Open+0xcc>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68f9      	ldr	r1, [r7, #12]
 8003882:	4618      	mov	r0, r3
 8003884:	f003 f8fa 	bl	8006a7c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003890:	7afb      	ldrb	r3, [r7, #11]
}
 8003892:	4618      	mov	r0, r3
 8003894:	3710      	adds	r7, #16
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b084      	sub	sp, #16
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
 80038a2:	460b      	mov	r3, r1
 80038a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80038a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	da0f      	bge.n	80038ce <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038ae:	78fb      	ldrb	r3, [r7, #3]
 80038b0:	f003 020f 	and.w	r2, r3, #15
 80038b4:	4613      	mov	r3, r2
 80038b6:	00db      	lsls	r3, r3, #3
 80038b8:	4413      	add	r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	3310      	adds	r3, #16
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	4413      	add	r3, r2
 80038c2:	3304      	adds	r3, #4
 80038c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2201      	movs	r2, #1
 80038ca:	705a      	strb	r2, [r3, #1]
 80038cc:	e00f      	b.n	80038ee <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038ce:	78fb      	ldrb	r3, [r7, #3]
 80038d0:	f003 020f 	and.w	r2, r3, #15
 80038d4:	4613      	mov	r3, r2
 80038d6:	00db      	lsls	r3, r3, #3
 80038d8:	4413      	add	r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	4413      	add	r3, r2
 80038e4:	3304      	adds	r3, #4
 80038e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2200      	movs	r2, #0
 80038ec:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80038ee:	78fb      	ldrb	r3, [r7, #3]
 80038f0:	f003 030f 	and.w	r3, r3, #15
 80038f4:	b2da      	uxtb	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003900:	2b01      	cmp	r3, #1
 8003902:	d101      	bne.n	8003908 <HAL_PCD_EP_Close+0x6e>
 8003904:	2302      	movs	r3, #2
 8003906:	e00e      	b.n	8003926 <HAL_PCD_EP_Close+0x8c>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68f9      	ldr	r1, [r7, #12]
 8003916:	4618      	mov	r0, r3
 8003918:	f003 f938 	bl	8006b8c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3710      	adds	r7, #16
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}

0800392e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800392e:	b580      	push	{r7, lr}
 8003930:	b086      	sub	sp, #24
 8003932:	af00      	add	r7, sp, #0
 8003934:	60f8      	str	r0, [r7, #12]
 8003936:	607a      	str	r2, [r7, #4]
 8003938:	603b      	str	r3, [r7, #0]
 800393a:	460b      	mov	r3, r1
 800393c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800393e:	7afb      	ldrb	r3, [r7, #11]
 8003940:	f003 020f 	and.w	r2, r3, #15
 8003944:	4613      	mov	r3, r2
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	4413      	add	r3, r2
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003950:	68fa      	ldr	r2, [r7, #12]
 8003952:	4413      	add	r3, r2
 8003954:	3304      	adds	r3, #4
 8003956:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	683a      	ldr	r2, [r7, #0]
 8003962:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	2200      	movs	r2, #0
 8003968:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	2200      	movs	r2, #0
 800396e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003970:	7afb      	ldrb	r3, [r7, #11]
 8003972:	f003 030f 	and.w	r3, r3, #15
 8003976:	b2da      	uxtb	r2, r3
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	799b      	ldrb	r3, [r3, #6]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d102      	bne.n	800398a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6818      	ldr	r0, [r3, #0]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	799b      	ldrb	r3, [r3, #6]
 8003992:	461a      	mov	r2, r3
 8003994:	6979      	ldr	r1, [r7, #20]
 8003996:	f003 f9d5 	bl	8006d44 <USB_EPStartXfer>

  return HAL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	3718      	adds	r7, #24
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	460b      	mov	r3, r1
 80039ae:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80039b0:	78fb      	ldrb	r3, [r7, #3]
 80039b2:	f003 020f 	and.w	r2, r3, #15
 80039b6:	6879      	ldr	r1, [r7, #4]
 80039b8:	4613      	mov	r3, r2
 80039ba:	00db      	lsls	r3, r3, #3
 80039bc:	4413      	add	r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	440b      	add	r3, r1
 80039c2:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80039c6:	681b      	ldr	r3, [r3, #0]
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	607a      	str	r2, [r7, #4]
 80039de:	603b      	str	r3, [r7, #0]
 80039e0:	460b      	mov	r3, r1
 80039e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039e4:	7afb      	ldrb	r3, [r7, #11]
 80039e6:	f003 020f 	and.w	r2, r3, #15
 80039ea:	4613      	mov	r3, r2
 80039ec:	00db      	lsls	r3, r3, #3
 80039ee:	4413      	add	r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	3310      	adds	r3, #16
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	4413      	add	r3, r2
 80039f8:	3304      	adds	r3, #4
 80039fa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	2201      	movs	r2, #1
 8003a12:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a14:	7afb      	ldrb	r3, [r7, #11]
 8003a16:	f003 030f 	and.w	r3, r3, #15
 8003a1a:	b2da      	uxtb	r2, r3
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	799b      	ldrb	r3, [r3, #6]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d102      	bne.n	8003a2e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6818      	ldr	r0, [r3, #0]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	799b      	ldrb	r3, [r3, #6]
 8003a36:	461a      	mov	r2, r3
 8003a38:	6979      	ldr	r1, [r7, #20]
 8003a3a:	f003 f983 	bl	8006d44 <USB_EPStartXfer>

  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3718      	adds	r7, #24
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	460b      	mov	r3, r1
 8003a52:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003a54:	78fb      	ldrb	r3, [r7, #3]
 8003a56:	f003 030f 	and.w	r3, r3, #15
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	7912      	ldrb	r2, [r2, #4]
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d901      	bls.n	8003a66 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e04f      	b.n	8003b06 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	da0f      	bge.n	8003a8e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a6e:	78fb      	ldrb	r3, [r7, #3]
 8003a70:	f003 020f 	and.w	r2, r3, #15
 8003a74:	4613      	mov	r3, r2
 8003a76:	00db      	lsls	r3, r3, #3
 8003a78:	4413      	add	r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	3310      	adds	r3, #16
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	4413      	add	r3, r2
 8003a82:	3304      	adds	r3, #4
 8003a84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	705a      	strb	r2, [r3, #1]
 8003a8c:	e00d      	b.n	8003aaa <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a8e:	78fa      	ldrb	r2, [r7, #3]
 8003a90:	4613      	mov	r3, r2
 8003a92:	00db      	lsls	r3, r3, #3
 8003a94:	4413      	add	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	3304      	adds	r3, #4
 8003aa2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2201      	movs	r2, #1
 8003aae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ab0:	78fb      	ldrb	r3, [r7, #3]
 8003ab2:	f003 030f 	and.w	r3, r3, #15
 8003ab6:	b2da      	uxtb	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d101      	bne.n	8003aca <HAL_PCD_EP_SetStall+0x82>
 8003ac6:	2302      	movs	r3, #2
 8003ac8:	e01d      	b.n	8003b06 <HAL_PCD_EP_SetStall+0xbe>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68f9      	ldr	r1, [r7, #12]
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f003 fd11 	bl	8007500 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ade:	78fb      	ldrb	r3, [r7, #3]
 8003ae0:	f003 030f 	and.w	r3, r3, #15
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d109      	bne.n	8003afc <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6818      	ldr	r0, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	7999      	ldrb	r1, [r3, #6]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003af6:	461a      	mov	r2, r3
 8003af8:	f003 ff02 	bl	8007900 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b084      	sub	sp, #16
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
 8003b16:	460b      	mov	r3, r1
 8003b18:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003b1a:	78fb      	ldrb	r3, [r7, #3]
 8003b1c:	f003 030f 	and.w	r3, r3, #15
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	7912      	ldrb	r2, [r2, #4]
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d901      	bls.n	8003b2c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e042      	b.n	8003bb2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	da0f      	bge.n	8003b54 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b34:	78fb      	ldrb	r3, [r7, #3]
 8003b36:	f003 020f 	and.w	r2, r3, #15
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	00db      	lsls	r3, r3, #3
 8003b3e:	4413      	add	r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	3310      	adds	r3, #16
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	4413      	add	r3, r2
 8003b48:	3304      	adds	r3, #4
 8003b4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	705a      	strb	r2, [r3, #1]
 8003b52:	e00f      	b.n	8003b74 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b54:	78fb      	ldrb	r3, [r7, #3]
 8003b56:	f003 020f 	and.w	r2, r3, #15
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	00db      	lsls	r3, r3, #3
 8003b5e:	4413      	add	r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	4413      	add	r3, r2
 8003b6a:	3304      	adds	r3, #4
 8003b6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b7a:	78fb      	ldrb	r3, [r7, #3]
 8003b7c:	f003 030f 	and.w	r3, r3, #15
 8003b80:	b2da      	uxtb	r2, r3
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d101      	bne.n	8003b94 <HAL_PCD_EP_ClrStall+0x86>
 8003b90:	2302      	movs	r3, #2
 8003b92:	e00e      	b.n	8003bb2 <HAL_PCD_EP_ClrStall+0xa4>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68f9      	ldr	r1, [r7, #12]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f003 fd1a 	bl	80075dc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3710      	adds	r7, #16
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b084      	sub	sp, #16
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003bc6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	da0c      	bge.n	8003be8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bce:	78fb      	ldrb	r3, [r7, #3]
 8003bd0:	f003 020f 	and.w	r2, r3, #15
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	00db      	lsls	r3, r3, #3
 8003bd8:	4413      	add	r3, r2
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	3310      	adds	r3, #16
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	4413      	add	r3, r2
 8003be2:	3304      	adds	r3, #4
 8003be4:	60fb      	str	r3, [r7, #12]
 8003be6:	e00c      	b.n	8003c02 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003be8:	78fb      	ldrb	r3, [r7, #3]
 8003bea:	f003 020f 	and.w	r2, r3, #15
 8003bee:	4613      	mov	r3, r2
 8003bf0:	00db      	lsls	r3, r3, #3
 8003bf2:	4413      	add	r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	3304      	adds	r3, #4
 8003c00:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68f9      	ldr	r1, [r7, #12]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f003 fb39 	bl	8007280 <USB_EPStopXfer>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003c12:	7afb      	ldrb	r3, [r7, #11]
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3710      	adds	r7, #16
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b08a      	sub	sp, #40	@ 0x28
 8003c20:	af02      	add	r7, sp, #8
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003c30:	683a      	ldr	r2, [r7, #0]
 8003c32:	4613      	mov	r3, r2
 8003c34:	00db      	lsls	r3, r3, #3
 8003c36:	4413      	add	r3, r2
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	3310      	adds	r3, #16
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	4413      	add	r3, r2
 8003c40:	3304      	adds	r3, #4
 8003c42:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	695a      	ldr	r2, [r3, #20]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d901      	bls.n	8003c54 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e06b      	b.n	8003d2c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	691a      	ldr	r2, [r3, #16]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	695b      	ldr	r3, [r3, #20]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	69fa      	ldr	r2, [r7, #28]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d902      	bls.n	8003c70 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	3303      	adds	r3, #3
 8003c74:	089b      	lsrs	r3, r3, #2
 8003c76:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c78:	e02a      	b.n	8003cd0 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	691a      	ldr	r2, [r3, #16]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	69fa      	ldr	r2, [r7, #28]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d902      	bls.n	8003c96 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	3303      	adds	r3, #3
 8003c9a:	089b      	lsrs	r3, r3, #2
 8003c9c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	68d9      	ldr	r1, [r3, #12]
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	b2da      	uxtb	r2, r3
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003cae:	9300      	str	r3, [sp, #0]
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	6978      	ldr	r0, [r7, #20]
 8003cb4:	f003 fb8e 	bl	80073d4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	68da      	ldr	r2, [r3, #12]
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	441a      	add	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	695a      	ldr	r2, [r3, #20]
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	441a      	add	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	015a      	lsls	r2, r3, #5
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d809      	bhi.n	8003cfa <PCD_WriteEmptyTxFifo+0xde>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	695a      	ldr	r2, [r3, #20]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d203      	bcs.n	8003cfa <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1bf      	bne.n	8003c7a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	691a      	ldr	r2, [r3, #16]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d811      	bhi.n	8003d2a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	f003 030f 	and.w	r3, r3, #15
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d12:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	43db      	mvns	r3, r3
 8003d20:	6939      	ldr	r1, [r7, #16]
 8003d22:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003d26:	4013      	ands	r3, r2
 8003d28:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3720      	adds	r7, #32
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b088      	sub	sp, #32
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	333c      	adds	r3, #60	@ 0x3c
 8003d4c:	3304      	adds	r3, #4
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	015a      	lsls	r2, r3, #5
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	4413      	add	r3, r2
 8003d5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	799b      	ldrb	r3, [r3, #6]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d17b      	bne.n	8003e62 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	f003 0308 	and.w	r3, r3, #8
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d015      	beq.n	8003da0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	4a61      	ldr	r2, [pc, #388]	@ (8003efc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	f240 80b9 	bls.w	8003ef0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f000 80b3 	beq.w	8003ef0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	015a      	lsls	r2, r3, #5
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	4413      	add	r3, r2
 8003d92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d96:	461a      	mov	r2, r3
 8003d98:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d9c:	6093      	str	r3, [r2, #8]
 8003d9e:	e0a7      	b.n	8003ef0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	f003 0320 	and.w	r3, r3, #32
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d009      	beq.n	8003dbe <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	015a      	lsls	r2, r3, #5
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	4413      	add	r3, r2
 8003db2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003db6:	461a      	mov	r2, r3
 8003db8:	2320      	movs	r3, #32
 8003dba:	6093      	str	r3, [r2, #8]
 8003dbc:	e098      	b.n	8003ef0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f040 8093 	bne.w	8003ef0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	4a4b      	ldr	r2, [pc, #300]	@ (8003efc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d90f      	bls.n	8003df2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d00a      	beq.n	8003df2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	015a      	lsls	r2, r3, #5
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	4413      	add	r3, r2
 8003de4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003de8:	461a      	mov	r2, r3
 8003dea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003dee:	6093      	str	r3, [r2, #8]
 8003df0:	e07e      	b.n	8003ef0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003df2:	683a      	ldr	r2, [r7, #0]
 8003df4:	4613      	mov	r3, r2
 8003df6:	00db      	lsls	r3, r3, #3
 8003df8:	4413      	add	r3, r2
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	4413      	add	r3, r2
 8003e04:	3304      	adds	r3, #4
 8003e06:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6a1a      	ldr	r2, [r3, #32]
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	0159      	lsls	r1, r3, #5
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	440b      	add	r3, r1
 8003e14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e1e:	1ad2      	subs	r2, r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d114      	bne.n	8003e54 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d109      	bne.n	8003e46 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6818      	ldr	r0, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	2101      	movs	r1, #1
 8003e40:	f003 fd5e 	bl	8007900 <USB_EP0_OutStart>
 8003e44:	e006      	b.n	8003e54 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	68da      	ldr	r2, [r3, #12]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	441a      	add	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	4619      	mov	r1, r3
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f007 f814 	bl	800ae88 <HAL_PCD_DataOutStageCallback>
 8003e60:	e046      	b.n	8003ef0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	4a26      	ldr	r2, [pc, #152]	@ (8003f00 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d124      	bne.n	8003eb4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00a      	beq.n	8003e8a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	015a      	lsls	r2, r3, #5
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e80:	461a      	mov	r2, r3
 8003e82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e86:	6093      	str	r3, [r2, #8]
 8003e88:	e032      	b.n	8003ef0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	f003 0320 	and.w	r3, r3, #32
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d008      	beq.n	8003ea6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	015a      	lsls	r2, r3, #5
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	2320      	movs	r3, #32
 8003ea4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	4619      	mov	r1, r3
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f006 ffeb 	bl	800ae88 <HAL_PCD_DataOutStageCallback>
 8003eb2:	e01d      	b.n	8003ef0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d114      	bne.n	8003ee4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003eba:	6879      	ldr	r1, [r7, #4]
 8003ebc:	683a      	ldr	r2, [r7, #0]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	00db      	lsls	r3, r3, #3
 8003ec2:	4413      	add	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	440b      	add	r3, r1
 8003ec8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d108      	bne.n	8003ee4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6818      	ldr	r0, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003edc:	461a      	mov	r2, r3
 8003ede:	2100      	movs	r1, #0
 8003ee0:	f003 fd0e 	bl	8007900 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	4619      	mov	r1, r3
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f006 ffcc 	bl	800ae88 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3720      	adds	r7, #32
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	4f54300a 	.word	0x4f54300a
 8003f00:	4f54310a 	.word	0x4f54310a

08003f04 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	333c      	adds	r3, #60	@ 0x3c
 8003f1c:	3304      	adds	r3, #4
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	015a      	lsls	r2, r3, #5
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	4413      	add	r3, r2
 8003f2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	4a15      	ldr	r2, [pc, #84]	@ (8003f8c <PCD_EP_OutSetupPacket_int+0x88>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d90e      	bls.n	8003f58 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d009      	beq.n	8003f58 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	015a      	lsls	r2, r3, #5
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f50:	461a      	mov	r2, r3
 8003f52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f56:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f006 ff83 	bl	800ae64 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	4a0a      	ldr	r2, [pc, #40]	@ (8003f8c <PCD_EP_OutSetupPacket_int+0x88>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d90c      	bls.n	8003f80 <PCD_EP_OutSetupPacket_int+0x7c>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	799b      	ldrb	r3, [r3, #6]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d108      	bne.n	8003f80 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6818      	ldr	r0, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003f78:	461a      	mov	r2, r3
 8003f7a:	2101      	movs	r1, #1
 8003f7c:	f003 fcc0 	bl	8007900 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3718      	adds	r7, #24
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	4f54300a 	.word	0x4f54300a

08003f90 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	460b      	mov	r3, r1
 8003f9a:	70fb      	strb	r3, [r7, #3]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003fa8:	78fb      	ldrb	r3, [r7, #3]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d107      	bne.n	8003fbe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003fae:	883b      	ldrh	r3, [r7, #0]
 8003fb0:	0419      	lsls	r1, r3, #16
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68ba      	ldr	r2, [r7, #8]
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	629a      	str	r2, [r3, #40]	@ 0x28
 8003fbc:	e028      	b.n	8004010 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fc4:	0c1b      	lsrs	r3, r3, #16
 8003fc6:	68ba      	ldr	r2, [r7, #8]
 8003fc8:	4413      	add	r3, r2
 8003fca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003fcc:	2300      	movs	r3, #0
 8003fce:	73fb      	strb	r3, [r7, #15]
 8003fd0:	e00d      	b.n	8003fee <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	7bfb      	ldrb	r3, [r7, #15]
 8003fd8:	3340      	adds	r3, #64	@ 0x40
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	4413      	add	r3, r2
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	0c1b      	lsrs	r3, r3, #16
 8003fe2:	68ba      	ldr	r2, [r7, #8]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003fe8:	7bfb      	ldrb	r3, [r7, #15]
 8003fea:	3301      	adds	r3, #1
 8003fec:	73fb      	strb	r3, [r7, #15]
 8003fee:	7bfa      	ldrb	r2, [r7, #15]
 8003ff0:	78fb      	ldrb	r3, [r7, #3]
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d3ec      	bcc.n	8003fd2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003ff8:	883b      	ldrh	r3, [r7, #0]
 8003ffa:	0418      	lsls	r0, r3, #16
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6819      	ldr	r1, [r3, #0]
 8004000:	78fb      	ldrb	r3, [r7, #3]
 8004002:	3b01      	subs	r3, #1
 8004004:	68ba      	ldr	r2, [r7, #8]
 8004006:	4302      	orrs	r2, r0
 8004008:	3340      	adds	r3, #64	@ 0x40
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	440b      	add	r3, r1
 800400e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3714      	adds	r7, #20
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr

0800401e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800401e:	b480      	push	{r7}
 8004020:	b083      	sub	sp, #12
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
 8004026:	460b      	mov	r3, r1
 8004028:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	887a      	ldrh	r2, [r7, #2]
 8004030:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	460b      	mov	r3, r1
 800404a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800404c:	bf00      	nop
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b086      	sub	sp, #24
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d101      	bne.n	800406a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e267      	b.n	800453a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b00      	cmp	r3, #0
 8004074:	d075      	beq.n	8004162 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004076:	4b88      	ldr	r3, [pc, #544]	@ (8004298 <HAL_RCC_OscConfig+0x240>)
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f003 030c 	and.w	r3, r3, #12
 800407e:	2b04      	cmp	r3, #4
 8004080:	d00c      	beq.n	800409c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004082:	4b85      	ldr	r3, [pc, #532]	@ (8004298 <HAL_RCC_OscConfig+0x240>)
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800408a:	2b08      	cmp	r3, #8
 800408c:	d112      	bne.n	80040b4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800408e:	4b82      	ldr	r3, [pc, #520]	@ (8004298 <HAL_RCC_OscConfig+0x240>)
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004096:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800409a:	d10b      	bne.n	80040b4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800409c:	4b7e      	ldr	r3, [pc, #504]	@ (8004298 <HAL_RCC_OscConfig+0x240>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d05b      	beq.n	8004160 <HAL_RCC_OscConfig+0x108>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d157      	bne.n	8004160 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e242      	b.n	800453a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040bc:	d106      	bne.n	80040cc <HAL_RCC_OscConfig+0x74>
 80040be:	4b76      	ldr	r3, [pc, #472]	@ (8004298 <HAL_RCC_OscConfig+0x240>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a75      	ldr	r2, [pc, #468]	@ (8004298 <HAL_RCC_OscConfig+0x240>)
 80040c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040c8:	6013      	str	r3, [r2, #0]
 80040ca:	e01d      	b.n	8004108 <HAL_RCC_OscConfig+0xb0>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80040d4:	d10c      	bne.n	80040f0 <HAL_RCC_OscConfig+0x98>
 80040d6:	4b70      	ldr	r3, [pc, #448]	@ (8004298 <HAL_RCC_OscConfig+0x240>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a6f      	ldr	r2, [pc, #444]	@ (8004298 <HAL_RCC_OscConfig+0x240>)
 80040dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040e0:	6013      	str	r3, [r2, #0]
 80040e2:	4b6d      	ldr	r3, [pc, #436]	@ (8004298 <HAL_RCC_OscConfig+0x240>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a6c      	ldr	r2, [pc, #432]	@ (8004298 <HAL_RCC_OscConfig+0x240>)
 80040e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040ec:	6013      	str	r3, [r2, #0]
 80040ee:	e00b      	b.n	8004108 <HAL_RCC_OscConfig+0xb0>
 80040f0:	4b69      	ldr	r3, [pc, #420]	@ (8004298 <HAL_RCC_OscConfig+0x240>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a68      	ldr	r2, [pc, #416]	@ (8004298 <HAL_RCC_OscConfig+0x240>)
 80040f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040fa:	6013      	str	r3, [r2, #0]
 80040fc:	4b66      	ldr	r3, [pc, #408]	@ (8004298 <HAL_RCC_OscConfig+0x240>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a65      	ldr	r2, [pc, #404]	@ (8004298 <HAL_RCC_OscConfig+0x240>)
 8004102:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004106:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d013      	beq.n	8004138 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004110:	f7fd f8be 	bl	8001290 <HAL_GetTick>
 8004114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004116:	e008      	b.n	800412a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004118:	f7fd f8ba 	bl	8001290 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b64      	cmp	r3, #100	@ 0x64
 8004124:	d901      	bls.n	800412a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e207      	b.n	800453a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800412a:	4b5b      	ldr	r3, [pc, #364]	@ (8004298 <HAL_RCC_OscConfig+0x240>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d0f0      	beq.n	8004118 <HAL_RCC_OscConfig+0xc0>
 8004136:	e014      	b.n	8004162 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004138:	f7fd f8aa 	bl	8001290 <HAL_GetTick>
 800413c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800413e:	e008      	b.n	8004152 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004140:	f7fd f8a6 	bl	8001290 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b64      	cmp	r3, #100	@ 0x64
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e1f3      	b.n	800453a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004152:	4b51      	ldr	r3, [pc, #324]	@ (8004298 <HAL_RCC_OscConfig+0x240>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1f0      	bne.n	8004140 <HAL_RCC_OscConfig+0xe8>
 800415e:	e000      	b.n	8004162 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004160:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0302 	and.w	r3, r3, #2
 800416a:	2b00      	cmp	r3, #0
 800416c:	d063      	beq.n	8004236 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800416e:	4b4a      	ldr	r3, [pc, #296]	@ (8004298 <HAL_RCC_OscConfig+0x240>)
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f003 030c 	and.w	r3, r3, #12
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00b      	beq.n	8004192 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800417a:	4b47      	ldr	r3, [pc, #284]	@ (8004298 <HAL_RCC_OscConfig+0x240>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004182:	2b08      	cmp	r3, #8
 8004184:	d11c      	bne.n	80041c0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004186:	4b44      	ldr	r3, [pc, #272]	@ (8004298 <HAL_RCC_OscConfig+0x240>)
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d116      	bne.n	80041c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004192:	4b41      	ldr	r3, [pc, #260]	@ (8004298 <HAL_RCC_OscConfig+0x240>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d005      	beq.n	80041aa <HAL_RCC_OscConfig+0x152>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d001      	beq.n	80041aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e1c7      	b.n	800453a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041aa:	4b3b      	ldr	r3, [pc, #236]	@ (8004298 <HAL_RCC_OscConfig+0x240>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	00db      	lsls	r3, r3, #3
 80041b8:	4937      	ldr	r1, [pc, #220]	@ (8004298 <HAL_RCC_OscConfig+0x240>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041be:	e03a      	b.n	8004236 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d020      	beq.n	800420a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041c8:	4b34      	ldr	r3, [pc, #208]	@ (800429c <HAL_RCC_OscConfig+0x244>)
 80041ca:	2201      	movs	r2, #1
 80041cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ce:	f7fd f85f 	bl	8001290 <HAL_GetTick>
 80041d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041d4:	e008      	b.n	80041e8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041d6:	f7fd f85b 	bl	8001290 <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d901      	bls.n	80041e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e1a8      	b.n	800453a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041e8:	4b2b      	ldr	r3, [pc, #172]	@ (8004298 <HAL_RCC_OscConfig+0x240>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0302 	and.w	r3, r3, #2
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d0f0      	beq.n	80041d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041f4:	4b28      	ldr	r3, [pc, #160]	@ (8004298 <HAL_RCC_OscConfig+0x240>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	00db      	lsls	r3, r3, #3
 8004202:	4925      	ldr	r1, [pc, #148]	@ (8004298 <HAL_RCC_OscConfig+0x240>)
 8004204:	4313      	orrs	r3, r2
 8004206:	600b      	str	r3, [r1, #0]
 8004208:	e015      	b.n	8004236 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800420a:	4b24      	ldr	r3, [pc, #144]	@ (800429c <HAL_RCC_OscConfig+0x244>)
 800420c:	2200      	movs	r2, #0
 800420e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004210:	f7fd f83e 	bl	8001290 <HAL_GetTick>
 8004214:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004216:	e008      	b.n	800422a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004218:	f7fd f83a 	bl	8001290 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	2b02      	cmp	r3, #2
 8004224:	d901      	bls.n	800422a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e187      	b.n	800453a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800422a:	4b1b      	ldr	r3, [pc, #108]	@ (8004298 <HAL_RCC_OscConfig+0x240>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0302 	and.w	r3, r3, #2
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1f0      	bne.n	8004218 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0308 	and.w	r3, r3, #8
 800423e:	2b00      	cmp	r3, #0
 8004240:	d036      	beq.n	80042b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d016      	beq.n	8004278 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800424a:	4b15      	ldr	r3, [pc, #84]	@ (80042a0 <HAL_RCC_OscConfig+0x248>)
 800424c:	2201      	movs	r2, #1
 800424e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004250:	f7fd f81e 	bl	8001290 <HAL_GetTick>
 8004254:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004256:	e008      	b.n	800426a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004258:	f7fd f81a 	bl	8001290 <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	2b02      	cmp	r3, #2
 8004264:	d901      	bls.n	800426a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e167      	b.n	800453a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800426a:	4b0b      	ldr	r3, [pc, #44]	@ (8004298 <HAL_RCC_OscConfig+0x240>)
 800426c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800426e:	f003 0302 	and.w	r3, r3, #2
 8004272:	2b00      	cmp	r3, #0
 8004274:	d0f0      	beq.n	8004258 <HAL_RCC_OscConfig+0x200>
 8004276:	e01b      	b.n	80042b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004278:	4b09      	ldr	r3, [pc, #36]	@ (80042a0 <HAL_RCC_OscConfig+0x248>)
 800427a:	2200      	movs	r2, #0
 800427c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800427e:	f7fd f807 	bl	8001290 <HAL_GetTick>
 8004282:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004284:	e00e      	b.n	80042a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004286:	f7fd f803 	bl	8001290 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	2b02      	cmp	r3, #2
 8004292:	d907      	bls.n	80042a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e150      	b.n	800453a <HAL_RCC_OscConfig+0x4e2>
 8004298:	40023800 	.word	0x40023800
 800429c:	42470000 	.word	0x42470000
 80042a0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042a4:	4b88      	ldr	r3, [pc, #544]	@ (80044c8 <HAL_RCC_OscConfig+0x470>)
 80042a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042a8:	f003 0302 	and.w	r3, r3, #2
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d1ea      	bne.n	8004286 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0304 	and.w	r3, r3, #4
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	f000 8097 	beq.w	80043ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042be:	2300      	movs	r3, #0
 80042c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042c2:	4b81      	ldr	r3, [pc, #516]	@ (80044c8 <HAL_RCC_OscConfig+0x470>)
 80042c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d10f      	bne.n	80042ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042ce:	2300      	movs	r3, #0
 80042d0:	60bb      	str	r3, [r7, #8]
 80042d2:	4b7d      	ldr	r3, [pc, #500]	@ (80044c8 <HAL_RCC_OscConfig+0x470>)
 80042d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d6:	4a7c      	ldr	r2, [pc, #496]	@ (80044c8 <HAL_RCC_OscConfig+0x470>)
 80042d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80042de:	4b7a      	ldr	r3, [pc, #488]	@ (80044c8 <HAL_RCC_OscConfig+0x470>)
 80042e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042e6:	60bb      	str	r3, [r7, #8]
 80042e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042ea:	2301      	movs	r3, #1
 80042ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042ee:	4b77      	ldr	r3, [pc, #476]	@ (80044cc <HAL_RCC_OscConfig+0x474>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d118      	bne.n	800432c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042fa:	4b74      	ldr	r3, [pc, #464]	@ (80044cc <HAL_RCC_OscConfig+0x474>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a73      	ldr	r2, [pc, #460]	@ (80044cc <HAL_RCC_OscConfig+0x474>)
 8004300:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004304:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004306:	f7fc ffc3 	bl	8001290 <HAL_GetTick>
 800430a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800430c:	e008      	b.n	8004320 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800430e:	f7fc ffbf 	bl	8001290 <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	2b02      	cmp	r3, #2
 800431a:	d901      	bls.n	8004320 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e10c      	b.n	800453a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004320:	4b6a      	ldr	r3, [pc, #424]	@ (80044cc <HAL_RCC_OscConfig+0x474>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004328:	2b00      	cmp	r3, #0
 800432a:	d0f0      	beq.n	800430e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	2b01      	cmp	r3, #1
 8004332:	d106      	bne.n	8004342 <HAL_RCC_OscConfig+0x2ea>
 8004334:	4b64      	ldr	r3, [pc, #400]	@ (80044c8 <HAL_RCC_OscConfig+0x470>)
 8004336:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004338:	4a63      	ldr	r2, [pc, #396]	@ (80044c8 <HAL_RCC_OscConfig+0x470>)
 800433a:	f043 0301 	orr.w	r3, r3, #1
 800433e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004340:	e01c      	b.n	800437c <HAL_RCC_OscConfig+0x324>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	2b05      	cmp	r3, #5
 8004348:	d10c      	bne.n	8004364 <HAL_RCC_OscConfig+0x30c>
 800434a:	4b5f      	ldr	r3, [pc, #380]	@ (80044c8 <HAL_RCC_OscConfig+0x470>)
 800434c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800434e:	4a5e      	ldr	r2, [pc, #376]	@ (80044c8 <HAL_RCC_OscConfig+0x470>)
 8004350:	f043 0304 	orr.w	r3, r3, #4
 8004354:	6713      	str	r3, [r2, #112]	@ 0x70
 8004356:	4b5c      	ldr	r3, [pc, #368]	@ (80044c8 <HAL_RCC_OscConfig+0x470>)
 8004358:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800435a:	4a5b      	ldr	r2, [pc, #364]	@ (80044c8 <HAL_RCC_OscConfig+0x470>)
 800435c:	f043 0301 	orr.w	r3, r3, #1
 8004360:	6713      	str	r3, [r2, #112]	@ 0x70
 8004362:	e00b      	b.n	800437c <HAL_RCC_OscConfig+0x324>
 8004364:	4b58      	ldr	r3, [pc, #352]	@ (80044c8 <HAL_RCC_OscConfig+0x470>)
 8004366:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004368:	4a57      	ldr	r2, [pc, #348]	@ (80044c8 <HAL_RCC_OscConfig+0x470>)
 800436a:	f023 0301 	bic.w	r3, r3, #1
 800436e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004370:	4b55      	ldr	r3, [pc, #340]	@ (80044c8 <HAL_RCC_OscConfig+0x470>)
 8004372:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004374:	4a54      	ldr	r2, [pc, #336]	@ (80044c8 <HAL_RCC_OscConfig+0x470>)
 8004376:	f023 0304 	bic.w	r3, r3, #4
 800437a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d015      	beq.n	80043b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004384:	f7fc ff84 	bl	8001290 <HAL_GetTick>
 8004388:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800438a:	e00a      	b.n	80043a2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800438c:	f7fc ff80 	bl	8001290 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	f241 3288 	movw	r2, #5000	@ 0x1388
 800439a:	4293      	cmp	r3, r2
 800439c:	d901      	bls.n	80043a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e0cb      	b.n	800453a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043a2:	4b49      	ldr	r3, [pc, #292]	@ (80044c8 <HAL_RCC_OscConfig+0x470>)
 80043a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d0ee      	beq.n	800438c <HAL_RCC_OscConfig+0x334>
 80043ae:	e014      	b.n	80043da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043b0:	f7fc ff6e 	bl	8001290 <HAL_GetTick>
 80043b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043b6:	e00a      	b.n	80043ce <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043b8:	f7fc ff6a 	bl	8001290 <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d901      	bls.n	80043ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e0b5      	b.n	800453a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043ce:	4b3e      	ldr	r3, [pc, #248]	@ (80044c8 <HAL_RCC_OscConfig+0x470>)
 80043d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1ee      	bne.n	80043b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80043da:	7dfb      	ldrb	r3, [r7, #23]
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d105      	bne.n	80043ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043e0:	4b39      	ldr	r3, [pc, #228]	@ (80044c8 <HAL_RCC_OscConfig+0x470>)
 80043e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e4:	4a38      	ldr	r2, [pc, #224]	@ (80044c8 <HAL_RCC_OscConfig+0x470>)
 80043e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043ea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f000 80a1 	beq.w	8004538 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043f6:	4b34      	ldr	r3, [pc, #208]	@ (80044c8 <HAL_RCC_OscConfig+0x470>)
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f003 030c 	and.w	r3, r3, #12
 80043fe:	2b08      	cmp	r3, #8
 8004400:	d05c      	beq.n	80044bc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	2b02      	cmp	r3, #2
 8004408:	d141      	bne.n	800448e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800440a:	4b31      	ldr	r3, [pc, #196]	@ (80044d0 <HAL_RCC_OscConfig+0x478>)
 800440c:	2200      	movs	r2, #0
 800440e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004410:	f7fc ff3e 	bl	8001290 <HAL_GetTick>
 8004414:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004416:	e008      	b.n	800442a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004418:	f7fc ff3a 	bl	8001290 <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b02      	cmp	r3, #2
 8004424:	d901      	bls.n	800442a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e087      	b.n	800453a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800442a:	4b27      	ldr	r3, [pc, #156]	@ (80044c8 <HAL_RCC_OscConfig+0x470>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d1f0      	bne.n	8004418 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	69da      	ldr	r2, [r3, #28]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	431a      	orrs	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004444:	019b      	lsls	r3, r3, #6
 8004446:	431a      	orrs	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800444c:	085b      	lsrs	r3, r3, #1
 800444e:	3b01      	subs	r3, #1
 8004450:	041b      	lsls	r3, r3, #16
 8004452:	431a      	orrs	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004458:	061b      	lsls	r3, r3, #24
 800445a:	491b      	ldr	r1, [pc, #108]	@ (80044c8 <HAL_RCC_OscConfig+0x470>)
 800445c:	4313      	orrs	r3, r2
 800445e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004460:	4b1b      	ldr	r3, [pc, #108]	@ (80044d0 <HAL_RCC_OscConfig+0x478>)
 8004462:	2201      	movs	r2, #1
 8004464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004466:	f7fc ff13 	bl	8001290 <HAL_GetTick>
 800446a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800446c:	e008      	b.n	8004480 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800446e:	f7fc ff0f 	bl	8001290 <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	2b02      	cmp	r3, #2
 800447a:	d901      	bls.n	8004480 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e05c      	b.n	800453a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004480:	4b11      	ldr	r3, [pc, #68]	@ (80044c8 <HAL_RCC_OscConfig+0x470>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d0f0      	beq.n	800446e <HAL_RCC_OscConfig+0x416>
 800448c:	e054      	b.n	8004538 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800448e:	4b10      	ldr	r3, [pc, #64]	@ (80044d0 <HAL_RCC_OscConfig+0x478>)
 8004490:	2200      	movs	r2, #0
 8004492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004494:	f7fc fefc 	bl	8001290 <HAL_GetTick>
 8004498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800449a:	e008      	b.n	80044ae <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800449c:	f7fc fef8 	bl	8001290 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d901      	bls.n	80044ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e045      	b.n	800453a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044ae:	4b06      	ldr	r3, [pc, #24]	@ (80044c8 <HAL_RCC_OscConfig+0x470>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1f0      	bne.n	800449c <HAL_RCC_OscConfig+0x444>
 80044ba:	e03d      	b.n	8004538 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d107      	bne.n	80044d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e038      	b.n	800453a <HAL_RCC_OscConfig+0x4e2>
 80044c8:	40023800 	.word	0x40023800
 80044cc:	40007000 	.word	0x40007000
 80044d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044d4:	4b1b      	ldr	r3, [pc, #108]	@ (8004544 <HAL_RCC_OscConfig+0x4ec>)
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	699b      	ldr	r3, [r3, #24]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d028      	beq.n	8004534 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d121      	bne.n	8004534 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d11a      	bne.n	8004534 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004504:	4013      	ands	r3, r2
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800450a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800450c:	4293      	cmp	r3, r2
 800450e:	d111      	bne.n	8004534 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800451a:	085b      	lsrs	r3, r3, #1
 800451c:	3b01      	subs	r3, #1
 800451e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004520:	429a      	cmp	r2, r3
 8004522:	d107      	bne.n	8004534 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800452e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004530:	429a      	cmp	r2, r3
 8004532:	d001      	beq.n	8004538 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e000      	b.n	800453a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3718      	adds	r7, #24
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	40023800 	.word	0x40023800

08004548 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d101      	bne.n	800455c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e0cc      	b.n	80046f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800455c:	4b68      	ldr	r3, [pc, #416]	@ (8004700 <HAL_RCC_ClockConfig+0x1b8>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0307 	and.w	r3, r3, #7
 8004564:	683a      	ldr	r2, [r7, #0]
 8004566:	429a      	cmp	r2, r3
 8004568:	d90c      	bls.n	8004584 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800456a:	4b65      	ldr	r3, [pc, #404]	@ (8004700 <HAL_RCC_ClockConfig+0x1b8>)
 800456c:	683a      	ldr	r2, [r7, #0]
 800456e:	b2d2      	uxtb	r2, r2
 8004570:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004572:	4b63      	ldr	r3, [pc, #396]	@ (8004700 <HAL_RCC_ClockConfig+0x1b8>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0307 	and.w	r3, r3, #7
 800457a:	683a      	ldr	r2, [r7, #0]
 800457c:	429a      	cmp	r2, r3
 800457e:	d001      	beq.n	8004584 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e0b8      	b.n	80046f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0302 	and.w	r3, r3, #2
 800458c:	2b00      	cmp	r3, #0
 800458e:	d020      	beq.n	80045d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0304 	and.w	r3, r3, #4
 8004598:	2b00      	cmp	r3, #0
 800459a:	d005      	beq.n	80045a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800459c:	4b59      	ldr	r3, [pc, #356]	@ (8004704 <HAL_RCC_ClockConfig+0x1bc>)
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	4a58      	ldr	r2, [pc, #352]	@ (8004704 <HAL_RCC_ClockConfig+0x1bc>)
 80045a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80045a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0308 	and.w	r3, r3, #8
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d005      	beq.n	80045c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045b4:	4b53      	ldr	r3, [pc, #332]	@ (8004704 <HAL_RCC_ClockConfig+0x1bc>)
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	4a52      	ldr	r2, [pc, #328]	@ (8004704 <HAL_RCC_ClockConfig+0x1bc>)
 80045ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80045be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045c0:	4b50      	ldr	r3, [pc, #320]	@ (8004704 <HAL_RCC_ClockConfig+0x1bc>)
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	494d      	ldr	r1, [pc, #308]	@ (8004704 <HAL_RCC_ClockConfig+0x1bc>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d044      	beq.n	8004668 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d107      	bne.n	80045f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045e6:	4b47      	ldr	r3, [pc, #284]	@ (8004704 <HAL_RCC_ClockConfig+0x1bc>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d119      	bne.n	8004626 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e07f      	b.n	80046f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d003      	beq.n	8004606 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004602:	2b03      	cmp	r3, #3
 8004604:	d107      	bne.n	8004616 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004606:	4b3f      	ldr	r3, [pc, #252]	@ (8004704 <HAL_RCC_ClockConfig+0x1bc>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d109      	bne.n	8004626 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e06f      	b.n	80046f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004616:	4b3b      	ldr	r3, [pc, #236]	@ (8004704 <HAL_RCC_ClockConfig+0x1bc>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d101      	bne.n	8004626 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e067      	b.n	80046f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004626:	4b37      	ldr	r3, [pc, #220]	@ (8004704 <HAL_RCC_ClockConfig+0x1bc>)
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f023 0203 	bic.w	r2, r3, #3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	4934      	ldr	r1, [pc, #208]	@ (8004704 <HAL_RCC_ClockConfig+0x1bc>)
 8004634:	4313      	orrs	r3, r2
 8004636:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004638:	f7fc fe2a 	bl	8001290 <HAL_GetTick>
 800463c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800463e:	e00a      	b.n	8004656 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004640:	f7fc fe26 	bl	8001290 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800464e:	4293      	cmp	r3, r2
 8004650:	d901      	bls.n	8004656 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e04f      	b.n	80046f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004656:	4b2b      	ldr	r3, [pc, #172]	@ (8004704 <HAL_RCC_ClockConfig+0x1bc>)
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f003 020c 	and.w	r2, r3, #12
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	429a      	cmp	r2, r3
 8004666:	d1eb      	bne.n	8004640 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004668:	4b25      	ldr	r3, [pc, #148]	@ (8004700 <HAL_RCC_ClockConfig+0x1b8>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0307 	and.w	r3, r3, #7
 8004670:	683a      	ldr	r2, [r7, #0]
 8004672:	429a      	cmp	r2, r3
 8004674:	d20c      	bcs.n	8004690 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004676:	4b22      	ldr	r3, [pc, #136]	@ (8004700 <HAL_RCC_ClockConfig+0x1b8>)
 8004678:	683a      	ldr	r2, [r7, #0]
 800467a:	b2d2      	uxtb	r2, r2
 800467c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800467e:	4b20      	ldr	r3, [pc, #128]	@ (8004700 <HAL_RCC_ClockConfig+0x1b8>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0307 	and.w	r3, r3, #7
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	429a      	cmp	r2, r3
 800468a:	d001      	beq.n	8004690 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e032      	b.n	80046f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0304 	and.w	r3, r3, #4
 8004698:	2b00      	cmp	r3, #0
 800469a:	d008      	beq.n	80046ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800469c:	4b19      	ldr	r3, [pc, #100]	@ (8004704 <HAL_RCC_ClockConfig+0x1bc>)
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	4916      	ldr	r1, [pc, #88]	@ (8004704 <HAL_RCC_ClockConfig+0x1bc>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0308 	and.w	r3, r3, #8
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d009      	beq.n	80046ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046ba:	4b12      	ldr	r3, [pc, #72]	@ (8004704 <HAL_RCC_ClockConfig+0x1bc>)
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	00db      	lsls	r3, r3, #3
 80046c8:	490e      	ldr	r1, [pc, #56]	@ (8004704 <HAL_RCC_ClockConfig+0x1bc>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80046ce:	f000 f821 	bl	8004714 <HAL_RCC_GetSysClockFreq>
 80046d2:	4602      	mov	r2, r0
 80046d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004704 <HAL_RCC_ClockConfig+0x1bc>)
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	091b      	lsrs	r3, r3, #4
 80046da:	f003 030f 	and.w	r3, r3, #15
 80046de:	490a      	ldr	r1, [pc, #40]	@ (8004708 <HAL_RCC_ClockConfig+0x1c0>)
 80046e0:	5ccb      	ldrb	r3, [r1, r3]
 80046e2:	fa22 f303 	lsr.w	r3, r2, r3
 80046e6:	4a09      	ldr	r2, [pc, #36]	@ (800470c <HAL_RCC_ClockConfig+0x1c4>)
 80046e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80046ea:	4b09      	ldr	r3, [pc, #36]	@ (8004710 <HAL_RCC_ClockConfig+0x1c8>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4618      	mov	r0, r3
 80046f0:	f7fc fd8a 	bl	8001208 <HAL_InitTick>

  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	40023c00 	.word	0x40023c00
 8004704:	40023800 	.word	0x40023800
 8004708:	0800bdb4 	.word	0x0800bdb4
 800470c:	20000080 	.word	0x20000080
 8004710:	20000084 	.word	0x20000084

08004714 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004714:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004718:	b094      	sub	sp, #80	@ 0x50
 800471a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800471c:	2300      	movs	r3, #0
 800471e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004720:	2300      	movs	r3, #0
 8004722:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004724:	2300      	movs	r3, #0
 8004726:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004728:	2300      	movs	r3, #0
 800472a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800472c:	4b79      	ldr	r3, [pc, #484]	@ (8004914 <HAL_RCC_GetSysClockFreq+0x200>)
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	f003 030c 	and.w	r3, r3, #12
 8004734:	2b08      	cmp	r3, #8
 8004736:	d00d      	beq.n	8004754 <HAL_RCC_GetSysClockFreq+0x40>
 8004738:	2b08      	cmp	r3, #8
 800473a:	f200 80e1 	bhi.w	8004900 <HAL_RCC_GetSysClockFreq+0x1ec>
 800473e:	2b00      	cmp	r3, #0
 8004740:	d002      	beq.n	8004748 <HAL_RCC_GetSysClockFreq+0x34>
 8004742:	2b04      	cmp	r3, #4
 8004744:	d003      	beq.n	800474e <HAL_RCC_GetSysClockFreq+0x3a>
 8004746:	e0db      	b.n	8004900 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004748:	4b73      	ldr	r3, [pc, #460]	@ (8004918 <HAL_RCC_GetSysClockFreq+0x204>)
 800474a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800474c:	e0db      	b.n	8004906 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800474e:	4b73      	ldr	r3, [pc, #460]	@ (800491c <HAL_RCC_GetSysClockFreq+0x208>)
 8004750:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004752:	e0d8      	b.n	8004906 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004754:	4b6f      	ldr	r3, [pc, #444]	@ (8004914 <HAL_RCC_GetSysClockFreq+0x200>)
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800475c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800475e:	4b6d      	ldr	r3, [pc, #436]	@ (8004914 <HAL_RCC_GetSysClockFreq+0x200>)
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d063      	beq.n	8004832 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800476a:	4b6a      	ldr	r3, [pc, #424]	@ (8004914 <HAL_RCC_GetSysClockFreq+0x200>)
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	099b      	lsrs	r3, r3, #6
 8004770:	2200      	movs	r2, #0
 8004772:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004774:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004778:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800477c:	633b      	str	r3, [r7, #48]	@ 0x30
 800477e:	2300      	movs	r3, #0
 8004780:	637b      	str	r3, [r7, #52]	@ 0x34
 8004782:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004786:	4622      	mov	r2, r4
 8004788:	462b      	mov	r3, r5
 800478a:	f04f 0000 	mov.w	r0, #0
 800478e:	f04f 0100 	mov.w	r1, #0
 8004792:	0159      	lsls	r1, r3, #5
 8004794:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004798:	0150      	lsls	r0, r2, #5
 800479a:	4602      	mov	r2, r0
 800479c:	460b      	mov	r3, r1
 800479e:	4621      	mov	r1, r4
 80047a0:	1a51      	subs	r1, r2, r1
 80047a2:	6139      	str	r1, [r7, #16]
 80047a4:	4629      	mov	r1, r5
 80047a6:	eb63 0301 	sbc.w	r3, r3, r1
 80047aa:	617b      	str	r3, [r7, #20]
 80047ac:	f04f 0200 	mov.w	r2, #0
 80047b0:	f04f 0300 	mov.w	r3, #0
 80047b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047b8:	4659      	mov	r1, fp
 80047ba:	018b      	lsls	r3, r1, #6
 80047bc:	4651      	mov	r1, sl
 80047be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047c2:	4651      	mov	r1, sl
 80047c4:	018a      	lsls	r2, r1, #6
 80047c6:	4651      	mov	r1, sl
 80047c8:	ebb2 0801 	subs.w	r8, r2, r1
 80047cc:	4659      	mov	r1, fp
 80047ce:	eb63 0901 	sbc.w	r9, r3, r1
 80047d2:	f04f 0200 	mov.w	r2, #0
 80047d6:	f04f 0300 	mov.w	r3, #0
 80047da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047e6:	4690      	mov	r8, r2
 80047e8:	4699      	mov	r9, r3
 80047ea:	4623      	mov	r3, r4
 80047ec:	eb18 0303 	adds.w	r3, r8, r3
 80047f0:	60bb      	str	r3, [r7, #8]
 80047f2:	462b      	mov	r3, r5
 80047f4:	eb49 0303 	adc.w	r3, r9, r3
 80047f8:	60fb      	str	r3, [r7, #12]
 80047fa:	f04f 0200 	mov.w	r2, #0
 80047fe:	f04f 0300 	mov.w	r3, #0
 8004802:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004806:	4629      	mov	r1, r5
 8004808:	024b      	lsls	r3, r1, #9
 800480a:	4621      	mov	r1, r4
 800480c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004810:	4621      	mov	r1, r4
 8004812:	024a      	lsls	r2, r1, #9
 8004814:	4610      	mov	r0, r2
 8004816:	4619      	mov	r1, r3
 8004818:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800481a:	2200      	movs	r2, #0
 800481c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800481e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004820:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004824:	f7fb fd24 	bl	8000270 <__aeabi_uldivmod>
 8004828:	4602      	mov	r2, r0
 800482a:	460b      	mov	r3, r1
 800482c:	4613      	mov	r3, r2
 800482e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004830:	e058      	b.n	80048e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004832:	4b38      	ldr	r3, [pc, #224]	@ (8004914 <HAL_RCC_GetSysClockFreq+0x200>)
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	099b      	lsrs	r3, r3, #6
 8004838:	2200      	movs	r2, #0
 800483a:	4618      	mov	r0, r3
 800483c:	4611      	mov	r1, r2
 800483e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004842:	623b      	str	r3, [r7, #32]
 8004844:	2300      	movs	r3, #0
 8004846:	627b      	str	r3, [r7, #36]	@ 0x24
 8004848:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800484c:	4642      	mov	r2, r8
 800484e:	464b      	mov	r3, r9
 8004850:	f04f 0000 	mov.w	r0, #0
 8004854:	f04f 0100 	mov.w	r1, #0
 8004858:	0159      	lsls	r1, r3, #5
 800485a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800485e:	0150      	lsls	r0, r2, #5
 8004860:	4602      	mov	r2, r0
 8004862:	460b      	mov	r3, r1
 8004864:	4641      	mov	r1, r8
 8004866:	ebb2 0a01 	subs.w	sl, r2, r1
 800486a:	4649      	mov	r1, r9
 800486c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004870:	f04f 0200 	mov.w	r2, #0
 8004874:	f04f 0300 	mov.w	r3, #0
 8004878:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800487c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004880:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004884:	ebb2 040a 	subs.w	r4, r2, sl
 8004888:	eb63 050b 	sbc.w	r5, r3, fp
 800488c:	f04f 0200 	mov.w	r2, #0
 8004890:	f04f 0300 	mov.w	r3, #0
 8004894:	00eb      	lsls	r3, r5, #3
 8004896:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800489a:	00e2      	lsls	r2, r4, #3
 800489c:	4614      	mov	r4, r2
 800489e:	461d      	mov	r5, r3
 80048a0:	4643      	mov	r3, r8
 80048a2:	18e3      	adds	r3, r4, r3
 80048a4:	603b      	str	r3, [r7, #0]
 80048a6:	464b      	mov	r3, r9
 80048a8:	eb45 0303 	adc.w	r3, r5, r3
 80048ac:	607b      	str	r3, [r7, #4]
 80048ae:	f04f 0200 	mov.w	r2, #0
 80048b2:	f04f 0300 	mov.w	r3, #0
 80048b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80048ba:	4629      	mov	r1, r5
 80048bc:	028b      	lsls	r3, r1, #10
 80048be:	4621      	mov	r1, r4
 80048c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048c4:	4621      	mov	r1, r4
 80048c6:	028a      	lsls	r2, r1, #10
 80048c8:	4610      	mov	r0, r2
 80048ca:	4619      	mov	r1, r3
 80048cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048ce:	2200      	movs	r2, #0
 80048d0:	61bb      	str	r3, [r7, #24]
 80048d2:	61fa      	str	r2, [r7, #28]
 80048d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048d8:	f7fb fcca 	bl	8000270 <__aeabi_uldivmod>
 80048dc:	4602      	mov	r2, r0
 80048de:	460b      	mov	r3, r1
 80048e0:	4613      	mov	r3, r2
 80048e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80048e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004914 <HAL_RCC_GetSysClockFreq+0x200>)
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	0c1b      	lsrs	r3, r3, #16
 80048ea:	f003 0303 	and.w	r3, r3, #3
 80048ee:	3301      	adds	r3, #1
 80048f0:	005b      	lsls	r3, r3, #1
 80048f2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80048f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80048f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80048fe:	e002      	b.n	8004906 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004900:	4b05      	ldr	r3, [pc, #20]	@ (8004918 <HAL_RCC_GetSysClockFreq+0x204>)
 8004902:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004904:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004906:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004908:	4618      	mov	r0, r3
 800490a:	3750      	adds	r7, #80	@ 0x50
 800490c:	46bd      	mov	sp, r7
 800490e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004912:	bf00      	nop
 8004914:	40023800 	.word	0x40023800
 8004918:	00f42400 	.word	0x00f42400
 800491c:	007a1200 	.word	0x007a1200

08004920 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004920:	b480      	push	{r7}
 8004922:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004924:	4b03      	ldr	r3, [pc, #12]	@ (8004934 <HAL_RCC_GetHCLKFreq+0x14>)
 8004926:	681b      	ldr	r3, [r3, #0]
}
 8004928:	4618      	mov	r0, r3
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	20000080 	.word	0x20000080

08004938 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800493c:	f7ff fff0 	bl	8004920 <HAL_RCC_GetHCLKFreq>
 8004940:	4602      	mov	r2, r0
 8004942:	4b05      	ldr	r3, [pc, #20]	@ (8004958 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	0a9b      	lsrs	r3, r3, #10
 8004948:	f003 0307 	and.w	r3, r3, #7
 800494c:	4903      	ldr	r1, [pc, #12]	@ (800495c <HAL_RCC_GetPCLK1Freq+0x24>)
 800494e:	5ccb      	ldrb	r3, [r1, r3]
 8004950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004954:	4618      	mov	r0, r3
 8004956:	bd80      	pop	{r7, pc}
 8004958:	40023800 	.word	0x40023800
 800495c:	0800bdc4 	.word	0x0800bdc4

08004960 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004964:	f7ff ffdc 	bl	8004920 <HAL_RCC_GetHCLKFreq>
 8004968:	4602      	mov	r2, r0
 800496a:	4b05      	ldr	r3, [pc, #20]	@ (8004980 <HAL_RCC_GetPCLK2Freq+0x20>)
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	0b5b      	lsrs	r3, r3, #13
 8004970:	f003 0307 	and.w	r3, r3, #7
 8004974:	4903      	ldr	r1, [pc, #12]	@ (8004984 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004976:	5ccb      	ldrb	r3, [r1, r3]
 8004978:	fa22 f303 	lsr.w	r3, r2, r3
}
 800497c:	4618      	mov	r0, r3
 800497e:	bd80      	pop	{r7, pc}
 8004980:	40023800 	.word	0x40023800
 8004984:	0800bdc4 	.word	0x0800bdc4

08004988 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e041      	b.n	8004a1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d106      	bne.n	80049b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f7fc f9e4 	bl	8000d7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2202      	movs	r2, #2
 80049b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	3304      	adds	r3, #4
 80049c4:	4619      	mov	r1, r3
 80049c6:	4610      	mov	r0, r2
 80049c8:	f000 fa7e 	bl	8004ec8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3708      	adds	r7, #8
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
	...

08004a28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b085      	sub	sp, #20
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d001      	beq.n	8004a40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e04e      	b.n	8004ade <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2202      	movs	r2, #2
 8004a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68da      	ldr	r2, [r3, #12]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f042 0201 	orr.w	r2, r2, #1
 8004a56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a23      	ldr	r2, [pc, #140]	@ (8004aec <HAL_TIM_Base_Start_IT+0xc4>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d022      	beq.n	8004aa8 <HAL_TIM_Base_Start_IT+0x80>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a6a:	d01d      	beq.n	8004aa8 <HAL_TIM_Base_Start_IT+0x80>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a1f      	ldr	r2, [pc, #124]	@ (8004af0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d018      	beq.n	8004aa8 <HAL_TIM_Base_Start_IT+0x80>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a1e      	ldr	r2, [pc, #120]	@ (8004af4 <HAL_TIM_Base_Start_IT+0xcc>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d013      	beq.n	8004aa8 <HAL_TIM_Base_Start_IT+0x80>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a1c      	ldr	r2, [pc, #112]	@ (8004af8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d00e      	beq.n	8004aa8 <HAL_TIM_Base_Start_IT+0x80>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a1b      	ldr	r2, [pc, #108]	@ (8004afc <HAL_TIM_Base_Start_IT+0xd4>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d009      	beq.n	8004aa8 <HAL_TIM_Base_Start_IT+0x80>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a19      	ldr	r2, [pc, #100]	@ (8004b00 <HAL_TIM_Base_Start_IT+0xd8>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d004      	beq.n	8004aa8 <HAL_TIM_Base_Start_IT+0x80>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a18      	ldr	r2, [pc, #96]	@ (8004b04 <HAL_TIM_Base_Start_IT+0xdc>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d111      	bne.n	8004acc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f003 0307 	and.w	r3, r3, #7
 8004ab2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2b06      	cmp	r3, #6
 8004ab8:	d010      	beq.n	8004adc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f042 0201 	orr.w	r2, r2, #1
 8004ac8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aca:	e007      	b.n	8004adc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f042 0201 	orr.w	r2, r2, #1
 8004ada:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3714      	adds	r7, #20
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	40010000 	.word	0x40010000
 8004af0:	40000400 	.word	0x40000400
 8004af4:	40000800 	.word	0x40000800
 8004af8:	40000c00 	.word	0x40000c00
 8004afc:	40010400 	.word	0x40010400
 8004b00:	40014000 	.word	0x40014000
 8004b04:	40001800 	.word	0x40001800

08004b08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d020      	beq.n	8004b6c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f003 0302 	and.w	r3, r3, #2
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d01b      	beq.n	8004b6c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f06f 0202 	mvn.w	r2, #2
 8004b3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2201      	movs	r2, #1
 8004b42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	699b      	ldr	r3, [r3, #24]
 8004b4a:	f003 0303 	and.w	r3, r3, #3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d003      	beq.n	8004b5a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 f999 	bl	8004e8a <HAL_TIM_IC_CaptureCallback>
 8004b58:	e005      	b.n	8004b66 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 f98b 	bl	8004e76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 f99c 	bl	8004e9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	f003 0304 	and.w	r3, r3, #4
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d020      	beq.n	8004bb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f003 0304 	and.w	r3, r3, #4
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d01b      	beq.n	8004bb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f06f 0204 	mvn.w	r2, #4
 8004b88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2202      	movs	r2, #2
 8004b8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d003      	beq.n	8004ba6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 f973 	bl	8004e8a <HAL_TIM_IC_CaptureCallback>
 8004ba4:	e005      	b.n	8004bb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 f965 	bl	8004e76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 f976 	bl	8004e9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	f003 0308 	and.w	r3, r3, #8
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d020      	beq.n	8004c04 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f003 0308 	and.w	r3, r3, #8
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d01b      	beq.n	8004c04 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f06f 0208 	mvn.w	r2, #8
 8004bd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2204      	movs	r2, #4
 8004bda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	69db      	ldr	r3, [r3, #28]
 8004be2:	f003 0303 	and.w	r3, r3, #3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d003      	beq.n	8004bf2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 f94d 	bl	8004e8a <HAL_TIM_IC_CaptureCallback>
 8004bf0:	e005      	b.n	8004bfe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 f93f 	bl	8004e76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f000 f950 	bl	8004e9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	f003 0310 	and.w	r3, r3, #16
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d020      	beq.n	8004c50 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f003 0310 	and.w	r3, r3, #16
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d01b      	beq.n	8004c50 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f06f 0210 	mvn.w	r2, #16
 8004c20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2208      	movs	r2, #8
 8004c26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	69db      	ldr	r3, [r3, #28]
 8004c2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d003      	beq.n	8004c3e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 f927 	bl	8004e8a <HAL_TIM_IC_CaptureCallback>
 8004c3c:	e005      	b.n	8004c4a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 f919 	bl	8004e76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f000 f92a 	bl	8004e9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d00c      	beq.n	8004c74 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f003 0301 	and.w	r3, r3, #1
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d007      	beq.n	8004c74 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f06f 0201 	mvn.w	r2, #1
 8004c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f003 f9bc 	bl	8007fec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00c      	beq.n	8004c98 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d007      	beq.n	8004c98 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 fade 	bl	8005254 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00c      	beq.n	8004cbc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d007      	beq.n	8004cbc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 f8fb 	bl	8004eb2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	f003 0320 	and.w	r3, r3, #32
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00c      	beq.n	8004ce0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f003 0320 	and.w	r3, r3, #32
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d007      	beq.n	8004ce0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f06f 0220 	mvn.w	r2, #32
 8004cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 fab0 	bl	8005240 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ce0:	bf00      	nop
 8004ce2:	3710      	adds	r7, #16
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d101      	bne.n	8004d04 <HAL_TIM_ConfigClockSource+0x1c>
 8004d00:	2302      	movs	r3, #2
 8004d02:	e0b4      	b.n	8004e6e <HAL_TIM_ConfigClockSource+0x186>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2202      	movs	r2, #2
 8004d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004d22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68ba      	ldr	r2, [r7, #8]
 8004d32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d3c:	d03e      	beq.n	8004dbc <HAL_TIM_ConfigClockSource+0xd4>
 8004d3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d42:	f200 8087 	bhi.w	8004e54 <HAL_TIM_ConfigClockSource+0x16c>
 8004d46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d4a:	f000 8086 	beq.w	8004e5a <HAL_TIM_ConfigClockSource+0x172>
 8004d4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d52:	d87f      	bhi.n	8004e54 <HAL_TIM_ConfigClockSource+0x16c>
 8004d54:	2b70      	cmp	r3, #112	@ 0x70
 8004d56:	d01a      	beq.n	8004d8e <HAL_TIM_ConfigClockSource+0xa6>
 8004d58:	2b70      	cmp	r3, #112	@ 0x70
 8004d5a:	d87b      	bhi.n	8004e54 <HAL_TIM_ConfigClockSource+0x16c>
 8004d5c:	2b60      	cmp	r3, #96	@ 0x60
 8004d5e:	d050      	beq.n	8004e02 <HAL_TIM_ConfigClockSource+0x11a>
 8004d60:	2b60      	cmp	r3, #96	@ 0x60
 8004d62:	d877      	bhi.n	8004e54 <HAL_TIM_ConfigClockSource+0x16c>
 8004d64:	2b50      	cmp	r3, #80	@ 0x50
 8004d66:	d03c      	beq.n	8004de2 <HAL_TIM_ConfigClockSource+0xfa>
 8004d68:	2b50      	cmp	r3, #80	@ 0x50
 8004d6a:	d873      	bhi.n	8004e54 <HAL_TIM_ConfigClockSource+0x16c>
 8004d6c:	2b40      	cmp	r3, #64	@ 0x40
 8004d6e:	d058      	beq.n	8004e22 <HAL_TIM_ConfigClockSource+0x13a>
 8004d70:	2b40      	cmp	r3, #64	@ 0x40
 8004d72:	d86f      	bhi.n	8004e54 <HAL_TIM_ConfigClockSource+0x16c>
 8004d74:	2b30      	cmp	r3, #48	@ 0x30
 8004d76:	d064      	beq.n	8004e42 <HAL_TIM_ConfigClockSource+0x15a>
 8004d78:	2b30      	cmp	r3, #48	@ 0x30
 8004d7a:	d86b      	bhi.n	8004e54 <HAL_TIM_ConfigClockSource+0x16c>
 8004d7c:	2b20      	cmp	r3, #32
 8004d7e:	d060      	beq.n	8004e42 <HAL_TIM_ConfigClockSource+0x15a>
 8004d80:	2b20      	cmp	r3, #32
 8004d82:	d867      	bhi.n	8004e54 <HAL_TIM_ConfigClockSource+0x16c>
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d05c      	beq.n	8004e42 <HAL_TIM_ConfigClockSource+0x15a>
 8004d88:	2b10      	cmp	r3, #16
 8004d8a:	d05a      	beq.n	8004e42 <HAL_TIM_ConfigClockSource+0x15a>
 8004d8c:	e062      	b.n	8004e54 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d9e:	f000 f9b3 	bl	8005108 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004db0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68ba      	ldr	r2, [r7, #8]
 8004db8:	609a      	str	r2, [r3, #8]
      break;
 8004dba:	e04f      	b.n	8004e5c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004dcc:	f000 f99c 	bl	8005108 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	689a      	ldr	r2, [r3, #8]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004dde:	609a      	str	r2, [r3, #8]
      break;
 8004de0:	e03c      	b.n	8004e5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dee:	461a      	mov	r2, r3
 8004df0:	f000 f910 	bl	8005014 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2150      	movs	r1, #80	@ 0x50
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f000 f969 	bl	80050d2 <TIM_ITRx_SetConfig>
      break;
 8004e00:	e02c      	b.n	8004e5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e0e:	461a      	mov	r2, r3
 8004e10:	f000 f92f 	bl	8005072 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2160      	movs	r1, #96	@ 0x60
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f000 f959 	bl	80050d2 <TIM_ITRx_SetConfig>
      break;
 8004e20:	e01c      	b.n	8004e5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e2e:	461a      	mov	r2, r3
 8004e30:	f000 f8f0 	bl	8005014 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2140      	movs	r1, #64	@ 0x40
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f000 f949 	bl	80050d2 <TIM_ITRx_SetConfig>
      break;
 8004e40:	e00c      	b.n	8004e5c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	4610      	mov	r0, r2
 8004e4e:	f000 f940 	bl	80050d2 <TIM_ITRx_SetConfig>
      break;
 8004e52:	e003      	b.n	8004e5c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	73fb      	strb	r3, [r7, #15]
      break;
 8004e58:	e000      	b.n	8004e5c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3710      	adds	r7, #16
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}

08004e76 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e76:	b480      	push	{r7}
 8004e78:	b083      	sub	sp, #12
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e7e:	bf00      	nop
 8004e80:	370c      	adds	r7, #12
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr

08004e8a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e8a:	b480      	push	{r7}
 8004e8c:	b083      	sub	sp, #12
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e92:	bf00      	nop
 8004e94:	370c      	adds	r7, #12
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr

08004e9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	b083      	sub	sp, #12
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ea6:	bf00      	nop
 8004ea8:	370c      	adds	r7, #12
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr

08004eb2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004eb2:	b480      	push	{r7}
 8004eb4:	b083      	sub	sp, #12
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004eba:	bf00      	nop
 8004ebc:	370c      	adds	r7, #12
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
	...

08004ec8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a43      	ldr	r2, [pc, #268]	@ (8004fe8 <TIM_Base_SetConfig+0x120>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d013      	beq.n	8004f08 <TIM_Base_SetConfig+0x40>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ee6:	d00f      	beq.n	8004f08 <TIM_Base_SetConfig+0x40>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a40      	ldr	r2, [pc, #256]	@ (8004fec <TIM_Base_SetConfig+0x124>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d00b      	beq.n	8004f08 <TIM_Base_SetConfig+0x40>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a3f      	ldr	r2, [pc, #252]	@ (8004ff0 <TIM_Base_SetConfig+0x128>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d007      	beq.n	8004f08 <TIM_Base_SetConfig+0x40>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a3e      	ldr	r2, [pc, #248]	@ (8004ff4 <TIM_Base_SetConfig+0x12c>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d003      	beq.n	8004f08 <TIM_Base_SetConfig+0x40>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a3d      	ldr	r2, [pc, #244]	@ (8004ff8 <TIM_Base_SetConfig+0x130>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d108      	bne.n	8004f1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a32      	ldr	r2, [pc, #200]	@ (8004fe8 <TIM_Base_SetConfig+0x120>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d02b      	beq.n	8004f7a <TIM_Base_SetConfig+0xb2>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f28:	d027      	beq.n	8004f7a <TIM_Base_SetConfig+0xb2>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a2f      	ldr	r2, [pc, #188]	@ (8004fec <TIM_Base_SetConfig+0x124>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d023      	beq.n	8004f7a <TIM_Base_SetConfig+0xb2>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a2e      	ldr	r2, [pc, #184]	@ (8004ff0 <TIM_Base_SetConfig+0x128>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d01f      	beq.n	8004f7a <TIM_Base_SetConfig+0xb2>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a2d      	ldr	r2, [pc, #180]	@ (8004ff4 <TIM_Base_SetConfig+0x12c>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d01b      	beq.n	8004f7a <TIM_Base_SetConfig+0xb2>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a2c      	ldr	r2, [pc, #176]	@ (8004ff8 <TIM_Base_SetConfig+0x130>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d017      	beq.n	8004f7a <TIM_Base_SetConfig+0xb2>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a2b      	ldr	r2, [pc, #172]	@ (8004ffc <TIM_Base_SetConfig+0x134>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d013      	beq.n	8004f7a <TIM_Base_SetConfig+0xb2>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a2a      	ldr	r2, [pc, #168]	@ (8005000 <TIM_Base_SetConfig+0x138>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d00f      	beq.n	8004f7a <TIM_Base_SetConfig+0xb2>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a29      	ldr	r2, [pc, #164]	@ (8005004 <TIM_Base_SetConfig+0x13c>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d00b      	beq.n	8004f7a <TIM_Base_SetConfig+0xb2>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a28      	ldr	r2, [pc, #160]	@ (8005008 <TIM_Base_SetConfig+0x140>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d007      	beq.n	8004f7a <TIM_Base_SetConfig+0xb2>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a27      	ldr	r2, [pc, #156]	@ (800500c <TIM_Base_SetConfig+0x144>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d003      	beq.n	8004f7a <TIM_Base_SetConfig+0xb2>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a26      	ldr	r2, [pc, #152]	@ (8005010 <TIM_Base_SetConfig+0x148>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d108      	bne.n	8004f8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	695b      	ldr	r3, [r3, #20]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	689a      	ldr	r2, [r3, #8]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a0e      	ldr	r2, [pc, #56]	@ (8004fe8 <TIM_Base_SetConfig+0x120>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d003      	beq.n	8004fba <TIM_Base_SetConfig+0xf2>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a10      	ldr	r2, [pc, #64]	@ (8004ff8 <TIM_Base_SetConfig+0x130>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d103      	bne.n	8004fc2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	691a      	ldr	r2, [r3, #16]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f043 0204 	orr.w	r2, r3, #4
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	601a      	str	r2, [r3, #0]
}
 8004fda:	bf00      	nop
 8004fdc:	3714      	adds	r7, #20
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	40010000 	.word	0x40010000
 8004fec:	40000400 	.word	0x40000400
 8004ff0:	40000800 	.word	0x40000800
 8004ff4:	40000c00 	.word	0x40000c00
 8004ff8:	40010400 	.word	0x40010400
 8004ffc:	40014000 	.word	0x40014000
 8005000:	40014400 	.word	0x40014400
 8005004:	40014800 	.word	0x40014800
 8005008:	40001800 	.word	0x40001800
 800500c:	40001c00 	.word	0x40001c00
 8005010:	40002000 	.word	0x40002000

08005014 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005014:	b480      	push	{r7}
 8005016:	b087      	sub	sp, #28
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6a1b      	ldr	r3, [r3, #32]
 8005024:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6a1b      	ldr	r3, [r3, #32]
 800502a:	f023 0201 	bic.w	r2, r3, #1
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800503e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	011b      	lsls	r3, r3, #4
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	4313      	orrs	r3, r2
 8005048:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	f023 030a 	bic.w	r3, r3, #10
 8005050:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	4313      	orrs	r3, r2
 8005058:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	621a      	str	r2, [r3, #32]
}
 8005066:	bf00      	nop
 8005068:	371c      	adds	r7, #28
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr

08005072 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005072:	b480      	push	{r7}
 8005074:	b087      	sub	sp, #28
 8005076:	af00      	add	r7, sp, #0
 8005078:	60f8      	str	r0, [r7, #12]
 800507a:	60b9      	str	r1, [r7, #8]
 800507c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6a1b      	ldr	r3, [r3, #32]
 8005088:	f023 0210 	bic.w	r2, r3, #16
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800509c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	031b      	lsls	r3, r3, #12
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80050ae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	011b      	lsls	r3, r3, #4
 80050b4:	697a      	ldr	r2, [r7, #20]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	693a      	ldr	r2, [r7, #16]
 80050be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	697a      	ldr	r2, [r7, #20]
 80050c4:	621a      	str	r2, [r3, #32]
}
 80050c6:	bf00      	nop
 80050c8:	371c      	adds	r7, #28
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr

080050d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050d2:	b480      	push	{r7}
 80050d4:	b085      	sub	sp, #20
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
 80050da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050ea:	683a      	ldr	r2, [r7, #0]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	f043 0307 	orr.w	r3, r3, #7
 80050f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	609a      	str	r2, [r3, #8]
}
 80050fc:	bf00      	nop
 80050fe:	3714      	adds	r7, #20
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005108:	b480      	push	{r7}
 800510a:	b087      	sub	sp, #28
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	607a      	str	r2, [r7, #4]
 8005114:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005122:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	021a      	lsls	r2, r3, #8
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	431a      	orrs	r2, r3
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	4313      	orrs	r3, r2
 8005130:	697a      	ldr	r2, [r7, #20]
 8005132:	4313      	orrs	r3, r2
 8005134:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	697a      	ldr	r2, [r7, #20]
 800513a:	609a      	str	r2, [r3, #8]
}
 800513c:	bf00      	nop
 800513e:	371c      	adds	r7, #28
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005148:	b480      	push	{r7}
 800514a:	b085      	sub	sp, #20
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005158:	2b01      	cmp	r3, #1
 800515a:	d101      	bne.n	8005160 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800515c:	2302      	movs	r3, #2
 800515e:	e05a      	b.n	8005216 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2202      	movs	r2, #2
 800516c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005186:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	4313      	orrs	r3, r2
 8005190:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a21      	ldr	r2, [pc, #132]	@ (8005224 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d022      	beq.n	80051ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051ac:	d01d      	beq.n	80051ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a1d      	ldr	r2, [pc, #116]	@ (8005228 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d018      	beq.n	80051ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a1b      	ldr	r2, [pc, #108]	@ (800522c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d013      	beq.n	80051ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a1a      	ldr	r2, [pc, #104]	@ (8005230 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d00e      	beq.n	80051ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a18      	ldr	r2, [pc, #96]	@ (8005234 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d009      	beq.n	80051ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a17      	ldr	r2, [pc, #92]	@ (8005238 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d004      	beq.n	80051ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a15      	ldr	r2, [pc, #84]	@ (800523c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d10c      	bne.n	8005204 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	68ba      	ldr	r2, [r7, #8]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68ba      	ldr	r2, [r7, #8]
 8005202:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3714      	adds	r7, #20
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	40010000 	.word	0x40010000
 8005228:	40000400 	.word	0x40000400
 800522c:	40000800 	.word	0x40000800
 8005230:	40000c00 	.word	0x40000c00
 8005234:	40010400 	.word	0x40010400
 8005238:	40014000 	.word	0x40014000
 800523c:	40001800 	.word	0x40001800

08005240 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005248:	bf00      	nop
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800525c:	bf00      	nop
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d101      	bne.n	800527a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e042      	b.n	8005300 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005280:	b2db      	uxtb	r3, r3
 8005282:	2b00      	cmp	r3, #0
 8005284:	d106      	bne.n	8005294 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f7fb fde2 	bl	8000e58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2224      	movs	r2, #36	@ 0x24
 8005298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68da      	ldr	r2, [r3, #12]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80052aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 fdfb 	bl	8005ea8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	691a      	ldr	r2, [r3, #16]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80052c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	695a      	ldr	r2, [r3, #20]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80052d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68da      	ldr	r2, [r3, #12]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80052e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2220      	movs	r2, #32
 80052ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2220      	movs	r2, #32
 80052f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80052fe:	2300      	movs	r3, #0
}
 8005300:	4618      	mov	r0, r3
 8005302:	3708      	adds	r7, #8
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d101      	bne.n	800531a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e024      	b.n	8005364 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2224      	movs	r2, #36	@ 0x24
 800531e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68da      	ldr	r2, [r3, #12]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005330:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f7fb fe68 	bl	8001008 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	3708      	adds	r7, #8
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b08a      	sub	sp, #40	@ 0x28
 8005370:	af02      	add	r7, sp, #8
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	603b      	str	r3, [r7, #0]
 8005378:	4613      	mov	r3, r2
 800537a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800537c:	2300      	movs	r3, #0
 800537e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005386:	b2db      	uxtb	r3, r3
 8005388:	2b20      	cmp	r3, #32
 800538a:	d175      	bne.n	8005478 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d002      	beq.n	8005398 <HAL_UART_Transmit+0x2c>
 8005392:	88fb      	ldrh	r3, [r7, #6]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d101      	bne.n	800539c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e06e      	b.n	800547a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2200      	movs	r2, #0
 80053a0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2221      	movs	r2, #33	@ 0x21
 80053a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053aa:	f7fb ff71 	bl	8001290 <HAL_GetTick>
 80053ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	88fa      	ldrh	r2, [r7, #6]
 80053b4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	88fa      	ldrh	r2, [r7, #6]
 80053ba:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053c4:	d108      	bne.n	80053d8 <HAL_UART_Transmit+0x6c>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d104      	bne.n	80053d8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80053ce:	2300      	movs	r3, #0
 80053d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	61bb      	str	r3, [r7, #24]
 80053d6:	e003      	b.n	80053e0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053dc:	2300      	movs	r3, #0
 80053de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80053e0:	e02e      	b.n	8005440 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	9300      	str	r3, [sp, #0]
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	2200      	movs	r2, #0
 80053ea:	2180      	movs	r1, #128	@ 0x80
 80053ec:	68f8      	ldr	r0, [r7, #12]
 80053ee:	f000 fb2d 	bl	8005a4c <UART_WaitOnFlagUntilTimeout>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d005      	beq.n	8005404 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2220      	movs	r2, #32
 80053fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005400:	2303      	movs	r3, #3
 8005402:	e03a      	b.n	800547a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d10b      	bne.n	8005422 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	881b      	ldrh	r3, [r3, #0]
 800540e:	461a      	mov	r2, r3
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005418:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	3302      	adds	r3, #2
 800541e:	61bb      	str	r3, [r7, #24]
 8005420:	e007      	b.n	8005432 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	781a      	ldrb	r2, [r3, #0]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	3301      	adds	r3, #1
 8005430:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005436:	b29b      	uxth	r3, r3
 8005438:	3b01      	subs	r3, #1
 800543a:	b29a      	uxth	r2, r3
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005444:	b29b      	uxth	r3, r3
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1cb      	bne.n	80053e2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	9300      	str	r3, [sp, #0]
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	2200      	movs	r2, #0
 8005452:	2140      	movs	r1, #64	@ 0x40
 8005454:	68f8      	ldr	r0, [r7, #12]
 8005456:	f000 faf9 	bl	8005a4c <UART_WaitOnFlagUntilTimeout>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d005      	beq.n	800546c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2220      	movs	r2, #32
 8005464:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e006      	b.n	800547a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2220      	movs	r2, #32
 8005470:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005474:	2300      	movs	r3, #0
 8005476:	e000      	b.n	800547a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005478:	2302      	movs	r3, #2
  }
}
 800547a:	4618      	mov	r0, r3
 800547c:	3720      	adds	r7, #32
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}

08005482 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005482:	b580      	push	{r7, lr}
 8005484:	b084      	sub	sp, #16
 8005486:	af00      	add	r7, sp, #0
 8005488:	60f8      	str	r0, [r7, #12]
 800548a:	60b9      	str	r1, [r7, #8]
 800548c:	4613      	mov	r3, r2
 800548e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005496:	b2db      	uxtb	r3, r3
 8005498:	2b20      	cmp	r3, #32
 800549a:	d112      	bne.n	80054c2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d002      	beq.n	80054a8 <HAL_UART_Receive_IT+0x26>
 80054a2:	88fb      	ldrh	r3, [r7, #6]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d101      	bne.n	80054ac <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e00b      	b.n	80054c4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2200      	movs	r2, #0
 80054b0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80054b2:	88fb      	ldrh	r3, [r7, #6]
 80054b4:	461a      	mov	r2, r3
 80054b6:	68b9      	ldr	r1, [r7, #8]
 80054b8:	68f8      	ldr	r0, [r7, #12]
 80054ba:	f000 fb20 	bl	8005afe <UART_Start_Receive_IT>
 80054be:	4603      	mov	r3, r0
 80054c0:	e000      	b.n	80054c4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80054c2:	2302      	movs	r3, #2
  }
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3710      	adds	r7, #16
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b0ba      	sub	sp, #232	@ 0xe8
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80054f2:	2300      	movs	r3, #0
 80054f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80054f8:	2300      	movs	r3, #0
 80054fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80054fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005502:	f003 030f 	and.w	r3, r3, #15
 8005506:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800550a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800550e:	2b00      	cmp	r3, #0
 8005510:	d10f      	bne.n	8005532 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005516:	f003 0320 	and.w	r3, r3, #32
 800551a:	2b00      	cmp	r3, #0
 800551c:	d009      	beq.n	8005532 <HAL_UART_IRQHandler+0x66>
 800551e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005522:	f003 0320 	and.w	r3, r3, #32
 8005526:	2b00      	cmp	r3, #0
 8005528:	d003      	beq.n	8005532 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 fbfd 	bl	8005d2a <UART_Receive_IT>
      return;
 8005530:	e273      	b.n	8005a1a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005532:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005536:	2b00      	cmp	r3, #0
 8005538:	f000 80de 	beq.w	80056f8 <HAL_UART_IRQHandler+0x22c>
 800553c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005540:	f003 0301 	and.w	r3, r3, #1
 8005544:	2b00      	cmp	r3, #0
 8005546:	d106      	bne.n	8005556 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800554c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005550:	2b00      	cmp	r3, #0
 8005552:	f000 80d1 	beq.w	80056f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800555a:	f003 0301 	and.w	r3, r3, #1
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00b      	beq.n	800557a <HAL_UART_IRQHandler+0xae>
 8005562:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005566:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800556a:	2b00      	cmp	r3, #0
 800556c:	d005      	beq.n	800557a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005572:	f043 0201 	orr.w	r2, r3, #1
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800557a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800557e:	f003 0304 	and.w	r3, r3, #4
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00b      	beq.n	800559e <HAL_UART_IRQHandler+0xd2>
 8005586:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800558a:	f003 0301 	and.w	r3, r3, #1
 800558e:	2b00      	cmp	r3, #0
 8005590:	d005      	beq.n	800559e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005596:	f043 0202 	orr.w	r2, r3, #2
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800559e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055a2:	f003 0302 	and.w	r3, r3, #2
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00b      	beq.n	80055c2 <HAL_UART_IRQHandler+0xf6>
 80055aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055ae:	f003 0301 	and.w	r3, r3, #1
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d005      	beq.n	80055c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055ba:	f043 0204 	orr.w	r2, r3, #4
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80055c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055c6:	f003 0308 	and.w	r3, r3, #8
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d011      	beq.n	80055f2 <HAL_UART_IRQHandler+0x126>
 80055ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055d2:	f003 0320 	and.w	r3, r3, #32
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d105      	bne.n	80055e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80055da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055de:	f003 0301 	and.w	r3, r3, #1
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d005      	beq.n	80055f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055ea:	f043 0208 	orr.w	r2, r3, #8
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	f000 820a 	beq.w	8005a10 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80055fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005600:	f003 0320 	and.w	r3, r3, #32
 8005604:	2b00      	cmp	r3, #0
 8005606:	d008      	beq.n	800561a <HAL_UART_IRQHandler+0x14e>
 8005608:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800560c:	f003 0320 	and.w	r3, r3, #32
 8005610:	2b00      	cmp	r3, #0
 8005612:	d002      	beq.n	800561a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f000 fb88 	bl	8005d2a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	695b      	ldr	r3, [r3, #20]
 8005620:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005624:	2b40      	cmp	r3, #64	@ 0x40
 8005626:	bf0c      	ite	eq
 8005628:	2301      	moveq	r3, #1
 800562a:	2300      	movne	r3, #0
 800562c:	b2db      	uxtb	r3, r3
 800562e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005636:	f003 0308 	and.w	r3, r3, #8
 800563a:	2b00      	cmp	r3, #0
 800563c:	d103      	bne.n	8005646 <HAL_UART_IRQHandler+0x17a>
 800563e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005642:	2b00      	cmp	r3, #0
 8005644:	d04f      	beq.n	80056e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 fa93 	bl	8005b72 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	695b      	ldr	r3, [r3, #20]
 8005652:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005656:	2b40      	cmp	r3, #64	@ 0x40
 8005658:	d141      	bne.n	80056de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	3314      	adds	r3, #20
 8005660:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005664:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005668:	e853 3f00 	ldrex	r3, [r3]
 800566c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005670:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005674:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005678:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	3314      	adds	r3, #20
 8005682:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005686:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800568a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005692:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005696:	e841 2300 	strex	r3, r2, [r1]
 800569a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800569e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1d9      	bne.n	800565a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d013      	beq.n	80056d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056b2:	4a8a      	ldr	r2, [pc, #552]	@ (80058dc <HAL_UART_IRQHandler+0x410>)
 80056b4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056ba:	4618      	mov	r0, r3
 80056bc:	f7fc fc0c 	bl	8001ed8 <HAL_DMA_Abort_IT>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d016      	beq.n	80056f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80056d0:	4610      	mov	r0, r2
 80056d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056d4:	e00e      	b.n	80056f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 f9a2 	bl	8005a20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056dc:	e00a      	b.n	80056f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 f99e 	bl	8005a20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056e4:	e006      	b.n	80056f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 f99a 	bl	8005a20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80056f2:	e18d      	b.n	8005a10 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056f4:	bf00      	nop
    return;
 80056f6:	e18b      	b.n	8005a10 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	f040 8167 	bne.w	80059d0 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005706:	f003 0310 	and.w	r3, r3, #16
 800570a:	2b00      	cmp	r3, #0
 800570c:	f000 8160 	beq.w	80059d0 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8005710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005714:	f003 0310 	and.w	r3, r3, #16
 8005718:	2b00      	cmp	r3, #0
 800571a:	f000 8159 	beq.w	80059d0 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800571e:	2300      	movs	r3, #0
 8005720:	60bb      	str	r3, [r7, #8]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	60bb      	str	r3, [r7, #8]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	60bb      	str	r3, [r7, #8]
 8005732:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	695b      	ldr	r3, [r3, #20]
 800573a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800573e:	2b40      	cmp	r3, #64	@ 0x40
 8005740:	f040 80ce 	bne.w	80058e0 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005750:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005754:	2b00      	cmp	r3, #0
 8005756:	f000 80a9 	beq.w	80058ac <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800575e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005762:	429a      	cmp	r2, r3
 8005764:	f080 80a2 	bcs.w	80058ac <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800576e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005774:	69db      	ldr	r3, [r3, #28]
 8005776:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800577a:	f000 8088 	beq.w	800588e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	330c      	adds	r3, #12
 8005784:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005788:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800578c:	e853 3f00 	ldrex	r3, [r3]
 8005790:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005794:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005798:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800579c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	330c      	adds	r3, #12
 80057a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80057aa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80057ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80057b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80057ba:	e841 2300 	strex	r3, r2, [r1]
 80057be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80057c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1d9      	bne.n	800577e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	3314      	adds	r3, #20
 80057d0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80057d4:	e853 3f00 	ldrex	r3, [r3]
 80057d8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80057da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80057dc:	f023 0301 	bic.w	r3, r3, #1
 80057e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	3314      	adds	r3, #20
 80057ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80057ee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80057f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80057f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80057fa:	e841 2300 	strex	r3, r2, [r1]
 80057fe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005800:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005802:	2b00      	cmp	r3, #0
 8005804:	d1e1      	bne.n	80057ca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	3314      	adds	r3, #20
 800580c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800580e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005810:	e853 3f00 	ldrex	r3, [r3]
 8005814:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005816:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005818:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800581c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	3314      	adds	r3, #20
 8005826:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800582a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800582c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800582e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005830:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005832:	e841 2300 	strex	r3, r2, [r1]
 8005836:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005838:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800583a:	2b00      	cmp	r3, #0
 800583c:	d1e3      	bne.n	8005806 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2220      	movs	r2, #32
 8005842:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	330c      	adds	r3, #12
 8005852:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005854:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005856:	e853 3f00 	ldrex	r3, [r3]
 800585a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800585c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800585e:	f023 0310 	bic.w	r3, r3, #16
 8005862:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	330c      	adds	r3, #12
 800586c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005870:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005872:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005874:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005876:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005878:	e841 2300 	strex	r3, r2, [r1]
 800587c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800587e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005880:	2b00      	cmp	r3, #0
 8005882:	d1e3      	bne.n	800584c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005888:	4618      	mov	r0, r3
 800588a:	f7fc fab5 	bl	8001df8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2202      	movs	r2, #2
 8005892:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800589c:	b29b      	uxth	r3, r3
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	4619      	mov	r1, r3
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f000 f8c5 	bl	8005a34 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80058aa:	e0b3      	b.n	8005a14 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80058b0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80058b4:	429a      	cmp	r2, r3
 80058b6:	f040 80ad 	bne.w	8005a14 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058be:	69db      	ldr	r3, [r3, #28]
 80058c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058c4:	f040 80a6 	bne.w	8005a14 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2202      	movs	r2, #2
 80058cc:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80058d2:	4619      	mov	r1, r3
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 f8ad 	bl	8005a34 <HAL_UARTEx_RxEventCallback>
      return;
 80058da:	e09b      	b.n	8005a14 <HAL_UART_IRQHandler+0x548>
 80058dc:	08005c39 	.word	0x08005c39
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	f000 808e 	beq.w	8005a18 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80058fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005900:	2b00      	cmp	r3, #0
 8005902:	f000 8089 	beq.w	8005a18 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	330c      	adds	r3, #12
 800590c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800590e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005910:	e853 3f00 	ldrex	r3, [r3]
 8005914:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005916:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005918:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800591c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	330c      	adds	r3, #12
 8005926:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800592a:	647a      	str	r2, [r7, #68]	@ 0x44
 800592c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800592e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005930:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005932:	e841 2300 	strex	r3, r2, [r1]
 8005936:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005938:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1e3      	bne.n	8005906 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	3314      	adds	r3, #20
 8005944:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005948:	e853 3f00 	ldrex	r3, [r3]
 800594c:	623b      	str	r3, [r7, #32]
   return(result);
 800594e:	6a3b      	ldr	r3, [r7, #32]
 8005950:	f023 0301 	bic.w	r3, r3, #1
 8005954:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	3314      	adds	r3, #20
 800595e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005962:	633a      	str	r2, [r7, #48]	@ 0x30
 8005964:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005966:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005968:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800596a:	e841 2300 	strex	r3, r2, [r1]
 800596e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1e3      	bne.n	800593e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2220      	movs	r2, #32
 800597a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	330c      	adds	r3, #12
 800598a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	e853 3f00 	ldrex	r3, [r3]
 8005992:	60fb      	str	r3, [r7, #12]
   return(result);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f023 0310 	bic.w	r3, r3, #16
 800599a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	330c      	adds	r3, #12
 80059a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80059a8:	61fa      	str	r2, [r7, #28]
 80059aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ac:	69b9      	ldr	r1, [r7, #24]
 80059ae:	69fa      	ldr	r2, [r7, #28]
 80059b0:	e841 2300 	strex	r3, r2, [r1]
 80059b4:	617b      	str	r3, [r7, #20]
   return(result);
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d1e3      	bne.n	8005984 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2202      	movs	r2, #2
 80059c0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80059c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80059c6:	4619      	mov	r1, r3
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 f833 	bl	8005a34 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80059ce:	e023      	b.n	8005a18 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80059d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d009      	beq.n	80059f0 <HAL_UART_IRQHandler+0x524>
 80059dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d003      	beq.n	80059f0 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 f936 	bl	8005c5a <UART_Transmit_IT>
    return;
 80059ee:	e014      	b.n	8005a1a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80059f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d00e      	beq.n	8005a1a <HAL_UART_IRQHandler+0x54e>
 80059fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d008      	beq.n	8005a1a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f000 f976 	bl	8005cfa <UART_EndTransmit_IT>
    return;
 8005a0e:	e004      	b.n	8005a1a <HAL_UART_IRQHandler+0x54e>
    return;
 8005a10:	bf00      	nop
 8005a12:	e002      	b.n	8005a1a <HAL_UART_IRQHandler+0x54e>
      return;
 8005a14:	bf00      	nop
 8005a16:	e000      	b.n	8005a1a <HAL_UART_IRQHandler+0x54e>
      return;
 8005a18:	bf00      	nop
  }
}
 8005a1a:	37e8      	adds	r7, #232	@ 0xe8
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005a28:	bf00      	nop
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a40:	bf00      	nop
 8005a42:	370c      	adds	r7, #12
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr

08005a4c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b086      	sub	sp, #24
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	60b9      	str	r1, [r7, #8]
 8005a56:	603b      	str	r3, [r7, #0]
 8005a58:	4613      	mov	r3, r2
 8005a5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a5c:	e03b      	b.n	8005ad6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a5e:	6a3b      	ldr	r3, [r7, #32]
 8005a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a64:	d037      	beq.n	8005ad6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a66:	f7fb fc13 	bl	8001290 <HAL_GetTick>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	6a3a      	ldr	r2, [r7, #32]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d302      	bcc.n	8005a7c <UART_WaitOnFlagUntilTimeout+0x30>
 8005a76:	6a3b      	ldr	r3, [r7, #32]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d101      	bne.n	8005a80 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	e03a      	b.n	8005af6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	f003 0304 	and.w	r3, r3, #4
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d023      	beq.n	8005ad6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	2b80      	cmp	r3, #128	@ 0x80
 8005a92:	d020      	beq.n	8005ad6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	2b40      	cmp	r3, #64	@ 0x40
 8005a98:	d01d      	beq.n	8005ad6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 0308 	and.w	r3, r3, #8
 8005aa4:	2b08      	cmp	r3, #8
 8005aa6:	d116      	bne.n	8005ad6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	617b      	str	r3, [r7, #20]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	617b      	str	r3, [r7, #20]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	617b      	str	r3, [r7, #20]
 8005abc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005abe:	68f8      	ldr	r0, [r7, #12]
 8005ac0:	f000 f857 	bl	8005b72 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2208      	movs	r2, #8
 8005ac8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e00f      	b.n	8005af6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	4013      	ands	r3, r2
 8005ae0:	68ba      	ldr	r2, [r7, #8]
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	bf0c      	ite	eq
 8005ae6:	2301      	moveq	r3, #1
 8005ae8:	2300      	movne	r3, #0
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	461a      	mov	r2, r3
 8005aee:	79fb      	ldrb	r3, [r7, #7]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d0b4      	beq.n	8005a5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3718      	adds	r7, #24
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}

08005afe <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005afe:	b480      	push	{r7}
 8005b00:	b085      	sub	sp, #20
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	60f8      	str	r0, [r7, #12]
 8005b06:	60b9      	str	r1, [r7, #8]
 8005b08:	4613      	mov	r3, r2
 8005b0a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	68ba      	ldr	r2, [r7, #8]
 8005b10:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	88fa      	ldrh	r2, [r7, #6]
 8005b16:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	88fa      	ldrh	r2, [r7, #6]
 8005b1c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2200      	movs	r2, #0
 8005b22:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2222      	movs	r2, #34	@ 0x22
 8005b28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d007      	beq.n	8005b44 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68da      	ldr	r2, [r3, #12]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b42:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	695a      	ldr	r2, [r3, #20]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f042 0201 	orr.w	r2, r2, #1
 8005b52:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68da      	ldr	r2, [r3, #12]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f042 0220 	orr.w	r2, r2, #32
 8005b62:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3714      	adds	r7, #20
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr

08005b72 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b72:	b480      	push	{r7}
 8005b74:	b095      	sub	sp, #84	@ 0x54
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	330c      	adds	r3, #12
 8005b80:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b84:	e853 3f00 	ldrex	r3, [r3]
 8005b88:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b90:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	330c      	adds	r3, #12
 8005b98:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005b9a:	643a      	str	r2, [r7, #64]	@ 0x40
 8005b9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005ba0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ba2:	e841 2300 	strex	r3, r2, [r1]
 8005ba6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1e5      	bne.n	8005b7a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	3314      	adds	r3, #20
 8005bb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb6:	6a3b      	ldr	r3, [r7, #32]
 8005bb8:	e853 3f00 	ldrex	r3, [r3]
 8005bbc:	61fb      	str	r3, [r7, #28]
   return(result);
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	f023 0301 	bic.w	r3, r3, #1
 8005bc4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	3314      	adds	r3, #20
 8005bcc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005bce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005bd4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005bd6:	e841 2300 	strex	r3, r2, [r1]
 8005bda:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1e5      	bne.n	8005bae <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d119      	bne.n	8005c1e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	330c      	adds	r3, #12
 8005bf0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	e853 3f00 	ldrex	r3, [r3]
 8005bf8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	f023 0310 	bic.w	r3, r3, #16
 8005c00:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	330c      	adds	r3, #12
 8005c08:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c0a:	61ba      	str	r2, [r7, #24]
 8005c0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c0e:	6979      	ldr	r1, [r7, #20]
 8005c10:	69ba      	ldr	r2, [r7, #24]
 8005c12:	e841 2300 	strex	r3, r2, [r1]
 8005c16:	613b      	str	r3, [r7, #16]
   return(result);
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d1e5      	bne.n	8005bea <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2220      	movs	r2, #32
 8005c22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005c2c:	bf00      	nop
 8005c2e:	3754      	adds	r7, #84	@ 0x54
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c44:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c4c:	68f8      	ldr	r0, [r7, #12]
 8005c4e:	f7ff fee7 	bl	8005a20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c52:	bf00      	nop
 8005c54:	3710      	adds	r7, #16
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}

08005c5a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005c5a:	b480      	push	{r7}
 8005c5c:	b085      	sub	sp, #20
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	2b21      	cmp	r3, #33	@ 0x21
 8005c6c:	d13e      	bne.n	8005cec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c76:	d114      	bne.n	8005ca2 <UART_Transmit_IT+0x48>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d110      	bne.n	8005ca2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6a1b      	ldr	r3, [r3, #32]
 8005c84:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	881b      	ldrh	r3, [r3, #0]
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c94:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a1b      	ldr	r3, [r3, #32]
 8005c9a:	1c9a      	adds	r2, r3, #2
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	621a      	str	r2, [r3, #32]
 8005ca0:	e008      	b.n	8005cb4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a1b      	ldr	r3, [r3, #32]
 8005ca6:	1c59      	adds	r1, r3, #1
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	6211      	str	r1, [r2, #32]
 8005cac:	781a      	ldrb	r2, [r3, #0]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d10f      	bne.n	8005ce8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68da      	ldr	r2, [r3, #12]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005cd6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68da      	ldr	r2, [r3, #12]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ce6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	e000      	b.n	8005cee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005cec:	2302      	movs	r3, #2
  }
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3714      	adds	r7, #20
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr

08005cfa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005cfa:	b580      	push	{r7, lr}
 8005cfc:	b082      	sub	sp, #8
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68da      	ldr	r2, [r3, #12]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d10:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2220      	movs	r2, #32
 8005d16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f002 f932 	bl	8007f84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3708      	adds	r7, #8
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}

08005d2a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005d2a:	b580      	push	{r7, lr}
 8005d2c:	b08c      	sub	sp, #48	@ 0x30
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8005d32:	2300      	movs	r3, #0
 8005d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8005d36:	2300      	movs	r3, #0
 8005d38:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	2b22      	cmp	r3, #34	@ 0x22
 8005d44:	f040 80aa 	bne.w	8005e9c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d50:	d115      	bne.n	8005d7e <UART_Receive_IT+0x54>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d111      	bne.n	8005d7e <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d5e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d6c:	b29a      	uxth	r2, r3
 8005d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d70:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d76:	1c9a      	adds	r2, r3, #2
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	629a      	str	r2, [r3, #40]	@ 0x28
 8005d7c:	e024      	b.n	8005dc8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d8c:	d007      	beq.n	8005d9e <UART_Receive_IT+0x74>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d10a      	bne.n	8005dac <UART_Receive_IT+0x82>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d106      	bne.n	8005dac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	b2da      	uxtb	r2, r3
 8005da6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005da8:	701a      	strb	r2, [r3, #0]
 8005daa:	e008      	b.n	8005dbe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005db8:	b2da      	uxtb	r2, r3
 8005dba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dbc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dc2:	1c5a      	adds	r2, r3, #1
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d15d      	bne.n	8005e98 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68da      	ldr	r2, [r3, #12]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f022 0220 	bic.w	r2, r2, #32
 8005dea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	68da      	ldr	r2, [r3, #12]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005dfa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	695a      	ldr	r2, [r3, #20]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f022 0201 	bic.w	r2, r2, #1
 8005e0a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2220      	movs	r2, #32
 8005e10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d135      	bne.n	8005e8e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	330c      	adds	r3, #12
 8005e2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	e853 3f00 	ldrex	r3, [r3]
 8005e36:	613b      	str	r3, [r7, #16]
   return(result);
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	f023 0310 	bic.w	r3, r3, #16
 8005e3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	330c      	adds	r3, #12
 8005e46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e48:	623a      	str	r2, [r7, #32]
 8005e4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e4c:	69f9      	ldr	r1, [r7, #28]
 8005e4e:	6a3a      	ldr	r2, [r7, #32]
 8005e50:	e841 2300 	strex	r3, r2, [r1]
 8005e54:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d1e5      	bne.n	8005e28 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 0310 	and.w	r3, r3, #16
 8005e66:	2b10      	cmp	r3, #16
 8005e68:	d10a      	bne.n	8005e80 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	60fb      	str	r3, [r7, #12]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	60fb      	str	r3, [r7, #12]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	60fb      	str	r3, [r7, #12]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005e84:	4619      	mov	r1, r3
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f7ff fdd4 	bl	8005a34 <HAL_UARTEx_RxEventCallback>
 8005e8c:	e002      	b.n	8005e94 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f002 f98a 	bl	80081a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005e94:	2300      	movs	r3, #0
 8005e96:	e002      	b.n	8005e9e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	e000      	b.n	8005e9e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005e9c:	2302      	movs	r3, #2
  }
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3730      	adds	r7, #48	@ 0x30
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
	...

08005ea8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ea8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005eac:	b0c0      	sub	sp, #256	@ 0x100
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ec4:	68d9      	ldr	r1, [r3, #12]
 8005ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	ea40 0301 	orr.w	r3, r0, r1
 8005ed0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ed6:	689a      	ldr	r2, [r3, #8]
 8005ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	431a      	orrs	r2, r3
 8005ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ee4:	695b      	ldr	r3, [r3, #20]
 8005ee6:	431a      	orrs	r2, r3
 8005ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eec:	69db      	ldr	r3, [r3, #28]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005f00:	f021 010c 	bic.w	r1, r1, #12
 8005f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005f0e:	430b      	orrs	r3, r1
 8005f10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	695b      	ldr	r3, [r3, #20]
 8005f1a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f22:	6999      	ldr	r1, [r3, #24]
 8005f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	ea40 0301 	orr.w	r3, r0, r1
 8005f2e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	4b8f      	ldr	r3, [pc, #572]	@ (8006174 <UART_SetConfig+0x2cc>)
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d005      	beq.n	8005f48 <UART_SetConfig+0xa0>
 8005f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	4b8d      	ldr	r3, [pc, #564]	@ (8006178 <UART_SetConfig+0x2d0>)
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d104      	bne.n	8005f52 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f48:	f7fe fd0a 	bl	8004960 <HAL_RCC_GetPCLK2Freq>
 8005f4c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005f50:	e003      	b.n	8005f5a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f52:	f7fe fcf1 	bl	8004938 <HAL_RCC_GetPCLK1Freq>
 8005f56:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f5e:	69db      	ldr	r3, [r3, #28]
 8005f60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f64:	f040 810c 	bne.w	8006180 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005f72:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005f76:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005f7a:	4622      	mov	r2, r4
 8005f7c:	462b      	mov	r3, r5
 8005f7e:	1891      	adds	r1, r2, r2
 8005f80:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005f82:	415b      	adcs	r3, r3
 8005f84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f86:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005f8a:	4621      	mov	r1, r4
 8005f8c:	eb12 0801 	adds.w	r8, r2, r1
 8005f90:	4629      	mov	r1, r5
 8005f92:	eb43 0901 	adc.w	r9, r3, r1
 8005f96:	f04f 0200 	mov.w	r2, #0
 8005f9a:	f04f 0300 	mov.w	r3, #0
 8005f9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005fa2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005fa6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005faa:	4690      	mov	r8, r2
 8005fac:	4699      	mov	r9, r3
 8005fae:	4623      	mov	r3, r4
 8005fb0:	eb18 0303 	adds.w	r3, r8, r3
 8005fb4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005fb8:	462b      	mov	r3, r5
 8005fba:	eb49 0303 	adc.w	r3, r9, r3
 8005fbe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005fce:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005fd2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005fd6:	460b      	mov	r3, r1
 8005fd8:	18db      	adds	r3, r3, r3
 8005fda:	653b      	str	r3, [r7, #80]	@ 0x50
 8005fdc:	4613      	mov	r3, r2
 8005fde:	eb42 0303 	adc.w	r3, r2, r3
 8005fe2:	657b      	str	r3, [r7, #84]	@ 0x54
 8005fe4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005fe8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005fec:	f7fa f940 	bl	8000270 <__aeabi_uldivmod>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	460b      	mov	r3, r1
 8005ff4:	4b61      	ldr	r3, [pc, #388]	@ (800617c <UART_SetConfig+0x2d4>)
 8005ff6:	fba3 2302 	umull	r2, r3, r3, r2
 8005ffa:	095b      	lsrs	r3, r3, #5
 8005ffc:	011c      	lsls	r4, r3, #4
 8005ffe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006002:	2200      	movs	r2, #0
 8006004:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006008:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800600c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006010:	4642      	mov	r2, r8
 8006012:	464b      	mov	r3, r9
 8006014:	1891      	adds	r1, r2, r2
 8006016:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006018:	415b      	adcs	r3, r3
 800601a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800601c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006020:	4641      	mov	r1, r8
 8006022:	eb12 0a01 	adds.w	sl, r2, r1
 8006026:	4649      	mov	r1, r9
 8006028:	eb43 0b01 	adc.w	fp, r3, r1
 800602c:	f04f 0200 	mov.w	r2, #0
 8006030:	f04f 0300 	mov.w	r3, #0
 8006034:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006038:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800603c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006040:	4692      	mov	sl, r2
 8006042:	469b      	mov	fp, r3
 8006044:	4643      	mov	r3, r8
 8006046:	eb1a 0303 	adds.w	r3, sl, r3
 800604a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800604e:	464b      	mov	r3, r9
 8006050:	eb4b 0303 	adc.w	r3, fp, r3
 8006054:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006064:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006068:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800606c:	460b      	mov	r3, r1
 800606e:	18db      	adds	r3, r3, r3
 8006070:	643b      	str	r3, [r7, #64]	@ 0x40
 8006072:	4613      	mov	r3, r2
 8006074:	eb42 0303 	adc.w	r3, r2, r3
 8006078:	647b      	str	r3, [r7, #68]	@ 0x44
 800607a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800607e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006082:	f7fa f8f5 	bl	8000270 <__aeabi_uldivmod>
 8006086:	4602      	mov	r2, r0
 8006088:	460b      	mov	r3, r1
 800608a:	4611      	mov	r1, r2
 800608c:	4b3b      	ldr	r3, [pc, #236]	@ (800617c <UART_SetConfig+0x2d4>)
 800608e:	fba3 2301 	umull	r2, r3, r3, r1
 8006092:	095b      	lsrs	r3, r3, #5
 8006094:	2264      	movs	r2, #100	@ 0x64
 8006096:	fb02 f303 	mul.w	r3, r2, r3
 800609a:	1acb      	subs	r3, r1, r3
 800609c:	00db      	lsls	r3, r3, #3
 800609e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80060a2:	4b36      	ldr	r3, [pc, #216]	@ (800617c <UART_SetConfig+0x2d4>)
 80060a4:	fba3 2302 	umull	r2, r3, r3, r2
 80060a8:	095b      	lsrs	r3, r3, #5
 80060aa:	005b      	lsls	r3, r3, #1
 80060ac:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80060b0:	441c      	add	r4, r3
 80060b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060b6:	2200      	movs	r2, #0
 80060b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80060bc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80060c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80060c4:	4642      	mov	r2, r8
 80060c6:	464b      	mov	r3, r9
 80060c8:	1891      	adds	r1, r2, r2
 80060ca:	63b9      	str	r1, [r7, #56]	@ 0x38
 80060cc:	415b      	adcs	r3, r3
 80060ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80060d4:	4641      	mov	r1, r8
 80060d6:	1851      	adds	r1, r2, r1
 80060d8:	6339      	str	r1, [r7, #48]	@ 0x30
 80060da:	4649      	mov	r1, r9
 80060dc:	414b      	adcs	r3, r1
 80060de:	637b      	str	r3, [r7, #52]	@ 0x34
 80060e0:	f04f 0200 	mov.w	r2, #0
 80060e4:	f04f 0300 	mov.w	r3, #0
 80060e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80060ec:	4659      	mov	r1, fp
 80060ee:	00cb      	lsls	r3, r1, #3
 80060f0:	4651      	mov	r1, sl
 80060f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060f6:	4651      	mov	r1, sl
 80060f8:	00ca      	lsls	r2, r1, #3
 80060fa:	4610      	mov	r0, r2
 80060fc:	4619      	mov	r1, r3
 80060fe:	4603      	mov	r3, r0
 8006100:	4642      	mov	r2, r8
 8006102:	189b      	adds	r3, r3, r2
 8006104:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006108:	464b      	mov	r3, r9
 800610a:	460a      	mov	r2, r1
 800610c:	eb42 0303 	adc.w	r3, r2, r3
 8006110:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006120:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006124:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006128:	460b      	mov	r3, r1
 800612a:	18db      	adds	r3, r3, r3
 800612c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800612e:	4613      	mov	r3, r2
 8006130:	eb42 0303 	adc.w	r3, r2, r3
 8006134:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006136:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800613a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800613e:	f7fa f897 	bl	8000270 <__aeabi_uldivmod>
 8006142:	4602      	mov	r2, r0
 8006144:	460b      	mov	r3, r1
 8006146:	4b0d      	ldr	r3, [pc, #52]	@ (800617c <UART_SetConfig+0x2d4>)
 8006148:	fba3 1302 	umull	r1, r3, r3, r2
 800614c:	095b      	lsrs	r3, r3, #5
 800614e:	2164      	movs	r1, #100	@ 0x64
 8006150:	fb01 f303 	mul.w	r3, r1, r3
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	00db      	lsls	r3, r3, #3
 8006158:	3332      	adds	r3, #50	@ 0x32
 800615a:	4a08      	ldr	r2, [pc, #32]	@ (800617c <UART_SetConfig+0x2d4>)
 800615c:	fba2 2303 	umull	r2, r3, r2, r3
 8006160:	095b      	lsrs	r3, r3, #5
 8006162:	f003 0207 	and.w	r2, r3, #7
 8006166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4422      	add	r2, r4
 800616e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006170:	e106      	b.n	8006380 <UART_SetConfig+0x4d8>
 8006172:	bf00      	nop
 8006174:	40011000 	.word	0x40011000
 8006178:	40011400 	.word	0x40011400
 800617c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006180:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006184:	2200      	movs	r2, #0
 8006186:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800618a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800618e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006192:	4642      	mov	r2, r8
 8006194:	464b      	mov	r3, r9
 8006196:	1891      	adds	r1, r2, r2
 8006198:	6239      	str	r1, [r7, #32]
 800619a:	415b      	adcs	r3, r3
 800619c:	627b      	str	r3, [r7, #36]	@ 0x24
 800619e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80061a2:	4641      	mov	r1, r8
 80061a4:	1854      	adds	r4, r2, r1
 80061a6:	4649      	mov	r1, r9
 80061a8:	eb43 0501 	adc.w	r5, r3, r1
 80061ac:	f04f 0200 	mov.w	r2, #0
 80061b0:	f04f 0300 	mov.w	r3, #0
 80061b4:	00eb      	lsls	r3, r5, #3
 80061b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80061ba:	00e2      	lsls	r2, r4, #3
 80061bc:	4614      	mov	r4, r2
 80061be:	461d      	mov	r5, r3
 80061c0:	4643      	mov	r3, r8
 80061c2:	18e3      	adds	r3, r4, r3
 80061c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80061c8:	464b      	mov	r3, r9
 80061ca:	eb45 0303 	adc.w	r3, r5, r3
 80061ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80061d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80061de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80061e2:	f04f 0200 	mov.w	r2, #0
 80061e6:	f04f 0300 	mov.w	r3, #0
 80061ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80061ee:	4629      	mov	r1, r5
 80061f0:	008b      	lsls	r3, r1, #2
 80061f2:	4621      	mov	r1, r4
 80061f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061f8:	4621      	mov	r1, r4
 80061fa:	008a      	lsls	r2, r1, #2
 80061fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006200:	f7fa f836 	bl	8000270 <__aeabi_uldivmod>
 8006204:	4602      	mov	r2, r0
 8006206:	460b      	mov	r3, r1
 8006208:	4b60      	ldr	r3, [pc, #384]	@ (800638c <UART_SetConfig+0x4e4>)
 800620a:	fba3 2302 	umull	r2, r3, r3, r2
 800620e:	095b      	lsrs	r3, r3, #5
 8006210:	011c      	lsls	r4, r3, #4
 8006212:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006216:	2200      	movs	r2, #0
 8006218:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800621c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006220:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006224:	4642      	mov	r2, r8
 8006226:	464b      	mov	r3, r9
 8006228:	1891      	adds	r1, r2, r2
 800622a:	61b9      	str	r1, [r7, #24]
 800622c:	415b      	adcs	r3, r3
 800622e:	61fb      	str	r3, [r7, #28]
 8006230:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006234:	4641      	mov	r1, r8
 8006236:	1851      	adds	r1, r2, r1
 8006238:	6139      	str	r1, [r7, #16]
 800623a:	4649      	mov	r1, r9
 800623c:	414b      	adcs	r3, r1
 800623e:	617b      	str	r3, [r7, #20]
 8006240:	f04f 0200 	mov.w	r2, #0
 8006244:	f04f 0300 	mov.w	r3, #0
 8006248:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800624c:	4659      	mov	r1, fp
 800624e:	00cb      	lsls	r3, r1, #3
 8006250:	4651      	mov	r1, sl
 8006252:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006256:	4651      	mov	r1, sl
 8006258:	00ca      	lsls	r2, r1, #3
 800625a:	4610      	mov	r0, r2
 800625c:	4619      	mov	r1, r3
 800625e:	4603      	mov	r3, r0
 8006260:	4642      	mov	r2, r8
 8006262:	189b      	adds	r3, r3, r2
 8006264:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006268:	464b      	mov	r3, r9
 800626a:	460a      	mov	r2, r1
 800626c:	eb42 0303 	adc.w	r3, r2, r3
 8006270:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800627e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006280:	f04f 0200 	mov.w	r2, #0
 8006284:	f04f 0300 	mov.w	r3, #0
 8006288:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800628c:	4649      	mov	r1, r9
 800628e:	008b      	lsls	r3, r1, #2
 8006290:	4641      	mov	r1, r8
 8006292:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006296:	4641      	mov	r1, r8
 8006298:	008a      	lsls	r2, r1, #2
 800629a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800629e:	f7f9 ffe7 	bl	8000270 <__aeabi_uldivmod>
 80062a2:	4602      	mov	r2, r0
 80062a4:	460b      	mov	r3, r1
 80062a6:	4611      	mov	r1, r2
 80062a8:	4b38      	ldr	r3, [pc, #224]	@ (800638c <UART_SetConfig+0x4e4>)
 80062aa:	fba3 2301 	umull	r2, r3, r3, r1
 80062ae:	095b      	lsrs	r3, r3, #5
 80062b0:	2264      	movs	r2, #100	@ 0x64
 80062b2:	fb02 f303 	mul.w	r3, r2, r3
 80062b6:	1acb      	subs	r3, r1, r3
 80062b8:	011b      	lsls	r3, r3, #4
 80062ba:	3332      	adds	r3, #50	@ 0x32
 80062bc:	4a33      	ldr	r2, [pc, #204]	@ (800638c <UART_SetConfig+0x4e4>)
 80062be:	fba2 2303 	umull	r2, r3, r2, r3
 80062c2:	095b      	lsrs	r3, r3, #5
 80062c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80062c8:	441c      	add	r4, r3
 80062ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062ce:	2200      	movs	r2, #0
 80062d0:	673b      	str	r3, [r7, #112]	@ 0x70
 80062d2:	677a      	str	r2, [r7, #116]	@ 0x74
 80062d4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80062d8:	4642      	mov	r2, r8
 80062da:	464b      	mov	r3, r9
 80062dc:	1891      	adds	r1, r2, r2
 80062de:	60b9      	str	r1, [r7, #8]
 80062e0:	415b      	adcs	r3, r3
 80062e2:	60fb      	str	r3, [r7, #12]
 80062e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80062e8:	4641      	mov	r1, r8
 80062ea:	1851      	adds	r1, r2, r1
 80062ec:	6039      	str	r1, [r7, #0]
 80062ee:	4649      	mov	r1, r9
 80062f0:	414b      	adcs	r3, r1
 80062f2:	607b      	str	r3, [r7, #4]
 80062f4:	f04f 0200 	mov.w	r2, #0
 80062f8:	f04f 0300 	mov.w	r3, #0
 80062fc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006300:	4659      	mov	r1, fp
 8006302:	00cb      	lsls	r3, r1, #3
 8006304:	4651      	mov	r1, sl
 8006306:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800630a:	4651      	mov	r1, sl
 800630c:	00ca      	lsls	r2, r1, #3
 800630e:	4610      	mov	r0, r2
 8006310:	4619      	mov	r1, r3
 8006312:	4603      	mov	r3, r0
 8006314:	4642      	mov	r2, r8
 8006316:	189b      	adds	r3, r3, r2
 8006318:	66bb      	str	r3, [r7, #104]	@ 0x68
 800631a:	464b      	mov	r3, r9
 800631c:	460a      	mov	r2, r1
 800631e:	eb42 0303 	adc.w	r3, r2, r3
 8006322:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	663b      	str	r3, [r7, #96]	@ 0x60
 800632e:	667a      	str	r2, [r7, #100]	@ 0x64
 8006330:	f04f 0200 	mov.w	r2, #0
 8006334:	f04f 0300 	mov.w	r3, #0
 8006338:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800633c:	4649      	mov	r1, r9
 800633e:	008b      	lsls	r3, r1, #2
 8006340:	4641      	mov	r1, r8
 8006342:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006346:	4641      	mov	r1, r8
 8006348:	008a      	lsls	r2, r1, #2
 800634a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800634e:	f7f9 ff8f 	bl	8000270 <__aeabi_uldivmod>
 8006352:	4602      	mov	r2, r0
 8006354:	460b      	mov	r3, r1
 8006356:	4b0d      	ldr	r3, [pc, #52]	@ (800638c <UART_SetConfig+0x4e4>)
 8006358:	fba3 1302 	umull	r1, r3, r3, r2
 800635c:	095b      	lsrs	r3, r3, #5
 800635e:	2164      	movs	r1, #100	@ 0x64
 8006360:	fb01 f303 	mul.w	r3, r1, r3
 8006364:	1ad3      	subs	r3, r2, r3
 8006366:	011b      	lsls	r3, r3, #4
 8006368:	3332      	adds	r3, #50	@ 0x32
 800636a:	4a08      	ldr	r2, [pc, #32]	@ (800638c <UART_SetConfig+0x4e4>)
 800636c:	fba2 2303 	umull	r2, r3, r2, r3
 8006370:	095b      	lsrs	r3, r3, #5
 8006372:	f003 020f 	and.w	r2, r3, #15
 8006376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4422      	add	r2, r4
 800637e:	609a      	str	r2, [r3, #8]
}
 8006380:	bf00      	nop
 8006382:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006386:	46bd      	mov	sp, r7
 8006388:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800638c:	51eb851f 	.word	0x51eb851f

08006390 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006390:	b084      	sub	sp, #16
 8006392:	b580      	push	{r7, lr}
 8006394:	b084      	sub	sp, #16
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
 800639a:	f107 001c 	add.w	r0, r7, #28
 800639e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80063a2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d123      	bne.n	80063f2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ae:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80063be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80063d2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d105      	bne.n	80063e6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f001 fae8 	bl	80079bc <USB_CoreReset>
 80063ec:	4603      	mov	r3, r0
 80063ee:	73fb      	strb	r3, [r7, #15]
 80063f0:	e01b      	b.n	800642a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f001 fadc 	bl	80079bc <USB_CoreReset>
 8006404:	4603      	mov	r3, r0
 8006406:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006408:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800640c:	2b00      	cmp	r3, #0
 800640e:	d106      	bne.n	800641e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006414:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	639a      	str	r2, [r3, #56]	@ 0x38
 800641c:	e005      	b.n	800642a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006422:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800642a:	7fbb      	ldrb	r3, [r7, #30]
 800642c:	2b01      	cmp	r3, #1
 800642e:	d10b      	bne.n	8006448 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	f043 0206 	orr.w	r2, r3, #6
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	f043 0220 	orr.w	r2, r3, #32
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006448:	7bfb      	ldrb	r3, [r7, #15]
}
 800644a:	4618      	mov	r0, r3
 800644c:	3710      	adds	r7, #16
 800644e:	46bd      	mov	sp, r7
 8006450:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006454:	b004      	add	sp, #16
 8006456:	4770      	bx	lr

08006458 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006458:	b480      	push	{r7}
 800645a:	b087      	sub	sp, #28
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	4613      	mov	r3, r2
 8006464:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006466:	79fb      	ldrb	r3, [r7, #7]
 8006468:	2b02      	cmp	r3, #2
 800646a:	d165      	bne.n	8006538 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	4a41      	ldr	r2, [pc, #260]	@ (8006574 <USB_SetTurnaroundTime+0x11c>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d906      	bls.n	8006482 <USB_SetTurnaroundTime+0x2a>
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	4a40      	ldr	r2, [pc, #256]	@ (8006578 <USB_SetTurnaroundTime+0x120>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d202      	bcs.n	8006482 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800647c:	230f      	movs	r3, #15
 800647e:	617b      	str	r3, [r7, #20]
 8006480:	e062      	b.n	8006548 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	4a3c      	ldr	r2, [pc, #240]	@ (8006578 <USB_SetTurnaroundTime+0x120>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d306      	bcc.n	8006498 <USB_SetTurnaroundTime+0x40>
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	4a3b      	ldr	r2, [pc, #236]	@ (800657c <USB_SetTurnaroundTime+0x124>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d202      	bcs.n	8006498 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006492:	230e      	movs	r3, #14
 8006494:	617b      	str	r3, [r7, #20]
 8006496:	e057      	b.n	8006548 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	4a38      	ldr	r2, [pc, #224]	@ (800657c <USB_SetTurnaroundTime+0x124>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d306      	bcc.n	80064ae <USB_SetTurnaroundTime+0x56>
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	4a37      	ldr	r2, [pc, #220]	@ (8006580 <USB_SetTurnaroundTime+0x128>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d202      	bcs.n	80064ae <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80064a8:	230d      	movs	r3, #13
 80064aa:	617b      	str	r3, [r7, #20]
 80064ac:	e04c      	b.n	8006548 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	4a33      	ldr	r2, [pc, #204]	@ (8006580 <USB_SetTurnaroundTime+0x128>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d306      	bcc.n	80064c4 <USB_SetTurnaroundTime+0x6c>
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	4a32      	ldr	r2, [pc, #200]	@ (8006584 <USB_SetTurnaroundTime+0x12c>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d802      	bhi.n	80064c4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80064be:	230c      	movs	r3, #12
 80064c0:	617b      	str	r3, [r7, #20]
 80064c2:	e041      	b.n	8006548 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	4a2f      	ldr	r2, [pc, #188]	@ (8006584 <USB_SetTurnaroundTime+0x12c>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d906      	bls.n	80064da <USB_SetTurnaroundTime+0x82>
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	4a2e      	ldr	r2, [pc, #184]	@ (8006588 <USB_SetTurnaroundTime+0x130>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d802      	bhi.n	80064da <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80064d4:	230b      	movs	r3, #11
 80064d6:	617b      	str	r3, [r7, #20]
 80064d8:	e036      	b.n	8006548 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	4a2a      	ldr	r2, [pc, #168]	@ (8006588 <USB_SetTurnaroundTime+0x130>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d906      	bls.n	80064f0 <USB_SetTurnaroundTime+0x98>
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	4a29      	ldr	r2, [pc, #164]	@ (800658c <USB_SetTurnaroundTime+0x134>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d802      	bhi.n	80064f0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80064ea:	230a      	movs	r3, #10
 80064ec:	617b      	str	r3, [r7, #20]
 80064ee:	e02b      	b.n	8006548 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	4a26      	ldr	r2, [pc, #152]	@ (800658c <USB_SetTurnaroundTime+0x134>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d906      	bls.n	8006506 <USB_SetTurnaroundTime+0xae>
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	4a25      	ldr	r2, [pc, #148]	@ (8006590 <USB_SetTurnaroundTime+0x138>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d202      	bcs.n	8006506 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006500:	2309      	movs	r3, #9
 8006502:	617b      	str	r3, [r7, #20]
 8006504:	e020      	b.n	8006548 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	4a21      	ldr	r2, [pc, #132]	@ (8006590 <USB_SetTurnaroundTime+0x138>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d306      	bcc.n	800651c <USB_SetTurnaroundTime+0xc4>
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	4a20      	ldr	r2, [pc, #128]	@ (8006594 <USB_SetTurnaroundTime+0x13c>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d802      	bhi.n	800651c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006516:	2308      	movs	r3, #8
 8006518:	617b      	str	r3, [r7, #20]
 800651a:	e015      	b.n	8006548 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	4a1d      	ldr	r2, [pc, #116]	@ (8006594 <USB_SetTurnaroundTime+0x13c>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d906      	bls.n	8006532 <USB_SetTurnaroundTime+0xda>
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	4a1c      	ldr	r2, [pc, #112]	@ (8006598 <USB_SetTurnaroundTime+0x140>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d202      	bcs.n	8006532 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800652c:	2307      	movs	r3, #7
 800652e:	617b      	str	r3, [r7, #20]
 8006530:	e00a      	b.n	8006548 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006532:	2306      	movs	r3, #6
 8006534:	617b      	str	r3, [r7, #20]
 8006536:	e007      	b.n	8006548 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006538:	79fb      	ldrb	r3, [r7, #7]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d102      	bne.n	8006544 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800653e:	2309      	movs	r3, #9
 8006540:	617b      	str	r3, [r7, #20]
 8006542:	e001      	b.n	8006548 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006544:	2309      	movs	r3, #9
 8006546:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	68da      	ldr	r2, [r3, #12]
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	029b      	lsls	r3, r3, #10
 800655c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006560:	431a      	orrs	r2, r3
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006566:	2300      	movs	r3, #0
}
 8006568:	4618      	mov	r0, r3
 800656a:	371c      	adds	r7, #28
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr
 8006574:	00d8acbf 	.word	0x00d8acbf
 8006578:	00e4e1c0 	.word	0x00e4e1c0
 800657c:	00f42400 	.word	0x00f42400
 8006580:	01067380 	.word	0x01067380
 8006584:	011a499f 	.word	0x011a499f
 8006588:	01312cff 	.word	0x01312cff
 800658c:	014ca43f 	.word	0x014ca43f
 8006590:	016e3600 	.word	0x016e3600
 8006594:	01a6ab1f 	.word	0x01a6ab1f
 8006598:	01e84800 	.word	0x01e84800

0800659c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	f043 0201 	orr.w	r2, r3, #1
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	370c      	adds	r7, #12
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr

080065be <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80065be:	b480      	push	{r7}
 80065c0:	b083      	sub	sp, #12
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	f023 0201 	bic.w	r2, r3, #1
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80065d2:	2300      	movs	r3, #0
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	370c      	adds	r7, #12
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	460b      	mov	r3, r1
 80065ea:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80065ec:	2300      	movs	r3, #0
 80065ee:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80065fc:	78fb      	ldrb	r3, [r7, #3]
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d115      	bne.n	800662e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800660e:	200a      	movs	r0, #10
 8006610:	f7fa fe4a 	bl	80012a8 <HAL_Delay>
      ms += 10U;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	330a      	adds	r3, #10
 8006618:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f001 f93f 	bl	800789e <USB_GetMode>
 8006620:	4603      	mov	r3, r0
 8006622:	2b01      	cmp	r3, #1
 8006624:	d01e      	beq.n	8006664 <USB_SetCurrentMode+0x84>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2bc7      	cmp	r3, #199	@ 0xc7
 800662a:	d9f0      	bls.n	800660e <USB_SetCurrentMode+0x2e>
 800662c:	e01a      	b.n	8006664 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800662e:	78fb      	ldrb	r3, [r7, #3]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d115      	bne.n	8006660 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006640:	200a      	movs	r0, #10
 8006642:	f7fa fe31 	bl	80012a8 <HAL_Delay>
      ms += 10U;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	330a      	adds	r3, #10
 800664a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f001 f926 	bl	800789e <USB_GetMode>
 8006652:	4603      	mov	r3, r0
 8006654:	2b00      	cmp	r3, #0
 8006656:	d005      	beq.n	8006664 <USB_SetCurrentMode+0x84>
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2bc7      	cmp	r3, #199	@ 0xc7
 800665c:	d9f0      	bls.n	8006640 <USB_SetCurrentMode+0x60>
 800665e:	e001      	b.n	8006664 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	e005      	b.n	8006670 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2bc8      	cmp	r3, #200	@ 0xc8
 8006668:	d101      	bne.n	800666e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e000      	b.n	8006670 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800666e:	2300      	movs	r3, #0
}
 8006670:	4618      	mov	r0, r3
 8006672:	3710      	adds	r7, #16
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006678:	b084      	sub	sp, #16
 800667a:	b580      	push	{r7, lr}
 800667c:	b086      	sub	sp, #24
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
 8006682:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006686:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800668a:	2300      	movs	r3, #0
 800668c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006692:	2300      	movs	r3, #0
 8006694:	613b      	str	r3, [r7, #16]
 8006696:	e009      	b.n	80066ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	3340      	adds	r3, #64	@ 0x40
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	4413      	add	r3, r2
 80066a2:	2200      	movs	r2, #0
 80066a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	3301      	adds	r3, #1
 80066aa:	613b      	str	r3, [r7, #16]
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	2b0e      	cmp	r3, #14
 80066b0:	d9f2      	bls.n	8006698 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80066b2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d11c      	bne.n	80066f4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	68fa      	ldr	r2, [r7, #12]
 80066c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80066c8:	f043 0302 	orr.w	r3, r3, #2
 80066cc:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066d2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066de:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066ea:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	639a      	str	r2, [r3, #56]	@ 0x38
 80066f2:	e00b      	b.n	800670c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066f8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006704:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006712:	461a      	mov	r2, r3
 8006714:	2300      	movs	r3, #0
 8006716:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006718:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800671c:	2b01      	cmp	r3, #1
 800671e:	d10d      	bne.n	800673c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006720:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006724:	2b00      	cmp	r3, #0
 8006726:	d104      	bne.n	8006732 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006728:	2100      	movs	r1, #0
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 f968 	bl	8006a00 <USB_SetDevSpeed>
 8006730:	e008      	b.n	8006744 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006732:	2101      	movs	r1, #1
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 f963 	bl	8006a00 <USB_SetDevSpeed>
 800673a:	e003      	b.n	8006744 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800673c:	2103      	movs	r1, #3
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 f95e 	bl	8006a00 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006744:	2110      	movs	r1, #16
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 f8fa 	bl	8006940 <USB_FlushTxFifo>
 800674c:	4603      	mov	r3, r0
 800674e:	2b00      	cmp	r3, #0
 8006750:	d001      	beq.n	8006756 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 f924 	bl	80069a4 <USB_FlushRxFifo>
 800675c:	4603      	mov	r3, r0
 800675e:	2b00      	cmp	r3, #0
 8006760:	d001      	beq.n	8006766 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800676c:	461a      	mov	r2, r3
 800676e:	2300      	movs	r3, #0
 8006770:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006778:	461a      	mov	r2, r3
 800677a:	2300      	movs	r3, #0
 800677c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006784:	461a      	mov	r2, r3
 8006786:	2300      	movs	r3, #0
 8006788:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800678a:	2300      	movs	r3, #0
 800678c:	613b      	str	r3, [r7, #16]
 800678e:	e043      	b.n	8006818 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	015a      	lsls	r2, r3, #5
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	4413      	add	r3, r2
 8006798:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80067a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80067a6:	d118      	bne.n	80067da <USB_DevInit+0x162>
    {
      if (i == 0U)
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d10a      	bne.n	80067c4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	015a      	lsls	r2, r3, #5
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	4413      	add	r3, r2
 80067b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067ba:	461a      	mov	r2, r3
 80067bc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80067c0:	6013      	str	r3, [r2, #0]
 80067c2:	e013      	b.n	80067ec <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	015a      	lsls	r2, r3, #5
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	4413      	add	r3, r2
 80067cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067d0:	461a      	mov	r2, r3
 80067d2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80067d6:	6013      	str	r3, [r2, #0]
 80067d8:	e008      	b.n	80067ec <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	015a      	lsls	r2, r3, #5
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	4413      	add	r3, r2
 80067e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067e6:	461a      	mov	r2, r3
 80067e8:	2300      	movs	r3, #0
 80067ea:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	015a      	lsls	r2, r3, #5
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	4413      	add	r3, r2
 80067f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067f8:	461a      	mov	r2, r3
 80067fa:	2300      	movs	r3, #0
 80067fc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	015a      	lsls	r2, r3, #5
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	4413      	add	r3, r2
 8006806:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800680a:	461a      	mov	r2, r3
 800680c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006810:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	3301      	adds	r3, #1
 8006816:	613b      	str	r3, [r7, #16]
 8006818:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800681c:	461a      	mov	r2, r3
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	4293      	cmp	r3, r2
 8006822:	d3b5      	bcc.n	8006790 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006824:	2300      	movs	r3, #0
 8006826:	613b      	str	r3, [r7, #16]
 8006828:	e043      	b.n	80068b2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	015a      	lsls	r2, r3, #5
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	4413      	add	r3, r2
 8006832:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800683c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006840:	d118      	bne.n	8006874 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d10a      	bne.n	800685e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	015a      	lsls	r2, r3, #5
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	4413      	add	r3, r2
 8006850:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006854:	461a      	mov	r2, r3
 8006856:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800685a:	6013      	str	r3, [r2, #0]
 800685c:	e013      	b.n	8006886 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	015a      	lsls	r2, r3, #5
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	4413      	add	r3, r2
 8006866:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800686a:	461a      	mov	r2, r3
 800686c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006870:	6013      	str	r3, [r2, #0]
 8006872:	e008      	b.n	8006886 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	015a      	lsls	r2, r3, #5
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	4413      	add	r3, r2
 800687c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006880:	461a      	mov	r2, r3
 8006882:	2300      	movs	r3, #0
 8006884:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	015a      	lsls	r2, r3, #5
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	4413      	add	r3, r2
 800688e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006892:	461a      	mov	r2, r3
 8006894:	2300      	movs	r3, #0
 8006896:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	015a      	lsls	r2, r3, #5
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	4413      	add	r3, r2
 80068a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068a4:	461a      	mov	r2, r3
 80068a6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80068aa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	3301      	adds	r3, #1
 80068b0:	613b      	str	r3, [r7, #16]
 80068b2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80068b6:	461a      	mov	r2, r3
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d3b5      	bcc.n	800682a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068c4:	691b      	ldr	r3, [r3, #16]
 80068c6:	68fa      	ldr	r2, [r7, #12]
 80068c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80068cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068d0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80068de:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80068e0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d105      	bne.n	80068f4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	699b      	ldr	r3, [r3, #24]
 80068ec:	f043 0210 	orr.w	r2, r3, #16
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	699a      	ldr	r2, [r3, #24]
 80068f8:	4b10      	ldr	r3, [pc, #64]	@ (800693c <USB_DevInit+0x2c4>)
 80068fa:	4313      	orrs	r3, r2
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006900:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006904:	2b00      	cmp	r3, #0
 8006906:	d005      	beq.n	8006914 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	699b      	ldr	r3, [r3, #24]
 800690c:	f043 0208 	orr.w	r2, r3, #8
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006914:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006918:	2b01      	cmp	r3, #1
 800691a:	d107      	bne.n	800692c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	699b      	ldr	r3, [r3, #24]
 8006920:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006924:	f043 0304 	orr.w	r3, r3, #4
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800692c:	7dfb      	ldrb	r3, [r7, #23]
}
 800692e:	4618      	mov	r0, r3
 8006930:	3718      	adds	r7, #24
 8006932:	46bd      	mov	sp, r7
 8006934:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006938:	b004      	add	sp, #16
 800693a:	4770      	bx	lr
 800693c:	803c3800 	.word	0x803c3800

08006940 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006940:	b480      	push	{r7}
 8006942:	b085      	sub	sp, #20
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800694a:	2300      	movs	r3, #0
 800694c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	3301      	adds	r3, #1
 8006952:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800695a:	d901      	bls.n	8006960 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800695c:	2303      	movs	r3, #3
 800695e:	e01b      	b.n	8006998 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	691b      	ldr	r3, [r3, #16]
 8006964:	2b00      	cmp	r3, #0
 8006966:	daf2      	bge.n	800694e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006968:	2300      	movs	r3, #0
 800696a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	019b      	lsls	r3, r3, #6
 8006970:	f043 0220 	orr.w	r2, r3, #32
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	3301      	adds	r3, #1
 800697c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006984:	d901      	bls.n	800698a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006986:	2303      	movs	r3, #3
 8006988:	e006      	b.n	8006998 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	f003 0320 	and.w	r3, r3, #32
 8006992:	2b20      	cmp	r3, #32
 8006994:	d0f0      	beq.n	8006978 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	3714      	adds	r7, #20
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b085      	sub	sp, #20
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069ac:	2300      	movs	r3, #0
 80069ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	3301      	adds	r3, #1
 80069b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80069bc:	d901      	bls.n	80069c2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80069be:	2303      	movs	r3, #3
 80069c0:	e018      	b.n	80069f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	daf2      	bge.n	80069b0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80069ca:	2300      	movs	r3, #0
 80069cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2210      	movs	r2, #16
 80069d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	3301      	adds	r3, #1
 80069d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80069e0:	d901      	bls.n	80069e6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80069e2:	2303      	movs	r3, #3
 80069e4:	e006      	b.n	80069f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	f003 0310 	and.w	r3, r3, #16
 80069ee:	2b10      	cmp	r3, #16
 80069f0:	d0f0      	beq.n	80069d4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80069f2:	2300      	movs	r3, #0
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3714      	adds	r7, #20
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b085      	sub	sp, #20
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	460b      	mov	r3, r1
 8006a0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	78fb      	ldrb	r3, [r7, #3]
 8006a1a:	68f9      	ldr	r1, [r7, #12]
 8006a1c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a20:	4313      	orrs	r3, r2
 8006a22:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3714      	adds	r7, #20
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr

08006a32 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a32:	b480      	push	{r7}
 8006a34:	b087      	sub	sp, #28
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	f003 0306 	and.w	r3, r3, #6
 8006a4a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d102      	bne.n	8006a58 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006a52:	2300      	movs	r3, #0
 8006a54:	75fb      	strb	r3, [r7, #23]
 8006a56:	e00a      	b.n	8006a6e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2b02      	cmp	r3, #2
 8006a5c:	d002      	beq.n	8006a64 <USB_GetDevSpeed+0x32>
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2b06      	cmp	r3, #6
 8006a62:	d102      	bne.n	8006a6a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006a64:	2302      	movs	r3, #2
 8006a66:	75fb      	strb	r3, [r7, #23]
 8006a68:	e001      	b.n	8006a6e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006a6a:	230f      	movs	r3, #15
 8006a6c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006a6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	371c      	adds	r7, #28
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b085      	sub	sp, #20
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	785b      	ldrb	r3, [r3, #1]
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d13a      	bne.n	8006b0e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a9e:	69da      	ldr	r2, [r3, #28]
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	f003 030f 	and.w	r3, r3, #15
 8006aa8:	2101      	movs	r1, #1
 8006aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	68f9      	ldr	r1, [r7, #12]
 8006ab2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	015a      	lsls	r2, r3, #5
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	4413      	add	r3, r2
 8006ac2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d155      	bne.n	8006b7c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	015a      	lsls	r2, r3, #5
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	4413      	add	r3, r2
 8006ad8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	791b      	ldrb	r3, [r3, #4]
 8006aea:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006aec:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	059b      	lsls	r3, r3, #22
 8006af2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006af4:	4313      	orrs	r3, r2
 8006af6:	68ba      	ldr	r2, [r7, #8]
 8006af8:	0151      	lsls	r1, r2, #5
 8006afa:	68fa      	ldr	r2, [r7, #12]
 8006afc:	440a      	add	r2, r1
 8006afe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b0a:	6013      	str	r3, [r2, #0]
 8006b0c:	e036      	b.n	8006b7c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b14:	69da      	ldr	r2, [r3, #28]
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	f003 030f 	and.w	r3, r3, #15
 8006b1e:	2101      	movs	r1, #1
 8006b20:	fa01 f303 	lsl.w	r3, r1, r3
 8006b24:	041b      	lsls	r3, r3, #16
 8006b26:	68f9      	ldr	r1, [r7, #12]
 8006b28:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	015a      	lsls	r2, r3, #5
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	4413      	add	r3, r2
 8006b38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d11a      	bne.n	8006b7c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	015a      	lsls	r2, r3, #5
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	4413      	add	r3, r2
 8006b4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	791b      	ldrb	r3, [r3, #4]
 8006b60:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006b62:	430b      	orrs	r3, r1
 8006b64:	4313      	orrs	r3, r2
 8006b66:	68ba      	ldr	r2, [r7, #8]
 8006b68:	0151      	lsls	r1, r2, #5
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	440a      	add	r2, r1
 8006b6e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b7a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3714      	adds	r7, #20
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr
	...

08006b8c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b085      	sub	sp, #20
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	785b      	ldrb	r3, [r3, #1]
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d161      	bne.n	8006c6c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	015a      	lsls	r2, r3, #5
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	4413      	add	r3, r2
 8006bb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006bba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006bbe:	d11f      	bne.n	8006c00 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	015a      	lsls	r2, r3, #5
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	4413      	add	r3, r2
 8006bc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	68ba      	ldr	r2, [r7, #8]
 8006bd0:	0151      	lsls	r1, r2, #5
 8006bd2:	68fa      	ldr	r2, [r7, #12]
 8006bd4:	440a      	add	r2, r1
 8006bd6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006bda:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006bde:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	015a      	lsls	r2, r3, #5
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	4413      	add	r3, r2
 8006be8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	68ba      	ldr	r2, [r7, #8]
 8006bf0:	0151      	lsls	r1, r2, #5
 8006bf2:	68fa      	ldr	r2, [r7, #12]
 8006bf4:	440a      	add	r2, r1
 8006bf6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006bfa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006bfe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	f003 030f 	and.w	r3, r3, #15
 8006c10:	2101      	movs	r1, #1
 8006c12:	fa01 f303 	lsl.w	r3, r1, r3
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	43db      	mvns	r3, r3
 8006c1a:	68f9      	ldr	r1, [r7, #12]
 8006c1c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006c20:	4013      	ands	r3, r2
 8006c22:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c2a:	69da      	ldr	r2, [r3, #28]
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	f003 030f 	and.w	r3, r3, #15
 8006c34:	2101      	movs	r1, #1
 8006c36:	fa01 f303 	lsl.w	r3, r1, r3
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	43db      	mvns	r3, r3
 8006c3e:	68f9      	ldr	r1, [r7, #12]
 8006c40:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006c44:	4013      	ands	r3, r2
 8006c46:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	015a      	lsls	r2, r3, #5
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	4413      	add	r3, r2
 8006c50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	0159      	lsls	r1, r3, #5
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	440b      	add	r3, r1
 8006c5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c62:	4619      	mov	r1, r3
 8006c64:	4b35      	ldr	r3, [pc, #212]	@ (8006d3c <USB_DeactivateEndpoint+0x1b0>)
 8006c66:	4013      	ands	r3, r2
 8006c68:	600b      	str	r3, [r1, #0]
 8006c6a:	e060      	b.n	8006d2e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	015a      	lsls	r2, r3, #5
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	4413      	add	r3, r2
 8006c74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c7e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c82:	d11f      	bne.n	8006cc4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	015a      	lsls	r2, r3, #5
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	68ba      	ldr	r2, [r7, #8]
 8006c94:	0151      	lsls	r1, r2, #5
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	440a      	add	r2, r1
 8006c9a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c9e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006ca2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	015a      	lsls	r2, r3, #5
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	4413      	add	r3, r2
 8006cac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	68ba      	ldr	r2, [r7, #8]
 8006cb4:	0151      	lsls	r1, r2, #5
 8006cb6:	68fa      	ldr	r2, [r7, #12]
 8006cb8:	440a      	add	r2, r1
 8006cba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006cbe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006cc2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	f003 030f 	and.w	r3, r3, #15
 8006cd4:	2101      	movs	r1, #1
 8006cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8006cda:	041b      	lsls	r3, r3, #16
 8006cdc:	43db      	mvns	r3, r3
 8006cde:	68f9      	ldr	r1, [r7, #12]
 8006ce0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006ce4:	4013      	ands	r3, r2
 8006ce6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cee:	69da      	ldr	r2, [r3, #28]
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	f003 030f 	and.w	r3, r3, #15
 8006cf8:	2101      	movs	r1, #1
 8006cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8006cfe:	041b      	lsls	r3, r3, #16
 8006d00:	43db      	mvns	r3, r3
 8006d02:	68f9      	ldr	r1, [r7, #12]
 8006d04:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006d08:	4013      	ands	r3, r2
 8006d0a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	015a      	lsls	r2, r3, #5
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	4413      	add	r3, r2
 8006d14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	0159      	lsls	r1, r3, #5
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	440b      	add	r3, r1
 8006d22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d26:	4619      	mov	r1, r3
 8006d28:	4b05      	ldr	r3, [pc, #20]	@ (8006d40 <USB_DeactivateEndpoint+0x1b4>)
 8006d2a:	4013      	ands	r3, r2
 8006d2c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3714      	adds	r7, #20
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr
 8006d3c:	ec337800 	.word	0xec337800
 8006d40:	eff37800 	.word	0xeff37800

08006d44 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b08a      	sub	sp, #40	@ 0x28
 8006d48:	af02      	add	r7, sp, #8
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	4613      	mov	r3, r2
 8006d50:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	785b      	ldrb	r3, [r3, #1]
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	f040 817f 	bne.w	8007064 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d132      	bne.n	8006dd4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	015a      	lsls	r2, r3, #5
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	4413      	add	r3, r2
 8006d76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d7a:	691b      	ldr	r3, [r3, #16]
 8006d7c:	69ba      	ldr	r2, [r7, #24]
 8006d7e:	0151      	lsls	r1, r2, #5
 8006d80:	69fa      	ldr	r2, [r7, #28]
 8006d82:	440a      	add	r2, r1
 8006d84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d88:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006d8c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006d90:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	015a      	lsls	r2, r3, #5
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	4413      	add	r3, r2
 8006d9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d9e:	691b      	ldr	r3, [r3, #16]
 8006da0:	69ba      	ldr	r2, [r7, #24]
 8006da2:	0151      	lsls	r1, r2, #5
 8006da4:	69fa      	ldr	r2, [r7, #28]
 8006da6:	440a      	add	r2, r1
 8006da8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006dac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006db0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006db2:	69bb      	ldr	r3, [r7, #24]
 8006db4:	015a      	lsls	r2, r3, #5
 8006db6:	69fb      	ldr	r3, [r7, #28]
 8006db8:	4413      	add	r3, r2
 8006dba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dbe:	691b      	ldr	r3, [r3, #16]
 8006dc0:	69ba      	ldr	r2, [r7, #24]
 8006dc2:	0151      	lsls	r1, r2, #5
 8006dc4:	69fa      	ldr	r2, [r7, #28]
 8006dc6:	440a      	add	r2, r1
 8006dc8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006dcc:	0cdb      	lsrs	r3, r3, #19
 8006dce:	04db      	lsls	r3, r3, #19
 8006dd0:	6113      	str	r3, [r2, #16]
 8006dd2:	e097      	b.n	8006f04 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006dd4:	69bb      	ldr	r3, [r7, #24]
 8006dd6:	015a      	lsls	r2, r3, #5
 8006dd8:	69fb      	ldr	r3, [r7, #28]
 8006dda:	4413      	add	r3, r2
 8006ddc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006de0:	691b      	ldr	r3, [r3, #16]
 8006de2:	69ba      	ldr	r2, [r7, #24]
 8006de4:	0151      	lsls	r1, r2, #5
 8006de6:	69fa      	ldr	r2, [r7, #28]
 8006de8:	440a      	add	r2, r1
 8006dea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006dee:	0cdb      	lsrs	r3, r3, #19
 8006df0:	04db      	lsls	r3, r3, #19
 8006df2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006df4:	69bb      	ldr	r3, [r7, #24]
 8006df6:	015a      	lsls	r2, r3, #5
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	4413      	add	r3, r2
 8006dfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e00:	691b      	ldr	r3, [r3, #16]
 8006e02:	69ba      	ldr	r2, [r7, #24]
 8006e04:	0151      	lsls	r1, r2, #5
 8006e06:	69fa      	ldr	r2, [r7, #28]
 8006e08:	440a      	add	r2, r1
 8006e0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e0e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006e12:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006e16:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006e18:	69bb      	ldr	r3, [r7, #24]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d11a      	bne.n	8006e54 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	691a      	ldr	r2, [r3, #16]
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d903      	bls.n	8006e32 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	689a      	ldr	r2, [r3, #8]
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006e32:	69bb      	ldr	r3, [r7, #24]
 8006e34:	015a      	lsls	r2, r3, #5
 8006e36:	69fb      	ldr	r3, [r7, #28]
 8006e38:	4413      	add	r3, r2
 8006e3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e3e:	691b      	ldr	r3, [r3, #16]
 8006e40:	69ba      	ldr	r2, [r7, #24]
 8006e42:	0151      	lsls	r1, r2, #5
 8006e44:	69fa      	ldr	r2, [r7, #28]
 8006e46:	440a      	add	r2, r1
 8006e48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e4c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006e50:	6113      	str	r3, [r2, #16]
 8006e52:	e044      	b.n	8006ede <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	691a      	ldr	r2, [r3, #16]
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	4413      	add	r3, r2
 8006e5e:	1e5a      	subs	r2, r3, #1
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e68:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8006e6a:	69bb      	ldr	r3, [r7, #24]
 8006e6c:	015a      	lsls	r2, r3, #5
 8006e6e:	69fb      	ldr	r3, [r7, #28]
 8006e70:	4413      	add	r3, r2
 8006e72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e76:	691a      	ldr	r2, [r3, #16]
 8006e78:	8afb      	ldrh	r3, [r7, #22]
 8006e7a:	04d9      	lsls	r1, r3, #19
 8006e7c:	4ba4      	ldr	r3, [pc, #656]	@ (8007110 <USB_EPStartXfer+0x3cc>)
 8006e7e:	400b      	ands	r3, r1
 8006e80:	69b9      	ldr	r1, [r7, #24]
 8006e82:	0148      	lsls	r0, r1, #5
 8006e84:	69f9      	ldr	r1, [r7, #28]
 8006e86:	4401      	add	r1, r0
 8006e88:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	791b      	ldrb	r3, [r3, #4]
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d122      	bne.n	8006ede <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006e98:	69bb      	ldr	r3, [r7, #24]
 8006e9a:	015a      	lsls	r2, r3, #5
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	4413      	add	r3, r2
 8006ea0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ea4:	691b      	ldr	r3, [r3, #16]
 8006ea6:	69ba      	ldr	r2, [r7, #24]
 8006ea8:	0151      	lsls	r1, r2, #5
 8006eaa:	69fa      	ldr	r2, [r7, #28]
 8006eac:	440a      	add	r2, r1
 8006eae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006eb2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006eb6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8006eb8:	69bb      	ldr	r3, [r7, #24]
 8006eba:	015a      	lsls	r2, r3, #5
 8006ebc:	69fb      	ldr	r3, [r7, #28]
 8006ebe:	4413      	add	r3, r2
 8006ec0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ec4:	691a      	ldr	r2, [r3, #16]
 8006ec6:	8afb      	ldrh	r3, [r7, #22]
 8006ec8:	075b      	lsls	r3, r3, #29
 8006eca:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006ece:	69b9      	ldr	r1, [r7, #24]
 8006ed0:	0148      	lsls	r0, r1, #5
 8006ed2:	69f9      	ldr	r1, [r7, #28]
 8006ed4:	4401      	add	r1, r0
 8006ed6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006eda:	4313      	orrs	r3, r2
 8006edc:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	015a      	lsls	r2, r3, #5
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006eea:	691a      	ldr	r2, [r3, #16]
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	691b      	ldr	r3, [r3, #16]
 8006ef0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ef4:	69b9      	ldr	r1, [r7, #24]
 8006ef6:	0148      	lsls	r0, r1, #5
 8006ef8:	69f9      	ldr	r1, [r7, #28]
 8006efa:	4401      	add	r1, r0
 8006efc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006f00:	4313      	orrs	r3, r2
 8006f02:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006f04:	79fb      	ldrb	r3, [r7, #7]
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d14b      	bne.n	8006fa2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	69db      	ldr	r3, [r3, #28]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d009      	beq.n	8006f26 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	015a      	lsls	r2, r3, #5
 8006f16:	69fb      	ldr	r3, [r7, #28]
 8006f18:	4413      	add	r3, r2
 8006f1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f1e:	461a      	mov	r2, r3
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	69db      	ldr	r3, [r3, #28]
 8006f24:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	791b      	ldrb	r3, [r3, #4]
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d128      	bne.n	8006f80 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006f2e:	69fb      	ldr	r3, [r7, #28]
 8006f30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d110      	bne.n	8006f60 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006f3e:	69bb      	ldr	r3, [r7, #24]
 8006f40:	015a      	lsls	r2, r3, #5
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	4413      	add	r3, r2
 8006f46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	69ba      	ldr	r2, [r7, #24]
 8006f4e:	0151      	lsls	r1, r2, #5
 8006f50:	69fa      	ldr	r2, [r7, #28]
 8006f52:	440a      	add	r2, r1
 8006f54:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f58:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006f5c:	6013      	str	r3, [r2, #0]
 8006f5e:	e00f      	b.n	8006f80 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006f60:	69bb      	ldr	r3, [r7, #24]
 8006f62:	015a      	lsls	r2, r3, #5
 8006f64:	69fb      	ldr	r3, [r7, #28]
 8006f66:	4413      	add	r3, r2
 8006f68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	69ba      	ldr	r2, [r7, #24]
 8006f70:	0151      	lsls	r1, r2, #5
 8006f72:	69fa      	ldr	r2, [r7, #28]
 8006f74:	440a      	add	r2, r1
 8006f76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f7e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006f80:	69bb      	ldr	r3, [r7, #24]
 8006f82:	015a      	lsls	r2, r3, #5
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	4413      	add	r3, r2
 8006f88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	69ba      	ldr	r2, [r7, #24]
 8006f90:	0151      	lsls	r1, r2, #5
 8006f92:	69fa      	ldr	r2, [r7, #28]
 8006f94:	440a      	add	r2, r1
 8006f96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f9a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006f9e:	6013      	str	r3, [r2, #0]
 8006fa0:	e166      	b.n	8007270 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006fa2:	69bb      	ldr	r3, [r7, #24]
 8006fa4:	015a      	lsls	r2, r3, #5
 8006fa6:	69fb      	ldr	r3, [r7, #28]
 8006fa8:	4413      	add	r3, r2
 8006faa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	69ba      	ldr	r2, [r7, #24]
 8006fb2:	0151      	lsls	r1, r2, #5
 8006fb4:	69fa      	ldr	r2, [r7, #28]
 8006fb6:	440a      	add	r2, r1
 8006fb8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006fbc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006fc0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	791b      	ldrb	r3, [r3, #4]
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d015      	beq.n	8006ff6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	691b      	ldr	r3, [r3, #16]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	f000 814e 	beq.w	8007270 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006fd4:	69fb      	ldr	r3, [r7, #28]
 8006fd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	f003 030f 	and.w	r3, r3, #15
 8006fe4:	2101      	movs	r1, #1
 8006fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8006fea:	69f9      	ldr	r1, [r7, #28]
 8006fec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	634b      	str	r3, [r1, #52]	@ 0x34
 8006ff4:	e13c      	b.n	8007270 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006ff6:	69fb      	ldr	r3, [r7, #28]
 8006ff8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007002:	2b00      	cmp	r3, #0
 8007004:	d110      	bne.n	8007028 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	015a      	lsls	r2, r3, #5
 800700a:	69fb      	ldr	r3, [r7, #28]
 800700c:	4413      	add	r3, r2
 800700e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	69ba      	ldr	r2, [r7, #24]
 8007016:	0151      	lsls	r1, r2, #5
 8007018:	69fa      	ldr	r2, [r7, #28]
 800701a:	440a      	add	r2, r1
 800701c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007020:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007024:	6013      	str	r3, [r2, #0]
 8007026:	e00f      	b.n	8007048 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007028:	69bb      	ldr	r3, [r7, #24]
 800702a:	015a      	lsls	r2, r3, #5
 800702c:	69fb      	ldr	r3, [r7, #28]
 800702e:	4413      	add	r3, r2
 8007030:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	69ba      	ldr	r2, [r7, #24]
 8007038:	0151      	lsls	r1, r2, #5
 800703a:	69fa      	ldr	r2, [r7, #28]
 800703c:	440a      	add	r2, r1
 800703e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007042:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007046:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	68d9      	ldr	r1, [r3, #12]
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	781a      	ldrb	r2, [r3, #0]
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	691b      	ldr	r3, [r3, #16]
 8007054:	b298      	uxth	r0, r3
 8007056:	79fb      	ldrb	r3, [r7, #7]
 8007058:	9300      	str	r3, [sp, #0]
 800705a:	4603      	mov	r3, r0
 800705c:	68f8      	ldr	r0, [r7, #12]
 800705e:	f000 f9b9 	bl	80073d4 <USB_WritePacket>
 8007062:	e105      	b.n	8007270 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007064:	69bb      	ldr	r3, [r7, #24]
 8007066:	015a      	lsls	r2, r3, #5
 8007068:	69fb      	ldr	r3, [r7, #28]
 800706a:	4413      	add	r3, r2
 800706c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	69ba      	ldr	r2, [r7, #24]
 8007074:	0151      	lsls	r1, r2, #5
 8007076:	69fa      	ldr	r2, [r7, #28]
 8007078:	440a      	add	r2, r1
 800707a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800707e:	0cdb      	lsrs	r3, r3, #19
 8007080:	04db      	lsls	r3, r3, #19
 8007082:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007084:	69bb      	ldr	r3, [r7, #24]
 8007086:	015a      	lsls	r2, r3, #5
 8007088:	69fb      	ldr	r3, [r7, #28]
 800708a:	4413      	add	r3, r2
 800708c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007090:	691b      	ldr	r3, [r3, #16]
 8007092:	69ba      	ldr	r2, [r7, #24]
 8007094:	0151      	lsls	r1, r2, #5
 8007096:	69fa      	ldr	r2, [r7, #28]
 8007098:	440a      	add	r2, r1
 800709a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800709e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80070a2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80070a6:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80070a8:	69bb      	ldr	r3, [r7, #24]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d132      	bne.n	8007114 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	691b      	ldr	r3, [r3, #16]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d003      	beq.n	80070be <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	689a      	ldr	r2, [r3, #8]
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	689a      	ldr	r2, [r3, #8]
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	015a      	lsls	r2, r3, #5
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	4413      	add	r3, r2
 80070ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070d2:	691a      	ldr	r2, [r3, #16]
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	6a1b      	ldr	r3, [r3, #32]
 80070d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070dc:	69b9      	ldr	r1, [r7, #24]
 80070de:	0148      	lsls	r0, r1, #5
 80070e0:	69f9      	ldr	r1, [r7, #28]
 80070e2:	4401      	add	r1, r0
 80070e4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80070e8:	4313      	orrs	r3, r2
 80070ea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80070ec:	69bb      	ldr	r3, [r7, #24]
 80070ee:	015a      	lsls	r2, r3, #5
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	4413      	add	r3, r2
 80070f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070f8:	691b      	ldr	r3, [r3, #16]
 80070fa:	69ba      	ldr	r2, [r7, #24]
 80070fc:	0151      	lsls	r1, r2, #5
 80070fe:	69fa      	ldr	r2, [r7, #28]
 8007100:	440a      	add	r2, r1
 8007102:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007106:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800710a:	6113      	str	r3, [r2, #16]
 800710c:	e062      	b.n	80071d4 <USB_EPStartXfer+0x490>
 800710e:	bf00      	nop
 8007110:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	691b      	ldr	r3, [r3, #16]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d123      	bne.n	8007164 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800711c:	69bb      	ldr	r3, [r7, #24]
 800711e:	015a      	lsls	r2, r3, #5
 8007120:	69fb      	ldr	r3, [r7, #28]
 8007122:	4413      	add	r3, r2
 8007124:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007128:	691a      	ldr	r2, [r3, #16]
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007132:	69b9      	ldr	r1, [r7, #24]
 8007134:	0148      	lsls	r0, r1, #5
 8007136:	69f9      	ldr	r1, [r7, #28]
 8007138:	4401      	add	r1, r0
 800713a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800713e:	4313      	orrs	r3, r2
 8007140:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007142:	69bb      	ldr	r3, [r7, #24]
 8007144:	015a      	lsls	r2, r3, #5
 8007146:	69fb      	ldr	r3, [r7, #28]
 8007148:	4413      	add	r3, r2
 800714a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800714e:	691b      	ldr	r3, [r3, #16]
 8007150:	69ba      	ldr	r2, [r7, #24]
 8007152:	0151      	lsls	r1, r2, #5
 8007154:	69fa      	ldr	r2, [r7, #28]
 8007156:	440a      	add	r2, r1
 8007158:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800715c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007160:	6113      	str	r3, [r2, #16]
 8007162:	e037      	b.n	80071d4 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	691a      	ldr	r2, [r3, #16]
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	4413      	add	r3, r2
 800716e:	1e5a      	subs	r2, r3, #1
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	fbb2 f3f3 	udiv	r3, r2, r3
 8007178:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	8afa      	ldrh	r2, [r7, #22]
 8007180:	fb03 f202 	mul.w	r2, r3, r2
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007188:	69bb      	ldr	r3, [r7, #24]
 800718a:	015a      	lsls	r2, r3, #5
 800718c:	69fb      	ldr	r3, [r7, #28]
 800718e:	4413      	add	r3, r2
 8007190:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007194:	691a      	ldr	r2, [r3, #16]
 8007196:	8afb      	ldrh	r3, [r7, #22]
 8007198:	04d9      	lsls	r1, r3, #19
 800719a:	4b38      	ldr	r3, [pc, #224]	@ (800727c <USB_EPStartXfer+0x538>)
 800719c:	400b      	ands	r3, r1
 800719e:	69b9      	ldr	r1, [r7, #24]
 80071a0:	0148      	lsls	r0, r1, #5
 80071a2:	69f9      	ldr	r1, [r7, #28]
 80071a4:	4401      	add	r1, r0
 80071a6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80071aa:	4313      	orrs	r3, r2
 80071ac:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	015a      	lsls	r2, r3, #5
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	4413      	add	r3, r2
 80071b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071ba:	691a      	ldr	r2, [r3, #16]
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	6a1b      	ldr	r3, [r3, #32]
 80071c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071c4:	69b9      	ldr	r1, [r7, #24]
 80071c6:	0148      	lsls	r0, r1, #5
 80071c8:	69f9      	ldr	r1, [r7, #28]
 80071ca:	4401      	add	r1, r0
 80071cc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80071d0:	4313      	orrs	r3, r2
 80071d2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80071d4:	79fb      	ldrb	r3, [r7, #7]
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d10d      	bne.n	80071f6 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	68db      	ldr	r3, [r3, #12]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d009      	beq.n	80071f6 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	68d9      	ldr	r1, [r3, #12]
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	015a      	lsls	r2, r3, #5
 80071ea:	69fb      	ldr	r3, [r7, #28]
 80071ec:	4413      	add	r3, r2
 80071ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071f2:	460a      	mov	r2, r1
 80071f4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	791b      	ldrb	r3, [r3, #4]
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d128      	bne.n	8007250 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80071fe:	69fb      	ldr	r3, [r7, #28]
 8007200:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800720a:	2b00      	cmp	r3, #0
 800720c:	d110      	bne.n	8007230 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	015a      	lsls	r2, r3, #5
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	4413      	add	r3, r2
 8007216:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	69ba      	ldr	r2, [r7, #24]
 800721e:	0151      	lsls	r1, r2, #5
 8007220:	69fa      	ldr	r2, [r7, #28]
 8007222:	440a      	add	r2, r1
 8007224:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007228:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800722c:	6013      	str	r3, [r2, #0]
 800722e:	e00f      	b.n	8007250 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007230:	69bb      	ldr	r3, [r7, #24]
 8007232:	015a      	lsls	r2, r3, #5
 8007234:	69fb      	ldr	r3, [r7, #28]
 8007236:	4413      	add	r3, r2
 8007238:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	69ba      	ldr	r2, [r7, #24]
 8007240:	0151      	lsls	r1, r2, #5
 8007242:	69fa      	ldr	r2, [r7, #28]
 8007244:	440a      	add	r2, r1
 8007246:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800724a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800724e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007250:	69bb      	ldr	r3, [r7, #24]
 8007252:	015a      	lsls	r2, r3, #5
 8007254:	69fb      	ldr	r3, [r7, #28]
 8007256:	4413      	add	r3, r2
 8007258:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	69ba      	ldr	r2, [r7, #24]
 8007260:	0151      	lsls	r1, r2, #5
 8007262:	69fa      	ldr	r2, [r7, #28]
 8007264:	440a      	add	r2, r1
 8007266:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800726a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800726e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007270:	2300      	movs	r3, #0
}
 8007272:	4618      	mov	r0, r3
 8007274:	3720      	adds	r7, #32
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
 800727a:	bf00      	nop
 800727c:	1ff80000 	.word	0x1ff80000

08007280 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007280:	b480      	push	{r7}
 8007282:	b087      	sub	sp, #28
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800728a:	2300      	movs	r3, #0
 800728c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800728e:	2300      	movs	r3, #0
 8007290:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	785b      	ldrb	r3, [r3, #1]
 800729a:	2b01      	cmp	r3, #1
 800729c:	d14a      	bne.n	8007334 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	015a      	lsls	r2, r3, #5
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	4413      	add	r3, r2
 80072a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80072b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80072b6:	f040 8086 	bne.w	80073c6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	015a      	lsls	r2, r3, #5
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	4413      	add	r3, r2
 80072c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	683a      	ldr	r2, [r7, #0]
 80072cc:	7812      	ldrb	r2, [r2, #0]
 80072ce:	0151      	lsls	r1, r2, #5
 80072d0:	693a      	ldr	r2, [r7, #16]
 80072d2:	440a      	add	r2, r1
 80072d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80072d8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80072dc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	015a      	lsls	r2, r3, #5
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	4413      	add	r3, r2
 80072e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	683a      	ldr	r2, [r7, #0]
 80072f0:	7812      	ldrb	r2, [r2, #0]
 80072f2:	0151      	lsls	r1, r2, #5
 80072f4:	693a      	ldr	r2, [r7, #16]
 80072f6:	440a      	add	r2, r1
 80072f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80072fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007300:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	3301      	adds	r3, #1
 8007306:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800730e:	4293      	cmp	r3, r2
 8007310:	d902      	bls.n	8007318 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	75fb      	strb	r3, [r7, #23]
          break;
 8007316:	e056      	b.n	80073c6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	015a      	lsls	r2, r3, #5
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	4413      	add	r3, r2
 8007322:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800732c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007330:	d0e7      	beq.n	8007302 <USB_EPStopXfer+0x82>
 8007332:	e048      	b.n	80073c6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	015a      	lsls	r2, r3, #5
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	4413      	add	r3, r2
 800733e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007348:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800734c:	d13b      	bne.n	80073c6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	015a      	lsls	r2, r3, #5
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	4413      	add	r3, r2
 8007358:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	683a      	ldr	r2, [r7, #0]
 8007360:	7812      	ldrb	r2, [r2, #0]
 8007362:	0151      	lsls	r1, r2, #5
 8007364:	693a      	ldr	r2, [r7, #16]
 8007366:	440a      	add	r2, r1
 8007368:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800736c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007370:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	015a      	lsls	r2, r3, #5
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	4413      	add	r3, r2
 800737c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	683a      	ldr	r2, [r7, #0]
 8007384:	7812      	ldrb	r2, [r2, #0]
 8007386:	0151      	lsls	r1, r2, #5
 8007388:	693a      	ldr	r2, [r7, #16]
 800738a:	440a      	add	r2, r1
 800738c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007390:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007394:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	3301      	adds	r3, #1
 800739a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f242 7210 	movw	r2, #10000	@ 0x2710
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d902      	bls.n	80073ac <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80073a6:	2301      	movs	r3, #1
 80073a8:	75fb      	strb	r3, [r7, #23]
          break;
 80073aa:	e00c      	b.n	80073c6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	015a      	lsls	r2, r3, #5
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	4413      	add	r3, r2
 80073b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80073c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80073c4:	d0e7      	beq.n	8007396 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80073c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	371c      	adds	r7, #28
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr

080073d4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b089      	sub	sp, #36	@ 0x24
 80073d8:	af00      	add	r7, sp, #0
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	60b9      	str	r1, [r7, #8]
 80073de:	4611      	mov	r1, r2
 80073e0:	461a      	mov	r2, r3
 80073e2:	460b      	mov	r3, r1
 80073e4:	71fb      	strb	r3, [r7, #7]
 80073e6:	4613      	mov	r3, r2
 80073e8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80073f2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d123      	bne.n	8007442 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80073fa:	88bb      	ldrh	r3, [r7, #4]
 80073fc:	3303      	adds	r3, #3
 80073fe:	089b      	lsrs	r3, r3, #2
 8007400:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007402:	2300      	movs	r3, #0
 8007404:	61bb      	str	r3, [r7, #24]
 8007406:	e018      	b.n	800743a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007408:	79fb      	ldrb	r3, [r7, #7]
 800740a:	031a      	lsls	r2, r3, #12
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	4413      	add	r3, r2
 8007410:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007414:	461a      	mov	r2, r3
 8007416:	69fb      	ldr	r3, [r7, #28]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800741c:	69fb      	ldr	r3, [r7, #28]
 800741e:	3301      	adds	r3, #1
 8007420:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007422:	69fb      	ldr	r3, [r7, #28]
 8007424:	3301      	adds	r3, #1
 8007426:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007428:	69fb      	ldr	r3, [r7, #28]
 800742a:	3301      	adds	r3, #1
 800742c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800742e:	69fb      	ldr	r3, [r7, #28]
 8007430:	3301      	adds	r3, #1
 8007432:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007434:	69bb      	ldr	r3, [r7, #24]
 8007436:	3301      	adds	r3, #1
 8007438:	61bb      	str	r3, [r7, #24]
 800743a:	69ba      	ldr	r2, [r7, #24]
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	429a      	cmp	r2, r3
 8007440:	d3e2      	bcc.n	8007408 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007442:	2300      	movs	r3, #0
}
 8007444:	4618      	mov	r0, r3
 8007446:	3724      	adds	r7, #36	@ 0x24
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007450:	b480      	push	{r7}
 8007452:	b08b      	sub	sp, #44	@ 0x2c
 8007454:	af00      	add	r7, sp, #0
 8007456:	60f8      	str	r0, [r7, #12]
 8007458:	60b9      	str	r1, [r7, #8]
 800745a:	4613      	mov	r3, r2
 800745c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007466:	88fb      	ldrh	r3, [r7, #6]
 8007468:	089b      	lsrs	r3, r3, #2
 800746a:	b29b      	uxth	r3, r3
 800746c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800746e:	88fb      	ldrh	r3, [r7, #6]
 8007470:	f003 0303 	and.w	r3, r3, #3
 8007474:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007476:	2300      	movs	r3, #0
 8007478:	623b      	str	r3, [r7, #32]
 800747a:	e014      	b.n	80074a6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007486:	601a      	str	r2, [r3, #0]
    pDest++;
 8007488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800748a:	3301      	adds	r3, #1
 800748c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800748e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007490:	3301      	adds	r3, #1
 8007492:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007496:	3301      	adds	r3, #1
 8007498:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800749a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800749c:	3301      	adds	r3, #1
 800749e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80074a0:	6a3b      	ldr	r3, [r7, #32]
 80074a2:	3301      	adds	r3, #1
 80074a4:	623b      	str	r3, [r7, #32]
 80074a6:	6a3a      	ldr	r2, [r7, #32]
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d3e6      	bcc.n	800747c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80074ae:	8bfb      	ldrh	r3, [r7, #30]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d01e      	beq.n	80074f2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80074b4:	2300      	movs	r3, #0
 80074b6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80074b8:	69bb      	ldr	r3, [r7, #24]
 80074ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80074be:	461a      	mov	r2, r3
 80074c0:	f107 0310 	add.w	r3, r7, #16
 80074c4:	6812      	ldr	r2, [r2, #0]
 80074c6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80074c8:	693a      	ldr	r2, [r7, #16]
 80074ca:	6a3b      	ldr	r3, [r7, #32]
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	00db      	lsls	r3, r3, #3
 80074d0:	fa22 f303 	lsr.w	r3, r2, r3
 80074d4:	b2da      	uxtb	r2, r3
 80074d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074d8:	701a      	strb	r2, [r3, #0]
      i++;
 80074da:	6a3b      	ldr	r3, [r7, #32]
 80074dc:	3301      	adds	r3, #1
 80074de:	623b      	str	r3, [r7, #32]
      pDest++;
 80074e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e2:	3301      	adds	r3, #1
 80074e4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80074e6:	8bfb      	ldrh	r3, [r7, #30]
 80074e8:	3b01      	subs	r3, #1
 80074ea:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80074ec:	8bfb      	ldrh	r3, [r7, #30]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d1ea      	bne.n	80074c8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80074f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	372c      	adds	r7, #44	@ 0x2c
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007500:	b480      	push	{r7}
 8007502:	b085      	sub	sp, #20
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	785b      	ldrb	r3, [r3, #1]
 8007518:	2b01      	cmp	r3, #1
 800751a:	d12c      	bne.n	8007576 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	015a      	lsls	r2, r3, #5
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	4413      	add	r3, r2
 8007524:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	2b00      	cmp	r3, #0
 800752c:	db12      	blt.n	8007554 <USB_EPSetStall+0x54>
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d00f      	beq.n	8007554 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	015a      	lsls	r2, r3, #5
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	4413      	add	r3, r2
 800753c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	68ba      	ldr	r2, [r7, #8]
 8007544:	0151      	lsls	r1, r2, #5
 8007546:	68fa      	ldr	r2, [r7, #12]
 8007548:	440a      	add	r2, r1
 800754a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800754e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007552:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	015a      	lsls	r2, r3, #5
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	4413      	add	r3, r2
 800755c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	68ba      	ldr	r2, [r7, #8]
 8007564:	0151      	lsls	r1, r2, #5
 8007566:	68fa      	ldr	r2, [r7, #12]
 8007568:	440a      	add	r2, r1
 800756a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800756e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007572:	6013      	str	r3, [r2, #0]
 8007574:	e02b      	b.n	80075ce <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	015a      	lsls	r2, r3, #5
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	4413      	add	r3, r2
 800757e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	2b00      	cmp	r3, #0
 8007586:	db12      	blt.n	80075ae <USB_EPSetStall+0xae>
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d00f      	beq.n	80075ae <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	015a      	lsls	r2, r3, #5
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	4413      	add	r3, r2
 8007596:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	68ba      	ldr	r2, [r7, #8]
 800759e:	0151      	lsls	r1, r2, #5
 80075a0:	68fa      	ldr	r2, [r7, #12]
 80075a2:	440a      	add	r2, r1
 80075a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80075a8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80075ac:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	015a      	lsls	r2, r3, #5
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	4413      	add	r3, r2
 80075b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	68ba      	ldr	r2, [r7, #8]
 80075be:	0151      	lsls	r1, r2, #5
 80075c0:	68fa      	ldr	r2, [r7, #12]
 80075c2:	440a      	add	r2, r1
 80075c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80075c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80075cc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80075ce:	2300      	movs	r3, #0
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3714      	adds	r7, #20
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr

080075dc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80075dc:	b480      	push	{r7}
 80075de:	b085      	sub	sp, #20
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	785b      	ldrb	r3, [r3, #1]
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d128      	bne.n	800764a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	015a      	lsls	r2, r3, #5
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	4413      	add	r3, r2
 8007600:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	68ba      	ldr	r2, [r7, #8]
 8007608:	0151      	lsls	r1, r2, #5
 800760a:	68fa      	ldr	r2, [r7, #12]
 800760c:	440a      	add	r2, r1
 800760e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007612:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007616:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	791b      	ldrb	r3, [r3, #4]
 800761c:	2b03      	cmp	r3, #3
 800761e:	d003      	beq.n	8007628 <USB_EPClearStall+0x4c>
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	791b      	ldrb	r3, [r3, #4]
 8007624:	2b02      	cmp	r3, #2
 8007626:	d138      	bne.n	800769a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	015a      	lsls	r2, r3, #5
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	4413      	add	r3, r2
 8007630:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	68ba      	ldr	r2, [r7, #8]
 8007638:	0151      	lsls	r1, r2, #5
 800763a:	68fa      	ldr	r2, [r7, #12]
 800763c:	440a      	add	r2, r1
 800763e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007642:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007646:	6013      	str	r3, [r2, #0]
 8007648:	e027      	b.n	800769a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	015a      	lsls	r2, r3, #5
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	4413      	add	r3, r2
 8007652:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	68ba      	ldr	r2, [r7, #8]
 800765a:	0151      	lsls	r1, r2, #5
 800765c:	68fa      	ldr	r2, [r7, #12]
 800765e:	440a      	add	r2, r1
 8007660:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007664:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007668:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	791b      	ldrb	r3, [r3, #4]
 800766e:	2b03      	cmp	r3, #3
 8007670:	d003      	beq.n	800767a <USB_EPClearStall+0x9e>
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	791b      	ldrb	r3, [r3, #4]
 8007676:	2b02      	cmp	r3, #2
 8007678:	d10f      	bne.n	800769a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	015a      	lsls	r2, r3, #5
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	4413      	add	r3, r2
 8007682:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	68ba      	ldr	r2, [r7, #8]
 800768a:	0151      	lsls	r1, r2, #5
 800768c:	68fa      	ldr	r2, [r7, #12]
 800768e:	440a      	add	r2, r1
 8007690:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007694:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007698:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800769a:	2300      	movs	r3, #0
}
 800769c:	4618      	mov	r0, r3
 800769e:	3714      	adds	r7, #20
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b085      	sub	sp, #20
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	460b      	mov	r3, r1
 80076b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	68fa      	ldr	r2, [r7, #12]
 80076c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80076c6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80076ca:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	78fb      	ldrb	r3, [r7, #3]
 80076d6:	011b      	lsls	r3, r3, #4
 80076d8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80076dc:	68f9      	ldr	r1, [r7, #12]
 80076de:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80076e2:	4313      	orrs	r3, r2
 80076e4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80076e6:	2300      	movs	r3, #0
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3714      	adds	r7, #20
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b085      	sub	sp, #20
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	68fa      	ldr	r2, [r7, #12]
 800770a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800770e:	f023 0303 	bic.w	r3, r3, #3
 8007712:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	68fa      	ldr	r2, [r7, #12]
 800771e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007722:	f023 0302 	bic.w	r3, r3, #2
 8007726:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007728:	2300      	movs	r3, #0
}
 800772a:	4618      	mov	r0, r3
 800772c:	3714      	adds	r7, #20
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr

08007736 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007736:	b480      	push	{r7}
 8007738:	b085      	sub	sp, #20
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	68fa      	ldr	r2, [r7, #12]
 800774c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007750:	f023 0303 	bic.w	r3, r3, #3
 8007754:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	68fa      	ldr	r2, [r7, #12]
 8007760:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007764:	f043 0302 	orr.w	r3, r3, #2
 8007768:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800776a:	2300      	movs	r3, #0
}
 800776c:	4618      	mov	r0, r3
 800776e:	3714      	adds	r7, #20
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr

08007778 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007778:	b480      	push	{r7}
 800777a:	b085      	sub	sp, #20
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	695b      	ldr	r3, [r3, #20]
 8007784:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	699b      	ldr	r3, [r3, #24]
 800778a:	68fa      	ldr	r2, [r7, #12]
 800778c:	4013      	ands	r3, r2
 800778e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007790:	68fb      	ldr	r3, [r7, #12]
}
 8007792:	4618      	mov	r0, r3
 8007794:	3714      	adds	r7, #20
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr

0800779e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800779e:	b480      	push	{r7}
 80077a0:	b085      	sub	sp, #20
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077b0:	699b      	ldr	r3, [r3, #24]
 80077b2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077ba:	69db      	ldr	r3, [r3, #28]
 80077bc:	68ba      	ldr	r2, [r7, #8]
 80077be:	4013      	ands	r3, r2
 80077c0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	0c1b      	lsrs	r3, r3, #16
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3714      	adds	r7, #20
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr

080077d2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80077d2:	b480      	push	{r7}
 80077d4:	b085      	sub	sp, #20
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077e4:	699b      	ldr	r3, [r3, #24]
 80077e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077ee:	69db      	ldr	r3, [r3, #28]
 80077f0:	68ba      	ldr	r2, [r7, #8]
 80077f2:	4013      	ands	r3, r2
 80077f4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	b29b      	uxth	r3, r3
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3714      	adds	r7, #20
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr

08007806 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007806:	b480      	push	{r7}
 8007808:	b085      	sub	sp, #20
 800780a:	af00      	add	r7, sp, #0
 800780c:	6078      	str	r0, [r7, #4]
 800780e:	460b      	mov	r3, r1
 8007810:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007816:	78fb      	ldrb	r3, [r7, #3]
 8007818:	015a      	lsls	r2, r3, #5
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	4413      	add	r3, r2
 800781e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800782c:	695b      	ldr	r3, [r3, #20]
 800782e:	68ba      	ldr	r2, [r7, #8]
 8007830:	4013      	ands	r3, r2
 8007832:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007834:	68bb      	ldr	r3, [r7, #8]
}
 8007836:	4618      	mov	r0, r3
 8007838:	3714      	adds	r7, #20
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr

08007842 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007842:	b480      	push	{r7}
 8007844:	b087      	sub	sp, #28
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
 800784a:	460b      	mov	r3, r1
 800784c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007858:	691b      	ldr	r3, [r3, #16]
 800785a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007862:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007864:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007866:	78fb      	ldrb	r3, [r7, #3]
 8007868:	f003 030f 	and.w	r3, r3, #15
 800786c:	68fa      	ldr	r2, [r7, #12]
 800786e:	fa22 f303 	lsr.w	r3, r2, r3
 8007872:	01db      	lsls	r3, r3, #7
 8007874:	b2db      	uxtb	r3, r3
 8007876:	693a      	ldr	r2, [r7, #16]
 8007878:	4313      	orrs	r3, r2
 800787a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800787c:	78fb      	ldrb	r3, [r7, #3]
 800787e:	015a      	lsls	r2, r3, #5
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	4413      	add	r3, r2
 8007884:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	693a      	ldr	r2, [r7, #16]
 800788c:	4013      	ands	r3, r2
 800788e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007890:	68bb      	ldr	r3, [r7, #8]
}
 8007892:	4618      	mov	r0, r3
 8007894:	371c      	adds	r7, #28
 8007896:	46bd      	mov	sp, r7
 8007898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789c:	4770      	bx	lr

0800789e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800789e:	b480      	push	{r7}
 80078a0:	b083      	sub	sp, #12
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	695b      	ldr	r3, [r3, #20]
 80078aa:	f003 0301 	and.w	r3, r3, #1
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	370c      	adds	r7, #12
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr

080078ba <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80078ba:	b480      	push	{r7}
 80078bc:	b085      	sub	sp, #20
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	68fa      	ldr	r2, [r7, #12]
 80078d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80078d4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80078d8:	f023 0307 	bic.w	r3, r3, #7
 80078dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	68fa      	ldr	r2, [r7, #12]
 80078e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80078ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80078f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80078f2:	2300      	movs	r3, #0
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3714      	adds	r7, #20
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr

08007900 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007900:	b480      	push	{r7}
 8007902:	b087      	sub	sp, #28
 8007904:	af00      	add	r7, sp, #0
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	460b      	mov	r3, r1
 800790a:	607a      	str	r2, [r7, #4]
 800790c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	333c      	adds	r3, #60	@ 0x3c
 8007916:	3304      	adds	r3, #4
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	4a26      	ldr	r2, [pc, #152]	@ (80079b8 <USB_EP0_OutStart+0xb8>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d90a      	bls.n	800793a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007930:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007934:	d101      	bne.n	800793a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007936:	2300      	movs	r3, #0
 8007938:	e037      	b.n	80079aa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007940:	461a      	mov	r2, r3
 8007942:	2300      	movs	r3, #0
 8007944:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800794c:	691b      	ldr	r3, [r3, #16]
 800794e:	697a      	ldr	r2, [r7, #20]
 8007950:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007954:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007958:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007960:	691b      	ldr	r3, [r3, #16]
 8007962:	697a      	ldr	r2, [r7, #20]
 8007964:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007968:	f043 0318 	orr.w	r3, r3, #24
 800796c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007974:	691b      	ldr	r3, [r3, #16]
 8007976:	697a      	ldr	r2, [r7, #20]
 8007978:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800797c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007980:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007982:	7afb      	ldrb	r3, [r7, #11]
 8007984:	2b01      	cmp	r3, #1
 8007986:	d10f      	bne.n	80079a8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800798e:	461a      	mov	r2, r3
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	697a      	ldr	r2, [r7, #20]
 800799e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80079a2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80079a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80079a8:	2300      	movs	r3, #0
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	371c      	adds	r7, #28
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr
 80079b6:	bf00      	nop
 80079b8:	4f54300a 	.word	0x4f54300a

080079bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80079bc:	b480      	push	{r7}
 80079be:	b085      	sub	sp, #20
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80079c4:	2300      	movs	r3, #0
 80079c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	3301      	adds	r3, #1
 80079cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80079d4:	d901      	bls.n	80079da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80079d6:	2303      	movs	r3, #3
 80079d8:	e022      	b.n	8007a20 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	691b      	ldr	r3, [r3, #16]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	daf2      	bge.n	80079c8 <USB_CoreReset+0xc>

  count = 10U;
 80079e2:	230a      	movs	r3, #10
 80079e4:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80079e6:	e002      	b.n	80079ee <USB_CoreReset+0x32>
  {
    count--;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	3b01      	subs	r3, #1
 80079ec:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d1f9      	bne.n	80079e8 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	691b      	ldr	r3, [r3, #16]
 80079f8:	f043 0201 	orr.w	r2, r3, #1
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	3301      	adds	r3, #1
 8007a04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a0c:	d901      	bls.n	8007a12 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8007a0e:	2303      	movs	r3, #3
 8007a10:	e006      	b.n	8007a20 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	691b      	ldr	r3, [r3, #16]
 8007a16:	f003 0301 	and.w	r3, r3, #1
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	d0f0      	beq.n	8007a00 <USB_CoreReset+0x44>

  return HAL_OK;
 8007a1e:	2300      	movs	r3, #0
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3714      	adds	r7, #20
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  USBD_COMPOSITE_Mount_Class();
 8007a30:	f001 fc3a 	bl	80092a8 <USBD_COMPOSITE_Mount_Class>
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_HS) != USBD_OK)
  {
    Error_Handler();
  }
#else
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_FS) != USBD_OK)
 8007a34:	2200      	movs	r2, #0
 8007a36:	4917      	ldr	r1, [pc, #92]	@ (8007a94 <MX_USB_DEVICE_Init+0x68>)
 8007a38:	4817      	ldr	r0, [pc, #92]	@ (8007a98 <MX_USB_DEVICE_Init+0x6c>)
 8007a3a:	f002 f863 	bl	8009b04 <USBD_Init>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d001      	beq.n	8007a48 <MX_USB_DEVICE_Init+0x1c>
  {
    Error_Handler();
 8007a44:	f7f9 f808 	bl	8000a58 <Error_Handler>
  }
#endif
  if (USBD_RegisterClass(&hUsbDevice, &USBD_COMPOSITE) != USBD_OK)
 8007a48:	4914      	ldr	r1, [pc, #80]	@ (8007a9c <MX_USB_DEVICE_Init+0x70>)
 8007a4a:	4813      	ldr	r0, [pc, #76]	@ (8007a98 <MX_USB_DEVICE_Init+0x6c>)
 8007a4c:	f002 f886 	bl	8009b5c <USBD_RegisterClass>
 8007a50:	4603      	mov	r3, r0
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d001      	beq.n	8007a5a <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8007a56:	f7f8 ffff 	bl	8000a58 <Error_Handler>
  }
#if (USBD_USE_CDC_ACM == 1)
  if (USBD_CDC_ACM_RegisterInterface(&hUsbDevice, &USBD_CDC_ACM_fops) != USBD_OK)
 8007a5a:	4911      	ldr	r1, [pc, #68]	@ (8007aa0 <MX_USB_DEVICE_Init+0x74>)
 8007a5c:	480e      	ldr	r0, [pc, #56]	@ (8007a98 <MX_USB_DEVICE_Init+0x6c>)
 8007a5e:	f001 f8fd 	bl	8008c5c <USBD_CDC_ACM_RegisterInterface>
 8007a62:	4603      	mov	r3, r0
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d001      	beq.n	8007a6c <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8007a68:	f7f8 fff6 	bl	8000a58 <Error_Handler>
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDevice, &USBD_CustomHID_fops) != USBD_OK)
 8007a6c:	490d      	ldr	r1, [pc, #52]	@ (8007aa4 <MX_USB_DEVICE_Init+0x78>)
 8007a6e:	480a      	ldr	r0, [pc, #40]	@ (8007a98 <MX_USB_DEVICE_Init+0x6c>)
 8007a70:	f001 fffa 	bl	8009a68 <USBD_CUSTOM_HID_RegisterInterface>
 8007a74:	4603      	mov	r3, r0
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d001      	beq.n	8007a7e <MX_USB_DEVICE_Init+0x52>
  {
    Error_Handler();
 8007a7a:	f7f8 ffed 	bl	8000a58 <Error_Handler>
  if (USBD_PRNT_RegisterInterface(&hUsbDevice, &USBD_PRNT_fops) != USBD_OK)
  {
    Error_Handler();
  }
#endif
  if (USBD_Start(&hUsbDevice) != USBD_OK)
 8007a7e:	4806      	ldr	r0, [pc, #24]	@ (8007a98 <MX_USB_DEVICE_Init+0x6c>)
 8007a80:	f002 f8aa 	bl	8009bd8 <USBD_Start>
 8007a84:	4603      	mov	r3, r0
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d001      	beq.n	8007a8e <MX_USB_DEVICE_Init+0x62>
  {
    Error_Handler();
 8007a8a:	f7f8 ffe5 	bl	8000a58 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007a8e:	bf00      	nop
 8007a90:	bd80      	pop	{r7, pc}
 8007a92:	bf00      	nop
 8007a94:	200000a0 	.word	0x200000a0
 8007a98:	20000a94 	.word	0x20000a94
 8007a9c:	20000204 	.word	0x20000204
 8007aa0:	2000008c 	.word	0x2000008c
 8007aa4:	20000114 	.word	0x20000114

08007aa8 <CDC_CH_To_UART_Handle>:
static int8_t CDC_Receive(uint8_t cdc_ch, uint8_t *pbuf, uint32_t *Len);
static int8_t CDC_TransmitCplt(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len, uint8_t epnum);

/* USER CODE BEGIN PRIVATE_FUNCTIONS_DECLARATION */
UART_HandleTypeDef *CDC_CH_To_UART_Handle(uint8_t cdc_ch)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b085      	sub	sp, #20
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	4603      	mov	r3, r0
 8007ab0:	71fb      	strb	r3, [r7, #7]
  UART_HandleTypeDef *handle = NULL;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	60fb      	str	r3, [r7, #12]

  if (cdc_ch == 0)
 8007ab6:	79fb      	ldrb	r3, [r7, #7]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d101      	bne.n	8007ac0 <CDC_CH_To_UART_Handle+0x18>
  {
    handle = &huart5;
 8007abc:	4b04      	ldr	r3, [pc, #16]	@ (8007ad0 <CDC_CH_To_UART_Handle+0x28>)
 8007abe:	60fb      	str	r3, [r7, #12]
  else if (cdc_ch == 2)
  {
    handle = &huart3;
  }
#endif
  return handle;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3714      	adds	r7, #20
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr
 8007ace:	bf00      	nop
 8007ad0:	200004a4 	.word	0x200004a4

08007ad4 <UART_Handle_TO_CDC_CH>:

uint8_t UART_Handle_TO_CDC_CH(UART_HandleTypeDef *handle)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b085      	sub	sp, #20
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  uint8_t cdc_ch = 0;
 8007adc:	2300      	movs	r3, #0
 8007ade:	73fb      	strb	r3, [r7, #15]

  if (handle == &huart5)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	4a06      	ldr	r2, [pc, #24]	@ (8007afc <UART_Handle_TO_CDC_CH+0x28>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d101      	bne.n	8007aec <UART_Handle_TO_CDC_CH+0x18>
  {
    cdc_ch = 0;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	73fb      	strb	r3, [r7, #15]
  else if (handle == &huart3)
  {
    cdc_ch = 2;
  }
#endif
  return cdc_ch;
 8007aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3714      	adds	r7, #20
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr
 8007afa:	bf00      	nop
 8007afc:	200004a4 	.word	0x200004a4

08007b00 <Change_UART_Setting>:
//
void Change_UART_Setting(uint8_t cdc_ch)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b086      	sub	sp, #24
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	4603      	mov	r3, r0
 8007b08:	71fb      	strb	r3, [r7, #7]
  UART_HandleTypeDef *handle = CDC_CH_To_UART_Handle(cdc_ch);
 8007b0a:	79fb      	ldrb	r3, [r7, #7]
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f7ff ffcb 	bl	8007aa8 <CDC_CH_To_UART_Handle>
 8007b12:	6178      	str	r0, [r7, #20]

  if (HAL_UART_DeInit(handle) != HAL_OK)
 8007b14:	6978      	ldr	r0, [r7, #20]
 8007b16:	f7fd fbf7 	bl	8005308 <HAL_UART_DeInit>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d001      	beq.n	8007b24 <Change_UART_Setting+0x24>
  {
    /* Initialization Error */
    Error_Handler();
 8007b20:	f7f8 ff9a 	bl	8000a58 <Error_Handler>
  }
  /* set the Stop bit */
  switch (Line_Coding[cdc_ch].format)
 8007b24:	79fb      	ldrb	r3, [r7, #7]
 8007b26:	4a5c      	ldr	r2, [pc, #368]	@ (8007c98 <Change_UART_Setting+0x198>)
 8007b28:	00db      	lsls	r3, r3, #3
 8007b2a:	4413      	add	r3, r2
 8007b2c:	791b      	ldrb	r3, [r3, #4]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d002      	beq.n	8007b38 <Change_UART_Setting+0x38>
 8007b32:	2b02      	cmp	r3, #2
 8007b34:	d004      	beq.n	8007b40 <Change_UART_Setting+0x40>
 8007b36:	e008      	b.n	8007b4a <Change_UART_Setting+0x4a>
  {
  case 0:
    handle->Init.StopBits = UART_STOPBITS_1;
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	60da      	str	r2, [r3, #12]
    break;
 8007b3e:	e008      	b.n	8007b52 <Change_UART_Setting+0x52>
  case 2:
    handle->Init.StopBits = UART_STOPBITS_2;
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007b46:	60da      	str	r2, [r3, #12]
    break;
 8007b48:	e003      	b.n	8007b52 <Change_UART_Setting+0x52>
  default:
    handle->Init.StopBits = UART_STOPBITS_1;
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	60da      	str	r2, [r3, #12]
    break;
 8007b50:	bf00      	nop
  }

  /* set the parity bit*/
  switch (Line_Coding[cdc_ch].paritytype)
 8007b52:	79fb      	ldrb	r3, [r7, #7]
 8007b54:	4a50      	ldr	r2, [pc, #320]	@ (8007c98 <Change_UART_Setting+0x198>)
 8007b56:	00db      	lsls	r3, r3, #3
 8007b58:	4413      	add	r3, r2
 8007b5a:	795b      	ldrb	r3, [r3, #5]
 8007b5c:	2b02      	cmp	r3, #2
 8007b5e:	d00f      	beq.n	8007b80 <Change_UART_Setting+0x80>
 8007b60:	2b02      	cmp	r3, #2
 8007b62:	dc12      	bgt.n	8007b8a <Change_UART_Setting+0x8a>
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d002      	beq.n	8007b6e <Change_UART_Setting+0x6e>
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d004      	beq.n	8007b76 <Change_UART_Setting+0x76>
 8007b6c:	e00d      	b.n	8007b8a <Change_UART_Setting+0x8a>
  {
  case 0:
    handle->Init.Parity = UART_PARITY_NONE;
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	2200      	movs	r2, #0
 8007b72:	611a      	str	r2, [r3, #16]
    break;
 8007b74:	e00d      	b.n	8007b92 <Change_UART_Setting+0x92>
  case 1:
    handle->Init.Parity = UART_PARITY_ODD;
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8007b7c:	611a      	str	r2, [r3, #16]
    break;
 8007b7e:	e008      	b.n	8007b92 <Change_UART_Setting+0x92>
  case 2:
    handle->Init.Parity = UART_PARITY_EVEN;
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007b86:	611a      	str	r2, [r3, #16]
    break;
 8007b88:	e003      	b.n	8007b92 <Change_UART_Setting+0x92>
  default:
    handle->Init.Parity = UART_PARITY_NONE;
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	611a      	str	r2, [r3, #16]
    break;
 8007b90:	bf00      	nop
  }

  /*set the data type : only 8bits and 9bits is supported */
  switch (Line_Coding[cdc_ch].datatype)
 8007b92:	79fb      	ldrb	r3, [r7, #7]
 8007b94:	4a40      	ldr	r2, [pc, #256]	@ (8007c98 <Change_UART_Setting+0x198>)
 8007b96:	00db      	lsls	r3, r3, #3
 8007b98:	4413      	add	r3, r2
 8007b9a:	799b      	ldrb	r3, [r3, #6]
 8007b9c:	2b07      	cmp	r3, #7
 8007b9e:	d002      	beq.n	8007ba6 <Change_UART_Setting+0xa6>
 8007ba0:	2b08      	cmp	r3, #8
 8007ba2:	d004      	beq.n	8007bae <Change_UART_Setting+0xae>
 8007ba4:	e010      	b.n	8007bc8 <Change_UART_Setting+0xc8>
  {
  case 0x07:
    /* With this configuration a parity (Even or Odd) must be set */
    handle->Init.WordLength = UART_WORDLENGTH_8B;
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	609a      	str	r2, [r3, #8]
    break;
 8007bac:	e010      	b.n	8007bd0 <Change_UART_Setting+0xd0>
  case 0x08:
    if (handle->Init.Parity == UART_PARITY_NONE)
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	691b      	ldr	r3, [r3, #16]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d103      	bne.n	8007bbe <Change_UART_Setting+0xbe>
    {
      handle->Init.WordLength = UART_WORDLENGTH_8B;
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	609a      	str	r2, [r3, #8]
    else
    {
      handle->Init.WordLength = UART_WORDLENGTH_9B;
    }

    break;
 8007bbc:	e008      	b.n	8007bd0 <Change_UART_Setting+0xd0>
      handle->Init.WordLength = UART_WORDLENGTH_9B;
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007bc4:	609a      	str	r2, [r3, #8]
    break;
 8007bc6:	e003      	b.n	8007bd0 <Change_UART_Setting+0xd0>
  default:
    handle->Init.WordLength = UART_WORDLENGTH_8B;
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	609a      	str	r2, [r3, #8]
    break;
 8007bce:	bf00      	nop
  }

  if (Line_Coding[cdc_ch].bitrate == 0)
 8007bd0:	79fb      	ldrb	r3, [r7, #7]
 8007bd2:	4a31      	ldr	r2, [pc, #196]	@ (8007c98 <Change_UART_Setting+0x198>)
 8007bd4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d105      	bne.n	8007be8 <Change_UART_Setting+0xe8>
  {
    Line_Coding[cdc_ch].bitrate = 115200;
 8007bdc:	79fb      	ldrb	r3, [r7, #7]
 8007bde:	4a2e      	ldr	r2, [pc, #184]	@ (8007c98 <Change_UART_Setting+0x198>)
 8007be0:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8007be4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
  }

  handle->Init.BaudRate = Line_Coding[cdc_ch].bitrate;
 8007be8:	79fb      	ldrb	r3, [r7, #7]
 8007bea:	4a2b      	ldr	r2, [pc, #172]	@ (8007c98 <Change_UART_Setting+0x198>)
 8007bec:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	605a      	str	r2, [r3, #4]
  handle->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	619a      	str	r2, [r3, #24]
  handle->Init.Mode = UART_MODE_TX_RX;
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	220c      	movs	r2, #12
 8007bfe:	615a      	str	r2, [r3, #20]
  handle->Init.OverSampling = UART_OVERSAMPLING_16;
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	2200      	movs	r2, #0
 8007c04:	61da      	str	r2, [r3, #28]

  if (HAL_UART_Init(handle) != HAL_OK)
 8007c06:	6978      	ldr	r0, [r7, #20]
 8007c08:	f7fd fb2e 	bl	8005268 <HAL_UART_Init>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d001      	beq.n	8007c16 <Change_UART_Setting+0x116>
  {
    /* Initialization Error */
    Error_Handler();
 8007c12:	f7f8 ff21 	bl	8000a58 <Error_Handler>
  }

  /** rx for uart and tx buffer of usb */
  if (HAL_UART_Receive_IT(handle, TX_Buffer[cdc_ch], 1) != HAL_OK)
 8007c16:	79fb      	ldrb	r3, [r7, #7]
 8007c18:	019b      	lsls	r3, r3, #6
 8007c1a:	4a20      	ldr	r2, [pc, #128]	@ (8007c9c <Change_UART_Setting+0x19c>)
 8007c1c:	4413      	add	r3, r2
 8007c1e:	2201      	movs	r2, #1
 8007c20:	4619      	mov	r1, r3
 8007c22:	6978      	ldr	r0, [r7, #20]
 8007c24:	f7fd fc2d 	bl	8005482 <HAL_UART_Receive_IT>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d001      	beq.n	8007c32 <Change_UART_Setting+0x132>
  {
    /* Transfer error in reception process */
    Error_Handler();
 8007c2e:	f7f8 ff13 	bl	8000a58 <Error_Handler>
  }
  __HAL_UART_CLEAR_OREFLAG(handle);
 8007c32:	2300      	movs	r3, #0
 8007c34:	613b      	str	r3, [r7, #16]
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	613b      	str	r3, [r7, #16]
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	613b      	str	r3, [r7, #16]
 8007c46:	693b      	ldr	r3, [r7, #16]
  __HAL_UART_CLEAR_NEFLAG(handle);
 8007c48:	2300      	movs	r3, #0
 8007c4a:	60fb      	str	r3, [r7, #12]
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	60fb      	str	r3, [r7, #12]
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	60fb      	str	r3, [r7, #12]
 8007c5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_UART_CLEAR_FEFLAG(handle);
 8007c5e:	2300      	movs	r3, #0
 8007c60:	60bb      	str	r3, [r7, #8]
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	60bb      	str	r3, [r7, #8]
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	60bb      	str	r3, [r7, #8]
 8007c72:	68bb      	ldr	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8007c74:	f3bf 8f4f 	dsb	sy
}
 8007c78:	bf00      	nop
  __DSB();  // Ensure instruction completion
  Write_Index[cdc_ch] = 0;
 8007c7a:	79fb      	ldrb	r3, [r7, #7]
 8007c7c:	4a08      	ldr	r2, [pc, #32]	@ (8007ca0 <Change_UART_Setting+0x1a0>)
 8007c7e:	2100      	movs	r1, #0
 8007c80:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  Read_Index[cdc_ch] = 0;
 8007c84:	79fb      	ldrb	r3, [r7, #7]
 8007c86:	4a07      	ldr	r2, [pc, #28]	@ (8007ca4 <Change_UART_Setting+0x1a4>)
 8007c88:	2100      	movs	r1, #0
 8007c8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8007c8e:	bf00      	nop
 8007c90:	3718      	adds	r7, #24
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop
 8007c98:	20000e30 	.word	0x20000e30
 8007c9c:	20000df0 	.word	0x20000df0
 8007ca0:	20000e38 	.word	0x20000e38
 8007ca4:	20000e3c 	.word	0x20000e3c

08007ca8 <CDC_Init>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init(uint8_t cdc_ch)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	4603      	mov	r3, r0
 8007cb0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */

  /* ##-1- Set Application Buffers */
  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, RX_Buffer[cdc_ch]);
 8007cb2:	79fb      	ldrb	r3, [r7, #7]
 8007cb4:	019b      	lsls	r3, r3, #6
 8007cb6:	4a0d      	ldr	r2, [pc, #52]	@ (8007cec <CDC_Init+0x44>)
 8007cb8:	441a      	add	r2, r3
 8007cba:	79fb      	ldrb	r3, [r7, #7]
 8007cbc:	490c      	ldr	r1, [pc, #48]	@ (8007cf0 <CDC_Init+0x48>)
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f001 f806 	bl	8008cd0 <USBD_CDC_SetRxBuffer>

  //  /*##-2- Start the TIM Base generation in interrupt mode ####################*/
  //  /* Start Channel1 */
    if ((HAL_TIM_Base_Start_IT(&htim1) != HAL_OK )||(HAL_TIM_Base_Start_IT(&htim2) != HAL_OK ))
 8007cc4:	480b      	ldr	r0, [pc, #44]	@ (8007cf4 <CDC_Init+0x4c>)
 8007cc6:	f7fc feaf 	bl	8004a28 <HAL_TIM_Base_Start_IT>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d105      	bne.n	8007cdc <CDC_Init+0x34>
 8007cd0:	4809      	ldr	r0, [pc, #36]	@ (8007cf8 <CDC_Init+0x50>)
 8007cd2:	f7fc fea9 	bl	8004a28 <HAL_TIM_Base_Start_IT>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d001      	beq.n	8007ce0 <CDC_Init+0x38>
    {
      /* Starting Error */
      Error_Handler();
 8007cdc:	f7f8 febc 	bl	8000a58 <Error_Handler>
    }

  return (USBD_OK);
 8007ce0:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3708      	adds	r7, #8
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}
 8007cea:	bf00      	nop
 8007cec:	20000db0 	.word	0x20000db0
 8007cf0:	20000a94 	.word	0x20000a94
 8007cf4:	20000414 	.word	0x20000414
 8007cf8:	2000045c 	.word	0x2000045c

08007cfc <CDC_DeInit>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit(uint8_t cdc_ch)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b082      	sub	sp, #8
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	4603      	mov	r3, r0
 8007d04:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  /* DeInitialize the UART peripheral */
    if (HAL_UART_DeInit(CDC_CH_To_UART_Handle(cdc_ch)) != HAL_OK)
 8007d06:	79fb      	ldrb	r3, [r7, #7]
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f7ff fecd 	bl	8007aa8 <CDC_CH_To_UART_Handle>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	4618      	mov	r0, r3
 8007d12:	f7fd faf9 	bl	8005308 <HAL_UART_DeInit>
 8007d16:	4603      	mov	r3, r0
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d001      	beq.n	8007d20 <CDC_DeInit+0x24>
    {
      /* Initialization Error */
      Error_Handler();
 8007d1c:	f7f8 fe9c 	bl	8000a58 <Error_Handler>
    }
  return (USBD_OK);
 8007d20:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3708      	adds	r7, #8
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
	...

08007d2c <CDC_Control>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control(uint8_t cdc_ch, uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b082      	sub	sp, #8
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	603a      	str	r2, [r7, #0]
 8007d34:	461a      	mov	r2, r3
 8007d36:	4603      	mov	r3, r0
 8007d38:	71fb      	strb	r3, [r7, #7]
 8007d3a:	460b      	mov	r3, r1
 8007d3c:	71bb      	strb	r3, [r7, #6]
 8007d3e:	4613      	mov	r3, r2
 8007d40:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd)
 8007d42:	79bb      	ldrb	r3, [r7, #6]
 8007d44:	2b23      	cmp	r3, #35	@ 0x23
 8007d46:	f200 80ba 	bhi.w	8007ebe <CDC_Control+0x192>
 8007d4a:	a201      	add	r2, pc, #4	@ (adr r2, 8007d50 <CDC_Control+0x24>)
 8007d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d50:	08007ebf 	.word	0x08007ebf
 8007d54:	08007ebf 	.word	0x08007ebf
 8007d58:	08007ebf 	.word	0x08007ebf
 8007d5c:	08007ebf 	.word	0x08007ebf
 8007d60:	08007ebf 	.word	0x08007ebf
 8007d64:	08007ebf 	.word	0x08007ebf
 8007d68:	08007ebf 	.word	0x08007ebf
 8007d6c:	08007ebf 	.word	0x08007ebf
 8007d70:	08007ebf 	.word	0x08007ebf
 8007d74:	08007ebf 	.word	0x08007ebf
 8007d78:	08007ebf 	.word	0x08007ebf
 8007d7c:	08007ebf 	.word	0x08007ebf
 8007d80:	08007ebf 	.word	0x08007ebf
 8007d84:	08007ebf 	.word	0x08007ebf
 8007d88:	08007ebf 	.word	0x08007ebf
 8007d8c:	08007ebf 	.word	0x08007ebf
 8007d90:	08007ebf 	.word	0x08007ebf
 8007d94:	08007ebf 	.word	0x08007ebf
 8007d98:	08007ebf 	.word	0x08007ebf
 8007d9c:	08007ebf 	.word	0x08007ebf
 8007da0:	08007ebf 	.word	0x08007ebf
 8007da4:	08007ebf 	.word	0x08007ebf
 8007da8:	08007ebf 	.word	0x08007ebf
 8007dac:	08007ebf 	.word	0x08007ebf
 8007db0:	08007ebf 	.word	0x08007ebf
 8007db4:	08007ebf 	.word	0x08007ebf
 8007db8:	08007ebf 	.word	0x08007ebf
 8007dbc:	08007ebf 	.word	0x08007ebf
 8007dc0:	08007ebf 	.word	0x08007ebf
 8007dc4:	08007ebf 	.word	0x08007ebf
 8007dc8:	08007ebf 	.word	0x08007ebf
 8007dcc:	08007ebf 	.word	0x08007ebf
 8007dd0:	08007de1 	.word	0x08007de1
 8007dd4:	08007e49 	.word	0x08007e49
 8007dd8:	08007ebf 	.word	0x08007ebf
 8007ddc:	08007ebf 	.word	0x08007ebf
    /*                                        3 - Mark                             */
    /*                                        4 - Space                            */
    /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
    /*******************************************************************************/
  case CDC_SET_LINE_CODING:
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	461a      	mov	r2, r3
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	3301      	adds	r3, #1
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	021b      	lsls	r3, r3, #8
 8007dee:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	3302      	adds	r3, #2
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	041b      	lsls	r3, r3, #16
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8007df8:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	3303      	adds	r3, #3
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	061b      	lsls	r3, r3, #24
 8007e02:	431a      	orrs	r2, r3
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8007e04:	79fb      	ldrb	r3, [r7, #7]
 8007e06:	4611      	mov	r1, r2
 8007e08:	4a30      	ldr	r2, [pc, #192]	@ (8007ecc <CDC_Control+0x1a0>)
 8007e0a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    Line_Coding[cdc_ch].format = pbuf[4];
 8007e0e:	79fb      	ldrb	r3, [r7, #7]
 8007e10:	683a      	ldr	r2, [r7, #0]
 8007e12:	7911      	ldrb	r1, [r2, #4]
 8007e14:	4a2d      	ldr	r2, [pc, #180]	@ (8007ecc <CDC_Control+0x1a0>)
 8007e16:	00db      	lsls	r3, r3, #3
 8007e18:	4413      	add	r3, r2
 8007e1a:	460a      	mov	r2, r1
 8007e1c:	711a      	strb	r2, [r3, #4]
    Line_Coding[cdc_ch].paritytype = pbuf[5];
 8007e1e:	79fb      	ldrb	r3, [r7, #7]
 8007e20:	683a      	ldr	r2, [r7, #0]
 8007e22:	7951      	ldrb	r1, [r2, #5]
 8007e24:	4a29      	ldr	r2, [pc, #164]	@ (8007ecc <CDC_Control+0x1a0>)
 8007e26:	00db      	lsls	r3, r3, #3
 8007e28:	4413      	add	r3, r2
 8007e2a:	460a      	mov	r2, r1
 8007e2c:	715a      	strb	r2, [r3, #5]
    Line_Coding[cdc_ch].datatype = pbuf[6];
 8007e2e:	79fb      	ldrb	r3, [r7, #7]
 8007e30:	683a      	ldr	r2, [r7, #0]
 8007e32:	7991      	ldrb	r1, [r2, #6]
 8007e34:	4a25      	ldr	r2, [pc, #148]	@ (8007ecc <CDC_Control+0x1a0>)
 8007e36:	00db      	lsls	r3, r3, #3
 8007e38:	4413      	add	r3, r2
 8007e3a:	460a      	mov	r2, r1
 8007e3c:	719a      	strb	r2, [r3, #6]

    Change_UART_Setting(cdc_ch);
 8007e3e:	79fb      	ldrb	r3, [r7, #7]
 8007e40:	4618      	mov	r0, r3
 8007e42:	f7ff fe5d 	bl	8007b00 <Change_UART_Setting>
    break;
 8007e46:	e03b      	b.n	8007ec0 <CDC_Control+0x194>

  case CDC_GET_LINE_CODING:
    pbuf[0] = (uint8_t)(Line_Coding[cdc_ch].bitrate);
 8007e48:	79fb      	ldrb	r3, [r7, #7]
 8007e4a:	4a20      	ldr	r2, [pc, #128]	@ (8007ecc <CDC_Control+0x1a0>)
 8007e4c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007e50:	b2da      	uxtb	r2, r3
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	701a      	strb	r2, [r3, #0]
    pbuf[1] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 8);
 8007e56:	79fb      	ldrb	r3, [r7, #7]
 8007e58:	4a1c      	ldr	r2, [pc, #112]	@ (8007ecc <CDC_Control+0x1a0>)
 8007e5a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007e5e:	0a1a      	lsrs	r2, r3, #8
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	3301      	adds	r3, #1
 8007e64:	b2d2      	uxtb	r2, r2
 8007e66:	701a      	strb	r2, [r3, #0]
    pbuf[2] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 16);
 8007e68:	79fb      	ldrb	r3, [r7, #7]
 8007e6a:	4a18      	ldr	r2, [pc, #96]	@ (8007ecc <CDC_Control+0x1a0>)
 8007e6c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007e70:	0c1a      	lsrs	r2, r3, #16
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	3302      	adds	r3, #2
 8007e76:	b2d2      	uxtb	r2, r2
 8007e78:	701a      	strb	r2, [r3, #0]
    pbuf[3] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 24);
 8007e7a:	79fb      	ldrb	r3, [r7, #7]
 8007e7c:	4a13      	ldr	r2, [pc, #76]	@ (8007ecc <CDC_Control+0x1a0>)
 8007e7e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007e82:	0e1a      	lsrs	r2, r3, #24
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	3303      	adds	r3, #3
 8007e88:	b2d2      	uxtb	r2, r2
 8007e8a:	701a      	strb	r2, [r3, #0]
    pbuf[4] = Line_Coding[cdc_ch].format;
 8007e8c:	79fb      	ldrb	r3, [r7, #7]
 8007e8e:	683a      	ldr	r2, [r7, #0]
 8007e90:	3204      	adds	r2, #4
 8007e92:	490e      	ldr	r1, [pc, #56]	@ (8007ecc <CDC_Control+0x1a0>)
 8007e94:	00db      	lsls	r3, r3, #3
 8007e96:	440b      	add	r3, r1
 8007e98:	791b      	ldrb	r3, [r3, #4]
 8007e9a:	7013      	strb	r3, [r2, #0]
    pbuf[5] = Line_Coding[cdc_ch].paritytype;
 8007e9c:	79fb      	ldrb	r3, [r7, #7]
 8007e9e:	683a      	ldr	r2, [r7, #0]
 8007ea0:	3205      	adds	r2, #5
 8007ea2:	490a      	ldr	r1, [pc, #40]	@ (8007ecc <CDC_Control+0x1a0>)
 8007ea4:	00db      	lsls	r3, r3, #3
 8007ea6:	440b      	add	r3, r1
 8007ea8:	795b      	ldrb	r3, [r3, #5]
 8007eaa:	7013      	strb	r3, [r2, #0]
    pbuf[6] = Line_Coding[cdc_ch].datatype;
 8007eac:	79fb      	ldrb	r3, [r7, #7]
 8007eae:	683a      	ldr	r2, [r7, #0]
 8007eb0:	3206      	adds	r2, #6
 8007eb2:	4906      	ldr	r1, [pc, #24]	@ (8007ecc <CDC_Control+0x1a0>)
 8007eb4:	00db      	lsls	r3, r3, #3
 8007eb6:	440b      	add	r3, r1
 8007eb8:	799b      	ldrb	r3, [r3, #6]
 8007eba:	7013      	strb	r3, [r2, #0]
    break;
 8007ebc:	e000      	b.n	8007ec0 <CDC_Control+0x194>
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007ebe:	bf00      	nop
  }

  return (USBD_OK);
 8007ec0:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3708      	adds	r7, #8
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}
 8007eca:	bf00      	nop
 8007ecc:	20000e30 	.word	0x20000e30

08007ed0 <CDC_Receive>:
//  USBD_CDC_ReceivePacket(cdc_ch, &hUsbDevice);
//  return (USBD_OK);
//  /* USER CODE END 6 */
//}
static int8_t CDC_Receive(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len)
{
 8007ed0:	b5b0      	push	{r4, r5, r7, lr}
 8007ed2:	b086      	sub	sp, #24
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	60b9      	str	r1, [r7, #8]
 8007eda:	607a      	str	r2, [r7, #4]
 8007edc:	73fb      	strb	r3, [r7, #15]
  for (uint32_t i = 0; i < *Len; i++)
 8007ede:	2300      	movs	r3, #0
 8007ee0:	617b      	str	r3, [r7, #20]
 8007ee2:	e021      	b.n	8007f28 <CDC_Receive+0x58>
  {
    CDC_RX_Buffer[cdc_ch][CDC_RX_WriteIndex[cdc_ch]++] = Buf[i];
 8007ee4:	68ba      	ldr	r2, [r7, #8]
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	18d0      	adds	r0, r2, r3
 8007eea:	7bf9      	ldrb	r1, [r7, #15]
 8007eec:	7bfa      	ldrb	r2, [r7, #15]
 8007eee:	4b19      	ldr	r3, [pc, #100]	@ (8007f54 <CDC_Receive+0x84>)
 8007ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ef4:	1c5c      	adds	r4, r3, #1
 8007ef6:	4d17      	ldr	r5, [pc, #92]	@ (8007f54 <CDC_Receive+0x84>)
 8007ef8:	f845 4022 	str.w	r4, [r5, r2, lsl #2]
 8007efc:	7804      	ldrb	r4, [r0, #0]
 8007efe:	4816      	ldr	r0, [pc, #88]	@ (8007f58 <CDC_Receive+0x88>)
 8007f00:	030a      	lsls	r2, r1, #12
 8007f02:	4402      	add	r2, r0
 8007f04:	4413      	add	r3, r2
 8007f06:	4622      	mov	r2, r4
 8007f08:	701a      	strb	r2, [r3, #0]
    if (CDC_RX_WriteIndex[cdc_ch] >= CDC_RX_BUFFER_SIZE)
 8007f0a:	7bfb      	ldrb	r3, [r7, #15]
 8007f0c:	4a11      	ldr	r2, [pc, #68]	@ (8007f54 <CDC_Receive+0x84>)
 8007f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f16:	d304      	bcc.n	8007f22 <CDC_Receive+0x52>
      CDC_RX_WriteIndex[cdc_ch] = 0;
 8007f18:	7bfb      	ldrb	r3, [r7, #15]
 8007f1a:	4a0e      	ldr	r2, [pc, #56]	@ (8007f54 <CDC_Receive+0x84>)
 8007f1c:	2100      	movs	r1, #0
 8007f1e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (uint32_t i = 0; i < *Len; i++)
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	3301      	adds	r3, #1
 8007f26:	617b      	str	r3, [r7, #20]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	697a      	ldr	r2, [r7, #20]
 8007f2e:	429a      	cmp	r2, r3
 8007f30:	d3d8      	bcc.n	8007ee4 <CDC_Receive+0x14>
  }

  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, Buf);
 8007f32:	7bfb      	ldrb	r3, [r7, #15]
 8007f34:	68ba      	ldr	r2, [r7, #8]
 8007f36:	4909      	ldr	r1, [pc, #36]	@ (8007f5c <CDC_Receive+0x8c>)
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f000 fec9 	bl	8008cd0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(cdc_ch, &hUsbDevice);
 8007f3e:	7bfb      	ldrb	r3, [r7, #15]
 8007f40:	4906      	ldr	r1, [pc, #24]	@ (8007f5c <CDC_Receive+0x8c>)
 8007f42:	4618      	mov	r0, r3
 8007f44:	f000 ff24 	bl	8008d90 <USBD_CDC_ReceivePacket>
  return USBD_OK;
 8007f48:	2300      	movs	r3, #0
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3718      	adds	r7, #24
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bdb0      	pop	{r4, r5, r7, pc}
 8007f52:	bf00      	nop
 8007f54:	20001e40 	.word	0x20001e40
 8007f58:	20000e40 	.word	0x20000e40
 8007f5c:	20000a94 	.word	0x20000a94

08007f60 <CDC_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b085      	sub	sp, #20
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	60b9      	str	r1, [r7, #8]
 8007f68:	607a      	str	r2, [r7, #4]
 8007f6a:	461a      	mov	r2, r3
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	73fb      	strb	r3, [r7, #15]
 8007f70:	4613      	mov	r3, r2
 8007f72:	73bb      	strb	r3, [r7, #14]
  return (USBD_OK);
 8007f74:	2300      	movs	r3, #0
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3714      	adds	r7, #20
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr
	...

08007f84 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b084      	sub	sp, #16
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  uint8_t ch = UART_Handle_TO_CDC_CH(huart);
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f7ff fda1 	bl	8007ad4 <UART_Handle_TO_CDC_CH>
 8007f92:	4603      	mov	r3, r0
 8007f94:	73fb      	strb	r3, [r7, #15]
  if (ch >= NUMBER_OF_CDC) return;
 8007f96:	7bfb      	ldrb	r3, [r7, #15]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d11c      	bne.n	8007fd6 <HAL_UART_TxCpltCallback+0x52>

  // Cập nhật ReadIndex sau khi truyền xong
  if (CDC_RX_ReadIndex[ch] > CDC_RX_WriteIndex[ch])
 8007f9c:	7bfb      	ldrb	r3, [r7, #15]
 8007f9e:	4a10      	ldr	r2, [pc, #64]	@ (8007fe0 <HAL_UART_TxCpltCallback+0x5c>)
 8007fa0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007fa4:	7bfb      	ldrb	r3, [r7, #15]
 8007fa6:	490f      	ldr	r1, [pc, #60]	@ (8007fe4 <HAL_UART_TxCpltCallback+0x60>)
 8007fa8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d905      	bls.n	8007fbc <HAL_UART_TxCpltCallback+0x38>
  {
    CDC_RX_ReadIndex[ch] = 0;
 8007fb0:	7bfb      	ldrb	r3, [r7, #15]
 8007fb2:	4a0b      	ldr	r2, [pc, #44]	@ (8007fe0 <HAL_UART_TxCpltCallback+0x5c>)
 8007fb4:	2100      	movs	r1, #0
 8007fb6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8007fba:	e007      	b.n	8007fcc <HAL_UART_TxCpltCallback+0x48>
  }
  else
  {
    CDC_RX_ReadIndex[ch] = CDC_RX_WriteIndex[ch];
 8007fbc:	7bfa      	ldrb	r2, [r7, #15]
 8007fbe:	7bfb      	ldrb	r3, [r7, #15]
 8007fc0:	4908      	ldr	r1, [pc, #32]	@ (8007fe4 <HAL_UART_TxCpltCallback+0x60>)
 8007fc2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007fc6:	4906      	ldr	r1, [pc, #24]	@ (8007fe0 <HAL_UART_TxCpltCallback+0x5c>)
 8007fc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }

  uart_tx_busy[ch] = 0;
 8007fcc:	7bfb      	ldrb	r3, [r7, #15]
 8007fce:	4a06      	ldr	r2, [pc, #24]	@ (8007fe8 <HAL_UART_TxCpltCallback+0x64>)
 8007fd0:	2100      	movs	r1, #0
 8007fd2:	54d1      	strb	r1, [r2, r3]
 8007fd4:	e000      	b.n	8007fd8 <HAL_UART_TxCpltCallback+0x54>
  if (ch >= NUMBER_OF_CDC) return;
 8007fd6:	bf00      	nop
}
 8007fd8:	3710      	adds	r7, #16
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	bf00      	nop
 8007fe0:	20001e44 	.word	0x20001e44
 8007fe4:	20001e40 	.word	0x20001e40
 8007fe8:	20001e48 	.word	0x20001e48

08007fec <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b088      	sub	sp, #32
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	4a63      	ldr	r2, [pc, #396]	@ (8008184 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d15e      	bne.n	80080ba <HAL_TIM_PeriodElapsedCallback+0xce>
	{
	  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	77fb      	strb	r3, [r7, #31]
 8008000:	e058      	b.n	80080b4 <HAL_TIM_PeriodElapsedCallback+0xc8>
	  {
	    if (CDC_RX_ReadIndex[i] != CDC_RX_WriteIndex[i])
 8008002:	7ffb      	ldrb	r3, [r7, #31]
 8008004:	4a60      	ldr	r2, [pc, #384]	@ (8008188 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8008006:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800800a:	7ffb      	ldrb	r3, [r7, #31]
 800800c:	495f      	ldr	r1, [pc, #380]	@ (800818c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800800e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008012:	429a      	cmp	r2, r3
 8008014:	d04b      	beq.n	80080ae <HAL_TIM_PeriodElapsedCallback+0xc2>
	    {
	      uint32_t buffptr = CDC_RX_ReadIndex[i];
 8008016:	7ffb      	ldrb	r3, [r7, #31]
 8008018:	4a5b      	ldr	r2, [pc, #364]	@ (8008188 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 800801a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800801e:	60fb      	str	r3, [r7, #12]
	      uint32_t buffsize;

	      if (CDC_RX_ReadIndex[i] > CDC_RX_WriteIndex[i])
 8008020:	7ffb      	ldrb	r3, [r7, #31]
 8008022:	4a59      	ldr	r2, [pc, #356]	@ (8008188 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8008024:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008028:	7ffb      	ldrb	r3, [r7, #31]
 800802a:	4958      	ldr	r1, [pc, #352]	@ (800818c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800802c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008030:	429a      	cmp	r2, r3
 8008032:	d907      	bls.n	8008044 <HAL_TIM_PeriodElapsedCallback+0x58>
	        buffsize = CDC_RX_BUFFER_SIZE - CDC_RX_ReadIndex[i];
 8008034:	7ffb      	ldrb	r3, [r7, #31]
 8008036:	4a54      	ldr	r2, [pc, #336]	@ (8008188 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8008038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800803c:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8008040:	61bb      	str	r3, [r7, #24]
 8008042:	e009      	b.n	8008058 <HAL_TIM_PeriodElapsedCallback+0x6c>
	      else
	        buffsize = CDC_RX_WriteIndex[i] - CDC_RX_ReadIndex[i];
 8008044:	7ffb      	ldrb	r3, [r7, #31]
 8008046:	4a51      	ldr	r2, [pc, #324]	@ (800818c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8008048:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800804c:	7ffb      	ldrb	r3, [r7, #31]
 800804e:	494e      	ldr	r1, [pc, #312]	@ (8008188 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8008050:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008054:	1ad3      	subs	r3, r2, r3
 8008056:	61bb      	str	r3, [r7, #24]

	      // Chặn kích thước nếu quá lớn (optional)
	      if (buffsize > 64) buffsize = 64;
 8008058:	69bb      	ldr	r3, [r7, #24]
 800805a:	2b40      	cmp	r3, #64	@ 0x40
 800805c:	d901      	bls.n	8008062 <HAL_TIM_PeriodElapsedCallback+0x76>
 800805e:	2340      	movs	r3, #64	@ 0x40
 8008060:	61bb      	str	r3, [r7, #24]

	      HAL_UART_Transmit(CDC_CH_To_UART_Handle(i), &CDC_RX_Buffer[i][buffptr], buffsize, HAL_MAX_DELAY);
 8008062:	7ffb      	ldrb	r3, [r7, #31]
 8008064:	4618      	mov	r0, r3
 8008066:	f7ff fd1f 	bl	8007aa8 <CDC_CH_To_UART_Handle>
 800806a:	7ffb      	ldrb	r3, [r7, #31]
 800806c:	031a      	lsls	r2, r3, #12
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	4413      	add	r3, r2
 8008072:	4a47      	ldr	r2, [pc, #284]	@ (8008190 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8008074:	1899      	adds	r1, r3, r2
 8008076:	69bb      	ldr	r3, [r7, #24]
 8008078:	b29a      	uxth	r2, r3
 800807a:	f04f 33ff 	mov.w	r3, #4294967295
 800807e:	f7fd f975 	bl	800536c <HAL_UART_Transmit>

	      CDC_RX_ReadIndex[i] += buffsize;
 8008082:	7ffb      	ldrb	r3, [r7, #31]
 8008084:	4a40      	ldr	r2, [pc, #256]	@ (8008188 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8008086:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800808a:	7ffb      	ldrb	r3, [r7, #31]
 800808c:	69ba      	ldr	r2, [r7, #24]
 800808e:	440a      	add	r2, r1
 8008090:	493d      	ldr	r1, [pc, #244]	@ (8008188 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8008092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	      if (CDC_RX_ReadIndex[i] >= CDC_RX_BUFFER_SIZE)
 8008096:	7ffb      	ldrb	r3, [r7, #31]
 8008098:	4a3b      	ldr	r2, [pc, #236]	@ (8008188 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 800809a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800809e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080a2:	d304      	bcc.n	80080ae <HAL_TIM_PeriodElapsedCallback+0xc2>
	        CDC_RX_ReadIndex[i] = 0;
 80080a4:	7ffb      	ldrb	r3, [r7, #31]
 80080a6:	4a38      	ldr	r2, [pc, #224]	@ (8008188 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80080a8:	2100      	movs	r1, #0
 80080aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80080ae:	7ffb      	ldrb	r3, [r7, #31]
 80080b0:	3301      	adds	r3, #1
 80080b2:	77fb      	strb	r3, [r7, #31]
 80080b4:	7ffb      	ldrb	r3, [r7, #31]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d0a3      	beq.n	8008002 <HAL_TIM_PeriodElapsedCallback+0x16>
	    }
	  }
	}

if (htim == &htim1){
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	4a35      	ldr	r2, [pc, #212]	@ (8008194 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d15b      	bne.n	800817a <HAL_TIM_PeriodElapsedCallback+0x18e>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80080c2:	2300      	movs	r3, #0
 80080c4:	75fb      	strb	r3, [r7, #23]
 80080c6:	e055      	b.n	8008174 <HAL_TIM_PeriodElapsedCallback+0x188>
  {
    uint32_t buffptr;
    uint32_t buffsize;

    if (Read_Index[i] != Write_Index[i])
 80080c8:	7dfb      	ldrb	r3, [r7, #23]
 80080ca:	4a33      	ldr	r2, [pc, #204]	@ (8008198 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80080cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80080d0:	7dfb      	ldrb	r3, [r7, #23]
 80080d2:	4932      	ldr	r1, [pc, #200]	@ (800819c <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80080d4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80080d8:	429a      	cmp	r2, r3
 80080da:	d048      	beq.n	800816e <HAL_TIM_PeriodElapsedCallback+0x182>
    {
      if (Read_Index[i] > Write_Index[i]) /* Rollback */
 80080dc:	7dfb      	ldrb	r3, [r7, #23]
 80080de:	4a2e      	ldr	r2, [pc, #184]	@ (8008198 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80080e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80080e4:	7dfb      	ldrb	r3, [r7, #23]
 80080e6:	492d      	ldr	r1, [pc, #180]	@ (800819c <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80080e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d907      	bls.n	8008100 <HAL_TIM_PeriodElapsedCallback+0x114>
      {
        buffsize = APP_TX_DATA_SIZE - Read_Index[i];
 80080f0:	7dfb      	ldrb	r3, [r7, #23]
 80080f2:	4a29      	ldr	r2, [pc, #164]	@ (8008198 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80080f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080f8:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 80080fc:	613b      	str	r3, [r7, #16]
 80080fe:	e009      	b.n	8008114 <HAL_TIM_PeriodElapsedCallback+0x128>
      }
      else
      {
        buffsize = Write_Index[i] - Read_Index[i];
 8008100:	7dfb      	ldrb	r3, [r7, #23]
 8008102:	4a26      	ldr	r2, [pc, #152]	@ (800819c <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8008104:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008108:	7dfb      	ldrb	r3, [r7, #23]
 800810a:	4923      	ldr	r1, [pc, #140]	@ (8008198 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 800810c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008110:	1ad3      	subs	r3, r2, r3
 8008112:	613b      	str	r3, [r7, #16]
      }

      buffptr = Read_Index[i];
 8008114:	7dfb      	ldrb	r3, [r7, #23]
 8008116:	4a20      	ldr	r2, [pc, #128]	@ (8008198 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8008118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800811c:	60bb      	str	r3, [r7, #8]

      USBD_CDC_SetTxBuffer(i, &hUsbDevice, &TX_Buffer[i][buffptr], buffsize);
 800811e:	7dfb      	ldrb	r3, [r7, #23]
 8008120:	019a      	lsls	r2, r3, #6
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	4413      	add	r3, r2
 8008126:	4a1e      	ldr	r2, [pc, #120]	@ (80081a0 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8008128:	441a      	add	r2, r3
 800812a:	7df8      	ldrb	r0, [r7, #23]
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	491d      	ldr	r1, [pc, #116]	@ (80081a4 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8008130:	f000 fdaa 	bl	8008c88 <USBD_CDC_SetTxBuffer>

      if (USBD_CDC_TransmitPacket(i, &hUsbDevice) == USBD_OK)
 8008134:	7dfb      	ldrb	r3, [r7, #23]
 8008136:	491b      	ldr	r1, [pc, #108]	@ (80081a4 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8008138:	4618      	mov	r0, r3
 800813a:	f000 fde7 	bl	8008d0c <USBD_CDC_TransmitPacket>
 800813e:	4603      	mov	r3, r0
 8008140:	2b00      	cmp	r3, #0
 8008142:	d114      	bne.n	800816e <HAL_TIM_PeriodElapsedCallback+0x182>
      {
        Read_Index[i] += buffsize;
 8008144:	7dfb      	ldrb	r3, [r7, #23]
 8008146:	4a14      	ldr	r2, [pc, #80]	@ (8008198 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8008148:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800814c:	7dfb      	ldrb	r3, [r7, #23]
 800814e:	693a      	ldr	r2, [r7, #16]
 8008150:	440a      	add	r2, r1
 8008152:	4911      	ldr	r1, [pc, #68]	@ (8008198 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8008154:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if (Read_Index[i] == APP_RX_DATA_SIZE)
 8008158:	7dfb      	ldrb	r3, [r7, #23]
 800815a:	4a0f      	ldr	r2, [pc, #60]	@ (8008198 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 800815c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008160:	2b40      	cmp	r3, #64	@ 0x40
 8008162:	d104      	bne.n	800816e <HAL_TIM_PeriodElapsedCallback+0x182>
        {
          Read_Index[i] = 0;
 8008164:	7dfb      	ldrb	r3, [r7, #23]
 8008166:	4a0c      	ldr	r2, [pc, #48]	@ (8008198 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8008168:	2100      	movs	r1, #0
 800816a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800816e:	7dfb      	ldrb	r3, [r7, #23]
 8008170:	3301      	adds	r3, #1
 8008172:	75fb      	strb	r3, [r7, #23]
 8008174:	7dfb      	ldrb	r3, [r7, #23]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d0a6      	beq.n	80080c8 <HAL_TIM_PeriodElapsedCallback+0xdc>
      }
    }
  }
	}

}
 800817a:	bf00      	nop
 800817c:	3720      	adds	r7, #32
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}
 8008182:	bf00      	nop
 8008184:	2000045c 	.word	0x2000045c
 8008188:	20001e44 	.word	0x20001e44
 800818c:	20001e40 	.word	0x20001e40
 8008190:	20000e40 	.word	0x20000e40
 8008194:	20000414 	.word	0x20000414
 8008198:	20000e3c 	.word	0x20000e3c
 800819c:	20000e38 	.word	0x20000e38
 80081a0:	20000df0 	.word	0x20000df0
 80081a4:	20000a94 	.word	0x20000a94

080081a8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b084      	sub	sp, #16
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  uint8_t cdc_ch = UART_Handle_TO_CDC_CH(huart);
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f7ff fc8f 	bl	8007ad4 <UART_Handle_TO_CDC_CH>
 80081b6:	4603      	mov	r3, r0
 80081b8:	73fb      	strb	r3, [r7, #15]
  //CDC_Transmit(cdc_ch, (TX_Buffer[cdc_ch] + Write_Index[cdc_ch]), 1);
  /* Increment Index for buffer writing */
  Write_Index[cdc_ch]++;
 80081ba:	7bfb      	ldrb	r3, [r7, #15]
 80081bc:	4a11      	ldr	r2, [pc, #68]	@ (8008204 <HAL_UART_RxCpltCallback+0x5c>)
 80081be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80081c2:	3201      	adds	r2, #1
 80081c4:	490f      	ldr	r1, [pc, #60]	@ (8008204 <HAL_UART_RxCpltCallback+0x5c>)
 80081c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  /* To avoid buffer overflow */
  if (Write_Index[cdc_ch] == APP_RX_DATA_SIZE)
 80081ca:	7bfb      	ldrb	r3, [r7, #15]
 80081cc:	4a0d      	ldr	r2, [pc, #52]	@ (8008204 <HAL_UART_RxCpltCallback+0x5c>)
 80081ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081d2:	2b40      	cmp	r3, #64	@ 0x40
 80081d4:	d104      	bne.n	80081e0 <HAL_UART_RxCpltCallback+0x38>
  {
    Write_Index[cdc_ch] = 0;
 80081d6:	7bfb      	ldrb	r3, [r7, #15]
 80081d8:	4a0a      	ldr	r2, [pc, #40]	@ (8008204 <HAL_UART_RxCpltCallback+0x5c>)
 80081da:	2100      	movs	r1, #0
 80081dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  }

  /* Start another reception: provide the buffer pointer with offset and the buffer size */
  HAL_UART_Receive_IT(huart, (TX_Buffer[cdc_ch] + Write_Index[cdc_ch]), 1);
 80081e0:	7bfb      	ldrb	r3, [r7, #15]
 80081e2:	019b      	lsls	r3, r3, #6
 80081e4:	4a08      	ldr	r2, [pc, #32]	@ (8008208 <HAL_UART_RxCpltCallback+0x60>)
 80081e6:	441a      	add	r2, r3
 80081e8:	7bfb      	ldrb	r3, [r7, #15]
 80081ea:	4906      	ldr	r1, [pc, #24]	@ (8008204 <HAL_UART_RxCpltCallback+0x5c>)
 80081ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80081f0:	4413      	add	r3, r2
 80081f2:	2201      	movs	r2, #1
 80081f4:	4619      	mov	r1, r3
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f7fd f943 	bl	8005482 <HAL_UART_Receive_IT>
}
 80081fc:	bf00      	nop
 80081fe:	3710      	adds	r7, #16
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}
 8008204:	20000e38 	.word	0x20000e38
 8008208:	20000df0 	.word	0x20000df0

0800820c <USBD_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
 8008212:	4603      	mov	r3, r0
 8008214:	6039      	str	r1, [r7, #0]
 8008216:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_DeviceDesc);
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	2212      	movs	r2, #18
 800821c:	801a      	strh	r2, [r3, #0]
  return USBD_DeviceDesc;
 800821e:	4b03      	ldr	r3, [pc, #12]	@ (800822c <USBD_DeviceDescriptor+0x20>)
}
 8008220:	4618      	mov	r0, r3
 8008222:	370c      	adds	r7, #12
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr
 800822c:	200000bc 	.word	0x200000bc

08008230 <USBD_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008230:	b480      	push	{r7}
 8008232:	b083      	sub	sp, #12
 8008234:	af00      	add	r7, sp, #0
 8008236:	4603      	mov	r3, r0
 8008238:	6039      	str	r1, [r7, #0]
 800823a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	2204      	movs	r2, #4
 8008240:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008242:	4b03      	ldr	r3, [pc, #12]	@ (8008250 <USBD_LangIDStrDescriptor+0x20>)
}
 8008244:	4618      	mov	r0, r3
 8008246:	370c      	adds	r7, #12
 8008248:	46bd      	mov	sp, r7
 800824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824e:	4770      	bx	lr
 8008250:	200000d0 	.word	0x200000d0

08008254 <USBD_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b082      	sub	sp, #8
 8008258:	af00      	add	r7, sp, #0
 800825a:	4603      	mov	r3, r0
 800825c:	6039      	str	r1, [r7, #0]
 800825e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008260:	79fb      	ldrb	r3, [r7, #7]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d105      	bne.n	8008272 <USBD_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8008266:	683a      	ldr	r2, [r7, #0]
 8008268:	4907      	ldr	r1, [pc, #28]	@ (8008288 <USBD_ProductStrDescriptor+0x34>)
 800826a:	4808      	ldr	r0, [pc, #32]	@ (800828c <USBD_ProductStrDescriptor+0x38>)
 800826c:	f002 fcf3 	bl	800ac56 <USBD_GetString>
 8008270:	e004      	b.n	800827c <USBD_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8008272:	683a      	ldr	r2, [r7, #0]
 8008274:	4904      	ldr	r1, [pc, #16]	@ (8008288 <USBD_ProductStrDescriptor+0x34>)
 8008276:	4805      	ldr	r0, [pc, #20]	@ (800828c <USBD_ProductStrDescriptor+0x38>)
 8008278:	f002 fced 	bl	800ac56 <USBD_GetString>
  }
  return USBD_StrDesc;
 800827c:	4b02      	ldr	r3, [pc, #8]	@ (8008288 <USBD_ProductStrDescriptor+0x34>)
}
 800827e:	4618      	mov	r0, r3
 8008280:	3708      	adds	r7, #8
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop
 8008288:	20001e4c 	.word	0x20001e4c
 800828c:	0800bd58 	.word	0x0800bd58

08008290 <USBD_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b082      	sub	sp, #8
 8008294:	af00      	add	r7, sp, #0
 8008296:	4603      	mov	r3, r0
 8008298:	6039      	str	r1, [r7, #0]
 800829a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800829c:	683a      	ldr	r2, [r7, #0]
 800829e:	4904      	ldr	r1, [pc, #16]	@ (80082b0 <USBD_ManufacturerStrDescriptor+0x20>)
 80082a0:	4804      	ldr	r0, [pc, #16]	@ (80082b4 <USBD_ManufacturerStrDescriptor+0x24>)
 80082a2:	f002 fcd8 	bl	800ac56 <USBD_GetString>
  return USBD_StrDesc;
 80082a6:	4b02      	ldr	r3, [pc, #8]	@ (80082b0 <USBD_ManufacturerStrDescriptor+0x20>)
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3708      	adds	r7, #8
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	20001e4c 	.word	0x20001e4c
 80082b4:	0800bd68 	.word	0x0800bd68

080082b8 <USBD_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b082      	sub	sp, #8
 80082bc:	af00      	add	r7, sp, #0
 80082be:	4603      	mov	r3, r0
 80082c0:	6039      	str	r1, [r7, #0]
 80082c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	221a      	movs	r2, #26
 80082c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80082ca:	f000 f843 	bl	8008354 <Get_SerialNum>
  /* USER CODE BEGIN USBD_SerialStrDescriptor */

  /* USER CODE END USBD_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80082ce:	4b02      	ldr	r3, [pc, #8]	@ (80082d8 <USBD_SerialStrDescriptor+0x20>)
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3708      	adds	r7, #8
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}
 80082d8:	200000d4 	.word	0x200000d4

080082dc <USBD_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b082      	sub	sp, #8
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	4603      	mov	r3, r0
 80082e4:	6039      	str	r1, [r7, #0]
 80082e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80082e8:	79fb      	ldrb	r3, [r7, #7]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d105      	bne.n	80082fa <USBD_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80082ee:	683a      	ldr	r2, [r7, #0]
 80082f0:	4907      	ldr	r1, [pc, #28]	@ (8008310 <USBD_ConfigStrDescriptor+0x34>)
 80082f2:	4808      	ldr	r0, [pc, #32]	@ (8008314 <USBD_ConfigStrDescriptor+0x38>)
 80082f4:	f002 fcaf 	bl	800ac56 <USBD_GetString>
 80082f8:	e004      	b.n	8008304 <USBD_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80082fa:	683a      	ldr	r2, [r7, #0]
 80082fc:	4904      	ldr	r1, [pc, #16]	@ (8008310 <USBD_ConfigStrDescriptor+0x34>)
 80082fe:	4805      	ldr	r0, [pc, #20]	@ (8008314 <USBD_ConfigStrDescriptor+0x38>)
 8008300:	f002 fca9 	bl	800ac56 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008304:	4b02      	ldr	r3, [pc, #8]	@ (8008310 <USBD_ConfigStrDescriptor+0x34>)
}
 8008306:	4618      	mov	r0, r3
 8008308:	3708      	adds	r7, #8
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop
 8008310:	20001e4c 	.word	0x20001e4c
 8008314:	0800bd70 	.word	0x0800bd70

08008318 <USBD_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b082      	sub	sp, #8
 800831c:	af00      	add	r7, sp, #0
 800831e:	4603      	mov	r3, r0
 8008320:	6039      	str	r1, [r7, #0]
 8008322:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008324:	79fb      	ldrb	r3, [r7, #7]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d105      	bne.n	8008336 <USBD_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800832a:	683a      	ldr	r2, [r7, #0]
 800832c:	4907      	ldr	r1, [pc, #28]	@ (800834c <USBD_InterfaceStrDescriptor+0x34>)
 800832e:	4808      	ldr	r0, [pc, #32]	@ (8008350 <USBD_InterfaceStrDescriptor+0x38>)
 8008330:	f002 fc91 	bl	800ac56 <USBD_GetString>
 8008334:	e004      	b.n	8008340 <USBD_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008336:	683a      	ldr	r2, [r7, #0]
 8008338:	4904      	ldr	r1, [pc, #16]	@ (800834c <USBD_InterfaceStrDescriptor+0x34>)
 800833a:	4805      	ldr	r0, [pc, #20]	@ (8008350 <USBD_InterfaceStrDescriptor+0x38>)
 800833c:	f002 fc8b 	bl	800ac56 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008340:	4b02      	ldr	r3, [pc, #8]	@ (800834c <USBD_InterfaceStrDescriptor+0x34>)
}
 8008342:	4618      	mov	r0, r3
 8008344:	3708      	adds	r7, #8
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
 800834a:	bf00      	nop
 800834c:	20001e4c 	.word	0x20001e4c
 8008350:	0800bd80 	.word	0x0800bd80

08008354 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b084      	sub	sp, #16
 8008358:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800835a:	4b0f      	ldr	r3, [pc, #60]	@ (8008398 <Get_SerialNum+0x44>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008360:	4b0e      	ldr	r3, [pc, #56]	@ (800839c <Get_SerialNum+0x48>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008366:	4b0e      	ldr	r3, [pc, #56]	@ (80083a0 <Get_SerialNum+0x4c>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800836c:	68fa      	ldr	r2, [r7, #12]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	4413      	add	r3, r2
 8008372:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d009      	beq.n	800838e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800837a:	2208      	movs	r2, #8
 800837c:	4909      	ldr	r1, [pc, #36]	@ (80083a4 <Get_SerialNum+0x50>)
 800837e:	68f8      	ldr	r0, [r7, #12]
 8008380:	f000 f814 	bl	80083ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008384:	2204      	movs	r2, #4
 8008386:	4908      	ldr	r1, [pc, #32]	@ (80083a8 <Get_SerialNum+0x54>)
 8008388:	68b8      	ldr	r0, [r7, #8]
 800838a:	f000 f80f 	bl	80083ac <IntToUnicode>
  }
}
 800838e:	bf00      	nop
 8008390:	3710      	adds	r7, #16
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
 8008396:	bf00      	nop
 8008398:	1fff7a10 	.word	0x1fff7a10
 800839c:	1fff7a14 	.word	0x1fff7a14
 80083a0:	1fff7a18 	.word	0x1fff7a18
 80083a4:	200000d6 	.word	0x200000d6
 80083a8:	200000e6 	.word	0x200000e6

080083ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b087      	sub	sp, #28
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	60f8      	str	r0, [r7, #12]
 80083b4:	60b9      	str	r1, [r7, #8]
 80083b6:	4613      	mov	r3, r2
 80083b8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80083ba:	2300      	movs	r3, #0
 80083bc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80083be:	2300      	movs	r3, #0
 80083c0:	75fb      	strb	r3, [r7, #23]
 80083c2:	e027      	b.n	8008414 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	0f1b      	lsrs	r3, r3, #28
 80083c8:	2b09      	cmp	r3, #9
 80083ca:	d80b      	bhi.n	80083e4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	0f1b      	lsrs	r3, r3, #28
 80083d0:	b2da      	uxtb	r2, r3
 80083d2:	7dfb      	ldrb	r3, [r7, #23]
 80083d4:	005b      	lsls	r3, r3, #1
 80083d6:	4619      	mov	r1, r3
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	440b      	add	r3, r1
 80083dc:	3230      	adds	r2, #48	@ 0x30
 80083de:	b2d2      	uxtb	r2, r2
 80083e0:	701a      	strb	r2, [r3, #0]
 80083e2:	e00a      	b.n	80083fa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	0f1b      	lsrs	r3, r3, #28
 80083e8:	b2da      	uxtb	r2, r3
 80083ea:	7dfb      	ldrb	r3, [r7, #23]
 80083ec:	005b      	lsls	r3, r3, #1
 80083ee:	4619      	mov	r1, r3
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	440b      	add	r3, r1
 80083f4:	3237      	adds	r2, #55	@ 0x37
 80083f6:	b2d2      	uxtb	r2, r2
 80083f8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	011b      	lsls	r3, r3, #4
 80083fe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008400:	7dfb      	ldrb	r3, [r7, #23]
 8008402:	005b      	lsls	r3, r3, #1
 8008404:	3301      	adds	r3, #1
 8008406:	68ba      	ldr	r2, [r7, #8]
 8008408:	4413      	add	r3, r2
 800840a:	2200      	movs	r2, #0
 800840c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800840e:	7dfb      	ldrb	r3, [r7, #23]
 8008410:	3301      	adds	r3, #1
 8008412:	75fb      	strb	r3, [r7, #23]
 8008414:	7dfa      	ldrb	r2, [r7, #23]
 8008416:	79fb      	ldrb	r3, [r7, #7]
 8008418:	429a      	cmp	r2, r3
 800841a:	d3d3      	bcc.n	80083c4 <IntToUnicode+0x18>
  }
}
 800841c:	bf00      	nop
 800841e:	bf00      	nop
 8008420:	371c      	adds	r7, #28
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr

0800842a <CUSTOM_HID_Init>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init(void)
{
 800842a:	b480      	push	{r7}
 800842c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800842e:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008430:	4618      	mov	r0, r3
 8008432:	46bd      	mov	sp, r7
 8008434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008438:	4770      	bx	lr

0800843a <CUSTOM_HID_DeInit>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit(void)
{
 800843a:	b480      	push	{r7}
 800843c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800843e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008440:	4618      	mov	r0, r3
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr

0800844a <CUSTOM_HID_OutEvent>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent(uint8_t *data, uint16_t len)
{
 800844a:	b580      	push	{r7, lr}
 800844c:	b082      	sub	sp, #8
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
 8008452:	460b      	mov	r3, r1
 8008454:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN 6 */
	HID_Frame_Write(data, len);
 8008456:	887b      	ldrh	r3, [r7, #2]
 8008458:	4619      	mov	r1, r3
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 f806 	bl	800846c <HID_Frame_Write>
  //memcpy(buffer, state, 0x40);
  //USBD_CUSTOM_HID_SendReport(&hUsbDevice, (uint8_t *)buffer, 0x40);
  return (USBD_OK);
 8008460:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008462:	4618      	mov	r0, r3
 8008464:	3708      	adds	r7, #8
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
	...

0800846c <HID_Frame_Write>:

/* USER CODE BEGIN 7 */
//Ghi từng gói vào FIFO
void HID_Frame_Write(uint8_t *data, uint16_t len) {
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	460b      	mov	r3, r1
 8008476:	807b      	strh	r3, [r7, #2]
    if (len > HID_FRAME_SIZE) return;
 8008478:	887b      	ldrh	r3, [r7, #2]
 800847a:	2b40      	cmp	r3, #64	@ 0x40
 800847c:	d824      	bhi.n	80084c8 <HID_Frame_Write+0x5c>

    uint8_t next_head = (hid_frame_fifo.head + 1) % HID_FRAME_BUFFER_SIZE;
 800847e:	4b14      	ldr	r3, [pc, #80]	@ (80084d0 <HID_Frame_Write+0x64>)
 8008480:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008484:	b2db      	uxtb	r3, r3
 8008486:	3301      	adds	r3, #1
 8008488:	425a      	negs	r2, r3
 800848a:	f003 0307 	and.w	r3, r3, #7
 800848e:	f002 0207 	and.w	r2, r2, #7
 8008492:	bf58      	it	pl
 8008494:	4253      	negpl	r3, r2
 8008496:	73fb      	strb	r3, [r7, #15]
    if (next_head != hid_frame_fifo.tail) {
 8008498:	4b0d      	ldr	r3, [pc, #52]	@ (80084d0 <HID_Frame_Write+0x64>)
 800849a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800849e:	b2db      	uxtb	r3, r3
 80084a0:	7bfa      	ldrb	r2, [r7, #15]
 80084a2:	429a      	cmp	r2, r3
 80084a4:	d011      	beq.n	80084ca <HID_Frame_Write+0x5e>
        memcpy(hid_frame_fifo.frame[hid_frame_fifo.head], data, len);
 80084a6:	4b0a      	ldr	r3, [pc, #40]	@ (80084d0 <HID_Frame_Write+0x64>)
 80084a8:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80084ac:	b2db      	uxtb	r3, r3
 80084ae:	019b      	lsls	r3, r3, #6
 80084b0:	4a07      	ldr	r2, [pc, #28]	@ (80084d0 <HID_Frame_Write+0x64>)
 80084b2:	4413      	add	r3, r2
 80084b4:	887a      	ldrh	r2, [r7, #2]
 80084b6:	6879      	ldr	r1, [r7, #4]
 80084b8:	4618      	mov	r0, r3
 80084ba:	f002 fff7 	bl	800b4ac <memcpy>
        hid_frame_fifo.head = next_head;
 80084be:	4a04      	ldr	r2, [pc, #16]	@ (80084d0 <HID_Frame_Write+0x64>)
 80084c0:	7bfb      	ldrb	r3, [r7, #15]
 80084c2:	f882 3200 	strb.w	r3, [r2, #512]	@ 0x200
 80084c6:	e000      	b.n	80084ca <HID_Frame_Write+0x5e>
    if (len > HID_FRAME_SIZE) return;
 80084c8:	bf00      	nop
    } else {
        // FIFO đầy → có thể ghi log hoặc bỏ qua
    }
}
 80084ca:	3710      	adds	r7, #16
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}
 80084d0:	2000204c 	.word	0x2000204c

080084d4 <HID_Frame_Read>:
int HID_Frame_Read(uint8_t *dest_buf) {
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b082      	sub	sp, #8
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
    if (hid_frame_fifo.head == hid_frame_fifo.tail) {
 80084dc:	4b16      	ldr	r3, [pc, #88]	@ (8008538 <HID_Frame_Read+0x64>)
 80084de:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80084e2:	b2da      	uxtb	r2, r3
 80084e4:	4b14      	ldr	r3, [pc, #80]	@ (8008538 <HID_Frame_Read+0x64>)
 80084e6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80084ea:	b2db      	uxtb	r3, r3
 80084ec:	429a      	cmp	r2, r3
 80084ee:	d101      	bne.n	80084f4 <HID_Frame_Read+0x20>
        return 0;  // Không có frame
 80084f0:	2300      	movs	r3, #0
 80084f2:	e01c      	b.n	800852e <HID_Frame_Read+0x5a>
    }

    memcpy(dest_buf, hid_frame_fifo.frame[hid_frame_fifo.tail], HID_FRAME_SIZE);
 80084f4:	4b10      	ldr	r3, [pc, #64]	@ (8008538 <HID_Frame_Read+0x64>)
 80084f6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80084fa:	b2db      	uxtb	r3, r3
 80084fc:	019b      	lsls	r3, r3, #6
 80084fe:	4a0e      	ldr	r2, [pc, #56]	@ (8008538 <HID_Frame_Read+0x64>)
 8008500:	4413      	add	r3, r2
 8008502:	2240      	movs	r2, #64	@ 0x40
 8008504:	4619      	mov	r1, r3
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f002 ffd0 	bl	800b4ac <memcpy>
    hid_frame_fifo.tail = (hid_frame_fifo.tail + 1) % HID_FRAME_BUFFER_SIZE;
 800850c:	4b0a      	ldr	r3, [pc, #40]	@ (8008538 <HID_Frame_Read+0x64>)
 800850e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8008512:	b2db      	uxtb	r3, r3
 8008514:	3301      	adds	r3, #1
 8008516:	425a      	negs	r2, r3
 8008518:	f003 0307 	and.w	r3, r3, #7
 800851c:	f002 0207 	and.w	r2, r2, #7
 8008520:	bf58      	it	pl
 8008522:	4253      	negpl	r3, r2
 8008524:	b2da      	uxtb	r2, r3
 8008526:	4b04      	ldr	r3, [pc, #16]	@ (8008538 <HID_Frame_Read+0x64>)
 8008528:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
    return 1;
 800852c:	2301      	movs	r3, #1
}
 800852e:	4618      	mov	r0, r3
 8008530:	3708      	adds	r7, #8
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
 8008536:	bf00      	nop
 8008538:	2000204c 	.word	0x2000204c

0800853c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b084      	sub	sp, #16
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	460b      	mov	r3, r1
 8008546:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8008548:	2300      	movs	r3, #0
 800854a:	60bb      	str	r3, [r7, #8]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800854c:	2300      	movs	r3, #0
 800854e:	73fb      	strb	r3, [r7, #15]
 8008550:	e0c6      	b.n	80086e0 <USBD_CDC_Init+0x1a4>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 8008552:	7bfb      	ldrb	r3, [r7, #15]
 8008554:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008558:	fb02 f303 	mul.w	r3, r2, r3
 800855c:	4a65      	ldr	r2, [pc, #404]	@ (80086f4 <USBD_CDC_Init+0x1b8>)
 800855e:	4413      	add	r3, r2
 8008560:	60bb      	str	r3, [r7, #8]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	7c1b      	ldrb	r3, [r3, #16]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d13d      	bne.n	80085e6 <USBD_CDC_Init+0xaa>
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 800856a:	7bfb      	ldrb	r3, [r7, #15]
 800856c:	4a62      	ldr	r2, [pc, #392]	@ (80086f8 <USBD_CDC_Init+0x1bc>)
 800856e:	5cd1      	ldrb	r1, [r2, r3]
 8008570:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008574:	2202      	movs	r2, #2
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f002 fddf 	bl	800b13a <USBD_LL_OpenEP>
                           CDC_DATA_HS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 800857c:	7bfb      	ldrb	r3, [r7, #15]
 800857e:	4a5e      	ldr	r2, [pc, #376]	@ (80086f8 <USBD_CDC_Init+0x1bc>)
 8008580:	5cd3      	ldrb	r3, [r2, r3]
 8008582:	f003 020f 	and.w	r2, r3, #15
 8008586:	6879      	ldr	r1, [r7, #4]
 8008588:	4613      	mov	r3, r2
 800858a:	009b      	lsls	r3, r3, #2
 800858c:	4413      	add	r3, r2
 800858e:	009b      	lsls	r3, r3, #2
 8008590:	440b      	add	r3, r1
 8008592:	3324      	adds	r3, #36	@ 0x24
 8008594:	2201      	movs	r2, #1
 8008596:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 8008598:	7bfb      	ldrb	r3, [r7, #15]
 800859a:	4a58      	ldr	r2, [pc, #352]	@ (80086fc <USBD_CDC_Init+0x1c0>)
 800859c:	5cd1      	ldrb	r1, [r2, r3]
 800859e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80085a2:	2202      	movs	r2, #2
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f002 fdc8 	bl	800b13a <USBD_LL_OpenEP>
                           CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 80085aa:	7bfb      	ldrb	r3, [r7, #15]
 80085ac:	4a53      	ldr	r2, [pc, #332]	@ (80086fc <USBD_CDC_Init+0x1c0>)
 80085ae:	5cd3      	ldrb	r3, [r2, r3]
 80085b0:	f003 020f 	and.w	r2, r3, #15
 80085b4:	6879      	ldr	r1, [r7, #4]
 80085b6:	4613      	mov	r3, r2
 80085b8:	009b      	lsls	r3, r3, #2
 80085ba:	4413      	add	r3, r2
 80085bc:	009b      	lsls	r3, r3, #2
 80085be:	440b      	add	r3, r1
 80085c0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80085c4:	2201      	movs	r2, #1
 80085c6:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80085c8:	7bfb      	ldrb	r3, [r7, #15]
 80085ca:	4a4d      	ldr	r2, [pc, #308]	@ (8008700 <USBD_CDC_Init+0x1c4>)
 80085cc:	5cd3      	ldrb	r3, [r2, r3]
 80085ce:	f003 020f 	and.w	r2, r3, #15
 80085d2:	6879      	ldr	r1, [r7, #4]
 80085d4:	4613      	mov	r3, r2
 80085d6:	009b      	lsls	r3, r3, #2
 80085d8:	4413      	add	r3, r2
 80085da:	009b      	lsls	r3, r3, #2
 80085dc:	440b      	add	r3, r1
 80085de:	3326      	adds	r3, #38	@ 0x26
 80085e0:	2210      	movs	r2, #16
 80085e2:	801a      	strh	r2, [r3, #0]
 80085e4:	e03a      	b.n	800865c <USBD_CDC_Init+0x120>
    }
    else
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 80085e6:	7bfb      	ldrb	r3, [r7, #15]
 80085e8:	4a43      	ldr	r2, [pc, #268]	@ (80086f8 <USBD_CDC_Init+0x1bc>)
 80085ea:	5cd1      	ldrb	r1, [r2, r3]
 80085ec:	2340      	movs	r3, #64	@ 0x40
 80085ee:	2202      	movs	r2, #2
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f002 fda2 	bl	800b13a <USBD_LL_OpenEP>
                           CDC_DATA_FS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 80085f6:	7bfb      	ldrb	r3, [r7, #15]
 80085f8:	4a3f      	ldr	r2, [pc, #252]	@ (80086f8 <USBD_CDC_Init+0x1bc>)
 80085fa:	5cd3      	ldrb	r3, [r2, r3]
 80085fc:	f003 020f 	and.w	r2, r3, #15
 8008600:	6879      	ldr	r1, [r7, #4]
 8008602:	4613      	mov	r3, r2
 8008604:	009b      	lsls	r3, r3, #2
 8008606:	4413      	add	r3, r2
 8008608:	009b      	lsls	r3, r3, #2
 800860a:	440b      	add	r3, r1
 800860c:	3324      	adds	r3, #36	@ 0x24
 800860e:	2201      	movs	r2, #1
 8008610:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 8008612:	7bfb      	ldrb	r3, [r7, #15]
 8008614:	4a39      	ldr	r2, [pc, #228]	@ (80086fc <USBD_CDC_Init+0x1c0>)
 8008616:	5cd1      	ldrb	r1, [r2, r3]
 8008618:	2340      	movs	r3, #64	@ 0x40
 800861a:	2202      	movs	r2, #2
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f002 fd8c 	bl	800b13a <USBD_LL_OpenEP>
                           CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 8008622:	7bfb      	ldrb	r3, [r7, #15]
 8008624:	4a35      	ldr	r2, [pc, #212]	@ (80086fc <USBD_CDC_Init+0x1c0>)
 8008626:	5cd3      	ldrb	r3, [r2, r3]
 8008628:	f003 020f 	and.w	r2, r3, #15
 800862c:	6879      	ldr	r1, [r7, #4]
 800862e:	4613      	mov	r3, r2
 8008630:	009b      	lsls	r3, r3, #2
 8008632:	4413      	add	r3, r2
 8008634:	009b      	lsls	r3, r3, #2
 8008636:	440b      	add	r3, r1
 8008638:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800863c:	2201      	movs	r2, #1
 800863e:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008640:	7bfb      	ldrb	r3, [r7, #15]
 8008642:	4a2f      	ldr	r2, [pc, #188]	@ (8008700 <USBD_CDC_Init+0x1c4>)
 8008644:	5cd3      	ldrb	r3, [r2, r3]
 8008646:	f003 020f 	and.w	r2, r3, #15
 800864a:	6879      	ldr	r1, [r7, #4]
 800864c:	4613      	mov	r3, r2
 800864e:	009b      	lsls	r3, r3, #2
 8008650:	4413      	add	r3, r2
 8008652:	009b      	lsls	r3, r3, #2
 8008654:	440b      	add	r3, r1
 8008656:	3326      	adds	r3, #38	@ 0x26
 8008658:	2210      	movs	r2, #16
 800865a:	801a      	strh	r2, [r3, #0]
    }

    /* Open Command IN EP */
    (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP[i], USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800865c:	7bfb      	ldrb	r3, [r7, #15]
 800865e:	4a28      	ldr	r2, [pc, #160]	@ (8008700 <USBD_CDC_Init+0x1c4>)
 8008660:	5cd1      	ldrb	r1, [r2, r3]
 8008662:	2308      	movs	r3, #8
 8008664:	2203      	movs	r2, #3
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f002 fd67 	bl	800b13a <USBD_LL_OpenEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 1U;
 800866c:	7bfb      	ldrb	r3, [r7, #15]
 800866e:	4a24      	ldr	r2, [pc, #144]	@ (8008700 <USBD_CDC_Init+0x1c4>)
 8008670:	5cd3      	ldrb	r3, [r2, r3]
 8008672:	f003 020f 	and.w	r2, r3, #15
 8008676:	6879      	ldr	r1, [r7, #4]
 8008678:	4613      	mov	r3, r2
 800867a:	009b      	lsls	r3, r3, #2
 800867c:	4413      	add	r3, r2
 800867e:	009b      	lsls	r3, r3, #2
 8008680:	440b      	add	r3, r1
 8008682:	3324      	adds	r3, #36	@ 0x24
 8008684:	2201      	movs	r2, #1
 8008686:	801a      	strh	r2, [r3, #0]

    /* Init  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Init(i);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	7bfa      	ldrb	r2, [r7, #15]
 8008692:	4610      	mov	r0, r2
 8008694:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	2200      	movs	r2, #0
 800869a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	2200      	movs	r2, #0
 80086a2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	7c1b      	ldrb	r3, [r3, #16]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d10b      	bne.n	80086c6 <USBD_CDC_Init+0x18a>
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 80086ae:	7bfb      	ldrb	r3, [r7, #15]
 80086b0:	4a12      	ldr	r2, [pc, #72]	@ (80086fc <USBD_CDC_Init+0x1c0>)
 80086b2:	5cd1      	ldrb	r1, [r2, r3]
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80086ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f002 fe2a 	bl	800b318 <USBD_LL_PrepareReceive>
 80086c4:	e009      	b.n	80086da <USBD_CDC_Init+0x19e>
                                   CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 80086c6:	7bfb      	ldrb	r3, [r7, #15]
 80086c8:	4a0c      	ldr	r2, [pc, #48]	@ (80086fc <USBD_CDC_Init+0x1c0>)
 80086ca:	5cd1      	ldrb	r1, [r2, r3]
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80086d2:	2340      	movs	r3, #64	@ 0x40
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f002 fe1f 	bl	800b318 <USBD_LL_PrepareReceive>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80086da:	7bfb      	ldrb	r3, [r7, #15]
 80086dc:	3301      	adds	r3, #1
 80086de:	73fb      	strb	r3, [r7, #15]
 80086e0:	7bfb      	ldrb	r3, [r7, #15]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	f43f af35 	beq.w	8008552 <USBD_CDC_Init+0x16>
                                   CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return (uint8_t)USBD_OK;
 80086e8:	2300      	movs	r3, #0
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3710      	adds	r7, #16
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}
 80086f2:	bf00      	nop
 80086f4:	20002268 	.word	0x20002268
 80086f8:	20002250 	.word	0x20002250
 80086fc:	20002254 	.word	0x20002254
 8008700:	20002258 	.word	0x20002258

08008704 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b084      	sub	sp, #16
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	460b      	mov	r3, r1
 800870e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8008710:	2300      	movs	r3, #0
 8008712:	73fb      	strb	r3, [r7, #15]
 8008714:	e057      	b.n	80087c6 <USBD_CDC_DeInit+0xc2>
  {
    /* Close EP IN */
    (void)USBD_LL_CloseEP(pdev, CDC_IN_EP[i]);
 8008716:	7bfb      	ldrb	r3, [r7, #15]
 8008718:	4a2f      	ldr	r2, [pc, #188]	@ (80087d8 <USBD_CDC_DeInit+0xd4>)
 800871a:	5cd3      	ldrb	r3, [r2, r3]
 800871c:	4619      	mov	r1, r3
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f002 fd31 	bl	800b186 <USBD_LL_CloseEP>
    pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 0U;
 8008724:	7bfb      	ldrb	r3, [r7, #15]
 8008726:	4a2c      	ldr	r2, [pc, #176]	@ (80087d8 <USBD_CDC_DeInit+0xd4>)
 8008728:	5cd3      	ldrb	r3, [r2, r3]
 800872a:	f003 020f 	and.w	r2, r3, #15
 800872e:	6879      	ldr	r1, [r7, #4]
 8008730:	4613      	mov	r3, r2
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	4413      	add	r3, r2
 8008736:	009b      	lsls	r3, r3, #2
 8008738:	440b      	add	r3, r1
 800873a:	3324      	adds	r3, #36	@ 0x24
 800873c:	2200      	movs	r2, #0
 800873e:	801a      	strh	r2, [r3, #0]

    /* Close EP OUT */
    (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP[i]);
 8008740:	7bfb      	ldrb	r3, [r7, #15]
 8008742:	4a26      	ldr	r2, [pc, #152]	@ (80087dc <USBD_CDC_DeInit+0xd8>)
 8008744:	5cd3      	ldrb	r3, [r2, r3]
 8008746:	4619      	mov	r1, r3
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f002 fd1c 	bl	800b186 <USBD_LL_CloseEP>
    pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 0U;
 800874e:	7bfb      	ldrb	r3, [r7, #15]
 8008750:	4a22      	ldr	r2, [pc, #136]	@ (80087dc <USBD_CDC_DeInit+0xd8>)
 8008752:	5cd3      	ldrb	r3, [r2, r3]
 8008754:	f003 020f 	and.w	r2, r3, #15
 8008758:	6879      	ldr	r1, [r7, #4]
 800875a:	4613      	mov	r3, r2
 800875c:	009b      	lsls	r3, r3, #2
 800875e:	4413      	add	r3, r2
 8008760:	009b      	lsls	r3, r3, #2
 8008762:	440b      	add	r3, r1
 8008764:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008768:	2200      	movs	r2, #0
 800876a:	801a      	strh	r2, [r3, #0]

    /* Close Command IN EP */
    (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP[i]);
 800876c:	7bfb      	ldrb	r3, [r7, #15]
 800876e:	4a1c      	ldr	r2, [pc, #112]	@ (80087e0 <USBD_CDC_DeInit+0xdc>)
 8008770:	5cd3      	ldrb	r3, [r2, r3]
 8008772:	4619      	mov	r1, r3
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f002 fd06 	bl	800b186 <USBD_LL_CloseEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 0U;
 800877a:	7bfb      	ldrb	r3, [r7, #15]
 800877c:	4a18      	ldr	r2, [pc, #96]	@ (80087e0 <USBD_CDC_DeInit+0xdc>)
 800877e:	5cd3      	ldrb	r3, [r2, r3]
 8008780:	f003 020f 	and.w	r2, r3, #15
 8008784:	6879      	ldr	r1, [r7, #4]
 8008786:	4613      	mov	r3, r2
 8008788:	009b      	lsls	r3, r3, #2
 800878a:	4413      	add	r3, r2
 800878c:	009b      	lsls	r3, r3, #2
 800878e:	440b      	add	r3, r1
 8008790:	3324      	adds	r3, #36	@ 0x24
 8008792:	2200      	movs	r2, #0
 8008794:	801a      	strh	r2, [r3, #0]
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = 0U;
 8008796:	7bfb      	ldrb	r3, [r7, #15]
 8008798:	4a11      	ldr	r2, [pc, #68]	@ (80087e0 <USBD_CDC_DeInit+0xdc>)
 800879a:	5cd3      	ldrb	r3, [r2, r3]
 800879c:	f003 020f 	and.w	r2, r3, #15
 80087a0:	6879      	ldr	r1, [r7, #4]
 80087a2:	4613      	mov	r3, r2
 80087a4:	009b      	lsls	r3, r3, #2
 80087a6:	4413      	add	r3, r2
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	440b      	add	r3, r1
 80087ac:	3326      	adds	r3, #38	@ 0x26
 80087ae:	2200      	movs	r2, #0
 80087b0:	801a      	strh	r2, [r3, #0]

    /* DeInit  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->DeInit(i);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	7bfa      	ldrb	r2, [r7, #15]
 80087bc:	4610      	mov	r0, r2
 80087be:	4798      	blx	r3
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80087c0:	7bfb      	ldrb	r3, [r7, #15]
 80087c2:	3301      	adds	r3, #1
 80087c4:	73fb      	strb	r3, [r7, #15]
 80087c6:	7bfb      	ldrb	r3, [r7, #15]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d0a4      	beq.n	8008716 <USBD_CDC_DeInit+0x12>
  }
  return (uint8_t)USBD_OK;
 80087cc:	2300      	movs	r3, #0
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3710      	adds	r7, #16
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop
 80087d8:	20002250 	.word	0x20002250
 80087dc:	20002254 	.word	0x20002254
 80087e0:	20002258 	.word	0x20002258

080087e4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80087e4:	b590      	push	{r4, r7, lr}
 80087e6:	b087      	sub	sp, #28
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 80087ee:	2300      	movs	r3, #0
 80087f0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80087f2:	2300      	movs	r3, #0
 80087f4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80087f6:	2300      	movs	r3, #0
 80087f8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80087fa:	2300      	movs	r3, #0
 80087fc:	75fb      	strb	r3, [r7, #23]

  uint8_t windex_to_ch = 0;
 80087fe:	2300      	movs	r3, #0
 8008800:	75bb      	strb	r3, [r7, #22]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8008802:	2300      	movs	r3, #0
 8008804:	757b      	strb	r3, [r7, #21]
 8008806:	e015      	b.n	8008834 <USBD_CDC_Setup+0x50>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	889b      	ldrh	r3, [r3, #4]
 800880c:	b2da      	uxtb	r2, r3
 800880e:	7d7b      	ldrb	r3, [r7, #21]
 8008810:	496d      	ldr	r1, [pc, #436]	@ (80089c8 <USBD_CDC_Setup+0x1e4>)
 8008812:	5ccb      	ldrb	r3, [r1, r3]
 8008814:	429a      	cmp	r2, r3
 8008816:	d007      	beq.n	8008828 <USBD_CDC_Setup+0x44>
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	889b      	ldrh	r3, [r3, #4]
 800881c:	b2da      	uxtb	r2, r3
 800881e:	7d7b      	ldrb	r3, [r7, #21]
 8008820:	496a      	ldr	r1, [pc, #424]	@ (80089cc <USBD_CDC_Setup+0x1e8>)
 8008822:	5ccb      	ldrb	r3, [r1, r3]
 8008824:	429a      	cmp	r2, r3
 8008826:	d102      	bne.n	800882e <USBD_CDC_Setup+0x4a>
    {
      windex_to_ch = i;
 8008828:	7d7b      	ldrb	r3, [r7, #21]
 800882a:	75bb      	strb	r3, [r7, #22]
      break;
 800882c:	e005      	b.n	800883a <USBD_CDC_Setup+0x56>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800882e:	7d7b      	ldrb	r3, [r7, #21]
 8008830:	3301      	adds	r3, #1
 8008832:	757b      	strb	r3, [r7, #21]
 8008834:	7d7b      	ldrb	r3, [r7, #21]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d0e6      	beq.n	8008808 <USBD_CDC_Setup+0x24>
    }
  }

  hcdc = &CDC_ACM_Class_Data[windex_to_ch];
 800883a:	7dbb      	ldrb	r3, [r7, #22]
 800883c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008840:	fb02 f303 	mul.w	r3, r2, r3
 8008844:	4a62      	ldr	r2, [pc, #392]	@ (80089d0 <USBD_CDC_Setup+0x1ec>)
 8008846:	4413      	add	r3, r2
 8008848:	613b      	str	r3, [r7, #16]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	781b      	ldrb	r3, [r3, #0]
 800884e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008852:	2b00      	cmp	r3, #0
 8008854:	d04a      	beq.n	80088ec <USBD_CDC_Setup+0x108>
 8008856:	2b20      	cmp	r3, #32
 8008858:	f040 80aa 	bne.w	80089b0 <USBD_CDC_Setup+0x1cc>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	88db      	ldrh	r3, [r3, #6]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d038      	beq.n	80088d6 <USBD_CDC_Setup+0xf2>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	781b      	ldrb	r3, [r3, #0]
 8008868:	b25b      	sxtb	r3, r3
 800886a:	2b00      	cmp	r3, #0
 800886c:	da1d      	bge.n	80088aa <USBD_CDC_Setup+0xc6>
      {
        ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008874:	689c      	ldr	r4, [r3, #8]
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	7859      	ldrb	r1, [r3, #1]
 800887a:	7dbb      	ldrb	r3, [r7, #22]
 800887c:	025b      	lsls	r3, r3, #9
 800887e:	693a      	ldr	r2, [r7, #16]
 8008880:	441a      	add	r2, r3
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	88db      	ldrh	r3, [r3, #6]
 8008886:	7db8      	ldrb	r0, [r7, #22]
 8008888:	47a0      	blx	r4

        len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	88db      	ldrh	r3, [r3, #6]
 800888e:	2b07      	cmp	r3, #7
 8008890:	bf28      	it	cs
 8008892:	2307      	movcs	r3, #7
 8008894:	81fb      	strh	r3, [r7, #14]
        (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data[windex_to_ch], len);
 8008896:	7dbb      	ldrb	r3, [r7, #22]
 8008898:	025b      	lsls	r3, r3, #9
 800889a:	693a      	ldr	r2, [r7, #16]
 800889c:	4413      	add	r3, r2
 800889e:	89fa      	ldrh	r2, [r7, #14]
 80088a0:	4619      	mov	r1, r3
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f002 fa37 	bl	800ad16 <USBD_CtlSendData>
    }
    else
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
    }
    break;
 80088a8:	e089      	b.n	80089be <USBD_CDC_Setup+0x1da>
        hcdc->CmdOpCode = req->bRequest;
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	785a      	ldrb	r2, [r3, #1]
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	88db      	ldrh	r3, [r3, #6]
 80088b8:	b2da      	uxtb	r2, r3
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 80088c0:	7dbb      	ldrb	r3, [r7, #22]
 80088c2:	025b      	lsls	r3, r3, #9
 80088c4:	693a      	ldr	r2, [r7, #16]
 80088c6:	18d1      	adds	r1, r2, r3
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	88db      	ldrh	r3, [r3, #6]
 80088cc:	461a      	mov	r2, r3
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f002 fa4d 	bl	800ad6e <USBD_CtlPrepareRx>
    break;
 80088d4:	e073      	b.n	80089be <USBD_CDC_Setup+0x1da>
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80088dc:	689c      	ldr	r4, [r3, #8]
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	7859      	ldrb	r1, [r3, #1]
 80088e2:	7db8      	ldrb	r0, [r7, #22]
 80088e4:	2300      	movs	r3, #0
 80088e6:	683a      	ldr	r2, [r7, #0]
 80088e8:	47a0      	blx	r4
    break;
 80088ea:	e068      	b.n	80089be <USBD_CDC_Setup+0x1da>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	785b      	ldrb	r3, [r3, #1]
 80088f0:	2b0b      	cmp	r3, #11
 80088f2:	d852      	bhi.n	800899a <USBD_CDC_Setup+0x1b6>
 80088f4:	a201      	add	r2, pc, #4	@ (adr r2, 80088fc <USBD_CDC_Setup+0x118>)
 80088f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088fa:	bf00      	nop
 80088fc:	0800892d 	.word	0x0800892d
 8008900:	080089a9 	.word	0x080089a9
 8008904:	0800899b 	.word	0x0800899b
 8008908:	0800899b 	.word	0x0800899b
 800890c:	0800899b 	.word	0x0800899b
 8008910:	0800899b 	.word	0x0800899b
 8008914:	0800899b 	.word	0x0800899b
 8008918:	0800899b 	.word	0x0800899b
 800891c:	0800899b 	.word	0x0800899b
 8008920:	0800899b 	.word	0x0800899b
 8008924:	08008957 	.word	0x08008957
 8008928:	08008981 	.word	0x08008981
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008932:	b2db      	uxtb	r3, r3
 8008934:	2b03      	cmp	r3, #3
 8008936:	d107      	bne.n	8008948 <USBD_CDC_Setup+0x164>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008938:	f107 030a 	add.w	r3, r7, #10
 800893c:	2202      	movs	r2, #2
 800893e:	4619      	mov	r1, r3
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f002 f9e8 	bl	800ad16 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8008946:	e032      	b.n	80089ae <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 8008948:	6839      	ldr	r1, [r7, #0]
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f002 f972 	bl	800ac34 <USBD_CtlError>
        ret = USBD_FAIL;
 8008950:	2303      	movs	r3, #3
 8008952:	75fb      	strb	r3, [r7, #23]
      break;
 8008954:	e02b      	b.n	80089ae <USBD_CDC_Setup+0x1ca>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800895c:	b2db      	uxtb	r3, r3
 800895e:	2b03      	cmp	r3, #3
 8008960:	d107      	bne.n	8008972 <USBD_CDC_Setup+0x18e>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008962:	f107 030d 	add.w	r3, r7, #13
 8008966:	2201      	movs	r2, #1
 8008968:	4619      	mov	r1, r3
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f002 f9d3 	bl	800ad16 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8008970:	e01d      	b.n	80089ae <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 8008972:	6839      	ldr	r1, [r7, #0]
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f002 f95d 	bl	800ac34 <USBD_CtlError>
        ret = USBD_FAIL;
 800897a:	2303      	movs	r3, #3
 800897c:	75fb      	strb	r3, [r7, #23]
      break;
 800897e:	e016      	b.n	80089ae <USBD_CDC_Setup+0x1ca>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008986:	b2db      	uxtb	r3, r3
 8008988:	2b03      	cmp	r3, #3
 800898a:	d00f      	beq.n	80089ac <USBD_CDC_Setup+0x1c8>
      {
        USBD_CtlError(pdev, req);
 800898c:	6839      	ldr	r1, [r7, #0]
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f002 f950 	bl	800ac34 <USBD_CtlError>
        ret = USBD_FAIL;
 8008994:	2303      	movs	r3, #3
 8008996:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8008998:	e008      	b.n	80089ac <USBD_CDC_Setup+0x1c8>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800899a:	6839      	ldr	r1, [r7, #0]
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f002 f949 	bl	800ac34 <USBD_CtlError>
      ret = USBD_FAIL;
 80089a2:	2303      	movs	r3, #3
 80089a4:	75fb      	strb	r3, [r7, #23]
      break;
 80089a6:	e002      	b.n	80089ae <USBD_CDC_Setup+0x1ca>
      break;
 80089a8:	bf00      	nop
 80089aa:	e008      	b.n	80089be <USBD_CDC_Setup+0x1da>
      break;
 80089ac:	bf00      	nop
    }
    break;
 80089ae:	e006      	b.n	80089be <USBD_CDC_Setup+0x1da>

  default:
    USBD_CtlError(pdev, req);
 80089b0:	6839      	ldr	r1, [r7, #0]
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f002 f93e 	bl	800ac34 <USBD_CtlError>
    ret = USBD_FAIL;
 80089b8:	2303      	movs	r3, #3
 80089ba:	75fb      	strb	r3, [r7, #23]
    break;
 80089bc:	bf00      	nop
  }

  return (uint8_t)ret;
 80089be:	7dfb      	ldrb	r3, [r7, #23]
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	371c      	adds	r7, #28
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd90      	pop	{r4, r7, pc}
 80089c8:	2000225c 	.word	0x2000225c
 80089cc:	20002260 	.word	0x20002260
 80089d0:	20002268 	.word	0x20002268

080089d4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80089d4:	b590      	push	{r4, r7, lr}
 80089d6:	b087      	sub	sp, #28
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	460b      	mov	r3, r1
 80089de:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 80089e0:	2300      	movs	r3, #0
 80089e2:	613b      	str	r3, [r7, #16]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 80089ea:	60fb      	str	r3, [r7, #12]
  uint8_t ep_to_ch = 0;
 80089ec:	2300      	movs	r3, #0
 80089ee:	75fb      	strb	r3, [r7, #23]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80089f0:	2300      	movs	r3, #0
 80089f2:	75bb      	strb	r3, [r7, #22]
 80089f4:	e00d      	b.n	8008a12 <USBD_CDC_DataIn+0x3e>
  {
    if (epnum == (CDC_IN_EP[i] & 0x0F))
 80089f6:	78fa      	ldrb	r2, [r7, #3]
 80089f8:	7dbb      	ldrb	r3, [r7, #22]
 80089fa:	4934      	ldr	r1, [pc, #208]	@ (8008acc <USBD_CDC_DataIn+0xf8>)
 80089fc:	5ccb      	ldrb	r3, [r1, r3]
 80089fe:	f003 030f 	and.w	r3, r3, #15
 8008a02:	429a      	cmp	r2, r3
 8008a04:	d102      	bne.n	8008a0c <USBD_CDC_DataIn+0x38>
    {
      ep_to_ch = i;
 8008a06:	7dbb      	ldrb	r3, [r7, #22]
 8008a08:	75fb      	strb	r3, [r7, #23]
      break;
 8008a0a:	e005      	b.n	8008a18 <USBD_CDC_DataIn+0x44>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8008a0c:	7dbb      	ldrb	r3, [r7, #22]
 8008a0e:	3301      	adds	r3, #1
 8008a10:	75bb      	strb	r3, [r7, #22]
 8008a12:	7dbb      	ldrb	r3, [r7, #22]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d0ee      	beq.n	80089f6 <USBD_CDC_DataIn+0x22>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 8008a18:	7dfb      	ldrb	r3, [r7, #23]
 8008a1a:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008a1e:	fb02 f303 	mul.w	r3, r2, r3
 8008a22:	4a2b      	ldr	r2, [pc, #172]	@ (8008ad0 <USBD_CDC_DataIn+0xfc>)
 8008a24:	4413      	add	r3, r2
 8008a26:	613b      	str	r3, [r7, #16]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008a28:	78fa      	ldrb	r2, [r7, #3]
 8008a2a:	6879      	ldr	r1, [r7, #4]
 8008a2c:	4613      	mov	r3, r2
 8008a2e:	009b      	lsls	r3, r3, #2
 8008a30:	4413      	add	r3, r2
 8008a32:	009b      	lsls	r3, r3, #2
 8008a34:	440b      	add	r3, r1
 8008a36:	3318      	adds	r3, #24
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d029      	beq.n	8008a92 <USBD_CDC_DataIn+0xbe>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008a3e:	78fa      	ldrb	r2, [r7, #3]
 8008a40:	6879      	ldr	r1, [r7, #4]
 8008a42:	4613      	mov	r3, r2
 8008a44:	009b      	lsls	r3, r3, #2
 8008a46:	4413      	add	r3, r2
 8008a48:	009b      	lsls	r3, r3, #2
 8008a4a:	440b      	add	r3, r1
 8008a4c:	3318      	adds	r3, #24
 8008a4e:	681a      	ldr	r2, [r3, #0]
 8008a50:	78f9      	ldrb	r1, [r7, #3]
 8008a52:	68f8      	ldr	r0, [r7, #12]
 8008a54:	460b      	mov	r3, r1
 8008a56:	00db      	lsls	r3, r3, #3
 8008a58:	440b      	add	r3, r1
 8008a5a:	009b      	lsls	r3, r3, #2
 8008a5c:	4403      	add	r3, r0
 8008a5e:	331c      	adds	r3, #28
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	fbb2 f1f3 	udiv	r1, r2, r3
 8008a66:	fb01 f303 	mul.w	r3, r1, r3
 8008a6a:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d110      	bne.n	8008a92 <USBD_CDC_DataIn+0xbe>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008a70:	78fa      	ldrb	r2, [r7, #3]
 8008a72:	6879      	ldr	r1, [r7, #4]
 8008a74:	4613      	mov	r3, r2
 8008a76:	009b      	lsls	r3, r3, #2
 8008a78:	4413      	add	r3, r2
 8008a7a:	009b      	lsls	r3, r3, #2
 8008a7c:	440b      	add	r3, r1
 8008a7e:	3318      	adds	r3, #24
 8008a80:	2200      	movs	r2, #0
 8008a82:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008a84:	78f9      	ldrb	r1, [r7, #3]
 8008a86:	2300      	movs	r3, #0
 8008a88:	2200      	movs	r2, #0
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f002 fc23 	bl	800b2d6 <USBD_LL_Transmit>
 8008a90:	e016      	b.n	8008ac0 <USBD_CDC_DataIn+0xec>
  }
  else
  {
    hcdc->TxState = 0U;
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	2200      	movs	r2, #0
 8008a96:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt != NULL)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008aa0:	691b      	ldr	r3, [r3, #16]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d00c      	beq.n	8008ac0 <USBD_CDC_DataIn+0xec>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt(ep_to_ch, hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008aac:	691c      	ldr	r4, [r3, #16]
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	f8d3 1208 	ldr.w	r1, [r3, #520]	@ 0x208
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8008aba:	78fb      	ldrb	r3, [r7, #3]
 8008abc:	7df8      	ldrb	r0, [r7, #23]
 8008abe:	47a0      	blx	r4
    }
  }

  return (uint8_t)USBD_OK;
 8008ac0:	2300      	movs	r3, #0
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	371c      	adds	r7, #28
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd90      	pop	{r4, r7, pc}
 8008aca:	bf00      	nop
 8008acc:	20002250 	.word	0x20002250
 8008ad0:	20002268 	.word	0x20002268

08008ad4 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b084      	sub	sp, #16
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	460b      	mov	r3, r1
 8008ade:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	60bb      	str	r3, [r7, #8]
  uint8_t ep_to_ch = 0;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	73fb      	strb	r3, [r7, #15]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8008ae8:	2300      	movs	r3, #0
 8008aea:	73bb      	strb	r3, [r7, #14]
 8008aec:	e00b      	b.n	8008b06 <USBD_CDC_DataOut+0x32>
  {
    if (epnum == CDC_OUT_EP[i])
 8008aee:	7bbb      	ldrb	r3, [r7, #14]
 8008af0:	4a17      	ldr	r2, [pc, #92]	@ (8008b50 <USBD_CDC_DataOut+0x7c>)
 8008af2:	5cd3      	ldrb	r3, [r2, r3]
 8008af4:	78fa      	ldrb	r2, [r7, #3]
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d102      	bne.n	8008b00 <USBD_CDC_DataOut+0x2c>
    {
      ep_to_ch = i;
 8008afa:	7bbb      	ldrb	r3, [r7, #14]
 8008afc:	73fb      	strb	r3, [r7, #15]
      break;
 8008afe:	e005      	b.n	8008b0c <USBD_CDC_DataOut+0x38>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8008b00:	7bbb      	ldrb	r3, [r7, #14]
 8008b02:	3301      	adds	r3, #1
 8008b04:	73bb      	strb	r3, [r7, #14]
 8008b06:	7bbb      	ldrb	r3, [r7, #14]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d0f0      	beq.n	8008aee <USBD_CDC_DataOut+0x1a>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 8008b0c:	7bfb      	ldrb	r3, [r7, #15]
 8008b0e:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008b12:	fb02 f303 	mul.w	r3, r2, r3
 8008b16:	4a0f      	ldr	r2, [pc, #60]	@ (8008b54 <USBD_CDC_DataOut+0x80>)
 8008b18:	4413      	add	r3, r2
 8008b1a:	60bb      	str	r3, [r7, #8]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008b1c:	78fb      	ldrb	r3, [r7, #3]
 8008b1e:	4619      	mov	r1, r3
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f002 fc1a 	bl	800b35a <USBD_LL_GetRxDataSize>
 8008b26:	4602      	mov	r2, r0
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Receive(ep_to_ch, hcdc->RxBuffer, &hcdc->RxLength);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008b34:	68db      	ldr	r3, [r3, #12]
 8008b36:	68ba      	ldr	r2, [r7, #8]
 8008b38:	f8d2 1204 	ldr.w	r1, [r2, #516]	@ 0x204
 8008b3c:	68ba      	ldr	r2, [r7, #8]
 8008b3e:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008b42:	7bf8      	ldrb	r0, [r7, #15]
 8008b44:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008b46:	2300      	movs	r3, #0
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3710      	adds	r7, #16
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}
 8008b50:	20002254 	.word	0x20002254
 8008b54:	20002268 	.word	0x20002268

08008b58 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008b58:	b590      	push	{r4, r7, lr}
 8008b5a:	b085      	sub	sp, #20
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8008b60:	2300      	movs	r3, #0
 8008b62:	60bb      	str	r3, [r7, #8]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8008b64:	2300      	movs	r3, #0
 8008b66:	73fb      	strb	r3, [r7, #15]
 8008b68:	e02d      	b.n	8008bc6 <USBD_CDC_EP0_RxReady+0x6e>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 8008b6a:	7bfb      	ldrb	r3, [r7, #15]
 8008b6c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008b70:	fb02 f303 	mul.w	r3, r2, r3
 8008b74:	4a18      	ldr	r2, [pc, #96]	@ (8008bd8 <USBD_CDC_EP0_RxReady+0x80>)
 8008b76:	4413      	add	r3, r2
 8008b78:	60bb      	str	r3, [r7, #8]

    if (hcdc == NULL)
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d101      	bne.n	8008b84 <USBD_CDC_EP0_RxReady+0x2c>
    {
      return (uint8_t)USBD_FAIL;
 8008b80:	2303      	movs	r3, #3
 8008b82:	e024      	b.n	8008bce <USBD_CDC_EP0_RxReady+0x76>
    }

    if ((pdev->pUserData_CDC_ACM != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d018      	beq.n	8008bc0 <USBD_CDC_EP0_RxReady+0x68>
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008b94:	2bff      	cmp	r3, #255	@ 0xff
 8008b96:	d013      	beq.n	8008bc0 <USBD_CDC_EP0_RxReady+0x68>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(i, hcdc->CmdOpCode, (uint8_t *)hcdc->data[i], (uint16_t)hcdc->CmdLength);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008b9e:	689c      	ldr	r4, [r3, #8]
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	f893 1200 	ldrb.w	r1, [r3, #512]	@ 0x200
 8008ba6:	7bfb      	ldrb	r3, [r7, #15]
 8008ba8:	025b      	lsls	r3, r3, #9
 8008baa:	68ba      	ldr	r2, [r7, #8]
 8008bac:	441a      	add	r2, r3
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8008bb4:	7bf8      	ldrb	r0, [r7, #15]
 8008bb6:	47a0      	blx	r4
      hcdc->CmdOpCode = 0xFFU;
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	22ff      	movs	r2, #255	@ 0xff
 8008bbc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8008bc0:	7bfb      	ldrb	r3, [r7, #15]
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	73fb      	strb	r3, [r7, #15]
 8008bc6:	7bfb      	ldrb	r3, [r7, #15]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d0ce      	beq.n	8008b6a <USBD_CDC_EP0_RxReady+0x12>
    }
  }

  return (uint8_t)USBD_OK;
 8008bcc:	2300      	movs	r3, #0
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3714      	adds	r7, #20
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd90      	pop	{r4, r7, pc}
 8008bd6:	bf00      	nop
 8008bd8:	20002268 	.word	0x20002268

08008bdc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b083      	sub	sp, #12
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	224b      	movs	r2, #75	@ 0x4b
 8008be8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8008bea:	4b03      	ldr	r3, [pc, #12]	@ (8008bf8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	370c      	adds	r7, #12
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr
 8008bf8:	200001b8 	.word	0x200001b8

08008bfc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b083      	sub	sp, #12
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	224b      	movs	r2, #75	@ 0x4b
 8008c08:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8008c0a:	4b03      	ldr	r3, [pc, #12]	@ (8008c18 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	370c      	adds	r7, #12
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr
 8008c18:	2000016c 	.word	0x2000016c

08008c1c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b083      	sub	sp, #12
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	224b      	movs	r2, #75	@ 0x4b
 8008c28:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8008c2a:	4b03      	ldr	r3, [pc, #12]	@ (8008c38 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	370c      	adds	r7, #12
 8008c30:	46bd      	mov	sp, r7
 8008c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c36:	4770      	bx	lr
 8008c38:	200001b8 	.word	0x200001b8

08008c3c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b083      	sub	sp, #12
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	220a      	movs	r2, #10
 8008c48:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008c4a:	4b03      	ldr	r3, [pc, #12]	@ (8008c58 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	370c      	adds	r7, #12
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr
 8008c58:	20000124 	.word	0x20000124

08008c5c <USBD_CDC_ACM_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_ACM_RegisterInterface(USBD_HandleTypeDef *pdev,
                                       USBD_CDC_ACM_ItfTypeDef *fops)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b083      	sub	sp, #12
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d101      	bne.n	8008c70 <USBD_CDC_ACM_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008c6c:	2303      	movs	r3, #3
 8008c6e:	e004      	b.n	8008c7a <USBD_CDC_ACM_RegisterInterface+0x1e>
  }

  pdev->pUserData_CDC_ACM = fops;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	683a      	ldr	r2, [r7, #0]
 8008c74:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  return (uint8_t)USBD_OK;
 8008c78:	2300      	movs	r3, #0
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	370c      	adds	r7, #12
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c84:	4770      	bx	lr
	...

08008c88 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b087      	sub	sp, #28
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	60b9      	str	r1, [r7, #8]
 8008c90:	607a      	str	r2, [r7, #4]
 8008c92:	603b      	str	r3, [r7, #0]
 8008c94:	4603      	mov	r3, r0
 8008c96:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 8008c9c:	7bfb      	ldrb	r3, [r7, #15]
 8008c9e:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008ca2:	fb02 f303 	mul.w	r3, r2, r3
 8008ca6:	4a09      	ldr	r2, [pc, #36]	@ (8008ccc <USBD_CDC_SetTxBuffer+0x44>)
 8008ca8:	4413      	add	r3, r2
 8008caa:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	687a      	ldr	r2, [r7, #4]
 8008cb0:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	683a      	ldr	r2, [r7, #0]
 8008cb8:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008cbc:	2300      	movs	r3, #0
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	371c      	adds	r7, #28
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr
 8008cca:	bf00      	nop
 8008ccc:	20002268 	.word	0x20002268

08008cd0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b087      	sub	sp, #28
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	60b9      	str	r1, [r7, #8]
 8008cda:	607a      	str	r2, [r7, #4]
 8008cdc:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 8008ce2:	7bfb      	ldrb	r3, [r7, #15]
 8008ce4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008ce8:	fb02 f303 	mul.w	r3, r2, r3
 8008cec:	4a06      	ldr	r2, [pc, #24]	@ (8008d08 <USBD_CDC_SetRxBuffer+0x38>)
 8008cee:	4413      	add	r3, r2
 8008cf0:	617b      	str	r3, [r7, #20]

  hcdc->RxBuffer = pbuff;
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008cfa:	2300      	movs	r3, #0
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	371c      	adds	r7, #28
 8008d00:	46bd      	mov	sp, r7
 8008d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d06:	4770      	bx	lr
 8008d08:	20002268 	.word	0x20002268

08008d0c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b084      	sub	sp, #16
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	4603      	mov	r3, r0
 8008d14:	6039      	str	r1, [r7, #0]
 8008d16:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	73fb      	strb	r3, [r7, #15]

  hcdc = &CDC_ACM_Class_Data[ch];
 8008d20:	79fb      	ldrb	r3, [r7, #7]
 8008d22:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008d26:	fb02 f303 	mul.w	r3, r2, r3
 8008d2a:	4a17      	ldr	r2, [pc, #92]	@ (8008d88 <USBD_CDC_TransmitPacket+0x7c>)
 8008d2c:	4413      	add	r3, r2
 8008d2e:	60bb      	str	r3, [r7, #8]

  if (hcdc->TxState == 0U)
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d121      	bne.n	8008d7e <USBD_CDC_TransmitPacket+0x72>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP[ch] & 0xFU].total_length = hcdc->TxLength;
 8008d42:	79fb      	ldrb	r3, [r7, #7]
 8008d44:	4a11      	ldr	r2, [pc, #68]	@ (8008d8c <USBD_CDC_TransmitPacket+0x80>)
 8008d46:	5cd3      	ldrb	r3, [r2, r3]
 8008d48:	f003 020f 	and.w	r2, r3, #15
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8008d52:	6838      	ldr	r0, [r7, #0]
 8008d54:	4613      	mov	r3, r2
 8008d56:	009b      	lsls	r3, r3, #2
 8008d58:	4413      	add	r3, r2
 8008d5a:	009b      	lsls	r3, r3, #2
 8008d5c:	4403      	add	r3, r0
 8008d5e:	3318      	adds	r3, #24
 8008d60:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP[ch], hcdc->TxBuffer, hcdc->TxLength);
 8008d62:	79fb      	ldrb	r3, [r7, #7]
 8008d64:	4a09      	ldr	r2, [pc, #36]	@ (8008d8c <USBD_CDC_TransmitPacket+0x80>)
 8008d66:	5cd1      	ldrb	r1, [r2, r3]
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008d74:	6838      	ldr	r0, [r7, #0]
 8008d76:	f002 faae 	bl	800b2d6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3710      	adds	r7, #16
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}
 8008d88:	20002268 	.word	0x20002268
 8008d8c:	20002250 	.word	0x20002250

08008d90 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b084      	sub	sp, #16
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	4603      	mov	r3, r0
 8008d98:	6039      	str	r1, [r7, #0]
 8008d9a:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	60fb      	str	r3, [r7, #12]

  hcdc = &CDC_ACM_Class_Data[ch];
 8008da0:	79fb      	ldrb	r3, [r7, #7]
 8008da2:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008da6:	fb02 f303 	mul.w	r3, r2, r3
 8008daa:	4a11      	ldr	r2, [pc, #68]	@ (8008df0 <USBD_CDC_ReceivePacket+0x60>)
 8008dac:	4413      	add	r3, r2
 8008dae:	60fb      	str	r3, [r7, #12]

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	7c1b      	ldrb	r3, [r3, #16]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d10b      	bne.n	8008dd0 <USBD_CDC_ReceivePacket+0x40>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 8008db8:	79fb      	ldrb	r3, [r7, #7]
 8008dba:	4a0e      	ldr	r2, [pc, #56]	@ (8008df4 <USBD_CDC_ReceivePacket+0x64>)
 8008dbc:	5cd1      	ldrb	r1, [r2, r3]
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008dc4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008dc8:	6838      	ldr	r0, [r7, #0]
 8008dca:	f002 faa5 	bl	800b318 <USBD_LL_PrepareReceive>
 8008dce:	e009      	b.n	8008de4 <USBD_CDC_ReceivePacket+0x54>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 8008dd0:	79fb      	ldrb	r3, [r7, #7]
 8008dd2:	4a08      	ldr	r2, [pc, #32]	@ (8008df4 <USBD_CDC_ReceivePacket+0x64>)
 8008dd4:	5cd1      	ldrb	r1, [r2, r3]
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008ddc:	2340      	movs	r3, #64	@ 0x40
 8008dde:	6838      	ldr	r0, [r7, #0]
 8008de0:	f002 fa9a 	bl	800b318 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008de4:	2300      	movs	r3, #0
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3710      	adds	r7, #16
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}
 8008dee:	bf00      	nop
 8008df0:	20002268 	.word	0x20002268
 8008df4:	20002254 	.word	0x20002254

08008df8 <USBD_Update_CDC_ACM_DESC>:
                              uint8_t com_itf,
                              uint8_t in_ep,
                              uint8_t cmd_ep,
                              uint8_t out_ep,
                              uint8_t str_idx)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b085      	sub	sp, #20
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	4608      	mov	r0, r1
 8008e02:	4611      	mov	r1, r2
 8008e04:	461a      	mov	r2, r3
 8008e06:	4603      	mov	r3, r0
 8008e08:	70fb      	strb	r3, [r7, #3]
 8008e0a:	460b      	mov	r3, r1
 8008e0c:	70bb      	strb	r3, [r7, #2]
 8008e0e:	4613      	mov	r3, r2
 8008e10:	707b      	strb	r3, [r7, #1]
  desc += 9;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	3309      	adds	r3, #9
 8008e16:	607b      	str	r3, [r7, #4]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8008e18:	2300      	movs	r3, #0
 8008e1a:	73fb      	strb	r3, [r7, #15]
 8008e1c:	e05b      	b.n	8008ed6 <USBD_Update_CDC_ACM_DESC+0xde>
  {
    desc[2] = cmd_itf;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	3302      	adds	r3, #2
 8008e22:	78fa      	ldrb	r2, [r7, #3]
 8008e24:	701a      	strb	r2, [r3, #0]
    desc[16] = str_idx;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	3310      	adds	r3, #16
 8008e2a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8008e2e:	701a      	strb	r2, [r3, #0]
    desc[10] = cmd_itf;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	330a      	adds	r3, #10
 8008e34:	78fa      	ldrb	r2, [r7, #3]
 8008e36:	701a      	strb	r2, [r3, #0]
    desc[26] = com_itf;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	331a      	adds	r3, #26
 8008e3c:	78ba      	ldrb	r2, [r7, #2]
 8008e3e:	701a      	strb	r2, [r3, #0]
    desc[34] = cmd_itf;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	3322      	adds	r3, #34	@ 0x22
 8008e44:	78fa      	ldrb	r2, [r7, #3]
 8008e46:	701a      	strb	r2, [r3, #0]
    desc[35] = com_itf;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	3323      	adds	r3, #35	@ 0x23
 8008e4c:	78ba      	ldrb	r2, [r7, #2]
 8008e4e:	701a      	strb	r2, [r3, #0]
    desc[38] = cmd_ep;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	3326      	adds	r3, #38	@ 0x26
 8008e54:	7e3a      	ldrb	r2, [r7, #24]
 8008e56:	701a      	strb	r2, [r3, #0]
    desc[45] = com_itf;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	332d      	adds	r3, #45	@ 0x2d
 8008e5c:	78ba      	ldrb	r2, [r7, #2]
 8008e5e:	701a      	strb	r2, [r3, #0]
    desc[54] = out_ep;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	3336      	adds	r3, #54	@ 0x36
 8008e64:	7f3a      	ldrb	r2, [r7, #28]
 8008e66:	701a      	strb	r2, [r3, #0]
    desc[61] = in_ep;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	333d      	adds	r3, #61	@ 0x3d
 8008e6c:	787a      	ldrb	r2, [r7, #1]
 8008e6e:	701a      	strb	r2, [r3, #0]

    desc += 66;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	3342      	adds	r3, #66	@ 0x42
 8008e74:	607b      	str	r3, [r7, #4]
    CDC_IN_EP[i] = in_ep;
 8008e76:	7bfb      	ldrb	r3, [r7, #15]
 8008e78:	491c      	ldr	r1, [pc, #112]	@ (8008eec <USBD_Update_CDC_ACM_DESC+0xf4>)
 8008e7a:	787a      	ldrb	r2, [r7, #1]
 8008e7c:	54ca      	strb	r2, [r1, r3]
    CDC_OUT_EP[i] = out_ep;
 8008e7e:	7bfb      	ldrb	r3, [r7, #15]
 8008e80:	491b      	ldr	r1, [pc, #108]	@ (8008ef0 <USBD_Update_CDC_ACM_DESC+0xf8>)
 8008e82:	7f3a      	ldrb	r2, [r7, #28]
 8008e84:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_EP[i] = cmd_ep;
 8008e86:	7bfb      	ldrb	r3, [r7, #15]
 8008e88:	491a      	ldr	r1, [pc, #104]	@ (8008ef4 <USBD_Update_CDC_ACM_DESC+0xfc>)
 8008e8a:	7e3a      	ldrb	r2, [r7, #24]
 8008e8c:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_ITF_NBR[i] = cmd_itf;
 8008e8e:	7bfb      	ldrb	r3, [r7, #15]
 8008e90:	4919      	ldr	r1, [pc, #100]	@ (8008ef8 <USBD_Update_CDC_ACM_DESC+0x100>)
 8008e92:	78fa      	ldrb	r2, [r7, #3]
 8008e94:	54ca      	strb	r2, [r1, r3]
    CDC_COM_ITF_NBR[i] = com_itf;
 8008e96:	7bfb      	ldrb	r3, [r7, #15]
 8008e98:	4918      	ldr	r1, [pc, #96]	@ (8008efc <USBD_Update_CDC_ACM_DESC+0x104>)
 8008e9a:	78ba      	ldrb	r2, [r7, #2]
 8008e9c:	54ca      	strb	r2, [r1, r3]
    CDC_STR_DESC_IDX[i] = str_idx;
 8008e9e:	7bfb      	ldrb	r3, [r7, #15]
 8008ea0:	4917      	ldr	r1, [pc, #92]	@ (8008f00 <USBD_Update_CDC_ACM_DESC+0x108>)
 8008ea2:	f897 2020 	ldrb.w	r2, [r7, #32]
 8008ea6:	54ca      	strb	r2, [r1, r3]

    in_ep += 2;
 8008ea8:	787b      	ldrb	r3, [r7, #1]
 8008eaa:	3302      	adds	r3, #2
 8008eac:	707b      	strb	r3, [r7, #1]
    cmd_ep = in_ep + 1;
 8008eae:	787b      	ldrb	r3, [r7, #1]
 8008eb0:	3301      	adds	r3, #1
 8008eb2:	763b      	strb	r3, [r7, #24]
    out_ep++;
 8008eb4:	7f3b      	ldrb	r3, [r7, #28]
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	773b      	strb	r3, [r7, #28]
    str_idx++;
 8008eba:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	f887 3020 	strb.w	r3, [r7, #32]

    cmd_itf += 2;
 8008ec4:	78fb      	ldrb	r3, [r7, #3]
 8008ec6:	3302      	adds	r3, #2
 8008ec8:	70fb      	strb	r3, [r7, #3]
    com_itf = cmd_itf + 1;
 8008eca:	78fb      	ldrb	r3, [r7, #3]
 8008ecc:	3301      	adds	r3, #1
 8008ece:	70bb      	strb	r3, [r7, #2]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8008ed0:	7bfb      	ldrb	r3, [r7, #15]
 8008ed2:	3301      	adds	r3, #1
 8008ed4:	73fb      	strb	r3, [r7, #15]
 8008ed6:	7bfb      	ldrb	r3, [r7, #15]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d0a0      	beq.n	8008e1e <USBD_Update_CDC_ACM_DESC+0x26>
  }
}
 8008edc:	bf00      	nop
 8008ede:	bf00      	nop
 8008ee0:	3714      	adds	r7, #20
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee8:	4770      	bx	lr
 8008eea:	bf00      	nop
 8008eec:	20002250 	.word	0x20002250
 8008ef0:	20002254 	.word	0x20002254
 8008ef4:	20002258 	.word	0x20002258
 8008ef8:	2000225c 	.word	0x2000225c
 8008efc:	20002260 	.word	0x20002260
 8008f00:	20002264 	.word	0x20002264

08008f04 <USBD_COMPOSITE_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b082      	sub	sp, #8
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	460b      	mov	r3, r1
 8008f0e:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.Init(pdev, cfgidx);
 8008f10:	4b08      	ldr	r3, [pc, #32]	@ (8008f34 <USBD_COMPOSITE_Init+0x30>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	78fa      	ldrb	r2, [r7, #3]
 8008f16:	4611      	mov	r1, r2
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	4798      	blx	r3
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.Init(pdev, cfgidx);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.Init(pdev, cfgidx);
 8008f1c:	4b06      	ldr	r3, [pc, #24]	@ (8008f38 <USBD_COMPOSITE_Init+0x34>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	78fa      	ldrb	r2, [r7, #3]
 8008f22:	4611      	mov	r1, r2
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.Init(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 8008f28:	2300      	movs	r3, #0
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3708      	adds	r7, #8
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
 8008f32:	bf00      	nop
 8008f34:	20000130 	.word	0x20000130
 8008f38:	20000250 	.word	0x20000250

08008f3c <USBD_COMPOSITE_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b082      	sub	sp, #8
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	460b      	mov	r3, r1
 8008f46:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.DeInit(pdev, cfgidx);
 8008f48:	4b08      	ldr	r3, [pc, #32]	@ (8008f6c <USBD_COMPOSITE_DeInit+0x30>)
 8008f4a:	685b      	ldr	r3, [r3, #4]
 8008f4c:	78fa      	ldrb	r2, [r7, #3]
 8008f4e:	4611      	mov	r1, r2
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	4798      	blx	r3
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.DeInit(pdev, cfgidx);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.DeInit(pdev, cfgidx);
 8008f54:	4b06      	ldr	r3, [pc, #24]	@ (8008f70 <USBD_COMPOSITE_DeInit+0x34>)
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	78fa      	ldrb	r2, [r7, #3]
 8008f5a:	4611      	mov	r1, r2
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.DeInit(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 8008f60:	2300      	movs	r3, #0
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3708      	adds	r7, #8
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}
 8008f6a:	bf00      	nop
 8008f6c:	20000130 	.word	0x20000130
 8008f70:	20000250 	.word	0x20000250

08008f74 <USBD_COMPOSITE_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Setup(USBD_HandleTypeDef *pdev,
                                    USBD_SetupReqTypedef *req)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b084      	sub	sp, #16
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
 8008f7c:	6039      	str	r1, [r7, #0]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8008f7e:	2300      	movs	r3, #0
 8008f80:	73fb      	strb	r3, [r7, #15]
 8008f82:	e019      	b.n	8008fb8 <USBD_COMPOSITE_Setup+0x44>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	889b      	ldrh	r3, [r3, #4]
 8008f88:	b2da      	uxtb	r2, r3
 8008f8a:	7bfb      	ldrb	r3, [r7, #15]
 8008f8c:	4915      	ldr	r1, [pc, #84]	@ (8008fe4 <USBD_COMPOSITE_Setup+0x70>)
 8008f8e:	5ccb      	ldrb	r3, [r1, r3]
 8008f90:	429a      	cmp	r2, r3
 8008f92:	d007      	beq.n	8008fa4 <USBD_COMPOSITE_Setup+0x30>
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	889b      	ldrh	r3, [r3, #4]
 8008f98:	b2da      	uxtb	r2, r3
 8008f9a:	7bfb      	ldrb	r3, [r7, #15]
 8008f9c:	4912      	ldr	r1, [pc, #72]	@ (8008fe8 <USBD_COMPOSITE_Setup+0x74>)
 8008f9e:	5ccb      	ldrb	r3, [r1, r3]
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d106      	bne.n	8008fb2 <USBD_COMPOSITE_Setup+0x3e>
    {
      return USBD_CDC_ACM.Setup(pdev, req);
 8008fa4:	4b11      	ldr	r3, [pc, #68]	@ (8008fec <USBD_COMPOSITE_Setup+0x78>)
 8008fa6:	689b      	ldr	r3, [r3, #8]
 8008fa8:	6839      	ldr	r1, [r7, #0]
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	4798      	blx	r3
 8008fae:	4603      	mov	r3, r0
 8008fb0:	e014      	b.n	8008fdc <USBD_COMPOSITE_Setup+0x68>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8008fb2:	7bfb      	ldrb	r3, [r7, #15]
 8008fb4:	3301      	adds	r3, #1
 8008fb6:	73fb      	strb	r3, [r7, #15]
 8008fb8:	7bfb      	ldrb	r3, [r7, #15]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d0e2      	beq.n	8008f84 <USBD_COMPOSITE_Setup+0x10>
  {
    return USBD_HID_KEYBOARD.Setup(pdev, req);
  }
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (LOBYTE(req->wIndex) == CUSTOM_HID_ITF_NBR)
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	889b      	ldrh	r3, [r3, #4]
 8008fc2:	b2da      	uxtb	r2, r3
 8008fc4:	4b0a      	ldr	r3, [pc, #40]	@ (8008ff0 <USBD_COMPOSITE_Setup+0x7c>)
 8008fc6:	781b      	ldrb	r3, [r3, #0]
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	d106      	bne.n	8008fda <USBD_COMPOSITE_Setup+0x66>
  {
    return USBD_HID_CUSTOM.Setup(pdev, req);
 8008fcc:	4b09      	ldr	r3, [pc, #36]	@ (8008ff4 <USBD_COMPOSITE_Setup+0x80>)
 8008fce:	689b      	ldr	r3, [r3, #8]
 8008fd0:	6839      	ldr	r1, [r7, #0]
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	4798      	blx	r3
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	e000      	b.n	8008fdc <USBD_COMPOSITE_Setup+0x68>
  {
    USBD_PRNT.Setup(pdev, req);
  }
#endif

  return USBD_FAIL;
 8008fda:	2303      	movs	r3, #3
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3710      	adds	r7, #16
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}
 8008fe4:	2000225c 	.word	0x2000225c
 8008fe8:	20002260 	.word	0x20002260
 8008fec:	20000130 	.word	0x20000130
 8008ff0:	2000259c 	.word	0x2000259c
 8008ff4:	20000250 	.word	0x20000250

08008ff8 <USBD_COMPOSITE_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b084      	sub	sp, #16
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	460b      	mov	r3, r1
 8009002:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8009004:	2300      	movs	r3, #0
 8009006:	73fb      	strb	r3, [r7, #15]
 8009008:	e01a      	b.n	8009040 <USBD_COMPOSITE_DataIn+0x48>
  {
    if (epnum == (CDC_IN_EP[i] & 0x7F) || epnum == (CDC_CMD_EP[i] & 0x7F))
 800900a:	78fa      	ldrb	r2, [r7, #3]
 800900c:	7bfb      	ldrb	r3, [r7, #15]
 800900e:	4918      	ldr	r1, [pc, #96]	@ (8009070 <USBD_COMPOSITE_DataIn+0x78>)
 8009010:	5ccb      	ldrb	r3, [r1, r3]
 8009012:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009016:	429a      	cmp	r2, r3
 8009018:	d007      	beq.n	800902a <USBD_COMPOSITE_DataIn+0x32>
 800901a:	78fa      	ldrb	r2, [r7, #3]
 800901c:	7bfb      	ldrb	r3, [r7, #15]
 800901e:	4915      	ldr	r1, [pc, #84]	@ (8009074 <USBD_COMPOSITE_DataIn+0x7c>)
 8009020:	5ccb      	ldrb	r3, [r1, r3]
 8009022:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009026:	429a      	cmp	r2, r3
 8009028:	d107      	bne.n	800903a <USBD_COMPOSITE_DataIn+0x42>
    {
      return USBD_CDC_ACM.DataIn(pdev, epnum);
 800902a:	4b13      	ldr	r3, [pc, #76]	@ (8009078 <USBD_COMPOSITE_DataIn+0x80>)
 800902c:	695b      	ldr	r3, [r3, #20]
 800902e:	78fa      	ldrb	r2, [r7, #3]
 8009030:	4611      	mov	r1, r2
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	4798      	blx	r3
 8009036:	4603      	mov	r3, r0
 8009038:	e015      	b.n	8009066 <USBD_COMPOSITE_DataIn+0x6e>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800903a:	7bfb      	ldrb	r3, [r7, #15]
 800903c:	3301      	adds	r3, #1
 800903e:	73fb      	strb	r3, [r7, #15]
 8009040:	7bfb      	ldrb	r3, [r7, #15]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d0e1      	beq.n	800900a <USBD_COMPOSITE_DataIn+0x12>
  {
    return USBD_HID_KEYBOARD.DataIn(pdev, epnum);
  }
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (epnum == (CUSTOM_HID_IN_EP & 0x7F))
 8009046:	78fa      	ldrb	r2, [r7, #3]
 8009048:	4b0c      	ldr	r3, [pc, #48]	@ (800907c <USBD_COMPOSITE_DataIn+0x84>)
 800904a:	781b      	ldrb	r3, [r3, #0]
 800904c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009050:	429a      	cmp	r2, r3
 8009052:	d107      	bne.n	8009064 <USBD_COMPOSITE_DataIn+0x6c>
  {
    return USBD_HID_CUSTOM.DataIn(pdev, epnum);
 8009054:	4b0a      	ldr	r3, [pc, #40]	@ (8009080 <USBD_COMPOSITE_DataIn+0x88>)
 8009056:	695b      	ldr	r3, [r3, #20]
 8009058:	78fa      	ldrb	r2, [r7, #3]
 800905a:	4611      	mov	r1, r2
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	4798      	blx	r3
 8009060:	4603      	mov	r3, r0
 8009062:	e000      	b.n	8009066 <USBD_COMPOSITE_DataIn+0x6e>
  {
    USBD_PRNT.DataIn(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 8009064:	2303      	movs	r3, #3
}
 8009066:	4618      	mov	r0, r3
 8009068:	3710      	adds	r7, #16
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}
 800906e:	bf00      	nop
 8009070:	20002250 	.word	0x20002250
 8009074:	20002258 	.word	0x20002258
 8009078:	20000130 	.word	0x20000130
 800907c:	2000024e 	.word	0x2000024e
 8009080:	20000250 	.word	0x20000250

08009084 <USBD_COMPOSITE_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b082      	sub	sp, #8
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.EP0_RxReady(pdev);
 800908c:	4b06      	ldr	r3, [pc, #24]	@ (80090a8 <USBD_COMPOSITE_EP0_RxReady+0x24>)
 800908e:	691b      	ldr	r3, [r3, #16]
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	4798      	blx	r3
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.EP0_RxReady(pdev);
 8009094:	4b05      	ldr	r3, [pc, #20]	@ (80090ac <USBD_COMPOSITE_EP0_RxReady+0x28>)
 8009096:	691b      	ldr	r3, [r3, #16]
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	4798      	blx	r3
  USBD_DFU.EP0_RxReady(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800909c:	2300      	movs	r3, #0
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3708      	adds	r7, #8
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
 80090a6:	bf00      	nop
 80090a8:	20000130 	.word	0x20000130
 80090ac:	20000250 	.word	0x20000250

080090b0 <USBD_COMPOSITE_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b083      	sub	sp, #12
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  USBD_DFU.EP0_TxSent(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 80090b8:	2300      	movs	r3, #0
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	370c      	adds	r7, #12
 80090be:	46bd      	mov	sp, r7
 80090c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c4:	4770      	bx	lr

080090c6 <USBD_COMPOSITE_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_SOF(USBD_HandleTypeDef *pdev)
{
 80090c6:	b480      	push	{r7}
 80090c8:	b083      	sub	sp, #12
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	6078      	str	r0, [r7, #4]
  USBD_DFU.SOF(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 80090ce:	2300      	movs	r3, #0
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	370c      	adds	r7, #12
 80090d4:	46bd      	mov	sp, r7
 80090d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090da:	4770      	bx	lr

080090dc <USBD_COMPOSITE_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80090dc:	b480      	push	{r7}
 80090de:	b083      	sub	sp, #12
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	460b      	mov	r3, r1
 80090e6:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 80090e8:	2300      	movs	r3, #0
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	370c      	adds	r7, #12
 80090ee:	46bd      	mov	sp, r7
 80090f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f4:	4770      	bx	lr

080090f6 <USBD_COMPOSITE_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80090f6:	b480      	push	{r7}
 80090f8:	b083      	sub	sp, #12
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	6078      	str	r0, [r7, #4]
 80090fe:	460b      	mov	r3, r1
 8009100:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8009102:	2300      	movs	r3, #0
}
 8009104:	4618      	mov	r0, r3
 8009106:	370c      	adds	r7, #12
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr

08009110 <USBD_COMPOSITE_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	460b      	mov	r3, r1
 800911a:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800911c:	2300      	movs	r3, #0
 800911e:	73fb      	strb	r3, [r7, #15]
 8009120:	e010      	b.n	8009144 <USBD_COMPOSITE_DataOut+0x34>
  {
    if (epnum == CDC_OUT_EP[i])
 8009122:	7bfb      	ldrb	r3, [r7, #15]
 8009124:	4a12      	ldr	r2, [pc, #72]	@ (8009170 <USBD_COMPOSITE_DataOut+0x60>)
 8009126:	5cd3      	ldrb	r3, [r2, r3]
 8009128:	78fa      	ldrb	r2, [r7, #3]
 800912a:	429a      	cmp	r2, r3
 800912c:	d107      	bne.n	800913e <USBD_COMPOSITE_DataOut+0x2e>
    {
      return USBD_CDC_ACM.DataOut(pdev, epnum);
 800912e:	4b11      	ldr	r3, [pc, #68]	@ (8009174 <USBD_COMPOSITE_DataOut+0x64>)
 8009130:	699b      	ldr	r3, [r3, #24]
 8009132:	78fa      	ldrb	r2, [r7, #3]
 8009134:	4611      	mov	r1, r2
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	4798      	blx	r3
 800913a:	4603      	mov	r3, r0
 800913c:	e013      	b.n	8009166 <USBD_COMPOSITE_DataOut+0x56>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800913e:	7bfb      	ldrb	r3, [r7, #15]
 8009140:	3301      	adds	r3, #1
 8009142:	73fb      	strb	r3, [r7, #15]
 8009144:	7bfb      	ldrb	r3, [r7, #15]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d0eb      	beq.n	8009122 <USBD_COMPOSITE_DataOut+0x12>
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (epnum == CUSTOM_HID_OUT_EP)
 800914a:	4b0b      	ldr	r3, [pc, #44]	@ (8009178 <USBD_COMPOSITE_DataOut+0x68>)
 800914c:	781b      	ldrb	r3, [r3, #0]
 800914e:	78fa      	ldrb	r2, [r7, #3]
 8009150:	429a      	cmp	r2, r3
 8009152:	d107      	bne.n	8009164 <USBD_COMPOSITE_DataOut+0x54>
  {
    return USBD_HID_CUSTOM.DataOut(pdev, epnum);
 8009154:	4b09      	ldr	r3, [pc, #36]	@ (800917c <USBD_COMPOSITE_DataOut+0x6c>)
 8009156:	699b      	ldr	r3, [r3, #24]
 8009158:	78fa      	ldrb	r2, [r7, #3]
 800915a:	4611      	mov	r1, r2
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	4798      	blx	r3
 8009160:	4603      	mov	r3, r0
 8009162:	e000      	b.n	8009166 <USBD_COMPOSITE_DataOut+0x56>
  {
    USBD_PRNT.DataOut(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 8009164:	2303      	movs	r3, #3
}
 8009166:	4618      	mov	r0, r3
 8009168:	3710      	adds	r7, #16
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}
 800916e:	bf00      	nop
 8009170:	20002254 	.word	0x20002254
 8009174:	20000130 	.word	0x20000130
 8009178:	2000024f 	.word	0x2000024f
 800917c:	20000250 	.word	0x20000250

08009180 <USBD_COMPOSITE_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetHSCfgDesc(uint16_t *length)
{
 8009180:	b480      	push	{r7}
 8009182:	b083      	sub	sp, #12
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	226b      	movs	r2, #107	@ 0x6b
 800918c:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 800918e:	4b03      	ldr	r3, [pc, #12]	@ (800919c <USBD_COMPOSITE_GetHSCfgDesc+0x1c>)
}
 8009190:	4618      	mov	r0, r3
 8009192:	370c      	adds	r7, #12
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr
 800919c:	200024f0 	.word	0x200024f0

080091a0 <USBD_COMPOSITE_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetFSCfgDesc(uint16_t *length)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b083      	sub	sp, #12
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	226b      	movs	r2, #107	@ 0x6b
 80091ac:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
 80091ae:	4b03      	ldr	r3, [pc, #12]	@ (80091bc <USBD_COMPOSITE_GetFSCfgDesc+0x1c>)
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	370c      	adds	r7, #12
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr
 80091bc:	20002484 	.word	0x20002484

080091c0 <USBD_COMPOSITE_GetOtherSpeedCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b083      	sub	sp, #12
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
#if (USBD_USE_HS == 1)
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
#else
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	226b      	movs	r2, #107	@ 0x6b
 80091cc:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 80091ce:	4b03      	ldr	r3, [pc, #12]	@ (80091dc <USBD_COMPOSITE_GetOtherSpeedCfgDesc+0x1c>)
#endif
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	370c      	adds	r7, #12
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr
 80091dc:	200024f0 	.word	0x200024f0

080091e0 <USBD_COMPOSITE_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_COMPOSITE_GetDeviceQualifierDesc(uint16_t *length)
{
 80091e0:	b480      	push	{r7}
 80091e2:	b083      	sub	sp, #12
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_DeviceQualifierDesc);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	220a      	movs	r2, #10
 80091ec:	801a      	strh	r2, [r3, #0]
  return USBD_COMPOSITE_DeviceQualifierDesc;
 80091ee:	4b03      	ldr	r3, [pc, #12]	@ (80091fc <USBD_COMPOSITE_GetDeviceQualifierDesc+0x1c>)
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	370c      	adds	r7, #12
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr
 80091fc:	20000244 	.word	0x20000244

08009200 <USBD_COMPOSITE_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_COMPOSITE_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b08a      	sub	sp, #40	@ 0x28
 8009204:	af00      	add	r7, sp, #0
 8009206:	60f8      	str	r0, [r7, #12]
 8009208:	460b      	mov	r3, r1
 800920a:	607a      	str	r2, [r7, #4]
 800920c:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[64];

  /* Check if the requested string interface is supported */
  if (index <= USBD_Track_String_Index)
 800920e:	4b20      	ldr	r3, [pc, #128]	@ (8009290 <USBD_COMPOSITE_GetUsrStringDesc+0x90>)
 8009210:	781b      	ldrb	r3, [r3, #0]
 8009212:	7afa      	ldrb	r2, [r7, #11]
 8009214:	429a      	cmp	r2, r3
 8009216:	d835      	bhi.n	8009284 <USBD_COMPOSITE_GetUsrStringDesc+0x84>
  {
#if (USBD_USE_CDC_ACM == 1)
    char str_buffer[16] = "";
 8009218:	f107 0314 	add.w	r3, r7, #20
 800921c:	2200      	movs	r2, #0
 800921e:	601a      	str	r2, [r3, #0]
 8009220:	605a      	str	r2, [r3, #4]
 8009222:	609a      	str	r2, [r3, #8]
 8009224:	60da      	str	r2, [r3, #12]
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8009226:	2300      	movs	r3, #0
 8009228:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800922c:	e01a      	b.n	8009264 <USBD_COMPOSITE_GetUsrStringDesc+0x64>
    {
      if (index == CDC_STR_DESC_IDX[i])
 800922e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009232:	4a18      	ldr	r2, [pc, #96]	@ (8009294 <USBD_COMPOSITE_GetUsrStringDesc+0x94>)
 8009234:	5cd3      	ldrb	r3, [r2, r3]
 8009236:	7afa      	ldrb	r2, [r7, #11]
 8009238:	429a      	cmp	r2, r3
 800923a:	d10e      	bne.n	800925a <USBD_COMPOSITE_GetUsrStringDesc+0x5a>
      {
        snprintf(str_buffer, sizeof(str_buffer), CDC_ACM_STR_DESC, i);
 800923c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009240:	f107 0014 	add.w	r0, r7, #20
 8009244:	4a14      	ldr	r2, [pc, #80]	@ (8009298 <USBD_COMPOSITE_GetUsrStringDesc+0x98>)
 8009246:	2110      	movs	r1, #16
 8009248:	f002 f8c6 	bl	800b3d8 <sniprintf>
        USBD_GetString((uint8_t *)str_buffer, USBD_StrDesc, length);
 800924c:	f107 0314 	add.w	r3, r7, #20
 8009250:	687a      	ldr	r2, [r7, #4]
 8009252:	4912      	ldr	r1, [pc, #72]	@ (800929c <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 8009254:	4618      	mov	r0, r3
 8009256:	f001 fcfe 	bl	800ac56 <USBD_GetString>
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800925a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800925e:	3301      	adds	r3, #1
 8009260:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009264:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009268:	2b00      	cmp	r3, #0
 800926a:	d0e0      	beq.n	800922e <USBD_COMPOSITE_GetUsrStringDesc+0x2e>
    {
      USBD_GetString((uint8_t *)HID_KEYBOARD_STR_DESC, USBD_StrDesc, length);
    }
#endif
#if (USBD_USE_HID_CUSTOM == 1)
    if (index == CUSTOM_HID_STR_DESC_IDX)
 800926c:	4b0c      	ldr	r3, [pc, #48]	@ (80092a0 <USBD_COMPOSITE_GetUsrStringDesc+0xa0>)
 800926e:	781b      	ldrb	r3, [r3, #0]
 8009270:	7afa      	ldrb	r2, [r7, #11]
 8009272:	429a      	cmp	r2, r3
 8009274:	d104      	bne.n	8009280 <USBD_COMPOSITE_GetUsrStringDesc+0x80>
    {
      USBD_GetString((uint8_t *)CUSTOM_HID_STR_DESC, USBD_StrDesc, length);
 8009276:	687a      	ldr	r2, [r7, #4]
 8009278:	4908      	ldr	r1, [pc, #32]	@ (800929c <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 800927a:	480a      	ldr	r0, [pc, #40]	@ (80092a4 <USBD_COMPOSITE_GetUsrStringDesc+0xa4>)
 800927c:	f001 fceb 	bl	800ac56 <USBD_GetString>
    if (index == PRINTER_STR_DESC_IDX)
    {
      USBD_GetString((uint8_t *)PRNT_STR_DESC, USBD_StrDesc, length);
    }
#endif
    return USBD_StrDesc;
 8009280:	4b06      	ldr	r3, [pc, #24]	@ (800929c <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 8009282:	e000      	b.n	8009286 <USBD_COMPOSITE_GetUsrStringDesc+0x86>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 8009284:	2300      	movs	r3, #0
  }
}
 8009286:	4618      	mov	r0, r3
 8009288:	3728      	adds	r7, #40	@ 0x28
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
 800928e:	bf00      	nop
 8009290:	20000240 	.word	0x20000240
 8009294:	20002264 	.word	0x20002264
 8009298:	0800bd94 	.word	0x0800bd94
 800929c:	2000255c 	.word	0x2000255c
 80092a0:	2000259d 	.word	0x2000259d
 80092a4:	0800bda4 	.word	0x0800bda4

080092a8 <USBD_COMPOSITE_Mount_Class>:
#endif

void USBD_COMPOSITE_Mount_Class(void)
{
 80092a8:	b590      	push	{r4, r7, lr}
 80092aa:	b089      	sub	sp, #36	@ 0x24
 80092ac:	af04      	add	r7, sp, #16
  uint16_t len = 0;
 80092ae:	2300      	movs	r3, #0
 80092b0:	80bb      	strh	r3, [r7, #4]
  uint8_t *ptr = NULL;
 80092b2:	2300      	movs	r3, #0
 80092b4:	60fb      	str	r3, [r7, #12]

  uint8_t in_ep_track = 0x81;
 80092b6:	2381      	movs	r3, #129	@ 0x81
 80092b8:	72fb      	strb	r3, [r7, #11]
  uint8_t out_ep_track = 0x01;
 80092ba:	2301      	movs	r3, #1
 80092bc:	72bb      	strb	r3, [r7, #10]
  uint8_t interface_no_track = 0x00;
 80092be:	2300      	movs	r3, #0
 80092c0:	727b      	strb	r3, [r7, #9]
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_HID_CUSTOM == 1)
  ptr = USBD_HID_CUSTOM.GetFSConfigDescriptor(&len);
 80092c2:	4b74      	ldr	r3, [pc, #464]	@ (8009494 <USBD_COMPOSITE_Mount_Class+0x1ec>)
 80092c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092c6:	1d3a      	adds	r2, r7, #4
 80092c8:	4610      	mov	r0, r2
 80092ca:	4798      	blx	r3
 80092cc:	60f8      	str	r0, [r7, #12]
  USBD_Update_HID_Custom_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 80092ce:	4b72      	ldr	r3, [pc, #456]	@ (8009498 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 80092d0:	781b      	ldrb	r3, [r3, #0]
 80092d2:	7ab8      	ldrb	r0, [r7, #10]
 80092d4:	7afa      	ldrb	r2, [r7, #11]
 80092d6:	7a79      	ldrb	r1, [r7, #9]
 80092d8:	9300      	str	r3, [sp, #0]
 80092da:	4603      	mov	r3, r0
 80092dc:	68f8      	ldr	r0, [r7, #12]
 80092de:	f000 fbd9 	bl	8009a94 <USBD_Update_HID_Custom_DESC>
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_HID_CUSTOM_DESC, ptr + 0x09, len - 0x09);
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	3309      	adds	r3, #9
 80092e6:	88ba      	ldrh	r2, [r7, #4]
 80092e8:	3a09      	subs	r2, #9
 80092ea:	4619      	mov	r1, r3
 80092ec:	486b      	ldr	r0, [pc, #428]	@ (800949c <USBD_COMPOSITE_Mount_Class+0x1f4>)
 80092ee:	f002 f8dd 	bl	800b4ac <memcpy>

  ptr = USBD_HID_CUSTOM.GetHSConfigDescriptor(&len);
 80092f2:	4b68      	ldr	r3, [pc, #416]	@ (8009494 <USBD_COMPOSITE_Mount_Class+0x1ec>)
 80092f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092f6:	1d3a      	adds	r2, r7, #4
 80092f8:	4610      	mov	r0, r2
 80092fa:	4798      	blx	r3
 80092fc:	60f8      	str	r0, [r7, #12]
  USBD_Update_HID_Custom_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 80092fe:	4b66      	ldr	r3, [pc, #408]	@ (8009498 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8009300:	781b      	ldrb	r3, [r3, #0]
 8009302:	7ab8      	ldrb	r0, [r7, #10]
 8009304:	7afa      	ldrb	r2, [r7, #11]
 8009306:	7a79      	ldrb	r1, [r7, #9]
 8009308:	9300      	str	r3, [sp, #0]
 800930a:	4603      	mov	r3, r0
 800930c:	68f8      	ldr	r0, [r7, #12]
 800930e:	f000 fbc1 	bl	8009a94 <USBD_Update_HID_Custom_DESC>
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_HID_CUSTOM_DESC, ptr + 0x09, len - 0x09);
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	3309      	adds	r3, #9
 8009316:	88ba      	ldrh	r2, [r7, #4]
 8009318:	3a09      	subs	r2, #9
 800931a:	4619      	mov	r1, r3
 800931c:	4860      	ldr	r0, [pc, #384]	@ (80094a0 <USBD_COMPOSITE_Mount_Class+0x1f8>)
 800931e:	f002 f8c5 	bl	800b4ac <memcpy>

  in_ep_track += 1;
 8009322:	7afb      	ldrb	r3, [r7, #11]
 8009324:	3301      	adds	r3, #1
 8009326:	72fb      	strb	r3, [r7, #11]
  out_ep_track += 1;
 8009328:	7abb      	ldrb	r3, [r7, #10]
 800932a:	3301      	adds	r3, #1
 800932c:	72bb      	strb	r3, [r7, #10]
  interface_no_track += 1;
 800932e:	7a7b      	ldrb	r3, [r7, #9]
 8009330:	3301      	adds	r3, #1
 8009332:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += 1;
 8009334:	4b58      	ldr	r3, [pc, #352]	@ (8009498 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8009336:	781b      	ldrb	r3, [r3, #0]
 8009338:	3301      	adds	r3, #1
 800933a:	b2da      	uxtb	r2, r3
 800933c:	4b56      	ldr	r3, [pc, #344]	@ (8009498 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800933e:	701a      	strb	r2, [r3, #0]
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_CDC_ACM == 1)
  ptr = USBD_CDC_ACM.GetFSConfigDescriptor(&len);
 8009340:	4b58      	ldr	r3, [pc, #352]	@ (80094a4 <USBD_COMPOSITE_Mount_Class+0x1fc>)
 8009342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009344:	1d3a      	adds	r2, r7, #4
 8009346:	4610      	mov	r0, r2
 8009348:	4798      	blx	r3
 800934a:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 800934c:	7a7b      	ldrb	r3, [r7, #9]
 800934e:	3301      	adds	r3, #1
 8009350:	b2d8      	uxtb	r0, r3
 8009352:	7afb      	ldrb	r3, [r7, #11]
 8009354:	3301      	adds	r3, #1
 8009356:	b2db      	uxtb	r3, r3
 8009358:	4a4f      	ldr	r2, [pc, #316]	@ (8009498 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800935a:	7812      	ldrb	r2, [r2, #0]
 800935c:	7afc      	ldrb	r4, [r7, #11]
 800935e:	7a79      	ldrb	r1, [r7, #9]
 8009360:	9202      	str	r2, [sp, #8]
 8009362:	7aba      	ldrb	r2, [r7, #10]
 8009364:	9201      	str	r2, [sp, #4]
 8009366:	9300      	str	r3, [sp, #0]
 8009368:	4623      	mov	r3, r4
 800936a:	4602      	mov	r2, r0
 800936c:	68f8      	ldr	r0, [r7, #12]
 800936e:	f7ff fd43 	bl	8008df8 <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	3309      	adds	r3, #9
 8009376:	88ba      	ldrh	r2, [r7, #4]
 8009378:	3a09      	subs	r2, #9
 800937a:	4619      	mov	r1, r3
 800937c:	484a      	ldr	r0, [pc, #296]	@ (80094a8 <USBD_COMPOSITE_Mount_Class+0x200>)
 800937e:	f002 f895 	bl	800b4ac <memcpy>

  ptr = USBD_CDC_ACM.GetHSConfigDescriptor(&len);
 8009382:	4b48      	ldr	r3, [pc, #288]	@ (80094a4 <USBD_COMPOSITE_Mount_Class+0x1fc>)
 8009384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009386:	1d3a      	adds	r2, r7, #4
 8009388:	4610      	mov	r0, r2
 800938a:	4798      	blx	r3
 800938c:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 800938e:	7a7b      	ldrb	r3, [r7, #9]
 8009390:	3301      	adds	r3, #1
 8009392:	b2d8      	uxtb	r0, r3
 8009394:	7afb      	ldrb	r3, [r7, #11]
 8009396:	3301      	adds	r3, #1
 8009398:	b2db      	uxtb	r3, r3
 800939a:	4a3f      	ldr	r2, [pc, #252]	@ (8009498 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800939c:	7812      	ldrb	r2, [r2, #0]
 800939e:	7afc      	ldrb	r4, [r7, #11]
 80093a0:	7a79      	ldrb	r1, [r7, #9]
 80093a2:	9202      	str	r2, [sp, #8]
 80093a4:	7aba      	ldrb	r2, [r7, #10]
 80093a6:	9201      	str	r2, [sp, #4]
 80093a8:	9300      	str	r3, [sp, #0]
 80093aa:	4623      	mov	r3, r4
 80093ac:	4602      	mov	r2, r0
 80093ae:	68f8      	ldr	r0, [r7, #12]
 80093b0:	f7ff fd22 	bl	8008df8 <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	3309      	adds	r3, #9
 80093b8:	88ba      	ldrh	r2, [r7, #4]
 80093ba:	3a09      	subs	r2, #9
 80093bc:	4619      	mov	r1, r3
 80093be:	483b      	ldr	r0, [pc, #236]	@ (80094ac <USBD_COMPOSITE_Mount_Class+0x204>)
 80093c0:	f002 f874 	bl	800b4ac <memcpy>

  in_ep_track += 2 * USBD_CDC_ACM_COUNT;
 80093c4:	7afb      	ldrb	r3, [r7, #11]
 80093c6:	3302      	adds	r3, #2
 80093c8:	72fb      	strb	r3, [r7, #11]
  out_ep_track += 1 * USBD_CDC_ACM_COUNT;
 80093ca:	7abb      	ldrb	r3, [r7, #10]
 80093cc:	3301      	adds	r3, #1
 80093ce:	72bb      	strb	r3, [r7, #10]
  interface_no_track += 2 * USBD_CDC_ACM_COUNT;
 80093d0:	7a7b      	ldrb	r3, [r7, #9]
 80093d2:	3302      	adds	r3, #2
 80093d4:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += USBD_CDC_ACM_COUNT;
 80093d6:	4b30      	ldr	r3, [pc, #192]	@ (8009498 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 80093d8:	781b      	ldrb	r3, [r3, #0]
 80093da:	3301      	adds	r3, #1
 80093dc:	b2da      	uxtb	r2, r3
 80093de:	4b2e      	ldr	r3, [pc, #184]	@ (8009498 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 80093e0:	701a      	strb	r2, [r3, #0]
#endif

  uint16_t CFG_SIZE = sizeof(USBD_COMPOSITE_CFG_DESC_t);
 80093e2:	236b      	movs	r3, #107	@ 0x6b
 80093e4:	80fb      	strh	r3, [r7, #6]
  ptr = USBD_COMPOSITE_HSCfgDesc.CONFIG_DESC;
 80093e6:	4b32      	ldr	r3, [pc, #200]	@ (80094b0 <USBD_COMPOSITE_Mount_Class+0x208>)
 80093e8:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2209      	movs	r2, #9
 80093ee:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	3301      	adds	r3, #1
 80093f4:	2202      	movs	r2, #2
 80093f6:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	3302      	adds	r3, #2
 80093fc:	88fa      	ldrh	r2, [r7, #6]
 80093fe:	b2d2      	uxtb	r2, r2
 8009400:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 8009402:	88fb      	ldrh	r3, [r7, #6]
 8009404:	0a1b      	lsrs	r3, r3, #8
 8009406:	b29a      	uxth	r2, r3
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	3303      	adds	r3, #3
 800940c:	b2d2      	uxtb	r2, r2
 800940e:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	3304      	adds	r3, #4
 8009414:	7a7a      	ldrb	r2, [r7, #9]
 8009416:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	3305      	adds	r3, #5
 800941c:	2201      	movs	r2, #1
 800941e:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	3306      	adds	r3, #6
 8009424:	2200      	movs	r2, #0
 8009426:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	3307      	adds	r3, #7
 800942c:	22c0      	movs	r2, #192	@ 0xc0
 800942e:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	3308      	adds	r3, #8
 8009434:	2232      	movs	r2, #50	@ 0x32
 8009436:	701a      	strb	r2, [r3, #0]

  ptr = USBD_COMPOSITE_FSCfgDesc.CONFIG_DESC;
 8009438:	4b1e      	ldr	r3, [pc, #120]	@ (80094b4 <USBD_COMPOSITE_Mount_Class+0x20c>)
 800943a:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	2209      	movs	r2, #9
 8009440:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	3301      	adds	r3, #1
 8009446:	2202      	movs	r2, #2
 8009448:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	3302      	adds	r3, #2
 800944e:	88fa      	ldrh	r2, [r7, #6]
 8009450:	b2d2      	uxtb	r2, r2
 8009452:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 8009454:	88fb      	ldrh	r3, [r7, #6]
 8009456:	0a1b      	lsrs	r3, r3, #8
 8009458:	b29a      	uxth	r2, r3
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	3303      	adds	r3, #3
 800945e:	b2d2      	uxtb	r2, r2
 8009460:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	3304      	adds	r3, #4
 8009466:	7a7a      	ldrb	r2, [r7, #9]
 8009468:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	3305      	adds	r3, #5
 800946e:	2201      	movs	r2, #1
 8009470:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	3306      	adds	r3, #6
 8009476:	2200      	movs	r2, #0
 8009478:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	3307      	adds	r3, #7
 800947e:	22c0      	movs	r2, #192	@ 0xc0
 8009480:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	3308      	adds	r3, #8
 8009486:	2232      	movs	r2, #50	@ 0x32
 8009488:	701a      	strb	r2, [r3, #0]

  (void)out_ep_track;
  (void)in_ep_track;
}
 800948a:	bf00      	nop
 800948c:	3714      	adds	r7, #20
 800948e:	46bd      	mov	sp, r7
 8009490:	bd90      	pop	{r4, r7, pc}
 8009492:	bf00      	nop
 8009494:	20000250 	.word	0x20000250
 8009498:	20000240 	.word	0x20000240
 800949c:	2000248d 	.word	0x2000248d
 80094a0:	200024f9 	.word	0x200024f9
 80094a4:	20000130 	.word	0x20000130
 80094a8:	200024ad 	.word	0x200024ad
 80094ac:	20002519 	.word	0x20002519
 80094b0:	200024f0 	.word	0x200024f0
 80094b4:	20002484 	.word	0x20002484

080094b8 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b084      	sub	sp, #16
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	460b      	mov	r3, r1
 80094c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = &CUSTOM_HID_Instance;
 80094c4:	4b43      	ldr	r3, [pc, #268]	@ (80095d4 <USBD_CUSTOM_HID_Init+0x11c>)
 80094c6:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d105      	bne.n	80094da <USBD_CUSTOM_HID_Init+0x22>
  {
    pdev->pClassData_HID_Custom = NULL;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2200      	movs	r2, #0
 80094d2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
    return (uint8_t)USBD_EMEM;
 80094d6:	2302      	movs	r3, #2
 80094d8:	e078      	b.n	80095cc <USBD_CUSTOM_HID_Init+0x114>
  }

  pdev->pClassData_HID_Custom = (void *)hhid;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	68fa      	ldr	r2, [r7, #12]
 80094de:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	7c1b      	ldrb	r3, [r3, #16]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d11b      	bne.n	8009522 <USBD_CUSTOM_HID_Init+0x6a>
  {
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80094ea:	4b3b      	ldr	r3, [pc, #236]	@ (80095d8 <USBD_CUSTOM_HID_Init+0x120>)
 80094ec:	781b      	ldrb	r3, [r3, #0]
 80094ee:	f003 020f 	and.w	r2, r3, #15
 80094f2:	6879      	ldr	r1, [r7, #4]
 80094f4:	4613      	mov	r3, r2
 80094f6:	009b      	lsls	r3, r3, #2
 80094f8:	4413      	add	r3, r2
 80094fa:	009b      	lsls	r3, r3, #2
 80094fc:	440b      	add	r3, r1
 80094fe:	3326      	adds	r3, #38	@ 0x26
 8009500:	2205      	movs	r2, #5
 8009502:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8009504:	4b35      	ldr	r3, [pc, #212]	@ (80095dc <USBD_CUSTOM_HID_Init+0x124>)
 8009506:	781b      	ldrb	r3, [r3, #0]
 8009508:	f003 020f 	and.w	r2, r3, #15
 800950c:	6879      	ldr	r1, [r7, #4]
 800950e:	4613      	mov	r3, r2
 8009510:	009b      	lsls	r3, r3, #2
 8009512:	4413      	add	r3, r2
 8009514:	009b      	lsls	r3, r3, #2
 8009516:	440b      	add	r3, r1
 8009518:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800951c:	2205      	movs	r2, #5
 800951e:	801a      	strh	r2, [r3, #0]
 8009520:	e01a      	b.n	8009558 <USBD_CUSTOM_HID_Init+0xa0>
  }
  else /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8009522:	4b2d      	ldr	r3, [pc, #180]	@ (80095d8 <USBD_CUSTOM_HID_Init+0x120>)
 8009524:	781b      	ldrb	r3, [r3, #0]
 8009526:	f003 020f 	and.w	r2, r3, #15
 800952a:	6879      	ldr	r1, [r7, #4]
 800952c:	4613      	mov	r3, r2
 800952e:	009b      	lsls	r3, r3, #2
 8009530:	4413      	add	r3, r2
 8009532:	009b      	lsls	r3, r3, #2
 8009534:	440b      	add	r3, r1
 8009536:	3326      	adds	r3, #38	@ 0x26
 8009538:	2201      	movs	r2, #1
 800953a:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800953c:	4b27      	ldr	r3, [pc, #156]	@ (80095dc <USBD_CUSTOM_HID_Init+0x124>)
 800953e:	781b      	ldrb	r3, [r3, #0]
 8009540:	f003 020f 	and.w	r2, r3, #15
 8009544:	6879      	ldr	r1, [r7, #4]
 8009546:	4613      	mov	r3, r2
 8009548:	009b      	lsls	r3, r3, #2
 800954a:	4413      	add	r3, r2
 800954c:	009b      	lsls	r3, r3, #2
 800954e:	440b      	add	r3, r1
 8009550:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8009554:	2201      	movs	r2, #1
 8009556:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_IN_EP, USBD_EP_TYPE_INTR,
 8009558:	4b1f      	ldr	r3, [pc, #124]	@ (80095d8 <USBD_CUSTOM_HID_Init+0x120>)
 800955a:	7819      	ldrb	r1, [r3, #0]
 800955c:	2340      	movs	r3, #64	@ 0x40
 800955e:	2203      	movs	r2, #3
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f001 fdea 	bl	800b13a <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].is_used = 1U;
 8009566:	4b1c      	ldr	r3, [pc, #112]	@ (80095d8 <USBD_CUSTOM_HID_Init+0x120>)
 8009568:	781b      	ldrb	r3, [r3, #0]
 800956a:	f003 020f 	and.w	r2, r3, #15
 800956e:	6879      	ldr	r1, [r7, #4]
 8009570:	4613      	mov	r3, r2
 8009572:	009b      	lsls	r3, r3, #2
 8009574:	4413      	add	r3, r2
 8009576:	009b      	lsls	r3, r3, #2
 8009578:	440b      	add	r3, r1
 800957a:	3324      	adds	r3, #36	@ 0x24
 800957c:	2201      	movs	r2, #1
 800957e:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_OUT_EP, USBD_EP_TYPE_INTR,
 8009580:	4b16      	ldr	r3, [pc, #88]	@ (80095dc <USBD_CUSTOM_HID_Init+0x124>)
 8009582:	7819      	ldrb	r1, [r3, #0]
 8009584:	2340      	movs	r3, #64	@ 0x40
 8009586:	2203      	movs	r2, #3
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f001 fdd6 	bl	800b13a <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].is_used = 1U;
 800958e:	4b13      	ldr	r3, [pc, #76]	@ (80095dc <USBD_CUSTOM_HID_Init+0x124>)
 8009590:	781b      	ldrb	r3, [r3, #0]
 8009592:	f003 020f 	and.w	r2, r3, #15
 8009596:	6879      	ldr	r1, [r7, #4]
 8009598:	4613      	mov	r3, r2
 800959a:	009b      	lsls	r3, r3, #2
 800959c:	4413      	add	r3, r2
 800959e:	009b      	lsls	r3, r3, #2
 80095a0:	440b      	add	r3, r1
 80095a2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80095a6:	2201      	movs	r2, #1
 80095a8:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	2200      	movs	r2, #0
 80095ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->Init();
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 80095b8:	685b      	ldr	r3, [r3, #4]
 80095ba:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_OUT_EP, hhid->Report_buf,
 80095bc:	4b07      	ldr	r3, [pc, #28]	@ (80095dc <USBD_CUSTOM_HID_Init+0x124>)
 80095be:	7819      	ldrb	r1, [r3, #0]
 80095c0:	68fa      	ldr	r2, [r7, #12]
 80095c2:	2340      	movs	r3, #64	@ 0x40
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f001 fea7 	bl	800b318 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 80095ca:	2300      	movs	r3, #0
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3710      	adds	r7, #16
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}
 80095d4:	200025a0 	.word	0x200025a0
 80095d8:	2000024e 	.word	0x2000024e
 80095dc:	2000024f 	.word	0x2000024f

080095e0 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b082      	sub	sp, #8
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
 80095e8:	460b      	mov	r3, r1
 80095ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_IN_EP);
 80095ec:	4b2a      	ldr	r3, [pc, #168]	@ (8009698 <USBD_CUSTOM_HID_DeInit+0xb8>)
 80095ee:	781b      	ldrb	r3, [r3, #0]
 80095f0:	4619      	mov	r1, r3
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f001 fdc7 	bl	800b186 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].is_used = 0U;
 80095f8:	4b27      	ldr	r3, [pc, #156]	@ (8009698 <USBD_CUSTOM_HID_DeInit+0xb8>)
 80095fa:	781b      	ldrb	r3, [r3, #0]
 80095fc:	f003 020f 	and.w	r2, r3, #15
 8009600:	6879      	ldr	r1, [r7, #4]
 8009602:	4613      	mov	r3, r2
 8009604:	009b      	lsls	r3, r3, #2
 8009606:	4413      	add	r3, r2
 8009608:	009b      	lsls	r3, r3, #2
 800960a:	440b      	add	r3, r1
 800960c:	3324      	adds	r3, #36	@ 0x24
 800960e:	2200      	movs	r2, #0
 8009610:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = 0U;
 8009612:	4b21      	ldr	r3, [pc, #132]	@ (8009698 <USBD_CUSTOM_HID_DeInit+0xb8>)
 8009614:	781b      	ldrb	r3, [r3, #0]
 8009616:	f003 020f 	and.w	r2, r3, #15
 800961a:	6879      	ldr	r1, [r7, #4]
 800961c:	4613      	mov	r3, r2
 800961e:	009b      	lsls	r3, r3, #2
 8009620:	4413      	add	r3, r2
 8009622:	009b      	lsls	r3, r3, #2
 8009624:	440b      	add	r3, r1
 8009626:	3326      	adds	r3, #38	@ 0x26
 8009628:	2200      	movs	r2, #0
 800962a:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_OUT_EP);
 800962c:	4b1b      	ldr	r3, [pc, #108]	@ (800969c <USBD_CUSTOM_HID_DeInit+0xbc>)
 800962e:	781b      	ldrb	r3, [r3, #0]
 8009630:	4619      	mov	r1, r3
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f001 fda7 	bl	800b186 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].is_used = 0U;
 8009638:	4b18      	ldr	r3, [pc, #96]	@ (800969c <USBD_CUSTOM_HID_DeInit+0xbc>)
 800963a:	781b      	ldrb	r3, [r3, #0]
 800963c:	f003 020f 	and.w	r2, r3, #15
 8009640:	6879      	ldr	r1, [r7, #4]
 8009642:	4613      	mov	r3, r2
 8009644:	009b      	lsls	r3, r3, #2
 8009646:	4413      	add	r3, r2
 8009648:	009b      	lsls	r3, r3, #2
 800964a:	440b      	add	r3, r1
 800964c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009650:	2200      	movs	r2, #0
 8009652:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = 0U;
 8009654:	4b11      	ldr	r3, [pc, #68]	@ (800969c <USBD_CUSTOM_HID_DeInit+0xbc>)
 8009656:	781b      	ldrb	r3, [r3, #0]
 8009658:	f003 020f 	and.w	r2, r3, #15
 800965c:	6879      	ldr	r1, [r7, #4]
 800965e:	4613      	mov	r3, r2
 8009660:	009b      	lsls	r3, r3, #2
 8009662:	4413      	add	r3, r2
 8009664:	009b      	lsls	r3, r3, #2
 8009666:	440b      	add	r3, r1
 8009668:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800966c:	2200      	movs	r2, #0
 800966e:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassData_HID_Custom != NULL)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009676:	2b00      	cmp	r3, #0
 8009678:	d008      	beq.n	800968c <USBD_CUSTOM_HID_DeInit+0xac>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->DeInit();
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 8009680:	689b      	ldr	r3, [r3, #8]
 8009682:	4798      	blx	r3
#if (0)
    USBD_free(pdev->pClassData_HID_Custom);
#endif
    pdev->pClassData_HID_Custom = NULL;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2200      	movs	r2, #0
 8009688:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
  }

  return (uint8_t)USBD_OK;
 800968c:	2300      	movs	r3, #0
}
 800968e:	4618      	mov	r0, r3
 8009690:	3708      	adds	r7, #8
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}
 8009696:	bf00      	nop
 8009698:	2000024e 	.word	0x2000024e
 800969c:	2000024f 	.word	0x2000024f

080096a0 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b088      	sub	sp, #32
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80096b0:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80096b2:	2300      	movs	r3, #0
 80096b4:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 80096b6:	2300      	movs	r3, #0
 80096b8:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80096ba:	2300      	movs	r3, #0
 80096bc:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 80096be:	2300      	movs	r3, #0
 80096c0:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d101      	bne.n	80096cc <USBD_CUSTOM_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80096c8:	2303      	movs	r3, #3
 80096ca:	e0ed      	b.n	80098a8 <USBD_CUSTOM_HID_Setup+0x208>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	781b      	ldrb	r3, [r3, #0]
 80096d0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d052      	beq.n	800977e <USBD_CUSTOM_HID_Setup+0xde>
 80096d8:	2b20      	cmp	r3, #32
 80096da:	f040 80dd 	bne.w	8009898 <USBD_CUSTOM_HID_Setup+0x1f8>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	785b      	ldrb	r3, [r3, #1]
 80096e2:	3b02      	subs	r3, #2
 80096e4:	2b09      	cmp	r3, #9
 80096e6:	d842      	bhi.n	800976e <USBD_CUSTOM_HID_Setup+0xce>
 80096e8:	a201      	add	r2, pc, #4	@ (adr r2, 80096f0 <USBD_CUSTOM_HID_Setup+0x50>)
 80096ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096ee:	bf00      	nop
 80096f0:	08009749 	.word	0x08009749
 80096f4:	08009727 	.word	0x08009727
 80096f8:	0800976f 	.word	0x0800976f
 80096fc:	0800976f 	.word	0x0800976f
 8009700:	0800976f 	.word	0x0800976f
 8009704:	0800976f 	.word	0x0800976f
 8009708:	0800976f 	.word	0x0800976f
 800970c:	08009759 	.word	0x08009759
 8009710:	08009737 	.word	0x08009737
 8009714:	08009719 	.word	0x08009719
    {
    case CUSTOM_HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	885b      	ldrh	r3, [r3, #2]
 800971c:	b2db      	uxtb	r3, r3
 800971e:	461a      	mov	r2, r3
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8009724:	e02a      	b.n	800977c <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	3340      	adds	r3, #64	@ 0x40
 800972a:	2201      	movs	r2, #1
 800972c:	4619      	mov	r1, r3
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f001 faf1 	bl	800ad16 <USBD_CtlSendData>
      break;
 8009734:	e022      	b.n	800977c <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	885b      	ldrh	r3, [r3, #2]
 800973a:	0a1b      	lsrs	r3, r3, #8
 800973c:	b29b      	uxth	r3, r3
 800973e:	b2db      	uxtb	r3, r3
 8009740:	461a      	mov	r2, r3
 8009742:	693b      	ldr	r3, [r7, #16]
 8009744:	645a      	str	r2, [r3, #68]	@ 0x44
      break;
 8009746:	e019      	b.n	800977c <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	3344      	adds	r3, #68	@ 0x44
 800974c:	2201      	movs	r2, #1
 800974e:	4619      	mov	r1, r3
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f001 fae0 	bl	800ad16 <USBD_CtlSendData>
      break;
 8009756:	e011      	b.n	800977c <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_SET_REPORT:
      hhid->IsReportAvailable = 1U;
 8009758:	693b      	ldr	r3, [r7, #16]
 800975a:	2201      	movs	r2, #1
 800975c:	64da      	str	r2, [r3, #76]	@ 0x4c
      (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 800975e:	6939      	ldr	r1, [r7, #16]
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	88db      	ldrh	r3, [r3, #6]
 8009764:	461a      	mov	r2, r3
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f001 fb01 	bl	800ad6e <USBD_CtlPrepareRx>
      break;
 800976c:	e006      	b.n	800977c <USBD_CUSTOM_HID_Setup+0xdc>

    default:
      USBD_CtlError(pdev, req);
 800976e:	6839      	ldr	r1, [r7, #0]
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f001 fa5f 	bl	800ac34 <USBD_CtlError>
      ret = USBD_FAIL;
 8009776:	2303      	movs	r3, #3
 8009778:	75fb      	strb	r3, [r7, #23]
      break;
 800977a:	bf00      	nop
    }
    break;
 800977c:	e093      	b.n	80098a6 <USBD_CUSTOM_HID_Setup+0x206>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	785b      	ldrb	r3, [r3, #1]
 8009782:	2b0b      	cmp	r3, #11
 8009784:	d87f      	bhi.n	8009886 <USBD_CUSTOM_HID_Setup+0x1e6>
 8009786:	a201      	add	r2, pc, #4	@ (adr r2, 800978c <USBD_CUSTOM_HID_Setup+0xec>)
 8009788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800978c:	080097bd 	.word	0x080097bd
 8009790:	08009895 	.word	0x08009895
 8009794:	08009887 	.word	0x08009887
 8009798:	08009887 	.word	0x08009887
 800979c:	08009887 	.word	0x08009887
 80097a0:	08009887 	.word	0x08009887
 80097a4:	080097e7 	.word	0x080097e7
 80097a8:	08009887 	.word	0x08009887
 80097ac:	08009887 	.word	0x08009887
 80097b0:	08009887 	.word	0x08009887
 80097b4:	08009835 	.word	0x08009835
 80097b8:	0800985f 	.word	0x0800985f
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80097c2:	b2db      	uxtb	r3, r3
 80097c4:	2b03      	cmp	r3, #3
 80097c6:	d107      	bne.n	80097d8 <USBD_CUSTOM_HID_Setup+0x138>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80097c8:	f107 030e 	add.w	r3, r7, #14
 80097cc:	2202      	movs	r2, #2
 80097ce:	4619      	mov	r1, r3
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f001 faa0 	bl	800ad16 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80097d6:	e05e      	b.n	8009896 <USBD_CUSTOM_HID_Setup+0x1f6>
        USBD_CtlError(pdev, req);
 80097d8:	6839      	ldr	r1, [r7, #0]
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f001 fa2a 	bl	800ac34 <USBD_CtlError>
        ret = USBD_FAIL;
 80097e0:	2303      	movs	r3, #3
 80097e2:	75fb      	strb	r3, [r7, #23]
      break;
 80097e4:	e057      	b.n	8009896 <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	885b      	ldrh	r3, [r3, #2]
 80097ea:	0a1b      	lsrs	r3, r3, #8
 80097ec:	b29b      	uxth	r3, r3
 80097ee:	2b22      	cmp	r3, #34	@ 0x22
 80097f0:	d10b      	bne.n	800980a <USBD_CUSTOM_HID_Setup+0x16a>
      {
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	88db      	ldrh	r3, [r3, #6]
 80097f6:	2b21      	cmp	r3, #33	@ 0x21
 80097f8:	bf28      	it	cs
 80097fa:	2321      	movcs	r3, #33	@ 0x21
 80097fc:	83fb      	strh	r3, [r7, #30]
        pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->pReport;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	61bb      	str	r3, [r7, #24]
 8009808:	e00d      	b.n	8009826 <USBD_CUSTOM_HID_Setup+0x186>
      }
      else
      {
        if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	885b      	ldrh	r3, [r3, #2]
 800980e:	0a1b      	lsrs	r3, r3, #8
 8009810:	b29b      	uxth	r3, r3
 8009812:	2b21      	cmp	r3, #33	@ 0x21
 8009814:	d107      	bne.n	8009826 <USBD_CUSTOM_HID_Setup+0x186>
        {
          pbuf = USBD_CUSTOM_HID_Desc;
 8009816:	4b26      	ldr	r3, [pc, #152]	@ (80098b0 <USBD_CUSTOM_HID_Setup+0x210>)
 8009818:	61bb      	str	r3, [r7, #24]
          len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	88db      	ldrh	r3, [r3, #6]
 800981e:	2b09      	cmp	r3, #9
 8009820:	bf28      	it	cs
 8009822:	2309      	movcs	r3, #9
 8009824:	83fb      	strh	r3, [r7, #30]
        }
      }

      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009826:	8bfb      	ldrh	r3, [r7, #30]
 8009828:	461a      	mov	r2, r3
 800982a:	69b9      	ldr	r1, [r7, #24]
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f001 fa72 	bl	800ad16 <USBD_CtlSendData>
      break;
 8009832:	e030      	b.n	8009896 <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800983a:	b2db      	uxtb	r3, r3
 800983c:	2b03      	cmp	r3, #3
 800983e:	d107      	bne.n	8009850 <USBD_CUSTOM_HID_Setup+0x1b0>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	3348      	adds	r3, #72	@ 0x48
 8009844:	2201      	movs	r2, #1
 8009846:	4619      	mov	r1, r3
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f001 fa64 	bl	800ad16 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800984e:	e022      	b.n	8009896 <USBD_CUSTOM_HID_Setup+0x1f6>
        USBD_CtlError(pdev, req);
 8009850:	6839      	ldr	r1, [r7, #0]
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f001 f9ee 	bl	800ac34 <USBD_CtlError>
        ret = USBD_FAIL;
 8009858:	2303      	movs	r3, #3
 800985a:	75fb      	strb	r3, [r7, #23]
      break;
 800985c:	e01b      	b.n	8009896 <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009864:	b2db      	uxtb	r3, r3
 8009866:	2b03      	cmp	r3, #3
 8009868:	d106      	bne.n	8009878 <USBD_CUSTOM_HID_Setup+0x1d8>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	885b      	ldrh	r3, [r3, #2]
 800986e:	b2db      	uxtb	r3, r3
 8009870:	461a      	mov	r2, r3
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	649a      	str	r2, [r3, #72]	@ 0x48
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8009876:	e00e      	b.n	8009896 <USBD_CUSTOM_HID_Setup+0x1f6>
        USBD_CtlError(pdev, req);
 8009878:	6839      	ldr	r1, [r7, #0]
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f001 f9da 	bl	800ac34 <USBD_CtlError>
        ret = USBD_FAIL;
 8009880:	2303      	movs	r3, #3
 8009882:	75fb      	strb	r3, [r7, #23]
      break;
 8009884:	e007      	b.n	8009896 <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8009886:	6839      	ldr	r1, [r7, #0]
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f001 f9d3 	bl	800ac34 <USBD_CtlError>
      ret = USBD_FAIL;
 800988e:	2303      	movs	r3, #3
 8009890:	75fb      	strb	r3, [r7, #23]
      break;
 8009892:	e000      	b.n	8009896 <USBD_CUSTOM_HID_Setup+0x1f6>
      break;
 8009894:	bf00      	nop
    }
    break;
 8009896:	e006      	b.n	80098a6 <USBD_CUSTOM_HID_Setup+0x206>

  default:
    USBD_CtlError(pdev, req);
 8009898:	6839      	ldr	r1, [r7, #0]
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f001 f9ca 	bl	800ac34 <USBD_CtlError>
    ret = USBD_FAIL;
 80098a0:	2303      	movs	r3, #3
 80098a2:	75fb      	strb	r3, [r7, #23]
    break;
 80098a4:	bf00      	nop
  }
  return (uint8_t)ret;
 80098a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	3720      	adds	r7, #32
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}
 80098b0:	20000310 	.word	0x20000310

080098b4 <USBD_CUSTOM_HID_SendReport>:
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b086      	sub	sp, #24
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	60f8      	str	r0, [r7, #12]
 80098bc:	60b9      	str	r1, [r7, #8]
 80098be:	4613      	mov	r3, r2
 80098c0:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData_HID_Custom == NULL)
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d101      	bne.n	80098d0 <USBD_CUSTOM_HID_SendReport+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80098cc:	2303      	movs	r3, #3
 80098ce:	e01d      	b.n	800990c <USBD_CUSTOM_HID_SendReport+0x58>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80098d6:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098de:	b2db      	uxtb	r3, r3
 80098e0:	2b03      	cmp	r3, #3
 80098e2:	d112      	bne.n	800990a <USBD_CUSTOM_HID_SendReport+0x56>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d10b      	bne.n	8009906 <USBD_CUSTOM_HID_SendReport+0x52>
    {
      hhid->state = CUSTOM_HID_BUSY;
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	2201      	movs	r2, #1
 80098f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      (void)USBD_LL_Transmit(pdev, CUSTOM_HID_IN_EP, report, len);
 80098f6:	4b07      	ldr	r3, [pc, #28]	@ (8009914 <USBD_CUSTOM_HID_SendReport+0x60>)
 80098f8:	7819      	ldrb	r1, [r3, #0]
 80098fa:	88fb      	ldrh	r3, [r7, #6]
 80098fc:	68ba      	ldr	r2, [r7, #8]
 80098fe:	68f8      	ldr	r0, [r7, #12]
 8009900:	f001 fce9 	bl	800b2d6 <USBD_LL_Transmit>
 8009904:	e001      	b.n	800990a <USBD_CUSTOM_HID_SendReport+0x56>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8009906:	2301      	movs	r3, #1
 8009908:	e000      	b.n	800990c <USBD_CUSTOM_HID_SendReport+0x58>
    }
  }
  return (uint8_t)USBD_OK;
 800990a:	2300      	movs	r3, #0
}
 800990c:	4618      	mov	r0, r3
 800990e:	3718      	adds	r7, #24
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}
 8009914:	2000024e 	.word	0x2000024e

08009918 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8009918:	b480      	push	{r7}
 800991a:	b083      	sub	sp, #12
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2229      	movs	r2, #41	@ 0x29
 8009924:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgFSDesc;
 8009926:	4b03      	ldr	r3, [pc, #12]	@ (8009934 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8009928:	4618      	mov	r0, r3
 800992a:	370c      	adds	r7, #12
 800992c:	46bd      	mov	sp, r7
 800992e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009932:	4770      	bx	lr
 8009934:	2000028c 	.word	0x2000028c

08009938 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8009938:	b480      	push	{r7}
 800993a:	b083      	sub	sp, #12
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2229      	movs	r2, #41	@ 0x29
 8009944:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgHSDesc;
 8009946:	4b03      	ldr	r3, [pc, #12]	@ (8009954 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8009948:	4618      	mov	r0, r3
 800994a:	370c      	adds	r7, #12
 800994c:	46bd      	mov	sp, r7
 800994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009952:	4770      	bx	lr
 8009954:	200002b8 	.word	0x200002b8

08009958 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009958:	b480      	push	{r7}
 800995a:	b083      	sub	sp, #12
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2229      	movs	r2, #41	@ 0x29
 8009964:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 8009966:	4b03      	ldr	r3, [pc, #12]	@ (8009974 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8009968:	4618      	mov	r0, r3
 800996a:	370c      	adds	r7, #12
 800996c:	46bd      	mov	sp, r7
 800996e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009972:	4770      	bx	lr
 8009974:	200002e4 	.word	0x200002e4

08009978 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */

static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b082      	sub	sp, #8
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	460b      	mov	r3, r1
 8009982:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom)->state = CUSTOM_HID_IDLE;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800998a:	2200      	movs	r2, #0
 800998c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6); // hoặc nháy LED nếu có
 8009990:	2140      	movs	r1, #64	@ 0x40
 8009992:	4804      	ldr	r0, [pc, #16]	@ (80099a4 <USBD_CUSTOM_HID_DataIn+0x2c>)
 8009994:	f7f8 ffaf 	bl	80028f6 <HAL_GPIO_TogglePin>
  return (uint8_t)USBD_OK;
 8009998:	2300      	movs	r3, #0
}
 800999a:	4618      	mov	r0, r3
 800999c:	3708      	adds	r7, #8
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}
 80099a2:	bf00      	nop
 80099a4:	40020000 	.word	0x40020000

080099a8 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b084      	sub	sp, #16
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
 80099b0:	460b      	mov	r3, r1
 80099b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData_HID_Custom == NULL)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d101      	bne.n	80099c2 <USBD_CUSTOM_HID_DataOut+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80099be:	2303      	movs	r3, #3
 80099c0:	e017      	b.n	80099f2 <USBD_CUSTOM_HID_DataOut+0x4a>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80099c8:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->OutEvent(hhid->Report_buf, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 80099d0:	68db      	ldr	r3, [r3, #12]
 80099d2:	68fa      	ldr	r2, [r7, #12]
 80099d4:	2140      	movs	r1, #64	@ 0x40
 80099d6:	4610      	mov	r0, r2
 80099d8:	4798      	blx	r3
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 80099da:	2180      	movs	r1, #128	@ 0x80
 80099dc:	4807      	ldr	r0, [pc, #28]	@ (80099fc <USBD_CUSTOM_HID_DataOut+0x54>)
 80099de:	f7f8 ff8a 	bl	80028f6 <HAL_GPIO_TogglePin>
  USBD_LL_PrepareReceive(pdev,CUSTOM_HID_OUT_EP,hhid->Report_buf,
 80099e2:	4b07      	ldr	r3, [pc, #28]	@ (8009a00 <USBD_CUSTOM_HID_DataOut+0x58>)
 80099e4:	7819      	ldrb	r1, [r3, #0]
 80099e6:	68fa      	ldr	r2, [r7, #12]
 80099e8:	2340      	movs	r3, #64	@ 0x40
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f001 fc94 	bl	800b318 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  return (uint8_t)USBD_OK;
 80099f0:	2300      	movs	r3, #0
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3710      	adds	r7, #16
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}
 80099fa:	bf00      	nop
 80099fc:	40020000 	.word	0x40020000
 8009a00:	2000024f 	.word	0x2000024f

08009a04 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b084      	sub	sp, #16
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009a12:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d101      	bne.n	8009a1e <USBD_CUSTOM_HID_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8009a1a:	2303      	movs	r3, #3
 8009a1c:	e00f      	b.n	8009a3e <USBD_CUSTOM_HID_EP0_RxReady+0x3a>
  }

  if (hhid->IsReportAvailable == 1U)
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a22:	2b01      	cmp	r3, #1
 8009a24:	d10a      	bne.n	8009a3c <USBD_CUSTOM_HID_EP0_RxReady+0x38>
  {
    //((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->OutEvent(hhid->Report_buf[0], hhid->Report_buf[1]);
	  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->OutEvent(hhid->Report_buf, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 8009a2c:	68db      	ldr	r3, [r3, #12]
 8009a2e:	68fa      	ldr	r2, [r7, #12]
 8009a30:	2140      	movs	r1, #64	@ 0x40
 8009a32:	4610      	mov	r0, r2
 8009a34:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return (uint8_t)USBD_OK;
 8009a3c:	2300      	movs	r3, #0
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3710      	adds	r7, #16
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
	...

08009a48 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b083      	sub	sp, #12
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	220a      	movs	r2, #10
 8009a54:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8009a56:	4b03      	ldr	r3, [pc, #12]	@ (8009a64 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	370c      	adds	r7, #12
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a62:	4770      	bx	lr
 8009a64:	2000031c 	.word	0x2000031c

08009a68 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b083      	sub	sp, #12
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d101      	bne.n	8009a7c <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009a78:	2303      	movs	r3, #3
 8009a7a:	e004      	b.n	8009a86 <USBD_CUSTOM_HID_RegisterInterface+0x1e>
  }

  pdev->pUserData_HID_Custom = fops;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	683a      	ldr	r2, [r7, #0]
 8009a80:	f8c3 22dc 	str.w	r2, [r3, #732]	@ 0x2dc

  return (uint8_t)USBD_OK;
 8009a84:	2300      	movs	r3, #0
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	370c      	adds	r7, #12
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a90:	4770      	bx	lr
	...

08009a94 <USBD_Update_HID_Custom_DESC>:

void USBD_Update_HID_Custom_DESC(uint8_t *desc, uint8_t itf_no, uint8_t in_ep, uint8_t out_ep, uint8_t str_idx)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b083      	sub	sp, #12
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
 8009a9c:	4608      	mov	r0, r1
 8009a9e:	4611      	mov	r1, r2
 8009aa0:	461a      	mov	r2, r3
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	70fb      	strb	r3, [r7, #3]
 8009aa6:	460b      	mov	r3, r1
 8009aa8:	70bb      	strb	r3, [r7, #2]
 8009aaa:	4613      	mov	r3, r2
 8009aac:	707b      	strb	r3, [r7, #1]
  desc[11] = itf_no;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	330b      	adds	r3, #11
 8009ab2:	78fa      	ldrb	r2, [r7, #3]
 8009ab4:	701a      	strb	r2, [r3, #0]
  desc[17] = str_idx;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	3311      	adds	r3, #17
 8009aba:	7c3a      	ldrb	r2, [r7, #16]
 8009abc:	701a      	strb	r2, [r3, #0]
  desc[29] = in_ep;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	331d      	adds	r3, #29
 8009ac2:	78ba      	ldrb	r2, [r7, #2]
 8009ac4:	701a      	strb	r2, [r3, #0]
  desc[36] = out_ep;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	3324      	adds	r3, #36	@ 0x24
 8009aca:	787a      	ldrb	r2, [r7, #1]
 8009acc:	701a      	strb	r2, [r3, #0]

  CUSTOM_HID_IN_EP = in_ep;
 8009ace:	4a09      	ldr	r2, [pc, #36]	@ (8009af4 <USBD_Update_HID_Custom_DESC+0x60>)
 8009ad0:	78bb      	ldrb	r3, [r7, #2]
 8009ad2:	7013      	strb	r3, [r2, #0]
  CUSTOM_HID_OUT_EP = out_ep;
 8009ad4:	4a08      	ldr	r2, [pc, #32]	@ (8009af8 <USBD_Update_HID_Custom_DESC+0x64>)
 8009ad6:	787b      	ldrb	r3, [r7, #1]
 8009ad8:	7013      	strb	r3, [r2, #0]
  CUSTOM_HID_ITF_NBR = itf_no;
 8009ada:	4a08      	ldr	r2, [pc, #32]	@ (8009afc <USBD_Update_HID_Custom_DESC+0x68>)
 8009adc:	78fb      	ldrb	r3, [r7, #3]
 8009ade:	7013      	strb	r3, [r2, #0]
  CUSTOM_HID_STR_DESC_IDX = str_idx;
 8009ae0:	4a07      	ldr	r2, [pc, #28]	@ (8009b00 <USBD_Update_HID_Custom_DESC+0x6c>)
 8009ae2:	7c3b      	ldrb	r3, [r7, #16]
 8009ae4:	7013      	strb	r3, [r2, #0]
}
 8009ae6:	bf00      	nop
 8009ae8:	370c      	adds	r7, #12
 8009aea:	46bd      	mov	sp, r7
 8009aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af0:	4770      	bx	lr
 8009af2:	bf00      	nop
 8009af4:	2000024e 	.word	0x2000024e
 8009af8:	2000024f 	.word	0x2000024f
 8009afc:	2000259c 	.word	0x2000259c
 8009b00:	2000259d 	.word	0x2000259d

08009b04 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b086      	sub	sp, #24
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	60f8      	str	r0, [r7, #12]
 8009b0c:	60b9      	str	r1, [r7, #8]
 8009b0e:	4613      	mov	r3, r2
 8009b10:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d101      	bne.n	8009b1c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009b18:	2303      	movs	r3, #3
 8009b1a:	e01b      	b.n	8009b54 <USBD_Init+0x50>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pConfDesc = NULL;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	2200      	movs	r2, #0
 8009b28:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d003      	beq.n	8009b3a <USBD_Init+0x36>
  {
    pdev->pDesc = pdesc;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	68ba      	ldr	r2, [r7, #8]
 8009b36:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	2201      	movs	r2, #1
 8009b3e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	79fa      	ldrb	r2, [r7, #7]
 8009b46:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009b48:	68f8      	ldr	r0, [r7, #12]
 8009b4a:	f001 fa7d 	bl	800b048 <USBD_LL_Init>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009b52:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3718      	adds	r7, #24
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}

08009b5c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b084      	sub	sp, #16
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009b66:	2300      	movs	r3, #0
 8009b68:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d101      	bne.n	8009b74 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8009b70:	2303      	movs	r3, #3
 8009b72:	e02d      	b.n	8009bd0 <USBD_RegisterClass+0x74>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	683a      	ldr	r2, [r7, #0]
 8009b78:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  /* Get Device Configuration Descriptor */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	7c1b      	ldrb	r3, [r3, #16]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d112      	bne.n	8009baa <USBD_RegisterClass+0x4e>
  {
	  if (pdev->pClass->GetHSConfigDescriptor != NULL)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d01e      	beq.n	8009bce <USBD_RegisterClass+0x72>
	  {
		  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b98:	f107 020e 	add.w	r2, r7, #14
 8009b9c:	4610      	mov	r0, r2
 8009b9e:	4798      	blx	r3
 8009ba0:	4602      	mov	r2, r0
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318
 8009ba8:	e011      	b.n	8009bce <USBD_RegisterClass+0x72>
	  }
  }
  else if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d00b      	beq.n	8009bce <USBD_RegisterClass+0x72>
  {
	  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bbe:	f107 020e 	add.w	r2, r7, #14
 8009bc2:	4610      	mov	r0, r2
 8009bc4:	4798      	blx	r3
 8009bc6:	4602      	mov	r2, r0
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318
  }

  return USBD_OK;
 8009bce:	2300      	movs	r3, #0
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	3710      	adds	r7, #16
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}

08009bd8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b082      	sub	sp, #8
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f001 fa8f 	bl	800b104 <USBD_LL_Start>
 8009be6:	4603      	mov	r3, r0
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3708      	adds	r7, #8
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b083      	sub	sp, #12
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009bf8:	2300      	movs	r3, #0
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	370c      	adds	r7, #12
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c04:	4770      	bx	lr

08009c06 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009c06:	b580      	push	{r7, lr}
 8009c08:	b084      	sub	sp, #16
 8009c0a:	af00      	add	r7, sp, #0
 8009c0c:	6078      	str	r0, [r7, #4]
 8009c0e:	460b      	mov	r3, r1
 8009c10:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009c12:	2303      	movs	r3, #3
 8009c14:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d009      	beq.n	8009c34 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	78fa      	ldrb	r2, [r7, #3]
 8009c2a:	4611      	mov	r1, r2
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	4798      	blx	r3
 8009c30:	4603      	mov	r3, r0
 8009c32:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	3710      	adds	r7, #16
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}

08009c3e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009c3e:	b580      	push	{r7, lr}
 8009c40:	b082      	sub	sp, #8
 8009c42:	af00      	add	r7, sp, #0
 8009c44:	6078      	str	r0, [r7, #4]
 8009c46:	460b      	mov	r3, r1
 8009c48:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d007      	beq.n	8009c64 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c5a:	685b      	ldr	r3, [r3, #4]
 8009c5c:	78fa      	ldrb	r2, [r7, #3]
 8009c5e:	4611      	mov	r1, r2
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	4798      	blx	r3
  }

  return USBD_OK;
 8009c64:	2300      	movs	r3, #0
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3708      	adds	r7, #8
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}

08009c6e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009c6e:	b580      	push	{r7, lr}
 8009c70:	b084      	sub	sp, #16
 8009c72:	af00      	add	r7, sp, #0
 8009c74:	6078      	str	r0, [r7, #4]
 8009c76:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009c7e:	6839      	ldr	r1, [r7, #0]
 8009c80:	4618      	mov	r0, r3
 8009c82:	f000 ff9d 	bl	800abc0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2201      	movs	r2, #1
 8009c8a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009c94:	461a      	mov	r2, r3
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009ca2:	f003 031f 	and.w	r3, r3, #31
 8009ca6:	2b02      	cmp	r3, #2
 8009ca8:	d01a      	beq.n	8009ce0 <USBD_LL_SetupStage+0x72>
 8009caa:	2b02      	cmp	r3, #2
 8009cac:	d822      	bhi.n	8009cf4 <USBD_LL_SetupStage+0x86>
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d002      	beq.n	8009cb8 <USBD_LL_SetupStage+0x4a>
 8009cb2:	2b01      	cmp	r3, #1
 8009cb4:	d00a      	beq.n	8009ccc <USBD_LL_SetupStage+0x5e>
 8009cb6:	e01d      	b.n	8009cf4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009cbe:	4619      	mov	r1, r3
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f000 fa5d 	bl	800a180 <USBD_StdDevReq>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	73fb      	strb	r3, [r7, #15]
      break;
 8009cca:	e020      	b.n	8009d0e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009cd2:	4619      	mov	r1, r3
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f000 fac1 	bl	800a25c <USBD_StdItfReq>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	73fb      	strb	r3, [r7, #15]
      break;
 8009cde:	e016      	b.n	8009d0e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009ce6:	4619      	mov	r1, r3
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f000 fb00 	bl	800a2ee <USBD_StdEPReq>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	73fb      	strb	r3, [r7, #15]
      break;
 8009cf2:	e00c      	b.n	8009d0e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009cfa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009cfe:	b2db      	uxtb	r3, r3
 8009d00:	4619      	mov	r1, r3
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f001 fa5e 	bl	800b1c4 <USBD_LL_StallEP>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	73fb      	strb	r3, [r7, #15]
      break;
 8009d0c:	bf00      	nop
  }

  return ret;
 8009d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3710      	adds	r7, #16
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}

08009d18 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b086      	sub	sp, #24
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	60f8      	str	r0, [r7, #12]
 8009d20:	460b      	mov	r3, r1
 8009d22:	607a      	str	r2, [r7, #4]
 8009d24:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009d26:	7afb      	ldrb	r3, [r7, #11]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d138      	bne.n	8009d9e <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009d32:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009d3a:	2b03      	cmp	r3, #3
 8009d3c:	d14a      	bne.n	8009dd4 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009d3e:	693b      	ldr	r3, [r7, #16]
 8009d40:	689a      	ldr	r2, [r3, #8]
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	68db      	ldr	r3, [r3, #12]
 8009d46:	429a      	cmp	r2, r3
 8009d48:	d913      	bls.n	8009d72 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	689a      	ldr	r2, [r3, #8]
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	68db      	ldr	r3, [r3, #12]
 8009d52:	1ad2      	subs	r2, r2, r3
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009d58:	693b      	ldr	r3, [r7, #16]
 8009d5a:	68da      	ldr	r2, [r3, #12]
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	689b      	ldr	r3, [r3, #8]
 8009d60:	4293      	cmp	r3, r2
 8009d62:	bf28      	it	cs
 8009d64:	4613      	movcs	r3, r2
 8009d66:	461a      	mov	r2, r3
 8009d68:	6879      	ldr	r1, [r7, #4]
 8009d6a:	68f8      	ldr	r0, [r7, #12]
 8009d6c:	f001 f81c 	bl	800ada8 <USBD_CtlContinueRx>
 8009d70:	e030      	b.n	8009dd4 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d78:	b2db      	uxtb	r3, r3
 8009d7a:	2b03      	cmp	r3, #3
 8009d7c:	d10b      	bne.n	8009d96 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d84:	691b      	ldr	r3, [r3, #16]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d005      	beq.n	8009d96 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d90:	691b      	ldr	r3, [r3, #16]
 8009d92:	68f8      	ldr	r0, [r7, #12]
 8009d94:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009d96:	68f8      	ldr	r0, [r7, #12]
 8009d98:	f001 f817 	bl	800adca <USBD_CtlSendStatus>
 8009d9c:	e01a      	b.n	8009dd4 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009da4:	b2db      	uxtb	r3, r3
 8009da6:	2b03      	cmp	r3, #3
 8009da8:	d114      	bne.n	8009dd4 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009db0:	699b      	ldr	r3, [r3, #24]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d00e      	beq.n	8009dd4 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009dbc:	699b      	ldr	r3, [r3, #24]
 8009dbe:	7afa      	ldrb	r2, [r7, #11]
 8009dc0:	4611      	mov	r1, r2
 8009dc2:	68f8      	ldr	r0, [r7, #12]
 8009dc4:	4798      	blx	r3
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009dca:	7dfb      	ldrb	r3, [r7, #23]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d001      	beq.n	8009dd4 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8009dd0:	7dfb      	ldrb	r3, [r7, #23]
 8009dd2:	e000      	b.n	8009dd6 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8009dd4:	2300      	movs	r3, #0
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3718      	adds	r7, #24
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}

08009dde <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009dde:	b580      	push	{r7, lr}
 8009de0:	b086      	sub	sp, #24
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	60f8      	str	r0, [r7, #12]
 8009de6:	460b      	mov	r3, r1
 8009de8:	607a      	str	r2, [r7, #4]
 8009dea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009dec:	7afb      	ldrb	r3, [r7, #11]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d16b      	bne.n	8009eca <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	3314      	adds	r3, #20
 8009df6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009dfe:	2b02      	cmp	r3, #2
 8009e00:	d156      	bne.n	8009eb0 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	689a      	ldr	r2, [r3, #8]
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	68db      	ldr	r3, [r3, #12]
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	d914      	bls.n	8009e38 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009e0e:	693b      	ldr	r3, [r7, #16]
 8009e10:	689a      	ldr	r2, [r3, #8]
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	68db      	ldr	r3, [r3, #12]
 8009e16:	1ad2      	subs	r2, r2, r3
 8009e18:	693b      	ldr	r3, [r7, #16]
 8009e1a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009e1c:	693b      	ldr	r3, [r7, #16]
 8009e1e:	689b      	ldr	r3, [r3, #8]
 8009e20:	461a      	mov	r2, r3
 8009e22:	6879      	ldr	r1, [r7, #4]
 8009e24:	68f8      	ldr	r0, [r7, #12]
 8009e26:	f000 ff91 	bl	800ad4c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	2100      	movs	r1, #0
 8009e30:	68f8      	ldr	r0, [r7, #12]
 8009e32:	f001 fa71 	bl	800b318 <USBD_LL_PrepareReceive>
 8009e36:	e03b      	b.n	8009eb0 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009e38:	693b      	ldr	r3, [r7, #16]
 8009e3a:	68da      	ldr	r2, [r3, #12]
 8009e3c:	693b      	ldr	r3, [r7, #16]
 8009e3e:	689b      	ldr	r3, [r3, #8]
 8009e40:	429a      	cmp	r2, r3
 8009e42:	d11c      	bne.n	8009e7e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	685a      	ldr	r2, [r3, #4]
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009e4c:	429a      	cmp	r2, r3
 8009e4e:	d316      	bcc.n	8009e7e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	685a      	ldr	r2, [r3, #4]
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009e5a:	429a      	cmp	r2, r3
 8009e5c:	d20f      	bcs.n	8009e7e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009e5e:	2200      	movs	r2, #0
 8009e60:	2100      	movs	r1, #0
 8009e62:	68f8      	ldr	r0, [r7, #12]
 8009e64:	f000 ff72 	bl	800ad4c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009e70:	2300      	movs	r3, #0
 8009e72:	2200      	movs	r2, #0
 8009e74:	2100      	movs	r1, #0
 8009e76:	68f8      	ldr	r0, [r7, #12]
 8009e78:	f001 fa4e 	bl	800b318 <USBD_LL_PrepareReceive>
 8009e7c:	e018      	b.n	8009eb0 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e84:	b2db      	uxtb	r3, r3
 8009e86:	2b03      	cmp	r3, #3
 8009e88:	d10b      	bne.n	8009ea2 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e90:	68db      	ldr	r3, [r3, #12]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d005      	beq.n	8009ea2 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e9c:	68db      	ldr	r3, [r3, #12]
 8009e9e:	68f8      	ldr	r0, [r7, #12]
 8009ea0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ea2:	2180      	movs	r1, #128	@ 0x80
 8009ea4:	68f8      	ldr	r0, [r7, #12]
 8009ea6:	f001 f98d 	bl	800b1c4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009eaa:	68f8      	ldr	r0, [r7, #12]
 8009eac:	f000 ffa0 	bl	800adf0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009eb6:	2b01      	cmp	r3, #1
 8009eb8:	d122      	bne.n	8009f00 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009eba:	68f8      	ldr	r0, [r7, #12]
 8009ebc:	f7ff fe98 	bl	8009bf0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009ec8:	e01a      	b.n	8009f00 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ed0:	b2db      	uxtb	r3, r3
 8009ed2:	2b03      	cmp	r3, #3
 8009ed4:	d114      	bne.n	8009f00 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009edc:	695b      	ldr	r3, [r3, #20]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d00e      	beq.n	8009f00 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ee8:	695b      	ldr	r3, [r3, #20]
 8009eea:	7afa      	ldrb	r2, [r7, #11]
 8009eec:	4611      	mov	r1, r2
 8009eee:	68f8      	ldr	r0, [r7, #12]
 8009ef0:	4798      	blx	r3
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009ef6:	7dfb      	ldrb	r3, [r7, #23]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d001      	beq.n	8009f00 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8009efc:	7dfb      	ldrb	r3, [r7, #23]
 8009efe:	e000      	b.n	8009f02 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8009f00:	2300      	movs	r3, #0
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3718      	adds	r7, #24
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}

08009f0a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009f0a:	b580      	push	{r7, lr}
 8009f0c:	b082      	sub	sp, #8
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2201      	movs	r2, #1
 8009f16:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2200      	movs	r2, #0
 8009f26:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d101      	bne.n	8009f3e <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009f3a:	2303      	movs	r3, #3
 8009f3c:	e02a      	b.n	8009f94 <USBD_LL_Reset+0x8a>
  }

	if (pdev->pClass->DeInit != NULL)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f44:	685b      	ldr	r3, [r3, #4]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d009      	beq.n	8009f5e <USBD_LL_Reset+0x54>
	{
	  (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f50:	685b      	ldr	r3, [r3, #4]
 8009f52:	687a      	ldr	r2, [r7, #4]
 8009f54:	6852      	ldr	r2, [r2, #4]
 8009f56:	b2d2      	uxtb	r2, r2
 8009f58:	4611      	mov	r1, r2
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	4798      	blx	r3
	}

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009f5e:	2340      	movs	r3, #64	@ 0x40
 8009f60:	2200      	movs	r2, #0
 8009f62:	2100      	movs	r1, #0
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f001 f8e8 	bl	800b13a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2201      	movs	r2, #1
 8009f6e:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2240      	movs	r2, #64	@ 0x40
 8009f76:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009f7a:	2340      	movs	r3, #64	@ 0x40
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	2180      	movs	r1, #128	@ 0x80
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f001 f8da 	bl	800b13a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2201      	movs	r2, #1
 8009f8a:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2240      	movs	r2, #64	@ 0x40
 8009f90:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009f92:	2300      	movs	r3, #0
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3708      	adds	r7, #8
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b083      	sub	sp, #12
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
 8009fa4:	460b      	mov	r3, r1
 8009fa6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	78fa      	ldrb	r2, [r7, #3]
 8009fac:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009fae:	2300      	movs	r3, #0
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	370c      	adds	r7, #12
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fba:	4770      	bx	lr

08009fbc <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b083      	sub	sp, #12
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fca:	b2da      	uxtb	r2, r3
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2204      	movs	r2, #4
 8009fd6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009fda:	2300      	movs	r3, #0
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	370c      	adds	r7, #12
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe6:	4770      	bx	lr

08009fe8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b083      	sub	sp, #12
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ff6:	b2db      	uxtb	r3, r3
 8009ff8:	2b04      	cmp	r3, #4
 8009ffa:	d106      	bne.n	800a00a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a002:	b2da      	uxtb	r2, r3
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a00a:	2300      	movs	r3, #0
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	370c      	adds	r7, #12
 800a010:	46bd      	mov	sp, r7
 800a012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a016:	4770      	bx	lr

0800a018 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b082      	sub	sp, #8
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a026:	2b00      	cmp	r3, #0
 800a028:	d101      	bne.n	800a02e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800a02a:	2303      	movs	r3, #3
 800a02c:	e012      	b.n	800a054 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a034:	b2db      	uxtb	r3, r3
 800a036:	2b03      	cmp	r3, #3
 800a038:	d10b      	bne.n	800a052 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a040:	69db      	ldr	r3, [r3, #28]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d005      	beq.n	800a052 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a04c:	69db      	ldr	r3, [r3, #28]
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a052:	2300      	movs	r3, #0
}
 800a054:	4618      	mov	r0, r3
 800a056:	3708      	adds	r7, #8
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}

0800a05c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b082      	sub	sp, #8
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
 800a064:	460b      	mov	r3, r1
 800a066:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d101      	bne.n	800a076 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800a072:	2303      	movs	r3, #3
 800a074:	e014      	b.n	800a0a0 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a07c:	b2db      	uxtb	r3, r3
 800a07e:	2b03      	cmp	r3, #3
 800a080:	d10d      	bne.n	800a09e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a088:	6a1b      	ldr	r3, [r3, #32]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d007      	beq.n	800a09e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a094:	6a1b      	ldr	r3, [r3, #32]
 800a096:	78fa      	ldrb	r2, [r7, #3]
 800a098:	4611      	mov	r1, r2
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a09e:	2300      	movs	r3, #0
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3708      	adds	r7, #8
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}

0800a0a8 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b082      	sub	sp, #8
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
 800a0b0:	460b      	mov	r3, r1
 800a0b2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d101      	bne.n	800a0c2 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800a0be:	2303      	movs	r3, #3
 800a0c0:	e014      	b.n	800a0ec <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a0c8:	b2db      	uxtb	r3, r3
 800a0ca:	2b03      	cmp	r3, #3
 800a0cc:	d10d      	bne.n	800a0ea <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a0d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d007      	beq.n	800a0ea <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a0e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0e2:	78fa      	ldrb	r2, [r7, #3]
 800a0e4:	4611      	mov	r1, r2
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a0ea:	2300      	movs	r3, #0
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	3708      	adds	r7, #8
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}

0800a0f4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b083      	sub	sp, #12
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a0fc:	2300      	movs	r3, #0
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	370c      	adds	r7, #12
 800a102:	46bd      	mov	sp, r7
 800a104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a108:	4770      	bx	lr

0800a10a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a10a:	b580      	push	{r7, lr}
 800a10c:	b082      	sub	sp, #8
 800a10e:	af00      	add	r7, sp, #0
 800a110:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2201      	movs	r2, #1
 800a116:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  if (pdev->pClass != NULL)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a120:	2b00      	cmp	r3, #0
 800a122:	d009      	beq.n	800a138 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a12a:	685b      	ldr	r3, [r3, #4]
 800a12c:	687a      	ldr	r2, [r7, #4]
 800a12e:	6852      	ldr	r2, [r2, #4]
 800a130:	b2d2      	uxtb	r2, r2
 800a132:	4611      	mov	r1, r2
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	4798      	blx	r3
  }

  return USBD_OK;
 800a138:	2300      	movs	r3, #0
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3708      	adds	r7, #8
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}

0800a142 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a142:	b480      	push	{r7}
 800a144:	b087      	sub	sp, #28
 800a146:	af00      	add	r7, sp, #0
 800a148:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	781b      	ldrb	r3, [r3, #0]
 800a152:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a154:	697b      	ldr	r3, [r7, #20]
 800a156:	3301      	adds	r3, #1
 800a158:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	781b      	ldrb	r3, [r3, #0]
 800a15e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a160:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a164:	021b      	lsls	r3, r3, #8
 800a166:	b21a      	sxth	r2, r3
 800a168:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a16c:	4313      	orrs	r3, r2
 800a16e:	b21b      	sxth	r3, r3
 800a170:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a172:	89fb      	ldrh	r3, [r7, #14]
}
 800a174:	4618      	mov	r0, r3
 800a176:	371c      	adds	r7, #28
 800a178:	46bd      	mov	sp, r7
 800a17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17e:	4770      	bx	lr

0800a180 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b084      	sub	sp, #16
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
 800a188:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a18a:	2300      	movs	r3, #0
 800a18c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	781b      	ldrb	r3, [r3, #0]
 800a192:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a196:	2b40      	cmp	r3, #64	@ 0x40
 800a198:	d005      	beq.n	800a1a6 <USBD_StdDevReq+0x26>
 800a19a:	2b40      	cmp	r3, #64	@ 0x40
 800a19c:	d853      	bhi.n	800a246 <USBD_StdDevReq+0xc6>
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d00b      	beq.n	800a1ba <USBD_StdDevReq+0x3a>
 800a1a2:	2b20      	cmp	r3, #32
 800a1a4:	d14f      	bne.n	800a246 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1ac:	689b      	ldr	r3, [r3, #8]
 800a1ae:	6839      	ldr	r1, [r7, #0]
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	4798      	blx	r3
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	73fb      	strb	r3, [r7, #15]
      break;
 800a1b8:	e04a      	b.n	800a250 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	785b      	ldrb	r3, [r3, #1]
 800a1be:	2b09      	cmp	r3, #9
 800a1c0:	d83b      	bhi.n	800a23a <USBD_StdDevReq+0xba>
 800a1c2:	a201      	add	r2, pc, #4	@ (adr r2, 800a1c8 <USBD_StdDevReq+0x48>)
 800a1c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1c8:	0800a21d 	.word	0x0800a21d
 800a1cc:	0800a231 	.word	0x0800a231
 800a1d0:	0800a23b 	.word	0x0800a23b
 800a1d4:	0800a227 	.word	0x0800a227
 800a1d8:	0800a23b 	.word	0x0800a23b
 800a1dc:	0800a1fb 	.word	0x0800a1fb
 800a1e0:	0800a1f1 	.word	0x0800a1f1
 800a1e4:	0800a23b 	.word	0x0800a23b
 800a1e8:	0800a213 	.word	0x0800a213
 800a1ec:	0800a205 	.word	0x0800a205
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a1f0:	6839      	ldr	r1, [r7, #0]
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f000 f9de 	bl	800a5b4 <USBD_GetDescriptor>
          break;
 800a1f8:	e024      	b.n	800a244 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a1fa:	6839      	ldr	r1, [r7, #0]
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f000 fb55 	bl	800a8ac <USBD_SetAddress>
          break;
 800a202:	e01f      	b.n	800a244 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a204:	6839      	ldr	r1, [r7, #0]
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f000 fb94 	bl	800a934 <USBD_SetConfig>
 800a20c:	4603      	mov	r3, r0
 800a20e:	73fb      	strb	r3, [r7, #15]
          break;
 800a210:	e018      	b.n	800a244 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a212:	6839      	ldr	r1, [r7, #0]
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f000 fc33 	bl	800aa80 <USBD_GetConfig>
          break;
 800a21a:	e013      	b.n	800a244 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a21c:	6839      	ldr	r1, [r7, #0]
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f000 fc64 	bl	800aaec <USBD_GetStatus>
          break;
 800a224:	e00e      	b.n	800a244 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a226:	6839      	ldr	r1, [r7, #0]
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f000 fc93 	bl	800ab54 <USBD_SetFeature>
          break;
 800a22e:	e009      	b.n	800a244 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a230:	6839      	ldr	r1, [r7, #0]
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f000 fca2 	bl	800ab7c <USBD_ClrFeature>
          break;
 800a238:	e004      	b.n	800a244 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800a23a:	6839      	ldr	r1, [r7, #0]
 800a23c:	6878      	ldr	r0, [r7, #4]
 800a23e:	f000 fcf9 	bl	800ac34 <USBD_CtlError>
          break;
 800a242:	bf00      	nop
      }
      break;
 800a244:	e004      	b.n	800a250 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800a246:	6839      	ldr	r1, [r7, #0]
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	f000 fcf3 	bl	800ac34 <USBD_CtlError>
      break;
 800a24e:	bf00      	nop
  }

  return ret;
 800a250:	7bfb      	ldrb	r3, [r7, #15]
}
 800a252:	4618      	mov	r0, r3
 800a254:	3710      	adds	r7, #16
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}
 800a25a:	bf00      	nop

0800a25c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b084      	sub	sp, #16
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
 800a264:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a266:	2300      	movs	r3, #0
 800a268:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	781b      	ldrb	r3, [r3, #0]
 800a26e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a272:	2b40      	cmp	r3, #64	@ 0x40
 800a274:	d005      	beq.n	800a282 <USBD_StdItfReq+0x26>
 800a276:	2b40      	cmp	r3, #64	@ 0x40
 800a278:	d82f      	bhi.n	800a2da <USBD_StdItfReq+0x7e>
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d001      	beq.n	800a282 <USBD_StdItfReq+0x26>
 800a27e:	2b20      	cmp	r3, #32
 800a280:	d12b      	bne.n	800a2da <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a288:	b2db      	uxtb	r3, r3
 800a28a:	3b01      	subs	r3, #1
 800a28c:	2b02      	cmp	r3, #2
 800a28e:	d81d      	bhi.n	800a2cc <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	889b      	ldrh	r3, [r3, #4]
 800a294:	b2db      	uxtb	r3, r3
 800a296:	2b0f      	cmp	r3, #15
 800a298:	d813      	bhi.n	800a2c2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2a0:	689b      	ldr	r3, [r3, #8]
 800a2a2:	6839      	ldr	r1, [r7, #0]
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	4798      	blx	r3
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	88db      	ldrh	r3, [r3, #6]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d110      	bne.n	800a2d6 <USBD_StdItfReq+0x7a>
 800a2b4:	7bfb      	ldrb	r3, [r7, #15]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d10d      	bne.n	800a2d6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f000 fd85 	bl	800adca <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a2c0:	e009      	b.n	800a2d6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800a2c2:	6839      	ldr	r1, [r7, #0]
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f000 fcb5 	bl	800ac34 <USBD_CtlError>
          break;
 800a2ca:	e004      	b.n	800a2d6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800a2cc:	6839      	ldr	r1, [r7, #0]
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f000 fcb0 	bl	800ac34 <USBD_CtlError>
          break;
 800a2d4:	e000      	b.n	800a2d8 <USBD_StdItfReq+0x7c>
          break;
 800a2d6:	bf00      	nop
      }
      break;
 800a2d8:	e004      	b.n	800a2e4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800a2da:	6839      	ldr	r1, [r7, #0]
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	f000 fca9 	bl	800ac34 <USBD_CtlError>
      break;
 800a2e2:	bf00      	nop
  }

  return ret;
 800a2e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	3710      	adds	r7, #16
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}

0800a2ee <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2ee:	b580      	push	{r7, lr}
 800a2f0:	b084      	sub	sp, #16
 800a2f2:	af00      	add	r7, sp, #0
 800a2f4:	6078      	str	r0, [r7, #4]
 800a2f6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	889b      	ldrh	r3, [r3, #4]
 800a300:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	781b      	ldrb	r3, [r3, #0]
 800a306:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a30a:	2b40      	cmp	r3, #64	@ 0x40
 800a30c:	d007      	beq.n	800a31e <USBD_StdEPReq+0x30>
 800a30e:	2b40      	cmp	r3, #64	@ 0x40
 800a310:	f200 8145 	bhi.w	800a59e <USBD_StdEPReq+0x2b0>
 800a314:	2b00      	cmp	r3, #0
 800a316:	d00c      	beq.n	800a332 <USBD_StdEPReq+0x44>
 800a318:	2b20      	cmp	r3, #32
 800a31a:	f040 8140 	bne.w	800a59e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a324:	689b      	ldr	r3, [r3, #8]
 800a326:	6839      	ldr	r1, [r7, #0]
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	4798      	blx	r3
 800a32c:	4603      	mov	r3, r0
 800a32e:	73fb      	strb	r3, [r7, #15]
      break;
 800a330:	e13a      	b.n	800a5a8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	785b      	ldrb	r3, [r3, #1]
 800a336:	2b03      	cmp	r3, #3
 800a338:	d007      	beq.n	800a34a <USBD_StdEPReq+0x5c>
 800a33a:	2b03      	cmp	r3, #3
 800a33c:	f300 8129 	bgt.w	800a592 <USBD_StdEPReq+0x2a4>
 800a340:	2b00      	cmp	r3, #0
 800a342:	d07f      	beq.n	800a444 <USBD_StdEPReq+0x156>
 800a344:	2b01      	cmp	r3, #1
 800a346:	d03c      	beq.n	800a3c2 <USBD_StdEPReq+0xd4>
 800a348:	e123      	b.n	800a592 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a350:	b2db      	uxtb	r3, r3
 800a352:	2b02      	cmp	r3, #2
 800a354:	d002      	beq.n	800a35c <USBD_StdEPReq+0x6e>
 800a356:	2b03      	cmp	r3, #3
 800a358:	d016      	beq.n	800a388 <USBD_StdEPReq+0x9a>
 800a35a:	e02c      	b.n	800a3b6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a35c:	7bbb      	ldrb	r3, [r7, #14]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d00d      	beq.n	800a37e <USBD_StdEPReq+0x90>
 800a362:	7bbb      	ldrb	r3, [r7, #14]
 800a364:	2b80      	cmp	r3, #128	@ 0x80
 800a366:	d00a      	beq.n	800a37e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a368:	7bbb      	ldrb	r3, [r7, #14]
 800a36a:	4619      	mov	r1, r3
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f000 ff29 	bl	800b1c4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a372:	2180      	movs	r1, #128	@ 0x80
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f000 ff25 	bl	800b1c4 <USBD_LL_StallEP>
 800a37a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a37c:	e020      	b.n	800a3c0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800a37e:	6839      	ldr	r1, [r7, #0]
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f000 fc57 	bl	800ac34 <USBD_CtlError>
              break;
 800a386:	e01b      	b.n	800a3c0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	885b      	ldrh	r3, [r3, #2]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d10e      	bne.n	800a3ae <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a390:	7bbb      	ldrb	r3, [r7, #14]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d00b      	beq.n	800a3ae <USBD_StdEPReq+0xc0>
 800a396:	7bbb      	ldrb	r3, [r7, #14]
 800a398:	2b80      	cmp	r3, #128	@ 0x80
 800a39a:	d008      	beq.n	800a3ae <USBD_StdEPReq+0xc0>
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	88db      	ldrh	r3, [r3, #6]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d104      	bne.n	800a3ae <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a3a4:	7bbb      	ldrb	r3, [r7, #14]
 800a3a6:	4619      	mov	r1, r3
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f000 ff0b 	bl	800b1c4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f000 fd0b 	bl	800adca <USBD_CtlSendStatus>

              break;
 800a3b4:	e004      	b.n	800a3c0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800a3b6:	6839      	ldr	r1, [r7, #0]
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	f000 fc3b 	bl	800ac34 <USBD_CtlError>
              break;
 800a3be:	bf00      	nop
          }
          break;
 800a3c0:	e0ec      	b.n	800a59c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3c8:	b2db      	uxtb	r3, r3
 800a3ca:	2b02      	cmp	r3, #2
 800a3cc:	d002      	beq.n	800a3d4 <USBD_StdEPReq+0xe6>
 800a3ce:	2b03      	cmp	r3, #3
 800a3d0:	d016      	beq.n	800a400 <USBD_StdEPReq+0x112>
 800a3d2:	e030      	b.n	800a436 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a3d4:	7bbb      	ldrb	r3, [r7, #14]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d00d      	beq.n	800a3f6 <USBD_StdEPReq+0x108>
 800a3da:	7bbb      	ldrb	r3, [r7, #14]
 800a3dc:	2b80      	cmp	r3, #128	@ 0x80
 800a3de:	d00a      	beq.n	800a3f6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a3e0:	7bbb      	ldrb	r3, [r7, #14]
 800a3e2:	4619      	mov	r1, r3
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f000 feed 	bl	800b1c4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a3ea:	2180      	movs	r1, #128	@ 0x80
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f000 fee9 	bl	800b1c4 <USBD_LL_StallEP>
 800a3f2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a3f4:	e025      	b.n	800a442 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800a3f6:	6839      	ldr	r1, [r7, #0]
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f000 fc1b 	bl	800ac34 <USBD_CtlError>
              break;
 800a3fe:	e020      	b.n	800a442 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	885b      	ldrh	r3, [r3, #2]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d11b      	bne.n	800a440 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a408:	7bbb      	ldrb	r3, [r7, #14]
 800a40a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d004      	beq.n	800a41c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a412:	7bbb      	ldrb	r3, [r7, #14]
 800a414:	4619      	mov	r1, r3
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	f000 fef3 	bl	800b202 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	f000 fcd4 	bl	800adca <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a428:	689b      	ldr	r3, [r3, #8]
 800a42a:	6839      	ldr	r1, [r7, #0]
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	4798      	blx	r3
 800a430:	4603      	mov	r3, r0
 800a432:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800a434:	e004      	b.n	800a440 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800a436:	6839      	ldr	r1, [r7, #0]
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	f000 fbfb 	bl	800ac34 <USBD_CtlError>
              break;
 800a43e:	e000      	b.n	800a442 <USBD_StdEPReq+0x154>
              break;
 800a440:	bf00      	nop
          }
          break;
 800a442:	e0ab      	b.n	800a59c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a44a:	b2db      	uxtb	r3, r3
 800a44c:	2b02      	cmp	r3, #2
 800a44e:	d002      	beq.n	800a456 <USBD_StdEPReq+0x168>
 800a450:	2b03      	cmp	r3, #3
 800a452:	d032      	beq.n	800a4ba <USBD_StdEPReq+0x1cc>
 800a454:	e097      	b.n	800a586 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a456:	7bbb      	ldrb	r3, [r7, #14]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d007      	beq.n	800a46c <USBD_StdEPReq+0x17e>
 800a45c:	7bbb      	ldrb	r3, [r7, #14]
 800a45e:	2b80      	cmp	r3, #128	@ 0x80
 800a460:	d004      	beq.n	800a46c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800a462:	6839      	ldr	r1, [r7, #0]
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f000 fbe5 	bl	800ac34 <USBD_CtlError>
                break;
 800a46a:	e091      	b.n	800a590 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a46c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a470:	2b00      	cmp	r3, #0
 800a472:	da0b      	bge.n	800a48c <USBD_StdEPReq+0x19e>
 800a474:	7bbb      	ldrb	r3, [r7, #14]
 800a476:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a47a:	4613      	mov	r3, r2
 800a47c:	009b      	lsls	r3, r3, #2
 800a47e:	4413      	add	r3, r2
 800a480:	009b      	lsls	r3, r3, #2
 800a482:	3310      	adds	r3, #16
 800a484:	687a      	ldr	r2, [r7, #4]
 800a486:	4413      	add	r3, r2
 800a488:	3304      	adds	r3, #4
 800a48a:	e00b      	b.n	800a4a4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a48c:	7bbb      	ldrb	r3, [r7, #14]
 800a48e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a492:	4613      	mov	r3, r2
 800a494:	009b      	lsls	r3, r3, #2
 800a496:	4413      	add	r3, r2
 800a498:	009b      	lsls	r3, r3, #2
 800a49a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a49e:	687a      	ldr	r2, [r7, #4]
 800a4a0:	4413      	add	r3, r2
 800a4a2:	3304      	adds	r3, #4
 800a4a4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	2202      	movs	r2, #2
 800a4b0:	4619      	mov	r1, r3
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f000 fc2f 	bl	800ad16 <USBD_CtlSendData>
              break;
 800a4b8:	e06a      	b.n	800a590 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a4ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	da11      	bge.n	800a4e6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a4c2:	7bbb      	ldrb	r3, [r7, #14]
 800a4c4:	f003 020f 	and.w	r2, r3, #15
 800a4c8:	6879      	ldr	r1, [r7, #4]
 800a4ca:	4613      	mov	r3, r2
 800a4cc:	009b      	lsls	r3, r3, #2
 800a4ce:	4413      	add	r3, r2
 800a4d0:	009b      	lsls	r3, r3, #2
 800a4d2:	440b      	add	r3, r1
 800a4d4:	3324      	adds	r3, #36	@ 0x24
 800a4d6:	881b      	ldrh	r3, [r3, #0]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d117      	bne.n	800a50c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a4dc:	6839      	ldr	r1, [r7, #0]
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f000 fba8 	bl	800ac34 <USBD_CtlError>
                  break;
 800a4e4:	e054      	b.n	800a590 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a4e6:	7bbb      	ldrb	r3, [r7, #14]
 800a4e8:	f003 020f 	and.w	r2, r3, #15
 800a4ec:	6879      	ldr	r1, [r7, #4]
 800a4ee:	4613      	mov	r3, r2
 800a4f0:	009b      	lsls	r3, r3, #2
 800a4f2:	4413      	add	r3, r2
 800a4f4:	009b      	lsls	r3, r3, #2
 800a4f6:	440b      	add	r3, r1
 800a4f8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a4fc:	881b      	ldrh	r3, [r3, #0]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d104      	bne.n	800a50c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a502:	6839      	ldr	r1, [r7, #0]
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	f000 fb95 	bl	800ac34 <USBD_CtlError>
                  break;
 800a50a:	e041      	b.n	800a590 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a50c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a510:	2b00      	cmp	r3, #0
 800a512:	da0b      	bge.n	800a52c <USBD_StdEPReq+0x23e>
 800a514:	7bbb      	ldrb	r3, [r7, #14]
 800a516:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a51a:	4613      	mov	r3, r2
 800a51c:	009b      	lsls	r3, r3, #2
 800a51e:	4413      	add	r3, r2
 800a520:	009b      	lsls	r3, r3, #2
 800a522:	3310      	adds	r3, #16
 800a524:	687a      	ldr	r2, [r7, #4]
 800a526:	4413      	add	r3, r2
 800a528:	3304      	adds	r3, #4
 800a52a:	e00b      	b.n	800a544 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a52c:	7bbb      	ldrb	r3, [r7, #14]
 800a52e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a532:	4613      	mov	r3, r2
 800a534:	009b      	lsls	r3, r3, #2
 800a536:	4413      	add	r3, r2
 800a538:	009b      	lsls	r3, r3, #2
 800a53a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a53e:	687a      	ldr	r2, [r7, #4]
 800a540:	4413      	add	r3, r2
 800a542:	3304      	adds	r3, #4
 800a544:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a546:	7bbb      	ldrb	r3, [r7, #14]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d002      	beq.n	800a552 <USBD_StdEPReq+0x264>
 800a54c:	7bbb      	ldrb	r3, [r7, #14]
 800a54e:	2b80      	cmp	r3, #128	@ 0x80
 800a550:	d103      	bne.n	800a55a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	2200      	movs	r2, #0
 800a556:	601a      	str	r2, [r3, #0]
 800a558:	e00e      	b.n	800a578 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a55a:	7bbb      	ldrb	r3, [r7, #14]
 800a55c:	4619      	mov	r1, r3
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f000 fe6e 	bl	800b240 <USBD_LL_IsStallEP>
 800a564:	4603      	mov	r3, r0
 800a566:	2b00      	cmp	r3, #0
 800a568:	d003      	beq.n	800a572 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800a56a:	68bb      	ldr	r3, [r7, #8]
 800a56c:	2201      	movs	r2, #1
 800a56e:	601a      	str	r2, [r3, #0]
 800a570:	e002      	b.n	800a578 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	2200      	movs	r2, #0
 800a576:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	2202      	movs	r2, #2
 800a57c:	4619      	mov	r1, r3
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f000 fbc9 	bl	800ad16 <USBD_CtlSendData>
              break;
 800a584:	e004      	b.n	800a590 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800a586:	6839      	ldr	r1, [r7, #0]
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f000 fb53 	bl	800ac34 <USBD_CtlError>
              break;
 800a58e:	bf00      	nop
          }
          break;
 800a590:	e004      	b.n	800a59c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800a592:	6839      	ldr	r1, [r7, #0]
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f000 fb4d 	bl	800ac34 <USBD_CtlError>
          break;
 800a59a:	bf00      	nop
      }
      break;
 800a59c:	e004      	b.n	800a5a8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800a59e:	6839      	ldr	r1, [r7, #0]
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f000 fb47 	bl	800ac34 <USBD_CtlError>
      break;
 800a5a6:	bf00      	nop
  }

  return ret;
 800a5a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3710      	adds	r7, #16
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}
	...

0800a5b4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b084      	sub	sp, #16
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
 800a5bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	885b      	ldrh	r3, [r3, #2]
 800a5ce:	0a1b      	lsrs	r3, r3, #8
 800a5d0:	b29b      	uxth	r3, r3
 800a5d2:	3b01      	subs	r3, #1
 800a5d4:	2b06      	cmp	r3, #6
 800a5d6:	f200 813b 	bhi.w	800a850 <USBD_GetDescriptor+0x29c>
 800a5da:	a201      	add	r2, pc, #4	@ (adr r2, 800a5e0 <USBD_GetDescriptor+0x2c>)
 800a5dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5e0:	0800a5fd 	.word	0x0800a5fd
 800a5e4:	0800a615 	.word	0x0800a615
 800a5e8:	0800a655 	.word	0x0800a655
 800a5ec:	0800a851 	.word	0x0800a851
 800a5f0:	0800a851 	.word	0x0800a851
 800a5f4:	0800a7f1 	.word	0x0800a7f1
 800a5f8:	0800a81d 	.word	0x0800a81d
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	687a      	ldr	r2, [r7, #4]
 800a606:	7c12      	ldrb	r2, [r2, #16]
 800a608:	f107 0108 	add.w	r1, r7, #8
 800a60c:	4610      	mov	r0, r2
 800a60e:	4798      	blx	r3
 800a610:	60f8      	str	r0, [r7, #12]
      break;
 800a612:	e125      	b.n	800a860 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	7c1b      	ldrb	r3, [r3, #16]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d10d      	bne.n	800a638 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a624:	f107 0208 	add.w	r2, r7, #8
 800a628:	4610      	mov	r0, r2
 800a62a:	4798      	blx	r3
 800a62c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	3301      	adds	r3, #1
 800a632:	2202      	movs	r2, #2
 800a634:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a636:	e113      	b.n	800a860 <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a63e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a640:	f107 0208 	add.w	r2, r7, #8
 800a644:	4610      	mov	r0, r2
 800a646:	4798      	blx	r3
 800a648:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	3301      	adds	r3, #1
 800a64e:	2202      	movs	r2, #2
 800a650:	701a      	strb	r2, [r3, #0]
      break;
 800a652:	e105      	b.n	800a860 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	885b      	ldrh	r3, [r3, #2]
 800a658:	b2db      	uxtb	r3, r3
 800a65a:	2b05      	cmp	r3, #5
 800a65c:	f200 80ac 	bhi.w	800a7b8 <USBD_GetDescriptor+0x204>
 800a660:	a201      	add	r2, pc, #4	@ (adr r2, 800a668 <USBD_GetDescriptor+0xb4>)
 800a662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a666:	bf00      	nop
 800a668:	0800a681 	.word	0x0800a681
 800a66c:	0800a6b5 	.word	0x0800a6b5
 800a670:	0800a6e9 	.word	0x0800a6e9
 800a674:	0800a71d 	.word	0x0800a71d
 800a678:	0800a751 	.word	0x0800a751
 800a67c:	0800a785 	.word	0x0800a785
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a686:	685b      	ldr	r3, [r3, #4]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d00b      	beq.n	800a6a4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a692:	685b      	ldr	r3, [r3, #4]
 800a694:	687a      	ldr	r2, [r7, #4]
 800a696:	7c12      	ldrb	r2, [r2, #16]
 800a698:	f107 0108 	add.w	r1, r7, #8
 800a69c:	4610      	mov	r0, r2
 800a69e:	4798      	blx	r3
 800a6a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a6a2:	e0a4      	b.n	800a7ee <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800a6a4:	6839      	ldr	r1, [r7, #0]
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f000 fac4 	bl	800ac34 <USBD_CtlError>
            err++;
 800a6ac:	7afb      	ldrb	r3, [r7, #11]
 800a6ae:	3301      	adds	r3, #1
 800a6b0:	72fb      	strb	r3, [r7, #11]
          break;
 800a6b2:	e09c      	b.n	800a7ee <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a6ba:	689b      	ldr	r3, [r3, #8]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d00b      	beq.n	800a6d8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a6c6:	689b      	ldr	r3, [r3, #8]
 800a6c8:	687a      	ldr	r2, [r7, #4]
 800a6ca:	7c12      	ldrb	r2, [r2, #16]
 800a6cc:	f107 0108 	add.w	r1, r7, #8
 800a6d0:	4610      	mov	r0, r2
 800a6d2:	4798      	blx	r3
 800a6d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a6d6:	e08a      	b.n	800a7ee <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800a6d8:	6839      	ldr	r1, [r7, #0]
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f000 faaa 	bl	800ac34 <USBD_CtlError>
            err++;
 800a6e0:	7afb      	ldrb	r3, [r7, #11]
 800a6e2:	3301      	adds	r3, #1
 800a6e4:	72fb      	strb	r3, [r7, #11]
          break;
 800a6e6:	e082      	b.n	800a7ee <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a6ee:	68db      	ldr	r3, [r3, #12]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d00b      	beq.n	800a70c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a6fa:	68db      	ldr	r3, [r3, #12]
 800a6fc:	687a      	ldr	r2, [r7, #4]
 800a6fe:	7c12      	ldrb	r2, [r2, #16]
 800a700:	f107 0108 	add.w	r1, r7, #8
 800a704:	4610      	mov	r0, r2
 800a706:	4798      	blx	r3
 800a708:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a70a:	e070      	b.n	800a7ee <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800a70c:	6839      	ldr	r1, [r7, #0]
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f000 fa90 	bl	800ac34 <USBD_CtlError>
            err++;
 800a714:	7afb      	ldrb	r3, [r7, #11]
 800a716:	3301      	adds	r3, #1
 800a718:	72fb      	strb	r3, [r7, #11]
          break;
 800a71a:	e068      	b.n	800a7ee <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a722:	691b      	ldr	r3, [r3, #16]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d00b      	beq.n	800a740 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a72e:	691b      	ldr	r3, [r3, #16]
 800a730:	687a      	ldr	r2, [r7, #4]
 800a732:	7c12      	ldrb	r2, [r2, #16]
 800a734:	f107 0108 	add.w	r1, r7, #8
 800a738:	4610      	mov	r0, r2
 800a73a:	4798      	blx	r3
 800a73c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a73e:	e056      	b.n	800a7ee <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800a740:	6839      	ldr	r1, [r7, #0]
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	f000 fa76 	bl	800ac34 <USBD_CtlError>
            err++;
 800a748:	7afb      	ldrb	r3, [r7, #11]
 800a74a:	3301      	adds	r3, #1
 800a74c:	72fb      	strb	r3, [r7, #11]
          break;
 800a74e:	e04e      	b.n	800a7ee <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a756:	695b      	ldr	r3, [r3, #20]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d00b      	beq.n	800a774 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a762:	695b      	ldr	r3, [r3, #20]
 800a764:	687a      	ldr	r2, [r7, #4]
 800a766:	7c12      	ldrb	r2, [r2, #16]
 800a768:	f107 0108 	add.w	r1, r7, #8
 800a76c:	4610      	mov	r0, r2
 800a76e:	4798      	blx	r3
 800a770:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a772:	e03c      	b.n	800a7ee <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800a774:	6839      	ldr	r1, [r7, #0]
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f000 fa5c 	bl	800ac34 <USBD_CtlError>
            err++;
 800a77c:	7afb      	ldrb	r3, [r7, #11]
 800a77e:	3301      	adds	r3, #1
 800a780:	72fb      	strb	r3, [r7, #11]
          break;
 800a782:	e034      	b.n	800a7ee <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a78a:	699b      	ldr	r3, [r3, #24]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d00b      	beq.n	800a7a8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a796:	699b      	ldr	r3, [r3, #24]
 800a798:	687a      	ldr	r2, [r7, #4]
 800a79a:	7c12      	ldrb	r2, [r2, #16]
 800a79c:	f107 0108 	add.w	r1, r7, #8
 800a7a0:	4610      	mov	r0, r2
 800a7a2:	4798      	blx	r3
 800a7a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a7a6:	e022      	b.n	800a7ee <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800a7a8:	6839      	ldr	r1, [r7, #0]
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f000 fa42 	bl	800ac34 <USBD_CtlError>
            err++;
 800a7b0:	7afb      	ldrb	r3, [r7, #11]
 800a7b2:	3301      	adds	r3, #1
 800a7b4:	72fb      	strb	r3, [r7, #11]
          break;
 800a7b6:	e01a      	b.n	800a7ee <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a7be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d00c      	beq.n	800a7de <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a7ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7cc:	683a      	ldr	r2, [r7, #0]
 800a7ce:	8852      	ldrh	r2, [r2, #2]
 800a7d0:	b2d1      	uxtb	r1, r2
 800a7d2:	f107 0208 	add.w	r2, r7, #8
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	4798      	blx	r3
 800a7da:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 800a7dc:	e006      	b.n	800a7ec <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 800a7de:	6839      	ldr	r1, [r7, #0]
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f000 fa27 	bl	800ac34 <USBD_CtlError>
            err++;
 800a7e6:	7afb      	ldrb	r3, [r7, #11]
 800a7e8:	3301      	adds	r3, #1
 800a7ea:	72fb      	strb	r3, [r7, #11]
          break;
 800a7ec:	bf00      	nop
      }
      break;
 800a7ee:	e037      	b.n	800a860 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	7c1b      	ldrb	r3, [r3, #16]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d109      	bne.n	800a80c <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a7fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a800:	f107 0208 	add.w	r2, r7, #8
 800a804:	4610      	mov	r0, r2
 800a806:	4798      	blx	r3
 800a808:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a80a:	e029      	b.n	800a860 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 800a80c:	6839      	ldr	r1, [r7, #0]
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f000 fa10 	bl	800ac34 <USBD_CtlError>
        err++;
 800a814:	7afb      	ldrb	r3, [r7, #11]
 800a816:	3301      	adds	r3, #1
 800a818:	72fb      	strb	r3, [r7, #11]
      break;
 800a81a:	e021      	b.n	800a860 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	7c1b      	ldrb	r3, [r3, #16]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d10d      	bne.n	800a840 <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a82a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a82c:	f107 0208 	add.w	r2, r7, #8
 800a830:	4610      	mov	r0, r2
 800a832:	4798      	blx	r3
 800a834:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	3301      	adds	r3, #1
 800a83a:	2207      	movs	r2, #7
 800a83c:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a83e:	e00f      	b.n	800a860 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 800a840:	6839      	ldr	r1, [r7, #0]
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f000 f9f6 	bl	800ac34 <USBD_CtlError>
        err++;
 800a848:	7afb      	ldrb	r3, [r7, #11]
 800a84a:	3301      	adds	r3, #1
 800a84c:	72fb      	strb	r3, [r7, #11]
      break;
 800a84e:	e007      	b.n	800a860 <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 800a850:	6839      	ldr	r1, [r7, #0]
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f000 f9ee 	bl	800ac34 <USBD_CtlError>
      err++;
 800a858:	7afb      	ldrb	r3, [r7, #11]
 800a85a:	3301      	adds	r3, #1
 800a85c:	72fb      	strb	r3, [r7, #11]
      break;
 800a85e:	bf00      	nop
  }

  if (err != 0U)
 800a860:	7afb      	ldrb	r3, [r7, #11]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d11e      	bne.n	800a8a4 <USBD_GetDescriptor+0x2f0>
  {
    return;
  }

  if (req->wLength != 0U)
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	88db      	ldrh	r3, [r3, #6]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d016      	beq.n	800a89c <USBD_GetDescriptor+0x2e8>
  {
    if (len != 0U)
 800a86e:	893b      	ldrh	r3, [r7, #8]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d00e      	beq.n	800a892 <USBD_GetDescriptor+0x2de>
    {
      len = MIN(len, req->wLength);
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	88da      	ldrh	r2, [r3, #6]
 800a878:	893b      	ldrh	r3, [r7, #8]
 800a87a:	4293      	cmp	r3, r2
 800a87c:	bf28      	it	cs
 800a87e:	4613      	movcs	r3, r2
 800a880:	b29b      	uxth	r3, r3
 800a882:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a884:	893b      	ldrh	r3, [r7, #8]
 800a886:	461a      	mov	r2, r3
 800a888:	68f9      	ldr	r1, [r7, #12]
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f000 fa43 	bl	800ad16 <USBD_CtlSendData>
 800a890:	e009      	b.n	800a8a6 <USBD_GetDescriptor+0x2f2>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a892:	6839      	ldr	r1, [r7, #0]
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f000 f9cd 	bl	800ac34 <USBD_CtlError>
 800a89a:	e004      	b.n	800a8a6 <USBD_GetDescriptor+0x2f2>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	f000 fa94 	bl	800adca <USBD_CtlSendStatus>
 800a8a2:	e000      	b.n	800a8a6 <USBD_GetDescriptor+0x2f2>
    return;
 800a8a4:	bf00      	nop
  }
}
 800a8a6:	3710      	adds	r7, #16
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}

0800a8ac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b084      	sub	sp, #16
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
 800a8b4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	889b      	ldrh	r3, [r3, #4]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d131      	bne.n	800a922 <USBD_SetAddress+0x76>
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	88db      	ldrh	r3, [r3, #6]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d12d      	bne.n	800a922 <USBD_SetAddress+0x76>
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	885b      	ldrh	r3, [r3, #2]
 800a8ca:	2b7f      	cmp	r3, #127	@ 0x7f
 800a8cc:	d829      	bhi.n	800a922 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	885b      	ldrh	r3, [r3, #2]
 800a8d2:	b2db      	uxtb	r3, r3
 800a8d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a8d8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8e0:	b2db      	uxtb	r3, r3
 800a8e2:	2b03      	cmp	r3, #3
 800a8e4:	d104      	bne.n	800a8f0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a8e6:	6839      	ldr	r1, [r7, #0]
 800a8e8:	6878      	ldr	r0, [r7, #4]
 800a8ea:	f000 f9a3 	bl	800ac34 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8ee:	e01d      	b.n	800a92c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	7bfa      	ldrb	r2, [r7, #15]
 800a8f4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a8f8:	7bfb      	ldrb	r3, [r7, #15]
 800a8fa:	4619      	mov	r1, r3
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f000 fccb 	bl	800b298 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f000 fa61 	bl	800adca <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a908:	7bfb      	ldrb	r3, [r7, #15]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d004      	beq.n	800a918 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2202      	movs	r2, #2
 800a912:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a916:	e009      	b.n	800a92c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2201      	movs	r2, #1
 800a91c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a920:	e004      	b.n	800a92c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a922:	6839      	ldr	r1, [r7, #0]
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	f000 f985 	bl	800ac34 <USBD_CtlError>
  }
}
 800a92a:	bf00      	nop
 800a92c:	bf00      	nop
 800a92e:	3710      	adds	r7, #16
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}

0800a934 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b084      	sub	sp, #16
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
 800a93c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a93e:	2300      	movs	r3, #0
 800a940:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	885b      	ldrh	r3, [r3, #2]
 800a946:	b2da      	uxtb	r2, r3
 800a948:	4b4c      	ldr	r3, [pc, #304]	@ (800aa7c <USBD_SetConfig+0x148>)
 800a94a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a94c:	4b4b      	ldr	r3, [pc, #300]	@ (800aa7c <USBD_SetConfig+0x148>)
 800a94e:	781b      	ldrb	r3, [r3, #0]
 800a950:	2b01      	cmp	r3, #1
 800a952:	d905      	bls.n	800a960 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a954:	6839      	ldr	r1, [r7, #0]
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f000 f96c 	bl	800ac34 <USBD_CtlError>
    return USBD_FAIL;
 800a95c:	2303      	movs	r3, #3
 800a95e:	e088      	b.n	800aa72 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a966:	b2db      	uxtb	r3, r3
 800a968:	2b02      	cmp	r3, #2
 800a96a:	d002      	beq.n	800a972 <USBD_SetConfig+0x3e>
 800a96c:	2b03      	cmp	r3, #3
 800a96e:	d025      	beq.n	800a9bc <USBD_SetConfig+0x88>
 800a970:	e071      	b.n	800aa56 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a972:	4b42      	ldr	r3, [pc, #264]	@ (800aa7c <USBD_SetConfig+0x148>)
 800a974:	781b      	ldrb	r3, [r3, #0]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d01c      	beq.n	800a9b4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800a97a:	4b40      	ldr	r3, [pc, #256]	@ (800aa7c <USBD_SetConfig+0x148>)
 800a97c:	781b      	ldrb	r3, [r3, #0]
 800a97e:	461a      	mov	r2, r3
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a984:	4b3d      	ldr	r3, [pc, #244]	@ (800aa7c <USBD_SetConfig+0x148>)
 800a986:	781b      	ldrb	r3, [r3, #0]
 800a988:	4619      	mov	r1, r3
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f7ff f93b 	bl	8009c06 <USBD_SetClassConfig>
 800a990:	4603      	mov	r3, r0
 800a992:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a994:	7bfb      	ldrb	r3, [r7, #15]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d004      	beq.n	800a9a4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800a99a:	6839      	ldr	r1, [r7, #0]
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f000 f949 	bl	800ac34 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a9a2:	e065      	b.n	800aa70 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f000 fa10 	bl	800adca <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2203      	movs	r2, #3
 800a9ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a9b2:	e05d      	b.n	800aa70 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	f000 fa08 	bl	800adca <USBD_CtlSendStatus>
      break;
 800a9ba:	e059      	b.n	800aa70 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a9bc:	4b2f      	ldr	r3, [pc, #188]	@ (800aa7c <USBD_SetConfig+0x148>)
 800a9be:	781b      	ldrb	r3, [r3, #0]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d112      	bne.n	800a9ea <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2202      	movs	r2, #2
 800a9c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a9cc:	4b2b      	ldr	r3, [pc, #172]	@ (800aa7c <USBD_SetConfig+0x148>)
 800a9ce:	781b      	ldrb	r3, [r3, #0]
 800a9d0:	461a      	mov	r2, r3
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a9d6:	4b29      	ldr	r3, [pc, #164]	@ (800aa7c <USBD_SetConfig+0x148>)
 800a9d8:	781b      	ldrb	r3, [r3, #0]
 800a9da:	4619      	mov	r1, r3
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f7ff f92e 	bl	8009c3e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f000 f9f1 	bl	800adca <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a9e8:	e042      	b.n	800aa70 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800a9ea:	4b24      	ldr	r3, [pc, #144]	@ (800aa7c <USBD_SetConfig+0x148>)
 800a9ec:	781b      	ldrb	r3, [r3, #0]
 800a9ee:	461a      	mov	r2, r3
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	685b      	ldr	r3, [r3, #4]
 800a9f4:	429a      	cmp	r2, r3
 800a9f6:	d02a      	beq.n	800aa4e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	685b      	ldr	r3, [r3, #4]
 800a9fc:	b2db      	uxtb	r3, r3
 800a9fe:	4619      	mov	r1, r3
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f7ff f91c 	bl	8009c3e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800aa06:	4b1d      	ldr	r3, [pc, #116]	@ (800aa7c <USBD_SetConfig+0x148>)
 800aa08:	781b      	ldrb	r3, [r3, #0]
 800aa0a:	461a      	mov	r2, r3
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800aa10:	4b1a      	ldr	r3, [pc, #104]	@ (800aa7c <USBD_SetConfig+0x148>)
 800aa12:	781b      	ldrb	r3, [r3, #0]
 800aa14:	4619      	mov	r1, r3
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f7ff f8f5 	bl	8009c06 <USBD_SetClassConfig>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800aa20:	7bfb      	ldrb	r3, [r7, #15]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d00f      	beq.n	800aa46 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800aa26:	6839      	ldr	r1, [r7, #0]
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f000 f903 	bl	800ac34 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	685b      	ldr	r3, [r3, #4]
 800aa32:	b2db      	uxtb	r3, r3
 800aa34:	4619      	mov	r1, r3
 800aa36:	6878      	ldr	r0, [r7, #4]
 800aa38:	f7ff f901 	bl	8009c3e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2202      	movs	r2, #2
 800aa40:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800aa44:	e014      	b.n	800aa70 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f000 f9bf 	bl	800adca <USBD_CtlSendStatus>
      break;
 800aa4c:	e010      	b.n	800aa70 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f000 f9bb 	bl	800adca <USBD_CtlSendStatus>
      break;
 800aa54:	e00c      	b.n	800aa70 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800aa56:	6839      	ldr	r1, [r7, #0]
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f000 f8eb 	bl	800ac34 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800aa5e:	4b07      	ldr	r3, [pc, #28]	@ (800aa7c <USBD_SetConfig+0x148>)
 800aa60:	781b      	ldrb	r3, [r3, #0]
 800aa62:	4619      	mov	r1, r3
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f7ff f8ea 	bl	8009c3e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800aa6a:	2303      	movs	r3, #3
 800aa6c:	73fb      	strb	r3, [r7, #15]
      break;
 800aa6e:	bf00      	nop
  }

  return ret;
 800aa70:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa72:	4618      	mov	r0, r3
 800aa74:	3710      	adds	r7, #16
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd80      	pop	{r7, pc}
 800aa7a:	bf00      	nop
 800aa7c:	200025f4 	.word	0x200025f4

0800aa80 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b082      	sub	sp, #8
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
 800aa88:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	88db      	ldrh	r3, [r3, #6]
 800aa8e:	2b01      	cmp	r3, #1
 800aa90:	d004      	beq.n	800aa9c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800aa92:	6839      	ldr	r1, [r7, #0]
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f000 f8cd 	bl	800ac34 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800aa9a:	e023      	b.n	800aae4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aaa2:	b2db      	uxtb	r3, r3
 800aaa4:	2b02      	cmp	r3, #2
 800aaa6:	dc02      	bgt.n	800aaae <USBD_GetConfig+0x2e>
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	dc03      	bgt.n	800aab4 <USBD_GetConfig+0x34>
 800aaac:	e015      	b.n	800aada <USBD_GetConfig+0x5a>
 800aaae:	2b03      	cmp	r3, #3
 800aab0:	d00b      	beq.n	800aaca <USBD_GetConfig+0x4a>
 800aab2:	e012      	b.n	800aada <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2200      	movs	r2, #0
 800aab8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	3308      	adds	r3, #8
 800aabe:	2201      	movs	r2, #1
 800aac0:	4619      	mov	r1, r3
 800aac2:	6878      	ldr	r0, [r7, #4]
 800aac4:	f000 f927 	bl	800ad16 <USBD_CtlSendData>
        break;
 800aac8:	e00c      	b.n	800aae4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	3304      	adds	r3, #4
 800aace:	2201      	movs	r2, #1
 800aad0:	4619      	mov	r1, r3
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	f000 f91f 	bl	800ad16 <USBD_CtlSendData>
        break;
 800aad8:	e004      	b.n	800aae4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800aada:	6839      	ldr	r1, [r7, #0]
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f000 f8a9 	bl	800ac34 <USBD_CtlError>
        break;
 800aae2:	bf00      	nop
}
 800aae4:	bf00      	nop
 800aae6:	3708      	adds	r7, #8
 800aae8:	46bd      	mov	sp, r7
 800aaea:	bd80      	pop	{r7, pc}

0800aaec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b082      	sub	sp, #8
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
 800aaf4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aafc:	b2db      	uxtb	r3, r3
 800aafe:	3b01      	subs	r3, #1
 800ab00:	2b02      	cmp	r3, #2
 800ab02:	d81e      	bhi.n	800ab42 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	88db      	ldrh	r3, [r3, #6]
 800ab08:	2b02      	cmp	r3, #2
 800ab0a:	d004      	beq.n	800ab16 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ab0c:	6839      	ldr	r1, [r7, #0]
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	f000 f890 	bl	800ac34 <USBD_CtlError>
        break;
 800ab14:	e01a      	b.n	800ab4c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2201      	movs	r2, #1
 800ab1a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d005      	beq.n	800ab32 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	68db      	ldr	r3, [r3, #12]
 800ab2a:	f043 0202 	orr.w	r2, r3, #2
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	330c      	adds	r3, #12
 800ab36:	2202      	movs	r2, #2
 800ab38:	4619      	mov	r1, r3
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	f000 f8eb 	bl	800ad16 <USBD_CtlSendData>
      break;
 800ab40:	e004      	b.n	800ab4c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ab42:	6839      	ldr	r1, [r7, #0]
 800ab44:	6878      	ldr	r0, [r7, #4]
 800ab46:	f000 f875 	bl	800ac34 <USBD_CtlError>
      break;
 800ab4a:	bf00      	nop
  }
}
 800ab4c:	bf00      	nop
 800ab4e:	3708      	adds	r7, #8
 800ab50:	46bd      	mov	sp, r7
 800ab52:	bd80      	pop	{r7, pc}

0800ab54 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b082      	sub	sp, #8
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
 800ab5c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	885b      	ldrh	r3, [r3, #2]
 800ab62:	2b01      	cmp	r3, #1
 800ab64:	d106      	bne.n	800ab74 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2201      	movs	r2, #1
 800ab6a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f000 f92b 	bl	800adca <USBD_CtlSendStatus>
  }
}
 800ab74:	bf00      	nop
 800ab76:	3708      	adds	r7, #8
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}

0800ab7c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b082      	sub	sp, #8
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
 800ab84:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab8c:	b2db      	uxtb	r3, r3
 800ab8e:	3b01      	subs	r3, #1
 800ab90:	2b02      	cmp	r3, #2
 800ab92:	d80b      	bhi.n	800abac <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	885b      	ldrh	r3, [r3, #2]
 800ab98:	2b01      	cmp	r3, #1
 800ab9a:	d10c      	bne.n	800abb6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f000 f910 	bl	800adca <USBD_CtlSendStatus>
      }
      break;
 800abaa:	e004      	b.n	800abb6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800abac:	6839      	ldr	r1, [r7, #0]
 800abae:	6878      	ldr	r0, [r7, #4]
 800abb0:	f000 f840 	bl	800ac34 <USBD_CtlError>
      break;
 800abb4:	e000      	b.n	800abb8 <USBD_ClrFeature+0x3c>
      break;
 800abb6:	bf00      	nop
  }
}
 800abb8:	bf00      	nop
 800abba:	3708      	adds	r7, #8
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}

0800abc0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b084      	sub	sp, #16
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
 800abc8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	781a      	ldrb	r2, [r3, #0]
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	3301      	adds	r3, #1
 800abda:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	781a      	ldrb	r2, [r3, #0]
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	3301      	adds	r3, #1
 800abe8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800abea:	68f8      	ldr	r0, [r7, #12]
 800abec:	f7ff faa9 	bl	800a142 <SWAPBYTE>
 800abf0:	4603      	mov	r3, r0
 800abf2:	461a      	mov	r2, r3
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	3301      	adds	r3, #1
 800abfc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	3301      	adds	r3, #1
 800ac02:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ac04:	68f8      	ldr	r0, [r7, #12]
 800ac06:	f7ff fa9c 	bl	800a142 <SWAPBYTE>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	461a      	mov	r2, r3
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	3301      	adds	r3, #1
 800ac16:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	3301      	adds	r3, #1
 800ac1c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ac1e:	68f8      	ldr	r0, [r7, #12]
 800ac20:	f7ff fa8f 	bl	800a142 <SWAPBYTE>
 800ac24:	4603      	mov	r3, r0
 800ac26:	461a      	mov	r2, r3
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	80da      	strh	r2, [r3, #6]
}
 800ac2c:	bf00      	nop
 800ac2e:	3710      	adds	r7, #16
 800ac30:	46bd      	mov	sp, r7
 800ac32:	bd80      	pop	{r7, pc}

0800ac34 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b082      	sub	sp, #8
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
 800ac3c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ac3e:	2180      	movs	r1, #128	@ 0x80
 800ac40:	6878      	ldr	r0, [r7, #4]
 800ac42:	f000 fabf 	bl	800b1c4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ac46:	2100      	movs	r1, #0
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	f000 fabb 	bl	800b1c4 <USBD_LL_StallEP>
}
 800ac4e:	bf00      	nop
 800ac50:	3708      	adds	r7, #8
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}

0800ac56 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ac56:	b580      	push	{r7, lr}
 800ac58:	b086      	sub	sp, #24
 800ac5a:	af00      	add	r7, sp, #0
 800ac5c:	60f8      	str	r0, [r7, #12]
 800ac5e:	60b9      	str	r1, [r7, #8]
 800ac60:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ac62:	2300      	movs	r3, #0
 800ac64:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d036      	beq.n	800acda <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ac70:	6938      	ldr	r0, [r7, #16]
 800ac72:	f000 f836 	bl	800ace2 <USBD_GetLen>
 800ac76:	4603      	mov	r3, r0
 800ac78:	3301      	adds	r3, #1
 800ac7a:	b29b      	uxth	r3, r3
 800ac7c:	005b      	lsls	r3, r3, #1
 800ac7e:	b29a      	uxth	r2, r3
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ac84:	7dfb      	ldrb	r3, [r7, #23]
 800ac86:	68ba      	ldr	r2, [r7, #8]
 800ac88:	4413      	add	r3, r2
 800ac8a:	687a      	ldr	r2, [r7, #4]
 800ac8c:	7812      	ldrb	r2, [r2, #0]
 800ac8e:	701a      	strb	r2, [r3, #0]
  idx++;
 800ac90:	7dfb      	ldrb	r3, [r7, #23]
 800ac92:	3301      	adds	r3, #1
 800ac94:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ac96:	7dfb      	ldrb	r3, [r7, #23]
 800ac98:	68ba      	ldr	r2, [r7, #8]
 800ac9a:	4413      	add	r3, r2
 800ac9c:	2203      	movs	r2, #3
 800ac9e:	701a      	strb	r2, [r3, #0]
  idx++;
 800aca0:	7dfb      	ldrb	r3, [r7, #23]
 800aca2:	3301      	adds	r3, #1
 800aca4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800aca6:	e013      	b.n	800acd0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800aca8:	7dfb      	ldrb	r3, [r7, #23]
 800acaa:	68ba      	ldr	r2, [r7, #8]
 800acac:	4413      	add	r3, r2
 800acae:	693a      	ldr	r2, [r7, #16]
 800acb0:	7812      	ldrb	r2, [r2, #0]
 800acb2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800acb4:	693b      	ldr	r3, [r7, #16]
 800acb6:	3301      	adds	r3, #1
 800acb8:	613b      	str	r3, [r7, #16]
    idx++;
 800acba:	7dfb      	ldrb	r3, [r7, #23]
 800acbc:	3301      	adds	r3, #1
 800acbe:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800acc0:	7dfb      	ldrb	r3, [r7, #23]
 800acc2:	68ba      	ldr	r2, [r7, #8]
 800acc4:	4413      	add	r3, r2
 800acc6:	2200      	movs	r2, #0
 800acc8:	701a      	strb	r2, [r3, #0]
    idx++;
 800acca:	7dfb      	ldrb	r3, [r7, #23]
 800accc:	3301      	adds	r3, #1
 800acce:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800acd0:	693b      	ldr	r3, [r7, #16]
 800acd2:	781b      	ldrb	r3, [r3, #0]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d1e7      	bne.n	800aca8 <USBD_GetString+0x52>
 800acd8:	e000      	b.n	800acdc <USBD_GetString+0x86>
    return;
 800acda:	bf00      	nop
  }
}
 800acdc:	3718      	adds	r7, #24
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}

0800ace2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ace2:	b480      	push	{r7}
 800ace4:	b085      	sub	sp, #20
 800ace6:	af00      	add	r7, sp, #0
 800ace8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800acea:	2300      	movs	r3, #0
 800acec:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800acf2:	e005      	b.n	800ad00 <USBD_GetLen+0x1e>
  {
    len++;
 800acf4:	7bfb      	ldrb	r3, [r7, #15]
 800acf6:	3301      	adds	r3, #1
 800acf8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	3301      	adds	r3, #1
 800acfe:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	781b      	ldrb	r3, [r3, #0]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d1f5      	bne.n	800acf4 <USBD_GetLen+0x12>
  }

  return len;
 800ad08:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	3714      	adds	r7, #20
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad14:	4770      	bx	lr

0800ad16 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ad16:	b580      	push	{r7, lr}
 800ad18:	b084      	sub	sp, #16
 800ad1a:	af00      	add	r7, sp, #0
 800ad1c:	60f8      	str	r0, [r7, #12]
 800ad1e:	60b9      	str	r1, [r7, #8]
 800ad20:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	2202      	movs	r2, #2
 800ad26:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	687a      	ldr	r2, [r7, #4]
 800ad2e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	687a      	ldr	r2, [r7, #4]
 800ad34:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	68ba      	ldr	r2, [r7, #8]
 800ad3a:	2100      	movs	r1, #0
 800ad3c:	68f8      	ldr	r0, [r7, #12]
 800ad3e:	f000 faca 	bl	800b2d6 <USBD_LL_Transmit>

  return USBD_OK;
 800ad42:	2300      	movs	r3, #0
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3710      	adds	r7, #16
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}

0800ad4c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b084      	sub	sp, #16
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	60f8      	str	r0, [r7, #12]
 800ad54:	60b9      	str	r1, [r7, #8]
 800ad56:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	68ba      	ldr	r2, [r7, #8]
 800ad5c:	2100      	movs	r1, #0
 800ad5e:	68f8      	ldr	r0, [r7, #12]
 800ad60:	f000 fab9 	bl	800b2d6 <USBD_LL_Transmit>

  return USBD_OK;
 800ad64:	2300      	movs	r3, #0
}
 800ad66:	4618      	mov	r0, r3
 800ad68:	3710      	adds	r7, #16
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}

0800ad6e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ad6e:	b580      	push	{r7, lr}
 800ad70:	b084      	sub	sp, #16
 800ad72:	af00      	add	r7, sp, #0
 800ad74:	60f8      	str	r0, [r7, #12]
 800ad76:	60b9      	str	r1, [r7, #8]
 800ad78:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	2203      	movs	r2, #3
 800ad7e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	687a      	ldr	r2, [r7, #4]
 800ad86:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	687a      	ldr	r2, [r7, #4]
 800ad8e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	68ba      	ldr	r2, [r7, #8]
 800ad96:	2100      	movs	r1, #0
 800ad98:	68f8      	ldr	r0, [r7, #12]
 800ad9a:	f000 fabd 	bl	800b318 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ad9e:	2300      	movs	r3, #0
}
 800ada0:	4618      	mov	r0, r3
 800ada2:	3710      	adds	r7, #16
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd80      	pop	{r7, pc}

0800ada8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b084      	sub	sp, #16
 800adac:	af00      	add	r7, sp, #0
 800adae:	60f8      	str	r0, [r7, #12]
 800adb0:	60b9      	str	r1, [r7, #8]
 800adb2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	68ba      	ldr	r2, [r7, #8]
 800adb8:	2100      	movs	r1, #0
 800adba:	68f8      	ldr	r0, [r7, #12]
 800adbc:	f000 faac 	bl	800b318 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800adc0:	2300      	movs	r3, #0
}
 800adc2:	4618      	mov	r0, r3
 800adc4:	3710      	adds	r7, #16
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}

0800adca <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800adca:	b580      	push	{r7, lr}
 800adcc:	b082      	sub	sp, #8
 800adce:	af00      	add	r7, sp, #0
 800add0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	2204      	movs	r2, #4
 800add6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800adda:	2300      	movs	r3, #0
 800addc:	2200      	movs	r2, #0
 800adde:	2100      	movs	r1, #0
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f000 fa78 	bl	800b2d6 <USBD_LL_Transmit>

  return USBD_OK;
 800ade6:	2300      	movs	r3, #0
}
 800ade8:	4618      	mov	r0, r3
 800adea:	3708      	adds	r7, #8
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}

0800adf0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b082      	sub	sp, #8
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2205      	movs	r2, #5
 800adfc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ae00:	2300      	movs	r3, #0
 800ae02:	2200      	movs	r2, #0
 800ae04:	2100      	movs	r1, #0
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f000 fa86 	bl	800b318 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ae0c:	2300      	movs	r3, #0
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3708      	adds	r7, #8
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}

0800ae16 <HAL_PCDEx_SetTxFiFoInBytes>:
/* Private functions ---------------------------------------------------------*/

/* USER CODE BEGIN 1 */
#if(!STM32F1_DEVICE)
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFoInBytes(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800ae16:	b580      	push	{r7, lr}
 800ae18:	b082      	sub	sp, #8
 800ae1a:	af00      	add	r7, sp, #0
 800ae1c:	6078      	str	r0, [r7, #4]
 800ae1e:	460b      	mov	r3, r1
 800ae20:	70fb      	strb	r3, [r7, #3]
 800ae22:	4613      	mov	r3, r2
 800ae24:	803b      	strh	r3, [r7, #0]
	return HAL_PCDEx_SetTxFiFo(hpcd, fifo, (size/4));
 800ae26:	883b      	ldrh	r3, [r7, #0]
 800ae28:	089b      	lsrs	r3, r3, #2
 800ae2a:	b29a      	uxth	r2, r3
 800ae2c:	78fb      	ldrb	r3, [r7, #3]
 800ae2e:	4619      	mov	r1, r3
 800ae30:	6878      	ldr	r0, [r7, #4]
 800ae32:	f7f9 f8ad 	bl	8003f90 <HAL_PCDEx_SetTxFiFo>
 800ae36:	4603      	mov	r3, r0
}
 800ae38:	4618      	mov	r0, r3
 800ae3a:	3708      	adds	r7, #8
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}

0800ae40 <HAL_PCDEx_SetRxFiFoInBytes>:

HAL_StatusTypeDef HAL_PCDEx_SetRxFiFoInBytes(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b082      	sub	sp, #8
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
 800ae48:	460b      	mov	r3, r1
 800ae4a:	807b      	strh	r3, [r7, #2]
	return HAL_PCDEx_SetRxFiFo(hpcd, (size/4));
 800ae4c:	887b      	ldrh	r3, [r7, #2]
 800ae4e:	089b      	lsrs	r3, r3, #2
 800ae50:	b29b      	uxth	r3, r3
 800ae52:	4619      	mov	r1, r3
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f7f9 f8e2 	bl	800401e <HAL_PCDEx_SetRxFiFo>
 800ae5a:	4603      	mov	r3, r0
}
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	3708      	adds	r7, #8
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bd80      	pop	{r7, pc}

0800ae64 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b082      	sub	sp, #8
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef *)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800ae78:	4619      	mov	r1, r3
 800ae7a:	4610      	mov	r0, r2
 800ae7c:	f7fe fef7 	bl	8009c6e <USBD_LL_SetupStage>
}
 800ae80:	bf00      	nop
 800ae82:	3708      	adds	r7, #8
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}

0800ae88 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b082      	sub	sp, #8
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
 800ae90:	460b      	mov	r3, r1
 800ae92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ae9a:	78fa      	ldrb	r2, [r7, #3]
 800ae9c:	6879      	ldr	r1, [r7, #4]
 800ae9e:	4613      	mov	r3, r2
 800aea0:	00db      	lsls	r3, r3, #3
 800aea2:	4413      	add	r3, r2
 800aea4:	009b      	lsls	r3, r3, #2
 800aea6:	440b      	add	r3, r1
 800aea8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800aeac:	681a      	ldr	r2, [r3, #0]
 800aeae:	78fb      	ldrb	r3, [r7, #3]
 800aeb0:	4619      	mov	r1, r3
 800aeb2:	f7fe ff31 	bl	8009d18 <USBD_LL_DataOutStage>
}
 800aeb6:	bf00      	nop
 800aeb8:	3708      	adds	r7, #8
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}

0800aebe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aebe:	b580      	push	{r7, lr}
 800aec0:	b082      	sub	sp, #8
 800aec2:	af00      	add	r7, sp, #0
 800aec4:	6078      	str	r0, [r7, #4]
 800aec6:	460b      	mov	r3, r1
 800aec8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800aed0:	78fa      	ldrb	r2, [r7, #3]
 800aed2:	6879      	ldr	r1, [r7, #4]
 800aed4:	4613      	mov	r3, r2
 800aed6:	00db      	lsls	r3, r3, #3
 800aed8:	4413      	add	r3, r2
 800aeda:	009b      	lsls	r3, r3, #2
 800aedc:	440b      	add	r3, r1
 800aede:	3320      	adds	r3, #32
 800aee0:	681a      	ldr	r2, [r3, #0]
 800aee2:	78fb      	ldrb	r3, [r7, #3]
 800aee4:	4619      	mov	r1, r3
 800aee6:	f7fe ff7a 	bl	8009dde <USBD_LL_DataInStage>
}
 800aeea:	bf00      	nop
 800aeec:	3708      	adds	r7, #8
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}

0800aef2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aef2:	b580      	push	{r7, lr}
 800aef4:	b082      	sub	sp, #8
 800aef6:	af00      	add	r7, sp, #0
 800aef8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef *)hpcd->pData);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800af00:	4618      	mov	r0, r3
 800af02:	f7ff f889 	bl	800a018 <USBD_LL_SOF>
}
 800af06:	bf00      	nop
 800af08:	3708      	adds	r7, #8
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}

0800af0e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af0e:	b580      	push	{r7, lr}
 800af10:	b084      	sub	sp, #16
 800af12:	af00      	add	r7, sp, #0
 800af14:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800af16:	2301      	movs	r3, #1
 800af18:	73fb      	strb	r3, [r7, #15]

  if (hpcd->Init.speed == PCD_SPEED_FULL)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	79db      	ldrb	r3, [r3, #7]
 800af1e:	2b02      	cmp	r3, #2
 800af20:	d102      	bne.n	800af28 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_FULL; 
 800af22:	2301      	movs	r3, #1
 800af24:	73fb      	strb	r3, [r7, #15]
 800af26:	e008      	b.n	800af3a <HAL_PCD_ResetCallback+0x2c>
  }
  #if(!STM32F1_DEVICE)
  else if (hpcd->Init.speed == PCD_SPEED_HIGH)
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	79db      	ldrb	r3, [r3, #7]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d102      	bne.n	800af36 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_HIGH;
 800af30:	2300      	movs	r3, #0
 800af32:	73fb      	strb	r3, [r7, #15]
 800af34:	e001      	b.n	800af3a <HAL_PCD_ResetCallback+0x2c>
  }
  #endif
  else
  {
    Error_Handler();
 800af36:	f7f5 fd8f 	bl	8000a58 <Error_Handler>
  }
  /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef *)hpcd->pData, speed);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800af40:	7bfa      	ldrb	r2, [r7, #15]
 800af42:	4611      	mov	r1, r2
 800af44:	4618      	mov	r0, r3
 800af46:	f7ff f829 	bl	8009f9c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef *)hpcd->pData);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800af50:	4618      	mov	r0, r3
 800af52:	f7fe ffda 	bl	8009f0a <USBD_LL_Reset>
}
 800af56:	bf00      	nop
 800af58:	3710      	adds	r7, #16
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}
	...

0800af60 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b082      	sub	sp, #8
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef *)hpcd->pData);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800af6e:	4618      	mov	r0, r3
 800af70:	f7ff f824 	bl	8009fbc <USBD_LL_Suspend>
#if (!STM32F1_DEVICE)
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	687a      	ldr	r2, [r7, #4]
 800af80:	6812      	ldr	r2, [r2, #0]
 800af82:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800af86:	f043 0301 	orr.w	r3, r3, #1
 800af8a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	7adb      	ldrb	r3, [r3, #11]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d005      	beq.n	800afa0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800af94:	4b04      	ldr	r3, [pc, #16]	@ (800afa8 <HAL_PCD_SuspendCallback+0x48>)
 800af96:	691b      	ldr	r3, [r3, #16]
 800af98:	4a03      	ldr	r2, [pc, #12]	@ (800afa8 <HAL_PCD_SuspendCallback+0x48>)
 800af9a:	f043 0306 	orr.w	r3, r3, #6
 800af9e:	6113      	str	r3, [r2, #16]
  }
#endif
  /* USER CODE END 2 */
}
 800afa0:	bf00      	nop
 800afa2:	3708      	adds	r7, #8
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bd80      	pop	{r7, pc}
 800afa8:	e000ed00 	.word	0xe000ed00

0800afac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b082      	sub	sp, #8
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef *)hpcd->pData);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800afba:	4618      	mov	r0, r3
 800afbc:	f7ff f814 	bl	8009fe8 <USBD_LL_Resume>
}
 800afc0:	bf00      	nop
 800afc2:	3708      	adds	r7, #8
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}

0800afc8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b082      	sub	sp, #8
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
 800afd0:	460b      	mov	r3, r1
 800afd2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800afda:	78fa      	ldrb	r2, [r7, #3]
 800afdc:	4611      	mov	r1, r2
 800afde:	4618      	mov	r0, r3
 800afe0:	f7ff f862 	bl	800a0a8 <USBD_LL_IsoOUTIncomplete>
}
 800afe4:	bf00      	nop
 800afe6:	3708      	adds	r7, #8
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}

0800afec <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b082      	sub	sp, #8
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
 800aff4:	460b      	mov	r3, r1
 800aff6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800affe:	78fa      	ldrb	r2, [r7, #3]
 800b000:	4611      	mov	r1, r2
 800b002:	4618      	mov	r0, r3
 800b004:	f7ff f82a 	bl	800a05c <USBD_LL_IsoINIncomplete>
}
 800b008:	bf00      	nop
 800b00a:	3708      	adds	r7, #8
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd80      	pop	{r7, pc}

0800b010 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b082      	sub	sp, #8
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef *)hpcd->pData);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b01e:	4618      	mov	r0, r3
 800b020:	f7ff f868 	bl	800a0f4 <USBD_LL_DevConnected>
}
 800b024:	bf00      	nop
 800b026:	3708      	adds	r7, #8
 800b028:	46bd      	mov	sp, r7
 800b02a:	bd80      	pop	{r7, pc}

0800b02c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b082      	sub	sp, #8
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef *)hpcd->pData);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b03a:	4618      	mov	r0, r3
 800b03c:	f7ff f865 	bl	800a10a <USBD_LL_DevDisconnected>
}
 800b040:	bf00      	nop
 800b042:	3708      	adds	r7, #8
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}

0800b048 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b084      	sub	sp, #16
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
#else
  /**FULL SPEED USB */
#if (STM32F1_DEVICE) /** for STM32F1 or similar */
  hpcd_USB_OTG_PTR = &hpcd_USB_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
#else
  hpcd_USB_OTG_PTR = &hpcd_USB_OTG_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
 800b050:	4b27      	ldr	r3, [pc, #156]	@ (800b0f0 <USBD_LL_Init+0xa8>)
 800b052:	4a28      	ldr	r2, [pc, #160]	@ (800b0f4 <USBD_LL_Init+0xac>)
 800b054:	601a      	str	r2, [r3, #0]
#endif

  if (pdev->id == DEVICE_FS)
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	781b      	ldrb	r3, [r3, #0]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d143      	bne.n	800b0e6 <USBD_LL_Init+0x9e>
  {
    /* Link the driver to the stack. */
    hpcd_USB_OTG_PTR->pData = pdev;
 800b05e:	4b24      	ldr	r3, [pc, #144]	@ (800b0f0 <USBD_LL_Init+0xa8>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	687a      	ldr	r2, [r7, #4]
 800b064:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
    pdev->pData = hpcd_USB_OTG_PTR;
 800b068:	4b21      	ldr	r3, [pc, #132]	@ (800b0f0 <USBD_LL_Init+0xa8>)
 800b06a:	681a      	ldr	r2, [r3, #0]
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f8c3 2310 	str.w	r2, [r3, #784]	@ 0x310
      pma_track += 8;
    }
#endif
#else /** if HAL_PCDEx_SetRxFiFo() is used by HAL driver */

    HAL_PCDEx_SetRxFiFoInBytes(hpcd_USB_OTG_PTR, 512); // ALL OUT EP Buffer
 800b072:	4b1f      	ldr	r3, [pc, #124]	@ (800b0f0 <USBD_LL_Init+0xa8>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b07a:	4618      	mov	r0, r3
 800b07c:	f7ff fee0 	bl	800ae40 <HAL_PCDEx_SetRxFiFoInBytes>

    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, 0, 64); // EP0 IN
 800b080:	4b1b      	ldr	r3, [pc, #108]	@ (800b0f0 <USBD_LL_Init+0xa8>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	2240      	movs	r2, #64	@ 0x40
 800b086:	2100      	movs	r1, #0
 800b088:	4618      	mov	r0, r3
 800b08a:	f7ff fec4 	bl	800ae16 <HAL_PCDEx_SetTxFiFoInBytes>
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (HID_KEYBOARD_IN_EP & 0x7F), 64);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CUSTOM_HID_IN_EP & 0x7F), 64);
 800b08e:	4b18      	ldr	r3, [pc, #96]	@ (800b0f0 <USBD_LL_Init+0xa8>)
 800b090:	6818      	ldr	r0, [r3, #0]
 800b092:	4b19      	ldr	r3, [pc, #100]	@ (800b0f8 <USBD_LL_Init+0xb0>)
 800b094:	781b      	ldrb	r3, [r3, #0]
 800b096:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b09a:	b2db      	uxtb	r3, r3
 800b09c:	2240      	movs	r2, #64	@ 0x40
 800b09e:	4619      	mov	r1, r3
 800b0a0:	f7ff feb9 	bl	800ae16 <HAL_PCDEx_SetTxFiFoInBytes>
#endif
#if (USBD_USE_PRNTR == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (PRNT_IN_EP & 0x7F), 128);
#endif
#if (USBD_USE_CDC_ACM == 1)
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	73fb      	strb	r3, [r7, #15]
 800b0a8:	e01a      	b.n	800b0e0 <USBD_LL_Init+0x98>
    {
      HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CDC_IN_EP[i] & 0x7F), 128);
 800b0aa:	4b11      	ldr	r3, [pc, #68]	@ (800b0f0 <USBD_LL_Init+0xa8>)
 800b0ac:	6818      	ldr	r0, [r3, #0]
 800b0ae:	7bfb      	ldrb	r3, [r7, #15]
 800b0b0:	4a12      	ldr	r2, [pc, #72]	@ (800b0fc <USBD_LL_Init+0xb4>)
 800b0b2:	5cd3      	ldrb	r3, [r2, r3]
 800b0b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b0b8:	b2db      	uxtb	r3, r3
 800b0ba:	2280      	movs	r2, #128	@ 0x80
 800b0bc:	4619      	mov	r1, r3
 800b0be:	f7ff feaa 	bl	800ae16 <HAL_PCDEx_SetTxFiFoInBytes>
      HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CDC_CMD_EP[i] & 0x7F), 64);
 800b0c2:	4b0b      	ldr	r3, [pc, #44]	@ (800b0f0 <USBD_LL_Init+0xa8>)
 800b0c4:	6818      	ldr	r0, [r3, #0]
 800b0c6:	7bfb      	ldrb	r3, [r7, #15]
 800b0c8:	4a0d      	ldr	r2, [pc, #52]	@ (800b100 <USBD_LL_Init+0xb8>)
 800b0ca:	5cd3      	ldrb	r3, [r2, r3]
 800b0cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b0d0:	b2db      	uxtb	r3, r3
 800b0d2:	2240      	movs	r2, #64	@ 0x40
 800b0d4:	4619      	mov	r1, r3
 800b0d6:	f7ff fe9e 	bl	800ae16 <HAL_PCDEx_SetTxFiFoInBytes>
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800b0da:	7bfb      	ldrb	r3, [r7, #15]
 800b0dc:	3301      	adds	r3, #1
 800b0de:	73fb      	strb	r3, [r7, #15]
 800b0e0:	7bfb      	ldrb	r3, [r7, #15]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d0e1      	beq.n	800b0aa <USBD_LL_Init+0x62>
  HAL_PCD_RegisterDataOutStageCallback(hpcd_USB_OTG_PTR, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(hpcd_USB_OTG_PTR, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  return USBD_OK;
 800b0e6:	2300      	movs	r3, #0
}
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	3710      	adds	r7, #16
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bd80      	pop	{r7, pc}
 800b0f0:	200025f8 	.word	0x200025f8
 800b0f4:	200005ac 	.word	0x200005ac
 800b0f8:	2000024e 	.word	0x2000024e
 800b0fc:	20002250 	.word	0x20002250
 800b100:	20002258 	.word	0x20002258

0800b104 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b084      	sub	sp, #16
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b10c:	2300      	movs	r3, #0
 800b10e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b110:	2300      	movs	r3, #0
 800b112:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800b11a:	4618      	mov	r0, r3
 800b11c:	f7f7 fe59 	bl	8002dd2 <HAL_PCD_Start>
 800b120:	4603      	mov	r3, r0
 800b122:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800b124:	7bfb      	ldrb	r3, [r7, #15]
 800b126:	4618      	mov	r0, r3
 800b128:	f000 f92a 	bl	800b380 <USBD_Get_USB_Status>
 800b12c:	4603      	mov	r3, r0
 800b12e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b130:	7bbb      	ldrb	r3, [r7, #14]
}
 800b132:	4618      	mov	r0, r3
 800b134:	3710      	adds	r7, #16
 800b136:	46bd      	mov	sp, r7
 800b138:	bd80      	pop	{r7, pc}

0800b13a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b13a:	b580      	push	{r7, lr}
 800b13c:	b084      	sub	sp, #16
 800b13e:	af00      	add	r7, sp, #0
 800b140:	6078      	str	r0, [r7, #4]
 800b142:	4608      	mov	r0, r1
 800b144:	4611      	mov	r1, r2
 800b146:	461a      	mov	r2, r3
 800b148:	4603      	mov	r3, r0
 800b14a:	70fb      	strb	r3, [r7, #3]
 800b14c:	460b      	mov	r3, r1
 800b14e:	70bb      	strb	r3, [r7, #2]
 800b150:	4613      	mov	r3, r2
 800b152:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b154:	2300      	movs	r3, #0
 800b156:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b158:	2300      	movs	r3, #0
 800b15a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 800b162:	78bb      	ldrb	r3, [r7, #2]
 800b164:	883a      	ldrh	r2, [r7, #0]
 800b166:	78f9      	ldrb	r1, [r7, #3]
 800b168:	f7f8 fb2d 	bl	80037c6 <HAL_PCD_EP_Open>
 800b16c:	4603      	mov	r3, r0
 800b16e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800b170:	7bfb      	ldrb	r3, [r7, #15]
 800b172:	4618      	mov	r0, r3
 800b174:	f000 f904 	bl	800b380 <USBD_Get_USB_Status>
 800b178:	4603      	mov	r3, r0
 800b17a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b17c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b17e:	4618      	mov	r0, r3
 800b180:	3710      	adds	r7, #16
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}

0800b186 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b186:	b580      	push	{r7, lr}
 800b188:	b084      	sub	sp, #16
 800b18a:	af00      	add	r7, sp, #0
 800b18c:	6078      	str	r0, [r7, #4]
 800b18e:	460b      	mov	r3, r1
 800b190:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b192:	2300      	movs	r3, #0
 800b194:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b196:	2300      	movs	r3, #0
 800b198:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800b1a0:	78fa      	ldrb	r2, [r7, #3]
 800b1a2:	4611      	mov	r1, r2
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f7f8 fb78 	bl	800389a <HAL_PCD_EP_Close>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800b1ae:	7bfb      	ldrb	r3, [r7, #15]
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	f000 f8e5 	bl	800b380 <USBD_Get_USB_Status>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b1ba:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1bc:	4618      	mov	r0, r3
 800b1be:	3710      	adds	r7, #16
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}

0800b1c4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b084      	sub	sp, #16
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
 800b1cc:	460b      	mov	r3, r1
 800b1ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800b1de:	78fa      	ldrb	r2, [r7, #3]
 800b1e0:	4611      	mov	r1, r2
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	f7f8 fc30 	bl	8003a48 <HAL_PCD_EP_SetStall>
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800b1ec:	7bfb      	ldrb	r3, [r7, #15]
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f000 f8c6 	bl	800b380 <USBD_Get_USB_Status>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b1f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3710      	adds	r7, #16
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}

0800b202 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b202:	b580      	push	{r7, lr}
 800b204:	b084      	sub	sp, #16
 800b206:	af00      	add	r7, sp, #0
 800b208:	6078      	str	r0, [r7, #4]
 800b20a:	460b      	mov	r3, r1
 800b20c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b20e:	2300      	movs	r3, #0
 800b210:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b212:	2300      	movs	r3, #0
 800b214:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800b21c:	78fa      	ldrb	r2, [r7, #3]
 800b21e:	4611      	mov	r1, r2
 800b220:	4618      	mov	r0, r3
 800b222:	f7f8 fc74 	bl	8003b0e <HAL_PCD_EP_ClrStall>
 800b226:	4603      	mov	r3, r0
 800b228:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800b22a:	7bfb      	ldrb	r3, [r7, #15]
 800b22c:	4618      	mov	r0, r3
 800b22e:	f000 f8a7 	bl	800b380 <USBD_Get_USB_Status>
 800b232:	4603      	mov	r3, r0
 800b234:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b236:	7bbb      	ldrb	r3, [r7, #14]
}
 800b238:	4618      	mov	r0, r3
 800b23a:	3710      	adds	r7, #16
 800b23c:	46bd      	mov	sp, r7
 800b23e:	bd80      	pop	{r7, pc}

0800b240 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b240:	b480      	push	{r7}
 800b242:	b085      	sub	sp, #20
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
 800b248:	460b      	mov	r3, r1
 800b24a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800b252:	60fb      	str	r3, [r7, #12]

  if ((ep_addr & 0x80) == 0x80)
 800b254:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	da0b      	bge.n	800b274 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b25c:	78fb      	ldrb	r3, [r7, #3]
 800b25e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b262:	68f9      	ldr	r1, [r7, #12]
 800b264:	4613      	mov	r3, r2
 800b266:	00db      	lsls	r3, r3, #3
 800b268:	4413      	add	r3, r2
 800b26a:	009b      	lsls	r3, r3, #2
 800b26c:	440b      	add	r3, r1
 800b26e:	3316      	adds	r3, #22
 800b270:	781b      	ldrb	r3, [r3, #0]
 800b272:	e00b      	b.n	800b28c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b274:	78fb      	ldrb	r3, [r7, #3]
 800b276:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b27a:	68f9      	ldr	r1, [r7, #12]
 800b27c:	4613      	mov	r3, r2
 800b27e:	00db      	lsls	r3, r3, #3
 800b280:	4413      	add	r3, r2
 800b282:	009b      	lsls	r3, r3, #2
 800b284:	440b      	add	r3, r1
 800b286:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800b28a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b28c:	4618      	mov	r0, r3
 800b28e:	3714      	adds	r7, #20
 800b290:	46bd      	mov	sp, r7
 800b292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b296:	4770      	bx	lr

0800b298 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b084      	sub	sp, #16
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
 800b2a0:	460b      	mov	r3, r1
 800b2a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800b2b2:	78fa      	ldrb	r2, [r7, #3]
 800b2b4:	4611      	mov	r1, r2
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f7f8 fa61 	bl	800377e <HAL_PCD_SetAddress>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800b2c0:	7bfb      	ldrb	r3, [r7, #15]
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	f000 f85c 	bl	800b380 <USBD_Get_USB_Status>
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b2cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	3710      	adds	r7, #16
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}

0800b2d6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b2d6:	b580      	push	{r7, lr}
 800b2d8:	b086      	sub	sp, #24
 800b2da:	af00      	add	r7, sp, #0
 800b2dc:	60f8      	str	r0, [r7, #12]
 800b2de:	607a      	str	r2, [r7, #4]
 800b2e0:	603b      	str	r3, [r7, #0]
 800b2e2:	460b      	mov	r3, r1
 800b2e4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 800b2f4:	7af9      	ldrb	r1, [r7, #11]
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	687a      	ldr	r2, [r7, #4]
 800b2fa:	f7f8 fb6b 	bl	80039d4 <HAL_PCD_EP_Transmit>
 800b2fe:	4603      	mov	r3, r0
 800b300:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 800b302:	7dfb      	ldrb	r3, [r7, #23]
 800b304:	4618      	mov	r0, r3
 800b306:	f000 f83b 	bl	800b380 <USBD_Get_USB_Status>
 800b30a:	4603      	mov	r3, r0
 800b30c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b30e:	7dbb      	ldrb	r3, [r7, #22]
}
 800b310:	4618      	mov	r0, r3
 800b312:	3718      	adds	r7, #24
 800b314:	46bd      	mov	sp, r7
 800b316:	bd80      	pop	{r7, pc}

0800b318 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b086      	sub	sp, #24
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	60f8      	str	r0, [r7, #12]
 800b320:	607a      	str	r2, [r7, #4]
 800b322:	603b      	str	r3, [r7, #0]
 800b324:	460b      	mov	r3, r1
 800b326:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b328:	2300      	movs	r3, #0
 800b32a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b32c:	2300      	movs	r3, #0
 800b32e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 800b336:	7af9      	ldrb	r1, [r7, #11]
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	687a      	ldr	r2, [r7, #4]
 800b33c:	f7f8 faf7 	bl	800392e <HAL_PCD_EP_Receive>
 800b340:	4603      	mov	r3, r0
 800b342:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 800b344:	7dfb      	ldrb	r3, [r7, #23]
 800b346:	4618      	mov	r0, r3
 800b348:	f000 f81a 	bl	800b380 <USBD_Get_USB_Status>
 800b34c:	4603      	mov	r3, r0
 800b34e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b350:	7dbb      	ldrb	r3, [r7, #22]
}
 800b352:	4618      	mov	r0, r3
 800b354:	3718      	adds	r7, #24
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}

0800b35a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b35a:	b580      	push	{r7, lr}
 800b35c:	b082      	sub	sp, #8
 800b35e:	af00      	add	r7, sp, #0
 800b360:	6078      	str	r0, [r7, #4]
 800b362:	460b      	mov	r3, r1
 800b364:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef *)pdev->pData, ep_addr);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800b36c:	78fa      	ldrb	r2, [r7, #3]
 800b36e:	4611      	mov	r1, r2
 800b370:	4618      	mov	r0, r3
 800b372:	f7f8 fb17 	bl	80039a4 <HAL_PCD_EP_GetRxCount>
 800b376:	4603      	mov	r3, r0
}
 800b378:	4618      	mov	r0, r3
 800b37a:	3708      	adds	r7, #8
 800b37c:	46bd      	mov	sp, r7
 800b37e:	bd80      	pop	{r7, pc}

0800b380 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b380:	b480      	push	{r7}
 800b382:	b085      	sub	sp, #20
 800b384:	af00      	add	r7, sp, #0
 800b386:	4603      	mov	r3, r0
 800b388:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b38a:	2300      	movs	r3, #0
 800b38c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b38e:	79fb      	ldrb	r3, [r7, #7]
 800b390:	2b03      	cmp	r3, #3
 800b392:	d817      	bhi.n	800b3c4 <USBD_Get_USB_Status+0x44>
 800b394:	a201      	add	r2, pc, #4	@ (adr r2, 800b39c <USBD_Get_USB_Status+0x1c>)
 800b396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b39a:	bf00      	nop
 800b39c:	0800b3ad 	.word	0x0800b3ad
 800b3a0:	0800b3b3 	.word	0x0800b3b3
 800b3a4:	0800b3b9 	.word	0x0800b3b9
 800b3a8:	0800b3bf 	.word	0x0800b3bf
  {
  case HAL_OK:
    usb_status = USBD_OK;
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	73fb      	strb	r3, [r7, #15]
    break;
 800b3b0:	e00b      	b.n	800b3ca <USBD_Get_USB_Status+0x4a>
  case HAL_ERROR:
    usb_status = USBD_FAIL;
 800b3b2:	2303      	movs	r3, #3
 800b3b4:	73fb      	strb	r3, [r7, #15]
    break;
 800b3b6:	e008      	b.n	800b3ca <USBD_Get_USB_Status+0x4a>
  case HAL_BUSY:
    usb_status = USBD_BUSY;
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	73fb      	strb	r3, [r7, #15]
    break;
 800b3bc:	e005      	b.n	800b3ca <USBD_Get_USB_Status+0x4a>
  case HAL_TIMEOUT:
    usb_status = USBD_FAIL;
 800b3be:	2303      	movs	r3, #3
 800b3c0:	73fb      	strb	r3, [r7, #15]
    break;
 800b3c2:	e002      	b.n	800b3ca <USBD_Get_USB_Status+0x4a>
  default:
    usb_status = USBD_FAIL;
 800b3c4:	2303      	movs	r3, #3
 800b3c6:	73fb      	strb	r3, [r7, #15]
    break;
 800b3c8:	bf00      	nop
  }
  return usb_status;
 800b3ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	3714      	adds	r7, #20
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d6:	4770      	bx	lr

0800b3d8 <sniprintf>:
 800b3d8:	b40c      	push	{r2, r3}
 800b3da:	b530      	push	{r4, r5, lr}
 800b3dc:	4b18      	ldr	r3, [pc, #96]	@ (800b440 <sniprintf+0x68>)
 800b3de:	1e0c      	subs	r4, r1, #0
 800b3e0:	681d      	ldr	r5, [r3, #0]
 800b3e2:	b09d      	sub	sp, #116	@ 0x74
 800b3e4:	da08      	bge.n	800b3f8 <sniprintf+0x20>
 800b3e6:	238b      	movs	r3, #139	@ 0x8b
 800b3e8:	602b      	str	r3, [r5, #0]
 800b3ea:	f04f 30ff 	mov.w	r0, #4294967295
 800b3ee:	b01d      	add	sp, #116	@ 0x74
 800b3f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b3f4:	b002      	add	sp, #8
 800b3f6:	4770      	bx	lr
 800b3f8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b3fc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b400:	f04f 0300 	mov.w	r3, #0
 800b404:	931b      	str	r3, [sp, #108]	@ 0x6c
 800b406:	bf14      	ite	ne
 800b408:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b40c:	4623      	moveq	r3, r4
 800b40e:	9304      	str	r3, [sp, #16]
 800b410:	9307      	str	r3, [sp, #28]
 800b412:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b416:	9002      	str	r0, [sp, #8]
 800b418:	9006      	str	r0, [sp, #24]
 800b41a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b41e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b420:	ab21      	add	r3, sp, #132	@ 0x84
 800b422:	a902      	add	r1, sp, #8
 800b424:	4628      	mov	r0, r5
 800b426:	9301      	str	r3, [sp, #4]
 800b428:	f000 f9a2 	bl	800b770 <_svfiprintf_r>
 800b42c:	1c43      	adds	r3, r0, #1
 800b42e:	bfbc      	itt	lt
 800b430:	238b      	movlt	r3, #139	@ 0x8b
 800b432:	602b      	strlt	r3, [r5, #0]
 800b434:	2c00      	cmp	r4, #0
 800b436:	d0da      	beq.n	800b3ee <sniprintf+0x16>
 800b438:	9b02      	ldr	r3, [sp, #8]
 800b43a:	2200      	movs	r2, #0
 800b43c:	701a      	strb	r2, [r3, #0]
 800b43e:	e7d6      	b.n	800b3ee <sniprintf+0x16>
 800b440:	20000328 	.word	0x20000328

0800b444 <memset>:
 800b444:	4402      	add	r2, r0
 800b446:	4603      	mov	r3, r0
 800b448:	4293      	cmp	r3, r2
 800b44a:	d100      	bne.n	800b44e <memset+0xa>
 800b44c:	4770      	bx	lr
 800b44e:	f803 1b01 	strb.w	r1, [r3], #1
 800b452:	e7f9      	b.n	800b448 <memset+0x4>

0800b454 <__errno>:
 800b454:	4b01      	ldr	r3, [pc, #4]	@ (800b45c <__errno+0x8>)
 800b456:	6818      	ldr	r0, [r3, #0]
 800b458:	4770      	bx	lr
 800b45a:	bf00      	nop
 800b45c:	20000328 	.word	0x20000328

0800b460 <__libc_init_array>:
 800b460:	b570      	push	{r4, r5, r6, lr}
 800b462:	4d0d      	ldr	r5, [pc, #52]	@ (800b498 <__libc_init_array+0x38>)
 800b464:	4c0d      	ldr	r4, [pc, #52]	@ (800b49c <__libc_init_array+0x3c>)
 800b466:	1b64      	subs	r4, r4, r5
 800b468:	10a4      	asrs	r4, r4, #2
 800b46a:	2600      	movs	r6, #0
 800b46c:	42a6      	cmp	r6, r4
 800b46e:	d109      	bne.n	800b484 <__libc_init_array+0x24>
 800b470:	4d0b      	ldr	r5, [pc, #44]	@ (800b4a0 <__libc_init_array+0x40>)
 800b472:	4c0c      	ldr	r4, [pc, #48]	@ (800b4a4 <__libc_init_array+0x44>)
 800b474:	f000 fc64 	bl	800bd40 <_init>
 800b478:	1b64      	subs	r4, r4, r5
 800b47a:	10a4      	asrs	r4, r4, #2
 800b47c:	2600      	movs	r6, #0
 800b47e:	42a6      	cmp	r6, r4
 800b480:	d105      	bne.n	800b48e <__libc_init_array+0x2e>
 800b482:	bd70      	pop	{r4, r5, r6, pc}
 800b484:	f855 3b04 	ldr.w	r3, [r5], #4
 800b488:	4798      	blx	r3
 800b48a:	3601      	adds	r6, #1
 800b48c:	e7ee      	b.n	800b46c <__libc_init_array+0xc>
 800b48e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b492:	4798      	blx	r3
 800b494:	3601      	adds	r6, #1
 800b496:	e7f2      	b.n	800b47e <__libc_init_array+0x1e>
 800b498:	0800be10 	.word	0x0800be10
 800b49c:	0800be10 	.word	0x0800be10
 800b4a0:	0800be10 	.word	0x0800be10
 800b4a4:	0800be14 	.word	0x0800be14

0800b4a8 <__retarget_lock_acquire_recursive>:
 800b4a8:	4770      	bx	lr

0800b4aa <__retarget_lock_release_recursive>:
 800b4aa:	4770      	bx	lr

0800b4ac <memcpy>:
 800b4ac:	440a      	add	r2, r1
 800b4ae:	4291      	cmp	r1, r2
 800b4b0:	f100 33ff 	add.w	r3, r0, #4294967295
 800b4b4:	d100      	bne.n	800b4b8 <memcpy+0xc>
 800b4b6:	4770      	bx	lr
 800b4b8:	b510      	push	{r4, lr}
 800b4ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b4be:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b4c2:	4291      	cmp	r1, r2
 800b4c4:	d1f9      	bne.n	800b4ba <memcpy+0xe>
 800b4c6:	bd10      	pop	{r4, pc}

0800b4c8 <_free_r>:
 800b4c8:	b538      	push	{r3, r4, r5, lr}
 800b4ca:	4605      	mov	r5, r0
 800b4cc:	2900      	cmp	r1, #0
 800b4ce:	d041      	beq.n	800b554 <_free_r+0x8c>
 800b4d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4d4:	1f0c      	subs	r4, r1, #4
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	bfb8      	it	lt
 800b4da:	18e4      	addlt	r4, r4, r3
 800b4dc:	f000 f8e0 	bl	800b6a0 <__malloc_lock>
 800b4e0:	4a1d      	ldr	r2, [pc, #116]	@ (800b558 <_free_r+0x90>)
 800b4e2:	6813      	ldr	r3, [r2, #0]
 800b4e4:	b933      	cbnz	r3, 800b4f4 <_free_r+0x2c>
 800b4e6:	6063      	str	r3, [r4, #4]
 800b4e8:	6014      	str	r4, [r2, #0]
 800b4ea:	4628      	mov	r0, r5
 800b4ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b4f0:	f000 b8dc 	b.w	800b6ac <__malloc_unlock>
 800b4f4:	42a3      	cmp	r3, r4
 800b4f6:	d908      	bls.n	800b50a <_free_r+0x42>
 800b4f8:	6820      	ldr	r0, [r4, #0]
 800b4fa:	1821      	adds	r1, r4, r0
 800b4fc:	428b      	cmp	r3, r1
 800b4fe:	bf01      	itttt	eq
 800b500:	6819      	ldreq	r1, [r3, #0]
 800b502:	685b      	ldreq	r3, [r3, #4]
 800b504:	1809      	addeq	r1, r1, r0
 800b506:	6021      	streq	r1, [r4, #0]
 800b508:	e7ed      	b.n	800b4e6 <_free_r+0x1e>
 800b50a:	461a      	mov	r2, r3
 800b50c:	685b      	ldr	r3, [r3, #4]
 800b50e:	b10b      	cbz	r3, 800b514 <_free_r+0x4c>
 800b510:	42a3      	cmp	r3, r4
 800b512:	d9fa      	bls.n	800b50a <_free_r+0x42>
 800b514:	6811      	ldr	r1, [r2, #0]
 800b516:	1850      	adds	r0, r2, r1
 800b518:	42a0      	cmp	r0, r4
 800b51a:	d10b      	bne.n	800b534 <_free_r+0x6c>
 800b51c:	6820      	ldr	r0, [r4, #0]
 800b51e:	4401      	add	r1, r0
 800b520:	1850      	adds	r0, r2, r1
 800b522:	4283      	cmp	r3, r0
 800b524:	6011      	str	r1, [r2, #0]
 800b526:	d1e0      	bne.n	800b4ea <_free_r+0x22>
 800b528:	6818      	ldr	r0, [r3, #0]
 800b52a:	685b      	ldr	r3, [r3, #4]
 800b52c:	6053      	str	r3, [r2, #4]
 800b52e:	4408      	add	r0, r1
 800b530:	6010      	str	r0, [r2, #0]
 800b532:	e7da      	b.n	800b4ea <_free_r+0x22>
 800b534:	d902      	bls.n	800b53c <_free_r+0x74>
 800b536:	230c      	movs	r3, #12
 800b538:	602b      	str	r3, [r5, #0]
 800b53a:	e7d6      	b.n	800b4ea <_free_r+0x22>
 800b53c:	6820      	ldr	r0, [r4, #0]
 800b53e:	1821      	adds	r1, r4, r0
 800b540:	428b      	cmp	r3, r1
 800b542:	bf04      	itt	eq
 800b544:	6819      	ldreq	r1, [r3, #0]
 800b546:	685b      	ldreq	r3, [r3, #4]
 800b548:	6063      	str	r3, [r4, #4]
 800b54a:	bf04      	itt	eq
 800b54c:	1809      	addeq	r1, r1, r0
 800b54e:	6021      	streq	r1, [r4, #0]
 800b550:	6054      	str	r4, [r2, #4]
 800b552:	e7ca      	b.n	800b4ea <_free_r+0x22>
 800b554:	bd38      	pop	{r3, r4, r5, pc}
 800b556:	bf00      	nop
 800b558:	20002740 	.word	0x20002740

0800b55c <sbrk_aligned>:
 800b55c:	b570      	push	{r4, r5, r6, lr}
 800b55e:	4e0f      	ldr	r6, [pc, #60]	@ (800b59c <sbrk_aligned+0x40>)
 800b560:	460c      	mov	r4, r1
 800b562:	6831      	ldr	r1, [r6, #0]
 800b564:	4605      	mov	r5, r0
 800b566:	b911      	cbnz	r1, 800b56e <sbrk_aligned+0x12>
 800b568:	f000 fba4 	bl	800bcb4 <_sbrk_r>
 800b56c:	6030      	str	r0, [r6, #0]
 800b56e:	4621      	mov	r1, r4
 800b570:	4628      	mov	r0, r5
 800b572:	f000 fb9f 	bl	800bcb4 <_sbrk_r>
 800b576:	1c43      	adds	r3, r0, #1
 800b578:	d103      	bne.n	800b582 <sbrk_aligned+0x26>
 800b57a:	f04f 34ff 	mov.w	r4, #4294967295
 800b57e:	4620      	mov	r0, r4
 800b580:	bd70      	pop	{r4, r5, r6, pc}
 800b582:	1cc4      	adds	r4, r0, #3
 800b584:	f024 0403 	bic.w	r4, r4, #3
 800b588:	42a0      	cmp	r0, r4
 800b58a:	d0f8      	beq.n	800b57e <sbrk_aligned+0x22>
 800b58c:	1a21      	subs	r1, r4, r0
 800b58e:	4628      	mov	r0, r5
 800b590:	f000 fb90 	bl	800bcb4 <_sbrk_r>
 800b594:	3001      	adds	r0, #1
 800b596:	d1f2      	bne.n	800b57e <sbrk_aligned+0x22>
 800b598:	e7ef      	b.n	800b57a <sbrk_aligned+0x1e>
 800b59a:	bf00      	nop
 800b59c:	2000273c 	.word	0x2000273c

0800b5a0 <_malloc_r>:
 800b5a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5a4:	1ccd      	adds	r5, r1, #3
 800b5a6:	f025 0503 	bic.w	r5, r5, #3
 800b5aa:	3508      	adds	r5, #8
 800b5ac:	2d0c      	cmp	r5, #12
 800b5ae:	bf38      	it	cc
 800b5b0:	250c      	movcc	r5, #12
 800b5b2:	2d00      	cmp	r5, #0
 800b5b4:	4606      	mov	r6, r0
 800b5b6:	db01      	blt.n	800b5bc <_malloc_r+0x1c>
 800b5b8:	42a9      	cmp	r1, r5
 800b5ba:	d904      	bls.n	800b5c6 <_malloc_r+0x26>
 800b5bc:	230c      	movs	r3, #12
 800b5be:	6033      	str	r3, [r6, #0]
 800b5c0:	2000      	movs	r0, #0
 800b5c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b69c <_malloc_r+0xfc>
 800b5ca:	f000 f869 	bl	800b6a0 <__malloc_lock>
 800b5ce:	f8d8 3000 	ldr.w	r3, [r8]
 800b5d2:	461c      	mov	r4, r3
 800b5d4:	bb44      	cbnz	r4, 800b628 <_malloc_r+0x88>
 800b5d6:	4629      	mov	r1, r5
 800b5d8:	4630      	mov	r0, r6
 800b5da:	f7ff ffbf 	bl	800b55c <sbrk_aligned>
 800b5de:	1c43      	adds	r3, r0, #1
 800b5e0:	4604      	mov	r4, r0
 800b5e2:	d158      	bne.n	800b696 <_malloc_r+0xf6>
 800b5e4:	f8d8 4000 	ldr.w	r4, [r8]
 800b5e8:	4627      	mov	r7, r4
 800b5ea:	2f00      	cmp	r7, #0
 800b5ec:	d143      	bne.n	800b676 <_malloc_r+0xd6>
 800b5ee:	2c00      	cmp	r4, #0
 800b5f0:	d04b      	beq.n	800b68a <_malloc_r+0xea>
 800b5f2:	6823      	ldr	r3, [r4, #0]
 800b5f4:	4639      	mov	r1, r7
 800b5f6:	4630      	mov	r0, r6
 800b5f8:	eb04 0903 	add.w	r9, r4, r3
 800b5fc:	f000 fb5a 	bl	800bcb4 <_sbrk_r>
 800b600:	4581      	cmp	r9, r0
 800b602:	d142      	bne.n	800b68a <_malloc_r+0xea>
 800b604:	6821      	ldr	r1, [r4, #0]
 800b606:	1a6d      	subs	r5, r5, r1
 800b608:	4629      	mov	r1, r5
 800b60a:	4630      	mov	r0, r6
 800b60c:	f7ff ffa6 	bl	800b55c <sbrk_aligned>
 800b610:	3001      	adds	r0, #1
 800b612:	d03a      	beq.n	800b68a <_malloc_r+0xea>
 800b614:	6823      	ldr	r3, [r4, #0]
 800b616:	442b      	add	r3, r5
 800b618:	6023      	str	r3, [r4, #0]
 800b61a:	f8d8 3000 	ldr.w	r3, [r8]
 800b61e:	685a      	ldr	r2, [r3, #4]
 800b620:	bb62      	cbnz	r2, 800b67c <_malloc_r+0xdc>
 800b622:	f8c8 7000 	str.w	r7, [r8]
 800b626:	e00f      	b.n	800b648 <_malloc_r+0xa8>
 800b628:	6822      	ldr	r2, [r4, #0]
 800b62a:	1b52      	subs	r2, r2, r5
 800b62c:	d420      	bmi.n	800b670 <_malloc_r+0xd0>
 800b62e:	2a0b      	cmp	r2, #11
 800b630:	d917      	bls.n	800b662 <_malloc_r+0xc2>
 800b632:	1961      	adds	r1, r4, r5
 800b634:	42a3      	cmp	r3, r4
 800b636:	6025      	str	r5, [r4, #0]
 800b638:	bf18      	it	ne
 800b63a:	6059      	strne	r1, [r3, #4]
 800b63c:	6863      	ldr	r3, [r4, #4]
 800b63e:	bf08      	it	eq
 800b640:	f8c8 1000 	streq.w	r1, [r8]
 800b644:	5162      	str	r2, [r4, r5]
 800b646:	604b      	str	r3, [r1, #4]
 800b648:	4630      	mov	r0, r6
 800b64a:	f000 f82f 	bl	800b6ac <__malloc_unlock>
 800b64e:	f104 000b 	add.w	r0, r4, #11
 800b652:	1d23      	adds	r3, r4, #4
 800b654:	f020 0007 	bic.w	r0, r0, #7
 800b658:	1ac2      	subs	r2, r0, r3
 800b65a:	bf1c      	itt	ne
 800b65c:	1a1b      	subne	r3, r3, r0
 800b65e:	50a3      	strne	r3, [r4, r2]
 800b660:	e7af      	b.n	800b5c2 <_malloc_r+0x22>
 800b662:	6862      	ldr	r2, [r4, #4]
 800b664:	42a3      	cmp	r3, r4
 800b666:	bf0c      	ite	eq
 800b668:	f8c8 2000 	streq.w	r2, [r8]
 800b66c:	605a      	strne	r2, [r3, #4]
 800b66e:	e7eb      	b.n	800b648 <_malloc_r+0xa8>
 800b670:	4623      	mov	r3, r4
 800b672:	6864      	ldr	r4, [r4, #4]
 800b674:	e7ae      	b.n	800b5d4 <_malloc_r+0x34>
 800b676:	463c      	mov	r4, r7
 800b678:	687f      	ldr	r7, [r7, #4]
 800b67a:	e7b6      	b.n	800b5ea <_malloc_r+0x4a>
 800b67c:	461a      	mov	r2, r3
 800b67e:	685b      	ldr	r3, [r3, #4]
 800b680:	42a3      	cmp	r3, r4
 800b682:	d1fb      	bne.n	800b67c <_malloc_r+0xdc>
 800b684:	2300      	movs	r3, #0
 800b686:	6053      	str	r3, [r2, #4]
 800b688:	e7de      	b.n	800b648 <_malloc_r+0xa8>
 800b68a:	230c      	movs	r3, #12
 800b68c:	6033      	str	r3, [r6, #0]
 800b68e:	4630      	mov	r0, r6
 800b690:	f000 f80c 	bl	800b6ac <__malloc_unlock>
 800b694:	e794      	b.n	800b5c0 <_malloc_r+0x20>
 800b696:	6005      	str	r5, [r0, #0]
 800b698:	e7d6      	b.n	800b648 <_malloc_r+0xa8>
 800b69a:	bf00      	nop
 800b69c:	20002740 	.word	0x20002740

0800b6a0 <__malloc_lock>:
 800b6a0:	4801      	ldr	r0, [pc, #4]	@ (800b6a8 <__malloc_lock+0x8>)
 800b6a2:	f7ff bf01 	b.w	800b4a8 <__retarget_lock_acquire_recursive>
 800b6a6:	bf00      	nop
 800b6a8:	20002738 	.word	0x20002738

0800b6ac <__malloc_unlock>:
 800b6ac:	4801      	ldr	r0, [pc, #4]	@ (800b6b4 <__malloc_unlock+0x8>)
 800b6ae:	f7ff befc 	b.w	800b4aa <__retarget_lock_release_recursive>
 800b6b2:	bf00      	nop
 800b6b4:	20002738 	.word	0x20002738

0800b6b8 <__ssputs_r>:
 800b6b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6bc:	688e      	ldr	r6, [r1, #8]
 800b6be:	461f      	mov	r7, r3
 800b6c0:	42be      	cmp	r6, r7
 800b6c2:	680b      	ldr	r3, [r1, #0]
 800b6c4:	4682      	mov	sl, r0
 800b6c6:	460c      	mov	r4, r1
 800b6c8:	4690      	mov	r8, r2
 800b6ca:	d82d      	bhi.n	800b728 <__ssputs_r+0x70>
 800b6cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b6d0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b6d4:	d026      	beq.n	800b724 <__ssputs_r+0x6c>
 800b6d6:	6965      	ldr	r5, [r4, #20]
 800b6d8:	6909      	ldr	r1, [r1, #16]
 800b6da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b6de:	eba3 0901 	sub.w	r9, r3, r1
 800b6e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b6e6:	1c7b      	adds	r3, r7, #1
 800b6e8:	444b      	add	r3, r9
 800b6ea:	106d      	asrs	r5, r5, #1
 800b6ec:	429d      	cmp	r5, r3
 800b6ee:	bf38      	it	cc
 800b6f0:	461d      	movcc	r5, r3
 800b6f2:	0553      	lsls	r3, r2, #21
 800b6f4:	d527      	bpl.n	800b746 <__ssputs_r+0x8e>
 800b6f6:	4629      	mov	r1, r5
 800b6f8:	f7ff ff52 	bl	800b5a0 <_malloc_r>
 800b6fc:	4606      	mov	r6, r0
 800b6fe:	b360      	cbz	r0, 800b75a <__ssputs_r+0xa2>
 800b700:	6921      	ldr	r1, [r4, #16]
 800b702:	464a      	mov	r2, r9
 800b704:	f7ff fed2 	bl	800b4ac <memcpy>
 800b708:	89a3      	ldrh	r3, [r4, #12]
 800b70a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b70e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b712:	81a3      	strh	r3, [r4, #12]
 800b714:	6126      	str	r6, [r4, #16]
 800b716:	6165      	str	r5, [r4, #20]
 800b718:	444e      	add	r6, r9
 800b71a:	eba5 0509 	sub.w	r5, r5, r9
 800b71e:	6026      	str	r6, [r4, #0]
 800b720:	60a5      	str	r5, [r4, #8]
 800b722:	463e      	mov	r6, r7
 800b724:	42be      	cmp	r6, r7
 800b726:	d900      	bls.n	800b72a <__ssputs_r+0x72>
 800b728:	463e      	mov	r6, r7
 800b72a:	6820      	ldr	r0, [r4, #0]
 800b72c:	4632      	mov	r2, r6
 800b72e:	4641      	mov	r1, r8
 800b730:	f000 faa6 	bl	800bc80 <memmove>
 800b734:	68a3      	ldr	r3, [r4, #8]
 800b736:	1b9b      	subs	r3, r3, r6
 800b738:	60a3      	str	r3, [r4, #8]
 800b73a:	6823      	ldr	r3, [r4, #0]
 800b73c:	4433      	add	r3, r6
 800b73e:	6023      	str	r3, [r4, #0]
 800b740:	2000      	movs	r0, #0
 800b742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b746:	462a      	mov	r2, r5
 800b748:	f000 fac4 	bl	800bcd4 <_realloc_r>
 800b74c:	4606      	mov	r6, r0
 800b74e:	2800      	cmp	r0, #0
 800b750:	d1e0      	bne.n	800b714 <__ssputs_r+0x5c>
 800b752:	6921      	ldr	r1, [r4, #16]
 800b754:	4650      	mov	r0, sl
 800b756:	f7ff feb7 	bl	800b4c8 <_free_r>
 800b75a:	230c      	movs	r3, #12
 800b75c:	f8ca 3000 	str.w	r3, [sl]
 800b760:	89a3      	ldrh	r3, [r4, #12]
 800b762:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b766:	81a3      	strh	r3, [r4, #12]
 800b768:	f04f 30ff 	mov.w	r0, #4294967295
 800b76c:	e7e9      	b.n	800b742 <__ssputs_r+0x8a>
	...

0800b770 <_svfiprintf_r>:
 800b770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b774:	4698      	mov	r8, r3
 800b776:	898b      	ldrh	r3, [r1, #12]
 800b778:	061b      	lsls	r3, r3, #24
 800b77a:	b09d      	sub	sp, #116	@ 0x74
 800b77c:	4607      	mov	r7, r0
 800b77e:	460d      	mov	r5, r1
 800b780:	4614      	mov	r4, r2
 800b782:	d510      	bpl.n	800b7a6 <_svfiprintf_r+0x36>
 800b784:	690b      	ldr	r3, [r1, #16]
 800b786:	b973      	cbnz	r3, 800b7a6 <_svfiprintf_r+0x36>
 800b788:	2140      	movs	r1, #64	@ 0x40
 800b78a:	f7ff ff09 	bl	800b5a0 <_malloc_r>
 800b78e:	6028      	str	r0, [r5, #0]
 800b790:	6128      	str	r0, [r5, #16]
 800b792:	b930      	cbnz	r0, 800b7a2 <_svfiprintf_r+0x32>
 800b794:	230c      	movs	r3, #12
 800b796:	603b      	str	r3, [r7, #0]
 800b798:	f04f 30ff 	mov.w	r0, #4294967295
 800b79c:	b01d      	add	sp, #116	@ 0x74
 800b79e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7a2:	2340      	movs	r3, #64	@ 0x40
 800b7a4:	616b      	str	r3, [r5, #20]
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b7aa:	2320      	movs	r3, #32
 800b7ac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b7b0:	f8cd 800c 	str.w	r8, [sp, #12]
 800b7b4:	2330      	movs	r3, #48	@ 0x30
 800b7b6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b954 <_svfiprintf_r+0x1e4>
 800b7ba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b7be:	f04f 0901 	mov.w	r9, #1
 800b7c2:	4623      	mov	r3, r4
 800b7c4:	469a      	mov	sl, r3
 800b7c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7ca:	b10a      	cbz	r2, 800b7d0 <_svfiprintf_r+0x60>
 800b7cc:	2a25      	cmp	r2, #37	@ 0x25
 800b7ce:	d1f9      	bne.n	800b7c4 <_svfiprintf_r+0x54>
 800b7d0:	ebba 0b04 	subs.w	fp, sl, r4
 800b7d4:	d00b      	beq.n	800b7ee <_svfiprintf_r+0x7e>
 800b7d6:	465b      	mov	r3, fp
 800b7d8:	4622      	mov	r2, r4
 800b7da:	4629      	mov	r1, r5
 800b7dc:	4638      	mov	r0, r7
 800b7de:	f7ff ff6b 	bl	800b6b8 <__ssputs_r>
 800b7e2:	3001      	adds	r0, #1
 800b7e4:	f000 80a7 	beq.w	800b936 <_svfiprintf_r+0x1c6>
 800b7e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b7ea:	445a      	add	r2, fp
 800b7ec:	9209      	str	r2, [sp, #36]	@ 0x24
 800b7ee:	f89a 3000 	ldrb.w	r3, [sl]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	f000 809f 	beq.w	800b936 <_svfiprintf_r+0x1c6>
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	f04f 32ff 	mov.w	r2, #4294967295
 800b7fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b802:	f10a 0a01 	add.w	sl, sl, #1
 800b806:	9304      	str	r3, [sp, #16]
 800b808:	9307      	str	r3, [sp, #28]
 800b80a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b80e:	931a      	str	r3, [sp, #104]	@ 0x68
 800b810:	4654      	mov	r4, sl
 800b812:	2205      	movs	r2, #5
 800b814:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b818:	484e      	ldr	r0, [pc, #312]	@ (800b954 <_svfiprintf_r+0x1e4>)
 800b81a:	f7f4 fcd9 	bl	80001d0 <memchr>
 800b81e:	9a04      	ldr	r2, [sp, #16]
 800b820:	b9d8      	cbnz	r0, 800b85a <_svfiprintf_r+0xea>
 800b822:	06d0      	lsls	r0, r2, #27
 800b824:	bf44      	itt	mi
 800b826:	2320      	movmi	r3, #32
 800b828:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b82c:	0711      	lsls	r1, r2, #28
 800b82e:	bf44      	itt	mi
 800b830:	232b      	movmi	r3, #43	@ 0x2b
 800b832:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b836:	f89a 3000 	ldrb.w	r3, [sl]
 800b83a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b83c:	d015      	beq.n	800b86a <_svfiprintf_r+0xfa>
 800b83e:	9a07      	ldr	r2, [sp, #28]
 800b840:	4654      	mov	r4, sl
 800b842:	2000      	movs	r0, #0
 800b844:	f04f 0c0a 	mov.w	ip, #10
 800b848:	4621      	mov	r1, r4
 800b84a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b84e:	3b30      	subs	r3, #48	@ 0x30
 800b850:	2b09      	cmp	r3, #9
 800b852:	d94b      	bls.n	800b8ec <_svfiprintf_r+0x17c>
 800b854:	b1b0      	cbz	r0, 800b884 <_svfiprintf_r+0x114>
 800b856:	9207      	str	r2, [sp, #28]
 800b858:	e014      	b.n	800b884 <_svfiprintf_r+0x114>
 800b85a:	eba0 0308 	sub.w	r3, r0, r8
 800b85e:	fa09 f303 	lsl.w	r3, r9, r3
 800b862:	4313      	orrs	r3, r2
 800b864:	9304      	str	r3, [sp, #16]
 800b866:	46a2      	mov	sl, r4
 800b868:	e7d2      	b.n	800b810 <_svfiprintf_r+0xa0>
 800b86a:	9b03      	ldr	r3, [sp, #12]
 800b86c:	1d19      	adds	r1, r3, #4
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	9103      	str	r1, [sp, #12]
 800b872:	2b00      	cmp	r3, #0
 800b874:	bfbb      	ittet	lt
 800b876:	425b      	neglt	r3, r3
 800b878:	f042 0202 	orrlt.w	r2, r2, #2
 800b87c:	9307      	strge	r3, [sp, #28]
 800b87e:	9307      	strlt	r3, [sp, #28]
 800b880:	bfb8      	it	lt
 800b882:	9204      	strlt	r2, [sp, #16]
 800b884:	7823      	ldrb	r3, [r4, #0]
 800b886:	2b2e      	cmp	r3, #46	@ 0x2e
 800b888:	d10a      	bne.n	800b8a0 <_svfiprintf_r+0x130>
 800b88a:	7863      	ldrb	r3, [r4, #1]
 800b88c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b88e:	d132      	bne.n	800b8f6 <_svfiprintf_r+0x186>
 800b890:	9b03      	ldr	r3, [sp, #12]
 800b892:	1d1a      	adds	r2, r3, #4
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	9203      	str	r2, [sp, #12]
 800b898:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b89c:	3402      	adds	r4, #2
 800b89e:	9305      	str	r3, [sp, #20]
 800b8a0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b964 <_svfiprintf_r+0x1f4>
 800b8a4:	7821      	ldrb	r1, [r4, #0]
 800b8a6:	2203      	movs	r2, #3
 800b8a8:	4650      	mov	r0, sl
 800b8aa:	f7f4 fc91 	bl	80001d0 <memchr>
 800b8ae:	b138      	cbz	r0, 800b8c0 <_svfiprintf_r+0x150>
 800b8b0:	9b04      	ldr	r3, [sp, #16]
 800b8b2:	eba0 000a 	sub.w	r0, r0, sl
 800b8b6:	2240      	movs	r2, #64	@ 0x40
 800b8b8:	4082      	lsls	r2, r0
 800b8ba:	4313      	orrs	r3, r2
 800b8bc:	3401      	adds	r4, #1
 800b8be:	9304      	str	r3, [sp, #16]
 800b8c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8c4:	4824      	ldr	r0, [pc, #144]	@ (800b958 <_svfiprintf_r+0x1e8>)
 800b8c6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b8ca:	2206      	movs	r2, #6
 800b8cc:	f7f4 fc80 	bl	80001d0 <memchr>
 800b8d0:	2800      	cmp	r0, #0
 800b8d2:	d036      	beq.n	800b942 <_svfiprintf_r+0x1d2>
 800b8d4:	4b21      	ldr	r3, [pc, #132]	@ (800b95c <_svfiprintf_r+0x1ec>)
 800b8d6:	bb1b      	cbnz	r3, 800b920 <_svfiprintf_r+0x1b0>
 800b8d8:	9b03      	ldr	r3, [sp, #12]
 800b8da:	3307      	adds	r3, #7
 800b8dc:	f023 0307 	bic.w	r3, r3, #7
 800b8e0:	3308      	adds	r3, #8
 800b8e2:	9303      	str	r3, [sp, #12]
 800b8e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8e6:	4433      	add	r3, r6
 800b8e8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b8ea:	e76a      	b.n	800b7c2 <_svfiprintf_r+0x52>
 800b8ec:	fb0c 3202 	mla	r2, ip, r2, r3
 800b8f0:	460c      	mov	r4, r1
 800b8f2:	2001      	movs	r0, #1
 800b8f4:	e7a8      	b.n	800b848 <_svfiprintf_r+0xd8>
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	3401      	adds	r4, #1
 800b8fa:	9305      	str	r3, [sp, #20]
 800b8fc:	4619      	mov	r1, r3
 800b8fe:	f04f 0c0a 	mov.w	ip, #10
 800b902:	4620      	mov	r0, r4
 800b904:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b908:	3a30      	subs	r2, #48	@ 0x30
 800b90a:	2a09      	cmp	r2, #9
 800b90c:	d903      	bls.n	800b916 <_svfiprintf_r+0x1a6>
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d0c6      	beq.n	800b8a0 <_svfiprintf_r+0x130>
 800b912:	9105      	str	r1, [sp, #20]
 800b914:	e7c4      	b.n	800b8a0 <_svfiprintf_r+0x130>
 800b916:	fb0c 2101 	mla	r1, ip, r1, r2
 800b91a:	4604      	mov	r4, r0
 800b91c:	2301      	movs	r3, #1
 800b91e:	e7f0      	b.n	800b902 <_svfiprintf_r+0x192>
 800b920:	ab03      	add	r3, sp, #12
 800b922:	9300      	str	r3, [sp, #0]
 800b924:	462a      	mov	r2, r5
 800b926:	4b0e      	ldr	r3, [pc, #56]	@ (800b960 <_svfiprintf_r+0x1f0>)
 800b928:	a904      	add	r1, sp, #16
 800b92a:	4638      	mov	r0, r7
 800b92c:	f3af 8000 	nop.w
 800b930:	1c42      	adds	r2, r0, #1
 800b932:	4606      	mov	r6, r0
 800b934:	d1d6      	bne.n	800b8e4 <_svfiprintf_r+0x174>
 800b936:	89ab      	ldrh	r3, [r5, #12]
 800b938:	065b      	lsls	r3, r3, #25
 800b93a:	f53f af2d 	bmi.w	800b798 <_svfiprintf_r+0x28>
 800b93e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b940:	e72c      	b.n	800b79c <_svfiprintf_r+0x2c>
 800b942:	ab03      	add	r3, sp, #12
 800b944:	9300      	str	r3, [sp, #0]
 800b946:	462a      	mov	r2, r5
 800b948:	4b05      	ldr	r3, [pc, #20]	@ (800b960 <_svfiprintf_r+0x1f0>)
 800b94a:	a904      	add	r1, sp, #16
 800b94c:	4638      	mov	r0, r7
 800b94e:	f000 f879 	bl	800ba44 <_printf_i>
 800b952:	e7ed      	b.n	800b930 <_svfiprintf_r+0x1c0>
 800b954:	0800bdd4 	.word	0x0800bdd4
 800b958:	0800bdde 	.word	0x0800bdde
 800b95c:	00000000 	.word	0x00000000
 800b960:	0800b6b9 	.word	0x0800b6b9
 800b964:	0800bdda 	.word	0x0800bdda

0800b968 <_printf_common>:
 800b968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b96c:	4616      	mov	r6, r2
 800b96e:	4698      	mov	r8, r3
 800b970:	688a      	ldr	r2, [r1, #8]
 800b972:	690b      	ldr	r3, [r1, #16]
 800b974:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b978:	4293      	cmp	r3, r2
 800b97a:	bfb8      	it	lt
 800b97c:	4613      	movlt	r3, r2
 800b97e:	6033      	str	r3, [r6, #0]
 800b980:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b984:	4607      	mov	r7, r0
 800b986:	460c      	mov	r4, r1
 800b988:	b10a      	cbz	r2, 800b98e <_printf_common+0x26>
 800b98a:	3301      	adds	r3, #1
 800b98c:	6033      	str	r3, [r6, #0]
 800b98e:	6823      	ldr	r3, [r4, #0]
 800b990:	0699      	lsls	r1, r3, #26
 800b992:	bf42      	ittt	mi
 800b994:	6833      	ldrmi	r3, [r6, #0]
 800b996:	3302      	addmi	r3, #2
 800b998:	6033      	strmi	r3, [r6, #0]
 800b99a:	6825      	ldr	r5, [r4, #0]
 800b99c:	f015 0506 	ands.w	r5, r5, #6
 800b9a0:	d106      	bne.n	800b9b0 <_printf_common+0x48>
 800b9a2:	f104 0a19 	add.w	sl, r4, #25
 800b9a6:	68e3      	ldr	r3, [r4, #12]
 800b9a8:	6832      	ldr	r2, [r6, #0]
 800b9aa:	1a9b      	subs	r3, r3, r2
 800b9ac:	42ab      	cmp	r3, r5
 800b9ae:	dc26      	bgt.n	800b9fe <_printf_common+0x96>
 800b9b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b9b4:	6822      	ldr	r2, [r4, #0]
 800b9b6:	3b00      	subs	r3, #0
 800b9b8:	bf18      	it	ne
 800b9ba:	2301      	movne	r3, #1
 800b9bc:	0692      	lsls	r2, r2, #26
 800b9be:	d42b      	bmi.n	800ba18 <_printf_common+0xb0>
 800b9c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b9c4:	4641      	mov	r1, r8
 800b9c6:	4638      	mov	r0, r7
 800b9c8:	47c8      	blx	r9
 800b9ca:	3001      	adds	r0, #1
 800b9cc:	d01e      	beq.n	800ba0c <_printf_common+0xa4>
 800b9ce:	6823      	ldr	r3, [r4, #0]
 800b9d0:	6922      	ldr	r2, [r4, #16]
 800b9d2:	f003 0306 	and.w	r3, r3, #6
 800b9d6:	2b04      	cmp	r3, #4
 800b9d8:	bf02      	ittt	eq
 800b9da:	68e5      	ldreq	r5, [r4, #12]
 800b9dc:	6833      	ldreq	r3, [r6, #0]
 800b9de:	1aed      	subeq	r5, r5, r3
 800b9e0:	68a3      	ldr	r3, [r4, #8]
 800b9e2:	bf0c      	ite	eq
 800b9e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b9e8:	2500      	movne	r5, #0
 800b9ea:	4293      	cmp	r3, r2
 800b9ec:	bfc4      	itt	gt
 800b9ee:	1a9b      	subgt	r3, r3, r2
 800b9f0:	18ed      	addgt	r5, r5, r3
 800b9f2:	2600      	movs	r6, #0
 800b9f4:	341a      	adds	r4, #26
 800b9f6:	42b5      	cmp	r5, r6
 800b9f8:	d11a      	bne.n	800ba30 <_printf_common+0xc8>
 800b9fa:	2000      	movs	r0, #0
 800b9fc:	e008      	b.n	800ba10 <_printf_common+0xa8>
 800b9fe:	2301      	movs	r3, #1
 800ba00:	4652      	mov	r2, sl
 800ba02:	4641      	mov	r1, r8
 800ba04:	4638      	mov	r0, r7
 800ba06:	47c8      	blx	r9
 800ba08:	3001      	adds	r0, #1
 800ba0a:	d103      	bne.n	800ba14 <_printf_common+0xac>
 800ba0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba14:	3501      	adds	r5, #1
 800ba16:	e7c6      	b.n	800b9a6 <_printf_common+0x3e>
 800ba18:	18e1      	adds	r1, r4, r3
 800ba1a:	1c5a      	adds	r2, r3, #1
 800ba1c:	2030      	movs	r0, #48	@ 0x30
 800ba1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ba22:	4422      	add	r2, r4
 800ba24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ba28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ba2c:	3302      	adds	r3, #2
 800ba2e:	e7c7      	b.n	800b9c0 <_printf_common+0x58>
 800ba30:	2301      	movs	r3, #1
 800ba32:	4622      	mov	r2, r4
 800ba34:	4641      	mov	r1, r8
 800ba36:	4638      	mov	r0, r7
 800ba38:	47c8      	blx	r9
 800ba3a:	3001      	adds	r0, #1
 800ba3c:	d0e6      	beq.n	800ba0c <_printf_common+0xa4>
 800ba3e:	3601      	adds	r6, #1
 800ba40:	e7d9      	b.n	800b9f6 <_printf_common+0x8e>
	...

0800ba44 <_printf_i>:
 800ba44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ba48:	7e0f      	ldrb	r7, [r1, #24]
 800ba4a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ba4c:	2f78      	cmp	r7, #120	@ 0x78
 800ba4e:	4691      	mov	r9, r2
 800ba50:	4680      	mov	r8, r0
 800ba52:	460c      	mov	r4, r1
 800ba54:	469a      	mov	sl, r3
 800ba56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ba5a:	d807      	bhi.n	800ba6c <_printf_i+0x28>
 800ba5c:	2f62      	cmp	r7, #98	@ 0x62
 800ba5e:	d80a      	bhi.n	800ba76 <_printf_i+0x32>
 800ba60:	2f00      	cmp	r7, #0
 800ba62:	f000 80d1 	beq.w	800bc08 <_printf_i+0x1c4>
 800ba66:	2f58      	cmp	r7, #88	@ 0x58
 800ba68:	f000 80b8 	beq.w	800bbdc <_printf_i+0x198>
 800ba6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ba70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ba74:	e03a      	b.n	800baec <_printf_i+0xa8>
 800ba76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ba7a:	2b15      	cmp	r3, #21
 800ba7c:	d8f6      	bhi.n	800ba6c <_printf_i+0x28>
 800ba7e:	a101      	add	r1, pc, #4	@ (adr r1, 800ba84 <_printf_i+0x40>)
 800ba80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ba84:	0800badd 	.word	0x0800badd
 800ba88:	0800baf1 	.word	0x0800baf1
 800ba8c:	0800ba6d 	.word	0x0800ba6d
 800ba90:	0800ba6d 	.word	0x0800ba6d
 800ba94:	0800ba6d 	.word	0x0800ba6d
 800ba98:	0800ba6d 	.word	0x0800ba6d
 800ba9c:	0800baf1 	.word	0x0800baf1
 800baa0:	0800ba6d 	.word	0x0800ba6d
 800baa4:	0800ba6d 	.word	0x0800ba6d
 800baa8:	0800ba6d 	.word	0x0800ba6d
 800baac:	0800ba6d 	.word	0x0800ba6d
 800bab0:	0800bbef 	.word	0x0800bbef
 800bab4:	0800bb1b 	.word	0x0800bb1b
 800bab8:	0800bba9 	.word	0x0800bba9
 800babc:	0800ba6d 	.word	0x0800ba6d
 800bac0:	0800ba6d 	.word	0x0800ba6d
 800bac4:	0800bc11 	.word	0x0800bc11
 800bac8:	0800ba6d 	.word	0x0800ba6d
 800bacc:	0800bb1b 	.word	0x0800bb1b
 800bad0:	0800ba6d 	.word	0x0800ba6d
 800bad4:	0800ba6d 	.word	0x0800ba6d
 800bad8:	0800bbb1 	.word	0x0800bbb1
 800badc:	6833      	ldr	r3, [r6, #0]
 800bade:	1d1a      	adds	r2, r3, #4
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	6032      	str	r2, [r6, #0]
 800bae4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bae8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800baec:	2301      	movs	r3, #1
 800baee:	e09c      	b.n	800bc2a <_printf_i+0x1e6>
 800baf0:	6833      	ldr	r3, [r6, #0]
 800baf2:	6820      	ldr	r0, [r4, #0]
 800baf4:	1d19      	adds	r1, r3, #4
 800baf6:	6031      	str	r1, [r6, #0]
 800baf8:	0606      	lsls	r6, r0, #24
 800bafa:	d501      	bpl.n	800bb00 <_printf_i+0xbc>
 800bafc:	681d      	ldr	r5, [r3, #0]
 800bafe:	e003      	b.n	800bb08 <_printf_i+0xc4>
 800bb00:	0645      	lsls	r5, r0, #25
 800bb02:	d5fb      	bpl.n	800bafc <_printf_i+0xb8>
 800bb04:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bb08:	2d00      	cmp	r5, #0
 800bb0a:	da03      	bge.n	800bb14 <_printf_i+0xd0>
 800bb0c:	232d      	movs	r3, #45	@ 0x2d
 800bb0e:	426d      	negs	r5, r5
 800bb10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bb14:	4858      	ldr	r0, [pc, #352]	@ (800bc78 <_printf_i+0x234>)
 800bb16:	230a      	movs	r3, #10
 800bb18:	e011      	b.n	800bb3e <_printf_i+0xfa>
 800bb1a:	6821      	ldr	r1, [r4, #0]
 800bb1c:	6833      	ldr	r3, [r6, #0]
 800bb1e:	0608      	lsls	r0, r1, #24
 800bb20:	f853 5b04 	ldr.w	r5, [r3], #4
 800bb24:	d402      	bmi.n	800bb2c <_printf_i+0xe8>
 800bb26:	0649      	lsls	r1, r1, #25
 800bb28:	bf48      	it	mi
 800bb2a:	b2ad      	uxthmi	r5, r5
 800bb2c:	2f6f      	cmp	r7, #111	@ 0x6f
 800bb2e:	4852      	ldr	r0, [pc, #328]	@ (800bc78 <_printf_i+0x234>)
 800bb30:	6033      	str	r3, [r6, #0]
 800bb32:	bf14      	ite	ne
 800bb34:	230a      	movne	r3, #10
 800bb36:	2308      	moveq	r3, #8
 800bb38:	2100      	movs	r1, #0
 800bb3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bb3e:	6866      	ldr	r6, [r4, #4]
 800bb40:	60a6      	str	r6, [r4, #8]
 800bb42:	2e00      	cmp	r6, #0
 800bb44:	db05      	blt.n	800bb52 <_printf_i+0x10e>
 800bb46:	6821      	ldr	r1, [r4, #0]
 800bb48:	432e      	orrs	r6, r5
 800bb4a:	f021 0104 	bic.w	r1, r1, #4
 800bb4e:	6021      	str	r1, [r4, #0]
 800bb50:	d04b      	beq.n	800bbea <_printf_i+0x1a6>
 800bb52:	4616      	mov	r6, r2
 800bb54:	fbb5 f1f3 	udiv	r1, r5, r3
 800bb58:	fb03 5711 	mls	r7, r3, r1, r5
 800bb5c:	5dc7      	ldrb	r7, [r0, r7]
 800bb5e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bb62:	462f      	mov	r7, r5
 800bb64:	42bb      	cmp	r3, r7
 800bb66:	460d      	mov	r5, r1
 800bb68:	d9f4      	bls.n	800bb54 <_printf_i+0x110>
 800bb6a:	2b08      	cmp	r3, #8
 800bb6c:	d10b      	bne.n	800bb86 <_printf_i+0x142>
 800bb6e:	6823      	ldr	r3, [r4, #0]
 800bb70:	07df      	lsls	r7, r3, #31
 800bb72:	d508      	bpl.n	800bb86 <_printf_i+0x142>
 800bb74:	6923      	ldr	r3, [r4, #16]
 800bb76:	6861      	ldr	r1, [r4, #4]
 800bb78:	4299      	cmp	r1, r3
 800bb7a:	bfde      	ittt	le
 800bb7c:	2330      	movle	r3, #48	@ 0x30
 800bb7e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bb82:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bb86:	1b92      	subs	r2, r2, r6
 800bb88:	6122      	str	r2, [r4, #16]
 800bb8a:	f8cd a000 	str.w	sl, [sp]
 800bb8e:	464b      	mov	r3, r9
 800bb90:	aa03      	add	r2, sp, #12
 800bb92:	4621      	mov	r1, r4
 800bb94:	4640      	mov	r0, r8
 800bb96:	f7ff fee7 	bl	800b968 <_printf_common>
 800bb9a:	3001      	adds	r0, #1
 800bb9c:	d14a      	bne.n	800bc34 <_printf_i+0x1f0>
 800bb9e:	f04f 30ff 	mov.w	r0, #4294967295
 800bba2:	b004      	add	sp, #16
 800bba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bba8:	6823      	ldr	r3, [r4, #0]
 800bbaa:	f043 0320 	orr.w	r3, r3, #32
 800bbae:	6023      	str	r3, [r4, #0]
 800bbb0:	4832      	ldr	r0, [pc, #200]	@ (800bc7c <_printf_i+0x238>)
 800bbb2:	2778      	movs	r7, #120	@ 0x78
 800bbb4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bbb8:	6823      	ldr	r3, [r4, #0]
 800bbba:	6831      	ldr	r1, [r6, #0]
 800bbbc:	061f      	lsls	r7, r3, #24
 800bbbe:	f851 5b04 	ldr.w	r5, [r1], #4
 800bbc2:	d402      	bmi.n	800bbca <_printf_i+0x186>
 800bbc4:	065f      	lsls	r7, r3, #25
 800bbc6:	bf48      	it	mi
 800bbc8:	b2ad      	uxthmi	r5, r5
 800bbca:	6031      	str	r1, [r6, #0]
 800bbcc:	07d9      	lsls	r1, r3, #31
 800bbce:	bf44      	itt	mi
 800bbd0:	f043 0320 	orrmi.w	r3, r3, #32
 800bbd4:	6023      	strmi	r3, [r4, #0]
 800bbd6:	b11d      	cbz	r5, 800bbe0 <_printf_i+0x19c>
 800bbd8:	2310      	movs	r3, #16
 800bbda:	e7ad      	b.n	800bb38 <_printf_i+0xf4>
 800bbdc:	4826      	ldr	r0, [pc, #152]	@ (800bc78 <_printf_i+0x234>)
 800bbde:	e7e9      	b.n	800bbb4 <_printf_i+0x170>
 800bbe0:	6823      	ldr	r3, [r4, #0]
 800bbe2:	f023 0320 	bic.w	r3, r3, #32
 800bbe6:	6023      	str	r3, [r4, #0]
 800bbe8:	e7f6      	b.n	800bbd8 <_printf_i+0x194>
 800bbea:	4616      	mov	r6, r2
 800bbec:	e7bd      	b.n	800bb6a <_printf_i+0x126>
 800bbee:	6833      	ldr	r3, [r6, #0]
 800bbf0:	6825      	ldr	r5, [r4, #0]
 800bbf2:	6961      	ldr	r1, [r4, #20]
 800bbf4:	1d18      	adds	r0, r3, #4
 800bbf6:	6030      	str	r0, [r6, #0]
 800bbf8:	062e      	lsls	r6, r5, #24
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	d501      	bpl.n	800bc02 <_printf_i+0x1be>
 800bbfe:	6019      	str	r1, [r3, #0]
 800bc00:	e002      	b.n	800bc08 <_printf_i+0x1c4>
 800bc02:	0668      	lsls	r0, r5, #25
 800bc04:	d5fb      	bpl.n	800bbfe <_printf_i+0x1ba>
 800bc06:	8019      	strh	r1, [r3, #0]
 800bc08:	2300      	movs	r3, #0
 800bc0a:	6123      	str	r3, [r4, #16]
 800bc0c:	4616      	mov	r6, r2
 800bc0e:	e7bc      	b.n	800bb8a <_printf_i+0x146>
 800bc10:	6833      	ldr	r3, [r6, #0]
 800bc12:	1d1a      	adds	r2, r3, #4
 800bc14:	6032      	str	r2, [r6, #0]
 800bc16:	681e      	ldr	r6, [r3, #0]
 800bc18:	6862      	ldr	r2, [r4, #4]
 800bc1a:	2100      	movs	r1, #0
 800bc1c:	4630      	mov	r0, r6
 800bc1e:	f7f4 fad7 	bl	80001d0 <memchr>
 800bc22:	b108      	cbz	r0, 800bc28 <_printf_i+0x1e4>
 800bc24:	1b80      	subs	r0, r0, r6
 800bc26:	6060      	str	r0, [r4, #4]
 800bc28:	6863      	ldr	r3, [r4, #4]
 800bc2a:	6123      	str	r3, [r4, #16]
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bc32:	e7aa      	b.n	800bb8a <_printf_i+0x146>
 800bc34:	6923      	ldr	r3, [r4, #16]
 800bc36:	4632      	mov	r2, r6
 800bc38:	4649      	mov	r1, r9
 800bc3a:	4640      	mov	r0, r8
 800bc3c:	47d0      	blx	sl
 800bc3e:	3001      	adds	r0, #1
 800bc40:	d0ad      	beq.n	800bb9e <_printf_i+0x15a>
 800bc42:	6823      	ldr	r3, [r4, #0]
 800bc44:	079b      	lsls	r3, r3, #30
 800bc46:	d413      	bmi.n	800bc70 <_printf_i+0x22c>
 800bc48:	68e0      	ldr	r0, [r4, #12]
 800bc4a:	9b03      	ldr	r3, [sp, #12]
 800bc4c:	4298      	cmp	r0, r3
 800bc4e:	bfb8      	it	lt
 800bc50:	4618      	movlt	r0, r3
 800bc52:	e7a6      	b.n	800bba2 <_printf_i+0x15e>
 800bc54:	2301      	movs	r3, #1
 800bc56:	4632      	mov	r2, r6
 800bc58:	4649      	mov	r1, r9
 800bc5a:	4640      	mov	r0, r8
 800bc5c:	47d0      	blx	sl
 800bc5e:	3001      	adds	r0, #1
 800bc60:	d09d      	beq.n	800bb9e <_printf_i+0x15a>
 800bc62:	3501      	adds	r5, #1
 800bc64:	68e3      	ldr	r3, [r4, #12]
 800bc66:	9903      	ldr	r1, [sp, #12]
 800bc68:	1a5b      	subs	r3, r3, r1
 800bc6a:	42ab      	cmp	r3, r5
 800bc6c:	dcf2      	bgt.n	800bc54 <_printf_i+0x210>
 800bc6e:	e7eb      	b.n	800bc48 <_printf_i+0x204>
 800bc70:	2500      	movs	r5, #0
 800bc72:	f104 0619 	add.w	r6, r4, #25
 800bc76:	e7f5      	b.n	800bc64 <_printf_i+0x220>
 800bc78:	0800bde5 	.word	0x0800bde5
 800bc7c:	0800bdf6 	.word	0x0800bdf6

0800bc80 <memmove>:
 800bc80:	4288      	cmp	r0, r1
 800bc82:	b510      	push	{r4, lr}
 800bc84:	eb01 0402 	add.w	r4, r1, r2
 800bc88:	d902      	bls.n	800bc90 <memmove+0x10>
 800bc8a:	4284      	cmp	r4, r0
 800bc8c:	4623      	mov	r3, r4
 800bc8e:	d807      	bhi.n	800bca0 <memmove+0x20>
 800bc90:	1e43      	subs	r3, r0, #1
 800bc92:	42a1      	cmp	r1, r4
 800bc94:	d008      	beq.n	800bca8 <memmove+0x28>
 800bc96:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bc9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bc9e:	e7f8      	b.n	800bc92 <memmove+0x12>
 800bca0:	4402      	add	r2, r0
 800bca2:	4601      	mov	r1, r0
 800bca4:	428a      	cmp	r2, r1
 800bca6:	d100      	bne.n	800bcaa <memmove+0x2a>
 800bca8:	bd10      	pop	{r4, pc}
 800bcaa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bcae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bcb2:	e7f7      	b.n	800bca4 <memmove+0x24>

0800bcb4 <_sbrk_r>:
 800bcb4:	b538      	push	{r3, r4, r5, lr}
 800bcb6:	4d06      	ldr	r5, [pc, #24]	@ (800bcd0 <_sbrk_r+0x1c>)
 800bcb8:	2300      	movs	r3, #0
 800bcba:	4604      	mov	r4, r0
 800bcbc:	4608      	mov	r0, r1
 800bcbe:	602b      	str	r3, [r5, #0]
 800bcc0:	f7f4 ff78 	bl	8000bb4 <_sbrk>
 800bcc4:	1c43      	adds	r3, r0, #1
 800bcc6:	d102      	bne.n	800bcce <_sbrk_r+0x1a>
 800bcc8:	682b      	ldr	r3, [r5, #0]
 800bcca:	b103      	cbz	r3, 800bcce <_sbrk_r+0x1a>
 800bccc:	6023      	str	r3, [r4, #0]
 800bcce:	bd38      	pop	{r3, r4, r5, pc}
 800bcd0:	20002734 	.word	0x20002734

0800bcd4 <_realloc_r>:
 800bcd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcd8:	4607      	mov	r7, r0
 800bcda:	4614      	mov	r4, r2
 800bcdc:	460d      	mov	r5, r1
 800bcde:	b921      	cbnz	r1, 800bcea <_realloc_r+0x16>
 800bce0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bce4:	4611      	mov	r1, r2
 800bce6:	f7ff bc5b 	b.w	800b5a0 <_malloc_r>
 800bcea:	b92a      	cbnz	r2, 800bcf8 <_realloc_r+0x24>
 800bcec:	f7ff fbec 	bl	800b4c8 <_free_r>
 800bcf0:	4625      	mov	r5, r4
 800bcf2:	4628      	mov	r0, r5
 800bcf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcf8:	f000 f81a 	bl	800bd30 <_malloc_usable_size_r>
 800bcfc:	4284      	cmp	r4, r0
 800bcfe:	4606      	mov	r6, r0
 800bd00:	d802      	bhi.n	800bd08 <_realloc_r+0x34>
 800bd02:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bd06:	d8f4      	bhi.n	800bcf2 <_realloc_r+0x1e>
 800bd08:	4621      	mov	r1, r4
 800bd0a:	4638      	mov	r0, r7
 800bd0c:	f7ff fc48 	bl	800b5a0 <_malloc_r>
 800bd10:	4680      	mov	r8, r0
 800bd12:	b908      	cbnz	r0, 800bd18 <_realloc_r+0x44>
 800bd14:	4645      	mov	r5, r8
 800bd16:	e7ec      	b.n	800bcf2 <_realloc_r+0x1e>
 800bd18:	42b4      	cmp	r4, r6
 800bd1a:	4622      	mov	r2, r4
 800bd1c:	4629      	mov	r1, r5
 800bd1e:	bf28      	it	cs
 800bd20:	4632      	movcs	r2, r6
 800bd22:	f7ff fbc3 	bl	800b4ac <memcpy>
 800bd26:	4629      	mov	r1, r5
 800bd28:	4638      	mov	r0, r7
 800bd2a:	f7ff fbcd 	bl	800b4c8 <_free_r>
 800bd2e:	e7f1      	b.n	800bd14 <_realloc_r+0x40>

0800bd30 <_malloc_usable_size_r>:
 800bd30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd34:	1f18      	subs	r0, r3, #4
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	bfbc      	itt	lt
 800bd3a:	580b      	ldrlt	r3, [r1, r0]
 800bd3c:	18c0      	addlt	r0, r0, r3
 800bd3e:	4770      	bx	lr

0800bd40 <_init>:
 800bd40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd42:	bf00      	nop
 800bd44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd46:	bc08      	pop	{r3}
 800bd48:	469e      	mov	lr, r3
 800bd4a:	4770      	bx	lr

0800bd4c <_fini>:
 800bd4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd4e:	bf00      	nop
 800bd50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd52:	bc08      	pop	{r3}
 800bd54:	469e      	mov	lr, r3
 800bd56:	4770      	bx	lr
