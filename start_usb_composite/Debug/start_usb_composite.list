
start_usb_composite.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072cc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800745c  0800745c  0000845c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800750c  0800750c  00009304  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800750c  0800750c  0000850c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007514  08007514  00009304  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007514  08007514  00008514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007518  08007518  00008518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000304  20000000  0800751c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009304  2**0
                  CONTENTS
 10 .bss          0000a3fc  20000308  20000308  00009308  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000a704  2000a704  00009308  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009304  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002a664  00000000  00000000  00009334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000067ce  00000000  00000000  00033998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00013d0a  00000000  00000000  0003a166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000018a8  00000000  00000000  0004de70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001d44  00000000  00000000  0004f718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002701b  00000000  00000000  0005145c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002de11  00000000  00000000  00078477  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d6b1b  00000000  00000000  000a6288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0017cda3  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004914  00000000  00000000  0017cde8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005c  00000000  00000000  001816fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000308 	.word	0x20000308
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007444 	.word	0x08007444

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000030c 	.word	0x2000030c
 80001cc:	08007444 	.word	0x08007444

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	0000      	movs	r0, r0
	...

080005b0 <HAL_CAN_MspInit>:
  /* USER CODE END CAN1_Init 2 */

}

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80005b0:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(canHandle->Instance==CAN1)
 80005b2:	4b1f      	ldr	r3, [pc, #124]	@ (8000630 <HAL_CAN_MspInit+0x80>)
 80005b4:	6802      	ldr	r2, [r0, #0]
{
 80005b6:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b8:	2400      	movs	r4, #0
  if(canHandle->Instance==CAN1)
 80005ba:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005bc:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80005c0:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80005c4:	9406      	str	r4, [sp, #24]
  if(canHandle->Instance==CAN1)
 80005c6:	d001      	beq.n	80005cc <HAL_CAN_MspInit+0x1c>
//    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80005c8:	b009      	add	sp, #36	@ 0x24
 80005ca:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005cc:	f503 33ea 	add.w	r3, r3, #119808	@ 0x1d400
 80005d0:	9400      	str	r4, [sp, #0]
 80005d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005d4:	4817      	ldr	r0, [pc, #92]	@ (8000634 <HAL_CAN_MspInit+0x84>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005d6:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 80005da:	641a      	str	r2, [r3, #64]	@ 0x40
 80005dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80005de:	f002 7200 	and.w	r2, r2, #33554432	@ 0x2000000
 80005e2:	9200      	str	r2, [sp, #0]
 80005e4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80005e6:	9401      	str	r4, [sp, #4]
 80005e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005ea:	f042 0208 	orr.w	r2, r2, #8
 80005ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80005f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80005f2:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8000628 <HAL_CAN_MspInit+0x78>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80005f6:	f003 0308 	and.w	r3, r3, #8
 80005fa:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005fc:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005fe:	2309      	movs	r3, #9
 8000600:	2203      	movs	r2, #3
 8000602:	e9cd 2305 	strd	r2, r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000606:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800060a:	9d01      	ldr	r5, [sp, #4]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800060c:	f001 fd0e 	bl	800202c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000610:	4622      	mov	r2, r4
 8000612:	4621      	mov	r1, r4
 8000614:	2014      	movs	r0, #20
 8000616:	f001 fa8f 	bl	8001b38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800061a:	2014      	movs	r0, #20
 800061c:	f001 fac8 	bl	8001bb0 <HAL_NVIC_EnableIRQ>
}
 8000620:	b009      	add	sp, #36	@ 0x24
 8000622:	bd30      	pop	{r4, r5, pc}
 8000624:	f3af 8000 	nop.w
 8000628:	00000003 	.word	0x00000003
 800062c:	00000002 	.word	0x00000002
 8000630:	40006400 	.word	0x40006400
 8000634:	40020c00 	.word	0x40020c00

08000638 <HAL_CAN_MspDeInit>:

void HAL_CAN_MspDeInit(CAN_HandleTypeDef* canHandle)
{
 8000638:	b508      	push	{r3, lr}

  if(canHandle->Instance==CAN1)
 800063a:	6802      	ldr	r2, [r0, #0]
 800063c:	4b0a      	ldr	r3, [pc, #40]	@ (8000668 <HAL_CAN_MspDeInit+0x30>)
 800063e:	429a      	cmp	r2, r3
 8000640:	d000      	beq.n	8000644 <HAL_CAN_MspDeInit+0xc>
    HAL_NVIC_DisableIRQ(CAN1_RX1_IRQn);
  /* USER CODE BEGIN CAN1_MspDeInit 1 */

  /* USER CODE END CAN1_MspDeInit 1 */
  }
}
 8000642:	bd08      	pop	{r3, pc}
    __HAL_RCC_CAN1_CLK_DISABLE();
 8000644:	4a09      	ldr	r2, [pc, #36]	@ (800066c <HAL_CAN_MspDeInit+0x34>)
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1);
 8000646:	480a      	ldr	r0, [pc, #40]	@ (8000670 <HAL_CAN_MspDeInit+0x38>)
    __HAL_RCC_CAN1_CLK_DISABLE();
 8000648:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800064a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800064e:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1);
 8000650:	2103      	movs	r1, #3
 8000652:	f001 fe07 	bl	8002264 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(CAN1_RX0_IRQn);
 8000656:	2014      	movs	r0, #20
 8000658:	f001 fab8 	bl	8001bcc <HAL_NVIC_DisableIRQ>
}
 800065c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_DisableIRQ(CAN1_RX1_IRQn);
 8000660:	2015      	movs	r0, #21
 8000662:	f001 bab3 	b.w	8001bcc <HAL_NVIC_DisableIRQ>
 8000666:	bf00      	nop
 8000668:	40006400 	.word	0x40006400
 800066c:	40023800 	.word	0x40023800
 8000670:	40020c00 	.word	0x40020c00

08000674 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000674:	b510      	push	{r4, lr}
 8000676:	b082      	sub	sp, #8

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000678:	2400      	movs	r4, #0
 800067a:	4b0f      	ldr	r3, [pc, #60]	@ (80006b8 <MX_DMA_Init+0x44>)
 800067c:	9401      	str	r4, [sp, #4]
 800067e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000680:	f441 1100 	orr.w	r1, r1, #2097152	@ 0x200000
 8000684:	6319      	str	r1, [r3, #48]	@ 0x30
 8000686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000688:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 0);
 800068c:	4622      	mov	r2, r4
 800068e:	2101      	movs	r1, #1
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000690:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 0);
 8000692:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000694:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 0);
 8000696:	f001 fa4f 	bl	8001b38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800069a:	200b      	movs	r0, #11
 800069c:	f001 fa88 	bl	8001bb0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 1, 0);
 80006a0:	4622      	mov	r2, r4
 80006a2:	2101      	movs	r1, #1
 80006a4:	202f      	movs	r0, #47	@ 0x2f
 80006a6:	f001 fa47 	bl	8001b38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80006aa:	202f      	movs	r0, #47	@ 0x2f

}
 80006ac:	b002      	add	sp, #8
 80006ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80006b2:	f001 ba7d 	b.w	8001bb0 <HAL_NVIC_EnableIRQ>
 80006b6:	bf00      	nop
 80006b8:	40023800 	.word	0x40023800

080006bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006bc:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006be:	2200      	movs	r2, #0
{
 80006c0:	b08c      	sub	sp, #48	@ 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c2:	e9cd 2206 	strd	r2, r2, [sp, #24]
 80006c6:	e9cd 2208 	strd	r2, r2, [sp, #32]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ca:	4b23      	ldr	r3, [pc, #140]	@ (8000758 <MX_GPIO_Init+0x9c>)
 80006cc:	9201      	str	r2, [sp, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ce:	920a      	str	r2, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006d0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80006d2:	4c22      	ldr	r4, [pc, #136]	@ (800075c <MX_GPIO_Init+0xa0>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006d4:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 80006d8:	6319      	str	r1, [r3, #48]	@ 0x30
 80006da:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80006dc:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 80006e0:	9101      	str	r1, [sp, #4]
 80006e2:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e4:	9202      	str	r2, [sp, #8]
 80006e6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80006e8:	f041 0101 	orr.w	r1, r1, #1
 80006ec:	6319      	str	r1, [r3, #48]	@ 0x30
 80006ee:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80006f0:	f001 0101 	and.w	r1, r1, #1
 80006f4:	9102      	str	r1, [sp, #8]
 80006f6:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f8:	9203      	str	r2, [sp, #12]
 80006fa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80006fc:	f041 0104 	orr.w	r1, r1, #4
 8000700:	6319      	str	r1, [r3, #48]	@ 0x30
 8000702:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000704:	f001 0104 	and.w	r1, r1, #4
 8000708:	9103      	str	r1, [sp, #12]
 800070a:	9903      	ldr	r1, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800070c:	9204      	str	r2, [sp, #16]
 800070e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000710:	f041 0108 	orr.w	r1, r1, #8
 8000714:	6319      	str	r1, [r3, #48]	@ 0x30
 8000716:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000718:	f001 0108 	and.w	r1, r1, #8
 800071c:	9104      	str	r1, [sp, #16]
 800071e:	9904      	ldr	r1, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000720:	9205      	str	r2, [sp, #20]
 8000722:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000724:	f041 0102 	orr.w	r1, r1, #2
 8000728:	6319      	str	r1, [r3, #48]	@ 0x30
 800072a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072c:	f003 0302 	and.w	r3, r3, #2
 8000730:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000732:	4620      	mov	r0, r4
 8000734:	21c0      	movs	r1, #192	@ 0xc0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000736:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000738:	f001 fe4e 	bl	80023d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800073c:	22c0      	movs	r2, #192	@ 0xc0
 800073e:	2301      	movs	r3, #1
 8000740:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000744:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000746:	2200      	movs	r2, #0
 8000748:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074a:	4620      	mov	r0, r4
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800074c:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000750:	f001 fc6c 	bl	800202c <HAL_GPIO_Init>

}
 8000754:	b00c      	add	sp, #48	@ 0x30
 8000756:	bd10      	pop	{r4, pc}
 8000758:	40023800 	.word	0x40023800
 800075c:	40020000 	.word	0x40020000

08000760 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000760:	b510      	push	{r4, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000762:	480b      	ldr	r0, [pc, #44]	@ (8000790 <MX_I2C1_Init+0x30>)
 8000764:	4c0b      	ldr	r4, [pc, #44]	@ (8000794 <MX_I2C1_Init+0x34>)
  hi2c1.Init.ClockSpeed = 400000;
 8000766:	490c      	ldr	r1, [pc, #48]	@ (8000798 <MX_I2C1_Init+0x38>)
 8000768:	2300      	movs	r3, #0
 800076a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800076e:	e9c0 4100 	strd	r4, r1, [r0]
 8000772:	e9c0 3302 	strd	r3, r3, [r0, #8]
 8000776:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800077a:	e9c0 3306 	strd	r3, r3, [r0, #24]
 800077e:	6203      	str	r3, [r0, #32]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000780:	f001 fe38 	bl	80023f4 <HAL_I2C_Init>
 8000784:	b900      	cbnz	r0, 8000788 <MX_I2C1_Init+0x28>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000786:	bd10      	pop	{r4, pc}
 8000788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800078c:	f000 ba4c 	b.w	8000c28 <Error_Handler>
 8000790:	20000350 	.word	0x20000350
 8000794:	40005400 	.word	0x40005400
 8000798:	00061a80 	.word	0x00061a80

0800079c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800079c:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(i2cHandle->Instance==I2C1)
 800079e:	4b18      	ldr	r3, [pc, #96]	@ (8000800 <HAL_I2C_MspInit+0x64>)
 80007a0:	6802      	ldr	r2, [r0, #0]
{
 80007a2:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a4:	2400      	movs	r4, #0
  if(i2cHandle->Instance==I2C1)
 80007a6:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a8:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80007ac:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80007b0:	9406      	str	r4, [sp, #24]
  if(i2cHandle->Instance==I2C1)
 80007b2:	d001      	beq.n	80007b8 <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007b4:	b009      	add	sp, #36	@ 0x24
 80007b6:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b8:	4d12      	ldr	r5, [pc, #72]	@ (8000804 <HAL_I2C_MspInit+0x68>)
 80007ba:	9400      	str	r4, [sp, #0]
 80007bc:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80007be:	f043 0302 	orr.w	r3, r3, #2
 80007c2:	632b      	str	r3, [r5, #48]	@ 0x30
 80007c4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80007c6:	f003 0302 	and.w	r3, r3, #2
 80007ca:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007cc:	22c0      	movs	r2, #192	@ 0xc0
 80007ce:	2312      	movs	r3, #18
 80007d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d4:	9800      	ldr	r0, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d6:	480c      	ldr	r0, [pc, #48]	@ (8000808 <HAL_I2C_MspInit+0x6c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d8:	2203      	movs	r2, #3
 80007da:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007dc:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007de:	e9cd 2305 	strd	r2, r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e2:	f001 fc23 	bl	800202c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007e6:	9401      	str	r4, [sp, #4]
 80007e8:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 80007ea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007ee:	642b      	str	r3, [r5, #64]	@ 0x40
 80007f0:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 80007f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007f6:	9301      	str	r3, [sp, #4]
 80007f8:	9b01      	ldr	r3, [sp, #4]
}
 80007fa:	b009      	add	sp, #36	@ 0x24
 80007fc:	bd30      	pop	{r4, r5, pc}
 80007fe:	bf00      	nop
 8000800:	40005400 	.word	0x40005400
 8000804:	40023800 	.word	0x40023800
 8000808:	40020400 	.word	0x40020400

0800080c <find_best_timing>:
 *                 - So sánh sai số với desired_sample_point_scaled
 *                 - Nếu sai số nhỏ hơn trước đó → lưu lại cấu hình tốt nhất
 *   [3] Trả về cấu hình có sai số nhỏ nhất với sample point mong muốn
 */
CAN_TimingConfig find_best_timing(uint32_t baudrate, uint16_t desired_sample_point_scaled)
{
 800080c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000810:	2600      	movs	r6, #0
 8000812:	ed2d 8b04 	vpush	{d8-d9}
 8000816:	4680      	mov	r8, r0
    CAN_TimingConfig best_config = {0};
    best_config.sample_point_error = FLT_MAX;
 8000818:	eddf 8a33 	vldr	s17, [pc, #204]	@ 80008e8 <find_best_timing+0xdc>
    CAN_TimingConfig best_config = {0};
 800081c:	ed9f 9a33 	vldr	s18, [pc, #204]	@ 80008ec <find_best_timing+0xe0>
            for (int tseg2 = 1; tseg2 <= 8; tseg2++) {
                if (1 + tseg1 + tseg2 != tq_total)
                    continue;

                float actual_sp = (1.0f + tseg1) / tq_total;
                uint16_t actual_sp_scaled = (uint16_t)(actual_sp * SAMPLE_POINT_SCALE);
 8000820:	ed9f 8a33 	vldr	s16, [pc, #204]	@ 80008f0 <find_best_timing+0xe4>
{
 8000824:	460f      	mov	r7, r1
 8000826:	4615      	mov	r5, r2
 8000828:	46b1      	mov	r9, r6
 800082a:	46b3      	mov	fp, r6
 800082c:	46b2      	mov	sl, r6
    for (int tq_total = 8; tq_total <= 25; tq_total++) {
 800082e:	2408      	movs	r4, #8
 8000830:	e002      	b.n	8000838 <find_best_timing+0x2c>
 8000832:	3401      	adds	r4, #1
 8000834:	2c1a      	cmp	r4, #26
 8000836:	d049      	beq.n	80008cc <find_best_timing+0xc0>
        if ((HAL_RCC_GetPCLK1Freq() / baudrate) % tq_total != 0)
 8000838:	f002 ff06 	bl	8003648 <HAL_RCC_GetPCLK1Freq>
 800083c:	fbb0 f0f7 	udiv	r0, r0, r7
 8000840:	fbb0 f3f4 	udiv	r3, r0, r4
 8000844:	fb04 0013 	mls	r0, r4, r3, r0
 8000848:	2800      	cmp	r0, #0
 800084a:	d1f2      	bne.n	8000832 <find_best_timing+0x26>
        int prescaler = (HAL_RCC_GetPCLK1Freq() / baudrate) / tq_total;
 800084c:	f002 fefc 	bl	8003648 <HAL_RCC_GetPCLK1Freq>
 8000850:	2101      	movs	r1, #1
                float actual_sp = (1.0f + tseg1) / tq_total;
 8000852:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
        int prescaler = (HAL_RCC_GetPCLK1Freq() / baudrate) / tq_total;
 8000856:	fbb0 f0f7 	udiv	r0, r0, r7
 800085a:	fbb0 f0f4 	udiv	r0, r0, r4
            for (int tseg2 = 1; tseg2 <= 8; tseg2++) {
 800085e:	2201      	movs	r2, #1
 8000860:	ee06 1a10 	vmov	s12, r1
 8000864:	4411      	add	r1, r2
                if (1 + tseg1 + tseg2 != tq_total)
 8000866:	1853      	adds	r3, r2, r1
 8000868:	42a3      	cmp	r3, r4
 800086a:	d127      	bne.n	80008bc <find_best_timing+0xb0>
                float actual_sp = (1.0f + tseg1) / tq_total;
 800086c:	eeb8 7ac6 	vcvt.f32.s32	s14, s12
 8000870:	ee07 4a90 	vmov	s15, r4
 8000874:	ee37 7a25 	vadd.f32	s14, s14, s11
 8000878:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800087c:	eec7 6a27 	vdiv.f32	s13, s14, s15
                uint16_t actual_sp_scaled = (uint16_t)(actual_sp * SAMPLE_POINT_SCALE);
 8000880:	ee66 7a88 	vmul.f32	s15, s13, s16
 8000884:	eefc 7ae7 	vcvt.u32.f32	s15, s15

                float error = fabsf((float)(actual_sp_scaled - desired_sample_point_scaled) / SAMPLE_POINT_SCALE);
 8000888:	ee17 3a90 	vmov	r3, s15
 800088c:	b29b      	uxth	r3, r3
 800088e:	1b5b      	subs	r3, r3, r5
 8000890:	ee07 3a90 	vmov	s15, r3
 8000894:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000898:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800089c:	eef0 7ac7 	vabs.f32	s15, s14

                if (error < best_config.sample_point_error) {
 80008a0:	eef4 7ae8 	vcmpe.f32	s15, s17
 80008a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008a8:	d508      	bpl.n	80008bc <find_best_timing+0xb0>
 80008aa:	ee16 6a10 	vmov	r6, s12
                    best_config.tq_total = tq_total;
                    best_config.prescaler = prescaler;
                    best_config.tseg1 = tseg1;
                    best_config.tseg2 = tseg2;
                    best_config.actual_sample_point = actual_sp;
                    best_config.sample_point_error = error;
 80008ae:	eef0 8a67 	vmov.f32	s17, s15
                    best_config.actual_sample_point = actual_sp;
 80008b2:	eeb0 9a66 	vmov.f32	s18, s13
 80008b6:	4691      	mov	r9, r2
                if (error < best_config.sample_point_error) {
 80008b8:	46a3      	mov	fp, r4
 80008ba:	4682      	mov	sl, r0
            for (int tseg2 = 1; tseg2 <= 8; tseg2++) {
 80008bc:	3201      	adds	r2, #1
 80008be:	2a09      	cmp	r2, #9
 80008c0:	d1d1      	bne.n	8000866 <find_best_timing+0x5a>
        for (int tseg1 = 1; tseg1 <= 16; tseg1++) {
 80008c2:	2911      	cmp	r1, #17
 80008c4:	d1cb      	bne.n	800085e <find_best_timing+0x52>
    for (int tq_total = 8; tq_total <= 25; tq_total++) {
 80008c6:	3401      	adds	r4, #1
 80008c8:	2c1a      	cmp	r4, #26
 80008ca:	d1b5      	bne.n	8000838 <find_best_timing+0x2c>
                }
            }
        }
    }

    return best_config;
 80008cc:	ed88 9a04 	vstr	s18, [r8, #16]
 80008d0:	edc8 8a05 	vstr	s17, [r8, #20]
}
 80008d4:	ecbd 8b04 	vpop	{d8-d9}
 80008d8:	4640      	mov	r0, r8
    return best_config;
 80008da:	e9c8 ba00 	strd	fp, sl, [r8]
 80008de:	e9c8 6902 	strd	r6, r9, [r8, #8]
}
 80008e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80008e6:	bf00      	nop
 80008e8:	7f7fffff 	.word	0x7f7fffff
 80008ec:	00000000 	.word	0x00000000
 80008f0:	447a0000 	.word	0x447a0000

080008f4 <SendCanConfigBaud>:
uint8_t SendCanConfigBaud(uint8_t *data){
 80008f4:	b510      	push	{r4, lr}
	uint32_t baudrate = ((data[2] << 8) | data[1]) * 1000;
 80008f6:	f8b0 3001 	ldrh.w	r3, [r0, #1]
    CAN_TimingConfig config = find_best_timing(baudrate, desired_sample_point);
 80008fa:	f8b0 2003 	ldrh.w	r2, [r0, #3]
	hcan1.Instance = CAN1;
 80008fe:	4c11      	ldr	r4, [pc, #68]	@ (8000944 <SendCanConfigBaud+0x50>)
uint8_t SendCanConfigBaud(uint8_t *data){
 8000900:	b086      	sub	sp, #24
	uint32_t baudrate = ((data[2] << 8) | data[1]) * 1000;
 8000902:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
    CAN_TimingConfig config = find_best_timing(baudrate, desired_sample_point);
 8000906:	fb03 f101 	mul.w	r1, r3, r1
 800090a:	4668      	mov	r0, sp
 800090c:	f7ff ff7e 	bl	800080c <find_best_timing>
	hcan1.Init.TimeSeg2 = (config.tseg2 - 1 ) << 20;
 8000910:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
	hcan1.Instance = CAN1;
 8000914:	480c      	ldr	r0, [pc, #48]	@ (8000948 <SendCanConfigBaud+0x54>)
	hcan1.Init.TimeSeg1 = (config.tseg1 - 1 ) << 16;
 8000916:	3a01      	subs	r2, #1
	hcan1.Init.TimeSeg2 = (config.tseg2 - 1 ) << 20;
 8000918:	3b01      	subs	r3, #1
	hcan1.Instance = CAN1;
 800091a:	6004      	str	r4, [r0, #0]
	hcan1.Init.Prescaler = config.prescaler;
 800091c:	9c01      	ldr	r4, [sp, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 800091e:	2100      	movs	r1, #0
	hcan1.Init.TimeSeg1 = (config.tseg1 - 1 ) << 16;
 8000920:	0412      	lsls	r2, r2, #16
	hcan1.Init.TimeSeg2 = (config.tseg2 - 1 ) << 20;
 8000922:	051b      	lsls	r3, r3, #20
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000924:	e9c0 4101 	strd	r4, r1, [r0, #4]
	hcan1.Init.TimeSeg1 = (config.tseg1 - 1 ) << 16;
 8000928:	e9c0 1203 	strd	r1, r2, [r0, #12]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 800092c:	e9c0 3105 	strd	r3, r1, [r0, #20]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000930:	8381      	strh	r1, [r0, #28]
	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000932:	f000 fd27 	bl	8001384 <HAL_CAN_Init>
 8000936:	b108      	cbz	r0, 800093c <SendCanConfigBaud+0x48>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000938:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800093a:	e7fe      	b.n	800093a <SendCanConfigBaud+0x46>
}
 800093c:	2001      	movs	r0, #1
 800093e:	b006      	add	sp, #24
 8000940:	bd10      	pop	{r4, pc}
 8000942:	bf00      	nop
 8000944:	40006400 	.word	0x40006400
 8000948:	20000324 	.word	0x20000324

0800094c <CanTx_init>:
void CanTx_init(uint32_t id, uint8_t DlcAndType, uint8_t *data){
 800094c:	b530      	push	{r4, r5, lr}
    switch(DlcAndType & 0x0F){
 800094e:	f011 030f 	ands.w	r3, r1, #15
 8000952:	4c0b      	ldr	r4, [pc, #44]	@ (8000980 <CanTx_init+0x34>)
void CanTx_init(uint32_t id, uint8_t DlcAndType, uint8_t *data){
 8000954:	b083      	sub	sp, #12
    switch(DlcAndType & 0x0F){
 8000956:	d00f      	beq.n	8000978 <CanTx_init+0x2c>
 8000958:	2b04      	cmp	r3, #4
    	TxHeader.ExtId = id;
 800095a:	bf08      	it	eq
 800095c:	e9c4 0301 	strdeq	r0, r3, [r4, #4]
	TxHeader.RTR = CAN_RTR_DATA;
 8000960:	2500      	movs	r5, #0
	TxHeader.DLC = (DlcAndType >> 4);
 8000962:	0908      	lsrs	r0, r1, #4
 8000964:	e9c4 5003 	strd	r5, r0, [r4, #12]
	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &txMailbox);
 8000968:	4905      	ldr	r1, [pc, #20]	@ (8000980 <CanTx_init+0x34>)
 800096a:	4806      	ldr	r0, [pc, #24]	@ (8000984 <CanTx_init+0x38>)
	TxHeader.TransmitGlobalTime = DISABLE;
 800096c:	7525      	strb	r5, [r4, #20]
	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &txMailbox);
 800096e:	ab01      	add	r3, sp, #4
 8000970:	f000 fe8c 	bl	800168c <HAL_CAN_AddTxMessage>
}
 8000974:	b003      	add	sp, #12
 8000976:	bd30      	pop	{r4, r5, pc}
    	TxHeader.IDE = CAN_ID_STD;
 8000978:	60a3      	str	r3, [r4, #8]
    	TxHeader.StdId = id;
 800097a:	6020      	str	r0, [r4, #0]
    	break;
 800097c:	e7f0      	b.n	8000960 <CanTx_init+0x14>
 800097e:	bf00      	nop
 8000980:	2000442c 	.word	0x2000442c
 8000984:	20000324 	.word	0x20000324

08000988 <SendCanMessage>:
uint8_t SendCanMessage(uint8_t *data){
 8000988:	b508      	push	{r3, lr}
 800098a:	f8d0 3001 	ldr.w	r3, [r0, #1]
	CanTx_init(id, data[5], &data[6]);
 800098e:	7941      	ldrb	r1, [r0, #5]
 8000990:	1d82      	adds	r2, r0, #6
 8000992:	ba18      	rev	r0, r3
 8000994:	f7ff ffda 	bl	800094c <CanTx_init>
}
 8000998:	2001      	movs	r0, #1
 800099a:	bd08      	pop	{r3, pc}
 800099c:	0000      	movs	r0, r0
	...

080009a0 <CanRx_FilterRange>:
{
 80009a0:	b538      	push	{r3, r4, r5, lr}
    uint32_t range = end_id - start_id + 1;
 80009a2:	1a0b      	subs	r3, r1, r0
 80009a4:	f103 0c01 	add.w	ip, r3, #1
    if ((range & (range - 1)) != 0) {
 80009a8:	ea1c 0f03 	tst.w	ip, r3
 80009ac:	d12b      	bne.n	8000a06 <CanRx_FilterRange+0x66>
    if (is_extended == 0) {
 80009ae:	ea41 0300 	orr.w	r3, r1, r0
 80009b2:	bb2a      	cbnz	r2, 8000a00 <CanRx_FilterRange+0x60>
        if (start_id > 0x7FF || end_id > 0x7FF) return;
 80009b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80009b8:	d225      	bcs.n	8000a06 <CanRx_FilterRange+0x66>
        mask = 0x7FF & ~(range - 1);
 80009ba:	1e43      	subs	r3, r0, #1
 80009bc:	1a5b      	subs	r3, r3, r1
 80009be:	f3c3 030a 	ubfx	r3, r3, #0, #11
        if ((start_id & ~mask) != 0) return;
 80009c2:	ea30 0203 	bics.w	r2, r0, r3
 80009c6:	d11e      	bne.n	8000a06 <CanRx_FilterRange+0x66>
        sFilterConfig.FilterIdHigh = (uint16_t)(id_filter);
 80009c8:	0140      	lsls	r0, r0, #5
 80009ca:	b280      	uxth	r0, r0
        sFilterConfig.FilterMaskIdHigh = (uint16_t)(mask);
 80009cc:	015b      	lsls	r3, r3, #5
        sFilterConfig.FilterMaskIdLow  = 0x0000;
 80009ce:	4614      	mov	r4, r2
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80009d0:	ed9f 7b17 	vldr	d7, [pc, #92]	@ 8000a30 <CanRx_FilterRange+0x90>
        sFilterConfig.FilterIdHigh = (uint16_t)(id_filter);
 80009d4:	491a      	ldr	r1, [pc, #104]	@ (8000a40 <CanRx_FilterRange+0xa0>)
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80009d6:	ed81 7b04 	vstr	d7, [r1, #16]
 80009da:	ed9f 7b17 	vldr	d7, [pc, #92]	@ 8000a38 <CanRx_FilterRange+0x98>
        sFilterConfig.FilterIdHigh = (uint16_t)(id_filter);
 80009de:	6008      	str	r0, [r1, #0]
    sFilterConfig.FilterActivation = ENABLE;
 80009e0:	2501      	movs	r5, #1
    HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 80009e2:	4818      	ldr	r0, [pc, #96]	@ (8000a44 <CanRx_FilterRange+0xa4>)
    sFilterConfig.FilterActivation = ENABLE;
 80009e4:	620d      	str	r5, [r1, #32]
        sFilterConfig.FilterMaskIdHigh = (uint16_t)(mask);
 80009e6:	e9c1 4301 	strd	r4, r3, [r1, #4]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80009ea:	ed81 7b06 	vstr	d7, [r1, #24]
        sFilterConfig.FilterMaskIdLow  = 0x0000;
 80009ee:	60ca      	str	r2, [r1, #12]
    HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 80009f0:	f000 fd48 	bl	8001484 <HAL_CAN_ConfigFilter>
}
 80009f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO0_OVERRUN);
 80009f8:	4812      	ldr	r0, [pc, #72]	@ (8000a44 <CanRx_FilterRange+0xa4>)
 80009fa:	210a      	movs	r1, #10
 80009fc:	f000 bf1c 	b.w	8001838 <HAL_CAN_ActivateNotification>
        if (start_id > 0x1FFFFFFF || end_id > 0x1FFFFFFF) return;
 8000a00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000a04:	d300      	bcc.n	8000a08 <CanRx_FilterRange+0x68>
}
 8000a06:	bd38      	pop	{r3, r4, r5, pc}
        mask = 0x1FFFFFFF & ~(range - 1);
 8000a08:	1e43      	subs	r3, r0, #1
 8000a0a:	1a5b      	subs	r3, r3, r1
 8000a0c:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
        if ((start_id & ~mask) != 0) return;
 8000a10:	ea30 0203 	bics.w	r2, r0, r3
 8000a14:	d1f7      	bne.n	8000a06 <CanRx_FilterRange+0x66>
        id_filter = (start_id << 3) | (1 << 2);  // IDE bit = 1 in ID field
 8000a16:	00c4      	lsls	r4, r0, #3
        mask = (mask << 3) | (1 << 2);           // Mask includes IDE match
 8000a18:	00da      	lsls	r2, r3, #3
        sFilterConfig.FilterIdHigh = (uint16_t)(id_filter >> 16);
 8000a1a:	b2a4      	uxth	r4, r4
 8000a1c:	b292      	uxth	r2, r2
 8000a1e:	f3c0 304f 	ubfx	r0, r0, #13, #16
        sFilterConfig.FilterIdLow  = (uint16_t)(id_filter & 0xFFFF);
 8000a22:	f044 0404 	orr.w	r4, r4, #4
        sFilterConfig.FilterMaskIdHigh = (uint16_t)(mask >> 16);
 8000a26:	0b5b      	lsrs	r3, r3, #13
        sFilterConfig.FilterMaskIdLow  = (uint16_t)(mask & 0xFFFF);
 8000a28:	f042 0204 	orr.w	r2, r2, #4
 8000a2c:	e7d0      	b.n	80009d0 <CanRx_FilterRange+0x30>
 8000a2e:	bf00      	nop
	...
 8000a3c:	00000001 	.word	0x00000001
 8000a40:	200043e8 	.word	0x200043e8
 8000a44:	20000324 	.word	0x20000324

08000a48 <SendCanConfigFilter>:
uint8_t SendCanConfigFilter(uint8_t *data){
 8000a48:	b508      	push	{r3, lr}
	CanRx_FilterRange(start_id, end_id, data[5]);
 8000a4a:	7942      	ldrb	r2, [r0, #5]
 8000a4c:	f8d0 100a 	ldr.w	r1, [r0, #10]
 8000a50:	f8d0 0006 	ldr.w	r0, [r0, #6]
 8000a54:	f7ff ffa4 	bl	80009a0 <CanRx_FilterRange>
}
 8000a58:	2001      	movs	r0, #1
 8000a5a:	bd08      	pop	{r3, pc}

08000a5c <SendCanConfig>:
uint8_t SendCanConfig(uint8_t *data){
 8000a5c:	b510      	push	{r4, lr}
	switch(data[1]){
 8000a5e:	7843      	ldrb	r3, [r0, #1]
 8000a60:	b95b      	cbnz	r3, 8000a7a <SendCanConfig+0x1e>
	  HAL_TIM_Base_Stop(&htim5);
 8000a62:	4815      	ldr	r0, [pc, #84]	@ (8000ab8 <SendCanConfig+0x5c>)
 8000a64:	f002 fe46 	bl	80036f4 <HAL_TIM_Base_Stop>
	  HAL_TIM_Base_Stop_IT(&htim4);
 8000a68:	4814      	ldr	r0, [pc, #80]	@ (8000abc <SendCanConfig+0x60>)
 8000a6a:	f002 fe91 	bl	8003790 <HAL_TIM_Base_Stop_IT>
	  if (HAL_CAN_DeInit(&hcan1) != HAL_OK)
 8000a6e:	4814      	ldr	r0, [pc, #80]	@ (8000ac0 <SendCanConfig+0x64>)
 8000a70:	f000 fdf6 	bl	8001660 <HAL_CAN_DeInit>
 8000a74:	b1b8      	cbz	r0, 8000aa6 <SendCanConfig+0x4a>
 8000a76:	b672      	cpsid	i
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <SendCanConfig+0x1c>
 8000a7a:	4604      	mov	r4, r0
	  HAL_TIM_Base_Start(&htim5);
 8000a7c:	480e      	ldr	r0, [pc, #56]	@ (8000ab8 <SendCanConfig+0x5c>)
 8000a7e:	f002 fe03 	bl	8003688 <HAL_TIM_Base_Start>
	  HAL_TIM_Base_Start_IT(&htim4);
 8000a82:	480e      	ldr	r0, [pc, #56]	@ (8000abc <SendCanConfig+0x60>)
 8000a84:	f002 fe4a 	bl	800371c <HAL_TIM_Base_Start_IT>
	  SendCanConfigBaud(data);
 8000a88:	4620      	mov	r0, r4
 8000a8a:	f7ff ff33 	bl	80008f4 <SendCanConfigBaud>
	  SendCanConfigFilter(data);
 8000a8e:	4620      	mov	r0, r4
 8000a90:	f7ff ffda 	bl	8000a48 <SendCanConfigFilter>
	  HAL_CAN_Start(&hcan1);
 8000a94:	480a      	ldr	r0, [pc, #40]	@ (8000ac0 <SendCanConfig+0x64>)
 8000a96:	f000 fd85 	bl	80015a4 <HAL_CAN_Start>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8000a9a:	480a      	ldr	r0, [pc, #40]	@ (8000ac4 <SendCanConfig+0x68>)
 8000a9c:	2180      	movs	r1, #128	@ 0x80
 8000a9e:	f001 fc9f 	bl	80023e0 <HAL_GPIO_TogglePin>
}
 8000aa2:	2001      	movs	r0, #1
 8000aa4:	bd10      	pop	{r4, pc}
	  HAL_CAN_Stop(&hcan1);
 8000aa6:	4806      	ldr	r0, [pc, #24]	@ (8000ac0 <SendCanConfig+0x64>)
 8000aa8:	f000 fdaa 	bl	8001600 <HAL_CAN_Stop>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8000aac:	4805      	ldr	r0, [pc, #20]	@ (8000ac4 <SendCanConfig+0x68>)
 8000aae:	2140      	movs	r1, #64	@ 0x40
 8000ab0:	f001 fc96 	bl	80023e0 <HAL_GPIO_TogglePin>
}
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	bd10      	pop	{r4, pc}
 8000ab8:	20004448 	.word	0x20004448
 8000abc:	20004490 	.word	0x20004490
 8000ac0:	20000324 	.word	0x20000324
 8000ac4:	40020000 	.word	0x40020000

08000ac8 <SystemClock_Config>:
{
 8000ac8:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aca:	2300      	movs	r3, #0
{
 8000acc:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ace:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
 8000ad2:	e9cd 330c 	strd	r3, r3, [sp, #48]	@ 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad6:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000ada:	e9cd 3305 	strd	r3, r3, [sp, #20]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ade:	4921      	ldr	r1, [pc, #132]	@ (8000b64 <SystemClock_Config+0x9c>)
 8000ae0:	9301      	str	r3, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ae2:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae4:	6c08      	ldr	r0, [r1, #64]	@ 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ae6:	4a20      	ldr	r2, [pc, #128]	@ (8000b68 <SystemClock_Config+0xa0>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae8:	f040 5080 	orr.w	r0, r0, #268435456	@ 0x10000000
 8000aec:	6408      	str	r0, [r1, #64]	@ 0x40
 8000aee:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000af0:	f001 5180 	and.w	r1, r1, #268435456	@ 0x10000000
 8000af4:	9101      	str	r1, [sp, #4]
 8000af6:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000af8:	9302      	str	r3, [sp, #8]
 8000afa:	6813      	ldr	r3, [r2, #0]
 8000afc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b00:	6013      	str	r3, [r2, #0]
 8000b02:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b04:	2001      	movs	r0, #1
 8000b06:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b0e:	e9cd 0108 	strd	r0, r1, [sp, #32]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b12:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b14:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b18:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b1a:	e9cd 410e 	strd	r4, r1, [sp, #56]	@ 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b1e:	9802      	ldr	r0, [sp, #8]
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b20:	2107      	movs	r1, #7
 8000b22:	2002      	movs	r0, #2
 8000b24:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b28:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000b2a:	23a8      	movs	r3, #168	@ 0xa8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b2c:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b2e:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000b30:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b32:	f002 facf 	bl	80030d4 <HAL_RCC_OscConfig>
 8000b36:	b108      	cbz	r0, 8000b3c <SystemClock_Config+0x74>
 8000b38:	b672      	cpsid	i
  while (1)
 8000b3a:	e7fe      	b.n	8000b3a <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b3c:	220f      	movs	r2, #15
 8000b3e:	4603      	mov	r3, r0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b40:	e9cd 2403 	strd	r2, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b44:	f44f 55a0 	mov.w	r5, #5120	@ 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b48:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b4c:	a803      	add	r0, sp, #12
 8000b4e:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b50:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b54:	9207      	str	r2, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b56:	f002 fcd3 	bl	8003500 <HAL_RCC_ClockConfig>
 8000b5a:	b108      	cbz	r0, 8000b60 <SystemClock_Config+0x98>
 8000b5c:	b672      	cpsid	i
  while (1)
 8000b5e:	e7fe      	b.n	8000b5e <SystemClock_Config+0x96>
}
 8000b60:	b015      	add	sp, #84	@ 0x54
 8000b62:	bd30      	pop	{r4, r5, pc}
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40007000 	.word	0x40007000

08000b6c <main>:
{
 8000b6c:	b508      	push	{r3, lr}
  HAL_Init();
 8000b6e:	f000 fbcb 	bl	8001308 <HAL_Init>
  SystemClock_Config();
 8000b72:	f7ff ffa9 	bl	8000ac8 <SystemClock_Config>
  MX_GPIO_Init();
 8000b76:	f7ff fda1 	bl	80006bc <MX_GPIO_Init>
  MX_DMA_Init();
 8000b7a:	f7ff fd7b 	bl	8000674 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000b7e:	f000 fb19 	bl	80011b4 <MX_USB_OTG_FS_PCD_Init>
  MX_UART5_Init();
 8000b82:	f000 fa3b 	bl	8000ffc <MX_UART5_Init>
  MX_I2C1_Init();
 8000b86:	f7ff fdeb 	bl	8000760 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000b8a:	f000 f8df 	bl	8000d4c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000b8e:	f000 f919 	bl	8000dc4 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000b92:	f000 f951 	bl	8000e38 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000b96:	f000 f989 	bl	8000eac <MX_TIM5_Init>
  MX_USB_DEVICE_Init();
 8000b9a:	f004 f95b 	bl	8004e54 <MX_USB_DEVICE_Init>
	  HID_Frame_ReadAndSendCan(&hid_frame_fifo);
 8000b9e:	4e05      	ldr	r6, [pc, #20]	@ (8000bb4 <main+0x48>)
	  HID_Frame_ReadAndSend(&hid_frame_fifo_receive, process_sendframe);
 8000ba0:	4d05      	ldr	r5, [pc, #20]	@ (8000bb8 <main+0x4c>)
 8000ba2:	4c06      	ldr	r4, [pc, #24]	@ (8000bbc <main+0x50>)
	  HID_Frame_ReadAndSendCan(&hid_frame_fifo);
 8000ba4:	4630      	mov	r0, r6
 8000ba6:	f004 fc6d 	bl	8005484 <HID_Frame_ReadAndSendCan>
	  HID_Frame_ReadAndSend(&hid_frame_fifo_receive, process_sendframe);
 8000baa:	4629      	mov	r1, r5
 8000bac:	4620      	mov	r0, r4
 8000bae:	f004 fc39 	bl	8005424 <HID_Frame_ReadAndSend>
  while (1)
 8000bb2:	e7f7      	b.n	8000ba4 <main+0x38>
 8000bb4:	20006210 	.word	0x20006210
 8000bb8:	20004e74 	.word	0x20004e74
 8000bbc:	200003a4 	.word	0x200003a4

08000bc0 <HAL_CAN_RxFifo0MsgPendingCallback>:
{
 8000bc0:	b538      	push	{r3, r4, r5, lr}
    if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, &usbFrame[6]) == HAL_OK)
 8000bc2:	4d14      	ldr	r5, [pc, #80]	@ (8000c14 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8000bc4:	4c14      	ldr	r4, [pc, #80]	@ (8000c18 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8000bc6:	4815      	ldr	r0, [pc, #84]	@ (8000c1c <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8000bc8:	462b      	mov	r3, r5
 8000bca:	4622      	mov	r2, r4
 8000bcc:	2100      	movs	r1, #0
 8000bce:	f000 fdaf 	bl	8001730 <HAL_CAN_GetRxMessage>
 8000bd2:	b9e8      	cbnz	r0, 8000c10 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>
    	RxHeader.Timestamp = TIM5->CNT;
 8000bd4:	4b12      	ldr	r3, [pc, #72]	@ (8000c20 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
        usbFrame[1] = (RxHeader.DLC << 4) | (RxHeader.IDE & 0x0F);
 8000bd6:	6920      	ldr	r0, [r4, #16]
    	RxHeader.Timestamp = TIM5->CNT;
 8000bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bda:	6163      	str	r3, [r4, #20]
        usbFrame[0] = 0x03;
 8000bdc:	1fa9      	subs	r1, r5, #6
 8000bde:	2203      	movs	r2, #3
 8000be0:	ba1b      	rev	r3, r3
 8000be2:	f805 2c06 	strb.w	r2, [r5, #-6]
        uint32_t canId = (RxHeader.IDE == CAN_ID_STD) ? RxHeader.StdId : RxHeader.ExtId;
 8000be6:	e9d4 5200 	ldrd	r5, r2, [r4]
		usbFrame[14] = (RxHeader.Timestamp >> 24) & 0xFF;
 8000bea:	f8c1 300e 	str.w	r3, [r1, #14]
        usbFrame[1] = (RxHeader.DLC << 4) | (RxHeader.IDE & 0x0F);
 8000bee:	68a3      	ldr	r3, [r4, #8]
        uint32_t canId = (RxHeader.IDE == CAN_ID_STD) ? RxHeader.StdId : RxHeader.ExtId;
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	bf08      	it	eq
 8000bf4:	462a      	moveq	r2, r5
        usbFrame[1] = (RxHeader.DLC << 4) | (RxHeader.IDE & 0x0F);
 8000bf6:	f003 030f 	and.w	r3, r3, #15
 8000bfa:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8000bfe:	ba12      	rev	r2, r2
 8000c00:	704b      	strb	r3, [r1, #1]
        usbFrame[2] = (canId >> 24) & 0xFF;
 8000c02:	f8c1 2002 	str.w	r2, [r1, #2]
}
 8000c06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HID_Frame_Write(&hid_frame_fifo_receive,usbFrame);
 8000c0a:	4806      	ldr	r0, [pc, #24]	@ (8000c24 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8000c0c:	f004 bbde 	b.w	80053cc <HID_Frame_Write>
}
 8000c10:	bd38      	pop	{r3, r4, r5, pc}
 8000c12:	bf00      	nop
 8000c14:	200043ae 	.word	0x200043ae
 8000c18:	20004410 	.word	0x20004410
 8000c1c:	20000324 	.word	0x20000324
 8000c20:	40000c00 	.word	0x40000c00
 8000c24:	200003a4 	.word	0x200003a4

08000c28 <Error_Handler>:
 8000c28:	b672      	cpsid	i
  while (1)
 8000c2a:	e7fe      	b.n	8000c2a <Error_Handler+0x2>

08000c2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c2c:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c60 <HAL_MspInit+0x34>)
 8000c30:	2100      	movs	r1, #0
 8000c32:	9100      	str	r1, [sp, #0]
 8000c34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000c36:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000c3a:	645a      	str	r2, [r3, #68]	@ 0x44
 8000c3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000c3e:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000c42:	9200      	str	r2, [sp, #0]
 8000c44:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c46:	9101      	str	r1, [sp, #4]
 8000c48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c4a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000c4e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c56:	9301      	str	r3, [sp, #4]
 8000c58:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c5a:	b002      	add	sp, #8
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	40023800 	.word	0x40023800

08000c64 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c64:	e7fe      	b.n	8000c64 <NMI_Handler>
 8000c66:	bf00      	nop

08000c68 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <HardFault_Handler>
 8000c6a:	bf00      	nop

08000c6c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <MemManage_Handler>
 8000c6e:	bf00      	nop

08000c70 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <BusFault_Handler>
 8000c72:	bf00      	nop

08000c74 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <UsageFault_Handler>
 8000c76:	bf00      	nop

08000c78 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop

08000c7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop

08000c80 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop

08000c84 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c84:	f000 bb5a 	b.w	800133c <HAL_IncTick>

08000c88 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8000c88:	4801      	ldr	r0, [pc, #4]	@ (8000c90 <DMA1_Stream0_IRQHandler+0x8>)
 8000c8a:	f001 b8f9 	b.w	8001e80 <HAL_DMA_IRQHandler>
 8000c8e:	bf00      	nop
 8000c90:	20004568 	.word	0x20004568

08000c94 <CAN1_RX0_IRQHandler>:
void CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000c94:	4801      	ldr	r0, [pc, #4]	@ (8000c9c <CAN1_RX0_IRQHandler+0x8>)
 8000c96:	f000 bdf9 	b.w	800188c <HAL_CAN_IRQHandler>
 8000c9a:	bf00      	nop
 8000c9c:	20000324 	.word	0x20000324

08000ca0 <CAN1_RX1_IRQHandler>:
}

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
 8000ca0:	4801      	ldr	r0, [pc, #4]	@ (8000ca8 <CAN1_RX1_IRQHandler+0x8>)
 8000ca2:	f000 bdf3 	b.w	800188c <HAL_CAN_IRQHandler>
 8000ca6:	bf00      	nop
 8000ca8:	20000324 	.word	0x20000324

08000cac <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cac:	4801      	ldr	r0, [pc, #4]	@ (8000cb4 <TIM1_UP_TIM10_IRQHandler+0x8>)
 8000cae:	f002 be39 	b.w	8003924 <HAL_TIM_IRQHandler>
 8000cb2:	bf00      	nop
 8000cb4:	20004520 	.word	0x20004520

08000cb8 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000cb8:	4801      	ldr	r0, [pc, #4]	@ (8000cc0 <TIM2_IRQHandler+0x8>)
 8000cba:	f002 be33 	b.w	8003924 <HAL_TIM_IRQHandler>
 8000cbe:	bf00      	nop
 8000cc0:	200044d8 	.word	0x200044d8

08000cc4 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000cc4:	4801      	ldr	r0, [pc, #4]	@ (8000ccc <TIM4_IRQHandler+0x8>)
 8000cc6:	f002 be2d 	b.w	8003924 <HAL_TIM_IRQHandler>
 8000cca:	bf00      	nop
 8000ccc:	20004490 	.word	0x20004490

08000cd0 <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8000cd0:	4801      	ldr	r0, [pc, #4]	@ (8000cd8 <DMA1_Stream7_IRQHandler+0x8>)
 8000cd2:	f001 b8d5 	b.w	8001e80 <HAL_DMA_IRQHandler>
 8000cd6:	bf00      	nop
 8000cd8:	200045c8 	.word	0x200045c8

08000cdc <UART5_IRQHandler>:
void UART5_IRQHandler(void)
{
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000cdc:	4801      	ldr	r0, [pc, #4]	@ (8000ce4 <UART5_IRQHandler+0x8>)
 8000cde:	f003 b987 	b.w	8003ff0 <HAL_UART_IRQHandler>
 8000ce2:	bf00      	nop
 8000ce4:	20004628 	.word	0x20004628

08000ce8 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000ce8:	4801      	ldr	r0, [pc, #4]	@ (8000cf0 <OTG_FS_IRQHandler+0x8>)
 8000cea:	f001 bcd9 	b.w	80026a0 <HAL_PCD_IRQHandler>
 8000cee:	bf00      	nop
 8000cf0:	20004670 	.word	0x20004670

08000cf4 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cf4:	490c      	ldr	r1, [pc, #48]	@ (8000d28 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cf6:	4a0d      	ldr	r2, [pc, #52]	@ (8000d2c <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8000cf8:	680b      	ldr	r3, [r1, #0]
{
 8000cfa:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cfc:	4c0c      	ldr	r4, [pc, #48]	@ (8000d30 <_sbrk+0x3c>)
 8000cfe:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8000d00:	b12b      	cbz	r3, 8000d0e <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d02:	4418      	add	r0, r3
 8000d04:	4290      	cmp	r0, r2
 8000d06:	d807      	bhi.n	8000d18 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000d08:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000d0e:	4b09      	ldr	r3, [pc, #36]	@ (8000d34 <_sbrk+0x40>)
 8000d10:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8000d12:	4418      	add	r0, r3
 8000d14:	4290      	cmp	r0, r2
 8000d16:	d9f7      	bls.n	8000d08 <_sbrk+0x14>
    errno = ENOMEM;
 8000d18:	f005 ff1e 	bl	8006b58 <__errno>
 8000d1c:	230c      	movs	r3, #12
 8000d1e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000d20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	bd10      	pop	{r4, pc}
 8000d28:	20004444 	.word	0x20004444
 8000d2c:	20020000 	.word	0x20020000
 8000d30:	00000400 	.word	0x00000400
 8000d34:	2000a708 	.word	0x2000a708

08000d38 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d38:	4a03      	ldr	r2, [pc, #12]	@ (8000d48 <SystemInit+0x10>)
 8000d3a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8000d3e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d42:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d46:	4770      	bx	lr
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000d4c:	b500      	push	{lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d4e:	481b      	ldr	r0, [pc, #108]	@ (8000dbc <MX_TIM1_Init+0x70>)
 8000d50:	4a1b      	ldr	r2, [pc, #108]	@ (8000dc0 <MX_TIM1_Init+0x74>)
{
 8000d52:	b087      	sub	sp, #28
  htim1.Instance = TIM1;
 8000d54:	6002      	str	r2, [r0, #0]
  htim1.Init.Prescaler = 167;
 8000d56:	22a7      	movs	r2, #167	@ 0xa7
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d58:	2300      	movs	r3, #0
  htim1.Init.Prescaler = 167;
 8000d5a:	6042      	str	r2, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 999;
 8000d5c:	f240 32e7 	movw	r2, #999	@ 0x3e7
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d60:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8000d64:	e9cd 3304 	strd	r3, r3, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d68:	e9cd 3300 	strd	r3, r3, [sp]
  htim1.Init.Period = 999;
 8000d6c:	e9c0 3202 	strd	r3, r2, [r0, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
 8000d70:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000d74:	6183      	str	r3, [r0, #24]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d76:	f002 fee1 	bl	8003b3c <HAL_TIM_Base_Init>
 8000d7a:	b998      	cbnz	r0, 8000da4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d80:	480e      	ldr	r0, [pc, #56]	@ (8000dbc <MX_TIM1_Init+0x70>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d82:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d84:	a902      	add	r1, sp, #8
 8000d86:	f002 fd1b 	bl	80037c0 <HAL_TIM_ConfigClockSource>
 8000d8a:	b998      	cbnz	r0, 8000db4 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d90:	480a      	ldr	r0, [pc, #40]	@ (8000dbc <MX_TIM1_Init+0x70>)
 8000d92:	4669      	mov	r1, sp
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d94:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d98:	f002 fefe 	bl	8003b98 <HAL_TIMEx_MasterConfigSynchronization>
 8000d9c:	b928      	cbnz	r0, 8000daa <MX_TIM1_Init+0x5e>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d9e:	b007      	add	sp, #28
 8000da0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000da4:	f7ff ff40 	bl	8000c28 <Error_Handler>
 8000da8:	e7e8      	b.n	8000d7c <MX_TIM1_Init+0x30>
    Error_Handler();
 8000daa:	f7ff ff3d 	bl	8000c28 <Error_Handler>
}
 8000dae:	b007      	add	sp, #28
 8000db0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000db4:	f7ff ff38 	bl	8000c28 <Error_Handler>
 8000db8:	e7e8      	b.n	8000d8c <MX_TIM1_Init+0x40>
 8000dba:	bf00      	nop
 8000dbc:	20004520 	.word	0x20004520
 8000dc0:	40010000 	.word	0x40010000

08000dc4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000dc4:	b500      	push	{lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dc6:	481b      	ldr	r0, [pc, #108]	@ (8000e34 <MX_TIM2_Init+0x70>)
 8000dc8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
{
 8000dcc:	b087      	sub	sp, #28
  htim2.Instance = TIM2;
 8000dce:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 83;
 8000dd0:	2253      	movs	r2, #83	@ 0x53
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dd2:	2300      	movs	r3, #0
  htim2.Init.Prescaler = 83;
 8000dd4:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 3000;
 8000dd6:	f640 32b8 	movw	r2, #3000	@ 0xbb8
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dda:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8000dde:	e9cd 3304 	strd	r3, r3, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de2:	e9cd 3300 	strd	r3, r3, [sp]
  htim2.Init.Period = 3000;
 8000de6:	e9c0 3202 	strd	r3, r2, [r0, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dea:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dec:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dee:	f002 fea5 	bl	8003b3c <HAL_TIM_Base_Init>
 8000df2:	b998      	cbnz	r0, 8000e1c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000df4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000df8:	480e      	ldr	r0, [pc, #56]	@ (8000e34 <MX_TIM2_Init+0x70>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dfa:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dfc:	a902      	add	r1, sp, #8
 8000dfe:	f002 fcdf 	bl	80037c0 <HAL_TIM_ConfigClockSource>
 8000e02:	b998      	cbnz	r0, 8000e2c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e04:	2200      	movs	r2, #0
 8000e06:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e08:	480a      	ldr	r0, [pc, #40]	@ (8000e34 <MX_TIM2_Init+0x70>)
 8000e0a:	4669      	mov	r1, sp
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e0c:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e10:	f002 fec2 	bl	8003b98 <HAL_TIMEx_MasterConfigSynchronization>
 8000e14:	b928      	cbnz	r0, 8000e22 <MX_TIM2_Init+0x5e>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e16:	b007      	add	sp, #28
 8000e18:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000e1c:	f7ff ff04 	bl	8000c28 <Error_Handler>
 8000e20:	e7e8      	b.n	8000df4 <MX_TIM2_Init+0x30>
    Error_Handler();
 8000e22:	f7ff ff01 	bl	8000c28 <Error_Handler>
}
 8000e26:	b007      	add	sp, #28
 8000e28:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000e2c:	f7ff fefc 	bl	8000c28 <Error_Handler>
 8000e30:	e7e8      	b.n	8000e04 <MX_TIM2_Init+0x40>
 8000e32:	bf00      	nop
 8000e34:	200044d8 	.word	0x200044d8

08000e38 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000e38:	b500      	push	{lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e3a:	481a      	ldr	r0, [pc, #104]	@ (8000ea4 <MX_TIM4_Init+0x6c>)
 8000e3c:	4a1a      	ldr	r2, [pc, #104]	@ (8000ea8 <MX_TIM4_Init+0x70>)
{
 8000e3e:	b087      	sub	sp, #28
  htim4.Instance = TIM4;
 8000e40:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 83;
 8000e42:	2253      	movs	r2, #83	@ 0x53
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e44:	2300      	movs	r3, #0
  htim4.Init.Prescaler = 83;
 8000e46:	6042      	str	r2, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 980;
 8000e48:	f44f 7275 	mov.w	r2, #980	@ 0x3d4
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e4c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8000e50:	e9cd 3304 	strd	r3, r3, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e54:	e9cd 3300 	strd	r3, r3, [sp]
  htim4.Init.Period = 980;
 8000e58:	e9c0 3202 	strd	r3, r2, [r0, #8]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e5c:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e5e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e60:	f002 fe6c 	bl	8003b3c <HAL_TIM_Base_Init>
 8000e64:	b998      	cbnz	r0, 8000e8e <MX_TIM4_Init+0x56>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e6a:	480e      	ldr	r0, [pc, #56]	@ (8000ea4 <MX_TIM4_Init+0x6c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e6c:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e6e:	a902      	add	r1, sp, #8
 8000e70:	f002 fca6 	bl	80037c0 <HAL_TIM_ConfigClockSource>
 8000e74:	b998      	cbnz	r0, 8000e9e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e76:	2200      	movs	r2, #0
 8000e78:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e7a:	480a      	ldr	r0, [pc, #40]	@ (8000ea4 <MX_TIM4_Init+0x6c>)
 8000e7c:	4669      	mov	r1, sp
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e7e:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e82:	f002 fe89 	bl	8003b98 <HAL_TIMEx_MasterConfigSynchronization>
 8000e86:	b928      	cbnz	r0, 8000e94 <MX_TIM4_Init+0x5c>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000e88:	b007      	add	sp, #28
 8000e8a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000e8e:	f7ff fecb 	bl	8000c28 <Error_Handler>
 8000e92:	e7e8      	b.n	8000e66 <MX_TIM4_Init+0x2e>
    Error_Handler();
 8000e94:	f7ff fec8 	bl	8000c28 <Error_Handler>
}
 8000e98:	b007      	add	sp, #28
 8000e9a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000e9e:	f7ff fec3 	bl	8000c28 <Error_Handler>
 8000ea2:	e7e8      	b.n	8000e76 <MX_TIM4_Init+0x3e>
 8000ea4:	20004490 	.word	0x20004490
 8000ea8:	40000800 	.word	0x40000800

08000eac <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8000eac:	b500      	push	{lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000eae:	481b      	ldr	r0, [pc, #108]	@ (8000f1c <MX_TIM5_Init+0x70>)
 8000eb0:	4a1b      	ldr	r2, [pc, #108]	@ (8000f20 <MX_TIM5_Init+0x74>)
{
 8000eb2:	b087      	sub	sp, #28
  htim5.Instance = TIM5;
 8000eb4:	6002      	str	r2, [r0, #0]
  htim5.Init.Prescaler = 8399;
 8000eb6:	f242 02cf 	movw	r2, #8399	@ 0x20cf
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eba:	2300      	movs	r3, #0
  htim5.Init.Prescaler = 8399;
 8000ebc:	6042      	str	r2, [r0, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim5.Init.Period = 0xffffffff;
 8000ebe:	f04f 32ff 	mov.w	r2, #4294967295
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ec2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8000ec6:	e9cd 3304 	strd	r3, r3, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eca:	e9cd 3300 	strd	r3, r3, [sp]
  htim5.Init.Period = 0xffffffff;
 8000ece:	e9c0 3202 	strd	r3, r2, [r0, #8]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ed2:	6103      	str	r3, [r0, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed4:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000ed6:	f002 fe31 	bl	8003b3c <HAL_TIM_Base_Init>
 8000eda:	b998      	cbnz	r0, 8000f04 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000edc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000ee0:	480e      	ldr	r0, [pc, #56]	@ (8000f1c <MX_TIM5_Init+0x70>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ee2:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000ee4:	a902      	add	r1, sp, #8
 8000ee6:	f002 fc6b 	bl	80037c0 <HAL_TIM_ConfigClockSource>
 8000eea:	b998      	cbnz	r0, 8000f14 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eec:	2200      	movs	r2, #0
 8000eee:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000ef0:	480a      	ldr	r0, [pc, #40]	@ (8000f1c <MX_TIM5_Init+0x70>)
 8000ef2:	4669      	mov	r1, sp
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ef4:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000ef8:	f002 fe4e 	bl	8003b98 <HAL_TIMEx_MasterConfigSynchronization>
 8000efc:	b928      	cbnz	r0, 8000f0a <MX_TIM5_Init+0x5e>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000efe:	b007      	add	sp, #28
 8000f00:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000f04:	f7ff fe90 	bl	8000c28 <Error_Handler>
 8000f08:	e7e8      	b.n	8000edc <MX_TIM5_Init+0x30>
    Error_Handler();
 8000f0a:	f7ff fe8d 	bl	8000c28 <Error_Handler>
}
 8000f0e:	b007      	add	sp, #28
 8000f10:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000f14:	f7ff fe88 	bl	8000c28 <Error_Handler>
 8000f18:	e7e8      	b.n	8000eec <MX_TIM5_Init+0x40>
 8000f1a:	bf00      	nop
 8000f1c:	20004448 	.word	0x20004448
 8000f20:	40000c00 	.word	0x40000c00

08000f24 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f24:	b500      	push	{lr}

  if(tim_baseHandle->Instance==TIM1)
 8000f26:	4a31      	ldr	r2, [pc, #196]	@ (8000fec <HAL_TIM_Base_MspInit+0xc8>)
 8000f28:	6803      	ldr	r3, [r0, #0]
 8000f2a:	4293      	cmp	r3, r2
{
 8000f2c:	b085      	sub	sp, #20
  if(tim_baseHandle->Instance==TIM1)
 8000f2e:	d01a      	beq.n	8000f66 <HAL_TIM_Base_MspInit+0x42>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM2)
 8000f30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f34:	d02d      	beq.n	8000f92 <HAL_TIM_Base_MspInit+0x6e>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM4)
 8000f36:	4a2e      	ldr	r2, [pc, #184]	@ (8000ff0 <HAL_TIM_Base_MspInit+0xcc>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d040      	beq.n	8000fbe <HAL_TIM_Base_MspInit+0x9a>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM5)
 8000f3c:	4a2d      	ldr	r2, [pc, #180]	@ (8000ff4 <HAL_TIM_Base_MspInit+0xd0>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d002      	beq.n	8000f48 <HAL_TIM_Base_MspInit+0x24>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8000f42:	b005      	add	sp, #20
 8000f44:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000f48:	4b2b      	ldr	r3, [pc, #172]	@ (8000ff8 <HAL_TIM_Base_MspInit+0xd4>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	9203      	str	r2, [sp, #12]
 8000f4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f50:	f042 0208 	orr.w	r2, r2, #8
 8000f54:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f58:	f003 0308 	and.w	r3, r3, #8
 8000f5c:	9303      	str	r3, [sp, #12]
 8000f5e:	9b03      	ldr	r3, [sp, #12]
}
 8000f60:	b005      	add	sp, #20
 8000f62:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f66:	4b24      	ldr	r3, [pc, #144]	@ (8000ff8 <HAL_TIM_Base_MspInit+0xd4>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	9200      	str	r2, [sp, #0]
 8000f6c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8000f6e:	f041 0101 	orr.w	r1, r1, #1
 8000f72:	6459      	str	r1, [r3, #68]	@ 0x44
 8000f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 2);
 8000f76:	2101      	movs	r1, #1
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f78:	400b      	ands	r3, r1
 8000f7a:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 2);
 8000f7c:	2202      	movs	r2, #2
 8000f7e:	2019      	movs	r0, #25
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f80:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 2);
 8000f82:	f000 fdd9 	bl	8001b38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000f86:	2019      	movs	r0, #25
}
 8000f88:	b005      	add	sp, #20
 8000f8a:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000f8e:	f000 be0f 	b.w	8001bb0 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f92:	f503 330e 	add.w	r3, r3, #145408	@ 0x23800
 8000f96:	2200      	movs	r2, #0
 8000f98:	9201      	str	r2, [sp, #4]
 8000f9a:	6c19      	ldr	r1, [r3, #64]	@ 0x40
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 1);
 8000f9c:	2201      	movs	r2, #1
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f9e:	4311      	orrs	r1, r2
 8000fa0:	6419      	str	r1, [r3, #64]	@ 0x40
 8000fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 1);
 8000fa8:	4611      	mov	r1, r2
 8000faa:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fac:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 1);
 8000fae:	f000 fdc3 	bl	8001b38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fb2:	201c      	movs	r0, #28
}
 8000fb4:	b005      	add	sp, #20
 8000fb6:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000fba:	f000 bdf9 	b.w	8001bb0 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	4b0d      	ldr	r3, [pc, #52]	@ (8000ff8 <HAL_TIM_Base_MspInit+0xd4>)
 8000fc2:	9202      	str	r2, [sp, #8]
 8000fc4:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8000fc6:	f041 0104 	orr.w	r1, r1, #4
 8000fca:	6419      	str	r1, [r3, #64]	@ 0x40
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fce:	f003 0304 	and.w	r3, r3, #4
 8000fd2:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000fd4:	4611      	mov	r1, r2
 8000fd6:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000fd8:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000fda:	f000 fdad 	bl	8001b38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000fde:	201e      	movs	r0, #30
}
 8000fe0:	b005      	add	sp, #20
 8000fe2:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000fe6:	f000 bde3 	b.w	8001bb0 <HAL_NVIC_EnableIRQ>
 8000fea:	bf00      	nop
 8000fec:	40010000 	.word	0x40010000
 8000ff0:	40000800 	.word	0x40000800
 8000ff4:	40000c00 	.word	0x40000c00
 8000ff8:	40023800 	.word	0x40023800

08000ffc <MX_UART5_Init>:
DMA_HandleTypeDef hdma_uart5_tx;
DMA_HandleTypeDef hdma_uart5_rx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8000ffc:	b510      	push	{r4, lr}
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000ffe:	480b      	ldr	r0, [pc, #44]	@ (800102c <MX_UART5_Init+0x30>)
 8001000:	4c0b      	ldr	r4, [pc, #44]	@ (8001030 <MX_UART5_Init+0x34>)
  huart5.Init.BaudRate = 115200;
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001002:	2300      	movs	r3, #0
  huart5.Init.BaudRate = 115200;
 8001004:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
  huart5.Init.StopBits = UART_STOPBITS_1;
  huart5.Init.Parity = UART_PARITY_NONE;
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001008:	220c      	movs	r2, #12
  huart5.Init.BaudRate = 115200;
 800100a:	e9c0 4100 	strd	r4, r1, [r0]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800100e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001012:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001016:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800101a:	f002 fe97 	bl	8003d4c <HAL_UART_Init>
 800101e:	b900      	cbnz	r0, 8001022 <MX_UART5_Init+0x26>
  }
  /* USER CODE BEGIN UART5_Init 2 */
 // HAL_UART_Receive_IT(&huart5, &uart5_rx_byte, UART5_RX_BUF_LEN);
  /* USER CODE END UART5_Init 2 */

}
 8001020:	bd10      	pop	{r4, pc}
 8001022:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001026:	f7ff bdff 	b.w	8000c28 <Error_Handler>
 800102a:	bf00      	nop
 800102c:	20004628 	.word	0x20004628
 8001030:	40005000 	.word	0x40005000

08001034 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001034:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==UART5)
 8001036:	4b44      	ldr	r3, [pc, #272]	@ (8001148 <HAL_UART_MspInit+0x114>)
 8001038:	6802      	ldr	r2, [r0, #0]
{
 800103a:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103c:	2400      	movs	r4, #0
  if(uartHandle->Instance==UART5)
 800103e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001040:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001044:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8001048:	9408      	str	r4, [sp, #32]
  if(uartHandle->Instance==UART5)
 800104a:	d001      	beq.n	8001050 <HAL_UART_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 800104c:	b00b      	add	sp, #44	@ 0x2c
 800104e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_UART5_CLK_ENABLE();
 8001050:	f503 33f4 	add.w	r3, r3, #124928	@ 0x1e800
 8001054:	9401      	str	r4, [sp, #4]
 8001056:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001058:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800105c:	641a      	str	r2, [r3, #64]	@ 0x40
 800105e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001060:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001064:	9201      	str	r2, [sp, #4]
 8001066:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001068:	9402      	str	r4, [sp, #8]
 800106a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800106c:	f042 0204 	orr.w	r2, r2, #4
 8001070:	631a      	str	r2, [r3, #48]	@ 0x30
 8001072:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001074:	f002 0204 	and.w	r2, r2, #4
 8001078:	9202      	str	r2, [sp, #8]
 800107a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800107c:	9403      	str	r4, [sp, #12]
 800107e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001080:	f042 0208 	orr.w	r2, r2, #8
 8001084:	631a      	str	r2, [r3, #48]	@ 0x30
 8001086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001088:	f003 0308 	and.w	r3, r3, #8
 800108c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800108e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001092:	2608      	movs	r6, #8
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001094:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001096:	2703      	movs	r7, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001098:	a904      	add	r1, sp, #16
 800109a:	4605      	mov	r5, r0
 800109c:	482b      	ldr	r0, [pc, #172]	@ (800114c <HAL_UART_MspInit+0x118>)
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800109e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a2:	e9cd 7607 	strd	r7, r6, [sp, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010a6:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a8:	f000 ffc0 	bl	800202c <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ac:	2204      	movs	r2, #4
 80010ae:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010b0:	4827      	ldr	r0, [pc, #156]	@ (8001150 <HAL_UART_MspInit+0x11c>)
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80010b2:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010b4:	a904      	add	r1, sp, #16
    hdma_uart5_tx.Instance = DMA1_Stream7;
 80010b6:	4e27      	ldr	r6, [pc, #156]	@ (8001154 <HAL_UART_MspInit+0x120>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b8:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010c0:	f000 ffb4 	bl	800202c <HAL_GPIO_Init>
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 80010c4:	4a24      	ldr	r2, [pc, #144]	@ (8001158 <HAL_UART_MspInit+0x124>)
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010c6:	6274      	str	r4, [r6, #36]	@ 0x24
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 80010c8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80010cc:	e9c6 2300 	strd	r2, r3, [r6]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010d4:	2240      	movs	r2, #64	@ 0x40
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010d6:	6133      	str	r3, [r6, #16]
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 80010d8:	4630      	mov	r0, r6
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80010da:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010de:	e9c6 2402 	strd	r2, r4, [r6, #8]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010e2:	e9c6 4405 	strd	r4, r4, [r6, #20]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80010e6:	e9c6 4307 	strd	r4, r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 80010ea:	f000 fd9b 	bl	8001c24 <HAL_DMA_Init>
 80010ee:	bb20      	cbnz	r0, 800113a <HAL_UART_MspInit+0x106>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 80010f0:	4c1a      	ldr	r4, [pc, #104]	@ (800115c <HAL_UART_MspInit+0x128>)
 80010f2:	4a1b      	ldr	r2, [pc, #108]	@ (8001160 <HAL_UART_MspInit+0x12c>)
 80010f4:	6022      	str	r2, [r4, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 80010f6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010fa:	2300      	movs	r3, #0
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 80010fc:	63ae      	str	r6, [r5, #56]	@ 0x38
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 80010fe:	6062      	str	r2, [r4, #4]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001100:	f44f 6180 	mov.w	r1, #1024	@ 0x400
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001104:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8001108:	4620      	mov	r0, r4
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800110a:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800110e:	e9c4 1304 	strd	r1, r3, [r4, #16]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8001112:	e9c4 3306 	strd	r3, r3, [r4, #24]
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 8001116:	63b5      	str	r5, [r6, #56]	@ 0x38
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001118:	6222      	str	r2, [r4, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800111a:	6263      	str	r3, [r4, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800111c:	f000 fd82 	bl	8001c24 <HAL_DMA_Init>
 8001120:	b970      	cbnz	r0, 8001140 <HAL_UART_MspInit+0x10c>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 1);
 8001122:	2201      	movs	r2, #1
 8001124:	2100      	movs	r1, #0
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8001126:	63ec      	str	r4, [r5, #60]	@ 0x3c
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 1);
 8001128:	2035      	movs	r0, #53	@ 0x35
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 800112a:	63a5      	str	r5, [r4, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 1);
 800112c:	f000 fd04 	bl	8001b38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001130:	2035      	movs	r0, #53	@ 0x35
 8001132:	f000 fd3d 	bl	8001bb0 <HAL_NVIC_EnableIRQ>
}
 8001136:	b00b      	add	sp, #44	@ 0x2c
 8001138:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 800113a:	f7ff fd75 	bl	8000c28 <Error_Handler>
 800113e:	e7d7      	b.n	80010f0 <HAL_UART_MspInit+0xbc>
      Error_Handler();
 8001140:	f7ff fd72 	bl	8000c28 <Error_Handler>
 8001144:	e7ed      	b.n	8001122 <HAL_UART_MspInit+0xee>
 8001146:	bf00      	nop
 8001148:	40005000 	.word	0x40005000
 800114c:	40020800 	.word	0x40020800
 8001150:	40020c00 	.word	0x40020c00
 8001154:	200045c8 	.word	0x200045c8
 8001158:	400260b8 	.word	0x400260b8
 800115c:	20004568 	.word	0x20004568
 8001160:	40026010 	.word	0x40026010

08001164 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==UART5)
 8001164:	4b0f      	ldr	r3, [pc, #60]	@ (80011a4 <HAL_UART_MspDeInit+0x40>)
 8001166:	6802      	ldr	r2, [r0, #0]
 8001168:	429a      	cmp	r2, r3
 800116a:	d000      	beq.n	800116e <HAL_UART_MspDeInit+0xa>
 800116c:	4770      	bx	lr
  {
  /* USER CODE BEGIN UART5_MspDeInit 0 */

  /* USER CODE END UART5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART5_CLK_DISABLE();
 800116e:	4a0e      	ldr	r2, [pc, #56]	@ (80011a8 <HAL_UART_MspDeInit+0x44>)
 8001170:	6c13      	ldr	r3, [r2, #64]	@ 0x40
{
 8001172:	b510      	push	{r4, lr}
    __HAL_RCC_UART5_CLK_DISABLE();
 8001174:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001178:	4604      	mov	r4, r0
 800117a:	6413      	str	r3, [r2, #64]	@ 0x40

    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12);
 800117c:	480b      	ldr	r0, [pc, #44]	@ (80011ac <HAL_UART_MspDeInit+0x48>)
 800117e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001182:	f001 f86f 	bl	8002264 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_2);
 8001186:	2104      	movs	r1, #4
 8001188:	4809      	ldr	r0, [pc, #36]	@ (80011b0 <HAL_UART_MspDeInit+0x4c>)
 800118a:	f001 f86b 	bl	8002264 <HAL_GPIO_DeInit>

    /* UART5 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800118e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001190:	f000 fddc 	bl	8001d4c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8001194:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8001196:	f000 fdd9 	bl	8001d4c <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspDeInit 1 */

  /* USER CODE END UART5_MspDeInit 1 */
  }
}
 800119a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(UART5_IRQn);
 800119e:	2035      	movs	r0, #53	@ 0x35
 80011a0:	f000 bd14 	b.w	8001bcc <HAL_NVIC_DisableIRQ>
 80011a4:	40005000 	.word	0x40005000
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40020800 	.word	0x40020800
 80011b0:	40020c00 	.word	0x40020c00

080011b4 <MX_USB_OTG_FS_PCD_Init>:
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80011b4:	480b      	ldr	r0, [pc, #44]	@ (80011e4 <MX_USB_OTG_FS_PCD_Init+0x30>)
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80011b6:	2304      	movs	r3, #4
{
 80011b8:	b510      	push	{r4, lr}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80011ba:	f44f 7100 	mov.w	r1, #512	@ 0x200
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80011be:	f04f 44a0 	mov.w	r4, #1342177280	@ 0x50000000
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80011c2:	2202      	movs	r2, #2
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80011c4:	7103      	strb	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80011c6:	2300      	movs	r3, #0
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80011c8:	6004      	str	r4, [r0, #0]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80011ca:	80c1      	strh	r1, [r0, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80011cc:	f8c0 2009 	str.w	r2, [r0, #9]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80011d0:	81c3      	strh	r3, [r0, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80011d2:	f001 f9d7 	bl	8002584 <HAL_PCD_Init>
 80011d6:	b900      	cbnz	r0, 80011da <MX_USB_OTG_FS_PCD_Init+0x26>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80011d8:	bd10      	pop	{r4, pc}
 80011da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80011de:	f7ff bd23 	b.w	8000c28 <Error_Handler>
 80011e2:	bf00      	nop
 80011e4:	20004670 	.word	0x20004670

080011e8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80011e8:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(pcdHandle->Instance==USB_OTG_FS)
 80011ea:	6803      	ldr	r3, [r0, #0]
{
 80011ec:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ee:	2400      	movs	r4, #0
  if(pcdHandle->Instance==USB_OTG_FS)
 80011f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f4:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80011f8:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80011fc:	9406      	str	r4, [sp, #24]
  if(pcdHandle->Instance==USB_OTG_FS)
 80011fe:	d001      	beq.n	8001204 <HAL_PCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001200:	b009      	add	sp, #36	@ 0x24
 8001202:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001204:	4d17      	ldr	r5, [pc, #92]	@ (8001264 <HAL_PCD_MspInit+0x7c>)
 8001206:	9400      	str	r4, [sp, #0]
 8001208:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800120a:	f043 0301 	orr.w	r3, r3, #1
 800120e:	632b      	str	r3, [r5, #48]	@ 0x30
 8001210:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001218:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 800121c:	2302      	movs	r3, #2
 800121e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001222:	9800      	ldr	r0, [sp, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001224:	4810      	ldr	r0, [pc, #64]	@ (8001268 <HAL_PCD_MspInit+0x80>)
 8001226:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001228:	2203      	movs	r2, #3
 800122a:	230a      	movs	r3, #10
 800122c:	e9cd 2305 	strd	r2, r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001230:	f000 fefc 	bl	800202c <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001234:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8001236:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800123a:	636b      	str	r3, [r5, #52]	@ 0x34
 800123c:	9401      	str	r4, [sp, #4]
 800123e:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8001240:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001244:	646b      	str	r3, [r5, #68]	@ 0x44
 8001246:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8001248:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 1, 0);
 800124c:	2101      	movs	r1, #1
 800124e:	4622      	mov	r2, r4
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001250:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 1, 0);
 8001252:	2043      	movs	r0, #67	@ 0x43
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001254:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 1, 0);
 8001256:	f000 fc6f 	bl	8001b38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800125a:	2043      	movs	r0, #67	@ 0x43
 800125c:	f000 fca8 	bl	8001bb0 <HAL_NVIC_EnableIRQ>
}
 8001260:	b009      	add	sp, #36	@ 0x24
 8001262:	bd30      	pop	{r4, r5, pc}
 8001264:	40023800 	.word	0x40023800
 8001268:	40020000 	.word	0x40020000

0800126c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800126c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012a4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001270:	f7ff fd62 	bl	8000d38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001274:	480c      	ldr	r0, [pc, #48]	@ (80012a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001276:	490d      	ldr	r1, [pc, #52]	@ (80012ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001278:	4a0d      	ldr	r2, [pc, #52]	@ (80012b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800127a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800127c:	e002      	b.n	8001284 <LoopCopyDataInit>

0800127e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800127e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001280:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001282:	3304      	adds	r3, #4

08001284 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001284:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001286:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001288:	d3f9      	bcc.n	800127e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800128a:	4a0a      	ldr	r2, [pc, #40]	@ (80012b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800128c:	4c0a      	ldr	r4, [pc, #40]	@ (80012b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800128e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001290:	e001      	b.n	8001296 <LoopFillZerobss>

08001292 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001292:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001294:	3204      	adds	r2, #4

08001296 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001296:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001298:	d3fb      	bcc.n	8001292 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800129a:	f005 fc63 	bl	8006b64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800129e:	f7ff fc65 	bl	8000b6c <main>
  bx  lr    
 80012a2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80012a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012ac:	20000304 	.word	0x20000304
  ldr r2, =_sidata
 80012b0:	0800751c 	.word	0x0800751c
  ldr r2, =_sbss
 80012b4:	20000308 	.word	0x20000308
  ldr r4, =_ebss
 80012b8:	2000a704 	.word	0x2000a704

080012bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012bc:	e7fe      	b.n	80012bc <ADC_IRQHandler>
	...

080012c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012c0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012c2:	4a0e      	ldr	r2, [pc, #56]	@ (80012fc <HAL_InitTick+0x3c>)
 80012c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001300 <HAL_InitTick+0x40>)
 80012c6:	7812      	ldrb	r2, [r2, #0]
{
 80012c8:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012ca:	6818      	ldr	r0, [r3, #0]
 80012cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80012d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80012d8:	f000 fc8a 	bl	8001bf0 <HAL_SYSTICK_Config>
 80012dc:	b908      	cbnz	r0, 80012e2 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012de:	2d0f      	cmp	r5, #15
 80012e0:	d901      	bls.n	80012e6 <HAL_InitTick+0x26>
    return HAL_ERROR;
 80012e2:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80012e4:	bd38      	pop	{r3, r4, r5, pc}
 80012e6:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012e8:	4602      	mov	r2, r0
 80012ea:	4629      	mov	r1, r5
 80012ec:	f04f 30ff 	mov.w	r0, #4294967295
 80012f0:	f000 fc22 	bl	8001b38 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012f4:	4b03      	ldr	r3, [pc, #12]	@ (8001304 <HAL_InitTick+0x44>)
 80012f6:	4620      	mov	r0, r4
 80012f8:	601d      	str	r5, [r3, #0]
}
 80012fa:	bd38      	pop	{r3, r4, r5, pc}
 80012fc:	20000010 	.word	0x20000010
 8001300:	2000000c 	.word	0x2000000c
 8001304:	20000014 	.word	0x20000014

08001308 <HAL_Init>:
{
 8001308:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800130a:	4b0b      	ldr	r3, [pc, #44]	@ (8001338 <HAL_Init+0x30>)
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001312:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800131a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001322:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001324:	2003      	movs	r0, #3
 8001326:	f000 fbf5 	bl	8001b14 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800132a:	200f      	movs	r0, #15
 800132c:	f7ff ffc8 	bl	80012c0 <HAL_InitTick>
  HAL_MspInit();
 8001330:	f7ff fc7c 	bl	8000c2c <HAL_MspInit>
}
 8001334:	2000      	movs	r0, #0
 8001336:	bd08      	pop	{r3, pc}
 8001338:	40023c00 	.word	0x40023c00

0800133c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800133c:	4a03      	ldr	r2, [pc, #12]	@ (800134c <HAL_IncTick+0x10>)
 800133e:	4b04      	ldr	r3, [pc, #16]	@ (8001350 <HAL_IncTick+0x14>)
 8001340:	6811      	ldr	r1, [r2, #0]
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	440b      	add	r3, r1
 8001346:	6013      	str	r3, [r2, #0]
}
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	20004b54 	.word	0x20004b54
 8001350:	20000010 	.word	0x20000010

08001354 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001354:	4b01      	ldr	r3, [pc, #4]	@ (800135c <HAL_GetTick+0x8>)
 8001356:	6818      	ldr	r0, [r3, #0]
}
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	20004b54 	.word	0x20004b54

08001360 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001360:	b538      	push	{r3, r4, r5, lr}
 8001362:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001364:	f7ff fff6 	bl	8001354 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001368:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800136a:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 800136c:	d002      	beq.n	8001374 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800136e:	4b04      	ldr	r3, [pc, #16]	@ (8001380 <HAL_Delay+0x20>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001374:	f7ff ffee 	bl	8001354 <HAL_GetTick>
 8001378:	1b40      	subs	r0, r0, r5
 800137a:	42a0      	cmp	r0, r4
 800137c:	d3fa      	bcc.n	8001374 <HAL_Delay+0x14>
  {
  }
}
 800137e:	bd38      	pop	{r3, r4, r5, pc}
 8001380:	20000010 	.word	0x20000010

08001384 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001384:	2800      	cmp	r0, #0
 8001386:	d07b      	beq.n	8001480 <HAL_CAN_Init+0xfc>
{
 8001388:	b538      	push	{r3, r4, r5, lr}
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800138a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800138e:	4604      	mov	r4, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d072      	beq.n	800147a <HAL_CAN_Init+0xf6>
    HAL_CAN_MspInit(hcan);
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001394:	6822      	ldr	r2, [r4, #0]
 8001396:	6813      	ldr	r3, [r2, #0]
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800139e:	f7ff ffd9 	bl	8001354 <HAL_GetTick>
 80013a2:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80013a4:	e004      	b.n	80013b0 <HAL_CAN_Init+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013a6:	f7ff ffd5 	bl	8001354 <HAL_GetTick>
 80013aa:	1b40      	subs	r0, r0, r5
 80013ac:	280a      	cmp	r0, #10
 80013ae:	d85b      	bhi.n	8001468 <HAL_CAN_Init+0xe4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80013b0:	6823      	ldr	r3, [r4, #0]
 80013b2:	685a      	ldr	r2, [r3, #4]
 80013b4:	07d1      	lsls	r1, r2, #31
 80013b6:	d5f6      	bpl.n	80013a6 <HAL_CAN_Init+0x22>
      return HAL_ERROR;
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	f022 0202 	bic.w	r2, r2, #2
 80013be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013c0:	f7ff ffc8 	bl	8001354 <HAL_GetTick>
 80013c4:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80013c6:	e004      	b.n	80013d2 <HAL_CAN_Init+0x4e>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013c8:	f7ff ffc4 	bl	8001354 <HAL_GetTick>
 80013cc:	1b40      	subs	r0, r0, r5
 80013ce:	280a      	cmp	r0, #10
 80013d0:	d84a      	bhi.n	8001468 <HAL_CAN_Init+0xe4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80013d2:	6823      	ldr	r3, [r4, #0]
 80013d4:	685a      	ldr	r2, [r3, #4]
 80013d6:	0792      	lsls	r2, r2, #30
 80013d8:	d4f6      	bmi.n	80013c8 <HAL_CAN_Init+0x44>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80013da:	7e22      	ldrb	r2, [r4, #24]
 80013dc:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	bf0c      	ite	eq
 80013e2:	f042 0280 	orreq.w	r2, r2, #128	@ 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013e6:	f022 0280 	bicne.w	r2, r2, #128	@ 0x80
 80013ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80013ec:	7e62      	ldrb	r2, [r4, #25]
 80013ee:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	bf0c      	ite	eq
 80013f4:	f042 0240 	orreq.w	r2, r2, #64	@ 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013f8:	f022 0240 	bicne.w	r2, r2, #64	@ 0x40
 80013fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80013fe:	7ea2      	ldrb	r2, [r4, #26]
 8001400:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	bf0c      	ite	eq
 8001406:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800140a:	f022 0220 	bicne.w	r2, r2, #32
 800140e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001410:	7ee2      	ldrb	r2, [r4, #27]
 8001412:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	bf0c      	ite	eq
 8001418:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800141c:	f042 0210 	orrne.w	r2, r2, #16
 8001420:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001422:	7f22      	ldrb	r2, [r4, #28]
 8001424:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	bf0c      	ite	eq
 800142a:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800142e:	f022 0208 	bicne.w	r2, r2, #8
 8001432:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001434:	7f62      	ldrb	r2, [r4, #29]
 8001436:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	bf0c      	ite	eq
 800143c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001440:	f022 0204 	bicne.w	r2, r2, #4
 8001444:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001446:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
 800144a:	6921      	ldr	r1, [r4, #16]
 800144c:	4302      	orrs	r2, r0
 800144e:	430a      	orrs	r2, r1
 8001450:	6960      	ldr	r0, [r4, #20]
 8001452:	6861      	ldr	r1, [r4, #4]
 8001454:	4302      	orrs	r2, r0
 8001456:	3901      	subs	r1, #1
 8001458:	430a      	orrs	r2, r1
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800145a:	2000      	movs	r0, #0

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800145c:	2101      	movs	r1, #1
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800145e:	61da      	str	r2, [r3, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001460:	6260      	str	r0, [r4, #36]	@ 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8001462:	f884 1020 	strb.w	r1, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 8001466:	bd38      	pop	{r3, r4, r5, pc}
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001468:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 800146a:	2205      	movs	r2, #5
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800146c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001470:	6263      	str	r3, [r4, #36]	@ 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8001472:	f884 2020 	strb.w	r2, [r4, #32]
    return HAL_ERROR;
 8001476:	2001      	movs	r0, #1
}
 8001478:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 800147a:	f7ff f899 	bl	80005b0 <HAL_CAN_MspInit>
 800147e:	e789      	b.n	8001394 <HAL_CAN_Init+0x10>
    return HAL_ERROR;
 8001480:	2001      	movs	r0, #1
}
 8001482:	4770      	bx	lr

08001484 <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001484:	f890 2020 	ldrb.w	r2, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8001488:	3a01      	subs	r2, #1
 800148a:	2a01      	cmp	r2, #1
 800148c:	d906      	bls.n	800149c <HAL_CAN_ConfigFilter+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800148e:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8001490:	4603      	mov	r3, r0
 8001492:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000

    return HAL_ERROR;
 8001496:	2001      	movs	r0, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001498:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 800149a:	4770      	bx	lr
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800149c:	4b40      	ldr	r3, [pc, #256]	@ (80015a0 <HAL_CAN_ConfigFilter+0x11c>)
 800149e:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80014a2:	2001      	movs	r0, #1
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80014a4:	4302      	orrs	r2, r0
{
 80014a6:	b430      	push	{r4, r5}
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80014a8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80014ac:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80014b0:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 80014b4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80014b8:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80014bc:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 80014be:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 80014c2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80014c6:	694a      	ldr	r2, [r1, #20]
 80014c8:	f002 041f 	and.w	r4, r2, #31
 80014cc:	40a0      	lsls	r0, r4
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80014ce:	f8d3 421c 	ldr.w	r4, [r3, #540]	@ 0x21c
 80014d2:	ea24 0400 	bic.w	r4, r4, r0
 80014d6:	f8c3 421c 	str.w	r4, [r3, #540]	@ 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80014da:	69cd      	ldr	r5, [r1, #28]
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80014dc:	43c4      	mvns	r4, r0
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80014de:	2d00      	cmp	r5, #0
 80014e0:	d145      	bne.n	800156e <HAL_CAN_ConfigFilter+0xea>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80014e2:	f8d3 520c 	ldr.w	r5, [r3, #524]	@ 0x20c
 80014e6:	4025      	ands	r5, r4
 80014e8:	f8c3 520c 	str.w	r5, [r3, #524]	@ 0x20c
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014ec:	00d2      	lsls	r2, r2, #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80014ee:	68cd      	ldr	r5, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80014f0:	888b      	ldrh	r3, [r1, #4]
 80014f2:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 80014f6:	f502 42c8 	add.w	r2, r2, #25600	@ 0x6400
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80014fa:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014fe:	f8c2 3240 	str.w	r3, [r2, #576]	@ 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001502:	688d      	ldr	r5, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001504:	880b      	ldrh	r3, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001506:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800150a:	f8c2 3244 	str.w	r3, [r2, #580]	@ 0x244
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800150e:	698b      	ldr	r3, [r1, #24]
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001510:	4a23      	ldr	r2, [pc, #140]	@ (80015a0 <HAL_CAN_ConfigFilter+0x11c>)
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001512:	bb33      	cbnz	r3, 8001562 <HAL_CAN_ConfigFilter+0xde>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001514:	f8d2 3204 	ldr.w	r3, [r2, #516]	@ 0x204
 8001518:	4023      	ands	r3, r4
 800151a:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800151e:	690b      	ldr	r3, [r1, #16]
 8001520:	b9c3      	cbnz	r3, 8001554 <HAL_CAN_ConfigFilter+0xd0>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001522:	4b1f      	ldr	r3, [pc, #124]	@ (80015a0 <HAL_CAN_ConfigFilter+0x11c>)
 8001524:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001528:	4014      	ands	r4, r2
 800152a:	f8c3 4214 	str.w	r4, [r3, #532]	@ 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800152e:	6a0b      	ldr	r3, [r1, #32]
 8001530:	2b01      	cmp	r3, #1
 8001532:	d105      	bne.n	8001540 <HAL_CAN_ConfigFilter+0xbc>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001534:	4a1a      	ldr	r2, [pc, #104]	@ (80015a0 <HAL_CAN_ConfigFilter+0x11c>)
 8001536:	f8d2 321c 	ldr.w	r3, [r2, #540]	@ 0x21c
 800153a:	4303      	orrs	r3, r0
 800153c:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001540:	4a17      	ldr	r2, [pc, #92]	@ (80015a0 <HAL_CAN_ConfigFilter+0x11c>)
 8001542:	f8d2 3200 	ldr.w	r3, [r2, #512]	@ 0x200
 8001546:	f023 0301 	bic.w	r3, r3, #1
    return HAL_OK;
 800154a:	2000      	movs	r0, #0
}
 800154c:	bc30      	pop	{r4, r5}
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800154e:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
}
 8001552:	4770      	bx	lr
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001554:	4a12      	ldr	r2, [pc, #72]	@ (80015a0 <HAL_CAN_ConfigFilter+0x11c>)
 8001556:	f8d2 3214 	ldr.w	r3, [r2, #532]	@ 0x214
 800155a:	4303      	orrs	r3, r0
 800155c:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214
 8001560:	e7e5      	b.n	800152e <HAL_CAN_ConfigFilter+0xaa>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001562:	f8d2 3204 	ldr.w	r3, [r2, #516]	@ 0x204
 8001566:	4303      	orrs	r3, r0
 8001568:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204
 800156c:	e7d7      	b.n	800151e <HAL_CAN_ConfigFilter+0x9a>
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800156e:	2d01      	cmp	r5, #1
 8001570:	d1cd      	bne.n	800150e <HAL_CAN_ConfigFilter+0x8a>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001572:	f8d3 520c 	ldr.w	r5, [r3, #524]	@ 0x20c
 8001576:	4305      	orrs	r5, r0
 8001578:	f8c3 520c 	str.w	r5, [r3, #524]	@ 0x20c
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800157c:	00d2      	lsls	r2, r2, #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800157e:	680d      	ldr	r5, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001580:	888b      	ldrh	r3, [r1, #4]
 8001582:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8001586:	f502 42c8 	add.w	r2, r2, #25600	@ 0x6400
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800158a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800158e:	f8c2 3240 	str.w	r3, [r2, #576]	@ 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001592:	688d      	ldr	r5, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001594:	898b      	ldrh	r3, [r1, #12]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001596:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800159a:	f8c2 3244 	str.w	r3, [r2, #580]	@ 0x244
 800159e:	e7b6      	b.n	800150e <HAL_CAN_ConfigFilter+0x8a>
 80015a0:	40006400 	.word	0x40006400

080015a4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80015a4:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80015a6:	f890 3020 	ldrb.w	r3, [r0, #32]
 80015aa:	2b01      	cmp	r3, #1
{
 80015ac:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 80015ae:	d005      	beq.n	80015bc <HAL_CAN_Start+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80015b0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80015b2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80015b6:	6243      	str	r3, [r0, #36]	@ 0x24
        return HAL_ERROR;
 80015b8:	2001      	movs	r0, #1

    return HAL_ERROR;
  }
}
 80015ba:	bd38      	pop	{r3, r4, r5, pc}
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80015bc:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 80015be:	2302      	movs	r3, #2
 80015c0:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80015c4:	6813      	ldr	r3, [r2, #0]
 80015c6:	f023 0301 	bic.w	r3, r3, #1
 80015ca:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80015cc:	f7ff fec2 	bl	8001354 <HAL_GetTick>
 80015d0:	4605      	mov	r5, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80015d2:	e004      	b.n	80015de <HAL_CAN_Start+0x3a>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015d4:	f7ff febe 	bl	8001354 <HAL_GetTick>
 80015d8:	1b43      	subs	r3, r0, r5
 80015da:	2b0a      	cmp	r3, #10
 80015dc:	d807      	bhi.n	80015ee <HAL_CAN_Start+0x4a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80015de:	6823      	ldr	r3, [r4, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f013 0301 	ands.w	r3, r3, #1
 80015e6:	d1f5      	bne.n	80015d4 <HAL_CAN_Start+0x30>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80015e8:	6263      	str	r3, [r4, #36]	@ 0x24
    return HAL_OK;
 80015ea:	4618      	mov	r0, r3
}
 80015ec:	bd38      	pop	{r3, r4, r5, pc}
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015ee:	6a63      	ldr	r3, [r4, #36]	@ 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 80015f0:	2205      	movs	r2, #5
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015f6:	6263      	str	r3, [r4, #36]	@ 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 80015f8:	f884 2020 	strb.w	r2, [r4, #32]
        return HAL_ERROR;
 80015fc:	e7dc      	b.n	80015b8 <HAL_CAN_Start+0x14>
 80015fe:	bf00      	nop

08001600 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8001600:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8001602:	f890 3020 	ldrb.w	r3, [r0, #32]
 8001606:	2b02      	cmp	r3, #2
{
 8001608:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_LISTENING)
 800160a:	d005      	beq.n	8001618 <HAL_CAN_Stop+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 800160c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800160e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001612:	6243      	str	r3, [r0, #36]	@ 0x24
        return HAL_ERROR;
 8001614:	2001      	movs	r0, #1

    return HAL_ERROR;
  }
}
 8001616:	bd38      	pop	{r3, r4, r5, pc}
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001618:	6802      	ldr	r2, [r0, #0]
 800161a:	6813      	ldr	r3, [r2, #0]
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001622:	f7ff fe97 	bl	8001354 <HAL_GetTick>
 8001626:	4605      	mov	r5, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001628:	e004      	b.n	8001634 <HAL_CAN_Stop+0x34>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800162a:	f7ff fe93 	bl	8001354 <HAL_GetTick>
 800162e:	1b43      	subs	r3, r0, r5
 8001630:	2b0a      	cmp	r3, #10
 8001632:	d80c      	bhi.n	800164e <HAL_CAN_Stop+0x4e>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001634:	6823      	ldr	r3, [r4, #0]
 8001636:	685a      	ldr	r2, [r3, #4]
 8001638:	07d2      	lsls	r2, r2, #31
 800163a:	d5f6      	bpl.n	800162a <HAL_CAN_Stop+0x2a>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800163c:	681a      	ldr	r2, [r3, #0]
    hcan->State = HAL_CAN_STATE_READY;
 800163e:	2101      	movs	r1, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001640:	f022 0202 	bic.w	r2, r2, #2
 8001644:	601a      	str	r2, [r3, #0]
    hcan->State = HAL_CAN_STATE_READY;
 8001646:	f884 1020 	strb.w	r1, [r4, #32]
    return HAL_OK;
 800164a:	2000      	movs	r0, #0
}
 800164c:	bd38      	pop	{r3, r4, r5, pc}
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800164e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8001650:	2205      	movs	r2, #5
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001652:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001656:	6263      	str	r3, [r4, #36]	@ 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8001658:	f884 2020 	strb.w	r2, [r4, #32]
        return HAL_ERROR;
 800165c:	e7da      	b.n	8001614 <HAL_CAN_Stop+0x14>
 800165e:	bf00      	nop

08001660 <HAL_CAN_DeInit>:
  if (hcan == NULL)
 8001660:	b188      	cbz	r0, 8001686 <HAL_CAN_DeInit+0x26>
{
 8001662:	b510      	push	{r4, lr}
 8001664:	4604      	mov	r4, r0
  (void)HAL_CAN_Stop(hcan);
 8001666:	f7ff ffcb 	bl	8001600 <HAL_CAN_Stop>
  HAL_CAN_MspDeInit(hcan);
 800166a:	4620      	mov	r0, r4
 800166c:	f7fe ffe4 	bl	8000638 <HAL_CAN_MspDeInit>
  SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 8001670:	6821      	ldr	r1, [r4, #0]
 8001672:	680a      	ldr	r2, [r1, #0]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001674:	2300      	movs	r3, #0
  SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 8001676:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800167a:	600a      	str	r2, [r1, #0]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800167c:	6263      	str	r3, [r4, #36]	@ 0x24
  hcan->State = HAL_CAN_STATE_RESET;
 800167e:	f884 3020 	strb.w	r3, [r4, #32]
  return HAL_OK;
 8001682:	4618      	mov	r0, r3
}
 8001684:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001686:	2001      	movs	r0, #1
}
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop

0800168c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800168c:	b430      	push	{r4, r5}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800168e:	f890 c020 	ldrb.w	ip, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001692:	6805      	ldr	r5, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001694:	f10c 3cff 	add.w	ip, ip, #4294967295
 8001698:	f1bc 0f01 	cmp.w	ip, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800169c:	68ac      	ldr	r4, [r5, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 800169e:	d839      	bhi.n	8001714 <HAL_CAN_AddTxMessage+0x88>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80016a0:	f014 5fe0 	tst.w	r4, #469762048	@ 0x1c000000
 80016a4:	d106      	bne.n	80016b4 <HAL_CAN_AddTxMessage+0x28>
      return HAL_OK;
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80016a6:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80016a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016ac:	6243      	str	r3, [r0, #36]	@ 0x24

      return HAL_ERROR;
 80016ae:	2001      	movs	r0, #1
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 80016b0:	bc30      	pop	{r4, r5}
 80016b2:	4770      	bx	lr
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80016b4:	f3c4 6401 	ubfx	r4, r4, #24, #2
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80016b8:	2001      	movs	r0, #1
 80016ba:	40a0      	lsls	r0, r4
 80016bc:	6018      	str	r0, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 80016be:	688b      	ldr	r3, [r1, #8]
 80016c0:	b36b      	cbz	r3, 800171e <HAL_CAN_AddTxMessage+0x92>
                                                           pHeader->IDE |
 80016c2:	68c8      	ldr	r0, [r1, #12]
 80016c4:	4303      	orrs	r3, r0
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016c6:	6848      	ldr	r0, [r1, #4]
                                                           pHeader->IDE |
 80016c8:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016cc:	f104 0018 	add.w	r0, r4, #24
 80016d0:	0100      	lsls	r0, r0, #4
 80016d2:	502b      	str	r3, [r5, r0]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80016d4:	eb05 1c04 	add.w	ip, r5, r4, lsl #4
 80016d8:	690b      	ldr	r3, [r1, #16]
 80016da:	f8cc 3184 	str.w	r3, [ip, #388]	@ 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 80016de:	7d0b      	ldrb	r3, [r1, #20]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	ea4f 1104 	mov.w	r1, r4, lsl #4
 80016e6:	d105      	bne.n	80016f4 <HAL_CAN_AddTxMessage+0x68>
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80016e8:	f8dc 3184 	ldr.w	r3, [ip, #388]	@ 0x184
 80016ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016f0:	f8cc 3184 	str.w	r3, [ip, #388]	@ 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80016f4:	186b      	adds	r3, r5, r1
 80016f6:	6851      	ldr	r1, [r2, #4]
 80016f8:	f8c3 118c 	str.w	r1, [r3, #396]	@ 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80016fc:	6812      	ldr	r2, [r2, #0]
 80016fe:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001702:	f8dc 3180 	ldr.w	r3, [ip, #384]	@ 0x180
 8001706:	f043 0301 	orr.w	r3, r3, #1
      return HAL_OK;
 800170a:	2000      	movs	r0, #0
}
 800170c:	bc30      	pop	{r4, r5}
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800170e:	f8cc 3180 	str.w	r3, [ip, #384]	@ 0x180
}
 8001712:	4770      	bx	lr
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001714:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001716:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800171a:	6243      	str	r3, [r0, #36]	@ 0x24
    return HAL_ERROR;
 800171c:	e7c7      	b.n	80016ae <HAL_CAN_AddTxMessage+0x22>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800171e:	68cb      	ldr	r3, [r1, #12]
 8001720:	6808      	ldr	r0, [r1, #0]
 8001722:	ea43 5040 	orr.w	r0, r3, r0, lsl #21
 8001726:	f104 0318 	add.w	r3, r4, #24
 800172a:	011b      	lsls	r3, r3, #4
 800172c:	50e8      	str	r0, [r5, r3]
 800172e:	e7d1      	b.n	80016d4 <HAL_CAN_AddTxMessage+0x48>

08001730 <HAL_CAN_GetRxMessage>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8001730:	f890 c020 	ldrb.w	ip, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001734:	f10c 3cff 	add.w	ip, ip, #4294967295
 8001738:	f1bc 0f01 	cmp.w	ip, #1
 800173c:	d86b      	bhi.n	8001816 <HAL_CAN_GetRxMessage+0xe6>
{
 800173e:	b570      	push	{r4, r5, r6, lr}
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001740:	6804      	ldr	r4, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001742:	b941      	cbnz	r1, 8001756 <HAL_CAN_GetRxMessage+0x26>
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001744:	68e5      	ldr	r5, [r4, #12]
 8001746:	07ad      	lsls	r5, r5, #30
 8001748:	d108      	bne.n	800175c <HAL_CAN_GetRxMessage+0x2c>
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800174a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800174c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001750:	6243      	str	r3, [r0, #36]	@ 0x24
        return HAL_ERROR;
 8001752:	2001      	movs	r0, #1
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8001754:	bd70      	pop	{r4, r5, r6, pc}
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001756:	6925      	ldr	r5, [r4, #16]
 8001758:	07ae      	lsls	r6, r5, #30
 800175a:	d0f6      	beq.n	800174a <HAL_CAN_GetRxMessage+0x1a>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800175c:	eb04 1c01 	add.w	ip, r4, r1, lsl #4
 8001760:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 8001764:	f8dc 51b0 	ldr.w	r5, [ip, #432]	@ 0x1b0
 8001768:	f005 0504 	and.w	r5, r5, #4
 800176c:	6095      	str	r5, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800176e:	2d00      	cmp	r5, #0
 8001770:	d057      	beq.n	8001822 <HAL_CAN_GetRxMessage+0xf2>
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001772:	f8dc 51b0 	ldr.w	r5, [ip, #432]	@ 0x1b0
 8001776:	08ed      	lsrs	r5, r5, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001778:	6055      	str	r5, [r2, #4]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800177a:	f8dc 51b0 	ldr.w	r5, [ip, #432]	@ 0x1b0
 800177e:	f005 0502 	and.w	r5, r5, #2
 8001782:	60d5      	str	r5, [r2, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001784:	f8dc 51b4 	ldr.w	r5, [ip, #436]	@ 0x1b4
 8001788:	072d      	lsls	r5, r5, #28
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800178a:	bf58      	it	pl
 800178c:	f8dc 51b4 	ldrpl.w	r5, [ip, #436]	@ 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001790:	f8dc 61b4 	ldr.w	r6, [ip, #436]	@ 0x1b4
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001794:	bf54      	ite	pl
 8001796:	f005 050f 	andpl.w	r5, r5, #15
      pHeader->DLC = 8U;
 800179a:	2508      	movmi	r5, #8
 800179c:	6115      	str	r5, [r2, #16]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800179e:	4474      	add	r4, lr
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80017a0:	f8dc 51b4 	ldr.w	r5, [ip, #436]	@ 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80017a4:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80017a8:	6196      	str	r6, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80017aa:	0c2d      	lsrs	r5, r5, #16
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80017ac:	f8d4 61b8 	ldr.w	r6, [r4, #440]	@ 0x1b8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80017b0:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80017b2:	701e      	strb	r6, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80017b4:	6802      	ldr	r2, [r0, #0]
 80017b6:	4472      	add	r2, lr
 80017b8:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 80017bc:	0a12      	lsrs	r2, r2, #8
 80017be:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80017c0:	6802      	ldr	r2, [r0, #0]
 80017c2:	4472      	add	r2, lr
 80017c4:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 80017c8:	0c12      	lsrs	r2, r2, #16
 80017ca:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80017cc:	6802      	ldr	r2, [r0, #0]
 80017ce:	4472      	add	r2, lr
 80017d0:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 80017d4:	0e12      	lsrs	r2, r2, #24
 80017d6:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80017d8:	6802      	ldr	r2, [r0, #0]
 80017da:	4472      	add	r2, lr
 80017dc:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 80017e0:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80017e2:	6802      	ldr	r2, [r0, #0]
 80017e4:	4472      	add	r2, lr
 80017e6:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 80017ea:	0a12      	lsrs	r2, r2, #8
 80017ec:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80017ee:	6802      	ldr	r2, [r0, #0]
 80017f0:	4472      	add	r2, lr
 80017f2:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 80017f6:	0c12      	lsrs	r2, r2, #16
 80017f8:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80017fa:	6802      	ldr	r2, [r0, #0]
 80017fc:	4472      	add	r2, lr
 80017fe:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 8001802:	0e12      	lsrs	r2, r2, #24
 8001804:	71da      	strb	r2, [r3, #7]
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001806:	6802      	ldr	r2, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001808:	b981      	cbnz	r1, 800182c <HAL_CAN_GetRxMessage+0xfc>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800180a:	68d3      	ldr	r3, [r2, #12]
 800180c:	f043 0320 	orr.w	r3, r3, #32
 8001810:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8001812:	2000      	movs	r0, #0
}
 8001814:	bd70      	pop	{r4, r5, r6, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001816:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001818:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800181c:	6243      	str	r3, [r0, #36]	@ 0x24
        return HAL_ERROR;
 800181e:	2001      	movs	r0, #1
}
 8001820:	4770      	bx	lr
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001822:	f8dc 51b0 	ldr.w	r5, [ip, #432]	@ 0x1b0
 8001826:	0d6d      	lsrs	r5, r5, #21
 8001828:	6015      	str	r5, [r2, #0]
 800182a:	e7a6      	b.n	800177a <HAL_CAN_GetRxMessage+0x4a>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800182c:	6913      	ldr	r3, [r2, #16]
 800182e:	f043 0320 	orr.w	r3, r3, #32
 8001832:	6113      	str	r3, [r2, #16]
 8001834:	e7ed      	b.n	8001812 <HAL_CAN_GetRxMessage+0xe2>
 8001836:	bf00      	nop

08001838 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8001838:	f890 2020 	ldrb.w	r2, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800183c:	3a01      	subs	r2, #1
 800183e:	2a01      	cmp	r2, #1
{
 8001840:	4603      	mov	r3, r0
  if ((state == HAL_CAN_STATE_READY) ||
 8001842:	d905      	bls.n	8001850 <HAL_CAN_ActivateNotification+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001844:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8001846:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000

    return HAL_ERROR;
 800184a:	2001      	movs	r0, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800184c:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 800184e:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001850:	6802      	ldr	r2, [r0, #0]
 8001852:	6953      	ldr	r3, [r2, #20]
 8001854:	430b      	orrs	r3, r1
    return HAL_OK;
 8001856:	2000      	movs	r0, #0
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001858:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 800185a:	4770      	bx	lr

0800185c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @brief  Transmission Mailbox 0 complete callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop

08001860 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @brief  Transmission Mailbox 1 complete callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop

08001864 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @brief  Transmission Mailbox 2 complete callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop

08001868 <HAL_CAN_TxMailbox0AbortCallback>:
  * @brief  Transmission Mailbox 0 Cancellation callback.
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop

0800186c <HAL_CAN_TxMailbox1AbortCallback>:
  * @brief  Transmission Mailbox 1 Cancellation callback.
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop

08001870 <HAL_CAN_TxMailbox2AbortCallback>:
  * @brief  Transmission Mailbox 2 Cancellation callback.
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop

08001874 <HAL_CAN_RxFifo0FullCallback>:
  * @brief  Rx FIFO 0 full callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop

08001878 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @brief  Rx FIFO 1 message pending callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop

0800187c <HAL_CAN_RxFifo1FullCallback>:
  * @brief  Rx FIFO 1 full callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop

08001880 <HAL_CAN_SleepCallback>:
  * @brief  Sleep callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop

08001884 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @brief  WakeUp from Rx message callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop

08001888 <HAL_CAN_ErrorCallback>:
  * @brief  Error CAN callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop

0800188c <HAL_CAN_IRQHandler>:
{
 800188c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001890:	6803      	ldr	r3, [r0, #0]
 8001892:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001894:	f8d3 8004 	ldr.w	r8, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001898:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800189a:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800189e:	f8d3 9010 	ldr.w	r9, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80018a2:	f8d3 a018 	ldr.w	sl, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80018a6:	f014 0601 	ands.w	r6, r4, #1
{
 80018aa:	4605      	mov	r5, r0
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80018ac:	d01f      	beq.n	80018ee <HAL_CAN_IRQHandler+0x62>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80018ae:	07f9      	lsls	r1, r7, #31
 80018b0:	f100 8089 	bmi.w	80019c6 <HAL_CAN_IRQHandler+0x13a>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80018b4:	2600      	movs	r6, #0
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80018b6:	05f9      	lsls	r1, r7, #23
 80018b8:	d50b      	bpl.n	80018d2 <HAL_CAN_IRQHandler+0x46>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80018ba:	682b      	ldr	r3, [r5, #0]
 80018bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018c0:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80018c2:	05ba      	lsls	r2, r7, #22
 80018c4:	f100 80db 	bmi.w	8001a7e <HAL_CAN_IRQHandler+0x1f2>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80018c8:	057b      	lsls	r3, r7, #21
 80018ca:	f140 80ce 	bpl.w	8001a6a <HAL_CAN_IRQHandler+0x1de>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80018ce:	f446 5600 	orr.w	r6, r6, #8192	@ 0x2000
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80018d2:	03f9      	lsls	r1, r7, #15
 80018d4:	d50b      	bpl.n	80018ee <HAL_CAN_IRQHandler+0x62>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80018d6:	682b      	ldr	r3, [r5, #0]
 80018d8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80018dc:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80018de:	03ba      	lsls	r2, r7, #14
 80018e0:	f100 80d1 	bmi.w	8001a86 <HAL_CAN_IRQHandler+0x1fa>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80018e4:	037b      	lsls	r3, r7, #13
 80018e6:	f140 80c5 	bpl.w	8001a74 <HAL_CAN_IRQHandler+0x1e8>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80018ea:	f446 4600 	orr.w	r6, r6, #32768	@ 0x8000
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80018ee:	0721      	lsls	r1, r4, #28
 80018f0:	d502      	bpl.n	80018f8 <HAL_CAN_IRQHandler+0x6c>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80018f2:	f01b 0f10 	tst.w	fp, #16
 80018f6:	d160      	bne.n	80019ba <HAL_CAN_IRQHandler+0x12e>
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80018f8:	0762      	lsls	r2, r4, #29
 80018fa:	d502      	bpl.n	8001902 <HAL_CAN_IRQHandler+0x76>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80018fc:	f01b 0f08 	tst.w	fp, #8
 8001900:	d16c      	bne.n	80019dc <HAL_CAN_IRQHandler+0x150>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001902:	07a3      	lsls	r3, r4, #30
 8001904:	d504      	bpl.n	8001910 <HAL_CAN_IRQHandler+0x84>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001906:	682b      	ldr	r3, [r5, #0]
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	079f      	lsls	r7, r3, #30
 800190c:	f040 8086 	bne.w	8001a1c <HAL_CAN_IRQHandler+0x190>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001910:	0660      	lsls	r0, r4, #25
 8001912:	d502      	bpl.n	800191a <HAL_CAN_IRQHandler+0x8e>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001914:	f019 0f10 	tst.w	r9, #16
 8001918:	d149      	bne.n	80019ae <HAL_CAN_IRQHandler+0x122>
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800191a:	06a1      	lsls	r1, r4, #26
 800191c:	d502      	bpl.n	8001924 <HAL_CAN_IRQHandler+0x98>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800191e:	f019 0f08 	tst.w	r9, #8
 8001922:	d162      	bne.n	80019ea <HAL_CAN_IRQHandler+0x15e>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001924:	06e2      	lsls	r2, r4, #27
 8001926:	d503      	bpl.n	8001930 <HAL_CAN_IRQHandler+0xa4>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001928:	682b      	ldr	r3, [r5, #0]
 800192a:	691b      	ldr	r3, [r3, #16]
 800192c:	079b      	lsls	r3, r3, #30
 800192e:	d16a      	bne.n	8001a06 <HAL_CAN_IRQHandler+0x17a>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001930:	03a7      	lsls	r7, r4, #14
 8001932:	d502      	bpl.n	800193a <HAL_CAN_IRQHandler+0xae>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001934:	f018 0f10 	tst.w	r8, #16
 8001938:	d169      	bne.n	8001a0e <HAL_CAN_IRQHandler+0x182>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800193a:	03e0      	lsls	r0, r4, #15
 800193c:	d502      	bpl.n	8001944 <HAL_CAN_IRQHandler+0xb8>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800193e:	f018 0f08 	tst.w	r8, #8
 8001942:	d159      	bne.n	80019f8 <HAL_CAN_IRQHandler+0x16c>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001944:	0421      	lsls	r1, r4, #16
 8001946:	d52e      	bpl.n	80019a6 <HAL_CAN_IRQHandler+0x11a>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001948:	f018 0f04 	tst.w	r8, #4
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800194c:	682b      	ldr	r3, [r5, #0]
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800194e:	d028      	beq.n	80019a2 <HAL_CAN_IRQHandler+0x116>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001950:	05e2      	lsls	r2, r4, #23
 8001952:	bf44      	itt	mi
 8001954:	f00a 0201 	andmi.w	r2, sl, #1
 8001958:	4316      	orrmi	r6, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800195a:	05a7      	lsls	r7, r4, #22
 800195c:	d516      	bpl.n	800198c <HAL_CAN_IRQHandler+0x100>
 800195e:	f01a 0f02 	tst.w	sl, #2
 8001962:	d013      	beq.n	800198c <HAL_CAN_IRQHandler+0x100>
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001964:	0560      	lsls	r0, r4, #21
        errorcode |= HAL_CAN_ERROR_EPV;
 8001966:	f046 0602 	orr.w	r6, r6, #2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800196a:	f404 6200 	and.w	r2, r4, #2048	@ 0x800
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800196e:	d55e      	bpl.n	8001a2e <HAL_CAN_IRQHandler+0x1a2>
 8001970:	f01a 0f04 	tst.w	sl, #4
 8001974:	d159      	bne.n	8001a2a <HAL_CAN_IRQHandler+0x19e>
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001976:	b98a      	cbnz	r2, 800199c <HAL_CAN_IRQHandler+0x110>
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001978:	2204      	movs	r2, #4
 800197a:	605a      	str	r2, [r3, #4]
    hcan->ErrorCode |= errorcode;
 800197c:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800197e:	4333      	orrs	r3, r6
    HAL_CAN_ErrorCallback(hcan);
 8001980:	4628      	mov	r0, r5
    hcan->ErrorCode |= errorcode;
 8001982:	626b      	str	r3, [r5, #36]	@ 0x24
    HAL_CAN_ErrorCallback(hcan);
 8001984:	f7ff ff80 	bl	8001888 <HAL_CAN_ErrorCallback>
}
 8001988:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800198c:	0561      	lsls	r1, r4, #21
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800198e:	f404 6200 	and.w	r2, r4, #2048	@ 0x800
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001992:	d502      	bpl.n	800199a <HAL_CAN_IRQHandler+0x10e>
 8001994:	f01a 0f04 	tst.w	sl, #4
 8001998:	d147      	bne.n	8001a2a <HAL_CAN_IRQHandler+0x19e>
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800199a:	b112      	cbz	r2, 80019a2 <HAL_CAN_IRQHandler+0x116>
 800199c:	f01a 0a70 	ands.w	sl, sl, #112	@ 0x70
 80019a0:	d14a      	bne.n	8001a38 <HAL_CAN_IRQHandler+0x1ac>
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80019a2:	2204      	movs	r2, #4
 80019a4:	605a      	str	r2, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 80019a6:	2e00      	cmp	r6, #0
 80019a8:	d1e8      	bne.n	800197c <HAL_CAN_IRQHandler+0xf0>
}
 80019aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80019ae:	682b      	ldr	r3, [r5, #0]
 80019b0:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80019b2:	f446 6680 	orr.w	r6, r6, #1024	@ 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80019b6:	611a      	str	r2, [r3, #16]
 80019b8:	e7af      	b.n	800191a <HAL_CAN_IRQHandler+0x8e>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80019ba:	682b      	ldr	r3, [r5, #0]
 80019bc:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80019be:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80019c2:	60da      	str	r2, [r3, #12]
 80019c4:	e798      	b.n	80018f8 <HAL_CAN_IRQHandler+0x6c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80019c6:	2201      	movs	r2, #1
 80019c8:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80019ca:	07ba      	lsls	r2, r7, #30
 80019cc:	d42a      	bmi.n	8001a24 <HAL_CAN_IRQHandler+0x198>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80019ce:	077b      	lsls	r3, r7, #29
 80019d0:	d448      	bmi.n	8001a64 <HAL_CAN_IRQHandler+0x1d8>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80019d2:	073e      	lsls	r6, r7, #28
 80019d4:	d56a      	bpl.n	8001aac <HAL_CAN_IRQHandler+0x220>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80019d6:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
 80019da:	e76c      	b.n	80018b6 <HAL_CAN_IRQHandler+0x2a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80019dc:	682b      	ldr	r3, [r5, #0]
 80019de:	2208      	movs	r2, #8
 80019e0:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 80019e2:	4628      	mov	r0, r5
 80019e4:	f7ff ff46 	bl	8001874 <HAL_CAN_RxFifo0FullCallback>
 80019e8:	e78b      	b.n	8001902 <HAL_CAN_IRQHandler+0x76>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80019ea:	682b      	ldr	r3, [r5, #0]
 80019ec:	2208      	movs	r2, #8
 80019ee:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 80019f0:	4628      	mov	r0, r5
 80019f2:	f7ff ff43 	bl	800187c <HAL_CAN_RxFifo1FullCallback>
 80019f6:	e795      	b.n	8001924 <HAL_CAN_IRQHandler+0x98>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80019f8:	682b      	ldr	r3, [r5, #0]
 80019fa:	2208      	movs	r2, #8
 80019fc:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80019fe:	4628      	mov	r0, r5
 8001a00:	f7ff ff40 	bl	8001884 <HAL_CAN_WakeUpFromRxMsgCallback>
 8001a04:	e79e      	b.n	8001944 <HAL_CAN_IRQHandler+0xb8>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001a06:	4628      	mov	r0, r5
 8001a08:	f7ff ff36 	bl	8001878 <HAL_CAN_RxFifo1MsgPendingCallback>
 8001a0c:	e790      	b.n	8001930 <HAL_CAN_IRQHandler+0xa4>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001a0e:	682b      	ldr	r3, [r5, #0]
 8001a10:	2210      	movs	r2, #16
 8001a12:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8001a14:	4628      	mov	r0, r5
 8001a16:	f7ff ff33 	bl	8001880 <HAL_CAN_SleepCallback>
 8001a1a:	e78e      	b.n	800193a <HAL_CAN_IRQHandler+0xae>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001a1c:	4628      	mov	r0, r5
 8001a1e:	f7ff f8cf 	bl	8000bc0 <HAL_CAN_RxFifo0MsgPendingCallback>
 8001a22:	e775      	b.n	8001910 <HAL_CAN_IRQHandler+0x84>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001a24:	f7ff ff1a 	bl	800185c <HAL_CAN_TxMailbox0CompleteCallback>
 8001a28:	e744      	b.n	80018b4 <HAL_CAN_IRQHandler+0x28>
        errorcode |= HAL_CAN_ERROR_BOF;
 8001a2a:	f046 0604 	orr.w	r6, r6, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001a2e:	2a00      	cmp	r2, #0
 8001a30:	d0a2      	beq.n	8001978 <HAL_CAN_IRQHandler+0xec>
 8001a32:	f01a 0a70 	ands.w	sl, sl, #112	@ 0x70
 8001a36:	d09f      	beq.n	8001978 <HAL_CAN_IRQHandler+0xec>
        switch (esrflags & CAN_ESR_LEC)
 8001a38:	f1ba 0f40 	cmp.w	sl, #64	@ 0x40
 8001a3c:	d046      	beq.n	8001acc <HAL_CAN_IRQHandler+0x240>
 8001a3e:	d826      	bhi.n	8001a8e <HAL_CAN_IRQHandler+0x202>
 8001a40:	f1ba 0f20 	cmp.w	sl, #32
 8001a44:	d05d      	beq.n	8001b02 <HAL_CAN_IRQHandler+0x276>
 8001a46:	f1ba 0f30 	cmp.w	sl, #48	@ 0x30
 8001a4a:	d051      	beq.n	8001af0 <HAL_CAN_IRQHandler+0x264>
 8001a4c:	f1ba 0f10 	cmp.w	sl, #16
 8001a50:	d137      	bne.n	8001ac2 <HAL_CAN_IRQHandler+0x236>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001a52:	699a      	ldr	r2, [r3, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001a54:	2104      	movs	r1, #4
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001a56:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001a5a:	619a      	str	r2, [r3, #24]
            errorcode |= HAL_CAN_ERROR_STF;
 8001a5c:	f046 0608 	orr.w	r6, r6, #8
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001a60:	6059      	str	r1, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001a62:	e78b      	b.n	800197c <HAL_CAN_IRQHandler+0xf0>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001a64:	f44f 6600 	mov.w	r6, #2048	@ 0x800
 8001a68:	e725      	b.n	80018b6 <HAL_CAN_IRQHandler+0x2a>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001a6a:	0538      	lsls	r0, r7, #20
 8001a6c:	d525      	bpl.n	8001aba <HAL_CAN_IRQHandler+0x22e>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001a6e:	f446 4680 	orr.w	r6, r6, #16384	@ 0x4000
 8001a72:	e72e      	b.n	80018d2 <HAL_CAN_IRQHandler+0x46>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001a74:	0338      	lsls	r0, r7, #12
 8001a76:	d51c      	bpl.n	8001ab2 <HAL_CAN_IRQHandler+0x226>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001a78:	f446 3680 	orr.w	r6, r6, #65536	@ 0x10000
 8001a7c:	e737      	b.n	80018ee <HAL_CAN_IRQHandler+0x62>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001a7e:	4628      	mov	r0, r5
 8001a80:	f7ff feee 	bl	8001860 <HAL_CAN_TxMailbox1CompleteCallback>
 8001a84:	e725      	b.n	80018d2 <HAL_CAN_IRQHandler+0x46>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001a86:	4628      	mov	r0, r5
 8001a88:	f7ff feec 	bl	8001864 <HAL_CAN_TxMailbox2CompleteCallback>
 8001a8c:	e72f      	b.n	80018ee <HAL_CAN_IRQHandler+0x62>
        switch (esrflags & CAN_ESR_LEC)
 8001a8e:	f1ba 0f50 	cmp.w	sl, #80	@ 0x50
 8001a92:	d024      	beq.n	8001ade <HAL_CAN_IRQHandler+0x252>
 8001a94:	f1ba 0f60 	cmp.w	sl, #96	@ 0x60
 8001a98:	d113      	bne.n	8001ac2 <HAL_CAN_IRQHandler+0x236>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001a9a:	699a      	ldr	r2, [r3, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001a9c:	2104      	movs	r1, #4
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001a9e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001aa2:	619a      	str	r2, [r3, #24]
            errorcode |= HAL_CAN_ERROR_CRC;
 8001aa4:	f446 7680 	orr.w	r6, r6, #256	@ 0x100
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001aa8:	6059      	str	r1, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001aaa:	e767      	b.n	800197c <HAL_CAN_IRQHandler+0xf0>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001aac:	f7ff fedc 	bl	8001868 <HAL_CAN_TxMailbox0AbortCallback>
 8001ab0:	e700      	b.n	80018b4 <HAL_CAN_IRQHandler+0x28>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001ab2:	4628      	mov	r0, r5
 8001ab4:	f7ff fedc 	bl	8001870 <HAL_CAN_TxMailbox2AbortCallback>
 8001ab8:	e719      	b.n	80018ee <HAL_CAN_IRQHandler+0x62>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001aba:	4628      	mov	r0, r5
 8001abc:	f7ff fed6 	bl	800186c <HAL_CAN_TxMailbox1AbortCallback>
 8001ac0:	e707      	b.n	80018d2 <HAL_CAN_IRQHandler+0x46>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001ac2:	699a      	ldr	r2, [r3, #24]
 8001ac4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001ac8:	619a      	str	r2, [r3, #24]
 8001aca:	e76a      	b.n	80019a2 <HAL_CAN_IRQHandler+0x116>
 8001acc:	699a      	ldr	r2, [r3, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001ace:	2104      	movs	r1, #4
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001ad0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001ad4:	619a      	str	r2, [r3, #24]
            errorcode |= HAL_CAN_ERROR_BR;
 8001ad6:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001ada:	6059      	str	r1, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001adc:	e74e      	b.n	800197c <HAL_CAN_IRQHandler+0xf0>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001ade:	699a      	ldr	r2, [r3, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001ae0:	2104      	movs	r1, #4
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001ae2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001ae6:	619a      	str	r2, [r3, #24]
            errorcode |= HAL_CAN_ERROR_BD;
 8001ae8:	f046 0680 	orr.w	r6, r6, #128	@ 0x80
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001aec:	6059      	str	r1, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001aee:	e745      	b.n	800197c <HAL_CAN_IRQHandler+0xf0>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001af0:	699a      	ldr	r2, [r3, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001af2:	2104      	movs	r1, #4
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001af4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001af8:	619a      	str	r2, [r3, #24]
            errorcode |= HAL_CAN_ERROR_ACK;
 8001afa:	f046 0620 	orr.w	r6, r6, #32
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001afe:	6059      	str	r1, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001b00:	e73c      	b.n	800197c <HAL_CAN_IRQHandler+0xf0>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001b02:	699a      	ldr	r2, [r3, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001b04:	2104      	movs	r1, #4
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001b06:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001b0a:	619a      	str	r2, [r3, #24]
            errorcode |= HAL_CAN_ERROR_FOR;
 8001b0c:	f046 0610 	orr.w	r6, r6, #16
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001b10:	6059      	str	r1, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001b12:	e733      	b.n	800197c <HAL_CAN_IRQHandler+0xf0>

08001b14 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b14:	4907      	ldr	r1, [pc, #28]	@ (8001b34 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001b16:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b18:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b1a:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b1e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b22:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b24:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b26:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001b2e:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	e000ed00 	.word	0xe000ed00

08001b38 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b38:	4b1b      	ldr	r3, [pc, #108]	@ (8001ba8 <HAL_NVIC_SetPriority+0x70>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b40:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b42:	f1c3 0e07 	rsb	lr, r3, #7
 8001b46:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b4a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b4e:	bf28      	it	cs
 8001b50:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b54:	f1bc 0f06 	cmp.w	ip, #6
 8001b58:	d91c      	bls.n	8001b94 <HAL_NVIC_SetPriority+0x5c>
 8001b5a:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b62:	fa03 f30c 	lsl.w	r3, r3, ip
 8001b66:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b6e:	fa03 f30e 	lsl.w	r3, r3, lr
 8001b72:	ea21 0303 	bic.w	r3, r1, r3
 8001b76:	fa03 f30c 	lsl.w	r3, r3, ip
 8001b7a:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b7c:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8001b7e:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b80:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8001b82:	db0a      	blt.n	8001b9a <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b84:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001b88:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8001b8c:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001b90:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b94:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b96:	4694      	mov	ip, r2
 8001b98:	e7e7      	b.n	8001b6a <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b9a:	4a04      	ldr	r2, [pc, #16]	@ (8001bac <HAL_NVIC_SetPriority+0x74>)
 8001b9c:	f000 000f 	and.w	r0, r0, #15
 8001ba0:	4402      	add	r2, r0
 8001ba2:	7613      	strb	r3, [r2, #24]
 8001ba4:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ba8:	e000ed00 	.word	0xe000ed00
 8001bac:	e000ecfc 	.word	0xe000ecfc

08001bb0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001bb0:	2800      	cmp	r0, #0
 8001bb2:	db07      	blt.n	8001bc4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bb4:	4a04      	ldr	r2, [pc, #16]	@ (8001bc8 <HAL_NVIC_EnableIRQ+0x18>)
 8001bb6:	0941      	lsrs	r1, r0, #5
 8001bb8:	2301      	movs	r3, #1
 8001bba:	f000 001f 	and.w	r0, r0, #31
 8001bbe:	4083      	lsls	r3, r0
 8001bc0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	e000e100 	.word	0xe000e100

08001bcc <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001bcc:	2800      	cmp	r0, #0
 8001bce:	db0c      	blt.n	8001bea <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bd0:	0943      	lsrs	r3, r0, #5
 8001bd2:	4906      	ldr	r1, [pc, #24]	@ (8001bec <HAL_NVIC_DisableIRQ+0x20>)
 8001bd4:	f000 001f 	and.w	r0, r0, #31
 8001bd8:	3320      	adds	r3, #32
 8001bda:	2201      	movs	r2, #1
 8001bdc:	4082      	lsls	r2, r0
 8001bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001be2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001be6:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8001bea:	4770      	bx	lr
 8001bec:	e000e100 	.word	0xe000e100

08001bf0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bf0:	3801      	subs	r0, #1
 8001bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8001bf6:	d301      	bcc.n	8001bfc <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bf8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001bfa:	4770      	bx	lr
{
 8001bfc:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bfe:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c02:	4c07      	ldr	r4, [pc, #28]	@ (8001c20 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c04:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c06:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 8001c0a:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c0e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c10:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c12:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c14:	619a      	str	r2, [r3, #24]
}
 8001c16:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c1a:	6119      	str	r1, [r3, #16]
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c24:	b538      	push	{r3, r4, r5, lr}
 8001c26:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8001c28:	f7ff fb94 	bl	8001354 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c2c:	2c00      	cmp	r4, #0
 8001c2e:	d06b      	beq.n	8001d08 <HAL_DMA_Init+0xe4>

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c30:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 8001c32:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c34:	2102      	movs	r1, #2
 8001c36:	f884 1035 	strb.w	r1, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 8001c3a:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	f022 0201 	bic.w	r2, r2, #1
 8001c44:	4605      	mov	r5, r0
 8001c46:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c48:	e005      	b.n	8001c56 <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c4a:	f7ff fb83 	bl	8001354 <HAL_GetTick>
 8001c4e:	1b43      	subs	r3, r0, r5
 8001c50:	2b05      	cmp	r3, #5
 8001c52:	d837      	bhi.n	8001cc4 <HAL_DMA_Init+0xa0>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c54:	6823      	ldr	r3, [r4, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	07d1      	lsls	r1, r2, #31
 8001c5a:	d4f6      	bmi.n	8001c4a <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c5c:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8001c60:	68e1      	ldr	r1, [r4, #12]
 8001c62:	4302      	orrs	r2, r0
 8001c64:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c66:	e9d4 5104 	ldrd	r5, r1, [r4, #16]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c6a:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c6c:	432a      	orrs	r2, r5
 8001c6e:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c70:	69e1      	ldr	r1, [r4, #28]
  tmp = hdma->Instance->CR;
 8001c72:	681d      	ldr	r5, [r3, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c74:	4302      	orrs	r2, r0
 8001c76:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c78:	4931      	ldr	r1, [pc, #196]	@ (8001d40 <HAL_DMA_Init+0x11c>)
 8001c7a:	4029      	ands	r1, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c7c:	6a25      	ldr	r5, [r4, #32]
 8001c7e:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c80:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c82:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001c84:	2904      	cmp	r1, #4
 8001c86:	d024      	beq.n	8001cd2 <HAL_DMA_Init+0xae>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c88:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c8a:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c8c:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c90:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c92:	b2d8      	uxtb	r0, r3
 8001c94:	4a2b      	ldr	r2, [pc, #172]	@ (8001d44 <HAL_DMA_Init+0x120>)
  hdma->Instance->FCR = tmp;
 8001c96:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c98:	3810      	subs	r0, #16
 8001c9a:	fba2 5200 	umull	r5, r2, r2, r0
 8001c9e:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ca0:	4929      	ldr	r1, [pc, #164]	@ (8001d48 <HAL_DMA_Init+0x124>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001ca2:	f36f 0309 	bfc	r3, #0, #10
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ca6:	5c89      	ldrb	r1, [r1, r2]
 8001ca8:	65e1      	str	r1, [r4, #92]	@ 0x5c
  if (stream_number > 3U)
 8001caa:	285f      	cmp	r0, #95	@ 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001cac:	bf88      	it	hi
 8001cae:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cb0:	223f      	movs	r2, #63	@ 0x3f
 8001cb2:	408a      	lsls	r2, r1
 8001cb4:	65a3      	str	r3, [r4, #88]	@ 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cb6:	2000      	movs	r0, #0
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cb8:	609a      	str	r2, [r3, #8]
  hdma->State = HAL_DMA_STATE_READY;
 8001cba:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cbc:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001cbe:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
}
 8001cc2:	bd38      	pop	{r3, r4, r5, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cc6:	2220      	movs	r2, #32
 8001cc8:	6562      	str	r2, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cca:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      return HAL_TIMEOUT;
 8001cce:	4618      	mov	r0, r3
}
 8001cd0:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001cd2:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	@ 0x2c
 8001cd6:	4329      	orrs	r1, r5
 8001cd8:	4311      	orrs	r1, r2
  hdma->Instance->CR = tmp;  
 8001cda:	6019      	str	r1, [r3, #0]
  tmp = hdma->Instance->FCR;
 8001cdc:	6959      	ldr	r1, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 8001cde:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ce0:	f021 0107 	bic.w	r1, r1, #7
 8001ce4:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 8001ce6:	f041 0104 	orr.w	r1, r1, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001cea:	2d00      	cmp	r5, #0
 8001cec:	d0d1      	beq.n	8001c92 <HAL_DMA_Init+0x6e>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001cee:	b968      	cbnz	r0, 8001d0c <HAL_DMA_Init+0xe8>
  {
    switch (tmp)
 8001cf0:	2a01      	cmp	r2, #1
 8001cf2:	d021      	beq.n	8001d38 <HAL_DMA_Init+0x114>
 8001cf4:	f032 0202 	bics.w	r2, r2, #2
 8001cf8:	d1cb      	bne.n	8001c92 <HAL_DMA_Init+0x6e>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cfa:	01ea      	lsls	r2, r5, #7
 8001cfc:	d5c9      	bpl.n	8001c92 <HAL_DMA_Init+0x6e>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cfe:	2240      	movs	r2, #64	@ 0x40
        hdma->State = HAL_DMA_STATE_READY;
 8001d00:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d02:	6562      	str	r2, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001d04:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    return HAL_ERROR;
 8001d08:	2001      	movs	r0, #1
}
 8001d0a:	bd38      	pop	{r3, r4, r5, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d0c:	f5b0 5f00 	cmp.w	r0, #8192	@ 0x2000
 8001d10:	d004      	beq.n	8001d1c <HAL_DMA_Init+0xf8>
    switch (tmp)
 8001d12:	2a02      	cmp	r2, #2
 8001d14:	d9f3      	bls.n	8001cfe <HAL_DMA_Init+0xda>
 8001d16:	2a03      	cmp	r2, #3
 8001d18:	d0ef      	beq.n	8001cfa <HAL_DMA_Init+0xd6>
 8001d1a:	e7ba      	b.n	8001c92 <HAL_DMA_Init+0x6e>
    switch (tmp)
 8001d1c:	2a03      	cmp	r2, #3
 8001d1e:	d8b8      	bhi.n	8001c92 <HAL_DMA_Init+0x6e>
 8001d20:	a001      	add	r0, pc, #4	@ (adr r0, 8001d28 <HAL_DMA_Init+0x104>)
 8001d22:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8001d26:	bf00      	nop
 8001d28:	08001cff 	.word	0x08001cff
 8001d2c:	08001cfb 	.word	0x08001cfb
 8001d30:	08001cff 	.word	0x08001cff
 8001d34:	08001d39 	.word	0x08001d39
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d38:	f1b5 7fc0 	cmp.w	r5, #25165824	@ 0x1800000
 8001d3c:	d1a9      	bne.n	8001c92 <HAL_DMA_Init+0x6e>
 8001d3e:	e7de      	b.n	8001cfe <HAL_DMA_Init+0xda>
 8001d40:	f010803f 	.word	0xf010803f
 8001d44:	aaaaaaab 	.word	0xaaaaaaab
 8001d48:	08007474 	.word	0x08007474

08001d4c <HAL_DMA_DeInit>:
  if(hdma == NULL)
 8001d4c:	2800      	cmp	r0, #0
 8001d4e:	d035      	beq.n	8001dbc <HAL_DMA_DeInit+0x70>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001d50:	f890 2035 	ldrb.w	r2, [r0, #53]	@ 0x35
 8001d54:	2a02      	cmp	r2, #2
 8001d56:	4603      	mov	r3, r0
 8001d58:	b2d0      	uxtb	r0, r2
 8001d5a:	d02e      	beq.n	8001dba <HAL_DMA_DeInit+0x6e>
  __HAL_DMA_DISABLE(hdma);
 8001d5c:	681a      	ldr	r2, [r3, #0]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d5e:	4918      	ldr	r1, [pc, #96]	@ (8001dc0 <HAL_DMA_DeInit+0x74>)
 8001d60:	b2d0      	uxtb	r0, r2
 8001d62:	3810      	subs	r0, #16
{
 8001d64:	b430      	push	{r4, r5}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d66:	fba1 4100 	umull	r4, r1, r1, r0
 8001d6a:	0909      	lsrs	r1, r1, #4
  __HAL_DMA_DISABLE(hdma);
 8001d6c:	6814      	ldr	r4, [r2, #0]
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d6e:	4d15      	ldr	r5, [pc, #84]	@ (8001dc4 <HAL_DMA_DeInit+0x78>)
  __HAL_DMA_DISABLE(hdma);
 8001d70:	f024 0401 	bic.w	r4, r4, #1
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d74:	5c6d      	ldrb	r5, [r5, r1]
  __HAL_DMA_DISABLE(hdma);
 8001d76:	6014      	str	r4, [r2, #0]
  hdma->Instance->CR   = 0U;
 8001d78:	2100      	movs	r1, #0
 8001d7a:	6011      	str	r1, [r2, #0]
  hdma->Instance->NDTR = 0U;
 8001d7c:	6051      	str	r1, [r2, #4]
  hdma->Instance->PAR  = 0U;
 8001d7e:	6091      	str	r1, [r2, #8]
  hdma->Instance->M0AR = 0U;
 8001d80:	60d1      	str	r1, [r2, #12]
  hdma->Instance->M1AR = 0U;
 8001d82:	6111      	str	r1, [r2, #16]
  hdma->Instance->FCR  = 0x00000021U;
 8001d84:	2121      	movs	r1, #33	@ 0x21
 8001d86:	6151      	str	r1, [r2, #20]
  if (stream_number > 3U)
 8001d88:	285f      	cmp	r0, #95	@ 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d8a:	f36f 0209 	bfc	r2, #0, #10
 8001d8e:	bf88      	it	hi
 8001d90:	3204      	addhi	r2, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d92:	243f      	movs	r4, #63	@ 0x3f
  hdma->XferCpltCallback = NULL;
 8001d94:	2100      	movs	r1, #0
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d96:	40ac      	lsls	r4, r5
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d98:	65dd      	str	r5, [r3, #92]	@ 0x5c
  hdma->XferHalfCpltCallback = NULL;
 8001d9a:	e9c3 110f 	strd	r1, r1, [r3, #60]	@ 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 8001d9e:	e9c3 1111 	strd	r1, r1, [r3, #68]	@ 0x44
  hdma->XferErrorCallback = NULL;
 8001da2:	e9c3 1113 	strd	r1, r1, [r3, #76]	@ 0x4c
 8001da6:	659a      	str	r2, [r3, #88]	@ 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001da8:	6094      	str	r4, [r2, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001daa:	6559      	str	r1, [r3, #84]	@ 0x54
  __HAL_UNLOCK(hdma);
 8001dac:	f883 1034 	strb.w	r1, [r3, #52]	@ 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 8001db0:	f883 1035 	strb.w	r1, [r3, #53]	@ 0x35
  return HAL_OK;
 8001db4:	4608      	mov	r0, r1
}
 8001db6:	bc30      	pop	{r4, r5}
 8001db8:	4770      	bx	lr
 8001dba:	4770      	bx	lr
    return HAL_ERROR;
 8001dbc:	2001      	movs	r0, #1
 8001dbe:	4770      	bx	lr
 8001dc0:	aaaaaaab 	.word	0xaaaaaaab
 8001dc4:	08007474 	.word	0x08007474

08001dc8 <HAL_DMA_Abort>:
{
 8001dc8:	b570      	push	{r4, r5, r6, lr}
 8001dca:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dcc:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  uint32_t tickstart = HAL_GetTick();
 8001dce:	f7ff fac1 	bl	8001354 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dd2:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d006      	beq.n	8001de8 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dda:	2380      	movs	r3, #128	@ 0x80
 8001ddc:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 8001dde:	2300      	movs	r3, #0
 8001de0:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8001de4:	2001      	movs	r0, #1
}
 8001de6:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001de8:	6823      	ldr	r3, [r4, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	f022 0216 	bic.w	r2, r2, #22
 8001df0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001df2:	695a      	ldr	r2, [r3, #20]
 8001df4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001df8:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001dfa:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001dfc:	4605      	mov	r5, r0
 8001dfe:	b342      	cbz	r2, 8001e52 <HAL_DMA_Abort+0x8a>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	f022 0208 	bic.w	r2, r2, #8
 8001e06:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	f022 0201 	bic.w	r2, r2, #1
 8001e0e:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e10:	e005      	b.n	8001e1e <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e12:	f7ff fa9f 	bl	8001354 <HAL_GetTick>
 8001e16:	1b43      	subs	r3, r0, r5
 8001e18:	2b05      	cmp	r3, #5
 8001e1a:	d810      	bhi.n	8001e3e <HAL_DMA_Abort+0x76>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e1c:	6823      	ldr	r3, [r4, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f013 0301 	ands.w	r3, r3, #1
 8001e24:	d1f5      	bne.n	8001e12 <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e26:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8001e28:	223f      	movs	r2, #63	@ 0x3f
 8001e2a:	408a      	lsls	r2, r1
  return HAL_OK;
 8001e2c:	4618      	mov	r0, r3
    hdma->State = HAL_DMA_STATE_READY;
 8001e2e:	2101      	movs	r1, #1
    __HAL_UNLOCK(hdma);
 8001e30:	2300      	movs	r3, #0
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e32:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8001e34:	f884 1035 	strb.w	r1, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8001e38:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 8001e3c:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e40:	2220      	movs	r2, #32
 8001e42:	6562      	str	r2, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 8001e44:	4618      	mov	r0, r3
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e46:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 8001e50:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e52:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8001e54:	2a00      	cmp	r2, #0
 8001e56:	d1d3      	bne.n	8001e00 <HAL_DMA_Abort+0x38>
 8001e58:	e7d6      	b.n	8001e08 <HAL_DMA_Abort+0x40>
 8001e5a:	bf00      	nop

08001e5c <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e5c:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d003      	beq.n	8001e6c <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e64:	2380      	movs	r3, #128	@ 0x80
 8001e66:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8001e68:	2001      	movs	r0, #1
 8001e6a:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8001e6c:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e6e:	2305      	movs	r3, #5
 8001e70:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 8001e74:	6813      	ldr	r3, [r2, #0]
 8001e76:	f023 0301 	bic.w	r3, r3, #1
  return HAL_OK;
 8001e7a:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8001e7c:	6013      	str	r3, [r2, #0]
}
 8001e7e:	4770      	bx	lr

08001e80 <HAL_DMA_IRQHandler>:
{
 8001e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e82:	b083      	sub	sp, #12
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e84:	4a67      	ldr	r2, [pc, #412]	@ (8002024 <HAL_DMA_IRQHandler+0x1a4>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e86:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e88:	6816      	ldr	r6, [r2, #0]
  __IO uint32_t count = 0U;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e8e:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
  tmpisr = regs->ISR;
 8001e90:	683d      	ldr	r5, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e92:	2208      	movs	r2, #8
 8001e94:	409a      	lsls	r2, r3
 8001e96:	422a      	tst	r2, r5
{
 8001e98:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e9a:	d003      	beq.n	8001ea4 <HAL_DMA_IRQHandler+0x24>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e9c:	6801      	ldr	r1, [r0, #0]
 8001e9e:	6808      	ldr	r0, [r1, #0]
 8001ea0:	0740      	lsls	r0, r0, #29
 8001ea2:	d478      	bmi.n	8001f96 <HAL_DMA_IRQHandler+0x116>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	409a      	lsls	r2, r3
 8001ea8:	422a      	tst	r2, r5
 8001eaa:	d003      	beq.n	8001eb4 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001eac:	6821      	ldr	r1, [r4, #0]
 8001eae:	6949      	ldr	r1, [r1, #20]
 8001eb0:	0608      	lsls	r0, r1, #24
 8001eb2:	d46a      	bmi.n	8001f8a <HAL_DMA_IRQHandler+0x10a>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001eb4:	2204      	movs	r2, #4
 8001eb6:	409a      	lsls	r2, r3
 8001eb8:	422a      	tst	r2, r5
 8001eba:	d003      	beq.n	8001ec4 <HAL_DMA_IRQHandler+0x44>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ebc:	6821      	ldr	r1, [r4, #0]
 8001ebe:	6809      	ldr	r1, [r1, #0]
 8001ec0:	0789      	lsls	r1, r1, #30
 8001ec2:	d45c      	bmi.n	8001f7e <HAL_DMA_IRQHandler+0xfe>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ec4:	2210      	movs	r2, #16
 8001ec6:	409a      	lsls	r2, r3
 8001ec8:	422a      	tst	r2, r5
 8001eca:	d003      	beq.n	8001ed4 <HAL_DMA_IRQHandler+0x54>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ecc:	6821      	ldr	r1, [r4, #0]
 8001ece:	6808      	ldr	r0, [r1, #0]
 8001ed0:	0700      	lsls	r0, r0, #28
 8001ed2:	d441      	bmi.n	8001f58 <HAL_DMA_IRQHandler+0xd8>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ed4:	2220      	movs	r2, #32
 8001ed6:	409a      	lsls	r2, r3
 8001ed8:	422a      	tst	r2, r5
 8001eda:	d014      	beq.n	8001f06 <HAL_DMA_IRQHandler+0x86>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001edc:	6821      	ldr	r1, [r4, #0]
 8001ede:	6808      	ldr	r0, [r1, #0]
 8001ee0:	06c0      	lsls	r0, r0, #27
 8001ee2:	d510      	bpl.n	8001f06 <HAL_DMA_IRQHandler+0x86>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001ee4:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001ee6:	f894 2035 	ldrb.w	r2, [r4, #53]	@ 0x35
 8001eea:	2a05      	cmp	r2, #5
 8001eec:	d063      	beq.n	8001fb6 <HAL_DMA_IRQHandler+0x136>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001eee:	680b      	ldr	r3, [r1, #0]
 8001ef0:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ef4:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ef6:	d07e      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0x176>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ef8:	0319      	lsls	r1, r3, #12
 8001efa:	f140 8089 	bpl.w	8002010 <HAL_DMA_IRQHandler+0x190>
        if(hdma->XferCpltCallback != NULL)
 8001efe:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001f00:	b10b      	cbz	r3, 8001f06 <HAL_DMA_IRQHandler+0x86>
          hdma->XferCpltCallback(hdma);
 8001f02:	4620      	mov	r0, r4
 8001f04:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f06:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001f08:	b323      	cbz	r3, 8001f54 <HAL_DMA_IRQHandler+0xd4>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f0a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001f0c:	07da      	lsls	r2, r3, #31
 8001f0e:	d51a      	bpl.n	8001f46 <HAL_DMA_IRQHandler+0xc6>
      __HAL_DMA_DISABLE(hdma);
 8001f10:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f12:	4945      	ldr	r1, [pc, #276]	@ (8002028 <HAL_DMA_IRQHandler+0x1a8>)
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f14:	2305      	movs	r3, #5
 8001f16:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 8001f1a:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f1c:	fba1 1606 	umull	r1, r6, r1, r6
      __HAL_DMA_DISABLE(hdma);
 8001f20:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f24:	0ab6      	lsrs	r6, r6, #10
      __HAL_DMA_DISABLE(hdma);
 8001f26:	6013      	str	r3, [r2, #0]
 8001f28:	e002      	b.n	8001f30 <HAL_DMA_IRQHandler+0xb0>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f2a:	6813      	ldr	r3, [r2, #0]
 8001f2c:	07db      	lsls	r3, r3, #31
 8001f2e:	d504      	bpl.n	8001f3a <HAL_DMA_IRQHandler+0xba>
        if (++count > timeout)
 8001f30:	9b01      	ldr	r3, [sp, #4]
 8001f32:	3301      	adds	r3, #1
 8001f34:	42b3      	cmp	r3, r6
 8001f36:	9301      	str	r3, [sp, #4]
 8001f38:	d9f7      	bls.n	8001f2a <HAL_DMA_IRQHandler+0xaa>
      hdma->State = HAL_DMA_STATE_READY;
 8001f3a:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 8001f3c:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 8001f3e:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8001f42:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 8001f46:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001f48:	b123      	cbz	r3, 8001f54 <HAL_DMA_IRQHandler+0xd4>
      hdma->XferErrorCallback(hdma);
 8001f4a:	4620      	mov	r0, r4
}
 8001f4c:	b003      	add	sp, #12
 8001f4e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8001f52:	4718      	bx	r3
}
 8001f54:	b003      	add	sp, #12
 8001f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f58:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f5a:	680a      	ldr	r2, [r1, #0]
 8001f5c:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f60:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f62:	d122      	bne.n	8001faa <HAL_DMA_IRQHandler+0x12a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f64:	05d2      	lsls	r2, r2, #23
 8001f66:	d403      	bmi.n	8001f70 <HAL_DMA_IRQHandler+0xf0>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f68:	680a      	ldr	r2, [r1, #0]
 8001f6a:	f022 0208 	bic.w	r2, r2, #8
 8001f6e:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8001f70:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001f72:	2a00      	cmp	r2, #0
 8001f74:	d0ae      	beq.n	8001ed4 <HAL_DMA_IRQHandler+0x54>
          hdma->XferHalfCpltCallback(hdma);
 8001f76:	4620      	mov	r0, r4
 8001f78:	4790      	blx	r2
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f7a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001f7c:	e7aa      	b.n	8001ed4 <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f7e:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f80:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001f82:	f042 0204 	orr.w	r2, r2, #4
 8001f86:	6562      	str	r2, [r4, #84]	@ 0x54
 8001f88:	e79c      	b.n	8001ec4 <HAL_DMA_IRQHandler+0x44>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f8a:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f8c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001f8e:	f042 0202 	orr.w	r2, r2, #2
 8001f92:	6562      	str	r2, [r4, #84]	@ 0x54
 8001f94:	e78e      	b.n	8001eb4 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f96:	6808      	ldr	r0, [r1, #0]
 8001f98:	f020 0004 	bic.w	r0, r0, #4
 8001f9c:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f9e:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fa0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001fa2:	f042 0201 	orr.w	r2, r2, #1
 8001fa6:	6562      	str	r2, [r4, #84]	@ 0x54
 8001fa8:	e77c      	b.n	8001ea4 <HAL_DMA_IRQHandler+0x24>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001faa:	0311      	lsls	r1, r2, #12
 8001fac:	d5e0      	bpl.n	8001f70 <HAL_DMA_IRQHandler+0xf0>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001fae:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8001fb0:	2a00      	cmp	r2, #0
 8001fb2:	d1e0      	bne.n	8001f76 <HAL_DMA_IRQHandler+0xf6>
 8001fb4:	e78e      	b.n	8001ed4 <HAL_DMA_IRQHandler+0x54>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fb6:	680a      	ldr	r2, [r1, #0]
 8001fb8:	f022 0216 	bic.w	r2, r2, #22
 8001fbc:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fbe:	694a      	ldr	r2, [r1, #20]
 8001fc0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001fc4:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fc6:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001fc8:	b33a      	cbz	r2, 800201a <HAL_DMA_IRQHandler+0x19a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fca:	680a      	ldr	r2, [r1, #0]
 8001fcc:	f022 0208 	bic.w	r2, r2, #8
 8001fd0:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fd2:	223f      	movs	r2, #63	@ 0x3f
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
        if(hdma->XferAbortCallback != NULL)
 8001fd8:	6d21      	ldr	r1, [r4, #80]	@ 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fda:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8001fdc:	2201      	movs	r2, #1
        __HAL_UNLOCK(hdma);
 8001fde:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_READY;
 8001fe0:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8001fe4:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 8001fe8:	2900      	cmp	r1, #0
 8001fea:	d0b3      	beq.n	8001f54 <HAL_DMA_IRQHandler+0xd4>
          hdma->XferAbortCallback(hdma);
 8001fec:	4620      	mov	r0, r4
}
 8001fee:	b003      	add	sp, #12
 8001ff0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferAbortCallback(hdma);
 8001ff4:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ff6:	f413 7380 	ands.w	r3, r3, #256	@ 0x100
 8001ffa:	d180      	bne.n	8001efe <HAL_DMA_IRQHandler+0x7e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ffc:	680a      	ldr	r2, [r1, #0]
 8001ffe:	f022 0210 	bic.w	r2, r2, #16
 8002002:	600a      	str	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8002004:	2201      	movs	r2, #1
 8002006:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 800200a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 800200e:	e776      	b.n	8001efe <HAL_DMA_IRQHandler+0x7e>
          if(hdma->XferM1CpltCallback != NULL)
 8002010:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002012:	2b00      	cmp	r3, #0
 8002014:	f47f af75 	bne.w	8001f02 <HAL_DMA_IRQHandler+0x82>
 8002018:	e775      	b.n	8001f06 <HAL_DMA_IRQHandler+0x86>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800201a:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800201c:	2a00      	cmp	r2, #0
 800201e:	d1d4      	bne.n	8001fca <HAL_DMA_IRQHandler+0x14a>
 8002020:	e7d7      	b.n	8001fd2 <HAL_DMA_IRQHandler+0x152>
 8002022:	bf00      	nop
 8002024:	2000000c 	.word	0x2000000c
 8002028:	1b4e81b5 	.word	0x1b4e81b5

0800202c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800202c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002030:	2300      	movs	r3, #0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002032:	680c      	ldr	r4, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002034:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800224c <HAL_GPIO_Init+0x220>
{
 8002038:	b085      	sub	sp, #20
    ioposition = 0x01U << position;
 800203a:	f04f 0b01 	mov.w	fp, #1

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800203e:	4689      	mov	r9, r1
 8002040:	e003      	b.n	800204a <HAL_GPIO_Init+0x1e>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002042:	3301      	adds	r3, #1
 8002044:	2b10      	cmp	r3, #16
 8002046:	f000 8092 	beq.w	800216e <HAL_GPIO_Init+0x142>
    ioposition = 0x01U << position;
 800204a:	fa0b f203 	lsl.w	r2, fp, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800204e:	ea02 0804 	and.w	r8, r2, r4
    if(iocurrent == ioposition)
 8002052:	43a2      	bics	r2, r4
 8002054:	d1f5      	bne.n	8002042 <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002056:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800205a:	f001 0c03 	and.w	ip, r1, #3
 800205e:	005a      	lsls	r2, r3, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002060:	2503      	movs	r5, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002062:	f10c 36ff 	add.w	r6, ip, #4294967295
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002066:	4095      	lsls	r5, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002068:	2e01      	cmp	r6, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800206a:	ea6f 0505 	mvn.w	r5, r5
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800206e:	f240 8081 	bls.w	8002174 <HAL_GPIO_Init+0x148>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002072:	f1bc 0f03 	cmp.w	ip, #3
 8002076:	f040 80d9 	bne.w	800222c <HAL_GPIO_Init+0x200>
      temp = GPIOx->MODER;
 800207a:	6806      	ldr	r6, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800207c:	fa0c f202 	lsl.w	r2, ip, r2
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002080:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002082:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002084:	f411 3f40 	tst.w	r1, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8002088:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800208a:	d0da      	beq.n	8002042 <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800208c:	2200      	movs	r2, #0
 800208e:	9203      	str	r2, [sp, #12]
 8002090:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 8002094:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002098:	f8ca 2044 	str.w	r2, [sl, #68]	@ 0x44
 800209c:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 80020a0:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80020a4:	9203      	str	r2, [sp, #12]
 80020a6:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 80020a8:	f023 0203 	bic.w	r2, r3, #3
 80020ac:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020b0:	f003 0603 	and.w	r6, r3, #3
 80020b4:	270f      	movs	r7, #15
 80020b6:	f502 329c 	add.w	r2, r2, #79872	@ 0x13800
 80020ba:	00b6      	lsls	r6, r6, #2
 80020bc:	fa07 fc06 	lsl.w	ip, r7, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020c0:	4f5f      	ldr	r7, [pc, #380]	@ (8002240 <HAL_GPIO_Init+0x214>)
        temp = SYSCFG->EXTICR[position >> 2U];
 80020c2:	6895      	ldr	r5, [r2, #8]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020c4:	42b8      	cmp	r0, r7
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020c6:	ea25 050c 	bic.w	r5, r5, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020ca:	d027      	beq.n	800211c <HAL_GPIO_Init+0xf0>
 80020cc:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 80020d0:	42b8      	cmp	r0, r7
 80020d2:	f000 8087 	beq.w	80021e4 <HAL_GPIO_Init+0x1b8>
 80020d6:	4f5b      	ldr	r7, [pc, #364]	@ (8002244 <HAL_GPIO_Init+0x218>)
 80020d8:	42b8      	cmp	r0, r7
 80020da:	f000 8089 	beq.w	80021f0 <HAL_GPIO_Init+0x1c4>
 80020de:	f8df c170 	ldr.w	ip, [pc, #368]	@ 8002250 <HAL_GPIO_Init+0x224>
 80020e2:	4560      	cmp	r0, ip
 80020e4:	f000 808a 	beq.w	80021fc <HAL_GPIO_Init+0x1d0>
 80020e8:	f8df c168 	ldr.w	ip, [pc, #360]	@ 8002254 <HAL_GPIO_Init+0x228>
 80020ec:	4560      	cmp	r0, ip
 80020ee:	f000 808b 	beq.w	8002208 <HAL_GPIO_Init+0x1dc>
 80020f2:	f8df c164 	ldr.w	ip, [pc, #356]	@ 8002258 <HAL_GPIO_Init+0x22c>
 80020f6:	4560      	cmp	r0, ip
 80020f8:	f000 808c 	beq.w	8002214 <HAL_GPIO_Init+0x1e8>
 80020fc:	f8df c15c 	ldr.w	ip, [pc, #348]	@ 800225c <HAL_GPIO_Init+0x230>
 8002100:	4560      	cmp	r0, ip
 8002102:	f000 808d 	beq.w	8002220 <HAL_GPIO_Init+0x1f4>
 8002106:	f8df c158 	ldr.w	ip, [pc, #344]	@ 8002260 <HAL_GPIO_Init+0x234>
 800210a:	4560      	cmp	r0, ip
 800210c:	bf0c      	ite	eq
 800210e:	f04f 0c07 	moveq.w	ip, #7
 8002112:	f04f 0c08 	movne.w	ip, #8
 8002116:	fa0c f606 	lsl.w	r6, ip, r6
 800211a:	4335      	orrs	r5, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 800211c:	6095      	str	r5, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800211e:	4a4a      	ldr	r2, [pc, #296]	@ (8002248 <HAL_GPIO_Init+0x21c>)
 8002120:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002122:	02ce      	lsls	r6, r1, #11
        temp &= ~((uint32_t)iocurrent);
 8002124:	ea6f 0508 	mvn.w	r5, r8
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8002128:	4e47      	ldr	r6, [pc, #284]	@ (8002248 <HAL_GPIO_Init+0x21c>)
        temp &= ~((uint32_t)iocurrent);
 800212a:	bf54      	ite	pl
 800212c:	402a      	andpl	r2, r5
          temp |= iocurrent;
 800212e:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->RTSR = temp;
 8002132:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR;
 8002134:	68f2      	ldr	r2, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8002136:	4e44      	ldr	r6, [pc, #272]	@ (8002248 <HAL_GPIO_Init+0x21c>)
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002138:	028f      	lsls	r7, r1, #10
        temp &= ~((uint32_t)iocurrent);
 800213a:	bf54      	ite	pl
 800213c:	402a      	andpl	r2, r5
          temp |= iocurrent;
 800213e:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR = temp;
 8002142:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR;
 8002144:	6872      	ldr	r2, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002146:	038e      	lsls	r6, r1, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8002148:	4e3f      	ldr	r6, [pc, #252]	@ (8002248 <HAL_GPIO_Init+0x21c>)
        temp &= ~((uint32_t)iocurrent);
 800214a:	bf54      	ite	pl
 800214c:	402a      	andpl	r2, r5
          temp |= iocurrent;
 800214e:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->EMR = temp;
 8002152:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002154:	6832      	ldr	r2, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002156:	03c9      	lsls	r1, r1, #15
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002158:	f103 0301 	add.w	r3, r3, #1
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 800215c:	493a      	ldr	r1, [pc, #232]	@ (8002248 <HAL_GPIO_Init+0x21c>)
        temp &= ~((uint32_t)iocurrent);
 800215e:	bf54      	ite	pl
 8002160:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8002162:	ea48 0202 	orrmi.w	r2, r8, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002166:	2b10      	cmp	r3, #16
        EXTI->IMR = temp;
 8002168:	600a      	str	r2, [r1, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800216a:	f47f af6e 	bne.w	800204a <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 800216e:	b005      	add	sp, #20
 8002170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 8002174:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002176:	ea06 0e05 	and.w	lr, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800217a:	f8d9 600c 	ldr.w	r6, [r9, #12]
 800217e:	4096      	lsls	r6, r2
 8002180:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->OSPEEDR = temp;
 8002184:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8002186:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002188:	ea26 0e08 	bic.w	lr, r6, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800218c:	f3c1 1600 	ubfx	r6, r1, #4, #1
 8002190:	409e      	lsls	r6, r3
 8002192:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->OTYPER = temp;
 8002196:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 8002198:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800219a:	ea06 0e05 	and.w	lr, r6, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800219e:	f8d9 6008 	ldr.w	r6, [r9, #8]
 80021a2:	4096      	lsls	r6, r2
 80021a4:	ea46 060e 	orr.w	r6, r6, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021a8:	f1bc 0f02 	cmp.w	ip, #2
        GPIOx->PUPDR = temp;
 80021ac:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021ae:	f47f af64 	bne.w	800207a <HAL_GPIO_Init+0x4e>
        temp = GPIOx->AFR[position >> 3U];
 80021b2:	08de      	lsrs	r6, r3, #3
 80021b4:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 80021b8:	9601      	str	r6, [sp, #4]
 80021ba:	6a37      	ldr	r7, [r6, #32]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021bc:	f8d9 6010 	ldr.w	r6, [r9, #16]
        temp = GPIOx->AFR[position >> 3U];
 80021c0:	9700      	str	r7, [sp, #0]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021c2:	f003 0e07 	and.w	lr, r3, #7
 80021c6:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80021ca:	270f      	movs	r7, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021cc:	fa06 f60e 	lsl.w	r6, r6, lr
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021d0:	fa07 fe0e 	lsl.w	lr, r7, lr
 80021d4:	9f00      	ldr	r7, [sp, #0]
 80021d6:	ea27 0e0e 	bic.w	lr, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 80021da:	9f01      	ldr	r7, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021dc:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->AFR[position >> 3U] = temp;
 80021e0:	623e      	str	r6, [r7, #32]
 80021e2:	e74a      	b.n	800207a <HAL_GPIO_Init+0x4e>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021e4:	f04f 0c01 	mov.w	ip, #1
 80021e8:	fa0c f606 	lsl.w	r6, ip, r6
 80021ec:	4335      	orrs	r5, r6
 80021ee:	e795      	b.n	800211c <HAL_GPIO_Init+0xf0>
 80021f0:	f04f 0c02 	mov.w	ip, #2
 80021f4:	fa0c f606 	lsl.w	r6, ip, r6
 80021f8:	4335      	orrs	r5, r6
 80021fa:	e78f      	b.n	800211c <HAL_GPIO_Init+0xf0>
 80021fc:	f04f 0c03 	mov.w	ip, #3
 8002200:	fa0c f606 	lsl.w	r6, ip, r6
 8002204:	4335      	orrs	r5, r6
 8002206:	e789      	b.n	800211c <HAL_GPIO_Init+0xf0>
 8002208:	f04f 0c04 	mov.w	ip, #4
 800220c:	fa0c f606 	lsl.w	r6, ip, r6
 8002210:	4335      	orrs	r5, r6
 8002212:	e783      	b.n	800211c <HAL_GPIO_Init+0xf0>
 8002214:	f04f 0c05 	mov.w	ip, #5
 8002218:	fa0c f606 	lsl.w	r6, ip, r6
 800221c:	4335      	orrs	r5, r6
 800221e:	e77d      	b.n	800211c <HAL_GPIO_Init+0xf0>
 8002220:	f04f 0c06 	mov.w	ip, #6
 8002224:	fa0c f606 	lsl.w	r6, ip, r6
 8002228:	4335      	orrs	r5, r6
 800222a:	e777      	b.n	800211c <HAL_GPIO_Init+0xf0>
        temp = GPIOx->PUPDR;
 800222c:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800222e:	ea06 0e05 	and.w	lr, r6, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002232:	f8d9 6008 	ldr.w	r6, [r9, #8]
 8002236:	4096      	lsls	r6, r2
 8002238:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->PUPDR = temp;
 800223c:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800223e:	e71c      	b.n	800207a <HAL_GPIO_Init+0x4e>
 8002240:	40020000 	.word	0x40020000
 8002244:	40020800 	.word	0x40020800
 8002248:	40013c00 	.word	0x40013c00
 800224c:	40023800 	.word	0x40023800
 8002250:	40020c00 	.word	0x40020c00
 8002254:	40021000 	.word	0x40021000
 8002258:	40021400 	.word	0x40021400
 800225c:	40021800 	.word	0x40021800
 8002260:	40021c00 	.word	0x40021c00

08002264 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002268:	2300      	movs	r3, #0
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800226a:	4f53      	ldr	r7, [pc, #332]	@ (80023b8 <HAL_GPIO_DeInit+0x154>)
{
 800226c:	b083      	sub	sp, #12
    ioposition = 0x01U << position;
 800226e:	2601      	movs	r6, #1
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002270:	f04f 090f 	mov.w	r9, #15
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002274:	f04f 0a03 	mov.w	sl, #3
 8002278:	e002      	b.n	8002280 <HAL_GPIO_DeInit+0x1c>
  for(position = 0U; position < GPIO_NUMBER; position++)
 800227a:	3301      	adds	r3, #1
 800227c:	2b10      	cmp	r3, #16
 800227e:	d076      	beq.n	800236e <HAL_GPIO_DeInit+0x10a>
    ioposition = 0x01U << position;
 8002280:	fa06 f203 	lsl.w	r2, r6, r3
    if(iocurrent == ioposition)
 8002284:	ea32 0401 	bics.w	r4, r2, r1
    iocurrent = (GPIO_Pin) & ioposition;
 8002288:	ea02 0c01 	and.w	ip, r2, r1
    if(iocurrent == ioposition)
 800228c:	d1f5      	bne.n	800227a <HAL_GPIO_DeInit+0x16>
      tmp = SYSCFG->EXTICR[position >> 2U];
 800228e:	f023 0503 	bic.w	r5, r3, #3
 8002292:	f105 4580 	add.w	r5, r5, #1073741824	@ 0x40000000
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002296:	f003 0403 	and.w	r4, r3, #3
 800229a:	00a4      	lsls	r4, r4, #2
 800229c:	f505 359c 	add.w	r5, r5, #79872	@ 0x13800
 80022a0:	fa09 f804 	lsl.w	r8, r9, r4
 80022a4:	9401      	str	r4, [sp, #4]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80022a6:	4c45      	ldr	r4, [pc, #276]	@ (80023bc <HAL_GPIO_DeInit+0x158>)
      tmp = SYSCFG->EXTICR[position >> 2U];
 80022a8:	f8d5 e008 	ldr.w	lr, [r5, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80022ac:	42a0      	cmp	r0, r4
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80022ae:	ea08 0e0e 	and.w	lr, r8, lr
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80022b2:	d020      	beq.n	80022f6 <HAL_GPIO_DeInit+0x92>
 80022b4:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80022b8:	42a0      	cmp	r0, r4
 80022ba:	d05b      	beq.n	8002374 <HAL_GPIO_DeInit+0x110>
 80022bc:	4c40      	ldr	r4, [pc, #256]	@ (80023c0 <HAL_GPIO_DeInit+0x15c>)
 80022be:	42a0      	cmp	r0, r4
 80022c0:	d05c      	beq.n	800237c <HAL_GPIO_DeInit+0x118>
 80022c2:	4c40      	ldr	r4, [pc, #256]	@ (80023c4 <HAL_GPIO_DeInit+0x160>)
 80022c4:	42a0      	cmp	r0, r4
 80022c6:	d05f      	beq.n	8002388 <HAL_GPIO_DeInit+0x124>
 80022c8:	4c3f      	ldr	r4, [pc, #252]	@ (80023c8 <HAL_GPIO_DeInit+0x164>)
 80022ca:	42a0      	cmp	r0, r4
 80022cc:	d062      	beq.n	8002394 <HAL_GPIO_DeInit+0x130>
 80022ce:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 80023cc <HAL_GPIO_DeInit+0x168>
 80022d2:	4558      	cmp	r0, fp
 80022d4:	d064      	beq.n	80023a0 <HAL_GPIO_DeInit+0x13c>
 80022d6:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 80023d0 <HAL_GPIO_DeInit+0x16c>
 80022da:	4558      	cmp	r0, fp
 80022dc:	d066      	beq.n	80023ac <HAL_GPIO_DeInit+0x148>
 80022de:	f8df b0f4 	ldr.w	fp, [pc, #244]	@ 80023d4 <HAL_GPIO_DeInit+0x170>
 80022e2:	9c01      	ldr	r4, [sp, #4]
 80022e4:	4558      	cmp	r0, fp
 80022e6:	bf0c      	ite	eq
 80022e8:	f04f 0b07 	moveq.w	fp, #7
 80022ec:	f04f 0b08 	movne.w	fp, #8
 80022f0:	fa0b f404 	lsl.w	r4, fp, r4
 80022f4:	e000      	b.n	80022f8 <HAL_GPIO_DeInit+0x94>
 80022f6:	2400      	movs	r4, #0
 80022f8:	45a6      	cmp	lr, r4
 80022fa:	d113      	bne.n	8002324 <HAL_GPIO_DeInit+0xc0>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80022fc:	683c      	ldr	r4, [r7, #0]
 80022fe:	ea24 040c 	bic.w	r4, r4, ip
 8002302:	603c      	str	r4, [r7, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002304:	687c      	ldr	r4, [r7, #4]
 8002306:	ea24 040c 	bic.w	r4, r4, ip
 800230a:	607c      	str	r4, [r7, #4]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800230c:	68fc      	ldr	r4, [r7, #12]
 800230e:	ea24 040c 	bic.w	r4, r4, ip
 8002312:	60fc      	str	r4, [r7, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002314:	68bc      	ldr	r4, [r7, #8]
 8002316:	ea24 040c 	bic.w	r4, r4, ip
 800231a:	60bc      	str	r4, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800231c:	68ac      	ldr	r4, [r5, #8]
 800231e:	ea24 0408 	bic.w	r4, r4, r8
 8002322:	60ac      	str	r4, [r5, #8]
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002324:	6804      	ldr	r4, [r0, #0]
 8002326:	005d      	lsls	r5, r3, #1
 8002328:	fa0a f505 	lsl.w	r5, sl, r5

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800232c:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002330:	ea24 0405 	bic.w	r4, r4, r5
 8002334:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8002338:	6004      	str	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800233a:	f003 0407 	and.w	r4, r3, #7
 800233e:	f8dc e020 	ldr.w	lr, [ip, #32]
 8002342:	00a4      	lsls	r4, r4, #2
 8002344:	fa09 f404 	lsl.w	r4, r9, r4
 8002348:	ea2e 0404 	bic.w	r4, lr, r4
 800234c:	f8cc 4020 	str.w	r4, [ip, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002350:	68c4      	ldr	r4, [r0, #12]
 8002352:	ea24 0405 	bic.w	r4, r4, r5
 8002356:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002358:	6844      	ldr	r4, [r0, #4]
 800235a:	ea24 0202 	bic.w	r2, r4, r2
 800235e:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002360:	6882      	ldr	r2, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002362:	3301      	adds	r3, #1
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002364:	ea22 0205 	bic.w	r2, r2, r5
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002368:	2b10      	cmp	r3, #16
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800236a:	6082      	str	r2, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800236c:	d188      	bne.n	8002280 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800236e:	b003      	add	sp, #12
 8002370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002374:	9c01      	ldr	r4, [sp, #4]
 8002376:	fa06 f404 	lsl.w	r4, r6, r4
 800237a:	e7bd      	b.n	80022f8 <HAL_GPIO_DeInit+0x94>
 800237c:	9c01      	ldr	r4, [sp, #4]
 800237e:	f04f 0b02 	mov.w	fp, #2
 8002382:	fa0b f404 	lsl.w	r4, fp, r4
 8002386:	e7b7      	b.n	80022f8 <HAL_GPIO_DeInit+0x94>
 8002388:	9c01      	ldr	r4, [sp, #4]
 800238a:	f04f 0b03 	mov.w	fp, #3
 800238e:	fa0b f404 	lsl.w	r4, fp, r4
 8002392:	e7b1      	b.n	80022f8 <HAL_GPIO_DeInit+0x94>
 8002394:	9c01      	ldr	r4, [sp, #4]
 8002396:	f04f 0b04 	mov.w	fp, #4
 800239a:	fa0b f404 	lsl.w	r4, fp, r4
 800239e:	e7ab      	b.n	80022f8 <HAL_GPIO_DeInit+0x94>
 80023a0:	9c01      	ldr	r4, [sp, #4]
 80023a2:	f04f 0b05 	mov.w	fp, #5
 80023a6:	fa0b f404 	lsl.w	r4, fp, r4
 80023aa:	e7a5      	b.n	80022f8 <HAL_GPIO_DeInit+0x94>
 80023ac:	9c01      	ldr	r4, [sp, #4]
 80023ae:	f04f 0b06 	mov.w	fp, #6
 80023b2:	fa0b f404 	lsl.w	r4, fp, r4
 80023b6:	e79f      	b.n	80022f8 <HAL_GPIO_DeInit+0x94>
 80023b8:	40013c00 	.word	0x40013c00
 80023bc:	40020000 	.word	0x40020000
 80023c0:	40020800 	.word	0x40020800
 80023c4:	40020c00 	.word	0x40020c00
 80023c8:	40021000 	.word	0x40021000
 80023cc:	40021400 	.word	0x40021400
 80023d0:	40021800 	.word	0x40021800
 80023d4:	40021c00 	.word	0x40021c00

080023d8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023d8:	b902      	cbnz	r2, 80023dc <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023da:	0409      	lsls	r1, r1, #16
 80023dc:	6181      	str	r1, [r0, #24]
  }
}
 80023de:	4770      	bx	lr

080023e0 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023e0:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023e2:	ea01 0203 	and.w	r2, r1, r3
 80023e6:	ea21 0103 	bic.w	r1, r1, r3
 80023ea:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80023ee:	6181      	str	r1, [r0, #24]
}
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop

080023f4 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023f4:	2800      	cmp	r0, #0
 80023f6:	f000 80b8 	beq.w	800256a <HAL_I2C_Init+0x176>
{
 80023fa:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023fc:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002400:	4604      	mov	r4, r0
 8002402:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002406:	2b00      	cmp	r3, #0
 8002408:	f000 8098 	beq.w	800253c <HAL_I2C_Init+0x148>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800240c:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800240e:	2224      	movs	r2, #36	@ 0x24
 8002410:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	f022 0201 	bic.w	r2, r2, #1
 800241a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002422:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800242a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800242c:	f001 f90c 	bl	8003648 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002430:	4b4f      	ldr	r3, [pc, #316]	@ (8002570 <HAL_I2C_Init+0x17c>)
 8002432:	6865      	ldr	r5, [r4, #4]
 8002434:	429d      	cmp	r5, r3
 8002436:	d84f      	bhi.n	80024d8 <HAL_I2C_Init+0xe4>
 8002438:	4b4e      	ldr	r3, [pc, #312]	@ (8002574 <HAL_I2C_Init+0x180>)
 800243a:	4298      	cmp	r0, r3
 800243c:	d97c      	bls.n	8002538 <HAL_I2C_Init+0x144>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800243e:	4b4e      	ldr	r3, [pc, #312]	@ (8002578 <HAL_I2C_Init+0x184>)
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002440:	006a      	lsls	r2, r5, #1
  freqrange = I2C_FREQRANGE(pclk1);
 8002442:	fba3 3500 	umull	r3, r5, r3, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002446:	1e43      	subs	r3, r0, #1
 8002448:	fbb3 f3f2 	udiv	r3, r3, r2
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800244c:	6822      	ldr	r2, [r4, #0]
 800244e:	6851      	ldr	r1, [r2, #4]
 8002450:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8002454:	ea41 4195 	orr.w	r1, r1, r5, lsr #18
 8002458:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800245a:	6a11      	ldr	r1, [r2, #32]
  freqrange = I2C_FREQRANGE(pclk1);
 800245c:	ea4f 4c95 	mov.w	ip, r5, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002460:	f10c 0c01 	add.w	ip, ip, #1
 8002464:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8002468:	ea41 010c 	orr.w	r1, r1, ip
 800246c:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800246e:	69d1      	ldr	r1, [r2, #28]
 8002470:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8002474:	3301      	adds	r3, #1
 8002476:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 800247a:	4203      	tst	r3, r0
 800247c:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8002480:	d161      	bne.n	8002546 <HAL_I2C_Init+0x152>
 8002482:	2304      	movs	r3, #4
 8002484:	430b      	orrs	r3, r1
 8002486:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002488:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 800248c:	6811      	ldr	r1, [r2, #0]
 800248e:	4303      	orrs	r3, r0
 8002490:	f021 01c0 	bic.w	r1, r1, #192	@ 0xc0
 8002494:	430b      	orrs	r3, r1
 8002496:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002498:	6891      	ldr	r1, [r2, #8]
 800249a:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 800249e:	f421 4103 	bic.w	r1, r1, #33536	@ 0x8300
 80024a2:	4303      	orrs	r3, r0
 80024a4:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 80024a8:	430b      	orrs	r3, r1
 80024aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80024ac:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 80024b0:	68d1      	ldr	r1, [r2, #12]
 80024b2:	4303      	orrs	r3, r0
 80024b4:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 80024b8:	430b      	orrs	r3, r1
 80024ba:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024bc:	6811      	ldr	r1, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024be:	2300      	movs	r3, #0
  __HAL_I2C_ENABLE(hi2c);
 80024c0:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 80024c4:	2020      	movs	r0, #32
  __HAL_I2C_ENABLE(hi2c);
 80024c6:	6011      	str	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024c8:	6423      	str	r3, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024ca:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024ce:	6323      	str	r3, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024d0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e

  return HAL_OK;
 80024d4:	4618      	mov	r0, r3
}
 80024d6:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024d8:	4b28      	ldr	r3, [pc, #160]	@ (800257c <HAL_I2C_Init+0x188>)
 80024da:	4298      	cmp	r0, r3
 80024dc:	d92c      	bls.n	8002538 <HAL_I2C_Init+0x144>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024de:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80024e0:	4b25      	ldr	r3, [pc, #148]	@ (8002578 <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024e2:	4e27      	ldr	r6, [pc, #156]	@ (8002580 <HAL_I2C_Init+0x18c>)
  freqrange = I2C_FREQRANGE(pclk1);
 80024e4:	fba3 3c00 	umull	r3, ip, r3, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024e8:	1e43      	subs	r3, r0, #1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024ea:	6850      	ldr	r0, [r2, #4]
 80024ec:	f020 003f 	bic.w	r0, r0, #63	@ 0x3f
 80024f0:	ea40 409c 	orr.w	r0, r0, ip, lsr #18
 80024f4:	6050      	str	r0, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 80024f6:	ea4f 419c 	mov.w	r1, ip, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024fa:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80024fe:	fb00 f101 	mul.w	r1, r0, r1
 8002502:	fba6 6101 	umull	r6, r1, r6, r1
 8002506:	6a10      	ldr	r0, [r2, #32]
 8002508:	0989      	lsrs	r1, r1, #6
 800250a:	f020 003f 	bic.w	r0, r0, #63	@ 0x3f
 800250e:	3101      	adds	r1, #1
 8002510:	4301      	orrs	r1, r0
 8002512:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002514:	69d1      	ldr	r1, [r2, #28]
 8002516:	68a0      	ldr	r0, [r4, #8]
 8002518:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 800251c:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8002520:	b9a0      	cbnz	r0, 800254c <HAL_I2C_Init+0x158>
 8002522:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002526:	fbb3 f3f5 	udiv	r3, r3, r5
 800252a:	3301      	adds	r3, #1
 800252c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002530:	b1cb      	cbz	r3, 8002566 <HAL_I2C_Init+0x172>
 8002532:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002536:	e7a5      	b.n	8002484 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8002538:	2001      	movs	r0, #1
}
 800253a:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800253c:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8002540:	f7fe f92c 	bl	800079c <HAL_I2C_MspInit>
 8002544:	e762      	b.n	800240c <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002546:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800254a:	e79b      	b.n	8002484 <HAL_I2C_Init+0x90>
 800254c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8002550:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8002554:	fbb3 f3f5 	udiv	r3, r3, r5
 8002558:	3301      	adds	r3, #1
 800255a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800255e:	b113      	cbz	r3, 8002566 <HAL_I2C_Init+0x172>
 8002560:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002564:	e78e      	b.n	8002484 <HAL_I2C_Init+0x90>
 8002566:	2301      	movs	r3, #1
 8002568:	e78c      	b.n	8002484 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 800256a:	2001      	movs	r0, #1
}
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	000186a0 	.word	0x000186a0
 8002574:	001e847f 	.word	0x001e847f
 8002578:	431bde83 	.word	0x431bde83
 800257c:	003d08ff 	.word	0x003d08ff
 8002580:	10624dd3 	.word	0x10624dd3

08002584 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002584:	b570      	push	{r4, r5, r6, lr}
 8002586:	b082      	sub	sp, #8
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002588:	b300      	cbz	r0, 80025cc <HAL_PCD_Init+0x48>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800258a:	f890 3495 	ldrb.w	r3, [r0, #1173]	@ 0x495
  USBx = hpcd->Instance;
 800258e:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002590:	4604      	mov	r4, r0
 8002592:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002596:	2b00      	cmp	r3, #0
 8002598:	d05a      	beq.n	8002650 <HAL_PCD_Init+0xcc>
 800259a:	4628      	mov	r0, r5
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800259c:	2303      	movs	r3, #3

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800259e:	f1b5 4fa0 	cmp.w	r5, #1342177280	@ 0x50000000
  hpcd->State = HAL_PCD_STATE_BUSY;
 80025a2:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  {
    hpcd->Init.dma_enable = 0U;
 80025a6:	bf04      	itt	eq
 80025a8:	2300      	moveq	r3, #0
 80025aa:	71a3      	strbeq	r3, [r4, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80025ac:	f001 ffae 	bl	800450c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025b0:	7c23      	ldrb	r3, [r4, #16]
 80025b2:	f88d 3000 	strb.w	r3, [sp]
 80025b6:	1d25      	adds	r5, r4, #4
 80025b8:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80025bc:	6820      	ldr	r0, [r4, #0]
 80025be:	f001 fedb 	bl	8004378 <USB_CoreInit>
 80025c2:	4601      	mov	r1, r0
 80025c4:	b130      	cbz	r0, 80025d4 <HAL_PCD_Init+0x50>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025c6:	2302      	movs	r3, #2
 80025c8:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 80025cc:	2501      	movs	r5, #1
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 80025ce:	4628      	mov	r0, r5
 80025d0:	b002      	add	sp, #8
 80025d2:	bd70      	pop	{r4, r5, r6, pc}
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80025d4:	6820      	ldr	r0, [r4, #0]
 80025d6:	f001 ffa1 	bl	800451c <USB_SetCurrentMode>
 80025da:	4601      	mov	r1, r0
 80025dc:	2800      	cmp	r0, #0
 80025de:	d1f2      	bne.n	80025c6 <HAL_PCD_Init+0x42>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025e0:	7926      	ldrb	r6, [r4, #4]
 80025e2:	b306      	cbz	r6, 8002626 <HAL_PCD_Init+0xa2>
 80025e4:	4623      	mov	r3, r4
 80025e6:	4622      	mov	r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 80025e8:	f04f 0c01 	mov.w	ip, #1
    hpcd->IN_ep[i].num = i;
 80025ec:	7511      	strb	r1, [r2, #20]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80025ee:	85d1      	strh	r1, [r2, #46]	@ 0x2e
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025f0:	3101      	adds	r1, #1
 80025f2:	42b1      	cmp	r1, r6
    hpcd->IN_ep[i].xfer_buff = 0U;
 80025f4:	e9c2 0007 	strd	r0, r0, [r2, #28]
    hpcd->IN_ep[i].is_in = 1U;
 80025f8:	f882 c015 	strb.w	ip, [r2, #21]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80025fc:	7610      	strb	r0, [r2, #24]
    hpcd->IN_ep[i].xfer_len = 0U;
 80025fe:	f842 0f24 	str.w	r0, [r2, #36]!
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002602:	d1f3      	bne.n	80025ec <HAL_PCD_Init+0x68>
 8002604:	2100      	movs	r1, #0
    hpcd->OUT_ep[i].is_in = 0U;
 8002606:	460a      	mov	r2, r1
    hpcd->OUT_ep[i].num = i;
 8002608:	f883 1254 	strb.w	r1, [r3, #596]	@ 0x254
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800260c:	3101      	adds	r1, #1
 800260e:	42b1      	cmp	r1, r6
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002610:	e9c3 2297 	strd	r2, r2, [r3, #604]	@ 0x25c
    hpcd->OUT_ep[i].is_in = 0U;
 8002614:	f883 2255 	strb.w	r2, [r3, #597]	@ 0x255
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002618:	f883 2258 	strb.w	r2, [r3, #600]	@ 0x258
    hpcd->OUT_ep[i].xfer_len = 0U;
 800261c:	f8c3 2264 	str.w	r2, [r3, #612]	@ 0x264
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002620:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8002624:	d1f0      	bne.n	8002608 <HAL_PCD_Init+0x84>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002626:	7c20      	ldrb	r0, [r4, #16]
 8002628:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800262c:	f88d 0000 	strb.w	r0, [sp]
 8002630:	6820      	ldr	r0, [r4, #0]
 8002632:	f001 fff9 	bl	8004628 <USB_DevInit>
 8002636:	4605      	mov	r5, r0
 8002638:	2800      	cmp	r0, #0
 800263a:	d1c4      	bne.n	80025c6 <HAL_PCD_Init+0x42>
  hpcd->State = HAL_PCD_STATE_READY;
 800263c:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 800263e:	7460      	strb	r0, [r4, #17]
  (void)USB_DevDisconnect(hpcd->Instance);
 8002640:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 8002642:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  (void)USB_DevDisconnect(hpcd->Instance);
 8002646:	f002 fb8b 	bl	8004d60 <USB_DevDisconnect>
}
 800264a:	4628      	mov	r0, r5
 800264c:	b002      	add	sp, #8
 800264e:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8002650:	f880 2494 	strb.w	r2, [r0, #1172]	@ 0x494
    HAL_PCD_MspInit(hpcd);
 8002654:	f7fe fdc8 	bl	80011e8 <HAL_PCD_MspInit>
  __HAL_PCD_DISABLE(hpcd);
 8002658:	6820      	ldr	r0, [r4, #0]
 800265a:	e79f      	b.n	800259c <HAL_PCD_Init+0x18>

0800265c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800265c:	b510      	push	{r4, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  __HAL_LOCK(hpcd);
 800265e:	f890 3494 	ldrb.w	r3, [r0, #1172]	@ 0x494
 8002662:	2b01      	cmp	r3, #1
{
 8002664:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002666:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8002668:	d017      	beq.n	800269a <HAL_PCD_Start+0x3e>
 800266a:	2301      	movs	r3, #1
 800266c:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002670:	68c3      	ldr	r3, [r0, #12]
 8002672:	065b      	lsls	r3, r3, #25
 8002674:	d502      	bpl.n	800267c <HAL_PCD_Start+0x20>
 8002676:	7b63      	ldrb	r3, [r4, #13]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d009      	beq.n	8002690 <HAL_PCD_Start+0x34>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }

  __HAL_PCD_ENABLE(hpcd);
 800267c:	f001 ff3e 	bl	80044fc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002680:	6820      	ldr	r0, [r4, #0]
 8002682:	f002 fb5d 	bl	8004d40 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002686:	2300      	movs	r3, #0
 8002688:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494

  return HAL_OK;
 800268c:	4618      	mov	r0, r3
}
 800268e:	bd10      	pop	{r4, pc}
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002690:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8002692:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002696:	6383      	str	r3, [r0, #56]	@ 0x38
 8002698:	e7f0      	b.n	800267c <HAL_PCD_Start+0x20>
  __HAL_LOCK(hpcd);
 800269a:	2002      	movs	r0, #2
}
 800269c:	bd10      	pop	{r4, pc}
 800269e:	bf00      	nop

080026a0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80026a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026a4:	6806      	ldr	r6, [r0, #0]
{
 80026a6:	b089      	sub	sp, #36	@ 0x24
 80026a8:	4604      	mov	r4, r0
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80026aa:	4630      	mov	r0, r6
 80026ac:	f002 fb96 	bl	8004ddc <USB_GetMode>
 80026b0:	b110      	cbz	r0, 80026b8 <HAL_PCD_IRQHandler+0x18>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
    }
  }
}
 80026b2:	b009      	add	sp, #36	@ 0x24
 80026b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80026b8:	4605      	mov	r5, r0
 80026ba:	6820      	ldr	r0, [r4, #0]
 80026bc:	f002 fb60 	bl	8004d80 <USB_ReadInterrupts>
 80026c0:	2800      	cmp	r0, #0
 80026c2:	d0f6      	beq.n	80026b2 <HAL_PCD_IRQHandler+0x12>
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80026c4:	f8d6 3808 	ldr.w	r3, [r6, #2056]	@ 0x808
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80026c8:	6820      	ldr	r0, [r4, #0]
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80026ca:	f3c3 230d 	ubfx	r3, r3, #8, #14
 80026ce:	f8c4 34d4 	str.w	r3, [r4, #1236]	@ 0x4d4
 80026d2:	f506 6300 	add.w	r3, r6, #2048	@ 0x800
 80026d6:	9303      	str	r3, [sp, #12]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80026d8:	f002 fb52 	bl	8004d80 <USB_ReadInterrupts>
 80026dc:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80026e0:	6820      	ldr	r0, [r4, #0]
 80026e2:	bf1e      	ittt	ne
 80026e4:	6943      	ldrne	r3, [r0, #20]
 80026e6:	f003 0302 	andne.w	r3, r3, #2
 80026ea:	6143      	strne	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80026ec:	f002 fb48 	bl	8004d80 <USB_ReadInterrupts>
 80026f0:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026f4:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80026f6:	d014      	beq.n	8002722 <HAL_PCD_IRQHandler+0x82>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026f8:	6983      	ldr	r3, [r0, #24]
 80026fa:	f023 0310 	bic.w	r3, r3, #16
 80026fe:	6183      	str	r3, [r0, #24]
      RegVal = USBx->GRXSTSP;
 8002700:	6a37      	ldr	r7, [r6, #32]
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002702:	f407 13f0 	and.w	r3, r7, #1966080	@ 0x1e0000
 8002706:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800270a:	f007 080f 	and.w	r8, r7, #15
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800270e:	f000 82bb 	beq.w	8002c88 <HAL_PCD_IRQHandler+0x5e8>
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002712:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002716:	f000 8262 	beq.w	8002bde <HAL_PCD_IRQHandler+0x53e>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800271a:	6983      	ldr	r3, [r0, #24]
 800271c:	f043 0310 	orr.w	r3, r3, #16
 8002720:	6183      	str	r3, [r0, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002722:	f002 fb2d 	bl	8004d80 <USB_ReadInterrupts>
 8002726:	f410 2f00 	tst.w	r0, #524288	@ 0x80000
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800272a:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800272c:	f040 81f6 	bne.w	8002b1c <HAL_PCD_IRQHandler+0x47c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002730:	f002 fb26 	bl	8004d80 <USB_ReadInterrupts>
 8002734:	0347      	lsls	r7, r0, #13
 8002736:	f100 8151 	bmi.w	80029dc <HAL_PCD_IRQHandler+0x33c>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800273a:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800273c:	f002 fb20 	bl	8004d80 <USB_ReadInterrupts>
 8002740:	2800      	cmp	r0, #0
 8002742:	f2c0 80c2 	blt.w	80028ca <HAL_PCD_IRQHandler+0x22a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002746:	6820      	ldr	r0, [r4, #0]
 8002748:	f002 fb1a 	bl	8004d80 <USB_ReadInterrupts>
 800274c:	0502      	lsls	r2, r0, #20
 800274e:	d47e      	bmi.n	800284e <HAL_PCD_IRQHandler+0x1ae>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002750:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002752:	f002 fb15 	bl	8004d80 <USB_ReadInterrupts>
 8002756:	04c7      	lsls	r7, r0, #19
 8002758:	f100 80e1 	bmi.w	800291e <HAL_PCD_IRQHandler+0x27e>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800275c:	6820      	ldr	r0, [r4, #0]
 800275e:	f002 fb0f 	bl	8004d80 <USB_ReadInterrupts>
 8002762:	f410 5f00 	tst.w	r0, #8192	@ 0x2000
      (void)USB_ActivateSetup(hpcd->Instance);
 8002766:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002768:	f040 80c2 	bne.w	80028f0 <HAL_PCD_IRQHandler+0x250>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800276c:	f002 fb08 	bl	8004d80 <USB_ReadInterrupts>
 8002770:	0700      	lsls	r0, r0, #28
 8002772:	f100 812a 	bmi.w	80029ca <HAL_PCD_IRQHandler+0x32a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002776:	6820      	ldr	r0, [r4, #0]
 8002778:	f002 fb02 	bl	8004d80 <USB_ReadInterrupts>
 800277c:	0601      	lsls	r1, r0, #24
 800277e:	d51d      	bpl.n	80027bc <HAL_PCD_IRQHandler+0x11c>
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002780:	69b3      	ldr	r3, [r6, #24]
 8002782:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002786:	61b3      	str	r3, [r6, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002788:	7923      	ldrb	r3, [r4, #4]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d916      	bls.n	80027bc <HAL_PCD_IRQHandler+0x11c>
 800278e:	4627      	mov	r7, r4
 8002790:	2501      	movs	r5, #1
 8002792:	e004      	b.n	800279e <HAL_PCD_IRQHandler+0xfe>
 8002794:	3501      	adds	r5, #1
 8002796:	42ab      	cmp	r3, r5
 8002798:	f107 0724 	add.w	r7, r7, #36	@ 0x24
 800279c:	d90e      	bls.n	80027bc <HAL_PCD_IRQHandler+0x11c>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800279e:	f897 227b 	ldrb.w	r2, [r7, #635]	@ 0x27b
 80027a2:	2a01      	cmp	r2, #1
 80027a4:	d1f6      	bne.n	8002794 <HAL_PCD_IRQHandler+0xf4>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027a6:	eb05 01c5 	add.w	r1, r5, r5, lsl #3
 80027aa:	eb04 0181 	add.w	r1, r4, r1, lsl #2
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80027ae:	6820      	ldr	r0, [r4, #0]
 80027b0:	f501 7115 	add.w	r1, r1, #596	@ 0x254
 80027b4:	f002 f9d6 	bl	8004b64 <USB_EPStopXfer>

  return ret;
 80027b8:	7923      	ldrb	r3, [r4, #4]
 80027ba:	e7eb      	b.n	8002794 <HAL_PCD_IRQHandler+0xf4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80027bc:	6820      	ldr	r0, [r4, #0]
 80027be:	f002 fadf 	bl	8004d80 <USB_ReadInterrupts>
 80027c2:	02c2      	lsls	r2, r0, #11
 80027c4:	d541      	bpl.n	800284a <HAL_PCD_IRQHandler+0x1aa>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027c6:	7923      	ldrb	r3, [r4, #4]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d920      	bls.n	800280e <HAL_PCD_IRQHandler+0x16e>
 80027cc:	f506 6812 	add.w	r8, r6, #2336	@ 0x920
 80027d0:	4627      	mov	r7, r4
 80027d2:	2501      	movs	r5, #1
 80027d4:	e006      	b.n	80027e4 <HAL_PCD_IRQHandler+0x144>
 80027d6:	3501      	adds	r5, #1
 80027d8:	42ab      	cmp	r3, r5
 80027da:	f108 0820 	add.w	r8, r8, #32
 80027de:	f107 0724 	add.w	r7, r7, #36	@ 0x24
 80027e2:	d914      	bls.n	800280e <HAL_PCD_IRQHandler+0x16e>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80027e4:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80027e8:	f8d8 1000 	ldr.w	r1, [r8]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80027ec:	2a01      	cmp	r2, #1
 80027ee:	d1f2      	bne.n	80027d6 <HAL_PCD_IRQHandler+0x136>
 80027f0:	2900      	cmp	r1, #0
 80027f2:	daf0      	bge.n	80027d6 <HAL_PCD_IRQHandler+0x136>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027f4:	2324      	movs	r3, #36	@ 0x24
 80027f6:	f005 010f 	and.w	r1, r5, #15
 80027fa:	fb03 4101 	mla	r1, r3, r1, r4
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80027fe:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002800:	f887 203b 	strb.w	r2, [r7, #59]	@ 0x3b
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002804:	3114      	adds	r1, #20
 8002806:	f002 f9ad 	bl	8004b64 <USB_EPStopXfer>
  return ret;
 800280a:	7923      	ldrb	r3, [r4, #4]
 800280c:	e7e3      	b.n	80027d6 <HAL_PCD_IRQHandler+0x136>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800280e:	6820      	ldr	r0, [r4, #0]
 8002810:	6943      	ldr	r3, [r0, #20]
 8002812:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002816:	6143      	str	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002818:	f002 fab2 	bl	8004d80 <USB_ReadInterrupts>
 800281c:	0283      	lsls	r3, r0, #10
 800281e:	d421      	bmi.n	8002864 <HAL_PCD_IRQHandler+0x1c4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002820:	6820      	ldr	r0, [r4, #0]
 8002822:	f002 faad 	bl	8004d80 <USB_ReadInterrupts>
 8002826:	0040      	lsls	r0, r0, #1
 8002828:	f100 80c6 	bmi.w	80029b8 <HAL_PCD_IRQHandler+0x318>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800282c:	6820      	ldr	r0, [r4, #0]
 800282e:	f002 faa7 	bl	8004d80 <USB_ReadInterrupts>
 8002832:	0741      	lsls	r1, r0, #29
 8002834:	f57f af3d 	bpl.w	80026b2 <HAL_PCD_IRQHandler+0x12>
      RegVal = hpcd->Instance->GOTGINT;
 8002838:	6823      	ldr	r3, [r4, #0]
 800283a:	685d      	ldr	r5, [r3, #4]
      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800283c:	076a      	lsls	r2, r5, #29
 800283e:	f100 8244 	bmi.w	8002cca <HAL_PCD_IRQHandler+0x62a>
      hpcd->Instance->GOTGINT |= RegVal;
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	432a      	orrs	r2, r5
 8002846:	605a      	str	r2, [r3, #4]
 8002848:	e733      	b.n	80026b2 <HAL_PCD_IRQHandler+0x12>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800284a:	6820      	ldr	r0, [r4, #0]
 800284c:	e7e4      	b.n	8002818 <HAL_PCD_IRQHandler+0x178>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800284e:	9b03      	ldr	r3, [sp, #12]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	07db      	lsls	r3, r3, #31
 8002854:	f100 8235 	bmi.w	8002cc2 <HAL_PCD_IRQHandler+0x622>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002858:	6820      	ldr	r0, [r4, #0]
 800285a:	6943      	ldr	r3, [r0, #20]
 800285c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002860:	6143      	str	r3, [r0, #20]
 8002862:	e776      	b.n	8002752 <HAL_PCD_IRQHandler+0xb2>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002864:	f894 c004 	ldrb.w	ip, [r4, #4]
 8002868:	f1bc 0f01 	cmp.w	ip, #1
 800286c:	d927      	bls.n	80028be <HAL_PCD_IRQHandler+0x21e>
 800286e:	f506 6232 	add.w	r2, r6, #2848	@ 0xb20
 8002872:	4623      	mov	r3, r4
 8002874:	2101      	movs	r1, #1
 8002876:	e003      	b.n	8002880 <HAL_PCD_IRQHandler+0x1e0>
 8002878:	4561      	cmp	r1, ip
 800287a:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 800287e:	d01e      	beq.n	80028be <HAL_PCD_IRQHandler+0x21e>
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002880:	f893 027c 	ldrb.w	r0, [r3, #636]	@ 0x27c
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002884:	6815      	ldr	r5, [r2, #0]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002886:	2801      	cmp	r0, #1
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002888:	f101 0101 	add.w	r1, r1, #1
 800288c:	f102 0220 	add.w	r2, r2, #32
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002890:	d1f2      	bne.n	8002878 <HAL_PCD_IRQHandler+0x1d8>
 8002892:	2d00      	cmp	r5, #0
 8002894:	daf0      	bge.n	8002878 <HAL_PCD_IRQHandler+0x1d8>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8002896:	f8d4 74d4 	ldr.w	r7, [r4, #1236]	@ 0x4d4
 800289a:	ea87 4715 	eor.w	r7, r7, r5, lsr #16
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800289e:	07ff      	lsls	r7, r7, #31
 80028a0:	d4ea      	bmi.n	8002878 <HAL_PCD_IRQHandler+0x1d8>
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80028a2:	f883 027b 	strb.w	r0, [r3, #635]	@ 0x27b
          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80028a6:	69b0      	ldr	r0, [r6, #24]
 80028a8:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 80028ac:	61b0      	str	r0, [r6, #24]
          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80028ae:	6970      	ldr	r0, [r6, #20]
 80028b0:	0605      	lsls	r5, r0, #24
 80028b2:	d4e1      	bmi.n	8002878 <HAL_PCD_IRQHandler+0x1d8>
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80028b4:	9a03      	ldr	r2, [sp, #12]
 80028b6:	6853      	ldr	r3, [r2, #4]
 80028b8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80028bc:	6053      	str	r3, [r2, #4]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80028be:	6820      	ldr	r0, [r4, #0]
 80028c0:	6943      	ldr	r3, [r0, #20]
 80028c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028c6:	6143      	str	r3, [r0, #20]
 80028c8:	e7ab      	b.n	8002822 <HAL_PCD_IRQHandler+0x182>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80028ca:	9a03      	ldr	r2, [sp, #12]
 80028cc:	6853      	ldr	r3, [r2, #4]
 80028ce:	f023 0301 	bic.w	r3, r3, #1
 80028d2:	6053      	str	r3, [r2, #4]
      if (hpcd->LPM_State == LPM_L1)
 80028d4:	f894 34cc 	ldrb.w	r3, [r4, #1228]	@ 0x4cc
 80028d8:	2b01      	cmp	r3, #1
 80028da:	f000 8179 	beq.w	8002bd0 <HAL_PCD_IRQHandler+0x530>
        HAL_PCD_ResumeCallback(hpcd);
 80028de:	4620      	mov	r0, r4
 80028e0:	f004 f83c 	bl	800695c <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80028e4:	6820      	ldr	r0, [r4, #0]
 80028e6:	6943      	ldr	r3, [r0, #20]
 80028e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80028ec:	6143      	str	r3, [r0, #20]
 80028ee:	e72b      	b.n	8002748 <HAL_PCD_IRQHandler+0xa8>
      (void)USB_ActivateSetup(hpcd->Instance);
 80028f0:	f002 fa78 	bl	8004de4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80028f4:	6820      	ldr	r0, [r4, #0]
 80028f6:	f001 ff71 	bl	80047dc <USB_GetDevSpeed>
 80028fa:	71e0      	strb	r0, [r4, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80028fc:	6825      	ldr	r5, [r4, #0]
 80028fe:	f000 fe9d 	bl	800363c <HAL_RCC_GetHCLKFreq>
 8002902:	79e2      	ldrb	r2, [r4, #7]
 8002904:	4601      	mov	r1, r0
 8002906:	4628      	mov	r0, r5
 8002908:	f001 fd7e 	bl	8004408 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 800290c:	4620      	mov	r0, r4
 800290e:	f003 fff9 	bl	8006904 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002912:	6820      	ldr	r0, [r4, #0]
 8002914:	6943      	ldr	r3, [r0, #20]
 8002916:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800291a:	6143      	str	r3, [r0, #20]
 800291c:	e726      	b.n	800276c <HAL_PCD_IRQHandler+0xcc>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800291e:	9a03      	ldr	r2, [sp, #12]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002920:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002922:	6853      	ldr	r3, [r2, #4]
 8002924:	f023 0301 	bic.w	r3, r3, #1
 8002928:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800292a:	2110      	movs	r1, #16
 800292c:	f001 fe2e 	bl	800458c <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002930:	7920      	ldrb	r0, [r4, #4]
 8002932:	b1d8      	cbz	r0, 800296c <HAL_PCD_IRQHandler+0x2cc>
 8002934:	f506 6310 	add.w	r3, r6, #2304	@ 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002938:	f64f 317f 	movw	r1, #64383	@ 0xfb7f
 800293c:	6099      	str	r1, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8002944:	601a      	str	r2, [r3, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002946:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800294a:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800294e:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8002952:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002956:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800295a:	3501      	adds	r5, #1
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800295c:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002960:	4285      	cmp	r5, r0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002962:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002966:	f103 0320 	add.w	r3, r3, #32
 800296a:	d1e7      	bne.n	800293c <HAL_PCD_IRQHandler+0x29c>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800296c:	9a03      	ldr	r2, [sp, #12]
 800296e:	69d3      	ldr	r3, [r2, #28]
 8002970:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002974:	61d3      	str	r3, [r2, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002976:	7be3      	ldrb	r3, [r4, #15]
 8002978:	2b00      	cmp	r3, #0
 800297a:	f040 811d 	bne.w	8002bb8 <HAL_PCD_IRQHandler+0x518>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800297e:	9a03      	ldr	r2, [sp, #12]
 8002980:	6953      	ldr	r3, [r2, #20]
 8002982:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002986:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800298a:	6153      	str	r3, [r2, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800298c:	6913      	ldr	r3, [r2, #16]
 800298e:	f043 030b 	orr.w	r3, r3, #11
 8002992:	6113      	str	r3, [r2, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002994:	f8d6 3800 	ldr.w	r3, [r6, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002998:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800299a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800299e:	f8c6 3800 	str.w	r3, [r6, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80029a2:	79a1      	ldrb	r1, [r4, #6]
 80029a4:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 80029a8:	f002 fa2c 	bl	8004e04 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80029ac:	6820      	ldr	r0, [r4, #0]
 80029ae:	6943      	ldr	r3, [r0, #20]
 80029b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029b4:	6143      	str	r3, [r0, #20]
 80029b6:	e6d2      	b.n	800275e <HAL_PCD_IRQHandler+0xbe>
      HAL_PCD_ConnectCallback(hpcd);
 80029b8:	4620      	mov	r0, r4
 80029ba:	f003 ffdb 	bl	8006974 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80029be:	6820      	ldr	r0, [r4, #0]
 80029c0:	6943      	ldr	r3, [r0, #20]
 80029c2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80029c6:	6143      	str	r3, [r0, #20]
 80029c8:	e731      	b.n	800282e <HAL_PCD_IRQHandler+0x18e>
      HAL_PCD_SOFCallback(hpcd);
 80029ca:	4620      	mov	r0, r4
 80029cc:	f003 ff96 	bl	80068fc <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80029d0:	6820      	ldr	r0, [r4, #0]
 80029d2:	6943      	ldr	r3, [r0, #20]
 80029d4:	f003 0308 	and.w	r3, r3, #8
 80029d8:	6143      	str	r3, [r0, #20]
 80029da:	e6cd      	b.n	8002778 <HAL_PCD_IRQHandler+0xd8>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80029dc:	6820      	ldr	r0, [r4, #0]
 80029de:	f002 f9db 	bl	8004d98 <USB_ReadDevAllInEpInterrupt>
      while (ep_intr != 0U)
 80029e2:	4681      	mov	r9, r0
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80029e4:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
 80029e6:	f1b9 0f00 	cmp.w	r9, #0
 80029ea:	f43f aea7 	beq.w	800273c <HAL_PCD_IRQHandler+0x9c>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80029ee:	e9cd 6504 	strd	r6, r5, [sp, #16]
 80029f2:	f506 6710 	add.w	r7, r6, #2304	@ 0x900
 80029f6:	46a0      	mov	r8, r4
      epnum = 0U;
 80029f8:	f04f 0a00 	mov.w	sl, #0
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80029fc:	4606      	mov	r6, r0
 80029fe:	e009      	b.n	8002a14 <HAL_PCD_IRQHandler+0x374>
      while (ep_intr != 0U)
 8002a00:	ea5f 0959 	movs.w	r9, r9, lsr #1
        epnum++;
 8002a04:	f10a 0a01 	add.w	sl, sl, #1
      while (ep_intr != 0U)
 8002a08:	f108 0824 	add.w	r8, r8, #36	@ 0x24
 8002a0c:	f107 0720 	add.w	r7, r7, #32
 8002a10:	f000 80f8 	beq.w	8002c04 <HAL_PCD_IRQHandler+0x564>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002a14:	f019 0f01 	tst.w	r9, #1
 8002a18:	d0f2      	beq.n	8002a00 <HAL_PCD_IRQHandler+0x360>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a1a:	fa5f fb8a 	uxtb.w	fp, sl
 8002a1e:	4659      	mov	r1, fp
 8002a20:	4630      	mov	r0, r6
 8002a22:	f002 f9cb 	bl	8004dbc <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002a26:	07c1      	lsls	r1, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a28:	4605      	mov	r5, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002a2a:	d512      	bpl.n	8002a52 <HAL_PCD_IRQHandler+0x3b2>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002a2c:	9803      	ldr	r0, [sp, #12]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002a2e:	2101      	movs	r1, #1
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002a30:	6b43      	ldr	r3, [r0, #52]	@ 0x34
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002a32:	f00a 020f 	and.w	r2, sl, #15
 8002a36:	fa01 f202 	lsl.w	r2, r1, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002a3a:	ea23 0302 	bic.w	r3, r3, r2
 8002a3e:	6343      	str	r3, [r0, #52]	@ 0x34
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002a40:	60b9      	str	r1, [r7, #8]
            if (hpcd->Init.dma_enable == 1U)
 8002a42:	79a1      	ldrb	r1, [r4, #6]
 8002a44:	2901      	cmp	r1, #1
 8002a46:	f000 8145 	beq.w	8002cd4 <HAL_PCD_IRQHandler+0x634>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002a4a:	4659      	mov	r1, fp
 8002a4c:	4620      	mov	r0, r4
 8002a4e:	f003 ff4b 	bl	80068e8 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002a52:	072a      	lsls	r2, r5, #28
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002a54:	bf44      	itt	mi
 8002a56:	2308      	movmi	r3, #8
 8002a58:	60bb      	strmi	r3, [r7, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002a5a:	06eb      	lsls	r3, r5, #27
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002a5c:	bf44      	itt	mi
 8002a5e:	2310      	movmi	r3, #16
 8002a60:	60bb      	strmi	r3, [r7, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002a62:	066e      	lsls	r6, r5, #25
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002a64:	bf44      	itt	mi
 8002a66:	2340      	movmi	r3, #64	@ 0x40
 8002a68:	60bb      	strmi	r3, [r7, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002a6a:	07a8      	lsls	r0, r5, #30
 8002a6c:	f100 8101 	bmi.w	8002c72 <HAL_PCD_IRQHandler+0x5d2>
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002a70:	0629      	lsls	r1, r5, #24
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a72:	6826      	ldr	r6, [r4, #0]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002a74:	d5c4      	bpl.n	8002a00 <HAL_PCD_IRQHandler+0x360>
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 8002a76:	e9d8 5309 	ldrd	r5, r3, [r8, #36]	@ 0x24
 8002a7a:	42ab      	cmp	r3, r5
 8002a7c:	d8c0      	bhi.n	8002a00 <HAL_PCD_IRQHandler+0x360>
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a7e:	f506 6110 	add.w	r1, r6, #2304	@ 0x900
  if (len > ep->maxpacket)
 8002a82:	f8d8 001c 	ldr.w	r0, [r8, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a86:	9607      	str	r6, [sp, #28]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a88:	eb01 114a 	add.w	r1, r1, sl, lsl #5
  len = ep->xfer_len - ep->xfer_count;
 8002a8c:	eba5 0c03 	sub.w	ip, r5, r3
  if (len > ep->maxpacket)
 8002a90:	4584      	cmp	ip, r0
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a92:	698a      	ldr	r2, [r1, #24]
  if (len > ep->maxpacket)
 8002a94:	bf28      	it	cs
 8002a96:	4684      	movcs	ip, r0
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a98:	fa1f fe82 	uxth.w	lr, r2
  len32b = (len + 3U) / 4U;
 8002a9c:	f10c 0c03 	add.w	ip, ip, #3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002aa0:	ebbe 0f9c 	cmp.w	lr, ip, lsr #2
 8002aa4:	f0c0 814d 	bcc.w	8002d42 <HAL_PCD_IRQHandler+0x6a2>
 8002aa8:	f8cd a018 	str.w	sl, [sp, #24]
 8002aac:	468a      	mov	sl, r1
 8002aae:	e021      	b.n	8002af4 <HAL_PCD_IRQHandler+0x454>
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;

    if (len > ep->maxpacket)
 8002ab0:	f8d8 301c 	ldr.w	r3, [r8, #28]
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002ab4:	f8d8 1020 	ldr.w	r1, [r8, #32]
    if (len > ep->maxpacket)
 8002ab8:	429d      	cmp	r5, r3
 8002aba:	bf28      	it	cs
 8002abc:	461d      	movcs	r5, r3
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002abe:	79a3      	ldrb	r3, [r4, #6]
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	465a      	mov	r2, fp
 8002ac4:	b2ab      	uxth	r3, r5
 8002ac6:	4630      	mov	r0, r6
 8002ac8:	f002 f896 	bl	8004bf8 <USB_WritePacket>
                          (uint8_t)hpcd->Init.dma_enable);

    ep->xfer_buff  += len;
 8002acc:	f8d8 3020 	ldr.w	r3, [r8, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ad0:	f8da 2018 	ldr.w	r2, [sl, #24]
    ep->xfer_buff  += len;
 8002ad4:	442b      	add	r3, r5
 8002ad6:	f8c8 3020 	str.w	r3, [r8, #32]
    ep->xfer_count += len;
 8002ada:	f8d8 3028 	ldr.w	r3, [r8, #40]	@ 0x28
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ade:	b292      	uxth	r2, r2
    ep->xfer_count += len;
 8002ae0:	442b      	add	r3, r5
    len32b = (len + 3U) / 4U;
 8002ae2:	3503      	adds	r5, #3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002ae4:	ebb2 0f95 	cmp.w	r2, r5, lsr #2
    ep->xfer_count += len;
 8002ae8:	f8c8 3028 	str.w	r3, [r8, #40]	@ 0x28
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002aec:	f0c0 8124 	bcc.w	8002d38 <HAL_PCD_IRQHandler+0x698>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002af0:	f8d8 5024 	ldr.w	r5, [r8, #36]	@ 0x24
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002af4:	429d      	cmp	r5, r3
    len = ep->xfer_len - ep->xfer_count;
 8002af6:	eba5 0503 	sub.w	r5, r5, r3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002afa:	d8d9      	bhi.n	8002ab0 <HAL_PCD_IRQHandler+0x410>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002afc:	f8dd a018 	ldr.w	sl, [sp, #24]
 8002b00:	6826      	ldr	r6, [r4, #0]
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b02:	9b07      	ldr	r3, [sp, #28]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b04:	f00a 050f 	and.w	r5, sl, #15
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b08:	f503 6100 	add.w	r1, r3, #2048	@ 0x800
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b0c:	2201      	movs	r2, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b0e:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b12:	40aa      	lsls	r2, r5
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b14:	ea23 0302 	bic.w	r3, r3, r2
 8002b18:	634b      	str	r3, [r1, #52]	@ 0x34
 8002b1a:	e771      	b.n	8002a00 <HAL_PCD_IRQHandler+0x360>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002b1c:	f002 f934 	bl	8004d88 <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 8002b20:	4607      	mov	r7, r0
 8002b22:	6820      	ldr	r0, [r4, #0]
 8002b24:	2f00      	cmp	r7, #0
 8002b26:	f43f ae03 	beq.w	8002730 <HAL_PCD_IRQHandler+0x90>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002b2a:	9504      	str	r5, [sp, #16]
 8002b2c:	f506 6830 	add.w	r8, r6, #2816	@ 0xb00
 8002b30:	46a3      	mov	fp, r4
      epnum = 0U;
 8002b32:	f04f 0a00 	mov.w	sl, #0
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002b36:	4625      	mov	r5, r4
 8002b38:	e007      	b.n	8002b4a <HAL_PCD_IRQHandler+0x4aa>
      while (ep_intr != 0U)
 8002b3a:	087f      	lsrs	r7, r7, #1
        epnum++;
 8002b3c:	f10a 0a01 	add.w	sl, sl, #1
      while (ep_intr != 0U)
 8002b40:	f108 0820 	add.w	r8, r8, #32
 8002b44:	f10b 0b24 	add.w	fp, fp, #36	@ 0x24
 8002b48:	d060      	beq.n	8002c0c <HAL_PCD_IRQHandler+0x56c>
        if ((ep_intr & 0x1U) != 0U)
 8002b4a:	07fc      	lsls	r4, r7, #31
 8002b4c:	d5f5      	bpl.n	8002b3a <HAL_PCD_IRQHandler+0x49a>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b4e:	fa5f f48a 	uxtb.w	r4, sl
 8002b52:	4621      	mov	r1, r4
 8002b54:	f002 f928 	bl	8004da8 <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002b58:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b5c:	4681      	mov	r9, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002b5e:	d169      	bne.n	8002c34 <HAL_PCD_IRQHandler+0x594>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002b60:	f019 0f08 	tst.w	r9, #8
 8002b64:	d155      	bne.n	8002c12 <HAL_PCD_IRQHandler+0x572>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002b66:	f019 0f10 	tst.w	r9, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002b6a:	bf1c      	itt	ne
 8002b6c:	2210      	movne	r2, #16
 8002b6e:	f8c8 2008 	strne.w	r2, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002b72:	f019 0f02 	tst.w	r9, #2
 8002b76:	d00f      	beq.n	8002b98 <HAL_PCD_IRQHandler+0x4f8>
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002b78:	6972      	ldr	r2, [r6, #20]
 8002b7a:	0610      	lsls	r0, r2, #24
 8002b7c:	d504      	bpl.n	8002b88 <HAL_PCD_IRQHandler+0x4e8>
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002b7e:	9b03      	ldr	r3, [sp, #12]
 8002b80:	685a      	ldr	r2, [r3, #4]
 8002b82:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002b86:	605a      	str	r2, [r3, #4]
            if (ep->is_iso_incomplete == 1U)
 8002b88:	f89b 2257 	ldrb.w	r2, [fp, #599]	@ 0x257
 8002b8c:	2a01      	cmp	r2, #1
 8002b8e:	f000 80dc 	beq.w	8002d4a <HAL_PCD_IRQHandler+0x6aa>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002b92:	2302      	movs	r3, #2
 8002b94:	f8c8 3008 	str.w	r3, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b98:	f019 0f20 	tst.w	r9, #32
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b9c:	bf1c      	itt	ne
 8002b9e:	2320      	movne	r3, #32
 8002ba0:	f8c8 3008 	strne.w	r3, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002ba4:	f419 5f00 	tst.w	r9, #8192	@ 0x2000
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002ba8:	bf18      	it	ne
 8002baa:	f44f 5300 	movne.w	r3, #8192	@ 0x2000
 8002bae:	6828      	ldr	r0, [r5, #0]
 8002bb0:	bf18      	it	ne
 8002bb2:	f8c8 3008 	strne.w	r3, [r8, #8]
 8002bb6:	e7c0      	b.n	8002b3a <HAL_PCD_IRQHandler+0x49a>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002bb8:	9a03      	ldr	r2, [sp, #12]
 8002bba:	f8d2 3084 	ldr.w	r3, [r2, #132]	@ 0x84
 8002bbe:	f043 030b 	orr.w	r3, r3, #11
 8002bc2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002bc6:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8002bc8:	f043 030b 	orr.w	r3, r3, #11
 8002bcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bce:	e6e1      	b.n	8002994 <HAL_PCD_IRQHandler+0x2f4>
        hpcd->LPM_State = LPM_L0;
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	f884 14cc 	strb.w	r1, [r4, #1228]	@ 0x4cc
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002bd6:	4620      	mov	r0, r4
 8002bd8:	f000 fa7a 	bl	80030d0 <HAL_PCDEx_LPM_Callback>
 8002bdc:	e682      	b.n	80028e4 <HAL_PCD_IRQHandler+0x244>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002bde:	2208      	movs	r2, #8
 8002be0:	f204 419c 	addw	r1, r4, #1180	@ 0x49c
 8002be4:	4630      	mov	r0, r6
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002be6:	eb08 08c8 	add.w	r8, r8, r8, lsl #3
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002bea:	f002 f81b 	bl	8004c24 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bee:	eb04 0288 	add.w	r2, r4, r8, lsl #2
 8002bf2:	f3c7 130a 	ubfx	r3, r7, #4, #11
 8002bf6:	f8d2 1268 	ldr.w	r1, [r2, #616]	@ 0x268
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002bfa:	6820      	ldr	r0, [r4, #0]
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bfc:	440b      	add	r3, r1
 8002bfe:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
 8002c02:	e58a      	b.n	800271a <HAL_PCD_IRQHandler+0x7a>
 8002c04:	4630      	mov	r0, r6
 8002c06:	9d05      	ldr	r5, [sp, #20]
 8002c08:	9e04      	ldr	r6, [sp, #16]
 8002c0a:	e597      	b.n	800273c <HAL_PCD_IRQHandler+0x9c>
 8002c0c:	462c      	mov	r4, r5
 8002c0e:	9d04      	ldr	r5, [sp, #16]
 8002c10:	e58e      	b.n	8002730 <HAL_PCD_IRQHandler+0x90>
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c12:	6829      	ldr	r1, [r5, #0]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002c14:	2208      	movs	r2, #8
 8002c16:	f8c8 2008 	str.w	r2, [r8, #8]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002c1a:	6c08      	ldr	r0, [r1, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002c1c:	f501 6230 	add.w	r2, r1, #2816	@ 0xb00

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c20:	496b      	ldr	r1, [pc, #428]	@ (8002dd0 <HAL_PCD_IRQHandler+0x730>)
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002c22:	eb02 124a 	add.w	r2, r2, sl, lsl #5
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c26:	4288      	cmp	r0, r1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002c28:	6893      	ldr	r3, [r2, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c2a:	d866      	bhi.n	8002cfa <HAL_PCD_IRQHandler+0x65a>

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002c2c:	4628      	mov	r0, r5
 8002c2e:	f003 fe4b 	bl	80068c8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002c32:	e798      	b.n	8002b66 <HAL_PCD_IRQHandler+0x4c6>
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c34:	6828      	ldr	r0, [r5, #0]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002c36:	2201      	movs	r2, #1
 8002c38:	f8c8 2008 	str.w	r2, [r8, #8]
  if (hpcd->Init.dma_enable == 1U)
 8002c3c:	79a9      	ldrb	r1, [r5, #6]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002c3e:	f8d0 e040 	ldr.w	lr, [r0, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002c42:	f500 6230 	add.w	r2, r0, #2816	@ 0xb00
 8002c46:	eb02 124a 	add.w	r2, r2, sl, lsl #5
  if (hpcd->Init.dma_enable == 1U)
 8002c4a:	2901      	cmp	r1, #1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002c4c:	6893      	ldr	r3, [r2, #8]
  if (hpcd->Init.dma_enable == 1U)
 8002c4e:	d066      	beq.n	8002d1e <HAL_PCD_IRQHandler+0x67e>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002c50:	4960      	ldr	r1, [pc, #384]	@ (8002dd4 <HAL_PCD_IRQHandler+0x734>)
 8002c52:	458e      	cmp	lr, r1
 8002c54:	f000 8081 	beq.w	8002d5a <HAL_PCD_IRQHandler+0x6ba>
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002c58:	f1ba 0f00 	cmp.w	sl, #0
 8002c5c:	d104      	bne.n	8002c68 <HAL_PCD_IRQHandler+0x5c8>
 8002c5e:	f8d5 2264 	ldr.w	r2, [r5, #612]	@ 0x264
 8002c62:	2a00      	cmp	r2, #0
 8002c64:	f000 80a7 	beq.w	8002db6 <HAL_PCD_IRQHandler+0x716>
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c68:	4621      	mov	r1, r4
 8002c6a:	4628      	mov	r0, r5
 8002c6c:	f003 fe32 	bl	80068d4 <HAL_PCD_DataOutStageCallback>
 8002c70:	e776      	b.n	8002b60 <HAL_PCD_IRQHandler+0x4c0>
            (void)USB_FlushTxFifo(USBx, epnum);
 8002c72:	9804      	ldr	r0, [sp, #16]
 8002c74:	4651      	mov	r1, sl
 8002c76:	f001 fc89 	bl	800458c <USB_FlushTxFifo>
            if (ep->is_iso_incomplete == 1U)
 8002c7a:	f898 3017 	ldrb.w	r3, [r8, #23]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d072      	beq.n	8002d68 <HAL_PCD_IRQHandler+0x6c8>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002c82:	2302      	movs	r3, #2
 8002c84:	60bb      	str	r3, [r7, #8]
 8002c86:	e6f3      	b.n	8002a70 <HAL_PCD_IRQHandler+0x3d0>
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002c88:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002c8c:	421f      	tst	r7, r3
 8002c8e:	f43f ad44 	beq.w	800271a <HAL_PCD_IRQHandler+0x7a>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002c92:	eb08 08c8 	add.w	r8, r8, r8, lsl #3
 8002c96:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 8002c9a:	f3c7 120a 	ubfx	r2, r7, #4, #11
 8002c9e:	f8d8 1260 	ldr.w	r1, [r8, #608]	@ 0x260
 8002ca2:	4630      	mov	r0, r6
 8002ca4:	4617      	mov	r7, r2
 8002ca6:	f001 ffbd 	bl	8004c24 <USB_ReadPacket>
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002caa:	f8d8 3260 	ldr.w	r3, [r8, #608]	@ 0x260
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002cae:	6820      	ldr	r0, [r4, #0]
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002cb0:	443b      	add	r3, r7
 8002cb2:	f8c8 3260 	str.w	r3, [r8, #608]	@ 0x260
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002cb6:	f8d8 3268 	ldr.w	r3, [r8, #616]	@ 0x268
 8002cba:	443b      	add	r3, r7
 8002cbc:	f8c8 3268 	str.w	r3, [r8, #616]	@ 0x268
 8002cc0:	e52b      	b.n	800271a <HAL_PCD_IRQHandler+0x7a>
        HAL_PCD_SuspendCallback(hpcd);
 8002cc2:	4620      	mov	r0, r4
 8002cc4:	f003 fe32 	bl	800692c <HAL_PCD_SuspendCallback>
 8002cc8:	e5c6      	b.n	8002858 <HAL_PCD_IRQHandler+0x1b8>
        HAL_PCD_DisconnectCallback(hpcd);
 8002cca:	4620      	mov	r0, r4
 8002ccc:	f003 fe56 	bl	800697c <HAL_PCD_DisconnectCallback>
      hpcd->Instance->GOTGINT |= RegVal;
 8002cd0:	6823      	ldr	r3, [r4, #0]
 8002cd2:	e5b6      	b.n	8002842 <HAL_PCD_IRQHandler+0x1a2>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002cd4:	e9d8 2307 	ldrd	r2, r3, [r8, #28]
 8002cd8:	4413      	add	r3, r2
 8002cda:	f8c8 3020 	str.w	r3, [r8, #32]
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002cde:	f1ba 0f00 	cmp.w	sl, #0
 8002ce2:	f47f aeb2 	bne.w	8002a4a <HAL_PCD_IRQHandler+0x3aa>
 8002ce6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	f47f aeae 	bne.w	8002a4a <HAL_PCD_IRQHandler+0x3aa>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002cee:	6820      	ldr	r0, [r4, #0]
 8002cf0:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8002cf4:	f002 f886 	bl	8004e04 <USB_EP0_OutStart>
 8002cf8:	e6a7      	b.n	8002a4a <HAL_PCD_IRQHandler+0x3aa>
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cfa:	041b      	lsls	r3, r3, #16
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002cfc:	bf44      	itt	mi
 8002cfe:	f44f 4100 	movmi.w	r1, #32768	@ 0x8000
 8002d02:	6091      	strmi	r1, [r2, #8]
  HAL_PCD_SetupStageCallback(hpcd);
 8002d04:	4628      	mov	r0, r5
 8002d06:	f003 fddf 	bl	80068c8 <HAL_PCD_SetupStageCallback>
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002d0a:	79a9      	ldrb	r1, [r5, #6]
 8002d0c:	2901      	cmp	r1, #1
 8002d0e:	f47f af2a 	bne.w	8002b66 <HAL_PCD_IRQHandler+0x4c6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d12:	6828      	ldr	r0, [r5, #0]
 8002d14:	f205 429c 	addw	r2, r5, #1180	@ 0x49c
 8002d18:	f002 f874 	bl	8004e04 <USB_EP0_OutStart>
 8002d1c:	e723      	b.n	8002b66 <HAL_PCD_IRQHandler+0x4c6>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002d1e:	0719      	lsls	r1, r3, #28
 8002d20:	d52a      	bpl.n	8002d78 <HAL_PCD_IRQHandler+0x6d8>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d22:	492b      	ldr	r1, [pc, #172]	@ (8002dd0 <HAL_PCD_IRQHandler+0x730>)
 8002d24:	458e      	cmp	lr, r1
 8002d26:	f67f af1b 	bls.w	8002b60 <HAL_PCD_IRQHandler+0x4c0>
 8002d2a:	0418      	lsls	r0, r3, #16
 8002d2c:	f57f af18 	bpl.w	8002b60 <HAL_PCD_IRQHandler+0x4c0>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d30:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002d34:	6091      	str	r1, [r2, #8]
 8002d36:	e713      	b.n	8002b60 <HAL_PCD_IRQHandler+0x4c0>
  if (ep->xfer_len <= ep->xfer_count)
 8002d38:	f8dd a018 	ldr.w	sl, [sp, #24]
 8002d3c:	f8d8 5024 	ldr.w	r5, [r8, #36]	@ 0x24
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002d40:	6826      	ldr	r6, [r4, #0]
  if (ep->xfer_len <= ep->xfer_count)
 8002d42:	42ab      	cmp	r3, r5
 8002d44:	f4ff ae5c 	bcc.w	8002a00 <HAL_PCD_IRQHandler+0x360>
 8002d48:	e6db      	b.n	8002b02 <HAL_PCD_IRQHandler+0x462>
              ep->is_iso_incomplete = 0U;
 8002d4a:	2200      	movs	r2, #0
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d4c:	4621      	mov	r1, r4
              ep->is_iso_incomplete = 0U;
 8002d4e:	f88b 2257 	strb.w	r2, [fp, #599]	@ 0x257
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d52:	4628      	mov	r0, r5
 8002d54:	f003 fe06 	bl	8006964 <HAL_PCD_ISOOUTIncompleteCallback>
 8002d58:	e71b      	b.n	8002b92 <HAL_PCD_IRQHandler+0x4f2>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002d5a:	0418      	lsls	r0, r3, #16
 8002d5c:	d4e8      	bmi.n	8002d30 <HAL_PCD_IRQHandler+0x690>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002d5e:	0699      	lsls	r1, r3, #26
 8002d60:	d582      	bpl.n	8002c68 <HAL_PCD_IRQHandler+0x5c8>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d62:	2120      	movs	r1, #32
 8002d64:	6091      	str	r1, [r2, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d66:	e77f      	b.n	8002c68 <HAL_PCD_IRQHandler+0x5c8>
              ep->is_iso_incomplete = 0U;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	f888 3017 	strb.w	r3, [r8, #23]
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d6e:	4659      	mov	r1, fp
 8002d70:	4620      	mov	r0, r4
 8002d72:	f003 fdfb 	bl	800696c <HAL_PCD_ISOINIncompleteCallback>
 8002d76:	e784      	b.n	8002c82 <HAL_PCD_IRQHandler+0x5e2>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002d78:	0699      	lsls	r1, r3, #26
 8002d7a:	d502      	bpl.n	8002d82 <HAL_PCD_IRQHandler+0x6e2>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d7c:	2120      	movs	r1, #32
 8002d7e:	6091      	str	r1, [r2, #8]
 8002d80:	e6ee      	b.n	8002b60 <HAL_PCD_IRQHandler+0x4c0>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d82:	4913      	ldr	r1, [pc, #76]	@ (8002dd0 <HAL_PCD_IRQHandler+0x730>)
 8002d84:	458e      	cmp	lr, r1
 8002d86:	d901      	bls.n	8002d8c <HAL_PCD_IRQHandler+0x6ec>
 8002d88:	041b      	lsls	r3, r3, #16
 8002d8a:	d4d1      	bmi.n	8002d30 <HAL_PCD_IRQHandler+0x690>
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002d8c:	6911      	ldr	r1, [r2, #16]
 8002d8e:	f8db 2274 	ldr.w	r2, [fp, #628]	@ 0x274
 8002d92:	f3c1 0112 	ubfx	r1, r1, #0, #19
 8002d96:	1a52      	subs	r2, r2, r1
 8002d98:	f8cb 2268 	str.w	r2, [fp, #616]	@ 0x268
        if (epnum == 0U)
 8002d9c:	f1ba 0f00 	cmp.w	sl, #0
 8002da0:	f47f af62 	bne.w	8002c68 <HAL_PCD_IRQHandler+0x5c8>
          if (ep->xfer_len == 0U)
 8002da4:	f8d5 1264 	ldr.w	r1, [r5, #612]	@ 0x264
 8002da8:	b159      	cbz	r1, 8002dc2 <HAL_PCD_IRQHandler+0x722>
            ep->xfer_buff += ep->xfer_count;
 8002daa:	f8d5 1260 	ldr.w	r1, [r5, #608]	@ 0x260
 8002dae:	4411      	add	r1, r2
 8002db0:	f8c5 1260 	str.w	r1, [r5, #608]	@ 0x260
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002db4:	e758      	b.n	8002c68 <HAL_PCD_IRQHandler+0x5c8>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002db6:	f205 429c 	addw	r2, r5, #1180	@ 0x49c
 8002dba:	4651      	mov	r1, sl
 8002dbc:	f002 f822 	bl	8004e04 <USB_EP0_OutStart>
 8002dc0:	e752      	b.n	8002c68 <HAL_PCD_IRQHandler+0x5c8>
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002dc2:	f205 429c 	addw	r2, r5, #1180	@ 0x49c
 8002dc6:	2101      	movs	r1, #1
 8002dc8:	f002 f81c 	bl	8004e04 <USB_EP0_OutStart>
 8002dcc:	e74c      	b.n	8002c68 <HAL_PCD_IRQHandler+0x5c8>
 8002dce:	bf00      	nop
 8002dd0:	4f54300a 	.word	0x4f54300a
 8002dd4:	4f54310a 	.word	0x4f54310a

08002dd8 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8002dd8:	f890 2494 	ldrb.w	r2, [r0, #1172]	@ 0x494
 8002ddc:	2a01      	cmp	r2, #1
 8002dde:	d00d      	beq.n	8002dfc <HAL_PCD_SetAddress+0x24>
{
 8002de0:	b510      	push	{r4, lr}
 8002de2:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8002de4:	2201      	movs	r2, #1
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002de6:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8002de8:	f884 2494 	strb.w	r2, [r4, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002dec:	7461      	strb	r1, [r4, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002dee:	f001 ff97 	bl	8004d20 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002df2:	2300      	movs	r3, #0
 8002df4:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  return HAL_OK;
 8002df8:	4618      	mov	r0, r3
}
 8002dfa:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8002dfc:	2002      	movs	r0, #2
}
 8002dfe:	4770      	bx	lr

08002e00 <HAL_PCD_EP_Open>:
{
 8002e00:	b510      	push	{r4, lr}
 8002e02:	f001 0e0f 	and.w	lr, r1, #15
 8002e06:	eb0e 0cce 	add.w	ip, lr, lr, lsl #3
  if ((ep_addr & 0x80U) == 0x80U)
 8002e0a:	0609      	lsls	r1, r1, #24
{
 8002e0c:	4604      	mov	r4, r0
 8002e0e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
  if ((ep_addr & 0x80U) == 0x80U)
 8002e12:	d427      	bmi.n	8002e64 <HAL_PCD_EP_Open+0x64>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e14:	f50c 7115 	add.w	r1, ip, #596	@ 0x254
 8002e18:	4401      	add	r1, r0
    ep->is_in = 0U;
 8002e1a:	eb0e 00ce 	add.w	r0, lr, lr, lsl #3
 8002e1e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8002e22:	f04f 0c00 	mov.w	ip, #0
 8002e26:	f880 c255 	strb.w	ip, [r0, #597]	@ 0x255
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002e2a:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8002e2e:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 8002e30:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e32:	f881 e000 	strb.w	lr, [r1]
  ep->type = ep_type;
 8002e36:	710b      	strb	r3, [r1, #4]
  if (ep->is_in != 0U)
 8002e38:	b10a      	cbz	r2, 8002e3e <HAL_PCD_EP_Open+0x3e>
    ep->tx_fifo_num = ep->num;
 8002e3a:	f8a1 e01a 	strh.w	lr, [r1, #26]
  if (ep_type == EP_TYPE_BULK)
 8002e3e:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8002e40:	bf04      	itt	eq
 8002e42:	2300      	moveq	r3, #0
 8002e44:	714b      	strbeq	r3, [r1, #5]
  __HAL_LOCK(hpcd);
 8002e46:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d016      	beq.n	8002e7c <HAL_PCD_EP_Open+0x7c>
 8002e4e:	2301      	movs	r3, #1
 8002e50:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002e54:	6820      	ldr	r0, [r4, #0]
 8002e56:	f001 fccd 	bl	80047f4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  return ret;
 8002e60:	4618      	mov	r0, r3
}
 8002e62:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e64:	f10c 0114 	add.w	r1, ip, #20
 8002e68:	4401      	add	r1, r0
    ep->is_in = 1U;
 8002e6a:	eb0e 00ce 	add.w	r0, lr, lr, lsl #3
 8002e6e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8002e72:	f04f 0c01 	mov.w	ip, #1
 8002e76:	f880 c015 	strb.w	ip, [r0, #21]
 8002e7a:	e7d6      	b.n	8002e2a <HAL_PCD_EP_Open+0x2a>
  __HAL_LOCK(hpcd);
 8002e7c:	2002      	movs	r0, #2
}
 8002e7e:	bd10      	pop	{r4, pc}

08002e80 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8002e80:	f001 030f 	and.w	r3, r1, #15
 8002e84:	f001 020f 	and.w	r2, r1, #15
{
 8002e88:	b510      	push	{r4, lr}
 8002e8a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8002e8e:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8002e90:	0609      	lsls	r1, r1, #24
    ep->is_in = 1U;
 8002e92:	eb02 00c2 	add.w	r0, r2, r2, lsl #3
 8002e96:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002e9a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  if ((ep_addr & 0x80U) == 0x80U)
 8002e9e:	d416      	bmi.n	8002ece <HAL_PCD_EP_Close+0x4e>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ea0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002ea4:	18e1      	adds	r1, r4, r3
    ep->is_in = 0U;
 8002ea6:	f04f 0c00 	mov.w	ip, #0
 8002eaa:	f880 c255 	strb.w	ip, [r0, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 8002eae:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8002eb0:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d015      	beq.n	8002ee4 <HAL_PCD_EP_Close+0x64>
 8002eb8:	2301      	movs	r3, #1
 8002eba:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002ebe:	6820      	ldr	r0, [r4, #0]
 8002ec0:	f001 fce0 	bl	8004884 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  return HAL_OK;
 8002eca:	4618      	mov	r0, r3
}
 8002ecc:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ece:	3314      	adds	r3, #20
 8002ed0:	18e1      	adds	r1, r4, r3
    ep->is_in = 1U;
 8002ed2:	f04f 0c01 	mov.w	ip, #1
 8002ed6:	f880 c015 	strb.w	ip, [r0, #21]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002eda:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8002edc:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d1e9      	bne.n	8002eb8 <HAL_PCD_EP_Close+0x38>
 8002ee4:	2002      	movs	r0, #2
}
 8002ee6:	bd10      	pop	{r4, pc}

08002ee8 <HAL_PCD_EP_Receive>:
{
 8002ee8:	b510      	push	{r4, lr}
 8002eea:	f001 0e0f 	and.w	lr, r1, #15
  ep->xfer_buff = pBuf;
 8002eee:	eb0e 0cce 	add.w	ip, lr, lr, lsl #3
 8002ef2:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
{
 8002ef6:	4614      	mov	r4, r2
  ep->xfer_len = len;
 8002ef8:	f8cc 3264 	str.w	r3, [ip, #612]	@ 0x264
  ep->xfer_count = 0U;
 8002efc:	2300      	movs	r3, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8002efe:	f88c e254 	strb.w	lr, [ip, #596]	@ 0x254
  ep->xfer_buff = pBuf;
 8002f02:	f8cc 2260 	str.w	r2, [ip, #608]	@ 0x260
  ep->xfer_count = 0U;
 8002f06:	f8cc 3268 	str.w	r3, [ip, #616]	@ 0x268
  ep->is_in = 0U;
 8002f0a:	f88c 3255 	strb.w	r3, [ip, #597]	@ 0x255
  if (hpcd->Init.dma_enable == 1U)
 8002f0e:	7982      	ldrb	r2, [r0, #6]
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f10:	2124      	movs	r1, #36	@ 0x24
 8002f12:	fb01 010e 	mla	r1, r1, lr, r0
  if (hpcd->Init.dma_enable == 1U)
 8002f16:	2a01      	cmp	r2, #1
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f18:	f501 7115 	add.w	r1, r1, #596	@ 0x254
    ep->dma_addr = (uint32_t)pBuf;
 8002f1c:	bf08      	it	eq
 8002f1e:	f8cc 4270 	streq.w	r4, [ip, #624]	@ 0x270
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f22:	6800      	ldr	r0, [r0, #0]
 8002f24:	f001 fd10 	bl	8004948 <USB_EPStartXfer>
}
 8002f28:	2000      	movs	r0, #0
 8002f2a:	bd10      	pop	{r4, pc}

08002f2c <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002f2c:	f001 010f 	and.w	r1, r1, #15
 8002f30:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8002f34:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 8002f38:	f8d0 0268 	ldr.w	r0, [r0, #616]	@ 0x268
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop

08002f40 <HAL_PCD_EP_Transmit>:
{
 8002f40:	b510      	push	{r4, lr}
 8002f42:	f001 0e0f 	and.w	lr, r1, #15
  ep->xfer_buff = pBuf;
 8002f46:	eb0e 0cce 	add.w	ip, lr, lr, lsl #3
 8002f4a:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
{
 8002f4e:	4614      	mov	r4, r2
  ep->xfer_len = len;
 8002f50:	f8cc 3024 	str.w	r3, [ip, #36]	@ 0x24
  ep->xfer_count = 0U;
 8002f54:	2300      	movs	r3, #0
 8002f56:	f8cc 3028 	str.w	r3, [ip, #40]	@ 0x28
  ep->is_in = 1U;
 8002f5a:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f5c:	f88c e014 	strb.w	lr, [ip, #20]
  ep->xfer_buff = pBuf;
 8002f60:	f8cc 2020 	str.w	r2, [ip, #32]
  ep->is_in = 1U;
 8002f64:	f88c 3015 	strb.w	r3, [ip, #21]
  if (hpcd->Init.dma_enable == 1U)
 8002f68:	7982      	ldrb	r2, [r0, #6]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f6a:	2124      	movs	r1, #36	@ 0x24
 8002f6c:	fb01 010e 	mla	r1, r1, lr, r0
  if (hpcd->Init.dma_enable == 1U)
 8002f70:	429a      	cmp	r2, r3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f72:	f101 0114 	add.w	r1, r1, #20
    ep->dma_addr = (uint32_t)pBuf;
 8002f76:	bf08      	it	eq
 8002f78:	f8cc 4030 	streq.w	r4, [ip, #48]	@ 0x30
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f7c:	6800      	ldr	r0, [r0, #0]
 8002f7e:	f001 fce3 	bl	8004948 <USB_EPStartXfer>
}
 8002f82:	2000      	movs	r0, #0
 8002f84:	bd10      	pop	{r4, pc}
 8002f86:	bf00      	nop

08002f88 <HAL_PCD_EP_SetStall>:
{
 8002f88:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f8a:	7903      	ldrb	r3, [r0, #4]
 8002f8c:	f001 050f 	and.w	r5, r1, #15
 8002f90:	42ab      	cmp	r3, r5
 8002f92:	d332      	bcc.n	8002ffa <HAL_PCD_EP_SetStall+0x72>
  if ((0x80U & ep_addr) == 0x80U)
 8002f94:	060b      	lsls	r3, r1, #24
 8002f96:	4604      	mov	r4, r0
 8002f98:	d41c      	bmi.n	8002fd4 <HAL_PCD_EP_SetStall+0x4c>
    ep->is_in = 0U;
 8002f9a:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 8002f9e:	2224      	movs	r2, #36	@ 0x24
 8002fa0:	fb02 0101 	mla	r1, r2, r1, r0
    ep->is_in = 0U;
 8002fa4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->OUT_ep[ep_addr];
 8002fa8:	f501 7115 	add.w	r1, r1, #596	@ 0x254
    ep->is_in = 0U;
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 2255 	strb.w	r2, [r3, #597]	@ 0x255
  ep->is_stall = 1U;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fb6:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8002fb8:	f894 2494 	ldrb.w	r2, [r4, #1172]	@ 0x494
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d01a      	beq.n	8002ff6 <HAL_PCD_EP_SetStall+0x6e>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002fc0:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8002fc2:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002fc6:	f001 fe51 	bl	8004c6c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002fca:	b1c5      	cbz	r5, 8002ffe <HAL_PCD_EP_SetStall+0x76>
  __HAL_UNLOCK(hpcd);
 8002fcc:	2000      	movs	r0, #0
 8002fce:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8002fd2:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 8002fd4:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fd8:	2124      	movs	r1, #36	@ 0x24
 8002fda:	fb01 0105 	mla	r1, r1, r5, r0
    ep->is_in = 1U;
 8002fde:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8002fe2:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fe4:	3114      	adds	r1, #20
    ep->is_in = 1U;
 8002fe6:	755a      	strb	r2, [r3, #21]
  ep->is_stall = 1U;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fec:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8002fee:	f894 2494 	ldrb.w	r2, [r4, #1172]	@ 0x494
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d1e4      	bne.n	8002fc0 <HAL_PCD_EP_SetStall+0x38>
 8002ff6:	2002      	movs	r0, #2
}
 8002ff8:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002ffa:	2001      	movs	r0, #1
}
 8002ffc:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002ffe:	79a1      	ldrb	r1, [r4, #6]
 8003000:	6820      	ldr	r0, [r4, #0]
 8003002:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8003006:	f001 fefd 	bl	8004e04 <USB_EP0_OutStart>
 800300a:	e7df      	b.n	8002fcc <HAL_PCD_EP_SetStall+0x44>

0800300c <HAL_PCD_EP_ClrStall>:
{
 800300c:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800300e:	7903      	ldrb	r3, [r0, #4]
 8003010:	f001 020f 	and.w	r2, r1, #15
 8003014:	4293      	cmp	r3, r2
 8003016:	d32e      	bcc.n	8003076 <HAL_PCD_EP_ClrStall+0x6a>
  if ((0x80U & ep_addr) == 0x80U)
 8003018:	4604      	mov	r4, r0
 800301a:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
    ep->is_in = 1U;
 800301e:	eb02 00c2 	add.w	r0, r2, r2, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 8003022:	0609      	lsls	r1, r1, #24
 8003024:	ea4f 0383 	mov.w	r3, r3, lsl #2
    ep->is_in = 1U;
 8003028:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  if ((0x80U & ep_addr) == 0x80U)
 800302c:	d416      	bmi.n	800305c <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800302e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003032:	18e1      	adds	r1, r4, r3
    ep->is_in = 0U;
 8003034:	2500      	movs	r5, #0
 8003036:	f880 5255 	strb.w	r5, [r0, #597]	@ 0x255
  ep->is_stall = 0U;
 800303a:	2500      	movs	r5, #0
 800303c:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800303e:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8003040:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8003044:	2b01      	cmp	r3, #1
 8003046:	d014      	beq.n	8003072 <HAL_PCD_EP_ClrStall+0x66>
 8003048:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800304a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800304c:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003050:	f001 fe3a 	bl	8004cc8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003054:	f884 5494 	strb.w	r5, [r4, #1172]	@ 0x494
  return HAL_OK;
 8003058:	4628      	mov	r0, r5
}
 800305a:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800305c:	3314      	adds	r3, #20
 800305e:	18e1      	adds	r1, r4, r3
    ep->is_in = 1U;
 8003060:	2501      	movs	r5, #1
 8003062:	7545      	strb	r5, [r0, #21]
  ep->is_stall = 0U;
 8003064:	2500      	movs	r5, #0
 8003066:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003068:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 800306a:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 800306e:	2b01      	cmp	r3, #1
 8003070:	d1ea      	bne.n	8003048 <HAL_PCD_EP_ClrStall+0x3c>
 8003072:	2002      	movs	r0, #2
}
 8003074:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003076:	2001      	movs	r0, #1
}
 8003078:	bd38      	pop	{r3, r4, r5, pc}
 800307a:	bf00      	nop

0800307c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800307c:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800307e:	6804      	ldr	r4, [r0, #0]

  if (fifo == 0U)
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003080:	0412      	lsls	r2, r2, #16
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003082:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  if (fifo == 0U)
 8003084:	b929      	cbnz	r1, 8003092 <HAL_PCDEx_SetTxFiFo+0x16>
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003086:	431a      	orrs	r2, r3
 8003088:	62a2      	str	r2, [r4, #40]	@ 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 800308a:	2000      	movs	r0, #0
 800308c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003090:	4770      	bx	lr
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003092:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 8003094:	3901      	subs	r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003096:	eb03 4c10 	add.w	ip, r3, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800309a:	d00a      	beq.n	80030b2 <HAL_PCDEx_SetTxFiFo+0x36>
 800309c:	2300      	movs	r3, #0
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800309e:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 80030a2:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    for (i = 0U; i < (fifo - 1U); i++)
 80030a6:	3301      	adds	r3, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80030a8:	6840      	ldr	r0, [r0, #4]
    for (i = 0U; i < (fifo - 1U); i++)
 80030aa:	4299      	cmp	r1, r3
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80030ac:	eb0c 4c10 	add.w	ip, ip, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80030b0:	d1f5      	bne.n	800309e <HAL_PCDEx_SetTxFiFo+0x22>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80030b2:	3140      	adds	r1, #64	@ 0x40
 80030b4:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80030b8:	ea42 020c 	orr.w	r2, r2, ip
 80030bc:	6062      	str	r2, [r4, #4]
}
 80030be:	2000      	movs	r0, #0
 80030c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop

080030c8 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 80030c8:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 80030ca:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 80030cc:	6259      	str	r1, [r3, #36]	@ 0x24
}
 80030ce:	4770      	bx	lr

080030d0 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop

080030d4 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030d4:	2800      	cmp	r0, #0
 80030d6:	f000 81d8 	beq.w	800348a <HAL_RCC_OscConfig+0x3b6>
{
 80030da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030de:	6803      	ldr	r3, [r0, #0]
 80030e0:	07dd      	lsls	r5, r3, #31
{
 80030e2:	b082      	sub	sp, #8
 80030e4:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030e6:	d52f      	bpl.n	8003148 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80030e8:	499d      	ldr	r1, [pc, #628]	@ (8003360 <HAL_RCC_OscConfig+0x28c>)
 80030ea:	688a      	ldr	r2, [r1, #8]
 80030ec:	f002 020c 	and.w	r2, r2, #12
 80030f0:	2a04      	cmp	r2, #4
 80030f2:	f000 80ec 	beq.w	80032ce <HAL_RCC_OscConfig+0x1fa>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030f6:	688a      	ldr	r2, [r1, #8]
 80030f8:	f002 020c 	and.w	r2, r2, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80030fc:	2a08      	cmp	r2, #8
 80030fe:	f000 80e2 	beq.w	80032c6 <HAL_RCC_OscConfig+0x1f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003102:	6863      	ldr	r3, [r4, #4]
 8003104:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003108:	f000 80eb 	beq.w	80032e2 <HAL_RCC_OscConfig+0x20e>
 800310c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003110:	f000 8173 	beq.w	80033fa <HAL_RCC_OscConfig+0x326>
 8003114:	4d92      	ldr	r5, [pc, #584]	@ (8003360 <HAL_RCC_OscConfig+0x28c>)
 8003116:	682a      	ldr	r2, [r5, #0]
 8003118:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800311c:	602a      	str	r2, [r5, #0]
 800311e:	682a      	ldr	r2, [r5, #0]
 8003120:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003124:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003126:	2b00      	cmp	r3, #0
 8003128:	f040 80e0 	bne.w	80032ec <HAL_RCC_OscConfig+0x218>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800312c:	f7fe f912 	bl	8001354 <HAL_GetTick>
 8003130:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003132:	e005      	b.n	8003140 <HAL_RCC_OscConfig+0x6c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003134:	f7fe f90e 	bl	8001354 <HAL_GetTick>
 8003138:	1b80      	subs	r0, r0, r6
 800313a:	2864      	cmp	r0, #100	@ 0x64
 800313c:	f200 8100 	bhi.w	8003340 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003140:	682b      	ldr	r3, [r5, #0]
 8003142:	039f      	lsls	r7, r3, #14
 8003144:	d4f6      	bmi.n	8003134 <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003146:	6823      	ldr	r3, [r4, #0]
 8003148:	079d      	lsls	r5, r3, #30
 800314a:	d528      	bpl.n	800319e <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800314c:	4a84      	ldr	r2, [pc, #528]	@ (8003360 <HAL_RCC_OscConfig+0x28c>)
 800314e:	6891      	ldr	r1, [r2, #8]
 8003150:	f011 0f0c 	tst.w	r1, #12
 8003154:	f000 809b 	beq.w	800328e <HAL_RCC_OscConfig+0x1ba>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003158:	6891      	ldr	r1, [r2, #8]
 800315a:	f001 010c 	and.w	r1, r1, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800315e:	2908      	cmp	r1, #8
 8003160:	f000 8091 	beq.w	8003286 <HAL_RCC_OscConfig+0x1b2>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003164:	68e3      	ldr	r3, [r4, #12]
 8003166:	2b00      	cmp	r3, #0
 8003168:	f000 810c 	beq.w	8003384 <HAL_RCC_OscConfig+0x2b0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800316c:	4b7d      	ldr	r3, [pc, #500]	@ (8003364 <HAL_RCC_OscConfig+0x290>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800316e:	4e7c      	ldr	r6, [pc, #496]	@ (8003360 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 8003170:	2201      	movs	r2, #1
 8003172:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003174:	f7fe f8ee 	bl	8001354 <HAL_GetTick>
 8003178:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800317a:	e005      	b.n	8003188 <HAL_RCC_OscConfig+0xb4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800317c:	f7fe f8ea 	bl	8001354 <HAL_GetTick>
 8003180:	1b40      	subs	r0, r0, r5
 8003182:	2802      	cmp	r0, #2
 8003184:	f200 80dc 	bhi.w	8003340 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003188:	6833      	ldr	r3, [r6, #0]
 800318a:	079f      	lsls	r7, r3, #30
 800318c:	d5f6      	bpl.n	800317c <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800318e:	6833      	ldr	r3, [r6, #0]
 8003190:	6922      	ldr	r2, [r4, #16]
 8003192:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003196:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800319a:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800319c:	6823      	ldr	r3, [r4, #0]
 800319e:	071a      	lsls	r2, r3, #28
 80031a0:	d45c      	bmi.n	800325c <HAL_RCC_OscConfig+0x188>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031a2:	075d      	lsls	r5, r3, #29
 80031a4:	d53a      	bpl.n	800321c <HAL_RCC_OscConfig+0x148>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031a6:	4a6e      	ldr	r2, [pc, #440]	@ (8003360 <HAL_RCC_OscConfig+0x28c>)
 80031a8:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80031aa:	f013 5380 	ands.w	r3, r3, #268435456	@ 0x10000000
 80031ae:	f040 8088 	bne.w	80032c2 <HAL_RCC_OscConfig+0x1ee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031b2:	9301      	str	r3, [sp, #4]
 80031b4:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80031b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80031bc:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80031be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031c2:	9301      	str	r3, [sp, #4]
 80031c4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80031c6:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c8:	4e67      	ldr	r6, [pc, #412]	@ (8003368 <HAL_RCC_OscConfig+0x294>)
 80031ca:	6833      	ldr	r3, [r6, #0]
 80031cc:	05d8      	lsls	r0, r3, #23
 80031ce:	f140 80a7 	bpl.w	8003320 <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031d2:	68a3      	ldr	r3, [r4, #8]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	f000 80b7 	beq.w	8003348 <HAL_RCC_OscConfig+0x274>
 80031da:	2b05      	cmp	r3, #5
 80031dc:	f000 811d 	beq.w	800341a <HAL_RCC_OscConfig+0x346>
 80031e0:	4e5f      	ldr	r6, [pc, #380]	@ (8003360 <HAL_RCC_OscConfig+0x28c>)
 80031e2:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 80031e4:	f022 0201 	bic.w	r2, r2, #1
 80031e8:	6732      	str	r2, [r6, #112]	@ 0x70
 80031ea:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 80031ec:	f022 0204 	bic.w	r2, r2, #4
 80031f0:	6732      	str	r2, [r6, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	f040 80ad 	bne.w	8003352 <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031f8:	f7fe f8ac 	bl	8001354 <HAL_GetTick>

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031fc:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8003200:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003202:	e005      	b.n	8003210 <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003204:	f7fe f8a6 	bl	8001354 <HAL_GetTick>
 8003208:	1bc0      	subs	r0, r0, r7
 800320a:	4540      	cmp	r0, r8
 800320c:	f200 8098 	bhi.w	8003340 <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003210:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8003212:	079b      	lsls	r3, r3, #30
 8003214:	d4f6      	bmi.n	8003204 <HAL_RCC_OscConfig+0x130>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003216:	2d00      	cmp	r5, #0
 8003218:	f040 80f9 	bne.w	800340e <HAL_RCC_OscConfig+0x33a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800321c:	69a3      	ldr	r3, [r4, #24]
 800321e:	b1cb      	cbz	r3, 8003254 <HAL_RCC_OscConfig+0x180>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003220:	4d4f      	ldr	r5, [pc, #316]	@ (8003360 <HAL_RCC_OscConfig+0x28c>)
 8003222:	68aa      	ldr	r2, [r5, #8]
 8003224:	f002 020c 	and.w	r2, r2, #12
 8003228:	2a08      	cmp	r2, #8
 800322a:	f000 80bc 	beq.w	80033a6 <HAL_RCC_OscConfig+0x2d2>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800322e:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003230:	4b4c      	ldr	r3, [pc, #304]	@ (8003364 <HAL_RCC_OscConfig+0x290>)
 8003232:	f04f 0200 	mov.w	r2, #0
 8003236:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003238:	f000 80f9 	beq.w	800342e <HAL_RCC_OscConfig+0x35a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800323c:	f7fe f88a 	bl	8001354 <HAL_GetTick>
 8003240:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003242:	e004      	b.n	800324e <HAL_RCC_OscConfig+0x17a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003244:	f7fe f886 	bl	8001354 <HAL_GetTick>
 8003248:	1b00      	subs	r0, r0, r4
 800324a:	2802      	cmp	r0, #2
 800324c:	d878      	bhi.n	8003340 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800324e:	682b      	ldr	r3, [r5, #0]
 8003250:	019b      	lsls	r3, r3, #6
 8003252:	d4f7      	bmi.n	8003244 <HAL_RCC_OscConfig+0x170>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8003254:	2000      	movs	r0, #0
}
 8003256:	b002      	add	sp, #8
 8003258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800325c:	6963      	ldr	r3, [r4, #20]
 800325e:	b1fb      	cbz	r3, 80032a0 <HAL_RCC_OscConfig+0x1cc>
      __HAL_RCC_LSI_ENABLE();
 8003260:	4b40      	ldr	r3, [pc, #256]	@ (8003364 <HAL_RCC_OscConfig+0x290>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003262:	4e3f      	ldr	r6, [pc, #252]	@ (8003360 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_LSI_ENABLE();
 8003264:	2201      	movs	r2, #1
 8003266:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 800326a:	f7fe f873 	bl	8001354 <HAL_GetTick>
 800326e:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003270:	e004      	b.n	800327c <HAL_RCC_OscConfig+0x1a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003272:	f7fe f86f 	bl	8001354 <HAL_GetTick>
 8003276:	1b40      	subs	r0, r0, r5
 8003278:	2802      	cmp	r0, #2
 800327a:	d861      	bhi.n	8003340 <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800327c:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 800327e:	079b      	lsls	r3, r3, #30
 8003280:	d5f7      	bpl.n	8003272 <HAL_RCC_OscConfig+0x19e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003282:	6823      	ldr	r3, [r4, #0]
 8003284:	e78d      	b.n	80031a2 <HAL_RCC_OscConfig+0xce>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003286:	6852      	ldr	r2, [r2, #4]
 8003288:	0251      	lsls	r1, r2, #9
 800328a:	f53f af6b 	bmi.w	8003164 <HAL_RCC_OscConfig+0x90>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800328e:	4a34      	ldr	r2, [pc, #208]	@ (8003360 <HAL_RCC_OscConfig+0x28c>)
 8003290:	6812      	ldr	r2, [r2, #0]
 8003292:	0792      	lsls	r2, r2, #30
 8003294:	d538      	bpl.n	8003308 <HAL_RCC_OscConfig+0x234>
 8003296:	68e2      	ldr	r2, [r4, #12]
 8003298:	2a01      	cmp	r2, #1
 800329a:	d035      	beq.n	8003308 <HAL_RCC_OscConfig+0x234>
    return HAL_ERROR;
 800329c:	2001      	movs	r0, #1
 800329e:	e7da      	b.n	8003256 <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_LSI_DISABLE();
 80032a0:	4a30      	ldr	r2, [pc, #192]	@ (8003364 <HAL_RCC_OscConfig+0x290>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032a2:	4e2f      	ldr	r6, [pc, #188]	@ (8003360 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_LSI_DISABLE();
 80032a4:	f8c2 3e80 	str.w	r3, [r2, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 80032a8:	f7fe f854 	bl	8001354 <HAL_GetTick>
 80032ac:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032ae:	e004      	b.n	80032ba <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032b0:	f7fe f850 	bl	8001354 <HAL_GetTick>
 80032b4:	1b40      	subs	r0, r0, r5
 80032b6:	2802      	cmp	r0, #2
 80032b8:	d842      	bhi.n	8003340 <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032ba:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 80032bc:	079f      	lsls	r7, r3, #30
 80032be:	d4f7      	bmi.n	80032b0 <HAL_RCC_OscConfig+0x1dc>
 80032c0:	e7df      	b.n	8003282 <HAL_RCC_OscConfig+0x1ae>
    FlagStatus       pwrclkchanged = RESET;
 80032c2:	2500      	movs	r5, #0
 80032c4:	e780      	b.n	80031c8 <HAL_RCC_OscConfig+0xf4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032c6:	684a      	ldr	r2, [r1, #4]
 80032c8:	0251      	lsls	r1, r2, #9
 80032ca:	f57f af1a 	bpl.w	8003102 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032ce:	4a24      	ldr	r2, [pc, #144]	@ (8003360 <HAL_RCC_OscConfig+0x28c>)
 80032d0:	6812      	ldr	r2, [r2, #0]
 80032d2:	0392      	lsls	r2, r2, #14
 80032d4:	f57f af38 	bpl.w	8003148 <HAL_RCC_OscConfig+0x74>
 80032d8:	6862      	ldr	r2, [r4, #4]
 80032da:	2a00      	cmp	r2, #0
 80032dc:	f47f af34 	bne.w	8003148 <HAL_RCC_OscConfig+0x74>
 80032e0:	e7dc      	b.n	800329c <HAL_RCC_OscConfig+0x1c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032e2:	4a1f      	ldr	r2, [pc, #124]	@ (8003360 <HAL_RCC_OscConfig+0x28c>)
 80032e4:	6813      	ldr	r3, [r2, #0]
 80032e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032ea:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80032ec:	f7fe f832 	bl	8001354 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032f0:	4e1b      	ldr	r6, [pc, #108]	@ (8003360 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 80032f2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032f4:	e004      	b.n	8003300 <HAL_RCC_OscConfig+0x22c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032f6:	f7fe f82d 	bl	8001354 <HAL_GetTick>
 80032fa:	1b40      	subs	r0, r0, r5
 80032fc:	2864      	cmp	r0, #100	@ 0x64
 80032fe:	d81f      	bhi.n	8003340 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003300:	6833      	ldr	r3, [r6, #0]
 8003302:	039b      	lsls	r3, r3, #14
 8003304:	d5f7      	bpl.n	80032f6 <HAL_RCC_OscConfig+0x222>
 8003306:	e71e      	b.n	8003146 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003308:	4915      	ldr	r1, [pc, #84]	@ (8003360 <HAL_RCC_OscConfig+0x28c>)
 800330a:	6920      	ldr	r0, [r4, #16]
 800330c:	680a      	ldr	r2, [r1, #0]
 800330e:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 8003312:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8003316:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003318:	071a      	lsls	r2, r3, #28
 800331a:	f57f af42 	bpl.w	80031a2 <HAL_RCC_OscConfig+0xce>
 800331e:	e79d      	b.n	800325c <HAL_RCC_OscConfig+0x188>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003320:	6833      	ldr	r3, [r6, #0]
 8003322:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003326:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003328:	f7fe f814 	bl	8001354 <HAL_GetTick>
 800332c:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800332e:	6833      	ldr	r3, [r6, #0]
 8003330:	05d9      	lsls	r1, r3, #23
 8003332:	f53f af4e 	bmi.w	80031d2 <HAL_RCC_OscConfig+0xfe>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003336:	f7fe f80d 	bl	8001354 <HAL_GetTick>
 800333a:	1bc0      	subs	r0, r0, r7
 800333c:	2802      	cmp	r0, #2
 800333e:	d9f6      	bls.n	800332e <HAL_RCC_OscConfig+0x25a>
            return HAL_TIMEOUT;
 8003340:	2003      	movs	r0, #3
}
 8003342:	b002      	add	sp, #8
 8003344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003348:	4a05      	ldr	r2, [pc, #20]	@ (8003360 <HAL_RCC_OscConfig+0x28c>)
 800334a:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 800334c:	f043 0301 	orr.w	r3, r3, #1
 8003350:	6713      	str	r3, [r2, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8003352:	f7fd ffff 	bl	8001354 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003356:	4f02      	ldr	r7, [pc, #8]	@ (8003360 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8003358:	4606      	mov	r6, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800335a:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800335e:	e00a      	b.n	8003376 <HAL_RCC_OscConfig+0x2a2>
 8003360:	40023800 	.word	0x40023800
 8003364:	42470000 	.word	0x42470000
 8003368:	40007000 	.word	0x40007000
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800336c:	f7fd fff2 	bl	8001354 <HAL_GetTick>
 8003370:	1b80      	subs	r0, r0, r6
 8003372:	4540      	cmp	r0, r8
 8003374:	d8e4      	bhi.n	8003340 <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003376:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003378:	079a      	lsls	r2, r3, #30
 800337a:	d5f7      	bpl.n	800336c <HAL_RCC_OscConfig+0x298>
    if (pwrclkchanged == SET)
 800337c:	2d00      	cmp	r5, #0
 800337e:	f43f af4d 	beq.w	800321c <HAL_RCC_OscConfig+0x148>
 8003382:	e044      	b.n	800340e <HAL_RCC_OscConfig+0x33a>
        __HAL_RCC_HSI_DISABLE();
 8003384:	4a42      	ldr	r2, [pc, #264]	@ (8003490 <HAL_RCC_OscConfig+0x3bc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003386:	4e43      	ldr	r6, [pc, #268]	@ (8003494 <HAL_RCC_OscConfig+0x3c0>)
        __HAL_RCC_HSI_DISABLE();
 8003388:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800338a:	f7fd ffe3 	bl	8001354 <HAL_GetTick>
 800338e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003390:	e004      	b.n	800339c <HAL_RCC_OscConfig+0x2c8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003392:	f7fd ffdf 	bl	8001354 <HAL_GetTick>
 8003396:	1b40      	subs	r0, r0, r5
 8003398:	2802      	cmp	r0, #2
 800339a:	d8d1      	bhi.n	8003340 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800339c:	6833      	ldr	r3, [r6, #0]
 800339e:	0799      	lsls	r1, r3, #30
 80033a0:	d4f7      	bmi.n	8003392 <HAL_RCC_OscConfig+0x2be>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033a2:	6823      	ldr	r3, [r4, #0]
 80033a4:	e6fb      	b.n	800319e <HAL_RCC_OscConfig+0xca>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	f43f af78 	beq.w	800329c <HAL_RCC_OscConfig+0x1c8>
        pll_config = RCC->PLLCFGR;
 80033ac:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033ae:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033b0:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033b4:	4291      	cmp	r1, r2
 80033b6:	f47f af71 	bne.w	800329c <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ba:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033bc:	f003 013f 	and.w	r1, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033c0:	4291      	cmp	r1, r2
 80033c2:	f47f af6b 	bne.w	800329c <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033c6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80033c8:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 80033cc:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033ce:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80033d2:	f47f af63 	bne.w	800329c <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033d6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80033d8:	0852      	lsrs	r2, r2, #1
 80033da:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 80033de:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033e0:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80033e4:	f47f af5a 	bne.w	800329c <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033e8:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80033ea:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033ee:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80033f2:	bf14      	ite	ne
 80033f4:	2001      	movne	r0, #1
 80033f6:	2000      	moveq	r0, #0
 80033f8:	e72d      	b.n	8003256 <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033fa:	4b26      	ldr	r3, [pc, #152]	@ (8003494 <HAL_RCC_OscConfig+0x3c0>)
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003402:	601a      	str	r2, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800340a:	601a      	str	r2, [r3, #0]
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800340c:	e76e      	b.n	80032ec <HAL_RCC_OscConfig+0x218>
      __HAL_RCC_PWR_CLK_DISABLE();
 800340e:	4a21      	ldr	r2, [pc, #132]	@ (8003494 <HAL_RCC_OscConfig+0x3c0>)
 8003410:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8003412:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003416:	6413      	str	r3, [r2, #64]	@ 0x40
 8003418:	e700      	b.n	800321c <HAL_RCC_OscConfig+0x148>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800341a:	4b1e      	ldr	r3, [pc, #120]	@ (8003494 <HAL_RCC_OscConfig+0x3c0>)
 800341c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800341e:	f042 0204 	orr.w	r2, r2, #4
 8003422:	671a      	str	r2, [r3, #112]	@ 0x70
 8003424:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003426:	f042 0201 	orr.w	r2, r2, #1
 800342a:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800342c:	e791      	b.n	8003352 <HAL_RCC_OscConfig+0x27e>
        tickstart = HAL_GetTick();
 800342e:	f7fd ff91 	bl	8001354 <HAL_GetTick>
 8003432:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003434:	e005      	b.n	8003442 <HAL_RCC_OscConfig+0x36e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003436:	f7fd ff8d 	bl	8001354 <HAL_GetTick>
 800343a:	1b80      	subs	r0, r0, r6
 800343c:	2802      	cmp	r0, #2
 800343e:	f63f af7f 	bhi.w	8003340 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003442:	682b      	ldr	r3, [r5, #0]
 8003444:	0199      	lsls	r1, r3, #6
 8003446:	d4f6      	bmi.n	8003436 <HAL_RCC_OscConfig+0x362>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003448:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 800344c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800344e:	430b      	orrs	r3, r1
 8003450:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003454:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	@ 0x28
 8003458:	0852      	lsrs	r2, r2, #1
        __HAL_RCC_PLL_ENABLE();
 800345a:	490d      	ldr	r1, [pc, #52]	@ (8003490 <HAL_RCC_OscConfig+0x3bc>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800345c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8003460:	3a01      	subs	r2, #1
 8003462:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8003466:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003468:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800346a:	660a      	str	r2, [r1, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800346c:	f7fd ff72 	bl	8001354 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003470:	4d08      	ldr	r5, [pc, #32]	@ (8003494 <HAL_RCC_OscConfig+0x3c0>)
        tickstart = HAL_GetTick();
 8003472:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003474:	e005      	b.n	8003482 <HAL_RCC_OscConfig+0x3ae>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003476:	f7fd ff6d 	bl	8001354 <HAL_GetTick>
 800347a:	1b00      	subs	r0, r0, r4
 800347c:	2802      	cmp	r0, #2
 800347e:	f63f af5f 	bhi.w	8003340 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003482:	682b      	ldr	r3, [r5, #0]
 8003484:	019a      	lsls	r2, r3, #6
 8003486:	d5f6      	bpl.n	8003476 <HAL_RCC_OscConfig+0x3a2>
 8003488:	e6e4      	b.n	8003254 <HAL_RCC_OscConfig+0x180>
    return HAL_ERROR;
 800348a:	2001      	movs	r0, #1
}
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	42470000 	.word	0x42470000
 8003494:	40023800 	.word	0x40023800

08003498 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003498:	4916      	ldr	r1, [pc, #88]	@ (80034f4 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 800349a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800349c:	688b      	ldr	r3, [r1, #8]
 800349e:	f003 030c 	and.w	r3, r3, #12
 80034a2:	2b04      	cmp	r3, #4
 80034a4:	d01b      	beq.n	80034de <HAL_RCC_GetSysClockFreq+0x46>
 80034a6:	2b08      	cmp	r3, #8
 80034a8:	d001      	beq.n	80034ae <HAL_RCC_GetSysClockFreq+0x16>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034aa:	4813      	ldr	r0, [pc, #76]	@ (80034f8 <HAL_RCC_GetSysClockFreq+0x60>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80034ac:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034ae:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034b0:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034b2:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034b4:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034b8:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034bc:	d111      	bne.n	80034e2 <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034be:	480e      	ldr	r0, [pc, #56]	@ (80034f8 <HAL_RCC_GetSysClockFreq+0x60>)
 80034c0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80034c4:	fba1 0100 	umull	r0, r1, r1, r0
 80034c8:	f7fc feda 	bl	8000280 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80034cc:	4b09      	ldr	r3, [pc, #36]	@ (80034f4 <HAL_RCC_GetSysClockFreq+0x5c>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80034d4:	3301      	adds	r3, #1
 80034d6:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 80034d8:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80034dc:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034de:	4807      	ldr	r0, [pc, #28]	@ (80034fc <HAL_RCC_GetSysClockFreq+0x64>)
}
 80034e0:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034e2:	4806      	ldr	r0, [pc, #24]	@ (80034fc <HAL_RCC_GetSysClockFreq+0x64>)
 80034e4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80034e8:	2300      	movs	r3, #0
 80034ea:	fba1 0100 	umull	r0, r1, r1, r0
 80034ee:	f7fc fec7 	bl	8000280 <__aeabi_uldivmod>
 80034f2:	e7eb      	b.n	80034cc <HAL_RCC_GetSysClockFreq+0x34>
 80034f4:	40023800 	.word	0x40023800
 80034f8:	00f42400 	.word	0x00f42400
 80034fc:	007a1200 	.word	0x007a1200

08003500 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003500:	2800      	cmp	r0, #0
 8003502:	f000 8087 	beq.w	8003614 <HAL_RCC_ClockConfig+0x114>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003506:	4a48      	ldr	r2, [pc, #288]	@ (8003628 <HAL_RCC_ClockConfig+0x128>)
 8003508:	6813      	ldr	r3, [r2, #0]
 800350a:	f003 0307 	and.w	r3, r3, #7
 800350e:	428b      	cmp	r3, r1
{
 8003510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003514:	460d      	mov	r5, r1
 8003516:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003518:	d209      	bcs.n	800352e <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800351a:	b2cb      	uxtb	r3, r1
 800351c:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800351e:	6813      	ldr	r3, [r2, #0]
 8003520:	f003 0307 	and.w	r3, r3, #7
 8003524:	428b      	cmp	r3, r1
 8003526:	d002      	beq.n	800352e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8003528:	2001      	movs	r0, #1
}
 800352a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800352e:	6823      	ldr	r3, [r4, #0]
 8003530:	0798      	lsls	r0, r3, #30
 8003532:	d514      	bpl.n	800355e <HAL_RCC_ClockConfig+0x5e>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003534:	0759      	lsls	r1, r3, #29
 8003536:	d504      	bpl.n	8003542 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003538:	493c      	ldr	r1, [pc, #240]	@ (800362c <HAL_RCC_ClockConfig+0x12c>)
 800353a:	688a      	ldr	r2, [r1, #8]
 800353c:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 8003540:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003542:	071a      	lsls	r2, r3, #28
 8003544:	d504      	bpl.n	8003550 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003546:	4939      	ldr	r1, [pc, #228]	@ (800362c <HAL_RCC_ClockConfig+0x12c>)
 8003548:	688a      	ldr	r2, [r1, #8]
 800354a:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 800354e:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003550:	4936      	ldr	r1, [pc, #216]	@ (800362c <HAL_RCC_ClockConfig+0x12c>)
 8003552:	68a0      	ldr	r0, [r4, #8]
 8003554:	688a      	ldr	r2, [r1, #8]
 8003556:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800355a:	4302      	orrs	r2, r0
 800355c:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800355e:	07df      	lsls	r7, r3, #31
 8003560:	d521      	bpl.n	80035a6 <HAL_RCC_ClockConfig+0xa6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003562:	6862      	ldr	r2, [r4, #4]
 8003564:	2a01      	cmp	r2, #1
 8003566:	d057      	beq.n	8003618 <HAL_RCC_ClockConfig+0x118>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003568:	1e93      	subs	r3, r2, #2
 800356a:	2b01      	cmp	r3, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800356c:	4b2f      	ldr	r3, [pc, #188]	@ (800362c <HAL_RCC_ClockConfig+0x12c>)
 800356e:	681b      	ldr	r3, [r3, #0]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003570:	d94d      	bls.n	800360e <HAL_RCC_ClockConfig+0x10e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003572:	0799      	lsls	r1, r3, #30
 8003574:	d5d8      	bpl.n	8003528 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003576:	4e2d      	ldr	r6, [pc, #180]	@ (800362c <HAL_RCC_ClockConfig+0x12c>)
 8003578:	68b3      	ldr	r3, [r6, #8]
 800357a:	f023 0303 	bic.w	r3, r3, #3
 800357e:	4313      	orrs	r3, r2
 8003580:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8003582:	f7fd fee7 	bl	8001354 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003586:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 800358a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800358c:	e004      	b.n	8003598 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800358e:	f7fd fee1 	bl	8001354 <HAL_GetTick>
 8003592:	1bc0      	subs	r0, r0, r7
 8003594:	4540      	cmp	r0, r8
 8003596:	d844      	bhi.n	8003622 <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003598:	68b3      	ldr	r3, [r6, #8]
 800359a:	6862      	ldr	r2, [r4, #4]
 800359c:	f003 030c 	and.w	r3, r3, #12
 80035a0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80035a4:	d1f3      	bne.n	800358e <HAL_RCC_ClockConfig+0x8e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035a6:	4a20      	ldr	r2, [pc, #128]	@ (8003628 <HAL_RCC_ClockConfig+0x128>)
 80035a8:	6813      	ldr	r3, [r2, #0]
 80035aa:	f003 0307 	and.w	r3, r3, #7
 80035ae:	42ab      	cmp	r3, r5
 80035b0:	d906      	bls.n	80035c0 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035b2:	b2eb      	uxtb	r3, r5
 80035b4:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035b6:	6813      	ldr	r3, [r2, #0]
 80035b8:	f003 0307 	and.w	r3, r3, #7
 80035bc:	42ab      	cmp	r3, r5
 80035be:	d1b3      	bne.n	8003528 <HAL_RCC_ClockConfig+0x28>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035c0:	6823      	ldr	r3, [r4, #0]
 80035c2:	075a      	lsls	r2, r3, #29
 80035c4:	d506      	bpl.n	80035d4 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035c6:	4919      	ldr	r1, [pc, #100]	@ (800362c <HAL_RCC_ClockConfig+0x12c>)
 80035c8:	68e0      	ldr	r0, [r4, #12]
 80035ca:	688a      	ldr	r2, [r1, #8]
 80035cc:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 80035d0:	4302      	orrs	r2, r0
 80035d2:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035d4:	071b      	lsls	r3, r3, #28
 80035d6:	d507      	bpl.n	80035e8 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035d8:	4a14      	ldr	r2, [pc, #80]	@ (800362c <HAL_RCC_ClockConfig+0x12c>)
 80035da:	6921      	ldr	r1, [r4, #16]
 80035dc:	6893      	ldr	r3, [r2, #8]
 80035de:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80035e2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80035e6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035e8:	f7ff ff56 	bl	8003498 <HAL_RCC_GetSysClockFreq>
 80035ec:	4a0f      	ldr	r2, [pc, #60]	@ (800362c <HAL_RCC_ClockConfig+0x12c>)
 80035ee:	4c10      	ldr	r4, [pc, #64]	@ (8003630 <HAL_RCC_ClockConfig+0x130>)
 80035f0:	6892      	ldr	r2, [r2, #8]
 80035f2:	4910      	ldr	r1, [pc, #64]	@ (8003634 <HAL_RCC_ClockConfig+0x134>)
 80035f4:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80035f8:	4603      	mov	r3, r0
 80035fa:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick(uwTickPrio);
 80035fc:	480e      	ldr	r0, [pc, #56]	@ (8003638 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035fe:	40d3      	lsrs	r3, r2
  HAL_InitTick(uwTickPrio);
 8003600:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003602:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
 8003604:	f7fd fe5c 	bl	80012c0 <HAL_InitTick>
  return HAL_OK;
 8003608:	2000      	movs	r0, #0
}
 800360a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800360e:	0198      	lsls	r0, r3, #6
 8003610:	d4b1      	bmi.n	8003576 <HAL_RCC_ClockConfig+0x76>
 8003612:	e789      	b.n	8003528 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8003614:	2001      	movs	r0, #1
}
 8003616:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003618:	4b04      	ldr	r3, [pc, #16]	@ (800362c <HAL_RCC_ClockConfig+0x12c>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	039e      	lsls	r6, r3, #14
 800361e:	d4aa      	bmi.n	8003576 <HAL_RCC_ClockConfig+0x76>
 8003620:	e782      	b.n	8003528 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 8003622:	2003      	movs	r0, #3
 8003624:	e781      	b.n	800352a <HAL_RCC_ClockConfig+0x2a>
 8003626:	bf00      	nop
 8003628:	40023c00 	.word	0x40023c00
 800362c:	40023800 	.word	0x40023800
 8003630:	08007464 	.word	0x08007464
 8003634:	2000000c 	.word	0x2000000c
 8003638:	20000014 	.word	0x20000014

0800363c <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 800363c:	4b01      	ldr	r3, [pc, #4]	@ (8003644 <HAL_RCC_GetHCLKFreq+0x8>)
}
 800363e:	6818      	ldr	r0, [r3, #0]
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	2000000c 	.word	0x2000000c

08003648 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003648:	4b04      	ldr	r3, [pc, #16]	@ (800365c <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 800364a:	4905      	ldr	r1, [pc, #20]	@ (8003660 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	4a05      	ldr	r2, [pc, #20]	@ (8003664 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003650:	6808      	ldr	r0, [r1, #0]
 8003652:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003656:	5cd3      	ldrb	r3, [r2, r3]
}
 8003658:	40d8      	lsrs	r0, r3
 800365a:	4770      	bx	lr
 800365c:	40023800 	.word	0x40023800
 8003660:	2000000c 	.word	0x2000000c
 8003664:	0800745c 	.word	0x0800745c

08003668 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003668:	4b04      	ldr	r3, [pc, #16]	@ (800367c <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 800366a:	4905      	ldr	r1, [pc, #20]	@ (8003680 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	4a05      	ldr	r2, [pc, #20]	@ (8003684 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003670:	6808      	ldr	r0, [r1, #0]
 8003672:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003676:	5cd3      	ldrb	r3, [r2, r3]
}
 8003678:	40d8      	lsrs	r0, r3
 800367a:	4770      	bx	lr
 800367c:	40023800 	.word	0x40023800
 8003680:	2000000c 	.word	0x2000000c
 8003684:	0800745c 	.word	0x0800745c

08003688 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003688:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800368c:	2b01      	cmp	r3, #1
 800368e:	d12c      	bne.n	80036ea <HAL_TIM_Base_Start+0x62>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003690:	6803      	ldr	r3, [r0, #0]
 8003692:	4a17      	ldr	r2, [pc, #92]	@ (80036f0 <HAL_TIM_Base_Start+0x68>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003694:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003696:	4293      	cmp	r3, r2
  htim->State = HAL_TIM_STATE_BUSY;
 8003698:	f880 103d 	strb.w	r1, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800369c:	d01a      	beq.n	80036d4 <HAL_TIM_Base_Start+0x4c>
 800369e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036a2:	d017      	beq.n	80036d4 <HAL_TIM_Base_Start+0x4c>
 80036a4:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d013      	beq.n	80036d4 <HAL_TIM_Base_Start+0x4c>
 80036ac:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d00f      	beq.n	80036d4 <HAL_TIM_Base_Start+0x4c>
 80036b4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d00b      	beq.n	80036d4 <HAL_TIM_Base_Start+0x4c>
 80036bc:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d007      	beq.n	80036d4 <HAL_TIM_Base_Start+0x4c>
 80036c4:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d003      	beq.n	80036d4 <HAL_TIM_Base_Start+0x4c>
 80036cc:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d104      	bne.n	80036de <HAL_TIM_Base_Start+0x56>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036d4:	689a      	ldr	r2, [r3, #8]
 80036d6:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036da:	2a06      	cmp	r2, #6
 80036dc:	d003      	beq.n	80036e6 <HAL_TIM_Base_Start+0x5e>
    {
      __HAL_TIM_ENABLE(htim);
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	f042 0201 	orr.w	r2, r2, #1
 80036e4:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 80036e6:	2000      	movs	r0, #0
 80036e8:	4770      	bx	lr
    return HAL_ERROR;
 80036ea:	2001      	movs	r0, #1
}
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	40010000 	.word	0x40010000

080036f4 <HAL_TIM_Base_Stop>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80036f4:	6803      	ldr	r3, [r0, #0]
 80036f6:	6a19      	ldr	r1, [r3, #32]
 80036f8:	f241 1211 	movw	r2, #4369	@ 0x1111
 80036fc:	4211      	tst	r1, r2
 80036fe:	d108      	bne.n	8003712 <HAL_TIM_Base_Stop+0x1e>
 8003700:	6a19      	ldr	r1, [r3, #32]
 8003702:	f240 4244 	movw	r2, #1092	@ 0x444
 8003706:	4211      	tst	r1, r2
 8003708:	d103      	bne.n	8003712 <HAL_TIM_Base_Stop+0x1e>
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	f022 0201 	bic.w	r2, r2, #1
 8003710:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003712:	2301      	movs	r3, #1
 8003714:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
}
 8003718:	2000      	movs	r0, #0
 800371a:	4770      	bx	lr

0800371c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800371c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003720:	2b01      	cmp	r3, #1
 8003722:	d12f      	bne.n	8003784 <HAL_TIM_Base_Start_IT+0x68>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003724:	6803      	ldr	r3, [r0, #0]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003726:	4918      	ldr	r1, [pc, #96]	@ (8003788 <HAL_TIM_Base_Start_IT+0x6c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003728:	2202      	movs	r2, #2
 800372a:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800372e:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003730:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003732:	f042 0201 	orr.w	r2, r2, #1
 8003736:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003738:	d019      	beq.n	800376e <HAL_TIM_Base_Start_IT+0x52>
 800373a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800373e:	d016      	beq.n	800376e <HAL_TIM_Base_Start_IT+0x52>
 8003740:	4a12      	ldr	r2, [pc, #72]	@ (800378c <HAL_TIM_Base_Start_IT+0x70>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d013      	beq.n	800376e <HAL_TIM_Base_Start_IT+0x52>
 8003746:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800374a:	4293      	cmp	r3, r2
 800374c:	d00f      	beq.n	800376e <HAL_TIM_Base_Start_IT+0x52>
 800374e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003752:	4293      	cmp	r3, r2
 8003754:	d00b      	beq.n	800376e <HAL_TIM_Base_Start_IT+0x52>
 8003756:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800375a:	4293      	cmp	r3, r2
 800375c:	d007      	beq.n	800376e <HAL_TIM_Base_Start_IT+0x52>
 800375e:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8003762:	4293      	cmp	r3, r2
 8003764:	d003      	beq.n	800376e <HAL_TIM_Base_Start_IT+0x52>
 8003766:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800376a:	4293      	cmp	r3, r2
 800376c:	d104      	bne.n	8003778 <HAL_TIM_Base_Start_IT+0x5c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800376e:	689a      	ldr	r2, [r3, #8]
 8003770:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003774:	2a06      	cmp	r2, #6
 8003776:	d003      	beq.n	8003780 <HAL_TIM_Base_Start_IT+0x64>
    {
      __HAL_TIM_ENABLE(htim);
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	f042 0201 	orr.w	r2, r2, #1
 800377e:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 8003780:	2000      	movs	r0, #0
 8003782:	4770      	bx	lr
    return HAL_ERROR;
 8003784:	2001      	movs	r0, #1
}
 8003786:	4770      	bx	lr
 8003788:	40010000 	.word	0x40010000
 800378c:	40000400 	.word	0x40000400

08003790 <HAL_TIM_Base_Stop_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003790:	6803      	ldr	r3, [r0, #0]
 8003792:	68da      	ldr	r2, [r3, #12]
 8003794:	f022 0201 	bic.w	r2, r2, #1
 8003798:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800379a:	6a1a      	ldr	r2, [r3, #32]
 800379c:	f241 1111 	movw	r1, #4369	@ 0x1111
 80037a0:	420a      	tst	r2, r1
 80037a2:	d108      	bne.n	80037b6 <HAL_TIM_Base_Stop_IT+0x26>
 80037a4:	6a19      	ldr	r1, [r3, #32]
 80037a6:	f240 4244 	movw	r2, #1092	@ 0x444
 80037aa:	4211      	tst	r1, r2
 80037ac:	d103      	bne.n	80037b6 <HAL_TIM_Base_Stop_IT+0x26>
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	f022 0201 	bic.w	r2, r2, #1
 80037b4:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80037b6:	2301      	movs	r3, #1
 80037b8:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
}
 80037bc:	2000      	movs	r0, #0
 80037be:	4770      	bx	lr

080037c0 <HAL_TIM_ConfigClockSource>:
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037c0:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80037c4:	2a01      	cmp	r2, #1
 80037c6:	d06e      	beq.n	80038a6 <HAL_TIM_ConfigClockSource+0xe6>
 80037c8:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037ca:	6802      	ldr	r2, [r0, #0]
{
 80037cc:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 80037ce:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80037d0:	2402      	movs	r4, #2
  __HAL_LOCK(htim);
 80037d2:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80037d6:	f883 403d 	strb.w	r4, [r3, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80037da:	6894      	ldr	r4, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037dc:	f424 447f 	bic.w	r4, r4, #65280	@ 0xff00
 80037e0:	f024 0477 	bic.w	r4, r4, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 80037e4:	6094      	str	r4, [r2, #8]

  switch (sClockSourceConfig->ClockSource)
 80037e6:	680c      	ldr	r4, [r1, #0]
 80037e8:	2c60      	cmp	r4, #96	@ 0x60
 80037ea:	d076      	beq.n	80038da <HAL_TIM_ConfigClockSource+0x11a>
 80037ec:	d811      	bhi.n	8003812 <HAL_TIM_ConfigClockSource+0x52>
 80037ee:	2c40      	cmp	r4, #64	@ 0x40
 80037f0:	d05b      	beq.n	80038aa <HAL_TIM_ConfigClockSource+0xea>
 80037f2:	d82e      	bhi.n	8003852 <HAL_TIM_ConfigClockSource+0x92>
 80037f4:	2c20      	cmp	r4, #32
 80037f6:	d004      	beq.n	8003802 <HAL_TIM_ConfigClockSource+0x42>
 80037f8:	f200 8088 	bhi.w	800390c <HAL_TIM_ConfigClockSource+0x14c>
 80037fc:	f034 0110 	bics.w	r1, r4, #16
 8003800:	d11f      	bne.n	8003842 <HAL_TIM_ConfigClockSource+0x82>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003802:	6891      	ldr	r1, [r2, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003804:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003808:	4321      	orrs	r1, r4
 800380a:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800380e:	6091      	str	r1, [r2, #8]
}
 8003810:	e016      	b.n	8003840 <HAL_TIM_ConfigClockSource+0x80>
  switch (sClockSourceConfig->ClockSource)
 8003812:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
 8003816:	d013      	beq.n	8003840 <HAL_TIM_ConfigClockSource+0x80>
 8003818:	f5b4 5f00 	cmp.w	r4, #8192	@ 0x2000
 800381c:	d033      	beq.n	8003886 <HAL_TIM_ConfigClockSource+0xc6>
 800381e:	2c70      	cmp	r4, #112	@ 0x70
 8003820:	d10f      	bne.n	8003842 <HAL_TIM_ConfigClockSource+0x82>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003822:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8003826:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003828:	4328      	orrs	r0, r5
 800382a:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800382c:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003830:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 8003834:	4308      	orrs	r0, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003836:	6090      	str	r0, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 8003838:	6891      	ldr	r1, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800383a:	f041 0177 	orr.w	r1, r1, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 800383e:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003840:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003842:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8003844:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8003846:	f883 103d 	strb.w	r1, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800384a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800384e:	bc30      	pop	{r4, r5}
 8003850:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8003852:	2c50      	cmp	r4, #80	@ 0x50
 8003854:	d1f5      	bne.n	8003842 <HAL_TIM_ConfigClockSource+0x82>
                               sClockSourceConfig->ClockPolarity,
 8003856:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8003858:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 800385a:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800385c:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8003860:	4308      	orrs	r0, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003862:	6a11      	ldr	r1, [r2, #32]
 8003864:	f021 0101 	bic.w	r1, r1, #1
 8003868:	6211      	str	r1, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 800386a:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800386c:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003870:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003874:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8003876:	6210      	str	r0, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8003878:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800387a:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800387e:	f041 0157 	orr.w	r1, r1, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 8003882:	6091      	str	r1, [r2, #8]
}
 8003884:	e7dc      	b.n	8003840 <HAL_TIM_ConfigClockSource+0x80>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003886:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800388a:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800388c:	4328      	orrs	r0, r5
 800388e:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003890:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003894:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 8003898:	4308      	orrs	r0, r1
  TIMx->SMCR = tmpsmcr;
 800389a:	6090      	str	r0, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800389c:	6891      	ldr	r1, [r2, #8]
 800389e:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 80038a2:	6091      	str	r1, [r2, #8]
      break;
 80038a4:	e7cc      	b.n	8003840 <HAL_TIM_ConfigClockSource+0x80>
  __HAL_LOCK(htim);
 80038a6:	2002      	movs	r0, #2
}
 80038a8:	4770      	bx	lr
                               sClockSourceConfig->ClockPolarity,
 80038aa:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80038ac:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 80038ae:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038b0:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80038b4:	4308      	orrs	r0, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038b6:	6a11      	ldr	r1, [r2, #32]
 80038b8:	f021 0101 	bic.w	r1, r1, #1
 80038bc:	6211      	str	r1, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038be:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038c0:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038c4:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80038c8:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 80038ca:	6210      	str	r0, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 80038cc:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80038ce:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038d2:	f041 0147 	orr.w	r1, r1, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 80038d6:	6091      	str	r1, [r2, #8]
}
 80038d8:	e7b2      	b.n	8003840 <HAL_TIM_ConfigClockSource+0x80>
                               sClockSourceConfig->ClockPolarity,
 80038da:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80038dc:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 80038de:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038e0:	f021 01a0 	bic.w	r1, r1, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80038e4:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038e8:	6a10      	ldr	r0, [r2, #32]
 80038ea:	f020 0010 	bic.w	r0, r0, #16
 80038ee:	6210      	str	r0, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038f0:	6990      	ldr	r0, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038f2:	f420 4070 	bic.w	r0, r0, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038f6:	ea40 3004 	orr.w	r0, r0, r4, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80038fa:	6190      	str	r0, [r2, #24]
  TIMx->CCER = tmpccer;
 80038fc:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 80038fe:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003900:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003904:	f041 0167 	orr.w	r1, r1, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8003908:	6091      	str	r1, [r2, #8]
}
 800390a:	e799      	b.n	8003840 <HAL_TIM_ConfigClockSource+0x80>
  switch (sClockSourceConfig->ClockSource)
 800390c:	2c30      	cmp	r4, #48	@ 0x30
 800390e:	f43f af78 	beq.w	8003802 <HAL_TIM_ConfigClockSource+0x42>
 8003912:	e796      	b.n	8003842 <HAL_TIM_ConfigClockSource+0x82>

08003914 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop

08003918 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop

0800391c <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop

08003920 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop

08003924 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 8003924:	6803      	ldr	r3, [r0, #0]
{
 8003926:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8003928:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 800392a:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800392c:	07a9      	lsls	r1, r5, #30
{
 800392e:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003930:	d501      	bpl.n	8003936 <HAL_TIM_IRQHandler+0x12>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003932:	07b2      	lsls	r2, r6, #30
 8003934:	d451      	bmi.n	80039da <HAL_TIM_IRQHandler+0xb6>
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003936:	0769      	lsls	r1, r5, #29
 8003938:	d501      	bpl.n	800393e <HAL_TIM_IRQHandler+0x1a>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800393a:	0772      	lsls	r2, r6, #29
 800393c:	d43a      	bmi.n	80039b4 <HAL_TIM_IRQHandler+0x90>
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800393e:	072b      	lsls	r3, r5, #28
 8003940:	d501      	bpl.n	8003946 <HAL_TIM_IRQHandler+0x22>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003942:	0730      	lsls	r0, r6, #28
 8003944:	d424      	bmi.n	8003990 <HAL_TIM_IRQHandler+0x6c>
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003946:	06ea      	lsls	r2, r5, #27
 8003948:	d501      	bpl.n	800394e <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800394a:	06f3      	lsls	r3, r6, #27
 800394c:	d410      	bmi.n	8003970 <HAL_TIM_IRQHandler+0x4c>
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800394e:	07e8      	lsls	r0, r5, #31
 8003950:	d501      	bpl.n	8003956 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003952:	07f1      	lsls	r1, r6, #31
 8003954:	d457      	bmi.n	8003a06 <HAL_TIM_IRQHandler+0xe2>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003956:	062a      	lsls	r2, r5, #24
 8003958:	d501      	bpl.n	800395e <HAL_TIM_IRQHandler+0x3a>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800395a:	0633      	lsls	r3, r6, #24
 800395c:	d45b      	bmi.n	8003a16 <HAL_TIM_IRQHandler+0xf2>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800395e:	0668      	lsls	r0, r5, #25
 8003960:	d501      	bpl.n	8003966 <HAL_TIM_IRQHandler+0x42>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003962:	0671      	lsls	r1, r6, #25
 8003964:	d45f      	bmi.n	8003a26 <HAL_TIM_IRQHandler+0x102>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003966:	06aa      	lsls	r2, r5, #26
 8003968:	d501      	bpl.n	800396e <HAL_TIM_IRQHandler+0x4a>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800396a:	06b3      	lsls	r3, r6, #26
 800396c:	d442      	bmi.n	80039f4 <HAL_TIM_IRQHandler+0xd0>
}
 800396e:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003970:	6823      	ldr	r3, [r4, #0]
 8003972:	f06f 0210 	mvn.w	r2, #16
 8003976:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003978:	2208      	movs	r2, #8
 800397a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8003982:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003984:	d063      	beq.n	8003a4e <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8003986:	f7ff ffc7 	bl	8003918 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800398a:	2300      	movs	r3, #0
 800398c:	7723      	strb	r3, [r4, #28]
 800398e:	e7de      	b.n	800394e <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003990:	6823      	ldr	r3, [r4, #0]
 8003992:	f06f 0208 	mvn.w	r2, #8
 8003996:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003998:	2204      	movs	r2, #4
 800399a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800399c:	69db      	ldr	r3, [r3, #28]
 800399e:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 80039a0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039a2:	d151      	bne.n	8003a48 <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039a4:	f7ff ffb6 	bl	8003914 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039a8:	4620      	mov	r0, r4
 80039aa:	f7ff ffb7 	bl	800391c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ae:	2300      	movs	r3, #0
 80039b0:	7723      	strb	r3, [r4, #28]
 80039b2:	e7c8      	b.n	8003946 <HAL_TIM_IRQHandler+0x22>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80039b4:	6823      	ldr	r3, [r4, #0]
 80039b6:	f06f 0204 	mvn.w	r2, #4
 80039ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039bc:	2202      	movs	r2, #2
 80039be:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039c0:	699b      	ldr	r3, [r3, #24]
 80039c2:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80039c6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039c8:	d13b      	bne.n	8003a42 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ca:	f7ff ffa3 	bl	8003914 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039ce:	4620      	mov	r0, r4
 80039d0:	f7ff ffa4 	bl	800391c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039d4:	2300      	movs	r3, #0
 80039d6:	7723      	strb	r3, [r4, #28]
 80039d8:	e7b1      	b.n	800393e <HAL_TIM_IRQHandler+0x1a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80039da:	f06f 0202 	mvn.w	r2, #2
 80039de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039e0:	2201      	movs	r2, #1
 80039e2:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	079b      	lsls	r3, r3, #30
 80039e8:	d025      	beq.n	8003a36 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 80039ea:	f7ff ff95 	bl	8003918 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ee:	2300      	movs	r3, #0
 80039f0:	7723      	strb	r3, [r4, #28]
 80039f2:	e7a0      	b.n	8003936 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80039f4:	6823      	ldr	r3, [r4, #0]
 80039f6:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80039fa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80039fc:	611a      	str	r2, [r3, #16]
}
 80039fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 8003a02:	f000 b909 	b.w	8003c18 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003a06:	6823      	ldr	r3, [r4, #0]
 8003a08:	f06f 0201 	mvn.w	r2, #1
 8003a0c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a0e:	4620      	mov	r0, r4
 8003a10:	f001 fbfe 	bl	8005210 <HAL_TIM_PeriodElapsedCallback>
 8003a14:	e79f      	b.n	8003956 <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003a16:	6823      	ldr	r3, [r4, #0]
 8003a18:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003a1c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003a1e:	4620      	mov	r0, r4
 8003a20:	f000 f8fc 	bl	8003c1c <HAL_TIMEx_BreakCallback>
 8003a24:	e79b      	b.n	800395e <HAL_TIM_IRQHandler+0x3a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003a26:	6823      	ldr	r3, [r4, #0]
 8003a28:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003a2c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003a2e:	4620      	mov	r0, r4
 8003a30:	f7ff ff76 	bl	8003920 <HAL_TIM_TriggerCallback>
 8003a34:	e797      	b.n	8003966 <HAL_TIM_IRQHandler+0x42>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a36:	f7ff ff6d 	bl	8003914 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a3a:	4620      	mov	r0, r4
 8003a3c:	f7ff ff6e 	bl	800391c <HAL_TIM_PWM_PulseFinishedCallback>
 8003a40:	e7d5      	b.n	80039ee <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8003a42:	f7ff ff69 	bl	8003918 <HAL_TIM_IC_CaptureCallback>
 8003a46:	e7c5      	b.n	80039d4 <HAL_TIM_IRQHandler+0xb0>
        HAL_TIM_IC_CaptureCallback(htim);
 8003a48:	f7ff ff66 	bl	8003918 <HAL_TIM_IC_CaptureCallback>
 8003a4c:	e7af      	b.n	80039ae <HAL_TIM_IRQHandler+0x8a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a4e:	f7ff ff61 	bl	8003914 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a52:	4620      	mov	r0, r4
 8003a54:	f7ff ff62 	bl	800391c <HAL_TIM_PWM_PulseFinishedCallback>
 8003a58:	e797      	b.n	800398a <HAL_TIM_IRQHandler+0x66>
 8003a5a:	bf00      	nop

08003a5c <TIM_Base_SetConfig>:
{
 8003a5c:	b470      	push	{r4, r5, r6}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a5e:	4e34      	ldr	r6, [pc, #208]	@ (8003b30 <TIM_Base_SetConfig+0xd4>)
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a60:	694a      	ldr	r2, [r1, #20]
  tmpcr1 = TIMx->CR1;
 8003a62:	6803      	ldr	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a64:	688d      	ldr	r5, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 8003a66:	680c      	ldr	r4, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a68:	42b0      	cmp	r0, r6
 8003a6a:	d045      	beq.n	8003af8 <TIM_Base_SetConfig+0x9c>
 8003a6c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003a70:	d034      	beq.n	8003adc <TIM_Base_SetConfig+0x80>
 8003a72:	f5a6 467c 	sub.w	r6, r6, #64512	@ 0xfc00
 8003a76:	42b0      	cmp	r0, r6
 8003a78:	d030      	beq.n	8003adc <TIM_Base_SetConfig+0x80>
 8003a7a:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8003a7e:	42b0      	cmp	r0, r6
 8003a80:	d02c      	beq.n	8003adc <TIM_Base_SetConfig+0x80>
 8003a82:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8003a86:	42b0      	cmp	r0, r6
 8003a88:	d028      	beq.n	8003adc <TIM_Base_SetConfig+0x80>
 8003a8a:	f506 4678 	add.w	r6, r6, #63488	@ 0xf800
 8003a8e:	42b0      	cmp	r0, r6
 8003a90:	d032      	beq.n	8003af8 <TIM_Base_SetConfig+0x9c>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a92:	4e28      	ldr	r6, [pc, #160]	@ (8003b34 <TIM_Base_SetConfig+0xd8>)
 8003a94:	42b0      	cmp	r0, r6
 8003a96:	d025      	beq.n	8003ae4 <TIM_Base_SetConfig+0x88>
 8003a98:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8003a9c:	42b0      	cmp	r0, r6
 8003a9e:	d021      	beq.n	8003ae4 <TIM_Base_SetConfig+0x88>
 8003aa0:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8003aa4:	42b0      	cmp	r0, r6
 8003aa6:	d01d      	beq.n	8003ae4 <TIM_Base_SetConfig+0x88>
 8003aa8:	f5a6 3698 	sub.w	r6, r6, #77824	@ 0x13000
 8003aac:	42b0      	cmp	r0, r6
 8003aae:	d033      	beq.n	8003b18 <TIM_Base_SetConfig+0xbc>
 8003ab0:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8003ab4:	42b0      	cmp	r0, r6
 8003ab6:	d015      	beq.n	8003ae4 <TIM_Base_SetConfig+0x88>
 8003ab8:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8003abc:	42b0      	cmp	r0, r6
 8003abe:	d011      	beq.n	8003ae4 <TIM_Base_SetConfig+0x88>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ac0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ac4:	62c5      	str	r5, [r0, #44]	@ 0x2c
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ac6:	431a      	orrs	r2, r3
  TIMx->PSC = Structure->Prescaler;
 8003ac8:	6284      	str	r4, [r0, #40]	@ 0x28
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003aca:	6803      	ldr	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 8003acc:	2101      	movs	r1, #1
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003ace:	f043 0304 	orr.w	r3, r3, #4
 8003ad2:	6003      	str	r3, [r0, #0]
}
 8003ad4:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_EGR_UG;
 8003ad6:	6141      	str	r1, [r0, #20]
  TIMx->CR1 = tmpcr1;
 8003ad8:	6002      	str	r2, [r0, #0]
}
 8003ada:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8003adc:	684e      	ldr	r6, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ade:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003ae2:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ae4:	68c9      	ldr	r1, [r1, #12]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ae6:	62c5      	str	r5, [r0, #44]	@ 0x2c
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ae8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003aec:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003aee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003af2:	431a      	orrs	r2, r3
  TIMx->PSC = Structure->Prescaler;
 8003af4:	6284      	str	r4, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003af6:	e7e8      	b.n	8003aca <TIM_Base_SetConfig+0x6e>
    tmpcr1 |= Structure->CounterMode;
 8003af8:	684e      	ldr	r6, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003afa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003afe:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b00:	68ce      	ldr	r6, [r1, #12]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b02:	62c5      	str	r5, [r0, #44]	@ 0x2c
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b08:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
  TIMx->PSC = Structure->Prescaler;
 8003b0e:	6284      	str	r4, [r0, #40]	@ 0x28
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b10:	431a      	orrs	r2, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8003b12:	690b      	ldr	r3, [r1, #16]
 8003b14:	6303      	str	r3, [r0, #48]	@ 0x30
 8003b16:	e7d8      	b.n	8003aca <TIM_Base_SetConfig+0x6e>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b18:	68c9      	ldr	r1, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b1e:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b20:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b24:	431a      	orrs	r2, r3
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b26:	4b04      	ldr	r3, [pc, #16]	@ (8003b38 <TIM_Base_SetConfig+0xdc>)
 8003b28:	62dd      	str	r5, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003b2a:	629c      	str	r4, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b2c:	e7cd      	b.n	8003aca <TIM_Base_SetConfig+0x6e>
 8003b2e:	bf00      	nop
 8003b30:	40010000 	.word	0x40010000
 8003b34:	40014000 	.word	0x40014000
 8003b38:	40001800 	.word	0x40001800

08003b3c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8003b3c:	b350      	cbz	r0, 8003b94 <HAL_TIM_Base_Init+0x58>
{
 8003b3e:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8003b40:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003b44:	4604      	mov	r4, r0
 8003b46:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003b4a:	b1f3      	cbz	r3, 8003b8a <HAL_TIM_Base_Init+0x4e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b4c:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8003b4e:	2302      	movs	r3, #2
 8003b50:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b54:	f851 0b04 	ldr.w	r0, [r1], #4
 8003b58:	f7ff ff80 	bl	8003a5c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b62:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8003b66:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003b6a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003b6e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b72:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003b76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b7a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003b7e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003b82:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8003b86:	2000      	movs	r0, #0
}
 8003b88:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003b8a:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003b8e:	f7fd f9c9 	bl	8000f24 <HAL_TIM_Base_MspInit>
 8003b92:	e7db      	b.n	8003b4c <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8003b94:	2001      	movs	r0, #1
}
 8003b96:	4770      	bx	lr

08003b98 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b98:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8003b9c:	2a01      	cmp	r2, #1
 8003b9e:	d037      	beq.n	8003c10 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8003ba0:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ba2:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003ba4:	2002      	movs	r0, #2
{
 8003ba6:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8003ba8:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 8003bac:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bae:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8003bb0:	6894      	ldr	r4, [r2, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bb2:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bb6:	4328      	orrs	r0, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bb8:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bba:	4816      	ldr	r0, [pc, #88]	@ (8003c14 <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
 8003bbc:	4282      	cmp	r2, r0
 8003bbe:	d01a      	beq.n	8003bf6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8003bc0:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8003bc4:	d017      	beq.n	8003bf6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8003bc6:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 8003bca:	4282      	cmp	r2, r0
 8003bcc:	d013      	beq.n	8003bf6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8003bce:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8003bd2:	4282      	cmp	r2, r0
 8003bd4:	d00f      	beq.n	8003bf6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8003bd6:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8003bda:	4282      	cmp	r2, r0
 8003bdc:	d00b      	beq.n	8003bf6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8003bde:	f500 4078 	add.w	r0, r0, #63488	@ 0xf800
 8003be2:	4282      	cmp	r2, r0
 8003be4:	d007      	beq.n	8003bf6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8003be6:	f500 5070 	add.w	r0, r0, #15360	@ 0x3c00
 8003bea:	4282      	cmp	r2, r0
 8003bec:	d003      	beq.n	8003bf6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8003bee:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 8003bf2:	4282      	cmp	r2, r0
 8003bf4:	d104      	bne.n	8003c00 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bf6:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bf8:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bfc:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bfe:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8003c00:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8003c08:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8003c0c:	bc30      	pop	{r4, r5}
 8003c0e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003c10:	2002      	movs	r0, #2
}
 8003c12:	4770      	bx	lr
 8003c14:	40010000 	.word	0x40010000

08003c18 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop

08003c1c <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop

08003c20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c20:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c22:	f102 030c 	add.w	r3, r2, #12
 8003c26:	e853 3f00 	ldrex	r3, [r3]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c2a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2e:	f102 0c0c 	add.w	ip, r2, #12
 8003c32:	e84c 3100 	strex	r1, r3, [ip]
 8003c36:	2900      	cmp	r1, #0
 8003c38:	d1f3      	bne.n	8003c22 <UART_EndRxTransfer+0x2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c3a:	f102 0314 	add.w	r3, r2, #20
 8003c3e:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c42:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c46:	f102 0c14 	add.w	ip, r2, #20
 8003c4a:	e84c 3100 	strex	r1, r3, [ip]
 8003c4e:	2900      	cmp	r1, #0
 8003c50:	d1f3      	bne.n	8003c3a <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c52:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d005      	beq.n	8003c64 <UART_EndRxTransfer+0x44>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c58:	2220      	movs	r2, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c5a:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8003c5c:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c60:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8003c62:	4770      	bx	lr
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c64:	f102 030c 	add.w	r3, r2, #12
 8003c68:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c6c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c70:	f102 0c0c 	add.w	ip, r2, #12
 8003c74:	e84c 3100 	strex	r1, r3, [ip]
 8003c78:	2900      	cmp	r1, #0
 8003c7a:	d1f3      	bne.n	8003c64 <UART_EndRxTransfer+0x44>
 8003c7c:	e7ec      	b.n	8003c58 <UART_EndRxTransfer+0x38>
 8003c7e:	bf00      	nop

08003c80 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c80:	6802      	ldr	r2, [r0, #0]
 8003c82:	6911      	ldr	r1, [r2, #16]
{
 8003c84:	b538      	push	{r3, r4, r5, lr}
 8003c86:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c88:	68c0      	ldr	r0, [r0, #12]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c8a:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c8c:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 8003c90:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c92:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c94:	6111      	str	r1, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c96:	4303      	orrs	r3, r0
 8003c98:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8003c9a:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c9c:	4303      	orrs	r3, r0
 8003c9e:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8003ca0:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
 8003ca4:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ca8:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8003caa:	430b      	orrs	r3, r1
 8003cac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cae:	6953      	ldr	r3, [r2, #20]
 8003cb0:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003cb2:	4923      	ldr	r1, [pc, #140]	@ (8003d40 <UART_SetConfig+0xc0>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cb8:	4303      	orrs	r3, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003cba:	428a      	cmp	r2, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cbc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003cbe:	d005      	beq.n	8003ccc <UART_SetConfig+0x4c>
 8003cc0:	4b20      	ldr	r3, [pc, #128]	@ (8003d44 <UART_SetConfig+0xc4>)
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d002      	beq.n	8003ccc <UART_SetConfig+0x4c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003cc6:	f7ff fcbf 	bl	8003648 <HAL_RCC_GetPCLK1Freq>
 8003cca:	e001      	b.n	8003cd0 <UART_SetConfig+0x50>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ccc:	f7ff fccc 	bl	8003668 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cd0:	69e2      	ldr	r2, [r4, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003cd2:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cd4:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003cd8:	e9d4 5300 	ldrd	r5, r3, [r4]
 8003cdc:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ce0:	d013      	beq.n	8003d0a <UART_SetConfig+0x8a>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ce2:	009a      	lsls	r2, r3, #2
 8003ce4:	0f9b      	lsrs	r3, r3, #30
 8003ce6:	f7fc facb 	bl	8000280 <__aeabi_uldivmod>
 8003cea:	4a17      	ldr	r2, [pc, #92]	@ (8003d48 <UART_SetConfig+0xc8>)
 8003cec:	fba2 1300 	umull	r1, r3, r2, r0
 8003cf0:	095b      	lsrs	r3, r3, #5
 8003cf2:	2164      	movs	r1, #100	@ 0x64
 8003cf4:	fb01 0013 	mls	r0, r1, r3, r0
 8003cf8:	0100      	lsls	r0, r0, #4
 8003cfa:	3032      	adds	r0, #50	@ 0x32
 8003cfc:	fba2 2000 	umull	r2, r0, r2, r0
 8003d00:	011b      	lsls	r3, r3, #4
 8003d02:	eb03 1350 	add.w	r3, r3, r0, lsr #5
 8003d06:	60ab      	str	r3, [r5, #8]
  }
}
 8003d08:	bd38      	pop	{r3, r4, r5, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d0a:	18da      	adds	r2, r3, r3
 8003d0c:	f04f 0300 	mov.w	r3, #0
 8003d10:	415b      	adcs	r3, r3
 8003d12:	f7fc fab5 	bl	8000280 <__aeabi_uldivmod>
 8003d16:	4a0c      	ldr	r2, [pc, #48]	@ (8003d48 <UART_SetConfig+0xc8>)
 8003d18:	fba2 3100 	umull	r3, r1, r2, r0
 8003d1c:	0949      	lsrs	r1, r1, #5
 8003d1e:	2364      	movs	r3, #100	@ 0x64
 8003d20:	fb03 0311 	mls	r3, r3, r1, r0
 8003d24:	00db      	lsls	r3, r3, #3
 8003d26:	3332      	adds	r3, #50	@ 0x32
 8003d28:	fba2 2303 	umull	r2, r3, r2, r3
 8003d2c:	f3c3 1242 	ubfx	r2, r3, #5, #3
 8003d30:	091b      	lsrs	r3, r3, #4
 8003d32:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003d36:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003d3a:	4413      	add	r3, r2
 8003d3c:	60ab      	str	r3, [r5, #8]
}
 8003d3e:	bd38      	pop	{r3, r4, r5, pc}
 8003d40:	40011000 	.word	0x40011000
 8003d44:	40011400 	.word	0x40011400
 8003d48:	51eb851f 	.word	0x51eb851f

08003d4c <HAL_UART_Init>:
  if (huart == NULL)
 8003d4c:	b370      	cbz	r0, 8003dac <HAL_UART_Init+0x60>
{
 8003d4e:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8003d50:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8003d54:	4604      	mov	r4, r0
 8003d56:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003d5a:	b313      	cbz	r3, 8003da2 <HAL_UART_Init+0x56>
  __HAL_UART_DISABLE(huart);
 8003d5c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003d5e:	2324      	movs	r3, #36	@ 0x24
 8003d60:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8003d64:	68d3      	ldr	r3, [r2, #12]
 8003d66:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  UART_SetConfig(huart);
 8003d6a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8003d6c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003d6e:	f7ff ff87 	bl	8003c80 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d72:	6823      	ldr	r3, [r4, #0]
 8003d74:	6919      	ldr	r1, [r3, #16]
 8003d76:	f421 4190 	bic.w	r1, r1, #18432	@ 0x4800
 8003d7a:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d7c:	6959      	ldr	r1, [r3, #20]
 8003d7e:	f021 012a 	bic.w	r1, r1, #42	@ 0x2a
 8003d82:	6159      	str	r1, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8003d84:	68d9      	ldr	r1, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d86:	2200      	movs	r2, #0
  huart->gState = HAL_UART_STATE_READY;
 8003d88:	f04f 0c20 	mov.w	ip, #32
  __HAL_UART_ENABLE(huart);
 8003d8c:	f441 5100 	orr.w	r1, r1, #8192	@ 0x2000
 8003d90:	60d9      	str	r1, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d92:	6462      	str	r2, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d94:	f884 c041 	strb.w	ip, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d98:	f884 c042 	strb.w	ip, [r4, #66]	@ 0x42
  return HAL_OK;
 8003d9c:	4610      	mov	r0, r2
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d9e:	6362      	str	r2, [r4, #52]	@ 0x34
}
 8003da0:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8003da2:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8003da6:	f7fd f945 	bl	8001034 <HAL_UART_MspInit>
 8003daa:	e7d7      	b.n	8003d5c <HAL_UART_Init+0x10>
    return HAL_ERROR;
 8003dac:	2001      	movs	r0, #1
}
 8003dae:	4770      	bx	lr

08003db0 <HAL_UART_DeInit>:
  if (huart == NULL)
 8003db0:	b1b8      	cbz	r0, 8003de2 <HAL_UART_DeInit+0x32>
  __HAL_UART_DISABLE(huart);
 8003db2:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003db4:	2324      	movs	r3, #36	@ 0x24
{
 8003db6:	b510      	push	{r4, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8003db8:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8003dbc:	68d3      	ldr	r3, [r2, #12]
 8003dbe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003dc2:	4604      	mov	r4, r0
 8003dc4:	60d3      	str	r3, [r2, #12]
  HAL_UART_MspDeInit(huart);
 8003dc6:	f7fd f9cd 	bl	8001164 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	6463      	str	r3, [r4, #68]	@ 0x44
  __HAL_UNLOCK(huart);
 8003dce:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8003dd2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 8003dd6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  return HAL_OK;
 8003dda:	4618      	mov	r0, r3
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ddc:	6323      	str	r3, [r4, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003dde:	6363      	str	r3, [r4, #52]	@ 0x34
}
 8003de0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003de2:	2001      	movs	r0, #1
}
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop

08003de8 <HAL_UART_Transmit>:
{
 8003de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003dec:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8003dee:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
 8003df2:	2820      	cmp	r0, #32
 8003df4:	d14e      	bne.n	8003e94 <HAL_UART_Transmit+0xac>
    if ((pData == NULL) || (Size == 0U))
 8003df6:	4688      	mov	r8, r1
 8003df8:	b109      	cbz	r1, 8003dfe <HAL_UART_Transmit+0x16>
 8003dfa:	4616      	mov	r6, r2
 8003dfc:	b912      	cbnz	r2, 8003e04 <HAL_UART_Transmit+0x1c>
      return  HAL_ERROR;
 8003dfe:	2001      	movs	r0, #1
}
 8003e00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e04:	461f      	mov	r7, r3
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e06:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e0a:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e0c:	f8c4 9044 	str.w	r9, [r4, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e10:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8003e14:	f7fd fa9e 	bl	8001354 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e18:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize = Size;
 8003e1a:	84a6      	strh	r6, [r4, #36]	@ 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 8003e20:	4605      	mov	r5, r0
    huart->TxXferCount = Size;
 8003e22:	84e6      	strh	r6, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e24:	d039      	beq.n	8003e9a <HAL_UART_Transmit+0xb2>
    while (huart->TxXferCount > 0U)
 8003e26:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e28:	6823      	ldr	r3, [r4, #0]
    while (huart->TxXferCount > 0U)
 8003e2a:	b292      	uxth	r2, r2
 8003e2c:	b1aa      	cbz	r2, 8003e5a <HAL_UART_Transmit+0x72>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	0616      	lsls	r6, r2, #24
 8003e32:	d404      	bmi.n	8003e3e <HAL_UART_Transmit+0x56>
    if (Timeout != HAL_MAX_DELAY)
 8003e34:	1c79      	adds	r1, r7, #1
 8003e36:	d11e      	bne.n	8003e76 <HAL_UART_Transmit+0x8e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	0612      	lsls	r2, r2, #24
 8003e3c:	d5fc      	bpl.n	8003e38 <HAL_UART_Transmit+0x50>
      if (pdata8bits == NULL)
 8003e3e:	f1b8 0f00 	cmp.w	r8, #0
 8003e42:	d021      	beq.n	8003e88 <HAL_UART_Transmit+0xa0>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e44:	f818 2b01 	ldrb.w	r2, [r8], #1
 8003e48:	605a      	str	r2, [r3, #4]
      huart->TxXferCount--;
 8003e4a:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8003e4c:	3a01      	subs	r2, #1
 8003e4e:	b292      	uxth	r2, r2
 8003e50:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003e52:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8003e54:	b292      	uxth	r2, r2
 8003e56:	2a00      	cmp	r2, #0
 8003e58:	d1e9      	bne.n	8003e2e <HAL_UART_Transmit+0x46>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	0652      	lsls	r2, r2, #25
 8003e5e:	d404      	bmi.n	8003e6a <HAL_UART_Transmit+0x82>
    if (Timeout != HAL_MAX_DELAY)
 8003e60:	1c78      	adds	r0, r7, #1
 8003e62:	d120      	bne.n	8003ea6 <HAL_UART_Transmit+0xbe>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	0651      	lsls	r1, r2, #25
 8003e68:	d5fc      	bpl.n	8003e64 <HAL_UART_Transmit+0x7c>
    huart->gState = HAL_UART_STATE_READY;
 8003e6a:	2320      	movs	r3, #32
 8003e6c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8003e70:	2000      	movs	r0, #0
}
 8003e72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e76:	f7fd fa6d 	bl	8001354 <HAL_GetTick>
 8003e7a:	1b40      	subs	r0, r0, r5
 8003e7c:	4287      	cmp	r7, r0
 8003e7e:	d31b      	bcc.n	8003eb8 <HAL_UART_Transmit+0xd0>
 8003e80:	b1d7      	cbz	r7, 8003eb8 <HAL_UART_Transmit+0xd0>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003e82:	6823      	ldr	r3, [r4, #0]
 8003e84:	68da      	ldr	r2, [r3, #12]
 8003e86:	e7d2      	b.n	8003e2e <HAL_UART_Transmit+0x46>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e88:	f839 2b02 	ldrh.w	r2, [r9], #2
 8003e8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e90:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e92:	e7da      	b.n	8003e4a <HAL_UART_Transmit+0x62>
    return HAL_BUSY;
 8003e94:	2002      	movs	r0, #2
}
 8003e96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e9a:	6923      	ldr	r3, [r4, #16]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d1c2      	bne.n	8003e26 <HAL_UART_Transmit+0x3e>
      pdata16bits = (const uint16_t *) pData;
 8003ea0:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
 8003ea2:	4698      	mov	r8, r3
 8003ea4:	e7bf      	b.n	8003e26 <HAL_UART_Transmit+0x3e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ea6:	f7fd fa55 	bl	8001354 <HAL_GetTick>
 8003eaa:	1b43      	subs	r3, r0, r5
 8003eac:	429f      	cmp	r7, r3
 8003eae:	d303      	bcc.n	8003eb8 <HAL_UART_Transmit+0xd0>
 8003eb0:	b117      	cbz	r7, 8003eb8 <HAL_UART_Transmit+0xd0>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003eb2:	6823      	ldr	r3, [r4, #0]
 8003eb4:	68da      	ldr	r2, [r3, #12]
 8003eb6:	e7d0      	b.n	8003e5a <HAL_UART_Transmit+0x72>
        huart->gState = HAL_UART_STATE_READY;
 8003eb8:	2320      	movs	r3, #32
 8003eba:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8003ebe:	2003      	movs	r0, #3
}
 8003ec0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08003ec4 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ec4:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8003ec8:	2b20      	cmp	r3, #32
 8003eca:	d103      	bne.n	8003ed4 <HAL_UART_Receive_IT+0x10>
    if ((pData == NULL) || (Size == 0U))
 8003ecc:	b101      	cbz	r1, 8003ed0 <HAL_UART_Receive_IT+0xc>
 8003ece:	b91a      	cbnz	r2, 8003ed8 <HAL_UART_Receive_IT+0x14>
      return HAL_ERROR;
 8003ed0:	2001      	movs	r0, #1
}
 8003ed2:	4770      	bx	lr
    return HAL_BUSY;
 8003ed4:	2002      	movs	r0, #2
 8003ed6:	4770      	bx	lr
{
 8003ed8:	b410      	push	{r4}
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003eda:	6904      	ldr	r4, [r0, #16]
  huart->pRxBuffPtr = pData;
 8003edc:	6281      	str	r1, [r0, #40]	@ 0x28
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ede:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ee0:	2122      	movs	r1, #34	@ 0x22
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ee2:	6303      	str	r3, [r0, #48]	@ 0x30
  huart->RxXferSize = Size;
 8003ee4:	8582      	strh	r2, [r0, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003ee6:	85c2      	strh	r2, [r0, #46]	@ 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ee8:	6443      	str	r3, [r0, #68]	@ 0x44
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003eea:	6803      	ldr	r3, [r0, #0]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003eec:	f880 1042 	strb.w	r1, [r0, #66]	@ 0x42
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003ef0:	b11c      	cbz	r4, 8003efa <HAL_UART_Receive_IT+0x36>
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003ef2:	68da      	ldr	r2, [r3, #12]
 8003ef4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ef8:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003efa:	695a      	ldr	r2, [r3, #20]
}
 8003efc:	f85d 4b04 	ldr.w	r4, [sp], #4
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003f00:	f042 0201 	orr.w	r2, r2, #1
 8003f04:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003f06:	68da      	ldr	r2, [r3, #12]
 8003f08:	f042 0220 	orr.w	r2, r2, #32
    return (UART_Start_Receive_IT(huart, pData, Size));
 8003f0c:	2000      	movs	r0, #0
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003f0e:	60da      	str	r2, [r3, #12]
}
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop

08003f14 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop

08003f18 <UART_DMAAbortOnError>:
{
 8003f18:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f1a:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0x00U;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  HAL_UART_ErrorCallback(huart);
 8003f20:	f7ff fff8 	bl	8003f14 <HAL_UART_ErrorCallback>
}
 8003f24:	bd08      	pop	{r3, pc}
 8003f26:	bf00      	nop

08003f28 <HAL_UARTEx_RxEventCallback>:
}
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop

08003f2c <UART_Receive_IT.isra.0>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f2c:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8003f30:	2b22      	cmp	r3, #34	@ 0x22
 8003f32:	d157      	bne.n	8003fe4 <UART_Receive_IT.isra.0+0xb8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f34:	6883      	ldr	r3, [r0, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f36:	6801      	ldr	r1, [r0, #0]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f38:	6a82      	ldr	r2, [r0, #40]	@ 0x28
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f3e:	d044      	beq.n	8003fca <UART_Receive_IT.isra.0+0x9e>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d14b      	bne.n	8003fdc <UART_Receive_IT.isra.0+0xb0>
 8003f44:	6903      	ldr	r3, [r0, #16]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d148      	bne.n	8003fdc <UART_Receive_IT.isra.0+0xb0>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f4a:	684b      	ldr	r3, [r1, #4]
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8003f50:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8003f52:	3201      	adds	r2, #1
    if (--huart->RxXferCount == 0U)
 8003f54:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
      huart->pRxBuffPtr += 2U;
 8003f56:	6282      	str	r2, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d140      	bne.n	8003fe4 <UART_Receive_IT.isra.0+0xb8>
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8003f62:	b500      	push	{lr}
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f64:	6802      	ldr	r2, [r0, #0]
 8003f66:	68d1      	ldr	r1, [r2, #12]
 8003f68:	f021 0120 	bic.w	r1, r1, #32
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8003f6c:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f6e:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f70:	68d1      	ldr	r1, [r2, #12]
 8003f72:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 8003f76:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f78:	6951      	ldr	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8003f7a:	f04f 0c20 	mov.w	ip, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f7e:	f021 0101 	bic.w	r1, r1, #1
 8003f82:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8003f84:	f880 c042 	strb.w	ip, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f88:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f8a:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8003f8c:	2901      	cmp	r1, #1
 8003f8e:	d12a      	bne.n	8003fe6 <UART_Receive_IT.isra.0+0xba>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f90:	6303      	str	r3, [r0, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f92:	f102 030c 	add.w	r3, r2, #12
 8003f96:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f9a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9e:	f102 0c0c 	add.w	ip, r2, #12
 8003fa2:	e84c 3100 	strex	r1, r3, [ip]
 8003fa6:	2900      	cmp	r1, #0
 8003fa8:	d1f3      	bne.n	8003f92 <UART_Receive_IT.isra.0+0x66>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003faa:	6813      	ldr	r3, [r2, #0]
 8003fac:	06db      	lsls	r3, r3, #27
 8003fae:	d506      	bpl.n	8003fbe <UART_Receive_IT.isra.0+0x92>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	9301      	str	r3, [sp, #4]
 8003fb4:	6813      	ldr	r3, [r2, #0]
 8003fb6:	9301      	str	r3, [sp, #4]
 8003fb8:	6853      	ldr	r3, [r2, #4]
 8003fba:	9301      	str	r3, [sp, #4]
 8003fbc:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fbe:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8003fc0:	f7ff ffb2 	bl	8003f28 <HAL_UARTEx_RxEventCallback>
}
 8003fc4:	b003      	add	sp, #12
 8003fc6:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fca:	6903      	ldr	r3, [r0, #16]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1bc      	bne.n	8003f4a <UART_Receive_IT.isra.0+0x1e>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003fd0:	684b      	ldr	r3, [r1, #4]
 8003fd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fd6:	f822 3b02 	strh.w	r3, [r2], #2
      huart->pRxBuffPtr += 2U;
 8003fda:	e7bb      	b.n	8003f54 <UART_Receive_IT.isra.0+0x28>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003fdc:	684b      	ldr	r3, [r1, #4]
 8003fde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fe2:	e7b4      	b.n	8003f4e <UART_Receive_IT.isra.0+0x22>
 8003fe4:	4770      	bx	lr
        HAL_UART_RxCpltCallback(huart);
 8003fe6:	f001 f923 	bl	8005230 <HAL_UART_RxCpltCallback>
}
 8003fea:	b003      	add	sp, #12
 8003fec:	f85d fb04 	ldr.w	pc, [sp], #4

08003ff0 <HAL_UART_IRQHandler>:
{
 8003ff0:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ff2:	6805      	ldr	r5, [r0, #0]
 8003ff4:	682b      	ldr	r3, [r5, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ff6:	68ee      	ldr	r6, [r5, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ff8:	6969      	ldr	r1, [r5, #20]
  if (errorflags == RESET)
 8003ffa:	f013 0f0f 	tst.w	r3, #15
{
 8003ffe:	b082      	sub	sp, #8
 8004000:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004002:	462a      	mov	r2, r5
  if (errorflags == RESET)
 8004004:	d172      	bne.n	80040ec <HAL_UART_IRQHandler+0xfc>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004006:	069d      	lsls	r5, r3, #26
 8004008:	d502      	bpl.n	8004010 <HAL_UART_IRQHandler+0x20>
 800400a:	06b1      	lsls	r1, r6, #26
 800400c:	f100 80c6 	bmi.w	800419c <HAL_UART_IRQHandler+0x1ac>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004010:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004012:	2901      	cmp	r1, #1
 8004014:	d00b      	beq.n	800402e <HAL_UART_IRQHandler+0x3e>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004016:	0618      	lsls	r0, r3, #24
 8004018:	d502      	bpl.n	8004020 <HAL_UART_IRQHandler+0x30>
 800401a:	0631      	lsls	r1, r6, #24
 800401c:	f100 8094 	bmi.w	8004148 <HAL_UART_IRQHandler+0x158>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004020:	065b      	lsls	r3, r3, #25
 8004022:	d502      	bpl.n	800402a <HAL_UART_IRQHandler+0x3a>
 8004024:	0675      	lsls	r5, r6, #25
 8004026:	f100 80ae 	bmi.w	8004186 <HAL_UART_IRQHandler+0x196>
}
 800402a:	b002      	add	sp, #8
 800402c:	bd70      	pop	{r4, r5, r6, pc}
      && ((isrflags & USART_SR_IDLE) != 0U)
 800402e:	06d8      	lsls	r0, r3, #27
 8004030:	d5f1      	bpl.n	8004016 <HAL_UART_IRQHandler+0x26>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8004032:	06f1      	lsls	r1, r6, #27
 8004034:	d5ef      	bpl.n	8004016 <HAL_UART_IRQHandler+0x26>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004036:	2300      	movs	r3, #0
 8004038:	9301      	str	r3, [sp, #4]
 800403a:	6813      	ldr	r3, [r2, #0]
 800403c:	9301      	str	r3, [sp, #4]
 800403e:	6853      	ldr	r3, [r2, #4]
 8004040:	9301      	str	r3, [sp, #4]
 8004042:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004044:	6951      	ldr	r1, [r2, #20]
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004046:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004048:	064d      	lsls	r5, r1, #25
 800404a:	f140 810c 	bpl.w	8004266 <HAL_UART_IRQHandler+0x276>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800404e:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004050:	6801      	ldr	r1, [r0, #0]
 8004052:	6849      	ldr	r1, [r1, #4]
 8004054:	b289      	uxth	r1, r1
      if ((nb_remaining_rx_data > 0U)
 8004056:	2900      	cmp	r1, #0
 8004058:	f000 8148 	beq.w	80042ec <HAL_UART_IRQHandler+0x2fc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800405c:	4299      	cmp	r1, r3
 800405e:	f080 8145 	bcs.w	80042ec <HAL_UART_IRQHandler+0x2fc>
        huart->RxXferCount = nb_remaining_rx_data;
 8004062:	85e1      	strh	r1, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004064:	69c1      	ldr	r1, [r0, #28]
 8004066:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800406a:	d036      	beq.n	80040da <HAL_UART_IRQHandler+0xea>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406c:	f102 030c 	add.w	r3, r2, #12
 8004070:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004074:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004078:	f102 050c 	add.w	r5, r2, #12
 800407c:	e845 3100 	strex	r1, r3, [r5]
 8004080:	2900      	cmp	r1, #0
 8004082:	d1f3      	bne.n	800406c <HAL_UART_IRQHandler+0x7c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004084:	f102 0314 	add.w	r3, r2, #20
 8004088:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800408c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004090:	f102 0514 	add.w	r5, r2, #20
 8004094:	e845 3100 	strex	r1, r3, [r5]
 8004098:	2900      	cmp	r1, #0
 800409a:	d1f3      	bne.n	8004084 <HAL_UART_IRQHandler+0x94>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409c:	f102 0314 	add.w	r3, r2, #20
 80040a0:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a8:	f102 0514 	add.w	r5, r2, #20
 80040ac:	e845 3100 	strex	r1, r3, [r5]
 80040b0:	2900      	cmp	r1, #0
 80040b2:	d1f3      	bne.n	800409c <HAL_UART_IRQHandler+0xac>
          huart->RxState = HAL_UART_STATE_READY;
 80040b4:	2320      	movs	r3, #32
 80040b6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ba:	6321      	str	r1, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040bc:	f102 030c 	add.w	r3, r2, #12
 80040c0:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040c4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c8:	f102 050c 	add.w	r5, r2, #12
 80040cc:	e845 3100 	strex	r1, r3, [r5]
 80040d0:	2900      	cmp	r1, #0
 80040d2:	d1f3      	bne.n	80040bc <HAL_UART_IRQHandler+0xcc>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80040d4:	f7fd fe78 	bl	8001dc8 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80040d8:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040da:	2202      	movs	r2, #2
 80040dc:	6362      	str	r2, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80040de:	8de1      	ldrh	r1, [r4, #46]	@ 0x2e
 80040e0:	1a59      	subs	r1, r3, r1
 80040e2:	4620      	mov	r0, r4
 80040e4:	b289      	uxth	r1, r1
 80040e6:	f7ff ff1f 	bl	8003f28 <HAL_UARTEx_RxEventCallback>
 80040ea:	e79e      	b.n	800402a <HAL_UART_IRQHandler+0x3a>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80040ec:	f011 0101 	ands.w	r1, r1, #1
 80040f0:	d176      	bne.n	80041e0 <HAL_UART_IRQHandler+0x1f0>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80040f2:	f416 7f90 	tst.w	r6, #288	@ 0x120
 80040f6:	d08b      	beq.n	8004010 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80040f8:	07da      	lsls	r2, r3, #31
 80040fa:	d50a      	bpl.n	8004112 <HAL_UART_IRQHandler+0x122>
 80040fc:	05f0      	lsls	r0, r6, #23
 80040fe:	f140 80ec 	bpl.w	80042da <HAL_UART_IRQHandler+0x2ea>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004102:	6c62      	ldr	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004104:	0758      	lsls	r0, r3, #29
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004106:	f042 0201 	orr.w	r2, r2, #1
 800410a:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800410c:	d54f      	bpl.n	80041ae <HAL_UART_IRQHandler+0x1be>
 800410e:	2900      	cmp	r1, #0
 8004110:	d16a      	bne.n	80041e8 <HAL_UART_IRQHandler+0x1f8>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004112:	0798      	lsls	r0, r3, #30
 8004114:	d55a      	bpl.n	80041cc <HAL_UART_IRQHandler+0x1dc>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004116:	0719      	lsls	r1, r3, #28
 8004118:	f100 80a2 	bmi.w	8004260 <HAL_UART_IRQHandler+0x270>
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800411c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800411e:	2a00      	cmp	r2, #0
 8004120:	d083      	beq.n	800402a <HAL_UART_IRQHandler+0x3a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004122:	069a      	lsls	r2, r3, #26
 8004124:	d502      	bpl.n	800412c <HAL_UART_IRQHandler+0x13c>
 8004126:	06b3      	lsls	r3, r6, #26
 8004128:	f100 80db 	bmi.w	80042e2 <HAL_UART_IRQHandler+0x2f2>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800412c:	696b      	ldr	r3, [r5, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800412e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004134:	f002 0208 	and.w	r2, r2, #8
 8004138:	ea53 0602 	orrs.w	r6, r3, r2
        UART_EndRxTransfer(huart);
 800413c:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800413e:	d15c      	bne.n	80041fa <HAL_UART_IRQHandler+0x20a>
        HAL_UART_ErrorCallback(huart);
 8004140:	f7ff fee8 	bl	8003f14 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004144:	6466      	str	r6, [r4, #68]	@ 0x44
 8004146:	e770      	b.n	800402a <HAL_UART_IRQHandler+0x3a>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004148:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800414c:	2b21      	cmp	r3, #33	@ 0x21
 800414e:	f47f af6c 	bne.w	800402a <HAL_UART_IRQHandler+0x3a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004152:	68a1      	ldr	r1, [r4, #8]
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004154:	6a23      	ldr	r3, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004156:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 800415a:	f000 80d0 	beq.w	80042fe <HAL_UART_IRQHandler+0x30e>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800415e:	1c59      	adds	r1, r3, #1
 8004160:	6221      	str	r1, [r4, #32]
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	6053      	str	r3, [r2, #4]
    if (--huart->TxXferCount == 0U)
 8004166:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8004168:	3b01      	subs	r3, #1
 800416a:	b29b      	uxth	r3, r3
 800416c:	84e3      	strh	r3, [r4, #38]	@ 0x26
 800416e:	2b00      	cmp	r3, #0
 8004170:	f47f af5b 	bne.w	800402a <HAL_UART_IRQHandler+0x3a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004174:	68d3      	ldr	r3, [r2, #12]
 8004176:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800417a:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800417c:	68d3      	ldr	r3, [r2, #12]
 800417e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004182:	60d3      	str	r3, [r2, #12]
 8004184:	e751      	b.n	800402a <HAL_UART_IRQHandler+0x3a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004186:	68d3      	ldr	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 8004188:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800418a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800418e:	60d3      	str	r3, [r2, #12]
  HAL_UART_TxCpltCallback(huart);
 8004190:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 8004192:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 8004196:	f000 ffc7 	bl	8005128 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 800419a:	e746      	b.n	800402a <HAL_UART_IRQHandler+0x3a>
}
 800419c:	b002      	add	sp, #8
 800419e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80041a2:	f7ff bec3 	b.w	8003f2c <UART_Receive_IT.isra.0>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80041a6:	05f0      	lsls	r0, r6, #23
 80041a8:	d4ab      	bmi.n	8004102 <HAL_UART_IRQHandler+0x112>
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041aa:	075a      	lsls	r2, r3, #29
 80041ac:	d41c      	bmi.n	80041e8 <HAL_UART_IRQHandler+0x1f8>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041ae:	0798      	lsls	r0, r3, #30
 80041b0:	d50c      	bpl.n	80041cc <HAL_UART_IRQHandler+0x1dc>
 80041b2:	2900      	cmp	r1, #0
 80041b4:	d0af      	beq.n	8004116 <HAL_UART_IRQHandler+0x126>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041b6:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80041b8:	f042 0204 	orr.w	r2, r2, #4
 80041bc:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80041be:	071a      	lsls	r2, r3, #28
 80041c0:	d5ac      	bpl.n	800411c <HAL_UART_IRQHandler+0x12c>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041c2:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80041c4:	f042 0208 	orr.w	r2, r2, #8
 80041c8:	6462      	str	r2, [r4, #68]	@ 0x44
 80041ca:	e7a7      	b.n	800411c <HAL_UART_IRQHandler+0x12c>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80041cc:	0718      	lsls	r0, r3, #28
 80041ce:	d5a5      	bpl.n	800411c <HAL_UART_IRQHandler+0x12c>
 80041d0:	f006 0220 	and.w	r2, r6, #32
 80041d4:	430a      	orrs	r2, r1
 80041d6:	d1f4      	bne.n	80041c2 <HAL_UART_IRQHandler+0x1d2>
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041d8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1a6      	bne.n	800412c <HAL_UART_IRQHandler+0x13c>
 80041de:	e724      	b.n	800402a <HAL_UART_IRQHandler+0x3a>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80041e0:	07da      	lsls	r2, r3, #31
 80041e2:	d4e0      	bmi.n	80041a6 <HAL_UART_IRQHandler+0x1b6>
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041e4:	0758      	lsls	r0, r3, #29
 80041e6:	d538      	bpl.n	800425a <HAL_UART_IRQHandler+0x26a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80041e8:	6c62      	ldr	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041ea:	0799      	lsls	r1, r3, #30
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80041ec:	f042 0202 	orr.w	r2, r2, #2
 80041f0:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041f2:	d4e0      	bmi.n	80041b6 <HAL_UART_IRQHandler+0x1c6>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80041f4:	071a      	lsls	r2, r3, #28
 80041f6:	d4e4      	bmi.n	80041c2 <HAL_UART_IRQHandler+0x1d2>
 80041f8:	e790      	b.n	800411c <HAL_UART_IRQHandler+0x12c>
        UART_EndRxTransfer(huart);
 80041fa:	f7ff fd11 	bl	8003c20 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041fe:	696b      	ldr	r3, [r5, #20]
 8004200:	065e      	lsls	r6, r3, #25
 8004202:	d526      	bpl.n	8004252 <HAL_UART_IRQHandler+0x262>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004204:	f105 0314 	add.w	r3, r5, #20
 8004208:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800420c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004210:	f105 0114 	add.w	r1, r5, #20
 8004214:	e841 3200 	strex	r2, r3, [r1]
 8004218:	b162      	cbz	r2, 8004234 <HAL_UART_IRQHandler+0x244>
 800421a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800421c:	f102 0314 	add.w	r3, r2, #20
 8004220:	e853 3f00 	ldrex	r3, [r3]
 8004224:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004228:	f102 0014 	add.w	r0, r2, #20
 800422c:	e840 3100 	strex	r1, r3, [r0]
 8004230:	2900      	cmp	r1, #0
 8004232:	d1f3      	bne.n	800421c <HAL_UART_IRQHandler+0x22c>
          if (huart->hdmarx != NULL)
 8004234:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004236:	b160      	cbz	r0, 8004252 <HAL_UART_IRQHandler+0x262>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004238:	4b36      	ldr	r3, [pc, #216]	@ (8004314 <HAL_UART_IRQHandler+0x324>)
 800423a:	6503      	str	r3, [r0, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800423c:	f7fd fe0e 	bl	8001e5c <HAL_DMA_Abort_IT>
 8004240:	2800      	cmp	r0, #0
 8004242:	f43f aef2 	beq.w	800402a <HAL_UART_IRQHandler+0x3a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004246:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004248:	6d03      	ldr	r3, [r0, #80]	@ 0x50
}
 800424a:	b002      	add	sp, #8
 800424c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004250:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8004252:	4620      	mov	r0, r4
 8004254:	f7ff fe5e 	bl	8003f14 <HAL_UART_ErrorCallback>
 8004258:	e6e7      	b.n	800402a <HAL_UART_IRQHandler+0x3a>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800425a:	0799      	lsls	r1, r3, #30
 800425c:	d4ab      	bmi.n	80041b6 <HAL_UART_IRQHandler+0x1c6>
 800425e:	e7c9      	b.n	80041f4 <HAL_UART_IRQHandler+0x204>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004260:	06b2      	lsls	r2, r6, #26
 8004262:	d4ae      	bmi.n	80041c2 <HAL_UART_IRQHandler+0x1d2>
 8004264:	e7b8      	b.n	80041d8 <HAL_UART_IRQHandler+0x1e8>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004266:	8de0      	ldrh	r0, [r4, #46]	@ 0x2e
      if ((huart->RxXferCount > 0U)
 8004268:	8de1      	ldrh	r1, [r4, #46]	@ 0x2e
 800426a:	b289      	uxth	r1, r1
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800426c:	b280      	uxth	r0, r0
      if ((huart->RxXferCount > 0U)
 800426e:	2900      	cmp	r1, #0
 8004270:	f43f aedb 	beq.w	800402a <HAL_UART_IRQHandler+0x3a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004274:	1a1b      	subs	r3, r3, r0
 8004276:	b299      	uxth	r1, r3
          && (nb_rx_data > 0U))
 8004278:	2900      	cmp	r1, #0
 800427a:	f43f aed6 	beq.w	800402a <HAL_UART_IRQHandler+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427e:	f102 030c 	add.w	r3, r2, #12
 8004282:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004286:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800428a:	f102 050c 	add.w	r5, r2, #12
 800428e:	e845 3000 	strex	r0, r3, [r5]
 8004292:	2800      	cmp	r0, #0
 8004294:	d1f3      	bne.n	800427e <HAL_UART_IRQHandler+0x28e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004296:	f102 0314 	add.w	r3, r2, #20
 800429a:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800429e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a2:	f102 0514 	add.w	r5, r2, #20
 80042a6:	e845 3000 	strex	r0, r3, [r5]
 80042aa:	2800      	cmp	r0, #0
 80042ac:	d1f3      	bne.n	8004296 <HAL_UART_IRQHandler+0x2a6>
        huart->RxState = HAL_UART_STATE_READY;
 80042ae:	2320      	movs	r3, #32
 80042b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042b4:	6320      	str	r0, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b6:	f102 030c 	add.w	r3, r2, #12
 80042ba:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042be:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c2:	f102 050c 	add.w	r5, r2, #12
 80042c6:	e845 3000 	strex	r0, r3, [r5]
 80042ca:	2800      	cmp	r0, #0
 80042cc:	d1f3      	bne.n	80042b6 <HAL_UART_IRQHandler+0x2c6>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80042ce:	2302      	movs	r3, #2
 80042d0:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80042d2:	4620      	mov	r0, r4
 80042d4:	f7ff fe28 	bl	8003f28 <HAL_UARTEx_RxEventCallback>
 80042d8:	e6a7      	b.n	800402a <HAL_UART_IRQHandler+0x3a>
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042da:	075a      	lsls	r2, r3, #29
 80042dc:	f53f af19 	bmi.w	8004112 <HAL_UART_IRQHandler+0x122>
 80042e0:	e765      	b.n	80041ae <HAL_UART_IRQHandler+0x1be>
        UART_Receive_IT(huart);
 80042e2:	4620      	mov	r0, r4
 80042e4:	f7ff fe22 	bl	8003f2c <UART_Receive_IT.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80042e8:	6825      	ldr	r5, [r4, #0]
 80042ea:	e71f      	b.n	800412c <HAL_UART_IRQHandler+0x13c>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80042ec:	4299      	cmp	r1, r3
 80042ee:	f47f ae9c 	bne.w	800402a <HAL_UART_IRQHandler+0x3a>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80042f2:	69c3      	ldr	r3, [r0, #28]
 80042f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042f8:	f47f ae97 	bne.w	800402a <HAL_UART_IRQHandler+0x3a>
 80042fc:	e7e7      	b.n	80042ce <HAL_UART_IRQHandler+0x2de>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042fe:	6921      	ldr	r1, [r4, #16]
 8004300:	2900      	cmp	r1, #0
 8004302:	f47f af2c 	bne.w	800415e <HAL_UART_IRQHandler+0x16e>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004306:	f833 1b02 	ldrh.w	r1, [r3], #2
 800430a:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800430e:	6051      	str	r1, [r2, #4]
      huart->pTxBuffPtr += 2U;
 8004310:	6223      	str	r3, [r4, #32]
 8004312:	e728      	b.n	8004166 <HAL_UART_IRQHandler+0x176>
 8004314:	08003f19 	.word	0x08003f19

08004318 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004318:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800431a:	2300      	movs	r3, #0
 800431c:	9301      	str	r3, [sp, #4]
 800431e:	e002      	b.n	8004326 <USB_CoreReset+0xe>

    if (count > HAL_USB_TIMEOUT)
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004320:	6903      	ldr	r3, [r0, #16]
 8004322:	2b00      	cmp	r3, #0
 8004324:	db09      	blt.n	800433a <USB_CoreReset+0x22>
    count++;
 8004326:	9b01      	ldr	r3, [sp, #4]
 8004328:	3301      	adds	r3, #1
 800432a:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 800432c:	9b01      	ldr	r3, [sp, #4]
 800432e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004332:	d9f5      	bls.n	8004320 <USB_CoreReset+0x8>
      return HAL_TIMEOUT;
 8004334:	2003      	movs	r0, #3
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);

  return HAL_OK;
}
 8004336:	b002      	add	sp, #8
 8004338:	4770      	bx	lr
  count = 10U;
 800433a:	230a      	movs	r3, #10
 800433c:	9301      	str	r3, [sp, #4]
  while (count > 0U)
 800433e:	9b01      	ldr	r3, [sp, #4]
 8004340:	b12b      	cbz	r3, 800434e <USB_CoreReset+0x36>
    count--;
 8004342:	9b01      	ldr	r3, [sp, #4]
 8004344:	3b01      	subs	r3, #1
 8004346:	9301      	str	r3, [sp, #4]
  while (count > 0U)
 8004348:	9b01      	ldr	r3, [sp, #4]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1f9      	bne.n	8004342 <USB_CoreReset+0x2a>
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800434e:	6903      	ldr	r3, [r0, #16]
 8004350:	f043 0301 	orr.w	r3, r3, #1
 8004354:	6103      	str	r3, [r0, #16]
 8004356:	e003      	b.n	8004360 <USB_CoreReset+0x48>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004358:	6903      	ldr	r3, [r0, #16]
 800435a:	f013 0301 	ands.w	r3, r3, #1
 800435e:	d007      	beq.n	8004370 <USB_CoreReset+0x58>
    count++;
 8004360:	9b01      	ldr	r3, [sp, #4]
 8004362:	3301      	adds	r3, #1
 8004364:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8004366:	9b01      	ldr	r3, [sp, #4]
 8004368:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800436c:	d9f4      	bls.n	8004358 <USB_CoreReset+0x40>
 800436e:	e7e1      	b.n	8004334 <USB_CoreReset+0x1c>
  return HAL_OK;
 8004370:	4618      	mov	r0, r3
}
 8004372:	b002      	add	sp, #8
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop

08004378 <USB_CoreInit>:
{
 8004378:	b084      	sub	sp, #16
 800437a:	b510      	push	{r4, lr}
 800437c:	f10d 0c0c 	add.w	ip, sp, #12
 8004380:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004384:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8004388:	2b01      	cmp	r3, #1
{
 800438a:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800438c:	d124      	bne.n	80043d8 <USB_CoreInit+0x60>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800438e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
    if (cfg.use_external_vbus == 1U)
 8004390:	f89d 2018 	ldrb.w	r2, [sp, #24]
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004394:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004398:	6383      	str	r3, [r0, #56]	@ 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800439a:	68c3      	ldr	r3, [r0, #12]
 800439c:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80043a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043a4:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80043a6:	68c3      	ldr	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 80043a8:	2a01      	cmp	r2, #1
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80043aa:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80043ae:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 80043b0:	d025      	beq.n	80043fe <USB_CoreInit+0x86>
    ret = USB_CoreReset(USBx);
 80043b2:	4620      	mov	r0, r4
 80043b4:	f7ff ffb0 	bl	8004318 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 80043b8:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d107      	bne.n	80043d0 <USB_CoreInit+0x58>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80043c0:	68a3      	ldr	r3, [r4, #8]
 80043c2:	f043 0306 	orr.w	r3, r3, #6
 80043c6:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80043c8:	68a3      	ldr	r3, [r4, #8]
 80043ca:	f043 0320 	orr.w	r3, r3, #32
 80043ce:	60a3      	str	r3, [r4, #8]
}
 80043d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043d4:	b004      	add	sp, #16
 80043d6:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80043d8:	68c3      	ldr	r3, [r0, #12]
 80043da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80043de:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 80043e0:	f7ff ff9a 	bl	8004318 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 80043e4:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80043e8:	b923      	cbnz	r3, 80043f4 <USB_CoreInit+0x7c>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80043ea:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80043ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043f0:	63a3      	str	r3, [r4, #56]	@ 0x38
 80043f2:	e7e1      	b.n	80043b8 <USB_CoreInit+0x40>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80043f4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80043f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043fa:	63a3      	str	r3, [r4, #56]	@ 0x38
 80043fc:	e7dc      	b.n	80043b8 <USB_CoreInit+0x40>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80043fe:	68c3      	ldr	r3, [r0, #12]
 8004400:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004404:	60c3      	str	r3, [r0, #12]
 8004406:	e7d4      	b.n	80043b2 <USB_CoreInit+0x3a>

08004408 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8004408:	2a02      	cmp	r2, #2
{
 800440a:	4603      	mov	r3, r0
  if (speed == USBD_FS_SPEED)
 800440c:	d00a      	beq.n	8004424 <USB_SetTurnaroundTime+0x1c>
 800440e:	f44f 5110 	mov.w	r1, #9216	@ 0x2400
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004412:	68da      	ldr	r2, [r3, #12]
 8004414:	f422 5270 	bic.w	r2, r2, #15360	@ 0x3c00
 8004418:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800441a:	68da      	ldr	r2, [r3, #12]
 800441c:	430a      	orrs	r2, r1
}
 800441e:	2000      	movs	r0, #0
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004420:	60da      	str	r2, [r3, #12]
}
 8004422:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004424:	4a26      	ldr	r2, [pc, #152]	@ (80044c0 <USB_SetTurnaroundTime+0xb8>)
 8004426:	4827      	ldr	r0, [pc, #156]	@ (80044c4 <USB_SetTurnaroundTime+0xbc>)
 8004428:	440a      	add	r2, r1
 800442a:	4282      	cmp	r2, r0
 800442c:	d932      	bls.n	8004494 <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800442e:	4a26      	ldr	r2, [pc, #152]	@ (80044c8 <USB_SetTurnaroundTime+0xc0>)
 8004430:	4826      	ldr	r0, [pc, #152]	@ (80044cc <USB_SetTurnaroundTime+0xc4>)
 8004432:	440a      	add	r2, r1
 8004434:	4282      	cmp	r2, r0
 8004436:	d930      	bls.n	800449a <USB_SetTurnaroundTime+0x92>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004438:	4825      	ldr	r0, [pc, #148]	@ (80044d0 <USB_SetTurnaroundTime+0xc8>)
 800443a:	f5a1 0274 	sub.w	r2, r1, #15990784	@ 0xf40000
 800443e:	f5a2 5210 	sub.w	r2, r2, #9216	@ 0x2400
 8004442:	4282      	cmp	r2, r0
 8004444:	d92c      	bls.n	80044a0 <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004446:	4823      	ldr	r0, [pc, #140]	@ (80044d4 <USB_SetTurnaroundTime+0xcc>)
 8004448:	f1a1 7283 	sub.w	r2, r1, #17170432	@ 0x1060000
 800444c:	f5a2 42e7 	sub.w	r2, r2, #29568	@ 0x7380
 8004450:	4282      	cmp	r2, r0
 8004452:	d328      	bcc.n	80044a6 <USB_SetTurnaroundTime+0x9e>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004454:	4a20      	ldr	r2, [pc, #128]	@ (80044d8 <USB_SetTurnaroundTime+0xd0>)
 8004456:	4821      	ldr	r0, [pc, #132]	@ (80044dc <USB_SetTurnaroundTime+0xd4>)
 8004458:	440a      	add	r2, r1
 800445a:	4282      	cmp	r2, r0
 800445c:	d926      	bls.n	80044ac <USB_SetTurnaroundTime+0xa4>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800445e:	4a20      	ldr	r2, [pc, #128]	@ (80044e0 <USB_SetTurnaroundTime+0xd8>)
 8004460:	4820      	ldr	r0, [pc, #128]	@ (80044e4 <USB_SetTurnaroundTime+0xdc>)
 8004462:	440a      	add	r2, r1
 8004464:	4282      	cmp	r2, r0
 8004466:	d324      	bcc.n	80044b2 <USB_SetTurnaroundTime+0xaa>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004468:	4a1f      	ldr	r2, [pc, #124]	@ (80044e8 <USB_SetTurnaroundTime+0xe0>)
 800446a:	4820      	ldr	r0, [pc, #128]	@ (80044ec <USB_SetTurnaroundTime+0xe4>)
 800446c:	440a      	add	r2, r1
 800446e:	4282      	cmp	r2, r0
 8004470:	d3cd      	bcc.n	800440e <USB_SetTurnaroundTime+0x6>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004472:	481f      	ldr	r0, [pc, #124]	@ (80044f0 <USB_SetTurnaroundTime+0xe8>)
 8004474:	f1a1 72b7 	sub.w	r2, r1, #23986176	@ 0x16e0000
 8004478:	f5a2 5258 	sub.w	r2, r2, #13824	@ 0x3600
 800447c:	4282      	cmp	r2, r0
 800447e:	d31b      	bcc.n	80044b8 <USB_SetTurnaroundTime+0xb0>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004480:	4a1c      	ldr	r2, [pc, #112]	@ (80044f4 <USB_SetTurnaroundTime+0xec>)
 8004482:	481d      	ldr	r0, [pc, #116]	@ (80044f8 <USB_SetTurnaroundTime+0xf0>)
 8004484:	440a      	add	r2, r1
 8004486:	4282      	cmp	r2, r0
 8004488:	bf2c      	ite	cs
 800448a:	f44f 51c0 	movcs.w	r1, #6144	@ 0x1800
 800448e:	f44f 51e0 	movcc.w	r1, #7168	@ 0x1c00
 8004492:	e7be      	b.n	8004412 <USB_SetTurnaroundTime+0xa>
 8004494:	f44f 5170 	mov.w	r1, #15360	@ 0x3c00
 8004498:	e7bb      	b.n	8004412 <USB_SetTurnaroundTime+0xa>
 800449a:	f44f 5160 	mov.w	r1, #14336	@ 0x3800
 800449e:	e7b8      	b.n	8004412 <USB_SetTurnaroundTime+0xa>
 80044a0:	f44f 5150 	mov.w	r1, #13312	@ 0x3400
 80044a4:	e7b5      	b.n	8004412 <USB_SetTurnaroundTime+0xa>
 80044a6:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80044aa:	e7b2      	b.n	8004412 <USB_SetTurnaroundTime+0xa>
 80044ac:	f44f 5130 	mov.w	r1, #11264	@ 0x2c00
 80044b0:	e7af      	b.n	8004412 <USB_SetTurnaroundTime+0xa>
 80044b2:	f44f 5120 	mov.w	r1, #10240	@ 0x2800
 80044b6:	e7ac      	b.n	8004412 <USB_SetTurnaroundTime+0xa>
 80044b8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80044bc:	e7a9      	b.n	8004412 <USB_SetTurnaroundTime+0xa>
 80044be:	bf00      	nop
 80044c0:	ff275340 	.word	0xff275340
 80044c4:	000c34ff 	.word	0x000c34ff
 80044c8:	ff1b1e40 	.word	0xff1b1e40
 80044cc:	000f423f 	.word	0x000f423f
 80044d0:	00124f7f 	.word	0x00124f7f
 80044d4:	0013d620 	.word	0x0013d620
 80044d8:	fee5b660 	.word	0xfee5b660
 80044dc:	0016e35f 	.word	0x0016e35f
 80044e0:	feced300 	.word	0xfeced300
 80044e4:	001b7740 	.word	0x001b7740
 80044e8:	feb35bc0 	.word	0xfeb35bc0
 80044ec:	002191c0 	.word	0x002191c0
 80044f0:	00387520 	.word	0x00387520
 80044f4:	fe5954e0 	.word	0xfe5954e0
 80044f8:	00419ce0 	.word	0x00419ce0

080044fc <USB_EnableGlobalInt>:
{
 80044fc:	4603      	mov	r3, r0
}
 80044fe:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004500:	689a      	ldr	r2, [r3, #8]
 8004502:	f042 0201 	orr.w	r2, r2, #1
 8004506:	609a      	str	r2, [r3, #8]
}
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop

0800450c <USB_DisableGlobalInt>:
{
 800450c:	4603      	mov	r3, r0
}
 800450e:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004510:	689a      	ldr	r2, [r3, #8]
 8004512:	f022 0201 	bic.w	r2, r2, #1
 8004516:	609a      	str	r2, [r3, #8]
}
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop

0800451c <USB_SetCurrentMode>:
{
 800451c:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800451e:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8004520:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004522:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
{
 8004526:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004528:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800452a:	d018      	beq.n	800455e <USB_SetCurrentMode+0x42>
  else if (mode == USB_DEVICE_MODE)
 800452c:	b9a9      	cbnz	r1, 800455a <USB_SetCurrentMode+0x3e>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800452e:	68c3      	ldr	r3, [r0, #12]
 8004530:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
  uint32_t ms = 0U;
 8004534:	460c      	mov	r4, r1
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004536:	60c3      	str	r3, [r0, #12]
 8004538:	e001      	b.n	800453e <USB_SetCurrentMode+0x22>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800453a:	2cc8      	cmp	r4, #200	@ 0xc8
 800453c:	d00d      	beq.n	800455a <USB_SetCurrentMode+0x3e>
      HAL_Delay(10U);
 800453e:	200a      	movs	r0, #10
 8004540:	f7fc ff0e 	bl	8001360 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8004544:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004546:	07db      	lsls	r3, r3, #31
      ms += 10U;
 8004548:	f104 040a 	add.w	r4, r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800454c:	d4f5      	bmi.n	800453a <USB_SetCurrentMode+0x1e>
  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800454e:	f1a4 00c8 	sub.w	r0, r4, #200	@ 0xc8
 8004552:	fab0 f080 	clz	r0, r0
 8004556:	0940      	lsrs	r0, r0, #5
}
 8004558:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800455a:	2001      	movs	r0, #1
}
 800455c:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800455e:	68c3      	ldr	r3, [r0, #12]
 8004560:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
  uint32_t ms = 0U;
 8004564:	2400      	movs	r4, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004566:	60c3      	str	r3, [r0, #12]
 8004568:	e001      	b.n	800456e <USB_SetCurrentMode+0x52>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800456a:	2cc8      	cmp	r4, #200	@ 0xc8
 800456c:	d0f5      	beq.n	800455a <USB_SetCurrentMode+0x3e>
      HAL_Delay(10U);
 800456e:	200a      	movs	r0, #10
 8004570:	f7fc fef6 	bl	8001360 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8004574:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004576:	07da      	lsls	r2, r3, #31
      ms += 10U;
 8004578:	f104 040a 	add.w	r4, r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800457c:	d5f5      	bpl.n	800456a <USB_SetCurrentMode+0x4e>
  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800457e:	f1a4 00c8 	sub.w	r0, r4, #200	@ 0xc8
 8004582:	fab0 f080 	clz	r0, r0
 8004586:	0940      	lsrs	r0, r0, #5
 8004588:	e7e6      	b.n	8004558 <USB_SetCurrentMode+0x3c>
 800458a:	bf00      	nop

0800458c <USB_FlushTxFifo>:
{
 800458c:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800458e:	2300      	movs	r3, #0
 8004590:	9301      	str	r3, [sp, #4]
 8004592:	e002      	b.n	800459a <USB_FlushTxFifo+0xe>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004594:	6903      	ldr	r3, [r0, #16]
 8004596:	2b00      	cmp	r3, #0
 8004598:	db09      	blt.n	80045ae <USB_FlushTxFifo+0x22>
    count++;
 800459a:	9b01      	ldr	r3, [sp, #4]
 800459c:	3301      	adds	r3, #1
 800459e:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 80045a0:	9b01      	ldr	r3, [sp, #4]
 80045a2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80045a6:	d9f5      	bls.n	8004594 <USB_FlushTxFifo+0x8>
      return HAL_TIMEOUT;
 80045a8:	2003      	movs	r0, #3
}
 80045aa:	b002      	add	sp, #8
 80045ac:	4770      	bx	lr
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80045ae:	0189      	lsls	r1, r1, #6
  count = 0U;
 80045b0:	2300      	movs	r3, #0
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80045b2:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
 80045b6:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80045b8:	6101      	str	r1, [r0, #16]
 80045ba:	e003      	b.n	80045c4 <USB_FlushTxFifo+0x38>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80045bc:	6903      	ldr	r3, [r0, #16]
 80045be:	f013 0320 	ands.w	r3, r3, #32
 80045c2:	d007      	beq.n	80045d4 <USB_FlushTxFifo+0x48>
    count++;
 80045c4:	9b01      	ldr	r3, [sp, #4]
 80045c6:	3301      	adds	r3, #1
 80045c8:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 80045ca:	9b01      	ldr	r3, [sp, #4]
 80045cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80045d0:	d9f4      	bls.n	80045bc <USB_FlushTxFifo+0x30>
 80045d2:	e7e9      	b.n	80045a8 <USB_FlushTxFifo+0x1c>
  return HAL_OK;
 80045d4:	4618      	mov	r0, r3
}
 80045d6:	b002      	add	sp, #8
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop

080045dc <USB_FlushRxFifo>:
{
 80045dc:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80045de:	2300      	movs	r3, #0
 80045e0:	9301      	str	r3, [sp, #4]
 80045e2:	e002      	b.n	80045ea <USB_FlushRxFifo+0xe>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80045e4:	6903      	ldr	r3, [r0, #16]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	db09      	blt.n	80045fe <USB_FlushRxFifo+0x22>
    count++;
 80045ea:	9b01      	ldr	r3, [sp, #4]
 80045ec:	3301      	adds	r3, #1
 80045ee:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 80045f0:	9b01      	ldr	r3, [sp, #4]
 80045f2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80045f6:	d9f5      	bls.n	80045e4 <USB_FlushRxFifo+0x8>
      return HAL_TIMEOUT;
 80045f8:	2003      	movs	r0, #3
}
 80045fa:	b002      	add	sp, #8
 80045fc:	4770      	bx	lr
  count = 0U;
 80045fe:	2200      	movs	r2, #0
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004600:	2310      	movs	r3, #16
  count = 0U;
 8004602:	9201      	str	r2, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004604:	6103      	str	r3, [r0, #16]
 8004606:	e003      	b.n	8004610 <USB_FlushRxFifo+0x34>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004608:	6903      	ldr	r3, [r0, #16]
 800460a:	f013 0310 	ands.w	r3, r3, #16
 800460e:	d007      	beq.n	8004620 <USB_FlushRxFifo+0x44>
    count++;
 8004610:	9b01      	ldr	r3, [sp, #4]
 8004612:	3301      	adds	r3, #1
 8004614:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8004616:	9b01      	ldr	r3, [sp, #4]
 8004618:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800461c:	d9f4      	bls.n	8004608 <USB_FlushRxFifo+0x2c>
 800461e:	e7eb      	b.n	80045f8 <USB_FlushRxFifo+0x1c>
  return HAL_OK;
 8004620:	4618      	mov	r0, r3
}
 8004622:	b002      	add	sp, #8
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop

08004628 <USB_DevInit>:
{
 8004628:	b084      	sub	sp, #16
 800462a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800462c:	ac07      	add	r4, sp, #28
 800462e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8004632:	2300      	movs	r3, #0
 8004634:	f89d 501c 	ldrb.w	r5, [sp, #28]
 8004638:	f89d 6026 	ldrb.w	r6, [sp, #38]	@ 0x26
{
 800463c:	4604      	mov	r4, r0
    USBx->DIEPTXF[i] = 0U;
 800463e:	4619      	mov	r1, r3
 8004640:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8004644:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 8004648:	3301      	adds	r3, #1
 800464a:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 800464c:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 800464e:	d1f7      	bne.n	8004640 <USB_DevInit+0x18>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004650:	f504 6700 	add.w	r7, r4, #2048	@ 0x800
  if (cfg.vbus_sensing_enable == 0U)
 8004654:	2e00      	cmp	r6, #0
 8004656:	f040 809f 	bne.w	8004798 <USB_DevInit+0x170>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f043 0302 	orr.w	r3, r3, #2
 8004660:	607b      	str	r3, [r7, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004662:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004664:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004668:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800466a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800466c:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8004670:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004672:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004674:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004678:	63a3      	str	r3, [r4, #56]	@ 0x38
  USBx_PCGCCTL = 0U;
 800467a:	2300      	movs	r3, #0
 800467c:	f8c4 3e00 	str.w	r3, [r4, #3584]	@ 0xe00
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004680:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 8004684:	2b01      	cmp	r3, #1
 8004686:	f000 8097 	beq.w	80047b8 <USB_DevInit+0x190>
  USBx_DEVICE->DCFG |= speed;
 800468a:	f8d4 3800 	ldr.w	r3, [r4, #2048]	@ 0x800
 800468e:	f043 0303 	orr.w	r3, r3, #3
 8004692:	f8c4 3800 	str.w	r3, [r4, #2048]	@ 0x800
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004696:	2110      	movs	r1, #16
 8004698:	4620      	mov	r0, r4
 800469a:	f7ff ff77 	bl	800458c <USB_FlushTxFifo>
 800469e:	4601      	mov	r1, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80046a0:	4620      	mov	r0, r4
 80046a2:	f7ff ff9b 	bl	80045dc <USB_FlushRxFifo>
 80046a6:	ea41 0e00 	orr.w	lr, r1, r0
 80046aa:	fa5f fe8e 	uxtb.w	lr, lr
  USBx_DEVICE->DIEPMSK = 0U;
 80046ae:	2200      	movs	r2, #0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80046b0:	f1be 0e00 	subs.w	lr, lr, #0
  USBx_DEVICE->DIEPMSK = 0U;
 80046b4:	613a      	str	r2, [r7, #16]
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80046b6:	bf18      	it	ne
 80046b8:	f04f 0e01 	movne.w	lr, #1
  USBx_DEVICE->DOEPMSK = 0U;
 80046bc:	617a      	str	r2, [r7, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80046be:	61fa      	str	r2, [r7, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046c0:	b305      	cbz	r5, 8004704 <USB_DevInit+0xdc>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80046c2:	f8d4 1900 	ldr.w	r1, [r4, #2304]	@ 0x900
 80046c6:	2900      	cmp	r1, #0
 80046c8:	f504 6310 	add.w	r3, r4, #2304	@ 0x900
 80046cc:	db15      	blt.n	80046fa <USB_DevInit+0xd2>
      USBx_INEP(i)->DIEPCTL = 0U;
 80046ce:	2100      	movs	r1, #0
 80046d0:	6019      	str	r1, [r3, #0]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 80046d2:	2000      	movs	r0, #0
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80046d4:	f64f 317f 	movw	r1, #64383	@ 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046d8:	3201      	adds	r2, #1
 80046da:	42aa      	cmp	r2, r5
    USBx_INEP(i)->DIEPTSIZ = 0U;
 80046dc:	6118      	str	r0, [r3, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80046de:	6099      	str	r1, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046e0:	f103 0320 	add.w	r3, r3, #32
 80046e4:	d036      	beq.n	8004754 <USB_DevInit+0x12c>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80046e6:	f8d3 c000 	ldr.w	ip, [r3]
 80046ea:	f1bc 0f00 	cmp.w	ip, #0
 80046ee:	daee      	bge.n	80046ce <USB_DevInit+0xa6>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80046f0:	f04f 4c90 	mov.w	ip, #1207959552	@ 0x48000000
 80046f4:	f8c3 c000 	str.w	ip, [r3]
 80046f8:	e7ee      	b.n	80046d8 <USB_DevInit+0xb0>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80046fa:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 80046fe:	f8c4 1900 	str.w	r1, [r4, #2304]	@ 0x900
 8004702:	e7e6      	b.n	80046d2 <USB_DevInit+0xaa>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800470a:	613b      	str	r3, [r7, #16]
  USBx->GINTMSK = 0U;
 800470c:	2200      	movs	r2, #0
  if (cfg.dma_enable == 0U)
 800470e:	f89d 301e 	ldrb.w	r3, [sp, #30]
  USBx->GINTMSK = 0U;
 8004712:	61a2      	str	r2, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004714:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004718:	6162      	str	r2, [r4, #20]
  if (cfg.dma_enable == 0U)
 800471a:	b91b      	cbnz	r3, 8004724 <USB_DevInit+0xfc>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800471c:	69a3      	ldr	r3, [r4, #24]
 800471e:	f043 0310 	orr.w	r3, r3, #16
 8004722:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004724:	69a2      	ldr	r2, [r4, #24]
 8004726:	4b2c      	ldr	r3, [pc, #176]	@ (80047d8 <USB_DevInit+0x1b0>)
 8004728:	4313      	orrs	r3, r2
  if (cfg.Sof_enable != 0U)
 800472a:	f89d 2022 	ldrb.w	r2, [sp, #34]	@ 0x22
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800472e:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8004730:	b11a      	cbz	r2, 800473a <USB_DevInit+0x112>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004732:	69a3      	ldr	r3, [r4, #24]
 8004734:	f043 0308 	orr.w	r3, r3, #8
 8004738:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800473a:	2e01      	cmp	r6, #1
 800473c:	d105      	bne.n	800474a <USB_DevInit+0x122>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800473e:	69a3      	ldr	r3, [r4, #24]
 8004740:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004744:	f043 0304 	orr.w	r3, r3, #4
 8004748:	61a3      	str	r3, [r4, #24]
}
 800474a:	4670      	mov	r0, lr
 800474c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004750:	b004      	add	sp, #16
 8004752:	4770      	bx	lr
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004754:	f8d4 2b00 	ldr.w	r2, [r4, #2816]	@ 0xb00
 8004758:	2a00      	cmp	r2, #0
 800475a:	f504 6330 	add.w	r3, r4, #2816	@ 0xb00
 800475e:	db15      	blt.n	800478c <USB_DevInit+0x164>
 8004760:	2200      	movs	r2, #0
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004762:	2100      	movs	r1, #0
 8004764:	6019      	str	r1, [r3, #0]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004766:	f04f 0c00 	mov.w	ip, #0
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800476a:	f64f 307f 	movw	r0, #64383	@ 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800476e:	3201      	adds	r2, #1
 8004770:	42aa      	cmp	r2, r5
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004772:	f8c3 c010 	str.w	ip, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004776:	6098      	str	r0, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004778:	f103 0320 	add.w	r3, r3, #32
 800477c:	d0c2      	beq.n	8004704 <USB_DevInit+0xdc>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800477e:	6819      	ldr	r1, [r3, #0]
 8004780:	2900      	cmp	r1, #0
 8004782:	daee      	bge.n	8004762 <USB_DevInit+0x13a>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004784:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 8004788:	6019      	str	r1, [r3, #0]
 800478a:	e7f0      	b.n	800476e <USB_DevInit+0x146>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800478c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004790:	f8c4 2b00 	str.w	r2, [r4, #2816]	@ 0xb00
 8004794:	2200      	movs	r2, #0
 8004796:	e7e6      	b.n	8004766 <USB_DevInit+0x13e>
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004798:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800479a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800479e:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80047a0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80047a2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80047a6:	63a3      	str	r3, [r4, #56]	@ 0x38
  USBx_PCGCCTL = 0U;
 80047a8:	2300      	movs	r3, #0
 80047aa:	f8c4 3e00 	str.w	r3, [r4, #3584]	@ 0xe00
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80047ae:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	f47f af69 	bne.w	800468a <USB_DevInit+0x62>
    if (cfg.speed == USBD_HS_SPEED)
 80047b8:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80047bc:	b923      	cbnz	r3, 80047c8 <USB_DevInit+0x1a0>
  USBx_DEVICE->DCFG |= speed;
 80047be:	f8d4 3800 	ldr.w	r3, [r4, #2048]	@ 0x800
 80047c2:	f8c4 3800 	str.w	r3, [r4, #2048]	@ 0x800
  return HAL_OK;
 80047c6:	e766      	b.n	8004696 <USB_DevInit+0x6e>
  USBx_DEVICE->DCFG |= speed;
 80047c8:	f8d4 3800 	ldr.w	r3, [r4, #2048]	@ 0x800
 80047cc:	f043 0301 	orr.w	r3, r3, #1
 80047d0:	f8c4 3800 	str.w	r3, [r4, #2048]	@ 0x800
  return HAL_OK;
 80047d4:	e75f      	b.n	8004696 <USB_DevInit+0x6e>
 80047d6:	bf00      	nop
 80047d8:	803c3800 	.word	0x803c3800

080047dc <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80047dc:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80047e0:	f013 0006 	ands.w	r0, r3, #6
 80047e4:	d004      	beq.n	80047f0 <USB_GetDevSpeed+0x14>
    speed = 0xFU;
 80047e6:	f013 0f02 	tst.w	r3, #2
 80047ea:	bf14      	ite	ne
 80047ec:	2002      	movne	r0, #2
 80047ee:	200f      	moveq	r0, #15
}
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop

080047f4 <USB_ActivateEndpoint>:
{
 80047f4:	b510      	push	{r4, lr}
  uint32_t epnum = (uint32_t)ep->num;
 80047f6:	780a      	ldrb	r2, [r1, #0]
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80047f8:	2301      	movs	r3, #1
 80047fa:	f002 0e0f 	and.w	lr, r2, #15
 80047fe:	fa03 f30e 	lsl.w	r3, r3, lr
  if (ep->is_in == 1U)
 8004802:	f891 e001 	ldrb.w	lr, [r1, #1]
 8004806:	f1be 0f01 	cmp.w	lr, #1
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800480a:	f500 6c00 	add.w	ip, r0, #2048	@ 0x800
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800480e:	eb00 1042 	add.w	r0, r0, r2, lsl #5
  if (ep->is_in == 1U)
 8004812:	d01a      	beq.n	800484a <USB_ActivateEndpoint+0x56>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004814:	f8dc 201c 	ldr.w	r2, [ip, #28]
 8004818:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 800481c:	f8cc 301c 	str.w	r3, [ip, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004820:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8004824:	041b      	lsls	r3, r3, #16
 8004826:	d40e      	bmi.n	8004846 <USB_ActivateEndpoint+0x52>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004828:	688b      	ldr	r3, [r1, #8]
 800482a:	f8d0 4b00 	ldr.w	r4, [r0, #2816]	@ 0xb00
                                    ((uint32_t)ep->type << 18) |
 800482e:	790a      	ldrb	r2, [r1, #4]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004830:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004834:	4323      	orrs	r3, r4
 8004836:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 800483a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800483e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004842:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 8004846:	2000      	movs	r0, #0
 8004848:	bd10      	pop	{r4, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800484a:	f8dc 401c 	ldr.w	r4, [ip, #28]
 800484e:	4323      	orrs	r3, r4
 8004850:	f8cc 301c 	str.w	r3, [ip, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004854:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8004858:	041c      	lsls	r4, r3, #16
 800485a:	d4f4      	bmi.n	8004846 <USB_ActivateEndpoint+0x52>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800485c:	688b      	ldr	r3, [r1, #8]
 800485e:	f8d0 4900 	ldr.w	r4, [r0, #2304]	@ 0x900
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004862:	7909      	ldrb	r1, [r1, #4]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004864:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004868:	4323      	orrs	r3, r4
 800486a:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 800486e:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
 8004872:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004876:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800487a:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
}
 800487e:	2000      	movs	r0, #0
 8004880:	bd10      	pop	{r4, pc}
 8004882:	bf00      	nop

08004884 <USB_DeactivateEndpoint>:
{
 8004884:	b410      	push	{r4}
  uint32_t epnum = (uint32_t)ep->num;
 8004886:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8004888:	7849      	ldrb	r1, [r1, #1]
 800488a:	2901      	cmp	r1, #1
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800488c:	eb00 1342 	add.w	r3, r0, r2, lsl #5
  if (ep->is_in == 1U)
 8004890:	d02c      	beq.n	80048ec <USB_DeactivateEndpoint+0x68>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004892:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 8004896:	2900      	cmp	r1, #0
 8004898:	db1b      	blt.n	80048d2 <USB_DeactivateEndpoint+0x4e>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800489a:	f8d0 483c 	ldr.w	r4, [r0, #2108]	@ 0x83c
 800489e:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 80048a2:	f002 020f 	and.w	r2, r2, #15
 80048a6:	fa01 f202 	lsl.w	r2, r1, r2
 80048aa:	ea24 0402 	bic.w	r4, r4, r2
 80048ae:	f8c0 483c 	str.w	r4, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80048b2:	f8d0 481c 	ldr.w	r4, [r0, #2076]	@ 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80048b6:	4922      	ldr	r1, [pc, #136]	@ (8004940 <USB_DeactivateEndpoint+0xbc>)
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80048b8:	ea24 0202 	bic.w	r2, r4, r2
 80048bc:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80048c0:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
}
 80048c4:	f85d 4b04 	ldr.w	r4, [sp], #4
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80048c8:	4011      	ands	r1, r2
}
 80048ca:	2000      	movs	r0, #0
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80048cc:	f8c3 1b00 	str.w	r1, [r3, #2816]	@ 0xb00
}
 80048d0:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80048d2:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 80048d6:	f041 6100 	orr.w	r1, r1, #134217728	@ 0x8000000
 80048da:	f8c3 1b00 	str.w	r1, [r3, #2816]	@ 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80048de:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 80048e2:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80048e6:	f8c3 1b00 	str.w	r1, [r3, #2816]	@ 0xb00
 80048ea:	e7d6      	b.n	800489a <USB_DeactivateEndpoint+0x16>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80048ec:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
 80048f0:	2900      	cmp	r1, #0
 80048f2:	da0b      	bge.n	800490c <USB_DeactivateEndpoint+0x88>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80048f4:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
 80048f8:	f041 6100 	orr.w	r1, r1, #134217728	@ 0x8000000
 80048fc:	f8c3 1900 	str.w	r1, [r3, #2304]	@ 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004900:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
 8004904:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8004908:	f8c3 1900 	str.w	r1, [r3, #2304]	@ 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800490c:	f8d0 183c 	ldr.w	r1, [r0, #2108]	@ 0x83c
 8004910:	f002 040f 	and.w	r4, r2, #15
 8004914:	2201      	movs	r2, #1
 8004916:	40a2      	lsls	r2, r4
 8004918:	ea21 0102 	bic.w	r1, r1, r2
 800491c:	f8c0 183c 	str.w	r1, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004920:	f8d0 481c 	ldr.w	r4, [r0, #2076]	@ 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004924:	4907      	ldr	r1, [pc, #28]	@ (8004944 <USB_DeactivateEndpoint+0xc0>)
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004926:	ea24 0202 	bic.w	r2, r4, r2
 800492a:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800492e:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
}
 8004932:	f85d 4b04 	ldr.w	r4, [sp], #4
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004936:	4011      	ands	r1, r2
}
 8004938:	2000      	movs	r0, #0
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800493a:	f8c3 1900 	str.w	r1, [r3, #2304]	@ 0x900
}
 800493e:	4770      	bx	lr
 8004940:	eff37800 	.word	0xeff37800
 8004944:	ec337800 	.word	0xec337800

08004948 <USB_EPStartXfer>:
{
 8004948:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (ep->is_in == 1U)
 800494c:	784c      	ldrb	r4, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800494e:	780e      	ldrb	r6, [r1, #0]
    if (ep->xfer_len == 0U)
 8004950:	690d      	ldr	r5, [r1, #16]
        if (ep->type == EP_TYPE_ISOC)
 8004952:	f891 e004 	ldrb.w	lr, [r1, #4]
  if (ep->is_in == 1U)
 8004956:	2c01      	cmp	r4, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004958:	eb00 1346 	add.w	r3, r0, r6, lsl #5
  if (ep->is_in == 1U)
 800495c:	d05b      	beq.n	8004a16 <USB_EPStartXfer+0xce>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800495e:	f8d3 4b10 	ldr.w	r4, [r3, #2832]	@ 0xb10
 8004962:	f36f 0412 	bfc	r4, #0, #19
 8004966:	f8c3 4b10 	str.w	r4, [r3, #2832]	@ 0xb10
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800496a:	f8d3 4b10 	ldr.w	r4, [r3, #2832]	@ 0xb10
 800496e:	f36f 44dc 	bfc	r4, #19, #10
 8004972:	f8c3 4b10 	str.w	r4, [r3, #2832]	@ 0xb10
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004976:	f503 6c30 	add.w	ip, r3, #2816	@ 0xb00
        ep->xfer_len = ep->maxpacket;
 800497a:	688c      	ldr	r4, [r1, #8]
    if (epnum == 0U)
 800497c:	bb56      	cbnz	r6, 80049d4 <USB_EPStartXfer+0x8c>
      if (ep->xfer_len > 0U)
 800497e:	b105      	cbz	r5, 8004982 <USB_EPStartXfer+0x3a>
        ep->xfer_len = ep->maxpacket;
 8004980:	610c      	str	r4, [r1, #16]
      ep->xfer_size = ep->maxpacket;
 8004982:	620c      	str	r4, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004984:	f8dc 5010 	ldr.w	r5, [ip, #16]
 8004988:	f3c4 0412 	ubfx	r4, r4, #0, #19
 800498c:	432c      	orrs	r4, r5
 800498e:	f8cc 4010 	str.w	r4, [ip, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004992:	f8dc 4010 	ldr.w	r4, [ip, #16]
    if (dma == 1U)
 8004996:	2a01      	cmp	r2, #1
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004998:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 800499c:	f8cc 4010 	str.w	r4, [ip, #16]
    if (dma == 1U)
 80049a0:	d033      	beq.n	8004a0a <USB_EPStartXfer+0xc2>
    if (ep->type == EP_TYPE_ISOC)
 80049a2:	f1be 0f01 	cmp.w	lr, #1
 80049a6:	d10c      	bne.n	80049c2 <USB_EPStartXfer+0x7a>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80049a8:	f8d0 2808 	ldr.w	r2, [r0, #2056]	@ 0x808
 80049ac:	f412 7f80 	tst.w	r2, #256	@ 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80049b0:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 80049b4:	bf0c      	ite	eq
 80049b6:	f042 5200 	orreq.w	r2, r2, #536870912	@ 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80049ba:	f042 5280 	orrne.w	r2, r2, #268435456	@ 0x10000000
 80049be:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80049c2:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 80049c6:	f042 4204 	orr.w	r2, r2, #2214592512	@ 0x84000000
 80049ca:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
}
 80049ce:	2000      	movs	r0, #0
 80049d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (ep->xfer_len == 0U)
 80049d4:	2d00      	cmp	r5, #0
 80049d6:	d0d5      	beq.n	8004984 <USB_EPStartXfer+0x3c>
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80049d8:	4e61      	ldr	r6, [pc, #388]	@ (8004b60 <USB_EPStartXfer+0x218>)
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80049da:	4425      	add	r5, r4
 80049dc:	3d01      	subs	r5, #1
 80049de:	fbb5 f5f4 	udiv	r5, r5, r4
 80049e2:	b2ad      	uxth	r5, r5
        ep->xfer_size = ep->maxpacket * pktcnt;
 80049e4:	fb05 f404 	mul.w	r4, r5, r4
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80049e8:	ea06 45c5 	and.w	r5, r6, r5, lsl #19
 80049ec:	f8dc 6010 	ldr.w	r6, [ip, #16]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80049f0:	620c      	str	r4, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80049f2:	4335      	orrs	r5, r6
 80049f4:	f8cc 5010 	str.w	r5, [ip, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80049f8:	f8dc 5010 	ldr.w	r5, [ip, #16]
 80049fc:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8004a00:	432c      	orrs	r4, r5
    if (dma == 1U)
 8004a02:	2a01      	cmp	r2, #1
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004a04:	f8cc 4010 	str.w	r4, [ip, #16]
    if (dma == 1U)
 8004a08:	d1cb      	bne.n	80049a2 <USB_EPStartXfer+0x5a>
      if ((uint32_t)ep->xfer_buff != 0U)
 8004a0a:	68ca      	ldr	r2, [r1, #12]
 8004a0c:	2a00      	cmp	r2, #0
 8004a0e:	d0c8      	beq.n	80049a2 <USB_EPStartXfer+0x5a>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004a10:	f8cc 2014 	str.w	r2, [ip, #20]
 8004a14:	e7c5      	b.n	80049a2 <USB_EPStartXfer+0x5a>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a16:	f503 6410 	add.w	r4, r3, #2304	@ 0x900
    if (ep->xfer_len == 0U)
 8004a1a:	b38d      	cbz	r5, 8004a80 <USB_EPStartXfer+0x138>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a1c:	6927      	ldr	r7, [r4, #16]
        if (ep->xfer_len > ep->maxpacket)
 8004a1e:	f8d1 9008 	ldr.w	r9, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a22:	f36f 0712 	bfc	r7, #0, #19
 8004a26:	6127      	str	r7, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a28:	6927      	ldr	r7, [r4, #16]
 8004a2a:	f36f 47dc 	bfc	r7, #19, #10
 8004a2e:	6127      	str	r7, [r4, #16]
      if (epnum == 0U)
 8004a30:	2e00      	cmp	r6, #0
 8004a32:	d14f      	bne.n	8004ad4 <USB_EPStartXfer+0x18c>
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004a34:	6927      	ldr	r7, [r4, #16]
        if (ep->xfer_len > ep->maxpacket)
 8004a36:	45a9      	cmp	r9, r5
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004a38:	f447 2700 	orr.w	r7, r7, #524288	@ 0x80000
          ep->xfer_len = ep->maxpacket;
 8004a3c:	bf3c      	itt	cc
 8004a3e:	f8c1 9010 	strcc.w	r9, [r1, #16]
 8004a42:	464d      	movcc	r5, r9
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004a44:	6127      	str	r7, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004a46:	6927      	ldr	r7, [r4, #16]
 8004a48:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8004a4c:	433d      	orrs	r5, r7
    if (dma == 1U)
 8004a4e:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004a50:	6125      	str	r5, [r4, #16]
    if (dma == 1U)
 8004a52:	d023      	beq.n	8004a9c <USB_EPStartXfer+0x154>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004a54:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
      if (ep->type != EP_TYPE_ISOC)
 8004a58:	f1be 0f01 	cmp.w	lr, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004a5c:	f044 4404 	orr.w	r4, r4, #2214592512	@ 0x84000000
 8004a60:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
        if (ep->xfer_len > 0U)
 8004a64:	690c      	ldr	r4, [r1, #16]
      if (ep->type != EP_TYPE_ISOC)
 8004a66:	d058      	beq.n	8004b1a <USB_EPStartXfer+0x1d2>
        if (ep->xfer_len > 0U)
 8004a68:	2c00      	cmp	r4, #0
 8004a6a:	d0b0      	beq.n	80049ce <USB_EPStartXfer+0x86>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004a6c:	f8d0 2834 	ldr.w	r2, [r0, #2100]	@ 0x834
 8004a70:	f006 060f 	and.w	r6, r6, #15
 8004a74:	2301      	movs	r3, #1
 8004a76:	40b3      	lsls	r3, r6
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	f8c0 3834 	str.w	r3, [r0, #2100]	@ 0x834
 8004a7e:	e7a6      	b.n	80049ce <USB_EPStartXfer+0x86>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a80:	6925      	ldr	r5, [r4, #16]
 8004a82:	f36f 45dc 	bfc	r5, #19, #10
 8004a86:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004a88:	6925      	ldr	r5, [r4, #16]
 8004a8a:	f445 2500 	orr.w	r5, r5, #524288	@ 0x80000
 8004a8e:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a90:	6925      	ldr	r5, [r4, #16]
    if (dma == 1U)
 8004a92:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a94:	f36f 0512 	bfc	r5, #0, #19
 8004a98:	6125      	str	r5, [r4, #16]
    if (dma == 1U)
 8004a9a:	d1db      	bne.n	8004a54 <USB_EPStartXfer+0x10c>
      if ((uint32_t)ep->dma_addr != 0U)
 8004a9c:	69ca      	ldr	r2, [r1, #28]
 8004a9e:	b102      	cbz	r2, 8004aa2 <USB_EPStartXfer+0x15a>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004aa0:	6162      	str	r2, [r4, #20]
      if (ep->type == EP_TYPE_ISOC)
 8004aa2:	f1be 0f01 	cmp.w	lr, #1
 8004aa6:	d10c      	bne.n	8004ac2 <USB_EPStartXfer+0x17a>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004aa8:	f8d0 2808 	ldr.w	r2, [r0, #2056]	@ 0x808
 8004aac:	f412 7f80 	tst.w	r2, #256	@ 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004ab0:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8004ab4:	bf0c      	ite	eq
 8004ab6:	f042 5200 	orreq.w	r2, r2, #536870912	@ 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004aba:	f042 5280 	orrne.w	r2, r2, #268435456	@ 0x10000000
 8004abe:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ac2:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8004ac6:	f042 4204 	orr.w	r2, r2, #2214592512	@ 0x84000000
 8004aca:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
}
 8004ace:	2000      	movs	r0, #0
 8004ad0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8004ad4:	4f22      	ldr	r7, [pc, #136]	@ (8004b60 <USB_EPStartXfer+0x218>)
 8004ad6:	f8d4 8010 	ldr.w	r8, [r4, #16]
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004ada:	eb09 0c05 	add.w	ip, r9, r5
 8004ade:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004ae2:	fbbc fcf9 	udiv	ip, ip, r9
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8004ae6:	ea07 47cc 	and.w	r7, r7, ip, lsl #19
 8004aea:	ea47 0708 	orr.w	r7, r7, r8
        if (ep->type == EP_TYPE_ISOC)
 8004aee:	f1be 0f01 	cmp.w	lr, #1
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8004af2:	6127      	str	r7, [r4, #16]
        if (ep->type == EP_TYPE_ISOC)
 8004af4:	fa1f fc8c 	uxth.w	ip, ip
 8004af8:	d1a5      	bne.n	8004a46 <USB_EPStartXfer+0xfe>
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8004afa:	ea4f 7c4c 	mov.w	ip, ip, lsl #29
 8004afe:	f00c 47c0 	and.w	r7, ip, #1610612736	@ 0x60000000
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004b02:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8004b06:	f02c 4cc0 	bic.w	ip, ip, #1610612736	@ 0x60000000
 8004b0a:	f8c4 c010 	str.w	ip, [r4, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8004b0e:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8004b12:	ea47 070c 	orr.w	r7, r7, ip
 8004b16:	6127      	str	r7, [r4, #16]
 8004b18:	e795      	b.n	8004a46 <USB_EPStartXfer+0xfe>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b1a:	f8d0 5808 	ldr.w	r5, [r0, #2056]	@ 0x808
 8004b1e:	f415 7f80 	tst.w	r5, #256	@ 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004b22:	f8d3 5900 	ldr.w	r5, [r3, #2304]	@ 0x900
 8004b26:	bf0c      	ite	eq
 8004b28:	f045 5500 	orreq.w	r5, r5, #536870912	@ 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004b2c:	f045 5580 	orrne.w	r5, r5, #268435456	@ 0x10000000
 8004b30:	f8c3 5900 	str.w	r5, [r3, #2304]	@ 0x900
  if (dma == 0U)
 8004b34:	2a00      	cmp	r2, #0
 8004b36:	f47f af4a 	bne.w	80049ce <USB_EPStartXfer+0x86>
    count32b = ((uint32_t)len + 3U) / 4U;
 8004b3a:	b2a3      	uxth	r3, r4
 8004b3c:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 8004b3e:	089b      	lsrs	r3, r3, #2
 8004b40:	f43f af45 	beq.w	80049ce <USB_EPStartXfer+0x86>
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004b44:	68ca      	ldr	r2, [r1, #12]
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004b46:	eb00 3606 	add.w	r6, r0, r6, lsl #12
 8004b4a:	f506 5680 	add.w	r6, r6, #4096	@ 0x1000
 8004b4e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004b52:	f852 1b04 	ldr.w	r1, [r2], #4
 8004b56:	6031      	str	r1, [r6, #0]
    for (i = 0U; i < count32b; i++)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d1fa      	bne.n	8004b52 <USB_EPStartXfer+0x20a>
 8004b5c:	e737      	b.n	80049ce <USB_EPStartXfer+0x86>
 8004b5e:	bf00      	nop
 8004b60:	1ff80000 	.word	0x1ff80000

08004b64 <USB_EPStopXfer>:
{
 8004b64:	b410      	push	{r4}
  if (ep->is_in == 1U)
 8004b66:	784a      	ldrb	r2, [r1, #1]
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b68:	780b      	ldrb	r3, [r1, #0]
{
 8004b6a:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 8004b6c:	2100      	movs	r1, #0
  if (ep->is_in == 1U)
 8004b6e:	2a01      	cmp	r2, #1
  __IO uint32_t count = 0U;
 8004b70:	9101      	str	r1, [sp, #4]
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b72:	ea4f 1343 	mov.w	r3, r3, lsl #5
  if (ep->is_in == 1U)
 8004b76:	d023      	beq.n	8004bc0 <USB_EPStopXfer+0x5c>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b78:	f500 6030 	add.w	r0, r0, #2816	@ 0xb00
 8004b7c:	18c2      	adds	r2, r0, r3
 8004b7e:	58c1      	ldr	r1, [r0, r3]
 8004b80:	2900      	cmp	r1, #0
 8004b82:	db04      	blt.n	8004b8e <USB_EPStopXfer+0x2a>
  HAL_StatusTypeDef ret = HAL_OK;
 8004b84:	2000      	movs	r0, #0
}
 8004b86:	b003      	add	sp, #12
 8004b88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b8c:	4770      	bx	lr
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004b8e:	58c4      	ldr	r4, [r0, r3]
 8004b90:	f044 6400 	orr.w	r4, r4, #134217728	@ 0x8000000
 8004b94:	50c4      	str	r4, [r0, r3]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004b96:	58c4      	ldr	r4, [r0, r3]
 8004b98:	f044 4480 	orr.w	r4, r4, #1073741824	@ 0x40000000
 8004b9c:	50c4      	str	r4, [r0, r3]
        if (count > 10000U)
 8004b9e:	f242 7110 	movw	r1, #10000	@ 0x2710
 8004ba2:	e002      	b.n	8004baa <USB_EPStopXfer+0x46>
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004ba4:	6813      	ldr	r3, [r2, #0]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	daec      	bge.n	8004b84 <USB_EPStopXfer+0x20>
        count++;
 8004baa:	9b01      	ldr	r3, [sp, #4]
 8004bac:	3301      	adds	r3, #1
 8004bae:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 8004bb0:	9b01      	ldr	r3, [sp, #4]
 8004bb2:	428b      	cmp	r3, r1
 8004bb4:	d9f6      	bls.n	8004ba4 <USB_EPStopXfer+0x40>
          ret = HAL_ERROR;
 8004bb6:	2001      	movs	r0, #1
}
 8004bb8:	b003      	add	sp, #12
 8004bba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004bbe:	4770      	bx	lr
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004bc0:	f500 6010 	add.w	r0, r0, #2304	@ 0x900
 8004bc4:	18c2      	adds	r2, r0, r3
 8004bc6:	58c1      	ldr	r1, [r0, r3]
 8004bc8:	2900      	cmp	r1, #0
 8004bca:	dadb      	bge.n	8004b84 <USB_EPStopXfer+0x20>
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004bcc:	58c4      	ldr	r4, [r0, r3]
 8004bce:	f044 6400 	orr.w	r4, r4, #134217728	@ 0x8000000
 8004bd2:	50c4      	str	r4, [r0, r3]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004bd4:	58c4      	ldr	r4, [r0, r3]
 8004bd6:	f044 4480 	orr.w	r4, r4, #1073741824	@ 0x40000000
 8004bda:	50c4      	str	r4, [r0, r3]
        if (count > 10000U)
 8004bdc:	f242 7110 	movw	r1, #10000	@ 0x2710
 8004be0:	e002      	b.n	8004be8 <USB_EPStopXfer+0x84>
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004be2:	6813      	ldr	r3, [r2, #0]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	dacd      	bge.n	8004b84 <USB_EPStopXfer+0x20>
        count++;
 8004be8:	9b01      	ldr	r3, [sp, #4]
 8004bea:	3301      	adds	r3, #1
 8004bec:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 8004bee:	9b01      	ldr	r3, [sp, #4]
 8004bf0:	428b      	cmp	r3, r1
 8004bf2:	d9f6      	bls.n	8004be2 <USB_EPStopXfer+0x7e>
 8004bf4:	e7df      	b.n	8004bb6 <USB_EPStopXfer+0x52>
 8004bf6:	bf00      	nop

08004bf8 <USB_WritePacket>:
{
 8004bf8:	b410      	push	{r4}
 8004bfa:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 8004bfe:	b964      	cbnz	r4, 8004c1a <USB_WritePacket+0x22>
    count32b = ((uint32_t)len + 3U) / 4U;
 8004c00:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 8004c02:	089b      	lsrs	r3, r3, #2
 8004c04:	d009      	beq.n	8004c1a <USB_WritePacket+0x22>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004c06:	3201      	adds	r2, #1
 8004c08:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 8004c0c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8004c10:	f851 2b04 	ldr.w	r2, [r1], #4
 8004c14:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 8004c16:	428b      	cmp	r3, r1
 8004c18:	d1fa      	bne.n	8004c10 <USB_WritePacket+0x18>
}
 8004c1a:	2000      	movs	r0, #0
 8004c1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop

08004c24 <USB_ReadPacket>:
{
 8004c24:	b570      	push	{r4, r5, r6, lr}
  for (i = 0U; i < count32b; i++)
 8004c26:	ea5f 0e92 	movs.w	lr, r2, lsr #2
{
 8004c2a:	4605      	mov	r5, r0
  uint16_t remaining_bytes = len % 4U;
 8004c2c:	f002 0603 	and.w	r6, r2, #3
  for (i = 0U; i < count32b; i++)
 8004c30:	d01a      	beq.n	8004c68 <USB_ReadPacket+0x44>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004c32:	f500 5480 	add.w	r4, r0, #4096	@ 0x1000
  uint8_t *pDest = dest;
 8004c36:	468c      	mov	ip, r1
  for (i = 0U; i < count32b; i++)
 8004c38:	2300      	movs	r3, #0
 8004c3a:	3301      	adds	r3, #1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004c3c:	6822      	ldr	r2, [r4, #0]
 8004c3e:	f84c 2b04 	str.w	r2, [ip], #4
  for (i = 0U; i < count32b; i++)
 8004c42:	459e      	cmp	lr, r3
 8004c44:	d1f9      	bne.n	8004c3a <USB_ReadPacket+0x16>
 8004c46:	eb01 008e 	add.w	r0, r1, lr, lsl #2
  if (remaining_bytes != 0U)
 8004c4a:	b166      	cbz	r6, 8004c66 <USB_ReadPacket+0x42>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004c4c:	f505 5580 	add.w	r5, r5, #4096	@ 0x1000
 8004c50:	4406      	add	r6, r0
 8004c52:	6829      	ldr	r1, [r5, #0]
 8004c54:	2300      	movs	r3, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004c56:	fa21 f203 	lsr.w	r2, r1, r3
 8004c5a:	f800 2b01 	strb.w	r2, [r0], #1
    } while (remaining_bytes != 0U);
 8004c5e:	42b0      	cmp	r0, r6
 8004c60:	f103 0308 	add.w	r3, r3, #8
 8004c64:	d1f7      	bne.n	8004c56 <USB_ReadPacket+0x32>
}
 8004c66:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t *pDest = dest;
 8004c68:	4608      	mov	r0, r1
 8004c6a:	e7ee      	b.n	8004c4a <USB_ReadPacket+0x26>

08004c6c <USB_EPSetStall>:
  if (ep->is_in == 1U)
 8004c6c:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8004c6e:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8004c70:	2a01      	cmp	r2, #1
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004c72:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 8004c76:	d00c      	beq.n	8004c92 <USB_EPSetStall+0x26>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004c78:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
 8004c7c:	2a00      	cmp	r2, #0
 8004c7e:	db00      	blt.n	8004c82 <USB_EPSetStall+0x16>
 8004c80:	b9d3      	cbnz	r3, 8004cb8 <USB_EPSetStall+0x4c>
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004c82:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8004c86:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004c8a:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 8004c8e:	2000      	movs	r0, #0
 8004c90:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004c92:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
 8004c96:	2a00      	cmp	r2, #0
 8004c98:	db06      	blt.n	8004ca8 <USB_EPSetStall+0x3c>
 8004c9a:	b12b      	cbz	r3, 8004ca8 <USB_EPSetStall+0x3c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004c9c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8004ca0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004ca4:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004ca8:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8004cac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004cb0:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
}
 8004cb4:	2000      	movs	r0, #0
 8004cb6:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004cb8:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8004cbc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004cc0:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 8004cc4:	e7dd      	b.n	8004c82 <USB_EPSetStall+0x16>
 8004cc6:	bf00      	nop

08004cc8 <USB_EPClearStall>:
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004cc8:	790b      	ldrb	r3, [r1, #4]
  if (ep->is_in == 1U)
 8004cca:	784a      	ldrb	r2, [r1, #1]
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004ccc:	f891 c000 	ldrb.w	ip, [r1]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004cd0:	3b02      	subs	r3, #2
  if (ep->is_in == 1U)
 8004cd2:	2a01      	cmp	r2, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004cd4:	eb00 104c 	add.w	r0, r0, ip, lsl #5
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004cd8:	b2db      	uxtb	r3, r3
  if (ep->is_in == 1U)
 8004cda:	d011      	beq.n	8004d00 <USB_EPClearStall+0x38>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004cdc:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004ce0:	2b01      	cmp	r3, #1
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004ce2:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8004ce6:	f8c0 2b00 	str.w	r2, [r0, #2816]	@ 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004cea:	d901      	bls.n	8004cf0 <USB_EPClearStall+0x28>
}
 8004cec:	2000      	movs	r0, #0
 8004cee:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004cf0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8004cf4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cf8:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 8004cfc:	2000      	movs	r0, #0
 8004cfe:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004d00:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004d04:	2b01      	cmp	r3, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004d06:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8004d0a:	f8c0 2900 	str.w	r2, [r0, #2304]	@ 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004d0e:	d8ed      	bhi.n	8004cec <USB_EPClearStall+0x24>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004d10:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8004d14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d18:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
}
 8004d1c:	2000      	movs	r0, #0
 8004d1e:	4770      	bx	lr

08004d20 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004d20:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8004d24:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004d28:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004d2c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8004d30:	0109      	lsls	r1, r1, #4
 8004d32:	f401 61fe 	and.w	r1, r1, #2032	@ 0x7f0
 8004d36:	4319      	orrs	r1, r3
 8004d38:	f8c0 1800 	str.w	r1, [r0, #2048]	@ 0x800
}
 8004d3c:	2000      	movs	r0, #0
 8004d3e:	4770      	bx	lr

08004d40 <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004d40:	f8d0 2e00 	ldr.w	r2, [r0, #3584]	@ 0xe00
{
 8004d44:	4603      	mov	r3, r0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004d46:	f022 0203 	bic.w	r2, r2, #3
 8004d4a:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004d4e:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8004d52:	f500 6100 	add.w	r1, r0, #2048	@ 0x800
 8004d56:	f023 0302 	bic.w	r3, r3, #2
}
 8004d5a:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004d5c:	604b      	str	r3, [r1, #4]
}
 8004d5e:	4770      	bx	lr

08004d60 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004d60:	f8d0 2e00 	ldr.w	r2, [r0, #3584]	@ 0xe00
{
 8004d64:	4603      	mov	r3, r0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004d66:	f022 0203 	bic.w	r2, r2, #3
 8004d6a:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d6e:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8004d72:	f500 6100 	add.w	r1, r0, #2048	@ 0x800
 8004d76:	f043 0302 	orr.w	r3, r3, #2
}
 8004d7a:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d7c:	604b      	str	r3, [r1, #4]
}
 8004d7e:	4770      	bx	lr

08004d80 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8004d80:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8004d82:	6980      	ldr	r0, [r0, #24]
}
 8004d84:	4010      	ands	r0, r2
 8004d86:	4770      	bx	lr

08004d88 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8004d88:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 8004d8c:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004d90:	69c0      	ldr	r0, [r0, #28]
 8004d92:	4018      	ands	r0, r3
}
 8004d94:	0c00      	lsrs	r0, r0, #16
 8004d96:	4770      	bx	lr

08004d98 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8004d98:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 8004d9c:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004da0:	69c0      	ldr	r0, [r0, #28]
 8004da2:	4018      	ands	r0, r3
}
 8004da4:	b280      	uxth	r0, r0
 8004da6:	4770      	bx	lr

08004da8 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004da8:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004dac:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004db0:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	@ 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004db4:	6940      	ldr	r0, [r0, #20]
}
 8004db6:	4010      	ands	r0, r2
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop

08004dbc <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 8004dbc:	f8d0 2810 	ldr.w	r2, [r0, #2064]	@ 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004dc0:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004dc4:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004dc8:	f001 010f 	and.w	r1, r1, #15
 8004dcc:	40cb      	lsrs	r3, r1
 8004dce:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004dd0:	f8d0 0908 	ldr.w	r0, [r0, #2312]	@ 0x908
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	4313      	orrs	r3, r2
}
 8004dd8:	4018      	ands	r0, r3
 8004dda:	4770      	bx	lr

08004ddc <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8004ddc:	6940      	ldr	r0, [r0, #20]
}
 8004dde:	f000 0001 	and.w	r0, r0, #1
 8004de2:	4770      	bx	lr

08004de4 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004de4:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
{
 8004de8:	4603      	mov	r3, r0
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004dea:	f36f 020a 	bfc	r2, #0, #11
 8004dee:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004df2:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8004df6:	f500 6100 	add.w	r1, r0, #2048	@ 0x800
 8004dfa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
}
 8004dfe:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004e00:	604b      	str	r3, [r1, #4]
}
 8004e02:	4770      	bx	lr

08004e04 <USB_EP0_OutStart>:
{
 8004e04:	b430      	push	{r4, r5}
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004e06:	6c05      	ldr	r5, [r0, #64]	@ 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004e08:	4c11      	ldr	r4, [pc, #68]	@ (8004e50 <USB_EP0_OutStart+0x4c>)
 8004e0a:	42a5      	cmp	r5, r4
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e0c:	f500 6330 	add.w	r3, r0, #2816	@ 0xb00
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004e10:	d903      	bls.n	8004e1a <USB_EP0_OutStart+0x16>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e12:	f8d0 4b00 	ldr.w	r4, [r0, #2816]	@ 0xb00
 8004e16:	2c00      	cmp	r4, #0
 8004e18:	db16      	blt.n	8004e48 <USB_EP0_OutStart+0x44>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004e1a:	2400      	movs	r4, #0
 8004e1c:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e1e:	691c      	ldr	r4, [r3, #16]
 8004e20:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8004e24:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004e26:	691c      	ldr	r4, [r3, #16]
 8004e28:	f044 0418 	orr.w	r4, r4, #24
 8004e2c:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004e2e:	691c      	ldr	r4, [r3, #16]
  if (dma == 1U)
 8004e30:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004e32:	f044 44c0 	orr.w	r4, r4, #1610612736	@ 0x60000000
 8004e36:	611c      	str	r4, [r3, #16]
  if (dma == 1U)
 8004e38:	d106      	bne.n	8004e48 <USB_EP0_OutStart+0x44>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004e3a:	615a      	str	r2, [r3, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004e3c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8004e40:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8004e44:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 8004e48:	2000      	movs	r0, #0
 8004e4a:	bc30      	pop	{r4, r5}
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	4f54300a 	.word	0x4f54300a

08004e54 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8004e54:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  USBD_COMPOSITE_Mount_Class();
 8004e56:	f000 fe7f 	bl	8005b58 <USBD_COMPOSITE_Mount_Class>
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_HS) != USBD_OK)
  {
    Error_Handler();
  }
#else
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_FS) != USBD_OK)
 8004e5a:	491e      	ldr	r1, [pc, #120]	@ (8004ed4 <MX_USB_DEVICE_Init+0x80>)
 8004e5c:	481e      	ldr	r0, [pc, #120]	@ (8004ed8 <MX_USB_DEVICE_Init+0x84>)
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f001 f8b0 	bl	8005fc4 <USBD_Init>
 8004e64:	b998      	cbnz	r0, 8004e8e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
  }
#endif
  if (USBD_RegisterClass(&hUsbDevice, &USBD_COMPOSITE) != USBD_OK)
 8004e66:	491d      	ldr	r1, [pc, #116]	@ (8004edc <MX_USB_DEVICE_Init+0x88>)
 8004e68:	481b      	ldr	r0, [pc, #108]	@ (8004ed8 <MX_USB_DEVICE_Init+0x84>)
 8004e6a:	f001 f8bd 	bl	8005fe8 <USBD_RegisterClass>
 8004e6e:	b9b0      	cbnz	r0, 8004e9e <MX_USB_DEVICE_Init+0x4a>
  {
    Error_Handler();
  }
#if (USBD_USE_CDC_ACM == 1)
  if (USBD_CDC_ACM_RegisterInterface(&hUsbDevice, &USBD_CDC_ACM_fops) != USBD_OK)
 8004e70:	491b      	ldr	r1, [pc, #108]	@ (8004ee0 <MX_USB_DEVICE_Init+0x8c>)
 8004e72:	4819      	ldr	r0, [pc, #100]	@ (8004ed8 <MX_USB_DEVICE_Init+0x84>)
 8004e74:	f000 fcd8 	bl	8005828 <USBD_CDC_ACM_RegisterInterface>
 8004e78:	b9c8      	cbnz	r0, 8004eae <MX_USB_DEVICE_Init+0x5a>
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDevice, &USBD_CustomHID_fops) != USBD_OK)
 8004e7a:	491a      	ldr	r1, [pc, #104]	@ (8004ee4 <MX_USB_DEVICE_Init+0x90>)
 8004e7c:	4816      	ldr	r0, [pc, #88]	@ (8004ed8 <MX_USB_DEVICE_Init+0x84>)
 8004e7e:	f001 f87f 	bl	8005f80 <USBD_CUSTOM_HID_RegisterInterface>
 8004e82:	b9e0      	cbnz	r0, 8004ebe <MX_USB_DEVICE_Init+0x6a>
  if (USBD_PRNT_RegisterInterface(&hUsbDevice, &USBD_PRNT_fops) != USBD_OK)
  {
    Error_Handler();
  }
#endif
  if (USBD_Start(&hUsbDevice) != USBD_OK)
 8004e84:	4814      	ldr	r0, [pc, #80]	@ (8004ed8 <MX_USB_DEVICE_Init+0x84>)
 8004e86:	f001 f8cb 	bl	8006020 <USBD_Start>
 8004e8a:	b9f8      	cbnz	r0, 8004ecc <MX_USB_DEVICE_Init+0x78>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8004e8c:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004e8e:	f7fb fecb 	bl	8000c28 <Error_Handler>
  if (USBD_RegisterClass(&hUsbDevice, &USBD_COMPOSITE) != USBD_OK)
 8004e92:	4912      	ldr	r1, [pc, #72]	@ (8004edc <MX_USB_DEVICE_Init+0x88>)
 8004e94:	4810      	ldr	r0, [pc, #64]	@ (8004ed8 <MX_USB_DEVICE_Init+0x84>)
 8004e96:	f001 f8a7 	bl	8005fe8 <USBD_RegisterClass>
 8004e9a:	2800      	cmp	r0, #0
 8004e9c:	d0e8      	beq.n	8004e70 <MX_USB_DEVICE_Init+0x1c>
    Error_Handler();
 8004e9e:	f7fb fec3 	bl	8000c28 <Error_Handler>
  if (USBD_CDC_ACM_RegisterInterface(&hUsbDevice, &USBD_CDC_ACM_fops) != USBD_OK)
 8004ea2:	490f      	ldr	r1, [pc, #60]	@ (8004ee0 <MX_USB_DEVICE_Init+0x8c>)
 8004ea4:	480c      	ldr	r0, [pc, #48]	@ (8004ed8 <MX_USB_DEVICE_Init+0x84>)
 8004ea6:	f000 fcbf 	bl	8005828 <USBD_CDC_ACM_RegisterInterface>
 8004eaa:	2800      	cmp	r0, #0
 8004eac:	d0e5      	beq.n	8004e7a <MX_USB_DEVICE_Init+0x26>
    Error_Handler();
 8004eae:	f7fb febb 	bl	8000c28 <Error_Handler>
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDevice, &USBD_CustomHID_fops) != USBD_OK)
 8004eb2:	490c      	ldr	r1, [pc, #48]	@ (8004ee4 <MX_USB_DEVICE_Init+0x90>)
 8004eb4:	4808      	ldr	r0, [pc, #32]	@ (8004ed8 <MX_USB_DEVICE_Init+0x84>)
 8004eb6:	f001 f863 	bl	8005f80 <USBD_CUSTOM_HID_RegisterInterface>
 8004eba:	2800      	cmp	r0, #0
 8004ebc:	d0e2      	beq.n	8004e84 <MX_USB_DEVICE_Init+0x30>
    Error_Handler();
 8004ebe:	f7fb feb3 	bl	8000c28 <Error_Handler>
  if (USBD_Start(&hUsbDevice) != USBD_OK)
 8004ec2:	4805      	ldr	r0, [pc, #20]	@ (8004ed8 <MX_USB_DEVICE_Init+0x84>)
 8004ec4:	f001 f8ac 	bl	8006020 <USBD_Start>
 8004ec8:	2800      	cmp	r0, #0
 8004eca:	d0df      	beq.n	8004e8c <MX_USB_DEVICE_Init+0x38>
}
 8004ecc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8004ed0:	f7fb beaa 	b.w	8000c28 <Error_Handler>
 8004ed4:	20000060 	.word	0x20000060
 8004ed8:	20004b58 	.word	0x20004b58
 8004edc:	2000019c 	.word	0x2000019c
 8004ee0:	20000018 	.word	0x20000018
 8004ee4:	2000007c 	.word	0x2000007c

08004ee8 <CDC_TransmitCplt>:
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
  return (USBD_OK);
}
 8004ee8:	2000      	movs	r0, #0
 8004eea:	4770      	bx	lr

08004eec <CDC_Receive>:
{
 8004eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  for (uint32_t i = 0; i < *Len; i++)
 8004eee:	6813      	ldr	r3, [r2, #0]
{
 8004ef0:	4617      	mov	r7, r2
 8004ef2:	4606      	mov	r6, r0
 8004ef4:	460a      	mov	r2, r1
  for (uint32_t i = 0; i < *Len; i++)
 8004ef6:	b1db      	cbz	r3, 8004f30 <CDC_Receive+0x44>
 8004ef8:	4812      	ldr	r0, [pc, #72]	@ (8004f44 <CDC_Receive+0x58>)
 8004efa:	4913      	ldr	r1, [pc, #76]	@ (8004f48 <CDC_Receive+0x5c>)
 8004efc:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
    CDC_RX_Buffer[cdc_ch][CDC_RX_WriteIndex[cdc_ch]++] = Buf[i];
 8004f00:	eb01 3106 	add.w	r1, r1, r6, lsl #12
 8004f04:	f102 3cff 	add.w	ip, r2, #4294967295
 8004f08:	1c65      	adds	r5, r4, #1
 8004f0a:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
      CDC_RX_WriteIndex[cdc_ch] = 0;
 8004f0e:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8004f12:	4663      	mov	r3, ip
    CDC_RX_Buffer[cdc_ch][CDC_RX_WriteIndex[cdc_ch]++] = Buf[i];
 8004f14:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 8004f18:	f801 e004 	strb.w	lr, [r1, r4]
      CDC_RX_WriteIndex[cdc_ch] = 0;
 8004f1c:	bf34      	ite	cc
 8004f1e:	462c      	movcc	r4, r5
 8004f20:	2400      	movcs	r4, #0
 8004f22:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
  for (uint32_t i = 0; i < *Len; i++)
 8004f26:	683d      	ldr	r5, [r7, #0]
 8004f28:	3302      	adds	r3, #2
 8004f2a:	1a9b      	subs	r3, r3, r2
 8004f2c:	42ab      	cmp	r3, r5
 8004f2e:	d3eb      	bcc.n	8004f08 <CDC_Receive+0x1c>
  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, Buf);
 8004f30:	4906      	ldr	r1, [pc, #24]	@ (8004f4c <CDC_Receive+0x60>)
 8004f32:	4630      	mov	r0, r6
 8004f34:	f000 fc8e 	bl	8005854 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(cdc_ch, &hUsbDevice);
 8004f38:	4904      	ldr	r1, [pc, #16]	@ (8004f4c <CDC_Receive+0x60>)
 8004f3a:	4630      	mov	r0, r6
 8004f3c:	f000 fcbc 	bl	80058b8 <USBD_CDC_ReceivePacket>
}
 8004f40:	2000      	movs	r0, #0
 8004f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f44:	20004f7c 	.word	0x20004f7c
 8004f48:	20004f80 	.word	0x20004f80
 8004f4c:	20004b58 	.word	0x20004b58

08004f50 <CDC_DeInit>:
{
 8004f50:	b508      	push	{r3, lr}
  UART_HandleTypeDef *handle = NULL;
 8004f52:	4b0b      	ldr	r3, [pc, #44]	@ (8004f80 <CDC_DeInit+0x30>)
 8004f54:	2800      	cmp	r0, #0
    if (HAL_UART_DeInit(CDC_CH_To_UART_Handle(cdc_ch)) != HAL_OK)
 8004f56:	bf0c      	ite	eq
 8004f58:	4618      	moveq	r0, r3
 8004f5a:	2000      	movne	r0, #0
 8004f5c:	f7fe ff28 	bl	8003db0 <HAL_UART_DeInit>
 8004f60:	b958      	cbnz	r0, 8004f7a <CDC_DeInit+0x2a>
    if ((HAL_TIM_Base_Stop_IT(&htim1) != HAL_OK )||(HAL_TIM_Base_Stop_IT(&htim2) != HAL_OK ))
 8004f62:	4808      	ldr	r0, [pc, #32]	@ (8004f84 <CDC_DeInit+0x34>)
 8004f64:	f7fe fc14 	bl	8003790 <HAL_TIM_Base_Stop_IT>
 8004f68:	b918      	cbnz	r0, 8004f72 <CDC_DeInit+0x22>
 8004f6a:	4807      	ldr	r0, [pc, #28]	@ (8004f88 <CDC_DeInit+0x38>)
 8004f6c:	f7fe fc10 	bl	8003790 <HAL_TIM_Base_Stop_IT>
 8004f70:	b108      	cbz	r0, 8004f76 <CDC_DeInit+0x26>
          Error_Handler();
 8004f72:	f7fb fe59 	bl	8000c28 <Error_Handler>
}
 8004f76:	2000      	movs	r0, #0
 8004f78:	bd08      	pop	{r3, pc}
      Error_Handler();
 8004f7a:	f7fb fe55 	bl	8000c28 <Error_Handler>
 8004f7e:	e7f0      	b.n	8004f62 <CDC_DeInit+0x12>
 8004f80:	20004628 	.word	0x20004628
 8004f84:	20004520 	.word	0x20004520
 8004f88:	200044d8 	.word	0x200044d8

08004f8c <CDC_Init>:
  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, RX_Buffer[cdc_ch]);
 8004f8c:	4a09      	ldr	r2, [pc, #36]	@ (8004fb4 <CDC_Init+0x28>)
 8004f8e:	490a      	ldr	r1, [pc, #40]	@ (8004fb8 <CDC_Init+0x2c>)
{
 8004f90:	b508      	push	{r3, lr}
  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, RX_Buffer[cdc_ch]);
 8004f92:	eb02 1280 	add.w	r2, r2, r0, lsl #6
 8004f96:	f000 fc5d 	bl	8005854 <USBD_CDC_SetRxBuffer>
    if ((HAL_TIM_Base_Start_IT(&htim1) != HAL_OK )||(HAL_TIM_Base_Start_IT(&htim2) != HAL_OK ))
 8004f9a:	4808      	ldr	r0, [pc, #32]	@ (8004fbc <CDC_Init+0x30>)
 8004f9c:	f7fe fbbe 	bl	800371c <HAL_TIM_Base_Start_IT>
 8004fa0:	b918      	cbnz	r0, 8004faa <CDC_Init+0x1e>
 8004fa2:	4807      	ldr	r0, [pc, #28]	@ (8004fc0 <CDC_Init+0x34>)
 8004fa4:	f7fe fbba 	bl	800371c <HAL_TIM_Base_Start_IT>
 8004fa8:	b108      	cbz	r0, 8004fae <CDC_Init+0x22>
      Error_Handler();
 8004faa:	f7fb fe3d 	bl	8000c28 <Error_Handler>
}
 8004fae:	2000      	movs	r0, #0
 8004fb0:	bd08      	pop	{r3, pc}
 8004fb2:	bf00      	nop
 8004fb4:	20005fd0 	.word	0x20005fd0
 8004fb8:	20004b58 	.word	0x20004b58
 8004fbc:	20004520 	.word	0x20004520
 8004fc0:	200044d8 	.word	0x200044d8

08004fc4 <Change_UART_Setting>:
{
 8004fc4:	b530      	push	{r4, r5, lr}
  UART_HandleTypeDef *handle = NULL;
 8004fc6:	1e05      	subs	r5, r0, #0
 8004fc8:	4c36      	ldr	r4, [pc, #216]	@ (80050a4 <Change_UART_Setting+0xe0>)
 8004fca:	bf18      	it	ne
 8004fcc:	2400      	movne	r4, #0
{
 8004fce:	b085      	sub	sp, #20
  if (HAL_UART_DeInit(handle) != HAL_OK)
 8004fd0:	4620      	mov	r0, r4
 8004fd2:	f7fe feed 	bl	8003db0 <HAL_UART_DeInit>
 8004fd6:	2800      	cmp	r0, #0
 8004fd8:	d14c      	bne.n	8005074 <Change_UART_Setting+0xb0>
  switch (Line_Coding[cdc_ch].format)
 8004fda:	4a33      	ldr	r2, [pc, #204]	@ (80050a8 <Change_UART_Setting+0xe4>)
 8004fdc:	eb02 01c5 	add.w	r1, r2, r5, lsl #3
 8004fe0:	00e8      	lsls	r0, r5, #3
 8004fe2:	790b      	ldrb	r3, [r1, #4]
  switch (Line_Coding[cdc_ch].paritytype)
 8004fe4:	7949      	ldrb	r1, [r1, #5]
  switch (Line_Coding[cdc_ch].format)
 8004fe6:	f1a3 0302 	sub.w	r3, r3, #2
 8004fea:	fab3 f383 	clz	r3, r3
 8004fee:	095b      	lsrs	r3, r3, #5
 8004ff0:	035b      	lsls	r3, r3, #13
  switch (Line_Coding[cdc_ch].paritytype)
 8004ff2:	2901      	cmp	r1, #1
    handle->Init.StopBits = UART_STOPBITS_1;
 8004ff4:	60e3      	str	r3, [r4, #12]
  switch (Line_Coding[cdc_ch].paritytype)
 8004ff6:	d052      	beq.n	800509e <Change_UART_Setting+0xda>
 8004ff8:	2902      	cmp	r1, #2
 8004ffa:	d044      	beq.n	8005086 <Change_UART_Setting+0xc2>
    handle->Init.Parity = UART_PARITY_NONE;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	6123      	str	r3, [r4, #16]
    handle = &huart5;
 8005000:	2100      	movs	r1, #0
  if (Line_Coding[cdc_ch].bitrate == 0)
 8005002:	f852 3035 	ldr.w	r3, [r2, r5, lsl #3]
    handle->Init.WordLength = UART_WORDLENGTH_8B;
 8005006:	60a1      	str	r1, [r4, #8]
  if (Line_Coding[cdc_ch].bitrate == 0)
 8005008:	b91b      	cbnz	r3, 8005012 <Change_UART_Setting+0x4e>
    Line_Coding[cdc_ch].bitrate = 115200;
 800500a:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800500e:	f842 3035 	str.w	r3, [r2, r5, lsl #3]
  handle->Init.Mode = UART_MODE_TX_RX;
 8005012:	2200      	movs	r2, #0
 8005014:	210c      	movs	r1, #12
 8005016:	e9c4 1205 	strd	r1, r2, [r4, #20]
  handle->Init.BaudRate = Line_Coding[cdc_ch].bitrate;
 800501a:	6063      	str	r3, [r4, #4]
  handle->Init.OverSampling = UART_OVERSAMPLING_16;
 800501c:	61e2      	str	r2, [r4, #28]
  if (HAL_UART_Init(handle) != HAL_OK)
 800501e:	4620      	mov	r0, r4
 8005020:	f7fe fe94 	bl	8003d4c <HAL_UART_Init>
 8005024:	2800      	cmp	r0, #0
 8005026:	d12b      	bne.n	8005080 <Change_UART_Setting+0xbc>
  if (HAL_UART_Receive_IT(handle, TX_Buffer[cdc_ch], 1) != HAL_OK)
 8005028:	4920      	ldr	r1, [pc, #128]	@ (80050ac <Change_UART_Setting+0xe8>)
 800502a:	2201      	movs	r2, #1
 800502c:	eb01 1185 	add.w	r1, r1, r5, lsl #6
 8005030:	4620      	mov	r0, r4
 8005032:	f7fe ff47 	bl	8003ec4 <HAL_UART_Receive_IT>
 8005036:	bb00      	cbnz	r0, 800507a <Change_UART_Setting+0xb6>
  __HAL_UART_CLEAR_OREFLAG(handle);
 8005038:	6823      	ldr	r3, [r4, #0]
 800503a:	2200      	movs	r2, #0
 800503c:	9201      	str	r2, [sp, #4]
 800503e:	6819      	ldr	r1, [r3, #0]
 8005040:	9101      	str	r1, [sp, #4]
 8005042:	6859      	ldr	r1, [r3, #4]
 8005044:	9101      	str	r1, [sp, #4]
 8005046:	9901      	ldr	r1, [sp, #4]
  __HAL_UART_CLEAR_NEFLAG(handle);
 8005048:	9202      	str	r2, [sp, #8]
 800504a:	6819      	ldr	r1, [r3, #0]
 800504c:	9102      	str	r1, [sp, #8]
 800504e:	6859      	ldr	r1, [r3, #4]
 8005050:	9102      	str	r1, [sp, #8]
 8005052:	9902      	ldr	r1, [sp, #8]
  __HAL_UART_CLEAR_FEFLAG(handle);
 8005054:	9203      	str	r2, [sp, #12]
 8005056:	6819      	ldr	r1, [r3, #0]
 8005058:	9103      	str	r1, [sp, #12]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	9303      	str	r3, [sp, #12]
 800505e:	9b03      	ldr	r3, [sp, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005060:	f3bf 8f4f 	dsb	sy
  Write_Index[cdc_ch] = 0;
 8005064:	4912      	ldr	r1, [pc, #72]	@ (80050b0 <Change_UART_Setting+0xec>)
  Read_Index[cdc_ch] = 0;
 8005066:	4b13      	ldr	r3, [pc, #76]	@ (80050b4 <Change_UART_Setting+0xf0>)
  Write_Index[cdc_ch] = 0;
 8005068:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
  Read_Index[cdc_ch] = 0;
 800506c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
}
 8005070:	b005      	add	sp, #20
 8005072:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8005074:	f7fb fdd8 	bl	8000c28 <Error_Handler>
 8005078:	e7af      	b.n	8004fda <Change_UART_Setting+0x16>
    Error_Handler();
 800507a:	f7fb fdd5 	bl	8000c28 <Error_Handler>
 800507e:	e7db      	b.n	8005038 <Change_UART_Setting+0x74>
    Error_Handler();
 8005080:	f7fb fdd2 	bl	8000c28 <Error_Handler>
 8005084:	e7d0      	b.n	8005028 <Change_UART_Setting+0x64>
  switch (Line_Coding[cdc_ch].paritytype)
 8005086:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  switch (Line_Coding[cdc_ch].datatype)
 800508a:	4410      	add	r0, r2
    handle->Init.Parity = UART_PARITY_EVEN;
 800508c:	6123      	str	r3, [r4, #16]
  switch (Line_Coding[cdc_ch].datatype)
 800508e:	7983      	ldrb	r3, [r0, #6]
 8005090:	2b07      	cmp	r3, #7
 8005092:	d0b5      	beq.n	8005000 <Change_UART_Setting+0x3c>
 8005094:	2b08      	cmp	r3, #8
 8005096:	d1b3      	bne.n	8005000 <Change_UART_Setting+0x3c>
 8005098:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800509c:	e7b1      	b.n	8005002 <Change_UART_Setting+0x3e>
  switch (Line_Coding[cdc_ch].paritytype)
 800509e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80050a2:	e7f2      	b.n	800508a <Change_UART_Setting+0xc6>
 80050a4:	20004628 	.word	0x20004628
 80050a8:	20005f88 	.word	0x20005f88
 80050ac:	20005f90 	.word	0x20005f90
 80050b0:	20005f84 	.word	0x20005f84
 80050b4:	20005f80 	.word	0x20005f80

080050b8 <CDC_Control>:
  switch (cmd)
 80050b8:	2920      	cmp	r1, #32
{
 80050ba:	b510      	push	{r4, lr}
 80050bc:	4603      	mov	r3, r0
  switch (cmd)
 80050be:	d021      	beq.n	8005104 <CDC_Control+0x4c>
 80050c0:	2921      	cmp	r1, #33	@ 0x21
 80050c2:	d001      	beq.n	80050c8 <CDC_Control+0x10>
}
 80050c4:	2000      	movs	r0, #0
 80050c6:	bd10      	pop	{r4, pc}
    pbuf[0] = (uint8_t)(Line_Coding[cdc_ch].bitrate);
 80050c8:	4916      	ldr	r1, [pc, #88]	@ (8005124 <CDC_Control+0x6c>)
 80050ca:	f851 0030 	ldr.w	r0, [r1, r0, lsl #3]
 80050ce:	7010      	strb	r0, [r2, #0]
    pbuf[1] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 8);
 80050d0:	f851 4033 	ldr.w	r4, [r1, r3, lsl #3]
 80050d4:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 80050d8:	f882 c001 	strb.w	ip, [r2, #1]
    pbuf[2] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 16);
 80050dc:	f851 4033 	ldr.w	r4, [r1, r3, lsl #3]
 80050e0:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80050e4:	f882 c002 	strb.w	ip, [r2, #2]
    pbuf[4] = Line_Coding[cdc_ch].format;
 80050e8:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
    pbuf[3] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 24);
 80050ec:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 80050f0:	0e1b      	lsrs	r3, r3, #24
 80050f2:	70d3      	strb	r3, [r2, #3]
    pbuf[4] = Line_Coding[cdc_ch].format;
 80050f4:	7903      	ldrb	r3, [r0, #4]
 80050f6:	7113      	strb	r3, [r2, #4]
    pbuf[5] = Line_Coding[cdc_ch].paritytype;
 80050f8:	7943      	ldrb	r3, [r0, #5]
 80050fa:	7153      	strb	r3, [r2, #5]
    pbuf[6] = Line_Coding[cdc_ch].datatype;
 80050fc:	7983      	ldrb	r3, [r0, #6]
 80050fe:	7193      	strb	r3, [r2, #6]
}
 8005100:	2000      	movs	r0, #0
 8005102:	bd10      	pop	{r4, pc}
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8005104:	4907      	ldr	r1, [pc, #28]	@ (8005124 <CDC_Control+0x6c>)
 8005106:	6814      	ldr	r4, [r2, #0]
 8005108:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
    Line_Coding[cdc_ch].format = pbuf[4];
 800510c:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
 8005110:	7911      	ldrb	r1, [r2, #4]
 8005112:	7119      	strb	r1, [r3, #4]
    Line_Coding[cdc_ch].paritytype = pbuf[5];
 8005114:	7951      	ldrb	r1, [r2, #5]
 8005116:	7159      	strb	r1, [r3, #5]
    Line_Coding[cdc_ch].datatype = pbuf[6];
 8005118:	7992      	ldrb	r2, [r2, #6]
 800511a:	719a      	strb	r2, [r3, #6]
    Change_UART_Setting(cdc_ch);
 800511c:	f7ff ff52 	bl	8004fc4 <Change_UART_Setting>
}
 8005120:	2000      	movs	r0, #0
 8005122:	bd10      	pop	{r4, pc}
 8005124:	20005f88 	.word	0x20005f88

08005128 <HAL_UART_TxCpltCallback>:
{
  uint8_t ch = UART_Handle_TO_CDC_CH(huart);
  if (ch >= NUMBER_OF_CDC) return;

  // Cập nhật ReadIndex sau khi truyền xong
  if (CDC_RX_ReadIndex[ch] > CDC_RX_WriteIndex[ch])
 8005128:	4a05      	ldr	r2, [pc, #20]	@ (8005140 <HAL_UART_TxCpltCallback+0x18>)
 800512a:	4b06      	ldr	r3, [pc, #24]	@ (8005144 <HAL_UART_TxCpltCallback+0x1c>)
 800512c:	6810      	ldr	r0, [r2, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
  else
  {
    CDC_RX_ReadIndex[ch] = CDC_RX_WriteIndex[ch];
  }

  uart_tx_busy[ch] = 0;
 8005130:	4905      	ldr	r1, [pc, #20]	@ (8005148 <HAL_UART_TxCpltCallback+0x20>)
    CDC_RX_ReadIndex[ch] = 0;
 8005132:	4298      	cmp	r0, r3
 8005134:	bf88      	it	hi
 8005136:	2300      	movhi	r3, #0
  uart_tx_busy[ch] = 0;
 8005138:	2000      	movs	r0, #0
 800513a:	6013      	str	r3, [r2, #0]
 800513c:	7008      	strb	r0, [r1, #0]
}
 800513e:	4770      	bx	lr
 8005140:	20004f78 	.word	0x20004f78
 8005144:	20004f7c 	.word	0x20004f7c
 8005148:	20004f74 	.word	0x20004f74

0800514c <ProcessCDC_RX>:

void ProcessCDC_RX(void) {
 800514c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    for (uint8_t i = 0; i < NUMBER_OF_CDC; i++) {
        if (CDC_RX_ReadIndex[i] != CDC_RX_WriteIndex[i]) {
 8005150:	4d12      	ldr	r5, [pc, #72]	@ (800519c <ProcessCDC_RX+0x50>)
 8005152:	f8df 8054 	ldr.w	r8, [pc, #84]	@ 80051a8 <ProcessCDC_RX+0x5c>
 8005156:	6829      	ldr	r1, [r5, #0]
                                (CDC_RX_BUFFER_SIZE - CDC_RX_ReadIndex[i]) :
                                (CDC_RX_WriteIndex[i] - CDC_RX_ReadIndex[i]);

            if (buffsize > 64) buffsize = 64;

            HAL_UART_Transmit(CDC_CH_To_UART_Handle(i), &CDC_RX_Buffer[i][buffptr], buffsize, HAL_MAX_DELAY);
 8005158:	4f11      	ldr	r7, [pc, #68]	@ (80051a0 <ProcessCDC_RX+0x54>)
 800515a:	4e12      	ldr	r6, [pc, #72]	@ (80051a4 <ProcessCDC_RX+0x58>)
    for (uint8_t i = 0; i < NUMBER_OF_CDC; i++) {
 800515c:	2300      	movs	r3, #0
        if (CDC_RX_ReadIndex[i] != CDC_RX_WriteIndex[i]) {
 800515e:	f8d8 4000 	ldr.w	r4, [r8]
    for (uint8_t i = 0; i < NUMBER_OF_CDC; i++) {
 8005162:	b9ab      	cbnz	r3, 8005190 <ProcessCDC_RX+0x44>
        if (CDC_RX_ReadIndex[i] != CDC_RX_WriteIndex[i]) {
 8005164:	428c      	cmp	r4, r1
 8005166:	d013      	beq.n	8005190 <ProcessCDC_RX+0x44>
                                (CDC_RX_BUFFER_SIZE - CDC_RX_ReadIndex[i]) :
 8005168:	bf2c      	ite	cs
 800516a:	1a64      	subcs	r4, r4, r1
 800516c:	f5c1 5480 	rsbcc	r4, r1, #4096	@ 0x1000
            if (buffsize > 64) buffsize = 64;
 8005170:	2c40      	cmp	r4, #64	@ 0x40
 8005172:	bf28      	it	cs
 8005174:	2440      	movcs	r4, #64	@ 0x40
            HAL_UART_Transmit(CDC_CH_To_UART_Handle(i), &CDC_RX_Buffer[i][buffptr], buffsize, HAL_MAX_DELAY);
 8005176:	f04f 33ff 	mov.w	r3, #4294967295
 800517a:	b2a2      	uxth	r2, r4
 800517c:	4439      	add	r1, r7
 800517e:	4630      	mov	r0, r6
 8005180:	f7fe fe32 	bl	8003de8 <HAL_UART_Transmit>

            CDC_RX_ReadIndex[i] += buffsize;
 8005184:	682b      	ldr	r3, [r5, #0]
 8005186:	441c      	add	r4, r3
            if (CDC_RX_ReadIndex[i] >= CDC_RX_BUFFER_SIZE)
 8005188:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
 800518c:	d202      	bcs.n	8005194 <ProcessCDC_RX+0x48>
            CDC_RX_ReadIndex[i] += buffsize;
 800518e:	602c      	str	r4, [r5, #0]
                CDC_RX_ReadIndex[i] = 0;
        }
    }
}
 8005190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                CDC_RX_ReadIndex[i] = 0;
 8005194:	2100      	movs	r1, #0
 8005196:	6029      	str	r1, [r5, #0]
    for (uint8_t i = 0; i < NUMBER_OF_CDC; i++) {
 8005198:	2301      	movs	r3, #1
 800519a:	e7e0      	b.n	800515e <ProcessCDC_RX+0x12>
 800519c:	20004f78 	.word	0x20004f78
 80051a0:	20004f80 	.word	0x20004f80
 80051a4:	20004628 	.word	0x20004628
 80051a8:	20004f7c 	.word	0x20004f7c

080051ac <ProcessCDC_TX>:

void ProcessCDC_TX(void) {
 80051ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    for (uint8_t i = 0; i < NUMBER_OF_CDC; i++) {
        if (Read_Index[i] != Write_Index[i]) {
 80051b0:	4f13      	ldr	r7, [pc, #76]	@ (8005200 <ProcessCDC_TX+0x54>)
 80051b2:	f8df 8058 	ldr.w	r8, [pc, #88]	@ 800520c <ProcessCDC_TX+0x60>
 80051b6:	683a      	ldr	r2, [r7, #0]
            uint32_t buffptr = Read_Index[i];
            uint32_t buffsize = (Read_Index[i] > Write_Index[i]) ?
                                (APP_TX_DATA_SIZE - Read_Index[i]) :
                                (Write_Index[i] - Read_Index[i]);

            USBD_CDC_SetTxBuffer(i, &hUsbDevice, &TX_Buffer[i][buffptr], buffsize);
 80051b8:	4e12      	ldr	r6, [pc, #72]	@ (8005204 <ProcessCDC_TX+0x58>)
 80051ba:	4d13      	ldr	r5, [pc, #76]	@ (8005208 <ProcessCDC_TX+0x5c>)
    for (uint8_t i = 0; i < NUMBER_OF_CDC; i++) {
 80051bc:	2100      	movs	r1, #0
        if (Read_Index[i] != Write_Index[i]) {
 80051be:	f8d8 4000 	ldr.w	r4, [r8]
    for (uint8_t i = 0; i < NUMBER_OF_CDC; i++) {
 80051c2:	b981      	cbnz	r1, 80051e6 <ProcessCDC_TX+0x3a>
        if (Read_Index[i] != Write_Index[i]) {
 80051c4:	4294      	cmp	r4, r2
 80051c6:	d00e      	beq.n	80051e6 <ProcessCDC_TX+0x3a>
                                (APP_TX_DATA_SIZE - Read_Index[i]) :
 80051c8:	bf34      	ite	cc
 80051ca:	f1c2 0440 	rsbcc	r4, r2, #64	@ 0x40
 80051ce:	1aa4      	subcs	r4, r4, r2
            USBD_CDC_SetTxBuffer(i, &hUsbDevice, &TX_Buffer[i][buffptr], buffsize);
 80051d0:	4629      	mov	r1, r5
 80051d2:	2000      	movs	r0, #0
 80051d4:	4623      	mov	r3, r4
 80051d6:	4432      	add	r2, r6
 80051d8:	f000 fb2e 	bl	8005838 <USBD_CDC_SetTxBuffer>

            if (USBD_CDC_TransmitPacket(i, &hUsbDevice) == USBD_OK) {
 80051dc:	4629      	mov	r1, r5
 80051de:	2000      	movs	r0, #0
 80051e0:	f000 fb44 	bl	800586c <USBD_CDC_TransmitPacket>
 80051e4:	b108      	cbz	r0, 80051ea <ProcessCDC_TX+0x3e>
                if (Read_Index[i] == APP_RX_DATA_SIZE)
                    Read_Index[i] = 0;
            }
        }
    }
}
 80051e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                Read_Index[i] += buffsize;
 80051ea:	683a      	ldr	r2, [r7, #0]
 80051ec:	4422      	add	r2, r4
                if (Read_Index[i] == APP_RX_DATA_SIZE)
 80051ee:	2a40      	cmp	r2, #64	@ 0x40
                Read_Index[i] += buffsize;
 80051f0:	603a      	str	r2, [r7, #0]
    for (uint8_t i = 0; i < NUMBER_OF_CDC; i++) {
 80051f2:	f04f 0101 	mov.w	r1, #1
                    Read_Index[i] = 0;
 80051f6:	bf04      	itt	eq
 80051f8:	6038      	streq	r0, [r7, #0]
 80051fa:	4602      	moveq	r2, r0
 80051fc:	e7df      	b.n	80051be <ProcessCDC_TX+0x12>
 80051fe:	bf00      	nop
 8005200:	20005f80 	.word	0x20005f80
 8005204:	20005f90 	.word	0x20005f90
 8005208:	20004b58 	.word	0x20004b58
 800520c:	20005f84 	.word	0x20005f84

08005210 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
    if (htim == &htim2)
 8005210:	4b05      	ldr	r3, [pc, #20]	@ (8005228 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8005212:	4298      	cmp	r0, r3
 8005214:	d003      	beq.n	800521e <HAL_TIM_PeriodElapsedCallback+0xe>
        ProcessCDC_RX();
    else if (htim == &htim1)
 8005216:	4b05      	ldr	r3, [pc, #20]	@ (800522c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8005218:	4298      	cmp	r0, r3
 800521a:	d002      	beq.n	8005222 <HAL_TIM_PeriodElapsedCallback+0x12>
    {
    	//HID_Frame_ReadAndSendCan(&hid_frame_fifo);
      //  uint8_t status = HID_Frame_ReadAndSend(&hid_frame_fifo_receive, process_sendframe);
//        if(status == 2) GPIOA->ODR ^= (1 << 7);
    }
}
 800521c:	4770      	bx	lr
        ProcessCDC_RX();
 800521e:	f7ff bf95 	b.w	800514c <ProcessCDC_RX>
        ProcessCDC_TX();
 8005222:	f7ff bfc3 	b.w	80051ac <ProcessCDC_TX>
 8005226:	bf00      	nop
 8005228:	200044d8 	.word	0x200044d8
 800522c:	20004520 	.word	0x20004520

08005230 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  uint8_t cdc_ch = UART_Handle_TO_CDC_CH(huart);
  //CDC_Transmit(cdc_ch, (TX_Buffer[cdc_ch] + Write_Index[cdc_ch]), 1);
  /* Increment Index for buffer writing */
  Write_Index[cdc_ch]++;
 8005230:	4b0a      	ldr	r3, [pc, #40]	@ (800525c <HAL_UART_RxCpltCallback+0x2c>)
 8005232:	681a      	ldr	r2, [r3, #0]

  /* To avoid buffer overflow */
  if (Write_Index[cdc_ch] == APP_RX_DATA_SIZE)
 8005234:	2a3f      	cmp	r2, #63	@ 0x3f
{
 8005236:	b410      	push	{r4}
  if (Write_Index[cdc_ch] == APP_RX_DATA_SIZE)
 8005238:	d008      	beq.n	800524c <HAL_UART_RxCpltCallback+0x1c>
 800523a:	1c54      	adds	r4, r2, #1
  {
    Write_Index[cdc_ch] = 0;
  }

  /* Start another reception: provide the buffer pointer with offset and the buffer size */
  HAL_UART_Receive_IT(huart, (TX_Buffer[cdc_ch] + Write_Index[cdc_ch]), 1);
 800523c:	4908      	ldr	r1, [pc, #32]	@ (8005260 <HAL_UART_RxCpltCallback+0x30>)
 800523e:	601c      	str	r4, [r3, #0]
 8005240:	4421      	add	r1, r4
 8005242:	2201      	movs	r2, #1
}
 8005244:	f85d 4b04 	ldr.w	r4, [sp], #4
  HAL_UART_Receive_IT(huart, (TX_Buffer[cdc_ch] + Write_Index[cdc_ch]), 1);
 8005248:	f7fe be3c 	b.w	8003ec4 <HAL_UART_Receive_IT>
    Write_Index[cdc_ch] = 0;
 800524c:	2400      	movs	r4, #0
 800524e:	601c      	str	r4, [r3, #0]
  HAL_UART_Receive_IT(huart, (TX_Buffer[cdc_ch] + Write_Index[cdc_ch]), 1);
 8005250:	4903      	ldr	r1, [pc, #12]	@ (8005260 <HAL_UART_RxCpltCallback+0x30>)
}
 8005252:	f85d 4b04 	ldr.w	r4, [sp], #4
  HAL_UART_Receive_IT(huart, (TX_Buffer[cdc_ch] + Write_Index[cdc_ch]), 1);
 8005256:	2201      	movs	r2, #1
 8005258:	f7fe be34 	b.w	8003ec4 <HAL_UART_Receive_IT>
 800525c:	20005f84 	.word	0x20005f84
 8005260:	20005f90 	.word	0x20005f90

08005264 <USBD_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_DeviceDesc);
 8005264:	2312      	movs	r3, #18
  return USBD_DeviceDesc;
}
 8005266:	4801      	ldr	r0, [pc, #4]	@ (800526c <USBD_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_DeviceDesc);
 8005268:	800b      	strh	r3, [r1, #0]
}
 800526a:	4770      	bx	lr
 800526c:	2000004c 	.word	0x2000004c

08005270 <USBD_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005270:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8005272:	4801      	ldr	r0, [pc, #4]	@ (8005278 <USBD_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8005274:	800b      	strh	r3, [r1, #0]
}
 8005276:	4770      	bx	lr
 8005278:	20000048 	.word	0x20000048

0800527c <USBD_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800527c:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800527e:	4c04      	ldr	r4, [pc, #16]	@ (8005290 <USBD_ManufacturerStrDescriptor+0x14>)
 8005280:	4804      	ldr	r0, [pc, #16]	@ (8005294 <USBD_ManufacturerStrDescriptor+0x18>)
{
 8005282:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005284:	4621      	mov	r1, r4
 8005286:	f001 fab3 	bl	80067f0 <USBD_GetString>
  return USBD_StrDesc;
}
 800528a:	4620      	mov	r0, r4
 800528c:	bd10      	pop	{r4, pc}
 800528e:	bf00      	nop
 8005290:	20006010 	.word	0x20006010
 8005294:	0800747c 	.word	0x0800747c

08005298 <USBD_ProductStrDescriptor>:
{
 8005298:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800529a:	4c04      	ldr	r4, [pc, #16]	@ (80052ac <USBD_ProductStrDescriptor+0x14>)
 800529c:	4804      	ldr	r0, [pc, #16]	@ (80052b0 <USBD_ProductStrDescriptor+0x18>)
{
 800529e:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80052a0:	4621      	mov	r1, r4
 80052a2:	f001 faa5 	bl	80067f0 <USBD_GetString>
}
 80052a6:	4620      	mov	r0, r4
 80052a8:	bd10      	pop	{r4, pc}
 80052aa:	bf00      	nop
 80052ac:	20006010 	.word	0x20006010
 80052b0:	08007484 	.word	0x08007484

080052b4 <USBD_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80052b4:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80052b6:	4c04      	ldr	r4, [pc, #16]	@ (80052c8 <USBD_ConfigStrDescriptor+0x14>)
 80052b8:	4804      	ldr	r0, [pc, #16]	@ (80052cc <USBD_ConfigStrDescriptor+0x18>)
{
 80052ba:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80052bc:	4621      	mov	r1, r4
 80052be:	f001 fa97 	bl	80067f0 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 80052c2:	4620      	mov	r0, r4
 80052c4:	bd10      	pop	{r4, pc}
 80052c6:	bf00      	nop
 80052c8:	20006010 	.word	0x20006010
 80052cc:	08007494 	.word	0x08007494

080052d0 <USBD_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80052d0:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80052d2:	4c04      	ldr	r4, [pc, #16]	@ (80052e4 <USBD_InterfaceStrDescriptor+0x14>)
 80052d4:	4804      	ldr	r0, [pc, #16]	@ (80052e8 <USBD_InterfaceStrDescriptor+0x18>)
{
 80052d6:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80052d8:	4621      	mov	r1, r4
 80052da:	f001 fa89 	bl	80067f0 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 80052de:	4620      	mov	r0, r4
 80052e0:	bd10      	pop	{r4, pc}
 80052e2:	bf00      	nop
 80052e4:	20006010 	.word	0x20006010
 80052e8:	080074a4 	.word	0x080074a4

080052ec <USBD_SerialStrDescriptor>:
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80052ec:	481b      	ldr	r0, [pc, #108]	@ (800535c <USBD_SerialStrDescriptor+0x70>)
 80052ee:	f8d0 3a10 	ldr.w	r3, [r0, #2576]	@ 0xa10
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;

  deviceserial0 += deviceserial2;
 80052f2:	f8d0 2a18 	ldr.w	r2, [r0, #2584]	@ 0xa18
{
 80052f6:	b510      	push	{r4, lr}

  if (deviceserial0 != 0)
 80052f8:	189b      	adds	r3, r3, r2
  *length = USB_SIZ_STRING_SERIAL;
 80052fa:	f04f 041a 	mov.w	r4, #26
 80052fe:	800c      	strh	r4, [r1, #0]
  if (deviceserial0 != 0)
 8005300:	d101      	bne.n	8005306 <USBD_SerialStrDescriptor+0x1a>
}
 8005302:	4817      	ldr	r0, [pc, #92]	@ (8005360 <USBD_SerialStrDescriptor+0x74>)
 8005304:	bd10      	pop	{r4, pc}
 8005306:	4a16      	ldr	r2, [pc, #88]	@ (8005360 <USBD_SerialStrDescriptor+0x74>)
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005308:	f8d0 0a14 	ldr.w	r0, [r0, #2580]	@ 0xa14
 800530c:	f102 0410 	add.w	r4, r2, #16
 8005310:	4611      	mov	r1, r2
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8005312:	f04f 0e00 	mov.w	lr, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 8005316:	ea4f 7c13 	mov.w	ip, r3, lsr #28
    if (((value >> 28)) < 0xA)
 800531a:	f1b3 4f20 	cmp.w	r3, #2684354560	@ 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 800531e:	bf34      	ite	cc
 8005320:	f10c 0c30 	addcc.w	ip, ip, #48	@ 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005324:	f10c 0c37 	addcs.w	ip, ip, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8005328:	f881 c002 	strb.w	ip, [r1, #2]
    pbuf[2 * idx + 1] = 0;
 800532c:	f881 e003 	strb.w	lr, [r1, #3]
  for (idx = 0; idx < len; idx++)
 8005330:	3102      	adds	r1, #2
 8005332:	428c      	cmp	r4, r1
    value = value << 4;
 8005334:	ea4f 1303 	mov.w	r3, r3, lsl #4
  for (idx = 0; idx < len; idx++)
 8005338:	d1ed      	bne.n	8005316 <USBD_SerialStrDescriptor+0x2a>
 800533a:	4c0a      	ldr	r4, [pc, #40]	@ (8005364 <USBD_SerialStrDescriptor+0x78>)
    pbuf[2 * idx + 1] = 0;
 800533c:	2100      	movs	r1, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 800533e:	0f03      	lsrs	r3, r0, #28
    if (((value >> 28)) < 0xA)
 8005340:	f1b0 4f20 	cmp.w	r0, #2684354560	@ 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 8005344:	bf34      	ite	cc
 8005346:	3330      	addcc	r3, #48	@ 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005348:	3337      	addcs	r3, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800534a:	7493      	strb	r3, [r2, #18]
    pbuf[2 * idx + 1] = 0;
 800534c:	74d1      	strb	r1, [r2, #19]
  for (idx = 0; idx < len; idx++)
 800534e:	3202      	adds	r2, #2
 8005350:	4294      	cmp	r4, r2
    value = value << 4;
 8005352:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 8005356:	d1f2      	bne.n	800533e <USBD_SerialStrDescriptor+0x52>
}
 8005358:	4801      	ldr	r0, [pc, #4]	@ (8005360 <USBD_SerialStrDescriptor+0x74>)
 800535a:	bd10      	pop	{r4, pc}
 800535c:	1fff7000 	.word	0x1fff7000
 8005360:	2000002c 	.word	0x2000002c
 8005364:	20000034 	.word	0x20000034

08005368 <CUSTOM_HID_Init>:
static int8_t CUSTOM_HID_Init(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8005368:	2000      	movs	r0, #0
 800536a:	4770      	bx	lr

0800536c <CUSTOM_HID_DeInit>:

/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit(void)
 800536c:	2000      	movs	r0, #0
 800536e:	4770      	bx	lr

08005370 <CUSTOM_HID_OutEvent>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent(uint8_t *data, uint16_t len)
{
 8005370:	b5f0      	push	{r4, r5, r6, r7, lr}
//}


uint8_t HID_Frame_Write(HID_FrameFIFO_t *fifo, uint8_t *data)
{
    uint8_t nextHead = (fifo->head + 1) % HID_FRAME_BUFFER_SIZE;
 8005372:	4d14      	ldr	r5, [pc, #80]	@ (80053c4 <CUSTOM_HID_OutEvent+0x54>)
 8005374:	f505 4680 	add.w	r6, r5, #16384	@ 0x4000
 8005378:	7834      	ldrb	r4, [r6, #0]

    // Kiểm tra tràn bộ đệm
    if (nextHead == fifo->tail) {
 800537a:	7873      	ldrb	r3, [r6, #1]
    uint8_t nextHead = (fifo->head + 1) % HID_FRAME_BUFFER_SIZE;
 800537c:	3401      	adds	r4, #1
 800537e:	b2e4      	uxtb	r4, r4
    if (nextHead == fifo->tail) {
 8005380:	429c      	cmp	r4, r3
 8005382:	d018      	beq.n	80053b6 <CUSTOM_HID_OutEvent+0x46>
        // Buffer đầy
    	GPIOA->ODR ^= (1 << 7);
        return 0;
    }

    memcpy(fifo->frame[fifo->head], data, HID_FRAME_SIZE);
 8005384:	7833      	ldrb	r3, [r6, #0]
 8005386:	4684      	mov	ip, r0
 8005388:	eb05 1583 	add.w	r5, r5, r3, lsl #6
 800538c:	f100 0740 	add.w	r7, r0, #64	@ 0x40
 8005390:	f8dc 0000 	ldr.w	r0, [ip]
 8005394:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8005398:	f8dc 2008 	ldr.w	r2, [ip, #8]
 800539c:	f8dc 300c 	ldr.w	r3, [ip, #12]
 80053a0:	46ae      	mov	lr, r5
 80053a2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80053a6:	f10c 0c10 	add.w	ip, ip, #16
 80053aa:	45bc      	cmp	ip, r7
 80053ac:	4675      	mov	r5, lr
 80053ae:	d1ef      	bne.n	8005390 <CUSTOM_HID_OutEvent+0x20>
    fifo->head = nextHead;
 80053b0:	7034      	strb	r4, [r6, #0]
}
 80053b2:	2000      	movs	r0, #0
 80053b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    	GPIOA->ODR ^= (1 << 7);
 80053b6:	4a04      	ldr	r2, [pc, #16]	@ (80053c8 <CUSTOM_HID_OutEvent+0x58>)
 80053b8:	6953      	ldr	r3, [r2, #20]
 80053ba:	f083 0380 	eor.w	r3, r3, #128	@ 0x80
 80053be:	6153      	str	r3, [r2, #20]
}
 80053c0:	2000      	movs	r0, #0
 80053c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053c4:	20006210 	.word	0x20006210
 80053c8:	40020000 	.word	0x40020000

080053cc <HID_Frame_Write>:
    uint8_t nextHead = (fifo->head + 1) % HID_FRAME_BUFFER_SIZE;
 80053cc:	f500 4280 	add.w	r2, r0, #16384	@ 0x4000
 80053d0:	7813      	ldrb	r3, [r2, #0]
    if (nextHead == fifo->tail) {
 80053d2:	f892 c001 	ldrb.w	ip, [r2, #1]
    uint8_t nextHead = (fifo->head + 1) % HID_FRAME_BUFFER_SIZE;
 80053d6:	3301      	adds	r3, #1
 80053d8:	b2db      	uxtb	r3, r3
    if (nextHead == fifo->tail) {
 80053da:	459c      	cmp	ip, r3
 80053dc:	d019      	beq.n	8005412 <HID_Frame_Write+0x46>
{
 80053de:	b570      	push	{r4, r5, r6, lr}
    memcpy(fifo->frame[fifo->head], data, HID_FRAME_SIZE);
 80053e0:	7814      	ldrb	r4, [r2, #0]
 80053e2:	f101 0640 	add.w	r6, r1, #64	@ 0x40
 80053e6:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 80053ea:	680c      	ldr	r4, [r1, #0]
 80053ec:	f8d1 e004 	ldr.w	lr, [r1, #4]
 80053f0:	f8d1 c008 	ldr.w	ip, [r1, #8]
 80053f4:	68cd      	ldr	r5, [r1, #12]
 80053f6:	60c5      	str	r5, [r0, #12]
 80053f8:	3110      	adds	r1, #16
 80053fa:	42b1      	cmp	r1, r6
 80053fc:	6004      	str	r4, [r0, #0]
 80053fe:	f8c0 e004 	str.w	lr, [r0, #4]
 8005402:	f8c0 c008 	str.w	ip, [r0, #8]
 8005406:	f100 0010 	add.w	r0, r0, #16
 800540a:	d1ee      	bne.n	80053ea <HID_Frame_Write+0x1e>
    fifo->head = nextHead;
 800540c:	7013      	strb	r3, [r2, #0]
    return 1;
 800540e:	2001      	movs	r0, #1
}
 8005410:	bd70      	pop	{r4, r5, r6, pc}
    	GPIOA->ODR ^= (1 << 7);
 8005412:	4a03      	ldr	r2, [pc, #12]	@ (8005420 <HID_Frame_Write+0x54>)
 8005414:	6953      	ldr	r3, [r2, #20]
 8005416:	f083 0380 	eor.w	r3, r3, #128	@ 0x80
 800541a:	2000      	movs	r0, #0
 800541c:	6153      	str	r3, [r2, #20]
}
 800541e:	4770      	bx	lr
 8005420:	40020000 	.word	0x40020000

08005424 <HID_Frame_ReadAndSend>:
    return 1;
}


uint8_t HID_Frame_ReadAndSend(HID_FrameFIFO_t *fifo, uint8_t *dest_buf)
{
 8005424:	b570      	push	{r4, r5, r6, lr}
    // Kiểm tra có frame không
    if(fifo->head == fifo->tail)
 8005426:	f500 4480 	add.w	r4, r0, #16384	@ 0x4000
 800542a:	7822      	ldrb	r2, [r4, #0]
 800542c:	7863      	ldrb	r3, [r4, #1]
 800542e:	429a      	cmp	r2, r3
 8005430:	d023      	beq.n	800547a <HID_Frame_ReadAndSend+0x56>
        return 0;  // FIFO rỗng

    // Copy frame ra buffer tạm
    memcpy(dest_buf, fifo->frame[fifo->tail], HID_FRAME_SIZE);
 8005432:	7862      	ldrb	r2, [r4, #1]
 8005434:	eb00 1082 	add.w	r0, r0, r2, lsl #6
 8005438:	460b      	mov	r3, r1
 800543a:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800543e:	f8d0 e000 	ldr.w	lr, [r0]
 8005442:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8005446:	6882      	ldr	r2, [r0, #8]
 8005448:	68c5      	ldr	r5, [r0, #12]
 800544a:	60dd      	str	r5, [r3, #12]
 800544c:	3010      	adds	r0, #16
 800544e:	42b0      	cmp	r0, r6
 8005450:	f8c3 e000 	str.w	lr, [r3]
 8005454:	f8c3 c004 	str.w	ip, [r3, #4]
 8005458:	609a      	str	r2, [r3, #8]
 800545a:	f103 0310 	add.w	r3, r3, #16
 800545e:	d1ee      	bne.n	800543e <HID_Frame_ReadAndSend+0x1a>

    // Thử gửi USB
    if(USBD_CUSTOM_HID_SendReport(&hUsbDevice, dest_buf, HID_FRAME_SIZE) == USBD_OK)
 8005460:	4807      	ldr	r0, [pc, #28]	@ (8005480 <HID_Frame_ReadAndSend+0x5c>)
 8005462:	2240      	movs	r2, #64	@ 0x40
 8005464:	f000 fd6e 	bl	8005f44 <USBD_CUSTOM_HID_SendReport>
 8005468:	b928      	cbnz	r0, 8005476 <HID_Frame_ReadAndSend+0x52>
    {
        // Gửi thành công → đánh dấu frame đã đọc
        fifo->tail = (fifo->tail + 1) % HID_FRAME_BUFFER_SIZE;
 800546a:	7863      	ldrb	r3, [r4, #1]
        return 1;
 800546c:	2001      	movs	r0, #1
        fifo->tail = (fifo->tail + 1) % HID_FRAME_BUFFER_SIZE;
 800546e:	4403      	add	r3, r0
 8005470:	b2db      	uxtb	r3, r3
 8005472:	7063      	strb	r3, [r4, #1]
    else
    {
        // USB bận → không thay đổi tail, frame sẽ gửi lại lần sau
        return 2;  // Trạng thái gửi chưa thành công
    }
}
 8005474:	bd70      	pop	{r4, r5, r6, pc}
        return 2;  // Trạng thái gửi chưa thành công
 8005476:	2002      	movs	r0, #2
}
 8005478:	bd70      	pop	{r4, r5, r6, pc}
        return 0;  // FIFO rỗng
 800547a:	2000      	movs	r0, #0
}
 800547c:	bd70      	pop	{r4, r5, r6, pc}
 800547e:	bf00      	nop
 8005480:	20004b58 	.word	0x20004b58

08005484 <HID_Frame_ReadAndSendCan>:
 *  0: FIFO rỗng
 *  1: frame đã gửi thành công
 *  2: frame chưa gửi (CAN bận hoặc lỗi)
 */
uint8_t HID_Frame_ReadAndSendCan(HID_FrameFIFO_t *fifo)
{
 8005484:	b570      	push	{r4, r5, r6, lr}
    uint8_t frame[HID_FRAME_SIZE];

    // Kiểm tra FIFO rỗng
    if(fifo->head == fifo->tail)
 8005486:	f500 4480 	add.w	r4, r0, #16384	@ 0x4000
{
 800548a:	b090      	sub	sp, #64	@ 0x40
    if(fifo->head == fifo->tail)
 800548c:	7822      	ldrb	r2, [r4, #0]
 800548e:	7863      	ldrb	r3, [r4, #1]
 8005490:	429a      	cmp	r2, r3
 8005492:	d027      	beq.n	80054e4 <HID_Frame_ReadAndSendCan+0x60>
        return 0;

    // Copy frame ra buffer tạm
    memcpy(frame, fifo->frame[fifo->tail], HID_FRAME_SIZE);
 8005494:	7863      	ldrb	r3, [r4, #1]
 8005496:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
 800549a:	466d      	mov	r5, sp
 800549c:	f10c 0640 	add.w	r6, ip, #64	@ 0x40
 80054a0:	f8dc 0000 	ldr.w	r0, [ip]
 80054a4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80054a8:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80054ac:	f8dc 300c 	ldr.w	r3, [ip, #12]
 80054b0:	46ae      	mov	lr, r5
 80054b2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80054b6:	f10c 0c10 	add.w	ip, ip, #16
 80054ba:	45b4      	cmp	ip, r6
 80054bc:	4675      	mov	r5, lr
 80054be:	d1ef      	bne.n	80054a0 <HID_Frame_ReadAndSendCan+0x1c>

    // Gọi hàm gửi CAN tương ứng
    uint8_t sendResult = FuncSendCanArray[frame[0]](frame);
 80054c0:	4b0a      	ldr	r3, [pc, #40]	@ (80054ec <HID_Frame_ReadAndSendCan+0x68>)
 80054c2:	f89d 2000 	ldrb.w	r2, [sp]
 80054c6:	4668      	mov	r0, sp
 80054c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054cc:	4798      	blx	r3

    if(sendResult) {
 80054ce:	b130      	cbz	r0, 80054de <HID_Frame_ReadAndSendCan+0x5a>
        // Gửi thành công → đánh dấu đã đọc
        fifo->tail = (fifo->tail + 1) % HID_FRAME_BUFFER_SIZE;
 80054d0:	7863      	ldrb	r3, [r4, #1]
        return 1;
 80054d2:	2001      	movs	r0, #1
        fifo->tail = (fifo->tail + 1) % HID_FRAME_BUFFER_SIZE;
 80054d4:	4403      	add	r3, r0
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	7063      	strb	r3, [r4, #1]
    } else {
        // Gửi chưa thành công → tail giữ nguyên
        return 2;
    }
}
 80054da:	b010      	add	sp, #64	@ 0x40
 80054dc:	bd70      	pop	{r4, r5, r6, pc}
        return 2;
 80054de:	2002      	movs	r0, #2
}
 80054e0:	b010      	add	sp, #64	@ 0x40
 80054e2:	bd70      	pop	{r4, r5, r6, pc}
        return 0;
 80054e4:	2000      	movs	r0, #0
}
 80054e6:	b010      	add	sp, #64	@ 0x40
 80054e8:	bd70      	pop	{r4, r5, r6, pc}
 80054ea:	bf00      	nop
 80054ec:	20000000 	.word	0x20000000

080054f0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80054f0:	b538      	push	{r3, r4, r5, lr}
    if (hcdc == NULL)
    {
      return (uint8_t)USBD_FAIL;
    }

    if ((pdev->pUserData_CDC_ACM != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80054f2:	4c0a      	ldr	r4, [pc, #40]	@ (800551c <USBD_CDC_EP0_RxReady+0x2c>)
 80054f4:	f8d0 32bc 	ldr.w	r3, [r0, #700]	@ 0x2bc
 80054f8:	f894 1200 	ldrb.w	r1, [r4, #512]	@ 0x200
 80054fc:	b10b      	cbz	r3, 8005502 <USBD_CDC_EP0_RxReady+0x12>
 80054fe:	29ff      	cmp	r1, #255	@ 0xff
 8005500:	d101      	bne.n	8005506 <USBD_CDC_EP0_RxReady+0x16>
      hcdc->CmdOpCode = 0xFFU;
    }
  }

  return (uint8_t)USBD_OK;
}
 8005502:	2000      	movs	r0, #0
 8005504:	bd38      	pop	{r3, r4, r5, pc}
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(i, hcdc->CmdOpCode, (uint8_t *)hcdc->data[i], (uint16_t)hcdc->CmdLength);
 8005506:	689d      	ldr	r5, [r3, #8]
 8005508:	f894 3201 	ldrb.w	r3, [r4, #513]	@ 0x201
 800550c:	4622      	mov	r2, r4
 800550e:	2000      	movs	r0, #0
 8005510:	47a8      	blx	r5
      hcdc->CmdOpCode = 0xFFU;
 8005512:	23ff      	movs	r3, #255	@ 0xff
 8005514:	f884 3200 	strb.w	r3, [r4, #512]	@ 0x200
}
 8005518:	2000      	movs	r0, #0
 800551a:	bd38      	pop	{r3, r4, r5, pc}
 800551c:	2000a214 	.word	0x2000a214

08005520 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005520:	234b      	movs	r3, #75	@ 0x4b
 8005522:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 8005524:	4800      	ldr	r0, [pc, #0]	@ (8005528 <USBD_CDC_GetFSCfgDesc+0x8>)
 8005526:	4770      	bx	lr
 8005528:	200000b0 	.word	0x200000b0

0800552c <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800552c:	234b      	movs	r3, #75	@ 0x4b
 800552e:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 8005530:	4800      	ldr	r0, [pc, #0]	@ (8005534 <USBD_CDC_GetHSCfgDesc+0x8>)
 8005532:	4770      	bx	lr
 8005534:	200000fc 	.word	0x200000fc

08005538 <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005538:	230a      	movs	r3, #10
 800553a:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 800553c:	4800      	ldr	r0, [pc, #0]	@ (8005540 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800553e:	4770      	bx	lr
 8005540:	20000184 	.word	0x20000184

08005544 <USBD_CDC_DataOut>:
{
 8005544:	b510      	push	{r4, lr}
 8005546:	4604      	mov	r4, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005548:	f001 facc 	bl	8006ae4 <USBD_LL_GetRxDataSize>
 800554c:	4a06      	ldr	r2, [pc, #24]	@ (8005568 <USBD_CDC_DataOut+0x24>)
  ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Receive(ep_to_ch, hcdc->RxBuffer, &hcdc->RxLength);
 800554e:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 8005552:	f8d2 1204 	ldr.w	r1, [r2, #516]	@ 0x204
 8005556:	68db      	ldr	r3, [r3, #12]
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005558:	f8c2 020c 	str.w	r0, [r2, #524]	@ 0x20c
  ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Receive(ep_to_ch, hcdc->RxBuffer, &hcdc->RxLength);
 800555c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005560:	2000      	movs	r0, #0
 8005562:	4798      	blx	r3
}
 8005564:	2000      	movs	r0, #0
 8005566:	bd10      	pop	{r4, pc}
 8005568:	2000a214 	.word	0x2000a214

0800556c <USBD_CDC_DataIn>:
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800556c:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 8005570:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
{
 8005574:	b538      	push	{r3, r4, r5, lr}
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005576:	f8dc 4018 	ldr.w	r4, [ip, #24]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800557a:	f8d0 5310 	ldr.w	r5, [r0, #784]	@ 0x310
{
 800557e:	460b      	mov	r3, r1
 8005580:	4602      	mov	r2, r0
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005582:	b14c      	cbz	r4, 8005598 <USBD_CDC_DataIn+0x2c>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005584:	eb01 0ec1 	add.w	lr, r1, r1, lsl #3
 8005588:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 800558c:	69ed      	ldr	r5, [r5, #28]
 800558e:	fbb4 fef5 	udiv	lr, r4, r5
 8005592:	fb05 441e 	mls	r4, r5, lr, r4
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005596:	b174      	cbz	r4, 80055b6 <USBD_CDC_DataIn+0x4a>
    if (((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt != NULL)
 8005598:	f8d2 22bc 	ldr.w	r2, [r2, #700]	@ 0x2bc
    hcdc->TxState = 0U;
 800559c:	490a      	ldr	r1, [pc, #40]	@ (80055c8 <USBD_CDC_DataIn+0x5c>)
    if (((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt != NULL)
 800559e:	6914      	ldr	r4, [r2, #16]
    hcdc->TxState = 0U;
 80055a0:	2000      	movs	r0, #0
 80055a2:	f8c1 0214 	str.w	r0, [r1, #532]	@ 0x214
    if (((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt != NULL)
 80055a6:	b124      	cbz	r4, 80055b2 <USBD_CDC_DataIn+0x46>
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt(ep_to_ch, hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80055a8:	f501 7204 	add.w	r2, r1, #528	@ 0x210
 80055ac:	f8d1 1208 	ldr.w	r1, [r1, #520]	@ 0x208
 80055b0:	47a0      	blx	r4
}
 80055b2:	2000      	movs	r0, #0
 80055b4:	bd38      	pop	{r3, r4, r5, pc}
    pdev->ep_in[epnum].total_length = 0U;
 80055b6:	f8cc 4018 	str.w	r4, [ip, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80055ba:	4623      	mov	r3, r4
 80055bc:	4622      	mov	r2, r4
 80055be:	f001 fa79 	bl	8006ab4 <USBD_LL_Transmit>
}
 80055c2:	2000      	movs	r0, #0
 80055c4:	bd38      	pop	{r3, r4, r5, pc}
 80055c6:	bf00      	nop
 80055c8:	2000a214 	.word	0x2000a214

080055cc <USBD_CDC_Setup>:
{
 80055cc:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80055ce:	f891 c000 	ldrb.w	ip, [r1]
{
 80055d2:	b082      	sub	sp, #8
  uint8_t ifalt = 0U;
 80055d4:	f04f 0e00 	mov.w	lr, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80055d8:	f01c 0360 	ands.w	r3, ip, #96	@ 0x60
{
 80055dc:	460c      	mov	r4, r1
  uint8_t ifalt = 0U;
 80055de:	f88d e005 	strb.w	lr, [sp, #5]
  uint16_t status_info = 0U;
 80055e2:	f8ad e006 	strh.w	lr, [sp, #6]
{
 80055e6:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80055e8:	d01d      	beq.n	8005626 <USBD_CDC_Setup+0x5a>
 80055ea:	2b20      	cmp	r3, #32
 80055ec:	d006      	beq.n	80055fc <USBD_CDC_Setup+0x30>
      USBD_CtlError(pdev, req);
 80055ee:	4628      	mov	r0, r5
 80055f0:	4621      	mov	r1, r4
 80055f2:	f001 f8f1 	bl	80067d8 <USBD_CtlError>
        ret = USBD_FAIL;
 80055f6:	2003      	movs	r0, #3
}
 80055f8:	b002      	add	sp, #8
 80055fa:	bd70      	pop	{r4, r5, r6, pc}
    if (req->wLength != 0U)
 80055fc:	88cb      	ldrh	r3, [r1, #6]
        ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 80055fe:	7849      	ldrb	r1, [r1, #1]
    if (req->wLength != 0U)
 8005600:	b383      	cbz	r3, 8005664 <USBD_CDC_Setup+0x98>
      if ((req->bmRequest & 0x80U) != 0U)
 8005602:	f01c 0f80 	tst.w	ip, #128	@ 0x80
 8005606:	d04e      	beq.n	80056a6 <USBD_CDC_Setup+0xda>
        ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 8005608:	f8d5 22bc 	ldr.w	r2, [r5, #700]	@ 0x2bc
 800560c:	4670      	mov	r0, lr
 800560e:	6896      	ldr	r6, [r2, #8]
 8005610:	4a2a      	ldr	r2, [pc, #168]	@ (80056bc <USBD_CDC_Setup+0xf0>)
 8005612:	47b0      	blx	r6
        len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005614:	88e2      	ldrh	r2, [r4, #6]
        (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data[windex_to_ch], len);
 8005616:	4929      	ldr	r1, [pc, #164]	@ (80056bc <USBD_CDC_Setup+0xf0>)
 8005618:	2a07      	cmp	r2, #7
 800561a:	4628      	mov	r0, r5
 800561c:	bf28      	it	cs
 800561e:	2207      	movcs	r2, #7
 8005620:	f001 f90e 	bl	8006840 <USBD_CtlSendData>
 8005624:	e024      	b.n	8005670 <USBD_CDC_Setup+0xa4>
    switch (req->bRequest)
 8005626:	784b      	ldrb	r3, [r1, #1]
 8005628:	2b0b      	cmp	r3, #11
 800562a:	d8e0      	bhi.n	80055ee <USBD_CDC_Setup+0x22>
 800562c:	a201      	add	r2, pc, #4	@ (adr r2, 8005634 <USBD_CDC_Setup+0x68>)
 800562e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005632:	bf00      	nop
 8005634:	08005675 	.word	0x08005675
 8005638:	08005671 	.word	0x08005671
 800563c:	080055ef 	.word	0x080055ef
 8005640:	080055ef 	.word	0x080055ef
 8005644:	080055ef 	.word	0x080055ef
 8005648:	080055ef 	.word	0x080055ef
 800564c:	080055ef 	.word	0x080055ef
 8005650:	080055ef 	.word	0x080055ef
 8005654:	080055ef 	.word	0x080055ef
 8005658:	080055ef 	.word	0x080055ef
 800565c:	08005693 	.word	0x08005693
 8005660:	08005689 	.word	0x08005689
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
 8005664:	f8d0 22bc 	ldr.w	r2, [r0, #700]	@ 0x2bc
 8005668:	4618      	mov	r0, r3
 800566a:	6895      	ldr	r5, [r2, #8]
 800566c:	4622      	mov	r2, r4
 800566e:	47a8      	blx	r5
  USBD_StatusTypeDef ret = USBD_OK;
 8005670:	2000      	movs	r0, #0
 8005672:	e7c1      	b.n	80055f8 <USBD_CDC_Setup+0x2c>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005674:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005678:	2b03      	cmp	r3, #3
 800567a:	d1b8      	bne.n	80055ee <USBD_CDC_Setup+0x22>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800567c:	2202      	movs	r2, #2
 800567e:	f10d 0106 	add.w	r1, sp, #6
 8005682:	f001 f8dd 	bl	8006840 <USBD_CtlSendData>
 8005686:	e7f3      	b.n	8005670 <USBD_CDC_Setup+0xa4>
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005688:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800568c:	2b03      	cmp	r3, #3
 800568e:	d0ef      	beq.n	8005670 <USBD_CDC_Setup+0xa4>
 8005690:	e7ad      	b.n	80055ee <USBD_CDC_Setup+0x22>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005692:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005696:	2b03      	cmp	r3, #3
 8005698:	d1a9      	bne.n	80055ee <USBD_CDC_Setup+0x22>
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800569a:	2201      	movs	r2, #1
 800569c:	f10d 0105 	add.w	r1, sp, #5
 80056a0:	f001 f8ce 	bl	8006840 <USBD_CtlSendData>
 80056a4:	e7e4      	b.n	8005670 <USBD_CDC_Setup+0xa4>
        hcdc->CmdOpCode = req->bRequest;
 80056a6:	4c05      	ldr	r4, [pc, #20]	@ (80056bc <USBD_CDC_Setup+0xf0>)
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 80056a8:	461a      	mov	r2, r3
        hcdc->CmdOpCode = req->bRequest;
 80056aa:	f884 1200 	strb.w	r1, [r4, #512]	@ 0x200
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 80056ae:	4621      	mov	r1, r4
        hcdc->CmdLength = (uint8_t)req->wLength;
 80056b0:	f884 3201 	strb.w	r3, [r4, #513]	@ 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 80056b4:	f001 f8da 	bl	800686c <USBD_CtlPrepareRx>
 80056b8:	e7da      	b.n	8005670 <USBD_CDC_Setup+0xa4>
 80056ba:	bf00      	nop
 80056bc:	2000a214 	.word	0x2000a214

080056c0 <USBD_CDC_DeInit>:
{
 80056c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    (void)USBD_LL_CloseEP(pdev, CDC_IN_EP[i]);
 80056c2:	4e18      	ldr	r6, [pc, #96]	@ (8005724 <USBD_CDC_DeInit+0x64>)
    (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP[i]);
 80056c4:	4f18      	ldr	r7, [pc, #96]	@ (8005728 <USBD_CDC_DeInit+0x68>)
    (void)USBD_LL_CloseEP(pdev, CDC_IN_EP[i]);
 80056c6:	7831      	ldrb	r1, [r6, #0]
{
 80056c8:	4604      	mov	r4, r0
    (void)USBD_LL_CloseEP(pdev, CDC_IN_EP[i]);
 80056ca:	f001 f9af 	bl	8006a2c <USBD_LL_CloseEP>
    pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 0U;
 80056ce:	7833      	ldrb	r3, [r6, #0]
    (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP[i]);
 80056d0:	7839      	ldrb	r1, [r7, #0]
    (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP[i]);
 80056d2:	4e16      	ldr	r6, [pc, #88]	@ (800572c <USBD_CDC_DeInit+0x6c>)
    pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 0U;
 80056d4:	f003 030f 	and.w	r3, r3, #15
 80056d8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80056dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80056e0:	2500      	movs	r5, #0
 80056e2:	849d      	strh	r5, [r3, #36]	@ 0x24
    (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP[i]);
 80056e4:	4620      	mov	r0, r4
 80056e6:	f001 f9a1 	bl	8006a2c <USBD_LL_CloseEP>
    pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 0U;
 80056ea:	783b      	ldrb	r3, [r7, #0]
    (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP[i]);
 80056ec:	7831      	ldrb	r1, [r6, #0]
    pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 0U;
 80056ee:	f003 030f 	and.w	r3, r3, #15
 80056f2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80056f6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP[i]);
 80056fa:	4620      	mov	r0, r4
    pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 0U;
 80056fc:	f8a3 5164 	strh.w	r5, [r3, #356]	@ 0x164
    (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP[i]);
 8005700:	f001 f994 	bl	8006a2c <USBD_LL_CloseEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 0U;
 8005704:	7833      	ldrb	r3, [r6, #0]
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->DeInit(i);
 8005706:	f8d4 22bc 	ldr.w	r2, [r4, #700]	@ 0x2bc
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 0U;
 800570a:	f003 030f 	and.w	r3, r3, #15
 800570e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005712:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->DeInit(i);
 8005716:	4628      	mov	r0, r5
 8005718:	6853      	ldr	r3, [r2, #4]
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 0U;
 800571a:	6265      	str	r5, [r4, #36]	@ 0x24
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->DeInit(i);
 800571c:	4798      	blx	r3
}
 800571e:	4628      	mov	r0, r5
 8005720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005722:	bf00      	nop
 8005724:	2000a444 	.word	0x2000a444
 8005728:	2000a440 	.word	0x2000a440
 800572c:	2000a43c 	.word	0x2000a43c

08005730 <USBD_CDC_Init>:
{
 8005730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 8005732:	4f36      	ldr	r7, [pc, #216]	@ (800580c <USBD_CDC_Init+0xdc>)
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005734:	7c03      	ldrb	r3, [r0, #16]
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 8005736:	7839      	ldrb	r1, [r7, #0]
{
 8005738:	4604      	mov	r4, r0
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800573a:	2b00      	cmp	r3, #0
 800573c:	d14d      	bne.n	80057da <USBD_CDC_Init+0xaa>
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 800573e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005742:	2202      	movs	r2, #2
 8005744:	f001 f964 	bl	8006a10 <USBD_LL_OpenEP>
      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 8005748:	783b      	ldrb	r3, [r7, #0]
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 800574a:	4d31      	ldr	r5, [pc, #196]	@ (8005810 <USBD_CDC_Init+0xe0>)
      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 800574c:	f003 030f 	and.w	r3, r3, #15
 8005750:	eb03 0383 	add.w	r3, r3, r3, lsl #2
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 8005754:	7829      	ldrb	r1, [r5, #0]
      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 8005756:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800575a:	2601      	movs	r6, #1
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 800575c:	f44f 7300 	mov.w	r3, #512	@ 0x200
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005760:	4f2c      	ldr	r7, [pc, #176]	@ (8005814 <USBD_CDC_Init+0xe4>)
      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 8005762:	8496      	strh	r6, [r2, #36]	@ 0x24
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 8005764:	4620      	mov	r0, r4
 8005766:	2202      	movs	r2, #2
 8005768:	f001 f952 	bl	8006a10 <USBD_LL_OpenEP>
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800576c:	7839      	ldrb	r1, [r7, #0]
      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 800576e:	782b      	ldrb	r3, [r5, #0]
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005770:	f001 020f 	and.w	r2, r1, #15
      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 8005774:	f003 030f 	and.w	r3, r3, #15
 8005778:	eb03 0383 	add.w	r3, r3, r3, lsl #2
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800577c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 8005780:	eb04 0383 	add.w	r3, r4, r3, lsl #2
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005784:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8005788:	2010      	movs	r0, #16
      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 800578a:	f8a3 6164 	strh.w	r6, [r3, #356]	@ 0x164
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800578e:	84d0      	strh	r0, [r2, #38]	@ 0x26
    (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP[i], USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005790:	2308      	movs	r3, #8
 8005792:	2203      	movs	r2, #3
 8005794:	4620      	mov	r0, r4
 8005796:	f001 f93b 	bl	8006a10 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 1U;
 800579a:	783b      	ldrb	r3, [r7, #0]
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Init(i);
 800579c:	f8d4 22bc 	ldr.w	r2, [r4, #700]	@ 0x2bc
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 1U;
 80057a0:	f003 030f 	and.w	r3, r3, #15
 80057a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80057a8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80057ac:	2101      	movs	r1, #1
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Init(i);
 80057ae:	6812      	ldr	r2, [r2, #0]
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 1U;
 80057b0:	8499      	strh	r1, [r3, #36]	@ 0x24
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Init(i);
 80057b2:	2000      	movs	r0, #0
 80057b4:	4790      	blx	r2
    hcdc->TxState = 0U;
 80057b6:	4b18      	ldr	r3, [pc, #96]	@ (8005818 <USBD_CDC_Init+0xe8>)
 80057b8:	2200      	movs	r2, #0
 80057ba:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 80057be:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80057c2:	7c22      	ldrb	r2, [r4, #16]
 80057c4:	b9ca      	cbnz	r2, 80057fa <USBD_CDC_Init+0xca>
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 80057c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80057ca:	7829      	ldrb	r1, [r5, #0]
 80057cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80057d0:	4620      	mov	r0, r4
 80057d2:	f001 f97b 	bl	8006acc <USBD_LL_PrepareReceive>
}
 80057d6:	2000      	movs	r0, #0
 80057d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 80057da:	2340      	movs	r3, #64	@ 0x40
 80057dc:	2202      	movs	r2, #2
 80057de:	f001 f917 	bl	8006a10 <USBD_LL_OpenEP>
      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 80057e2:	783b      	ldrb	r3, [r7, #0]
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 80057e4:	4d0a      	ldr	r5, [pc, #40]	@ (8005810 <USBD_CDC_Init+0xe0>)
      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 80057e6:	f003 030f 	and.w	r3, r3, #15
 80057ea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80057ee:	eb04 0283 	add.w	r2, r4, r3, lsl #2
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 80057f2:	7829      	ldrb	r1, [r5, #0]
      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 80057f4:	2601      	movs	r6, #1
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 80057f6:	2340      	movs	r3, #64	@ 0x40
 80057f8:	e7b2      	b.n	8005760 <USBD_CDC_Init+0x30>
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 80057fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80057fe:	7829      	ldrb	r1, [r5, #0]
 8005800:	2340      	movs	r3, #64	@ 0x40
 8005802:	4620      	mov	r0, r4
 8005804:	f001 f962 	bl	8006acc <USBD_LL_PrepareReceive>
}
 8005808:	2000      	movs	r0, #0
 800580a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800580c:	2000a444 	.word	0x2000a444
 8005810:	2000a440 	.word	0x2000a440
 8005814:	2000a43c 	.word	0x2000a43c
 8005818:	2000a214 	.word	0x2000a214

0800581c <USBD_CDC_GetOtherSpeedCfgDesc>:
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
 800581c:	234b      	movs	r3, #75	@ 0x4b
 800581e:	8003      	strh	r3, [r0, #0]
 8005820:	4800      	ldr	r0, [pc, #0]	@ (8005824 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8005822:	4770      	bx	lr
 8005824:	200000b0 	.word	0x200000b0

08005828 <USBD_CDC_ACM_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_ACM_RegisterInterface(USBD_HandleTypeDef *pdev,
                                       USBD_CDC_ACM_ItfTypeDef *fops)
{
  if (fops == NULL)
 8005828:	b119      	cbz	r1, 8005832 <USBD_CDC_ACM_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData_CDC_ACM = fops;
 800582a:	f8c0 12bc 	str.w	r1, [r0, #700]	@ 0x2bc

  return (uint8_t)USBD_OK;
 800582e:	2000      	movs	r0, #0
 8005830:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8005832:	2003      	movs	r0, #3
}
 8005834:	4770      	bx	lr
 8005836:	bf00      	nop

08005838 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;

  hcdc = &CDC_ACM_Class_Data[ch];

  hcdc->TxBuffer = pbuff;
 8005838:	4905      	ldr	r1, [pc, #20]	@ (8005850 <USBD_CDC_SetTxBuffer+0x18>)
 800583a:	f44f 7c07 	mov.w	ip, #540	@ 0x21c
 800583e:	fb0c 1000 	mla	r0, ip, r0, r1
 8005842:	f8c0 2208 	str.w	r2, [r0, #520]	@ 0x208
  hcdc->TxLength = length;
 8005846:	f8c0 3210 	str.w	r3, [r0, #528]	@ 0x210

  return (uint8_t)USBD_OK;
}
 800584a:	2000      	movs	r0, #0
 800584c:	4770      	bx	lr
 800584e:	bf00      	nop
 8005850:	2000a214 	.word	0x2000a214

08005854 <USBD_CDC_SetRxBuffer>:
{
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;

  hcdc = &CDC_ACM_Class_Data[ch];

  hcdc->RxBuffer = pbuff;
 8005854:	4b04      	ldr	r3, [pc, #16]	@ (8005868 <USBD_CDC_SetRxBuffer+0x14>)
 8005856:	f44f 7107 	mov.w	r1, #540	@ 0x21c
 800585a:	fb01 3300 	mla	r3, r1, r0, r3

  return (uint8_t)USBD_OK;
}
 800585e:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8005860:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
}
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop
 8005868:	2000a214 	.word	0x2000a214

0800586c <USBD_CDC_TransmitPacket>:
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
  USBD_StatusTypeDef ret = USBD_BUSY;

  hcdc = &CDC_ACM_Class_Data[ch];

  if (hcdc->TxState == 0U)
 800586c:	4a10      	ldr	r2, [pc, #64]	@ (80058b0 <USBD_CDC_TransmitPacket+0x44>)
{
 800586e:	4603      	mov	r3, r0
  if (hcdc->TxState == 0U)
 8005870:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005874:	fb00 2203 	mla	r2, r0, r3, r2
{
 8005878:	b510      	push	{r4, lr}
  if (hcdc->TxState == 0U)
 800587a:	f8d2 4214 	ldr.w	r4, [r2, #532]	@ 0x214
 800587e:	b10c      	cbz	r4, 8005884 <USBD_CDC_TransmitPacket+0x18>
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005880:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 8005882:	bd10      	pop	{r4, pc}
    hcdc->TxState = 1U;
 8005884:	4608      	mov	r0, r1
 8005886:	2101      	movs	r1, #1
 8005888:	f8c2 1214 	str.w	r1, [r2, #532]	@ 0x214
    pdev->ep_in[CDC_IN_EP[ch] & 0xFU].total_length = hcdc->TxLength;
 800588c:	4909      	ldr	r1, [pc, #36]	@ (80058b4 <USBD_CDC_TransmitPacket+0x48>)
 800588e:	5cc9      	ldrb	r1, [r1, r3]
 8005890:	f8d2 3210 	ldr.w	r3, [r2, #528]	@ 0x210
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP[ch], hcdc->TxBuffer, hcdc->TxLength);
 8005894:	f8d2 2208 	ldr.w	r2, [r2, #520]	@ 0x208
    pdev->ep_in[CDC_IN_EP[ch] & 0xFU].total_length = hcdc->TxLength;
 8005898:	f001 0c0f 	and.w	ip, r1, #15
 800589c:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 80058a0:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 80058a4:	f8cc 3018 	str.w	r3, [ip, #24]
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP[ch], hcdc->TxBuffer, hcdc->TxLength);
 80058a8:	f001 f904 	bl	8006ab4 <USBD_LL_Transmit>
    ret = USBD_OK;
 80058ac:	4620      	mov	r0, r4
}
 80058ae:	bd10      	pop	{r4, pc}
 80058b0:	2000a214 	.word	0x2000a214
 80058b4:	2000a444 	.word	0x2000a444

080058b8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 80058b8:	b510      	push	{r4, lr}
 80058ba:	468c      	mov	ip, r1
  hcdc = &CDC_ACM_Class_Data[ch];

  if (pdev->dev_speed == USBD_SPEED_HIGH)
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 80058bc:	4b0c      	ldr	r3, [pc, #48]	@ (80058f0 <USBD_CDC_ReceivePacket+0x38>)
 80058be:	4a0d      	ldr	r2, [pc, #52]	@ (80058f4 <USBD_CDC_ReceivePacket+0x3c>)
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058c0:	f89c 4010 	ldrb.w	r4, [ip, #16]
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 80058c4:	f44f 7107 	mov.w	r1, #540	@ 0x21c
 80058c8:	fb01 3300 	mla	r3, r1, r0, r3
 80058cc:	5c11      	ldrb	r1, [r2, r0]
 80058ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058d2:	b934      	cbnz	r4, 80058e2 <USBD_CDC_ReceivePacket+0x2a>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 80058d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80058d8:	4660      	mov	r0, ip
 80058da:	f001 f8f7 	bl	8006acc <USBD_LL_PrepareReceive>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
}
 80058de:	2000      	movs	r0, #0
 80058e0:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 80058e2:	2340      	movs	r3, #64	@ 0x40
 80058e4:	4660      	mov	r0, ip
 80058e6:	f001 f8f1 	bl	8006acc <USBD_LL_PrepareReceive>
}
 80058ea:	2000      	movs	r0, #0
 80058ec:	bd10      	pop	{r4, pc}
 80058ee:	bf00      	nop
 80058f0:	2000a214 	.word	0x2000a214
 80058f4:	2000a440 	.word	0x2000a440

080058f8 <USBD_Update_CDC_ACM_DESC>:
                              uint8_t com_itf,
                              uint8_t in_ep,
                              uint8_t cmd_ep,
                              uint8_t out_ep,
                              uint8_t str_idx)
{
 80058f8:	b410      	push	{r4}
    desc[45] = com_itf;
    desc[54] = out_ep;
    desc[61] = in_ep;

    desc += 66;
    CDC_IN_EP[i] = in_ep;
 80058fa:	4c13      	ldr	r4, [pc, #76]	@ (8005948 <USBD_Update_CDC_ACM_DESC+0x50>)
    desc[61] = in_ep;
 80058fc:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
    CDC_IN_EP[i] = in_ep;
 8005900:	7023      	strb	r3, [r4, #0]
    CDC_OUT_EP[i] = out_ep;
    CDC_CMD_EP[i] = cmd_ep;
 8005902:	4b12      	ldr	r3, [pc, #72]	@ (800594c <USBD_Update_CDC_ACM_DESC+0x54>)
{
 8005904:	f89d c004 	ldrb.w	ip, [sp, #4]
    CDC_CMD_EP[i] = cmd_ep;
 8005908:	f883 c000 	strb.w	ip, [r3]
    CDC_CMD_ITF_NBR[i] = cmd_itf;
 800590c:	4b10      	ldr	r3, [pc, #64]	@ (8005950 <USBD_Update_CDC_ACM_DESC+0x58>)
    CDC_OUT_EP[i] = out_ep;
 800590e:	4c11      	ldr	r4, [pc, #68]	@ (8005954 <USBD_Update_CDC_ACM_DESC+0x5c>)
    CDC_CMD_ITF_NBR[i] = cmd_itf;
 8005910:	7019      	strb	r1, [r3, #0]
    CDC_COM_ITF_NBR[i] = com_itf;
 8005912:	4b11      	ldr	r3, [pc, #68]	@ (8005958 <USBD_Update_CDC_ACM_DESC+0x60>)
    desc[2] = cmd_itf;
 8005914:	72c1      	strb	r1, [r0, #11]
    desc[10] = cmd_itf;
 8005916:	74c1      	strb	r1, [r0, #19]
    desc[34] = cmd_itf;
 8005918:	f880 102b 	strb.w	r1, [r0, #43]	@ 0x2b
    CDC_STR_DESC_IDX[i] = str_idx;
 800591c:	490f      	ldr	r1, [pc, #60]	@ (800595c <USBD_Update_CDC_ACM_DESC+0x64>)
    CDC_COM_ITF_NBR[i] = com_itf;
 800591e:	701a      	strb	r2, [r3, #0]
    desc[26] = com_itf;
 8005920:	f880 2023 	strb.w	r2, [r0, #35]	@ 0x23
{
 8005924:	f89d 300c 	ldrb.w	r3, [sp, #12]
    desc[35] = com_itf;
 8005928:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c
    desc[45] = com_itf;
 800592c:	f880 2036 	strb.w	r2, [r0, #54]	@ 0x36
{
 8005930:	f89d 2008 	ldrb.w	r2, [sp, #8]
    CDC_OUT_EP[i] = out_ep;
 8005934:	7022      	strb	r2, [r4, #0]
    CDC_STR_DESC_IDX[i] = str_idx;
 8005936:	700b      	strb	r3, [r1, #0]
    str_idx++;

    cmd_itf += 2;
    com_itf = cmd_itf + 1;
  }
}
 8005938:	f85d 4b04 	ldr.w	r4, [sp], #4
    desc[38] = cmd_ep;
 800593c:	f880 c02f 	strb.w	ip, [r0, #47]	@ 0x2f
    desc[16] = str_idx;
 8005940:	7643      	strb	r3, [r0, #25]
    desc[54] = out_ep;
 8005942:	f880 203f 	strb.w	r2, [r0, #63]	@ 0x3f
}
 8005946:	4770      	bx	lr
 8005948:	2000a444 	.word	0x2000a444
 800594c:	2000a43c 	.word	0x2000a43c
 8005950:	2000a438 	.word	0x2000a438
 8005954:	2000a440 	.word	0x2000a440
 8005958:	2000a434 	.word	0x2000a434
 800595c:	2000a430 	.word	0x2000a430

08005960 <USBD_COMPOSITE_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005960:	b538      	push	{r3, r4, r5, lr}
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.Init(pdev, cfgidx);
 8005962:	4b06      	ldr	r3, [pc, #24]	@ (800597c <USBD_COMPOSITE_Init+0x1c>)
 8005964:	681b      	ldr	r3, [r3, #0]
{
 8005966:	4604      	mov	r4, r0
 8005968:	460d      	mov	r5, r1
  USBD_CDC_ACM.Init(pdev, cfgidx);
 800596a:	4798      	blx	r3
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.Init(pdev, cfgidx);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.Init(pdev, cfgidx);
 800596c:	4b04      	ldr	r3, [pc, #16]	@ (8005980 <USBD_COMPOSITE_Init+0x20>)
 800596e:	4629      	mov	r1, r5
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4620      	mov	r0, r4
 8005974:	4798      	blx	r3
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.Init(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
}
 8005976:	2000      	movs	r0, #0
 8005978:	bd38      	pop	{r3, r4, r5, pc}
 800597a:	bf00      	nop
 800597c:	20000148 	.word	0x20000148
 8005980:	20000274 	.word	0x20000274

08005984 <USBD_COMPOSITE_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005984:	b538      	push	{r3, r4, r5, lr}
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.DeInit(pdev, cfgidx);
 8005986:	4b06      	ldr	r3, [pc, #24]	@ (80059a0 <USBD_COMPOSITE_DeInit+0x1c>)
 8005988:	685b      	ldr	r3, [r3, #4]
{
 800598a:	4604      	mov	r4, r0
 800598c:	460d      	mov	r5, r1
  USBD_CDC_ACM.DeInit(pdev, cfgidx);
 800598e:	4798      	blx	r3
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.DeInit(pdev, cfgidx);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.DeInit(pdev, cfgidx);
 8005990:	4b04      	ldr	r3, [pc, #16]	@ (80059a4 <USBD_COMPOSITE_DeInit+0x20>)
 8005992:	4629      	mov	r1, r5
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	4620      	mov	r0, r4
 8005998:	4798      	blx	r3
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.DeInit(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
}
 800599a:	2000      	movs	r0, #0
 800599c:	bd38      	pop	{r3, r4, r5, pc}
 800599e:	bf00      	nop
 80059a0:	20000148 	.word	0x20000148
 80059a4:	20000274 	.word	0x20000274

080059a8 <USBD_COMPOSITE_EP0_RxReady>:
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.EP0_RxReady(pdev);
 80059a8:	4b05      	ldr	r3, [pc, #20]	@ (80059c0 <USBD_COMPOSITE_EP0_RxReady+0x18>)
{
 80059aa:	b510      	push	{r4, lr}
  USBD_CDC_ACM.EP0_RxReady(pdev);
 80059ac:	691b      	ldr	r3, [r3, #16]
{
 80059ae:	4604      	mov	r4, r0
  USBD_CDC_ACM.EP0_RxReady(pdev);
 80059b0:	4798      	blx	r3
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.EP0_RxReady(pdev);
 80059b2:	4b04      	ldr	r3, [pc, #16]	@ (80059c4 <USBD_COMPOSITE_EP0_RxReady+0x1c>)
 80059b4:	4620      	mov	r0, r4
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
}
 80059ba:	2000      	movs	r0, #0
 80059bc:	bd10      	pop	{r4, pc}
 80059be:	bf00      	nop
 80059c0:	20000148 	.word	0x20000148
 80059c4:	20000274 	.word	0x20000274

080059c8 <USBD_COMPOSITE_EP0_TxReady>:
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
}
 80059c8:	2000      	movs	r0, #0
 80059ca:	4770      	bx	lr

080059cc <USBD_COMPOSITE_IsoINIncomplete>:
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
}
 80059cc:	2000      	movs	r0, #0
 80059ce:	4770      	bx	lr

080059d0 <USBD_COMPOSITE_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 80059d0:	236b      	movs	r3, #107	@ 0x6b
 80059d2:	8003      	strh	r3, [r0, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
}
 80059d4:	4800      	ldr	r0, [pc, #0]	@ (80059d8 <USBD_COMPOSITE_GetHSCfgDesc+0x8>)
 80059d6:	4770      	bx	lr
 80059d8:	2000a488 	.word	0x2000a488

080059dc <USBD_COMPOSITE_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
 80059dc:	236b      	movs	r3, #107	@ 0x6b
 80059de:	8003      	strh	r3, [r0, #0]
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
}
 80059e0:	4800      	ldr	r0, [pc, #0]	@ (80059e4 <USBD_COMPOSITE_GetFSCfgDesc+0x8>)
 80059e2:	4770      	bx	lr
 80059e4:	2000a4f4 	.word	0x2000a4f4

080059e8 <USBD_COMPOSITE_GetDeviceQualifierDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_COMPOSITE_GetDeviceQualifierDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_COMPOSITE_DeviceQualifierDesc);
 80059e8:	230a      	movs	r3, #10
 80059ea:	8003      	strh	r3, [r0, #0]
  return USBD_COMPOSITE_DeviceQualifierDesc;
}
 80059ec:	4800      	ldr	r0, [pc, #0]	@ (80059f0 <USBD_COMPOSITE_GetDeviceQualifierDesc+0x8>)
 80059ee:	4770      	bx	lr
 80059f0:	20000190 	.word	0x20000190

080059f4 <USBD_COMPOSITE_GetUsrStringDesc>:
static uint8_t *USBD_COMPOSITE_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
  static uint8_t USBD_StrDesc[64];

  /* Check if the requested string interface is supported */
  if (index <= USBD_Track_String_Index)
 80059f4:	4b15      	ldr	r3, [pc, #84]	@ (8005a4c <USBD_COMPOSITE_GetUsrStringDesc+0x58>)
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	428b      	cmp	r3, r1
 80059fa:	d31d      	bcc.n	8005a38 <USBD_COMPOSITE_GetUsrStringDesc+0x44>
{
 80059fc:	b530      	push	{r4, r5, lr}
  {
#if (USBD_USE_CDC_ACM == 1)
    char str_buffer[16] = "";
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
    {
      if (index == CDC_STR_DESC_IDX[i])
 80059fe:	4b14      	ldr	r3, [pc, #80]	@ (8005a50 <USBD_COMPOSITE_GetUsrStringDesc+0x5c>)
 8005a00:	4614      	mov	r4, r2
 8005a02:	781a      	ldrb	r2, [r3, #0]
{
 8005a04:	b085      	sub	sp, #20
    char str_buffer[16] = "";
 8005a06:	2300      	movs	r3, #0
      if (index == CDC_STR_DESC_IDX[i])
 8005a08:	428a      	cmp	r2, r1
    char str_buffer[16] = "";
 8005a0a:	e9cd 3300 	strd	r3, r3, [sp]
 8005a0e:	e9cd 3302 	strd	r3, r3, [sp, #8]
      if (index == CDC_STR_DESC_IDX[i])
 8005a12:	460d      	mov	r5, r1
 8005a14:	d109      	bne.n	8005a2a <USBD_COMPOSITE_GetUsrStringDesc+0x36>
      {
        snprintf(str_buffer, sizeof(str_buffer), CDC_ACM_STR_DESC, i);
 8005a16:	4a0f      	ldr	r2, [pc, #60]	@ (8005a54 <USBD_COMPOSITE_GetUsrStringDesc+0x60>)
 8005a18:	2110      	movs	r1, #16
 8005a1a:	4668      	mov	r0, sp
 8005a1c:	f001 f866 	bl	8006aec <sniprintf>
        USBD_GetString((uint8_t *)str_buffer, USBD_StrDesc, length);
 8005a20:	490d      	ldr	r1, [pc, #52]	@ (8005a58 <USBD_COMPOSITE_GetUsrStringDesc+0x64>)
 8005a22:	4622      	mov	r2, r4
 8005a24:	4668      	mov	r0, sp
 8005a26:	f000 fee3 	bl	80067f0 <USBD_GetString>
    {
      USBD_GetString((uint8_t *)HID_KEYBOARD_STR_DESC, USBD_StrDesc, length);
    }
#endif
#if (USBD_USE_HID_CUSTOM == 1)
    if (index == CUSTOM_HID_STR_DESC_IDX)
 8005a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8005a5c <USBD_COMPOSITE_GetUsrStringDesc+0x68>)
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	42ab      	cmp	r3, r5
 8005a30:	d004      	beq.n	8005a3c <USBD_COMPOSITE_GetUsrStringDesc+0x48>
    if (index == PRINTER_STR_DESC_IDX)
    {
      USBD_GetString((uint8_t *)PRNT_STR_DESC, USBD_StrDesc, length);
    }
#endif
    return USBD_StrDesc;
 8005a32:	4809      	ldr	r0, [pc, #36]	@ (8005a58 <USBD_COMPOSITE_GetUsrStringDesc+0x64>)
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
  }
}
 8005a34:	b005      	add	sp, #20
 8005a36:	bd30      	pop	{r4, r5, pc}
    return NULL;
 8005a38:	2000      	movs	r0, #0
}
 8005a3a:	4770      	bx	lr
      USBD_GetString((uint8_t *)CUSTOM_HID_STR_DESC, USBD_StrDesc, length);
 8005a3c:	4906      	ldr	r1, [pc, #24]	@ (8005a58 <USBD_COMPOSITE_GetUsrStringDesc+0x64>)
 8005a3e:	4808      	ldr	r0, [pc, #32]	@ (8005a60 <USBD_COMPOSITE_GetUsrStringDesc+0x6c>)
 8005a40:	4622      	mov	r2, r4
 8005a42:	f000 fed5 	bl	80067f0 <USBD_GetString>
    return USBD_StrDesc;
 8005a46:	4804      	ldr	r0, [pc, #16]	@ (8005a58 <USBD_COMPOSITE_GetUsrStringDesc+0x64>)
}
 8005a48:	b005      	add	sp, #20
 8005a4a:	bd30      	pop	{r4, r5, pc}
 8005a4c:	2000019a 	.word	0x2000019a
 8005a50:	2000a430 	.word	0x2000a430
 8005a54:	080074b8 	.word	0x080074b8
 8005a58:	2000a448 	.word	0x2000a448
 8005a5c:	2000a5b4 	.word	0x2000a5b4
 8005a60:	080074c8 	.word	0x080074c8

08005a64 <USBD_COMPOSITE_Setup>:
{
 8005a64:	b530      	push	{r4, r5, lr}
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 8005a66:	4d0f      	ldr	r5, [pc, #60]	@ (8005aa4 <USBD_COMPOSITE_Setup+0x40>)
 8005a68:	790a      	ldrb	r2, [r1, #4]
 8005a6a:	f895 e000 	ldrb.w	lr, [r5]
 8005a6e:	4c0e      	ldr	r4, [pc, #56]	@ (8005aa8 <USBD_COMPOSITE_Setup+0x44>)
 8005a70:	4596      	cmp	lr, r2
 8005a72:	7824      	ldrb	r4, [r4, #0]
{
 8005a74:	460b      	mov	r3, r1
 8005a76:	4684      	mov	ip, r0
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 8005a78:	d001      	beq.n	8005a7e <USBD_COMPOSITE_Setup+0x1a>
 8005a7a:	4294      	cmp	r4, r2
 8005a7c:	d106      	bne.n	8005a8c <USBD_COMPOSITE_Setup+0x28>
      return USBD_CDC_ACM.Setup(pdev, req);
 8005a7e:	4a0b      	ldr	r2, [pc, #44]	@ (8005aac <USBD_COMPOSITE_Setup+0x48>)
 8005a80:	4619      	mov	r1, r3
}
 8005a82:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return USBD_CDC_ACM.Setup(pdev, req);
 8005a86:	6893      	ldr	r3, [r2, #8]
 8005a88:	4660      	mov	r0, ip
 8005a8a:	4718      	bx	r3
  if (LOBYTE(req->wIndex) == CUSTOM_HID_ITF_NBR)
 8005a8c:	4b08      	ldr	r3, [pc, #32]	@ (8005ab0 <USBD_COMPOSITE_Setup+0x4c>)
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d001      	beq.n	8005a98 <USBD_COMPOSITE_Setup+0x34>
}
 8005a94:	2003      	movs	r0, #3
 8005a96:	bd30      	pop	{r4, r5, pc}
    return USBD_HID_CUSTOM.Setup(pdev, req);
 8005a98:	4b06      	ldr	r3, [pc, #24]	@ (8005ab4 <USBD_COMPOSITE_Setup+0x50>)
}
 8005a9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return USBD_HID_CUSTOM.Setup(pdev, req);
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	4718      	bx	r3
 8005aa2:	bf00      	nop
 8005aa4:	2000a438 	.word	0x2000a438
 8005aa8:	2000a434 	.word	0x2000a434
 8005aac:	20000148 	.word	0x20000148
 8005ab0:	2000a5b5 	.word	0x2000a5b5
 8005ab4:	20000274 	.word	0x20000274

08005ab8 <USBD_COMPOSITE_DataIn>:
{
 8005ab8:	b510      	push	{r4, lr}
    if (epnum == (CDC_IN_EP[i] & 0x7F) || epnum == (CDC_CMD_EP[i] & 0x7F))
 8005aba:	4b11      	ldr	r3, [pc, #68]	@ (8005b00 <USBD_COMPOSITE_DataIn+0x48>)
 8005abc:	4c11      	ldr	r4, [pc, #68]	@ (8005b04 <USBD_COMPOSITE_DataIn+0x4c>)
 8005abe:	781a      	ldrb	r2, [r3, #0]
 8005ac0:	f894 c000 	ldrb.w	ip, [r4]
 8005ac4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005ac8:	4291      	cmp	r1, r2
{
 8005aca:	460b      	mov	r3, r1
 8005acc:	4686      	mov	lr, r0
    if (epnum == (CDC_IN_EP[i] & 0x7F) || epnum == (CDC_CMD_EP[i] & 0x7F))
 8005ace:	d003      	beq.n	8005ad8 <USBD_COMPOSITE_DataIn+0x20>
 8005ad0:	f00c 0c7f 	and.w	ip, ip, #127	@ 0x7f
 8005ad4:	4561      	cmp	r1, ip
 8005ad6:	d106      	bne.n	8005ae6 <USBD_COMPOSITE_DataIn+0x2e>
      return USBD_CDC_ACM.DataIn(pdev, epnum);
 8005ad8:	4a0b      	ldr	r2, [pc, #44]	@ (8005b08 <USBD_COMPOSITE_DataIn+0x50>)
 8005ada:	4619      	mov	r1, r3
 8005adc:	4670      	mov	r0, lr
 8005ade:	6953      	ldr	r3, [r2, #20]
}
 8005ae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return USBD_CDC_ACM.DataIn(pdev, epnum);
 8005ae4:	4718      	bx	r3
  if (epnum == (CUSTOM_HID_IN_EP & 0x7F))
 8005ae6:	4a09      	ldr	r2, [pc, #36]	@ (8005b0c <USBD_COMPOSITE_DataIn+0x54>)
 8005ae8:	7812      	ldrb	r2, [r2, #0]
 8005aea:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005aee:	4291      	cmp	r1, r2
 8005af0:	d001      	beq.n	8005af6 <USBD_COMPOSITE_DataIn+0x3e>
}
 8005af2:	2003      	movs	r0, #3
 8005af4:	bd10      	pop	{r4, pc}
    return USBD_HID_CUSTOM.DataIn(pdev, epnum);
 8005af6:	4b06      	ldr	r3, [pc, #24]	@ (8005b10 <USBD_COMPOSITE_DataIn+0x58>)
}
 8005af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return USBD_HID_CUSTOM.DataIn(pdev, epnum);
 8005afc:	695b      	ldr	r3, [r3, #20]
 8005afe:	4718      	bx	r3
 8005b00:	2000a444 	.word	0x2000a444
 8005b04:	2000a43c 	.word	0x2000a43c
 8005b08:	20000148 	.word	0x20000148
 8005b0c:	200002b1 	.word	0x200002b1
 8005b10:	20000274 	.word	0x20000274

08005b14 <USBD_COMPOSITE_DataOut>:
    if (epnum == CDC_OUT_EP[i])
 8005b14:	4b07      	ldr	r3, [pc, #28]	@ (8005b34 <USBD_COMPOSITE_DataOut+0x20>)
 8005b16:	781a      	ldrb	r2, [r3, #0]
 8005b18:	428a      	cmp	r2, r1
 8005b1a:	d102      	bne.n	8005b22 <USBD_COMPOSITE_DataOut+0xe>
      return USBD_CDC_ACM.DataOut(pdev, epnum);
 8005b1c:	4b06      	ldr	r3, [pc, #24]	@ (8005b38 <USBD_COMPOSITE_DataOut+0x24>)
 8005b1e:	699b      	ldr	r3, [r3, #24]
 8005b20:	4718      	bx	r3
  if (epnum == CUSTOM_HID_OUT_EP)
 8005b22:	4a06      	ldr	r2, [pc, #24]	@ (8005b3c <USBD_COMPOSITE_DataOut+0x28>)
 8005b24:	7812      	ldrb	r2, [r2, #0]
 8005b26:	428a      	cmp	r2, r1
 8005b28:	d001      	beq.n	8005b2e <USBD_COMPOSITE_DataOut+0x1a>
}
 8005b2a:	2003      	movs	r0, #3
 8005b2c:	4770      	bx	lr
    return USBD_HID_CUSTOM.DataOut(pdev, epnum);
 8005b2e:	4b04      	ldr	r3, [pc, #16]	@ (8005b40 <USBD_COMPOSITE_DataOut+0x2c>)
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	4718      	bx	r3
 8005b34:	2000a440 	.word	0x2000a440
 8005b38:	20000148 	.word	0x20000148
 8005b3c:	200002b0 	.word	0x200002b0
 8005b40:	20000274 	.word	0x20000274

08005b44 <USBD_COMPOSITE_IsoOutIncomplete>:
static uint8_t USBD_COMPOSITE_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
 8005b44:	2000      	movs	r0, #0
 8005b46:	4770      	bx	lr

08005b48 <USBD_COMPOSITE_SOF>:
static uint8_t USBD_COMPOSITE_SOF(USBD_HandleTypeDef *pdev)
 8005b48:	2000      	movs	r0, #0
 8005b4a:	4770      	bx	lr

08005b4c <USBD_COMPOSITE_GetOtherSpeedCfgDesc>:
static uint8_t *USBD_COMPOSITE_GetOtherSpeedCfgDesc(uint16_t *length)
 8005b4c:	236b      	movs	r3, #107	@ 0x6b
 8005b4e:	8003      	strh	r3, [r0, #0]
 8005b50:	4800      	ldr	r0, [pc, #0]	@ (8005b54 <USBD_COMPOSITE_GetOtherSpeedCfgDesc+0x8>)
 8005b52:	4770      	bx	lr
 8005b54:	2000a488 	.word	0x2000a488

08005b58 <USBD_COMPOSITE_Mount_Class>:
#endif

void USBD_COMPOSITE_Mount_Class(void)
{
 8005b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_HID_CUSTOM == 1)
  ptr = USBD_HID_CUSTOM.GetFSConfigDescriptor(&len);
 8005b5c:	4f3e      	ldr	r7, [pc, #248]	@ (8005c58 <USBD_COMPOSITE_Mount_Class+0x100>)
  USBD_Update_HID_Custom_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 8005b5e:	4c3f      	ldr	r4, [pc, #252]	@ (8005c5c <USBD_COMPOSITE_Mount_Class+0x104>)
  ptr = USBD_HID_CUSTOM.GetFSConfigDescriptor(&len);
 8005b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_CDC_ACM == 1)
  ptr = USBD_CDC_ACM.GetFSConfigDescriptor(&len);
 8005b62:	f8df a10c 	ldr.w	sl, [pc, #268]	@ 8005c70 <USBD_COMPOSITE_Mount_Class+0x118>
{
 8005b66:	b086      	sub	sp, #24
  uint16_t len = 0;
 8005b68:	2600      	movs	r6, #0
 8005b6a:	f8ad 6016 	strh.w	r6, [sp, #22]
  ptr = USBD_HID_CUSTOM.GetFSConfigDescriptor(&len);
 8005b6e:	f10d 0016 	add.w	r0, sp, #22
 8005b72:	4798      	blx	r3
  USBD_Update_HID_Custom_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 8005b74:	7822      	ldrb	r2, [r4, #0]
 8005b76:	9200      	str	r2, [sp, #0]
  ptr = USBD_HID_CUSTOM.GetFSConfigDescriptor(&len);
 8005b78:	4605      	mov	r5, r0
  USBD_Update_HID_Custom_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	4631      	mov	r1, r6
 8005b7e:	2281      	movs	r2, #129	@ 0x81
 8005b80:	f000 fa06 	bl	8005f90 <USBD_Update_HID_Custom_DESC>
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_HID_CUSTOM_DESC, ptr + 0x09, len - 0x09);
 8005b84:	f105 0109 	add.w	r1, r5, #9
 8005b88:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8005b8c:	4d34      	ldr	r5, [pc, #208]	@ (8005c60 <USBD_COMPOSITE_Mount_Class+0x108>)
 8005b8e:	3a09      	subs	r2, #9
 8005b90:	4628      	mov	r0, r5
 8005b92:	f001 f80d 	bl	8006bb0 <memcpy>
  ptr = USBD_HID_CUSTOM.GetHSConfigDescriptor(&len);
 8005b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b98:	f10d 0016 	add.w	r0, sp, #22
 8005b9c:	4798      	blx	r3
  USBD_Update_HID_Custom_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 8005b9e:	7823      	ldrb	r3, [r4, #0]
 8005ba0:	9300      	str	r3, [sp, #0]
 8005ba2:	4631      	mov	r1, r6
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	2281      	movs	r2, #129	@ 0x81
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_HID_CUSTOM_DESC, ptr + 0x09, len - 0x09);
 8005ba8:	4e2e      	ldr	r6, [pc, #184]	@ (8005c64 <USBD_COMPOSITE_Mount_Class+0x10c>)
  ptr = USBD_HID_CUSTOM.GetHSConfigDescriptor(&len);
 8005baa:	4607      	mov	r7, r0
  USBD_Update_HID_Custom_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 8005bac:	f000 f9f0 	bl	8005f90 <USBD_Update_HID_Custom_DESC>
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_HID_CUSTOM_DESC, ptr + 0x09, len - 0x09);
 8005bb0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8005bb4:	f107 0109 	add.w	r1, r7, #9
 8005bb8:	3a09      	subs	r2, #9
 8005bba:	4630      	mov	r0, r6
 8005bbc:	f000 fff8 	bl	8006bb0 <memcpy>
  USBD_Track_String_Index += 1;
 8005bc0:	7823      	ldrb	r3, [r4, #0]
 8005bc2:	3301      	adds	r3, #1
  USBD_Update_CDC_ACM_DESC(ptr,
 8005bc4:	2702      	movs	r7, #2
  USBD_Track_String_Index += 1;
 8005bc6:	7023      	strb	r3, [r4, #0]
  ptr = USBD_CDC_ACM.GetFSConfigDescriptor(&len);
 8005bc8:	f10d 0016 	add.w	r0, sp, #22
 8005bcc:	f8da 302c 	ldr.w	r3, [sl, #44]	@ 0x2c
 8005bd0:	4798      	blx	r3
  USBD_Update_CDC_ACM_DESC(ptr,
 8005bd2:	9701      	str	r7, [sp, #4]
 8005bd4:	7823      	ldrb	r3, [r4, #0]
 8005bd6:	9302      	str	r3, [sp, #8]
 8005bd8:	f04f 0983 	mov.w	r9, #131	@ 0x83
 8005bdc:	2382      	movs	r3, #130	@ 0x82
 8005bde:	463a      	mov	r2, r7
 8005be0:	f8cd 9000 	str.w	r9, [sp]
 8005be4:	2101      	movs	r1, #1
  ptr = USBD_CDC_ACM.GetFSConfigDescriptor(&len);
 8005be6:	4680      	mov	r8, r0
  USBD_Update_CDC_ACM_DESC(ptr,
 8005be8:	f7ff fe86 	bl	80058f8 <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 8005bec:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8005bf0:	f108 0109 	add.w	r1, r8, #9
 8005bf4:	3a09      	subs	r2, #9
 8005bf6:	f105 0020 	add.w	r0, r5, #32
 8005bfa:	f000 ffd9 	bl	8006bb0 <memcpy>

  ptr = USBD_CDC_ACM.GetHSConfigDescriptor(&len);
 8005bfe:	f8da 3028 	ldr.w	r3, [sl, #40]	@ 0x28
 8005c02:	f10d 0016 	add.w	r0, sp, #22
 8005c06:	4798      	blx	r3
  USBD_Update_CDC_ACM_DESC(ptr,
 8005c08:	e9cd 9700 	strd	r9, r7, [sp]
 8005c0c:	7823      	ldrb	r3, [r4, #0]
 8005c0e:	9302      	str	r3, [sp, #8]
 8005c10:	463a      	mov	r2, r7
 8005c12:	2382      	movs	r3, #130	@ 0x82
 8005c14:	2101      	movs	r1, #1
  ptr = USBD_CDC_ACM.GetHSConfigDescriptor(&len);
 8005c16:	4607      	mov	r7, r0
  USBD_Update_CDC_ACM_DESC(ptr,
 8005c18:	f7ff fe6e 	bl	80058f8 <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 8005c1c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8005c20:	f107 0109 	add.w	r1, r7, #9
 8005c24:	3a09      	subs	r2, #9
 8005c26:	f106 0020 	add.w	r0, r6, #32
 8005c2a:	f000 ffc1 	bl	8006bb0 <memcpy>

  in_ep_track += 2 * USBD_CDC_ACM_COUNT;
  out_ep_track += 1 * USBD_CDC_ACM_COUNT;
  interface_no_track += 2 * USBD_CDC_ACM_COUNT;
  USBD_Track_String_Index += USBD_CDC_ACM_COUNT;
 8005c2e:	7823      	ldrb	r3, [r4, #0]
#endif

  uint16_t CFG_SIZE = sizeof(USBD_COMPOSITE_CFG_DESC_t);
  ptr = USBD_COMPOSITE_HSCfgDesc.CONFIG_DESC;
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 8005c30:	490d      	ldr	r1, [pc, #52]	@ (8005c68 <USBD_COMPOSITE_Mount_Class+0x110>)
 8005c32:	4a0e      	ldr	r2, [pc, #56]	@ (8005c6c <USBD_COMPOSITE_Mount_Class+0x114>)
 8005c34:	f846 1c09 	str.w	r1, [r6, #-9]
  USBD_Track_String_Index += USBD_CDC_ACM_COUNT;
 8005c38:	3301      	adds	r3, #1
 8005c3a:	7023      	strb	r3, [r4, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 8005c3c:	2332      	movs	r3, #50	@ 0x32

  ptr = USBD_COMPOSITE_FSCfgDesc.CONFIG_DESC;
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 8005c3e:	f845 1c09 	str.w	r1, [r5, #-9]
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 8005c42:	f846 2c05 	str.w	r2, [r6, #-5]
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 8005c46:	f806 3c01 	strb.w	r3, [r6, #-1]
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 8005c4a:	f845 2c05 	str.w	r2, [r5, #-5]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 8005c4e:	f805 3c01 	strb.w	r3, [r5, #-1]

  (void)out_ep_track;
  (void)in_ep_track;
}
 8005c52:	b006      	add	sp, #24
 8005c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c58:	20000274 	.word	0x20000274
 8005c5c:	2000019a 	.word	0x2000019a
 8005c60:	2000a4fd 	.word	0x2000a4fd
 8005c64:	2000a491 	.word	0x2000a491
 8005c68:	006b0209 	.word	0x006b0209
 8005c6c:	c0000103 	.word	0xc0000103
 8005c70:	20000148 	.word	0x20000148

08005c74 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8005c74:	2329      	movs	r3, #41	@ 0x29
 8005c76:	8003      	strh	r3, [r0, #0]

  return USBD_CUSTOM_HID_CfgFSDesc;
}
 8005c78:	4800      	ldr	r0, [pc, #0]	@ (8005c7c <USBD_CUSTOM_HID_GetFSCfgDesc+0x8>)
 8005c7a:	4770      	bx	lr
 8005c7c:	20000248 	.word	0x20000248

08005c80 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8005c80:	2329      	movs	r3, #41	@ 0x29
 8005c82:	8003      	strh	r3, [r0, #0]

  return USBD_CUSTOM_HID_CfgHSDesc;
}
 8005c84:	4800      	ldr	r0, [pc, #0]	@ (8005c88 <USBD_CUSTOM_HID_GetHSCfgDesc+0x8>)
 8005c86:	4770      	bx	lr
 8005c88:	2000021c 	.word	0x2000021c

08005c8c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8005c8c:	2329      	movs	r3, #41	@ 0x29
 8005c8e:	8003      	strh	r3, [r0, #0]

  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
}
 8005c90:	4800      	ldr	r0, [pc, #0]	@ (8005c94 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x8>)
 8005c92:	4770      	bx	lr
 8005c94:	200001f0 	.word	0x200001f0

08005c98 <USBD_CUSTOM_HID_DataIn>:
{
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom)->state = CUSTOM_HID_IDLE;
 8005c98:	f8d0 22d8 	ldr.w	r2, [r0, #728]	@ 0x2d8
 8005c9c:	2300      	movs	r3, #0
 // HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6); // hoặc nháy LED nếu có
  return (uint8_t)USBD_OK;
}
 8005c9e:	4618      	mov	r0, r3
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom)->state = CUSTOM_HID_IDLE;
 8005ca0:	f882 3050 	strb.w	r3, [r2, #80]	@ 0x50
}
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop

08005ca8 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005ca8:	b510      	push	{r4, lr}
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 8005caa:	f8d0 42d8 	ldr.w	r4, [r0, #728]	@ 0x2d8

  if (hhid == NULL)
 8005cae:	b164      	cbz	r4, 8005cca <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hhid->IsReportAvailable == 1U)
 8005cb0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d107      	bne.n	8005cc6 <USBD_CUSTOM_HID_EP0_RxReady+0x1e>
  {
    //((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->OutEvent(hhid->Report_buf[0], hhid->Report_buf[1]);
	  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->OutEvent(hhid->Report_buf, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 8005cb6:	f8d0 32dc 	ldr.w	r3, [r0, #732]	@ 0x2dc
 8005cba:	2140      	movs	r1, #64	@ 0x40
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	4620      	mov	r0, r4
 8005cc0:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	64e3      	str	r3, [r4, #76]	@ 0x4c
  }

  return (uint8_t)USBD_OK;
 8005cc6:	2000      	movs	r0, #0
}
 8005cc8:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 8005cca:	2003      	movs	r0, #3
}
 8005ccc:	bd10      	pop	{r4, pc}
 8005cce:	bf00      	nop

08005cd0 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8005cd0:	230a      	movs	r3, #10
 8005cd2:	8003      	strh	r3, [r0, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
}
 8005cd4:	4800      	ldr	r0, [pc, #0]	@ (8005cd8 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x8>)
 8005cd6:	4770      	bx	lr
 8005cd8:	200001d8 	.word	0x200001d8

08005cdc <USBD_CUSTOM_HID_DataOut>:
{
 8005cdc:	b538      	push	{r3, r4, r5, lr}
  if (pdev->pClassData_HID_Custom == NULL)
 8005cde:	f8d0 52d8 	ldr.w	r5, [r0, #728]	@ 0x2d8
 8005ce2:	b17d      	cbz	r5, 8005d04 <USBD_CUSTOM_HID_DataOut+0x28>
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->OutEvent(hhid->Report_buf, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 8005ce4:	f8d0 32dc 	ldr.w	r3, [r0, #732]	@ 0x2dc
 8005ce8:	4604      	mov	r4, r0
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	2140      	movs	r1, #64	@ 0x40
 8005cee:	4628      	mov	r0, r5
 8005cf0:	4798      	blx	r3
  USBD_LL_PrepareReceive(pdev,CUSTOM_HID_OUT_EP,hhid->Report_buf,
 8005cf2:	4a05      	ldr	r2, [pc, #20]	@ (8005d08 <USBD_CUSTOM_HID_DataOut+0x2c>)
 8005cf4:	2340      	movs	r3, #64	@ 0x40
 8005cf6:	7811      	ldrb	r1, [r2, #0]
 8005cf8:	4620      	mov	r0, r4
 8005cfa:	462a      	mov	r2, r5
 8005cfc:	f000 fee6 	bl	8006acc <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8005d00:	2000      	movs	r0, #0
}
 8005d02:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 8005d04:	2003      	movs	r0, #3
}
 8005d06:	bd38      	pop	{r3, r4, r5, pc}
 8005d08:	200002b0 	.word	0x200002b0

08005d0c <USBD_CUSTOM_HID_Setup>:
{
 8005d0c:	b510      	push	{r4, lr}
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 8005d0e:	f8d0 42d8 	ldr.w	r4, [r0, #728]	@ 0x2d8
{
 8005d12:	b082      	sub	sp, #8
  uint16_t status_info = 0U;
 8005d14:	2300      	movs	r3, #0
 8005d16:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (hhid == NULL)
 8005d1a:	b13c      	cbz	r4, 8005d2c <USBD_CUSTOM_HID_Setup+0x20>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d1c:	780b      	ldrb	r3, [r1, #0]
 8005d1e:	f013 0360 	ands.w	r3, r3, #96	@ 0x60
 8005d22:	d021      	beq.n	8005d68 <USBD_CUSTOM_HID_Setup+0x5c>
 8005d24:	2b20      	cmp	r3, #32
 8005d26:	d004      	beq.n	8005d32 <USBD_CUSTOM_HID_Setup+0x26>
        USBD_CtlError(pdev, req);
 8005d28:	f000 fd56 	bl	80067d8 <USBD_CtlError>
    return (uint8_t)USBD_FAIL;
 8005d2c:	2003      	movs	r0, #3
}
 8005d2e:	b002      	add	sp, #8
 8005d30:	bd10      	pop	{r4, pc}
    switch (req->bRequest)
 8005d32:	784b      	ldrb	r3, [r1, #1]
 8005d34:	3b02      	subs	r3, #2
 8005d36:	2b09      	cmp	r3, #9
 8005d38:	d8f6      	bhi.n	8005d28 <USBD_CUSTOM_HID_Setup+0x1c>
 8005d3a:	a201      	add	r2, pc, #4	@ (adr r2, 8005d40 <USBD_CUSTOM_HID_Setup+0x34>)
 8005d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d40:	08005dad 	.word	0x08005dad
 8005d44:	08005db9 	.word	0x08005db9
 8005d48:	08005d29 	.word	0x08005d29
 8005d4c:	08005d29 	.word	0x08005d29
 8005d50:	08005d29 	.word	0x08005d29
 8005d54:	08005d29 	.word	0x08005d29
 8005d58:	08005d29 	.word	0x08005d29
 8005d5c:	08005dc5 	.word	0x08005dc5
 8005d60:	08005dd3 	.word	0x08005dd3
 8005d64:	08005da5 	.word	0x08005da5
    switch (req->bRequest)
 8005d68:	784b      	ldrb	r3, [r1, #1]
 8005d6a:	2b0b      	cmp	r3, #11
 8005d6c:	d8dc      	bhi.n	8005d28 <USBD_CUSTOM_HID_Setup+0x1c>
 8005d6e:	a201      	add	r2, pc, #4	@ (adr r2, 8005d74 <USBD_CUSTOM_HID_Setup+0x68>)
 8005d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d74:	08005ddb 	.word	0x08005ddb
 8005d78:	08005da9 	.word	0x08005da9
 8005d7c:	08005d29 	.word	0x08005d29
 8005d80:	08005d29 	.word	0x08005d29
 8005d84:	08005d29 	.word	0x08005d29
 8005d88:	08005d29 	.word	0x08005d29
 8005d8c:	08005def 	.word	0x08005def
 8005d90:	08005d29 	.word	0x08005d29
 8005d94:	08005d29 	.word	0x08005d29
 8005d98:	08005d29 	.word	0x08005d29
 8005d9c:	08005e01 	.word	0x08005e01
 8005da0:	08005e15 	.word	0x08005e15
      hhid->Protocol = (uint8_t)(req->wValue);
 8005da4:	788b      	ldrb	r3, [r1, #2]
 8005da6:	6423      	str	r3, [r4, #64]	@ 0x40
  USBD_StatusTypeDef ret = USBD_OK;
 8005da8:	2000      	movs	r0, #0
 8005daa:	e7c0      	b.n	8005d2e <USBD_CUSTOM_HID_Setup+0x22>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8005dac:	2201      	movs	r2, #1
 8005dae:	f104 0144 	add.w	r1, r4, #68	@ 0x44
 8005db2:	f000 fd45 	bl	8006840 <USBD_CtlSendData>
      break;
 8005db6:	e7f7      	b.n	8005da8 <USBD_CUSTOM_HID_Setup+0x9c>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8005db8:	2201      	movs	r2, #1
 8005dba:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 8005dbe:	f000 fd3f 	bl	8006840 <USBD_CtlSendData>
      break;
 8005dc2:	e7f1      	b.n	8005da8 <USBD_CUSTOM_HID_Setup+0x9c>
      hhid->IsReportAvailable = 1U;
 8005dc4:	2301      	movs	r3, #1
      (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8005dc6:	88ca      	ldrh	r2, [r1, #6]
      hhid->IsReportAvailable = 1U;
 8005dc8:	64e3      	str	r3, [r4, #76]	@ 0x4c
      (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8005dca:	4621      	mov	r1, r4
 8005dcc:	f000 fd4e 	bl	800686c <USBD_CtlPrepareRx>
      break;
 8005dd0:	e7ea      	b.n	8005da8 <USBD_CUSTOM_HID_Setup+0x9c>
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005dd2:	884b      	ldrh	r3, [r1, #2]
 8005dd4:	0a1b      	lsrs	r3, r3, #8
 8005dd6:	6463      	str	r3, [r4, #68]	@ 0x44
      break;
 8005dd8:	e7e6      	b.n	8005da8 <USBD_CUSTOM_HID_Setup+0x9c>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dda:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005dde:	2b03      	cmp	r3, #3
 8005de0:	d1a2      	bne.n	8005d28 <USBD_CUSTOM_HID_Setup+0x1c>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005de2:	2202      	movs	r2, #2
 8005de4:	f10d 0106 	add.w	r1, sp, #6
 8005de8:	f000 fd2a 	bl	8006840 <USBD_CtlSendData>
 8005dec:	e7dc      	b.n	8005da8 <USBD_CUSTOM_HID_Setup+0x9c>
      if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8005dee:	884b      	ldrh	r3, [r1, #2]
 8005df0:	0a1b      	lsrs	r3, r3, #8
 8005df2:	2b22      	cmp	r3, #34	@ 0x22
 8005df4:	d015      	beq.n	8005e22 <USBD_CUSTOM_HID_Setup+0x116>
        if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8005df6:	2b21      	cmp	r3, #33	@ 0x21
 8005df8:	d01b      	beq.n	8005e32 <USBD_CUSTOM_HID_Setup+0x126>
 8005dfa:	2200      	movs	r2, #0
  uint8_t *pbuf = NULL;
 8005dfc:	4611      	mov	r1, r2
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005dfe:	e7de      	b.n	8005dbe <USBD_CUSTOM_HID_Setup+0xb2>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e00:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005e04:	2b03      	cmp	r3, #3
 8005e06:	d18f      	bne.n	8005d28 <USBD_CUSTOM_HID_Setup+0x1c>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8005e08:	2201      	movs	r2, #1
 8005e0a:	f104 0148 	add.w	r1, r4, #72	@ 0x48
 8005e0e:	f000 fd17 	bl	8006840 <USBD_CtlSendData>
 8005e12:	e7c9      	b.n	8005da8 <USBD_CUSTOM_HID_Setup+0x9c>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e14:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005e18:	2b03      	cmp	r3, #3
 8005e1a:	d185      	bne.n	8005d28 <USBD_CUSTOM_HID_Setup+0x1c>
        hhid->AltSetting = (uint8_t)(req->wValue);
 8005e1c:	788b      	ldrb	r3, [r1, #2]
 8005e1e:	64a3      	str	r3, [r4, #72]	@ 0x48
 8005e20:	e7c2      	b.n	8005da8 <USBD_CUSTOM_HID_Setup+0x9c>
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8005e22:	88ca      	ldrh	r2, [r1, #6]
        pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->pReport;
 8005e24:	f8d0 32dc 	ldr.w	r3, [r0, #732]	@ 0x2dc
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005e28:	2a21      	cmp	r2, #33	@ 0x21
        pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->pReport;
 8005e2a:	6819      	ldr	r1, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005e2c:	bf28      	it	cs
 8005e2e:	2221      	movcs	r2, #33	@ 0x21
 8005e30:	e7c5      	b.n	8005dbe <USBD_CUSTOM_HID_Setup+0xb2>
          len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8005e32:	88ca      	ldrh	r2, [r1, #6]
          pbuf = USBD_CUSTOM_HID_Desc;
 8005e34:	4902      	ldr	r1, [pc, #8]	@ (8005e40 <USBD_CUSTOM_HID_Setup+0x134>)
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005e36:	2a09      	cmp	r2, #9
 8005e38:	bf28      	it	cs
 8005e3a:	2209      	movcs	r2, #9
 8005e3c:	e7bf      	b.n	8005dbe <USBD_CUSTOM_HID_Setup+0xb2>
 8005e3e:	bf00      	nop
 8005e40:	200001e4 	.word	0x200001e4

08005e44 <USBD_CUSTOM_HID_DeInit>:
{
 8005e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_IN_EP);
 8005e46:	4f13      	ldr	r7, [pc, #76]	@ (8005e94 <USBD_CUSTOM_HID_DeInit+0x50>)
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_OUT_EP);
 8005e48:	4e13      	ldr	r6, [pc, #76]	@ (8005e98 <USBD_CUSTOM_HID_DeInit+0x54>)
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_IN_EP);
 8005e4a:	7839      	ldrb	r1, [r7, #0]
{
 8005e4c:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_IN_EP);
 8005e4e:	f000 fded 	bl	8006a2c <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].is_used = 0U;
 8005e52:	783b      	ldrb	r3, [r7, #0]
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_OUT_EP);
 8005e54:	7831      	ldrb	r1, [r6, #0]
  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].is_used = 0U;
 8005e56:	f003 030f 	and.w	r3, r3, #15
 8005e5a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005e5e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005e62:	2500      	movs	r5, #0
 8005e64:	625d      	str	r5, [r3, #36]	@ 0x24
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_OUT_EP);
 8005e66:	4620      	mov	r0, r4
 8005e68:	f000 fde0 	bl	8006a2c <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].is_used = 0U;
 8005e6c:	7833      	ldrb	r3, [r6, #0]
  if (pdev->pClassData_HID_Custom != NULL)
 8005e6e:	f8d4 22d8 	ldr.w	r2, [r4, #728]	@ 0x2d8
  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].is_used = 0U;
 8005e72:	f003 030f 	and.w	r3, r3, #15
 8005e76:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005e7a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005e7e:	f8c3 5164 	str.w	r5, [r3, #356]	@ 0x164
  if (pdev->pClassData_HID_Custom != NULL)
 8005e82:	b12a      	cbz	r2, 8005e90 <USBD_CUSTOM_HID_DeInit+0x4c>
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->DeInit();
 8005e84:	f8d4 32dc 	ldr.w	r3, [r4, #732]	@ 0x2dc
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	4798      	blx	r3
    pdev->pClassData_HID_Custom = NULL;
 8005e8c:	f8c4 52d8 	str.w	r5, [r4, #728]	@ 0x2d8
}
 8005e90:	2000      	movs	r0, #0
 8005e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e94:	200002b1 	.word	0x200002b1
 8005e98:	200002b0 	.word	0x200002b0

08005e9c <USBD_CUSTOM_HID_Init>:
{
 8005e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005ea0:	4d25      	ldr	r5, [pc, #148]	@ (8005f38 <USBD_CUSTOM_HID_Init+0x9c>)
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005ea2:	f8df 809c 	ldr.w	r8, [pc, #156]	@ 8005f40 <USBD_CUSTOM_HID_Init+0xa4>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ea6:	7c02      	ldrb	r2, [r0, #16]
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005ea8:	f898 1000 	ldrb.w	r1, [r8]
    pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005eac:	782b      	ldrb	r3, [r5, #0]
  pdev->pClassData_HID_Custom = (void *)hhid;
 8005eae:	4e23      	ldr	r6, [pc, #140]	@ (8005f3c <USBD_CUSTOM_HID_Init+0xa0>)
 8005eb0:	f8c0 62d8 	str.w	r6, [r0, #728]	@ 0x2d8
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005eb4:	2a00      	cmp	r2, #0
    pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005eb6:	f003 030f 	and.w	r3, r3, #15
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005eba:	f001 020f 	and.w	r2, r1, #15
    pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005ebe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005ec2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005ec6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005eca:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ece:	bf0c      	ite	eq
 8005ed0:	2705      	moveq	r7, #5
 8005ed2:	2701      	movne	r7, #1
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005ed4:	84d7      	strh	r7, [r2, #38]	@ 0x26
    pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005ed6:	f8a3 7166 	strh.w	r7, [r3, #358]	@ 0x166
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_IN_EP, USBD_EP_TYPE_INTR,
 8005eda:	2203      	movs	r2, #3
 8005edc:	2340      	movs	r3, #64	@ 0x40
{
 8005ede:	4604      	mov	r4, r0
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_IN_EP, USBD_EP_TYPE_INTR,
 8005ee0:	f000 fd96 	bl	8006a10 <USBD_LL_OpenEP>
  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].is_used = 1U;
 8005ee4:	f898 3000 	ldrb.w	r3, [r8]
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_OUT_EP, USBD_EP_TYPE_INTR,
 8005ee8:	7829      	ldrb	r1, [r5, #0]
  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].is_used = 1U;
 8005eea:	f003 030f 	and.w	r3, r3, #15
 8005eee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005ef2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005ef6:	2701      	movs	r7, #1
 8005ef8:	849f      	strh	r7, [r3, #36]	@ 0x24
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_OUT_EP, USBD_EP_TYPE_INTR,
 8005efa:	2203      	movs	r2, #3
 8005efc:	2340      	movs	r3, #64	@ 0x40
 8005efe:	4620      	mov	r0, r4
 8005f00:	f000 fd86 	bl	8006a10 <USBD_LL_OpenEP>
  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].is_used = 1U;
 8005f04:	782b      	ldrb	r3, [r5, #0]
 8005f06:	f003 030f 	and.w	r3, r3, #15
 8005f0a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005f0e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005f12:	f8a3 7164 	strh.w	r7, [r3, #356]	@ 0x164
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->Init();
 8005f16:	f8d4 32dc 	ldr.w	r3, [r4, #732]	@ 0x2dc
  hhid->state = CUSTOM_HID_IDLE;
 8005f1a:	2700      	movs	r7, #0
 8005f1c:	f886 7050 	strb.w	r7, [r6, #80]	@ 0x50
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->Init();
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	4798      	blx	r3
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_OUT_EP, hhid->Report_buf,
 8005f24:	7829      	ldrb	r1, [r5, #0]
 8005f26:	2340      	movs	r3, #64	@ 0x40
 8005f28:	4632      	mov	r2, r6
 8005f2a:	4620      	mov	r0, r4
 8005f2c:	f000 fdce 	bl	8006acc <USBD_LL_PrepareReceive>
}
 8005f30:	4638      	mov	r0, r7
 8005f32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f36:	bf00      	nop
 8005f38:	200002b0 	.word	0x200002b0
 8005f3c:	2000a560 	.word	0x2000a560
 8005f40:	200002b1 	.word	0x200002b1

08005f44 <USBD_CUSTOM_HID_SendReport>:
{
 8005f44:	b508      	push	{r3, lr}
  if (pdev->pClassData_HID_Custom == NULL)
 8005f46:	f8d0 32d8 	ldr.w	r3, [r0, #728]	@ 0x2d8
 8005f4a:	b1ab      	cbz	r3, 8005f78 <USBD_CUSTOM_HID_SendReport+0x34>
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f4c:	468e      	mov	lr, r1
 8005f4e:	f890 129c 	ldrb.w	r1, [r0, #668]	@ 0x29c
 8005f52:	2903      	cmp	r1, #3
 8005f54:	d001      	beq.n	8005f5a <USBD_CUSTOM_HID_SendReport+0x16>
  return (uint8_t)USBD_OK;
 8005f56:	2000      	movs	r0, #0
}
 8005f58:	bd08      	pop	{r3, pc}
    if (hhid->state == CUSTOM_HID_IDLE)
 8005f5a:	f893 1050 	ldrb.w	r1, [r3, #80]	@ 0x50
 8005f5e:	b109      	cbz	r1, 8005f64 <USBD_CUSTOM_HID_SendReport+0x20>
      return (uint8_t)USBD_BUSY;
 8005f60:	2001      	movs	r0, #1
}
 8005f62:	bd08      	pop	{r3, pc}
      hhid->state = CUSTOM_HID_BUSY;
 8005f64:	2101      	movs	r1, #1
 8005f66:	f883 1050 	strb.w	r1, [r3, #80]	@ 0x50
      (void)USBD_LL_Transmit(pdev, CUSTOM_HID_IN_EP, report, len);
 8005f6a:	4904      	ldr	r1, [pc, #16]	@ (8005f7c <USBD_CUSTOM_HID_SendReport+0x38>)
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	7809      	ldrb	r1, [r1, #0]
 8005f70:	4672      	mov	r2, lr
 8005f72:	f000 fd9f 	bl	8006ab4 <USBD_LL_Transmit>
 8005f76:	e7ee      	b.n	8005f56 <USBD_CUSTOM_HID_SendReport+0x12>
    return (uint8_t)USBD_FAIL;
 8005f78:	2003      	movs	r0, #3
}
 8005f7a:	bd08      	pop	{r3, pc}
 8005f7c:	200002b1 	.word	0x200002b1

08005f80 <USBD_CUSTOM_HID_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
  if (fops == NULL)
 8005f80:	b119      	cbz	r1, 8005f8a <USBD_CUSTOM_HID_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData_HID_Custom = fops;
 8005f82:	f8c0 12dc 	str.w	r1, [r0, #732]	@ 0x2dc

  return (uint8_t)USBD_OK;
 8005f86:	2000      	movs	r0, #0
 8005f88:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8005f8a:	2003      	movs	r0, #3
}
 8005f8c:	4770      	bx	lr
 8005f8e:	bf00      	nop

08005f90 <USBD_Update_HID_Custom_DESC>:

void USBD_Update_HID_Custom_DESC(uint8_t *desc, uint8_t itf_no, uint8_t in_ep, uint8_t out_ep, uint8_t str_idx)
{
 8005f90:	f89d c000 	ldrb.w	ip, [sp]
  desc[11] = itf_no;
  desc[17] = str_idx;
  desc[29] = in_ep;
 8005f94:	7742      	strb	r2, [r0, #29]
  desc[36] = out_ep;
 8005f96:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  desc[11] = itf_no;
 8005f9a:	72c1      	strb	r1, [r0, #11]
  desc[17] = str_idx;
 8005f9c:	f880 c011 	strb.w	ip, [r0, #17]

  CUSTOM_HID_IN_EP = in_ep;
 8005fa0:	4804      	ldr	r0, [pc, #16]	@ (8005fb4 <USBD_Update_HID_Custom_DESC+0x24>)
 8005fa2:	7002      	strb	r2, [r0, #0]
  CUSTOM_HID_OUT_EP = out_ep;
 8005fa4:	4804      	ldr	r0, [pc, #16]	@ (8005fb8 <USBD_Update_HID_Custom_DESC+0x28>)
  CUSTOM_HID_ITF_NBR = itf_no;
 8005fa6:	4a05      	ldr	r2, [pc, #20]	@ (8005fbc <USBD_Update_HID_Custom_DESC+0x2c>)
  CUSTOM_HID_OUT_EP = out_ep;
 8005fa8:	7003      	strb	r3, [r0, #0]
  CUSTOM_HID_STR_DESC_IDX = str_idx;
 8005faa:	4b05      	ldr	r3, [pc, #20]	@ (8005fc0 <USBD_Update_HID_Custom_DESC+0x30>)
  CUSTOM_HID_ITF_NBR = itf_no;
 8005fac:	7011      	strb	r1, [r2, #0]
  CUSTOM_HID_STR_DESC_IDX = str_idx;
 8005fae:	f883 c000 	strb.w	ip, [r3]
}
 8005fb2:	4770      	bx	lr
 8005fb4:	200002b1 	.word	0x200002b1
 8005fb8:	200002b0 	.word	0x200002b0
 8005fbc:	2000a5b5 	.word	0x2000a5b5
 8005fc0:	2000a5b4 	.word	0x2000a5b4

08005fc4 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005fc4:	b168      	cbz	r0, 8005fe2 <USBD_Init+0x1e>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	f8c0 32b8 	str.w	r3, [r0, #696]	@ 0x2b8
  pdev->pConfDesc = NULL;
 8005fcc:	f8c0 3318 	str.w	r3, [r0, #792]	@ 0x318

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005fd0:	b109      	cbz	r1, 8005fd6 <USBD_Init+0x12>
  {
    pdev->pDesc = pdesc;
 8005fd2:	f8c0 12b4 	str.w	r1, [r0, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  pdev->id = id;
 8005fdc:	7002      	strb	r2, [r0, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005fde:	f000 bcd1 	b.w	8006984 <USBD_LL_Init>

  return ret;
}
 8005fe2:	2003      	movs	r0, #3
 8005fe4:	4770      	bx	lr
 8005fe6:	bf00      	nop

08005fe8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005fe8:	b510      	push	{r4, lr}
 8005fea:	b082      	sub	sp, #8
  uint16_t len = 0U;
 8005fec:	2300      	movs	r3, #0
 8005fee:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 8005ff2:	b191      	cbz	r1, 800601a <USBD_RegisterClass+0x32>

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;

  /* Get Device Configuration Descriptor */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ff4:	7c03      	ldrb	r3, [r0, #16]
  pdev->pClass = pclass;
 8005ff6:	f8c0 12b8 	str.w	r1, [r0, #696]	@ 0x2b8
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ffa:	4604      	mov	r4, r0
 8005ffc:	b14b      	cbz	r3, 8006012 <USBD_RegisterClass+0x2a>
	  if (pdev->pClass->GetHSConfigDescriptor != NULL)
	  {
		  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
	  }
  }
  else if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005ffe:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8006000:	b123      	cbz	r3, 800600c <USBD_RegisterClass+0x24>
		  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8006002:	f10d 0006 	add.w	r0, sp, #6
 8006006:	4798      	blx	r3
 8006008:	f8c4 0318 	str.w	r0, [r4, #792]	@ 0x318
  {
	  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
  }

  return USBD_OK;
 800600c:	2000      	movs	r0, #0
}
 800600e:	b002      	add	sp, #8
 8006010:	bd10      	pop	{r4, pc}
	  if (pdev->pClass->GetHSConfigDescriptor != NULL)
 8006012:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8006014:	2b00      	cmp	r3, #0
 8006016:	d1f4      	bne.n	8006002 <USBD_RegisterClass+0x1a>
 8006018:	e7f8      	b.n	800600c <USBD_RegisterClass+0x24>
    return USBD_FAIL;
 800601a:	2003      	movs	r0, #3
}
 800601c:	b002      	add	sp, #8
 800601e:	bd10      	pop	{r4, pc}

08006020 <USBD_Start>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006020:	f000 bcea 	b.w	80069f8 <USBD_LL_Start>

08006024 <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8006024:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8006028:	b10b      	cbz	r3, 800602e <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4718      	bx	r3
  }

  return ret;
}
 800602e:	2003      	movs	r0, #3
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop

08006034 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006034:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006036:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800603a:	b10b      	cbz	r3, 8006040 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	4798      	blx	r3
  }

  return USBD_OK;
}
 8006040:	2000      	movs	r0, #0
 8006042:	bd08      	pop	{r3, pc}

08006044 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006044:	b538      	push	{r3, r4, r5, lr}
 8006046:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006048:	f200 25aa 	addw	r5, r0, #682	@ 0x2aa
 800604c:	4628      	mov	r0, r5
 800604e:	f000 fbb7 	bl	80067c0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8006052:	f894 12aa 	ldrb.w	r1, [r4, #682]	@ 0x2aa
  pdev->ep0_data_len = pdev->request.wLength;
 8006056:	f8b4 22b0 	ldrh.w	r2, [r4, #688]	@ 0x2b0
 800605a:	f8c4 2298 	str.w	r2, [r4, #664]	@ 0x298
  pdev->ep0_state = USBD_EP0_SETUP;
 800605e:	2301      	movs	r3, #1
 8006060:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 8006064:	f001 031f 	and.w	r3, r1, #31
 8006068:	2b01      	cmp	r3, #1
 800606a:	d00e      	beq.n	800608a <USBD_LL_SetupStage+0x46>
 800606c:	2b02      	cmp	r3, #2
 800606e:	d006      	beq.n	800607e <USBD_LL_SetupStage+0x3a>
 8006070:	b98b      	cbnz	r3, 8006096 <USBD_LL_SetupStage+0x52>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006072:	4629      	mov	r1, r5
 8006074:	4620      	mov	r0, r4
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return ret;
}
 8006076:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800607a:	f000 b929 	b.w	80062d0 <USBD_StdDevReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800607e:	4629      	mov	r1, r5
 8006080:	4620      	mov	r0, r4
}
 8006082:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006086:	f000 baff 	b.w	8006688 <USBD_StdEPReq>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800608a:	4629      	mov	r1, r5
 800608c:	4620      	mov	r0, r4
}
 800608e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006092:	f000 bac3 	b.w	800661c <USBD_StdItfReq>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006096:	4620      	mov	r0, r4
 8006098:	f001 0180 	and.w	r1, r1, #128	@ 0x80
}
 800609c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80060a0:	f000 bcd0 	b.w	8006a44 <USBD_LL_StallEP>

080060a4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80060a4:	b510      	push	{r4, lr}
 80060a6:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80060a8:	b931      	cbnz	r1, 80060b8 <USBD_LL_DataOutStage+0x14>
 80060aa:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80060ac:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 80060b0:	2a03      	cmp	r2, #3
 80060b2:	d00d      	beq.n	80060d0 <USBD_LL_DataOutStage+0x2c>
      }
    }
  }

  return USBD_OK;
}
 80060b4:	2000      	movs	r0, #0
 80060b6:	bd10      	pop	{r4, pc}
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060b8:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80060bc:	2b03      	cmp	r3, #3
 80060be:	d1f9      	bne.n	80060b4 <USBD_LL_DataOutStage+0x10>
      if (pdev->pClass->DataOut != NULL)
 80060c0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80060c4:	699b      	ldr	r3, [r3, #24]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d0f4      	beq.n	80060b4 <USBD_LL_DataOutStage+0x10>
}
 80060ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80060ce:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 80060d0:	e9d0 1257 	ldrd	r1, r2, [r0, #348]	@ 0x15c
 80060d4:	4291      	cmp	r1, r2
 80060d6:	d808      	bhi.n	80060ea <USBD_LL_DataOutStage+0x46>
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060d8:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80060dc:	2b03      	cmp	r3, #3
 80060de:	d00e      	beq.n	80060fe <USBD_LL_DataOutStage+0x5a>
        (void)USBD_CtlSendStatus(pdev);
 80060e0:	4620      	mov	r0, r4
 80060e2:	f000 fbd9 	bl	8006898 <USBD_CtlSendStatus>
}
 80060e6:	2000      	movs	r0, #0
 80060e8:	bd10      	pop	{r4, pc}
        pep->rem_length -= pep->maxpacket;
 80060ea:	1a89      	subs	r1, r1, r2
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80060ec:	428a      	cmp	r2, r1
 80060ee:	bf28      	it	cs
 80060f0:	460a      	movcs	r2, r1
        pep->rem_length -= pep->maxpacket;
 80060f2:	f8c0 115c 	str.w	r1, [r0, #348]	@ 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80060f6:	4619      	mov	r1, r3
 80060f8:	f000 fbc6 	bl	8006888 <USBD_CtlContinueRx>
 80060fc:	e7da      	b.n	80060b4 <USBD_LL_DataOutStage+0x10>
          if (pdev->pClass->EP0_RxReady != NULL)
 80060fe:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d0eb      	beq.n	80060e0 <USBD_LL_DataOutStage+0x3c>
            pdev->pClass->EP0_RxReady(pdev);
 8006108:	4798      	blx	r3
 800610a:	e7e9      	b.n	80060e0 <USBD_LL_DataOutStage+0x3c>

0800610c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800610c:	b570      	push	{r4, r5, r6, lr}
 800610e:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006110:	b951      	cbnz	r1, 8006128 <USBD_LL_DataInStage+0x1c>
 8006112:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006114:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8006118:	2a02      	cmp	r2, #2
 800611a:	d011      	beq.n	8006140 <USBD_LL_DataInStage+0x34>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800611c:	f894 32a0 	ldrb.w	r3, [r4, #672]	@ 0x2a0
 8006120:	2b01      	cmp	r3, #1
 8006122:	d022      	beq.n	800616a <USBD_LL_DataInStage+0x5e>
      }
    }
  }

  return USBD_OK;
}
 8006124:	2000      	movs	r0, #0
 8006126:	bd70      	pop	{r4, r5, r6, pc}
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006128:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800612c:	2b03      	cmp	r3, #3
 800612e:	d1f9      	bne.n	8006124 <USBD_LL_DataInStage+0x18>
      if (pdev->pClass->DataIn != NULL)
 8006130:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8006134:	695b      	ldr	r3, [r3, #20]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d0f4      	beq.n	8006124 <USBD_LL_DataInStage+0x18>
}
 800613a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800613e:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 8006140:	e9d0 2607 	ldrd	r2, r6, [r0, #28]
 8006144:	42b2      	cmp	r2, r6
 8006146:	460d      	mov	r5, r1
 8006148:	d814      	bhi.n	8006174 <USBD_LL_DataInStage+0x68>
        if ((pep->maxpacket == pep->rem_length) &&
 800614a:	d01f      	beq.n	800618c <USBD_LL_DataInStage+0x80>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800614c:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8006150:	2b03      	cmp	r3, #3
 8006152:	d028      	beq.n	80061a6 <USBD_LL_DataInStage+0x9a>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006154:	2180      	movs	r1, #128	@ 0x80
 8006156:	4620      	mov	r0, r4
 8006158:	f000 fc74 	bl	8006a44 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800615c:	4620      	mov	r0, r4
 800615e:	f000 fba7 	bl	80068b0 <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode == 1U)
 8006162:	f894 32a0 	ldrb.w	r3, [r4, #672]	@ 0x2a0
 8006166:	2b01      	cmp	r3, #1
 8006168:	d1dc      	bne.n	8006124 <USBD_LL_DataInStage+0x18>
      pdev->dev_test_mode = 0U;
 800616a:	2300      	movs	r3, #0
 800616c:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
}
 8006170:	2000      	movs	r0, #0
 8006172:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 8006174:	1b92      	subs	r2, r2, r6
 8006176:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006178:	4619      	mov	r1, r3
 800617a:	f000 fb6f 	bl	800685c <USBD_CtlContinueSendData>
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800617e:	462b      	mov	r3, r5
 8006180:	462a      	mov	r2, r5
 8006182:	4629      	mov	r1, r5
 8006184:	4620      	mov	r0, r4
 8006186:	f000 fca1 	bl	8006acc <USBD_LL_PrepareReceive>
 800618a:	e7c7      	b.n	800611c <USBD_LL_DataInStage+0x10>
            (pep->total_length >= pep->maxpacket) &&
 800618c:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 800618e:	429a      	cmp	r2, r3
 8006190:	d8dc      	bhi.n	800614c <USBD_LL_DataInStage+0x40>
            (pep->total_length >= pep->maxpacket) &&
 8006192:	f8d0 2298 	ldr.w	r2, [r0, #664]	@ 0x298
 8006196:	4293      	cmp	r3, r2
 8006198:	d2d8      	bcs.n	800614c <USBD_LL_DataInStage+0x40>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800619a:	460a      	mov	r2, r1
 800619c:	f000 fb5e 	bl	800685c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80061a0:	f8c4 5298 	str.w	r5, [r4, #664]	@ 0x298
 80061a4:	e7eb      	b.n	800617e <USBD_LL_DataInStage+0x72>
            if (pdev->pClass->EP0_TxSent != NULL)
 80061a6:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d0d1      	beq.n	8006154 <USBD_LL_DataInStage+0x48>
              pdev->pClass->EP0_TxSent(pdev);
 80061b0:	4620      	mov	r0, r4
 80061b2:	4798      	blx	r3
 80061b4:	e7ce      	b.n	8006154 <USBD_LL_DataInStage+0x48>
 80061b6:	bf00      	nop

080061b8 <USBD_LL_Reset>:
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClass == NULL)
 80061b8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
  pdev->ep0_state = USBD_EP0_IDLE;
 80061bc:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 80061be:	2201      	movs	r2, #1
 80061c0:	f880 229c 	strb.w	r2, [r0, #668]	@ 0x29c
  pdev->dev_config = 0U;
 80061c4:	6041      	str	r1, [r0, #4]
  pdev->ep0_state = USBD_EP0_IDLE;
 80061c6:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
  pdev->dev_remote_wakeup = 0U;
 80061ca:	f8c0 12a4 	str.w	r1, [r0, #676]	@ 0x2a4
  if (pdev->pClass == NULL)
 80061ce:	b1d3      	cbz	r3, 8006206 <USBD_LL_Reset+0x4e>
  {
    return USBD_FAIL;
  }

	if (pdev->pClass->DeInit != NULL)
 80061d0:	685b      	ldr	r3, [r3, #4]
{
 80061d2:	b570      	push	{r4, r5, r6, lr}
 80061d4:	4604      	mov	r4, r0
	if (pdev->pClass->DeInit != NULL)
 80061d6:	b103      	cbz	r3, 80061da <USBD_LL_Reset+0x22>
	{
	  (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80061d8:	4798      	blx	r3
	}

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80061da:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80061dc:	2540      	movs	r5, #64	@ 0x40
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80061de:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80061e0:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80061e2:	2340      	movs	r3, #64	@ 0x40
 80061e4:	4620      	mov	r0, r4
 80061e6:	f000 fc13 	bl	8006a10 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80061ea:	f8a4 6164 	strh.w	r6, [r4, #356]	@ 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80061ee:	f8c4 5160 	str.w	r5, [r4, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80061f2:	462b      	mov	r3, r5
 80061f4:	2200      	movs	r2, #0
 80061f6:	2180      	movs	r1, #128	@ 0x80
 80061f8:	4620      	mov	r0, r4
 80061fa:	f000 fc09 	bl	8006a10 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  return USBD_OK;
 80061fe:	2000      	movs	r0, #0
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006200:	84a6      	strh	r6, [r4, #36]	@ 0x24
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006202:	6225      	str	r5, [r4, #32]
}
 8006204:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 8006206:	2003      	movs	r0, #3
}
 8006208:	4770      	bx	lr
 800620a:	bf00      	nop

0800620c <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800620c:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800620e:	2000      	movs	r0, #0
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop

08006214 <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 8006214:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
{
 8006218:	4603      	mov	r3, r0
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800621a:	2104      	movs	r1, #4
  pdev->dev_old_state = pdev->dev_state;
 800621c:	b2d2      	uxtb	r2, r2
 800621e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d

  return USBD_OK;
}
 8006222:	2000      	movs	r0, #0
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006224:	f883 129c 	strb.w	r1, [r3, #668]	@ 0x29c
}
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop

0800622c <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800622c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8006230:	2b04      	cmp	r3, #4
 8006232:	d104      	bne.n	800623e <USBD_LL_Resume+0x12>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006234:	f890 329d 	ldrb.w	r3, [r0, #669]	@ 0x29d
 8006238:	b2db      	uxtb	r3, r3
 800623a:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  }

  return USBD_OK;
}
 800623e:	2000      	movs	r0, #0
 8006240:	4770      	bx	lr
 8006242:	bf00      	nop

08006244 <USBD_LL_SOF>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->pClass == NULL)
 8006244:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
 8006248:	b162      	cbz	r2, 8006264 <USBD_LL_SOF+0x20>
{
 800624a:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800624c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8006250:	2b03      	cmp	r3, #3
 8006252:	d001      	beq.n	8006258 <USBD_LL_SOF+0x14>
    {
      (void)pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
 8006254:	2000      	movs	r0, #0
}
 8006256:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 8006258:	69d3      	ldr	r3, [r2, #28]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d0fa      	beq.n	8006254 <USBD_LL_SOF+0x10>
      (void)pdev->pClass->SOF(pdev);
 800625e:	4798      	blx	r3
  return USBD_OK;
 8006260:	2000      	movs	r0, #0
}
 8006262:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8006264:	2003      	movs	r0, #3
}
 8006266:	4770      	bx	lr

08006268 <USBD_LL_IsoINIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
  if (pdev->pClass == NULL)
 8006268:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
 800626c:	b162      	cbz	r2, 8006288 <USBD_LL_IsoINIncomplete+0x20>
{
 800626e:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006270:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8006274:	2b03      	cmp	r3, #3
 8006276:	d001      	beq.n	800627c <USBD_LL_IsoINIncomplete+0x14>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 8006278:	2000      	movs	r0, #0
}
 800627a:	bd08      	pop	{r3, pc}
    if (pdev->pClass->IsoINIncomplete != NULL)
 800627c:	6a13      	ldr	r3, [r2, #32]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d0fa      	beq.n	8006278 <USBD_LL_IsoINIncomplete+0x10>
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006282:	4798      	blx	r3
  return USBD_OK;
 8006284:	2000      	movs	r0, #0
}
 8006286:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8006288:	2003      	movs	r0, #3
}
 800628a:	4770      	bx	lr

0800628c <USBD_LL_IsoOUTIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
  if (pdev->pClass == NULL)
 800628c:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
 8006290:	b162      	cbz	r2, 80062ac <USBD_LL_IsoOUTIncomplete+0x20>
{
 8006292:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006294:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8006298:	2b03      	cmp	r3, #3
 800629a:	d001      	beq.n	80062a0 <USBD_LL_IsoOUTIncomplete+0x14>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800629c:	2000      	movs	r0, #0
}
 800629e:	bd08      	pop	{r3, pc}
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80062a0:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d0fa      	beq.n	800629c <USBD_LL_IsoOUTIncomplete+0x10>
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80062a6:	4798      	blx	r3
  return USBD_OK;
 80062a8:	2000      	movs	r0, #0
}
 80062aa:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 80062ac:	2003      	movs	r0, #3
}
 80062ae:	4770      	bx	lr

080062b0 <USBD_LL_DevConnected>:
  * @brief  USBD_LL_DevConnected
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
 80062b0:	2000      	movs	r0, #0
 80062b2:	4770      	bx	lr

080062b4 <USBD_LL_DevDisconnected>:
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;

  if (pdev->pClass != NULL)
 80062b4:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 80062b8:	2101      	movs	r1, #1
 80062ba:	f880 129c 	strb.w	r1, [r0, #668]	@ 0x29c
  if (pdev->pClass != NULL)
 80062be:	b12a      	cbz	r2, 80062cc <USBD_LL_DevDisconnected+0x18>
{
 80062c0:	b508      	push	{r3, lr}
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80062c2:	6852      	ldr	r2, [r2, #4]
 80062c4:	7901      	ldrb	r1, [r0, #4]
 80062c6:	4790      	blx	r2
  }

  return USBD_OK;
}
 80062c8:	2000      	movs	r0, #0
 80062ca:	bd08      	pop	{r3, pc}
 80062cc:	2000      	movs	r0, #0
 80062ce:	4770      	bx	lr

080062d0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062d0:	b530      	push	{r4, r5, lr}
 80062d2:	780b      	ldrb	r3, [r1, #0]
 80062d4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062d8:	2b20      	cmp	r3, #32
{
 80062da:	b083      	sub	sp, #12
 80062dc:	460d      	mov	r5, r1
 80062de:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062e0:	d028      	beq.n	8006334 <USBD_StdDevReq+0x64>
 80062e2:	2b40      	cmp	r3, #64	@ 0x40
 80062e4:	d026      	beq.n	8006334 <USBD_StdDevReq+0x64>
 80062e6:	b15b      	cbz	r3, 8006300 <USBD_StdDevReq+0x30>
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80062e8:	2180      	movs	r1, #128	@ 0x80
 80062ea:	4620      	mov	r0, r4
 80062ec:	f000 fbaa 	bl	8006a44 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80062f0:	2100      	movs	r1, #0
 80062f2:	4620      	mov	r0, r4
 80062f4:	f000 fba6 	bl	8006a44 <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 80062f8:	2500      	movs	r5, #0
}
 80062fa:	4628      	mov	r0, r5
 80062fc:	b003      	add	sp, #12
 80062fe:	bd30      	pop	{r4, r5, pc}
      switch (req->bRequest)
 8006300:	784b      	ldrb	r3, [r1, #1]
 8006302:	2b09      	cmp	r3, #9
 8006304:	d8f0      	bhi.n	80062e8 <USBD_StdDevReq+0x18>
 8006306:	a201      	add	r2, pc, #4	@ (adr r2, 800630c <USBD_StdDevReq+0x3c>)
 8006308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800630c:	0800637f 	.word	0x0800637f
 8006310:	080063a7 	.word	0x080063a7
 8006314:	080062e9 	.word	0x080062e9
 8006318:	080063c5 	.word	0x080063c5
 800631c:	080062e9 	.word	0x080062e9
 8006320:	080063cd 	.word	0x080063cd
 8006324:	08006407 	.word	0x08006407
 8006328:	080062e9 	.word	0x080062e9
 800632c:	0800643d 	.word	0x0800643d
 8006330:	08006347 	.word	0x08006347
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006334:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	4629      	mov	r1, r5
 800633c:	4620      	mov	r0, r4
}
 800633e:	b003      	add	sp, #12
 8006340:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006344:	4718      	bx	r3
  cfgidx = (uint8_t)(req->wValue);
 8006346:	7889      	ldrb	r1, [r1, #2]
 8006348:	4db3      	ldr	r5, [pc, #716]	@ (8006618 <USBD_StdDevReq+0x348>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800634a:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800634c:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800634e:	f200 8134 	bhi.w	80065ba <USBD_StdDevReq+0x2ea>
  switch (pdev->dev_state)
 8006352:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8006356:	2b02      	cmp	r3, #2
 8006358:	b2da      	uxtb	r2, r3
 800635a:	f000 8115 	beq.w	8006588 <USBD_StdDevReq+0x2b8>
 800635e:	2a03      	cmp	r2, #3
 8006360:	f000 80f0 	beq.w	8006544 <USBD_StdDevReq+0x274>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006364:	2180      	movs	r1, #128	@ 0x80
 8006366:	f000 fb6d 	bl	8006a44 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800636a:	2100      	movs	r1, #0
 800636c:	4620      	mov	r0, r4
 800636e:	f000 fb69 	bl	8006a44 <USBD_LL_StallEP>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006372:	7829      	ldrb	r1, [r5, #0]
 8006374:	4620      	mov	r0, r4
 8006376:	f7ff fe5d 	bl	8006034 <USBD_ClrClassConfig>
    return USBD_FAIL;
 800637a:	2503      	movs	r5, #3
 800637c:	e7bd      	b.n	80062fa <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 800637e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8006382:	3b01      	subs	r3, #1
 8006384:	2b02      	cmp	r3, #2
 8006386:	d8af      	bhi.n	80062e8 <USBD_StdDevReq+0x18>
      if (req->wLength != 0x2U)
 8006388:	88ca      	ldrh	r2, [r1, #6]
 800638a:	2a02      	cmp	r2, #2
 800638c:	d1ac      	bne.n	80062e8 <USBD_StdDevReq+0x18>
      if (pdev->dev_remote_wakeup != 0U)
 800638e:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 8006392:	4601      	mov	r1, r0
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006394:	2b00      	cmp	r3, #0
 8006396:	bf0c      	ite	eq
 8006398:	2301      	moveq	r3, #1
 800639a:	2303      	movne	r3, #3
 800639c:	f841 3f0c 	str.w	r3, [r1, #12]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80063a0:	f000 fa4e 	bl	8006840 <USBD_CtlSendData>
      break;
 80063a4:	e7a8      	b.n	80062f8 <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 80063a6:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80063aa:	3b01      	subs	r3, #1
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	d89b      	bhi.n	80062e8 <USBD_StdDevReq+0x18>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80063b0:	884b      	ldrh	r3, [r1, #2]
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d1a0      	bne.n	80062f8 <USBD_StdDevReq+0x28>
        pdev->dev_remote_wakeup = 0U;
 80063b6:	2300      	movs	r3, #0
 80063b8:	f8c4 32a4 	str.w	r3, [r4, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80063bc:	4620      	mov	r0, r4
 80063be:	f000 fa6b 	bl	8006898 <USBD_CtlSendStatus>
 80063c2:	e799      	b.n	80062f8 <USBD_StdDevReq+0x28>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80063c4:	884b      	ldrh	r3, [r1, #2]
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d196      	bne.n	80062f8 <USBD_StdDevReq+0x28>
 80063ca:	e7f5      	b.n	80063b8 <USBD_StdDevReq+0xe8>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80063cc:	888b      	ldrh	r3, [r1, #4]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d18a      	bne.n	80062e8 <USBD_StdDevReq+0x18>
 80063d2:	88cb      	ldrh	r3, [r1, #6]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d187      	bne.n	80062e8 <USBD_StdDevReq+0x18>
 80063d8:	884b      	ldrh	r3, [r1, #2]
 80063da:	2b7f      	cmp	r3, #127	@ 0x7f
 80063dc:	d884      	bhi.n	80062e8 <USBD_StdDevReq+0x18>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063de:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 80063e2:	2a03      	cmp	r2, #3
 80063e4:	d080      	beq.n	80062e8 <USBD_StdDevReq+0x18>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80063e6:	b2dd      	uxtb	r5, r3
      pdev->dev_address = dev_addr;
 80063e8:	f880 529e 	strb.w	r5, [r0, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80063ec:	4629      	mov	r1, r5
 80063ee:	f000 fb55 	bl	8006a9c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80063f2:	4620      	mov	r0, r4
 80063f4:	f000 fa50 	bl	8006898 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80063f8:	2d00      	cmp	r5, #0
 80063fa:	f000 80fe 	beq.w	80065fa <USBD_StdDevReq+0x32a>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80063fe:	2302      	movs	r3, #2
 8006400:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8006404:	e778      	b.n	80062f8 <USBD_StdDevReq+0x28>
  switch (req->wValue >> 8)
 8006406:	884a      	ldrh	r2, [r1, #2]
 8006408:	0a13      	lsrs	r3, r2, #8
  uint16_t len = 0U;
 800640a:	2100      	movs	r1, #0
  switch (req->wValue >> 8)
 800640c:	3b01      	subs	r3, #1
  uint16_t len = 0U;
 800640e:	f8ad 1006 	strh.w	r1, [sp, #6]
  switch (req->wValue >> 8)
 8006412:	2b06      	cmp	r3, #6
 8006414:	f63f af68 	bhi.w	80062e8 <USBD_StdDevReq+0x18>
 8006418:	a101      	add	r1, pc, #4	@ (adr r1, 8006420 <USBD_StdDevReq+0x150>)
 800641a:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800641e:	bf00      	nop
 8006420:	080064e3 	.word	0x080064e3
 8006424:	080064c9 	.word	0x080064c9
 8006428:	080064b7 	.word	0x080064b7
 800642c:	080062e9 	.word	0x080062e9
 8006430:	080062e9 	.word	0x080062e9
 8006434:	080064a1 	.word	0x080064a1
 8006438:	08006465 	.word	0x08006465
  if (req->wLength != 1U)
 800643c:	88ca      	ldrh	r2, [r1, #6]
 800643e:	2a01      	cmp	r2, #1
 8006440:	f47f af52 	bne.w	80062e8 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 8006444:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8006448:	2b02      	cmp	r3, #2
 800644a:	b2d9      	uxtb	r1, r3
 800644c:	f200 80ae 	bhi.w	80065ac <USBD_StdDevReq+0x2dc>
 8006450:	2900      	cmp	r1, #0
 8006452:	f43f af49 	beq.w	80062e8 <USBD_StdDevReq+0x18>
        pdev->dev_default_config = 0U;
 8006456:	4601      	mov	r1, r0
 8006458:	2300      	movs	r3, #0
 800645a:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800645e:	f000 f9ef 	bl	8006840 <USBD_CtlSendData>
        break;
 8006462:	e749      	b.n	80062f8 <USBD_StdDevReq+0x28>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006464:	7c03      	ldrb	r3, [r0, #16]
 8006466:	2b00      	cmp	r3, #0
 8006468:	f47f af3e 	bne.w	80062e8 <USBD_StdDevReq+0x18>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800646c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8006470:	f10d 0006 	add.w	r0, sp, #6
 8006474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006476:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006478:	2307      	movs	r3, #7
 800647a:	7043      	strb	r3, [r0, #1]
  if (req->wLength != 0U)
 800647c:	88eb      	ldrh	r3, [r5, #6]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d09c      	beq.n	80063bc <USBD_StdDevReq+0xec>
    if (len != 0U)
 8006482:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8006486:	2a00      	cmp	r2, #0
 8006488:	f43f af2e 	beq.w	80062e8 <USBD_StdDevReq+0x18>
      len = MIN(len, req->wLength);
 800648c:	429a      	cmp	r2, r3
 800648e:	bf28      	it	cs
 8006490:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006492:	4601      	mov	r1, r0
 8006494:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 8006496:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800649a:	f000 f9d1 	bl	8006840 <USBD_CtlSendData>
 800649e:	e72b      	b.n	80062f8 <USBD_StdDevReq+0x28>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064a0:	7c03      	ldrb	r3, [r0, #16]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	f47f af20 	bne.w	80062e8 <USBD_StdDevReq+0x18>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80064a8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80064ac:	f10d 0006 	add.w	r0, sp, #6
 80064b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064b2:	4798      	blx	r3
  if (err != 0U)
 80064b4:	e7e2      	b.n	800647c <USBD_StdDevReq+0x1ac>
      switch ((uint8_t)(req->wValue))
 80064b6:	b2d1      	uxtb	r1, r2
 80064b8:	2905      	cmp	r1, #5
 80064ba:	f200 80a2 	bhi.w	8006602 <USBD_StdDevReq+0x332>
 80064be:	e8df f001 	tbb	[pc, r1]
 80064c2:	353b      	.short	0x353b
 80064c4:	2918232f 	.word	0x2918232f
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064c8:	7c02      	ldrb	r2, [r0, #16]
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80064ca:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064ce:	2a00      	cmp	r2, #0
 80064d0:	f040 8085 	bne.w	80065de <USBD_StdDevReq+0x30e>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80064d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064d6:	f10d 0006 	add.w	r0, sp, #6
 80064da:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80064dc:	2302      	movs	r3, #2
 80064de:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80064e0:	e7cc      	b.n	800647c <USBD_StdDevReq+0x1ac>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80064e2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80064e6:	7c00      	ldrb	r0, [r0, #16]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f10d 0106 	add.w	r1, sp, #6
 80064ee:	4798      	blx	r3
  if (err != 0U)
 80064f0:	e7c4      	b.n	800647c <USBD_StdDevReq+0x1ac>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80064f2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80064f6:	695b      	ldr	r3, [r3, #20]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	f43f aef5 	beq.w	80062e8 <USBD_StdDevReq+0x18>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80064fe:	7c20      	ldrb	r0, [r4, #16]
 8006500:	f10d 0106 	add.w	r1, sp, #6
 8006504:	4798      	blx	r3
  if (err != 0U)
 8006506:	e7b9      	b.n	800647c <USBD_StdDevReq+0x1ac>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006508:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d1f5      	bne.n	80064fe <USBD_StdDevReq+0x22e>
 8006512:	e6e9      	b.n	80062e8 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006514:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8006518:	699b      	ldr	r3, [r3, #24]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d1ef      	bne.n	80064fe <USBD_StdDevReq+0x22e>
 800651e:	e6e3      	b.n	80062e8 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006520:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d1e9      	bne.n	80064fe <USBD_StdDevReq+0x22e>
 800652a:	e6dd      	b.n	80062e8 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800652c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d1e3      	bne.n	80064fe <USBD_StdDevReq+0x22e>
 8006536:	e6d7      	b.n	80062e8 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006538:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d1dd      	bne.n	80064fe <USBD_StdDevReq+0x22e>
 8006542:	e6d1      	b.n	80062e8 <USBD_StdDevReq+0x18>
      if (cfgidx == 0U)
 8006544:	2900      	cmp	r1, #0
 8006546:	d040      	beq.n	80065ca <USBD_StdDevReq+0x2fa>
      else if (cfgidx != pdev->dev_config)
 8006548:	6841      	ldr	r1, [r0, #4]
 800654a:	2901      	cmp	r1, #1
 800654c:	f43f af36 	beq.w	80063bc <USBD_StdDevReq+0xec>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006550:	b2c9      	uxtb	r1, r1
 8006552:	f7ff fd6f 	bl	8006034 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006556:	7829      	ldrb	r1, [r5, #0]
 8006558:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800655a:	4620      	mov	r0, r4
 800655c:	f7ff fd62 	bl	8006024 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8006560:	4605      	mov	r5, r0
 8006562:	2800      	cmp	r0, #0
 8006564:	f43f af2a 	beq.w	80063bc <USBD_StdDevReq+0xec>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006568:	2180      	movs	r1, #128	@ 0x80
 800656a:	4620      	mov	r0, r4
 800656c:	f000 fa6a 	bl	8006a44 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006570:	2100      	movs	r1, #0
 8006572:	4620      	mov	r0, r4
 8006574:	f000 fa66 	bl	8006a44 <USBD_LL_StallEP>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006578:	7921      	ldrb	r1, [r4, #4]
 800657a:	4620      	mov	r0, r4
 800657c:	f7ff fd5a 	bl	8006034 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006580:	2302      	movs	r3, #2
 8006582:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8006586:	e6b8      	b.n	80062fa <USBD_StdDevReq+0x2a>
      if (cfgidx != 0U)
 8006588:	2900      	cmp	r1, #0
 800658a:	f43f af17 	beq.w	80063bc <USBD_StdDevReq+0xec>
        pdev->dev_config = cfgidx;
 800658e:	2101      	movs	r1, #1
 8006590:	6041      	str	r1, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006592:	f7ff fd47 	bl	8006024 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8006596:	4605      	mov	r5, r0
 8006598:	b340      	cbz	r0, 80065ec <USBD_StdDevReq+0x31c>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800659a:	2180      	movs	r1, #128	@ 0x80
 800659c:	4620      	mov	r0, r4
 800659e:	f000 fa51 	bl	8006a44 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80065a2:	2100      	movs	r1, #0
 80065a4:	4620      	mov	r0, r4
 80065a6:	f000 fa4d 	bl	8006a44 <USBD_LL_StallEP>
}
 80065aa:	e6a6      	b.n	80062fa <USBD_StdDevReq+0x2a>
    switch (pdev->dev_state)
 80065ac:	2903      	cmp	r1, #3
 80065ae:	f47f ae9b 	bne.w	80062e8 <USBD_StdDevReq+0x18>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80065b2:	1d01      	adds	r1, r0, #4
 80065b4:	f000 f944 	bl	8006840 <USBD_CtlSendData>
        break;
 80065b8:	e69e      	b.n	80062f8 <USBD_StdDevReq+0x28>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80065ba:	2180      	movs	r1, #128	@ 0x80
 80065bc:	f000 fa42 	bl	8006a44 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80065c0:	2100      	movs	r1, #0
 80065c2:	4620      	mov	r0, r4
 80065c4:	f000 fa3e 	bl	8006a44 <USBD_LL_StallEP>
}
 80065c8:	e6d7      	b.n	800637a <USBD_StdDevReq+0xaa>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80065ca:	2302      	movs	r3, #2
 80065cc:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80065d0:	6041      	str	r1, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80065d2:	f7ff fd2f 	bl	8006034 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80065d6:	4620      	mov	r0, r4
 80065d8:	f000 f95e 	bl	8006898 <USBD_CtlSendStatus>
 80065dc:	e68c      	b.n	80062f8 <USBD_StdDevReq+0x28>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80065de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065e0:	f10d 0006 	add.w	r0, sp, #6
 80065e4:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80065e6:	2302      	movs	r3, #2
 80065e8:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80065ea:	e747      	b.n	800647c <USBD_StdDevReq+0x1ac>
          (void)USBD_CtlSendStatus(pdev);
 80065ec:	4620      	mov	r0, r4
 80065ee:	f000 f953 	bl	8006898 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80065f2:	2303      	movs	r3, #3
 80065f4:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 80065f8:	e67e      	b.n	80062f8 <USBD_StdDevReq+0x28>
        pdev->dev_state = USBD_STATE_DEFAULT;
 80065fa:	2301      	movs	r3, #1
 80065fc:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8006600:	e67a      	b.n	80062f8 <USBD_StdDevReq+0x28>
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 8006602:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8006606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006608:	2b00      	cmp	r3, #0
 800660a:	f43f ae6d 	beq.w	80062e8 <USBD_StdDevReq+0x18>
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 800660e:	f10d 0206 	add.w	r2, sp, #6
 8006612:	4798      	blx	r3
  if (err != 0U)
 8006614:	e732      	b.n	800647c <USBD_StdDevReq+0x1ac>
 8006616:	bf00      	nop
 8006618:	2000a5b6 	.word	0x2000a5b6

0800661c <USBD_StdItfReq>:
{
 800661c:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800661e:	780b      	ldrb	r3, [r1, #0]
 8006620:	065a      	lsls	r2, r3, #25
{
 8006622:	460d      	mov	r5, r1
 8006624:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006626:	d50d      	bpl.n	8006644 <USBD_StdItfReq+0x28>
 8006628:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800662c:	2a40      	cmp	r2, #64	@ 0x40
 800662e:	d009      	beq.n	8006644 <USBD_StdItfReq+0x28>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006630:	2180      	movs	r1, #128	@ 0x80
 8006632:	f000 fa07 	bl	8006a44 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006636:	2100      	movs	r1, #0
 8006638:	4620      	mov	r0, r4
 800663a:	f000 fa03 	bl	8006a44 <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 800663e:	2600      	movs	r6, #0
}
 8006640:	4630      	mov	r0, r6
 8006642:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 8006644:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8006648:	3b01      	subs	r3, #1
 800664a:	2b02      	cmp	r3, #2
 800664c:	d812      	bhi.n	8006674 <USBD_StdItfReq+0x58>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800664e:	792b      	ldrb	r3, [r5, #4]
 8006650:	2b0f      	cmp	r3, #15
 8006652:	d80f      	bhi.n	8006674 <USBD_StdItfReq+0x58>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006654:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 8006658:	4629      	mov	r1, r5
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	4620      	mov	r0, r4
 800665e:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006660:	88eb      	ldrh	r3, [r5, #6]
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006662:	4606      	mov	r6, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006664:	2b00      	cmp	r3, #0
 8006666:	d1eb      	bne.n	8006640 <USBD_StdItfReq+0x24>
 8006668:	2800      	cmp	r0, #0
 800666a:	d1e9      	bne.n	8006640 <USBD_StdItfReq+0x24>
              (void)USBD_CtlSendStatus(pdev);
 800666c:	4620      	mov	r0, r4
 800666e:	f000 f913 	bl	8006898 <USBD_CtlSendStatus>
 8006672:	e7e5      	b.n	8006640 <USBD_StdItfReq+0x24>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006674:	2180      	movs	r1, #128	@ 0x80
 8006676:	4620      	mov	r0, r4
 8006678:	f000 f9e4 	bl	8006a44 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800667c:	2100      	movs	r1, #0
 800667e:	4620      	mov	r0, r4
 8006680:	f000 f9e0 	bl	8006a44 <USBD_LL_StallEP>
}
 8006684:	e7db      	b.n	800663e <USBD_StdItfReq+0x22>
 8006686:	bf00      	nop

08006688 <USBD_StdEPReq>:
{
 8006688:	b570      	push	{r4, r5, r6, lr}
 800668a:	780b      	ldrb	r3, [r1, #0]
  ep_addr = LOBYTE(req->wIndex);
 800668c:	888a      	ldrh	r2, [r1, #4]
 800668e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006692:	2b20      	cmp	r3, #32
{
 8006694:	460c      	mov	r4, r1
 8006696:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006698:	d04a      	beq.n	8006730 <USBD_StdEPReq+0xa8>
 800669a:	2b40      	cmp	r3, #64	@ 0x40
 800669c:	d048      	beq.n	8006730 <USBD_StdEPReq+0xa8>
 800669e:	b14b      	cbz	r3, 80066b4 <USBD_StdEPReq+0x2c>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80066a0:	2180      	movs	r1, #128	@ 0x80
 80066a2:	4628      	mov	r0, r5
 80066a4:	f000 f9ce 	bl	8006a44 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80066a8:	2100      	movs	r1, #0
 80066aa:	4628      	mov	r0, r5
 80066ac:	f000 f9ca 	bl	8006a44 <USBD_LL_StallEP>
}
 80066b0:	2000      	movs	r0, #0
 80066b2:	bd70      	pop	{r4, r5, r6, pc}
      switch (req->bRequest)
 80066b4:	7863      	ldrb	r3, [r4, #1]
 80066b6:	2b01      	cmp	r3, #1
  ep_addr = LOBYTE(req->wIndex);
 80066b8:	b2d1      	uxtb	r1, r2
      switch (req->bRequest)
 80066ba:	d02a      	beq.n	8006712 <USBD_StdEPReq+0x8a>
 80066bc:	2b03      	cmp	r3, #3
 80066be:	d03f      	beq.n	8006740 <USBD_StdEPReq+0xb8>
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d1ed      	bne.n	80066a0 <USBD_StdEPReq+0x18>
          switch (pdev->dev_state)
 80066c4:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80066c8:	2b02      	cmp	r3, #2
 80066ca:	b2d8      	uxtb	r0, r3
 80066cc:	d052      	beq.n	8006774 <USBD_StdEPReq+0xec>
 80066ce:	2803      	cmp	r0, #3
 80066d0:	d1e6      	bne.n	80066a0 <USBD_StdEPReq+0x18>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80066d2:	f001 030f 	and.w	r3, r1, #15
 80066d6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 80066da:	0612      	lsls	r2, r2, #24
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80066dc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 80066e0:	d457      	bmi.n	8006792 <USBD_StdEPReq+0x10a>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80066e2:	f8b3 3164 	ldrh.w	r3, [r3, #356]	@ 0x164
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d0da      	beq.n	80066a0 <USBD_StdEPReq+0x18>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80066ea:	2414      	movs	r4, #20
 80066ec:	fb04 5401 	mla	r4, r4, r1, r5
 80066f0:	f504 74aa 	add.w	r4, r4, #340	@ 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80066f4:	2900      	cmp	r1, #0
 80066f6:	d058      	beq.n	80067aa <USBD_StdEPReq+0x122>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80066f8:	4628      	mov	r0, r5
 80066fa:	f000 f9bb 	bl	8006a74 <USBD_LL_IsStallEP>
 80066fe:	2800      	cmp	r0, #0
 8006700:	d059      	beq.n	80067b6 <USBD_StdEPReq+0x12e>
                pep->status = 0x0001U;
 8006702:	2301      	movs	r3, #1
 8006704:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006706:	2202      	movs	r2, #2
 8006708:	4621      	mov	r1, r4
 800670a:	4628      	mov	r0, r5
 800670c:	f000 f898 	bl	8006840 <USBD_CtlSendData>
              break;
 8006710:	e7ce      	b.n	80066b0 <USBD_StdEPReq+0x28>
          switch (pdev->dev_state)
 8006712:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8006716:	2b02      	cmp	r3, #2
 8006718:	b2da      	uxtb	r2, r3
 800671a:	d022      	beq.n	8006762 <USBD_StdEPReq+0xda>
 800671c:	2a03      	cmp	r2, #3
 800671e:	d1bf      	bne.n	80066a0 <USBD_StdEPReq+0x18>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006720:	8863      	ldrh	r3, [r4, #2]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d1c4      	bne.n	80066b0 <USBD_StdEPReq+0x28>
                if ((ep_addr & 0x7FU) != 0x00U)
 8006726:	064e      	lsls	r6, r1, #25
 8006728:	d142      	bne.n	80067b0 <USBD_StdEPReq+0x128>
                (void)USBD_CtlSendStatus(pdev);
 800672a:	4628      	mov	r0, r5
 800672c:	f000 f8b4 	bl	8006898 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006730:	f8d5 32b8 	ldr.w	r3, [r5, #696]	@ 0x2b8
 8006734:	4621      	mov	r1, r4
 8006736:	4628      	mov	r0, r5
 8006738:	689b      	ldr	r3, [r3, #8]
}
 800673a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800673e:	4718      	bx	r3
          switch (pdev->dev_state)
 8006740:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8006744:	2b02      	cmp	r3, #2
 8006746:	b2da      	uxtb	r2, r3
 8006748:	d00b      	beq.n	8006762 <USBD_StdEPReq+0xda>
 800674a:	2a03      	cmp	r2, #3
 800674c:	d1a8      	bne.n	80066a0 <USBD_StdEPReq+0x18>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800674e:	8863      	ldrh	r3, [r4, #2]
 8006750:	b91b      	cbnz	r3, 800675a <USBD_StdEPReq+0xd2>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006752:	064a      	lsls	r2, r1, #25
 8006754:	d001      	beq.n	800675a <USBD_StdEPReq+0xd2>
 8006756:	88e3      	ldrh	r3, [r4, #6]
 8006758:	b37b      	cbz	r3, 80067ba <USBD_StdEPReq+0x132>
              (void)USBD_CtlSendStatus(pdev);
 800675a:	4628      	mov	r0, r5
 800675c:	f000 f89c 	bl	8006898 <USBD_CtlSendStatus>
              break;
 8006760:	e7a6      	b.n	80066b0 <USBD_StdEPReq+0x28>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006762:	064b      	lsls	r3, r1, #25
 8006764:	d09c      	beq.n	80066a0 <USBD_StdEPReq+0x18>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006766:	f000 f96d 	bl	8006a44 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800676a:	2180      	movs	r1, #128	@ 0x80
 800676c:	4628      	mov	r0, r5
 800676e:	f000 f969 	bl	8006a44 <USBD_LL_StallEP>
 8006772:	e79d      	b.n	80066b0 <USBD_StdEPReq+0x28>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006774:	0648      	lsls	r0, r1, #25
 8006776:	d193      	bne.n	80066a0 <USBD_StdEPReq+0x18>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006778:	0611      	lsls	r1, r2, #24
 800677a:	bf4c      	ite	mi
 800677c:	f105 0114 	addmi.w	r1, r5, #20
 8006780:	f505 71aa 	addpl.w	r1, r5, #340	@ 0x154
              pep->status = 0x0000U;
 8006784:	2300      	movs	r3, #0
 8006786:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006788:	2202      	movs	r2, #2
 800678a:	4628      	mov	r0, r5
 800678c:	f000 f858 	bl	8006840 <USBD_CtlSendData>
              break;
 8006790:	e78e      	b.n	80066b0 <USBD_StdEPReq+0x28>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006792:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006794:	2b00      	cmp	r3, #0
 8006796:	d083      	beq.n	80066a0 <USBD_StdEPReq+0x18>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006798:	f001 047f 	and.w	r4, r1, #127	@ 0x7f
 800679c:	3401      	adds	r4, #1
 800679e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80067a2:	2980      	cmp	r1, #128	@ 0x80
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067a4:	eb05 0484 	add.w	r4, r5, r4, lsl #2
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80067a8:	d1a6      	bne.n	80066f8 <USBD_StdEPReq+0x70>
                pep->status = 0x0000U;
 80067aa:	2300      	movs	r3, #0
 80067ac:	6023      	str	r3, [r4, #0]
 80067ae:	e7aa      	b.n	8006706 <USBD_StdEPReq+0x7e>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80067b0:	f000 f954 	bl	8006a5c <USBD_LL_ClearStallEP>
 80067b4:	e7b9      	b.n	800672a <USBD_StdEPReq+0xa2>
                pep->status = 0x0000U;
 80067b6:	6020      	str	r0, [r4, #0]
 80067b8:	e7a5      	b.n	8006706 <USBD_StdEPReq+0x7e>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80067ba:	f000 f943 	bl	8006a44 <USBD_LL_StallEP>
 80067be:	e7cc      	b.n	800675a <USBD_StdEPReq+0xd2>

080067c0 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 80067c0:	780b      	ldrb	r3, [r1, #0]
 80067c2:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 80067c4:	784b      	ldrb	r3, [r1, #1]
 80067c6:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pbuff);
 80067c8:	884b      	ldrh	r3, [r1, #2]
 80067ca:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pbuff);
 80067cc:	888b      	ldrh	r3, [r1, #4]
 80067ce:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pbuff);
 80067d0:	88cb      	ldrh	r3, [r1, #6]
 80067d2:	80c3      	strh	r3, [r0, #6]
}
 80067d4:	4770      	bx	lr
 80067d6:	bf00      	nop

080067d8 <USBD_CtlError>:
{
 80067d8:	b510      	push	{r4, lr}
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80067da:	2180      	movs	r1, #128	@ 0x80
{
 80067dc:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80067de:	f000 f931 	bl	8006a44 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80067e2:	4620      	mov	r0, r4
 80067e4:	2100      	movs	r1, #0
}
 80067e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 80067ea:	f000 b92b 	b.w	8006a44 <USBD_LL_StallEP>
 80067ee:	bf00      	nop

080067f0 <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 80067f0:	b308      	cbz	r0, 8006836 <USBD_GetString+0x46>
{
 80067f2:	b570      	push	{r4, r5, r6, lr}
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 80067f4:	7803      	ldrb	r3, [r0, #0]
 80067f6:	460e      	mov	r6, r1
 80067f8:	4614      	mov	r4, r2
 80067fa:	4605      	mov	r5, r0
 80067fc:	b1e3      	cbz	r3, 8006838 <USBD_GetString+0x48>
 80067fe:	3001      	adds	r0, #1
 8006800:	f7f9 fce6 	bl	80001d0 <strlen>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006804:	1c43      	adds	r3, r0, #1
 8006806:	b2db      	uxtb	r3, r3
 8006808:	3301      	adds	r3, #1
 800680a:	005b      	lsls	r3, r3, #1
 800680c:	b2da      	uxtb	r2, r3
 800680e:	8023      	strh	r3, [r4, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006810:	2303      	movs	r3, #3
  unicode[idx] = *(uint8_t *)len;
 8006812:	7032      	strb	r2, [r6, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006814:	7073      	strb	r3, [r6, #1]
  while (*pdesc != (uint8_t)'\0')
 8006816:	782c      	ldrb	r4, [r5, #0]
 8006818:	b164      	cbz	r4, 8006834 <USBD_GetString+0x44>
 800681a:	4628      	mov	r0, r5
  idx++;
 800681c:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 800681e:	2100      	movs	r1, #0
    idx++;
 8006820:	1c5a      	adds	r2, r3, #1
    unicode[idx] = 0U;
 8006822:	b2d2      	uxtb	r2, r2
    unicode[idx] = *pdesc;
 8006824:	54f4      	strb	r4, [r6, r3]
    unicode[idx] = 0U;
 8006826:	54b1      	strb	r1, [r6, r2]
  while (*pdesc != (uint8_t)'\0')
 8006828:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    idx++;
 800682c:	3302      	adds	r3, #2
 800682e:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 8006830:	2c00      	cmp	r4, #0
 8006832:	d1f5      	bne.n	8006820 <USBD_GetString+0x30>
}
 8006834:	bd70      	pop	{r4, r5, r6, pc}
 8006836:	4770      	bx	lr
  while (*pbuff != (uint8_t)'\0')
 8006838:	2202      	movs	r2, #2
 800683a:	4613      	mov	r3, r2
 800683c:	e7e7      	b.n	800680e <USBD_GetString+0x1e>
 800683e:	bf00      	nop

08006840 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006840:	b508      	push	{r3, lr}
 8006842:	4613      	mov	r3, r2
 8006844:	460a      	mov	r2, r1
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006846:	2102      	movs	r1, #2
  pdev->ep_in[0].total_length = len;
 8006848:	e9c0 3306 	strd	r3, r3, [r0, #24]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800684c:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
#else
  pdev->ep_in[0].rem_length = len;
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006850:	2100      	movs	r1, #0
 8006852:	f000 f92f 	bl	8006ab4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8006856:	2000      	movs	r0, #0
 8006858:	bd08      	pop	{r3, pc}
 800685a:	bf00      	nop

0800685c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800685c:	b508      	push	{r3, lr}
 800685e:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006860:	460a      	mov	r2, r1
 8006862:	2100      	movs	r1, #0
 8006864:	f000 f926 	bl	8006ab4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8006868:	2000      	movs	r0, #0
 800686a:	bd08      	pop	{r3, pc}

0800686c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800686c:	b508      	push	{r3, lr}
 800686e:	4613      	mov	r3, r2
 8006870:	460a      	mov	r2, r1
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006872:	2103      	movs	r1, #3
  pdev->ep_out[0].total_length = len;
 8006874:	e9c0 3356 	strd	r3, r3, [r0, #344]	@ 0x158
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006878:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
#else
  pdev->ep_out[0].rem_length = len;
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800687c:	2100      	movs	r1, #0
 800687e:	f000 f925 	bl	8006acc <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006882:	2000      	movs	r0, #0
 8006884:	bd08      	pop	{r3, pc}
 8006886:	bf00      	nop

08006888 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006888:	b508      	push	{r3, lr}
 800688a:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800688c:	460a      	mov	r2, r1
 800688e:	2100      	movs	r1, #0
 8006890:	f000 f91c 	bl	8006acc <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006894:	2000      	movs	r0, #0
 8006896:	bd08      	pop	{r3, pc}

08006898 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006898:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800689a:	2104      	movs	r1, #4

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800689c:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800689e:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80068a2:	461a      	mov	r2, r3
 80068a4:	4619      	mov	r1, r3
 80068a6:	f000 f905 	bl	8006ab4 <USBD_LL_Transmit>

  return USBD_OK;
}
 80068aa:	2000      	movs	r0, #0
 80068ac:	bd08      	pop	{r3, pc}
 80068ae:	bf00      	nop

080068b0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80068b0:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80068b2:	2105      	movs	r1, #5

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80068b4:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80068b6:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80068ba:	461a      	mov	r2, r3
 80068bc:	4619      	mov	r1, r3
 80068be:	f000 f905 	bl	8006acc <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80068c2:	2000      	movs	r0, #0
 80068c4:	bd08      	pop	{r3, pc}
 80068c6:	bf00      	nop

080068c8 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef *)hpcd->pData, (uint8_t *)hpcd->Setup);
 80068c8:	f200 419c 	addw	r1, r0, #1180	@ 0x49c
 80068cc:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 80068d0:	f7ff bbb8 	b.w	8006044 <USBD_LL_SetupStage>

080068d4 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80068d4:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 80068d8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80068dc:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 80068e0:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
 80068e4:	f7ff bbde 	b.w	80060a4 <USBD_LL_DataOutStage>

080068e8 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80068e8:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 80068ec:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80068f0:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 80068f4:	6a1a      	ldr	r2, [r3, #32]
 80068f6:	f7ff bc09 	b.w	800610c <USBD_LL_DataInStage>
 80068fa:	bf00      	nop

080068fc <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef *)hpcd->pData);
 80068fc:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8006900:	f7ff bca0 	b.w	8006244 <USBD_LL_SOF>

08006904 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006904:	b510      	push	{r4, lr}
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if (hpcd->Init.speed == PCD_SPEED_FULL)
 8006906:	79c1      	ldrb	r1, [r0, #7]
 8006908:	2902      	cmp	r1, #2
{
 800690a:	4604      	mov	r4, r0
  if (hpcd->Init.speed == PCD_SPEED_FULL)
 800690c:	d00c      	beq.n	8006928 <HAL_PCD_ResetCallback+0x24>
  {
    speed = USBD_SPEED_FULL; 
  }
  #if(!STM32F1_DEVICE)
  else if (hpcd->Init.speed == PCD_SPEED_HIGH)
 800690e:	b949      	cbnz	r1, 8006924 <HAL_PCD_ResetCallback+0x20>
  else
  {
    Error_Handler();
  }
  /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef *)hpcd->pData, speed);
 8006910:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 8006914:	f7ff fc7a 	bl	800620c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef *)hpcd->pData);
 8006918:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
}
 800691c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef *)hpcd->pData);
 8006920:	f7ff bc4a 	b.w	80061b8 <USBD_LL_Reset>
    Error_Handler();
 8006924:	f7fa f980 	bl	8000c28 <Error_Handler>
    speed = USBD_SPEED_FULL; 
 8006928:	2101      	movs	r1, #1
 800692a:	e7f1      	b.n	8006910 <HAL_PCD_ResetCallback+0xc>

0800692c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800692c:	b510      	push	{r4, lr}
 800692e:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef *)hpcd->pData);
 8006930:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8006934:	f7ff fc6e 	bl	8006214 <USBD_LL_Suspend>
#if (!STM32F1_DEVICE)
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006938:	6822      	ldr	r2, [r4, #0]
 800693a:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	@ 0xe00
 800693e:	f043 0301 	orr.w	r3, r3, #1
 8006942:	f8c2 3e00 	str.w	r3, [r2, #3584]	@ 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006946:	7ae3      	ldrb	r3, [r4, #11]
 8006948:	b123      	cbz	r3, 8006954 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800694a:	4a03      	ldr	r2, [pc, #12]	@ (8006958 <HAL_PCD_SuspendCallback+0x2c>)
 800694c:	6913      	ldr	r3, [r2, #16]
 800694e:	f043 0306 	orr.w	r3, r3, #6
 8006952:	6113      	str	r3, [r2, #16]
  }
#endif
  /* USER CODE END 2 */
}
 8006954:	bd10      	pop	{r4, pc}
 8006956:	bf00      	nop
 8006958:	e000ed00 	.word	0xe000ed00

0800695c <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef *)hpcd->pData);
 800695c:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8006960:	f7ff bc64 	b.w	800622c <USBD_LL_Resume>

08006964 <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 8006964:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8006968:	f7ff bc90 	b.w	800628c <USBD_LL_IsoOUTIncomplete>

0800696c <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 800696c:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8006970:	f7ff bc7a 	b.w	8006268 <USBD_LL_IsoINIncomplete>

08006974 <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef *)hpcd->pData);
 8006974:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8006978:	f7ff bc9a 	b.w	80062b0 <USBD_LL_DevConnected>

0800697c <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef *)hpcd->pData);
 800697c:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8006980:	f7ff bc98 	b.w	80062b4 <USBD_LL_DevDisconnected>

08006984 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006984:	b538      	push	{r3, r4, r5, lr}
#else
  /**FULL SPEED USB */
#if (STM32F1_DEVICE) /** for STM32F1 or similar */
  hpcd_USB_OTG_PTR = &hpcd_USB_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
#else
  hpcd_USB_OTG_PTR = &hpcd_USB_OTG_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
 8006986:	4c17      	ldr	r4, [pc, #92]	@ (80069e4 <USBD_LL_Init+0x60>)
 8006988:	4a17      	ldr	r2, [pc, #92]	@ (80069e8 <USBD_LL_Init+0x64>)
 800698a:	6022      	str	r2, [r4, #0]
#endif

  if (pdev->id == DEVICE_FS)
 800698c:	7805      	ldrb	r5, [r0, #0]
 800698e:	b10d      	cbz	r5, 8006994 <USBD_LL_Init+0x10>
  HAL_PCD_RegisterDataInStageCallback(hpcd_USB_OTG_PTR, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  return USBD_OK;
}
 8006990:	2000      	movs	r0, #0
 8006992:	bd38      	pop	{r3, r4, r5, pc}
    hpcd_USB_OTG_PTR->pData = pdev;
 8006994:	f8c2 04e0 	str.w	r0, [r2, #1248]	@ 0x4e0
	return HAL_PCDEx_SetRxFiFo(hpcd, (size/4));
 8006998:	2180      	movs	r1, #128	@ 0x80
    pdev->pData = hpcd_USB_OTG_PTR;
 800699a:	f8c0 2310 	str.w	r2, [r0, #784]	@ 0x310
	return HAL_PCDEx_SetRxFiFo(hpcd, (size/4));
 800699e:	4610      	mov	r0, r2
 80069a0:	f7fc fb92 	bl	80030c8 <HAL_PCDEx_SetRxFiFo>
	return HAL_PCDEx_SetTxFiFo(hpcd, fifo, (size/4));
 80069a4:	4629      	mov	r1, r5
 80069a6:	6820      	ldr	r0, [r4, #0]
 80069a8:	2210      	movs	r2, #16
 80069aa:	f7fc fb67 	bl	800307c <HAL_PCDEx_SetTxFiFo>
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CUSTOM_HID_IN_EP & 0x7F), 64);
 80069ae:	4b0f      	ldr	r3, [pc, #60]	@ (80069ec <USBD_LL_Init+0x68>)
	return HAL_PCDEx_SetTxFiFo(hpcd, fifo, (size/4));
 80069b0:	6820      	ldr	r0, [r4, #0]
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CUSTOM_HID_IN_EP & 0x7F), 64);
 80069b2:	7819      	ldrb	r1, [r3, #0]
	return HAL_PCDEx_SetTxFiFo(hpcd, fifo, (size/4));
 80069b4:	2210      	movs	r2, #16
 80069b6:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 80069ba:	f7fc fb5f 	bl	800307c <HAL_PCDEx_SetTxFiFo>
      HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CDC_IN_EP[i] & 0x7F), 128);
 80069be:	4b0c      	ldr	r3, [pc, #48]	@ (80069f0 <USBD_LL_Init+0x6c>)
	return HAL_PCDEx_SetTxFiFo(hpcd, fifo, (size/4));
 80069c0:	6820      	ldr	r0, [r4, #0]
      HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CDC_IN_EP[i] & 0x7F), 128);
 80069c2:	7819      	ldrb	r1, [r3, #0]
	return HAL_PCDEx_SetTxFiFo(hpcd, fifo, (size/4));
 80069c4:	2220      	movs	r2, #32
 80069c6:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 80069ca:	f7fc fb57 	bl	800307c <HAL_PCDEx_SetTxFiFo>
      HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CDC_CMD_EP[i] & 0x7F), 64);
 80069ce:	4b09      	ldr	r3, [pc, #36]	@ (80069f4 <USBD_LL_Init+0x70>)
	return HAL_PCDEx_SetTxFiFo(hpcd, fifo, (size/4));
 80069d0:	6820      	ldr	r0, [r4, #0]
      HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CDC_CMD_EP[i] & 0x7F), 64);
 80069d2:	7819      	ldrb	r1, [r3, #0]
	return HAL_PCDEx_SetTxFiFo(hpcd, fifo, (size/4));
 80069d4:	2210      	movs	r2, #16
 80069d6:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 80069da:	f7fc fb4f 	bl	800307c <HAL_PCDEx_SetTxFiFo>
}
 80069de:	2000      	movs	r0, #0
 80069e0:	bd38      	pop	{r3, r4, r5, pc}
 80069e2:	bf00      	nop
 80069e4:	2000a5b8 	.word	0x2000a5b8
 80069e8:	20004670 	.word	0x20004670
 80069ec:	200002b1 	.word	0x200002b1
 80069f0:	2000a444 	.word	0x2000a444
 80069f4:	2000a43c 	.word	0x2000a43c

080069f8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80069f8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 80069fa:	f8d0 0310 	ldr.w	r0, [r0, #784]	@ 0x310
 80069fe:	f7fb fe2d 	bl	800265c <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8006a02:	b118      	cbz	r0, 8006a0c <USBD_LL_Start+0x14>
 8006a04:	2802      	cmp	r0, #2
 8006a06:	bf0c      	ite	eq
 8006a08:	2001      	moveq	r0, #1
 8006a0a:	2003      	movne	r0, #3
}
 8006a0c:	bd08      	pop	{r3, pc}
 8006a0e:	bf00      	nop

08006a10 <USBD_LL_OpenEP>:
{
 8006a10:	4694      	mov	ip, r2
 8006a12:	b508      	push	{r3, lr}
 8006a14:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006a16:	f8d0 0310 	ldr.w	r0, [r0, #784]	@ 0x310
 8006a1a:	4663      	mov	r3, ip
 8006a1c:	f7fc f9f0 	bl	8002e00 <HAL_PCD_EP_Open>
  switch (hal_status)
 8006a20:	b118      	cbz	r0, 8006a2a <USBD_LL_OpenEP+0x1a>
 8006a22:	2802      	cmp	r0, #2
 8006a24:	bf0c      	ite	eq
 8006a26:	2001      	moveq	r0, #1
 8006a28:	2003      	movne	r0, #3
}
 8006a2a:	bd08      	pop	{r3, pc}

08006a2c <USBD_LL_CloseEP>:
{
 8006a2c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006a2e:	f8d0 0310 	ldr.w	r0, [r0, #784]	@ 0x310
 8006a32:	f7fc fa25 	bl	8002e80 <HAL_PCD_EP_Close>
  switch (hal_status)
 8006a36:	b118      	cbz	r0, 8006a40 <USBD_LL_CloseEP+0x14>
 8006a38:	2802      	cmp	r0, #2
 8006a3a:	bf0c      	ite	eq
 8006a3c:	2001      	moveq	r0, #1
 8006a3e:	2003      	movne	r0, #3
}
 8006a40:	bd08      	pop	{r3, pc}
 8006a42:	bf00      	nop

08006a44 <USBD_LL_StallEP>:
{
 8006a44:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006a46:	f8d0 0310 	ldr.w	r0, [r0, #784]	@ 0x310
 8006a4a:	f7fc fa9d 	bl	8002f88 <HAL_PCD_EP_SetStall>
  switch (hal_status)
 8006a4e:	b118      	cbz	r0, 8006a58 <USBD_LL_StallEP+0x14>
 8006a50:	2802      	cmp	r0, #2
 8006a52:	bf0c      	ite	eq
 8006a54:	2001      	moveq	r0, #1
 8006a56:	2003      	movne	r0, #3
}
 8006a58:	bd08      	pop	{r3, pc}
 8006a5a:	bf00      	nop

08006a5c <USBD_LL_ClearStallEP>:
{
 8006a5c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006a5e:	f8d0 0310 	ldr.w	r0, [r0, #784]	@ 0x310
 8006a62:	f7fc fad3 	bl	800300c <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 8006a66:	b118      	cbz	r0, 8006a70 <USBD_LL_ClearStallEP+0x14>
 8006a68:	2802      	cmp	r0, #2
 8006a6a:	bf0c      	ite	eq
 8006a6c:	2001      	moveq	r0, #1
 8006a6e:	2003      	movne	r0, #3
}
 8006a70:	bd08      	pop	{r3, pc}
 8006a72:	bf00      	nop

08006a74 <USBD_LL_IsStallEP>:
  if ((ep_addr & 0x80) == 0x80)
 8006a74:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006a76:	f8d0 3310 	ldr.w	r3, [r0, #784]	@ 0x310
  if ((ep_addr & 0x80) == 0x80)
 8006a7a:	d406      	bmi.n	8006a8a <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006a7c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8006a80:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8006a84:	f893 0256 	ldrb.w	r0, [r3, #598]	@ 0x256
}
 8006a88:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006a8a:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8006a8e:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8006a92:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8006a96:	7d98      	ldrb	r0, [r3, #22]
 8006a98:	4770      	bx	lr
 8006a9a:	bf00      	nop

08006a9c <USBD_LL_SetUSBAddress>:
{
 8006a9c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006a9e:	f8d0 0310 	ldr.w	r0, [r0, #784]	@ 0x310
 8006aa2:	f7fc f999 	bl	8002dd8 <HAL_PCD_SetAddress>
  switch (hal_status)
 8006aa6:	b118      	cbz	r0, 8006ab0 <USBD_LL_SetUSBAddress+0x14>
 8006aa8:	2802      	cmp	r0, #2
 8006aaa:	bf0c      	ite	eq
 8006aac:	2001      	moveq	r0, #1
 8006aae:	2003      	movne	r0, #3
}
 8006ab0:	bd08      	pop	{r3, pc}
 8006ab2:	bf00      	nop

08006ab4 <USBD_LL_Transmit>:
{
 8006ab4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006ab6:	f8d0 0310 	ldr.w	r0, [r0, #784]	@ 0x310
 8006aba:	f7fc fa41 	bl	8002f40 <HAL_PCD_EP_Transmit>
  switch (hal_status)
 8006abe:	b118      	cbz	r0, 8006ac8 <USBD_LL_Transmit+0x14>
 8006ac0:	2802      	cmp	r0, #2
 8006ac2:	bf0c      	ite	eq
 8006ac4:	2001      	moveq	r0, #1
 8006ac6:	2003      	movne	r0, #3
}
 8006ac8:	bd08      	pop	{r3, pc}
 8006aca:	bf00      	nop

08006acc <USBD_LL_PrepareReceive>:
{
 8006acc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006ace:	f8d0 0310 	ldr.w	r0, [r0, #784]	@ 0x310
 8006ad2:	f7fc fa09 	bl	8002ee8 <HAL_PCD_EP_Receive>
  switch (hal_status)
 8006ad6:	b118      	cbz	r0, 8006ae0 <USBD_LL_PrepareReceive+0x14>
 8006ad8:	2802      	cmp	r0, #2
 8006ada:	bf0c      	ite	eq
 8006adc:	2001      	moveq	r0, #1
 8006ade:	2003      	movne	r0, #3
}
 8006ae0:	bd08      	pop	{r3, pc}
 8006ae2:	bf00      	nop

08006ae4 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef *)pdev->pData, ep_addr);
 8006ae4:	f8d0 0310 	ldr.w	r0, [r0, #784]	@ 0x310
 8006ae8:	f7fc ba20 	b.w	8002f2c <HAL_PCD_EP_GetRxCount>

08006aec <sniprintf>:
 8006aec:	b40c      	push	{r2, r3}
 8006aee:	b530      	push	{r4, r5, lr}
 8006af0:	4b18      	ldr	r3, [pc, #96]	@ (8006b54 <sniprintf+0x68>)
 8006af2:	1e0c      	subs	r4, r1, #0
 8006af4:	681d      	ldr	r5, [r3, #0]
 8006af6:	b09d      	sub	sp, #116	@ 0x74
 8006af8:	da08      	bge.n	8006b0c <sniprintf+0x20>
 8006afa:	238b      	movs	r3, #139	@ 0x8b
 8006afc:	602b      	str	r3, [r5, #0]
 8006afe:	f04f 30ff 	mov.w	r0, #4294967295
 8006b02:	b01d      	add	sp, #116	@ 0x74
 8006b04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b08:	b002      	add	sp, #8
 8006b0a:	4770      	bx	lr
 8006b0c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006b10:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006b14:	f04f 0300 	mov.w	r3, #0
 8006b18:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006b1a:	bf14      	ite	ne
 8006b1c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006b20:	4623      	moveq	r3, r4
 8006b22:	9304      	str	r3, [sp, #16]
 8006b24:	9307      	str	r3, [sp, #28]
 8006b26:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006b2a:	9002      	str	r0, [sp, #8]
 8006b2c:	9006      	str	r0, [sp, #24]
 8006b2e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006b32:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006b34:	ab21      	add	r3, sp, #132	@ 0x84
 8006b36:	a902      	add	r1, sp, #8
 8006b38:	4628      	mov	r0, r5
 8006b3a:	9301      	str	r3, [sp, #4]
 8006b3c:	f000 f99a 	bl	8006e74 <_svfiprintf_r>
 8006b40:	1c43      	adds	r3, r0, #1
 8006b42:	bfbc      	itt	lt
 8006b44:	238b      	movlt	r3, #139	@ 0x8b
 8006b46:	602b      	strlt	r3, [r5, #0]
 8006b48:	2c00      	cmp	r4, #0
 8006b4a:	d0da      	beq.n	8006b02 <sniprintf+0x16>
 8006b4c:	9b02      	ldr	r3, [sp, #8]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	701a      	strb	r2, [r3, #0]
 8006b52:	e7d6      	b.n	8006b02 <sniprintf+0x16>
 8006b54:	200002b4 	.word	0x200002b4

08006b58 <__errno>:
 8006b58:	4b01      	ldr	r3, [pc, #4]	@ (8006b60 <__errno+0x8>)
 8006b5a:	6818      	ldr	r0, [r3, #0]
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	200002b4 	.word	0x200002b4

08006b64 <__libc_init_array>:
 8006b64:	b570      	push	{r4, r5, r6, lr}
 8006b66:	4d0d      	ldr	r5, [pc, #52]	@ (8006b9c <__libc_init_array+0x38>)
 8006b68:	4c0d      	ldr	r4, [pc, #52]	@ (8006ba0 <__libc_init_array+0x3c>)
 8006b6a:	1b64      	subs	r4, r4, r5
 8006b6c:	10a4      	asrs	r4, r4, #2
 8006b6e:	2600      	movs	r6, #0
 8006b70:	42a6      	cmp	r6, r4
 8006b72:	d109      	bne.n	8006b88 <__libc_init_array+0x24>
 8006b74:	4d0b      	ldr	r5, [pc, #44]	@ (8006ba4 <__libc_init_array+0x40>)
 8006b76:	4c0c      	ldr	r4, [pc, #48]	@ (8006ba8 <__libc_init_array+0x44>)
 8006b78:	f000 fc64 	bl	8007444 <_init>
 8006b7c:	1b64      	subs	r4, r4, r5
 8006b7e:	10a4      	asrs	r4, r4, #2
 8006b80:	2600      	movs	r6, #0
 8006b82:	42a6      	cmp	r6, r4
 8006b84:	d105      	bne.n	8006b92 <__libc_init_array+0x2e>
 8006b86:	bd70      	pop	{r4, r5, r6, pc}
 8006b88:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b8c:	4798      	blx	r3
 8006b8e:	3601      	adds	r6, #1
 8006b90:	e7ee      	b.n	8006b70 <__libc_init_array+0xc>
 8006b92:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b96:	4798      	blx	r3
 8006b98:	3601      	adds	r6, #1
 8006b9a:	e7f2      	b.n	8006b82 <__libc_init_array+0x1e>
 8006b9c:	08007514 	.word	0x08007514
 8006ba0:	08007514 	.word	0x08007514
 8006ba4:	08007514 	.word	0x08007514
 8006ba8:	08007518 	.word	0x08007518

08006bac <__retarget_lock_acquire_recursive>:
 8006bac:	4770      	bx	lr

08006bae <__retarget_lock_release_recursive>:
 8006bae:	4770      	bx	lr

08006bb0 <memcpy>:
 8006bb0:	440a      	add	r2, r1
 8006bb2:	4291      	cmp	r1, r2
 8006bb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006bb8:	d100      	bne.n	8006bbc <memcpy+0xc>
 8006bba:	4770      	bx	lr
 8006bbc:	b510      	push	{r4, lr}
 8006bbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bc6:	4291      	cmp	r1, r2
 8006bc8:	d1f9      	bne.n	8006bbe <memcpy+0xe>
 8006bca:	bd10      	pop	{r4, pc}

08006bcc <_free_r>:
 8006bcc:	b538      	push	{r3, r4, r5, lr}
 8006bce:	4605      	mov	r5, r0
 8006bd0:	2900      	cmp	r1, #0
 8006bd2:	d041      	beq.n	8006c58 <_free_r+0x8c>
 8006bd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bd8:	1f0c      	subs	r4, r1, #4
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	bfb8      	it	lt
 8006bde:	18e4      	addlt	r4, r4, r3
 8006be0:	f000 f8e0 	bl	8006da4 <__malloc_lock>
 8006be4:	4a1d      	ldr	r2, [pc, #116]	@ (8006c5c <_free_r+0x90>)
 8006be6:	6813      	ldr	r3, [r2, #0]
 8006be8:	b933      	cbnz	r3, 8006bf8 <_free_r+0x2c>
 8006bea:	6063      	str	r3, [r4, #4]
 8006bec:	6014      	str	r4, [r2, #0]
 8006bee:	4628      	mov	r0, r5
 8006bf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006bf4:	f000 b8dc 	b.w	8006db0 <__malloc_unlock>
 8006bf8:	42a3      	cmp	r3, r4
 8006bfa:	d908      	bls.n	8006c0e <_free_r+0x42>
 8006bfc:	6820      	ldr	r0, [r4, #0]
 8006bfe:	1821      	adds	r1, r4, r0
 8006c00:	428b      	cmp	r3, r1
 8006c02:	bf01      	itttt	eq
 8006c04:	6819      	ldreq	r1, [r3, #0]
 8006c06:	685b      	ldreq	r3, [r3, #4]
 8006c08:	1809      	addeq	r1, r1, r0
 8006c0a:	6021      	streq	r1, [r4, #0]
 8006c0c:	e7ed      	b.n	8006bea <_free_r+0x1e>
 8006c0e:	461a      	mov	r2, r3
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	b10b      	cbz	r3, 8006c18 <_free_r+0x4c>
 8006c14:	42a3      	cmp	r3, r4
 8006c16:	d9fa      	bls.n	8006c0e <_free_r+0x42>
 8006c18:	6811      	ldr	r1, [r2, #0]
 8006c1a:	1850      	adds	r0, r2, r1
 8006c1c:	42a0      	cmp	r0, r4
 8006c1e:	d10b      	bne.n	8006c38 <_free_r+0x6c>
 8006c20:	6820      	ldr	r0, [r4, #0]
 8006c22:	4401      	add	r1, r0
 8006c24:	1850      	adds	r0, r2, r1
 8006c26:	4283      	cmp	r3, r0
 8006c28:	6011      	str	r1, [r2, #0]
 8006c2a:	d1e0      	bne.n	8006bee <_free_r+0x22>
 8006c2c:	6818      	ldr	r0, [r3, #0]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	6053      	str	r3, [r2, #4]
 8006c32:	4408      	add	r0, r1
 8006c34:	6010      	str	r0, [r2, #0]
 8006c36:	e7da      	b.n	8006bee <_free_r+0x22>
 8006c38:	d902      	bls.n	8006c40 <_free_r+0x74>
 8006c3a:	230c      	movs	r3, #12
 8006c3c:	602b      	str	r3, [r5, #0]
 8006c3e:	e7d6      	b.n	8006bee <_free_r+0x22>
 8006c40:	6820      	ldr	r0, [r4, #0]
 8006c42:	1821      	adds	r1, r4, r0
 8006c44:	428b      	cmp	r3, r1
 8006c46:	bf04      	itt	eq
 8006c48:	6819      	ldreq	r1, [r3, #0]
 8006c4a:	685b      	ldreq	r3, [r3, #4]
 8006c4c:	6063      	str	r3, [r4, #4]
 8006c4e:	bf04      	itt	eq
 8006c50:	1809      	addeq	r1, r1, r0
 8006c52:	6021      	streq	r1, [r4, #0]
 8006c54:	6054      	str	r4, [r2, #4]
 8006c56:	e7ca      	b.n	8006bee <_free_r+0x22>
 8006c58:	bd38      	pop	{r3, r4, r5, pc}
 8006c5a:	bf00      	nop
 8006c5c:	2000a700 	.word	0x2000a700

08006c60 <sbrk_aligned>:
 8006c60:	b570      	push	{r4, r5, r6, lr}
 8006c62:	4e0f      	ldr	r6, [pc, #60]	@ (8006ca0 <sbrk_aligned+0x40>)
 8006c64:	460c      	mov	r4, r1
 8006c66:	6831      	ldr	r1, [r6, #0]
 8006c68:	4605      	mov	r5, r0
 8006c6a:	b911      	cbnz	r1, 8006c72 <sbrk_aligned+0x12>
 8006c6c:	f000 fba4 	bl	80073b8 <_sbrk_r>
 8006c70:	6030      	str	r0, [r6, #0]
 8006c72:	4621      	mov	r1, r4
 8006c74:	4628      	mov	r0, r5
 8006c76:	f000 fb9f 	bl	80073b8 <_sbrk_r>
 8006c7a:	1c43      	adds	r3, r0, #1
 8006c7c:	d103      	bne.n	8006c86 <sbrk_aligned+0x26>
 8006c7e:	f04f 34ff 	mov.w	r4, #4294967295
 8006c82:	4620      	mov	r0, r4
 8006c84:	bd70      	pop	{r4, r5, r6, pc}
 8006c86:	1cc4      	adds	r4, r0, #3
 8006c88:	f024 0403 	bic.w	r4, r4, #3
 8006c8c:	42a0      	cmp	r0, r4
 8006c8e:	d0f8      	beq.n	8006c82 <sbrk_aligned+0x22>
 8006c90:	1a21      	subs	r1, r4, r0
 8006c92:	4628      	mov	r0, r5
 8006c94:	f000 fb90 	bl	80073b8 <_sbrk_r>
 8006c98:	3001      	adds	r0, #1
 8006c9a:	d1f2      	bne.n	8006c82 <sbrk_aligned+0x22>
 8006c9c:	e7ef      	b.n	8006c7e <sbrk_aligned+0x1e>
 8006c9e:	bf00      	nop
 8006ca0:	2000a6fc 	.word	0x2000a6fc

08006ca4 <_malloc_r>:
 8006ca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ca8:	1ccd      	adds	r5, r1, #3
 8006caa:	f025 0503 	bic.w	r5, r5, #3
 8006cae:	3508      	adds	r5, #8
 8006cb0:	2d0c      	cmp	r5, #12
 8006cb2:	bf38      	it	cc
 8006cb4:	250c      	movcc	r5, #12
 8006cb6:	2d00      	cmp	r5, #0
 8006cb8:	4606      	mov	r6, r0
 8006cba:	db01      	blt.n	8006cc0 <_malloc_r+0x1c>
 8006cbc:	42a9      	cmp	r1, r5
 8006cbe:	d904      	bls.n	8006cca <_malloc_r+0x26>
 8006cc0:	230c      	movs	r3, #12
 8006cc2:	6033      	str	r3, [r6, #0]
 8006cc4:	2000      	movs	r0, #0
 8006cc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006da0 <_malloc_r+0xfc>
 8006cce:	f000 f869 	bl	8006da4 <__malloc_lock>
 8006cd2:	f8d8 3000 	ldr.w	r3, [r8]
 8006cd6:	461c      	mov	r4, r3
 8006cd8:	bb44      	cbnz	r4, 8006d2c <_malloc_r+0x88>
 8006cda:	4629      	mov	r1, r5
 8006cdc:	4630      	mov	r0, r6
 8006cde:	f7ff ffbf 	bl	8006c60 <sbrk_aligned>
 8006ce2:	1c43      	adds	r3, r0, #1
 8006ce4:	4604      	mov	r4, r0
 8006ce6:	d158      	bne.n	8006d9a <_malloc_r+0xf6>
 8006ce8:	f8d8 4000 	ldr.w	r4, [r8]
 8006cec:	4627      	mov	r7, r4
 8006cee:	2f00      	cmp	r7, #0
 8006cf0:	d143      	bne.n	8006d7a <_malloc_r+0xd6>
 8006cf2:	2c00      	cmp	r4, #0
 8006cf4:	d04b      	beq.n	8006d8e <_malloc_r+0xea>
 8006cf6:	6823      	ldr	r3, [r4, #0]
 8006cf8:	4639      	mov	r1, r7
 8006cfa:	4630      	mov	r0, r6
 8006cfc:	eb04 0903 	add.w	r9, r4, r3
 8006d00:	f000 fb5a 	bl	80073b8 <_sbrk_r>
 8006d04:	4581      	cmp	r9, r0
 8006d06:	d142      	bne.n	8006d8e <_malloc_r+0xea>
 8006d08:	6821      	ldr	r1, [r4, #0]
 8006d0a:	1a6d      	subs	r5, r5, r1
 8006d0c:	4629      	mov	r1, r5
 8006d0e:	4630      	mov	r0, r6
 8006d10:	f7ff ffa6 	bl	8006c60 <sbrk_aligned>
 8006d14:	3001      	adds	r0, #1
 8006d16:	d03a      	beq.n	8006d8e <_malloc_r+0xea>
 8006d18:	6823      	ldr	r3, [r4, #0]
 8006d1a:	442b      	add	r3, r5
 8006d1c:	6023      	str	r3, [r4, #0]
 8006d1e:	f8d8 3000 	ldr.w	r3, [r8]
 8006d22:	685a      	ldr	r2, [r3, #4]
 8006d24:	bb62      	cbnz	r2, 8006d80 <_malloc_r+0xdc>
 8006d26:	f8c8 7000 	str.w	r7, [r8]
 8006d2a:	e00f      	b.n	8006d4c <_malloc_r+0xa8>
 8006d2c:	6822      	ldr	r2, [r4, #0]
 8006d2e:	1b52      	subs	r2, r2, r5
 8006d30:	d420      	bmi.n	8006d74 <_malloc_r+0xd0>
 8006d32:	2a0b      	cmp	r2, #11
 8006d34:	d917      	bls.n	8006d66 <_malloc_r+0xc2>
 8006d36:	1961      	adds	r1, r4, r5
 8006d38:	42a3      	cmp	r3, r4
 8006d3a:	6025      	str	r5, [r4, #0]
 8006d3c:	bf18      	it	ne
 8006d3e:	6059      	strne	r1, [r3, #4]
 8006d40:	6863      	ldr	r3, [r4, #4]
 8006d42:	bf08      	it	eq
 8006d44:	f8c8 1000 	streq.w	r1, [r8]
 8006d48:	5162      	str	r2, [r4, r5]
 8006d4a:	604b      	str	r3, [r1, #4]
 8006d4c:	4630      	mov	r0, r6
 8006d4e:	f000 f82f 	bl	8006db0 <__malloc_unlock>
 8006d52:	f104 000b 	add.w	r0, r4, #11
 8006d56:	1d23      	adds	r3, r4, #4
 8006d58:	f020 0007 	bic.w	r0, r0, #7
 8006d5c:	1ac2      	subs	r2, r0, r3
 8006d5e:	bf1c      	itt	ne
 8006d60:	1a1b      	subne	r3, r3, r0
 8006d62:	50a3      	strne	r3, [r4, r2]
 8006d64:	e7af      	b.n	8006cc6 <_malloc_r+0x22>
 8006d66:	6862      	ldr	r2, [r4, #4]
 8006d68:	42a3      	cmp	r3, r4
 8006d6a:	bf0c      	ite	eq
 8006d6c:	f8c8 2000 	streq.w	r2, [r8]
 8006d70:	605a      	strne	r2, [r3, #4]
 8006d72:	e7eb      	b.n	8006d4c <_malloc_r+0xa8>
 8006d74:	4623      	mov	r3, r4
 8006d76:	6864      	ldr	r4, [r4, #4]
 8006d78:	e7ae      	b.n	8006cd8 <_malloc_r+0x34>
 8006d7a:	463c      	mov	r4, r7
 8006d7c:	687f      	ldr	r7, [r7, #4]
 8006d7e:	e7b6      	b.n	8006cee <_malloc_r+0x4a>
 8006d80:	461a      	mov	r2, r3
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	42a3      	cmp	r3, r4
 8006d86:	d1fb      	bne.n	8006d80 <_malloc_r+0xdc>
 8006d88:	2300      	movs	r3, #0
 8006d8a:	6053      	str	r3, [r2, #4]
 8006d8c:	e7de      	b.n	8006d4c <_malloc_r+0xa8>
 8006d8e:	230c      	movs	r3, #12
 8006d90:	6033      	str	r3, [r6, #0]
 8006d92:	4630      	mov	r0, r6
 8006d94:	f000 f80c 	bl	8006db0 <__malloc_unlock>
 8006d98:	e794      	b.n	8006cc4 <_malloc_r+0x20>
 8006d9a:	6005      	str	r5, [r0, #0]
 8006d9c:	e7d6      	b.n	8006d4c <_malloc_r+0xa8>
 8006d9e:	bf00      	nop
 8006da0:	2000a700 	.word	0x2000a700

08006da4 <__malloc_lock>:
 8006da4:	4801      	ldr	r0, [pc, #4]	@ (8006dac <__malloc_lock+0x8>)
 8006da6:	f7ff bf01 	b.w	8006bac <__retarget_lock_acquire_recursive>
 8006daa:	bf00      	nop
 8006dac:	2000a6f8 	.word	0x2000a6f8

08006db0 <__malloc_unlock>:
 8006db0:	4801      	ldr	r0, [pc, #4]	@ (8006db8 <__malloc_unlock+0x8>)
 8006db2:	f7ff befc 	b.w	8006bae <__retarget_lock_release_recursive>
 8006db6:	bf00      	nop
 8006db8:	2000a6f8 	.word	0x2000a6f8

08006dbc <__ssputs_r>:
 8006dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dc0:	688e      	ldr	r6, [r1, #8]
 8006dc2:	461f      	mov	r7, r3
 8006dc4:	42be      	cmp	r6, r7
 8006dc6:	680b      	ldr	r3, [r1, #0]
 8006dc8:	4682      	mov	sl, r0
 8006dca:	460c      	mov	r4, r1
 8006dcc:	4690      	mov	r8, r2
 8006dce:	d82d      	bhi.n	8006e2c <__ssputs_r+0x70>
 8006dd0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006dd4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006dd8:	d026      	beq.n	8006e28 <__ssputs_r+0x6c>
 8006dda:	6965      	ldr	r5, [r4, #20]
 8006ddc:	6909      	ldr	r1, [r1, #16]
 8006dde:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006de2:	eba3 0901 	sub.w	r9, r3, r1
 8006de6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006dea:	1c7b      	adds	r3, r7, #1
 8006dec:	444b      	add	r3, r9
 8006dee:	106d      	asrs	r5, r5, #1
 8006df0:	429d      	cmp	r5, r3
 8006df2:	bf38      	it	cc
 8006df4:	461d      	movcc	r5, r3
 8006df6:	0553      	lsls	r3, r2, #21
 8006df8:	d527      	bpl.n	8006e4a <__ssputs_r+0x8e>
 8006dfa:	4629      	mov	r1, r5
 8006dfc:	f7ff ff52 	bl	8006ca4 <_malloc_r>
 8006e00:	4606      	mov	r6, r0
 8006e02:	b360      	cbz	r0, 8006e5e <__ssputs_r+0xa2>
 8006e04:	6921      	ldr	r1, [r4, #16]
 8006e06:	464a      	mov	r2, r9
 8006e08:	f7ff fed2 	bl	8006bb0 <memcpy>
 8006e0c:	89a3      	ldrh	r3, [r4, #12]
 8006e0e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006e12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e16:	81a3      	strh	r3, [r4, #12]
 8006e18:	6126      	str	r6, [r4, #16]
 8006e1a:	6165      	str	r5, [r4, #20]
 8006e1c:	444e      	add	r6, r9
 8006e1e:	eba5 0509 	sub.w	r5, r5, r9
 8006e22:	6026      	str	r6, [r4, #0]
 8006e24:	60a5      	str	r5, [r4, #8]
 8006e26:	463e      	mov	r6, r7
 8006e28:	42be      	cmp	r6, r7
 8006e2a:	d900      	bls.n	8006e2e <__ssputs_r+0x72>
 8006e2c:	463e      	mov	r6, r7
 8006e2e:	6820      	ldr	r0, [r4, #0]
 8006e30:	4632      	mov	r2, r6
 8006e32:	4641      	mov	r1, r8
 8006e34:	f000 faa6 	bl	8007384 <memmove>
 8006e38:	68a3      	ldr	r3, [r4, #8]
 8006e3a:	1b9b      	subs	r3, r3, r6
 8006e3c:	60a3      	str	r3, [r4, #8]
 8006e3e:	6823      	ldr	r3, [r4, #0]
 8006e40:	4433      	add	r3, r6
 8006e42:	6023      	str	r3, [r4, #0]
 8006e44:	2000      	movs	r0, #0
 8006e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e4a:	462a      	mov	r2, r5
 8006e4c:	f000 fac4 	bl	80073d8 <_realloc_r>
 8006e50:	4606      	mov	r6, r0
 8006e52:	2800      	cmp	r0, #0
 8006e54:	d1e0      	bne.n	8006e18 <__ssputs_r+0x5c>
 8006e56:	6921      	ldr	r1, [r4, #16]
 8006e58:	4650      	mov	r0, sl
 8006e5a:	f7ff feb7 	bl	8006bcc <_free_r>
 8006e5e:	230c      	movs	r3, #12
 8006e60:	f8ca 3000 	str.w	r3, [sl]
 8006e64:	89a3      	ldrh	r3, [r4, #12]
 8006e66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e6a:	81a3      	strh	r3, [r4, #12]
 8006e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e70:	e7e9      	b.n	8006e46 <__ssputs_r+0x8a>
	...

08006e74 <_svfiprintf_r>:
 8006e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e78:	4698      	mov	r8, r3
 8006e7a:	898b      	ldrh	r3, [r1, #12]
 8006e7c:	061b      	lsls	r3, r3, #24
 8006e7e:	b09d      	sub	sp, #116	@ 0x74
 8006e80:	4607      	mov	r7, r0
 8006e82:	460d      	mov	r5, r1
 8006e84:	4614      	mov	r4, r2
 8006e86:	d510      	bpl.n	8006eaa <_svfiprintf_r+0x36>
 8006e88:	690b      	ldr	r3, [r1, #16]
 8006e8a:	b973      	cbnz	r3, 8006eaa <_svfiprintf_r+0x36>
 8006e8c:	2140      	movs	r1, #64	@ 0x40
 8006e8e:	f7ff ff09 	bl	8006ca4 <_malloc_r>
 8006e92:	6028      	str	r0, [r5, #0]
 8006e94:	6128      	str	r0, [r5, #16]
 8006e96:	b930      	cbnz	r0, 8006ea6 <_svfiprintf_r+0x32>
 8006e98:	230c      	movs	r3, #12
 8006e9a:	603b      	str	r3, [r7, #0]
 8006e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006ea0:	b01d      	add	sp, #116	@ 0x74
 8006ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ea6:	2340      	movs	r3, #64	@ 0x40
 8006ea8:	616b      	str	r3, [r5, #20]
 8006eaa:	2300      	movs	r3, #0
 8006eac:	9309      	str	r3, [sp, #36]	@ 0x24
 8006eae:	2320      	movs	r3, #32
 8006eb0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006eb4:	f8cd 800c 	str.w	r8, [sp, #12]
 8006eb8:	2330      	movs	r3, #48	@ 0x30
 8006eba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007058 <_svfiprintf_r+0x1e4>
 8006ebe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006ec2:	f04f 0901 	mov.w	r9, #1
 8006ec6:	4623      	mov	r3, r4
 8006ec8:	469a      	mov	sl, r3
 8006eca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ece:	b10a      	cbz	r2, 8006ed4 <_svfiprintf_r+0x60>
 8006ed0:	2a25      	cmp	r2, #37	@ 0x25
 8006ed2:	d1f9      	bne.n	8006ec8 <_svfiprintf_r+0x54>
 8006ed4:	ebba 0b04 	subs.w	fp, sl, r4
 8006ed8:	d00b      	beq.n	8006ef2 <_svfiprintf_r+0x7e>
 8006eda:	465b      	mov	r3, fp
 8006edc:	4622      	mov	r2, r4
 8006ede:	4629      	mov	r1, r5
 8006ee0:	4638      	mov	r0, r7
 8006ee2:	f7ff ff6b 	bl	8006dbc <__ssputs_r>
 8006ee6:	3001      	adds	r0, #1
 8006ee8:	f000 80a7 	beq.w	800703a <_svfiprintf_r+0x1c6>
 8006eec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006eee:	445a      	add	r2, fp
 8006ef0:	9209      	str	r2, [sp, #36]	@ 0x24
 8006ef2:	f89a 3000 	ldrb.w	r3, [sl]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	f000 809f 	beq.w	800703a <_svfiprintf_r+0x1c6>
 8006efc:	2300      	movs	r3, #0
 8006efe:	f04f 32ff 	mov.w	r2, #4294967295
 8006f02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f06:	f10a 0a01 	add.w	sl, sl, #1
 8006f0a:	9304      	str	r3, [sp, #16]
 8006f0c:	9307      	str	r3, [sp, #28]
 8006f0e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006f12:	931a      	str	r3, [sp, #104]	@ 0x68
 8006f14:	4654      	mov	r4, sl
 8006f16:	2205      	movs	r2, #5
 8006f18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f1c:	484e      	ldr	r0, [pc, #312]	@ (8007058 <_svfiprintf_r+0x1e4>)
 8006f1e:	f7f9 f95f 	bl	80001e0 <memchr>
 8006f22:	9a04      	ldr	r2, [sp, #16]
 8006f24:	b9d8      	cbnz	r0, 8006f5e <_svfiprintf_r+0xea>
 8006f26:	06d0      	lsls	r0, r2, #27
 8006f28:	bf44      	itt	mi
 8006f2a:	2320      	movmi	r3, #32
 8006f2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006f30:	0711      	lsls	r1, r2, #28
 8006f32:	bf44      	itt	mi
 8006f34:	232b      	movmi	r3, #43	@ 0x2b
 8006f36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006f3a:	f89a 3000 	ldrb.w	r3, [sl]
 8006f3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f40:	d015      	beq.n	8006f6e <_svfiprintf_r+0xfa>
 8006f42:	9a07      	ldr	r2, [sp, #28]
 8006f44:	4654      	mov	r4, sl
 8006f46:	2000      	movs	r0, #0
 8006f48:	f04f 0c0a 	mov.w	ip, #10
 8006f4c:	4621      	mov	r1, r4
 8006f4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f52:	3b30      	subs	r3, #48	@ 0x30
 8006f54:	2b09      	cmp	r3, #9
 8006f56:	d94b      	bls.n	8006ff0 <_svfiprintf_r+0x17c>
 8006f58:	b1b0      	cbz	r0, 8006f88 <_svfiprintf_r+0x114>
 8006f5a:	9207      	str	r2, [sp, #28]
 8006f5c:	e014      	b.n	8006f88 <_svfiprintf_r+0x114>
 8006f5e:	eba0 0308 	sub.w	r3, r0, r8
 8006f62:	fa09 f303 	lsl.w	r3, r9, r3
 8006f66:	4313      	orrs	r3, r2
 8006f68:	9304      	str	r3, [sp, #16]
 8006f6a:	46a2      	mov	sl, r4
 8006f6c:	e7d2      	b.n	8006f14 <_svfiprintf_r+0xa0>
 8006f6e:	9b03      	ldr	r3, [sp, #12]
 8006f70:	1d19      	adds	r1, r3, #4
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	9103      	str	r1, [sp, #12]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	bfbb      	ittet	lt
 8006f7a:	425b      	neglt	r3, r3
 8006f7c:	f042 0202 	orrlt.w	r2, r2, #2
 8006f80:	9307      	strge	r3, [sp, #28]
 8006f82:	9307      	strlt	r3, [sp, #28]
 8006f84:	bfb8      	it	lt
 8006f86:	9204      	strlt	r2, [sp, #16]
 8006f88:	7823      	ldrb	r3, [r4, #0]
 8006f8a:	2b2e      	cmp	r3, #46	@ 0x2e
 8006f8c:	d10a      	bne.n	8006fa4 <_svfiprintf_r+0x130>
 8006f8e:	7863      	ldrb	r3, [r4, #1]
 8006f90:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f92:	d132      	bne.n	8006ffa <_svfiprintf_r+0x186>
 8006f94:	9b03      	ldr	r3, [sp, #12]
 8006f96:	1d1a      	adds	r2, r3, #4
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	9203      	str	r2, [sp, #12]
 8006f9c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006fa0:	3402      	adds	r4, #2
 8006fa2:	9305      	str	r3, [sp, #20]
 8006fa4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007068 <_svfiprintf_r+0x1f4>
 8006fa8:	7821      	ldrb	r1, [r4, #0]
 8006faa:	2203      	movs	r2, #3
 8006fac:	4650      	mov	r0, sl
 8006fae:	f7f9 f917 	bl	80001e0 <memchr>
 8006fb2:	b138      	cbz	r0, 8006fc4 <_svfiprintf_r+0x150>
 8006fb4:	9b04      	ldr	r3, [sp, #16]
 8006fb6:	eba0 000a 	sub.w	r0, r0, sl
 8006fba:	2240      	movs	r2, #64	@ 0x40
 8006fbc:	4082      	lsls	r2, r0
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	3401      	adds	r4, #1
 8006fc2:	9304      	str	r3, [sp, #16]
 8006fc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fc8:	4824      	ldr	r0, [pc, #144]	@ (800705c <_svfiprintf_r+0x1e8>)
 8006fca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006fce:	2206      	movs	r2, #6
 8006fd0:	f7f9 f906 	bl	80001e0 <memchr>
 8006fd4:	2800      	cmp	r0, #0
 8006fd6:	d036      	beq.n	8007046 <_svfiprintf_r+0x1d2>
 8006fd8:	4b21      	ldr	r3, [pc, #132]	@ (8007060 <_svfiprintf_r+0x1ec>)
 8006fda:	bb1b      	cbnz	r3, 8007024 <_svfiprintf_r+0x1b0>
 8006fdc:	9b03      	ldr	r3, [sp, #12]
 8006fde:	3307      	adds	r3, #7
 8006fe0:	f023 0307 	bic.w	r3, r3, #7
 8006fe4:	3308      	adds	r3, #8
 8006fe6:	9303      	str	r3, [sp, #12]
 8006fe8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fea:	4433      	add	r3, r6
 8006fec:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fee:	e76a      	b.n	8006ec6 <_svfiprintf_r+0x52>
 8006ff0:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ff4:	460c      	mov	r4, r1
 8006ff6:	2001      	movs	r0, #1
 8006ff8:	e7a8      	b.n	8006f4c <_svfiprintf_r+0xd8>
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	3401      	adds	r4, #1
 8006ffe:	9305      	str	r3, [sp, #20]
 8007000:	4619      	mov	r1, r3
 8007002:	f04f 0c0a 	mov.w	ip, #10
 8007006:	4620      	mov	r0, r4
 8007008:	f810 2b01 	ldrb.w	r2, [r0], #1
 800700c:	3a30      	subs	r2, #48	@ 0x30
 800700e:	2a09      	cmp	r2, #9
 8007010:	d903      	bls.n	800701a <_svfiprintf_r+0x1a6>
 8007012:	2b00      	cmp	r3, #0
 8007014:	d0c6      	beq.n	8006fa4 <_svfiprintf_r+0x130>
 8007016:	9105      	str	r1, [sp, #20]
 8007018:	e7c4      	b.n	8006fa4 <_svfiprintf_r+0x130>
 800701a:	fb0c 2101 	mla	r1, ip, r1, r2
 800701e:	4604      	mov	r4, r0
 8007020:	2301      	movs	r3, #1
 8007022:	e7f0      	b.n	8007006 <_svfiprintf_r+0x192>
 8007024:	ab03      	add	r3, sp, #12
 8007026:	9300      	str	r3, [sp, #0]
 8007028:	462a      	mov	r2, r5
 800702a:	4b0e      	ldr	r3, [pc, #56]	@ (8007064 <_svfiprintf_r+0x1f0>)
 800702c:	a904      	add	r1, sp, #16
 800702e:	4638      	mov	r0, r7
 8007030:	f3af 8000 	nop.w
 8007034:	1c42      	adds	r2, r0, #1
 8007036:	4606      	mov	r6, r0
 8007038:	d1d6      	bne.n	8006fe8 <_svfiprintf_r+0x174>
 800703a:	89ab      	ldrh	r3, [r5, #12]
 800703c:	065b      	lsls	r3, r3, #25
 800703e:	f53f af2d 	bmi.w	8006e9c <_svfiprintf_r+0x28>
 8007042:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007044:	e72c      	b.n	8006ea0 <_svfiprintf_r+0x2c>
 8007046:	ab03      	add	r3, sp, #12
 8007048:	9300      	str	r3, [sp, #0]
 800704a:	462a      	mov	r2, r5
 800704c:	4b05      	ldr	r3, [pc, #20]	@ (8007064 <_svfiprintf_r+0x1f0>)
 800704e:	a904      	add	r1, sp, #16
 8007050:	4638      	mov	r0, r7
 8007052:	f000 f879 	bl	8007148 <_printf_i>
 8007056:	e7ed      	b.n	8007034 <_svfiprintf_r+0x1c0>
 8007058:	080074d7 	.word	0x080074d7
 800705c:	080074e1 	.word	0x080074e1
 8007060:	00000000 	.word	0x00000000
 8007064:	08006dbd 	.word	0x08006dbd
 8007068:	080074dd 	.word	0x080074dd

0800706c <_printf_common>:
 800706c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007070:	4616      	mov	r6, r2
 8007072:	4698      	mov	r8, r3
 8007074:	688a      	ldr	r2, [r1, #8]
 8007076:	690b      	ldr	r3, [r1, #16]
 8007078:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800707c:	4293      	cmp	r3, r2
 800707e:	bfb8      	it	lt
 8007080:	4613      	movlt	r3, r2
 8007082:	6033      	str	r3, [r6, #0]
 8007084:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007088:	4607      	mov	r7, r0
 800708a:	460c      	mov	r4, r1
 800708c:	b10a      	cbz	r2, 8007092 <_printf_common+0x26>
 800708e:	3301      	adds	r3, #1
 8007090:	6033      	str	r3, [r6, #0]
 8007092:	6823      	ldr	r3, [r4, #0]
 8007094:	0699      	lsls	r1, r3, #26
 8007096:	bf42      	ittt	mi
 8007098:	6833      	ldrmi	r3, [r6, #0]
 800709a:	3302      	addmi	r3, #2
 800709c:	6033      	strmi	r3, [r6, #0]
 800709e:	6825      	ldr	r5, [r4, #0]
 80070a0:	f015 0506 	ands.w	r5, r5, #6
 80070a4:	d106      	bne.n	80070b4 <_printf_common+0x48>
 80070a6:	f104 0a19 	add.w	sl, r4, #25
 80070aa:	68e3      	ldr	r3, [r4, #12]
 80070ac:	6832      	ldr	r2, [r6, #0]
 80070ae:	1a9b      	subs	r3, r3, r2
 80070b0:	42ab      	cmp	r3, r5
 80070b2:	dc26      	bgt.n	8007102 <_printf_common+0x96>
 80070b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80070b8:	6822      	ldr	r2, [r4, #0]
 80070ba:	3b00      	subs	r3, #0
 80070bc:	bf18      	it	ne
 80070be:	2301      	movne	r3, #1
 80070c0:	0692      	lsls	r2, r2, #26
 80070c2:	d42b      	bmi.n	800711c <_printf_common+0xb0>
 80070c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80070c8:	4641      	mov	r1, r8
 80070ca:	4638      	mov	r0, r7
 80070cc:	47c8      	blx	r9
 80070ce:	3001      	adds	r0, #1
 80070d0:	d01e      	beq.n	8007110 <_printf_common+0xa4>
 80070d2:	6823      	ldr	r3, [r4, #0]
 80070d4:	6922      	ldr	r2, [r4, #16]
 80070d6:	f003 0306 	and.w	r3, r3, #6
 80070da:	2b04      	cmp	r3, #4
 80070dc:	bf02      	ittt	eq
 80070de:	68e5      	ldreq	r5, [r4, #12]
 80070e0:	6833      	ldreq	r3, [r6, #0]
 80070e2:	1aed      	subeq	r5, r5, r3
 80070e4:	68a3      	ldr	r3, [r4, #8]
 80070e6:	bf0c      	ite	eq
 80070e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070ec:	2500      	movne	r5, #0
 80070ee:	4293      	cmp	r3, r2
 80070f0:	bfc4      	itt	gt
 80070f2:	1a9b      	subgt	r3, r3, r2
 80070f4:	18ed      	addgt	r5, r5, r3
 80070f6:	2600      	movs	r6, #0
 80070f8:	341a      	adds	r4, #26
 80070fa:	42b5      	cmp	r5, r6
 80070fc:	d11a      	bne.n	8007134 <_printf_common+0xc8>
 80070fe:	2000      	movs	r0, #0
 8007100:	e008      	b.n	8007114 <_printf_common+0xa8>
 8007102:	2301      	movs	r3, #1
 8007104:	4652      	mov	r2, sl
 8007106:	4641      	mov	r1, r8
 8007108:	4638      	mov	r0, r7
 800710a:	47c8      	blx	r9
 800710c:	3001      	adds	r0, #1
 800710e:	d103      	bne.n	8007118 <_printf_common+0xac>
 8007110:	f04f 30ff 	mov.w	r0, #4294967295
 8007114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007118:	3501      	adds	r5, #1
 800711a:	e7c6      	b.n	80070aa <_printf_common+0x3e>
 800711c:	18e1      	adds	r1, r4, r3
 800711e:	1c5a      	adds	r2, r3, #1
 8007120:	2030      	movs	r0, #48	@ 0x30
 8007122:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007126:	4422      	add	r2, r4
 8007128:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800712c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007130:	3302      	adds	r3, #2
 8007132:	e7c7      	b.n	80070c4 <_printf_common+0x58>
 8007134:	2301      	movs	r3, #1
 8007136:	4622      	mov	r2, r4
 8007138:	4641      	mov	r1, r8
 800713a:	4638      	mov	r0, r7
 800713c:	47c8      	blx	r9
 800713e:	3001      	adds	r0, #1
 8007140:	d0e6      	beq.n	8007110 <_printf_common+0xa4>
 8007142:	3601      	adds	r6, #1
 8007144:	e7d9      	b.n	80070fa <_printf_common+0x8e>
	...

08007148 <_printf_i>:
 8007148:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800714c:	7e0f      	ldrb	r7, [r1, #24]
 800714e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007150:	2f78      	cmp	r7, #120	@ 0x78
 8007152:	4691      	mov	r9, r2
 8007154:	4680      	mov	r8, r0
 8007156:	460c      	mov	r4, r1
 8007158:	469a      	mov	sl, r3
 800715a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800715e:	d807      	bhi.n	8007170 <_printf_i+0x28>
 8007160:	2f62      	cmp	r7, #98	@ 0x62
 8007162:	d80a      	bhi.n	800717a <_printf_i+0x32>
 8007164:	2f00      	cmp	r7, #0
 8007166:	f000 80d1 	beq.w	800730c <_printf_i+0x1c4>
 800716a:	2f58      	cmp	r7, #88	@ 0x58
 800716c:	f000 80b8 	beq.w	80072e0 <_printf_i+0x198>
 8007170:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007174:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007178:	e03a      	b.n	80071f0 <_printf_i+0xa8>
 800717a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800717e:	2b15      	cmp	r3, #21
 8007180:	d8f6      	bhi.n	8007170 <_printf_i+0x28>
 8007182:	a101      	add	r1, pc, #4	@ (adr r1, 8007188 <_printf_i+0x40>)
 8007184:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007188:	080071e1 	.word	0x080071e1
 800718c:	080071f5 	.word	0x080071f5
 8007190:	08007171 	.word	0x08007171
 8007194:	08007171 	.word	0x08007171
 8007198:	08007171 	.word	0x08007171
 800719c:	08007171 	.word	0x08007171
 80071a0:	080071f5 	.word	0x080071f5
 80071a4:	08007171 	.word	0x08007171
 80071a8:	08007171 	.word	0x08007171
 80071ac:	08007171 	.word	0x08007171
 80071b0:	08007171 	.word	0x08007171
 80071b4:	080072f3 	.word	0x080072f3
 80071b8:	0800721f 	.word	0x0800721f
 80071bc:	080072ad 	.word	0x080072ad
 80071c0:	08007171 	.word	0x08007171
 80071c4:	08007171 	.word	0x08007171
 80071c8:	08007315 	.word	0x08007315
 80071cc:	08007171 	.word	0x08007171
 80071d0:	0800721f 	.word	0x0800721f
 80071d4:	08007171 	.word	0x08007171
 80071d8:	08007171 	.word	0x08007171
 80071dc:	080072b5 	.word	0x080072b5
 80071e0:	6833      	ldr	r3, [r6, #0]
 80071e2:	1d1a      	adds	r2, r3, #4
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	6032      	str	r2, [r6, #0]
 80071e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80071ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80071f0:	2301      	movs	r3, #1
 80071f2:	e09c      	b.n	800732e <_printf_i+0x1e6>
 80071f4:	6833      	ldr	r3, [r6, #0]
 80071f6:	6820      	ldr	r0, [r4, #0]
 80071f8:	1d19      	adds	r1, r3, #4
 80071fa:	6031      	str	r1, [r6, #0]
 80071fc:	0606      	lsls	r6, r0, #24
 80071fe:	d501      	bpl.n	8007204 <_printf_i+0xbc>
 8007200:	681d      	ldr	r5, [r3, #0]
 8007202:	e003      	b.n	800720c <_printf_i+0xc4>
 8007204:	0645      	lsls	r5, r0, #25
 8007206:	d5fb      	bpl.n	8007200 <_printf_i+0xb8>
 8007208:	f9b3 5000 	ldrsh.w	r5, [r3]
 800720c:	2d00      	cmp	r5, #0
 800720e:	da03      	bge.n	8007218 <_printf_i+0xd0>
 8007210:	232d      	movs	r3, #45	@ 0x2d
 8007212:	426d      	negs	r5, r5
 8007214:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007218:	4858      	ldr	r0, [pc, #352]	@ (800737c <_printf_i+0x234>)
 800721a:	230a      	movs	r3, #10
 800721c:	e011      	b.n	8007242 <_printf_i+0xfa>
 800721e:	6821      	ldr	r1, [r4, #0]
 8007220:	6833      	ldr	r3, [r6, #0]
 8007222:	0608      	lsls	r0, r1, #24
 8007224:	f853 5b04 	ldr.w	r5, [r3], #4
 8007228:	d402      	bmi.n	8007230 <_printf_i+0xe8>
 800722a:	0649      	lsls	r1, r1, #25
 800722c:	bf48      	it	mi
 800722e:	b2ad      	uxthmi	r5, r5
 8007230:	2f6f      	cmp	r7, #111	@ 0x6f
 8007232:	4852      	ldr	r0, [pc, #328]	@ (800737c <_printf_i+0x234>)
 8007234:	6033      	str	r3, [r6, #0]
 8007236:	bf14      	ite	ne
 8007238:	230a      	movne	r3, #10
 800723a:	2308      	moveq	r3, #8
 800723c:	2100      	movs	r1, #0
 800723e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007242:	6866      	ldr	r6, [r4, #4]
 8007244:	60a6      	str	r6, [r4, #8]
 8007246:	2e00      	cmp	r6, #0
 8007248:	db05      	blt.n	8007256 <_printf_i+0x10e>
 800724a:	6821      	ldr	r1, [r4, #0]
 800724c:	432e      	orrs	r6, r5
 800724e:	f021 0104 	bic.w	r1, r1, #4
 8007252:	6021      	str	r1, [r4, #0]
 8007254:	d04b      	beq.n	80072ee <_printf_i+0x1a6>
 8007256:	4616      	mov	r6, r2
 8007258:	fbb5 f1f3 	udiv	r1, r5, r3
 800725c:	fb03 5711 	mls	r7, r3, r1, r5
 8007260:	5dc7      	ldrb	r7, [r0, r7]
 8007262:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007266:	462f      	mov	r7, r5
 8007268:	42bb      	cmp	r3, r7
 800726a:	460d      	mov	r5, r1
 800726c:	d9f4      	bls.n	8007258 <_printf_i+0x110>
 800726e:	2b08      	cmp	r3, #8
 8007270:	d10b      	bne.n	800728a <_printf_i+0x142>
 8007272:	6823      	ldr	r3, [r4, #0]
 8007274:	07df      	lsls	r7, r3, #31
 8007276:	d508      	bpl.n	800728a <_printf_i+0x142>
 8007278:	6923      	ldr	r3, [r4, #16]
 800727a:	6861      	ldr	r1, [r4, #4]
 800727c:	4299      	cmp	r1, r3
 800727e:	bfde      	ittt	le
 8007280:	2330      	movle	r3, #48	@ 0x30
 8007282:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007286:	f106 36ff 	addle.w	r6, r6, #4294967295
 800728a:	1b92      	subs	r2, r2, r6
 800728c:	6122      	str	r2, [r4, #16]
 800728e:	f8cd a000 	str.w	sl, [sp]
 8007292:	464b      	mov	r3, r9
 8007294:	aa03      	add	r2, sp, #12
 8007296:	4621      	mov	r1, r4
 8007298:	4640      	mov	r0, r8
 800729a:	f7ff fee7 	bl	800706c <_printf_common>
 800729e:	3001      	adds	r0, #1
 80072a0:	d14a      	bne.n	8007338 <_printf_i+0x1f0>
 80072a2:	f04f 30ff 	mov.w	r0, #4294967295
 80072a6:	b004      	add	sp, #16
 80072a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072ac:	6823      	ldr	r3, [r4, #0]
 80072ae:	f043 0320 	orr.w	r3, r3, #32
 80072b2:	6023      	str	r3, [r4, #0]
 80072b4:	4832      	ldr	r0, [pc, #200]	@ (8007380 <_printf_i+0x238>)
 80072b6:	2778      	movs	r7, #120	@ 0x78
 80072b8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80072bc:	6823      	ldr	r3, [r4, #0]
 80072be:	6831      	ldr	r1, [r6, #0]
 80072c0:	061f      	lsls	r7, r3, #24
 80072c2:	f851 5b04 	ldr.w	r5, [r1], #4
 80072c6:	d402      	bmi.n	80072ce <_printf_i+0x186>
 80072c8:	065f      	lsls	r7, r3, #25
 80072ca:	bf48      	it	mi
 80072cc:	b2ad      	uxthmi	r5, r5
 80072ce:	6031      	str	r1, [r6, #0]
 80072d0:	07d9      	lsls	r1, r3, #31
 80072d2:	bf44      	itt	mi
 80072d4:	f043 0320 	orrmi.w	r3, r3, #32
 80072d8:	6023      	strmi	r3, [r4, #0]
 80072da:	b11d      	cbz	r5, 80072e4 <_printf_i+0x19c>
 80072dc:	2310      	movs	r3, #16
 80072de:	e7ad      	b.n	800723c <_printf_i+0xf4>
 80072e0:	4826      	ldr	r0, [pc, #152]	@ (800737c <_printf_i+0x234>)
 80072e2:	e7e9      	b.n	80072b8 <_printf_i+0x170>
 80072e4:	6823      	ldr	r3, [r4, #0]
 80072e6:	f023 0320 	bic.w	r3, r3, #32
 80072ea:	6023      	str	r3, [r4, #0]
 80072ec:	e7f6      	b.n	80072dc <_printf_i+0x194>
 80072ee:	4616      	mov	r6, r2
 80072f0:	e7bd      	b.n	800726e <_printf_i+0x126>
 80072f2:	6833      	ldr	r3, [r6, #0]
 80072f4:	6825      	ldr	r5, [r4, #0]
 80072f6:	6961      	ldr	r1, [r4, #20]
 80072f8:	1d18      	adds	r0, r3, #4
 80072fa:	6030      	str	r0, [r6, #0]
 80072fc:	062e      	lsls	r6, r5, #24
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	d501      	bpl.n	8007306 <_printf_i+0x1be>
 8007302:	6019      	str	r1, [r3, #0]
 8007304:	e002      	b.n	800730c <_printf_i+0x1c4>
 8007306:	0668      	lsls	r0, r5, #25
 8007308:	d5fb      	bpl.n	8007302 <_printf_i+0x1ba>
 800730a:	8019      	strh	r1, [r3, #0]
 800730c:	2300      	movs	r3, #0
 800730e:	6123      	str	r3, [r4, #16]
 8007310:	4616      	mov	r6, r2
 8007312:	e7bc      	b.n	800728e <_printf_i+0x146>
 8007314:	6833      	ldr	r3, [r6, #0]
 8007316:	1d1a      	adds	r2, r3, #4
 8007318:	6032      	str	r2, [r6, #0]
 800731a:	681e      	ldr	r6, [r3, #0]
 800731c:	6862      	ldr	r2, [r4, #4]
 800731e:	2100      	movs	r1, #0
 8007320:	4630      	mov	r0, r6
 8007322:	f7f8 ff5d 	bl	80001e0 <memchr>
 8007326:	b108      	cbz	r0, 800732c <_printf_i+0x1e4>
 8007328:	1b80      	subs	r0, r0, r6
 800732a:	6060      	str	r0, [r4, #4]
 800732c:	6863      	ldr	r3, [r4, #4]
 800732e:	6123      	str	r3, [r4, #16]
 8007330:	2300      	movs	r3, #0
 8007332:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007336:	e7aa      	b.n	800728e <_printf_i+0x146>
 8007338:	6923      	ldr	r3, [r4, #16]
 800733a:	4632      	mov	r2, r6
 800733c:	4649      	mov	r1, r9
 800733e:	4640      	mov	r0, r8
 8007340:	47d0      	blx	sl
 8007342:	3001      	adds	r0, #1
 8007344:	d0ad      	beq.n	80072a2 <_printf_i+0x15a>
 8007346:	6823      	ldr	r3, [r4, #0]
 8007348:	079b      	lsls	r3, r3, #30
 800734a:	d413      	bmi.n	8007374 <_printf_i+0x22c>
 800734c:	68e0      	ldr	r0, [r4, #12]
 800734e:	9b03      	ldr	r3, [sp, #12]
 8007350:	4298      	cmp	r0, r3
 8007352:	bfb8      	it	lt
 8007354:	4618      	movlt	r0, r3
 8007356:	e7a6      	b.n	80072a6 <_printf_i+0x15e>
 8007358:	2301      	movs	r3, #1
 800735a:	4632      	mov	r2, r6
 800735c:	4649      	mov	r1, r9
 800735e:	4640      	mov	r0, r8
 8007360:	47d0      	blx	sl
 8007362:	3001      	adds	r0, #1
 8007364:	d09d      	beq.n	80072a2 <_printf_i+0x15a>
 8007366:	3501      	adds	r5, #1
 8007368:	68e3      	ldr	r3, [r4, #12]
 800736a:	9903      	ldr	r1, [sp, #12]
 800736c:	1a5b      	subs	r3, r3, r1
 800736e:	42ab      	cmp	r3, r5
 8007370:	dcf2      	bgt.n	8007358 <_printf_i+0x210>
 8007372:	e7eb      	b.n	800734c <_printf_i+0x204>
 8007374:	2500      	movs	r5, #0
 8007376:	f104 0619 	add.w	r6, r4, #25
 800737a:	e7f5      	b.n	8007368 <_printf_i+0x220>
 800737c:	080074e8 	.word	0x080074e8
 8007380:	080074f9 	.word	0x080074f9

08007384 <memmove>:
 8007384:	4288      	cmp	r0, r1
 8007386:	b510      	push	{r4, lr}
 8007388:	eb01 0402 	add.w	r4, r1, r2
 800738c:	d902      	bls.n	8007394 <memmove+0x10>
 800738e:	4284      	cmp	r4, r0
 8007390:	4623      	mov	r3, r4
 8007392:	d807      	bhi.n	80073a4 <memmove+0x20>
 8007394:	1e43      	subs	r3, r0, #1
 8007396:	42a1      	cmp	r1, r4
 8007398:	d008      	beq.n	80073ac <memmove+0x28>
 800739a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800739e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80073a2:	e7f8      	b.n	8007396 <memmove+0x12>
 80073a4:	4402      	add	r2, r0
 80073a6:	4601      	mov	r1, r0
 80073a8:	428a      	cmp	r2, r1
 80073aa:	d100      	bne.n	80073ae <memmove+0x2a>
 80073ac:	bd10      	pop	{r4, pc}
 80073ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80073b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80073b6:	e7f7      	b.n	80073a8 <memmove+0x24>

080073b8 <_sbrk_r>:
 80073b8:	b538      	push	{r3, r4, r5, lr}
 80073ba:	4d06      	ldr	r5, [pc, #24]	@ (80073d4 <_sbrk_r+0x1c>)
 80073bc:	2300      	movs	r3, #0
 80073be:	4604      	mov	r4, r0
 80073c0:	4608      	mov	r0, r1
 80073c2:	602b      	str	r3, [r5, #0]
 80073c4:	f7f9 fc96 	bl	8000cf4 <_sbrk>
 80073c8:	1c43      	adds	r3, r0, #1
 80073ca:	d102      	bne.n	80073d2 <_sbrk_r+0x1a>
 80073cc:	682b      	ldr	r3, [r5, #0]
 80073ce:	b103      	cbz	r3, 80073d2 <_sbrk_r+0x1a>
 80073d0:	6023      	str	r3, [r4, #0]
 80073d2:	bd38      	pop	{r3, r4, r5, pc}
 80073d4:	2000a6f4 	.word	0x2000a6f4

080073d8 <_realloc_r>:
 80073d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073dc:	4607      	mov	r7, r0
 80073de:	4614      	mov	r4, r2
 80073e0:	460d      	mov	r5, r1
 80073e2:	b921      	cbnz	r1, 80073ee <_realloc_r+0x16>
 80073e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073e8:	4611      	mov	r1, r2
 80073ea:	f7ff bc5b 	b.w	8006ca4 <_malloc_r>
 80073ee:	b92a      	cbnz	r2, 80073fc <_realloc_r+0x24>
 80073f0:	f7ff fbec 	bl	8006bcc <_free_r>
 80073f4:	4625      	mov	r5, r4
 80073f6:	4628      	mov	r0, r5
 80073f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073fc:	f000 f81a 	bl	8007434 <_malloc_usable_size_r>
 8007400:	4284      	cmp	r4, r0
 8007402:	4606      	mov	r6, r0
 8007404:	d802      	bhi.n	800740c <_realloc_r+0x34>
 8007406:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800740a:	d8f4      	bhi.n	80073f6 <_realloc_r+0x1e>
 800740c:	4621      	mov	r1, r4
 800740e:	4638      	mov	r0, r7
 8007410:	f7ff fc48 	bl	8006ca4 <_malloc_r>
 8007414:	4680      	mov	r8, r0
 8007416:	b908      	cbnz	r0, 800741c <_realloc_r+0x44>
 8007418:	4645      	mov	r5, r8
 800741a:	e7ec      	b.n	80073f6 <_realloc_r+0x1e>
 800741c:	42b4      	cmp	r4, r6
 800741e:	4622      	mov	r2, r4
 8007420:	4629      	mov	r1, r5
 8007422:	bf28      	it	cs
 8007424:	4632      	movcs	r2, r6
 8007426:	f7ff fbc3 	bl	8006bb0 <memcpy>
 800742a:	4629      	mov	r1, r5
 800742c:	4638      	mov	r0, r7
 800742e:	f7ff fbcd 	bl	8006bcc <_free_r>
 8007432:	e7f1      	b.n	8007418 <_realloc_r+0x40>

08007434 <_malloc_usable_size_r>:
 8007434:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007438:	1f18      	subs	r0, r3, #4
 800743a:	2b00      	cmp	r3, #0
 800743c:	bfbc      	itt	lt
 800743e:	580b      	ldrlt	r3, [r1, r0]
 8007440:	18c0      	addlt	r0, r0, r3
 8007442:	4770      	bx	lr

08007444 <_init>:
 8007444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007446:	bf00      	nop
 8007448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800744a:	bc08      	pop	{r3}
 800744c:	469e      	mov	lr, r3
 800744e:	4770      	bx	lr

08007450 <_fini>:
 8007450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007452:	bf00      	nop
 8007454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007456:	bc08      	pop	{r3}
 8007458:	469e      	mov	lr, r3
 800745a:	4770      	bx	lr
