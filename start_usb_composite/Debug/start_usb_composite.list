
start_usb_composite.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cdc4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800cf54  0800cf54  0000df54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d004  0800d004  0000f304  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d004  0800d004  0000e004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d00c  0800d00c  0000f304  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d00c  0800d00c  0000e00c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d010  0800d010  0000e010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000304  20000000  0800d014  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f304  2**0
                  CONTENTS
 10 .bss          0000a2e4  20000304  20000304  0000f304  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000a5e8  2000a5e8  0000f304  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f304  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021e15  00000000  00000000  0000f334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000552c  00000000  00000000  00031149  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001af8  00000000  00000000  00036678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014bf  00000000  00000000  00038170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027a34  00000000  00000000  0003962f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026940  00000000  00000000  00061063  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6c3f  00000000  00000000  000879a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015e5e2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007514  00000000  00000000  0015e628  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  00165b3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000304 	.word	0x20000304
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cf3c 	.word	0x0800cf3c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000308 	.word	0x20000308
 80001cc:	0800cf3c 	.word	0x0800cf3c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80005a0:	4b17      	ldr	r3, [pc, #92]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005a2:	4a18      	ldr	r2, [pc, #96]	@ (8000604 <MX_CAN1_Init+0x68>)
 80005a4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80005a6:	4b16      	ldr	r3, [pc, #88]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005a8:	2206      	movs	r2, #6
 80005aa:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80005ac:	4b14      	ldr	r3, [pc, #80]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005b2:	4b13      	ldr	r3, [pc, #76]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80005b8:	4b11      	ldr	r3, [pc, #68]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005ba:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 80005be:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80005c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005c2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80005c6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80005c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80005ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80005d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80005da:	4b09      	ldr	r3, [pc, #36]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005dc:	2200      	movs	r2, #0
 80005de:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005e0:	4b07      	ldr	r3, [pc, #28]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80005e6:	4b06      	ldr	r3, [pc, #24]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005ec:	4804      	ldr	r0, [pc, #16]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005ee:	f001 fbb9 	bl	8001d64 <HAL_CAN_Init>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80005f8:	f000 fae2 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000320 	.word	0x20000320
 8000604:	40006400 	.word	0x40006400

08000608 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b08a      	sub	sp, #40	@ 0x28
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000610:	f107 0314 	add.w	r3, r7, #20
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a25      	ldr	r2, [pc, #148]	@ (80006bc <HAL_CAN_MspInit+0xb4>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d143      	bne.n	80006b2 <HAL_CAN_MspInit+0xaa>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800062a:	2300      	movs	r3, #0
 800062c:	613b      	str	r3, [r7, #16]
 800062e:	4b24      	ldr	r3, [pc, #144]	@ (80006c0 <HAL_CAN_MspInit+0xb8>)
 8000630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000632:	4a23      	ldr	r2, [pc, #140]	@ (80006c0 <HAL_CAN_MspInit+0xb8>)
 8000634:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000638:	6413      	str	r3, [r2, #64]	@ 0x40
 800063a:	4b21      	ldr	r3, [pc, #132]	@ (80006c0 <HAL_CAN_MspInit+0xb8>)
 800063c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800063e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000642:	613b      	str	r3, [r7, #16]
 8000644:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	60fb      	str	r3, [r7, #12]
 800064a:	4b1d      	ldr	r3, [pc, #116]	@ (80006c0 <HAL_CAN_MspInit+0xb8>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064e:	4a1c      	ldr	r2, [pc, #112]	@ (80006c0 <HAL_CAN_MspInit+0xb8>)
 8000650:	f043 0308 	orr.w	r3, r3, #8
 8000654:	6313      	str	r3, [r2, #48]	@ 0x30
 8000656:	4b1a      	ldr	r3, [pc, #104]	@ (80006c0 <HAL_CAN_MspInit+0xb8>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	f003 0308 	and.w	r3, r3, #8
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000662:	2303      	movs	r3, #3
 8000664:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000666:	2302      	movs	r3, #2
 8000668:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800066e:	2303      	movs	r3, #3
 8000670:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000672:	2309      	movs	r3, #9
 8000674:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000676:	f107 0314 	add.w	r3, r7, #20
 800067a:	4619      	mov	r1, r3
 800067c:	4811      	ldr	r0, [pc, #68]	@ (80006c4 <HAL_CAN_MspInit+0xbc>)
 800067e:	f002 ff2d 	bl	80034dc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 2, 0);
 8000682:	2200      	movs	r2, #0
 8000684:	2102      	movs	r1, #2
 8000686:	2013      	movs	r0, #19
 8000688:	f002 fb09 	bl	8002c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800068c:	2013      	movs	r0, #19
 800068e:	f002 fb22 	bl	8002cd6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000692:	2200      	movs	r2, #0
 8000694:	2100      	movs	r1, #0
 8000696:	2014      	movs	r0, #20
 8000698:	f002 fb01 	bl	8002c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800069c:	2014      	movs	r0, #20
 800069e:	f002 fb1a 	bl	8002cd6 <HAL_NVIC_EnableIRQ>
//    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
//    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 2, 0);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2102      	movs	r1, #2
 80006a6:	2016      	movs	r0, #22
 80006a8:	f002 faf9 	bl	8002c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80006ac:	2016      	movs	r0, #22
 80006ae:	f002 fb12 	bl	8002cd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80006b2:	bf00      	nop
 80006b4:	3728      	adds	r7, #40	@ 0x28
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40006400 	.word	0x40006400
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40020c00 	.word	0x40020c00

080006c8 <HAL_CAN_MspDeInit>:

void HAL_CAN_MspDeInit(CAN_HandleTypeDef* canHandle)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]

  if(canHandle->Instance==CAN1)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a0e      	ldr	r2, [pc, #56]	@ (8000710 <HAL_CAN_MspDeInit+0x48>)
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d115      	bne.n	8000706 <HAL_CAN_MspDeInit+0x3e>
  {
  /* USER CODE BEGIN CAN1_MspDeInit 0 */

  /* USER CODE END CAN1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CAN1_CLK_DISABLE();
 80006da:	4b0e      	ldr	r3, [pc, #56]	@ (8000714 <HAL_CAN_MspDeInit+0x4c>)
 80006dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006de:	4a0d      	ldr	r2, [pc, #52]	@ (8000714 <HAL_CAN_MspDeInit+0x4c>)
 80006e0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80006e4:	6413      	str	r3, [r2, #64]	@ 0x40

    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1);
 80006e6:	2103      	movs	r1, #3
 80006e8:	480b      	ldr	r0, [pc, #44]	@ (8000718 <HAL_CAN_MspDeInit+0x50>)
 80006ea:	f003 f893 	bl	8003814 <HAL_GPIO_DeInit>

    /* CAN1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(CAN1_TX_IRQn);
 80006ee:	2013      	movs	r0, #19
 80006f0:	f002 faff 	bl	8002cf2 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN1_RX0_IRQn);
 80006f4:	2014      	movs	r0, #20
 80006f6:	f002 fafc 	bl	8002cf2 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN1_RX1_IRQn);
 80006fa:	2015      	movs	r0, #21
 80006fc:	f002 faf9 	bl	8002cf2 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN1_SCE_IRQn);
 8000700:	2016      	movs	r0, #22
 8000702:	f002 faf6 	bl	8002cf2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN CAN1_MspDeInit 1 */

  /* USER CODE END CAN1_MspDeInit 1 */
  }
}
 8000706:	bf00      	nop
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40006400 	.word	0x40006400
 8000714:	40023800 	.word	0x40023800
 8000718:	40020c00 	.word	0x40020c00

0800071c <HAL_CAN_RxFifo0MsgPendingCallback>:
CAN_RxHeaderTypeDef g_CanRxHeader;
static  uint8_t g_au8UsbFrame[HID_FRAME_SIZE] = {0};
HID_FrameFIFO_t g_HIDFrameFIFO_Tranfer;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
    //memset(g_au8UsbFrame, 0, sizeof(g_au8UsbFrame));
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &g_CanRxHeader, &g_au8UsbFrame[6]) == HAL_OK)
 8000724:	4b2d      	ldr	r3, [pc, #180]	@ (80007dc <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8000726:	4a2e      	ldr	r2, [pc, #184]	@ (80007e0 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8000728:	2100      	movs	r1, #0
 800072a:	6878      	ldr	r0, [r7, #4]
 800072c:	f001 fe73 	bl	8002416 <HAL_CAN_GetRxMessage>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d14d      	bne.n	80007d2 <HAL_CAN_RxFifo0MsgPendingCallback+0xb6>
    {
    	g_CanRxHeader.Timestamp = TIM5->CNT;
 8000736:	4b2b      	ldr	r3, [pc, #172]	@ (80007e4 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 8000738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800073a:	4a29      	ldr	r2, [pc, #164]	@ (80007e0 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 800073c:	6153      	str	r3, [r2, #20]
        // Byte 0: CMD
        g_au8UsbFrame[0] = 0x03;
 800073e:	4b2a      	ldr	r3, [pc, #168]	@ (80007e8 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8000740:	2203      	movs	r2, #3
 8000742:	701a      	strb	r2, [r3, #0]
        // Byte 1: DLC (4-bit high), FrameType (4-bit low)
        g_au8UsbFrame[1] = (g_CanRxHeader.DLC << 4) | (g_CanRxHeader.IDE & 0x0F);
 8000744:	4b26      	ldr	r3, [pc, #152]	@ (80007e0 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8000746:	691b      	ldr	r3, [r3, #16]
 8000748:	b2db      	uxtb	r3, r3
 800074a:	011b      	lsls	r3, r3, #4
 800074c:	b2da      	uxtb	r2, r3
 800074e:	4b24      	ldr	r3, [pc, #144]	@ (80007e0 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8000750:	689b      	ldr	r3, [r3, #8]
 8000752:	b2db      	uxtb	r3, r3
 8000754:	f003 030f 	and.w	r3, r3, #15
 8000758:	b2db      	uxtb	r3, r3
 800075a:	4313      	orrs	r3, r2
 800075c:	b2da      	uxtb	r2, r3
 800075e:	4b22      	ldr	r3, [pc, #136]	@ (80007e8 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8000760:	705a      	strb	r2, [r3, #1]
        // Byte 2~5: CAN ID (big-endian)
        uint32_t l_u32CanID = (g_CanRxHeader.IDE == CAN_ID_STD) ? g_CanRxHeader.StdId : g_CanRxHeader.ExtId;
 8000762:	4b1f      	ldr	r3, [pc, #124]	@ (80007e0 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8000764:	689b      	ldr	r3, [r3, #8]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d102      	bne.n	8000770 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>
 800076a:	4b1d      	ldr	r3, [pc, #116]	@ (80007e0 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	e001      	b.n	8000774 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>
 8000770:	4b1b      	ldr	r3, [pc, #108]	@ (80007e0 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	60fb      	str	r3, [r7, #12]
        g_au8UsbFrame[2] = (l_u32CanID >> 24) & 0xFF;
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	0e1b      	lsrs	r3, r3, #24
 800077a:	b2da      	uxtb	r2, r3
 800077c:	4b1a      	ldr	r3, [pc, #104]	@ (80007e8 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 800077e:	709a      	strb	r2, [r3, #2]
        g_au8UsbFrame[3] = (l_u32CanID >> 16) & 0xFF;
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	0c1b      	lsrs	r3, r3, #16
 8000784:	b2da      	uxtb	r2, r3
 8000786:	4b18      	ldr	r3, [pc, #96]	@ (80007e8 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8000788:	70da      	strb	r2, [r3, #3]
        g_au8UsbFrame[4] = (l_u32CanID >> 8) & 0xFF;
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	0a1b      	lsrs	r3, r3, #8
 800078e:	b2da      	uxtb	r2, r3
 8000790:	4b15      	ldr	r3, [pc, #84]	@ (80007e8 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8000792:	711a      	strb	r2, [r3, #4]
        g_au8UsbFrame[5] = l_u32CanID & 0xFF;
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	b2da      	uxtb	r2, r3
 8000798:	4b13      	ldr	r3, [pc, #76]	@ (80007e8 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 800079a:	715a      	strb	r2, [r3, #5]

		g_au8UsbFrame[14] = (g_CanRxHeader.Timestamp >> 24) & 0xFF;
 800079c:	4b10      	ldr	r3, [pc, #64]	@ (80007e0 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 800079e:	695b      	ldr	r3, [r3, #20]
 80007a0:	0e1b      	lsrs	r3, r3, #24
 80007a2:	b2da      	uxtb	r2, r3
 80007a4:	4b10      	ldr	r3, [pc, #64]	@ (80007e8 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 80007a6:	739a      	strb	r2, [r3, #14]
		g_au8UsbFrame[15] = (g_CanRxHeader.Timestamp >> 16) & 0xFF;
 80007a8:	4b0d      	ldr	r3, [pc, #52]	@ (80007e0 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 80007aa:	695b      	ldr	r3, [r3, #20]
 80007ac:	0c1b      	lsrs	r3, r3, #16
 80007ae:	b2da      	uxtb	r2, r3
 80007b0:	4b0d      	ldr	r3, [pc, #52]	@ (80007e8 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 80007b2:	73da      	strb	r2, [r3, #15]
		g_au8UsbFrame[16]= (g_CanRxHeader.Timestamp >> 8) & 0xFF;
 80007b4:	4b0a      	ldr	r3, [pc, #40]	@ (80007e0 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 80007b6:	695b      	ldr	r3, [r3, #20]
 80007b8:	0a1b      	lsrs	r3, r3, #8
 80007ba:	b2da      	uxtb	r2, r3
 80007bc:	4b0a      	ldr	r3, [pc, #40]	@ (80007e8 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 80007be:	741a      	strb	r2, [r3, #16]
		g_au8UsbFrame[17] = (g_CanRxHeader.Timestamp ) & 0xFF;
 80007c0:	4b07      	ldr	r3, [pc, #28]	@ (80007e0 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 80007c2:	695b      	ldr	r3, [r3, #20]
 80007c4:	b2da      	uxtb	r2, r3
 80007c6:	4b08      	ldr	r3, [pc, #32]	@ (80007e8 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 80007c8:	745a      	strb	r2, [r3, #17]
        HID_Frame_Write(&g_HIDFrameFIFO_Tranfer,g_au8UsbFrame);
 80007ca:	4907      	ldr	r1, [pc, #28]	@ (80007e8 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 80007cc:	4807      	ldr	r0, [pc, #28]	@ (80007ec <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 80007ce:	f001 f915 	bl	80019fc <HID_Frame_Write>
    }
}
 80007d2:	bf00      	nop
 80007d4:	3710      	adds	r7, #16
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	2000036a 	.word	0x2000036a
 80007e0:	20000348 	.word	0x20000348
 80007e4:	40000c00 	.word	0x40000c00
 80007e8:	20000364 	.word	0x20000364
 80007ec:	20000384 	.word	0x20000384

080007f0 <Can2Usb_Tranfer>:

uint8_t Can2Usb_Tranfer(HID_FrameFIFO_t *fifo, uint8_t *dest_buf)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	6039      	str	r1, [r7, #0]
    // Kiểm tra có frame không
    if(fifo->head == fifo->tail)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	b2da      	uxtb	r2, r3
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800080a:	785b      	ldrb	r3, [r3, #1]
 800080c:	b2db      	uxtb	r3, r3
 800080e:	429a      	cmp	r2, r3
 8000810:	d101      	bne.n	8000816 <Can2Usb_Tranfer+0x26>
        return 0;  // FIFO rỗng
 8000812:	2300      	movs	r3, #0
 8000814:	e029      	b.n	800086a <Can2Usb_Tranfer+0x7a>

    // Copy frame ra buffer tạm
    memcpy(dest_buf, fifo->frame[fifo->tail], HID_FRAME_SIZE);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800081c:	785b      	ldrb	r3, [r3, #1]
 800081e:	b2db      	uxtb	r3, r3
 8000820:	015b      	lsls	r3, r3, #5
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	4413      	add	r3, r2
 8000826:	2220      	movs	r2, #32
 8000828:	4619      	mov	r1, r3
 800082a:	6838      	ldr	r0, [r7, #0]
 800082c:	f00b ff3c 	bl	800c6a8 <memcpy>

    // Thử gửi USB
    if(USBD_CUSTOM_HID_SendReport(&hUsbDevice, dest_buf, HID_FRAME_SIZE) == USBD_OK)
 8000830:	2220      	movs	r2, #32
 8000832:	6839      	ldr	r1, [r7, #0]
 8000834:	480f      	ldr	r0, [pc, #60]	@ (8000874 <Can2Usb_Tranfer+0x84>)
 8000836:	f00a f945 	bl	800aac4 <USBD_CUSTOM_HID_SendReport>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d113      	bne.n	8000868 <Can2Usb_Tranfer+0x78>
    {
        // Gửi thành công → đánh dấu frame đã đọc
        fifo->tail = (fifo->tail + 1) % HID_FRAME_BUFFER_SIZE;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8000846:	785b      	ldrb	r3, [r3, #1]
 8000848:	b2db      	uxtb	r3, r3
 800084a:	3301      	adds	r3, #1
 800084c:	425a      	negs	r2, r3
 800084e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000852:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000856:	bf58      	it	pl
 8000858:	4253      	negpl	r3, r2
 800085a:	b2da      	uxtb	r2, r3
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8000862:	705a      	strb	r2, [r3, #1]
        return 1;
 8000864:	2301      	movs	r3, #1
 8000866:	e000      	b.n	800086a <Can2Usb_Tranfer+0x7a>
    }
    else
    {
        // USB bận → không thay đổi tail, frame sẽ gửi lại lần sau
        return 2;  // Trạng thái gửi chưa thành công
 8000868:	2302      	movs	r3, #2
    }
}
 800086a:	4618      	mov	r0, r3
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	20008b5c 	.word	0x20008b5c

08000878 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	4b10      	ldr	r3, [pc, #64]	@ (80008c4 <MX_DMA_Init+0x4c>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	4a0f      	ldr	r2, [pc, #60]	@ (80008c4 <MX_DMA_Init+0x4c>)
 8000888:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800088c:	6313      	str	r3, [r2, #48]	@ 0x30
 800088e:	4b0d      	ldr	r3, [pc, #52]	@ (80008c4 <MX_DMA_Init+0x4c>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800089a:	2200      	movs	r2, #0
 800089c:	2100      	movs	r1, #0
 800089e:	200b      	movs	r0, #11
 80008a0:	f002 f9fd 	bl	8002c9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80008a4:	200b      	movs	r0, #11
 80008a6:	f002 fa16 	bl	8002cd6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2100      	movs	r1, #0
 80008ae:	202f      	movs	r0, #47	@ 0x2f
 80008b0:	f002 f9f5 	bl	8002c9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80008b4:	202f      	movs	r0, #47	@ 0x2f
 80008b6:	f002 fa0e 	bl	8002cd6 <HAL_NVIC_EnableIRQ>

}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40023800 	.word	0x40023800

080008c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08a      	sub	sp, #40	@ 0x28
 80008cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ce:	f107 0314 	add.w	r3, r7, #20
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
 80008dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]
 80008e2:	4b2d      	ldr	r3, [pc, #180]	@ (8000998 <MX_GPIO_Init+0xd0>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	4a2c      	ldr	r2, [pc, #176]	@ (8000998 <MX_GPIO_Init+0xd0>)
 80008e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ee:	4b2a      	ldr	r3, [pc, #168]	@ (8000998 <MX_GPIO_Init+0xd0>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	4b26      	ldr	r3, [pc, #152]	@ (8000998 <MX_GPIO_Init+0xd0>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	4a25      	ldr	r2, [pc, #148]	@ (8000998 <MX_GPIO_Init+0xd0>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	6313      	str	r3, [r2, #48]	@ 0x30
 800090a:	4b23      	ldr	r3, [pc, #140]	@ (8000998 <MX_GPIO_Init+0xd0>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	60bb      	str	r3, [r7, #8]
 800091a:	4b1f      	ldr	r3, [pc, #124]	@ (8000998 <MX_GPIO_Init+0xd0>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	4a1e      	ldr	r2, [pc, #120]	@ (8000998 <MX_GPIO_Init+0xd0>)
 8000920:	f043 0304 	orr.w	r3, r3, #4
 8000924:	6313      	str	r3, [r2, #48]	@ 0x30
 8000926:	4b1c      	ldr	r3, [pc, #112]	@ (8000998 <MX_GPIO_Init+0xd0>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	f003 0304 	and.w	r3, r3, #4
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	607b      	str	r3, [r7, #4]
 8000936:	4b18      	ldr	r3, [pc, #96]	@ (8000998 <MX_GPIO_Init+0xd0>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	4a17      	ldr	r2, [pc, #92]	@ (8000998 <MX_GPIO_Init+0xd0>)
 800093c:	f043 0308 	orr.w	r3, r3, #8
 8000940:	6313      	str	r3, [r2, #48]	@ 0x30
 8000942:	4b15      	ldr	r3, [pc, #84]	@ (8000998 <MX_GPIO_Init+0xd0>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	f003 0308 	and.w	r3, r3, #8
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	603b      	str	r3, [r7, #0]
 8000952:	4b11      	ldr	r3, [pc, #68]	@ (8000998 <MX_GPIO_Init+0xd0>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000956:	4a10      	ldr	r2, [pc, #64]	@ (8000998 <MX_GPIO_Init+0xd0>)
 8000958:	f043 0302 	orr.w	r3, r3, #2
 800095c:	6313      	str	r3, [r2, #48]	@ 0x30
 800095e:	4b0e      	ldr	r3, [pc, #56]	@ (8000998 <MX_GPIO_Init+0xd0>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	f003 0302 	and.w	r3, r3, #2
 8000966:	603b      	str	r3, [r7, #0]
 8000968:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	21c0      	movs	r1, #192	@ 0xc0
 800096e:	480b      	ldr	r0, [pc, #44]	@ (800099c <MX_GPIO_Init+0xd4>)
 8000970:	f003 f84c 	bl	8003a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000974:	23c0      	movs	r3, #192	@ 0xc0
 8000976:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000978:	2301      	movs	r3, #1
 800097a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000980:	2300      	movs	r3, #0
 8000982:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	4619      	mov	r1, r3
 800098a:	4804      	ldr	r0, [pc, #16]	@ (800099c <MX_GPIO_Init+0xd4>)
 800098c:	f002 fda6 	bl	80034dc <HAL_GPIO_Init>

}
 8000990:	bf00      	nop
 8000992:	3728      	adds	r7, #40	@ 0x28
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40023800 	.word	0x40023800
 800099c:	40020000 	.word	0x40020000

080009a0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009a4:	4b12      	ldr	r3, [pc, #72]	@ (80009f0 <MX_I2C1_Init+0x50>)
 80009a6:	4a13      	ldr	r2, [pc, #76]	@ (80009f4 <MX_I2C1_Init+0x54>)
 80009a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80009aa:	4b11      	ldr	r3, [pc, #68]	@ (80009f0 <MX_I2C1_Init+0x50>)
 80009ac:	4a12      	ldr	r2, [pc, #72]	@ (80009f8 <MX_I2C1_Init+0x58>)
 80009ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009b0:	4b0f      	ldr	r3, [pc, #60]	@ (80009f0 <MX_I2C1_Init+0x50>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	@ (80009f0 <MX_I2C1_Init+0x50>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009bc:	4b0c      	ldr	r3, [pc, #48]	@ (80009f0 <MX_I2C1_Init+0x50>)
 80009be:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80009c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009c4:	4b0a      	ldr	r3, [pc, #40]	@ (80009f0 <MX_I2C1_Init+0x50>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009ca:	4b09      	ldr	r3, [pc, #36]	@ (80009f0 <MX_I2C1_Init+0x50>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009d0:	4b07      	ldr	r3, [pc, #28]	@ (80009f0 <MX_I2C1_Init+0x50>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009d6:	4b06      	ldr	r3, [pc, #24]	@ (80009f0 <MX_I2C1_Init+0x50>)
 80009d8:	2200      	movs	r2, #0
 80009da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009dc:	4804      	ldr	r0, [pc, #16]	@ (80009f0 <MX_I2C1_Init+0x50>)
 80009de:	f003 f82f 	bl	8003a40 <HAL_I2C_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009e8:	f000 f8ea 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20004388 	.word	0x20004388
 80009f4:	40005400 	.word	0x40005400
 80009f8:	00061a80 	.word	0x00061a80

080009fc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08a      	sub	sp, #40	@ 0x28
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a04:	f107 0314 	add.w	r3, r7, #20
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a19      	ldr	r2, [pc, #100]	@ (8000a80 <HAL_I2C_MspInit+0x84>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d12b      	bne.n	8000a76 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	613b      	str	r3, [r7, #16]
 8000a22:	4b18      	ldr	r3, [pc, #96]	@ (8000a84 <HAL_I2C_MspInit+0x88>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a26:	4a17      	ldr	r2, [pc, #92]	@ (8000a84 <HAL_I2C_MspInit+0x88>)
 8000a28:	f043 0302 	orr.w	r3, r3, #2
 8000a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a2e:	4b15      	ldr	r3, [pc, #84]	@ (8000a84 <HAL_I2C_MspInit+0x88>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a32:	f003 0302 	and.w	r3, r3, #2
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a3a:	23c0      	movs	r3, #192	@ 0xc0
 8000a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a3e:	2312      	movs	r3, #18
 8000a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a46:	2303      	movs	r3, #3
 8000a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a4a:	2304      	movs	r3, #4
 8000a4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4e:	f107 0314 	add.w	r3, r7, #20
 8000a52:	4619      	mov	r1, r3
 8000a54:	480c      	ldr	r0, [pc, #48]	@ (8000a88 <HAL_I2C_MspInit+0x8c>)
 8000a56:	f002 fd41 	bl	80034dc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	4b09      	ldr	r3, [pc, #36]	@ (8000a84 <HAL_I2C_MspInit+0x88>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a62:	4a08      	ldr	r2, [pc, #32]	@ (8000a84 <HAL_I2C_MspInit+0x88>)
 8000a64:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a68:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a6a:	4b06      	ldr	r3, [pc, #24]	@ (8000a84 <HAL_I2C_MspInit+0x88>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a76:	bf00      	nop
 8000a78:	3728      	adds	r7, #40	@ 0x28
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40005400 	.word	0x40005400
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40020400 	.word	0x40020400

08000a8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a90:	f001 f8d2 	bl	8001c38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a94:	f000 f82a 	bl	8000aec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a98:	f7ff ff16 	bl	80008c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a9c:	f7ff feec 	bl	8000878 <MX_DMA_Init>
  MX_CAN1_Init();
 8000aa0:	f7ff fd7c 	bl	800059c <MX_CAN1_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000aa4:	f000 fc84 	bl	80013b0 <MX_USB_OTG_FS_PCD_Init>
  MX_UART5_Init();
 8000aa8:	f000 fb4e 	bl	8001148 <MX_UART5_Init>
  MX_I2C1_Init();
 8000aac:	f7ff ff78 	bl	80009a0 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000ab0:	f000 f99a 	bl	8000de8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000ab4:	f000 f9e8 	bl	8000e88 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000ab8:	f000 fa80 	bl	8000fbc <MX_TIM5_Init>
  MX_TIM4_Init();
 8000abc:	f000 fa30 	bl	8000f20 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 8000ac0:	f008 f8fc 	bl	8008cbc <MX_USB_DEVICE_Init>
  HAL_TIM_Base_Start_IT(&htim4);
 8000ac4:	4805      	ldr	r0, [pc, #20]	@ (8000adc <main+0x50>)
 8000ac6:	f005 f8c9 	bl	8005c5c <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Usb2Can_Tranfer(&g_HIDFrameFIFO_Receive);
 8000aca:	4805      	ldr	r0, [pc, #20]	@ (8000ae0 <main+0x54>)
 8000acc:	f000 ffcc 	bl	8001a68 <Usb2Can_Tranfer>
	  Can2Usb_Tranfer(&g_HIDFrameFIFO_Tranfer, g_au8UsbFrameTranfer);
 8000ad0:	4904      	ldr	r1, [pc, #16]	@ (8000ae4 <main+0x58>)
 8000ad2:	4805      	ldr	r0, [pc, #20]	@ (8000ae8 <main+0x5c>)
 8000ad4:	f7ff fe8c 	bl	80007f0 <Can2Usb_Tranfer>
	  Usb2Can_Tranfer(&g_HIDFrameFIFO_Receive);
 8000ad8:	bf00      	nop
 8000ada:	e7f6      	b.n	8000aca <main+0x3e>
 8000adc:	20004490 	.word	0x20004490
 8000ae0:	20004b50 	.word	0x20004b50
 8000ae4:	200043dc 	.word	0x200043dc
 8000ae8:	20000384 	.word	0x20000384

08000aec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b094      	sub	sp, #80	@ 0x50
 8000af0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000af2:	f107 0320 	add.w	r3, r7, #32
 8000af6:	2230      	movs	r2, #48	@ 0x30
 8000af8:	2100      	movs	r1, #0
 8000afa:	4618      	mov	r0, r3
 8000afc:	f00b fda0 	bl	800c640 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b00:	f107 030c 	add.w	r3, r7, #12
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b10:	2300      	movs	r3, #0
 8000b12:	60bb      	str	r3, [r7, #8]
 8000b14:	4b28      	ldr	r3, [pc, #160]	@ (8000bb8 <SystemClock_Config+0xcc>)
 8000b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b18:	4a27      	ldr	r2, [pc, #156]	@ (8000bb8 <SystemClock_Config+0xcc>)
 8000b1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b20:	4b25      	ldr	r3, [pc, #148]	@ (8000bb8 <SystemClock_Config+0xcc>)
 8000b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b28:	60bb      	str	r3, [r7, #8]
 8000b2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	4b22      	ldr	r3, [pc, #136]	@ (8000bbc <SystemClock_Config+0xd0>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a21      	ldr	r2, [pc, #132]	@ (8000bbc <SystemClock_Config+0xd0>)
 8000b36:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b3a:	6013      	str	r3, [r2, #0]
 8000b3c:	4b1f      	ldr	r3, [pc, #124]	@ (8000bbc <SystemClock_Config+0xd0>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b44:	607b      	str	r3, [r7, #4]
 8000b46:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b4c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b50:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b52:	2302      	movs	r3, #2
 8000b54:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b56:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b5c:	2304      	movs	r3, #4
 8000b5e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000b60:	23a8      	movs	r3, #168	@ 0xa8
 8000b62:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b64:	2302      	movs	r3, #2
 8000b66:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b68:	2307      	movs	r3, #7
 8000b6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b6c:	f107 0320 	add.w	r3, r7, #32
 8000b70:	4618      	mov	r0, r3
 8000b72:	f004 fafb 	bl	800516c <HAL_RCC_OscConfig>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b7c:	f000 f820 	bl	8000bc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b80:	230f      	movs	r3, #15
 8000b82:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b84:	2302      	movs	r3, #2
 8000b86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b8c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000b90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b92:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b96:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b98:	f107 030c 	add.w	r3, r7, #12
 8000b9c:	2105      	movs	r1, #5
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f004 fd5c 	bl	800565c <HAL_RCC_ClockConfig>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000baa:	f000 f809 	bl	8000bc0 <Error_Handler>
  }
}
 8000bae:	bf00      	nop
 8000bb0:	3750      	adds	r7, #80	@ 0x50
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	40007000 	.word	0x40007000

08000bc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc4:	b672      	cpsid	i
}
 8000bc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bc8:	bf00      	nop
 8000bca:	e7fd      	b.n	8000bc8 <Error_Handler+0x8>

08000bcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	607b      	str	r3, [r7, #4]
 8000bd6:	4b10      	ldr	r3, [pc, #64]	@ (8000c18 <HAL_MspInit+0x4c>)
 8000bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bda:	4a0f      	ldr	r2, [pc, #60]	@ (8000c18 <HAL_MspInit+0x4c>)
 8000bdc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000be0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000be2:	4b0d      	ldr	r3, [pc, #52]	@ (8000c18 <HAL_MspInit+0x4c>)
 8000be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000be6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	603b      	str	r3, [r7, #0]
 8000bf2:	4b09      	ldr	r3, [pc, #36]	@ (8000c18 <HAL_MspInit+0x4c>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf6:	4a08      	ldr	r2, [pc, #32]	@ (8000c18 <HAL_MspInit+0x4c>)
 8000bf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bfe:	4b06      	ldr	r3, [pc, #24]	@ (8000c18 <HAL_MspInit+0x4c>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c06:	603b      	str	r3, [r7, #0]
 8000c08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	40023800 	.word	0x40023800

08000c1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c20:	bf00      	nop
 8000c22:	e7fd      	b.n	8000c20 <NMI_Handler+0x4>

08000c24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <HardFault_Handler+0x4>

08000c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <MemManage_Handler+0x4>

08000c34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <BusFault_Handler+0x4>

08000c3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <UsageFault_Handler+0x4>

08000c44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr

08000c6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c72:	f001 f833 	bl	8001cdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
	...

08000c7c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8000c80:	4802      	ldr	r0, [pc, #8]	@ (8000c8c <DMA1_Stream0_IRQHandler+0x10>)
 8000c82:	f002 f9ef 	bl	8003064 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	200045c8 	.word	0x200045c8

08000c90 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000c94:	4802      	ldr	r0, [pc, #8]	@ (8000ca0 <CAN1_TX_IRQHandler+0x10>)
 8000c96:	f001 fd06 	bl	80026a6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000320 	.word	0x20000320

08000ca4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000ca8:	4802      	ldr	r0, [pc, #8]	@ (8000cb4 <CAN1_RX0_IRQHandler+0x10>)
 8000caa:	f001 fcfc 	bl	80026a6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000320 	.word	0x20000320

08000cb8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000cbc:	4802      	ldr	r0, [pc, #8]	@ (8000cc8 <CAN1_RX1_IRQHandler+0x10>)
 8000cbe:	f001 fcf2 	bl	80026a6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000320 	.word	0x20000320

08000ccc <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000cd0:	4802      	ldr	r0, [pc, #8]	@ (8000cdc <CAN1_SCE_IRQHandler+0x10>)
 8000cd2:	f001 fce8 	bl	80026a6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20000320 	.word	0x20000320

08000ce0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ce4:	4802      	ldr	r0, [pc, #8]	@ (8000cf0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000ce6:	f005 f858 	bl	8005d9a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20004400 	.word	0x20004400

08000cf4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000cf8:	4802      	ldr	r0, [pc, #8]	@ (8000d04 <TIM2_IRQHandler+0x10>)
 8000cfa:	f005 f84e 	bl	8005d9a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20004448 	.word	0x20004448

08000d08 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000d0c:	4802      	ldr	r0, [pc, #8]	@ (8000d18 <TIM4_IRQHandler+0x10>)
 8000d0e:	f005 f844 	bl	8005d9a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20004490 	.word	0x20004490

08000d1c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8000d20:	4802      	ldr	r0, [pc, #8]	@ (8000d2c <DMA1_Stream7_IRQHandler+0x10>)
 8000d22:	f002 f99f 	bl	8003064 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20004568 	.word	0x20004568

08000d30 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000d34:	4802      	ldr	r0, [pc, #8]	@ (8000d40 <UART5_IRQHandler+0x10>)
 8000d36:	f005 fd11 	bl	800675c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20004520 	.word	0x20004520

08000d44 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000d48:	4802      	ldr	r0, [pc, #8]	@ (8000d54 <OTG_FS_IRQHandler+0x10>)
 8000d4a:	f003 f901 	bl	8003f50 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20004628 	.word	0x20004628

08000d58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b086      	sub	sp, #24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d60:	4a14      	ldr	r2, [pc, #80]	@ (8000db4 <_sbrk+0x5c>)
 8000d62:	4b15      	ldr	r3, [pc, #84]	@ (8000db8 <_sbrk+0x60>)
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d6c:	4b13      	ldr	r3, [pc, #76]	@ (8000dbc <_sbrk+0x64>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d102      	bne.n	8000d7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d74:	4b11      	ldr	r3, [pc, #68]	@ (8000dbc <_sbrk+0x64>)
 8000d76:	4a12      	ldr	r2, [pc, #72]	@ (8000dc0 <_sbrk+0x68>)
 8000d78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d7a:	4b10      	ldr	r3, [pc, #64]	@ (8000dbc <_sbrk+0x64>)
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4413      	add	r3, r2
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d207      	bcs.n	8000d98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d88:	f00b fc62 	bl	800c650 <__errno>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	220c      	movs	r2, #12
 8000d90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d92:	f04f 33ff 	mov.w	r3, #4294967295
 8000d96:	e009      	b.n	8000dac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d98:	4b08      	ldr	r3, [pc, #32]	@ (8000dbc <_sbrk+0x64>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d9e:	4b07      	ldr	r3, [pc, #28]	@ (8000dbc <_sbrk+0x64>)
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4413      	add	r3, r2
 8000da6:	4a05      	ldr	r2, [pc, #20]	@ (8000dbc <_sbrk+0x64>)
 8000da8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000daa:	68fb      	ldr	r3, [r7, #12]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3718      	adds	r7, #24
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20020000 	.word	0x20020000
 8000db8:	00000400 	.word	0x00000400
 8000dbc:	200043fc 	.word	0x200043fc
 8000dc0:	2000a5e8 	.word	0x2000a5e8

08000dc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dc8:	4b06      	ldr	r3, [pc, #24]	@ (8000de4 <SystemInit+0x20>)
 8000dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dce:	4a05      	ldr	r2, [pc, #20]	@ (8000de4 <SystemInit+0x20>)
 8000dd0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dd4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dee:	f107 0308 	add.w	r3, r7, #8
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dfc:	463b      	mov	r3, r7
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e04:	4b1e      	ldr	r3, [pc, #120]	@ (8000e80 <MX_TIM1_Init+0x98>)
 8000e06:	4a1f      	ldr	r2, [pc, #124]	@ (8000e84 <MX_TIM1_Init+0x9c>)
 8000e08:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 8000e0a:	4b1d      	ldr	r3, [pc, #116]	@ (8000e80 <MX_TIM1_Init+0x98>)
 8000e0c:	22a7      	movs	r2, #167	@ 0xa7
 8000e0e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e10:	4b1b      	ldr	r3, [pc, #108]	@ (8000e80 <MX_TIM1_Init+0x98>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000e16:	4b1a      	ldr	r3, [pc, #104]	@ (8000e80 <MX_TIM1_Init+0x98>)
 8000e18:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e1c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e1e:	4b18      	ldr	r3, [pc, #96]	@ (8000e80 <MX_TIM1_Init+0x98>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e24:	4b16      	ldr	r3, [pc, #88]	@ (8000e80 <MX_TIM1_Init+0x98>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e2a:	4b15      	ldr	r3, [pc, #84]	@ (8000e80 <MX_TIM1_Init+0x98>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e30:	4813      	ldr	r0, [pc, #76]	@ (8000e80 <MX_TIM1_Init+0x98>)
 8000e32:	f004 fe33 	bl	8005a9c <HAL_TIM_Base_Init>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000e3c:	f7ff fec0 	bl	8000bc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e44:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e46:	f107 0308 	add.w	r3, r7, #8
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	480c      	ldr	r0, [pc, #48]	@ (8000e80 <MX_TIM1_Init+0x98>)
 8000e4e:	f005 f894 	bl	8005f7a <HAL_TIM_ConfigClockSource>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000e58:	f7ff feb2 	bl	8000bc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e60:	2300      	movs	r3, #0
 8000e62:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e64:	463b      	mov	r3, r7
 8000e66:	4619      	mov	r1, r3
 8000e68:	4805      	ldr	r0, [pc, #20]	@ (8000e80 <MX_TIM1_Init+0x98>)
 8000e6a:	f005 fab5 	bl	80063d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000e74:	f7ff fea4 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e78:	bf00      	nop
 8000e7a:	3718      	adds	r7, #24
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20004400 	.word	0x20004400
 8000e84:	40010000 	.word	0x40010000

08000e88 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e8e:	f107 0308 	add.w	r3, r7, #8
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	609a      	str	r2, [r3, #8]
 8000e9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e9c:	463b      	mov	r3, r7
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ea4:	4b1d      	ldr	r3, [pc, #116]	@ (8000f1c <MX_TIM2_Init+0x94>)
 8000ea6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000eaa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8000eac:	4b1b      	ldr	r3, [pc, #108]	@ (8000f1c <MX_TIM2_Init+0x94>)
 8000eae:	2253      	movs	r2, #83	@ 0x53
 8000eb0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f1c <MX_TIM2_Init+0x94>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3000;
 8000eb8:	4b18      	ldr	r3, [pc, #96]	@ (8000f1c <MX_TIM2_Init+0x94>)
 8000eba:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000ebe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ec0:	4b16      	ldr	r3, [pc, #88]	@ (8000f1c <MX_TIM2_Init+0x94>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ec6:	4b15      	ldr	r3, [pc, #84]	@ (8000f1c <MX_TIM2_Init+0x94>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ecc:	4813      	ldr	r0, [pc, #76]	@ (8000f1c <MX_TIM2_Init+0x94>)
 8000ece:	f004 fde5 	bl	8005a9c <HAL_TIM_Base_Init>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ed8:	f7ff fe72 	bl	8000bc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000edc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ee0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ee2:	f107 0308 	add.w	r3, r7, #8
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	480c      	ldr	r0, [pc, #48]	@ (8000f1c <MX_TIM2_Init+0x94>)
 8000eea:	f005 f846 	bl	8005f7a <HAL_TIM_ConfigClockSource>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ef4:	f7ff fe64 	bl	8000bc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000efc:	2300      	movs	r3, #0
 8000efe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f00:	463b      	mov	r3, r7
 8000f02:	4619      	mov	r1, r3
 8000f04:	4805      	ldr	r0, [pc, #20]	@ (8000f1c <MX_TIM2_Init+0x94>)
 8000f06:	f005 fa67 	bl	80063d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f10:	f7ff fe56 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f14:	bf00      	nop
 8000f16:	3718      	adds	r7, #24
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20004448 	.word	0x20004448

08000f20 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f26:	f107 0308 	add.w	r3, r7, #8
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f34:	463b      	mov	r3, r7
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f3c:	4b1d      	ldr	r3, [pc, #116]	@ (8000fb4 <MX_TIM4_Init+0x94>)
 8000f3e:	4a1e      	ldr	r2, [pc, #120]	@ (8000fb8 <MX_TIM4_Init+0x98>)
 8000f40:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84;
 8000f42:	4b1c      	ldr	r3, [pc, #112]	@ (8000fb4 <MX_TIM4_Init+0x94>)
 8000f44:	2254      	movs	r2, #84	@ 0x54
 8000f46:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f48:	4b1a      	ldr	r3, [pc, #104]	@ (8000fb4 <MX_TIM4_Init+0x94>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000f4e:	4b19      	ldr	r3, [pc, #100]	@ (8000fb4 <MX_TIM4_Init+0x94>)
 8000f50:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f54:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f56:	4b17      	ldr	r3, [pc, #92]	@ (8000fb4 <MX_TIM4_Init+0x94>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f5c:	4b15      	ldr	r3, [pc, #84]	@ (8000fb4 <MX_TIM4_Init+0x94>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000f62:	4814      	ldr	r0, [pc, #80]	@ (8000fb4 <MX_TIM4_Init+0x94>)
 8000f64:	f004 fd9a 	bl	8005a9c <HAL_TIM_Base_Init>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000f6e:	f7ff fe27 	bl	8000bc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f76:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000f78:	f107 0308 	add.w	r3, r7, #8
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	480d      	ldr	r0, [pc, #52]	@ (8000fb4 <MX_TIM4_Init+0x94>)
 8000f80:	f004 fffb 	bl	8005f7a <HAL_TIM_ConfigClockSource>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000f8a:	f7ff fe19 	bl	8000bc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f92:	2300      	movs	r3, #0
 8000f94:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f96:	463b      	mov	r3, r7
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4806      	ldr	r0, [pc, #24]	@ (8000fb4 <MX_TIM4_Init+0x94>)
 8000f9c:	f005 fa1c 	bl	80063d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000fa6:	f7ff fe0b 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000faa:	bf00      	nop
 8000fac:	3718      	adds	r7, #24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20004490 	.word	0x20004490
 8000fb8:	40000800 	.word	0x40000800

08000fbc <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fc2:	f107 0308 	add.w	r3, r7, #8
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	605a      	str	r2, [r3, #4]
 8000fcc:	609a      	str	r2, [r3, #8]
 8000fce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fd0:	463b      	mov	r3, r7
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000fd8:	4b1d      	ldr	r3, [pc, #116]	@ (8001050 <MX_TIM5_Init+0x94>)
 8000fda:	4a1e      	ldr	r2, [pc, #120]	@ (8001054 <MX_TIM5_Init+0x98>)
 8000fdc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 8399;
 8000fde:	4b1c      	ldr	r3, [pc, #112]	@ (8001050 <MX_TIM5_Init+0x94>)
 8000fe0:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000fe4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe6:	4b1a      	ldr	r3, [pc, #104]	@ (8001050 <MX_TIM5_Init+0x94>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xffffffff;
 8000fec:	4b18      	ldr	r3, [pc, #96]	@ (8001050 <MX_TIM5_Init+0x94>)
 8000fee:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ff4:	4b16      	ldr	r3, [pc, #88]	@ (8001050 <MX_TIM5_Init+0x94>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ffa:	4b15      	ldr	r3, [pc, #84]	@ (8001050 <MX_TIM5_Init+0x94>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001000:	4813      	ldr	r0, [pc, #76]	@ (8001050 <MX_TIM5_Init+0x94>)
 8001002:	f004 fd4b 	bl	8005a9c <HAL_TIM_Base_Init>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 800100c:	f7ff fdd8 	bl	8000bc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001010:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001014:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001016:	f107 0308 	add.w	r3, r7, #8
 800101a:	4619      	mov	r1, r3
 800101c:	480c      	ldr	r0, [pc, #48]	@ (8001050 <MX_TIM5_Init+0x94>)
 800101e:	f004 ffac 	bl	8005f7a <HAL_TIM_ConfigClockSource>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001028:	f7ff fdca 	bl	8000bc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800102c:	2300      	movs	r3, #0
 800102e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001030:	2300      	movs	r3, #0
 8001032:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001034:	463b      	mov	r3, r7
 8001036:	4619      	mov	r1, r3
 8001038:	4805      	ldr	r0, [pc, #20]	@ (8001050 <MX_TIM5_Init+0x94>)
 800103a:	f005 f9cd 	bl	80063d8 <HAL_TIMEx_MasterConfigSynchronization>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001044:	f7ff fdbc 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001048:	bf00      	nop
 800104a:	3718      	adds	r7, #24
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	200044d8 	.word	0x200044d8
 8001054:	40000c00 	.word	0x40000c00

08001058 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a34      	ldr	r2, [pc, #208]	@ (8001138 <HAL_TIM_Base_MspInit+0xe0>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d116      	bne.n	8001098 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]
 800106e:	4b33      	ldr	r3, [pc, #204]	@ (800113c <HAL_TIM_Base_MspInit+0xe4>)
 8001070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001072:	4a32      	ldr	r2, [pc, #200]	@ (800113c <HAL_TIM_Base_MspInit+0xe4>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	6453      	str	r3, [r2, #68]	@ 0x44
 800107a:	4b30      	ldr	r3, [pc, #192]	@ (800113c <HAL_TIM_Base_MspInit+0xe4>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	617b      	str	r3, [r7, #20]
 8001084:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 3, 0);
 8001086:	2200      	movs	r2, #0
 8001088:	2103      	movs	r1, #3
 800108a:	2019      	movs	r0, #25
 800108c:	f001 fe07 	bl	8002c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001090:	2019      	movs	r0, #25
 8001092:	f001 fe20 	bl	8002cd6 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001096:	e04a      	b.n	800112e <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM2)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010a0:	d116      	bne.n	80010d0 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	613b      	str	r3, [r7, #16]
 80010a6:	4b25      	ldr	r3, [pc, #148]	@ (800113c <HAL_TIM_Base_MspInit+0xe4>)
 80010a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010aa:	4a24      	ldr	r2, [pc, #144]	@ (800113c <HAL_TIM_Base_MspInit+0xe4>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80010b2:	4b22      	ldr	r3, [pc, #136]	@ (800113c <HAL_TIM_Base_MspInit+0xe4>)
 80010b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 80010be:	2200      	movs	r2, #0
 80010c0:	2103      	movs	r1, #3
 80010c2:	201c      	movs	r0, #28
 80010c4:	f001 fdeb 	bl	8002c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010c8:	201c      	movs	r0, #28
 80010ca:	f001 fe04 	bl	8002cd6 <HAL_NVIC_EnableIRQ>
}
 80010ce:	e02e      	b.n	800112e <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM4)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a1a      	ldr	r2, [pc, #104]	@ (8001140 <HAL_TIM_Base_MspInit+0xe8>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d116      	bne.n	8001108 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	4b17      	ldr	r3, [pc, #92]	@ (800113c <HAL_TIM_Base_MspInit+0xe4>)
 80010e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e2:	4a16      	ldr	r2, [pc, #88]	@ (800113c <HAL_TIM_Base_MspInit+0xe4>)
 80010e4:	f043 0304 	orr.w	r3, r3, #4
 80010e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80010ea:	4b14      	ldr	r3, [pc, #80]	@ (800113c <HAL_TIM_Base_MspInit+0xe4>)
 80010ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ee:	f003 0304 	and.w	r3, r3, #4
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 6, 0);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2106      	movs	r1, #6
 80010fa:	201e      	movs	r0, #30
 80010fc:	f001 fdcf 	bl	8002c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001100:	201e      	movs	r0, #30
 8001102:	f001 fde8 	bl	8002cd6 <HAL_NVIC_EnableIRQ>
}
 8001106:	e012      	b.n	800112e <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM5)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a0d      	ldr	r2, [pc, #52]	@ (8001144 <HAL_TIM_Base_MspInit+0xec>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d10d      	bne.n	800112e <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	60bb      	str	r3, [r7, #8]
 8001116:	4b09      	ldr	r3, [pc, #36]	@ (800113c <HAL_TIM_Base_MspInit+0xe4>)
 8001118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111a:	4a08      	ldr	r2, [pc, #32]	@ (800113c <HAL_TIM_Base_MspInit+0xe4>)
 800111c:	f043 0308 	orr.w	r3, r3, #8
 8001120:	6413      	str	r3, [r2, #64]	@ 0x40
 8001122:	4b06      	ldr	r3, [pc, #24]	@ (800113c <HAL_TIM_Base_MspInit+0xe4>)
 8001124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001126:	f003 0308 	and.w	r3, r3, #8
 800112a:	60bb      	str	r3, [r7, #8]
 800112c:	68bb      	ldr	r3, [r7, #8]
}
 800112e:	bf00      	nop
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40010000 	.word	0x40010000
 800113c:	40023800 	.word	0x40023800
 8001140:	40000800 	.word	0x40000800
 8001144:	40000c00 	.word	0x40000c00

08001148 <MX_UART5_Init>:
DMA_HandleTypeDef hdma_uart5_tx;
DMA_HandleTypeDef hdma_uart5_rx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800114c:	4b11      	ldr	r3, [pc, #68]	@ (8001194 <MX_UART5_Init+0x4c>)
 800114e:	4a12      	ldr	r2, [pc, #72]	@ (8001198 <MX_UART5_Init+0x50>)
 8001150:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001152:	4b10      	ldr	r3, [pc, #64]	@ (8001194 <MX_UART5_Init+0x4c>)
 8001154:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001158:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800115a:	4b0e      	ldr	r3, [pc, #56]	@ (8001194 <MX_UART5_Init+0x4c>)
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001160:	4b0c      	ldr	r3, [pc, #48]	@ (8001194 <MX_UART5_Init+0x4c>)
 8001162:	2200      	movs	r2, #0
 8001164:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001166:	4b0b      	ldr	r3, [pc, #44]	@ (8001194 <MX_UART5_Init+0x4c>)
 8001168:	2200      	movs	r2, #0
 800116a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800116c:	4b09      	ldr	r3, [pc, #36]	@ (8001194 <MX_UART5_Init+0x4c>)
 800116e:	220c      	movs	r2, #12
 8001170:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001172:	4b08      	ldr	r3, [pc, #32]	@ (8001194 <MX_UART5_Init+0x4c>)
 8001174:	2200      	movs	r2, #0
 8001176:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001178:	4b06      	ldr	r3, [pc, #24]	@ (8001194 <MX_UART5_Init+0x4c>)
 800117a:	2200      	movs	r2, #0
 800117c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800117e:	4805      	ldr	r0, [pc, #20]	@ (8001194 <MX_UART5_Init+0x4c>)
 8001180:	f005 f9ba 	bl	80064f8 <HAL_UART_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800118a:	f7ff fd19 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */
 // HAL_UART_Receive_IT(&huart5, &uart5_rx_byte, UART5_RX_BUF_LEN);
  /* USER CODE END UART5_Init 2 */

}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20004520 	.word	0x20004520
 8001198:	40005000 	.word	0x40005000

0800119c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08a      	sub	sp, #40	@ 0x28
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a5c      	ldr	r2, [pc, #368]	@ (800132c <HAL_UART_MspInit+0x190>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	f040 80b1 	bne.w	8001322 <HAL_UART_MspInit+0x186>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80011c0:	2300      	movs	r3, #0
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	4b5a      	ldr	r3, [pc, #360]	@ (8001330 <HAL_UART_MspInit+0x194>)
 80011c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c8:	4a59      	ldr	r2, [pc, #356]	@ (8001330 <HAL_UART_MspInit+0x194>)
 80011ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80011ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80011d0:	4b57      	ldr	r3, [pc, #348]	@ (8001330 <HAL_UART_MspInit+0x194>)
 80011d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011d8:	613b      	str	r3, [r7, #16]
 80011da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011dc:	2300      	movs	r3, #0
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	4b53      	ldr	r3, [pc, #332]	@ (8001330 <HAL_UART_MspInit+0x194>)
 80011e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e4:	4a52      	ldr	r2, [pc, #328]	@ (8001330 <HAL_UART_MspInit+0x194>)
 80011e6:	f043 0304 	orr.w	r3, r3, #4
 80011ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ec:	4b50      	ldr	r3, [pc, #320]	@ (8001330 <HAL_UART_MspInit+0x194>)
 80011ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f0:	f003 0304 	and.w	r3, r3, #4
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011f8:	2300      	movs	r3, #0
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	4b4c      	ldr	r3, [pc, #304]	@ (8001330 <HAL_UART_MspInit+0x194>)
 80011fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001200:	4a4b      	ldr	r2, [pc, #300]	@ (8001330 <HAL_UART_MspInit+0x194>)
 8001202:	f043 0308 	orr.w	r3, r3, #8
 8001206:	6313      	str	r3, [r2, #48]	@ 0x30
 8001208:	4b49      	ldr	r3, [pc, #292]	@ (8001330 <HAL_UART_MspInit+0x194>)
 800120a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120c:	f003 0308 	and.w	r3, r3, #8
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001214:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001218:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121a:	2302      	movs	r3, #2
 800121c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001222:	2303      	movs	r3, #3
 8001224:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001226:	2308      	movs	r3, #8
 8001228:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800122a:	f107 0314 	add.w	r3, r7, #20
 800122e:	4619      	mov	r1, r3
 8001230:	4840      	ldr	r0, [pc, #256]	@ (8001334 <HAL_UART_MspInit+0x198>)
 8001232:	f002 f953 	bl	80034dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001236:	2304      	movs	r3, #4
 8001238:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123a:	2302      	movs	r3, #2
 800123c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001242:	2303      	movs	r3, #3
 8001244:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001246:	2308      	movs	r3, #8
 8001248:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800124a:	f107 0314 	add.w	r3, r7, #20
 800124e:	4619      	mov	r1, r3
 8001250:	4839      	ldr	r0, [pc, #228]	@ (8001338 <HAL_UART_MspInit+0x19c>)
 8001252:	f002 f943 	bl	80034dc <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8001256:	4b39      	ldr	r3, [pc, #228]	@ (800133c <HAL_UART_MspInit+0x1a0>)
 8001258:	4a39      	ldr	r2, [pc, #228]	@ (8001340 <HAL_UART_MspInit+0x1a4>)
 800125a:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 800125c:	4b37      	ldr	r3, [pc, #220]	@ (800133c <HAL_UART_MspInit+0x1a0>)
 800125e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001262:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001264:	4b35      	ldr	r3, [pc, #212]	@ (800133c <HAL_UART_MspInit+0x1a0>)
 8001266:	2240      	movs	r2, #64	@ 0x40
 8001268:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800126a:	4b34      	ldr	r3, [pc, #208]	@ (800133c <HAL_UART_MspInit+0x1a0>)
 800126c:	2200      	movs	r2, #0
 800126e:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001270:	4b32      	ldr	r3, [pc, #200]	@ (800133c <HAL_UART_MspInit+0x1a0>)
 8001272:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001276:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001278:	4b30      	ldr	r3, [pc, #192]	@ (800133c <HAL_UART_MspInit+0x1a0>)
 800127a:	2200      	movs	r2, #0
 800127c:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800127e:	4b2f      	ldr	r3, [pc, #188]	@ (800133c <HAL_UART_MspInit+0x1a0>)
 8001280:	2200      	movs	r2, #0
 8001282:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8001284:	4b2d      	ldr	r3, [pc, #180]	@ (800133c <HAL_UART_MspInit+0x1a0>)
 8001286:	2200      	movs	r2, #0
 8001288:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800128a:	4b2c      	ldr	r3, [pc, #176]	@ (800133c <HAL_UART_MspInit+0x1a0>)
 800128c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001290:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001292:	4b2a      	ldr	r3, [pc, #168]	@ (800133c <HAL_UART_MspInit+0x1a0>)
 8001294:	2200      	movs	r2, #0
 8001296:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8001298:	4828      	ldr	r0, [pc, #160]	@ (800133c <HAL_UART_MspInit+0x1a0>)
 800129a:	f001 fd45 	bl	8002d28 <HAL_DMA_Init>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 80012a4:	f7ff fc8c 	bl	8000bc0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	4a24      	ldr	r2, [pc, #144]	@ (800133c <HAL_UART_MspInit+0x1a0>)
 80012ac:	639a      	str	r2, [r3, #56]	@ 0x38
 80012ae:	4a23      	ldr	r2, [pc, #140]	@ (800133c <HAL_UART_MspInit+0x1a0>)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 80012b4:	4b23      	ldr	r3, [pc, #140]	@ (8001344 <HAL_UART_MspInit+0x1a8>)
 80012b6:	4a24      	ldr	r2, [pc, #144]	@ (8001348 <HAL_UART_MspInit+0x1ac>)
 80012b8:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 80012ba:	4b22      	ldr	r3, [pc, #136]	@ (8001344 <HAL_UART_MspInit+0x1a8>)
 80012bc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80012c0:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012c2:	4b20      	ldr	r3, [pc, #128]	@ (8001344 <HAL_UART_MspInit+0x1a8>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001344 <HAL_UART_MspInit+0x1a8>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001344 <HAL_UART_MspInit+0x1a8>)
 80012d0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012d4:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001344 <HAL_UART_MspInit+0x1a8>)
 80012d8:	2200      	movs	r2, #0
 80012da:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012dc:	4b19      	ldr	r3, [pc, #100]	@ (8001344 <HAL_UART_MspInit+0x1a8>)
 80012de:	2200      	movs	r2, #0
 80012e0:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 80012e2:	4b18      	ldr	r3, [pc, #96]	@ (8001344 <HAL_UART_MspInit+0x1a8>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80012e8:	4b16      	ldr	r3, [pc, #88]	@ (8001344 <HAL_UART_MspInit+0x1a8>)
 80012ea:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80012ee:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012f0:	4b14      	ldr	r3, [pc, #80]	@ (8001344 <HAL_UART_MspInit+0x1a8>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80012f6:	4813      	ldr	r0, [pc, #76]	@ (8001344 <HAL_UART_MspInit+0x1a8>)
 80012f8:	f001 fd16 	bl	8002d28 <HAL_DMA_Init>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 8001302:	f7ff fc5d 	bl	8000bc0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a0e      	ldr	r2, [pc, #56]	@ (8001344 <HAL_UART_MspInit+0x1a8>)
 800130a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800130c:	4a0d      	ldr	r2, [pc, #52]	@ (8001344 <HAL_UART_MspInit+0x1a8>)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 2, 0);
 8001312:	2200      	movs	r2, #0
 8001314:	2102      	movs	r1, #2
 8001316:	2035      	movs	r0, #53	@ 0x35
 8001318:	f001 fcc1 	bl	8002c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800131c:	2035      	movs	r0, #53	@ 0x35
 800131e:	f001 fcda 	bl	8002cd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8001322:	bf00      	nop
 8001324:	3728      	adds	r7, #40	@ 0x28
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40005000 	.word	0x40005000
 8001330:	40023800 	.word	0x40023800
 8001334:	40020800 	.word	0x40020800
 8001338:	40020c00 	.word	0x40020c00
 800133c:	20004568 	.word	0x20004568
 8001340:	400260b8 	.word	0x400260b8
 8001344:	200045c8 	.word	0x200045c8
 8001348:	40026010 	.word	0x40026010

0800134c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==UART5)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a11      	ldr	r2, [pc, #68]	@ (80013a0 <HAL_UART_MspDeInit+0x54>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d11b      	bne.n	8001396 <HAL_UART_MspDeInit+0x4a>
  {
  /* USER CODE BEGIN UART5_MspDeInit 0 */

  /* USER CODE END UART5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART5_CLK_DISABLE();
 800135e:	4b11      	ldr	r3, [pc, #68]	@ (80013a4 <HAL_UART_MspDeInit+0x58>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001362:	4a10      	ldr	r2, [pc, #64]	@ (80013a4 <HAL_UART_MspDeInit+0x58>)
 8001364:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001368:	6413      	str	r3, [r2, #64]	@ 0x40

    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12);
 800136a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800136e:	480e      	ldr	r0, [pc, #56]	@ (80013a8 <HAL_UART_MspDeInit+0x5c>)
 8001370:	f002 fa50 	bl	8003814 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_2);
 8001374:	2104      	movs	r1, #4
 8001376:	480d      	ldr	r0, [pc, #52]	@ (80013ac <HAL_UART_MspDeInit+0x60>)
 8001378:	f002 fa4c 	bl	8003814 <HAL_GPIO_DeInit>

    /* UART5 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001380:	4618      	mov	r0, r3
 8001382:	f001 fd7f 	bl	8002e84 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800138a:	4618      	mov	r0, r3
 800138c:	f001 fd7a 	bl	8002e84 <HAL_DMA_DeInit>

    /* UART5 interrupt Deinit */
    HAL_NVIC_DisableIRQ(UART5_IRQn);
 8001390:	2035      	movs	r0, #53	@ 0x35
 8001392:	f001 fcae 	bl	8002cf2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN UART5_MspDeInit 1 */

  /* USER CODE END UART5_MspDeInit 1 */
  }
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40005000 	.word	0x40005000
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40020800 	.word	0x40020800
 80013ac:	40020c00 	.word	0x40020c00

080013b0 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80013b4:	4b14      	ldr	r3, [pc, #80]	@ (8001408 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013b6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80013ba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80013bc:	4b12      	ldr	r3, [pc, #72]	@ (8001408 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013be:	2204      	movs	r2, #4
 80013c0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80013c2:	4b11      	ldr	r3, [pc, #68]	@ (8001408 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013c4:	2202      	movs	r2, #2
 80013c6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80013c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001408 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80013ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001408 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013d0:	2202      	movs	r2, #2
 80013d2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80013d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001408 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80013da:	4b0b      	ldr	r3, [pc, #44]	@ (8001408 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013dc:	2200      	movs	r2, #0
 80013de:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80013e0:	4b09      	ldr	r3, [pc, #36]	@ (8001408 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80013e6:	4b08      	ldr	r3, [pc, #32]	@ (8001408 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80013ec:	4b06      	ldr	r3, [pc, #24]	@ (8001408 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80013f2:	4805      	ldr	r0, [pc, #20]	@ (8001408 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013f4:	f002 fc68 	bl	8003cc8 <HAL_PCD_Init>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80013fe:	f7ff fbdf 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20004628 	.word	0x20004628

0800140c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08a      	sub	sp, #40	@ 0x28
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001414:	f107 0314 	add.w	r3, r7, #20
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800142c:	d13a      	bne.n	80014a4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	613b      	str	r3, [r7, #16]
 8001432:	4b1e      	ldr	r3, [pc, #120]	@ (80014ac <HAL_PCD_MspInit+0xa0>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001436:	4a1d      	ldr	r2, [pc, #116]	@ (80014ac <HAL_PCD_MspInit+0xa0>)
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	6313      	str	r3, [r2, #48]	@ 0x30
 800143e:	4b1b      	ldr	r3, [pc, #108]	@ (80014ac <HAL_PCD_MspInit+0xa0>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	613b      	str	r3, [r7, #16]
 8001448:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800144a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800144e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001450:	2302      	movs	r3, #2
 8001452:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001458:	2303      	movs	r3, #3
 800145a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800145c:	230a      	movs	r3, #10
 800145e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	4619      	mov	r1, r3
 8001466:	4812      	ldr	r0, [pc, #72]	@ (80014b0 <HAL_PCD_MspInit+0xa4>)
 8001468:	f002 f838 	bl	80034dc <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800146c:	4b0f      	ldr	r3, [pc, #60]	@ (80014ac <HAL_PCD_MspInit+0xa0>)
 800146e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001470:	4a0e      	ldr	r2, [pc, #56]	@ (80014ac <HAL_PCD_MspInit+0xa0>)
 8001472:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001476:	6353      	str	r3, [r2, #52]	@ 0x34
 8001478:	2300      	movs	r3, #0
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	4b0b      	ldr	r3, [pc, #44]	@ (80014ac <HAL_PCD_MspInit+0xa0>)
 800147e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001480:	4a0a      	ldr	r2, [pc, #40]	@ (80014ac <HAL_PCD_MspInit+0xa0>)
 8001482:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001486:	6453      	str	r3, [r2, #68]	@ 0x44
 8001488:	4b08      	ldr	r3, [pc, #32]	@ (80014ac <HAL_PCD_MspInit+0xa0>)
 800148a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800148c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	68fb      	ldr	r3, [r7, #12]

    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 1, 0);
 8001494:	2200      	movs	r2, #0
 8001496:	2101      	movs	r1, #1
 8001498:	2043      	movs	r0, #67	@ 0x43
 800149a:	f001 fc00 	bl	8002c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800149e:	2043      	movs	r0, #67	@ 0x43
 80014a0:	f001 fc19 	bl	8002cd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80014a4:	bf00      	nop
 80014a6:	3728      	adds	r7, #40	@ 0x28
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40023800 	.word	0x40023800
 80014b0:	40020000 	.word	0x40020000

080014b4 <delay_0_1ms_tim5>:
//HAL_StatusTypeDef

extern TIM_HandleTypeDef htim5;

void delay_0_1ms_tim5(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
    uint32_t start = __HAL_TIM_GET_COUNTER(&htim5);
 80014ba:	4b0b      	ldr	r3, [pc, #44]	@ (80014e8 <delay_0_1ms_tim5+0x34>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014c0:	607b      	str	r3, [r7, #4]
    uint32_t ticks = 50; // 0.1ms / 0.1us = 1000 ticks
 80014c2:	2332      	movs	r3, #50	@ 0x32
 80014c4:	603b      	str	r3, [r7, #0]

    while((__HAL_TIM_GET_COUNTER(&htim5) - start) < ticks)
 80014c6:	bf00      	nop
 80014c8:	4b07      	ldr	r3, [pc, #28]	@ (80014e8 <delay_0_1ms_tim5+0x34>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	683a      	ldr	r2, [r7, #0]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d8f7      	bhi.n	80014c8 <delay_0_1ms_tim5+0x14>
    {
        // chờ đủ số tick
    }
}
 80014d8:	bf00      	nop
 80014da:	bf00      	nop
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	200044d8 	.word	0x200044d8

080014ec <SendCanConfig>:
uint8_t SendCanConfig(uint8_t *data){
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
	switch(data[1]){
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3301      	adds	r3, #1
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d103      	bne.n	8001506 <SendCanConfig+0x1a>
	case 0 :
		SendCanConfigDisconnect(data);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f000 f828 	bl	8001554 <SendCanConfigDisconnect>
		break;
 8001504:	e003      	b.n	800150e <SendCanConfig+0x22>
	default:
		SendCanConfigConnect(data);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f000 f806 	bl	8001518 <SendCanConfigConnect>
		break;
 800150c:	bf00      	nop
	}
	return 1;
 800150e:	2301      	movs	r3, #1
}
 8001510:	4618      	mov	r0, r3
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <SendCanConfigConnect>:
uint8_t SendCanConfigConnect(uint8_t *data){
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
	  if(HAL_TIM_Base_Start(&htim5) != HAL_OK){
 8001520:	480a      	ldr	r0, [pc, #40]	@ (800154c <SendCanConfigConnect+0x34>)
 8001522:	f004 fb0b 	bl	8005b3c <HAL_TIM_Base_Start>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <SendCanConfigConnect+0x18>
		  return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e009      	b.n	8001544 <SendCanConfigConnect+0x2c>
	  }
	  SendCanConfigBaud(data);
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f000 f82b 	bl	800158c <SendCanConfigBaud>
	  SendCanConfigFilter(data);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f000 f888 	bl	800164c <SendCanConfigFilter>
	  HAL_CAN_Start(&hcan1);
 800153c:	4804      	ldr	r0, [pc, #16]	@ (8001550 <SendCanConfigConnect+0x38>)
 800153e:	f000 fe0d 	bl	800215c <HAL_CAN_Start>
	  return 1;
 8001542:	2301      	movs	r3, #1
}
 8001544:	4618      	mov	r0, r3
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	200044d8 	.word	0x200044d8
 8001550:	20000320 	.word	0x20000320

08001554 <SendCanConfigDisconnect>:
uint8_t SendCanConfigDisconnect(uint8_t *data){
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
	  HAL_TIM_Base_Stop(&htim5);
 800155c:	4809      	ldr	r0, [pc, #36]	@ (8001584 <SendCanConfigDisconnect+0x30>)
 800155e:	f004 fb55 	bl	8005c0c <HAL_TIM_Base_Stop>
	  //HAL_TIM_Base_Stop_IT(&htim4);
	  if (HAL_CAN_DeInit(&hcan1) != HAL_OK)
 8001562:	4809      	ldr	r0, [pc, #36]	@ (8001588 <SendCanConfigDisconnect+0x34>)
 8001564:	f000 fcf9 	bl	8001f5a <HAL_CAN_DeInit>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <SendCanConfigDisconnect+0x1e>
	   {
	     Error_Handler();
 800156e:	f7ff fb27 	bl	8000bc0 <Error_Handler>
	   }
	  HAL_CAN_Stop(&hcan1);
 8001572:	4805      	ldr	r0, [pc, #20]	@ (8001588 <SendCanConfigDisconnect+0x34>)
 8001574:	f000 fe36 	bl	80021e4 <HAL_CAN_Stop>
	  return 1;
 8001578:	2301      	movs	r3, #1

}
 800157a:	4618      	mov	r0, r3
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	200044d8 	.word	0x200044d8
 8001588:	20000320 	.word	0x20000320

0800158c <SendCanConfigBaud>:



uint8_t SendCanConfigBaud(uint8_t *data){
 800158c:	b580      	push	{r7, lr}
 800158e:	b08a      	sub	sp, #40	@ 0x28
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
	uint32_t baudrate = ((data[2] << 8) | data[1]) * 1000;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3302      	adds	r3, #2
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	021b      	lsls	r3, r3, #8
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	3201      	adds	r2, #1
 80015a0:	7812      	ldrb	r2, [r2, #0]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80015a8:	fb02 f303 	mul.w	r3, r2, r3
 80015ac:	627b      	str	r3, [r7, #36]	@ 0x24
	uint16_t desired_sample_point = (data[4] << 8) | data[3];
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	3304      	adds	r3, #4
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	b21b      	sxth	r3, r3
 80015b6:	021b      	lsls	r3, r3, #8
 80015b8:	b21a      	sxth	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	3303      	adds	r3, #3
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	b21b      	sxth	r3, r3
 80015c2:	4313      	orrs	r3, r2
 80015c4:	b21b      	sxth	r3, r3
 80015c6:	847b      	strh	r3, [r7, #34]	@ 0x22
    CAN_TimingConfig config = find_best_timing(baudrate, desired_sample_point);
 80015c8:	f107 0308 	add.w	r3, r7, #8
 80015cc:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80015ce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80015d0:	4618      	mov	r0, r3
 80015d2:	f000 f873 	bl	80016bc <find_best_timing>
	hcan1.Instance = CAN1;
 80015d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001644 <SendCanConfigBaud+0xb8>)
 80015d8:	4a1b      	ldr	r2, [pc, #108]	@ (8001648 <SendCanConfigBaud+0xbc>)
 80015da:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = config.prescaler;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	461a      	mov	r2, r3
 80015e0:	4b18      	ldr	r3, [pc, #96]	@ (8001644 <SendCanConfigBaud+0xb8>)
 80015e2:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 80015e4:	4b17      	ldr	r3, [pc, #92]	@ (8001644 <SendCanConfigBaud+0xb8>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80015ea:	4b16      	ldr	r3, [pc, #88]	@ (8001644 <SendCanConfigBaud+0xb8>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = (config.tseg1 - 1 ) << 16;
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	3b01      	subs	r3, #1
 80015f4:	041b      	lsls	r3, r3, #16
 80015f6:	4a13      	ldr	r2, [pc, #76]	@ (8001644 <SendCanConfigBaud+0xb8>)
 80015f8:	6113      	str	r3, [r2, #16]
	hcan1.Init.TimeSeg2 = (config.tseg2 - 1 ) << 20;
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	3b01      	subs	r3, #1
 80015fe:	051b      	lsls	r3, r3, #20
 8001600:	4a10      	ldr	r2, [pc, #64]	@ (8001644 <SendCanConfigBaud+0xb8>)
 8001602:	6153      	str	r3, [r2, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8001604:	4b0f      	ldr	r3, [pc, #60]	@ (8001644 <SendCanConfigBaud+0xb8>)
 8001606:	2200      	movs	r2, #0
 8001608:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 800160a:	4b0e      	ldr	r3, [pc, #56]	@ (8001644 <SendCanConfigBaud+0xb8>)
 800160c:	2200      	movs	r2, #0
 800160e:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8001610:	4b0c      	ldr	r3, [pc, #48]	@ (8001644 <SendCanConfigBaud+0xb8>)
 8001612:	2200      	movs	r2, #0
 8001614:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8001616:	4b0b      	ldr	r3, [pc, #44]	@ (8001644 <SendCanConfigBaud+0xb8>)
 8001618:	2200      	movs	r2, #0
 800161a:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 800161c:	4b09      	ldr	r3, [pc, #36]	@ (8001644 <SendCanConfigBaud+0xb8>)
 800161e:	2200      	movs	r2, #0
 8001620:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8001622:	4b08      	ldr	r3, [pc, #32]	@ (8001644 <SendCanConfigBaud+0xb8>)
 8001624:	2200      	movs	r2, #0
 8001626:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001628:	4806      	ldr	r0, [pc, #24]	@ (8001644 <SendCanConfigBaud+0xb8>)
 800162a:	f000 fb9b 	bl	8001d64 <HAL_CAN_Init>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <SendCanConfigBaud+0xac>
	{
		Error_Handler();
 8001634:	f7ff fac4 	bl	8000bc0 <Error_Handler>
	}
	return 1;
 8001638:	2301      	movs	r3, #1
}
 800163a:	4618      	mov	r0, r3
 800163c:	3728      	adds	r7, #40	@ 0x28
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	20000320 	.word	0x20000320
 8001648:	40006400 	.word	0x40006400

0800164c <SendCanConfigFilter>:
uint8_t SendCanConfigFilter(uint8_t *data){
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
	uint32_t start_id =  (data[9] << 24 ) | (data[8] << 16 ) | (data[7] << 8 ) | data[6];
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	3309      	adds	r3, #9
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	061a      	lsls	r2, r3, #24
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3308      	adds	r3, #8
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	041b      	lsls	r3, r3, #16
 8001664:	431a      	orrs	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	3307      	adds	r3, #7
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	021b      	lsls	r3, r3, #8
 800166e:	4313      	orrs	r3, r2
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	3206      	adds	r2, #6
 8001674:	7812      	ldrb	r2, [r2, #0]
 8001676:	4313      	orrs	r3, r2
 8001678:	60fb      	str	r3, [r7, #12]
	uint32_t end_id = (data[13] << 24 ) | (data[12] << 16 ) | (data[11] << 8 ) | data[10];
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	330d      	adds	r3, #13
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	061a      	lsls	r2, r3, #24
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	330c      	adds	r3, #12
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	041b      	lsls	r3, r3, #16
 800168a:	431a      	orrs	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	330b      	adds	r3, #11
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	021b      	lsls	r3, r3, #8
 8001694:	4313      	orrs	r3, r2
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	320a      	adds	r2, #10
 800169a:	7812      	ldrb	r2, [r2, #0]
 800169c:	4313      	orrs	r3, r2
 800169e:	60bb      	str	r3, [r7, #8]
	CanRx_FilterRange(start_id, end_id, data[5]);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	3305      	adds	r3, #5
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	461a      	mov	r2, r3
 80016a8:	68b9      	ldr	r1, [r7, #8]
 80016aa:	68f8      	ldr	r0, [r7, #12]
 80016ac:	f000 f90a 	bl	80018c4 <CanRx_FilterRange>
	return 1;
 80016b0:	2301      	movs	r3, #1
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
	...

080016bc <find_best_timing>:
 *                 - So sánh sai số với desired_sample_point_scaled
 *                 - Nếu sai số nhỏ hơn trước đó → lưu lại cấu hình tốt nhất
 *   [3] Trả về cấu hình có sai số nhỏ nhất với sample point mong muốn
 */
CAN_TimingConfig find_best_timing(uint32_t baudrate, uint16_t desired_sample_point_scaled)
{
 80016bc:	b5b0      	push	{r4, r5, r7, lr}
 80016be:	b092      	sub	sp, #72	@ 0x48
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	4613      	mov	r3, r2
 80016c8:	80fb      	strh	r3, [r7, #6]
    CAN_TimingConfig best_config = {0};
 80016ca:	f107 0314 	add.w	r3, r7, #20
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	605a      	str	r2, [r3, #4]
 80016d4:	609a      	str	r2, [r3, #8]
 80016d6:	60da      	str	r2, [r3, #12]
 80016d8:	611a      	str	r2, [r3, #16]
 80016da:	615a      	str	r2, [r3, #20]
    best_config.sample_point_error = FLT_MAX;
 80016dc:	4b47      	ldr	r3, [pc, #284]	@ (80017fc <find_best_timing+0x140>)
 80016de:	62bb      	str	r3, [r7, #40]	@ 0x28

    for (int tq_total = 8; tq_total <= 25; tq_total++) {
 80016e0:	2308      	movs	r3, #8
 80016e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80016e4:	e078      	b.n	80017d8 <find_best_timing+0x11c>
        if ((HAL_RCC_GetPCLK1Freq() / baudrate) % tq_total != 0)
 80016e6:	f004 f9b1 	bl	8005a4c <HAL_RCC_GetPCLK1Freq>
 80016ea:	4602      	mov	r2, r0
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80016f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80016f8:	fb01 f202 	mul.w	r2, r1, r2
 80016fc:	1a9b      	subs	r3, r3, r2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d166      	bne.n	80017d0 <find_best_timing+0x114>
            continue;

        int prescaler = (HAL_RCC_GetPCLK1Freq() / baudrate) / tq_total;
 8001702:	f004 f9a3 	bl	8005a4c <HAL_RCC_GetPCLK1Freq>
 8001706:	4602      	mov	r2, r0
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	fbb2 f2f3 	udiv	r2, r2, r3
 800170e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001710:	fbb2 f3f3 	udiv	r3, r2, r3
 8001714:	63bb      	str	r3, [r7, #56]	@ 0x38

        for (int tseg1 = 1; tseg1 <= 16; tseg1++) {
 8001716:	2301      	movs	r3, #1
 8001718:	643b      	str	r3, [r7, #64]	@ 0x40
 800171a:	e055      	b.n	80017c8 <find_best_timing+0x10c>
            for (int tseg2 = 1; tseg2 <= 8; tseg2++) {
 800171c:	2301      	movs	r3, #1
 800171e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001720:	e04c      	b.n	80017bc <find_best_timing+0x100>
                if (1 + tseg1 + tseg2 != tq_total)
 8001722:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001724:	1c5a      	adds	r2, r3, #1
 8001726:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001728:	4413      	add	r3, r2
 800172a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800172c:	429a      	cmp	r2, r3
 800172e:	d141      	bne.n	80017b4 <find_best_timing+0xf8>
                    continue;

                float actual_sp = (1.0f + tseg1) / tq_total;
 8001730:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001732:	ee07 3a90 	vmov	s15, r3
 8001736:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800173a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800173e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8001742:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001744:	ee07 3a90 	vmov	s15, r3
 8001748:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800174c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001750:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
                uint16_t actual_sp_scaled = (uint16_t)(actual_sp * SAMPLE_POINT_SCALE);
 8001754:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001758:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8001800 <find_best_timing+0x144>
 800175c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001760:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001764:	ee17 3a90 	vmov	r3, s15
 8001768:	867b      	strh	r3, [r7, #50]	@ 0x32

                float error = fabsf((float)(actual_sp_scaled - desired_sample_point_scaled) / SAMPLE_POINT_SCALE);
 800176a:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800176c:	88fb      	ldrh	r3, [r7, #6]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	ee07 3a90 	vmov	s15, r3
 8001774:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001778:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8001800 <find_best_timing+0x144>
 800177c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001780:	eef0 7ae7 	vabs.f32	s15, s15
 8001784:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

                if (error < best_config.sample_point_error) {
 8001788:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800178c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001790:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001798:	d50d      	bpl.n	80017b6 <find_best_timing+0xfa>
                    best_config.tq_total = tq_total;
 800179a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800179c:	617b      	str	r3, [r7, #20]
                    best_config.prescaler = prescaler;
 800179e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017a0:	61bb      	str	r3, [r7, #24]
                    best_config.tseg1 = tseg1;
 80017a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80017a4:	61fb      	str	r3, [r7, #28]
                    best_config.tseg2 = tseg2;
 80017a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80017a8:	623b      	str	r3, [r7, #32]
                    best_config.actual_sample_point = actual_sp;
 80017aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017ac:	627b      	str	r3, [r7, #36]	@ 0x24
                    best_config.sample_point_error = error;
 80017ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80017b2:	e000      	b.n	80017b6 <find_best_timing+0xfa>
                    continue;
 80017b4:	bf00      	nop
            for (int tseg2 = 1; tseg2 <= 8; tseg2++) {
 80017b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80017b8:	3301      	adds	r3, #1
 80017ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80017bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80017be:	2b08      	cmp	r3, #8
 80017c0:	ddaf      	ble.n	8001722 <find_best_timing+0x66>
        for (int tseg1 = 1; tseg1 <= 16; tseg1++) {
 80017c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80017c4:	3301      	adds	r3, #1
 80017c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80017c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80017ca:	2b10      	cmp	r3, #16
 80017cc:	dda6      	ble.n	800171c <find_best_timing+0x60>
 80017ce:	e000      	b.n	80017d2 <find_best_timing+0x116>
            continue;
 80017d0:	bf00      	nop
    for (int tq_total = 8; tq_total <= 25; tq_total++) {
 80017d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017d4:	3301      	adds	r3, #1
 80017d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80017d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017da:	2b19      	cmp	r3, #25
 80017dc:	dd83      	ble.n	80016e6 <find_best_timing+0x2a>
                }
            }
        }
    }

    return best_config;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	461d      	mov	r5, r3
 80017e2:	f107 0414 	add.w	r4, r7, #20
 80017e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017ee:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80017f2:	68f8      	ldr	r0, [r7, #12]
 80017f4:	3748      	adds	r7, #72	@ 0x48
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bdb0      	pop	{r4, r5, r7, pc}
 80017fa:	bf00      	nop
 80017fc:	7f7fffff 	.word	0x7f7fffff
 8001800:	447a0000 	.word	0x447a0000

08001804 <SendCanMessage>:


uint8_t SendCanMessage(uint8_t *data){
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
	uint32_t id = (data[1]<< 24) |(data[2]<< 16) |(data[3]<< 8) | data[4];
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3301      	adds	r3, #1
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	061a      	lsls	r2, r3, #24
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3302      	adds	r3, #2
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	041b      	lsls	r3, r3, #16
 800181c:	431a      	orrs	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	3303      	adds	r3, #3
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	021b      	lsls	r3, r3, #8
 8001826:	4313      	orrs	r3, r2
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	3204      	adds	r2, #4
 800182c:	7812      	ldrb	r2, [r2, #0]
 800182e:	4313      	orrs	r3, r2
 8001830:	60fb      	str	r3, [r7, #12]
	CanTx_init(id, data[5], &data[6]);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	3305      	adds	r3, #5
 8001836:	7819      	ldrb	r1, [r3, #0]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	3306      	adds	r3, #6
 800183c:	461a      	mov	r2, r3
 800183e:	68f8      	ldr	r0, [r7, #12]
 8001840:	f000 f806 	bl	8001850 <CanTx_init>

	return 1;
 8001844:	2301      	movs	r3, #1
}
 8001846:	4618      	mov	r0, r3
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
	...

08001850 <CanTx_init>:

void CanTx_init(uint32_t id, uint8_t DlcAndType, uint8_t *data){
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	460b      	mov	r3, r1
 800185a:	607a      	str	r2, [r7, #4]
 800185c:	72fb      	strb	r3, [r7, #11]
	//uint32_t txMailbox;
    switch(DlcAndType & 0x0F){
 800185e:	7afb      	ldrb	r3, [r7, #11]
 8001860:	f003 030f 	and.w	r3, r3, #15
 8001864:	2b00      	cmp	r3, #0
 8001866:	d008      	beq.n	800187a <CanTx_init+0x2a>
 8001868:	2b04      	cmp	r3, #4
 800186a:	d10d      	bne.n	8001888 <CanTx_init+0x38>
    case CAN_ID_EXT:
    	g_CanTxHeader.IDE = CAN_ID_EXT;
 800186c:	4b12      	ldr	r3, [pc, #72]	@ (80018b8 <CanTx_init+0x68>)
 800186e:	2204      	movs	r2, #4
 8001870:	609a      	str	r2, [r3, #8]
    	g_CanTxHeader.ExtId = id;
 8001872:	4a11      	ldr	r2, [pc, #68]	@ (80018b8 <CanTx_init+0x68>)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6053      	str	r3, [r2, #4]
    	break;
 8001878:	e006      	b.n	8001888 <CanTx_init+0x38>
    case CAN_ID_STD:
    	g_CanTxHeader.IDE = CAN_ID_STD;
 800187a:	4b0f      	ldr	r3, [pc, #60]	@ (80018b8 <CanTx_init+0x68>)
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]
    	g_CanTxHeader.StdId = id;
 8001880:	4a0d      	ldr	r2, [pc, #52]	@ (80018b8 <CanTx_init+0x68>)
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	6013      	str	r3, [r2, #0]
    	break;
 8001886:	bf00      	nop
    }
	g_CanTxHeader.RTR = CAN_RTR_DATA;
 8001888:	4b0b      	ldr	r3, [pc, #44]	@ (80018b8 <CanTx_init+0x68>)
 800188a:	2200      	movs	r2, #0
 800188c:	60da      	str	r2, [r3, #12]
	g_CanTxHeader.DLC = (DlcAndType >> 4);
 800188e:	7afb      	ldrb	r3, [r7, #11]
 8001890:	091b      	lsrs	r3, r3, #4
 8001892:	b2db      	uxtb	r3, r3
 8001894:	461a      	mov	r2, r3
 8001896:	4b08      	ldr	r3, [pc, #32]	@ (80018b8 <CanTx_init+0x68>)
 8001898:	611a      	str	r2, [r3, #16]
	g_CanTxHeader.TransmitGlobalTime = DISABLE;
 800189a:	4b07      	ldr	r3, [pc, #28]	@ (80018b8 <CanTx_init+0x68>)
 800189c:	2200      	movs	r2, #0
 800189e:	751a      	strb	r2, [r3, #20]

	HAL_CAN_AddTxMessage(&hcan1, &g_CanTxHeader, data, &g_u32TxMailbox);
 80018a0:	4b06      	ldr	r3, [pc, #24]	@ (80018bc <CanTx_init+0x6c>)
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	4904      	ldr	r1, [pc, #16]	@ (80018b8 <CanTx_init+0x68>)
 80018a6:	4806      	ldr	r0, [pc, #24]	@ (80018c0 <CanTx_init+0x70>)
 80018a8:	f000 fce5 	bl	8002276 <HAL_CAN_AddTxMessage>
	delay_0_1ms_tim5();
 80018ac:	f7ff fe02 	bl	80014b4 <delay_0_1ms_tim5>
}
 80018b0:	bf00      	nop
 80018b2:	3710      	adds	r7, #16
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20004b0c 	.word	0x20004b0c
 80018bc:	20004b4c 	.word	0x20004b4c
 80018c0:	20000320 	.word	0x20000320

080018c4 <CanRx_FilterRange>:
                                          CAN_IT_ERROR_PASSIVE |\
                                          CAN_IT_BUSOFF |\
                                          CAN_IT_LAST_ERROR_CODE |\
                                          CAN_IT_ERROR )
void CanRx_FilterRange(uint32_t start_id, uint32_t end_id, uint8_t is_extended)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b088      	sub	sp, #32
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	4613      	mov	r3, r2
 80018d0:	71fb      	strb	r3, [r7, #7]
    uint32_t range = end_id - start_id + 1;
 80018d2:	68ba      	ldr	r2, [r7, #8]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	3301      	adds	r3, #1
 80018da:	61fb      	str	r3, [r7, #28]

    // Kiểm tra range có phải là lũy thừa của 2
    if ((range & (range - 1)) != 0) {
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	1e5a      	subs	r2, r3, #1
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	4013      	ands	r3, r2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d178      	bne.n	80019da <CanRx_FilterRange+0x116>
        return; // Không phải lũy thừa của 2
    }

    uint32_t mask, id_filter;

    if (is_extended == 0) {
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d129      	bne.n	8001942 <CanRx_FilterRange+0x7e>
        // Standard ID (11-bit)
        if (start_id > 0x7FF || end_id > 0x7FF) return;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80018f4:	d273      	bcs.n	80019de <CanRx_FilterRange+0x11a>
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80018fc:	d26f      	bcs.n	80019de <CanRx_FilterRange+0x11a>

        mask = 0x7FF & ~(range - 1);
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	425b      	negs	r3, r3
 8001902:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001906:	61bb      	str	r3, [r7, #24]

        if ((start_id & ~mask) != 0) return;
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	43da      	mvns	r2, r3
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	4013      	ands	r3, r2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d166      	bne.n	80019e2 <CanRx_FilterRange+0x11e>

        id_filter = start_id << 5;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	015b      	lsls	r3, r3, #5
 8001918:	617b      	str	r3, [r7, #20]
        mask <<= 5;
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	015b      	lsls	r3, r3, #5
 800191e:	61bb      	str	r3, [r7, #24]

        g_CanFilter.FilterIdHigh = (uint16_t)(id_filter);
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	b29b      	uxth	r3, r3
 8001924:	461a      	mov	r2, r3
 8001926:	4b33      	ldr	r3, [pc, #204]	@ (80019f4 <CanRx_FilterRange+0x130>)
 8001928:	601a      	str	r2, [r3, #0]
        g_CanFilter.FilterIdLow  = 0x0000;
 800192a:	4b32      	ldr	r3, [pc, #200]	@ (80019f4 <CanRx_FilterRange+0x130>)
 800192c:	2200      	movs	r2, #0
 800192e:	605a      	str	r2, [r3, #4]
        g_CanFilter.FilterMaskIdHigh = (uint16_t)(mask);
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	b29b      	uxth	r3, r3
 8001934:	461a      	mov	r2, r3
 8001936:	4b2f      	ldr	r3, [pc, #188]	@ (80019f4 <CanRx_FilterRange+0x130>)
 8001938:	609a      	str	r2, [r3, #8]
        g_CanFilter.FilterMaskIdLow  = 0x0000;
 800193a:	4b2e      	ldr	r3, [pc, #184]	@ (80019f4 <CanRx_FilterRange+0x130>)
 800193c:	2200      	movs	r2, #0
 800193e:	60da      	str	r2, [r3, #12]
 8001940:	e032      	b.n	80019a8 <CanRx_FilterRange+0xe4>
    } else {
        // Extended ID (29-bit)
        if (start_id > 0x1FFFFFFF || end_id > 0x1FFFFFFF) return;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001948:	d24d      	bcs.n	80019e6 <CanRx_FilterRange+0x122>
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001950:	d249      	bcs.n	80019e6 <CanRx_FilterRange+0x122>

        mask = 0x1FFFFFFF & ~(range - 1);
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	425b      	negs	r3, r3
 8001956:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 800195a:	61bb      	str	r3, [r7, #24]

        if ((start_id & ~mask) != 0) return;
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	43da      	mvns	r2, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	4013      	ands	r3, r2
 8001964:	2b00      	cmp	r3, #0
 8001966:	d140      	bne.n	80019ea <CanRx_FilterRange+0x126>

        id_filter = (start_id << 3) | (1 << 2);  // IDE bit = 1 in ID field
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	f043 0304 	orr.w	r3, r3, #4
 8001970:	617b      	str	r3, [r7, #20]
        mask = (mask << 3) | (1 << 2);           // Mask includes IDE match
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	00db      	lsls	r3, r3, #3
 8001976:	f043 0304 	orr.w	r3, r3, #4
 800197a:	61bb      	str	r3, [r7, #24]

        g_CanFilter.FilterIdHigh = (uint16_t)(id_filter >> 16);
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	0c1b      	lsrs	r3, r3, #16
 8001980:	b29b      	uxth	r3, r3
 8001982:	461a      	mov	r2, r3
 8001984:	4b1b      	ldr	r3, [pc, #108]	@ (80019f4 <CanRx_FilterRange+0x130>)
 8001986:	601a      	str	r2, [r3, #0]
        g_CanFilter.FilterIdLow  = (uint16_t)(id_filter & 0xFFFF);
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	b29b      	uxth	r3, r3
 800198c:	461a      	mov	r2, r3
 800198e:	4b19      	ldr	r3, [pc, #100]	@ (80019f4 <CanRx_FilterRange+0x130>)
 8001990:	605a      	str	r2, [r3, #4]
        g_CanFilter.FilterMaskIdHigh = (uint16_t)(mask >> 16);
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	0c1b      	lsrs	r3, r3, #16
 8001996:	b29b      	uxth	r3, r3
 8001998:	461a      	mov	r2, r3
 800199a:	4b16      	ldr	r3, [pc, #88]	@ (80019f4 <CanRx_FilterRange+0x130>)
 800199c:	609a      	str	r2, [r3, #8]
        g_CanFilter.FilterMaskIdLow  = (uint16_t)(mask & 0xFFFF);
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	461a      	mov	r2, r3
 80019a4:	4b13      	ldr	r3, [pc, #76]	@ (80019f4 <CanRx_FilterRange+0x130>)
 80019a6:	60da      	str	r2, [r3, #12]
    }

    g_CanFilter.FilterBank = 0;
 80019a8:	4b12      	ldr	r3, [pc, #72]	@ (80019f4 <CanRx_FilterRange+0x130>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	615a      	str	r2, [r3, #20]
    g_CanFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 80019ae:	4b11      	ldr	r3, [pc, #68]	@ (80019f4 <CanRx_FilterRange+0x130>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	619a      	str	r2, [r3, #24]
    g_CanFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 80019b4:	4b0f      	ldr	r3, [pc, #60]	@ (80019f4 <CanRx_FilterRange+0x130>)
 80019b6:	2201      	movs	r2, #1
 80019b8:	61da      	str	r2, [r3, #28]
    g_CanFilter.FilterFIFOAssignment = CAN_RX_FIFO0;
 80019ba:	4b0e      	ldr	r3, [pc, #56]	@ (80019f4 <CanRx_FilterRange+0x130>)
 80019bc:	2200      	movs	r2, #0
 80019be:	611a      	str	r2, [r3, #16]
    g_CanFilter.FilterActivation = ENABLE;
 80019c0:	4b0c      	ldr	r3, [pc, #48]	@ (80019f4 <CanRx_FilterRange+0x130>)
 80019c2:	2201      	movs	r2, #1
 80019c4:	621a      	str	r2, [r3, #32]

    HAL_CAN_ConfigFilter(&hcan1, &g_CanFilter);
 80019c6:	490b      	ldr	r1, [pc, #44]	@ (80019f4 <CanRx_FilterRange+0x130>)
 80019c8:	480b      	ldr	r0, [pc, #44]	@ (80019f8 <CanRx_FilterRange+0x134>)
 80019ca:	f000 fae9 	bl	8001fa0 <HAL_CAN_ConfigFilter>
//    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_ERROR|  CAN_IT_TX_MAILBOX_EMPTY   );
    HAL_CAN_ActivateNotification(&hcan1, INTERNAL_CAN_IT_FLAGS   );
 80019ce:	f648 7103 	movw	r1, #36611	@ 0x8f03
 80019d2:	4809      	ldr	r0, [pc, #36]	@ (80019f8 <CanRx_FilterRange+0x134>)
 80019d4:	f000 fe41 	bl	800265a <HAL_CAN_ActivateNotification>
 80019d8:	e008      	b.n	80019ec <CanRx_FilterRange+0x128>
        return; // Không phải lũy thừa của 2
 80019da:	bf00      	nop
 80019dc:	e006      	b.n	80019ec <CanRx_FilterRange+0x128>
        if (start_id > 0x7FF || end_id > 0x7FF) return;
 80019de:	bf00      	nop
 80019e0:	e004      	b.n	80019ec <CanRx_FilterRange+0x128>
        if ((start_id & ~mask) != 0) return;
 80019e2:	bf00      	nop
 80019e4:	e002      	b.n	80019ec <CanRx_FilterRange+0x128>
        if (start_id > 0x1FFFFFFF || end_id > 0x1FFFFFFF) return;
 80019e6:	bf00      	nop
 80019e8:	e000      	b.n	80019ec <CanRx_FilterRange+0x128>
        if ((start_id & ~mask) != 0) return;
 80019ea:	bf00      	nop
}
 80019ec:	3720      	adds	r7, #32
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20004b24 	.word	0x20004b24
 80019f8:	20000320 	.word	0x20000320

080019fc <HID_Frame_Write>:


uint8_t HID_Frame_Write(HID_FrameFIFO_t *fifo, uint8_t *data)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
    uint8_t nextHead = (fifo->head + 1) % HID_FRAME_BUFFER_SIZE;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	3301      	adds	r3, #1
 8001a12:	425a      	negs	r2, r3
 8001a14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001a1c:	bf58      	it	pl
 8001a1e:	4253      	negpl	r3, r2
 8001a20:	73fb      	strb	r3, [r7, #15]

    // Kiểm tra tràn bộ đệm
    if (nextHead == fifo->tail) {
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001a28:	785b      	ldrb	r3, [r3, #1]
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	7bfa      	ldrb	r2, [r7, #15]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d101      	bne.n	8001a36 <HID_Frame_Write+0x3a>
        // Buffer đầy
    	//GPIOA->ODR ^= (1 << 7);
        return 0;
 8001a32:	2300      	movs	r3, #0
 8001a34:	e013      	b.n	8001a5e <HID_Frame_Write+0x62>
    }

    memcpy(fifo->frame[fifo->head], data, HID_FRAME_SIZE);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	015b      	lsls	r3, r3, #5
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	4413      	add	r3, r2
 8001a46:	2220      	movs	r2, #32
 8001a48:	6839      	ldr	r1, [r7, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f00a fe2c 	bl	800c6a8 <memcpy>
    fifo->head = nextHead;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001a56:	461a      	mov	r2, r3
 8001a58:	7bfb      	ldrb	r3, [r7, #15]
 8001a5a:	7013      	strb	r3, [r2, #0]
    return 1;
 8001a5c:	2301      	movs	r3, #1
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
	...

08001a68 <Usb2Can_Tranfer>:
uint32_t l_u32_GetErrCan= 0;

volatile uint32_t l_u32_TxComplete = 0;

uint8_t Usb2Can_Tranfer(HID_FrameFIFO_t *fifo)
{
 8001a68:	b5b0      	push	{r4, r5, r7, lr}
 8001a6a:	b08c      	sub	sp, #48	@ 0x30
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
    uint8_t l_au8DataUsb[HID_FRAME_SIZE];

    // Kiểm tra FIFO rỗng
    if(fifo->head == fifo->tail)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	b2da      	uxtb	r2, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001a80:	785b      	ldrb	r3, [r3, #1]
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d101      	bne.n	8001a8c <Usb2Can_Tranfer+0x24>
        return 0;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	e051      	b.n	8001b30 <Usb2Can_Tranfer+0xc8>

    // Copy frame ra buffer tạm
    memcpy(l_au8DataUsb, fifo->frame[fifo->tail], HID_FRAME_SIZE);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001a92:	785b      	ldrb	r3, [r3, #1]
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	015b      	lsls	r3, r3, #5
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	f107 040c 	add.w	r4, r7, #12
 8001aa0:	461d      	mov	r5, r3
 8001aa2:	6828      	ldr	r0, [r5, #0]
 8001aa4:	6869      	ldr	r1, [r5, #4]
 8001aa6:	68aa      	ldr	r2, [r5, #8]
 8001aa8:	68eb      	ldr	r3, [r5, #12]
 8001aaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001aac:	6928      	ldr	r0, [r5, #16]
 8001aae:	6969      	ldr	r1, [r5, #20]
 8001ab0:	69aa      	ldr	r2, [r5, #24]
 8001ab2:	69eb      	ldr	r3, [r5, #28]
 8001ab4:	c40f      	stmia	r4!, {r0, r1, r2, r3}

    // Gọi hàm gửi CAN tương ứng
    uint8_t sendResult = g_PtrFunc_SendCan[l_au8DataUsb[0]](l_au8DataUsb);
 8001ab6:	7b3b      	ldrb	r3, [r7, #12]
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4b1f      	ldr	r3, [pc, #124]	@ (8001b38 <Usb2Can_Tranfer+0xd0>)
 8001abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac0:	f107 020c 	add.w	r2, r7, #12
 8001ac4:	4610      	mov	r0, r2
 8001ac6:	4798      	blx	r3
 8001ac8:	4603      	mov	r3, r0
 8001aca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    //HAL_Delay(1);

    //for(int i = 0 ; i < 2000 ; i++);

    if(l_u32_TxComplete == 2){
 8001ace:	4b1b      	ldr	r3, [pc, #108]	@ (8001b3c <Usb2Can_Tranfer+0xd4>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d106      	bne.n	8001ae4 <Usb2Can_Tranfer+0x7c>
    	GPIOA->ODR ^= (1 << 7); // NG
 8001ad6:	4b1a      	ldr	r3, [pc, #104]	@ (8001b40 <Usb2Can_Tranfer+0xd8>)
 8001ad8:	695b      	ldr	r3, [r3, #20]
 8001ada:	4a19      	ldr	r2, [pc, #100]	@ (8001b40 <Usb2Can_Tranfer+0xd8>)
 8001adc:	f083 0380 	eor.w	r3, r3, #128	@ 0x80
 8001ae0:	6153      	str	r3, [r2, #20]
 8001ae2:	e009      	b.n	8001af8 <Usb2Can_Tranfer+0x90>
    }
    else if (l_u32_TxComplete == 1){
 8001ae4:	4b15      	ldr	r3, [pc, #84]	@ (8001b3c <Usb2Can_Tranfer+0xd4>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d105      	bne.n	8001af8 <Usb2Can_Tranfer+0x90>
    	GPIOA->ODR ^= (1 << 6); // OK
 8001aec:	4b14      	ldr	r3, [pc, #80]	@ (8001b40 <Usb2Can_Tranfer+0xd8>)
 8001aee:	695b      	ldr	r3, [r3, #20]
 8001af0:	4a13      	ldr	r2, [pc, #76]	@ (8001b40 <Usb2Can_Tranfer+0xd8>)
 8001af2:	f083 0340 	eor.w	r3, r3, #64	@ 0x40
 8001af6:	6153      	str	r3, [r2, #20]
    }
    l_u32_TxComplete = 0 ;
 8001af8:	4b10      	ldr	r3, [pc, #64]	@ (8001b3c <Usb2Can_Tranfer+0xd4>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]
//    } else {
//        GPIOA->ODR ^= (1 << 7); // NG
//    }
   // l_u32_TxComplete = 1;
 //   HAL_CAN_ResetError( &hcan1 );
    if(sendResult) {
 8001afe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d013      	beq.n	8001b2e <Usb2Can_Tranfer+0xc6>
        // Gửi thành công → đánh dấu đã đọc
        fifo->tail = (fifo->tail + 1) % HID_FRAME_BUFFER_SIZE;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001b0c:	785b      	ldrb	r3, [r3, #1]
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	3301      	adds	r3, #1
 8001b12:	425a      	negs	r2, r3
 8001b14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b1c:	bf58      	it	pl
 8001b1e:	4253      	negpl	r3, r2
 8001b20:	b2da      	uxtb	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001b28:	705a      	strb	r2, [r3, #1]
        return 1;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e000      	b.n	8001b30 <Usb2Can_Tranfer+0xc8>
    } else {
        // Gửi chưa thành công → tail giữ nguyên
        return 2;
 8001b2e:	2302      	movs	r3, #2
    }
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3730      	adds	r7, #48	@ 0x30
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bdb0      	pop	{r4, r5, r7, pc}
 8001b38:	20000004 	.word	0x20000004
 8001b3c:	20008b54 	.word	0x20008b54
 8001b40:	40020000 	.word	0x40020000

08001b44 <HAL_CAN_TxMailbox0CompleteCallback>:


void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan){
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
	//GPIOA->ODR ^= (1 << 7);
	//l_u32_TxComplete = 0;
	//l_u32_GetErrCan = HAL_CAN_GetError(&hcan1);
	l_u32_TxComplete = 1 ;
 8001b4c:	4b04      	ldr	r3, [pc, #16]	@ (8001b60 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 8001b4e:	2201      	movs	r2, #1
 8001b50:	601a      	str	r2, [r3, #0]
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	20008b54 	.word	0x20008b54

08001b64 <HAL_CAN_TxMailbox1CompleteCallback>:
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan){
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
	//GPIOA->ODR ^= (1 << 7);
	//l_u32_TxComplete = 0;
	//l_u32_GetErrCan = HAL_CAN_GetError(&hcan1);
	l_u32_TxComplete = 1 ;
 8001b6c:	4b04      	ldr	r3, [pc, #16]	@ (8001b80 <HAL_CAN_TxMailbox1CompleteCallback+0x1c>)
 8001b6e:	2201      	movs	r2, #1
 8001b70:	601a      	str	r2, [r3, #0]

}
 8001b72:	bf00      	nop
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	20008b54 	.word	0x20008b54

08001b84 <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan){
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
	//GPIOA->ODR ^= (1 << 7);
	//l_u32_TxComplete = 0;
//	l_u32_GetErrCan = HAL_CAN_GetError(&hcan1);
	l_u32_TxComplete = 1 ;
 8001b8c:	4b04      	ldr	r3, [pc, #16]	@ (8001ba0 <HAL_CAN_TxMailbox2CompleteCallback+0x1c>)
 8001b8e:	2201      	movs	r2, #1
 8001b90:	601a      	str	r2, [r3, #0]

}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	20008b54 	.word	0x20008b54

08001ba4 <HAL_CAN_TxMailbox0AbortCallback>:
void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan){
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
	l_u32_TxComplete = 2 ;
 8001bac:	4b04      	ldr	r3, [pc, #16]	@ (8001bc0 <HAL_CAN_TxMailbox0AbortCallback+0x1c>)
 8001bae:	2202      	movs	r2, #2
 8001bb0:	601a      	str	r2, [r3, #0]
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	20008b54 	.word	0x20008b54

08001bc4 <HAL_CAN_ErrorCallback>:
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan){
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
	l_u32_TxComplete = 2 ;
 8001bcc:	4b04      	ldr	r3, [pc, #16]	@ (8001be0 <HAL_CAN_ErrorCallback+0x1c>)
 8001bce:	2202      	movs	r2, #2
 8001bd0:	601a      	str	r2, [r3, #0]
//				l_au8TestSendErr[4] = (uint8_t)(l_u32_GetErrCan>>8);
//				l_au8TestSendErr[5] = (uint8_t)(l_u32_GetErrCan);
//				//l_au8TestSendErr[3] = HAL_CAN_GetError(&hcan1);
//				HID_Frame_Write(&g_HIDFrameFIFO_Tranfer,l_au8TestSendErr);
//				HAL_CAN_ResetError( &hcan1 );
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	20008b54 	.word	0x20008b54

08001be4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001be4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c1c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001be8:	f7ff f8ec 	bl	8000dc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bec:	480c      	ldr	r0, [pc, #48]	@ (8001c20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bee:	490d      	ldr	r1, [pc, #52]	@ (8001c24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bf0:	4a0d      	ldr	r2, [pc, #52]	@ (8001c28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bf4:	e002      	b.n	8001bfc <LoopCopyDataInit>

08001bf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bfa:	3304      	adds	r3, #4

08001bfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c00:	d3f9      	bcc.n	8001bf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c02:	4a0a      	ldr	r2, [pc, #40]	@ (8001c2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c04:	4c0a      	ldr	r4, [pc, #40]	@ (8001c30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c08:	e001      	b.n	8001c0e <LoopFillZerobss>

08001c0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c0c:	3204      	adds	r2, #4

08001c0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c10:	d3fb      	bcc.n	8001c0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c12:	f00a fd23 	bl	800c65c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c16:	f7fe ff39 	bl	8000a8c <main>
  bx  lr    
 8001c1a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c24:	20000304 	.word	0x20000304
  ldr r2, =_sidata
 8001c28:	0800d014 	.word	0x0800d014
  ldr r2, =_sbss
 8001c2c:	20000304 	.word	0x20000304
  ldr r4, =_ebss
 8001c30:	2000a5e8 	.word	0x2000a5e8

08001c34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c34:	e7fe      	b.n	8001c34 <ADC_IRQHandler>
	...

08001c38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c3c:	4b0e      	ldr	r3, [pc, #56]	@ (8001c78 <HAL_Init+0x40>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a0d      	ldr	r2, [pc, #52]	@ (8001c78 <HAL_Init+0x40>)
 8001c42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c48:	4b0b      	ldr	r3, [pc, #44]	@ (8001c78 <HAL_Init+0x40>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a0a      	ldr	r2, [pc, #40]	@ (8001c78 <HAL_Init+0x40>)
 8001c4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c54:	4b08      	ldr	r3, [pc, #32]	@ (8001c78 <HAL_Init+0x40>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a07      	ldr	r2, [pc, #28]	@ (8001c78 <HAL_Init+0x40>)
 8001c5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c60:	2003      	movs	r0, #3
 8001c62:	f001 f811 	bl	8002c88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c66:	200f      	movs	r0, #15
 8001c68:	f000 f808 	bl	8001c7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c6c:	f7fe ffae 	bl	8000bcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40023c00 	.word	0x40023c00

08001c7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c84:	4b12      	ldr	r3, [pc, #72]	@ (8001cd0 <HAL_InitTick+0x54>)
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	4b12      	ldr	r3, [pc, #72]	@ (8001cd4 <HAL_InitTick+0x58>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f001 f837 	bl	8002d0e <HAL_SYSTICK_Config>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e00e      	b.n	8001cc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2b0f      	cmp	r3, #15
 8001cae:	d80a      	bhi.n	8001cc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	6879      	ldr	r1, [r7, #4]
 8001cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb8:	f000 fff1 	bl	8002c9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cbc:	4a06      	ldr	r2, [pc, #24]	@ (8001cd8 <HAL_InitTick+0x5c>)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	e000      	b.n	8001cc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3708      	adds	r7, #8
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	20000000 	.word	0x20000000
 8001cd4:	20000014 	.word	0x20000014
 8001cd8:	20000010 	.word	0x20000010

08001cdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ce0:	4b06      	ldr	r3, [pc, #24]	@ (8001cfc <HAL_IncTick+0x20>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	4b06      	ldr	r3, [pc, #24]	@ (8001d00 <HAL_IncTick+0x24>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4413      	add	r3, r2
 8001cec:	4a04      	ldr	r2, [pc, #16]	@ (8001d00 <HAL_IncTick+0x24>)
 8001cee:	6013      	str	r3, [r2, #0]
}
 8001cf0:	bf00      	nop
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	20000014 	.word	0x20000014
 8001d00:	20008b58 	.word	0x20008b58

08001d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  return uwTick;
 8001d08:	4b03      	ldr	r3, [pc, #12]	@ (8001d18 <HAL_GetTick+0x14>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	20008b58 	.word	0x20008b58

08001d1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d24:	f7ff ffee 	bl	8001d04 <HAL_GetTick>
 8001d28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d34:	d005      	beq.n	8001d42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d36:	4b0a      	ldr	r3, [pc, #40]	@ (8001d60 <HAL_Delay+0x44>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	4413      	add	r3, r2
 8001d40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d42:	bf00      	nop
 8001d44:	f7ff ffde 	bl	8001d04 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	68fa      	ldr	r2, [r7, #12]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d8f7      	bhi.n	8001d44 <HAL_Delay+0x28>
  {
  }
}
 8001d54:	bf00      	nop
 8001d56:	bf00      	nop
 8001d58:	3710      	adds	r7, #16
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	20000014 	.word	0x20000014

08001d64 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e0ed      	b.n	8001f52 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d102      	bne.n	8001d88 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7fe fc40 	bl	8000608 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f042 0201 	orr.w	r2, r2, #1
 8001d96:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d98:	f7ff ffb4 	bl	8001d04 <HAL_GetTick>
 8001d9c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d9e:	e012      	b.n	8001dc6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001da0:	f7ff ffb0 	bl	8001d04 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b0a      	cmp	r3, #10
 8001dac:	d90b      	bls.n	8001dc6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2205      	movs	r2, #5
 8001dbe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e0c5      	b.n	8001f52 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d0e5      	beq.n	8001da0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f022 0202 	bic.w	r2, r2, #2
 8001de2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001de4:	f7ff ff8e 	bl	8001d04 <HAL_GetTick>
 8001de8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001dea:	e012      	b.n	8001e12 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001dec:	f7ff ff8a 	bl	8001d04 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b0a      	cmp	r3, #10
 8001df8:	d90b      	bls.n	8001e12 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dfe:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2205      	movs	r2, #5
 8001e0a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e09f      	b.n	8001f52 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1e5      	bne.n	8001dec <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	7e1b      	ldrb	r3, [r3, #24]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d108      	bne.n	8001e3a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	e007      	b.n	8001e4a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e48:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	7e5b      	ldrb	r3, [r3, #25]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d108      	bne.n	8001e64 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001e60:	601a      	str	r2, [r3, #0]
 8001e62:	e007      	b.n	8001e74 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e72:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	7e9b      	ldrb	r3, [r3, #26]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d108      	bne.n	8001e8e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f042 0220 	orr.w	r2, r2, #32
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	e007      	b.n	8001e9e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f022 0220 	bic.w	r2, r2, #32
 8001e9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	7edb      	ldrb	r3, [r3, #27]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d108      	bne.n	8001eb8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 0210 	bic.w	r2, r2, #16
 8001eb4:	601a      	str	r2, [r3, #0]
 8001eb6:	e007      	b.n	8001ec8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f042 0210 	orr.w	r2, r2, #16
 8001ec6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	7f1b      	ldrb	r3, [r3, #28]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d108      	bne.n	8001ee2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f042 0208 	orr.w	r2, r2, #8
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	e007      	b.n	8001ef2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f022 0208 	bic.w	r2, r2, #8
 8001ef0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	7f5b      	ldrb	r3, [r3, #29]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d108      	bne.n	8001f0c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f042 0204 	orr.w	r2, r2, #4
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	e007      	b.n	8001f1c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f022 0204 	bic.w	r2, r2, #4
 8001f1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689a      	ldr	r2, [r3, #8]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	431a      	orrs	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	695b      	ldr	r3, [r3, #20]
 8001f30:	ea42 0103 	orr.w	r1, r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	1e5a      	subs	r2, r3, #1
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HAL_CAN_DeInit>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b082      	sub	sp, #8
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
  /* Check CAN handle */
  if (hcan == NULL)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d101      	bne.n	8001f6c <HAL_CAN_DeInit+0x12>
  {
    return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e015      	b.n	8001f98 <HAL_CAN_DeInit+0x3e>

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));

  /* Stop the CAN module */
  (void)HAL_CAN_Stop(hcan);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 f939 	bl	80021e4 <HAL_CAN_Stop>
  /* DeInit the low level hardware: CLOCK, NVIC */
  hcan->MspDeInitCallback(hcan);

#else
  /* DeInit the low level hardware: CLOCK, NVIC */
  HAL_CAN_MspDeInit(hcan);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f7fe fba8 	bl	80006c8 <HAL_CAN_MspDeInit>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Reset the CAN peripheral */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f86:	601a      	str	r2, [r3, #0]

  /* Reset the CAN ErrorCode */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change CAN state */
  hcan->State = HAL_CAN_STATE_RESET;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3708      	adds	r7, #8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b087      	sub	sp, #28
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fb0:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 8001fb2:	7dfb      	ldrb	r3, [r7, #23]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d003      	beq.n	8001fc0 <HAL_CAN_ConfigFilter+0x20>
 8001fb8:	7dfb      	ldrb	r3, [r7, #23]
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	f040 80be 	bne.w	800213c <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001fc0:	4b65      	ldr	r3, [pc, #404]	@ (8002158 <HAL_CAN_ConfigFilter+0x1b8>)
 8001fc2:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001fca:	f043 0201 	orr.w	r2, r3, #1
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001fda:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fee:	021b      	lsls	r3, r3, #8
 8001ff0:	431a      	orrs	r2, r3
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	695b      	ldr	r3, [r3, #20]
 8001ffc:	f003 031f 	and.w	r3, r3, #31
 8002000:	2201      	movs	r2, #1
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	43db      	mvns	r3, r3
 8002012:	401a      	ands	r2, r3
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d123      	bne.n	800206a <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	43db      	mvns	r3, r3
 800202c:	401a      	ands	r2, r3
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002044:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	3248      	adds	r2, #72	@ 0x48
 800204a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800205e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002060:	6939      	ldr	r1, [r7, #16]
 8002062:	3348      	adds	r3, #72	@ 0x48
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	440b      	add	r3, r1
 8002068:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d122      	bne.n	80020b8 <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	431a      	orrs	r2, r3
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002092:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	3248      	adds	r2, #72	@ 0x48
 8002098:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80020ac:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80020ae:	6939      	ldr	r1, [r7, #16]
 80020b0:	3348      	adds	r3, #72	@ 0x48
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	440b      	add	r3, r1
 80020b6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d109      	bne.n	80020d4 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	43db      	mvns	r3, r3
 80020ca:	401a      	ands	r2, r3
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80020d2:	e007      	b.n	80020e4 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	431a      	orrs	r2, r3
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	691b      	ldr	r3, [r3, #16]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d109      	bne.n	8002100 <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	43db      	mvns	r3, r3
 80020f6:	401a      	ands	r2, r3
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80020fe:	e007      	b.n	8002110 <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	431a      	orrs	r2, r3
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d107      	bne.n	8002128 <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	431a      	orrs	r2, r3
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800212e:	f023 0201 	bic.w	r2, r3, #1
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002138:	2300      	movs	r3, #0
 800213a:	e006      	b.n	800214a <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002140:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
  }
}
 800214a:	4618      	mov	r0, r3
 800214c:	371c      	adds	r7, #28
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	40006400 	.word	0x40006400

0800215c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f893 3020 	ldrb.w	r3, [r3, #32]
 800216a:	b2db      	uxtb	r3, r3
 800216c:	2b01      	cmp	r3, #1
 800216e:	d12e      	bne.n	80021ce <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2202      	movs	r2, #2
 8002174:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 0201 	bic.w	r2, r2, #1
 8002186:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002188:	f7ff fdbc 	bl	8001d04 <HAL_GetTick>
 800218c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800218e:	e012      	b.n	80021b6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002190:	f7ff fdb8 	bl	8001d04 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b0a      	cmp	r3, #10
 800219c:	d90b      	bls.n	80021b6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2205      	movs	r2, #5
 80021ae:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e012      	b.n	80021dc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f003 0301 	and.w	r3, r3, #1
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1e5      	bne.n	8002190 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80021ca:	2300      	movs	r3, #0
 80021cc:	e006      	b.n	80021dc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
  }
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3710      	adds	r7, #16
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d133      	bne.n	8002260 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f042 0201 	orr.w	r2, r2, #1
 8002206:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002208:	f7ff fd7c 	bl	8001d04 <HAL_GetTick>
 800220c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800220e:	e012      	b.n	8002236 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002210:	f7ff fd78 	bl	8001d04 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b0a      	cmp	r3, #10
 800221c:	d90b      	bls.n	8002236 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002222:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2205      	movs	r2, #5
 800222e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e01b      	b.n	800226e <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f003 0301 	and.w	r3, r3, #1
 8002240:	2b00      	cmp	r3, #0
 8002242:	d0e5      	beq.n	8002210 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f022 0202 	bic.w	r2, r2, #2
 8002252:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 800225c:	2300      	movs	r3, #0
 800225e:	e006      	b.n	800226e <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002264:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
  }
}
 800226e:	4618      	mov	r0, r3
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002276:	b480      	push	{r7}
 8002278:	b089      	sub	sp, #36	@ 0x24
 800227a:	af00      	add	r7, sp, #0
 800227c:	60f8      	str	r0, [r7, #12]
 800227e:	60b9      	str	r1, [r7, #8]
 8002280:	607a      	str	r2, [r7, #4]
 8002282:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f893 3020 	ldrb.w	r3, [r3, #32]
 800228a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002294:	7ffb      	ldrb	r3, [r7, #31]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d003      	beq.n	80022a2 <HAL_CAN_AddTxMessage+0x2c>
 800229a:	7ffb      	ldrb	r3, [r7, #31]
 800229c:	2b02      	cmp	r3, #2
 800229e:	f040 80ad 	bne.w	80023fc <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d10a      	bne.n	80022c2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d105      	bne.n	80022c2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f000 8095 	beq.w	80023ec <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	0e1b      	lsrs	r3, r3, #24
 80022c6:	f003 0303 	and.w	r3, r3, #3
 80022ca:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80022cc:	2201      	movs	r2, #1
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	409a      	lsls	r2, r3
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10d      	bne.n	80022fa <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80022e8:	68f9      	ldr	r1, [r7, #12]
 80022ea:	6809      	ldr	r1, [r1, #0]
 80022ec:	431a      	orrs	r2, r3
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	3318      	adds	r3, #24
 80022f2:	011b      	lsls	r3, r3, #4
 80022f4:	440b      	add	r3, r1
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	e00f      	b.n	800231a <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002304:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800230a:	68f9      	ldr	r1, [r7, #12]
 800230c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800230e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	3318      	adds	r3, #24
 8002314:	011b      	lsls	r3, r3, #4
 8002316:	440b      	add	r3, r1
 8002318:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6819      	ldr	r1, [r3, #0]
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	691a      	ldr	r2, [r3, #16]
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	3318      	adds	r3, #24
 8002326:	011b      	lsls	r3, r3, #4
 8002328:	440b      	add	r3, r1
 800232a:	3304      	adds	r3, #4
 800232c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	7d1b      	ldrb	r3, [r3, #20]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d111      	bne.n	800235a <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	3318      	adds	r3, #24
 800233e:	011b      	lsls	r3, r3, #4
 8002340:	4413      	add	r3, r2
 8002342:	3304      	adds	r3, #4
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	6811      	ldr	r1, [r2, #0]
 800234a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	3318      	adds	r3, #24
 8002352:	011b      	lsls	r3, r3, #4
 8002354:	440b      	add	r3, r1
 8002356:	3304      	adds	r3, #4
 8002358:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	3307      	adds	r3, #7
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	061a      	lsls	r2, r3, #24
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	3306      	adds	r3, #6
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	041b      	lsls	r3, r3, #16
 800236a:	431a      	orrs	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3305      	adds	r3, #5
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	021b      	lsls	r3, r3, #8
 8002374:	4313      	orrs	r3, r2
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	3204      	adds	r2, #4
 800237a:	7812      	ldrb	r2, [r2, #0]
 800237c:	4610      	mov	r0, r2
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	6811      	ldr	r1, [r2, #0]
 8002382:	ea43 0200 	orr.w	r2, r3, r0
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	011b      	lsls	r3, r3, #4
 800238a:	440b      	add	r3, r1
 800238c:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002390:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	3303      	adds	r3, #3
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	061a      	lsls	r2, r3, #24
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	3302      	adds	r3, #2
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	041b      	lsls	r3, r3, #16
 80023a2:	431a      	orrs	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	3301      	adds	r3, #1
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	021b      	lsls	r3, r3, #8
 80023ac:	4313      	orrs	r3, r2
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	7812      	ldrb	r2, [r2, #0]
 80023b2:	4610      	mov	r0, r2
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	6811      	ldr	r1, [r2, #0]
 80023b8:	ea43 0200 	orr.w	r2, r3, r0
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	011b      	lsls	r3, r3, #4
 80023c0:	440b      	add	r3, r1
 80023c2:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80023c6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	3318      	adds	r3, #24
 80023d0:	011b      	lsls	r3, r3, #4
 80023d2:	4413      	add	r3, r2
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	6811      	ldr	r1, [r2, #0]
 80023da:	f043 0201 	orr.w	r2, r3, #1
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	3318      	adds	r3, #24
 80023e2:	011b      	lsls	r3, r3, #4
 80023e4:	440b      	add	r3, r1
 80023e6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80023e8:	2300      	movs	r3, #0
 80023ea:	e00e      	b.n	800240a <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e006      	b.n	800240a <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002400:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
  }
}
 800240a:	4618      	mov	r0, r3
 800240c:	3724      	adds	r7, #36	@ 0x24
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr

08002416 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002416:	b480      	push	{r7}
 8002418:	b087      	sub	sp, #28
 800241a:	af00      	add	r7, sp, #0
 800241c:	60f8      	str	r0, [r7, #12]
 800241e:	60b9      	str	r1, [r7, #8]
 8002420:	607a      	str	r2, [r7, #4]
 8002422:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f893 3020 	ldrb.w	r3, [r3, #32]
 800242a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800242c:	7dfb      	ldrb	r3, [r7, #23]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d003      	beq.n	800243a <HAL_CAN_GetRxMessage+0x24>
 8002432:	7dfb      	ldrb	r3, [r7, #23]
 8002434:	2b02      	cmp	r3, #2
 8002436:	f040 8103 	bne.w	8002640 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d10e      	bne.n	800245e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	f003 0303 	and.w	r3, r3, #3
 800244a:	2b00      	cmp	r3, #0
 800244c:	d116      	bne.n	800247c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002452:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e0f7      	b.n	800264e <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	f003 0303 	and.w	r3, r3, #3
 8002468:	2b00      	cmp	r3, #0
 800246a:	d107      	bne.n	800247c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002470:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e0e8      	b.n	800264e <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	331b      	adds	r3, #27
 8002484:	011b      	lsls	r3, r3, #4
 8002486:	4413      	add	r3, r2
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0204 	and.w	r2, r3, #4
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d10c      	bne.n	80024b4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	331b      	adds	r3, #27
 80024a2:	011b      	lsls	r3, r3, #4
 80024a4:	4413      	add	r3, r2
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	0d5b      	lsrs	r3, r3, #21
 80024aa:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	e00b      	b.n	80024cc <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	331b      	adds	r3, #27
 80024bc:	011b      	lsls	r3, r3, #4
 80024be:	4413      	add	r3, r2
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	08db      	lsrs	r3, r3, #3
 80024c4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	331b      	adds	r3, #27
 80024d4:	011b      	lsls	r3, r3, #4
 80024d6:	4413      	add	r3, r2
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0202 	and.w	r2, r3, #2
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	331b      	adds	r3, #27
 80024ea:	011b      	lsls	r3, r3, #4
 80024ec:	4413      	add	r3, r2
 80024ee:	3304      	adds	r3, #4
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0308 	and.w	r3, r3, #8
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2208      	movs	r2, #8
 80024fe:	611a      	str	r2, [r3, #16]
 8002500:	e00b      	b.n	800251a <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	331b      	adds	r3, #27
 800250a:	011b      	lsls	r3, r3, #4
 800250c:	4413      	add	r3, r2
 800250e:	3304      	adds	r3, #4
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 020f 	and.w	r2, r3, #15
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	331b      	adds	r3, #27
 8002522:	011b      	lsls	r3, r3, #4
 8002524:	4413      	add	r3, r2
 8002526:	3304      	adds	r3, #4
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	0a1b      	lsrs	r3, r3, #8
 800252c:	b2da      	uxtb	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	331b      	adds	r3, #27
 800253a:	011b      	lsls	r3, r3, #4
 800253c:	4413      	add	r3, r2
 800253e:	3304      	adds	r3, #4
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	0c1b      	lsrs	r3, r3, #16
 8002544:	b29a      	uxth	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	011b      	lsls	r3, r3, #4
 8002552:	4413      	add	r3, r2
 8002554:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	b2da      	uxtb	r2, r3
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	011b      	lsls	r3, r3, #4
 8002568:	4413      	add	r3, r2
 800256a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	0a1a      	lsrs	r2, r3, #8
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	3301      	adds	r3, #1
 8002576:	b2d2      	uxtb	r2, r2
 8002578:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	011b      	lsls	r3, r3, #4
 8002582:	4413      	add	r3, r2
 8002584:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	0c1a      	lsrs	r2, r3, #16
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	3302      	adds	r3, #2
 8002590:	b2d2      	uxtb	r2, r2
 8002592:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	011b      	lsls	r3, r3, #4
 800259c:	4413      	add	r3, r2
 800259e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	0e1a      	lsrs	r2, r3, #24
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	3303      	adds	r3, #3
 80025aa:	b2d2      	uxtb	r2, r2
 80025ac:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	011b      	lsls	r3, r3, #4
 80025b6:	4413      	add	r3, r2
 80025b8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	3304      	adds	r3, #4
 80025c2:	b2d2      	uxtb	r2, r2
 80025c4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	011b      	lsls	r3, r3, #4
 80025ce:	4413      	add	r3, r2
 80025d0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	0a1a      	lsrs	r2, r3, #8
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	3305      	adds	r3, #5
 80025dc:	b2d2      	uxtb	r2, r2
 80025de:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	011b      	lsls	r3, r3, #4
 80025e8:	4413      	add	r3, r2
 80025ea:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	0c1a      	lsrs	r2, r3, #16
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	3306      	adds	r3, #6
 80025f6:	b2d2      	uxtb	r2, r2
 80025f8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	011b      	lsls	r3, r3, #4
 8002602:	4413      	add	r3, r2
 8002604:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	0e1a      	lsrs	r2, r3, #24
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	3307      	adds	r3, #7
 8002610:	b2d2      	uxtb	r2, r2
 8002612:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d108      	bne.n	800262c <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68da      	ldr	r2, [r3, #12]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f042 0220 	orr.w	r2, r2, #32
 8002628:	60da      	str	r2, [r3, #12]
 800262a:	e007      	b.n	800263c <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	691a      	ldr	r2, [r3, #16]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f042 0220 	orr.w	r2, r2, #32
 800263a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800263c:	2300      	movs	r3, #0
 800263e:	e006      	b.n	800264e <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002644:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
  }
}
 800264e:	4618      	mov	r0, r3
 8002650:	371c      	adds	r7, #28
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800265a:	b480      	push	{r7}
 800265c:	b085      	sub	sp, #20
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
 8002662:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f893 3020 	ldrb.w	r3, [r3, #32]
 800266a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800266c:	7bfb      	ldrb	r3, [r7, #15]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d002      	beq.n	8002678 <HAL_CAN_ActivateNotification+0x1e>
 8002672:	7bfb      	ldrb	r3, [r7, #15]
 8002674:	2b02      	cmp	r3, #2
 8002676:	d109      	bne.n	800268c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6959      	ldr	r1, [r3, #20]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	683a      	ldr	r2, [r7, #0]
 8002684:	430a      	orrs	r2, r1
 8002686:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002688:	2300      	movs	r3, #0
 800268a:	e006      	b.n	800269a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002690:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
  }
}
 800269a:	4618      	mov	r0, r3
 800269c:	3714      	adds	r7, #20
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b08a      	sub	sp, #40	@ 0x28
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80026ae:	2300      	movs	r3, #0
 80026b0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80026e2:	6a3b      	ldr	r3, [r7, #32]
 80026e4:	f003 0301 	and.w	r3, r3, #1
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d07c      	beq.n	80027e6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d023      	beq.n	800273e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2201      	movs	r2, #1
 80026fc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d003      	beq.n	8002710 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f7ff fa1b 	bl	8001b44 <HAL_CAN_TxMailbox0CompleteCallback>
 800270e:	e016      	b.n	800273e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	f003 0304 	and.w	r3, r3, #4
 8002716:	2b00      	cmp	r3, #0
 8002718:	d004      	beq.n	8002724 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800271a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800271c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002720:	627b      	str	r3, [r7, #36]	@ 0x24
 8002722:	e00c      	b.n	800273e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	f003 0308 	and.w	r3, r3, #8
 800272a:	2b00      	cmp	r3, #0
 800272c:	d004      	beq.n	8002738 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800272e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002730:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002734:	627b      	str	r3, [r7, #36]	@ 0x24
 8002736:	e002      	b.n	800273e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f7ff fa33 	bl	8001ba4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002744:	2b00      	cmp	r3, #0
 8002746:	d024      	beq.n	8002792 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002750:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002758:	2b00      	cmp	r3, #0
 800275a:	d003      	beq.n	8002764 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f7ff fa01 	bl	8001b64 <HAL_CAN_TxMailbox1CompleteCallback>
 8002762:	e016      	b.n	8002792 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800276a:	2b00      	cmp	r3, #0
 800276c:	d004      	beq.n	8002778 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800276e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002770:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002774:	627b      	str	r3, [r7, #36]	@ 0x24
 8002776:	e00c      	b.n	8002792 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800277e:	2b00      	cmp	r3, #0
 8002780:	d004      	beq.n	800278c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002784:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002788:	627b      	str	r3, [r7, #36]	@ 0x24
 800278a:	e002      	b.n	8002792 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f000 f941 	bl	8002a14 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d024      	beq.n	80027e6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80027a4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d003      	beq.n	80027b8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f7ff f9e7 	bl	8001b84 <HAL_CAN_TxMailbox2CompleteCallback>
 80027b6:	e016      	b.n	80027e6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d004      	beq.n	80027cc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80027c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80027ca:	e00c      	b.n	80027e6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d004      	beq.n	80027e0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80027d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80027de:	e002      	b.n	80027e6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f000 f921 	bl	8002a28 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80027e6:	6a3b      	ldr	r3, [r7, #32]
 80027e8:	f003 0308 	and.w	r3, r3, #8
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00c      	beq.n	800280a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	f003 0310 	and.w	r3, r3, #16
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d007      	beq.n	800280a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80027fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002800:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2210      	movs	r2, #16
 8002808:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800280a:	6a3b      	ldr	r3, [r7, #32]
 800280c:	f003 0304 	and.w	r3, r3, #4
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00b      	beq.n	800282c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	f003 0308 	and.w	r3, r3, #8
 800281a:	2b00      	cmp	r3, #0
 800281c:	d006      	beq.n	800282c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2208      	movs	r2, #8
 8002824:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 f908 	bl	8002a3c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800282c:	6a3b      	ldr	r3, [r7, #32]
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d009      	beq.n	800284a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	f003 0303 	and.w	r3, r3, #3
 8002840:	2b00      	cmp	r3, #0
 8002842:	d002      	beq.n	800284a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f7fd ff69 	bl	800071c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800284a:	6a3b      	ldr	r3, [r7, #32]
 800284c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002850:	2b00      	cmp	r3, #0
 8002852:	d00c      	beq.n	800286e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	f003 0310 	and.w	r3, r3, #16
 800285a:	2b00      	cmp	r3, #0
 800285c:	d007      	beq.n	800286e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800285e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002860:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002864:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2210      	movs	r2, #16
 800286c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800286e:	6a3b      	ldr	r3, [r7, #32]
 8002870:	f003 0320 	and.w	r3, r3, #32
 8002874:	2b00      	cmp	r3, #0
 8002876:	d00b      	beq.n	8002890 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	f003 0308 	and.w	r3, r3, #8
 800287e:	2b00      	cmp	r3, #0
 8002880:	d006      	beq.n	8002890 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2208      	movs	r2, #8
 8002888:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 f8ea 	bl	8002a64 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002890:	6a3b      	ldr	r3, [r7, #32]
 8002892:	f003 0310 	and.w	r3, r3, #16
 8002896:	2b00      	cmp	r3, #0
 8002898:	d009      	beq.n	80028ae <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	f003 0303 	and.w	r3, r3, #3
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d002      	beq.n	80028ae <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 f8d1 	bl	8002a50 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80028ae:	6a3b      	ldr	r3, [r7, #32]
 80028b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d00b      	beq.n	80028d0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	f003 0310 	and.w	r3, r3, #16
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d006      	beq.n	80028d0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2210      	movs	r2, #16
 80028c8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 f8d4 	bl	8002a78 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80028d0:	6a3b      	ldr	r3, [r7, #32]
 80028d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00b      	beq.n	80028f2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	f003 0308 	and.w	r3, r3, #8
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d006      	beq.n	80028f2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2208      	movs	r2, #8
 80028ea:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f000 f8cd 	bl	8002a8c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80028f2:	6a3b      	ldr	r3, [r7, #32]
 80028f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d07b      	beq.n	80029f4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	f003 0304 	and.w	r3, r3, #4
 8002902:	2b00      	cmp	r3, #0
 8002904:	d072      	beq.n	80029ec <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002906:	6a3b      	ldr	r3, [r7, #32]
 8002908:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800290c:	2b00      	cmp	r3, #0
 800290e:	d008      	beq.n	8002922 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800291a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291c:	f043 0301 	orr.w	r3, r3, #1
 8002920:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002922:	6a3b      	ldr	r3, [r7, #32]
 8002924:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002928:	2b00      	cmp	r3, #0
 800292a:	d008      	beq.n	800293e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002932:	2b00      	cmp	r3, #0
 8002934:	d003      	beq.n	800293e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002938:	f043 0302 	orr.w	r3, r3, #2
 800293c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800293e:	6a3b      	ldr	r3, [r7, #32]
 8002940:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002944:	2b00      	cmp	r3, #0
 8002946:	d008      	beq.n	800295a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800294e:	2b00      	cmp	r3, #0
 8002950:	d003      	beq.n	800295a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002954:	f043 0304 	orr.w	r3, r3, #4
 8002958:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800295a:	6a3b      	ldr	r3, [r7, #32]
 800295c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002960:	2b00      	cmp	r3, #0
 8002962:	d043      	beq.n	80029ec <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800296a:	2b00      	cmp	r3, #0
 800296c:	d03e      	beq.n	80029ec <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002974:	2b60      	cmp	r3, #96	@ 0x60
 8002976:	d02b      	beq.n	80029d0 <HAL_CAN_IRQHandler+0x32a>
 8002978:	2b60      	cmp	r3, #96	@ 0x60
 800297a:	d82e      	bhi.n	80029da <HAL_CAN_IRQHandler+0x334>
 800297c:	2b50      	cmp	r3, #80	@ 0x50
 800297e:	d022      	beq.n	80029c6 <HAL_CAN_IRQHandler+0x320>
 8002980:	2b50      	cmp	r3, #80	@ 0x50
 8002982:	d82a      	bhi.n	80029da <HAL_CAN_IRQHandler+0x334>
 8002984:	2b40      	cmp	r3, #64	@ 0x40
 8002986:	d019      	beq.n	80029bc <HAL_CAN_IRQHandler+0x316>
 8002988:	2b40      	cmp	r3, #64	@ 0x40
 800298a:	d826      	bhi.n	80029da <HAL_CAN_IRQHandler+0x334>
 800298c:	2b30      	cmp	r3, #48	@ 0x30
 800298e:	d010      	beq.n	80029b2 <HAL_CAN_IRQHandler+0x30c>
 8002990:	2b30      	cmp	r3, #48	@ 0x30
 8002992:	d822      	bhi.n	80029da <HAL_CAN_IRQHandler+0x334>
 8002994:	2b10      	cmp	r3, #16
 8002996:	d002      	beq.n	800299e <HAL_CAN_IRQHandler+0x2f8>
 8002998:	2b20      	cmp	r3, #32
 800299a:	d005      	beq.n	80029a8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800299c:	e01d      	b.n	80029da <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800299e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a0:	f043 0308 	orr.w	r3, r3, #8
 80029a4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80029a6:	e019      	b.n	80029dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80029a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029aa:	f043 0310 	orr.w	r3, r3, #16
 80029ae:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80029b0:	e014      	b.n	80029dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80029b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b4:	f043 0320 	orr.w	r3, r3, #32
 80029b8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80029ba:	e00f      	b.n	80029dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80029bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80029c2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80029c4:	e00a      	b.n	80029dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80029c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029cc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80029ce:	e005      	b.n	80029dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80029d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029d6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80029d8:	e000      	b.n	80029dc <HAL_CAN_IRQHandler+0x336>
            break;
 80029da:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	699a      	ldr	r2, [r3, #24]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80029ea:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2204      	movs	r2, #4
 80029f2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80029f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d008      	beq.n	8002a0c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a00:	431a      	orrs	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f7ff f8dc 	bl	8001bc4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002a0c:	bf00      	nop
 8002a0e:	3728      	adds	r7, #40	@ 0x28
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f003 0307 	and.w	r3, r3, #7
 8002aae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ab6:	68ba      	ldr	r2, [r7, #8]
 8002ab8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002abc:	4013      	ands	r3, r2
 8002abe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ac8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002acc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ad0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ad2:	4a04      	ldr	r2, [pc, #16]	@ (8002ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	60d3      	str	r3, [r2, #12]
}
 8002ad8:	bf00      	nop
 8002ada:	3714      	adds	r7, #20
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	e000ed00 	.word	0xe000ed00

08002ae8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002aec:	4b04      	ldr	r3, [pc, #16]	@ (8002b00 <__NVIC_GetPriorityGrouping+0x18>)
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	0a1b      	lsrs	r3, r3, #8
 8002af2:	f003 0307 	and.w	r3, r3, #7
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr
 8002b00:	e000ed00 	.word	0xe000ed00

08002b04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	db0b      	blt.n	8002b2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b16:	79fb      	ldrb	r3, [r7, #7]
 8002b18:	f003 021f 	and.w	r2, r3, #31
 8002b1c:	4907      	ldr	r1, [pc, #28]	@ (8002b3c <__NVIC_EnableIRQ+0x38>)
 8002b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b22:	095b      	lsrs	r3, r3, #5
 8002b24:	2001      	movs	r0, #1
 8002b26:	fa00 f202 	lsl.w	r2, r0, r2
 8002b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	e000e100 	.word	0xe000e100

08002b40 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	4603      	mov	r3, r0
 8002b48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	db12      	blt.n	8002b78 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b52:	79fb      	ldrb	r3, [r7, #7]
 8002b54:	f003 021f 	and.w	r2, r3, #31
 8002b58:	490a      	ldr	r1, [pc, #40]	@ (8002b84 <__NVIC_DisableIRQ+0x44>)
 8002b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5e:	095b      	lsrs	r3, r3, #5
 8002b60:	2001      	movs	r0, #1
 8002b62:	fa00 f202 	lsl.w	r2, r0, r2
 8002b66:	3320      	adds	r3, #32
 8002b68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002b6c:	f3bf 8f4f 	dsb	sy
}
 8002b70:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002b72:	f3bf 8f6f 	isb	sy
}
 8002b76:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	e000e100 	.word	0xe000e100

08002b88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	4603      	mov	r3, r0
 8002b90:	6039      	str	r1, [r7, #0]
 8002b92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	db0a      	blt.n	8002bb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	b2da      	uxtb	r2, r3
 8002ba0:	490c      	ldr	r1, [pc, #48]	@ (8002bd4 <__NVIC_SetPriority+0x4c>)
 8002ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba6:	0112      	lsls	r2, r2, #4
 8002ba8:	b2d2      	uxtb	r2, r2
 8002baa:	440b      	add	r3, r1
 8002bac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bb0:	e00a      	b.n	8002bc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	b2da      	uxtb	r2, r3
 8002bb6:	4908      	ldr	r1, [pc, #32]	@ (8002bd8 <__NVIC_SetPriority+0x50>)
 8002bb8:	79fb      	ldrb	r3, [r7, #7]
 8002bba:	f003 030f 	and.w	r3, r3, #15
 8002bbe:	3b04      	subs	r3, #4
 8002bc0:	0112      	lsls	r2, r2, #4
 8002bc2:	b2d2      	uxtb	r2, r2
 8002bc4:	440b      	add	r3, r1
 8002bc6:	761a      	strb	r2, [r3, #24]
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	e000e100 	.word	0xe000e100
 8002bd8:	e000ed00 	.word	0xe000ed00

08002bdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b089      	sub	sp, #36	@ 0x24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f003 0307 	and.w	r3, r3, #7
 8002bee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	f1c3 0307 	rsb	r3, r3, #7
 8002bf6:	2b04      	cmp	r3, #4
 8002bf8:	bf28      	it	cs
 8002bfa:	2304      	movcs	r3, #4
 8002bfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	3304      	adds	r3, #4
 8002c02:	2b06      	cmp	r3, #6
 8002c04:	d902      	bls.n	8002c0c <NVIC_EncodePriority+0x30>
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	3b03      	subs	r3, #3
 8002c0a:	e000      	b.n	8002c0e <NVIC_EncodePriority+0x32>
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c10:	f04f 32ff 	mov.w	r2, #4294967295
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1a:	43da      	mvns	r2, r3
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	401a      	ands	r2, r3
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c24:	f04f 31ff 	mov.w	r1, #4294967295
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c2e:	43d9      	mvns	r1, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c34:	4313      	orrs	r3, r2
         );
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3724      	adds	r7, #36	@ 0x24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
	...

08002c44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c54:	d301      	bcc.n	8002c5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c56:	2301      	movs	r3, #1
 8002c58:	e00f      	b.n	8002c7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c5a:	4a0a      	ldr	r2, [pc, #40]	@ (8002c84 <SysTick_Config+0x40>)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c62:	210f      	movs	r1, #15
 8002c64:	f04f 30ff 	mov.w	r0, #4294967295
 8002c68:	f7ff ff8e 	bl	8002b88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c6c:	4b05      	ldr	r3, [pc, #20]	@ (8002c84 <SysTick_Config+0x40>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c72:	4b04      	ldr	r3, [pc, #16]	@ (8002c84 <SysTick_Config+0x40>)
 8002c74:	2207      	movs	r2, #7
 8002c76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	e000e010 	.word	0xe000e010

08002c88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f7ff ff05 	bl	8002aa0 <__NVIC_SetPriorityGrouping>
}
 8002c96:	bf00      	nop
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b086      	sub	sp, #24
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	60b9      	str	r1, [r7, #8]
 8002ca8:	607a      	str	r2, [r7, #4]
 8002caa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cac:	2300      	movs	r3, #0
 8002cae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cb0:	f7ff ff1a 	bl	8002ae8 <__NVIC_GetPriorityGrouping>
 8002cb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	68b9      	ldr	r1, [r7, #8]
 8002cba:	6978      	ldr	r0, [r7, #20]
 8002cbc:	f7ff ff8e 	bl	8002bdc <NVIC_EncodePriority>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cc6:	4611      	mov	r1, r2
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7ff ff5d 	bl	8002b88 <__NVIC_SetPriority>
}
 8002cce:	bf00      	nop
 8002cd0:	3718      	adds	r7, #24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b082      	sub	sp, #8
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	4603      	mov	r3, r0
 8002cde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff ff0d 	bl	8002b04 <__NVIC_EnableIRQ>
}
 8002cea:	bf00      	nop
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b082      	sub	sp, #8
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7ff ff1d 	bl	8002b40 <__NVIC_DisableIRQ>
}
 8002d06:	bf00      	nop
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b082      	sub	sp, #8
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f7ff ff94 	bl	8002c44 <SysTick_Config>
 8002d1c:	4603      	mov	r3, r0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
	...

08002d28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d30:	2300      	movs	r3, #0
 8002d32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d34:	f7fe ffe6 	bl	8001d04 <HAL_GetTick>
 8002d38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d101      	bne.n	8002d44 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e099      	b.n	8002e78 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2202      	movs	r2, #2
 8002d48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 0201 	bic.w	r2, r2, #1
 8002d62:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d64:	e00f      	b.n	8002d86 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d66:	f7fe ffcd 	bl	8001d04 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b05      	cmp	r3, #5
 8002d72:	d908      	bls.n	8002d86 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2220      	movs	r2, #32
 8002d78:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2203      	movs	r2, #3
 8002d7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e078      	b.n	8002e78 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1e8      	bne.n	8002d66 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	4b38      	ldr	r3, [pc, #224]	@ (8002e80 <HAL_DMA_Init+0x158>)
 8002da0:	4013      	ands	r3, r2
 8002da2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002db2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a1b      	ldr	r3, [r3, #32]
 8002dd0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ddc:	2b04      	cmp	r3, #4
 8002dde:	d107      	bne.n	8002df0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de8:	4313      	orrs	r3, r2
 8002dea:	697a      	ldr	r2, [r7, #20]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	697a      	ldr	r2, [r7, #20]
 8002df6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	f023 0307 	bic.w	r3, r3, #7
 8002e06:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e16:	2b04      	cmp	r3, #4
 8002e18:	d117      	bne.n	8002e4a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00e      	beq.n	8002e4a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f000 fad9 	bl	80033e4 <DMA_CheckFifoParam>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d008      	beq.n	8002e4a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2240      	movs	r2, #64	@ 0x40
 8002e3c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002e46:	2301      	movs	r3, #1
 8002e48:	e016      	b.n	8002e78 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 fa90 	bl	8003378 <DMA_CalcBaseAndBitshift>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e60:	223f      	movs	r2, #63	@ 0x3f
 8002e62:	409a      	lsls	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2201      	movs	r2, #1
 8002e72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3718      	adds	r7, #24
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	f010803f 	.word	0xf010803f

08002e84 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e050      	b.n	8002f38 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d101      	bne.n	8002ea6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	e048      	b.n	8002f38 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 0201 	bic.w	r2, r2, #1
 8002eb4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2200      	movs	r2, #0
 8002edc:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2221      	movs	r2, #33	@ 0x21
 8002ee4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 fa46 	bl	8003378 <DMA_CalcBaseAndBitshift>
 8002eec:	4603      	mov	r3, r0
 8002eee:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f18:	223f      	movs	r2, #63	@ 0x3f
 8002f1a:	409a      	lsls	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3710      	adds	r7, #16
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f4c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002f4e:	f7fe fed9 	bl	8001d04 <HAL_GetTick>
 8002f52:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d008      	beq.n	8002f72 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2280      	movs	r2, #128	@ 0x80
 8002f64:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e052      	b.n	8003018 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 0216 	bic.w	r2, r2, #22
 8002f80:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	695a      	ldr	r2, [r3, #20]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f90:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d103      	bne.n	8002fa2 <HAL_DMA_Abort+0x62>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d007      	beq.n	8002fb2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f022 0208 	bic.w	r2, r2, #8
 8002fb0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f022 0201 	bic.w	r2, r2, #1
 8002fc0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fc2:	e013      	b.n	8002fec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fc4:	f7fe fe9e 	bl	8001d04 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b05      	cmp	r3, #5
 8002fd0:	d90c      	bls.n	8002fec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2220      	movs	r2, #32
 8002fd6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2203      	movs	r2, #3
 8002fdc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e015      	b.n	8003018 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1e4      	bne.n	8002fc4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ffe:	223f      	movs	r2, #63	@ 0x3f
 8003000:	409a      	lsls	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d004      	beq.n	800303e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2280      	movs	r2, #128	@ 0x80
 8003038:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e00c      	b.n	8003058 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2205      	movs	r2, #5
 8003042:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f022 0201 	bic.w	r2, r2, #1
 8003054:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800306c:	2300      	movs	r3, #0
 800306e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003070:	4b8e      	ldr	r3, [pc, #568]	@ (80032ac <HAL_DMA_IRQHandler+0x248>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a8e      	ldr	r2, [pc, #568]	@ (80032b0 <HAL_DMA_IRQHandler+0x24c>)
 8003076:	fba2 2303 	umull	r2, r3, r2, r3
 800307a:	0a9b      	lsrs	r3, r3, #10
 800307c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003082:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800308e:	2208      	movs	r2, #8
 8003090:	409a      	lsls	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	4013      	ands	r3, r2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d01a      	beq.n	80030d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0304 	and.w	r3, r3, #4
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d013      	beq.n	80030d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 0204 	bic.w	r2, r2, #4
 80030b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030bc:	2208      	movs	r2, #8
 80030be:	409a      	lsls	r2, r3
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030c8:	f043 0201 	orr.w	r2, r3, #1
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030d4:	2201      	movs	r2, #1
 80030d6:	409a      	lsls	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	4013      	ands	r3, r2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d012      	beq.n	8003106 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00b      	beq.n	8003106 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030f2:	2201      	movs	r2, #1
 80030f4:	409a      	lsls	r2, r3
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030fe:	f043 0202 	orr.w	r2, r3, #2
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800310a:	2204      	movs	r2, #4
 800310c:	409a      	lsls	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	4013      	ands	r3, r2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d012      	beq.n	800313c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00b      	beq.n	800313c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003128:	2204      	movs	r2, #4
 800312a:	409a      	lsls	r2, r3
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003134:	f043 0204 	orr.w	r2, r3, #4
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003140:	2210      	movs	r2, #16
 8003142:	409a      	lsls	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	4013      	ands	r3, r2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d043      	beq.n	80031d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0308 	and.w	r3, r3, #8
 8003156:	2b00      	cmp	r3, #0
 8003158:	d03c      	beq.n	80031d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800315e:	2210      	movs	r2, #16
 8003160:	409a      	lsls	r2, r3
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d018      	beq.n	80031a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d108      	bne.n	8003194 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003186:	2b00      	cmp	r3, #0
 8003188:	d024      	beq.n	80031d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	4798      	blx	r3
 8003192:	e01f      	b.n	80031d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003198:	2b00      	cmp	r3, #0
 800319a:	d01b      	beq.n	80031d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	4798      	blx	r3
 80031a4:	e016      	b.n	80031d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d107      	bne.n	80031c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f022 0208 	bic.w	r2, r2, #8
 80031c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d003      	beq.n	80031d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031d8:	2220      	movs	r2, #32
 80031da:	409a      	lsls	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	4013      	ands	r3, r2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f000 808f 	beq.w	8003304 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0310 	and.w	r3, r3, #16
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f000 8087 	beq.w	8003304 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031fa:	2220      	movs	r2, #32
 80031fc:	409a      	lsls	r2, r3
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b05      	cmp	r3, #5
 800320c:	d136      	bne.n	800327c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f022 0216 	bic.w	r2, r2, #22
 800321c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	695a      	ldr	r2, [r3, #20]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800322c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003232:	2b00      	cmp	r3, #0
 8003234:	d103      	bne.n	800323e <HAL_DMA_IRQHandler+0x1da>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800323a:	2b00      	cmp	r3, #0
 800323c:	d007      	beq.n	800324e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 0208 	bic.w	r2, r2, #8
 800324c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003252:	223f      	movs	r2, #63	@ 0x3f
 8003254:	409a      	lsls	r2, r3
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2201      	movs	r2, #1
 800325e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800326e:	2b00      	cmp	r3, #0
 8003270:	d07e      	beq.n	8003370 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	4798      	blx	r3
        }
        return;
 800327a:	e079      	b.n	8003370 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d01d      	beq.n	80032c6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d10d      	bne.n	80032b4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800329c:	2b00      	cmp	r3, #0
 800329e:	d031      	beq.n	8003304 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	4798      	blx	r3
 80032a8:	e02c      	b.n	8003304 <HAL_DMA_IRQHandler+0x2a0>
 80032aa:	bf00      	nop
 80032ac:	20000000 	.word	0x20000000
 80032b0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d023      	beq.n	8003304 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	4798      	blx	r3
 80032c4:	e01e      	b.n	8003304 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d10f      	bne.n	80032f4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f022 0210 	bic.w	r2, r2, #16
 80032e2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d003      	beq.n	8003304 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003308:	2b00      	cmp	r3, #0
 800330a:	d032      	beq.n	8003372 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	2b00      	cmp	r3, #0
 8003316:	d022      	beq.n	800335e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2205      	movs	r2, #5
 800331c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f022 0201 	bic.w	r2, r2, #1
 800332e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	3301      	adds	r3, #1
 8003334:	60bb      	str	r3, [r7, #8]
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	429a      	cmp	r2, r3
 800333a:	d307      	bcc.n	800334c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1f2      	bne.n	8003330 <HAL_DMA_IRQHandler+0x2cc>
 800334a:	e000      	b.n	800334e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800334c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2201      	movs	r2, #1
 8003352:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003362:	2b00      	cmp	r3, #0
 8003364:	d005      	beq.n	8003372 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	4798      	blx	r3
 800336e:	e000      	b.n	8003372 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003370:	bf00      	nop
    }
  }
}
 8003372:	3718      	adds	r7, #24
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	b2db      	uxtb	r3, r3
 8003386:	3b10      	subs	r3, #16
 8003388:	4a14      	ldr	r2, [pc, #80]	@ (80033dc <DMA_CalcBaseAndBitshift+0x64>)
 800338a:	fba2 2303 	umull	r2, r3, r2, r3
 800338e:	091b      	lsrs	r3, r3, #4
 8003390:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003392:	4a13      	ldr	r2, [pc, #76]	@ (80033e0 <DMA_CalcBaseAndBitshift+0x68>)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	4413      	add	r3, r2
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	461a      	mov	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2b03      	cmp	r3, #3
 80033a4:	d909      	bls.n	80033ba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80033ae:	f023 0303 	bic.w	r3, r3, #3
 80033b2:	1d1a      	adds	r2, r3, #4
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	659a      	str	r2, [r3, #88]	@ 0x58
 80033b8:	e007      	b.n	80033ca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80033c2:	f023 0303 	bic.w	r3, r3, #3
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3714      	adds	r7, #20
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	aaaaaaab 	.word	0xaaaaaaab
 80033e0:	0800cfc8 	.word	0x0800cfc8

080033e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033ec:	2300      	movs	r3, #0
 80033ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d11f      	bne.n	800343e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	2b03      	cmp	r3, #3
 8003402:	d856      	bhi.n	80034b2 <DMA_CheckFifoParam+0xce>
 8003404:	a201      	add	r2, pc, #4	@ (adr r2, 800340c <DMA_CheckFifoParam+0x28>)
 8003406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800340a:	bf00      	nop
 800340c:	0800341d 	.word	0x0800341d
 8003410:	0800342f 	.word	0x0800342f
 8003414:	0800341d 	.word	0x0800341d
 8003418:	080034b3 	.word	0x080034b3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003420:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d046      	beq.n	80034b6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800342c:	e043      	b.n	80034b6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003432:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003436:	d140      	bne.n	80034ba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800343c:	e03d      	b.n	80034ba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003446:	d121      	bne.n	800348c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	2b03      	cmp	r3, #3
 800344c:	d837      	bhi.n	80034be <DMA_CheckFifoParam+0xda>
 800344e:	a201      	add	r2, pc, #4	@ (adr r2, 8003454 <DMA_CheckFifoParam+0x70>)
 8003450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003454:	08003465 	.word	0x08003465
 8003458:	0800346b 	.word	0x0800346b
 800345c:	08003465 	.word	0x08003465
 8003460:	0800347d 	.word	0x0800347d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	73fb      	strb	r3, [r7, #15]
      break;
 8003468:	e030      	b.n	80034cc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800346e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d025      	beq.n	80034c2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800347a:	e022      	b.n	80034c2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003480:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003484:	d11f      	bne.n	80034c6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800348a:	e01c      	b.n	80034c6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	2b02      	cmp	r3, #2
 8003490:	d903      	bls.n	800349a <DMA_CheckFifoParam+0xb6>
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	2b03      	cmp	r3, #3
 8003496:	d003      	beq.n	80034a0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003498:	e018      	b.n	80034cc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	73fb      	strb	r3, [r7, #15]
      break;
 800349e:	e015      	b.n	80034cc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00e      	beq.n	80034ca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	73fb      	strb	r3, [r7, #15]
      break;
 80034b0:	e00b      	b.n	80034ca <DMA_CheckFifoParam+0xe6>
      break;
 80034b2:	bf00      	nop
 80034b4:	e00a      	b.n	80034cc <DMA_CheckFifoParam+0xe8>
      break;
 80034b6:	bf00      	nop
 80034b8:	e008      	b.n	80034cc <DMA_CheckFifoParam+0xe8>
      break;
 80034ba:	bf00      	nop
 80034bc:	e006      	b.n	80034cc <DMA_CheckFifoParam+0xe8>
      break;
 80034be:	bf00      	nop
 80034c0:	e004      	b.n	80034cc <DMA_CheckFifoParam+0xe8>
      break;
 80034c2:	bf00      	nop
 80034c4:	e002      	b.n	80034cc <DMA_CheckFifoParam+0xe8>
      break;   
 80034c6:	bf00      	nop
 80034c8:	e000      	b.n	80034cc <DMA_CheckFifoParam+0xe8>
      break;
 80034ca:	bf00      	nop
    }
  } 
  
  return status; 
 80034cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3714      	adds	r7, #20
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop

080034dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034dc:	b480      	push	{r7}
 80034de:	b089      	sub	sp, #36	@ 0x24
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034e6:	2300      	movs	r3, #0
 80034e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034ea:	2300      	movs	r3, #0
 80034ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80034ee:	2300      	movs	r3, #0
 80034f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034f2:	2300      	movs	r3, #0
 80034f4:	61fb      	str	r3, [r7, #28]
 80034f6:	e16b      	b.n	80037d0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034f8:	2201      	movs	r2, #1
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003500:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	697a      	ldr	r2, [r7, #20]
 8003508:	4013      	ands	r3, r2
 800350a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	429a      	cmp	r2, r3
 8003512:	f040 815a 	bne.w	80037ca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f003 0303 	and.w	r3, r3, #3
 800351e:	2b01      	cmp	r3, #1
 8003520:	d005      	beq.n	800352e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800352a:	2b02      	cmp	r3, #2
 800352c:	d130      	bne.n	8003590 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	005b      	lsls	r3, r3, #1
 8003538:	2203      	movs	r2, #3
 800353a:	fa02 f303 	lsl.w	r3, r2, r3
 800353e:	43db      	mvns	r3, r3
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	4013      	ands	r3, r2
 8003544:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	68da      	ldr	r2, [r3, #12]
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	fa02 f303 	lsl.w	r3, r2, r3
 8003552:	69ba      	ldr	r2, [r7, #24]
 8003554:	4313      	orrs	r3, r2
 8003556:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003564:	2201      	movs	r2, #1
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	fa02 f303 	lsl.w	r3, r2, r3
 800356c:	43db      	mvns	r3, r3
 800356e:	69ba      	ldr	r2, [r7, #24]
 8003570:	4013      	ands	r3, r2
 8003572:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	091b      	lsrs	r3, r3, #4
 800357a:	f003 0201 	and.w	r2, r3, #1
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	fa02 f303 	lsl.w	r3, r2, r3
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	4313      	orrs	r3, r2
 8003588:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f003 0303 	and.w	r3, r3, #3
 8003598:	2b03      	cmp	r3, #3
 800359a:	d017      	beq.n	80035cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	2203      	movs	r2, #3
 80035a8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ac:	43db      	mvns	r3, r3
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	4013      	ands	r3, r2
 80035b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f003 0303 	and.w	r3, r3, #3
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d123      	bne.n	8003620 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	08da      	lsrs	r2, r3, #3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	3208      	adds	r2, #8
 80035e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	f003 0307 	and.w	r3, r3, #7
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	220f      	movs	r2, #15
 80035f0:	fa02 f303 	lsl.w	r3, r2, r3
 80035f4:	43db      	mvns	r3, r3
 80035f6:	69ba      	ldr	r2, [r7, #24]
 80035f8:	4013      	ands	r3, r2
 80035fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	691a      	ldr	r2, [r3, #16]
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	f003 0307 	and.w	r3, r3, #7
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	fa02 f303 	lsl.w	r3, r2, r3
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	4313      	orrs	r3, r2
 8003610:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	08da      	lsrs	r2, r3, #3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	3208      	adds	r2, #8
 800361a:	69b9      	ldr	r1, [r7, #24]
 800361c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	005b      	lsls	r3, r3, #1
 800362a:	2203      	movs	r2, #3
 800362c:	fa02 f303 	lsl.w	r3, r2, r3
 8003630:	43db      	mvns	r3, r3
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	4013      	ands	r3, r2
 8003636:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f003 0203 	and.w	r2, r3, #3
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	005b      	lsls	r3, r3, #1
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	4313      	orrs	r3, r2
 800364c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800365c:	2b00      	cmp	r3, #0
 800365e:	f000 80b4 	beq.w	80037ca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003662:	2300      	movs	r3, #0
 8003664:	60fb      	str	r3, [r7, #12]
 8003666:	4b60      	ldr	r3, [pc, #384]	@ (80037e8 <HAL_GPIO_Init+0x30c>)
 8003668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800366a:	4a5f      	ldr	r2, [pc, #380]	@ (80037e8 <HAL_GPIO_Init+0x30c>)
 800366c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003670:	6453      	str	r3, [r2, #68]	@ 0x44
 8003672:	4b5d      	ldr	r3, [pc, #372]	@ (80037e8 <HAL_GPIO_Init+0x30c>)
 8003674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003676:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800367a:	60fb      	str	r3, [r7, #12]
 800367c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800367e:	4a5b      	ldr	r2, [pc, #364]	@ (80037ec <HAL_GPIO_Init+0x310>)
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	089b      	lsrs	r3, r3, #2
 8003684:	3302      	adds	r3, #2
 8003686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800368a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	f003 0303 	and.w	r3, r3, #3
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	220f      	movs	r2, #15
 8003696:	fa02 f303 	lsl.w	r3, r2, r3
 800369a:	43db      	mvns	r3, r3
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	4013      	ands	r3, r2
 80036a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a52      	ldr	r2, [pc, #328]	@ (80037f0 <HAL_GPIO_Init+0x314>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d02b      	beq.n	8003702 <HAL_GPIO_Init+0x226>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a51      	ldr	r2, [pc, #324]	@ (80037f4 <HAL_GPIO_Init+0x318>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d025      	beq.n	80036fe <HAL_GPIO_Init+0x222>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a50      	ldr	r2, [pc, #320]	@ (80037f8 <HAL_GPIO_Init+0x31c>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d01f      	beq.n	80036fa <HAL_GPIO_Init+0x21e>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a4f      	ldr	r2, [pc, #316]	@ (80037fc <HAL_GPIO_Init+0x320>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d019      	beq.n	80036f6 <HAL_GPIO_Init+0x21a>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a4e      	ldr	r2, [pc, #312]	@ (8003800 <HAL_GPIO_Init+0x324>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d013      	beq.n	80036f2 <HAL_GPIO_Init+0x216>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a4d      	ldr	r2, [pc, #308]	@ (8003804 <HAL_GPIO_Init+0x328>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d00d      	beq.n	80036ee <HAL_GPIO_Init+0x212>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a4c      	ldr	r2, [pc, #304]	@ (8003808 <HAL_GPIO_Init+0x32c>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d007      	beq.n	80036ea <HAL_GPIO_Init+0x20e>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a4b      	ldr	r2, [pc, #300]	@ (800380c <HAL_GPIO_Init+0x330>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d101      	bne.n	80036e6 <HAL_GPIO_Init+0x20a>
 80036e2:	2307      	movs	r3, #7
 80036e4:	e00e      	b.n	8003704 <HAL_GPIO_Init+0x228>
 80036e6:	2308      	movs	r3, #8
 80036e8:	e00c      	b.n	8003704 <HAL_GPIO_Init+0x228>
 80036ea:	2306      	movs	r3, #6
 80036ec:	e00a      	b.n	8003704 <HAL_GPIO_Init+0x228>
 80036ee:	2305      	movs	r3, #5
 80036f0:	e008      	b.n	8003704 <HAL_GPIO_Init+0x228>
 80036f2:	2304      	movs	r3, #4
 80036f4:	e006      	b.n	8003704 <HAL_GPIO_Init+0x228>
 80036f6:	2303      	movs	r3, #3
 80036f8:	e004      	b.n	8003704 <HAL_GPIO_Init+0x228>
 80036fa:	2302      	movs	r3, #2
 80036fc:	e002      	b.n	8003704 <HAL_GPIO_Init+0x228>
 80036fe:	2301      	movs	r3, #1
 8003700:	e000      	b.n	8003704 <HAL_GPIO_Init+0x228>
 8003702:	2300      	movs	r3, #0
 8003704:	69fa      	ldr	r2, [r7, #28]
 8003706:	f002 0203 	and.w	r2, r2, #3
 800370a:	0092      	lsls	r2, r2, #2
 800370c:	4093      	lsls	r3, r2
 800370e:	69ba      	ldr	r2, [r7, #24]
 8003710:	4313      	orrs	r3, r2
 8003712:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003714:	4935      	ldr	r1, [pc, #212]	@ (80037ec <HAL_GPIO_Init+0x310>)
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	089b      	lsrs	r3, r3, #2
 800371a:	3302      	adds	r3, #2
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003722:	4b3b      	ldr	r3, [pc, #236]	@ (8003810 <HAL_GPIO_Init+0x334>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	43db      	mvns	r3, r3
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	4013      	ands	r3, r2
 8003730:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	4313      	orrs	r3, r2
 8003744:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003746:	4a32      	ldr	r2, [pc, #200]	@ (8003810 <HAL_GPIO_Init+0x334>)
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800374c:	4b30      	ldr	r3, [pc, #192]	@ (8003810 <HAL_GPIO_Init+0x334>)
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	43db      	mvns	r3, r3
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	4013      	ands	r3, r2
 800375a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d003      	beq.n	8003770 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	4313      	orrs	r3, r2
 800376e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003770:	4a27      	ldr	r2, [pc, #156]	@ (8003810 <HAL_GPIO_Init+0x334>)
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003776:	4b26      	ldr	r3, [pc, #152]	@ (8003810 <HAL_GPIO_Init+0x334>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	43db      	mvns	r3, r3
 8003780:	69ba      	ldr	r2, [r7, #24]
 8003782:	4013      	ands	r3, r2
 8003784:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d003      	beq.n	800379a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	4313      	orrs	r3, r2
 8003798:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800379a:	4a1d      	ldr	r2, [pc, #116]	@ (8003810 <HAL_GPIO_Init+0x334>)
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037a0:	4b1b      	ldr	r3, [pc, #108]	@ (8003810 <HAL_GPIO_Init+0x334>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	43db      	mvns	r3, r3
 80037aa:	69ba      	ldr	r2, [r7, #24]
 80037ac:	4013      	ands	r3, r2
 80037ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d003      	beq.n	80037c4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037c4:	4a12      	ldr	r2, [pc, #72]	@ (8003810 <HAL_GPIO_Init+0x334>)
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	3301      	adds	r3, #1
 80037ce:	61fb      	str	r3, [r7, #28]
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	2b0f      	cmp	r3, #15
 80037d4:	f67f ae90 	bls.w	80034f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037d8:	bf00      	nop
 80037da:	bf00      	nop
 80037dc:	3724      	adds	r7, #36	@ 0x24
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	40023800 	.word	0x40023800
 80037ec:	40013800 	.word	0x40013800
 80037f0:	40020000 	.word	0x40020000
 80037f4:	40020400 	.word	0x40020400
 80037f8:	40020800 	.word	0x40020800
 80037fc:	40020c00 	.word	0x40020c00
 8003800:	40021000 	.word	0x40021000
 8003804:	40021400 	.word	0x40021400
 8003808:	40021800 	.word	0x40021800
 800380c:	40021c00 	.word	0x40021c00
 8003810:	40013c00 	.word	0x40013c00

08003814 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003814:	b480      	push	{r7}
 8003816:	b087      	sub	sp, #28
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800381e:	2300      	movs	r3, #0
 8003820:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003822:	2300      	movs	r3, #0
 8003824:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003826:	2300      	movs	r3, #0
 8003828:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800382a:	2300      	movs	r3, #0
 800382c:	617b      	str	r3, [r7, #20]
 800382e:	e0cd      	b.n	80039cc <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003830:	2201      	movs	r2, #1
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	fa02 f303 	lsl.w	r3, r2, r3
 8003838:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800383a:	683a      	ldr	r2, [r7, #0]
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	4013      	ands	r3, r2
 8003840:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	429a      	cmp	r2, r3
 8003848:	f040 80bd 	bne.w	80039c6 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800384c:	4a65      	ldr	r2, [pc, #404]	@ (80039e4 <HAL_GPIO_DeInit+0x1d0>)
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	089b      	lsrs	r3, r3, #2
 8003852:	3302      	adds	r3, #2
 8003854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003858:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	f003 0303 	and.w	r3, r3, #3
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	220f      	movs	r2, #15
 8003864:	fa02 f303 	lsl.w	r3, r2, r3
 8003868:	68ba      	ldr	r2, [r7, #8]
 800386a:	4013      	ands	r3, r2
 800386c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a5d      	ldr	r2, [pc, #372]	@ (80039e8 <HAL_GPIO_DeInit+0x1d4>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d02b      	beq.n	80038ce <HAL_GPIO_DeInit+0xba>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a5c      	ldr	r2, [pc, #368]	@ (80039ec <HAL_GPIO_DeInit+0x1d8>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d025      	beq.n	80038ca <HAL_GPIO_DeInit+0xb6>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a5b      	ldr	r2, [pc, #364]	@ (80039f0 <HAL_GPIO_DeInit+0x1dc>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d01f      	beq.n	80038c6 <HAL_GPIO_DeInit+0xb2>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a5a      	ldr	r2, [pc, #360]	@ (80039f4 <HAL_GPIO_DeInit+0x1e0>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d019      	beq.n	80038c2 <HAL_GPIO_DeInit+0xae>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a59      	ldr	r2, [pc, #356]	@ (80039f8 <HAL_GPIO_DeInit+0x1e4>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d013      	beq.n	80038be <HAL_GPIO_DeInit+0xaa>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a58      	ldr	r2, [pc, #352]	@ (80039fc <HAL_GPIO_DeInit+0x1e8>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d00d      	beq.n	80038ba <HAL_GPIO_DeInit+0xa6>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a57      	ldr	r2, [pc, #348]	@ (8003a00 <HAL_GPIO_DeInit+0x1ec>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d007      	beq.n	80038b6 <HAL_GPIO_DeInit+0xa2>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a56      	ldr	r2, [pc, #344]	@ (8003a04 <HAL_GPIO_DeInit+0x1f0>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d101      	bne.n	80038b2 <HAL_GPIO_DeInit+0x9e>
 80038ae:	2307      	movs	r3, #7
 80038b0:	e00e      	b.n	80038d0 <HAL_GPIO_DeInit+0xbc>
 80038b2:	2308      	movs	r3, #8
 80038b4:	e00c      	b.n	80038d0 <HAL_GPIO_DeInit+0xbc>
 80038b6:	2306      	movs	r3, #6
 80038b8:	e00a      	b.n	80038d0 <HAL_GPIO_DeInit+0xbc>
 80038ba:	2305      	movs	r3, #5
 80038bc:	e008      	b.n	80038d0 <HAL_GPIO_DeInit+0xbc>
 80038be:	2304      	movs	r3, #4
 80038c0:	e006      	b.n	80038d0 <HAL_GPIO_DeInit+0xbc>
 80038c2:	2303      	movs	r3, #3
 80038c4:	e004      	b.n	80038d0 <HAL_GPIO_DeInit+0xbc>
 80038c6:	2302      	movs	r3, #2
 80038c8:	e002      	b.n	80038d0 <HAL_GPIO_DeInit+0xbc>
 80038ca:	2301      	movs	r3, #1
 80038cc:	e000      	b.n	80038d0 <HAL_GPIO_DeInit+0xbc>
 80038ce:	2300      	movs	r3, #0
 80038d0:	697a      	ldr	r2, [r7, #20]
 80038d2:	f002 0203 	and.w	r2, r2, #3
 80038d6:	0092      	lsls	r2, r2, #2
 80038d8:	4093      	lsls	r3, r2
 80038da:	68ba      	ldr	r2, [r7, #8]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d132      	bne.n	8003946 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80038e0:	4b49      	ldr	r3, [pc, #292]	@ (8003a08 <HAL_GPIO_DeInit+0x1f4>)
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	43db      	mvns	r3, r3
 80038e8:	4947      	ldr	r1, [pc, #284]	@ (8003a08 <HAL_GPIO_DeInit+0x1f4>)
 80038ea:	4013      	ands	r3, r2
 80038ec:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80038ee:	4b46      	ldr	r3, [pc, #280]	@ (8003a08 <HAL_GPIO_DeInit+0x1f4>)
 80038f0:	685a      	ldr	r2, [r3, #4]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	43db      	mvns	r3, r3
 80038f6:	4944      	ldr	r1, [pc, #272]	@ (8003a08 <HAL_GPIO_DeInit+0x1f4>)
 80038f8:	4013      	ands	r3, r2
 80038fa:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80038fc:	4b42      	ldr	r3, [pc, #264]	@ (8003a08 <HAL_GPIO_DeInit+0x1f4>)
 80038fe:	68da      	ldr	r2, [r3, #12]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	43db      	mvns	r3, r3
 8003904:	4940      	ldr	r1, [pc, #256]	@ (8003a08 <HAL_GPIO_DeInit+0x1f4>)
 8003906:	4013      	ands	r3, r2
 8003908:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800390a:	4b3f      	ldr	r3, [pc, #252]	@ (8003a08 <HAL_GPIO_DeInit+0x1f4>)
 800390c:	689a      	ldr	r2, [r3, #8]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	43db      	mvns	r3, r3
 8003912:	493d      	ldr	r1, [pc, #244]	@ (8003a08 <HAL_GPIO_DeInit+0x1f4>)
 8003914:	4013      	ands	r3, r2
 8003916:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	f003 0303 	and.w	r3, r3, #3
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	220f      	movs	r2, #15
 8003922:	fa02 f303 	lsl.w	r3, r2, r3
 8003926:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003928:	4a2e      	ldr	r2, [pc, #184]	@ (80039e4 <HAL_GPIO_DeInit+0x1d0>)
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	089b      	lsrs	r3, r3, #2
 800392e:	3302      	adds	r3, #2
 8003930:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	43da      	mvns	r2, r3
 8003938:	482a      	ldr	r0, [pc, #168]	@ (80039e4 <HAL_GPIO_DeInit+0x1d0>)
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	089b      	lsrs	r3, r3, #2
 800393e:	400a      	ands	r2, r1
 8003940:	3302      	adds	r3, #2
 8003942:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	2103      	movs	r1, #3
 8003950:	fa01 f303 	lsl.w	r3, r1, r3
 8003954:	43db      	mvns	r3, r3
 8003956:	401a      	ands	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	08da      	lsrs	r2, r3, #3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	3208      	adds	r2, #8
 8003964:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	f003 0307 	and.w	r3, r3, #7
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	220f      	movs	r2, #15
 8003972:	fa02 f303 	lsl.w	r3, r2, r3
 8003976:	43db      	mvns	r3, r3
 8003978:	697a      	ldr	r2, [r7, #20]
 800397a:	08d2      	lsrs	r2, r2, #3
 800397c:	4019      	ands	r1, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	3208      	adds	r2, #8
 8003982:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68da      	ldr	r2, [r3, #12]
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	2103      	movs	r1, #3
 8003990:	fa01 f303 	lsl.w	r3, r1, r3
 8003994:	43db      	mvns	r3, r3
 8003996:	401a      	ands	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685a      	ldr	r2, [r3, #4]
 80039a0:	2101      	movs	r1, #1
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	fa01 f303 	lsl.w	r3, r1, r3
 80039a8:	43db      	mvns	r3, r3
 80039aa:	401a      	ands	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	689a      	ldr	r2, [r3, #8]
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	005b      	lsls	r3, r3, #1
 80039b8:	2103      	movs	r1, #3
 80039ba:	fa01 f303 	lsl.w	r3, r1, r3
 80039be:	43db      	mvns	r3, r3
 80039c0:	401a      	ands	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	3301      	adds	r3, #1
 80039ca:	617b      	str	r3, [r7, #20]
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	2b0f      	cmp	r3, #15
 80039d0:	f67f af2e 	bls.w	8003830 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80039d4:	bf00      	nop
 80039d6:	bf00      	nop
 80039d8:	371c      	adds	r7, #28
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	40013800 	.word	0x40013800
 80039e8:	40020000 	.word	0x40020000
 80039ec:	40020400 	.word	0x40020400
 80039f0:	40020800 	.word	0x40020800
 80039f4:	40020c00 	.word	0x40020c00
 80039f8:	40021000 	.word	0x40021000
 80039fc:	40021400 	.word	0x40021400
 8003a00:	40021800 	.word	0x40021800
 8003a04:	40021c00 	.word	0x40021c00
 8003a08:	40013c00 	.word	0x40013c00

08003a0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	460b      	mov	r3, r1
 8003a16:	807b      	strh	r3, [r7, #2]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a1c:	787b      	ldrb	r3, [r7, #1]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d003      	beq.n	8003a2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a22:	887a      	ldrh	r2, [r7, #2]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a28:	e003      	b.n	8003a32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a2a:	887b      	ldrh	r3, [r7, #2]
 8003a2c:	041a      	lsls	r2, r3, #16
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	619a      	str	r2, [r3, #24]
}
 8003a32:	bf00      	nop
 8003a34:	370c      	adds	r7, #12
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
	...

08003a40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e12b      	b.n	8003caa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d106      	bne.n	8003a6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7fc ffc8 	bl	80009fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2224      	movs	r2, #36	@ 0x24
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f022 0201 	bic.w	r2, r2, #1
 8003a82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003aa2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003aa4:	f001 ffd2 	bl	8005a4c <HAL_RCC_GetPCLK1Freq>
 8003aa8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	4a81      	ldr	r2, [pc, #516]	@ (8003cb4 <HAL_I2C_Init+0x274>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d807      	bhi.n	8003ac4 <HAL_I2C_Init+0x84>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	4a80      	ldr	r2, [pc, #512]	@ (8003cb8 <HAL_I2C_Init+0x278>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	bf94      	ite	ls
 8003abc:	2301      	movls	r3, #1
 8003abe:	2300      	movhi	r3, #0
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	e006      	b.n	8003ad2 <HAL_I2C_Init+0x92>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	4a7d      	ldr	r2, [pc, #500]	@ (8003cbc <HAL_I2C_Init+0x27c>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	bf94      	ite	ls
 8003acc:	2301      	movls	r3, #1
 8003ace:	2300      	movhi	r3, #0
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e0e7      	b.n	8003caa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	4a78      	ldr	r2, [pc, #480]	@ (8003cc0 <HAL_I2C_Init+0x280>)
 8003ade:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae2:	0c9b      	lsrs	r3, r3, #18
 8003ae4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68ba      	ldr	r2, [r7, #8]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	6a1b      	ldr	r3, [r3, #32]
 8003b00:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	4a6a      	ldr	r2, [pc, #424]	@ (8003cb4 <HAL_I2C_Init+0x274>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d802      	bhi.n	8003b14 <HAL_I2C_Init+0xd4>
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	3301      	adds	r3, #1
 8003b12:	e009      	b.n	8003b28 <HAL_I2C_Init+0xe8>
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003b1a:	fb02 f303 	mul.w	r3, r2, r3
 8003b1e:	4a69      	ldr	r2, [pc, #420]	@ (8003cc4 <HAL_I2C_Init+0x284>)
 8003b20:	fba2 2303 	umull	r2, r3, r2, r3
 8003b24:	099b      	lsrs	r3, r3, #6
 8003b26:	3301      	adds	r3, #1
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	6812      	ldr	r2, [r2, #0]
 8003b2c:	430b      	orrs	r3, r1
 8003b2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003b3a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	495c      	ldr	r1, [pc, #368]	@ (8003cb4 <HAL_I2C_Init+0x274>)
 8003b44:	428b      	cmp	r3, r1
 8003b46:	d819      	bhi.n	8003b7c <HAL_I2C_Init+0x13c>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	1e59      	subs	r1, r3, #1
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	005b      	lsls	r3, r3, #1
 8003b52:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b56:	1c59      	adds	r1, r3, #1
 8003b58:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003b5c:	400b      	ands	r3, r1
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00a      	beq.n	8003b78 <HAL_I2C_Init+0x138>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	1e59      	subs	r1, r3, #1
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	005b      	lsls	r3, r3, #1
 8003b6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b70:	3301      	adds	r3, #1
 8003b72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b76:	e051      	b.n	8003c1c <HAL_I2C_Init+0x1dc>
 8003b78:	2304      	movs	r3, #4
 8003b7a:	e04f      	b.n	8003c1c <HAL_I2C_Init+0x1dc>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d111      	bne.n	8003ba8 <HAL_I2C_Init+0x168>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	1e58      	subs	r0, r3, #1
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6859      	ldr	r1, [r3, #4]
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	005b      	lsls	r3, r3, #1
 8003b90:	440b      	add	r3, r1
 8003b92:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b96:	3301      	adds	r3, #1
 8003b98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	bf0c      	ite	eq
 8003ba0:	2301      	moveq	r3, #1
 8003ba2:	2300      	movne	r3, #0
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	e012      	b.n	8003bce <HAL_I2C_Init+0x18e>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	1e58      	subs	r0, r3, #1
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6859      	ldr	r1, [r3, #4]
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	440b      	add	r3, r1
 8003bb6:	0099      	lsls	r1, r3, #2
 8003bb8:	440b      	add	r3, r1
 8003bba:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	bf0c      	ite	eq
 8003bc8:	2301      	moveq	r3, #1
 8003bca:	2300      	movne	r3, #0
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <HAL_I2C_Init+0x196>
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e022      	b.n	8003c1c <HAL_I2C_Init+0x1dc>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10e      	bne.n	8003bfc <HAL_I2C_Init+0x1bc>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	1e58      	subs	r0, r3, #1
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6859      	ldr	r1, [r3, #4]
 8003be6:	460b      	mov	r3, r1
 8003be8:	005b      	lsls	r3, r3, #1
 8003bea:	440b      	add	r3, r1
 8003bec:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bf6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bfa:	e00f      	b.n	8003c1c <HAL_I2C_Init+0x1dc>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	1e58      	subs	r0, r3, #1
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6859      	ldr	r1, [r3, #4]
 8003c04:	460b      	mov	r3, r1
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	440b      	add	r3, r1
 8003c0a:	0099      	lsls	r1, r3, #2
 8003c0c:	440b      	add	r3, r1
 8003c0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c12:	3301      	adds	r3, #1
 8003c14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c18:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003c1c:	6879      	ldr	r1, [r7, #4]
 8003c1e:	6809      	ldr	r1, [r1, #0]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	69da      	ldr	r2, [r3, #28]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a1b      	ldr	r3, [r3, #32]
 8003c36:	431a      	orrs	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	430a      	orrs	r2, r1
 8003c3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003c4a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	6911      	ldr	r1, [r2, #16]
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	68d2      	ldr	r2, [r2, #12]
 8003c56:	4311      	orrs	r1, r2
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	6812      	ldr	r2, [r2, #0]
 8003c5c:	430b      	orrs	r3, r1
 8003c5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	695a      	ldr	r2, [r3, #20]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	431a      	orrs	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	430a      	orrs	r2, r1
 8003c7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f042 0201 	orr.w	r2, r2, #1
 8003c8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2220      	movs	r2, #32
 8003c96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	000186a0 	.word	0x000186a0
 8003cb8:	001e847f 	.word	0x001e847f
 8003cbc:	003d08ff 	.word	0x003d08ff
 8003cc0:	431bde83 	.word	0x431bde83
 8003cc4:	10624dd3 	.word	0x10624dd3

08003cc8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b086      	sub	sp, #24
 8003ccc:	af02      	add	r7, sp, #8
 8003cce:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e101      	b.n	8003ede <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d106      	bne.n	8003cfa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f7fd fb89 	bl	800140c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2203      	movs	r2, #3
 8003cfe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d08:	d102      	bne.n	8003d10 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f003 fd9a 	bl	800784e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6818      	ldr	r0, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	7c1a      	ldrb	r2, [r3, #16]
 8003d22:	f88d 2000 	strb.w	r2, [sp]
 8003d26:	3304      	adds	r3, #4
 8003d28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d2a:	f003 fc79 	bl	8007620 <USB_CoreInit>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d005      	beq.n	8003d40 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2202      	movs	r2, #2
 8003d38:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e0ce      	b.n	8003ede <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2100      	movs	r1, #0
 8003d46:	4618      	mov	r0, r3
 8003d48:	f003 fd92 	bl	8007870 <USB_SetCurrentMode>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d005      	beq.n	8003d5e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2202      	movs	r2, #2
 8003d56:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e0bf      	b.n	8003ede <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d5e:	2300      	movs	r3, #0
 8003d60:	73fb      	strb	r3, [r7, #15]
 8003d62:	e04a      	b.n	8003dfa <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003d64:	7bfa      	ldrb	r2, [r7, #15]
 8003d66:	6879      	ldr	r1, [r7, #4]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	00db      	lsls	r3, r3, #3
 8003d6c:	4413      	add	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	440b      	add	r3, r1
 8003d72:	3315      	adds	r3, #21
 8003d74:	2201      	movs	r2, #1
 8003d76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003d78:	7bfa      	ldrb	r2, [r7, #15]
 8003d7a:	6879      	ldr	r1, [r7, #4]
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	00db      	lsls	r3, r3, #3
 8003d80:	4413      	add	r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	440b      	add	r3, r1
 8003d86:	3314      	adds	r3, #20
 8003d88:	7bfa      	ldrb	r2, [r7, #15]
 8003d8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003d8c:	7bfa      	ldrb	r2, [r7, #15]
 8003d8e:	7bfb      	ldrb	r3, [r7, #15]
 8003d90:	b298      	uxth	r0, r3
 8003d92:	6879      	ldr	r1, [r7, #4]
 8003d94:	4613      	mov	r3, r2
 8003d96:	00db      	lsls	r3, r3, #3
 8003d98:	4413      	add	r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	440b      	add	r3, r1
 8003d9e:	332e      	adds	r3, #46	@ 0x2e
 8003da0:	4602      	mov	r2, r0
 8003da2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003da4:	7bfa      	ldrb	r2, [r7, #15]
 8003da6:	6879      	ldr	r1, [r7, #4]
 8003da8:	4613      	mov	r3, r2
 8003daa:	00db      	lsls	r3, r3, #3
 8003dac:	4413      	add	r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	440b      	add	r3, r1
 8003db2:	3318      	adds	r3, #24
 8003db4:	2200      	movs	r2, #0
 8003db6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003db8:	7bfa      	ldrb	r2, [r7, #15]
 8003dba:	6879      	ldr	r1, [r7, #4]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	00db      	lsls	r3, r3, #3
 8003dc0:	4413      	add	r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	440b      	add	r3, r1
 8003dc6:	331c      	adds	r3, #28
 8003dc8:	2200      	movs	r2, #0
 8003dca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003dcc:	7bfa      	ldrb	r2, [r7, #15]
 8003dce:	6879      	ldr	r1, [r7, #4]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	00db      	lsls	r3, r3, #3
 8003dd4:	4413      	add	r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	440b      	add	r3, r1
 8003dda:	3320      	adds	r3, #32
 8003ddc:	2200      	movs	r2, #0
 8003dde:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003de0:	7bfa      	ldrb	r2, [r7, #15]
 8003de2:	6879      	ldr	r1, [r7, #4]
 8003de4:	4613      	mov	r3, r2
 8003de6:	00db      	lsls	r3, r3, #3
 8003de8:	4413      	add	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	440b      	add	r3, r1
 8003dee:	3324      	adds	r3, #36	@ 0x24
 8003df0:	2200      	movs	r2, #0
 8003df2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003df4:	7bfb      	ldrb	r3, [r7, #15]
 8003df6:	3301      	adds	r3, #1
 8003df8:	73fb      	strb	r3, [r7, #15]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	791b      	ldrb	r3, [r3, #4]
 8003dfe:	7bfa      	ldrb	r2, [r7, #15]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d3af      	bcc.n	8003d64 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e04:	2300      	movs	r3, #0
 8003e06:	73fb      	strb	r3, [r7, #15]
 8003e08:	e044      	b.n	8003e94 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003e0a:	7bfa      	ldrb	r2, [r7, #15]
 8003e0c:	6879      	ldr	r1, [r7, #4]
 8003e0e:	4613      	mov	r3, r2
 8003e10:	00db      	lsls	r3, r3, #3
 8003e12:	4413      	add	r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	440b      	add	r3, r1
 8003e18:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003e20:	7bfa      	ldrb	r2, [r7, #15]
 8003e22:	6879      	ldr	r1, [r7, #4]
 8003e24:	4613      	mov	r3, r2
 8003e26:	00db      	lsls	r3, r3, #3
 8003e28:	4413      	add	r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	440b      	add	r3, r1
 8003e2e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003e32:	7bfa      	ldrb	r2, [r7, #15]
 8003e34:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003e36:	7bfa      	ldrb	r2, [r7, #15]
 8003e38:	6879      	ldr	r1, [r7, #4]
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	00db      	lsls	r3, r3, #3
 8003e3e:	4413      	add	r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	440b      	add	r3, r1
 8003e44:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003e48:	2200      	movs	r2, #0
 8003e4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003e4c:	7bfa      	ldrb	r2, [r7, #15]
 8003e4e:	6879      	ldr	r1, [r7, #4]
 8003e50:	4613      	mov	r3, r2
 8003e52:	00db      	lsls	r3, r3, #3
 8003e54:	4413      	add	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	440b      	add	r3, r1
 8003e5a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003e5e:	2200      	movs	r2, #0
 8003e60:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003e62:	7bfa      	ldrb	r2, [r7, #15]
 8003e64:	6879      	ldr	r1, [r7, #4]
 8003e66:	4613      	mov	r3, r2
 8003e68:	00db      	lsls	r3, r3, #3
 8003e6a:	4413      	add	r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	440b      	add	r3, r1
 8003e70:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003e74:	2200      	movs	r2, #0
 8003e76:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003e78:	7bfa      	ldrb	r2, [r7, #15]
 8003e7a:	6879      	ldr	r1, [r7, #4]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	00db      	lsls	r3, r3, #3
 8003e80:	4413      	add	r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	440b      	add	r3, r1
 8003e86:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e8e:	7bfb      	ldrb	r3, [r7, #15]
 8003e90:	3301      	adds	r3, #1
 8003e92:	73fb      	strb	r3, [r7, #15]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	791b      	ldrb	r3, [r3, #4]
 8003e98:	7bfa      	ldrb	r2, [r7, #15]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d3b5      	bcc.n	8003e0a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6818      	ldr	r0, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	7c1a      	ldrb	r2, [r3, #16]
 8003ea6:	f88d 2000 	strb.w	r2, [sp]
 8003eaa:	3304      	adds	r3, #4
 8003eac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003eae:	f003 fd2b 	bl	8007908 <USB_DevInit>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d005      	beq.n	8003ec4 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2202      	movs	r2, #2
 8003ebc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e00c      	b.n	8003ede <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f004 fd75 	bl	80089c6 <USB_DevDisconnect>

  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}

08003ee6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b084      	sub	sp, #16
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d101      	bne.n	8003f02 <HAL_PCD_Start+0x1c>
 8003efe:	2302      	movs	r3, #2
 8003f00:	e022      	b.n	8003f48 <HAL_PCD_Start+0x62>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2201      	movs	r2, #1
 8003f06:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d009      	beq.n	8003f2a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d105      	bne.n	8003f2a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f22:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f003 fc7c 	bl	800782c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f004 fd23 	bl	8008984 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3710      	adds	r7, #16
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003f50:	b590      	push	{r4, r7, lr}
 8003f52:	b08d      	sub	sp, #52	@ 0x34
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f5e:	6a3b      	ldr	r3, [r7, #32]
 8003f60:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4618      	mov	r0, r3
 8003f68:	f004 fde1 	bl	8008b2e <USB_GetMode>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f040 848c 	bne.w	800488c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f004 fd45 	bl	8008a08 <USB_ReadInterrupts>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	f000 8482 	beq.w	800488a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	0a1b      	lsrs	r3, r3, #8
 8003f90:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f004 fd32 	bl	8008a08 <USB_ReadInterrupts>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d107      	bne.n	8003fbe <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	695a      	ldr	r2, [r3, #20]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f002 0202 	and.w	r2, r2, #2
 8003fbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f004 fd20 	bl	8008a08 <USB_ReadInterrupts>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	f003 0310 	and.w	r3, r3, #16
 8003fce:	2b10      	cmp	r3, #16
 8003fd0:	d161      	bne.n	8004096 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	699a      	ldr	r2, [r3, #24]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f022 0210 	bic.w	r2, r2, #16
 8003fe0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003fe2:	6a3b      	ldr	r3, [r7, #32]
 8003fe4:	6a1b      	ldr	r3, [r3, #32]
 8003fe6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	f003 020f 	and.w	r2, r3, #15
 8003fee:	4613      	mov	r3, r2
 8003ff0:	00db      	lsls	r3, r3, #3
 8003ff2:	4413      	add	r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	3304      	adds	r3, #4
 8004000:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8004008:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800400c:	d124      	bne.n	8004058 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800400e:	69ba      	ldr	r2, [r7, #24]
 8004010:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004014:	4013      	ands	r3, r2
 8004016:	2b00      	cmp	r3, #0
 8004018:	d035      	beq.n	8004086 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	091b      	lsrs	r3, r3, #4
 8004022:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004024:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004028:	b29b      	uxth	r3, r3
 800402a:	461a      	mov	r2, r3
 800402c:	6a38      	ldr	r0, [r7, #32]
 800402e:	f004 fb57 	bl	80086e0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	68da      	ldr	r2, [r3, #12]
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	091b      	lsrs	r3, r3, #4
 800403a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800403e:	441a      	add	r2, r3
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	695a      	ldr	r2, [r3, #20]
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	091b      	lsrs	r3, r3, #4
 800404c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004050:	441a      	add	r2, r3
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	615a      	str	r2, [r3, #20]
 8004056:	e016      	b.n	8004086 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800405e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004062:	d110      	bne.n	8004086 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800406a:	2208      	movs	r2, #8
 800406c:	4619      	mov	r1, r3
 800406e:	6a38      	ldr	r0, [r7, #32]
 8004070:	f004 fb36 	bl	80086e0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	695a      	ldr	r2, [r3, #20]
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	091b      	lsrs	r3, r3, #4
 800407c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004080:	441a      	add	r2, r3
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	699a      	ldr	r2, [r3, #24]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f042 0210 	orr.w	r2, r2, #16
 8004094:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4618      	mov	r0, r3
 800409c:	f004 fcb4 	bl	8008a08 <USB_ReadInterrupts>
 80040a0:	4603      	mov	r3, r0
 80040a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80040a6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80040aa:	f040 80a7 	bne.w	80041fc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80040ae:	2300      	movs	r3, #0
 80040b0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4618      	mov	r0, r3
 80040b8:	f004 fcb9 	bl	8008a2e <USB_ReadDevAllOutEpInterrupt>
 80040bc:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80040be:	e099      	b.n	80041f4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80040c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f000 808e 	beq.w	80041e8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040d2:	b2d2      	uxtb	r2, r2
 80040d4:	4611      	mov	r1, r2
 80040d6:	4618      	mov	r0, r3
 80040d8:	f004 fcdd 	bl	8008a96 <USB_ReadDevOutEPInterrupt>
 80040dc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	f003 0301 	and.w	r3, r3, #1
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00c      	beq.n	8004102 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80040e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ea:	015a      	lsls	r2, r3, #5
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	4413      	add	r3, r2
 80040f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040f4:	461a      	mov	r2, r3
 80040f6:	2301      	movs	r3, #1
 80040f8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80040fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f000 fea3 	bl	8004e48 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	f003 0308 	and.w	r3, r3, #8
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00c      	beq.n	8004126 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800410c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800410e:	015a      	lsls	r2, r3, #5
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	4413      	add	r3, r2
 8004114:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004118:	461a      	mov	r2, r3
 800411a:	2308      	movs	r3, #8
 800411c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800411e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 ff79 	bl	8005018 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	f003 0310 	and.w	r3, r3, #16
 800412c:	2b00      	cmp	r3, #0
 800412e:	d008      	beq.n	8004142 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004132:	015a      	lsls	r2, r3, #5
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	4413      	add	r3, r2
 8004138:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800413c:	461a      	mov	r2, r3
 800413e:	2310      	movs	r3, #16
 8004140:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	f003 0302 	and.w	r3, r3, #2
 8004148:	2b00      	cmp	r3, #0
 800414a:	d030      	beq.n	80041ae <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800414c:	6a3b      	ldr	r3, [r7, #32]
 800414e:	695b      	ldr	r3, [r3, #20]
 8004150:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004154:	2b80      	cmp	r3, #128	@ 0x80
 8004156:	d109      	bne.n	800416c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	69fa      	ldr	r2, [r7, #28]
 8004162:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004166:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800416a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800416c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800416e:	4613      	mov	r3, r2
 8004170:	00db      	lsls	r3, r3, #3
 8004172:	4413      	add	r3, r2
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	4413      	add	r3, r2
 800417e:	3304      	adds	r3, #4
 8004180:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	78db      	ldrb	r3, [r3, #3]
 8004186:	2b01      	cmp	r3, #1
 8004188:	d108      	bne.n	800419c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	2200      	movs	r2, #0
 800418e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004192:	b2db      	uxtb	r3, r3
 8004194:	4619      	mov	r1, r3
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f008 f814 	bl	800c1c4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800419c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800419e:	015a      	lsls	r2, r3, #5
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	4413      	add	r3, r2
 80041a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041a8:	461a      	mov	r2, r3
 80041aa:	2302      	movs	r3, #2
 80041ac:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	f003 0320 	and.w	r3, r3, #32
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d008      	beq.n	80041ca <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80041b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ba:	015a      	lsls	r2, r3, #5
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	4413      	add	r3, r2
 80041c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041c4:	461a      	mov	r2, r3
 80041c6:	2320      	movs	r3, #32
 80041c8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d009      	beq.n	80041e8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80041d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d6:	015a      	lsls	r2, r3, #5
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	4413      	add	r3, r2
 80041dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041e0:	461a      	mov	r2, r3
 80041e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80041e6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80041e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ea:	3301      	adds	r3, #1
 80041ec:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80041ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041f0:	085b      	lsrs	r3, r3, #1
 80041f2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80041f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	f47f af62 	bne.w	80040c0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4618      	mov	r0, r3
 8004202:	f004 fc01 	bl	8008a08 <USB_ReadInterrupts>
 8004206:	4603      	mov	r3, r0
 8004208:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800420c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004210:	f040 80db 	bne.w	80043ca <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4618      	mov	r0, r3
 800421a:	f004 fc22 	bl	8008a62 <USB_ReadDevAllInEpInterrupt>
 800421e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004220:	2300      	movs	r3, #0
 8004222:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004224:	e0cd      	b.n	80043c2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004228:	f003 0301 	and.w	r3, r3, #1
 800422c:	2b00      	cmp	r3, #0
 800422e:	f000 80c2 	beq.w	80043b6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004238:	b2d2      	uxtb	r2, r2
 800423a:	4611      	mov	r1, r2
 800423c:	4618      	mov	r0, r3
 800423e:	f004 fc48 	bl	8008ad2 <USB_ReadDevInEPInterrupt>
 8004242:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b00      	cmp	r3, #0
 800424c:	d057      	beq.n	80042fe <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800424e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004250:	f003 030f 	and.w	r3, r3, #15
 8004254:	2201      	movs	r2, #1
 8004256:	fa02 f303 	lsl.w	r3, r2, r3
 800425a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004262:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	43db      	mvns	r3, r3
 8004268:	69f9      	ldr	r1, [r7, #28]
 800426a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800426e:	4013      	ands	r3, r2
 8004270:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004274:	015a      	lsls	r2, r3, #5
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	4413      	add	r3, r2
 800427a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800427e:	461a      	mov	r2, r3
 8004280:	2301      	movs	r3, #1
 8004282:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	799b      	ldrb	r3, [r3, #6]
 8004288:	2b01      	cmp	r3, #1
 800428a:	d132      	bne.n	80042f2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800428c:	6879      	ldr	r1, [r7, #4]
 800428e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004290:	4613      	mov	r3, r2
 8004292:	00db      	lsls	r3, r3, #3
 8004294:	4413      	add	r3, r2
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	440b      	add	r3, r1
 800429a:	3320      	adds	r3, #32
 800429c:	6819      	ldr	r1, [r3, #0]
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042a2:	4613      	mov	r3, r2
 80042a4:	00db      	lsls	r3, r3, #3
 80042a6:	4413      	add	r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	4403      	add	r3, r0
 80042ac:	331c      	adds	r3, #28
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4419      	add	r1, r3
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042b6:	4613      	mov	r3, r2
 80042b8:	00db      	lsls	r3, r3, #3
 80042ba:	4413      	add	r3, r2
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	4403      	add	r3, r0
 80042c0:	3320      	adds	r3, #32
 80042c2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80042c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d113      	bne.n	80042f2 <HAL_PCD_IRQHandler+0x3a2>
 80042ca:	6879      	ldr	r1, [r7, #4]
 80042cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042ce:	4613      	mov	r3, r2
 80042d0:	00db      	lsls	r3, r3, #3
 80042d2:	4413      	add	r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	440b      	add	r3, r1
 80042d8:	3324      	adds	r3, #36	@ 0x24
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d108      	bne.n	80042f2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6818      	ldr	r0, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80042ea:	461a      	mov	r2, r3
 80042ec:	2101      	movs	r1, #1
 80042ee:	f004 fc4f 	bl	8008b90 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80042f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	4619      	mov	r1, r3
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f007 fede 	bl	800c0ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	f003 0308 	and.w	r3, r3, #8
 8004304:	2b00      	cmp	r3, #0
 8004306:	d008      	beq.n	800431a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800430a:	015a      	lsls	r2, r3, #5
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	4413      	add	r3, r2
 8004310:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004314:	461a      	mov	r2, r3
 8004316:	2308      	movs	r3, #8
 8004318:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	f003 0310 	and.w	r3, r3, #16
 8004320:	2b00      	cmp	r3, #0
 8004322:	d008      	beq.n	8004336 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004326:	015a      	lsls	r2, r3, #5
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	4413      	add	r3, r2
 800432c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004330:	461a      	mov	r2, r3
 8004332:	2310      	movs	r3, #16
 8004334:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800433c:	2b00      	cmp	r3, #0
 800433e:	d008      	beq.n	8004352 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004342:	015a      	lsls	r2, r3, #5
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	4413      	add	r3, r2
 8004348:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800434c:	461a      	mov	r2, r3
 800434e:	2340      	movs	r3, #64	@ 0x40
 8004350:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	f003 0302 	and.w	r3, r3, #2
 8004358:	2b00      	cmp	r3, #0
 800435a:	d023      	beq.n	80043a4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800435c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800435e:	6a38      	ldr	r0, [r7, #32]
 8004360:	f003 fc36 	bl	8007bd0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004364:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004366:	4613      	mov	r3, r2
 8004368:	00db      	lsls	r3, r3, #3
 800436a:	4413      	add	r3, r2
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	3310      	adds	r3, #16
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	4413      	add	r3, r2
 8004374:	3304      	adds	r3, #4
 8004376:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	78db      	ldrb	r3, [r3, #3]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d108      	bne.n	8004392 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	2200      	movs	r2, #0
 8004384:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004388:	b2db      	uxtb	r3, r3
 800438a:	4619      	mov	r1, r3
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f007 ff2b 	bl	800c1e8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004394:	015a      	lsls	r2, r3, #5
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	4413      	add	r3, r2
 800439a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800439e:	461a      	mov	r2, r3
 80043a0:	2302      	movs	r3, #2
 80043a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d003      	beq.n	80043b6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80043ae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 fcbd 	bl	8004d30 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80043b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b8:	3301      	adds	r3, #1
 80043ba:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80043bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043be:	085b      	lsrs	r3, r3, #1
 80043c0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80043c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f47f af2e 	bne.w	8004226 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f004 fb1a 	bl	8008a08 <USB_ReadInterrupts>
 80043d4:	4603      	mov	r3, r0
 80043d6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80043da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80043de:	d122      	bne.n	8004426 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	69fa      	ldr	r2, [r7, #28]
 80043ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80043ee:	f023 0301 	bic.w	r3, r3, #1
 80043f2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d108      	bne.n	8004410 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004406:	2100      	movs	r1, #0
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 fea3 	bl	8005154 <HAL_PCDEx_LPM_Callback>
 800440e:	e002      	b.n	8004416 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f007 fec9 	bl	800c1a8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	695a      	ldr	r2, [r3, #20]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004424:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4618      	mov	r0, r3
 800442c:	f004 faec 	bl	8008a08 <USB_ReadInterrupts>
 8004430:	4603      	mov	r3, r0
 8004432:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004436:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800443a:	d112      	bne.n	8004462 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f003 0301 	and.w	r3, r3, #1
 8004448:	2b01      	cmp	r3, #1
 800444a:	d102      	bne.n	8004452 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f007 fe85 	bl	800c15c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	695a      	ldr	r2, [r3, #20]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004460:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4618      	mov	r0, r3
 8004468:	f004 face 	bl	8008a08 <USB_ReadInterrupts>
 800446c:	4603      	mov	r3, r0
 800446e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004472:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004476:	f040 80b7 	bne.w	80045e8 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	69fa      	ldr	r2, [r7, #28]
 8004484:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004488:	f023 0301 	bic.w	r3, r3, #1
 800448c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2110      	movs	r1, #16
 8004494:	4618      	mov	r0, r3
 8004496:	f003 fb9b 	bl	8007bd0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800449a:	2300      	movs	r3, #0
 800449c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800449e:	e046      	b.n	800452e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80044a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044a2:	015a      	lsls	r2, r3, #5
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	4413      	add	r3, r2
 80044a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044ac:	461a      	mov	r2, r3
 80044ae:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80044b2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80044b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044b6:	015a      	lsls	r2, r3, #5
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	4413      	add	r3, r2
 80044bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044c4:	0151      	lsls	r1, r2, #5
 80044c6:	69fa      	ldr	r2, [r7, #28]
 80044c8:	440a      	add	r2, r1
 80044ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80044ce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80044d2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80044d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044d6:	015a      	lsls	r2, r3, #5
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	4413      	add	r3, r2
 80044dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044e0:	461a      	mov	r2, r3
 80044e2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80044e6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80044e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044ea:	015a      	lsls	r2, r3, #5
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	4413      	add	r3, r2
 80044f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044f8:	0151      	lsls	r1, r2, #5
 80044fa:	69fa      	ldr	r2, [r7, #28]
 80044fc:	440a      	add	r2, r1
 80044fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004502:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004506:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800450a:	015a      	lsls	r2, r3, #5
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	4413      	add	r3, r2
 8004510:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004518:	0151      	lsls	r1, r2, #5
 800451a:	69fa      	ldr	r2, [r7, #28]
 800451c:	440a      	add	r2, r1
 800451e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004522:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004526:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800452a:	3301      	adds	r3, #1
 800452c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	791b      	ldrb	r3, [r3, #4]
 8004532:	461a      	mov	r2, r3
 8004534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004536:	4293      	cmp	r3, r2
 8004538:	d3b2      	bcc.n	80044a0 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004540:	69db      	ldr	r3, [r3, #28]
 8004542:	69fa      	ldr	r2, [r7, #28]
 8004544:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004548:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800454c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	7bdb      	ldrb	r3, [r3, #15]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d016      	beq.n	8004584 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800455c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004560:	69fa      	ldr	r2, [r7, #28]
 8004562:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004566:	f043 030b 	orr.w	r3, r3, #11
 800456a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004576:	69fa      	ldr	r2, [r7, #28]
 8004578:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800457c:	f043 030b 	orr.w	r3, r3, #11
 8004580:	6453      	str	r3, [r2, #68]	@ 0x44
 8004582:	e015      	b.n	80045b0 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800458a:	695b      	ldr	r3, [r3, #20]
 800458c:	69fa      	ldr	r2, [r7, #28]
 800458e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004592:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004596:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800459a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	69fa      	ldr	r2, [r7, #28]
 80045a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045aa:	f043 030b 	orr.w	r3, r3, #11
 80045ae:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	69fa      	ldr	r2, [r7, #28]
 80045ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045be:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80045c2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6818      	ldr	r0, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80045d2:	461a      	mov	r2, r3
 80045d4:	f004 fadc 	bl	8008b90 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	695a      	ldr	r2, [r3, #20]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80045e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4618      	mov	r0, r3
 80045ee:	f004 fa0b 	bl	8008a08 <USB_ReadInterrupts>
 80045f2:	4603      	mov	r3, r0
 80045f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045fc:	d123      	bne.n	8004646 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4618      	mov	r0, r3
 8004604:	f004 faa1 	bl	8008b4a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4618      	mov	r0, r3
 800460e:	f003 fb58 	bl	8007cc2 <USB_GetDevSpeed>
 8004612:	4603      	mov	r3, r0
 8004614:	461a      	mov	r2, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681c      	ldr	r4, [r3, #0]
 800461e:	f001 fa09 	bl	8005a34 <HAL_RCC_GetHCLKFreq>
 8004622:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004628:	461a      	mov	r2, r3
 800462a:	4620      	mov	r0, r4
 800462c:	f003 f85c 	bl	80076e8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f007 fd6a 	bl	800c10a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	695a      	ldr	r2, [r3, #20]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004644:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4618      	mov	r0, r3
 800464c:	f004 f9dc 	bl	8008a08 <USB_ReadInterrupts>
 8004650:	4603      	mov	r3, r0
 8004652:	f003 0308 	and.w	r3, r3, #8
 8004656:	2b08      	cmp	r3, #8
 8004658:	d10a      	bne.n	8004670 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f007 fd47 	bl	800c0ee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	695a      	ldr	r2, [r3, #20]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f002 0208 	and.w	r2, r2, #8
 800466e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4618      	mov	r0, r3
 8004676:	f004 f9c7 	bl	8008a08 <USB_ReadInterrupts>
 800467a:	4603      	mov	r3, r0
 800467c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004680:	2b80      	cmp	r3, #128	@ 0x80
 8004682:	d123      	bne.n	80046cc <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004684:	6a3b      	ldr	r3, [r7, #32]
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800468c:	6a3b      	ldr	r3, [r7, #32]
 800468e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004690:	2301      	movs	r3, #1
 8004692:	627b      	str	r3, [r7, #36]	@ 0x24
 8004694:	e014      	b.n	80046c0 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004696:	6879      	ldr	r1, [r7, #4]
 8004698:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800469a:	4613      	mov	r3, r2
 800469c:	00db      	lsls	r3, r3, #3
 800469e:	4413      	add	r3, r2
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	440b      	add	r3, r1
 80046a4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d105      	bne.n	80046ba <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80046ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	4619      	mov	r1, r3
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f000 fb0a 	bl	8004cce <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80046ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046bc:	3301      	adds	r3, #1
 80046be:	627b      	str	r3, [r7, #36]	@ 0x24
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	791b      	ldrb	r3, [r3, #4]
 80046c4:	461a      	mov	r2, r3
 80046c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d3e4      	bcc.n	8004696 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4618      	mov	r0, r3
 80046d2:	f004 f999 	bl	8008a08 <USB_ReadInterrupts>
 80046d6:	4603      	mov	r3, r0
 80046d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046e0:	d13c      	bne.n	800475c <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80046e2:	2301      	movs	r3, #1
 80046e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80046e6:	e02b      	b.n	8004740 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80046e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ea:	015a      	lsls	r2, r3, #5
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	4413      	add	r3, r2
 80046f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80046f8:	6879      	ldr	r1, [r7, #4]
 80046fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046fc:	4613      	mov	r3, r2
 80046fe:	00db      	lsls	r3, r3, #3
 8004700:	4413      	add	r3, r2
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	440b      	add	r3, r1
 8004706:	3318      	adds	r3, #24
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	2b01      	cmp	r3, #1
 800470c:	d115      	bne.n	800473a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800470e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004710:	2b00      	cmp	r3, #0
 8004712:	da12      	bge.n	800473a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004714:	6879      	ldr	r1, [r7, #4]
 8004716:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004718:	4613      	mov	r3, r2
 800471a:	00db      	lsls	r3, r3, #3
 800471c:	4413      	add	r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	440b      	add	r3, r1
 8004722:	3317      	adds	r3, #23
 8004724:	2201      	movs	r2, #1
 8004726:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800472a:	b2db      	uxtb	r3, r3
 800472c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004730:	b2db      	uxtb	r3, r3
 8004732:	4619      	mov	r1, r3
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 faca 	bl	8004cce <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800473a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800473c:	3301      	adds	r3, #1
 800473e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	791b      	ldrb	r3, [r3, #4]
 8004744:	461a      	mov	r2, r3
 8004746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004748:	4293      	cmp	r3, r2
 800474a:	d3cd      	bcc.n	80046e8 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	695a      	ldr	r2, [r3, #20]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800475a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4618      	mov	r0, r3
 8004762:	f004 f951 	bl	8008a08 <USB_ReadInterrupts>
 8004766:	4603      	mov	r3, r0
 8004768:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800476c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004770:	d156      	bne.n	8004820 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004772:	2301      	movs	r3, #1
 8004774:	627b      	str	r3, [r7, #36]	@ 0x24
 8004776:	e045      	b.n	8004804 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800477a:	015a      	lsls	r2, r3, #5
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	4413      	add	r3, r2
 8004780:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004788:	6879      	ldr	r1, [r7, #4]
 800478a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800478c:	4613      	mov	r3, r2
 800478e:	00db      	lsls	r3, r3, #3
 8004790:	4413      	add	r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	440b      	add	r3, r1
 8004796:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	2b01      	cmp	r3, #1
 800479e:	d12e      	bne.n	80047fe <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80047a0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	da2b      	bge.n	80047fe <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	0c1a      	lsrs	r2, r3, #16
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80047b0:	4053      	eors	r3, r2
 80047b2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d121      	bne.n	80047fe <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80047ba:	6879      	ldr	r1, [r7, #4]
 80047bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047be:	4613      	mov	r3, r2
 80047c0:	00db      	lsls	r3, r3, #3
 80047c2:	4413      	add	r3, r2
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	440b      	add	r3, r1
 80047c8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80047cc:	2201      	movs	r2, #1
 80047ce:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80047d0:	6a3b      	ldr	r3, [r7, #32]
 80047d2:	699b      	ldr	r3, [r3, #24]
 80047d4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80047d8:	6a3b      	ldr	r3, [r7, #32]
 80047da:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80047dc:	6a3b      	ldr	r3, [r7, #32]
 80047de:	695b      	ldr	r3, [r3, #20]
 80047e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d10a      	bne.n	80047fe <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	69fa      	ldr	r2, [r7, #28]
 80047f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80047fa:	6053      	str	r3, [r2, #4]
            break;
 80047fc:	e008      	b.n	8004810 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80047fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004800:	3301      	adds	r3, #1
 8004802:	627b      	str	r3, [r7, #36]	@ 0x24
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	791b      	ldrb	r3, [r3, #4]
 8004808:	461a      	mov	r2, r3
 800480a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800480c:	4293      	cmp	r3, r2
 800480e:	d3b3      	bcc.n	8004778 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	695a      	ldr	r2, [r3, #20]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800481e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4618      	mov	r0, r3
 8004826:	f004 f8ef 	bl	8008a08 <USB_ReadInterrupts>
 800482a:	4603      	mov	r3, r0
 800482c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004830:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004834:	d10a      	bne.n	800484c <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f007 fce8 	bl	800c20c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	695a      	ldr	r2, [r3, #20]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800484a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4618      	mov	r0, r3
 8004852:	f004 f8d9 	bl	8008a08 <USB_ReadInterrupts>
 8004856:	4603      	mov	r3, r0
 8004858:	f003 0304 	and.w	r3, r3, #4
 800485c:	2b04      	cmp	r3, #4
 800485e:	d115      	bne.n	800488c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	f003 0304 	and.w	r3, r3, #4
 800486e:	2b00      	cmp	r3, #0
 8004870:	d002      	beq.n	8004878 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f007 fcd8 	bl	800c228 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	6859      	ldr	r1, [r3, #4]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	69ba      	ldr	r2, [r7, #24]
 8004884:	430a      	orrs	r2, r1
 8004886:	605a      	str	r2, [r3, #4]
 8004888:	e000      	b.n	800488c <HAL_PCD_IRQHandler+0x93c>
      return;
 800488a:	bf00      	nop
    }
  }
}
 800488c:	3734      	adds	r7, #52	@ 0x34
 800488e:	46bd      	mov	sp, r7
 8004890:	bd90      	pop	{r4, r7, pc}

08004892 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004892:	b580      	push	{r7, lr}
 8004894:	b082      	sub	sp, #8
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
 800489a:	460b      	mov	r3, r1
 800489c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d101      	bne.n	80048ac <HAL_PCD_SetAddress+0x1a>
 80048a8:	2302      	movs	r3, #2
 80048aa:	e012      	b.n	80048d2 <HAL_PCD_SetAddress+0x40>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	78fa      	ldrb	r2, [r7, #3]
 80048b8:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	78fa      	ldrb	r2, [r7, #3]
 80048c0:	4611      	mov	r1, r2
 80048c2:	4618      	mov	r0, r3
 80048c4:	f004 f838 	bl	8008938 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3708      	adds	r7, #8
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}

080048da <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80048da:	b580      	push	{r7, lr}
 80048dc:	b084      	sub	sp, #16
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
 80048e2:	4608      	mov	r0, r1
 80048e4:	4611      	mov	r1, r2
 80048e6:	461a      	mov	r2, r3
 80048e8:	4603      	mov	r3, r0
 80048ea:	70fb      	strb	r3, [r7, #3]
 80048ec:	460b      	mov	r3, r1
 80048ee:	803b      	strh	r3, [r7, #0]
 80048f0:	4613      	mov	r3, r2
 80048f2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80048f4:	2300      	movs	r3, #0
 80048f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80048f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	da0f      	bge.n	8004920 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004900:	78fb      	ldrb	r3, [r7, #3]
 8004902:	f003 020f 	and.w	r2, r3, #15
 8004906:	4613      	mov	r3, r2
 8004908:	00db      	lsls	r3, r3, #3
 800490a:	4413      	add	r3, r2
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	3310      	adds	r3, #16
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	4413      	add	r3, r2
 8004914:	3304      	adds	r3, #4
 8004916:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2201      	movs	r2, #1
 800491c:	705a      	strb	r2, [r3, #1]
 800491e:	e00f      	b.n	8004940 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004920:	78fb      	ldrb	r3, [r7, #3]
 8004922:	f003 020f 	and.w	r2, r3, #15
 8004926:	4613      	mov	r3, r2
 8004928:	00db      	lsls	r3, r3, #3
 800492a:	4413      	add	r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	4413      	add	r3, r2
 8004936:	3304      	adds	r3, #4
 8004938:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004940:	78fb      	ldrb	r3, [r7, #3]
 8004942:	f003 030f 	and.w	r3, r3, #15
 8004946:	b2da      	uxtb	r2, r3
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800494c:	883b      	ldrh	r3, [r7, #0]
 800494e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	78ba      	ldrb	r2, [r7, #2]
 800495a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	785b      	ldrb	r3, [r3, #1]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d004      	beq.n	800496e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	461a      	mov	r2, r3
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800496e:	78bb      	ldrb	r3, [r7, #2]
 8004970:	2b02      	cmp	r3, #2
 8004972:	d102      	bne.n	800497a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004980:	2b01      	cmp	r3, #1
 8004982:	d101      	bne.n	8004988 <HAL_PCD_EP_Open+0xae>
 8004984:	2302      	movs	r3, #2
 8004986:	e00e      	b.n	80049a6 <HAL_PCD_EP_Open+0xcc>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68f9      	ldr	r1, [r7, #12]
 8004996:	4618      	mov	r0, r3
 8004998:	f003 f9b8 	bl	8007d0c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80049a4:	7afb      	ldrb	r3, [r7, #11]
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3710      	adds	r7, #16
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b084      	sub	sp, #16
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
 80049b6:	460b      	mov	r3, r1
 80049b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80049ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	da0f      	bge.n	80049e2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049c2:	78fb      	ldrb	r3, [r7, #3]
 80049c4:	f003 020f 	and.w	r2, r3, #15
 80049c8:	4613      	mov	r3, r2
 80049ca:	00db      	lsls	r3, r3, #3
 80049cc:	4413      	add	r3, r2
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	3310      	adds	r3, #16
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	4413      	add	r3, r2
 80049d6:	3304      	adds	r3, #4
 80049d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2201      	movs	r2, #1
 80049de:	705a      	strb	r2, [r3, #1]
 80049e0:	e00f      	b.n	8004a02 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049e2:	78fb      	ldrb	r3, [r7, #3]
 80049e4:	f003 020f 	and.w	r2, r3, #15
 80049e8:	4613      	mov	r3, r2
 80049ea:	00db      	lsls	r3, r3, #3
 80049ec:	4413      	add	r3, r2
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	4413      	add	r3, r2
 80049f8:	3304      	adds	r3, #4
 80049fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2200      	movs	r2, #0
 8004a00:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a02:	78fb      	ldrb	r3, [r7, #3]
 8004a04:	f003 030f 	and.w	r3, r3, #15
 8004a08:	b2da      	uxtb	r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d101      	bne.n	8004a1c <HAL_PCD_EP_Close+0x6e>
 8004a18:	2302      	movs	r3, #2
 8004a1a:	e00e      	b.n	8004a3a <HAL_PCD_EP_Close+0x8c>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68f9      	ldr	r1, [r7, #12]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f003 f9f6 	bl	8007e1c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b086      	sub	sp, #24
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	60f8      	str	r0, [r7, #12]
 8004a4a:	607a      	str	r2, [r7, #4]
 8004a4c:	603b      	str	r3, [r7, #0]
 8004a4e:	460b      	mov	r3, r1
 8004a50:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a52:	7afb      	ldrb	r3, [r7, #11]
 8004a54:	f003 020f 	and.w	r2, r3, #15
 8004a58:	4613      	mov	r3, r2
 8004a5a:	00db      	lsls	r3, r3, #3
 8004a5c:	4413      	add	r3, r2
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	4413      	add	r3, r2
 8004a68:	3304      	adds	r3, #4
 8004a6a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	683a      	ldr	r2, [r7, #0]
 8004a76:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	2200      	movs	r2, #0
 8004a82:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a84:	7afb      	ldrb	r3, [r7, #11]
 8004a86:	f003 030f 	and.w	r3, r3, #15
 8004a8a:	b2da      	uxtb	r2, r3
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	799b      	ldrb	r3, [r3, #6]
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d102      	bne.n	8004a9e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6818      	ldr	r0, [r3, #0]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	799b      	ldrb	r3, [r3, #6]
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	6979      	ldr	r1, [r7, #20]
 8004aaa:	f003 fa93 	bl	8007fd4 <USB_EPStartXfer>

  return HAL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3718      	adds	r7, #24
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004ac4:	78fb      	ldrb	r3, [r7, #3]
 8004ac6:	f003 020f 	and.w	r2, r3, #15
 8004aca:	6879      	ldr	r1, [r7, #4]
 8004acc:	4613      	mov	r3, r2
 8004ace:	00db      	lsls	r3, r3, #3
 8004ad0:	4413      	add	r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	440b      	add	r3, r1
 8004ad6:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004ada:	681b      	ldr	r3, [r3, #0]
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	607a      	str	r2, [r7, #4]
 8004af2:	603b      	str	r3, [r7, #0]
 8004af4:	460b      	mov	r3, r1
 8004af6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004af8:	7afb      	ldrb	r3, [r7, #11]
 8004afa:	f003 020f 	and.w	r2, r3, #15
 8004afe:	4613      	mov	r3, r2
 8004b00:	00db      	lsls	r3, r3, #3
 8004b02:	4413      	add	r3, r2
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	3310      	adds	r3, #16
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	3304      	adds	r3, #4
 8004b0e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	683a      	ldr	r2, [r7, #0]
 8004b1a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	2201      	movs	r2, #1
 8004b26:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b28:	7afb      	ldrb	r3, [r7, #11]
 8004b2a:	f003 030f 	and.w	r3, r3, #15
 8004b2e:	b2da      	uxtb	r2, r3
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	799b      	ldrb	r3, [r3, #6]
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d102      	bne.n	8004b42 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6818      	ldr	r0, [r3, #0]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	799b      	ldrb	r3, [r3, #6]
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	6979      	ldr	r1, [r7, #20]
 8004b4e:	f003 fa41 	bl	8007fd4 <USB_EPStartXfer>

  return HAL_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3718      	adds	r7, #24
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	460b      	mov	r3, r1
 8004b66:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004b68:	78fb      	ldrb	r3, [r7, #3]
 8004b6a:	f003 030f 	and.w	r3, r3, #15
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	7912      	ldrb	r2, [r2, #4]
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d901      	bls.n	8004b7a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e04f      	b.n	8004c1a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004b7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	da0f      	bge.n	8004ba2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b82:	78fb      	ldrb	r3, [r7, #3]
 8004b84:	f003 020f 	and.w	r2, r3, #15
 8004b88:	4613      	mov	r3, r2
 8004b8a:	00db      	lsls	r3, r3, #3
 8004b8c:	4413      	add	r3, r2
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	3310      	adds	r3, #16
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	4413      	add	r3, r2
 8004b96:	3304      	adds	r3, #4
 8004b98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	705a      	strb	r2, [r3, #1]
 8004ba0:	e00d      	b.n	8004bbe <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004ba2:	78fa      	ldrb	r2, [r7, #3]
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	00db      	lsls	r3, r3, #3
 8004ba8:	4413      	add	r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	4413      	add	r3, r2
 8004bb4:	3304      	adds	r3, #4
 8004bb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004bc4:	78fb      	ldrb	r3, [r7, #3]
 8004bc6:	f003 030f 	and.w	r3, r3, #15
 8004bca:	b2da      	uxtb	r2, r3
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d101      	bne.n	8004bde <HAL_PCD_EP_SetStall+0x82>
 8004bda:	2302      	movs	r3, #2
 8004bdc:	e01d      	b.n	8004c1a <HAL_PCD_EP_SetStall+0xbe>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2201      	movs	r2, #1
 8004be2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68f9      	ldr	r1, [r7, #12]
 8004bec:	4618      	mov	r0, r3
 8004bee:	f003 fdcf 	bl	8008790 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004bf2:	78fb      	ldrb	r3, [r7, #3]
 8004bf4:	f003 030f 	and.w	r3, r3, #15
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d109      	bne.n	8004c10 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6818      	ldr	r0, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	7999      	ldrb	r1, [r3, #6]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	f003 ffc0 	bl	8008b90 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3710      	adds	r7, #16
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}

08004c22 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b084      	sub	sp, #16
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
 8004c2a:	460b      	mov	r3, r1
 8004c2c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004c2e:	78fb      	ldrb	r3, [r7, #3]
 8004c30:	f003 030f 	and.w	r3, r3, #15
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	7912      	ldrb	r2, [r2, #4]
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d901      	bls.n	8004c40 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e042      	b.n	8004cc6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004c40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	da0f      	bge.n	8004c68 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c48:	78fb      	ldrb	r3, [r7, #3]
 8004c4a:	f003 020f 	and.w	r2, r3, #15
 8004c4e:	4613      	mov	r3, r2
 8004c50:	00db      	lsls	r3, r3, #3
 8004c52:	4413      	add	r3, r2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	3310      	adds	r3, #16
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	3304      	adds	r3, #4
 8004c5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2201      	movs	r2, #1
 8004c64:	705a      	strb	r2, [r3, #1]
 8004c66:	e00f      	b.n	8004c88 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c68:	78fb      	ldrb	r3, [r7, #3]
 8004c6a:	f003 020f 	and.w	r2, r3, #15
 8004c6e:	4613      	mov	r3, r2
 8004c70:	00db      	lsls	r3, r3, #3
 8004c72:	4413      	add	r3, r2
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	3304      	adds	r3, #4
 8004c80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2200      	movs	r2, #0
 8004c86:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c8e:	78fb      	ldrb	r3, [r7, #3]
 8004c90:	f003 030f 	and.w	r3, r3, #15
 8004c94:	b2da      	uxtb	r2, r3
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d101      	bne.n	8004ca8 <HAL_PCD_EP_ClrStall+0x86>
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	e00e      	b.n	8004cc6 <HAL_PCD_EP_ClrStall+0xa4>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68f9      	ldr	r1, [r7, #12]
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f003 fdd8 	bl	800886c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b084      	sub	sp, #16
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004cda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	da0c      	bge.n	8004cfc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ce2:	78fb      	ldrb	r3, [r7, #3]
 8004ce4:	f003 020f 	and.w	r2, r3, #15
 8004ce8:	4613      	mov	r3, r2
 8004cea:	00db      	lsls	r3, r3, #3
 8004cec:	4413      	add	r3, r2
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	3310      	adds	r3, #16
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	3304      	adds	r3, #4
 8004cf8:	60fb      	str	r3, [r7, #12]
 8004cfa:	e00c      	b.n	8004d16 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004cfc:	78fb      	ldrb	r3, [r7, #3]
 8004cfe:	f003 020f 	and.w	r2, r3, #15
 8004d02:	4613      	mov	r3, r2
 8004d04:	00db      	lsls	r3, r3, #3
 8004d06:	4413      	add	r3, r2
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	4413      	add	r3, r2
 8004d12:	3304      	adds	r3, #4
 8004d14:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68f9      	ldr	r1, [r7, #12]
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f003 fbf7 	bl	8008510 <USB_EPStopXfer>
 8004d22:	4603      	mov	r3, r0
 8004d24:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004d26:	7afb      	ldrb	r3, [r7, #11]
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3710      	adds	r7, #16
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b08a      	sub	sp, #40	@ 0x28
 8004d34:	af02      	add	r7, sp, #8
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004d44:	683a      	ldr	r2, [r7, #0]
 8004d46:	4613      	mov	r3, r2
 8004d48:	00db      	lsls	r3, r3, #3
 8004d4a:	4413      	add	r3, r2
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	3310      	adds	r3, #16
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	4413      	add	r3, r2
 8004d54:	3304      	adds	r3, #4
 8004d56:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	695a      	ldr	r2, [r3, #20]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d901      	bls.n	8004d68 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e06b      	b.n	8004e40 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	691a      	ldr	r2, [r3, #16]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	695b      	ldr	r3, [r3, #20]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	69fa      	ldr	r2, [r7, #28]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d902      	bls.n	8004d84 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	3303      	adds	r3, #3
 8004d88:	089b      	lsrs	r3, r3, #2
 8004d8a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004d8c:	e02a      	b.n	8004de4 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	691a      	ldr	r2, [r3, #16]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	69fa      	ldr	r2, [r7, #28]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d902      	bls.n	8004daa <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	3303      	adds	r3, #3
 8004dae:	089b      	lsrs	r3, r3, #2
 8004db0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	68d9      	ldr	r1, [r3, #12]
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	b2da      	uxtb	r2, r3
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004dc2:	9300      	str	r3, [sp, #0]
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	6978      	ldr	r0, [r7, #20]
 8004dc8:	f003 fc4c 	bl	8008664 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	68da      	ldr	r2, [r3, #12]
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	441a      	add	r2, r3
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	695a      	ldr	r2, [r3, #20]
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	441a      	add	r2, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	015a      	lsls	r2, r3, #5
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	4413      	add	r3, r2
 8004dec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004df4:	69ba      	ldr	r2, [r7, #24]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d809      	bhi.n	8004e0e <PCD_WriteEmptyTxFifo+0xde>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	695a      	ldr	r2, [r3, #20]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d203      	bcs.n	8004e0e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1bf      	bne.n	8004d8e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	691a      	ldr	r2, [r3, #16]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d811      	bhi.n	8004e3e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	f003 030f 	and.w	r3, r3, #15
 8004e20:	2201      	movs	r2, #1
 8004e22:	fa02 f303 	lsl.w	r3, r2, r3
 8004e26:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	43db      	mvns	r3, r3
 8004e34:	6939      	ldr	r1, [r7, #16]
 8004e36:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3720      	adds	r7, #32
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b088      	sub	sp, #32
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	333c      	adds	r3, #60	@ 0x3c
 8004e60:	3304      	adds	r3, #4
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	015a      	lsls	r2, r3, #5
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	799b      	ldrb	r3, [r3, #6]
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d17b      	bne.n	8004f76 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	f003 0308 	and.w	r3, r3, #8
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d015      	beq.n	8004eb4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	4a61      	ldr	r2, [pc, #388]	@ (8005010 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	f240 80b9 	bls.w	8005004 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	f000 80b3 	beq.w	8005004 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	015a      	lsls	r2, r3, #5
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004eaa:	461a      	mov	r2, r3
 8004eac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004eb0:	6093      	str	r3, [r2, #8]
 8004eb2:	e0a7      	b.n	8005004 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	f003 0320 	and.w	r3, r3, #32
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d009      	beq.n	8004ed2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	015a      	lsls	r2, r3, #5
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004eca:	461a      	mov	r2, r3
 8004ecc:	2320      	movs	r3, #32
 8004ece:	6093      	str	r3, [r2, #8]
 8004ed0:	e098      	b.n	8005004 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	f040 8093 	bne.w	8005004 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	4a4b      	ldr	r2, [pc, #300]	@ (8005010 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d90f      	bls.n	8004f06 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d00a      	beq.n	8004f06 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	015a      	lsls	r2, r3, #5
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004efc:	461a      	mov	r2, r3
 8004efe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f02:	6093      	str	r3, [r2, #8]
 8004f04:	e07e      	b.n	8005004 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004f06:	683a      	ldr	r2, [r7, #0]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	00db      	lsls	r3, r3, #3
 8004f0c:	4413      	add	r3, r2
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	4413      	add	r3, r2
 8004f18:	3304      	adds	r3, #4
 8004f1a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6a1a      	ldr	r2, [r3, #32]
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	0159      	lsls	r1, r3, #5
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	440b      	add	r3, r1
 8004f28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f32:	1ad2      	subs	r2, r2, r3
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d114      	bne.n	8004f68 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d109      	bne.n	8004f5a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6818      	ldr	r0, [r3, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004f50:	461a      	mov	r2, r3
 8004f52:	2101      	movs	r1, #1
 8004f54:	f003 fe1c 	bl	8008b90 <USB_EP0_OutStart>
 8004f58:	e006      	b.n	8004f68 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	68da      	ldr	r2, [r3, #12]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	695b      	ldr	r3, [r3, #20]
 8004f62:	441a      	add	r2, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f007 f888 	bl	800c084 <HAL_PCD_DataOutStageCallback>
 8004f74:	e046      	b.n	8005004 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	4a26      	ldr	r2, [pc, #152]	@ (8005014 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d124      	bne.n	8004fc8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d00a      	beq.n	8004f9e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	015a      	lsls	r2, r3, #5
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	4413      	add	r3, r2
 8004f90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f94:	461a      	mov	r2, r3
 8004f96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f9a:	6093      	str	r3, [r2, #8]
 8004f9c:	e032      	b.n	8005004 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	f003 0320 	and.w	r3, r3, #32
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d008      	beq.n	8004fba <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	015a      	lsls	r2, r3, #5
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	4413      	add	r3, r2
 8004fb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	2320      	movs	r3, #32
 8004fb8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f007 f85f 	bl	800c084 <HAL_PCD_DataOutStageCallback>
 8004fc6:	e01d      	b.n	8005004 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d114      	bne.n	8004ff8 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004fce:	6879      	ldr	r1, [r7, #4]
 8004fd0:	683a      	ldr	r2, [r7, #0]
 8004fd2:	4613      	mov	r3, r2
 8004fd4:	00db      	lsls	r3, r3, #3
 8004fd6:	4413      	add	r3, r2
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	440b      	add	r3, r1
 8004fdc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d108      	bne.n	8004ff8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6818      	ldr	r0, [r3, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	2100      	movs	r1, #0
 8004ff4:	f003 fdcc 	bl	8008b90 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f007 f840 	bl	800c084 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3720      	adds	r7, #32
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	4f54300a 	.word	0x4f54300a
 8005014:	4f54310a 	.word	0x4f54310a

08005018 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b086      	sub	sp, #24
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	333c      	adds	r3, #60	@ 0x3c
 8005030:	3304      	adds	r3, #4
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	015a      	lsls	r2, r3, #5
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	4413      	add	r3, r2
 800503e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	4a15      	ldr	r2, [pc, #84]	@ (80050a0 <PCD_EP_OutSetupPacket_int+0x88>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d90e      	bls.n	800506c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005054:	2b00      	cmp	r3, #0
 8005056:	d009      	beq.n	800506c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	015a      	lsls	r2, r3, #5
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	4413      	add	r3, r2
 8005060:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005064:	461a      	mov	r2, r3
 8005066:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800506a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f006 fff7 	bl	800c060 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	4a0a      	ldr	r2, [pc, #40]	@ (80050a0 <PCD_EP_OutSetupPacket_int+0x88>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d90c      	bls.n	8005094 <PCD_EP_OutSetupPacket_int+0x7c>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	799b      	ldrb	r3, [r3, #6]
 800507e:	2b01      	cmp	r3, #1
 8005080:	d108      	bne.n	8005094 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6818      	ldr	r0, [r3, #0]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800508c:	461a      	mov	r2, r3
 800508e:	2101      	movs	r1, #1
 8005090:	f003 fd7e 	bl	8008b90 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3718      	adds	r7, #24
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	4f54300a 	.word	0x4f54300a

080050a4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	460b      	mov	r3, r1
 80050ae:	70fb      	strb	r3, [r7, #3]
 80050b0:	4613      	mov	r3, r2
 80050b2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ba:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80050bc:	78fb      	ldrb	r3, [r7, #3]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d107      	bne.n	80050d2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80050c2:	883b      	ldrh	r3, [r7, #0]
 80050c4:	0419      	lsls	r1, r3, #16
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68ba      	ldr	r2, [r7, #8]
 80050cc:	430a      	orrs	r2, r1
 80050ce:	629a      	str	r2, [r3, #40]	@ 0x28
 80050d0:	e028      	b.n	8005124 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050d8:	0c1b      	lsrs	r3, r3, #16
 80050da:	68ba      	ldr	r2, [r7, #8]
 80050dc:	4413      	add	r3, r2
 80050de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80050e0:	2300      	movs	r3, #0
 80050e2:	73fb      	strb	r3, [r7, #15]
 80050e4:	e00d      	b.n	8005102 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	7bfb      	ldrb	r3, [r7, #15]
 80050ec:	3340      	adds	r3, #64	@ 0x40
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	4413      	add	r3, r2
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	0c1b      	lsrs	r3, r3, #16
 80050f6:	68ba      	ldr	r2, [r7, #8]
 80050f8:	4413      	add	r3, r2
 80050fa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80050fc:	7bfb      	ldrb	r3, [r7, #15]
 80050fe:	3301      	adds	r3, #1
 8005100:	73fb      	strb	r3, [r7, #15]
 8005102:	7bfa      	ldrb	r2, [r7, #15]
 8005104:	78fb      	ldrb	r3, [r7, #3]
 8005106:	3b01      	subs	r3, #1
 8005108:	429a      	cmp	r2, r3
 800510a:	d3ec      	bcc.n	80050e6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800510c:	883b      	ldrh	r3, [r7, #0]
 800510e:	0418      	lsls	r0, r3, #16
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6819      	ldr	r1, [r3, #0]
 8005114:	78fb      	ldrb	r3, [r7, #3]
 8005116:	3b01      	subs	r3, #1
 8005118:	68ba      	ldr	r2, [r7, #8]
 800511a:	4302      	orrs	r2, r0
 800511c:	3340      	adds	r3, #64	@ 0x40
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	440b      	add	r3, r1
 8005122:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3714      	adds	r7, #20
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr

08005132 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005132:	b480      	push	{r7}
 8005134:	b083      	sub	sp, #12
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
 800513a:	460b      	mov	r3, r1
 800513c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	887a      	ldrh	r2, [r7, #2]
 8005144:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	460b      	mov	r3, r1
 800515e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005160:	bf00      	nop
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b086      	sub	sp, #24
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d101      	bne.n	800517e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e267      	b.n	800564e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0301 	and.w	r3, r3, #1
 8005186:	2b00      	cmp	r3, #0
 8005188:	d075      	beq.n	8005276 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800518a:	4b88      	ldr	r3, [pc, #544]	@ (80053ac <HAL_RCC_OscConfig+0x240>)
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f003 030c 	and.w	r3, r3, #12
 8005192:	2b04      	cmp	r3, #4
 8005194:	d00c      	beq.n	80051b0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005196:	4b85      	ldr	r3, [pc, #532]	@ (80053ac <HAL_RCC_OscConfig+0x240>)
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800519e:	2b08      	cmp	r3, #8
 80051a0:	d112      	bne.n	80051c8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051a2:	4b82      	ldr	r3, [pc, #520]	@ (80053ac <HAL_RCC_OscConfig+0x240>)
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80051ae:	d10b      	bne.n	80051c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051b0:	4b7e      	ldr	r3, [pc, #504]	@ (80053ac <HAL_RCC_OscConfig+0x240>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d05b      	beq.n	8005274 <HAL_RCC_OscConfig+0x108>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d157      	bne.n	8005274 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e242      	b.n	800564e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051d0:	d106      	bne.n	80051e0 <HAL_RCC_OscConfig+0x74>
 80051d2:	4b76      	ldr	r3, [pc, #472]	@ (80053ac <HAL_RCC_OscConfig+0x240>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a75      	ldr	r2, [pc, #468]	@ (80053ac <HAL_RCC_OscConfig+0x240>)
 80051d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051dc:	6013      	str	r3, [r2, #0]
 80051de:	e01d      	b.n	800521c <HAL_RCC_OscConfig+0xb0>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80051e8:	d10c      	bne.n	8005204 <HAL_RCC_OscConfig+0x98>
 80051ea:	4b70      	ldr	r3, [pc, #448]	@ (80053ac <HAL_RCC_OscConfig+0x240>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a6f      	ldr	r2, [pc, #444]	@ (80053ac <HAL_RCC_OscConfig+0x240>)
 80051f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80051f4:	6013      	str	r3, [r2, #0]
 80051f6:	4b6d      	ldr	r3, [pc, #436]	@ (80053ac <HAL_RCC_OscConfig+0x240>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a6c      	ldr	r2, [pc, #432]	@ (80053ac <HAL_RCC_OscConfig+0x240>)
 80051fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005200:	6013      	str	r3, [r2, #0]
 8005202:	e00b      	b.n	800521c <HAL_RCC_OscConfig+0xb0>
 8005204:	4b69      	ldr	r3, [pc, #420]	@ (80053ac <HAL_RCC_OscConfig+0x240>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a68      	ldr	r2, [pc, #416]	@ (80053ac <HAL_RCC_OscConfig+0x240>)
 800520a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800520e:	6013      	str	r3, [r2, #0]
 8005210:	4b66      	ldr	r3, [pc, #408]	@ (80053ac <HAL_RCC_OscConfig+0x240>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a65      	ldr	r2, [pc, #404]	@ (80053ac <HAL_RCC_OscConfig+0x240>)
 8005216:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800521a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d013      	beq.n	800524c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005224:	f7fc fd6e 	bl	8001d04 <HAL_GetTick>
 8005228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800522a:	e008      	b.n	800523e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800522c:	f7fc fd6a 	bl	8001d04 <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	2b64      	cmp	r3, #100	@ 0x64
 8005238:	d901      	bls.n	800523e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e207      	b.n	800564e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800523e:	4b5b      	ldr	r3, [pc, #364]	@ (80053ac <HAL_RCC_OscConfig+0x240>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005246:	2b00      	cmp	r3, #0
 8005248:	d0f0      	beq.n	800522c <HAL_RCC_OscConfig+0xc0>
 800524a:	e014      	b.n	8005276 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800524c:	f7fc fd5a 	bl	8001d04 <HAL_GetTick>
 8005250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005252:	e008      	b.n	8005266 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005254:	f7fc fd56 	bl	8001d04 <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	2b64      	cmp	r3, #100	@ 0x64
 8005260:	d901      	bls.n	8005266 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e1f3      	b.n	800564e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005266:	4b51      	ldr	r3, [pc, #324]	@ (80053ac <HAL_RCC_OscConfig+0x240>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d1f0      	bne.n	8005254 <HAL_RCC_OscConfig+0xe8>
 8005272:	e000      	b.n	8005276 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005274:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 0302 	and.w	r3, r3, #2
 800527e:	2b00      	cmp	r3, #0
 8005280:	d063      	beq.n	800534a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005282:	4b4a      	ldr	r3, [pc, #296]	@ (80053ac <HAL_RCC_OscConfig+0x240>)
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	f003 030c 	and.w	r3, r3, #12
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00b      	beq.n	80052a6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800528e:	4b47      	ldr	r3, [pc, #284]	@ (80053ac <HAL_RCC_OscConfig+0x240>)
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005296:	2b08      	cmp	r3, #8
 8005298:	d11c      	bne.n	80052d4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800529a:	4b44      	ldr	r3, [pc, #272]	@ (80053ac <HAL_RCC_OscConfig+0x240>)
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d116      	bne.n	80052d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052a6:	4b41      	ldr	r3, [pc, #260]	@ (80053ac <HAL_RCC_OscConfig+0x240>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 0302 	and.w	r3, r3, #2
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d005      	beq.n	80052be <HAL_RCC_OscConfig+0x152>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d001      	beq.n	80052be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e1c7      	b.n	800564e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052be:	4b3b      	ldr	r3, [pc, #236]	@ (80053ac <HAL_RCC_OscConfig+0x240>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	00db      	lsls	r3, r3, #3
 80052cc:	4937      	ldr	r1, [pc, #220]	@ (80053ac <HAL_RCC_OscConfig+0x240>)
 80052ce:	4313      	orrs	r3, r2
 80052d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052d2:	e03a      	b.n	800534a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d020      	beq.n	800531e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052dc:	4b34      	ldr	r3, [pc, #208]	@ (80053b0 <HAL_RCC_OscConfig+0x244>)
 80052de:	2201      	movs	r2, #1
 80052e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e2:	f7fc fd0f 	bl	8001d04 <HAL_GetTick>
 80052e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052e8:	e008      	b.n	80052fc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052ea:	f7fc fd0b 	bl	8001d04 <HAL_GetTick>
 80052ee:	4602      	mov	r2, r0
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	2b02      	cmp	r3, #2
 80052f6:	d901      	bls.n	80052fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	e1a8      	b.n	800564e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052fc:	4b2b      	ldr	r3, [pc, #172]	@ (80053ac <HAL_RCC_OscConfig+0x240>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0302 	and.w	r3, r3, #2
 8005304:	2b00      	cmp	r3, #0
 8005306:	d0f0      	beq.n	80052ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005308:	4b28      	ldr	r3, [pc, #160]	@ (80053ac <HAL_RCC_OscConfig+0x240>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	00db      	lsls	r3, r3, #3
 8005316:	4925      	ldr	r1, [pc, #148]	@ (80053ac <HAL_RCC_OscConfig+0x240>)
 8005318:	4313      	orrs	r3, r2
 800531a:	600b      	str	r3, [r1, #0]
 800531c:	e015      	b.n	800534a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800531e:	4b24      	ldr	r3, [pc, #144]	@ (80053b0 <HAL_RCC_OscConfig+0x244>)
 8005320:	2200      	movs	r2, #0
 8005322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005324:	f7fc fcee 	bl	8001d04 <HAL_GetTick>
 8005328:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800532a:	e008      	b.n	800533e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800532c:	f7fc fcea 	bl	8001d04 <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	2b02      	cmp	r3, #2
 8005338:	d901      	bls.n	800533e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e187      	b.n	800564e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800533e:	4b1b      	ldr	r3, [pc, #108]	@ (80053ac <HAL_RCC_OscConfig+0x240>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0302 	and.w	r3, r3, #2
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1f0      	bne.n	800532c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 0308 	and.w	r3, r3, #8
 8005352:	2b00      	cmp	r3, #0
 8005354:	d036      	beq.n	80053c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d016      	beq.n	800538c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800535e:	4b15      	ldr	r3, [pc, #84]	@ (80053b4 <HAL_RCC_OscConfig+0x248>)
 8005360:	2201      	movs	r2, #1
 8005362:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005364:	f7fc fcce 	bl	8001d04 <HAL_GetTick>
 8005368:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800536a:	e008      	b.n	800537e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800536c:	f7fc fcca 	bl	8001d04 <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	2b02      	cmp	r3, #2
 8005378:	d901      	bls.n	800537e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e167      	b.n	800564e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800537e:	4b0b      	ldr	r3, [pc, #44]	@ (80053ac <HAL_RCC_OscConfig+0x240>)
 8005380:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005382:	f003 0302 	and.w	r3, r3, #2
 8005386:	2b00      	cmp	r3, #0
 8005388:	d0f0      	beq.n	800536c <HAL_RCC_OscConfig+0x200>
 800538a:	e01b      	b.n	80053c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800538c:	4b09      	ldr	r3, [pc, #36]	@ (80053b4 <HAL_RCC_OscConfig+0x248>)
 800538e:	2200      	movs	r2, #0
 8005390:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005392:	f7fc fcb7 	bl	8001d04 <HAL_GetTick>
 8005396:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005398:	e00e      	b.n	80053b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800539a:	f7fc fcb3 	bl	8001d04 <HAL_GetTick>
 800539e:	4602      	mov	r2, r0
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	2b02      	cmp	r3, #2
 80053a6:	d907      	bls.n	80053b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80053a8:	2303      	movs	r3, #3
 80053aa:	e150      	b.n	800564e <HAL_RCC_OscConfig+0x4e2>
 80053ac:	40023800 	.word	0x40023800
 80053b0:	42470000 	.word	0x42470000
 80053b4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053b8:	4b88      	ldr	r3, [pc, #544]	@ (80055dc <HAL_RCC_OscConfig+0x470>)
 80053ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053bc:	f003 0302 	and.w	r3, r3, #2
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d1ea      	bne.n	800539a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 0304 	and.w	r3, r3, #4
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	f000 8097 	beq.w	8005500 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053d2:	2300      	movs	r3, #0
 80053d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053d6:	4b81      	ldr	r3, [pc, #516]	@ (80055dc <HAL_RCC_OscConfig+0x470>)
 80053d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d10f      	bne.n	8005402 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053e2:	2300      	movs	r3, #0
 80053e4:	60bb      	str	r3, [r7, #8]
 80053e6:	4b7d      	ldr	r3, [pc, #500]	@ (80055dc <HAL_RCC_OscConfig+0x470>)
 80053e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ea:	4a7c      	ldr	r2, [pc, #496]	@ (80055dc <HAL_RCC_OscConfig+0x470>)
 80053ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80053f2:	4b7a      	ldr	r3, [pc, #488]	@ (80055dc <HAL_RCC_OscConfig+0x470>)
 80053f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053fa:	60bb      	str	r3, [r7, #8]
 80053fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053fe:	2301      	movs	r3, #1
 8005400:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005402:	4b77      	ldr	r3, [pc, #476]	@ (80055e0 <HAL_RCC_OscConfig+0x474>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800540a:	2b00      	cmp	r3, #0
 800540c:	d118      	bne.n	8005440 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800540e:	4b74      	ldr	r3, [pc, #464]	@ (80055e0 <HAL_RCC_OscConfig+0x474>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a73      	ldr	r2, [pc, #460]	@ (80055e0 <HAL_RCC_OscConfig+0x474>)
 8005414:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005418:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800541a:	f7fc fc73 	bl	8001d04 <HAL_GetTick>
 800541e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005420:	e008      	b.n	8005434 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005422:	f7fc fc6f 	bl	8001d04 <HAL_GetTick>
 8005426:	4602      	mov	r2, r0
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	2b02      	cmp	r3, #2
 800542e:	d901      	bls.n	8005434 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005430:	2303      	movs	r3, #3
 8005432:	e10c      	b.n	800564e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005434:	4b6a      	ldr	r3, [pc, #424]	@ (80055e0 <HAL_RCC_OscConfig+0x474>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800543c:	2b00      	cmp	r3, #0
 800543e:	d0f0      	beq.n	8005422 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	2b01      	cmp	r3, #1
 8005446:	d106      	bne.n	8005456 <HAL_RCC_OscConfig+0x2ea>
 8005448:	4b64      	ldr	r3, [pc, #400]	@ (80055dc <HAL_RCC_OscConfig+0x470>)
 800544a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800544c:	4a63      	ldr	r2, [pc, #396]	@ (80055dc <HAL_RCC_OscConfig+0x470>)
 800544e:	f043 0301 	orr.w	r3, r3, #1
 8005452:	6713      	str	r3, [r2, #112]	@ 0x70
 8005454:	e01c      	b.n	8005490 <HAL_RCC_OscConfig+0x324>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	2b05      	cmp	r3, #5
 800545c:	d10c      	bne.n	8005478 <HAL_RCC_OscConfig+0x30c>
 800545e:	4b5f      	ldr	r3, [pc, #380]	@ (80055dc <HAL_RCC_OscConfig+0x470>)
 8005460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005462:	4a5e      	ldr	r2, [pc, #376]	@ (80055dc <HAL_RCC_OscConfig+0x470>)
 8005464:	f043 0304 	orr.w	r3, r3, #4
 8005468:	6713      	str	r3, [r2, #112]	@ 0x70
 800546a:	4b5c      	ldr	r3, [pc, #368]	@ (80055dc <HAL_RCC_OscConfig+0x470>)
 800546c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800546e:	4a5b      	ldr	r2, [pc, #364]	@ (80055dc <HAL_RCC_OscConfig+0x470>)
 8005470:	f043 0301 	orr.w	r3, r3, #1
 8005474:	6713      	str	r3, [r2, #112]	@ 0x70
 8005476:	e00b      	b.n	8005490 <HAL_RCC_OscConfig+0x324>
 8005478:	4b58      	ldr	r3, [pc, #352]	@ (80055dc <HAL_RCC_OscConfig+0x470>)
 800547a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800547c:	4a57      	ldr	r2, [pc, #348]	@ (80055dc <HAL_RCC_OscConfig+0x470>)
 800547e:	f023 0301 	bic.w	r3, r3, #1
 8005482:	6713      	str	r3, [r2, #112]	@ 0x70
 8005484:	4b55      	ldr	r3, [pc, #340]	@ (80055dc <HAL_RCC_OscConfig+0x470>)
 8005486:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005488:	4a54      	ldr	r2, [pc, #336]	@ (80055dc <HAL_RCC_OscConfig+0x470>)
 800548a:	f023 0304 	bic.w	r3, r3, #4
 800548e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d015      	beq.n	80054c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005498:	f7fc fc34 	bl	8001d04 <HAL_GetTick>
 800549c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800549e:	e00a      	b.n	80054b6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054a0:	f7fc fc30 	bl	8001d04 <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d901      	bls.n	80054b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e0cb      	b.n	800564e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054b6:	4b49      	ldr	r3, [pc, #292]	@ (80055dc <HAL_RCC_OscConfig+0x470>)
 80054b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054ba:	f003 0302 	and.w	r3, r3, #2
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d0ee      	beq.n	80054a0 <HAL_RCC_OscConfig+0x334>
 80054c2:	e014      	b.n	80054ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054c4:	f7fc fc1e 	bl	8001d04 <HAL_GetTick>
 80054c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054ca:	e00a      	b.n	80054e2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054cc:	f7fc fc1a 	bl	8001d04 <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054da:	4293      	cmp	r3, r2
 80054dc:	d901      	bls.n	80054e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e0b5      	b.n	800564e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054e2:	4b3e      	ldr	r3, [pc, #248]	@ (80055dc <HAL_RCC_OscConfig+0x470>)
 80054e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054e6:	f003 0302 	and.w	r3, r3, #2
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d1ee      	bne.n	80054cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80054ee:	7dfb      	ldrb	r3, [r7, #23]
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d105      	bne.n	8005500 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054f4:	4b39      	ldr	r3, [pc, #228]	@ (80055dc <HAL_RCC_OscConfig+0x470>)
 80054f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054f8:	4a38      	ldr	r2, [pc, #224]	@ (80055dc <HAL_RCC_OscConfig+0x470>)
 80054fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054fe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	699b      	ldr	r3, [r3, #24]
 8005504:	2b00      	cmp	r3, #0
 8005506:	f000 80a1 	beq.w	800564c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800550a:	4b34      	ldr	r3, [pc, #208]	@ (80055dc <HAL_RCC_OscConfig+0x470>)
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	f003 030c 	and.w	r3, r3, #12
 8005512:	2b08      	cmp	r3, #8
 8005514:	d05c      	beq.n	80055d0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	699b      	ldr	r3, [r3, #24]
 800551a:	2b02      	cmp	r3, #2
 800551c:	d141      	bne.n	80055a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800551e:	4b31      	ldr	r3, [pc, #196]	@ (80055e4 <HAL_RCC_OscConfig+0x478>)
 8005520:	2200      	movs	r2, #0
 8005522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005524:	f7fc fbee 	bl	8001d04 <HAL_GetTick>
 8005528:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800552a:	e008      	b.n	800553e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800552c:	f7fc fbea 	bl	8001d04 <HAL_GetTick>
 8005530:	4602      	mov	r2, r0
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	2b02      	cmp	r3, #2
 8005538:	d901      	bls.n	800553e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e087      	b.n	800564e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800553e:	4b27      	ldr	r3, [pc, #156]	@ (80055dc <HAL_RCC_OscConfig+0x470>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005546:	2b00      	cmp	r3, #0
 8005548:	d1f0      	bne.n	800552c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	69da      	ldr	r2, [r3, #28]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a1b      	ldr	r3, [r3, #32]
 8005552:	431a      	orrs	r2, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005558:	019b      	lsls	r3, r3, #6
 800555a:	431a      	orrs	r2, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005560:	085b      	lsrs	r3, r3, #1
 8005562:	3b01      	subs	r3, #1
 8005564:	041b      	lsls	r3, r3, #16
 8005566:	431a      	orrs	r2, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800556c:	061b      	lsls	r3, r3, #24
 800556e:	491b      	ldr	r1, [pc, #108]	@ (80055dc <HAL_RCC_OscConfig+0x470>)
 8005570:	4313      	orrs	r3, r2
 8005572:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005574:	4b1b      	ldr	r3, [pc, #108]	@ (80055e4 <HAL_RCC_OscConfig+0x478>)
 8005576:	2201      	movs	r2, #1
 8005578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800557a:	f7fc fbc3 	bl	8001d04 <HAL_GetTick>
 800557e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005580:	e008      	b.n	8005594 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005582:	f7fc fbbf 	bl	8001d04 <HAL_GetTick>
 8005586:	4602      	mov	r2, r0
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	1ad3      	subs	r3, r2, r3
 800558c:	2b02      	cmp	r3, #2
 800558e:	d901      	bls.n	8005594 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	e05c      	b.n	800564e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005594:	4b11      	ldr	r3, [pc, #68]	@ (80055dc <HAL_RCC_OscConfig+0x470>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800559c:	2b00      	cmp	r3, #0
 800559e:	d0f0      	beq.n	8005582 <HAL_RCC_OscConfig+0x416>
 80055a0:	e054      	b.n	800564c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055a2:	4b10      	ldr	r3, [pc, #64]	@ (80055e4 <HAL_RCC_OscConfig+0x478>)
 80055a4:	2200      	movs	r2, #0
 80055a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055a8:	f7fc fbac 	bl	8001d04 <HAL_GetTick>
 80055ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055ae:	e008      	b.n	80055c2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055b0:	f7fc fba8 	bl	8001d04 <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d901      	bls.n	80055c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e045      	b.n	800564e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055c2:	4b06      	ldr	r3, [pc, #24]	@ (80055dc <HAL_RCC_OscConfig+0x470>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1f0      	bne.n	80055b0 <HAL_RCC_OscConfig+0x444>
 80055ce:	e03d      	b.n	800564c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	699b      	ldr	r3, [r3, #24]
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d107      	bne.n	80055e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e038      	b.n	800564e <HAL_RCC_OscConfig+0x4e2>
 80055dc:	40023800 	.word	0x40023800
 80055e0:	40007000 	.word	0x40007000
 80055e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80055e8:	4b1b      	ldr	r3, [pc, #108]	@ (8005658 <HAL_RCC_OscConfig+0x4ec>)
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	699b      	ldr	r3, [r3, #24]
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d028      	beq.n	8005648 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005600:	429a      	cmp	r2, r3
 8005602:	d121      	bne.n	8005648 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800560e:	429a      	cmp	r2, r3
 8005610:	d11a      	bne.n	8005648 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005618:	4013      	ands	r3, r2
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800561e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005620:	4293      	cmp	r3, r2
 8005622:	d111      	bne.n	8005648 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800562e:	085b      	lsrs	r3, r3, #1
 8005630:	3b01      	subs	r3, #1
 8005632:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005634:	429a      	cmp	r2, r3
 8005636:	d107      	bne.n	8005648 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005642:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005644:	429a      	cmp	r2, r3
 8005646:	d001      	beq.n	800564c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	e000      	b.n	800564e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3718      	adds	r7, #24
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	40023800 	.word	0x40023800

0800565c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d101      	bne.n	8005670 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	e0cc      	b.n	800580a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005670:	4b68      	ldr	r3, [pc, #416]	@ (8005814 <HAL_RCC_ClockConfig+0x1b8>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 0307 	and.w	r3, r3, #7
 8005678:	683a      	ldr	r2, [r7, #0]
 800567a:	429a      	cmp	r2, r3
 800567c:	d90c      	bls.n	8005698 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800567e:	4b65      	ldr	r3, [pc, #404]	@ (8005814 <HAL_RCC_ClockConfig+0x1b8>)
 8005680:	683a      	ldr	r2, [r7, #0]
 8005682:	b2d2      	uxtb	r2, r2
 8005684:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005686:	4b63      	ldr	r3, [pc, #396]	@ (8005814 <HAL_RCC_ClockConfig+0x1b8>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 0307 	and.w	r3, r3, #7
 800568e:	683a      	ldr	r2, [r7, #0]
 8005690:	429a      	cmp	r2, r3
 8005692:	d001      	beq.n	8005698 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e0b8      	b.n	800580a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 0302 	and.w	r3, r3, #2
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d020      	beq.n	80056e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0304 	and.w	r3, r3, #4
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d005      	beq.n	80056bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056b0:	4b59      	ldr	r3, [pc, #356]	@ (8005818 <HAL_RCC_ClockConfig+0x1bc>)
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	4a58      	ldr	r2, [pc, #352]	@ (8005818 <HAL_RCC_ClockConfig+0x1bc>)
 80056b6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80056ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 0308 	and.w	r3, r3, #8
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d005      	beq.n	80056d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80056c8:	4b53      	ldr	r3, [pc, #332]	@ (8005818 <HAL_RCC_ClockConfig+0x1bc>)
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	4a52      	ldr	r2, [pc, #328]	@ (8005818 <HAL_RCC_ClockConfig+0x1bc>)
 80056ce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80056d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056d4:	4b50      	ldr	r3, [pc, #320]	@ (8005818 <HAL_RCC_ClockConfig+0x1bc>)
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	494d      	ldr	r1, [pc, #308]	@ (8005818 <HAL_RCC_ClockConfig+0x1bc>)
 80056e2:	4313      	orrs	r3, r2
 80056e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 0301 	and.w	r3, r3, #1
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d044      	beq.n	800577c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d107      	bne.n	800570a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056fa:	4b47      	ldr	r3, [pc, #284]	@ (8005818 <HAL_RCC_ClockConfig+0x1bc>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005702:	2b00      	cmp	r3, #0
 8005704:	d119      	bne.n	800573a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e07f      	b.n	800580a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	2b02      	cmp	r3, #2
 8005710:	d003      	beq.n	800571a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005716:	2b03      	cmp	r3, #3
 8005718:	d107      	bne.n	800572a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800571a:	4b3f      	ldr	r3, [pc, #252]	@ (8005818 <HAL_RCC_ClockConfig+0x1bc>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005722:	2b00      	cmp	r3, #0
 8005724:	d109      	bne.n	800573a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e06f      	b.n	800580a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800572a:	4b3b      	ldr	r3, [pc, #236]	@ (8005818 <HAL_RCC_ClockConfig+0x1bc>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0302 	and.w	r3, r3, #2
 8005732:	2b00      	cmp	r3, #0
 8005734:	d101      	bne.n	800573a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e067      	b.n	800580a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800573a:	4b37      	ldr	r3, [pc, #220]	@ (8005818 <HAL_RCC_ClockConfig+0x1bc>)
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	f023 0203 	bic.w	r2, r3, #3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	4934      	ldr	r1, [pc, #208]	@ (8005818 <HAL_RCC_ClockConfig+0x1bc>)
 8005748:	4313      	orrs	r3, r2
 800574a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800574c:	f7fc fada 	bl	8001d04 <HAL_GetTick>
 8005750:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005752:	e00a      	b.n	800576a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005754:	f7fc fad6 	bl	8001d04 <HAL_GetTick>
 8005758:	4602      	mov	r2, r0
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005762:	4293      	cmp	r3, r2
 8005764:	d901      	bls.n	800576a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e04f      	b.n	800580a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800576a:	4b2b      	ldr	r3, [pc, #172]	@ (8005818 <HAL_RCC_ClockConfig+0x1bc>)
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	f003 020c 	and.w	r2, r3, #12
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	429a      	cmp	r2, r3
 800577a:	d1eb      	bne.n	8005754 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800577c:	4b25      	ldr	r3, [pc, #148]	@ (8005814 <HAL_RCC_ClockConfig+0x1b8>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0307 	and.w	r3, r3, #7
 8005784:	683a      	ldr	r2, [r7, #0]
 8005786:	429a      	cmp	r2, r3
 8005788:	d20c      	bcs.n	80057a4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800578a:	4b22      	ldr	r3, [pc, #136]	@ (8005814 <HAL_RCC_ClockConfig+0x1b8>)
 800578c:	683a      	ldr	r2, [r7, #0]
 800578e:	b2d2      	uxtb	r2, r2
 8005790:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005792:	4b20      	ldr	r3, [pc, #128]	@ (8005814 <HAL_RCC_ClockConfig+0x1b8>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 0307 	and.w	r3, r3, #7
 800579a:	683a      	ldr	r2, [r7, #0]
 800579c:	429a      	cmp	r2, r3
 800579e:	d001      	beq.n	80057a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	e032      	b.n	800580a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 0304 	and.w	r3, r3, #4
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d008      	beq.n	80057c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057b0:	4b19      	ldr	r3, [pc, #100]	@ (8005818 <HAL_RCC_ClockConfig+0x1bc>)
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	4916      	ldr	r1, [pc, #88]	@ (8005818 <HAL_RCC_ClockConfig+0x1bc>)
 80057be:	4313      	orrs	r3, r2
 80057c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0308 	and.w	r3, r3, #8
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d009      	beq.n	80057e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057ce:	4b12      	ldr	r3, [pc, #72]	@ (8005818 <HAL_RCC_ClockConfig+0x1bc>)
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	00db      	lsls	r3, r3, #3
 80057dc:	490e      	ldr	r1, [pc, #56]	@ (8005818 <HAL_RCC_ClockConfig+0x1bc>)
 80057de:	4313      	orrs	r3, r2
 80057e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80057e2:	f000 f821 	bl	8005828 <HAL_RCC_GetSysClockFreq>
 80057e6:	4602      	mov	r2, r0
 80057e8:	4b0b      	ldr	r3, [pc, #44]	@ (8005818 <HAL_RCC_ClockConfig+0x1bc>)
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	091b      	lsrs	r3, r3, #4
 80057ee:	f003 030f 	and.w	r3, r3, #15
 80057f2:	490a      	ldr	r1, [pc, #40]	@ (800581c <HAL_RCC_ClockConfig+0x1c0>)
 80057f4:	5ccb      	ldrb	r3, [r1, r3]
 80057f6:	fa22 f303 	lsr.w	r3, r2, r3
 80057fa:	4a09      	ldr	r2, [pc, #36]	@ (8005820 <HAL_RCC_ClockConfig+0x1c4>)
 80057fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80057fe:	4b09      	ldr	r3, [pc, #36]	@ (8005824 <HAL_RCC_ClockConfig+0x1c8>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4618      	mov	r0, r3
 8005804:	f7fc fa3a 	bl	8001c7c <HAL_InitTick>

  return HAL_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3710      	adds	r7, #16
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop
 8005814:	40023c00 	.word	0x40023c00
 8005818:	40023800 	.word	0x40023800
 800581c:	0800cfb0 	.word	0x0800cfb0
 8005820:	20000000 	.word	0x20000000
 8005824:	20000010 	.word	0x20000010

08005828 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005828:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800582c:	b094      	sub	sp, #80	@ 0x50
 800582e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005830:	2300      	movs	r3, #0
 8005832:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005834:	2300      	movs	r3, #0
 8005836:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005838:	2300      	movs	r3, #0
 800583a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800583c:	2300      	movs	r3, #0
 800583e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005840:	4b79      	ldr	r3, [pc, #484]	@ (8005a28 <HAL_RCC_GetSysClockFreq+0x200>)
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	f003 030c 	and.w	r3, r3, #12
 8005848:	2b08      	cmp	r3, #8
 800584a:	d00d      	beq.n	8005868 <HAL_RCC_GetSysClockFreq+0x40>
 800584c:	2b08      	cmp	r3, #8
 800584e:	f200 80e1 	bhi.w	8005a14 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005852:	2b00      	cmp	r3, #0
 8005854:	d002      	beq.n	800585c <HAL_RCC_GetSysClockFreq+0x34>
 8005856:	2b04      	cmp	r3, #4
 8005858:	d003      	beq.n	8005862 <HAL_RCC_GetSysClockFreq+0x3a>
 800585a:	e0db      	b.n	8005a14 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800585c:	4b73      	ldr	r3, [pc, #460]	@ (8005a2c <HAL_RCC_GetSysClockFreq+0x204>)
 800585e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005860:	e0db      	b.n	8005a1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005862:	4b73      	ldr	r3, [pc, #460]	@ (8005a30 <HAL_RCC_GetSysClockFreq+0x208>)
 8005864:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005866:	e0d8      	b.n	8005a1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005868:	4b6f      	ldr	r3, [pc, #444]	@ (8005a28 <HAL_RCC_GetSysClockFreq+0x200>)
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005870:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005872:	4b6d      	ldr	r3, [pc, #436]	@ (8005a28 <HAL_RCC_GetSysClockFreq+0x200>)
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d063      	beq.n	8005946 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800587e:	4b6a      	ldr	r3, [pc, #424]	@ (8005a28 <HAL_RCC_GetSysClockFreq+0x200>)
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	099b      	lsrs	r3, r3, #6
 8005884:	2200      	movs	r2, #0
 8005886:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005888:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800588a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800588c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005890:	633b      	str	r3, [r7, #48]	@ 0x30
 8005892:	2300      	movs	r3, #0
 8005894:	637b      	str	r3, [r7, #52]	@ 0x34
 8005896:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800589a:	4622      	mov	r2, r4
 800589c:	462b      	mov	r3, r5
 800589e:	f04f 0000 	mov.w	r0, #0
 80058a2:	f04f 0100 	mov.w	r1, #0
 80058a6:	0159      	lsls	r1, r3, #5
 80058a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058ac:	0150      	lsls	r0, r2, #5
 80058ae:	4602      	mov	r2, r0
 80058b0:	460b      	mov	r3, r1
 80058b2:	4621      	mov	r1, r4
 80058b4:	1a51      	subs	r1, r2, r1
 80058b6:	6139      	str	r1, [r7, #16]
 80058b8:	4629      	mov	r1, r5
 80058ba:	eb63 0301 	sbc.w	r3, r3, r1
 80058be:	617b      	str	r3, [r7, #20]
 80058c0:	f04f 0200 	mov.w	r2, #0
 80058c4:	f04f 0300 	mov.w	r3, #0
 80058c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80058cc:	4659      	mov	r1, fp
 80058ce:	018b      	lsls	r3, r1, #6
 80058d0:	4651      	mov	r1, sl
 80058d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80058d6:	4651      	mov	r1, sl
 80058d8:	018a      	lsls	r2, r1, #6
 80058da:	4651      	mov	r1, sl
 80058dc:	ebb2 0801 	subs.w	r8, r2, r1
 80058e0:	4659      	mov	r1, fp
 80058e2:	eb63 0901 	sbc.w	r9, r3, r1
 80058e6:	f04f 0200 	mov.w	r2, #0
 80058ea:	f04f 0300 	mov.w	r3, #0
 80058ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80058f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80058f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80058fa:	4690      	mov	r8, r2
 80058fc:	4699      	mov	r9, r3
 80058fe:	4623      	mov	r3, r4
 8005900:	eb18 0303 	adds.w	r3, r8, r3
 8005904:	60bb      	str	r3, [r7, #8]
 8005906:	462b      	mov	r3, r5
 8005908:	eb49 0303 	adc.w	r3, r9, r3
 800590c:	60fb      	str	r3, [r7, #12]
 800590e:	f04f 0200 	mov.w	r2, #0
 8005912:	f04f 0300 	mov.w	r3, #0
 8005916:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800591a:	4629      	mov	r1, r5
 800591c:	024b      	lsls	r3, r1, #9
 800591e:	4621      	mov	r1, r4
 8005920:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005924:	4621      	mov	r1, r4
 8005926:	024a      	lsls	r2, r1, #9
 8005928:	4610      	mov	r0, r2
 800592a:	4619      	mov	r1, r3
 800592c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800592e:	2200      	movs	r2, #0
 8005930:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005932:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005934:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005938:	f7fa fc9a 	bl	8000270 <__aeabi_uldivmod>
 800593c:	4602      	mov	r2, r0
 800593e:	460b      	mov	r3, r1
 8005940:	4613      	mov	r3, r2
 8005942:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005944:	e058      	b.n	80059f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005946:	4b38      	ldr	r3, [pc, #224]	@ (8005a28 <HAL_RCC_GetSysClockFreq+0x200>)
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	099b      	lsrs	r3, r3, #6
 800594c:	2200      	movs	r2, #0
 800594e:	4618      	mov	r0, r3
 8005950:	4611      	mov	r1, r2
 8005952:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005956:	623b      	str	r3, [r7, #32]
 8005958:	2300      	movs	r3, #0
 800595a:	627b      	str	r3, [r7, #36]	@ 0x24
 800595c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005960:	4642      	mov	r2, r8
 8005962:	464b      	mov	r3, r9
 8005964:	f04f 0000 	mov.w	r0, #0
 8005968:	f04f 0100 	mov.w	r1, #0
 800596c:	0159      	lsls	r1, r3, #5
 800596e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005972:	0150      	lsls	r0, r2, #5
 8005974:	4602      	mov	r2, r0
 8005976:	460b      	mov	r3, r1
 8005978:	4641      	mov	r1, r8
 800597a:	ebb2 0a01 	subs.w	sl, r2, r1
 800597e:	4649      	mov	r1, r9
 8005980:	eb63 0b01 	sbc.w	fp, r3, r1
 8005984:	f04f 0200 	mov.w	r2, #0
 8005988:	f04f 0300 	mov.w	r3, #0
 800598c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005990:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005994:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005998:	ebb2 040a 	subs.w	r4, r2, sl
 800599c:	eb63 050b 	sbc.w	r5, r3, fp
 80059a0:	f04f 0200 	mov.w	r2, #0
 80059a4:	f04f 0300 	mov.w	r3, #0
 80059a8:	00eb      	lsls	r3, r5, #3
 80059aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059ae:	00e2      	lsls	r2, r4, #3
 80059b0:	4614      	mov	r4, r2
 80059b2:	461d      	mov	r5, r3
 80059b4:	4643      	mov	r3, r8
 80059b6:	18e3      	adds	r3, r4, r3
 80059b8:	603b      	str	r3, [r7, #0]
 80059ba:	464b      	mov	r3, r9
 80059bc:	eb45 0303 	adc.w	r3, r5, r3
 80059c0:	607b      	str	r3, [r7, #4]
 80059c2:	f04f 0200 	mov.w	r2, #0
 80059c6:	f04f 0300 	mov.w	r3, #0
 80059ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80059ce:	4629      	mov	r1, r5
 80059d0:	028b      	lsls	r3, r1, #10
 80059d2:	4621      	mov	r1, r4
 80059d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80059d8:	4621      	mov	r1, r4
 80059da:	028a      	lsls	r2, r1, #10
 80059dc:	4610      	mov	r0, r2
 80059de:	4619      	mov	r1, r3
 80059e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059e2:	2200      	movs	r2, #0
 80059e4:	61bb      	str	r3, [r7, #24]
 80059e6:	61fa      	str	r2, [r7, #28]
 80059e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059ec:	f7fa fc40 	bl	8000270 <__aeabi_uldivmod>
 80059f0:	4602      	mov	r2, r0
 80059f2:	460b      	mov	r3, r1
 80059f4:	4613      	mov	r3, r2
 80059f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80059f8:	4b0b      	ldr	r3, [pc, #44]	@ (8005a28 <HAL_RCC_GetSysClockFreq+0x200>)
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	0c1b      	lsrs	r3, r3, #16
 80059fe:	f003 0303 	and.w	r3, r3, #3
 8005a02:	3301      	adds	r3, #1
 8005a04:	005b      	lsls	r3, r3, #1
 8005a06:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005a08:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005a0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a10:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005a12:	e002      	b.n	8005a1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a14:	4b05      	ldr	r3, [pc, #20]	@ (8005a2c <HAL_RCC_GetSysClockFreq+0x204>)
 8005a16:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005a18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3750      	adds	r7, #80	@ 0x50
 8005a20:	46bd      	mov	sp, r7
 8005a22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a26:	bf00      	nop
 8005a28:	40023800 	.word	0x40023800
 8005a2c:	00f42400 	.word	0x00f42400
 8005a30:	007a1200 	.word	0x007a1200

08005a34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a34:	b480      	push	{r7}
 8005a36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a38:	4b03      	ldr	r3, [pc, #12]	@ (8005a48 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr
 8005a46:	bf00      	nop
 8005a48:	20000000 	.word	0x20000000

08005a4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005a50:	f7ff fff0 	bl	8005a34 <HAL_RCC_GetHCLKFreq>
 8005a54:	4602      	mov	r2, r0
 8005a56:	4b05      	ldr	r3, [pc, #20]	@ (8005a6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	0a9b      	lsrs	r3, r3, #10
 8005a5c:	f003 0307 	and.w	r3, r3, #7
 8005a60:	4903      	ldr	r1, [pc, #12]	@ (8005a70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a62:	5ccb      	ldrb	r3, [r1, r3]
 8005a64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	40023800 	.word	0x40023800
 8005a70:	0800cfc0 	.word	0x0800cfc0

08005a74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005a78:	f7ff ffdc 	bl	8005a34 <HAL_RCC_GetHCLKFreq>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	4b05      	ldr	r3, [pc, #20]	@ (8005a94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	0b5b      	lsrs	r3, r3, #13
 8005a84:	f003 0307 	and.w	r3, r3, #7
 8005a88:	4903      	ldr	r1, [pc, #12]	@ (8005a98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a8a:	5ccb      	ldrb	r3, [r1, r3]
 8005a8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	40023800 	.word	0x40023800
 8005a98:	0800cfc0 	.word	0x0800cfc0

08005a9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d101      	bne.n	8005aae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e041      	b.n	8005b32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d106      	bne.n	8005ac8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f7fb fac8 	bl	8001058 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2202      	movs	r2, #2
 8005acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	3304      	adds	r3, #4
 8005ad8:	4619      	mov	r1, r3
 8005ada:	4610      	mov	r0, r2
 8005adc:	f000 fb3c 	bl	8006158 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b30:	2300      	movs	r3, #0
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3708      	adds	r7, #8
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
	...

08005b3c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d001      	beq.n	8005b54 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	e046      	b.n	8005be2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2202      	movs	r2, #2
 8005b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a23      	ldr	r2, [pc, #140]	@ (8005bf0 <HAL_TIM_Base_Start+0xb4>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d022      	beq.n	8005bac <HAL_TIM_Base_Start+0x70>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b6e:	d01d      	beq.n	8005bac <HAL_TIM_Base_Start+0x70>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a1f      	ldr	r2, [pc, #124]	@ (8005bf4 <HAL_TIM_Base_Start+0xb8>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d018      	beq.n	8005bac <HAL_TIM_Base_Start+0x70>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a1e      	ldr	r2, [pc, #120]	@ (8005bf8 <HAL_TIM_Base_Start+0xbc>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d013      	beq.n	8005bac <HAL_TIM_Base_Start+0x70>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a1c      	ldr	r2, [pc, #112]	@ (8005bfc <HAL_TIM_Base_Start+0xc0>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d00e      	beq.n	8005bac <HAL_TIM_Base_Start+0x70>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a1b      	ldr	r2, [pc, #108]	@ (8005c00 <HAL_TIM_Base_Start+0xc4>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d009      	beq.n	8005bac <HAL_TIM_Base_Start+0x70>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a19      	ldr	r2, [pc, #100]	@ (8005c04 <HAL_TIM_Base_Start+0xc8>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d004      	beq.n	8005bac <HAL_TIM_Base_Start+0x70>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a18      	ldr	r2, [pc, #96]	@ (8005c08 <HAL_TIM_Base_Start+0xcc>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d111      	bne.n	8005bd0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	f003 0307 	and.w	r3, r3, #7
 8005bb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2b06      	cmp	r3, #6
 8005bbc:	d010      	beq.n	8005be0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f042 0201 	orr.w	r2, r2, #1
 8005bcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bce:	e007      	b.n	8005be0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f042 0201 	orr.w	r2, r2, #1
 8005bde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3714      	adds	r7, #20
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	40010000 	.word	0x40010000
 8005bf4:	40000400 	.word	0x40000400
 8005bf8:	40000800 	.word	0x40000800
 8005bfc:	40000c00 	.word	0x40000c00
 8005c00:	40010400 	.word	0x40010400
 8005c04:	40014000 	.word	0x40014000
 8005c08:	40001800 	.word	0x40001800

08005c0c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	6a1a      	ldr	r2, [r3, #32]
 8005c1a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005c1e:	4013      	ands	r3, r2
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d10f      	bne.n	8005c44 <HAL_TIM_Base_Stop+0x38>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	6a1a      	ldr	r2, [r3, #32]
 8005c2a:	f240 4344 	movw	r3, #1092	@ 0x444
 8005c2e:	4013      	ands	r3, r2
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d107      	bne.n	8005c44 <HAL_TIM_Base_Stop+0x38>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f022 0201 	bic.w	r2, r2, #1
 8005c42:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	370c      	adds	r7, #12
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
	...

08005c5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b085      	sub	sp, #20
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d001      	beq.n	8005c74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e04e      	b.n	8005d12 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2202      	movs	r2, #2
 8005c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68da      	ldr	r2, [r3, #12]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f042 0201 	orr.w	r2, r2, #1
 8005c8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a23      	ldr	r2, [pc, #140]	@ (8005d20 <HAL_TIM_Base_Start_IT+0xc4>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d022      	beq.n	8005cdc <HAL_TIM_Base_Start_IT+0x80>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c9e:	d01d      	beq.n	8005cdc <HAL_TIM_Base_Start_IT+0x80>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a1f      	ldr	r2, [pc, #124]	@ (8005d24 <HAL_TIM_Base_Start_IT+0xc8>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d018      	beq.n	8005cdc <HAL_TIM_Base_Start_IT+0x80>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a1e      	ldr	r2, [pc, #120]	@ (8005d28 <HAL_TIM_Base_Start_IT+0xcc>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d013      	beq.n	8005cdc <HAL_TIM_Base_Start_IT+0x80>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a1c      	ldr	r2, [pc, #112]	@ (8005d2c <HAL_TIM_Base_Start_IT+0xd0>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d00e      	beq.n	8005cdc <HAL_TIM_Base_Start_IT+0x80>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a1b      	ldr	r2, [pc, #108]	@ (8005d30 <HAL_TIM_Base_Start_IT+0xd4>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d009      	beq.n	8005cdc <HAL_TIM_Base_Start_IT+0x80>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a19      	ldr	r2, [pc, #100]	@ (8005d34 <HAL_TIM_Base_Start_IT+0xd8>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d004      	beq.n	8005cdc <HAL_TIM_Base_Start_IT+0x80>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a18      	ldr	r2, [pc, #96]	@ (8005d38 <HAL_TIM_Base_Start_IT+0xdc>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d111      	bne.n	8005d00 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	f003 0307 	and.w	r3, r3, #7
 8005ce6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2b06      	cmp	r3, #6
 8005cec:	d010      	beq.n	8005d10 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f042 0201 	orr.w	r2, r2, #1
 8005cfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cfe:	e007      	b.n	8005d10 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f042 0201 	orr.w	r2, r2, #1
 8005d0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3714      	adds	r7, #20
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr
 8005d1e:	bf00      	nop
 8005d20:	40010000 	.word	0x40010000
 8005d24:	40000400 	.word	0x40000400
 8005d28:	40000800 	.word	0x40000800
 8005d2c:	40000c00 	.word	0x40000c00
 8005d30:	40010400 	.word	0x40010400
 8005d34:	40014000 	.word	0x40014000
 8005d38:	40001800 	.word	0x40001800

08005d3c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68da      	ldr	r2, [r3, #12]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f022 0201 	bic.w	r2, r2, #1
 8005d52:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	6a1a      	ldr	r2, [r3, #32]
 8005d5a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005d5e:	4013      	ands	r3, r2
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d10f      	bne.n	8005d84 <HAL_TIM_Base_Stop_IT+0x48>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	6a1a      	ldr	r2, [r3, #32]
 8005d6a:	f240 4344 	movw	r3, #1092	@ 0x444
 8005d6e:	4013      	ands	r3, r2
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d107      	bne.n	8005d84 <HAL_TIM_Base_Stop_IT+0x48>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f022 0201 	bic.w	r2, r2, #1
 8005d82:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	370c      	adds	r7, #12
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr

08005d9a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d9a:	b580      	push	{r7, lr}
 8005d9c:	b084      	sub	sp, #16
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	f003 0302 	and.w	r3, r3, #2
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d020      	beq.n	8005dfe <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f003 0302 	and.w	r3, r3, #2
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d01b      	beq.n	8005dfe <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f06f 0202 	mvn.w	r2, #2
 8005dce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	699b      	ldr	r3, [r3, #24]
 8005ddc:	f003 0303 	and.w	r3, r3, #3
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d003      	beq.n	8005dec <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 f999 	bl	800611c <HAL_TIM_IC_CaptureCallback>
 8005dea:	e005      	b.n	8005df8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f000 f98b 	bl	8006108 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 f99c 	bl	8006130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	f003 0304 	and.w	r3, r3, #4
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d020      	beq.n	8005e4a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f003 0304 	and.w	r3, r3, #4
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d01b      	beq.n	8005e4a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f06f 0204 	mvn.w	r2, #4
 8005e1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2202      	movs	r2, #2
 8005e20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	699b      	ldr	r3, [r3, #24]
 8005e28:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d003      	beq.n	8005e38 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f000 f973 	bl	800611c <HAL_TIM_IC_CaptureCallback>
 8005e36:	e005      	b.n	8005e44 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 f965 	bl	8006108 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 f976 	bl	8006130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	f003 0308 	and.w	r3, r3, #8
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d020      	beq.n	8005e96 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f003 0308 	and.w	r3, r3, #8
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d01b      	beq.n	8005e96 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f06f 0208 	mvn.w	r2, #8
 8005e66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2204      	movs	r2, #4
 8005e6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	69db      	ldr	r3, [r3, #28]
 8005e74:	f003 0303 	and.w	r3, r3, #3
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d003      	beq.n	8005e84 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 f94d 	bl	800611c <HAL_TIM_IC_CaptureCallback>
 8005e82:	e005      	b.n	8005e90 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f000 f93f 	bl	8006108 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 f950 	bl	8006130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	f003 0310 	and.w	r3, r3, #16
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d020      	beq.n	8005ee2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f003 0310 	and.w	r3, r3, #16
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d01b      	beq.n	8005ee2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f06f 0210 	mvn.w	r2, #16
 8005eb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2208      	movs	r2, #8
 8005eb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	69db      	ldr	r3, [r3, #28]
 8005ec0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d003      	beq.n	8005ed0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 f927 	bl	800611c <HAL_TIM_IC_CaptureCallback>
 8005ece:	e005      	b.n	8005edc <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f000 f919 	bl	8006108 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 f92a 	bl	8006130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	f003 0301 	and.w	r3, r3, #1
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d00c      	beq.n	8005f06 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f003 0301 	and.w	r3, r3, #1
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d007      	beq.n	8005f06 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f06f 0201 	mvn.w	r2, #1
 8005efe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f003 faa5 	bl	8009450 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d00c      	beq.n	8005f2a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d007      	beq.n	8005f2a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005f22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f000 fadd 	bl	80064e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d00c      	beq.n	8005f4e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d007      	beq.n	8005f4e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005f46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f000 f8fb 	bl	8006144 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	f003 0320 	and.w	r3, r3, #32
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d00c      	beq.n	8005f72 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f003 0320 	and.w	r3, r3, #32
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d007      	beq.n	8005f72 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f06f 0220 	mvn.w	r2, #32
 8005f6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 faaf 	bl	80064d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f72:	bf00      	nop
 8005f74:	3710      	adds	r7, #16
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}

08005f7a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f7a:	b580      	push	{r7, lr}
 8005f7c:	b084      	sub	sp, #16
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
 8005f82:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f84:	2300      	movs	r3, #0
 8005f86:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d101      	bne.n	8005f96 <HAL_TIM_ConfigClockSource+0x1c>
 8005f92:	2302      	movs	r3, #2
 8005f94:	e0b4      	b.n	8006100 <HAL_TIM_ConfigClockSource+0x186>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2201      	movs	r2, #1
 8005f9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2202      	movs	r2, #2
 8005fa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005fb4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005fbc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	68ba      	ldr	r2, [r7, #8]
 8005fc4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fce:	d03e      	beq.n	800604e <HAL_TIM_ConfigClockSource+0xd4>
 8005fd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fd4:	f200 8087 	bhi.w	80060e6 <HAL_TIM_ConfigClockSource+0x16c>
 8005fd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fdc:	f000 8086 	beq.w	80060ec <HAL_TIM_ConfigClockSource+0x172>
 8005fe0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fe4:	d87f      	bhi.n	80060e6 <HAL_TIM_ConfigClockSource+0x16c>
 8005fe6:	2b70      	cmp	r3, #112	@ 0x70
 8005fe8:	d01a      	beq.n	8006020 <HAL_TIM_ConfigClockSource+0xa6>
 8005fea:	2b70      	cmp	r3, #112	@ 0x70
 8005fec:	d87b      	bhi.n	80060e6 <HAL_TIM_ConfigClockSource+0x16c>
 8005fee:	2b60      	cmp	r3, #96	@ 0x60
 8005ff0:	d050      	beq.n	8006094 <HAL_TIM_ConfigClockSource+0x11a>
 8005ff2:	2b60      	cmp	r3, #96	@ 0x60
 8005ff4:	d877      	bhi.n	80060e6 <HAL_TIM_ConfigClockSource+0x16c>
 8005ff6:	2b50      	cmp	r3, #80	@ 0x50
 8005ff8:	d03c      	beq.n	8006074 <HAL_TIM_ConfigClockSource+0xfa>
 8005ffa:	2b50      	cmp	r3, #80	@ 0x50
 8005ffc:	d873      	bhi.n	80060e6 <HAL_TIM_ConfigClockSource+0x16c>
 8005ffe:	2b40      	cmp	r3, #64	@ 0x40
 8006000:	d058      	beq.n	80060b4 <HAL_TIM_ConfigClockSource+0x13a>
 8006002:	2b40      	cmp	r3, #64	@ 0x40
 8006004:	d86f      	bhi.n	80060e6 <HAL_TIM_ConfigClockSource+0x16c>
 8006006:	2b30      	cmp	r3, #48	@ 0x30
 8006008:	d064      	beq.n	80060d4 <HAL_TIM_ConfigClockSource+0x15a>
 800600a:	2b30      	cmp	r3, #48	@ 0x30
 800600c:	d86b      	bhi.n	80060e6 <HAL_TIM_ConfigClockSource+0x16c>
 800600e:	2b20      	cmp	r3, #32
 8006010:	d060      	beq.n	80060d4 <HAL_TIM_ConfigClockSource+0x15a>
 8006012:	2b20      	cmp	r3, #32
 8006014:	d867      	bhi.n	80060e6 <HAL_TIM_ConfigClockSource+0x16c>
 8006016:	2b00      	cmp	r3, #0
 8006018:	d05c      	beq.n	80060d4 <HAL_TIM_ConfigClockSource+0x15a>
 800601a:	2b10      	cmp	r3, #16
 800601c:	d05a      	beq.n	80060d4 <HAL_TIM_ConfigClockSource+0x15a>
 800601e:	e062      	b.n	80060e6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006030:	f000 f9b2 	bl	8006398 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006042:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68ba      	ldr	r2, [r7, #8]
 800604a:	609a      	str	r2, [r3, #8]
      break;
 800604c:	e04f      	b.n	80060ee <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800605e:	f000 f99b 	bl	8006398 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	689a      	ldr	r2, [r3, #8]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006070:	609a      	str	r2, [r3, #8]
      break;
 8006072:	e03c      	b.n	80060ee <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006080:	461a      	mov	r2, r3
 8006082:	f000 f90f 	bl	80062a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2150      	movs	r1, #80	@ 0x50
 800608c:	4618      	mov	r0, r3
 800608e:	f000 f968 	bl	8006362 <TIM_ITRx_SetConfig>
      break;
 8006092:	e02c      	b.n	80060ee <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80060a0:	461a      	mov	r2, r3
 80060a2:	f000 f92e 	bl	8006302 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2160      	movs	r1, #96	@ 0x60
 80060ac:	4618      	mov	r0, r3
 80060ae:	f000 f958 	bl	8006362 <TIM_ITRx_SetConfig>
      break;
 80060b2:	e01c      	b.n	80060ee <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060c0:	461a      	mov	r2, r3
 80060c2:	f000 f8ef 	bl	80062a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2140      	movs	r1, #64	@ 0x40
 80060cc:	4618      	mov	r0, r3
 80060ce:	f000 f948 	bl	8006362 <TIM_ITRx_SetConfig>
      break;
 80060d2:	e00c      	b.n	80060ee <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4619      	mov	r1, r3
 80060de:	4610      	mov	r0, r2
 80060e0:	f000 f93f 	bl	8006362 <TIM_ITRx_SetConfig>
      break;
 80060e4:	e003      	b.n	80060ee <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	73fb      	strb	r3, [r7, #15]
      break;
 80060ea:	e000      	b.n	80060ee <HAL_TIM_ConfigClockSource+0x174>
      break;
 80060ec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2201      	movs	r2, #1
 80060f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80060fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006100:	4618      	mov	r0, r3
 8006102:	3710      	adds	r7, #16
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006110:	bf00      	nop
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006124:	bf00      	nop
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006138:	bf00      	nop
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800614c:	bf00      	nop
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006158:	b480      	push	{r7}
 800615a:	b085      	sub	sp, #20
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4a43      	ldr	r2, [pc, #268]	@ (8006278 <TIM_Base_SetConfig+0x120>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d013      	beq.n	8006198 <TIM_Base_SetConfig+0x40>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006176:	d00f      	beq.n	8006198 <TIM_Base_SetConfig+0x40>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4a40      	ldr	r2, [pc, #256]	@ (800627c <TIM_Base_SetConfig+0x124>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d00b      	beq.n	8006198 <TIM_Base_SetConfig+0x40>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a3f      	ldr	r2, [pc, #252]	@ (8006280 <TIM_Base_SetConfig+0x128>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d007      	beq.n	8006198 <TIM_Base_SetConfig+0x40>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a3e      	ldr	r2, [pc, #248]	@ (8006284 <TIM_Base_SetConfig+0x12c>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d003      	beq.n	8006198 <TIM_Base_SetConfig+0x40>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a3d      	ldr	r2, [pc, #244]	@ (8006288 <TIM_Base_SetConfig+0x130>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d108      	bne.n	80061aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800619e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a32      	ldr	r2, [pc, #200]	@ (8006278 <TIM_Base_SetConfig+0x120>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d02b      	beq.n	800620a <TIM_Base_SetConfig+0xb2>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061b8:	d027      	beq.n	800620a <TIM_Base_SetConfig+0xb2>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a2f      	ldr	r2, [pc, #188]	@ (800627c <TIM_Base_SetConfig+0x124>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d023      	beq.n	800620a <TIM_Base_SetConfig+0xb2>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a2e      	ldr	r2, [pc, #184]	@ (8006280 <TIM_Base_SetConfig+0x128>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d01f      	beq.n	800620a <TIM_Base_SetConfig+0xb2>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a2d      	ldr	r2, [pc, #180]	@ (8006284 <TIM_Base_SetConfig+0x12c>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d01b      	beq.n	800620a <TIM_Base_SetConfig+0xb2>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a2c      	ldr	r2, [pc, #176]	@ (8006288 <TIM_Base_SetConfig+0x130>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d017      	beq.n	800620a <TIM_Base_SetConfig+0xb2>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a2b      	ldr	r2, [pc, #172]	@ (800628c <TIM_Base_SetConfig+0x134>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d013      	beq.n	800620a <TIM_Base_SetConfig+0xb2>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a2a      	ldr	r2, [pc, #168]	@ (8006290 <TIM_Base_SetConfig+0x138>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d00f      	beq.n	800620a <TIM_Base_SetConfig+0xb2>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a29      	ldr	r2, [pc, #164]	@ (8006294 <TIM_Base_SetConfig+0x13c>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d00b      	beq.n	800620a <TIM_Base_SetConfig+0xb2>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a28      	ldr	r2, [pc, #160]	@ (8006298 <TIM_Base_SetConfig+0x140>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d007      	beq.n	800620a <TIM_Base_SetConfig+0xb2>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a27      	ldr	r2, [pc, #156]	@ (800629c <TIM_Base_SetConfig+0x144>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d003      	beq.n	800620a <TIM_Base_SetConfig+0xb2>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a26      	ldr	r2, [pc, #152]	@ (80062a0 <TIM_Base_SetConfig+0x148>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d108      	bne.n	800621c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006210:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	68fa      	ldr	r2, [r7, #12]
 8006218:	4313      	orrs	r3, r2
 800621a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	695b      	ldr	r3, [r3, #20]
 8006226:	4313      	orrs	r3, r2
 8006228:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	689a      	ldr	r2, [r3, #8]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a0e      	ldr	r2, [pc, #56]	@ (8006278 <TIM_Base_SetConfig+0x120>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d003      	beq.n	800624a <TIM_Base_SetConfig+0xf2>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a10      	ldr	r2, [pc, #64]	@ (8006288 <TIM_Base_SetConfig+0x130>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d103      	bne.n	8006252 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	691a      	ldr	r2, [r3, #16]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f043 0204 	orr.w	r2, r3, #4
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2201      	movs	r2, #1
 8006262:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	68fa      	ldr	r2, [r7, #12]
 8006268:	601a      	str	r2, [r3, #0]
}
 800626a:	bf00      	nop
 800626c:	3714      	adds	r7, #20
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr
 8006276:	bf00      	nop
 8006278:	40010000 	.word	0x40010000
 800627c:	40000400 	.word	0x40000400
 8006280:	40000800 	.word	0x40000800
 8006284:	40000c00 	.word	0x40000c00
 8006288:	40010400 	.word	0x40010400
 800628c:	40014000 	.word	0x40014000
 8006290:	40014400 	.word	0x40014400
 8006294:	40014800 	.word	0x40014800
 8006298:	40001800 	.word	0x40001800
 800629c:	40001c00 	.word	0x40001c00
 80062a0:	40002000 	.word	0x40002000

080062a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b087      	sub	sp, #28
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6a1b      	ldr	r3, [r3, #32]
 80062b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6a1b      	ldr	r3, [r3, #32]
 80062ba:	f023 0201 	bic.w	r2, r3, #1
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	699b      	ldr	r3, [r3, #24]
 80062c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80062ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	011b      	lsls	r3, r3, #4
 80062d4:	693a      	ldr	r2, [r7, #16]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	f023 030a 	bic.w	r3, r3, #10
 80062e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062e2:	697a      	ldr	r2, [r7, #20]
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	693a      	ldr	r2, [r7, #16]
 80062ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	697a      	ldr	r2, [r7, #20]
 80062f4:	621a      	str	r2, [r3, #32]
}
 80062f6:	bf00      	nop
 80062f8:	371c      	adds	r7, #28
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr

08006302 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006302:	b480      	push	{r7}
 8006304:	b087      	sub	sp, #28
 8006306:	af00      	add	r7, sp, #0
 8006308:	60f8      	str	r0, [r7, #12]
 800630a:	60b9      	str	r1, [r7, #8]
 800630c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6a1b      	ldr	r3, [r3, #32]
 8006318:	f023 0210 	bic.w	r2, r3, #16
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	699b      	ldr	r3, [r3, #24]
 8006324:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800632c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	031b      	lsls	r3, r3, #12
 8006332:	693a      	ldr	r2, [r7, #16]
 8006334:	4313      	orrs	r3, r2
 8006336:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800633e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	011b      	lsls	r3, r3, #4
 8006344:	697a      	ldr	r2, [r7, #20]
 8006346:	4313      	orrs	r3, r2
 8006348:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	693a      	ldr	r2, [r7, #16]
 800634e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	697a      	ldr	r2, [r7, #20]
 8006354:	621a      	str	r2, [r3, #32]
}
 8006356:	bf00      	nop
 8006358:	371c      	adds	r7, #28
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr

08006362 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006362:	b480      	push	{r7}
 8006364:	b085      	sub	sp, #20
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
 800636a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006378:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800637a:	683a      	ldr	r2, [r7, #0]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	4313      	orrs	r3, r2
 8006380:	f043 0307 	orr.w	r3, r3, #7
 8006384:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	609a      	str	r2, [r3, #8]
}
 800638c:	bf00      	nop
 800638e:	3714      	adds	r7, #20
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006398:	b480      	push	{r7}
 800639a:	b087      	sub	sp, #28
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	607a      	str	r2, [r7, #4]
 80063a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80063b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	021a      	lsls	r2, r3, #8
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	431a      	orrs	r2, r3
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	4313      	orrs	r3, r2
 80063c0:	697a      	ldr	r2, [r7, #20]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	697a      	ldr	r2, [r7, #20]
 80063ca:	609a      	str	r2, [r3, #8]
}
 80063cc:	bf00      	nop
 80063ce:	371c      	adds	r7, #28
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063d8:	b480      	push	{r7}
 80063da:	b085      	sub	sp, #20
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d101      	bne.n	80063f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063ec:	2302      	movs	r3, #2
 80063ee:	e05a      	b.n	80064a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2202      	movs	r2, #2
 80063fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006416:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68fa      	ldr	r2, [r7, #12]
 800641e:	4313      	orrs	r3, r2
 8006420:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a21      	ldr	r2, [pc, #132]	@ (80064b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d022      	beq.n	800647a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800643c:	d01d      	beq.n	800647a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a1d      	ldr	r2, [pc, #116]	@ (80064b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d018      	beq.n	800647a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a1b      	ldr	r2, [pc, #108]	@ (80064bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d013      	beq.n	800647a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a1a      	ldr	r2, [pc, #104]	@ (80064c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d00e      	beq.n	800647a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a18      	ldr	r2, [pc, #96]	@ (80064c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d009      	beq.n	800647a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a17      	ldr	r2, [pc, #92]	@ (80064c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d004      	beq.n	800647a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a15      	ldr	r2, [pc, #84]	@ (80064cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d10c      	bne.n	8006494 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006480:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	68ba      	ldr	r2, [r7, #8]
 8006488:	4313      	orrs	r3, r2
 800648a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	68ba      	ldr	r2, [r7, #8]
 8006492:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3714      	adds	r7, #20
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr
 80064b2:	bf00      	nop
 80064b4:	40010000 	.word	0x40010000
 80064b8:	40000400 	.word	0x40000400
 80064bc:	40000800 	.word	0x40000800
 80064c0:	40000c00 	.word	0x40000c00
 80064c4:	40010400 	.word	0x40010400
 80064c8:	40014000 	.word	0x40014000
 80064cc:	40001800 	.word	0x40001800

080064d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b083      	sub	sp, #12
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064d8:	bf00      	nop
 80064da:	370c      	adds	r7, #12
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr

080064e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064ec:	bf00      	nop
 80064ee:	370c      	adds	r7, #12
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d101      	bne.n	800650a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	e042      	b.n	8006590 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006510:	b2db      	uxtb	r3, r3
 8006512:	2b00      	cmp	r3, #0
 8006514:	d106      	bne.n	8006524 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f7fa fe3c 	bl	800119c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2224      	movs	r2, #36	@ 0x24
 8006528:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	68da      	ldr	r2, [r3, #12]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800653a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f000 fdfb 	bl	8007138 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	691a      	ldr	r2, [r3, #16]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006550:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	695a      	ldr	r2, [r3, #20]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006560:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	68da      	ldr	r2, [r3, #12]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006570:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2220      	movs	r2, #32
 800657c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2220      	movs	r2, #32
 8006584:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800658e:	2300      	movs	r3, #0
}
 8006590:	4618      	mov	r0, r3
 8006592:	3708      	adds	r7, #8
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d101      	bne.n	80065aa <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e024      	b.n	80065f4 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2224      	movs	r2, #36	@ 0x24
 80065ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	68da      	ldr	r2, [r3, #12]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80065c0:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f7fa fec2 	bl	800134c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80065f2:	2300      	movs	r3, #0
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3708      	adds	r7, #8
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b08a      	sub	sp, #40	@ 0x28
 8006600:	af02      	add	r7, sp, #8
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	603b      	str	r3, [r7, #0]
 8006608:	4613      	mov	r3, r2
 800660a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800660c:	2300      	movs	r3, #0
 800660e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006616:	b2db      	uxtb	r3, r3
 8006618:	2b20      	cmp	r3, #32
 800661a:	d175      	bne.n	8006708 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d002      	beq.n	8006628 <HAL_UART_Transmit+0x2c>
 8006622:	88fb      	ldrh	r3, [r7, #6]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d101      	bne.n	800662c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	e06e      	b.n	800670a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2200      	movs	r2, #0
 8006630:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2221      	movs	r2, #33	@ 0x21
 8006636:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800663a:	f7fb fb63 	bl	8001d04 <HAL_GetTick>
 800663e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	88fa      	ldrh	r2, [r7, #6]
 8006644:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	88fa      	ldrh	r2, [r7, #6]
 800664a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006654:	d108      	bne.n	8006668 <HAL_UART_Transmit+0x6c>
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d104      	bne.n	8006668 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800665e:	2300      	movs	r3, #0
 8006660:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	61bb      	str	r3, [r7, #24]
 8006666:	e003      	b.n	8006670 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800666c:	2300      	movs	r3, #0
 800666e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006670:	e02e      	b.n	80066d0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	9300      	str	r3, [sp, #0]
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	2200      	movs	r2, #0
 800667a:	2180      	movs	r1, #128	@ 0x80
 800667c:	68f8      	ldr	r0, [r7, #12]
 800667e:	f000 fb2d 	bl	8006cdc <UART_WaitOnFlagUntilTimeout>
 8006682:	4603      	mov	r3, r0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d005      	beq.n	8006694 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2220      	movs	r2, #32
 800668c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006690:	2303      	movs	r3, #3
 8006692:	e03a      	b.n	800670a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d10b      	bne.n	80066b2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	881b      	ldrh	r3, [r3, #0]
 800669e:	461a      	mov	r2, r3
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80066aa:	69bb      	ldr	r3, [r7, #24]
 80066ac:	3302      	adds	r3, #2
 80066ae:	61bb      	str	r3, [r7, #24]
 80066b0:	e007      	b.n	80066c2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	781a      	ldrb	r2, [r3, #0]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	3301      	adds	r3, #1
 80066c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	3b01      	subs	r3, #1
 80066ca:	b29a      	uxth	r2, r3
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d1cb      	bne.n	8006672 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	9300      	str	r3, [sp, #0]
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	2200      	movs	r2, #0
 80066e2:	2140      	movs	r1, #64	@ 0x40
 80066e4:	68f8      	ldr	r0, [r7, #12]
 80066e6:	f000 faf9 	bl	8006cdc <UART_WaitOnFlagUntilTimeout>
 80066ea:	4603      	mov	r3, r0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d005      	beq.n	80066fc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2220      	movs	r2, #32
 80066f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80066f8:	2303      	movs	r3, #3
 80066fa:	e006      	b.n	800670a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2220      	movs	r2, #32
 8006700:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006704:	2300      	movs	r3, #0
 8006706:	e000      	b.n	800670a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006708:	2302      	movs	r3, #2
  }
}
 800670a:	4618      	mov	r0, r3
 800670c:	3720      	adds	r7, #32
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}

08006712 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006712:	b580      	push	{r7, lr}
 8006714:	b084      	sub	sp, #16
 8006716:	af00      	add	r7, sp, #0
 8006718:	60f8      	str	r0, [r7, #12]
 800671a:	60b9      	str	r1, [r7, #8]
 800671c:	4613      	mov	r3, r2
 800671e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006726:	b2db      	uxtb	r3, r3
 8006728:	2b20      	cmp	r3, #32
 800672a:	d112      	bne.n	8006752 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d002      	beq.n	8006738 <HAL_UART_Receive_IT+0x26>
 8006732:	88fb      	ldrh	r3, [r7, #6]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d101      	bne.n	800673c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	e00b      	b.n	8006754 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2200      	movs	r2, #0
 8006740:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006742:	88fb      	ldrh	r3, [r7, #6]
 8006744:	461a      	mov	r2, r3
 8006746:	68b9      	ldr	r1, [r7, #8]
 8006748:	68f8      	ldr	r0, [r7, #12]
 800674a:	f000 fb20 	bl	8006d8e <UART_Start_Receive_IT>
 800674e:	4603      	mov	r3, r0
 8006750:	e000      	b.n	8006754 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006752:	2302      	movs	r3, #2
  }
}
 8006754:	4618      	mov	r0, r3
 8006756:	3710      	adds	r7, #16
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b0ba      	sub	sp, #232	@ 0xe8
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	695b      	ldr	r3, [r3, #20]
 800677e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006782:	2300      	movs	r3, #0
 8006784:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006788:	2300      	movs	r3, #0
 800678a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800678e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006792:	f003 030f 	and.w	r3, r3, #15
 8006796:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800679a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d10f      	bne.n	80067c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80067a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067a6:	f003 0320 	and.w	r3, r3, #32
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d009      	beq.n	80067c2 <HAL_UART_IRQHandler+0x66>
 80067ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067b2:	f003 0320 	and.w	r3, r3, #32
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d003      	beq.n	80067c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 fbfd 	bl	8006fba <UART_Receive_IT>
      return;
 80067c0:	e273      	b.n	8006caa <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80067c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	f000 80de 	beq.w	8006988 <HAL_UART_IRQHandler+0x22c>
 80067cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80067d0:	f003 0301 	and.w	r3, r3, #1
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d106      	bne.n	80067e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80067d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067dc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	f000 80d1 	beq.w	8006988 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80067e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067ea:	f003 0301 	and.w	r3, r3, #1
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00b      	beq.n	800680a <HAL_UART_IRQHandler+0xae>
 80067f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d005      	beq.n	800680a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006802:	f043 0201 	orr.w	r2, r3, #1
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800680a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800680e:	f003 0304 	and.w	r3, r3, #4
 8006812:	2b00      	cmp	r3, #0
 8006814:	d00b      	beq.n	800682e <HAL_UART_IRQHandler+0xd2>
 8006816:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800681a:	f003 0301 	and.w	r3, r3, #1
 800681e:	2b00      	cmp	r3, #0
 8006820:	d005      	beq.n	800682e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006826:	f043 0202 	orr.w	r2, r3, #2
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800682e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006832:	f003 0302 	and.w	r3, r3, #2
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00b      	beq.n	8006852 <HAL_UART_IRQHandler+0xf6>
 800683a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800683e:	f003 0301 	and.w	r3, r3, #1
 8006842:	2b00      	cmp	r3, #0
 8006844:	d005      	beq.n	8006852 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800684a:	f043 0204 	orr.w	r2, r3, #4
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006856:	f003 0308 	and.w	r3, r3, #8
 800685a:	2b00      	cmp	r3, #0
 800685c:	d011      	beq.n	8006882 <HAL_UART_IRQHandler+0x126>
 800685e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006862:	f003 0320 	and.w	r3, r3, #32
 8006866:	2b00      	cmp	r3, #0
 8006868:	d105      	bne.n	8006876 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800686a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800686e:	f003 0301 	and.w	r3, r3, #1
 8006872:	2b00      	cmp	r3, #0
 8006874:	d005      	beq.n	8006882 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800687a:	f043 0208 	orr.w	r2, r3, #8
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006886:	2b00      	cmp	r3, #0
 8006888:	f000 820a 	beq.w	8006ca0 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800688c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006890:	f003 0320 	and.w	r3, r3, #32
 8006894:	2b00      	cmp	r3, #0
 8006896:	d008      	beq.n	80068aa <HAL_UART_IRQHandler+0x14e>
 8006898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800689c:	f003 0320 	and.w	r3, r3, #32
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d002      	beq.n	80068aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 fb88 	bl	8006fba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	695b      	ldr	r3, [r3, #20]
 80068b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068b4:	2b40      	cmp	r3, #64	@ 0x40
 80068b6:	bf0c      	ite	eq
 80068b8:	2301      	moveq	r3, #1
 80068ba:	2300      	movne	r3, #0
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068c6:	f003 0308 	and.w	r3, r3, #8
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d103      	bne.n	80068d6 <HAL_UART_IRQHandler+0x17a>
 80068ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d04f      	beq.n	8006976 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 fa93 	bl	8006e02 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	695b      	ldr	r3, [r3, #20]
 80068e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068e6:	2b40      	cmp	r3, #64	@ 0x40
 80068e8:	d141      	bne.n	800696e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	3314      	adds	r3, #20
 80068f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80068f8:	e853 3f00 	ldrex	r3, [r3]
 80068fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006900:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006904:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006908:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	3314      	adds	r3, #20
 8006912:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006916:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800691a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800691e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006922:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006926:	e841 2300 	strex	r3, r2, [r1]
 800692a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800692e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006932:	2b00      	cmp	r3, #0
 8006934:	d1d9      	bne.n	80068ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800693a:	2b00      	cmp	r3, #0
 800693c:	d013      	beq.n	8006966 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006942:	4a8a      	ldr	r2, [pc, #552]	@ (8006b6c <HAL_UART_IRQHandler+0x410>)
 8006944:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800694a:	4618      	mov	r0, r3
 800694c:	f7fc fb68 	bl	8003020 <HAL_DMA_Abort_IT>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d016      	beq.n	8006984 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800695a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006960:	4610      	mov	r0, r2
 8006962:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006964:	e00e      	b.n	8006984 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 f9a2 	bl	8006cb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800696c:	e00a      	b.n	8006984 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 f99e 	bl	8006cb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006974:	e006      	b.n	8006984 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 f99a 	bl	8006cb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006982:	e18d      	b.n	8006ca0 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006984:	bf00      	nop
    return;
 8006986:	e18b      	b.n	8006ca0 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800698c:	2b01      	cmp	r3, #1
 800698e:	f040 8167 	bne.w	8006c60 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006996:	f003 0310 	and.w	r3, r3, #16
 800699a:	2b00      	cmp	r3, #0
 800699c:	f000 8160 	beq.w	8006c60 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80069a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069a4:	f003 0310 	and.w	r3, r3, #16
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	f000 8159 	beq.w	8006c60 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80069ae:	2300      	movs	r3, #0
 80069b0:	60bb      	str	r3, [r7, #8]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	60bb      	str	r3, [r7, #8]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	60bb      	str	r3, [r7, #8]
 80069c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	695b      	ldr	r3, [r3, #20]
 80069ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069ce:	2b40      	cmp	r3, #64	@ 0x40
 80069d0:	f040 80ce 	bne.w	8006b70 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80069e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	f000 80a9 	beq.w	8006b3c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80069ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80069f2:	429a      	cmp	r2, r3
 80069f4:	f080 80a2 	bcs.w	8006b3c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80069fe:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a04:	69db      	ldr	r3, [r3, #28]
 8006a06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a0a:	f000 8088 	beq.w	8006b1e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	330c      	adds	r3, #12
 8006a14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a18:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006a1c:	e853 3f00 	ldrex	r3, [r3]
 8006a20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006a24:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006a28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	330c      	adds	r3, #12
 8006a36:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006a3a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006a3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a42:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006a46:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006a4a:	e841 2300 	strex	r3, r2, [r1]
 8006a4e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006a52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d1d9      	bne.n	8006a0e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	3314      	adds	r3, #20
 8006a60:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006a64:	e853 3f00 	ldrex	r3, [r3]
 8006a68:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006a6a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006a6c:	f023 0301 	bic.w	r3, r3, #1
 8006a70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	3314      	adds	r3, #20
 8006a7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006a7e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006a82:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a84:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006a86:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006a8a:	e841 2300 	strex	r3, r2, [r1]
 8006a8e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006a90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d1e1      	bne.n	8006a5a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	3314      	adds	r3, #20
 8006a9c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006aa0:	e853 3f00 	ldrex	r3, [r3]
 8006aa4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006aa6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006aa8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006aac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	3314      	adds	r3, #20
 8006ab6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006aba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006abc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006abe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006ac0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006ac2:	e841 2300 	strex	r3, r2, [r1]
 8006ac6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006ac8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d1e3      	bne.n	8006a96 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2220      	movs	r2, #32
 8006ad2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	330c      	adds	r3, #12
 8006ae2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ae6:	e853 3f00 	ldrex	r3, [r3]
 8006aea:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006aec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006aee:	f023 0310 	bic.w	r3, r3, #16
 8006af2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	330c      	adds	r3, #12
 8006afc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006b00:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006b02:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b04:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006b06:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006b08:	e841 2300 	strex	r3, r2, [r1]
 8006b0c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006b0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d1e3      	bne.n	8006adc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f7fc fa11 	bl	8002f40 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2202      	movs	r2, #2
 8006b22:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	1ad3      	subs	r3, r2, r3
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	4619      	mov	r1, r3
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 f8c5 	bl	8006cc4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006b3a:	e0b3      	b.n	8006ca4 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006b40:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006b44:	429a      	cmp	r2, r3
 8006b46:	f040 80ad 	bne.w	8006ca4 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b4e:	69db      	ldr	r3, [r3, #28]
 8006b50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b54:	f040 80a6 	bne.w	8006ca4 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2202      	movs	r2, #2
 8006b5c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006b62:	4619      	mov	r1, r3
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 f8ad 	bl	8006cc4 <HAL_UARTEx_RxEventCallback>
      return;
 8006b6a:	e09b      	b.n	8006ca4 <HAL_UART_IRQHandler+0x548>
 8006b6c:	08006ec9 	.word	0x08006ec9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	1ad3      	subs	r3, r2, r3
 8006b7c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	f000 808e 	beq.w	8006ca8 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8006b8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	f000 8089 	beq.w	8006ca8 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	330c      	adds	r3, #12
 8006b9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ba0:	e853 3f00 	ldrex	r3, [r3]
 8006ba4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006ba6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ba8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006bac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	330c      	adds	r3, #12
 8006bb6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006bba:	647a      	str	r2, [r7, #68]	@ 0x44
 8006bbc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bbe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006bc0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006bc2:	e841 2300 	strex	r3, r2, [r1]
 8006bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006bc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d1e3      	bne.n	8006b96 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	3314      	adds	r3, #20
 8006bd4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd8:	e853 3f00 	ldrex	r3, [r3]
 8006bdc:	623b      	str	r3, [r7, #32]
   return(result);
 8006bde:	6a3b      	ldr	r3, [r7, #32]
 8006be0:	f023 0301 	bic.w	r3, r3, #1
 8006be4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	3314      	adds	r3, #20
 8006bee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006bf2:	633a      	str	r2, [r7, #48]	@ 0x30
 8006bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006bf8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bfa:	e841 2300 	strex	r3, r2, [r1]
 8006bfe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d1e3      	bne.n	8006bce <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2220      	movs	r2, #32
 8006c0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	330c      	adds	r3, #12
 8006c1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	e853 3f00 	ldrex	r3, [r3]
 8006c22:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f023 0310 	bic.w	r3, r3, #16
 8006c2a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	330c      	adds	r3, #12
 8006c34:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006c38:	61fa      	str	r2, [r7, #28]
 8006c3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3c:	69b9      	ldr	r1, [r7, #24]
 8006c3e:	69fa      	ldr	r2, [r7, #28]
 8006c40:	e841 2300 	strex	r3, r2, [r1]
 8006c44:	617b      	str	r3, [r7, #20]
   return(result);
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d1e3      	bne.n	8006c14 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2202      	movs	r2, #2
 8006c50:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c52:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006c56:	4619      	mov	r1, r3
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 f833 	bl	8006cc4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c5e:	e023      	b.n	8006ca8 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006c60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d009      	beq.n	8006c80 <HAL_UART_IRQHandler+0x524>
 8006c6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d003      	beq.n	8006c80 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 f936 	bl	8006eea <UART_Transmit_IT>
    return;
 8006c7e:	e014      	b.n	8006caa <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006c80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d00e      	beq.n	8006caa <HAL_UART_IRQHandler+0x54e>
 8006c8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d008      	beq.n	8006caa <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 f976 	bl	8006f8a <UART_EndTransmit_IT>
    return;
 8006c9e:	e004      	b.n	8006caa <HAL_UART_IRQHandler+0x54e>
    return;
 8006ca0:	bf00      	nop
 8006ca2:	e002      	b.n	8006caa <HAL_UART_IRQHandler+0x54e>
      return;
 8006ca4:	bf00      	nop
 8006ca6:	e000      	b.n	8006caa <HAL_UART_IRQHandler+0x54e>
      return;
 8006ca8:	bf00      	nop
  }
}
 8006caa:	37e8      	adds	r7, #232	@ 0xe8
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006cb8:	bf00      	nop
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	460b      	mov	r3, r1
 8006cce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006cd0:	bf00      	nop
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b086      	sub	sp, #24
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	603b      	str	r3, [r7, #0]
 8006ce8:	4613      	mov	r3, r2
 8006cea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cec:	e03b      	b.n	8006d66 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cee:	6a3b      	ldr	r3, [r7, #32]
 8006cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cf4:	d037      	beq.n	8006d66 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cf6:	f7fb f805 	bl	8001d04 <HAL_GetTick>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	1ad3      	subs	r3, r2, r3
 8006d00:	6a3a      	ldr	r2, [r7, #32]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d302      	bcc.n	8006d0c <UART_WaitOnFlagUntilTimeout+0x30>
 8006d06:	6a3b      	ldr	r3, [r7, #32]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d101      	bne.n	8006d10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006d0c:	2303      	movs	r3, #3
 8006d0e:	e03a      	b.n	8006d86 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	f003 0304 	and.w	r3, r3, #4
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d023      	beq.n	8006d66 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	2b80      	cmp	r3, #128	@ 0x80
 8006d22:	d020      	beq.n	8006d66 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	2b40      	cmp	r3, #64	@ 0x40
 8006d28:	d01d      	beq.n	8006d66 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f003 0308 	and.w	r3, r3, #8
 8006d34:	2b08      	cmp	r3, #8
 8006d36:	d116      	bne.n	8006d66 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006d38:	2300      	movs	r3, #0
 8006d3a:	617b      	str	r3, [r7, #20]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	617b      	str	r3, [r7, #20]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	617b      	str	r3, [r7, #20]
 8006d4c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006d4e:	68f8      	ldr	r0, [r7, #12]
 8006d50:	f000 f857 	bl	8006e02 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2208      	movs	r2, #8
 8006d58:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e00f      	b.n	8006d86 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	4013      	ands	r3, r2
 8006d70:	68ba      	ldr	r2, [r7, #8]
 8006d72:	429a      	cmp	r2, r3
 8006d74:	bf0c      	ite	eq
 8006d76:	2301      	moveq	r3, #1
 8006d78:	2300      	movne	r3, #0
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	79fb      	ldrb	r3, [r7, #7]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d0b4      	beq.n	8006cee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d84:	2300      	movs	r3, #0
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3718      	adds	r7, #24
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}

08006d8e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d8e:	b480      	push	{r7}
 8006d90:	b085      	sub	sp, #20
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	60f8      	str	r0, [r7, #12]
 8006d96:	60b9      	str	r1, [r7, #8]
 8006d98:	4613      	mov	r3, r2
 8006d9a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	68ba      	ldr	r2, [r7, #8]
 8006da0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	88fa      	ldrh	r2, [r7, #6]
 8006da6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	88fa      	ldrh	r2, [r7, #6]
 8006dac:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2200      	movs	r2, #0
 8006db2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2222      	movs	r2, #34	@ 0x22
 8006db8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	691b      	ldr	r3, [r3, #16]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d007      	beq.n	8006dd4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	68da      	ldr	r2, [r3, #12]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006dd2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	695a      	ldr	r2, [r3, #20]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f042 0201 	orr.w	r2, r2, #1
 8006de2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	68da      	ldr	r2, [r3, #12]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f042 0220 	orr.w	r2, r2, #32
 8006df2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3714      	adds	r7, #20
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr

08006e02 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e02:	b480      	push	{r7}
 8006e04:	b095      	sub	sp, #84	@ 0x54
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	330c      	adds	r3, #12
 8006e10:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e14:	e853 3f00 	ldrex	r3, [r3]
 8006e18:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e20:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	330c      	adds	r3, #12
 8006e28:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006e2a:	643a      	str	r2, [r7, #64]	@ 0x40
 8006e2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e2e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e30:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e32:	e841 2300 	strex	r3, r2, [r1]
 8006e36:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d1e5      	bne.n	8006e0a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	3314      	adds	r3, #20
 8006e44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e46:	6a3b      	ldr	r3, [r7, #32]
 8006e48:	e853 3f00 	ldrex	r3, [r3]
 8006e4c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e4e:	69fb      	ldr	r3, [r7, #28]
 8006e50:	f023 0301 	bic.w	r3, r3, #1
 8006e54:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	3314      	adds	r3, #20
 8006e5c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e60:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e62:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e66:	e841 2300 	strex	r3, r2, [r1]
 8006e6a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d1e5      	bne.n	8006e3e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d119      	bne.n	8006eae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	330c      	adds	r3, #12
 8006e80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	e853 3f00 	ldrex	r3, [r3]
 8006e88:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	f023 0310 	bic.w	r3, r3, #16
 8006e90:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	330c      	adds	r3, #12
 8006e98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e9a:	61ba      	str	r2, [r7, #24]
 8006e9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e9e:	6979      	ldr	r1, [r7, #20]
 8006ea0:	69ba      	ldr	r2, [r7, #24]
 8006ea2:	e841 2300 	strex	r3, r2, [r1]
 8006ea6:	613b      	str	r3, [r7, #16]
   return(result);
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d1e5      	bne.n	8006e7a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2220      	movs	r2, #32
 8006eb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006ebc:	bf00      	nop
 8006ebe:	3754      	adds	r7, #84	@ 0x54
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr

08006ec8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ed4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006edc:	68f8      	ldr	r0, [r7, #12]
 8006ede:	f7ff fee7 	bl	8006cb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ee2:	bf00      	nop
 8006ee4:	3710      	adds	r7, #16
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}

08006eea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006eea:	b480      	push	{r7}
 8006eec:	b085      	sub	sp, #20
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	2b21      	cmp	r3, #33	@ 0x21
 8006efc:	d13e      	bne.n	8006f7c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f06:	d114      	bne.n	8006f32 <UART_Transmit_IT+0x48>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	691b      	ldr	r3, [r3, #16]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d110      	bne.n	8006f32 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6a1b      	ldr	r3, [r3, #32]
 8006f14:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	881b      	ldrh	r3, [r3, #0]
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f24:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6a1b      	ldr	r3, [r3, #32]
 8006f2a:	1c9a      	adds	r2, r3, #2
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	621a      	str	r2, [r3, #32]
 8006f30:	e008      	b.n	8006f44 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a1b      	ldr	r3, [r3, #32]
 8006f36:	1c59      	adds	r1, r3, #1
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	6211      	str	r1, [r2, #32]
 8006f3c:	781a      	ldrb	r2, [r3, #0]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	3b01      	subs	r3, #1
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	4619      	mov	r1, r3
 8006f52:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d10f      	bne.n	8006f78 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	68da      	ldr	r2, [r3, #12]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006f66:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	68da      	ldr	r2, [r3, #12]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f76:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	e000      	b.n	8006f7e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006f7c:	2302      	movs	r3, #2
  }
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3714      	adds	r7, #20
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr

08006f8a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f8a:	b580      	push	{r7, lr}
 8006f8c:	b082      	sub	sp, #8
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	68da      	ldr	r2, [r3, #12]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006fa0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2220      	movs	r2, #32
 8006fa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f002 f944 	bl	8009238 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3708      	adds	r7, #8
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}

08006fba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006fba:	b580      	push	{r7, lr}
 8006fbc:	b08c      	sub	sp, #48	@ 0x30
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	2b22      	cmp	r3, #34	@ 0x22
 8006fd4:	f040 80aa 	bne.w	800712c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fe0:	d115      	bne.n	800700e <UART_Receive_IT+0x54>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d111      	bne.n	800700e <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fee:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ffc:	b29a      	uxth	r2, r3
 8006ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007000:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007006:	1c9a      	adds	r2, r3, #2
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	629a      	str	r2, [r3, #40]	@ 0x28
 800700c:	e024      	b.n	8007058 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007012:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800701c:	d007      	beq.n	800702e <UART_Receive_IT+0x74>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d10a      	bne.n	800703c <UART_Receive_IT+0x82>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	691b      	ldr	r3, [r3, #16]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d106      	bne.n	800703c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	b2da      	uxtb	r2, r3
 8007036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007038:	701a      	strb	r2, [r3, #0]
 800703a:	e008      	b.n	800704e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	b2db      	uxtb	r3, r3
 8007044:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007048:	b2da      	uxtb	r2, r3
 800704a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800704c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007052:	1c5a      	adds	r2, r3, #1
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800705c:	b29b      	uxth	r3, r3
 800705e:	3b01      	subs	r3, #1
 8007060:	b29b      	uxth	r3, r3
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	4619      	mov	r1, r3
 8007066:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007068:	2b00      	cmp	r3, #0
 800706a:	d15d      	bne.n	8007128 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	68da      	ldr	r2, [r3, #12]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f022 0220 	bic.w	r2, r2, #32
 800707a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	68da      	ldr	r2, [r3, #12]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800708a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	695a      	ldr	r2, [r3, #20]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f022 0201 	bic.w	r2, r2, #1
 800709a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2220      	movs	r2, #32
 80070a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d135      	bne.n	800711e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	330c      	adds	r3, #12
 80070be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	e853 3f00 	ldrex	r3, [r3]
 80070c6:	613b      	str	r3, [r7, #16]
   return(result);
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	f023 0310 	bic.w	r3, r3, #16
 80070ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	330c      	adds	r3, #12
 80070d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070d8:	623a      	str	r2, [r7, #32]
 80070da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070dc:	69f9      	ldr	r1, [r7, #28]
 80070de:	6a3a      	ldr	r2, [r7, #32]
 80070e0:	e841 2300 	strex	r3, r2, [r1]
 80070e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d1e5      	bne.n	80070b8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f003 0310 	and.w	r3, r3, #16
 80070f6:	2b10      	cmp	r3, #16
 80070f8:	d10a      	bne.n	8007110 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80070fa:	2300      	movs	r3, #0
 80070fc:	60fb      	str	r3, [r7, #12]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	60fb      	str	r3, [r7, #12]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	60fb      	str	r3, [r7, #12]
 800710e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007114:	4619      	mov	r1, r3
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f7ff fdd4 	bl	8006cc4 <HAL_UARTEx_RxEventCallback>
 800711c:	e002      	b.n	8007124 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f002 f9b0 	bl	8009484 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007124:	2300      	movs	r3, #0
 8007126:	e002      	b.n	800712e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007128:	2300      	movs	r3, #0
 800712a:	e000      	b.n	800712e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800712c:	2302      	movs	r3, #2
  }
}
 800712e:	4618      	mov	r0, r3
 8007130:	3730      	adds	r7, #48	@ 0x30
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
	...

08007138 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007138:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800713c:	b0c0      	sub	sp, #256	@ 0x100
 800713e:	af00      	add	r7, sp, #0
 8007140:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	691b      	ldr	r3, [r3, #16]
 800714c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007154:	68d9      	ldr	r1, [r3, #12]
 8007156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	ea40 0301 	orr.w	r3, r0, r1
 8007160:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007166:	689a      	ldr	r2, [r3, #8]
 8007168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	431a      	orrs	r2, r3
 8007170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007174:	695b      	ldr	r3, [r3, #20]
 8007176:	431a      	orrs	r2, r3
 8007178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800717c:	69db      	ldr	r3, [r3, #28]
 800717e:	4313      	orrs	r3, r2
 8007180:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007190:	f021 010c 	bic.w	r1, r1, #12
 8007194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800719e:	430b      	orrs	r3, r1
 80071a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80071a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	695b      	ldr	r3, [r3, #20]
 80071aa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80071ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071b2:	6999      	ldr	r1, [r3, #24]
 80071b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	ea40 0301 	orr.w	r3, r0, r1
 80071be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80071c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	4b8f      	ldr	r3, [pc, #572]	@ (8007404 <UART_SetConfig+0x2cc>)
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d005      	beq.n	80071d8 <UART_SetConfig+0xa0>
 80071cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	4b8d      	ldr	r3, [pc, #564]	@ (8007408 <UART_SetConfig+0x2d0>)
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d104      	bne.n	80071e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80071d8:	f7fe fc4c 	bl	8005a74 <HAL_RCC_GetPCLK2Freq>
 80071dc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80071e0:	e003      	b.n	80071ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80071e2:	f7fe fc33 	bl	8005a4c <HAL_RCC_GetPCLK1Freq>
 80071e6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071ee:	69db      	ldr	r3, [r3, #28]
 80071f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80071f4:	f040 810c 	bne.w	8007410 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80071f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071fc:	2200      	movs	r2, #0
 80071fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007202:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007206:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800720a:	4622      	mov	r2, r4
 800720c:	462b      	mov	r3, r5
 800720e:	1891      	adds	r1, r2, r2
 8007210:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007212:	415b      	adcs	r3, r3
 8007214:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007216:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800721a:	4621      	mov	r1, r4
 800721c:	eb12 0801 	adds.w	r8, r2, r1
 8007220:	4629      	mov	r1, r5
 8007222:	eb43 0901 	adc.w	r9, r3, r1
 8007226:	f04f 0200 	mov.w	r2, #0
 800722a:	f04f 0300 	mov.w	r3, #0
 800722e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007232:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007236:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800723a:	4690      	mov	r8, r2
 800723c:	4699      	mov	r9, r3
 800723e:	4623      	mov	r3, r4
 8007240:	eb18 0303 	adds.w	r3, r8, r3
 8007244:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007248:	462b      	mov	r3, r5
 800724a:	eb49 0303 	adc.w	r3, r9, r3
 800724e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800725e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007262:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007266:	460b      	mov	r3, r1
 8007268:	18db      	adds	r3, r3, r3
 800726a:	653b      	str	r3, [r7, #80]	@ 0x50
 800726c:	4613      	mov	r3, r2
 800726e:	eb42 0303 	adc.w	r3, r2, r3
 8007272:	657b      	str	r3, [r7, #84]	@ 0x54
 8007274:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007278:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800727c:	f7f8 fff8 	bl	8000270 <__aeabi_uldivmod>
 8007280:	4602      	mov	r2, r0
 8007282:	460b      	mov	r3, r1
 8007284:	4b61      	ldr	r3, [pc, #388]	@ (800740c <UART_SetConfig+0x2d4>)
 8007286:	fba3 2302 	umull	r2, r3, r3, r2
 800728a:	095b      	lsrs	r3, r3, #5
 800728c:	011c      	lsls	r4, r3, #4
 800728e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007292:	2200      	movs	r2, #0
 8007294:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007298:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800729c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80072a0:	4642      	mov	r2, r8
 80072a2:	464b      	mov	r3, r9
 80072a4:	1891      	adds	r1, r2, r2
 80072a6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80072a8:	415b      	adcs	r3, r3
 80072aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80072b0:	4641      	mov	r1, r8
 80072b2:	eb12 0a01 	adds.w	sl, r2, r1
 80072b6:	4649      	mov	r1, r9
 80072b8:	eb43 0b01 	adc.w	fp, r3, r1
 80072bc:	f04f 0200 	mov.w	r2, #0
 80072c0:	f04f 0300 	mov.w	r3, #0
 80072c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80072c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80072cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80072d0:	4692      	mov	sl, r2
 80072d2:	469b      	mov	fp, r3
 80072d4:	4643      	mov	r3, r8
 80072d6:	eb1a 0303 	adds.w	r3, sl, r3
 80072da:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80072de:	464b      	mov	r3, r9
 80072e0:	eb4b 0303 	adc.w	r3, fp, r3
 80072e4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80072e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80072f4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80072f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80072fc:	460b      	mov	r3, r1
 80072fe:	18db      	adds	r3, r3, r3
 8007300:	643b      	str	r3, [r7, #64]	@ 0x40
 8007302:	4613      	mov	r3, r2
 8007304:	eb42 0303 	adc.w	r3, r2, r3
 8007308:	647b      	str	r3, [r7, #68]	@ 0x44
 800730a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800730e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007312:	f7f8 ffad 	bl	8000270 <__aeabi_uldivmod>
 8007316:	4602      	mov	r2, r0
 8007318:	460b      	mov	r3, r1
 800731a:	4611      	mov	r1, r2
 800731c:	4b3b      	ldr	r3, [pc, #236]	@ (800740c <UART_SetConfig+0x2d4>)
 800731e:	fba3 2301 	umull	r2, r3, r3, r1
 8007322:	095b      	lsrs	r3, r3, #5
 8007324:	2264      	movs	r2, #100	@ 0x64
 8007326:	fb02 f303 	mul.w	r3, r2, r3
 800732a:	1acb      	subs	r3, r1, r3
 800732c:	00db      	lsls	r3, r3, #3
 800732e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007332:	4b36      	ldr	r3, [pc, #216]	@ (800740c <UART_SetConfig+0x2d4>)
 8007334:	fba3 2302 	umull	r2, r3, r3, r2
 8007338:	095b      	lsrs	r3, r3, #5
 800733a:	005b      	lsls	r3, r3, #1
 800733c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007340:	441c      	add	r4, r3
 8007342:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007346:	2200      	movs	r2, #0
 8007348:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800734c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007350:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007354:	4642      	mov	r2, r8
 8007356:	464b      	mov	r3, r9
 8007358:	1891      	adds	r1, r2, r2
 800735a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800735c:	415b      	adcs	r3, r3
 800735e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007360:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007364:	4641      	mov	r1, r8
 8007366:	1851      	adds	r1, r2, r1
 8007368:	6339      	str	r1, [r7, #48]	@ 0x30
 800736a:	4649      	mov	r1, r9
 800736c:	414b      	adcs	r3, r1
 800736e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007370:	f04f 0200 	mov.w	r2, #0
 8007374:	f04f 0300 	mov.w	r3, #0
 8007378:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800737c:	4659      	mov	r1, fp
 800737e:	00cb      	lsls	r3, r1, #3
 8007380:	4651      	mov	r1, sl
 8007382:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007386:	4651      	mov	r1, sl
 8007388:	00ca      	lsls	r2, r1, #3
 800738a:	4610      	mov	r0, r2
 800738c:	4619      	mov	r1, r3
 800738e:	4603      	mov	r3, r0
 8007390:	4642      	mov	r2, r8
 8007392:	189b      	adds	r3, r3, r2
 8007394:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007398:	464b      	mov	r3, r9
 800739a:	460a      	mov	r2, r1
 800739c:	eb42 0303 	adc.w	r3, r2, r3
 80073a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80073a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80073b0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80073b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80073b8:	460b      	mov	r3, r1
 80073ba:	18db      	adds	r3, r3, r3
 80073bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073be:	4613      	mov	r3, r2
 80073c0:	eb42 0303 	adc.w	r3, r2, r3
 80073c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80073c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80073ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80073ce:	f7f8 ff4f 	bl	8000270 <__aeabi_uldivmod>
 80073d2:	4602      	mov	r2, r0
 80073d4:	460b      	mov	r3, r1
 80073d6:	4b0d      	ldr	r3, [pc, #52]	@ (800740c <UART_SetConfig+0x2d4>)
 80073d8:	fba3 1302 	umull	r1, r3, r3, r2
 80073dc:	095b      	lsrs	r3, r3, #5
 80073de:	2164      	movs	r1, #100	@ 0x64
 80073e0:	fb01 f303 	mul.w	r3, r1, r3
 80073e4:	1ad3      	subs	r3, r2, r3
 80073e6:	00db      	lsls	r3, r3, #3
 80073e8:	3332      	adds	r3, #50	@ 0x32
 80073ea:	4a08      	ldr	r2, [pc, #32]	@ (800740c <UART_SetConfig+0x2d4>)
 80073ec:	fba2 2303 	umull	r2, r3, r2, r3
 80073f0:	095b      	lsrs	r3, r3, #5
 80073f2:	f003 0207 	and.w	r2, r3, #7
 80073f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4422      	add	r2, r4
 80073fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007400:	e106      	b.n	8007610 <UART_SetConfig+0x4d8>
 8007402:	bf00      	nop
 8007404:	40011000 	.word	0x40011000
 8007408:	40011400 	.word	0x40011400
 800740c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007410:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007414:	2200      	movs	r2, #0
 8007416:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800741a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800741e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007422:	4642      	mov	r2, r8
 8007424:	464b      	mov	r3, r9
 8007426:	1891      	adds	r1, r2, r2
 8007428:	6239      	str	r1, [r7, #32]
 800742a:	415b      	adcs	r3, r3
 800742c:	627b      	str	r3, [r7, #36]	@ 0x24
 800742e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007432:	4641      	mov	r1, r8
 8007434:	1854      	adds	r4, r2, r1
 8007436:	4649      	mov	r1, r9
 8007438:	eb43 0501 	adc.w	r5, r3, r1
 800743c:	f04f 0200 	mov.w	r2, #0
 8007440:	f04f 0300 	mov.w	r3, #0
 8007444:	00eb      	lsls	r3, r5, #3
 8007446:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800744a:	00e2      	lsls	r2, r4, #3
 800744c:	4614      	mov	r4, r2
 800744e:	461d      	mov	r5, r3
 8007450:	4643      	mov	r3, r8
 8007452:	18e3      	adds	r3, r4, r3
 8007454:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007458:	464b      	mov	r3, r9
 800745a:	eb45 0303 	adc.w	r3, r5, r3
 800745e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800746e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007472:	f04f 0200 	mov.w	r2, #0
 8007476:	f04f 0300 	mov.w	r3, #0
 800747a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800747e:	4629      	mov	r1, r5
 8007480:	008b      	lsls	r3, r1, #2
 8007482:	4621      	mov	r1, r4
 8007484:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007488:	4621      	mov	r1, r4
 800748a:	008a      	lsls	r2, r1, #2
 800748c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007490:	f7f8 feee 	bl	8000270 <__aeabi_uldivmod>
 8007494:	4602      	mov	r2, r0
 8007496:	460b      	mov	r3, r1
 8007498:	4b60      	ldr	r3, [pc, #384]	@ (800761c <UART_SetConfig+0x4e4>)
 800749a:	fba3 2302 	umull	r2, r3, r3, r2
 800749e:	095b      	lsrs	r3, r3, #5
 80074a0:	011c      	lsls	r4, r3, #4
 80074a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074a6:	2200      	movs	r2, #0
 80074a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80074ac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80074b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80074b4:	4642      	mov	r2, r8
 80074b6:	464b      	mov	r3, r9
 80074b8:	1891      	adds	r1, r2, r2
 80074ba:	61b9      	str	r1, [r7, #24]
 80074bc:	415b      	adcs	r3, r3
 80074be:	61fb      	str	r3, [r7, #28]
 80074c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074c4:	4641      	mov	r1, r8
 80074c6:	1851      	adds	r1, r2, r1
 80074c8:	6139      	str	r1, [r7, #16]
 80074ca:	4649      	mov	r1, r9
 80074cc:	414b      	adcs	r3, r1
 80074ce:	617b      	str	r3, [r7, #20]
 80074d0:	f04f 0200 	mov.w	r2, #0
 80074d4:	f04f 0300 	mov.w	r3, #0
 80074d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80074dc:	4659      	mov	r1, fp
 80074de:	00cb      	lsls	r3, r1, #3
 80074e0:	4651      	mov	r1, sl
 80074e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074e6:	4651      	mov	r1, sl
 80074e8:	00ca      	lsls	r2, r1, #3
 80074ea:	4610      	mov	r0, r2
 80074ec:	4619      	mov	r1, r3
 80074ee:	4603      	mov	r3, r0
 80074f0:	4642      	mov	r2, r8
 80074f2:	189b      	adds	r3, r3, r2
 80074f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80074f8:	464b      	mov	r3, r9
 80074fa:	460a      	mov	r2, r1
 80074fc:	eb42 0303 	adc.w	r3, r2, r3
 8007500:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	2200      	movs	r2, #0
 800750c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800750e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007510:	f04f 0200 	mov.w	r2, #0
 8007514:	f04f 0300 	mov.w	r3, #0
 8007518:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800751c:	4649      	mov	r1, r9
 800751e:	008b      	lsls	r3, r1, #2
 8007520:	4641      	mov	r1, r8
 8007522:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007526:	4641      	mov	r1, r8
 8007528:	008a      	lsls	r2, r1, #2
 800752a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800752e:	f7f8 fe9f 	bl	8000270 <__aeabi_uldivmod>
 8007532:	4602      	mov	r2, r0
 8007534:	460b      	mov	r3, r1
 8007536:	4611      	mov	r1, r2
 8007538:	4b38      	ldr	r3, [pc, #224]	@ (800761c <UART_SetConfig+0x4e4>)
 800753a:	fba3 2301 	umull	r2, r3, r3, r1
 800753e:	095b      	lsrs	r3, r3, #5
 8007540:	2264      	movs	r2, #100	@ 0x64
 8007542:	fb02 f303 	mul.w	r3, r2, r3
 8007546:	1acb      	subs	r3, r1, r3
 8007548:	011b      	lsls	r3, r3, #4
 800754a:	3332      	adds	r3, #50	@ 0x32
 800754c:	4a33      	ldr	r2, [pc, #204]	@ (800761c <UART_SetConfig+0x4e4>)
 800754e:	fba2 2303 	umull	r2, r3, r2, r3
 8007552:	095b      	lsrs	r3, r3, #5
 8007554:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007558:	441c      	add	r4, r3
 800755a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800755e:	2200      	movs	r2, #0
 8007560:	673b      	str	r3, [r7, #112]	@ 0x70
 8007562:	677a      	str	r2, [r7, #116]	@ 0x74
 8007564:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007568:	4642      	mov	r2, r8
 800756a:	464b      	mov	r3, r9
 800756c:	1891      	adds	r1, r2, r2
 800756e:	60b9      	str	r1, [r7, #8]
 8007570:	415b      	adcs	r3, r3
 8007572:	60fb      	str	r3, [r7, #12]
 8007574:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007578:	4641      	mov	r1, r8
 800757a:	1851      	adds	r1, r2, r1
 800757c:	6039      	str	r1, [r7, #0]
 800757e:	4649      	mov	r1, r9
 8007580:	414b      	adcs	r3, r1
 8007582:	607b      	str	r3, [r7, #4]
 8007584:	f04f 0200 	mov.w	r2, #0
 8007588:	f04f 0300 	mov.w	r3, #0
 800758c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007590:	4659      	mov	r1, fp
 8007592:	00cb      	lsls	r3, r1, #3
 8007594:	4651      	mov	r1, sl
 8007596:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800759a:	4651      	mov	r1, sl
 800759c:	00ca      	lsls	r2, r1, #3
 800759e:	4610      	mov	r0, r2
 80075a0:	4619      	mov	r1, r3
 80075a2:	4603      	mov	r3, r0
 80075a4:	4642      	mov	r2, r8
 80075a6:	189b      	adds	r3, r3, r2
 80075a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80075aa:	464b      	mov	r3, r9
 80075ac:	460a      	mov	r2, r1
 80075ae:	eb42 0303 	adc.w	r3, r2, r3
 80075b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80075b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80075be:	667a      	str	r2, [r7, #100]	@ 0x64
 80075c0:	f04f 0200 	mov.w	r2, #0
 80075c4:	f04f 0300 	mov.w	r3, #0
 80075c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80075cc:	4649      	mov	r1, r9
 80075ce:	008b      	lsls	r3, r1, #2
 80075d0:	4641      	mov	r1, r8
 80075d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075d6:	4641      	mov	r1, r8
 80075d8:	008a      	lsls	r2, r1, #2
 80075da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80075de:	f7f8 fe47 	bl	8000270 <__aeabi_uldivmod>
 80075e2:	4602      	mov	r2, r0
 80075e4:	460b      	mov	r3, r1
 80075e6:	4b0d      	ldr	r3, [pc, #52]	@ (800761c <UART_SetConfig+0x4e4>)
 80075e8:	fba3 1302 	umull	r1, r3, r3, r2
 80075ec:	095b      	lsrs	r3, r3, #5
 80075ee:	2164      	movs	r1, #100	@ 0x64
 80075f0:	fb01 f303 	mul.w	r3, r1, r3
 80075f4:	1ad3      	subs	r3, r2, r3
 80075f6:	011b      	lsls	r3, r3, #4
 80075f8:	3332      	adds	r3, #50	@ 0x32
 80075fa:	4a08      	ldr	r2, [pc, #32]	@ (800761c <UART_SetConfig+0x4e4>)
 80075fc:	fba2 2303 	umull	r2, r3, r2, r3
 8007600:	095b      	lsrs	r3, r3, #5
 8007602:	f003 020f 	and.w	r2, r3, #15
 8007606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4422      	add	r2, r4
 800760e:	609a      	str	r2, [r3, #8]
}
 8007610:	bf00      	nop
 8007612:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007616:	46bd      	mov	sp, r7
 8007618:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800761c:	51eb851f 	.word	0x51eb851f

08007620 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007620:	b084      	sub	sp, #16
 8007622:	b580      	push	{r7, lr}
 8007624:	b084      	sub	sp, #16
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]
 800762a:	f107 001c 	add.w	r0, r7, #28
 800762e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007632:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007636:	2b01      	cmp	r3, #1
 8007638:	d123      	bne.n	8007682 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800763e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	68db      	ldr	r3, [r3, #12]
 800764a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800764e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	68db      	ldr	r3, [r3, #12]
 800765a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007662:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007666:	2b01      	cmp	r3, #1
 8007668:	d105      	bne.n	8007676 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	68db      	ldr	r3, [r3, #12]
 800766e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f001 fae8 	bl	8008c4c <USB_CoreReset>
 800767c:	4603      	mov	r3, r0
 800767e:	73fb      	strb	r3, [r7, #15]
 8007680:	e01b      	b.n	80076ba <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	68db      	ldr	r3, [r3, #12]
 8007686:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f001 fadc 	bl	8008c4c <USB_CoreReset>
 8007694:	4603      	mov	r3, r0
 8007696:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007698:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800769c:	2b00      	cmp	r3, #0
 800769e:	d106      	bne.n	80076ae <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076a4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	639a      	str	r2, [r3, #56]	@ 0x38
 80076ac:	e005      	b.n	80076ba <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076b2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80076ba:	7fbb      	ldrb	r3, [r7, #30]
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d10b      	bne.n	80076d8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	f043 0206 	orr.w	r2, r3, #6
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	f043 0220 	orr.w	r2, r3, #32
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80076d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3710      	adds	r7, #16
 80076de:	46bd      	mov	sp, r7
 80076e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80076e4:	b004      	add	sp, #16
 80076e6:	4770      	bx	lr

080076e8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b087      	sub	sp, #28
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	60b9      	str	r1, [r7, #8]
 80076f2:	4613      	mov	r3, r2
 80076f4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80076f6:	79fb      	ldrb	r3, [r7, #7]
 80076f8:	2b02      	cmp	r3, #2
 80076fa:	d165      	bne.n	80077c8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	4a41      	ldr	r2, [pc, #260]	@ (8007804 <USB_SetTurnaroundTime+0x11c>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d906      	bls.n	8007712 <USB_SetTurnaroundTime+0x2a>
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	4a40      	ldr	r2, [pc, #256]	@ (8007808 <USB_SetTurnaroundTime+0x120>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d202      	bcs.n	8007712 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800770c:	230f      	movs	r3, #15
 800770e:	617b      	str	r3, [r7, #20]
 8007710:	e062      	b.n	80077d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	4a3c      	ldr	r2, [pc, #240]	@ (8007808 <USB_SetTurnaroundTime+0x120>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d306      	bcc.n	8007728 <USB_SetTurnaroundTime+0x40>
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	4a3b      	ldr	r2, [pc, #236]	@ (800780c <USB_SetTurnaroundTime+0x124>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d202      	bcs.n	8007728 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007722:	230e      	movs	r3, #14
 8007724:	617b      	str	r3, [r7, #20]
 8007726:	e057      	b.n	80077d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	4a38      	ldr	r2, [pc, #224]	@ (800780c <USB_SetTurnaroundTime+0x124>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d306      	bcc.n	800773e <USB_SetTurnaroundTime+0x56>
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	4a37      	ldr	r2, [pc, #220]	@ (8007810 <USB_SetTurnaroundTime+0x128>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d202      	bcs.n	800773e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007738:	230d      	movs	r3, #13
 800773a:	617b      	str	r3, [r7, #20]
 800773c:	e04c      	b.n	80077d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	4a33      	ldr	r2, [pc, #204]	@ (8007810 <USB_SetTurnaroundTime+0x128>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d306      	bcc.n	8007754 <USB_SetTurnaroundTime+0x6c>
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	4a32      	ldr	r2, [pc, #200]	@ (8007814 <USB_SetTurnaroundTime+0x12c>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d802      	bhi.n	8007754 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800774e:	230c      	movs	r3, #12
 8007750:	617b      	str	r3, [r7, #20]
 8007752:	e041      	b.n	80077d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	4a2f      	ldr	r2, [pc, #188]	@ (8007814 <USB_SetTurnaroundTime+0x12c>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d906      	bls.n	800776a <USB_SetTurnaroundTime+0x82>
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	4a2e      	ldr	r2, [pc, #184]	@ (8007818 <USB_SetTurnaroundTime+0x130>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d802      	bhi.n	800776a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007764:	230b      	movs	r3, #11
 8007766:	617b      	str	r3, [r7, #20]
 8007768:	e036      	b.n	80077d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	4a2a      	ldr	r2, [pc, #168]	@ (8007818 <USB_SetTurnaroundTime+0x130>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d906      	bls.n	8007780 <USB_SetTurnaroundTime+0x98>
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	4a29      	ldr	r2, [pc, #164]	@ (800781c <USB_SetTurnaroundTime+0x134>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d802      	bhi.n	8007780 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800777a:	230a      	movs	r3, #10
 800777c:	617b      	str	r3, [r7, #20]
 800777e:	e02b      	b.n	80077d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	4a26      	ldr	r2, [pc, #152]	@ (800781c <USB_SetTurnaroundTime+0x134>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d906      	bls.n	8007796 <USB_SetTurnaroundTime+0xae>
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	4a25      	ldr	r2, [pc, #148]	@ (8007820 <USB_SetTurnaroundTime+0x138>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d202      	bcs.n	8007796 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007790:	2309      	movs	r3, #9
 8007792:	617b      	str	r3, [r7, #20]
 8007794:	e020      	b.n	80077d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	4a21      	ldr	r2, [pc, #132]	@ (8007820 <USB_SetTurnaroundTime+0x138>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d306      	bcc.n	80077ac <USB_SetTurnaroundTime+0xc4>
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	4a20      	ldr	r2, [pc, #128]	@ (8007824 <USB_SetTurnaroundTime+0x13c>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d802      	bhi.n	80077ac <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80077a6:	2308      	movs	r3, #8
 80077a8:	617b      	str	r3, [r7, #20]
 80077aa:	e015      	b.n	80077d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	4a1d      	ldr	r2, [pc, #116]	@ (8007824 <USB_SetTurnaroundTime+0x13c>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d906      	bls.n	80077c2 <USB_SetTurnaroundTime+0xda>
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	4a1c      	ldr	r2, [pc, #112]	@ (8007828 <USB_SetTurnaroundTime+0x140>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d202      	bcs.n	80077c2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80077bc:	2307      	movs	r3, #7
 80077be:	617b      	str	r3, [r7, #20]
 80077c0:	e00a      	b.n	80077d8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80077c2:	2306      	movs	r3, #6
 80077c4:	617b      	str	r3, [r7, #20]
 80077c6:	e007      	b.n	80077d8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80077c8:	79fb      	ldrb	r3, [r7, #7]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d102      	bne.n	80077d4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80077ce:	2309      	movs	r3, #9
 80077d0:	617b      	str	r3, [r7, #20]
 80077d2:	e001      	b.n	80077d8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80077d4:	2309      	movs	r3, #9
 80077d6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	68da      	ldr	r2, [r3, #12]
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	029b      	lsls	r3, r3, #10
 80077ec:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80077f0:	431a      	orrs	r2, r3
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80077f6:	2300      	movs	r3, #0
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	371c      	adds	r7, #28
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr
 8007804:	00d8acbf 	.word	0x00d8acbf
 8007808:	00e4e1c0 	.word	0x00e4e1c0
 800780c:	00f42400 	.word	0x00f42400
 8007810:	01067380 	.word	0x01067380
 8007814:	011a499f 	.word	0x011a499f
 8007818:	01312cff 	.word	0x01312cff
 800781c:	014ca43f 	.word	0x014ca43f
 8007820:	016e3600 	.word	0x016e3600
 8007824:	01a6ab1f 	.word	0x01a6ab1f
 8007828:	01e84800 	.word	0x01e84800

0800782c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	689b      	ldr	r3, [r3, #8]
 8007838:	f043 0201 	orr.w	r2, r3, #1
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007840:	2300      	movs	r3, #0
}
 8007842:	4618      	mov	r0, r3
 8007844:	370c      	adds	r7, #12
 8007846:	46bd      	mov	sp, r7
 8007848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784c:	4770      	bx	lr

0800784e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800784e:	b480      	push	{r7}
 8007850:	b083      	sub	sp, #12
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	f023 0201 	bic.w	r2, r3, #1
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007862:	2300      	movs	r3, #0
}
 8007864:	4618      	mov	r0, r3
 8007866:	370c      	adds	r7, #12
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr

08007870 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	460b      	mov	r3, r1
 800787a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800787c:	2300      	movs	r3, #0
 800787e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	68db      	ldr	r3, [r3, #12]
 8007884:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800788c:	78fb      	ldrb	r3, [r7, #3]
 800788e:	2b01      	cmp	r3, #1
 8007890:	d115      	bne.n	80078be <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	68db      	ldr	r3, [r3, #12]
 8007896:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800789e:	200a      	movs	r0, #10
 80078a0:	f7fa fa3c 	bl	8001d1c <HAL_Delay>
      ms += 10U;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	330a      	adds	r3, #10
 80078a8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f001 f93f 	bl	8008b2e <USB_GetMode>
 80078b0:	4603      	mov	r3, r0
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d01e      	beq.n	80078f4 <USB_SetCurrentMode+0x84>
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2bc7      	cmp	r3, #199	@ 0xc7
 80078ba:	d9f0      	bls.n	800789e <USB_SetCurrentMode+0x2e>
 80078bc:	e01a      	b.n	80078f4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80078be:	78fb      	ldrb	r3, [r7, #3]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d115      	bne.n	80078f0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	68db      	ldr	r3, [r3, #12]
 80078c8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80078d0:	200a      	movs	r0, #10
 80078d2:	f7fa fa23 	bl	8001d1c <HAL_Delay>
      ms += 10U;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	330a      	adds	r3, #10
 80078da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f001 f926 	bl	8008b2e <USB_GetMode>
 80078e2:	4603      	mov	r3, r0
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d005      	beq.n	80078f4 <USB_SetCurrentMode+0x84>
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2bc7      	cmp	r3, #199	@ 0xc7
 80078ec:	d9f0      	bls.n	80078d0 <USB_SetCurrentMode+0x60>
 80078ee:	e001      	b.n	80078f4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80078f0:	2301      	movs	r3, #1
 80078f2:	e005      	b.n	8007900 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2bc8      	cmp	r3, #200	@ 0xc8
 80078f8:	d101      	bne.n	80078fe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	e000      	b.n	8007900 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80078fe:	2300      	movs	r3, #0
}
 8007900:	4618      	mov	r0, r3
 8007902:	3710      	adds	r7, #16
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007908:	b084      	sub	sp, #16
 800790a:	b580      	push	{r7, lr}
 800790c:	b086      	sub	sp, #24
 800790e:	af00      	add	r7, sp, #0
 8007910:	6078      	str	r0, [r7, #4]
 8007912:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007916:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800791a:	2300      	movs	r3, #0
 800791c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007922:	2300      	movs	r3, #0
 8007924:	613b      	str	r3, [r7, #16]
 8007926:	e009      	b.n	800793c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	3340      	adds	r3, #64	@ 0x40
 800792e:	009b      	lsls	r3, r3, #2
 8007930:	4413      	add	r3, r2
 8007932:	2200      	movs	r2, #0
 8007934:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	3301      	adds	r3, #1
 800793a:	613b      	str	r3, [r7, #16]
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	2b0e      	cmp	r3, #14
 8007940:	d9f2      	bls.n	8007928 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007942:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007946:	2b00      	cmp	r3, #0
 8007948:	d11c      	bne.n	8007984 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	68fa      	ldr	r2, [r7, #12]
 8007954:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007958:	f043 0302 	orr.w	r3, r3, #2
 800795c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007962:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800796e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800797a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	639a      	str	r2, [r3, #56]	@ 0x38
 8007982:	e00b      	b.n	800799c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007988:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007994:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80079a2:	461a      	mov	r2, r3
 80079a4:	2300      	movs	r3, #0
 80079a6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80079a8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d10d      	bne.n	80079cc <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80079b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d104      	bne.n	80079c2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80079b8:	2100      	movs	r1, #0
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 f968 	bl	8007c90 <USB_SetDevSpeed>
 80079c0:	e008      	b.n	80079d4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80079c2:	2101      	movs	r1, #1
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 f963 	bl	8007c90 <USB_SetDevSpeed>
 80079ca:	e003      	b.n	80079d4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80079cc:	2103      	movs	r1, #3
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 f95e 	bl	8007c90 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80079d4:	2110      	movs	r1, #16
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 f8fa 	bl	8007bd0 <USB_FlushTxFifo>
 80079dc:	4603      	mov	r3, r0
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d001      	beq.n	80079e6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 f924 	bl	8007c34 <USB_FlushRxFifo>
 80079ec:	4603      	mov	r3, r0
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d001      	beq.n	80079f6 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80079f2:	2301      	movs	r3, #1
 80079f4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079fc:	461a      	mov	r2, r3
 80079fe:	2300      	movs	r3, #0
 8007a00:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a08:	461a      	mov	r2, r3
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a14:	461a      	mov	r2, r3
 8007a16:	2300      	movs	r3, #0
 8007a18:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	613b      	str	r3, [r7, #16]
 8007a1e:	e043      	b.n	8007aa8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	015a      	lsls	r2, r3, #5
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	4413      	add	r3, r2
 8007a28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a32:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a36:	d118      	bne.n	8007a6a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d10a      	bne.n	8007a54 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	015a      	lsls	r2, r3, #5
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	4413      	add	r3, r2
 8007a46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007a50:	6013      	str	r3, [r2, #0]
 8007a52:	e013      	b.n	8007a7c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	015a      	lsls	r2, r3, #5
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	4413      	add	r3, r2
 8007a5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a60:	461a      	mov	r2, r3
 8007a62:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007a66:	6013      	str	r3, [r2, #0]
 8007a68:	e008      	b.n	8007a7c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	015a      	lsls	r2, r3, #5
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	4413      	add	r3, r2
 8007a72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a76:	461a      	mov	r2, r3
 8007a78:	2300      	movs	r3, #0
 8007a7a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	015a      	lsls	r2, r3, #5
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	4413      	add	r3, r2
 8007a84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a88:	461a      	mov	r2, r3
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	015a      	lsls	r2, r3, #5
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	4413      	add	r3, r2
 8007a96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007aa0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	613b      	str	r3, [r7, #16]
 8007aa8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007aac:	461a      	mov	r2, r3
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d3b5      	bcc.n	8007a20 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	613b      	str	r3, [r7, #16]
 8007ab8:	e043      	b.n	8007b42 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	015a      	lsls	r2, r3, #5
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	4413      	add	r3, r2
 8007ac2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007acc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ad0:	d118      	bne.n	8007b04 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d10a      	bne.n	8007aee <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	015a      	lsls	r2, r3, #5
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	4413      	add	r3, r2
 8007ae0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007aea:	6013      	str	r3, [r2, #0]
 8007aec:	e013      	b.n	8007b16 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	015a      	lsls	r2, r3, #5
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	4413      	add	r3, r2
 8007af6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007afa:	461a      	mov	r2, r3
 8007afc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007b00:	6013      	str	r3, [r2, #0]
 8007b02:	e008      	b.n	8007b16 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	015a      	lsls	r2, r3, #5
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	4413      	add	r3, r2
 8007b0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b10:	461a      	mov	r2, r3
 8007b12:	2300      	movs	r3, #0
 8007b14:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	015a      	lsls	r2, r3, #5
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	4413      	add	r3, r2
 8007b1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b22:	461a      	mov	r2, r3
 8007b24:	2300      	movs	r3, #0
 8007b26:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	015a      	lsls	r2, r3, #5
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	4413      	add	r3, r2
 8007b30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b34:	461a      	mov	r2, r3
 8007b36:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007b3a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	3301      	adds	r3, #1
 8007b40:	613b      	str	r3, [r7, #16]
 8007b42:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007b46:	461a      	mov	r2, r3
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d3b5      	bcc.n	8007aba <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b54:	691b      	ldr	r3, [r3, #16]
 8007b56:	68fa      	ldr	r2, [r7, #12]
 8007b58:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b60:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007b6e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007b70:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d105      	bne.n	8007b84 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	699b      	ldr	r3, [r3, #24]
 8007b7c:	f043 0210 	orr.w	r2, r3, #16
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	699a      	ldr	r2, [r3, #24]
 8007b88:	4b10      	ldr	r3, [pc, #64]	@ (8007bcc <USB_DevInit+0x2c4>)
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007b90:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d005      	beq.n	8007ba4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	699b      	ldr	r3, [r3, #24]
 8007b9c:	f043 0208 	orr.w	r2, r3, #8
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007ba4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d107      	bne.n	8007bbc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	699b      	ldr	r3, [r3, #24]
 8007bb0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007bb4:	f043 0304 	orr.w	r3, r3, #4
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007bbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3718      	adds	r7, #24
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007bc8:	b004      	add	sp, #16
 8007bca:	4770      	bx	lr
 8007bcc:	803c3800 	.word	0x803c3800

08007bd0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b085      	sub	sp, #20
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	3301      	adds	r3, #1
 8007be2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007bea:	d901      	bls.n	8007bf0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007bec:	2303      	movs	r3, #3
 8007bee:	e01b      	b.n	8007c28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	691b      	ldr	r3, [r3, #16]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	daf2      	bge.n	8007bde <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	019b      	lsls	r3, r3, #6
 8007c00:	f043 0220 	orr.w	r2, r3, #32
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	3301      	adds	r3, #1
 8007c0c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c14:	d901      	bls.n	8007c1a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007c16:	2303      	movs	r3, #3
 8007c18:	e006      	b.n	8007c28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	691b      	ldr	r3, [r3, #16]
 8007c1e:	f003 0320 	and.w	r3, r3, #32
 8007c22:	2b20      	cmp	r3, #32
 8007c24:	d0f0      	beq.n	8007c08 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007c26:	2300      	movs	r3, #0
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3714      	adds	r7, #20
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr

08007c34 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b085      	sub	sp, #20
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	3301      	adds	r3, #1
 8007c44:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c4c:	d901      	bls.n	8007c52 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007c4e:	2303      	movs	r3, #3
 8007c50:	e018      	b.n	8007c84 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	691b      	ldr	r3, [r3, #16]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	daf2      	bge.n	8007c40 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2210      	movs	r2, #16
 8007c62:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	3301      	adds	r3, #1
 8007c68:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c70:	d901      	bls.n	8007c76 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007c72:	2303      	movs	r3, #3
 8007c74:	e006      	b.n	8007c84 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	691b      	ldr	r3, [r3, #16]
 8007c7a:	f003 0310 	and.w	r3, r3, #16
 8007c7e:	2b10      	cmp	r3, #16
 8007c80:	d0f0      	beq.n	8007c64 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007c82:	2300      	movs	r3, #0
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3714      	adds	r7, #20
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr

08007c90 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b085      	sub	sp, #20
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	460b      	mov	r3, r1
 8007c9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ca6:	681a      	ldr	r2, [r3, #0]
 8007ca8:	78fb      	ldrb	r3, [r7, #3]
 8007caa:	68f9      	ldr	r1, [r7, #12]
 8007cac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3714      	adds	r7, #20
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc0:	4770      	bx	lr

08007cc2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007cc2:	b480      	push	{r7}
 8007cc4:	b087      	sub	sp, #28
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	f003 0306 	and.w	r3, r3, #6
 8007cda:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d102      	bne.n	8007ce8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	75fb      	strb	r3, [r7, #23]
 8007ce6:	e00a      	b.n	8007cfe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2b02      	cmp	r3, #2
 8007cec:	d002      	beq.n	8007cf4 <USB_GetDevSpeed+0x32>
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2b06      	cmp	r3, #6
 8007cf2:	d102      	bne.n	8007cfa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007cf4:	2302      	movs	r3, #2
 8007cf6:	75fb      	strb	r3, [r7, #23]
 8007cf8:	e001      	b.n	8007cfe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007cfa:	230f      	movs	r3, #15
 8007cfc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007cfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	371c      	adds	r7, #28
 8007d04:	46bd      	mov	sp, r7
 8007d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0a:	4770      	bx	lr

08007d0c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b085      	sub	sp, #20
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	785b      	ldrb	r3, [r3, #1]
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d13a      	bne.n	8007d9e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d2e:	69da      	ldr	r2, [r3, #28]
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	f003 030f 	and.w	r3, r3, #15
 8007d38:	2101      	movs	r1, #1
 8007d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	68f9      	ldr	r1, [r7, #12]
 8007d42:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007d46:	4313      	orrs	r3, r2
 8007d48:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	015a      	lsls	r2, r3, #5
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	4413      	add	r3, r2
 8007d52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d155      	bne.n	8007e0c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	015a      	lsls	r2, r3, #5
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	4413      	add	r3, r2
 8007d68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	689b      	ldr	r3, [r3, #8]
 8007d72:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	791b      	ldrb	r3, [r3, #4]
 8007d7a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007d7c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	059b      	lsls	r3, r3, #22
 8007d82:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007d84:	4313      	orrs	r3, r2
 8007d86:	68ba      	ldr	r2, [r7, #8]
 8007d88:	0151      	lsls	r1, r2, #5
 8007d8a:	68fa      	ldr	r2, [r7, #12]
 8007d8c:	440a      	add	r2, r1
 8007d8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d9a:	6013      	str	r3, [r2, #0]
 8007d9c:	e036      	b.n	8007e0c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007da4:	69da      	ldr	r2, [r3, #28]
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	781b      	ldrb	r3, [r3, #0]
 8007daa:	f003 030f 	and.w	r3, r3, #15
 8007dae:	2101      	movs	r1, #1
 8007db0:	fa01 f303 	lsl.w	r3, r1, r3
 8007db4:	041b      	lsls	r3, r3, #16
 8007db6:	68f9      	ldr	r1, [r7, #12]
 8007db8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	015a      	lsls	r2, r3, #5
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	4413      	add	r3, r2
 8007dc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d11a      	bne.n	8007e0c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	015a      	lsls	r2, r3, #5
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	4413      	add	r3, r2
 8007dde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	791b      	ldrb	r3, [r3, #4]
 8007df0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007df2:	430b      	orrs	r3, r1
 8007df4:	4313      	orrs	r3, r2
 8007df6:	68ba      	ldr	r2, [r7, #8]
 8007df8:	0151      	lsls	r1, r2, #5
 8007dfa:	68fa      	ldr	r2, [r7, #12]
 8007dfc:	440a      	add	r2, r1
 8007dfe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e0a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007e0c:	2300      	movs	r3, #0
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3714      	adds	r7, #20
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr
	...

08007e1c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b085      	sub	sp, #20
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	785b      	ldrb	r3, [r3, #1]
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d161      	bne.n	8007efc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	015a      	lsls	r2, r3, #5
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	4413      	add	r3, r2
 8007e40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e4a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e4e:	d11f      	bne.n	8007e90 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	015a      	lsls	r2, r3, #5
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	4413      	add	r3, r2
 8007e58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	68ba      	ldr	r2, [r7, #8]
 8007e60:	0151      	lsls	r1, r2, #5
 8007e62:	68fa      	ldr	r2, [r7, #12]
 8007e64:	440a      	add	r2, r1
 8007e66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e6a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007e6e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	015a      	lsls	r2, r3, #5
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	4413      	add	r3, r2
 8007e78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	68ba      	ldr	r2, [r7, #8]
 8007e80:	0151      	lsls	r1, r2, #5
 8007e82:	68fa      	ldr	r2, [r7, #12]
 8007e84:	440a      	add	r2, r1
 8007e86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e8a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007e8e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	f003 030f 	and.w	r3, r3, #15
 8007ea0:	2101      	movs	r1, #1
 8007ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	43db      	mvns	r3, r3
 8007eaa:	68f9      	ldr	r1, [r7, #12]
 8007eac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007eb0:	4013      	ands	r3, r2
 8007eb2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007eba:	69da      	ldr	r2, [r3, #28]
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	781b      	ldrb	r3, [r3, #0]
 8007ec0:	f003 030f 	and.w	r3, r3, #15
 8007ec4:	2101      	movs	r1, #1
 8007ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	43db      	mvns	r3, r3
 8007ece:	68f9      	ldr	r1, [r7, #12]
 8007ed0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007ed4:	4013      	ands	r3, r2
 8007ed6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	015a      	lsls	r2, r3, #5
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	4413      	add	r3, r2
 8007ee0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	0159      	lsls	r1, r3, #5
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	440b      	add	r3, r1
 8007eee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ef2:	4619      	mov	r1, r3
 8007ef4:	4b35      	ldr	r3, [pc, #212]	@ (8007fcc <USB_DeactivateEndpoint+0x1b0>)
 8007ef6:	4013      	ands	r3, r2
 8007ef8:	600b      	str	r3, [r1, #0]
 8007efa:	e060      	b.n	8007fbe <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	015a      	lsls	r2, r3, #5
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	4413      	add	r3, r2
 8007f04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007f0e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f12:	d11f      	bne.n	8007f54 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	015a      	lsls	r2, r3, #5
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	4413      	add	r3, r2
 8007f1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	68ba      	ldr	r2, [r7, #8]
 8007f24:	0151      	lsls	r1, r2, #5
 8007f26:	68fa      	ldr	r2, [r7, #12]
 8007f28:	440a      	add	r2, r1
 8007f2a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f2e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007f32:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	015a      	lsls	r2, r3, #5
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	4413      	add	r3, r2
 8007f3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	68ba      	ldr	r2, [r7, #8]
 8007f44:	0151      	lsls	r1, r2, #5
 8007f46:	68fa      	ldr	r2, [r7, #12]
 8007f48:	440a      	add	r2, r1
 8007f4a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f4e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007f52:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	781b      	ldrb	r3, [r3, #0]
 8007f60:	f003 030f 	and.w	r3, r3, #15
 8007f64:	2101      	movs	r1, #1
 8007f66:	fa01 f303 	lsl.w	r3, r1, r3
 8007f6a:	041b      	lsls	r3, r3, #16
 8007f6c:	43db      	mvns	r3, r3
 8007f6e:	68f9      	ldr	r1, [r7, #12]
 8007f70:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007f74:	4013      	ands	r3, r2
 8007f76:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f7e:	69da      	ldr	r2, [r3, #28]
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	781b      	ldrb	r3, [r3, #0]
 8007f84:	f003 030f 	and.w	r3, r3, #15
 8007f88:	2101      	movs	r1, #1
 8007f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8007f8e:	041b      	lsls	r3, r3, #16
 8007f90:	43db      	mvns	r3, r3
 8007f92:	68f9      	ldr	r1, [r7, #12]
 8007f94:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007f98:	4013      	ands	r3, r2
 8007f9a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	015a      	lsls	r2, r3, #5
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	4413      	add	r3, r2
 8007fa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	0159      	lsls	r1, r3, #5
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	440b      	add	r3, r1
 8007fb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	4b05      	ldr	r3, [pc, #20]	@ (8007fd0 <USB_DeactivateEndpoint+0x1b4>)
 8007fba:	4013      	ands	r3, r2
 8007fbc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007fbe:	2300      	movs	r3, #0
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3714      	adds	r7, #20
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr
 8007fcc:	ec337800 	.word	0xec337800
 8007fd0:	eff37800 	.word	0xeff37800

08007fd4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b08a      	sub	sp, #40	@ 0x28
 8007fd8:	af02      	add	r7, sp, #8
 8007fda:	60f8      	str	r0, [r7, #12]
 8007fdc:	60b9      	str	r1, [r7, #8]
 8007fde:	4613      	mov	r3, r2
 8007fe0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	781b      	ldrb	r3, [r3, #0]
 8007fea:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	785b      	ldrb	r3, [r3, #1]
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	f040 817f 	bne.w	80082f4 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	691b      	ldr	r3, [r3, #16]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d132      	bne.n	8008064 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007ffe:	69bb      	ldr	r3, [r7, #24]
 8008000:	015a      	lsls	r2, r3, #5
 8008002:	69fb      	ldr	r3, [r7, #28]
 8008004:	4413      	add	r3, r2
 8008006:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800800a:	691b      	ldr	r3, [r3, #16]
 800800c:	69ba      	ldr	r2, [r7, #24]
 800800e:	0151      	lsls	r1, r2, #5
 8008010:	69fa      	ldr	r2, [r7, #28]
 8008012:	440a      	add	r2, r1
 8008014:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008018:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800801c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008020:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008022:	69bb      	ldr	r3, [r7, #24]
 8008024:	015a      	lsls	r2, r3, #5
 8008026:	69fb      	ldr	r3, [r7, #28]
 8008028:	4413      	add	r3, r2
 800802a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800802e:	691b      	ldr	r3, [r3, #16]
 8008030:	69ba      	ldr	r2, [r7, #24]
 8008032:	0151      	lsls	r1, r2, #5
 8008034:	69fa      	ldr	r2, [r7, #28]
 8008036:	440a      	add	r2, r1
 8008038:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800803c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008040:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008042:	69bb      	ldr	r3, [r7, #24]
 8008044:	015a      	lsls	r2, r3, #5
 8008046:	69fb      	ldr	r3, [r7, #28]
 8008048:	4413      	add	r3, r2
 800804a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800804e:	691b      	ldr	r3, [r3, #16]
 8008050:	69ba      	ldr	r2, [r7, #24]
 8008052:	0151      	lsls	r1, r2, #5
 8008054:	69fa      	ldr	r2, [r7, #28]
 8008056:	440a      	add	r2, r1
 8008058:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800805c:	0cdb      	lsrs	r3, r3, #19
 800805e:	04db      	lsls	r3, r3, #19
 8008060:	6113      	str	r3, [r2, #16]
 8008062:	e097      	b.n	8008194 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008064:	69bb      	ldr	r3, [r7, #24]
 8008066:	015a      	lsls	r2, r3, #5
 8008068:	69fb      	ldr	r3, [r7, #28]
 800806a:	4413      	add	r3, r2
 800806c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008070:	691b      	ldr	r3, [r3, #16]
 8008072:	69ba      	ldr	r2, [r7, #24]
 8008074:	0151      	lsls	r1, r2, #5
 8008076:	69fa      	ldr	r2, [r7, #28]
 8008078:	440a      	add	r2, r1
 800807a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800807e:	0cdb      	lsrs	r3, r3, #19
 8008080:	04db      	lsls	r3, r3, #19
 8008082:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008084:	69bb      	ldr	r3, [r7, #24]
 8008086:	015a      	lsls	r2, r3, #5
 8008088:	69fb      	ldr	r3, [r7, #28]
 800808a:	4413      	add	r3, r2
 800808c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008090:	691b      	ldr	r3, [r3, #16]
 8008092:	69ba      	ldr	r2, [r7, #24]
 8008094:	0151      	lsls	r1, r2, #5
 8008096:	69fa      	ldr	r2, [r7, #28]
 8008098:	440a      	add	r2, r1
 800809a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800809e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80080a2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80080a6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80080a8:	69bb      	ldr	r3, [r7, #24]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d11a      	bne.n	80080e4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	691a      	ldr	r2, [r3, #16]
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	689b      	ldr	r3, [r3, #8]
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d903      	bls.n	80080c2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	689a      	ldr	r2, [r3, #8]
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80080c2:	69bb      	ldr	r3, [r7, #24]
 80080c4:	015a      	lsls	r2, r3, #5
 80080c6:	69fb      	ldr	r3, [r7, #28]
 80080c8:	4413      	add	r3, r2
 80080ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080ce:	691b      	ldr	r3, [r3, #16]
 80080d0:	69ba      	ldr	r2, [r7, #24]
 80080d2:	0151      	lsls	r1, r2, #5
 80080d4:	69fa      	ldr	r2, [r7, #28]
 80080d6:	440a      	add	r2, r1
 80080d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80080dc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80080e0:	6113      	str	r3, [r2, #16]
 80080e2:	e044      	b.n	800816e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	691a      	ldr	r2, [r3, #16]
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	4413      	add	r3, r2
 80080ee:	1e5a      	subs	r2, r3, #1
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	689b      	ldr	r3, [r3, #8]
 80080f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80080f8:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 80080fa:	69bb      	ldr	r3, [r7, #24]
 80080fc:	015a      	lsls	r2, r3, #5
 80080fe:	69fb      	ldr	r3, [r7, #28]
 8008100:	4413      	add	r3, r2
 8008102:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008106:	691a      	ldr	r2, [r3, #16]
 8008108:	8afb      	ldrh	r3, [r7, #22]
 800810a:	04d9      	lsls	r1, r3, #19
 800810c:	4ba4      	ldr	r3, [pc, #656]	@ (80083a0 <USB_EPStartXfer+0x3cc>)
 800810e:	400b      	ands	r3, r1
 8008110:	69b9      	ldr	r1, [r7, #24]
 8008112:	0148      	lsls	r0, r1, #5
 8008114:	69f9      	ldr	r1, [r7, #28]
 8008116:	4401      	add	r1, r0
 8008118:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800811c:	4313      	orrs	r3, r2
 800811e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	791b      	ldrb	r3, [r3, #4]
 8008124:	2b01      	cmp	r3, #1
 8008126:	d122      	bne.n	800816e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008128:	69bb      	ldr	r3, [r7, #24]
 800812a:	015a      	lsls	r2, r3, #5
 800812c:	69fb      	ldr	r3, [r7, #28]
 800812e:	4413      	add	r3, r2
 8008130:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008134:	691b      	ldr	r3, [r3, #16]
 8008136:	69ba      	ldr	r2, [r7, #24]
 8008138:	0151      	lsls	r1, r2, #5
 800813a:	69fa      	ldr	r2, [r7, #28]
 800813c:	440a      	add	r2, r1
 800813e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008142:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8008146:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8008148:	69bb      	ldr	r3, [r7, #24]
 800814a:	015a      	lsls	r2, r3, #5
 800814c:	69fb      	ldr	r3, [r7, #28]
 800814e:	4413      	add	r3, r2
 8008150:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008154:	691a      	ldr	r2, [r3, #16]
 8008156:	8afb      	ldrh	r3, [r7, #22]
 8008158:	075b      	lsls	r3, r3, #29
 800815a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800815e:	69b9      	ldr	r1, [r7, #24]
 8008160:	0148      	lsls	r0, r1, #5
 8008162:	69f9      	ldr	r1, [r7, #28]
 8008164:	4401      	add	r1, r0
 8008166:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800816a:	4313      	orrs	r3, r2
 800816c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800816e:	69bb      	ldr	r3, [r7, #24]
 8008170:	015a      	lsls	r2, r3, #5
 8008172:	69fb      	ldr	r3, [r7, #28]
 8008174:	4413      	add	r3, r2
 8008176:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800817a:	691a      	ldr	r2, [r3, #16]
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	691b      	ldr	r3, [r3, #16]
 8008180:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008184:	69b9      	ldr	r1, [r7, #24]
 8008186:	0148      	lsls	r0, r1, #5
 8008188:	69f9      	ldr	r1, [r7, #28]
 800818a:	4401      	add	r1, r0
 800818c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008190:	4313      	orrs	r3, r2
 8008192:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008194:	79fb      	ldrb	r3, [r7, #7]
 8008196:	2b01      	cmp	r3, #1
 8008198:	d14b      	bne.n	8008232 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	69db      	ldr	r3, [r3, #28]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d009      	beq.n	80081b6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80081a2:	69bb      	ldr	r3, [r7, #24]
 80081a4:	015a      	lsls	r2, r3, #5
 80081a6:	69fb      	ldr	r3, [r7, #28]
 80081a8:	4413      	add	r3, r2
 80081aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081ae:	461a      	mov	r2, r3
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	69db      	ldr	r3, [r3, #28]
 80081b4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	791b      	ldrb	r3, [r3, #4]
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d128      	bne.n	8008210 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80081be:	69fb      	ldr	r3, [r7, #28]
 80081c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081c4:	689b      	ldr	r3, [r3, #8]
 80081c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d110      	bne.n	80081f0 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80081ce:	69bb      	ldr	r3, [r7, #24]
 80081d0:	015a      	lsls	r2, r3, #5
 80081d2:	69fb      	ldr	r3, [r7, #28]
 80081d4:	4413      	add	r3, r2
 80081d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	69ba      	ldr	r2, [r7, #24]
 80081de:	0151      	lsls	r1, r2, #5
 80081e0:	69fa      	ldr	r2, [r7, #28]
 80081e2:	440a      	add	r2, r1
 80081e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80081e8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80081ec:	6013      	str	r3, [r2, #0]
 80081ee:	e00f      	b.n	8008210 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80081f0:	69bb      	ldr	r3, [r7, #24]
 80081f2:	015a      	lsls	r2, r3, #5
 80081f4:	69fb      	ldr	r3, [r7, #28]
 80081f6:	4413      	add	r3, r2
 80081f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	69ba      	ldr	r2, [r7, #24]
 8008200:	0151      	lsls	r1, r2, #5
 8008202:	69fa      	ldr	r2, [r7, #28]
 8008204:	440a      	add	r2, r1
 8008206:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800820a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800820e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008210:	69bb      	ldr	r3, [r7, #24]
 8008212:	015a      	lsls	r2, r3, #5
 8008214:	69fb      	ldr	r3, [r7, #28]
 8008216:	4413      	add	r3, r2
 8008218:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	69ba      	ldr	r2, [r7, #24]
 8008220:	0151      	lsls	r1, r2, #5
 8008222:	69fa      	ldr	r2, [r7, #28]
 8008224:	440a      	add	r2, r1
 8008226:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800822a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800822e:	6013      	str	r3, [r2, #0]
 8008230:	e166      	b.n	8008500 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008232:	69bb      	ldr	r3, [r7, #24]
 8008234:	015a      	lsls	r2, r3, #5
 8008236:	69fb      	ldr	r3, [r7, #28]
 8008238:	4413      	add	r3, r2
 800823a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	69ba      	ldr	r2, [r7, #24]
 8008242:	0151      	lsls	r1, r2, #5
 8008244:	69fa      	ldr	r2, [r7, #28]
 8008246:	440a      	add	r2, r1
 8008248:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800824c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008250:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	791b      	ldrb	r3, [r3, #4]
 8008256:	2b01      	cmp	r3, #1
 8008258:	d015      	beq.n	8008286 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	691b      	ldr	r3, [r3, #16]
 800825e:	2b00      	cmp	r3, #0
 8008260:	f000 814e 	beq.w	8008500 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008264:	69fb      	ldr	r3, [r7, #28]
 8008266:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800826a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	f003 030f 	and.w	r3, r3, #15
 8008274:	2101      	movs	r1, #1
 8008276:	fa01 f303 	lsl.w	r3, r1, r3
 800827a:	69f9      	ldr	r1, [r7, #28]
 800827c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008280:	4313      	orrs	r3, r2
 8008282:	634b      	str	r3, [r1, #52]	@ 0x34
 8008284:	e13c      	b.n	8008500 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008286:	69fb      	ldr	r3, [r7, #28]
 8008288:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800828c:	689b      	ldr	r3, [r3, #8]
 800828e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008292:	2b00      	cmp	r3, #0
 8008294:	d110      	bne.n	80082b8 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008296:	69bb      	ldr	r3, [r7, #24]
 8008298:	015a      	lsls	r2, r3, #5
 800829a:	69fb      	ldr	r3, [r7, #28]
 800829c:	4413      	add	r3, r2
 800829e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	69ba      	ldr	r2, [r7, #24]
 80082a6:	0151      	lsls	r1, r2, #5
 80082a8:	69fa      	ldr	r2, [r7, #28]
 80082aa:	440a      	add	r2, r1
 80082ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082b0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80082b4:	6013      	str	r3, [r2, #0]
 80082b6:	e00f      	b.n	80082d8 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80082b8:	69bb      	ldr	r3, [r7, #24]
 80082ba:	015a      	lsls	r2, r3, #5
 80082bc:	69fb      	ldr	r3, [r7, #28]
 80082be:	4413      	add	r3, r2
 80082c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	69ba      	ldr	r2, [r7, #24]
 80082c8:	0151      	lsls	r1, r2, #5
 80082ca:	69fa      	ldr	r2, [r7, #28]
 80082cc:	440a      	add	r2, r1
 80082ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80082d6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	68d9      	ldr	r1, [r3, #12]
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	781a      	ldrb	r2, [r3, #0]
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	691b      	ldr	r3, [r3, #16]
 80082e4:	b298      	uxth	r0, r3
 80082e6:	79fb      	ldrb	r3, [r7, #7]
 80082e8:	9300      	str	r3, [sp, #0]
 80082ea:	4603      	mov	r3, r0
 80082ec:	68f8      	ldr	r0, [r7, #12]
 80082ee:	f000 f9b9 	bl	8008664 <USB_WritePacket>
 80082f2:	e105      	b.n	8008500 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80082f4:	69bb      	ldr	r3, [r7, #24]
 80082f6:	015a      	lsls	r2, r3, #5
 80082f8:	69fb      	ldr	r3, [r7, #28]
 80082fa:	4413      	add	r3, r2
 80082fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008300:	691b      	ldr	r3, [r3, #16]
 8008302:	69ba      	ldr	r2, [r7, #24]
 8008304:	0151      	lsls	r1, r2, #5
 8008306:	69fa      	ldr	r2, [r7, #28]
 8008308:	440a      	add	r2, r1
 800830a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800830e:	0cdb      	lsrs	r3, r3, #19
 8008310:	04db      	lsls	r3, r3, #19
 8008312:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008314:	69bb      	ldr	r3, [r7, #24]
 8008316:	015a      	lsls	r2, r3, #5
 8008318:	69fb      	ldr	r3, [r7, #28]
 800831a:	4413      	add	r3, r2
 800831c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008320:	691b      	ldr	r3, [r3, #16]
 8008322:	69ba      	ldr	r2, [r7, #24]
 8008324:	0151      	lsls	r1, r2, #5
 8008326:	69fa      	ldr	r2, [r7, #28]
 8008328:	440a      	add	r2, r1
 800832a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800832e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008332:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008336:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8008338:	69bb      	ldr	r3, [r7, #24]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d132      	bne.n	80083a4 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	691b      	ldr	r3, [r3, #16]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d003      	beq.n	800834e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	689a      	ldr	r2, [r3, #8]
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	689a      	ldr	r2, [r3, #8]
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008356:	69bb      	ldr	r3, [r7, #24]
 8008358:	015a      	lsls	r2, r3, #5
 800835a:	69fb      	ldr	r3, [r7, #28]
 800835c:	4413      	add	r3, r2
 800835e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008362:	691a      	ldr	r2, [r3, #16]
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	6a1b      	ldr	r3, [r3, #32]
 8008368:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800836c:	69b9      	ldr	r1, [r7, #24]
 800836e:	0148      	lsls	r0, r1, #5
 8008370:	69f9      	ldr	r1, [r7, #28]
 8008372:	4401      	add	r1, r0
 8008374:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008378:	4313      	orrs	r3, r2
 800837a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800837c:	69bb      	ldr	r3, [r7, #24]
 800837e:	015a      	lsls	r2, r3, #5
 8008380:	69fb      	ldr	r3, [r7, #28]
 8008382:	4413      	add	r3, r2
 8008384:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008388:	691b      	ldr	r3, [r3, #16]
 800838a:	69ba      	ldr	r2, [r7, #24]
 800838c:	0151      	lsls	r1, r2, #5
 800838e:	69fa      	ldr	r2, [r7, #28]
 8008390:	440a      	add	r2, r1
 8008392:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008396:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800839a:	6113      	str	r3, [r2, #16]
 800839c:	e062      	b.n	8008464 <USB_EPStartXfer+0x490>
 800839e:	bf00      	nop
 80083a0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	691b      	ldr	r3, [r3, #16]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d123      	bne.n	80083f4 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80083ac:	69bb      	ldr	r3, [r7, #24]
 80083ae:	015a      	lsls	r2, r3, #5
 80083b0:	69fb      	ldr	r3, [r7, #28]
 80083b2:	4413      	add	r3, r2
 80083b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083b8:	691a      	ldr	r2, [r3, #16]
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083c2:	69b9      	ldr	r1, [r7, #24]
 80083c4:	0148      	lsls	r0, r1, #5
 80083c6:	69f9      	ldr	r1, [r7, #28]
 80083c8:	4401      	add	r1, r0
 80083ca:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80083ce:	4313      	orrs	r3, r2
 80083d0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80083d2:	69bb      	ldr	r3, [r7, #24]
 80083d4:	015a      	lsls	r2, r3, #5
 80083d6:	69fb      	ldr	r3, [r7, #28]
 80083d8:	4413      	add	r3, r2
 80083da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083de:	691b      	ldr	r3, [r3, #16]
 80083e0:	69ba      	ldr	r2, [r7, #24]
 80083e2:	0151      	lsls	r1, r2, #5
 80083e4:	69fa      	ldr	r2, [r7, #28]
 80083e6:	440a      	add	r2, r1
 80083e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80083ec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80083f0:	6113      	str	r3, [r2, #16]
 80083f2:	e037      	b.n	8008464 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	691a      	ldr	r2, [r3, #16]
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	689b      	ldr	r3, [r3, #8]
 80083fc:	4413      	add	r3, r2
 80083fe:	1e5a      	subs	r2, r3, #1
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	fbb2 f3f3 	udiv	r3, r2, r3
 8008408:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	689b      	ldr	r3, [r3, #8]
 800840e:	8afa      	ldrh	r2, [r7, #22]
 8008410:	fb03 f202 	mul.w	r2, r3, r2
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008418:	69bb      	ldr	r3, [r7, #24]
 800841a:	015a      	lsls	r2, r3, #5
 800841c:	69fb      	ldr	r3, [r7, #28]
 800841e:	4413      	add	r3, r2
 8008420:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008424:	691a      	ldr	r2, [r3, #16]
 8008426:	8afb      	ldrh	r3, [r7, #22]
 8008428:	04d9      	lsls	r1, r3, #19
 800842a:	4b38      	ldr	r3, [pc, #224]	@ (800850c <USB_EPStartXfer+0x538>)
 800842c:	400b      	ands	r3, r1
 800842e:	69b9      	ldr	r1, [r7, #24]
 8008430:	0148      	lsls	r0, r1, #5
 8008432:	69f9      	ldr	r1, [r7, #28]
 8008434:	4401      	add	r1, r0
 8008436:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800843a:	4313      	orrs	r3, r2
 800843c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800843e:	69bb      	ldr	r3, [r7, #24]
 8008440:	015a      	lsls	r2, r3, #5
 8008442:	69fb      	ldr	r3, [r7, #28]
 8008444:	4413      	add	r3, r2
 8008446:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800844a:	691a      	ldr	r2, [r3, #16]
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	6a1b      	ldr	r3, [r3, #32]
 8008450:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008454:	69b9      	ldr	r1, [r7, #24]
 8008456:	0148      	lsls	r0, r1, #5
 8008458:	69f9      	ldr	r1, [r7, #28]
 800845a:	4401      	add	r1, r0
 800845c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008460:	4313      	orrs	r3, r2
 8008462:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008464:	79fb      	ldrb	r3, [r7, #7]
 8008466:	2b01      	cmp	r3, #1
 8008468:	d10d      	bne.n	8008486 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	68db      	ldr	r3, [r3, #12]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d009      	beq.n	8008486 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	68d9      	ldr	r1, [r3, #12]
 8008476:	69bb      	ldr	r3, [r7, #24]
 8008478:	015a      	lsls	r2, r3, #5
 800847a:	69fb      	ldr	r3, [r7, #28]
 800847c:	4413      	add	r3, r2
 800847e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008482:	460a      	mov	r2, r1
 8008484:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	791b      	ldrb	r3, [r3, #4]
 800848a:	2b01      	cmp	r3, #1
 800848c:	d128      	bne.n	80084e0 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800848e:	69fb      	ldr	r3, [r7, #28]
 8008490:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800849a:	2b00      	cmp	r3, #0
 800849c:	d110      	bne.n	80084c0 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800849e:	69bb      	ldr	r3, [r7, #24]
 80084a0:	015a      	lsls	r2, r3, #5
 80084a2:	69fb      	ldr	r3, [r7, #28]
 80084a4:	4413      	add	r3, r2
 80084a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	69ba      	ldr	r2, [r7, #24]
 80084ae:	0151      	lsls	r1, r2, #5
 80084b0:	69fa      	ldr	r2, [r7, #28]
 80084b2:	440a      	add	r2, r1
 80084b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80084b8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80084bc:	6013      	str	r3, [r2, #0]
 80084be:	e00f      	b.n	80084e0 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80084c0:	69bb      	ldr	r3, [r7, #24]
 80084c2:	015a      	lsls	r2, r3, #5
 80084c4:	69fb      	ldr	r3, [r7, #28]
 80084c6:	4413      	add	r3, r2
 80084c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	69ba      	ldr	r2, [r7, #24]
 80084d0:	0151      	lsls	r1, r2, #5
 80084d2:	69fa      	ldr	r2, [r7, #28]
 80084d4:	440a      	add	r2, r1
 80084d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80084da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80084de:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80084e0:	69bb      	ldr	r3, [r7, #24]
 80084e2:	015a      	lsls	r2, r3, #5
 80084e4:	69fb      	ldr	r3, [r7, #28]
 80084e6:	4413      	add	r3, r2
 80084e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	69ba      	ldr	r2, [r7, #24]
 80084f0:	0151      	lsls	r1, r2, #5
 80084f2:	69fa      	ldr	r2, [r7, #28]
 80084f4:	440a      	add	r2, r1
 80084f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80084fa:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80084fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008500:	2300      	movs	r3, #0
}
 8008502:	4618      	mov	r0, r3
 8008504:	3720      	adds	r7, #32
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}
 800850a:	bf00      	nop
 800850c:	1ff80000 	.word	0x1ff80000

08008510 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008510:	b480      	push	{r7}
 8008512:	b087      	sub	sp, #28
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800851a:	2300      	movs	r3, #0
 800851c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800851e:	2300      	movs	r3, #0
 8008520:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	785b      	ldrb	r3, [r3, #1]
 800852a:	2b01      	cmp	r3, #1
 800852c:	d14a      	bne.n	80085c4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	781b      	ldrb	r3, [r3, #0]
 8008532:	015a      	lsls	r2, r3, #5
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	4413      	add	r3, r2
 8008538:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008542:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008546:	f040 8086 	bne.w	8008656 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	781b      	ldrb	r3, [r3, #0]
 800854e:	015a      	lsls	r2, r3, #5
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	4413      	add	r3, r2
 8008554:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	683a      	ldr	r2, [r7, #0]
 800855c:	7812      	ldrb	r2, [r2, #0]
 800855e:	0151      	lsls	r1, r2, #5
 8008560:	693a      	ldr	r2, [r7, #16]
 8008562:	440a      	add	r2, r1
 8008564:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008568:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800856c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	781b      	ldrb	r3, [r3, #0]
 8008572:	015a      	lsls	r2, r3, #5
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	4413      	add	r3, r2
 8008578:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	683a      	ldr	r2, [r7, #0]
 8008580:	7812      	ldrb	r2, [r2, #0]
 8008582:	0151      	lsls	r1, r2, #5
 8008584:	693a      	ldr	r2, [r7, #16]
 8008586:	440a      	add	r2, r1
 8008588:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800858c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008590:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	3301      	adds	r3, #1
 8008596:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800859e:	4293      	cmp	r3, r2
 80085a0:	d902      	bls.n	80085a8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80085a2:	2301      	movs	r3, #1
 80085a4:	75fb      	strb	r3, [r7, #23]
          break;
 80085a6:	e056      	b.n	8008656 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	015a      	lsls	r2, r3, #5
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	4413      	add	r3, r2
 80085b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80085bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80085c0:	d0e7      	beq.n	8008592 <USB_EPStopXfer+0x82>
 80085c2:	e048      	b.n	8008656 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	015a      	lsls	r2, r3, #5
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	4413      	add	r3, r2
 80085ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80085d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80085dc:	d13b      	bne.n	8008656 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	781b      	ldrb	r3, [r3, #0]
 80085e2:	015a      	lsls	r2, r3, #5
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	4413      	add	r3, r2
 80085e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	683a      	ldr	r2, [r7, #0]
 80085f0:	7812      	ldrb	r2, [r2, #0]
 80085f2:	0151      	lsls	r1, r2, #5
 80085f4:	693a      	ldr	r2, [r7, #16]
 80085f6:	440a      	add	r2, r1
 80085f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085fc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008600:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	781b      	ldrb	r3, [r3, #0]
 8008606:	015a      	lsls	r2, r3, #5
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	4413      	add	r3, r2
 800860c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	683a      	ldr	r2, [r7, #0]
 8008614:	7812      	ldrb	r2, [r2, #0]
 8008616:	0151      	lsls	r1, r2, #5
 8008618:	693a      	ldr	r2, [r7, #16]
 800861a:	440a      	add	r2, r1
 800861c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008620:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008624:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	3301      	adds	r3, #1
 800862a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008632:	4293      	cmp	r3, r2
 8008634:	d902      	bls.n	800863c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008636:	2301      	movs	r3, #1
 8008638:	75fb      	strb	r3, [r7, #23]
          break;
 800863a:	e00c      	b.n	8008656 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	781b      	ldrb	r3, [r3, #0]
 8008640:	015a      	lsls	r2, r3, #5
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	4413      	add	r3, r2
 8008646:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008650:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008654:	d0e7      	beq.n	8008626 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008656:	7dfb      	ldrb	r3, [r7, #23]
}
 8008658:	4618      	mov	r0, r3
 800865a:	371c      	adds	r7, #28
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr

08008664 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008664:	b480      	push	{r7}
 8008666:	b089      	sub	sp, #36	@ 0x24
 8008668:	af00      	add	r7, sp, #0
 800866a:	60f8      	str	r0, [r7, #12]
 800866c:	60b9      	str	r1, [r7, #8]
 800866e:	4611      	mov	r1, r2
 8008670:	461a      	mov	r2, r3
 8008672:	460b      	mov	r3, r1
 8008674:	71fb      	strb	r3, [r7, #7]
 8008676:	4613      	mov	r3, r2
 8008678:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008682:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008686:	2b00      	cmp	r3, #0
 8008688:	d123      	bne.n	80086d2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800868a:	88bb      	ldrh	r3, [r7, #4]
 800868c:	3303      	adds	r3, #3
 800868e:	089b      	lsrs	r3, r3, #2
 8008690:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008692:	2300      	movs	r3, #0
 8008694:	61bb      	str	r3, [r7, #24]
 8008696:	e018      	b.n	80086ca <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008698:	79fb      	ldrb	r3, [r7, #7]
 800869a:	031a      	lsls	r2, r3, #12
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	4413      	add	r3, r2
 80086a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80086a4:	461a      	mov	r2, r3
 80086a6:	69fb      	ldr	r3, [r7, #28]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	6013      	str	r3, [r2, #0]
      pSrc++;
 80086ac:	69fb      	ldr	r3, [r7, #28]
 80086ae:	3301      	adds	r3, #1
 80086b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80086b2:	69fb      	ldr	r3, [r7, #28]
 80086b4:	3301      	adds	r3, #1
 80086b6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80086b8:	69fb      	ldr	r3, [r7, #28]
 80086ba:	3301      	adds	r3, #1
 80086bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80086be:	69fb      	ldr	r3, [r7, #28]
 80086c0:	3301      	adds	r3, #1
 80086c2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80086c4:	69bb      	ldr	r3, [r7, #24]
 80086c6:	3301      	adds	r3, #1
 80086c8:	61bb      	str	r3, [r7, #24]
 80086ca:	69ba      	ldr	r2, [r7, #24]
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d3e2      	bcc.n	8008698 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80086d2:	2300      	movs	r3, #0
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3724      	adds	r7, #36	@ 0x24
 80086d8:	46bd      	mov	sp, r7
 80086da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086de:	4770      	bx	lr

080086e0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b08b      	sub	sp, #44	@ 0x2c
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	60f8      	str	r0, [r7, #12]
 80086e8:	60b9      	str	r1, [r7, #8]
 80086ea:	4613      	mov	r3, r2
 80086ec:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80086f6:	88fb      	ldrh	r3, [r7, #6]
 80086f8:	089b      	lsrs	r3, r3, #2
 80086fa:	b29b      	uxth	r3, r3
 80086fc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80086fe:	88fb      	ldrh	r3, [r7, #6]
 8008700:	f003 0303 	and.w	r3, r3, #3
 8008704:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008706:	2300      	movs	r3, #0
 8008708:	623b      	str	r3, [r7, #32]
 800870a:	e014      	b.n	8008736 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800870c:	69bb      	ldr	r3, [r7, #24]
 800870e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008712:	681a      	ldr	r2, [r3, #0]
 8008714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008716:	601a      	str	r2, [r3, #0]
    pDest++;
 8008718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800871a:	3301      	adds	r3, #1
 800871c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800871e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008720:	3301      	adds	r3, #1
 8008722:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008726:	3301      	adds	r3, #1
 8008728:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800872a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800872c:	3301      	adds	r3, #1
 800872e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008730:	6a3b      	ldr	r3, [r7, #32]
 8008732:	3301      	adds	r3, #1
 8008734:	623b      	str	r3, [r7, #32]
 8008736:	6a3a      	ldr	r2, [r7, #32]
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	429a      	cmp	r2, r3
 800873c:	d3e6      	bcc.n	800870c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800873e:	8bfb      	ldrh	r3, [r7, #30]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d01e      	beq.n	8008782 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008744:	2300      	movs	r3, #0
 8008746:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008748:	69bb      	ldr	r3, [r7, #24]
 800874a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800874e:	461a      	mov	r2, r3
 8008750:	f107 0310 	add.w	r3, r7, #16
 8008754:	6812      	ldr	r2, [r2, #0]
 8008756:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008758:	693a      	ldr	r2, [r7, #16]
 800875a:	6a3b      	ldr	r3, [r7, #32]
 800875c:	b2db      	uxtb	r3, r3
 800875e:	00db      	lsls	r3, r3, #3
 8008760:	fa22 f303 	lsr.w	r3, r2, r3
 8008764:	b2da      	uxtb	r2, r3
 8008766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008768:	701a      	strb	r2, [r3, #0]
      i++;
 800876a:	6a3b      	ldr	r3, [r7, #32]
 800876c:	3301      	adds	r3, #1
 800876e:	623b      	str	r3, [r7, #32]
      pDest++;
 8008770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008772:	3301      	adds	r3, #1
 8008774:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008776:	8bfb      	ldrh	r3, [r7, #30]
 8008778:	3b01      	subs	r3, #1
 800877a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800877c:	8bfb      	ldrh	r3, [r7, #30]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d1ea      	bne.n	8008758 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008784:	4618      	mov	r0, r3
 8008786:	372c      	adds	r7, #44	@ 0x2c
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr

08008790 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008790:	b480      	push	{r7}
 8008792:	b085      	sub	sp, #20
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	781b      	ldrb	r3, [r3, #0]
 80087a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	785b      	ldrb	r3, [r3, #1]
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d12c      	bne.n	8008806 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	015a      	lsls	r2, r3, #5
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	4413      	add	r3, r2
 80087b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	db12      	blt.n	80087e4 <USB_EPSetStall+0x54>
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d00f      	beq.n	80087e4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	015a      	lsls	r2, r3, #5
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	4413      	add	r3, r2
 80087cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	68ba      	ldr	r2, [r7, #8]
 80087d4:	0151      	lsls	r1, r2, #5
 80087d6:	68fa      	ldr	r2, [r7, #12]
 80087d8:	440a      	add	r2, r1
 80087da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087de:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80087e2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	015a      	lsls	r2, r3, #5
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	4413      	add	r3, r2
 80087ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	68ba      	ldr	r2, [r7, #8]
 80087f4:	0151      	lsls	r1, r2, #5
 80087f6:	68fa      	ldr	r2, [r7, #12]
 80087f8:	440a      	add	r2, r1
 80087fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087fe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008802:	6013      	str	r3, [r2, #0]
 8008804:	e02b      	b.n	800885e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	015a      	lsls	r2, r3, #5
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	4413      	add	r3, r2
 800880e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	2b00      	cmp	r3, #0
 8008816:	db12      	blt.n	800883e <USB_EPSetStall+0xae>
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d00f      	beq.n	800883e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	015a      	lsls	r2, r3, #5
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	4413      	add	r3, r2
 8008826:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	68ba      	ldr	r2, [r7, #8]
 800882e:	0151      	lsls	r1, r2, #5
 8008830:	68fa      	ldr	r2, [r7, #12]
 8008832:	440a      	add	r2, r1
 8008834:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008838:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800883c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	015a      	lsls	r2, r3, #5
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	4413      	add	r3, r2
 8008846:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	68ba      	ldr	r2, [r7, #8]
 800884e:	0151      	lsls	r1, r2, #5
 8008850:	68fa      	ldr	r2, [r7, #12]
 8008852:	440a      	add	r2, r1
 8008854:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008858:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800885c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800885e:	2300      	movs	r3, #0
}
 8008860:	4618      	mov	r0, r3
 8008862:	3714      	adds	r7, #20
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr

0800886c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800886c:	b480      	push	{r7}
 800886e:	b085      	sub	sp, #20
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	781b      	ldrb	r3, [r3, #0]
 800887e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	785b      	ldrb	r3, [r3, #1]
 8008884:	2b01      	cmp	r3, #1
 8008886:	d128      	bne.n	80088da <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	015a      	lsls	r2, r3, #5
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	4413      	add	r3, r2
 8008890:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	68ba      	ldr	r2, [r7, #8]
 8008898:	0151      	lsls	r1, r2, #5
 800889a:	68fa      	ldr	r2, [r7, #12]
 800889c:	440a      	add	r2, r1
 800889e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80088a2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80088a6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	791b      	ldrb	r3, [r3, #4]
 80088ac:	2b03      	cmp	r3, #3
 80088ae:	d003      	beq.n	80088b8 <USB_EPClearStall+0x4c>
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	791b      	ldrb	r3, [r3, #4]
 80088b4:	2b02      	cmp	r3, #2
 80088b6:	d138      	bne.n	800892a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	015a      	lsls	r2, r3, #5
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	4413      	add	r3, r2
 80088c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	68ba      	ldr	r2, [r7, #8]
 80088c8:	0151      	lsls	r1, r2, #5
 80088ca:	68fa      	ldr	r2, [r7, #12]
 80088cc:	440a      	add	r2, r1
 80088ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80088d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80088d6:	6013      	str	r3, [r2, #0]
 80088d8:	e027      	b.n	800892a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	015a      	lsls	r2, r3, #5
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	4413      	add	r3, r2
 80088e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	68ba      	ldr	r2, [r7, #8]
 80088ea:	0151      	lsls	r1, r2, #5
 80088ec:	68fa      	ldr	r2, [r7, #12]
 80088ee:	440a      	add	r2, r1
 80088f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80088f4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80088f8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	791b      	ldrb	r3, [r3, #4]
 80088fe:	2b03      	cmp	r3, #3
 8008900:	d003      	beq.n	800890a <USB_EPClearStall+0x9e>
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	791b      	ldrb	r3, [r3, #4]
 8008906:	2b02      	cmp	r3, #2
 8008908:	d10f      	bne.n	800892a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	015a      	lsls	r2, r3, #5
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	4413      	add	r3, r2
 8008912:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	68ba      	ldr	r2, [r7, #8]
 800891a:	0151      	lsls	r1, r2, #5
 800891c:	68fa      	ldr	r2, [r7, #12]
 800891e:	440a      	add	r2, r1
 8008920:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008924:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008928:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800892a:	2300      	movs	r3, #0
}
 800892c:	4618      	mov	r0, r3
 800892e:	3714      	adds	r7, #20
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr

08008938 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008938:	b480      	push	{r7}
 800893a:	b085      	sub	sp, #20
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	460b      	mov	r3, r1
 8008942:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	68fa      	ldr	r2, [r7, #12]
 8008952:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008956:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800895a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008962:	681a      	ldr	r2, [r3, #0]
 8008964:	78fb      	ldrb	r3, [r7, #3]
 8008966:	011b      	lsls	r3, r3, #4
 8008968:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800896c:	68f9      	ldr	r1, [r7, #12]
 800896e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008972:	4313      	orrs	r3, r2
 8008974:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008976:	2300      	movs	r3, #0
}
 8008978:	4618      	mov	r0, r3
 800897a:	3714      	adds	r7, #20
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr

08008984 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008984:	b480      	push	{r7}
 8008986:	b085      	sub	sp, #20
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	68fa      	ldr	r2, [r7, #12]
 800899a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800899e:	f023 0303 	bic.w	r3, r3, #3
 80089a2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	68fa      	ldr	r2, [r7, #12]
 80089ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80089b2:	f023 0302 	bic.w	r3, r3, #2
 80089b6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80089b8:	2300      	movs	r3, #0
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3714      	adds	r7, #20
 80089be:	46bd      	mov	sp, r7
 80089c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c4:	4770      	bx	lr

080089c6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80089c6:	b480      	push	{r7}
 80089c8:	b085      	sub	sp, #20
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	68fa      	ldr	r2, [r7, #12]
 80089dc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80089e0:	f023 0303 	bic.w	r3, r3, #3
 80089e4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	68fa      	ldr	r2, [r7, #12]
 80089f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80089f4:	f043 0302 	orr.w	r3, r3, #2
 80089f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80089fa:	2300      	movs	r3, #0
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3714      	adds	r7, #20
 8008a00:	46bd      	mov	sp, r7
 8008a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a06:	4770      	bx	lr

08008a08 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b085      	sub	sp, #20
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	695b      	ldr	r3, [r3, #20]
 8008a14:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	699b      	ldr	r3, [r3, #24]
 8008a1a:	68fa      	ldr	r2, [r7, #12]
 8008a1c:	4013      	ands	r3, r2
 8008a1e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008a20:	68fb      	ldr	r3, [r7, #12]
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3714      	adds	r7, #20
 8008a26:	46bd      	mov	sp, r7
 8008a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2c:	4770      	bx	lr

08008a2e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008a2e:	b480      	push	{r7}
 8008a30:	b085      	sub	sp, #20
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a40:	699b      	ldr	r3, [r3, #24]
 8008a42:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a4a:	69db      	ldr	r3, [r3, #28]
 8008a4c:	68ba      	ldr	r2, [r7, #8]
 8008a4e:	4013      	ands	r3, r2
 8008a50:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	0c1b      	lsrs	r3, r3, #16
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3714      	adds	r7, #20
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	4770      	bx	lr

08008a62 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008a62:	b480      	push	{r7}
 8008a64:	b085      	sub	sp, #20
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a74:	699b      	ldr	r3, [r3, #24]
 8008a76:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a7e:	69db      	ldr	r3, [r3, #28]
 8008a80:	68ba      	ldr	r2, [r7, #8]
 8008a82:	4013      	ands	r3, r2
 8008a84:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	b29b      	uxth	r3, r3
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3714      	adds	r7, #20
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a94:	4770      	bx	lr

08008a96 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008a96:	b480      	push	{r7}
 8008a98:	b085      	sub	sp, #20
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	6078      	str	r0, [r7, #4]
 8008a9e:	460b      	mov	r3, r1
 8008aa0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008aa6:	78fb      	ldrb	r3, [r7, #3]
 8008aa8:	015a      	lsls	r2, r3, #5
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	4413      	add	r3, r2
 8008aae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ab2:	689b      	ldr	r3, [r3, #8]
 8008ab4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008abc:	695b      	ldr	r3, [r3, #20]
 8008abe:	68ba      	ldr	r2, [r7, #8]
 8008ac0:	4013      	ands	r3, r2
 8008ac2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008ac4:	68bb      	ldr	r3, [r7, #8]
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3714      	adds	r7, #20
 8008aca:	46bd      	mov	sp, r7
 8008acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad0:	4770      	bx	lr

08008ad2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008ad2:	b480      	push	{r7}
 8008ad4:	b087      	sub	sp, #28
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	6078      	str	r0, [r7, #4]
 8008ada:	460b      	mov	r3, r1
 8008adc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ae8:	691b      	ldr	r3, [r3, #16]
 8008aea:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008af2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008af4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008af6:	78fb      	ldrb	r3, [r7, #3]
 8008af8:	f003 030f 	and.w	r3, r3, #15
 8008afc:	68fa      	ldr	r2, [r7, #12]
 8008afe:	fa22 f303 	lsr.w	r3, r2, r3
 8008b02:	01db      	lsls	r3, r3, #7
 8008b04:	b2db      	uxtb	r3, r3
 8008b06:	693a      	ldr	r2, [r7, #16]
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008b0c:	78fb      	ldrb	r3, [r7, #3]
 8008b0e:	015a      	lsls	r2, r3, #5
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	4413      	add	r3, r2
 8008b14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b18:	689b      	ldr	r3, [r3, #8]
 8008b1a:	693a      	ldr	r2, [r7, #16]
 8008b1c:	4013      	ands	r3, r2
 8008b1e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008b20:	68bb      	ldr	r3, [r7, #8]
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	371c      	adds	r7, #28
 8008b26:	46bd      	mov	sp, r7
 8008b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2c:	4770      	bx	lr

08008b2e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008b2e:	b480      	push	{r7}
 8008b30:	b083      	sub	sp, #12
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	695b      	ldr	r3, [r3, #20]
 8008b3a:	f003 0301 	and.w	r3, r3, #1
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	370c      	adds	r7, #12
 8008b42:	46bd      	mov	sp, r7
 8008b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b48:	4770      	bx	lr

08008b4a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008b4a:	b480      	push	{r7}
 8008b4c:	b085      	sub	sp, #20
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	68fa      	ldr	r2, [r7, #12]
 8008b60:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b64:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008b68:	f023 0307 	bic.w	r3, r3, #7
 8008b6c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b74:	685b      	ldr	r3, [r3, #4]
 8008b76:	68fa      	ldr	r2, [r7, #12]
 8008b78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008b7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b80:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008b82:	2300      	movs	r3, #0
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3714      	adds	r7, #20
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8e:	4770      	bx	lr

08008b90 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b087      	sub	sp, #28
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	60f8      	str	r0, [r7, #12]
 8008b98:	460b      	mov	r3, r1
 8008b9a:	607a      	str	r2, [r7, #4]
 8008b9c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	333c      	adds	r3, #60	@ 0x3c
 8008ba6:	3304      	adds	r3, #4
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	4a26      	ldr	r2, [pc, #152]	@ (8008c48 <USB_EP0_OutStart+0xb8>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d90a      	bls.n	8008bca <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008bc0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008bc4:	d101      	bne.n	8008bca <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	e037      	b.n	8008c3a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bdc:	691b      	ldr	r3, [r3, #16]
 8008bde:	697a      	ldr	r2, [r7, #20]
 8008be0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008be4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008be8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bf0:	691b      	ldr	r3, [r3, #16]
 8008bf2:	697a      	ldr	r2, [r7, #20]
 8008bf4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008bf8:	f043 0318 	orr.w	r3, r3, #24
 8008bfc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c04:	691b      	ldr	r3, [r3, #16]
 8008c06:	697a      	ldr	r2, [r7, #20]
 8008c08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c0c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008c10:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008c12:	7afb      	ldrb	r3, [r7, #11]
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	d10f      	bne.n	8008c38 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c1e:	461a      	mov	r2, r3
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	697a      	ldr	r2, [r7, #20]
 8008c2e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c32:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008c36:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008c38:	2300      	movs	r3, #0
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	371c      	adds	r7, #28
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr
 8008c46:	bf00      	nop
 8008c48:	4f54300a 	.word	0x4f54300a

08008c4c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b085      	sub	sp, #20
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008c54:	2300      	movs	r3, #0
 8008c56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	3301      	adds	r3, #1
 8008c5c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008c64:	d901      	bls.n	8008c6a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008c66:	2303      	movs	r3, #3
 8008c68:	e022      	b.n	8008cb0 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	691b      	ldr	r3, [r3, #16]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	daf2      	bge.n	8008c58 <USB_CoreReset+0xc>

  count = 10U;
 8008c72:	230a      	movs	r3, #10
 8008c74:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8008c76:	e002      	b.n	8008c7e <USB_CoreReset+0x32>
  {
    count--;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	3b01      	subs	r3, #1
 8008c7c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d1f9      	bne.n	8008c78 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	691b      	ldr	r3, [r3, #16]
 8008c88:	f043 0201 	orr.w	r2, r3, #1
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	3301      	adds	r3, #1
 8008c94:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008c9c:	d901      	bls.n	8008ca2 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8008c9e:	2303      	movs	r3, #3
 8008ca0:	e006      	b.n	8008cb0 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	691b      	ldr	r3, [r3, #16]
 8008ca6:	f003 0301 	and.w	r3, r3, #1
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	d0f0      	beq.n	8008c90 <USB_CoreReset+0x44>

  return HAL_OK;
 8008cae:	2300      	movs	r3, #0
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3714      	adds	r7, #20
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cba:	4770      	bx	lr

08008cbc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  USBD_COMPOSITE_Mount_Class();
 8008cc0:	f001 fbfa 	bl	800a4b8 <USBD_COMPOSITE_Mount_Class>
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_HS) != USBD_OK)
  {
    Error_Handler();
  }
#else
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_FS) != USBD_OK)
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	4917      	ldr	r1, [pc, #92]	@ (8008d24 <MX_USB_DEVICE_Init+0x68>)
 8008cc8:	4817      	ldr	r0, [pc, #92]	@ (8008d28 <MX_USB_DEVICE_Init+0x6c>)
 8008cca:	f002 f819 	bl	800ad00 <USBD_Init>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d001      	beq.n	8008cd8 <MX_USB_DEVICE_Init+0x1c>
  {
    Error_Handler();
 8008cd4:	f7f7 ff74 	bl	8000bc0 <Error_Handler>
  }
#endif
  if (USBD_RegisterClass(&hUsbDevice, &USBD_COMPOSITE) != USBD_OK)
 8008cd8:	4914      	ldr	r1, [pc, #80]	@ (8008d2c <MX_USB_DEVICE_Init+0x70>)
 8008cda:	4813      	ldr	r0, [pc, #76]	@ (8008d28 <MX_USB_DEVICE_Init+0x6c>)
 8008cdc:	f002 f83c 	bl	800ad58 <USBD_RegisterClass>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d001      	beq.n	8008cea <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8008ce6:	f7f7 ff6b 	bl	8000bc0 <Error_Handler>
  }
#if (USBD_USE_CDC_ACM == 1)
  if (USBD_CDC_ACM_RegisterInterface(&hUsbDevice, &USBD_CDC_ACM_fops) != USBD_OK)
 8008cea:	4911      	ldr	r1, [pc, #68]	@ (8008d30 <MX_USB_DEVICE_Init+0x74>)
 8008cec:	480e      	ldr	r0, [pc, #56]	@ (8008d28 <MX_USB_DEVICE_Init+0x6c>)
 8008cee:	f001 f8bd 	bl	8009e6c <USBD_CDC_ACM_RegisterInterface>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d001      	beq.n	8008cfc <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8008cf8:	f7f7 ff62 	bl	8000bc0 <Error_Handler>
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDevice, &USBD_CustomHID_fops) != USBD_OK)
 8008cfc:	490d      	ldr	r1, [pc, #52]	@ (8008d34 <MX_USB_DEVICE_Init+0x78>)
 8008cfe:	480a      	ldr	r0, [pc, #40]	@ (8008d28 <MX_USB_DEVICE_Init+0x6c>)
 8008d00:	f001 ffb0 	bl	800ac64 <USBD_CUSTOM_HID_RegisterInterface>
 8008d04:	4603      	mov	r3, r0
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d001      	beq.n	8008d0e <MX_USB_DEVICE_Init+0x52>
  {
    Error_Handler();
 8008d0a:	f7f7 ff59 	bl	8000bc0 <Error_Handler>
  if (USBD_PRNT_RegisterInterface(&hUsbDevice, &USBD_PRNT_fops) != USBD_OK)
  {
    Error_Handler();
  }
#endif
  if (USBD_Start(&hUsbDevice) != USBD_OK)
 8008d0e:	4806      	ldr	r0, [pc, #24]	@ (8008d28 <MX_USB_DEVICE_Init+0x6c>)
 8008d10:	f002 f860 	bl	800add4 <USBD_Start>
 8008d14:	4603      	mov	r3, r0
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d001      	beq.n	8008d1e <MX_USB_DEVICE_Init+0x62>
  {
    Error_Handler();
 8008d1a:	f7f7 ff51 	bl	8000bc0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008d1e:	bf00      	nop
 8008d20:	bd80      	pop	{r7, pc}
 8008d22:	bf00      	nop
 8008d24:	2000002c 	.word	0x2000002c
 8008d28:	20008b5c 	.word	0x20008b5c
 8008d2c:	20000190 	.word	0x20000190
 8008d30:	20000018 	.word	0x20000018
 8008d34:	200000a0 	.word	0x200000a0

08008d38 <CDC_CH_To_UART_Handle>:
static int8_t CDC_Receive(uint8_t cdc_ch, uint8_t *pbuf, uint32_t *Len);
static int8_t CDC_TransmitCplt(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len, uint8_t epnum);

/* USER CODE BEGIN PRIVATE_FUNCTIONS_DECLARATION */
UART_HandleTypeDef *CDC_CH_To_UART_Handle(uint8_t cdc_ch)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b085      	sub	sp, #20
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	4603      	mov	r3, r0
 8008d40:	71fb      	strb	r3, [r7, #7]
  UART_HandleTypeDef *handle = NULL;
 8008d42:	2300      	movs	r3, #0
 8008d44:	60fb      	str	r3, [r7, #12]

  if (cdc_ch == 0)
 8008d46:	79fb      	ldrb	r3, [r7, #7]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d101      	bne.n	8008d50 <CDC_CH_To_UART_Handle+0x18>
  {
    handle = &huart5;
 8008d4c:	4b04      	ldr	r3, [pc, #16]	@ (8008d60 <CDC_CH_To_UART_Handle+0x28>)
 8008d4e:	60fb      	str	r3, [r7, #12]
  else if (cdc_ch == 2)
  {
    handle = &huart3;
  }
#endif
  return handle;
 8008d50:	68fb      	ldr	r3, [r7, #12]
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3714      	adds	r7, #20
 8008d56:	46bd      	mov	sp, r7
 8008d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5c:	4770      	bx	lr
 8008d5e:	bf00      	nop
 8008d60:	20004520 	.word	0x20004520

08008d64 <UART_Handle_TO_CDC_CH>:

uint8_t UART_Handle_TO_CDC_CH(UART_HandleTypeDef *handle)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b085      	sub	sp, #20
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  uint8_t cdc_ch = 0;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	73fb      	strb	r3, [r7, #15]

  if (handle == &huart5)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	4a06      	ldr	r2, [pc, #24]	@ (8008d8c <UART_Handle_TO_CDC_CH+0x28>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d101      	bne.n	8008d7c <UART_Handle_TO_CDC_CH+0x18>
  {
    cdc_ch = 0;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	73fb      	strb	r3, [r7, #15]
  else if (handle == &huart3)
  {
    cdc_ch = 2;
  }
#endif
  return cdc_ch;
 8008d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3714      	adds	r7, #20
 8008d82:	46bd      	mov	sp, r7
 8008d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d88:	4770      	bx	lr
 8008d8a:	bf00      	nop
 8008d8c:	20004520 	.word	0x20004520

08008d90 <Change_UART_Setting>:
//
void Change_UART_Setting(uint8_t cdc_ch)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b086      	sub	sp, #24
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	4603      	mov	r3, r0
 8008d98:	71fb      	strb	r3, [r7, #7]
  UART_HandleTypeDef *handle = CDC_CH_To_UART_Handle(cdc_ch);
 8008d9a:	79fb      	ldrb	r3, [r7, #7]
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f7ff ffcb 	bl	8008d38 <CDC_CH_To_UART_Handle>
 8008da2:	6178      	str	r0, [r7, #20]

  if (HAL_UART_DeInit(handle) != HAL_OK)
 8008da4:	6978      	ldr	r0, [r7, #20]
 8008da6:	f7fd fbf7 	bl	8006598 <HAL_UART_DeInit>
 8008daa:	4603      	mov	r3, r0
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d001      	beq.n	8008db4 <Change_UART_Setting+0x24>
  {
    /* Initialization Error */
    Error_Handler();
 8008db0:	f7f7 ff06 	bl	8000bc0 <Error_Handler>
  }
  /* set the Stop bit */
  switch (Line_Coding[cdc_ch].format)
 8008db4:	79fb      	ldrb	r3, [r7, #7]
 8008db6:	4a5c      	ldr	r2, [pc, #368]	@ (8008f28 <Change_UART_Setting+0x198>)
 8008db8:	00db      	lsls	r3, r3, #3
 8008dba:	4413      	add	r3, r2
 8008dbc:	791b      	ldrb	r3, [r3, #4]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d002      	beq.n	8008dc8 <Change_UART_Setting+0x38>
 8008dc2:	2b02      	cmp	r3, #2
 8008dc4:	d004      	beq.n	8008dd0 <Change_UART_Setting+0x40>
 8008dc6:	e008      	b.n	8008dda <Change_UART_Setting+0x4a>
  {
  case 0:
    handle->Init.StopBits = UART_STOPBITS_1;
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	60da      	str	r2, [r3, #12]
    break;
 8008dce:	e008      	b.n	8008de2 <Change_UART_Setting+0x52>
  case 2:
    handle->Init.StopBits = UART_STOPBITS_2;
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008dd6:	60da      	str	r2, [r3, #12]
    break;
 8008dd8:	e003      	b.n	8008de2 <Change_UART_Setting+0x52>
  default:
    handle->Init.StopBits = UART_STOPBITS_1;
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	60da      	str	r2, [r3, #12]
    break;
 8008de0:	bf00      	nop
  }

  /* set the parity bit*/
  switch (Line_Coding[cdc_ch].paritytype)
 8008de2:	79fb      	ldrb	r3, [r7, #7]
 8008de4:	4a50      	ldr	r2, [pc, #320]	@ (8008f28 <Change_UART_Setting+0x198>)
 8008de6:	00db      	lsls	r3, r3, #3
 8008de8:	4413      	add	r3, r2
 8008dea:	795b      	ldrb	r3, [r3, #5]
 8008dec:	2b02      	cmp	r3, #2
 8008dee:	d00f      	beq.n	8008e10 <Change_UART_Setting+0x80>
 8008df0:	2b02      	cmp	r3, #2
 8008df2:	dc12      	bgt.n	8008e1a <Change_UART_Setting+0x8a>
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d002      	beq.n	8008dfe <Change_UART_Setting+0x6e>
 8008df8:	2b01      	cmp	r3, #1
 8008dfa:	d004      	beq.n	8008e06 <Change_UART_Setting+0x76>
 8008dfc:	e00d      	b.n	8008e1a <Change_UART_Setting+0x8a>
  {
  case 0:
    handle->Init.Parity = UART_PARITY_NONE;
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	2200      	movs	r2, #0
 8008e02:	611a      	str	r2, [r3, #16]
    break;
 8008e04:	e00d      	b.n	8008e22 <Change_UART_Setting+0x92>
  case 1:
    handle->Init.Parity = UART_PARITY_ODD;
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8008e0c:	611a      	str	r2, [r3, #16]
    break;
 8008e0e:	e008      	b.n	8008e22 <Change_UART_Setting+0x92>
  case 2:
    handle->Init.Parity = UART_PARITY_EVEN;
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008e16:	611a      	str	r2, [r3, #16]
    break;
 8008e18:	e003      	b.n	8008e22 <Change_UART_Setting+0x92>
  default:
    handle->Init.Parity = UART_PARITY_NONE;
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	611a      	str	r2, [r3, #16]
    break;
 8008e20:	bf00      	nop
  }

  /*set the data type : only 8bits and 9bits is supported */
  switch (Line_Coding[cdc_ch].datatype)
 8008e22:	79fb      	ldrb	r3, [r7, #7]
 8008e24:	4a40      	ldr	r2, [pc, #256]	@ (8008f28 <Change_UART_Setting+0x198>)
 8008e26:	00db      	lsls	r3, r3, #3
 8008e28:	4413      	add	r3, r2
 8008e2a:	799b      	ldrb	r3, [r3, #6]
 8008e2c:	2b07      	cmp	r3, #7
 8008e2e:	d002      	beq.n	8008e36 <Change_UART_Setting+0xa6>
 8008e30:	2b08      	cmp	r3, #8
 8008e32:	d004      	beq.n	8008e3e <Change_UART_Setting+0xae>
 8008e34:	e010      	b.n	8008e58 <Change_UART_Setting+0xc8>
  {
  case 0x07:
    /* With this configuration a parity (Even or Odd) must be set */
    handle->Init.WordLength = UART_WORDLENGTH_8B;
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	609a      	str	r2, [r3, #8]
    break;
 8008e3c:	e010      	b.n	8008e60 <Change_UART_Setting+0xd0>
  case 0x08:
    if (handle->Init.Parity == UART_PARITY_NONE)
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	691b      	ldr	r3, [r3, #16]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d103      	bne.n	8008e4e <Change_UART_Setting+0xbe>
    {
      handle->Init.WordLength = UART_WORDLENGTH_8B;
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	609a      	str	r2, [r3, #8]
    else
    {
      handle->Init.WordLength = UART_WORDLENGTH_9B;
    }

    break;
 8008e4c:	e008      	b.n	8008e60 <Change_UART_Setting+0xd0>
      handle->Init.WordLength = UART_WORDLENGTH_9B;
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8008e54:	609a      	str	r2, [r3, #8]
    break;
 8008e56:	e003      	b.n	8008e60 <Change_UART_Setting+0xd0>
  default:
    handle->Init.WordLength = UART_WORDLENGTH_8B;
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	609a      	str	r2, [r3, #8]
    break;
 8008e5e:	bf00      	nop
  }

  if (Line_Coding[cdc_ch].bitrate == 0)
 8008e60:	79fb      	ldrb	r3, [r7, #7]
 8008e62:	4a31      	ldr	r2, [pc, #196]	@ (8008f28 <Change_UART_Setting+0x198>)
 8008e64:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d105      	bne.n	8008e78 <Change_UART_Setting+0xe8>
  {
    Line_Coding[cdc_ch].bitrate = 115200;
 8008e6c:	79fb      	ldrb	r3, [r7, #7]
 8008e6e:	4a2e      	ldr	r2, [pc, #184]	@ (8008f28 <Change_UART_Setting+0x198>)
 8008e70:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8008e74:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
  }

  handle->Init.BaudRate = Line_Coding[cdc_ch].bitrate;
 8008e78:	79fb      	ldrb	r3, [r7, #7]
 8008e7a:	4a2b      	ldr	r2, [pc, #172]	@ (8008f28 <Change_UART_Setting+0x198>)
 8008e7c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	605a      	str	r2, [r3, #4]
  handle->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	2200      	movs	r2, #0
 8008e88:	619a      	str	r2, [r3, #24]
  handle->Init.Mode = UART_MODE_TX_RX;
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	220c      	movs	r2, #12
 8008e8e:	615a      	str	r2, [r3, #20]
  handle->Init.OverSampling = UART_OVERSAMPLING_16;
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	2200      	movs	r2, #0
 8008e94:	61da      	str	r2, [r3, #28]

  if (HAL_UART_Init(handle) != HAL_OK)
 8008e96:	6978      	ldr	r0, [r7, #20]
 8008e98:	f7fd fb2e 	bl	80064f8 <HAL_UART_Init>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d001      	beq.n	8008ea6 <Change_UART_Setting+0x116>
  {
    /* Initialization Error */
    Error_Handler();
 8008ea2:	f7f7 fe8d 	bl	8000bc0 <Error_Handler>
  }

  /** rx for uart and tx buffer of usb */
  if (HAL_UART_Receive_IT(handle, TX_Buffer[cdc_ch], 1) != HAL_OK)
 8008ea6:	79fb      	ldrb	r3, [r7, #7]
 8008ea8:	019b      	lsls	r3, r3, #6
 8008eaa:	4a20      	ldr	r2, [pc, #128]	@ (8008f2c <Change_UART_Setting+0x19c>)
 8008eac:	4413      	add	r3, r2
 8008eae:	2201      	movs	r2, #1
 8008eb0:	4619      	mov	r1, r3
 8008eb2:	6978      	ldr	r0, [r7, #20]
 8008eb4:	f7fd fc2d 	bl	8006712 <HAL_UART_Receive_IT>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d001      	beq.n	8008ec2 <Change_UART_Setting+0x132>
  {
    /* Transfer error in reception process */
    Error_Handler();
 8008ebe:	f7f7 fe7f 	bl	8000bc0 <Error_Handler>
  }
  __HAL_UART_CLEAR_OREFLAG(handle);
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	613b      	str	r3, [r7, #16]
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	613b      	str	r3, [r7, #16]
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	613b      	str	r3, [r7, #16]
 8008ed6:	693b      	ldr	r3, [r7, #16]
  __HAL_UART_CLEAR_NEFLAG(handle);
 8008ed8:	2300      	movs	r3, #0
 8008eda:	60fb      	str	r3, [r7, #12]
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	60fb      	str	r3, [r7, #12]
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	685b      	ldr	r3, [r3, #4]
 8008eea:	60fb      	str	r3, [r7, #12]
 8008eec:	68fb      	ldr	r3, [r7, #12]
  __HAL_UART_CLEAR_FEFLAG(handle);
 8008eee:	2300      	movs	r3, #0
 8008ef0:	60bb      	str	r3, [r7, #8]
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	60bb      	str	r3, [r7, #8]
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	60bb      	str	r3, [r7, #8]
 8008f02:	68bb      	ldr	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8008f04:	f3bf 8f4f 	dsb	sy
}
 8008f08:	bf00      	nop
  __DSB();  // Ensure instruction completion
  Write_Index[cdc_ch] = 0;
 8008f0a:	79fb      	ldrb	r3, [r7, #7]
 8008f0c:	4a08      	ldr	r2, [pc, #32]	@ (8008f30 <Change_UART_Setting+0x1a0>)
 8008f0e:	2100      	movs	r1, #0
 8008f10:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  Read_Index[cdc_ch] = 0;
 8008f14:	79fb      	ldrb	r3, [r7, #7]
 8008f16:	4a07      	ldr	r2, [pc, #28]	@ (8008f34 <Change_UART_Setting+0x1a4>)
 8008f18:	2100      	movs	r1, #0
 8008f1a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8008f1e:	bf00      	nop
 8008f20:	3718      	adds	r7, #24
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}
 8008f26:	bf00      	nop
 8008f28:	20008ef8 	.word	0x20008ef8
 8008f2c:	20008eb8 	.word	0x20008eb8
 8008f30:	20008f00 	.word	0x20008f00
 8008f34:	20008f04 	.word	0x20008f04

08008f38 <CDC_Init>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init(uint8_t cdc_ch)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b082      	sub	sp, #8
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	4603      	mov	r3, r0
 8008f40:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */

  /* ##-1- Set Application Buffers */
  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, RX_Buffer[cdc_ch]);
 8008f42:	79fb      	ldrb	r3, [r7, #7]
 8008f44:	019b      	lsls	r3, r3, #6
 8008f46:	4a0d      	ldr	r2, [pc, #52]	@ (8008f7c <CDC_Init+0x44>)
 8008f48:	441a      	add	r2, r3
 8008f4a:	79fb      	ldrb	r3, [r7, #7]
 8008f4c:	490c      	ldr	r1, [pc, #48]	@ (8008f80 <CDC_Init+0x48>)
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f000 ffc6 	bl	8009ee0 <USBD_CDC_SetRxBuffer>

  //  /*##-2- Start the TIM Base generation in interrupt mode ####################*/
  //  /* Start Channel1 */
    if ((HAL_TIM_Base_Start_IT(&htim1) != HAL_OK )||(HAL_TIM_Base_Start_IT(&htim2) != HAL_OK ))
 8008f54:	480b      	ldr	r0, [pc, #44]	@ (8008f84 <CDC_Init+0x4c>)
 8008f56:	f7fc fe81 	bl	8005c5c <HAL_TIM_Base_Start_IT>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d105      	bne.n	8008f6c <CDC_Init+0x34>
 8008f60:	4809      	ldr	r0, [pc, #36]	@ (8008f88 <CDC_Init+0x50>)
 8008f62:	f7fc fe7b 	bl	8005c5c <HAL_TIM_Base_Start_IT>
 8008f66:	4603      	mov	r3, r0
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d001      	beq.n	8008f70 <CDC_Init+0x38>
    {
      /* Starting Error */
    	//HAL_TIM_Base_Stop_IT
      Error_Handler();
 8008f6c:	f7f7 fe28 	bl	8000bc0 <Error_Handler>
    }

  return (USBD_OK);
 8008f70:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3708      	adds	r7, #8
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}
 8008f7a:	bf00      	nop
 8008f7c:	20008e78 	.word	0x20008e78
 8008f80:	20008b5c 	.word	0x20008b5c
 8008f84:	20004400 	.word	0x20004400
 8008f88:	20004448 	.word	0x20004448

08008f8c <CDC_DeInit>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit(uint8_t cdc_ch)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b082      	sub	sp, #8
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	4603      	mov	r3, r0
 8008f94:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  /* DeInitialize the UART peripheral */
    if (HAL_UART_DeInit(CDC_CH_To_UART_Handle(cdc_ch)) != HAL_OK)
 8008f96:	79fb      	ldrb	r3, [r7, #7]
 8008f98:	4618      	mov	r0, r3
 8008f9a:	f7ff fecd 	bl	8008d38 <CDC_CH_To_UART_Handle>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f7fd faf9 	bl	8006598 <HAL_UART_DeInit>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d001      	beq.n	8008fb0 <CDC_DeInit+0x24>
    {
      /* Initialization Error */
      Error_Handler();
 8008fac:	f7f7 fe08 	bl	8000bc0 <Error_Handler>
    }
    if ((HAL_TIM_Base_Stop_IT(&htim1) != HAL_OK )||(HAL_TIM_Base_Stop_IT(&htim2) != HAL_OK ))
 8008fb0:	4809      	ldr	r0, [pc, #36]	@ (8008fd8 <CDC_DeInit+0x4c>)
 8008fb2:	f7fc fec3 	bl	8005d3c <HAL_TIM_Base_Stop_IT>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d105      	bne.n	8008fc8 <CDC_DeInit+0x3c>
 8008fbc:	4807      	ldr	r0, [pc, #28]	@ (8008fdc <CDC_DeInit+0x50>)
 8008fbe:	f7fc febd 	bl	8005d3c <HAL_TIM_Base_Stop_IT>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d001      	beq.n	8008fcc <CDC_DeInit+0x40>
        {
          /* Starting Error */
          Error_Handler();
 8008fc8:	f7f7 fdfa 	bl	8000bc0 <Error_Handler>
        }
  return (USBD_OK);
 8008fcc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3708      	adds	r7, #8
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
 8008fd6:	bf00      	nop
 8008fd8:	20004400 	.word	0x20004400
 8008fdc:	20004448 	.word	0x20004448

08008fe0 <CDC_Control>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control(uint8_t cdc_ch, uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	603a      	str	r2, [r7, #0]
 8008fe8:	461a      	mov	r2, r3
 8008fea:	4603      	mov	r3, r0
 8008fec:	71fb      	strb	r3, [r7, #7]
 8008fee:	460b      	mov	r3, r1
 8008ff0:	71bb      	strb	r3, [r7, #6]
 8008ff2:	4613      	mov	r3, r2
 8008ff4:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd)
 8008ff6:	79bb      	ldrb	r3, [r7, #6]
 8008ff8:	2b23      	cmp	r3, #35	@ 0x23
 8008ffa:	f200 80ba 	bhi.w	8009172 <CDC_Control+0x192>
 8008ffe:	a201      	add	r2, pc, #4	@ (adr r2, 8009004 <CDC_Control+0x24>)
 8009000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009004:	08009173 	.word	0x08009173
 8009008:	08009173 	.word	0x08009173
 800900c:	08009173 	.word	0x08009173
 8009010:	08009173 	.word	0x08009173
 8009014:	08009173 	.word	0x08009173
 8009018:	08009173 	.word	0x08009173
 800901c:	08009173 	.word	0x08009173
 8009020:	08009173 	.word	0x08009173
 8009024:	08009173 	.word	0x08009173
 8009028:	08009173 	.word	0x08009173
 800902c:	08009173 	.word	0x08009173
 8009030:	08009173 	.word	0x08009173
 8009034:	08009173 	.word	0x08009173
 8009038:	08009173 	.word	0x08009173
 800903c:	08009173 	.word	0x08009173
 8009040:	08009173 	.word	0x08009173
 8009044:	08009173 	.word	0x08009173
 8009048:	08009173 	.word	0x08009173
 800904c:	08009173 	.word	0x08009173
 8009050:	08009173 	.word	0x08009173
 8009054:	08009173 	.word	0x08009173
 8009058:	08009173 	.word	0x08009173
 800905c:	08009173 	.word	0x08009173
 8009060:	08009173 	.word	0x08009173
 8009064:	08009173 	.word	0x08009173
 8009068:	08009173 	.word	0x08009173
 800906c:	08009173 	.word	0x08009173
 8009070:	08009173 	.word	0x08009173
 8009074:	08009173 	.word	0x08009173
 8009078:	08009173 	.word	0x08009173
 800907c:	08009173 	.word	0x08009173
 8009080:	08009173 	.word	0x08009173
 8009084:	08009095 	.word	0x08009095
 8009088:	080090fd 	.word	0x080090fd
 800908c:	08009173 	.word	0x08009173
 8009090:	08009173 	.word	0x08009173
    /*                                        3 - Mark                             */
    /*                                        4 - Space                            */
    /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
    /*******************************************************************************/
  case CDC_SET_LINE_CODING:
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	461a      	mov	r2, r3
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	3301      	adds	r3, #1
 800909e:	781b      	ldrb	r3, [r3, #0]
 80090a0:	021b      	lsls	r3, r3, #8
 80090a2:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	3302      	adds	r3, #2
 80090a8:	781b      	ldrb	r3, [r3, #0]
 80090aa:	041b      	lsls	r3, r3, #16
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 80090ac:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	3303      	adds	r3, #3
 80090b2:	781b      	ldrb	r3, [r3, #0]
 80090b4:	061b      	lsls	r3, r3, #24
 80090b6:	431a      	orrs	r2, r3
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 80090b8:	79fb      	ldrb	r3, [r7, #7]
 80090ba:	4611      	mov	r1, r2
 80090bc:	4a30      	ldr	r2, [pc, #192]	@ (8009180 <CDC_Control+0x1a0>)
 80090be:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    Line_Coding[cdc_ch].format = pbuf[4];
 80090c2:	79fb      	ldrb	r3, [r7, #7]
 80090c4:	683a      	ldr	r2, [r7, #0]
 80090c6:	7911      	ldrb	r1, [r2, #4]
 80090c8:	4a2d      	ldr	r2, [pc, #180]	@ (8009180 <CDC_Control+0x1a0>)
 80090ca:	00db      	lsls	r3, r3, #3
 80090cc:	4413      	add	r3, r2
 80090ce:	460a      	mov	r2, r1
 80090d0:	711a      	strb	r2, [r3, #4]
    Line_Coding[cdc_ch].paritytype = pbuf[5];
 80090d2:	79fb      	ldrb	r3, [r7, #7]
 80090d4:	683a      	ldr	r2, [r7, #0]
 80090d6:	7951      	ldrb	r1, [r2, #5]
 80090d8:	4a29      	ldr	r2, [pc, #164]	@ (8009180 <CDC_Control+0x1a0>)
 80090da:	00db      	lsls	r3, r3, #3
 80090dc:	4413      	add	r3, r2
 80090de:	460a      	mov	r2, r1
 80090e0:	715a      	strb	r2, [r3, #5]
    Line_Coding[cdc_ch].datatype = pbuf[6];
 80090e2:	79fb      	ldrb	r3, [r7, #7]
 80090e4:	683a      	ldr	r2, [r7, #0]
 80090e6:	7991      	ldrb	r1, [r2, #6]
 80090e8:	4a25      	ldr	r2, [pc, #148]	@ (8009180 <CDC_Control+0x1a0>)
 80090ea:	00db      	lsls	r3, r3, #3
 80090ec:	4413      	add	r3, r2
 80090ee:	460a      	mov	r2, r1
 80090f0:	719a      	strb	r2, [r3, #6]

    Change_UART_Setting(cdc_ch);
 80090f2:	79fb      	ldrb	r3, [r7, #7]
 80090f4:	4618      	mov	r0, r3
 80090f6:	f7ff fe4b 	bl	8008d90 <Change_UART_Setting>
    break;
 80090fa:	e03b      	b.n	8009174 <CDC_Control+0x194>

  case CDC_GET_LINE_CODING:
    pbuf[0] = (uint8_t)(Line_Coding[cdc_ch].bitrate);
 80090fc:	79fb      	ldrb	r3, [r7, #7]
 80090fe:	4a20      	ldr	r2, [pc, #128]	@ (8009180 <CDC_Control+0x1a0>)
 8009100:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009104:	b2da      	uxtb	r2, r3
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	701a      	strb	r2, [r3, #0]
    pbuf[1] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 8);
 800910a:	79fb      	ldrb	r3, [r7, #7]
 800910c:	4a1c      	ldr	r2, [pc, #112]	@ (8009180 <CDC_Control+0x1a0>)
 800910e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009112:	0a1a      	lsrs	r2, r3, #8
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	3301      	adds	r3, #1
 8009118:	b2d2      	uxtb	r2, r2
 800911a:	701a      	strb	r2, [r3, #0]
    pbuf[2] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 16);
 800911c:	79fb      	ldrb	r3, [r7, #7]
 800911e:	4a18      	ldr	r2, [pc, #96]	@ (8009180 <CDC_Control+0x1a0>)
 8009120:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009124:	0c1a      	lsrs	r2, r3, #16
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	3302      	adds	r3, #2
 800912a:	b2d2      	uxtb	r2, r2
 800912c:	701a      	strb	r2, [r3, #0]
    pbuf[3] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 24);
 800912e:	79fb      	ldrb	r3, [r7, #7]
 8009130:	4a13      	ldr	r2, [pc, #76]	@ (8009180 <CDC_Control+0x1a0>)
 8009132:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009136:	0e1a      	lsrs	r2, r3, #24
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	3303      	adds	r3, #3
 800913c:	b2d2      	uxtb	r2, r2
 800913e:	701a      	strb	r2, [r3, #0]
    pbuf[4] = Line_Coding[cdc_ch].format;
 8009140:	79fb      	ldrb	r3, [r7, #7]
 8009142:	683a      	ldr	r2, [r7, #0]
 8009144:	3204      	adds	r2, #4
 8009146:	490e      	ldr	r1, [pc, #56]	@ (8009180 <CDC_Control+0x1a0>)
 8009148:	00db      	lsls	r3, r3, #3
 800914a:	440b      	add	r3, r1
 800914c:	791b      	ldrb	r3, [r3, #4]
 800914e:	7013      	strb	r3, [r2, #0]
    pbuf[5] = Line_Coding[cdc_ch].paritytype;
 8009150:	79fb      	ldrb	r3, [r7, #7]
 8009152:	683a      	ldr	r2, [r7, #0]
 8009154:	3205      	adds	r2, #5
 8009156:	490a      	ldr	r1, [pc, #40]	@ (8009180 <CDC_Control+0x1a0>)
 8009158:	00db      	lsls	r3, r3, #3
 800915a:	440b      	add	r3, r1
 800915c:	795b      	ldrb	r3, [r3, #5]
 800915e:	7013      	strb	r3, [r2, #0]
    pbuf[6] = Line_Coding[cdc_ch].datatype;
 8009160:	79fb      	ldrb	r3, [r7, #7]
 8009162:	683a      	ldr	r2, [r7, #0]
 8009164:	3206      	adds	r2, #6
 8009166:	4906      	ldr	r1, [pc, #24]	@ (8009180 <CDC_Control+0x1a0>)
 8009168:	00db      	lsls	r3, r3, #3
 800916a:	440b      	add	r3, r1
 800916c:	799b      	ldrb	r3, [r3, #6]
 800916e:	7013      	strb	r3, [r2, #0]
    break;
 8009170:	e000      	b.n	8009174 <CDC_Control+0x194>
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009172:	bf00      	nop
  }

  return (USBD_OK);
 8009174:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009176:	4618      	mov	r0, r3
 8009178:	3708      	adds	r7, #8
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}
 800917e:	bf00      	nop
 8009180:	20008ef8 	.word	0x20008ef8

08009184 <CDC_Receive>:
//  USBD_CDC_ReceivePacket(cdc_ch, &hUsbDevice);
//  return (USBD_OK);
//  /* USER CODE END 6 */
//}
static int8_t CDC_Receive(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len)
{
 8009184:	b5b0      	push	{r4, r5, r7, lr}
 8009186:	b086      	sub	sp, #24
 8009188:	af00      	add	r7, sp, #0
 800918a:	4603      	mov	r3, r0
 800918c:	60b9      	str	r1, [r7, #8]
 800918e:	607a      	str	r2, [r7, #4]
 8009190:	73fb      	strb	r3, [r7, #15]
  for (uint32_t i = 0; i < *Len; i++)
 8009192:	2300      	movs	r3, #0
 8009194:	617b      	str	r3, [r7, #20]
 8009196:	e021      	b.n	80091dc <CDC_Receive+0x58>
  {
    CDC_RX_Buffer[cdc_ch][CDC_RX_WriteIndex[cdc_ch]++] = Buf[i];
 8009198:	68ba      	ldr	r2, [r7, #8]
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	18d0      	adds	r0, r2, r3
 800919e:	7bf9      	ldrb	r1, [r7, #15]
 80091a0:	7bfa      	ldrb	r2, [r7, #15]
 80091a2:	4b19      	ldr	r3, [pc, #100]	@ (8009208 <CDC_Receive+0x84>)
 80091a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091a8:	1c5c      	adds	r4, r3, #1
 80091aa:	4d17      	ldr	r5, [pc, #92]	@ (8009208 <CDC_Receive+0x84>)
 80091ac:	f845 4022 	str.w	r4, [r5, r2, lsl #2]
 80091b0:	7804      	ldrb	r4, [r0, #0]
 80091b2:	4816      	ldr	r0, [pc, #88]	@ (800920c <CDC_Receive+0x88>)
 80091b4:	030a      	lsls	r2, r1, #12
 80091b6:	4402      	add	r2, r0
 80091b8:	4413      	add	r3, r2
 80091ba:	4622      	mov	r2, r4
 80091bc:	701a      	strb	r2, [r3, #0]
    if (CDC_RX_WriteIndex[cdc_ch] >= CDC_RX_BUFFER_SIZE)
 80091be:	7bfb      	ldrb	r3, [r7, #15]
 80091c0:	4a11      	ldr	r2, [pc, #68]	@ (8009208 <CDC_Receive+0x84>)
 80091c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80091ca:	d304      	bcc.n	80091d6 <CDC_Receive+0x52>
      CDC_RX_WriteIndex[cdc_ch] = 0;
 80091cc:	7bfb      	ldrb	r3, [r7, #15]
 80091ce:	4a0e      	ldr	r2, [pc, #56]	@ (8009208 <CDC_Receive+0x84>)
 80091d0:	2100      	movs	r1, #0
 80091d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (uint32_t i = 0; i < *Len; i++)
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	3301      	adds	r3, #1
 80091da:	617b      	str	r3, [r7, #20]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	697a      	ldr	r2, [r7, #20]
 80091e2:	429a      	cmp	r2, r3
 80091e4:	d3d8      	bcc.n	8009198 <CDC_Receive+0x14>
  }

  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, Buf);
 80091e6:	7bfb      	ldrb	r3, [r7, #15]
 80091e8:	68ba      	ldr	r2, [r7, #8]
 80091ea:	4909      	ldr	r1, [pc, #36]	@ (8009210 <CDC_Receive+0x8c>)
 80091ec:	4618      	mov	r0, r3
 80091ee:	f000 fe77 	bl	8009ee0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(cdc_ch, &hUsbDevice);
 80091f2:	7bfb      	ldrb	r3, [r7, #15]
 80091f4:	4906      	ldr	r1, [pc, #24]	@ (8009210 <CDC_Receive+0x8c>)
 80091f6:	4618      	mov	r0, r3
 80091f8:	f000 fed2 	bl	8009fa0 <USBD_CDC_ReceivePacket>
  return USBD_OK;
 80091fc:	2300      	movs	r3, #0
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3718      	adds	r7, #24
 8009202:	46bd      	mov	sp, r7
 8009204:	bdb0      	pop	{r4, r5, r7, pc}
 8009206:	bf00      	nop
 8009208:	20009f08 	.word	0x20009f08
 800920c:	20008f08 	.word	0x20008f08
 8009210:	20008b5c 	.word	0x20008b5c

08009214 <CDC_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009214:	b480      	push	{r7}
 8009216:	b085      	sub	sp, #20
 8009218:	af00      	add	r7, sp, #0
 800921a:	60b9      	str	r1, [r7, #8]
 800921c:	607a      	str	r2, [r7, #4]
 800921e:	461a      	mov	r2, r3
 8009220:	4603      	mov	r3, r0
 8009222:	73fb      	strb	r3, [r7, #15]
 8009224:	4613      	mov	r3, r2
 8009226:	73bb      	strb	r3, [r7, #14]
  return (USBD_OK);
 8009228:	2300      	movs	r3, #0
}
 800922a:	4618      	mov	r0, r3
 800922c:	3714      	adds	r7, #20
 800922e:	46bd      	mov	sp, r7
 8009230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009234:	4770      	bx	lr
	...

08009238 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b084      	sub	sp, #16
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  uint8_t ch = UART_Handle_TO_CDC_CH(huart);
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f7ff fd8f 	bl	8008d64 <UART_Handle_TO_CDC_CH>
 8009246:	4603      	mov	r3, r0
 8009248:	73fb      	strb	r3, [r7, #15]
  if (ch >= NUMBER_OF_CDC) return;
 800924a:	7bfb      	ldrb	r3, [r7, #15]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d11c      	bne.n	800928a <HAL_UART_TxCpltCallback+0x52>

  // Cập nhật ReadIndex sau khi truyền xong
  if (CDC_RX_ReadIndex[ch] > CDC_RX_WriteIndex[ch])
 8009250:	7bfb      	ldrb	r3, [r7, #15]
 8009252:	4a10      	ldr	r2, [pc, #64]	@ (8009294 <HAL_UART_TxCpltCallback+0x5c>)
 8009254:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009258:	7bfb      	ldrb	r3, [r7, #15]
 800925a:	490f      	ldr	r1, [pc, #60]	@ (8009298 <HAL_UART_TxCpltCallback+0x60>)
 800925c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009260:	429a      	cmp	r2, r3
 8009262:	d905      	bls.n	8009270 <HAL_UART_TxCpltCallback+0x38>
  {
    CDC_RX_ReadIndex[ch] = 0;
 8009264:	7bfb      	ldrb	r3, [r7, #15]
 8009266:	4a0b      	ldr	r2, [pc, #44]	@ (8009294 <HAL_UART_TxCpltCallback+0x5c>)
 8009268:	2100      	movs	r1, #0
 800926a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800926e:	e007      	b.n	8009280 <HAL_UART_TxCpltCallback+0x48>
  }
  else
  {
    CDC_RX_ReadIndex[ch] = CDC_RX_WriteIndex[ch];
 8009270:	7bfa      	ldrb	r2, [r7, #15]
 8009272:	7bfb      	ldrb	r3, [r7, #15]
 8009274:	4908      	ldr	r1, [pc, #32]	@ (8009298 <HAL_UART_TxCpltCallback+0x60>)
 8009276:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800927a:	4906      	ldr	r1, [pc, #24]	@ (8009294 <HAL_UART_TxCpltCallback+0x5c>)
 800927c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }

  uart_tx_busy[ch] = 0;
 8009280:	7bfb      	ldrb	r3, [r7, #15]
 8009282:	4a06      	ldr	r2, [pc, #24]	@ (800929c <HAL_UART_TxCpltCallback+0x64>)
 8009284:	2100      	movs	r1, #0
 8009286:	54d1      	strb	r1, [r2, r3]
 8009288:	e000      	b.n	800928c <HAL_UART_TxCpltCallback+0x54>
  if (ch >= NUMBER_OF_CDC) return;
 800928a:	bf00      	nop
}
 800928c:	3710      	adds	r7, #16
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}
 8009292:	bf00      	nop
 8009294:	20009f0c 	.word	0x20009f0c
 8009298:	20009f08 	.word	0x20009f08
 800929c:	20009f10 	.word	0x20009f10

080092a0 <ProcessCDC_RX>:

void ProcessCDC_RX(void) {
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b084      	sub	sp, #16
 80092a4:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < NUMBER_OF_CDC; i++) {
 80092a6:	2300      	movs	r3, #0
 80092a8:	73fb      	strb	r3, [r7, #15]
 80092aa:	e057      	b.n	800935c <ProcessCDC_RX+0xbc>
        if (CDC_RX_ReadIndex[i] != CDC_RX_WriteIndex[i]) {
 80092ac:	7bfb      	ldrb	r3, [r7, #15]
 80092ae:	4a2f      	ldr	r2, [pc, #188]	@ (800936c <ProcessCDC_RX+0xcc>)
 80092b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80092b4:	7bfb      	ldrb	r3, [r7, #15]
 80092b6:	492e      	ldr	r1, [pc, #184]	@ (8009370 <ProcessCDC_RX+0xd0>)
 80092b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80092bc:	429a      	cmp	r2, r3
 80092be:	d04a      	beq.n	8009356 <ProcessCDC_RX+0xb6>
            uint32_t buffptr = CDC_RX_ReadIndex[i];
 80092c0:	7bfb      	ldrb	r3, [r7, #15]
 80092c2:	4a2a      	ldr	r2, [pc, #168]	@ (800936c <ProcessCDC_RX+0xcc>)
 80092c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092c8:	607b      	str	r3, [r7, #4]
            uint32_t buffsize = (CDC_RX_ReadIndex[i] > CDC_RX_WriteIndex[i]) ?
 80092ca:	7bfb      	ldrb	r3, [r7, #15]
 80092cc:	4a27      	ldr	r2, [pc, #156]	@ (800936c <ProcessCDC_RX+0xcc>)
 80092ce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80092d2:	7bfb      	ldrb	r3, [r7, #15]
 80092d4:	4926      	ldr	r1, [pc, #152]	@ (8009370 <ProcessCDC_RX+0xd0>)
 80092d6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                                (CDC_RX_BUFFER_SIZE - CDC_RX_ReadIndex[i]) :
 80092da:	429a      	cmp	r2, r3
 80092dc:	d906      	bls.n	80092ec <ProcessCDC_RX+0x4c>
 80092de:	7bfb      	ldrb	r3, [r7, #15]
 80092e0:	4a22      	ldr	r2, [pc, #136]	@ (800936c <ProcessCDC_RX+0xcc>)
 80092e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092e6:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 80092ea:	e008      	b.n	80092fe <ProcessCDC_RX+0x5e>
                                (CDC_RX_WriteIndex[i] - CDC_RX_ReadIndex[i]);
 80092ec:	7bfb      	ldrb	r3, [r7, #15]
 80092ee:	4a20      	ldr	r2, [pc, #128]	@ (8009370 <ProcessCDC_RX+0xd0>)
 80092f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80092f4:	7bfb      	ldrb	r3, [r7, #15]
 80092f6:	491d      	ldr	r1, [pc, #116]	@ (800936c <ProcessCDC_RX+0xcc>)
 80092f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                                (CDC_RX_BUFFER_SIZE - CDC_RX_ReadIndex[i]) :
 80092fc:	1ad3      	subs	r3, r2, r3
            uint32_t buffsize = (CDC_RX_ReadIndex[i] > CDC_RX_WriteIndex[i]) ?
 80092fe:	60bb      	str	r3, [r7, #8]

            if (buffsize > 64) buffsize = 64;
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	2b40      	cmp	r3, #64	@ 0x40
 8009304:	d901      	bls.n	800930a <ProcessCDC_RX+0x6a>
 8009306:	2340      	movs	r3, #64	@ 0x40
 8009308:	60bb      	str	r3, [r7, #8]

            HAL_UART_Transmit(CDC_CH_To_UART_Handle(i), &CDC_RX_Buffer[i][buffptr], buffsize, HAL_MAX_DELAY);
 800930a:	7bfb      	ldrb	r3, [r7, #15]
 800930c:	4618      	mov	r0, r3
 800930e:	f7ff fd13 	bl	8008d38 <CDC_CH_To_UART_Handle>
 8009312:	7bfb      	ldrb	r3, [r7, #15]
 8009314:	031a      	lsls	r2, r3, #12
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	4413      	add	r3, r2
 800931a:	4a16      	ldr	r2, [pc, #88]	@ (8009374 <ProcessCDC_RX+0xd4>)
 800931c:	1899      	adds	r1, r3, r2
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	b29a      	uxth	r2, r3
 8009322:	f04f 33ff 	mov.w	r3, #4294967295
 8009326:	f7fd f969 	bl	80065fc <HAL_UART_Transmit>

            CDC_RX_ReadIndex[i] += buffsize;
 800932a:	7bfb      	ldrb	r3, [r7, #15]
 800932c:	4a0f      	ldr	r2, [pc, #60]	@ (800936c <ProcessCDC_RX+0xcc>)
 800932e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009332:	7bfb      	ldrb	r3, [r7, #15]
 8009334:	68ba      	ldr	r2, [r7, #8]
 8009336:	440a      	add	r2, r1
 8009338:	490c      	ldr	r1, [pc, #48]	@ (800936c <ProcessCDC_RX+0xcc>)
 800933a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            if (CDC_RX_ReadIndex[i] >= CDC_RX_BUFFER_SIZE)
 800933e:	7bfb      	ldrb	r3, [r7, #15]
 8009340:	4a0a      	ldr	r2, [pc, #40]	@ (800936c <ProcessCDC_RX+0xcc>)
 8009342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009346:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800934a:	d304      	bcc.n	8009356 <ProcessCDC_RX+0xb6>
                CDC_RX_ReadIndex[i] = 0;
 800934c:	7bfb      	ldrb	r3, [r7, #15]
 800934e:	4a07      	ldr	r2, [pc, #28]	@ (800936c <ProcessCDC_RX+0xcc>)
 8009350:	2100      	movs	r1, #0
 8009352:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (uint8_t i = 0; i < NUMBER_OF_CDC; i++) {
 8009356:	7bfb      	ldrb	r3, [r7, #15]
 8009358:	3301      	adds	r3, #1
 800935a:	73fb      	strb	r3, [r7, #15]
 800935c:	7bfb      	ldrb	r3, [r7, #15]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d0a4      	beq.n	80092ac <ProcessCDC_RX+0xc>
        }
    }
}
 8009362:	bf00      	nop
 8009364:	bf00      	nop
 8009366:	3710      	adds	r7, #16
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}
 800936c:	20009f0c 	.word	0x20009f0c
 8009370:	20009f08 	.word	0x20009f08
 8009374:	20008f08 	.word	0x20008f08

08009378 <ProcessCDC_TX>:

void ProcessCDC_TX(void) {
 8009378:	b580      	push	{r7, lr}
 800937a:	b084      	sub	sp, #16
 800937c:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < NUMBER_OF_CDC; i++) {
 800937e:	2300      	movs	r3, #0
 8009380:	73fb      	strb	r3, [r7, #15]
 8009382:	e054      	b.n	800942e <ProcessCDC_TX+0xb6>
        if (Read_Index[i] != Write_Index[i]) {
 8009384:	7bfb      	ldrb	r3, [r7, #15]
 8009386:	4a2e      	ldr	r2, [pc, #184]	@ (8009440 <ProcessCDC_TX+0xc8>)
 8009388:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800938c:	7bfb      	ldrb	r3, [r7, #15]
 800938e:	492d      	ldr	r1, [pc, #180]	@ (8009444 <ProcessCDC_TX+0xcc>)
 8009390:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009394:	429a      	cmp	r2, r3
 8009396:	d047      	beq.n	8009428 <ProcessCDC_TX+0xb0>
            uint32_t buffptr = Read_Index[i];
 8009398:	7bfb      	ldrb	r3, [r7, #15]
 800939a:	4a29      	ldr	r2, [pc, #164]	@ (8009440 <ProcessCDC_TX+0xc8>)
 800939c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093a0:	60bb      	str	r3, [r7, #8]
            uint32_t buffsize = (Read_Index[i] > Write_Index[i]) ?
 80093a2:	7bfb      	ldrb	r3, [r7, #15]
 80093a4:	4a26      	ldr	r2, [pc, #152]	@ (8009440 <ProcessCDC_TX+0xc8>)
 80093a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80093aa:	7bfb      	ldrb	r3, [r7, #15]
 80093ac:	4925      	ldr	r1, [pc, #148]	@ (8009444 <ProcessCDC_TX+0xcc>)
 80093ae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                                (APP_TX_DATA_SIZE - Read_Index[i]) :
 80093b2:	429a      	cmp	r2, r3
 80093b4:	d906      	bls.n	80093c4 <ProcessCDC_TX+0x4c>
 80093b6:	7bfb      	ldrb	r3, [r7, #15]
 80093b8:	4a21      	ldr	r2, [pc, #132]	@ (8009440 <ProcessCDC_TX+0xc8>)
 80093ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093be:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 80093c2:	e008      	b.n	80093d6 <ProcessCDC_TX+0x5e>
                                (Write_Index[i] - Read_Index[i]);
 80093c4:	7bfb      	ldrb	r3, [r7, #15]
 80093c6:	4a1f      	ldr	r2, [pc, #124]	@ (8009444 <ProcessCDC_TX+0xcc>)
 80093c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80093cc:	7bfb      	ldrb	r3, [r7, #15]
 80093ce:	491c      	ldr	r1, [pc, #112]	@ (8009440 <ProcessCDC_TX+0xc8>)
 80093d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                                (APP_TX_DATA_SIZE - Read_Index[i]) :
 80093d4:	1ad3      	subs	r3, r2, r3
            uint32_t buffsize = (Read_Index[i] > Write_Index[i]) ?
 80093d6:	607b      	str	r3, [r7, #4]

            USBD_CDC_SetTxBuffer(i, &hUsbDevice, &TX_Buffer[i][buffptr], buffsize);
 80093d8:	7bfb      	ldrb	r3, [r7, #15]
 80093da:	019a      	lsls	r2, r3, #6
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	4413      	add	r3, r2
 80093e0:	4a19      	ldr	r2, [pc, #100]	@ (8009448 <ProcessCDC_TX+0xd0>)
 80093e2:	441a      	add	r2, r3
 80093e4:	7bf8      	ldrb	r0, [r7, #15]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	4918      	ldr	r1, [pc, #96]	@ (800944c <ProcessCDC_TX+0xd4>)
 80093ea:	f000 fd55 	bl	8009e98 <USBD_CDC_SetTxBuffer>

            if (USBD_CDC_TransmitPacket(i, &hUsbDevice) == USBD_OK) {
 80093ee:	7bfb      	ldrb	r3, [r7, #15]
 80093f0:	4916      	ldr	r1, [pc, #88]	@ (800944c <ProcessCDC_TX+0xd4>)
 80093f2:	4618      	mov	r0, r3
 80093f4:	f000 fd92 	bl	8009f1c <USBD_CDC_TransmitPacket>
 80093f8:	4603      	mov	r3, r0
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d114      	bne.n	8009428 <ProcessCDC_TX+0xb0>
                Read_Index[i] += buffsize;
 80093fe:	7bfb      	ldrb	r3, [r7, #15]
 8009400:	4a0f      	ldr	r2, [pc, #60]	@ (8009440 <ProcessCDC_TX+0xc8>)
 8009402:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009406:	7bfb      	ldrb	r3, [r7, #15]
 8009408:	687a      	ldr	r2, [r7, #4]
 800940a:	440a      	add	r2, r1
 800940c:	490c      	ldr	r1, [pc, #48]	@ (8009440 <ProcessCDC_TX+0xc8>)
 800940e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                if (Read_Index[i] == APP_RX_DATA_SIZE)
 8009412:	7bfb      	ldrb	r3, [r7, #15]
 8009414:	4a0a      	ldr	r2, [pc, #40]	@ (8009440 <ProcessCDC_TX+0xc8>)
 8009416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800941a:	2b40      	cmp	r3, #64	@ 0x40
 800941c:	d104      	bne.n	8009428 <ProcessCDC_TX+0xb0>
                    Read_Index[i] = 0;
 800941e:	7bfb      	ldrb	r3, [r7, #15]
 8009420:	4a07      	ldr	r2, [pc, #28]	@ (8009440 <ProcessCDC_TX+0xc8>)
 8009422:	2100      	movs	r1, #0
 8009424:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (uint8_t i = 0; i < NUMBER_OF_CDC; i++) {
 8009428:	7bfb      	ldrb	r3, [r7, #15]
 800942a:	3301      	adds	r3, #1
 800942c:	73fb      	strb	r3, [r7, #15]
 800942e:	7bfb      	ldrb	r3, [r7, #15]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d0a7      	beq.n	8009384 <ProcessCDC_TX+0xc>
            }
        }
    }
}
 8009434:	bf00      	nop
 8009436:	bf00      	nop
 8009438:	3710      	adds	r7, #16
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}
 800943e:	bf00      	nop
 8009440:	20008f04 	.word	0x20008f04
 8009444:	20008f00 	.word	0x20008f00
 8009448:	20008eb8 	.word	0x20008eb8
 800944c:	20008b5c 	.word	0x20008b5c

08009450 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b082      	sub	sp, #8
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
    if (htim == &htim2)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	4a08      	ldr	r2, [pc, #32]	@ (800947c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d102      	bne.n	8009466 <HAL_TIM_PeriodElapsedCallback+0x16>
        ProcessCDC_RX();
 8009460:	f7ff ff1e 	bl	80092a0 <ProcessCDC_RX>
        ProcessCDC_TX();
    else if(htim == &htim4)
    {
    	//Usb2Can_Tranfer(&g_HIDFrameFIFO_Receive);
    }
}
 8009464:	e005      	b.n	8009472 <HAL_TIM_PeriodElapsedCallback+0x22>
    else if (htim == &htim1)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	4a05      	ldr	r2, [pc, #20]	@ (8009480 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d101      	bne.n	8009472 <HAL_TIM_PeriodElapsedCallback+0x22>
        ProcessCDC_TX();
 800946e:	f7ff ff83 	bl	8009378 <ProcessCDC_TX>
}
 8009472:	bf00      	nop
 8009474:	3708      	adds	r7, #8
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}
 800947a:	bf00      	nop
 800947c:	20004448 	.word	0x20004448
 8009480:	20004400 	.word	0x20004400

08009484 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b084      	sub	sp, #16
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  uint8_t cdc_ch = UART_Handle_TO_CDC_CH(huart);
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f7ff fc69 	bl	8008d64 <UART_Handle_TO_CDC_CH>
 8009492:	4603      	mov	r3, r0
 8009494:	73fb      	strb	r3, [r7, #15]
  //CDC_Transmit(cdc_ch, (TX_Buffer[cdc_ch] + Write_Index[cdc_ch]), 1);
  /* Increment Index for buffer writing */
  Write_Index[cdc_ch]++;
 8009496:	7bfb      	ldrb	r3, [r7, #15]
 8009498:	4a11      	ldr	r2, [pc, #68]	@ (80094e0 <HAL_UART_RxCpltCallback+0x5c>)
 800949a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800949e:	3201      	adds	r2, #1
 80094a0:	490f      	ldr	r1, [pc, #60]	@ (80094e0 <HAL_UART_RxCpltCallback+0x5c>)
 80094a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  /* To avoid buffer overflow */
  if (Write_Index[cdc_ch] == APP_RX_DATA_SIZE)
 80094a6:	7bfb      	ldrb	r3, [r7, #15]
 80094a8:	4a0d      	ldr	r2, [pc, #52]	@ (80094e0 <HAL_UART_RxCpltCallback+0x5c>)
 80094aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80094ae:	2b40      	cmp	r3, #64	@ 0x40
 80094b0:	d104      	bne.n	80094bc <HAL_UART_RxCpltCallback+0x38>
  {
    Write_Index[cdc_ch] = 0;
 80094b2:	7bfb      	ldrb	r3, [r7, #15]
 80094b4:	4a0a      	ldr	r2, [pc, #40]	@ (80094e0 <HAL_UART_RxCpltCallback+0x5c>)
 80094b6:	2100      	movs	r1, #0
 80094b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  }

  /* Start another reception: provide the buffer pointer with offset and the buffer size */
  HAL_UART_Receive_IT(huart, (TX_Buffer[cdc_ch] + Write_Index[cdc_ch]), 1);
 80094bc:	7bfb      	ldrb	r3, [r7, #15]
 80094be:	019b      	lsls	r3, r3, #6
 80094c0:	4a08      	ldr	r2, [pc, #32]	@ (80094e4 <HAL_UART_RxCpltCallback+0x60>)
 80094c2:	441a      	add	r2, r3
 80094c4:	7bfb      	ldrb	r3, [r7, #15]
 80094c6:	4906      	ldr	r1, [pc, #24]	@ (80094e0 <HAL_UART_RxCpltCallback+0x5c>)
 80094c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80094cc:	4413      	add	r3, r2
 80094ce:	2201      	movs	r2, #1
 80094d0:	4619      	mov	r1, r3
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f7fd f91d 	bl	8006712 <HAL_UART_Receive_IT>
}
 80094d8:	bf00      	nop
 80094da:	3710      	adds	r7, #16
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}
 80094e0:	20008f00 	.word	0x20008f00
 80094e4:	20008eb8 	.word	0x20008eb8

080094e8 <USBD_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094e8:	b480      	push	{r7}
 80094ea:	b083      	sub	sp, #12
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	4603      	mov	r3, r0
 80094f0:	6039      	str	r1, [r7, #0]
 80094f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_DeviceDesc);
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	2212      	movs	r2, #18
 80094f8:	801a      	strh	r2, [r3, #0]
  return USBD_DeviceDesc;
 80094fa:	4b03      	ldr	r3, [pc, #12]	@ (8009508 <USBD_DeviceDescriptor+0x20>)
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	370c      	adds	r7, #12
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr
 8009508:	20000048 	.word	0x20000048

0800950c <USBD_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800950c:	b480      	push	{r7}
 800950e:	b083      	sub	sp, #12
 8009510:	af00      	add	r7, sp, #0
 8009512:	4603      	mov	r3, r0
 8009514:	6039      	str	r1, [r7, #0]
 8009516:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	2204      	movs	r2, #4
 800951c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800951e:	4b03      	ldr	r3, [pc, #12]	@ (800952c <USBD_LangIDStrDescriptor+0x20>)
}
 8009520:	4618      	mov	r0, r3
 8009522:	370c      	adds	r7, #12
 8009524:	46bd      	mov	sp, r7
 8009526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952a:	4770      	bx	lr
 800952c:	2000005c 	.word	0x2000005c

08009530 <USBD_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b082      	sub	sp, #8
 8009534:	af00      	add	r7, sp, #0
 8009536:	4603      	mov	r3, r0
 8009538:	6039      	str	r1, [r7, #0]
 800953a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800953c:	79fb      	ldrb	r3, [r7, #7]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d105      	bne.n	800954e <USBD_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009542:	683a      	ldr	r2, [r7, #0]
 8009544:	4907      	ldr	r1, [pc, #28]	@ (8009564 <USBD_ProductStrDescriptor+0x34>)
 8009546:	4808      	ldr	r0, [pc, #32]	@ (8009568 <USBD_ProductStrDescriptor+0x38>)
 8009548:	f002 fc83 	bl	800be52 <USBD_GetString>
 800954c:	e004      	b.n	8009558 <USBD_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800954e:	683a      	ldr	r2, [r7, #0]
 8009550:	4904      	ldr	r1, [pc, #16]	@ (8009564 <USBD_ProductStrDescriptor+0x34>)
 8009552:	4805      	ldr	r0, [pc, #20]	@ (8009568 <USBD_ProductStrDescriptor+0x38>)
 8009554:	f002 fc7d 	bl	800be52 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009558:	4b02      	ldr	r3, [pc, #8]	@ (8009564 <USBD_ProductStrDescriptor+0x34>)
}
 800955a:	4618      	mov	r0, r3
 800955c:	3708      	adds	r7, #8
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}
 8009562:	bf00      	nop
 8009564:	20009f14 	.word	0x20009f14
 8009568:	0800cf54 	.word	0x0800cf54

0800956c <USBD_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b082      	sub	sp, #8
 8009570:	af00      	add	r7, sp, #0
 8009572:	4603      	mov	r3, r0
 8009574:	6039      	str	r1, [r7, #0]
 8009576:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009578:	683a      	ldr	r2, [r7, #0]
 800957a:	4904      	ldr	r1, [pc, #16]	@ (800958c <USBD_ManufacturerStrDescriptor+0x20>)
 800957c:	4804      	ldr	r0, [pc, #16]	@ (8009590 <USBD_ManufacturerStrDescriptor+0x24>)
 800957e:	f002 fc68 	bl	800be52 <USBD_GetString>
  return USBD_StrDesc;
 8009582:	4b02      	ldr	r3, [pc, #8]	@ (800958c <USBD_ManufacturerStrDescriptor+0x20>)
}
 8009584:	4618      	mov	r0, r3
 8009586:	3708      	adds	r7, #8
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}
 800958c:	20009f14 	.word	0x20009f14
 8009590:	0800cf64 	.word	0x0800cf64

08009594 <USBD_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b082      	sub	sp, #8
 8009598:	af00      	add	r7, sp, #0
 800959a:	4603      	mov	r3, r0
 800959c:	6039      	str	r1, [r7, #0]
 800959e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	221a      	movs	r2, #26
 80095a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80095a6:	f000 f843 	bl	8009630 <Get_SerialNum>
  /* USER CODE BEGIN USBD_SerialStrDescriptor */

  /* USER CODE END USBD_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80095aa:	4b02      	ldr	r3, [pc, #8]	@ (80095b4 <USBD_SerialStrDescriptor+0x20>)
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3708      	adds	r7, #8
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}
 80095b4:	20000060 	.word	0x20000060

080095b8 <USBD_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b082      	sub	sp, #8
 80095bc:	af00      	add	r7, sp, #0
 80095be:	4603      	mov	r3, r0
 80095c0:	6039      	str	r1, [r7, #0]
 80095c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80095c4:	79fb      	ldrb	r3, [r7, #7]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d105      	bne.n	80095d6 <USBD_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80095ca:	683a      	ldr	r2, [r7, #0]
 80095cc:	4907      	ldr	r1, [pc, #28]	@ (80095ec <USBD_ConfigStrDescriptor+0x34>)
 80095ce:	4808      	ldr	r0, [pc, #32]	@ (80095f0 <USBD_ConfigStrDescriptor+0x38>)
 80095d0:	f002 fc3f 	bl	800be52 <USBD_GetString>
 80095d4:	e004      	b.n	80095e0 <USBD_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80095d6:	683a      	ldr	r2, [r7, #0]
 80095d8:	4904      	ldr	r1, [pc, #16]	@ (80095ec <USBD_ConfigStrDescriptor+0x34>)
 80095da:	4805      	ldr	r0, [pc, #20]	@ (80095f0 <USBD_ConfigStrDescriptor+0x38>)
 80095dc:	f002 fc39 	bl	800be52 <USBD_GetString>
  }
  return USBD_StrDesc;
 80095e0:	4b02      	ldr	r3, [pc, #8]	@ (80095ec <USBD_ConfigStrDescriptor+0x34>)
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3708      	adds	r7, #8
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}
 80095ea:	bf00      	nop
 80095ec:	20009f14 	.word	0x20009f14
 80095f0:	0800cf6c 	.word	0x0800cf6c

080095f4 <USBD_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b082      	sub	sp, #8
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	4603      	mov	r3, r0
 80095fc:	6039      	str	r1, [r7, #0]
 80095fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009600:	79fb      	ldrb	r3, [r7, #7]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d105      	bne.n	8009612 <USBD_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009606:	683a      	ldr	r2, [r7, #0]
 8009608:	4907      	ldr	r1, [pc, #28]	@ (8009628 <USBD_InterfaceStrDescriptor+0x34>)
 800960a:	4808      	ldr	r0, [pc, #32]	@ (800962c <USBD_InterfaceStrDescriptor+0x38>)
 800960c:	f002 fc21 	bl	800be52 <USBD_GetString>
 8009610:	e004      	b.n	800961c <USBD_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009612:	683a      	ldr	r2, [r7, #0]
 8009614:	4904      	ldr	r1, [pc, #16]	@ (8009628 <USBD_InterfaceStrDescriptor+0x34>)
 8009616:	4805      	ldr	r0, [pc, #20]	@ (800962c <USBD_InterfaceStrDescriptor+0x38>)
 8009618:	f002 fc1b 	bl	800be52 <USBD_GetString>
  }
  return USBD_StrDesc;
 800961c:	4b02      	ldr	r3, [pc, #8]	@ (8009628 <USBD_InterfaceStrDescriptor+0x34>)
}
 800961e:	4618      	mov	r0, r3
 8009620:	3708      	adds	r7, #8
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}
 8009626:	bf00      	nop
 8009628:	20009f14 	.word	0x20009f14
 800962c:	0800cf7c 	.word	0x0800cf7c

08009630 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b084      	sub	sp, #16
 8009634:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009636:	4b0f      	ldr	r3, [pc, #60]	@ (8009674 <Get_SerialNum+0x44>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800963c:	4b0e      	ldr	r3, [pc, #56]	@ (8009678 <Get_SerialNum+0x48>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009642:	4b0e      	ldr	r3, [pc, #56]	@ (800967c <Get_SerialNum+0x4c>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009648:	68fa      	ldr	r2, [r7, #12]
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	4413      	add	r3, r2
 800964e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d009      	beq.n	800966a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009656:	2208      	movs	r2, #8
 8009658:	4909      	ldr	r1, [pc, #36]	@ (8009680 <Get_SerialNum+0x50>)
 800965a:	68f8      	ldr	r0, [r7, #12]
 800965c:	f000 f814 	bl	8009688 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009660:	2204      	movs	r2, #4
 8009662:	4908      	ldr	r1, [pc, #32]	@ (8009684 <Get_SerialNum+0x54>)
 8009664:	68b8      	ldr	r0, [r7, #8]
 8009666:	f000 f80f 	bl	8009688 <IntToUnicode>
  }
}
 800966a:	bf00      	nop
 800966c:	3710      	adds	r7, #16
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}
 8009672:	bf00      	nop
 8009674:	1fff7a10 	.word	0x1fff7a10
 8009678:	1fff7a14 	.word	0x1fff7a14
 800967c:	1fff7a18 	.word	0x1fff7a18
 8009680:	20000062 	.word	0x20000062
 8009684:	20000072 	.word	0x20000072

08009688 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009688:	b480      	push	{r7}
 800968a:	b087      	sub	sp, #28
 800968c:	af00      	add	r7, sp, #0
 800968e:	60f8      	str	r0, [r7, #12]
 8009690:	60b9      	str	r1, [r7, #8]
 8009692:	4613      	mov	r3, r2
 8009694:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009696:	2300      	movs	r3, #0
 8009698:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800969a:	2300      	movs	r3, #0
 800969c:	75fb      	strb	r3, [r7, #23]
 800969e:	e027      	b.n	80096f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	0f1b      	lsrs	r3, r3, #28
 80096a4:	2b09      	cmp	r3, #9
 80096a6:	d80b      	bhi.n	80096c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	0f1b      	lsrs	r3, r3, #28
 80096ac:	b2da      	uxtb	r2, r3
 80096ae:	7dfb      	ldrb	r3, [r7, #23]
 80096b0:	005b      	lsls	r3, r3, #1
 80096b2:	4619      	mov	r1, r3
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	440b      	add	r3, r1
 80096b8:	3230      	adds	r2, #48	@ 0x30
 80096ba:	b2d2      	uxtb	r2, r2
 80096bc:	701a      	strb	r2, [r3, #0]
 80096be:	e00a      	b.n	80096d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	0f1b      	lsrs	r3, r3, #28
 80096c4:	b2da      	uxtb	r2, r3
 80096c6:	7dfb      	ldrb	r3, [r7, #23]
 80096c8:	005b      	lsls	r3, r3, #1
 80096ca:	4619      	mov	r1, r3
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	440b      	add	r3, r1
 80096d0:	3237      	adds	r2, #55	@ 0x37
 80096d2:	b2d2      	uxtb	r2, r2
 80096d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	011b      	lsls	r3, r3, #4
 80096da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80096dc:	7dfb      	ldrb	r3, [r7, #23]
 80096de:	005b      	lsls	r3, r3, #1
 80096e0:	3301      	adds	r3, #1
 80096e2:	68ba      	ldr	r2, [r7, #8]
 80096e4:	4413      	add	r3, r2
 80096e6:	2200      	movs	r2, #0
 80096e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80096ea:	7dfb      	ldrb	r3, [r7, #23]
 80096ec:	3301      	adds	r3, #1
 80096ee:	75fb      	strb	r3, [r7, #23]
 80096f0:	7dfa      	ldrb	r2, [r7, #23]
 80096f2:	79fb      	ldrb	r3, [r7, #7]
 80096f4:	429a      	cmp	r2, r3
 80096f6:	d3d3      	bcc.n	80096a0 <IntToUnicode+0x18>
  }
}
 80096f8:	bf00      	nop
 80096fa:	bf00      	nop
 80096fc:	371c      	adds	r7, #28
 80096fe:	46bd      	mov	sp, r7
 8009700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009704:	4770      	bx	lr

08009706 <CUSTOM_HID_Init>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init(void)
{
 8009706:	b480      	push	{r7}
 8009708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800970a:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800970c:	4618      	mov	r0, r3
 800970e:	46bd      	mov	sp, r7
 8009710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009714:	4770      	bx	lr

08009716 <CUSTOM_HID_DeInit>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit(void)
{
 8009716:	b480      	push	{r7}
 8009718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800971a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800971c:	4618      	mov	r0, r3
 800971e:	46bd      	mov	sp, r7
 8009720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009724:	4770      	bx	lr
	...

08009728 <CUSTOM_HID_OutEvent>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent(uint8_t *data, uint16_t len)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b082      	sub	sp, #8
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	460b      	mov	r3, r1
 8009732:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN 6 */
	HID_Frame_Write(&g_HIDFrameFIFO_Receive,data);
 8009734:	6879      	ldr	r1, [r7, #4]
 8009736:	4804      	ldr	r0, [pc, #16]	@ (8009748 <CUSTOM_HID_OutEvent+0x20>)
 8009738:	f7f8 f960 	bl	80019fc <HID_Frame_Write>
  //memcpy(buffer, state, 0x40);
  //USBD_CUSTOM_HID_SendReport(&hUsbDevice, (uint8_t *)buffer, 0x40);
  return (USBD_OK);
 800973c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800973e:	4618      	mov	r0, r3
 8009740:	3708      	adds	r7, #8
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}
 8009746:	bf00      	nop
 8009748:	20004b50 	.word	0x20004b50

0800974c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b084      	sub	sp, #16
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	460b      	mov	r3, r1
 8009756:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8009758:	2300      	movs	r3, #0
 800975a:	60bb      	str	r3, [r7, #8]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800975c:	2300      	movs	r3, #0
 800975e:	73fb      	strb	r3, [r7, #15]
 8009760:	e0c6      	b.n	80098f0 <USBD_CDC_Init+0x1a4>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 8009762:	7bfb      	ldrb	r3, [r7, #15]
 8009764:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009768:	fb02 f303 	mul.w	r3, r2, r3
 800976c:	4a65      	ldr	r2, [pc, #404]	@ (8009904 <USBD_CDC_Init+0x1b8>)
 800976e:	4413      	add	r3, r2
 8009770:	60bb      	str	r3, [r7, #8]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	7c1b      	ldrb	r3, [r3, #16]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d13d      	bne.n	80097f6 <USBD_CDC_Init+0xaa>
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 800977a:	7bfb      	ldrb	r3, [r7, #15]
 800977c:	4a62      	ldr	r2, [pc, #392]	@ (8009908 <USBD_CDC_Init+0x1bc>)
 800977e:	5cd1      	ldrb	r1, [r2, r3]
 8009780:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009784:	2202      	movs	r2, #2
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f002 fdd5 	bl	800c336 <USBD_LL_OpenEP>
                           CDC_DATA_HS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 800978c:	7bfb      	ldrb	r3, [r7, #15]
 800978e:	4a5e      	ldr	r2, [pc, #376]	@ (8009908 <USBD_CDC_Init+0x1bc>)
 8009790:	5cd3      	ldrb	r3, [r2, r3]
 8009792:	f003 020f 	and.w	r2, r3, #15
 8009796:	6879      	ldr	r1, [r7, #4]
 8009798:	4613      	mov	r3, r2
 800979a:	009b      	lsls	r3, r3, #2
 800979c:	4413      	add	r3, r2
 800979e:	009b      	lsls	r3, r3, #2
 80097a0:	440b      	add	r3, r1
 80097a2:	3324      	adds	r3, #36	@ 0x24
 80097a4:	2201      	movs	r2, #1
 80097a6:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 80097a8:	7bfb      	ldrb	r3, [r7, #15]
 80097aa:	4a58      	ldr	r2, [pc, #352]	@ (800990c <USBD_CDC_Init+0x1c0>)
 80097ac:	5cd1      	ldrb	r1, [r2, r3]
 80097ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80097b2:	2202      	movs	r2, #2
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f002 fdbe 	bl	800c336 <USBD_LL_OpenEP>
                           CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 80097ba:	7bfb      	ldrb	r3, [r7, #15]
 80097bc:	4a53      	ldr	r2, [pc, #332]	@ (800990c <USBD_CDC_Init+0x1c0>)
 80097be:	5cd3      	ldrb	r3, [r2, r3]
 80097c0:	f003 020f 	and.w	r2, r3, #15
 80097c4:	6879      	ldr	r1, [r7, #4]
 80097c6:	4613      	mov	r3, r2
 80097c8:	009b      	lsls	r3, r3, #2
 80097ca:	4413      	add	r3, r2
 80097cc:	009b      	lsls	r3, r3, #2
 80097ce:	440b      	add	r3, r1
 80097d0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80097d4:	2201      	movs	r2, #1
 80097d6:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80097d8:	7bfb      	ldrb	r3, [r7, #15]
 80097da:	4a4d      	ldr	r2, [pc, #308]	@ (8009910 <USBD_CDC_Init+0x1c4>)
 80097dc:	5cd3      	ldrb	r3, [r2, r3]
 80097de:	f003 020f 	and.w	r2, r3, #15
 80097e2:	6879      	ldr	r1, [r7, #4]
 80097e4:	4613      	mov	r3, r2
 80097e6:	009b      	lsls	r3, r3, #2
 80097e8:	4413      	add	r3, r2
 80097ea:	009b      	lsls	r3, r3, #2
 80097ec:	440b      	add	r3, r1
 80097ee:	3326      	adds	r3, #38	@ 0x26
 80097f0:	2210      	movs	r2, #16
 80097f2:	801a      	strh	r2, [r3, #0]
 80097f4:	e03a      	b.n	800986c <USBD_CDC_Init+0x120>
    }
    else
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 80097f6:	7bfb      	ldrb	r3, [r7, #15]
 80097f8:	4a43      	ldr	r2, [pc, #268]	@ (8009908 <USBD_CDC_Init+0x1bc>)
 80097fa:	5cd1      	ldrb	r1, [r2, r3]
 80097fc:	2340      	movs	r3, #64	@ 0x40
 80097fe:	2202      	movs	r2, #2
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f002 fd98 	bl	800c336 <USBD_LL_OpenEP>
                           CDC_DATA_FS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 8009806:	7bfb      	ldrb	r3, [r7, #15]
 8009808:	4a3f      	ldr	r2, [pc, #252]	@ (8009908 <USBD_CDC_Init+0x1bc>)
 800980a:	5cd3      	ldrb	r3, [r2, r3]
 800980c:	f003 020f 	and.w	r2, r3, #15
 8009810:	6879      	ldr	r1, [r7, #4]
 8009812:	4613      	mov	r3, r2
 8009814:	009b      	lsls	r3, r3, #2
 8009816:	4413      	add	r3, r2
 8009818:	009b      	lsls	r3, r3, #2
 800981a:	440b      	add	r3, r1
 800981c:	3324      	adds	r3, #36	@ 0x24
 800981e:	2201      	movs	r2, #1
 8009820:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 8009822:	7bfb      	ldrb	r3, [r7, #15]
 8009824:	4a39      	ldr	r2, [pc, #228]	@ (800990c <USBD_CDC_Init+0x1c0>)
 8009826:	5cd1      	ldrb	r1, [r2, r3]
 8009828:	2340      	movs	r3, #64	@ 0x40
 800982a:	2202      	movs	r2, #2
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f002 fd82 	bl	800c336 <USBD_LL_OpenEP>
                           CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 8009832:	7bfb      	ldrb	r3, [r7, #15]
 8009834:	4a35      	ldr	r2, [pc, #212]	@ (800990c <USBD_CDC_Init+0x1c0>)
 8009836:	5cd3      	ldrb	r3, [r2, r3]
 8009838:	f003 020f 	and.w	r2, r3, #15
 800983c:	6879      	ldr	r1, [r7, #4]
 800983e:	4613      	mov	r3, r2
 8009840:	009b      	lsls	r3, r3, #2
 8009842:	4413      	add	r3, r2
 8009844:	009b      	lsls	r3, r3, #2
 8009846:	440b      	add	r3, r1
 8009848:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800984c:	2201      	movs	r2, #1
 800984e:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009850:	7bfb      	ldrb	r3, [r7, #15]
 8009852:	4a2f      	ldr	r2, [pc, #188]	@ (8009910 <USBD_CDC_Init+0x1c4>)
 8009854:	5cd3      	ldrb	r3, [r2, r3]
 8009856:	f003 020f 	and.w	r2, r3, #15
 800985a:	6879      	ldr	r1, [r7, #4]
 800985c:	4613      	mov	r3, r2
 800985e:	009b      	lsls	r3, r3, #2
 8009860:	4413      	add	r3, r2
 8009862:	009b      	lsls	r3, r3, #2
 8009864:	440b      	add	r3, r1
 8009866:	3326      	adds	r3, #38	@ 0x26
 8009868:	2210      	movs	r2, #16
 800986a:	801a      	strh	r2, [r3, #0]
    }

    /* Open Command IN EP */
    (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP[i], USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800986c:	7bfb      	ldrb	r3, [r7, #15]
 800986e:	4a28      	ldr	r2, [pc, #160]	@ (8009910 <USBD_CDC_Init+0x1c4>)
 8009870:	5cd1      	ldrb	r1, [r2, r3]
 8009872:	2308      	movs	r3, #8
 8009874:	2203      	movs	r2, #3
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f002 fd5d 	bl	800c336 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 1U;
 800987c:	7bfb      	ldrb	r3, [r7, #15]
 800987e:	4a24      	ldr	r2, [pc, #144]	@ (8009910 <USBD_CDC_Init+0x1c4>)
 8009880:	5cd3      	ldrb	r3, [r2, r3]
 8009882:	f003 020f 	and.w	r2, r3, #15
 8009886:	6879      	ldr	r1, [r7, #4]
 8009888:	4613      	mov	r3, r2
 800988a:	009b      	lsls	r3, r3, #2
 800988c:	4413      	add	r3, r2
 800988e:	009b      	lsls	r3, r3, #2
 8009890:	440b      	add	r3, r1
 8009892:	3324      	adds	r3, #36	@ 0x24
 8009894:	2201      	movs	r2, #1
 8009896:	801a      	strh	r2, [r3, #0]

    /* Init  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Init(i);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	7bfa      	ldrb	r2, [r7, #15]
 80098a2:	4610      	mov	r0, r2
 80098a4:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	2200      	movs	r2, #0
 80098aa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	2200      	movs	r2, #0
 80098b2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	7c1b      	ldrb	r3, [r3, #16]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d10b      	bne.n	80098d6 <USBD_CDC_Init+0x18a>
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 80098be:	7bfb      	ldrb	r3, [r7, #15]
 80098c0:	4a12      	ldr	r2, [pc, #72]	@ (800990c <USBD_CDC_Init+0x1c0>)
 80098c2:	5cd1      	ldrb	r1, [r2, r3]
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80098ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f002 fe20 	bl	800c514 <USBD_LL_PrepareReceive>
 80098d4:	e009      	b.n	80098ea <USBD_CDC_Init+0x19e>
                                   CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 80098d6:	7bfb      	ldrb	r3, [r7, #15]
 80098d8:	4a0c      	ldr	r2, [pc, #48]	@ (800990c <USBD_CDC_Init+0x1c0>)
 80098da:	5cd1      	ldrb	r1, [r2, r3]
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80098e2:	2340      	movs	r3, #64	@ 0x40
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f002 fe15 	bl	800c514 <USBD_LL_PrepareReceive>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80098ea:	7bfb      	ldrb	r3, [r7, #15]
 80098ec:	3301      	adds	r3, #1
 80098ee:	73fb      	strb	r3, [r7, #15]
 80098f0:	7bfb      	ldrb	r3, [r7, #15]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	f43f af35 	beq.w	8009762 <USBD_CDC_Init+0x16>
                                   CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return (uint8_t)USBD_OK;
 80098f8:	2300      	movs	r3, #0
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3710      	adds	r7, #16
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}
 8009902:	bf00      	nop
 8009904:	2000a12c 	.word	0x2000a12c
 8009908:	2000a114 	.word	0x2000a114
 800990c:	2000a118 	.word	0x2000a118
 8009910:	2000a11c 	.word	0x2000a11c

08009914 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b084      	sub	sp, #16
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	460b      	mov	r3, r1
 800991e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009920:	2300      	movs	r3, #0
 8009922:	73fb      	strb	r3, [r7, #15]
 8009924:	e057      	b.n	80099d6 <USBD_CDC_DeInit+0xc2>
  {
    /* Close EP IN */
    (void)USBD_LL_CloseEP(pdev, CDC_IN_EP[i]);
 8009926:	7bfb      	ldrb	r3, [r7, #15]
 8009928:	4a2f      	ldr	r2, [pc, #188]	@ (80099e8 <USBD_CDC_DeInit+0xd4>)
 800992a:	5cd3      	ldrb	r3, [r2, r3]
 800992c:	4619      	mov	r1, r3
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f002 fd27 	bl	800c382 <USBD_LL_CloseEP>
    pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 0U;
 8009934:	7bfb      	ldrb	r3, [r7, #15]
 8009936:	4a2c      	ldr	r2, [pc, #176]	@ (80099e8 <USBD_CDC_DeInit+0xd4>)
 8009938:	5cd3      	ldrb	r3, [r2, r3]
 800993a:	f003 020f 	and.w	r2, r3, #15
 800993e:	6879      	ldr	r1, [r7, #4]
 8009940:	4613      	mov	r3, r2
 8009942:	009b      	lsls	r3, r3, #2
 8009944:	4413      	add	r3, r2
 8009946:	009b      	lsls	r3, r3, #2
 8009948:	440b      	add	r3, r1
 800994a:	3324      	adds	r3, #36	@ 0x24
 800994c:	2200      	movs	r2, #0
 800994e:	801a      	strh	r2, [r3, #0]

    /* Close EP OUT */
    (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP[i]);
 8009950:	7bfb      	ldrb	r3, [r7, #15]
 8009952:	4a26      	ldr	r2, [pc, #152]	@ (80099ec <USBD_CDC_DeInit+0xd8>)
 8009954:	5cd3      	ldrb	r3, [r2, r3]
 8009956:	4619      	mov	r1, r3
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f002 fd12 	bl	800c382 <USBD_LL_CloseEP>
    pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 0U;
 800995e:	7bfb      	ldrb	r3, [r7, #15]
 8009960:	4a22      	ldr	r2, [pc, #136]	@ (80099ec <USBD_CDC_DeInit+0xd8>)
 8009962:	5cd3      	ldrb	r3, [r2, r3]
 8009964:	f003 020f 	and.w	r2, r3, #15
 8009968:	6879      	ldr	r1, [r7, #4]
 800996a:	4613      	mov	r3, r2
 800996c:	009b      	lsls	r3, r3, #2
 800996e:	4413      	add	r3, r2
 8009970:	009b      	lsls	r3, r3, #2
 8009972:	440b      	add	r3, r1
 8009974:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009978:	2200      	movs	r2, #0
 800997a:	801a      	strh	r2, [r3, #0]

    /* Close Command IN EP */
    (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP[i]);
 800997c:	7bfb      	ldrb	r3, [r7, #15]
 800997e:	4a1c      	ldr	r2, [pc, #112]	@ (80099f0 <USBD_CDC_DeInit+0xdc>)
 8009980:	5cd3      	ldrb	r3, [r2, r3]
 8009982:	4619      	mov	r1, r3
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f002 fcfc 	bl	800c382 <USBD_LL_CloseEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 0U;
 800998a:	7bfb      	ldrb	r3, [r7, #15]
 800998c:	4a18      	ldr	r2, [pc, #96]	@ (80099f0 <USBD_CDC_DeInit+0xdc>)
 800998e:	5cd3      	ldrb	r3, [r2, r3]
 8009990:	f003 020f 	and.w	r2, r3, #15
 8009994:	6879      	ldr	r1, [r7, #4]
 8009996:	4613      	mov	r3, r2
 8009998:	009b      	lsls	r3, r3, #2
 800999a:	4413      	add	r3, r2
 800999c:	009b      	lsls	r3, r3, #2
 800999e:	440b      	add	r3, r1
 80099a0:	3324      	adds	r3, #36	@ 0x24
 80099a2:	2200      	movs	r2, #0
 80099a4:	801a      	strh	r2, [r3, #0]
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = 0U;
 80099a6:	7bfb      	ldrb	r3, [r7, #15]
 80099a8:	4a11      	ldr	r2, [pc, #68]	@ (80099f0 <USBD_CDC_DeInit+0xdc>)
 80099aa:	5cd3      	ldrb	r3, [r2, r3]
 80099ac:	f003 020f 	and.w	r2, r3, #15
 80099b0:	6879      	ldr	r1, [r7, #4]
 80099b2:	4613      	mov	r3, r2
 80099b4:	009b      	lsls	r3, r3, #2
 80099b6:	4413      	add	r3, r2
 80099b8:	009b      	lsls	r3, r3, #2
 80099ba:	440b      	add	r3, r1
 80099bc:	3326      	adds	r3, #38	@ 0x26
 80099be:	2200      	movs	r2, #0
 80099c0:	801a      	strh	r2, [r3, #0]

    /* DeInit  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->DeInit(i);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80099c8:	685b      	ldr	r3, [r3, #4]
 80099ca:	7bfa      	ldrb	r2, [r7, #15]
 80099cc:	4610      	mov	r0, r2
 80099ce:	4798      	blx	r3
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80099d0:	7bfb      	ldrb	r3, [r7, #15]
 80099d2:	3301      	adds	r3, #1
 80099d4:	73fb      	strb	r3, [r7, #15]
 80099d6:	7bfb      	ldrb	r3, [r7, #15]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d0a4      	beq.n	8009926 <USBD_CDC_DeInit+0x12>
  }
  return (uint8_t)USBD_OK;
 80099dc:	2300      	movs	r3, #0
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3710      	adds	r7, #16
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}
 80099e6:	bf00      	nop
 80099e8:	2000a114 	.word	0x2000a114
 80099ec:	2000a118 	.word	0x2000a118
 80099f0:	2000a11c 	.word	0x2000a11c

080099f4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80099f4:	b590      	push	{r4, r7, lr}
 80099f6:	b087      	sub	sp, #28
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
 80099fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 80099fe:	2300      	movs	r3, #0
 8009a00:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009a02:	2300      	movs	r3, #0
 8009a04:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009a06:	2300      	movs	r3, #0
 8009a08:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	75fb      	strb	r3, [r7, #23]

  uint8_t windex_to_ch = 0;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	75bb      	strb	r3, [r7, #22]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009a12:	2300      	movs	r3, #0
 8009a14:	757b      	strb	r3, [r7, #21]
 8009a16:	e015      	b.n	8009a44 <USBD_CDC_Setup+0x50>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	889b      	ldrh	r3, [r3, #4]
 8009a1c:	b2da      	uxtb	r2, r3
 8009a1e:	7d7b      	ldrb	r3, [r7, #21]
 8009a20:	496d      	ldr	r1, [pc, #436]	@ (8009bd8 <USBD_CDC_Setup+0x1e4>)
 8009a22:	5ccb      	ldrb	r3, [r1, r3]
 8009a24:	429a      	cmp	r2, r3
 8009a26:	d007      	beq.n	8009a38 <USBD_CDC_Setup+0x44>
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	889b      	ldrh	r3, [r3, #4]
 8009a2c:	b2da      	uxtb	r2, r3
 8009a2e:	7d7b      	ldrb	r3, [r7, #21]
 8009a30:	496a      	ldr	r1, [pc, #424]	@ (8009bdc <USBD_CDC_Setup+0x1e8>)
 8009a32:	5ccb      	ldrb	r3, [r1, r3]
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d102      	bne.n	8009a3e <USBD_CDC_Setup+0x4a>
    {
      windex_to_ch = i;
 8009a38:	7d7b      	ldrb	r3, [r7, #21]
 8009a3a:	75bb      	strb	r3, [r7, #22]
      break;
 8009a3c:	e005      	b.n	8009a4a <USBD_CDC_Setup+0x56>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009a3e:	7d7b      	ldrb	r3, [r7, #21]
 8009a40:	3301      	adds	r3, #1
 8009a42:	757b      	strb	r3, [r7, #21]
 8009a44:	7d7b      	ldrb	r3, [r7, #21]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d0e6      	beq.n	8009a18 <USBD_CDC_Setup+0x24>
    }
  }

  hcdc = &CDC_ACM_Class_Data[windex_to_ch];
 8009a4a:	7dbb      	ldrb	r3, [r7, #22]
 8009a4c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009a50:	fb02 f303 	mul.w	r3, r2, r3
 8009a54:	4a62      	ldr	r2, [pc, #392]	@ (8009be0 <USBD_CDC_Setup+0x1ec>)
 8009a56:	4413      	add	r3, r2
 8009a58:	613b      	str	r3, [r7, #16]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	781b      	ldrb	r3, [r3, #0]
 8009a5e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d04a      	beq.n	8009afc <USBD_CDC_Setup+0x108>
 8009a66:	2b20      	cmp	r3, #32
 8009a68:	f040 80aa 	bne.w	8009bc0 <USBD_CDC_Setup+0x1cc>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	88db      	ldrh	r3, [r3, #6]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d038      	beq.n	8009ae6 <USBD_CDC_Setup+0xf2>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	781b      	ldrb	r3, [r3, #0]
 8009a78:	b25b      	sxtb	r3, r3
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	da1d      	bge.n	8009aba <USBD_CDC_Setup+0xc6>
      {
        ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009a84:	689c      	ldr	r4, [r3, #8]
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	7859      	ldrb	r1, [r3, #1]
 8009a8a:	7dbb      	ldrb	r3, [r7, #22]
 8009a8c:	025b      	lsls	r3, r3, #9
 8009a8e:	693a      	ldr	r2, [r7, #16]
 8009a90:	441a      	add	r2, r3
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	88db      	ldrh	r3, [r3, #6]
 8009a96:	7db8      	ldrb	r0, [r7, #22]
 8009a98:	47a0      	blx	r4

        len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	88db      	ldrh	r3, [r3, #6]
 8009a9e:	2b07      	cmp	r3, #7
 8009aa0:	bf28      	it	cs
 8009aa2:	2307      	movcs	r3, #7
 8009aa4:	81fb      	strh	r3, [r7, #14]
        (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data[windex_to_ch], len);
 8009aa6:	7dbb      	ldrb	r3, [r7, #22]
 8009aa8:	025b      	lsls	r3, r3, #9
 8009aaa:	693a      	ldr	r2, [r7, #16]
 8009aac:	4413      	add	r3, r2
 8009aae:	89fa      	ldrh	r2, [r7, #14]
 8009ab0:	4619      	mov	r1, r3
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f002 fa2d 	bl	800bf12 <USBD_CtlSendData>
    }
    else
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
    }
    break;
 8009ab8:	e089      	b.n	8009bce <USBD_CDC_Setup+0x1da>
        hcdc->CmdOpCode = req->bRequest;
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	785a      	ldrb	r2, [r3, #1]
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	88db      	ldrh	r3, [r3, #6]
 8009ac8:	b2da      	uxtb	r2, r3
 8009aca:	693b      	ldr	r3, [r7, #16]
 8009acc:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 8009ad0:	7dbb      	ldrb	r3, [r7, #22]
 8009ad2:	025b      	lsls	r3, r3, #9
 8009ad4:	693a      	ldr	r2, [r7, #16]
 8009ad6:	18d1      	adds	r1, r2, r3
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	88db      	ldrh	r3, [r3, #6]
 8009adc:	461a      	mov	r2, r3
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f002 fa43 	bl	800bf6a <USBD_CtlPrepareRx>
    break;
 8009ae4:	e073      	b.n	8009bce <USBD_CDC_Setup+0x1da>
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009aec:	689c      	ldr	r4, [r3, #8]
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	7859      	ldrb	r1, [r3, #1]
 8009af2:	7db8      	ldrb	r0, [r7, #22]
 8009af4:	2300      	movs	r3, #0
 8009af6:	683a      	ldr	r2, [r7, #0]
 8009af8:	47a0      	blx	r4
    break;
 8009afa:	e068      	b.n	8009bce <USBD_CDC_Setup+0x1da>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	785b      	ldrb	r3, [r3, #1]
 8009b00:	2b0b      	cmp	r3, #11
 8009b02:	d852      	bhi.n	8009baa <USBD_CDC_Setup+0x1b6>
 8009b04:	a201      	add	r2, pc, #4	@ (adr r2, 8009b0c <USBD_CDC_Setup+0x118>)
 8009b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b0a:	bf00      	nop
 8009b0c:	08009b3d 	.word	0x08009b3d
 8009b10:	08009bb9 	.word	0x08009bb9
 8009b14:	08009bab 	.word	0x08009bab
 8009b18:	08009bab 	.word	0x08009bab
 8009b1c:	08009bab 	.word	0x08009bab
 8009b20:	08009bab 	.word	0x08009bab
 8009b24:	08009bab 	.word	0x08009bab
 8009b28:	08009bab 	.word	0x08009bab
 8009b2c:	08009bab 	.word	0x08009bab
 8009b30:	08009bab 	.word	0x08009bab
 8009b34:	08009b67 	.word	0x08009b67
 8009b38:	08009b91 	.word	0x08009b91
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b42:	b2db      	uxtb	r3, r3
 8009b44:	2b03      	cmp	r3, #3
 8009b46:	d107      	bne.n	8009b58 <USBD_CDC_Setup+0x164>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009b48:	f107 030a 	add.w	r3, r7, #10
 8009b4c:	2202      	movs	r2, #2
 8009b4e:	4619      	mov	r1, r3
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f002 f9de 	bl	800bf12 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8009b56:	e032      	b.n	8009bbe <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 8009b58:	6839      	ldr	r1, [r7, #0]
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f002 f968 	bl	800be30 <USBD_CtlError>
        ret = USBD_FAIL;
 8009b60:	2303      	movs	r3, #3
 8009b62:	75fb      	strb	r3, [r7, #23]
      break;
 8009b64:	e02b      	b.n	8009bbe <USBD_CDC_Setup+0x1ca>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b6c:	b2db      	uxtb	r3, r3
 8009b6e:	2b03      	cmp	r3, #3
 8009b70:	d107      	bne.n	8009b82 <USBD_CDC_Setup+0x18e>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009b72:	f107 030d 	add.w	r3, r7, #13
 8009b76:	2201      	movs	r2, #1
 8009b78:	4619      	mov	r1, r3
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f002 f9c9 	bl	800bf12 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8009b80:	e01d      	b.n	8009bbe <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 8009b82:	6839      	ldr	r1, [r7, #0]
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f002 f953 	bl	800be30 <USBD_CtlError>
        ret = USBD_FAIL;
 8009b8a:	2303      	movs	r3, #3
 8009b8c:	75fb      	strb	r3, [r7, #23]
      break;
 8009b8e:	e016      	b.n	8009bbe <USBD_CDC_Setup+0x1ca>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b96:	b2db      	uxtb	r3, r3
 8009b98:	2b03      	cmp	r3, #3
 8009b9a:	d00f      	beq.n	8009bbc <USBD_CDC_Setup+0x1c8>
      {
        USBD_CtlError(pdev, req);
 8009b9c:	6839      	ldr	r1, [r7, #0]
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f002 f946 	bl	800be30 <USBD_CtlError>
        ret = USBD_FAIL;
 8009ba4:	2303      	movs	r3, #3
 8009ba6:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8009ba8:	e008      	b.n	8009bbc <USBD_CDC_Setup+0x1c8>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8009baa:	6839      	ldr	r1, [r7, #0]
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f002 f93f 	bl	800be30 <USBD_CtlError>
      ret = USBD_FAIL;
 8009bb2:	2303      	movs	r3, #3
 8009bb4:	75fb      	strb	r3, [r7, #23]
      break;
 8009bb6:	e002      	b.n	8009bbe <USBD_CDC_Setup+0x1ca>
      break;
 8009bb8:	bf00      	nop
 8009bba:	e008      	b.n	8009bce <USBD_CDC_Setup+0x1da>
      break;
 8009bbc:	bf00      	nop
    }
    break;
 8009bbe:	e006      	b.n	8009bce <USBD_CDC_Setup+0x1da>

  default:
    USBD_CtlError(pdev, req);
 8009bc0:	6839      	ldr	r1, [r7, #0]
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f002 f934 	bl	800be30 <USBD_CtlError>
    ret = USBD_FAIL;
 8009bc8:	2303      	movs	r3, #3
 8009bca:	75fb      	strb	r3, [r7, #23]
    break;
 8009bcc:	bf00      	nop
  }

  return (uint8_t)ret;
 8009bce:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	371c      	adds	r7, #28
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd90      	pop	{r4, r7, pc}
 8009bd8:	2000a120 	.word	0x2000a120
 8009bdc:	2000a124 	.word	0x2000a124
 8009be0:	2000a12c 	.word	0x2000a12c

08009be4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009be4:	b590      	push	{r4, r7, lr}
 8009be6:	b087      	sub	sp, #28
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	460b      	mov	r3, r1
 8009bee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	613b      	str	r3, [r7, #16]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 8009bfa:	60fb      	str	r3, [r7, #12]
  uint8_t ep_to_ch = 0;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	75fb      	strb	r3, [r7, #23]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009c00:	2300      	movs	r3, #0
 8009c02:	75bb      	strb	r3, [r7, #22]
 8009c04:	e00d      	b.n	8009c22 <USBD_CDC_DataIn+0x3e>
  {
    if (epnum == (CDC_IN_EP[i] & 0x0F))
 8009c06:	78fa      	ldrb	r2, [r7, #3]
 8009c08:	7dbb      	ldrb	r3, [r7, #22]
 8009c0a:	4934      	ldr	r1, [pc, #208]	@ (8009cdc <USBD_CDC_DataIn+0xf8>)
 8009c0c:	5ccb      	ldrb	r3, [r1, r3]
 8009c0e:	f003 030f 	and.w	r3, r3, #15
 8009c12:	429a      	cmp	r2, r3
 8009c14:	d102      	bne.n	8009c1c <USBD_CDC_DataIn+0x38>
    {
      ep_to_ch = i;
 8009c16:	7dbb      	ldrb	r3, [r7, #22]
 8009c18:	75fb      	strb	r3, [r7, #23]
      break;
 8009c1a:	e005      	b.n	8009c28 <USBD_CDC_DataIn+0x44>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009c1c:	7dbb      	ldrb	r3, [r7, #22]
 8009c1e:	3301      	adds	r3, #1
 8009c20:	75bb      	strb	r3, [r7, #22]
 8009c22:	7dbb      	ldrb	r3, [r7, #22]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d0ee      	beq.n	8009c06 <USBD_CDC_DataIn+0x22>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 8009c28:	7dfb      	ldrb	r3, [r7, #23]
 8009c2a:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009c2e:	fb02 f303 	mul.w	r3, r2, r3
 8009c32:	4a2b      	ldr	r2, [pc, #172]	@ (8009ce0 <USBD_CDC_DataIn+0xfc>)
 8009c34:	4413      	add	r3, r2
 8009c36:	613b      	str	r3, [r7, #16]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009c38:	78fa      	ldrb	r2, [r7, #3]
 8009c3a:	6879      	ldr	r1, [r7, #4]
 8009c3c:	4613      	mov	r3, r2
 8009c3e:	009b      	lsls	r3, r3, #2
 8009c40:	4413      	add	r3, r2
 8009c42:	009b      	lsls	r3, r3, #2
 8009c44:	440b      	add	r3, r1
 8009c46:	3318      	adds	r3, #24
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d029      	beq.n	8009ca2 <USBD_CDC_DataIn+0xbe>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009c4e:	78fa      	ldrb	r2, [r7, #3]
 8009c50:	6879      	ldr	r1, [r7, #4]
 8009c52:	4613      	mov	r3, r2
 8009c54:	009b      	lsls	r3, r3, #2
 8009c56:	4413      	add	r3, r2
 8009c58:	009b      	lsls	r3, r3, #2
 8009c5a:	440b      	add	r3, r1
 8009c5c:	3318      	adds	r3, #24
 8009c5e:	681a      	ldr	r2, [r3, #0]
 8009c60:	78f9      	ldrb	r1, [r7, #3]
 8009c62:	68f8      	ldr	r0, [r7, #12]
 8009c64:	460b      	mov	r3, r1
 8009c66:	00db      	lsls	r3, r3, #3
 8009c68:	440b      	add	r3, r1
 8009c6a:	009b      	lsls	r3, r3, #2
 8009c6c:	4403      	add	r3, r0
 8009c6e:	331c      	adds	r3, #28
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	fbb2 f1f3 	udiv	r1, r2, r3
 8009c76:	fb01 f303 	mul.w	r3, r1, r3
 8009c7a:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d110      	bne.n	8009ca2 <USBD_CDC_DataIn+0xbe>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8009c80:	78fa      	ldrb	r2, [r7, #3]
 8009c82:	6879      	ldr	r1, [r7, #4]
 8009c84:	4613      	mov	r3, r2
 8009c86:	009b      	lsls	r3, r3, #2
 8009c88:	4413      	add	r3, r2
 8009c8a:	009b      	lsls	r3, r3, #2
 8009c8c:	440b      	add	r3, r1
 8009c8e:	3318      	adds	r3, #24
 8009c90:	2200      	movs	r2, #0
 8009c92:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009c94:	78f9      	ldrb	r1, [r7, #3]
 8009c96:	2300      	movs	r3, #0
 8009c98:	2200      	movs	r2, #0
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f002 fc19 	bl	800c4d2 <USBD_LL_Transmit>
 8009ca0:	e016      	b.n	8009cd0 <USBD_CDC_DataIn+0xec>
  }
  else
  {
    hcdc->TxState = 0U;
 8009ca2:	693b      	ldr	r3, [r7, #16]
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt != NULL)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009cb0:	691b      	ldr	r3, [r3, #16]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d00c      	beq.n	8009cd0 <USBD_CDC_DataIn+0xec>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt(ep_to_ch, hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009cbc:	691c      	ldr	r4, [r3, #16]
 8009cbe:	693b      	ldr	r3, [r7, #16]
 8009cc0:	f8d3 1208 	ldr.w	r1, [r3, #520]	@ 0x208
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8009cca:	78fb      	ldrb	r3, [r7, #3]
 8009ccc:	7df8      	ldrb	r0, [r7, #23]
 8009cce:	47a0      	blx	r4
    }
  }

  return (uint8_t)USBD_OK;
 8009cd0:	2300      	movs	r3, #0
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	371c      	adds	r7, #28
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd90      	pop	{r4, r7, pc}
 8009cda:	bf00      	nop
 8009cdc:	2000a114 	.word	0x2000a114
 8009ce0:	2000a12c 	.word	0x2000a12c

08009ce4 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b084      	sub	sp, #16
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	460b      	mov	r3, r1
 8009cee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	60bb      	str	r3, [r7, #8]
  uint8_t ep_to_ch = 0;
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	73fb      	strb	r3, [r7, #15]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	73bb      	strb	r3, [r7, #14]
 8009cfc:	e00b      	b.n	8009d16 <USBD_CDC_DataOut+0x32>
  {
    if (epnum == CDC_OUT_EP[i])
 8009cfe:	7bbb      	ldrb	r3, [r7, #14]
 8009d00:	4a17      	ldr	r2, [pc, #92]	@ (8009d60 <USBD_CDC_DataOut+0x7c>)
 8009d02:	5cd3      	ldrb	r3, [r2, r3]
 8009d04:	78fa      	ldrb	r2, [r7, #3]
 8009d06:	429a      	cmp	r2, r3
 8009d08:	d102      	bne.n	8009d10 <USBD_CDC_DataOut+0x2c>
    {
      ep_to_ch = i;
 8009d0a:	7bbb      	ldrb	r3, [r7, #14]
 8009d0c:	73fb      	strb	r3, [r7, #15]
      break;
 8009d0e:	e005      	b.n	8009d1c <USBD_CDC_DataOut+0x38>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009d10:	7bbb      	ldrb	r3, [r7, #14]
 8009d12:	3301      	adds	r3, #1
 8009d14:	73bb      	strb	r3, [r7, #14]
 8009d16:	7bbb      	ldrb	r3, [r7, #14]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d0f0      	beq.n	8009cfe <USBD_CDC_DataOut+0x1a>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 8009d1c:	7bfb      	ldrb	r3, [r7, #15]
 8009d1e:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009d22:	fb02 f303 	mul.w	r3, r2, r3
 8009d26:	4a0f      	ldr	r2, [pc, #60]	@ (8009d64 <USBD_CDC_DataOut+0x80>)
 8009d28:	4413      	add	r3, r2
 8009d2a:	60bb      	str	r3, [r7, #8]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009d2c:	78fb      	ldrb	r3, [r7, #3]
 8009d2e:	4619      	mov	r1, r3
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f002 fc10 	bl	800c556 <USBD_LL_GetRxDataSize>
 8009d36:	4602      	mov	r2, r0
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Receive(ep_to_ch, hcdc->RxBuffer, &hcdc->RxLength);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009d44:	68db      	ldr	r3, [r3, #12]
 8009d46:	68ba      	ldr	r2, [r7, #8]
 8009d48:	f8d2 1204 	ldr.w	r1, [r2, #516]	@ 0x204
 8009d4c:	68ba      	ldr	r2, [r7, #8]
 8009d4e:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009d52:	7bf8      	ldrb	r0, [r7, #15]
 8009d54:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009d56:	2300      	movs	r3, #0
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3710      	adds	r7, #16
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}
 8009d60:	2000a118 	.word	0x2000a118
 8009d64:	2000a12c 	.word	0x2000a12c

08009d68 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009d68:	b590      	push	{r4, r7, lr}
 8009d6a:	b085      	sub	sp, #20
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8009d70:	2300      	movs	r3, #0
 8009d72:	60bb      	str	r3, [r7, #8]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009d74:	2300      	movs	r3, #0
 8009d76:	73fb      	strb	r3, [r7, #15]
 8009d78:	e02d      	b.n	8009dd6 <USBD_CDC_EP0_RxReady+0x6e>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 8009d7a:	7bfb      	ldrb	r3, [r7, #15]
 8009d7c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009d80:	fb02 f303 	mul.w	r3, r2, r3
 8009d84:	4a18      	ldr	r2, [pc, #96]	@ (8009de8 <USBD_CDC_EP0_RxReady+0x80>)
 8009d86:	4413      	add	r3, r2
 8009d88:	60bb      	str	r3, [r7, #8]

    if (hcdc == NULL)
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d101      	bne.n	8009d94 <USBD_CDC_EP0_RxReady+0x2c>
    {
      return (uint8_t)USBD_FAIL;
 8009d90:	2303      	movs	r3, #3
 8009d92:	e024      	b.n	8009dde <USBD_CDC_EP0_RxReady+0x76>
    }

    if ((pdev->pUserData_CDC_ACM != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d018      	beq.n	8009dd0 <USBD_CDC_EP0_RxReady+0x68>
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009da4:	2bff      	cmp	r3, #255	@ 0xff
 8009da6:	d013      	beq.n	8009dd0 <USBD_CDC_EP0_RxReady+0x68>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(i, hcdc->CmdOpCode, (uint8_t *)hcdc->data[i], (uint16_t)hcdc->CmdLength);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009dae:	689c      	ldr	r4, [r3, #8]
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	f893 1200 	ldrb.w	r1, [r3, #512]	@ 0x200
 8009db6:	7bfb      	ldrb	r3, [r7, #15]
 8009db8:	025b      	lsls	r3, r3, #9
 8009dba:	68ba      	ldr	r2, [r7, #8]
 8009dbc:	441a      	add	r2, r3
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8009dc4:	7bf8      	ldrb	r0, [r7, #15]
 8009dc6:	47a0      	blx	r4
      hcdc->CmdOpCode = 0xFFU;
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	22ff      	movs	r2, #255	@ 0xff
 8009dcc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009dd0:	7bfb      	ldrb	r3, [r7, #15]
 8009dd2:	3301      	adds	r3, #1
 8009dd4:	73fb      	strb	r3, [r7, #15]
 8009dd6:	7bfb      	ldrb	r3, [r7, #15]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d0ce      	beq.n	8009d7a <USBD_CDC_EP0_RxReady+0x12>
    }
  }

  return (uint8_t)USBD_OK;
 8009ddc:	2300      	movs	r3, #0
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	3714      	adds	r7, #20
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd90      	pop	{r4, r7, pc}
 8009de6:	bf00      	nop
 8009de8:	2000a12c 	.word	0x2000a12c

08009dec <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009dec:	b480      	push	{r7}
 8009dee:	b083      	sub	sp, #12
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	224b      	movs	r2, #75	@ 0x4b
 8009df8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8009dfa:	4b03      	ldr	r3, [pc, #12]	@ (8009e08 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	370c      	adds	r7, #12
 8009e00:	46bd      	mov	sp, r7
 8009e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e06:	4770      	bx	lr
 8009e08:	20000144 	.word	0x20000144

08009e0c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b083      	sub	sp, #12
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	224b      	movs	r2, #75	@ 0x4b
 8009e18:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8009e1a:	4b03      	ldr	r3, [pc, #12]	@ (8009e28 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	370c      	adds	r7, #12
 8009e20:	46bd      	mov	sp, r7
 8009e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e26:	4770      	bx	lr
 8009e28:	200000f8 	.word	0x200000f8

08009e2c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b083      	sub	sp, #12
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	224b      	movs	r2, #75	@ 0x4b
 8009e38:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8009e3a:	4b03      	ldr	r3, [pc, #12]	@ (8009e48 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	370c      	adds	r7, #12
 8009e40:	46bd      	mov	sp, r7
 8009e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e46:	4770      	bx	lr
 8009e48:	20000144 	.word	0x20000144

08009e4c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b083      	sub	sp, #12
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	220a      	movs	r2, #10
 8009e58:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009e5a:	4b03      	ldr	r3, [pc, #12]	@ (8009e68 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	370c      	adds	r7, #12
 8009e60:	46bd      	mov	sp, r7
 8009e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e66:	4770      	bx	lr
 8009e68:	200000b0 	.word	0x200000b0

08009e6c <USBD_CDC_ACM_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_ACM_RegisterInterface(USBD_HandleTypeDef *pdev,
                                       USBD_CDC_ACM_ItfTypeDef *fops)
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b083      	sub	sp, #12
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
 8009e74:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d101      	bne.n	8009e80 <USBD_CDC_ACM_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009e7c:	2303      	movs	r3, #3
 8009e7e:	e004      	b.n	8009e8a <USBD_CDC_ACM_RegisterInterface+0x1e>
  }

  pdev->pUserData_CDC_ACM = fops;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	683a      	ldr	r2, [r7, #0]
 8009e84:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  return (uint8_t)USBD_OK;
 8009e88:	2300      	movs	r3, #0
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	370c      	adds	r7, #12
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e94:	4770      	bx	lr
	...

08009e98 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b087      	sub	sp, #28
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	60b9      	str	r1, [r7, #8]
 8009ea0:	607a      	str	r2, [r7, #4]
 8009ea2:	603b      	str	r3, [r7, #0]
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 8009eac:	7bfb      	ldrb	r3, [r7, #15]
 8009eae:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009eb2:	fb02 f303 	mul.w	r3, r2, r3
 8009eb6:	4a09      	ldr	r2, [pc, #36]	@ (8009edc <USBD_CDC_SetTxBuffer+0x44>)
 8009eb8:	4413      	add	r3, r2
 8009eba:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	687a      	ldr	r2, [r7, #4]
 8009ec0:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009ec4:	697b      	ldr	r3, [r7, #20]
 8009ec6:	683a      	ldr	r2, [r7, #0]
 8009ec8:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009ecc:	2300      	movs	r3, #0
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	371c      	adds	r7, #28
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed8:	4770      	bx	lr
 8009eda:	bf00      	nop
 8009edc:	2000a12c 	.word	0x2000a12c

08009ee0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b087      	sub	sp, #28
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	60b9      	str	r1, [r7, #8]
 8009eea:	607a      	str	r2, [r7, #4]
 8009eec:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 8009ef2:	7bfb      	ldrb	r3, [r7, #15]
 8009ef4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009ef8:	fb02 f303 	mul.w	r3, r2, r3
 8009efc:	4a06      	ldr	r2, [pc, #24]	@ (8009f18 <USBD_CDC_SetRxBuffer+0x38>)
 8009efe:	4413      	add	r3, r2
 8009f00:	617b      	str	r3, [r7, #20]

  hcdc->RxBuffer = pbuff;
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	687a      	ldr	r2, [r7, #4]
 8009f06:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009f0a:	2300      	movs	r3, #0
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	371c      	adds	r7, #28
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr
 8009f18:	2000a12c 	.word	0x2000a12c

08009f1c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b084      	sub	sp, #16
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	4603      	mov	r3, r0
 8009f24:	6039      	str	r1, [r7, #0]
 8009f26:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	73fb      	strb	r3, [r7, #15]

  hcdc = &CDC_ACM_Class_Data[ch];
 8009f30:	79fb      	ldrb	r3, [r7, #7]
 8009f32:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009f36:	fb02 f303 	mul.w	r3, r2, r3
 8009f3a:	4a17      	ldr	r2, [pc, #92]	@ (8009f98 <USBD_CDC_TransmitPacket+0x7c>)
 8009f3c:	4413      	add	r3, r2
 8009f3e:	60bb      	str	r3, [r7, #8]

  if (hcdc->TxState == 0U)
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d121      	bne.n	8009f8e <USBD_CDC_TransmitPacket+0x72>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	2201      	movs	r2, #1
 8009f4e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP[ch] & 0xFU].total_length = hcdc->TxLength;
 8009f52:	79fb      	ldrb	r3, [r7, #7]
 8009f54:	4a11      	ldr	r2, [pc, #68]	@ (8009f9c <USBD_CDC_TransmitPacket+0x80>)
 8009f56:	5cd3      	ldrb	r3, [r2, r3]
 8009f58:	f003 020f 	and.w	r2, r3, #15
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8009f62:	6838      	ldr	r0, [r7, #0]
 8009f64:	4613      	mov	r3, r2
 8009f66:	009b      	lsls	r3, r3, #2
 8009f68:	4413      	add	r3, r2
 8009f6a:	009b      	lsls	r3, r3, #2
 8009f6c:	4403      	add	r3, r0
 8009f6e:	3318      	adds	r3, #24
 8009f70:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP[ch], hcdc->TxBuffer, hcdc->TxLength);
 8009f72:	79fb      	ldrb	r3, [r7, #7]
 8009f74:	4a09      	ldr	r2, [pc, #36]	@ (8009f9c <USBD_CDC_TransmitPacket+0x80>)
 8009f76:	5cd1      	ldrb	r1, [r2, r3]
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8009f84:	6838      	ldr	r0, [r7, #0]
 8009f86:	f002 faa4 	bl	800c4d2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	3710      	adds	r7, #16
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}
 8009f98:	2000a12c 	.word	0x2000a12c
 8009f9c:	2000a114 	.word	0x2000a114

08009fa0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b084      	sub	sp, #16
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	6039      	str	r1, [r7, #0]
 8009faa:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8009fac:	2300      	movs	r3, #0
 8009fae:	60fb      	str	r3, [r7, #12]

  hcdc = &CDC_ACM_Class_Data[ch];
 8009fb0:	79fb      	ldrb	r3, [r7, #7]
 8009fb2:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009fb6:	fb02 f303 	mul.w	r3, r2, r3
 8009fba:	4a11      	ldr	r2, [pc, #68]	@ (800a000 <USBD_CDC_ReceivePacket+0x60>)
 8009fbc:	4413      	add	r3, r2
 8009fbe:	60fb      	str	r3, [r7, #12]

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	7c1b      	ldrb	r3, [r3, #16]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d10b      	bne.n	8009fe0 <USBD_CDC_ReceivePacket+0x40>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 8009fc8:	79fb      	ldrb	r3, [r7, #7]
 8009fca:	4a0e      	ldr	r2, [pc, #56]	@ (800a004 <USBD_CDC_ReceivePacket+0x64>)
 8009fcc:	5cd1      	ldrb	r1, [r2, r3]
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009fd4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009fd8:	6838      	ldr	r0, [r7, #0]
 8009fda:	f002 fa9b 	bl	800c514 <USBD_LL_PrepareReceive>
 8009fde:	e009      	b.n	8009ff4 <USBD_CDC_ReceivePacket+0x54>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 8009fe0:	79fb      	ldrb	r3, [r7, #7]
 8009fe2:	4a08      	ldr	r2, [pc, #32]	@ (800a004 <USBD_CDC_ReceivePacket+0x64>)
 8009fe4:	5cd1      	ldrb	r1, [r2, r3]
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009fec:	2340      	movs	r3, #64	@ 0x40
 8009fee:	6838      	ldr	r0, [r7, #0]
 8009ff0:	f002 fa90 	bl	800c514 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009ff4:	2300      	movs	r3, #0
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3710      	adds	r7, #16
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}
 8009ffe:	bf00      	nop
 800a000:	2000a12c 	.word	0x2000a12c
 800a004:	2000a118 	.word	0x2000a118

0800a008 <USBD_Update_CDC_ACM_DESC>:
                              uint8_t com_itf,
                              uint8_t in_ep,
                              uint8_t cmd_ep,
                              uint8_t out_ep,
                              uint8_t str_idx)
{
 800a008:	b480      	push	{r7}
 800a00a:	b085      	sub	sp, #20
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
 800a010:	4608      	mov	r0, r1
 800a012:	4611      	mov	r1, r2
 800a014:	461a      	mov	r2, r3
 800a016:	4603      	mov	r3, r0
 800a018:	70fb      	strb	r3, [r7, #3]
 800a01a:	460b      	mov	r3, r1
 800a01c:	70bb      	strb	r3, [r7, #2]
 800a01e:	4613      	mov	r3, r2
 800a020:	707b      	strb	r3, [r7, #1]
  desc += 9;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	3309      	adds	r3, #9
 800a026:	607b      	str	r3, [r7, #4]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800a028:	2300      	movs	r3, #0
 800a02a:	73fb      	strb	r3, [r7, #15]
 800a02c:	e05b      	b.n	800a0e6 <USBD_Update_CDC_ACM_DESC+0xde>
  {
    desc[2] = cmd_itf;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	3302      	adds	r3, #2
 800a032:	78fa      	ldrb	r2, [r7, #3]
 800a034:	701a      	strb	r2, [r3, #0]
    desc[16] = str_idx;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	3310      	adds	r3, #16
 800a03a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800a03e:	701a      	strb	r2, [r3, #0]
    desc[10] = cmd_itf;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	330a      	adds	r3, #10
 800a044:	78fa      	ldrb	r2, [r7, #3]
 800a046:	701a      	strb	r2, [r3, #0]
    desc[26] = com_itf;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	331a      	adds	r3, #26
 800a04c:	78ba      	ldrb	r2, [r7, #2]
 800a04e:	701a      	strb	r2, [r3, #0]
    desc[34] = cmd_itf;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	3322      	adds	r3, #34	@ 0x22
 800a054:	78fa      	ldrb	r2, [r7, #3]
 800a056:	701a      	strb	r2, [r3, #0]
    desc[35] = com_itf;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	3323      	adds	r3, #35	@ 0x23
 800a05c:	78ba      	ldrb	r2, [r7, #2]
 800a05e:	701a      	strb	r2, [r3, #0]
    desc[38] = cmd_ep;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	3326      	adds	r3, #38	@ 0x26
 800a064:	7e3a      	ldrb	r2, [r7, #24]
 800a066:	701a      	strb	r2, [r3, #0]
    desc[45] = com_itf;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	332d      	adds	r3, #45	@ 0x2d
 800a06c:	78ba      	ldrb	r2, [r7, #2]
 800a06e:	701a      	strb	r2, [r3, #0]
    desc[54] = out_ep;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	3336      	adds	r3, #54	@ 0x36
 800a074:	7f3a      	ldrb	r2, [r7, #28]
 800a076:	701a      	strb	r2, [r3, #0]
    desc[61] = in_ep;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	333d      	adds	r3, #61	@ 0x3d
 800a07c:	787a      	ldrb	r2, [r7, #1]
 800a07e:	701a      	strb	r2, [r3, #0]

    desc += 66;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	3342      	adds	r3, #66	@ 0x42
 800a084:	607b      	str	r3, [r7, #4]
    CDC_IN_EP[i] = in_ep;
 800a086:	7bfb      	ldrb	r3, [r7, #15]
 800a088:	491c      	ldr	r1, [pc, #112]	@ (800a0fc <USBD_Update_CDC_ACM_DESC+0xf4>)
 800a08a:	787a      	ldrb	r2, [r7, #1]
 800a08c:	54ca      	strb	r2, [r1, r3]
    CDC_OUT_EP[i] = out_ep;
 800a08e:	7bfb      	ldrb	r3, [r7, #15]
 800a090:	491b      	ldr	r1, [pc, #108]	@ (800a100 <USBD_Update_CDC_ACM_DESC+0xf8>)
 800a092:	7f3a      	ldrb	r2, [r7, #28]
 800a094:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_EP[i] = cmd_ep;
 800a096:	7bfb      	ldrb	r3, [r7, #15]
 800a098:	491a      	ldr	r1, [pc, #104]	@ (800a104 <USBD_Update_CDC_ACM_DESC+0xfc>)
 800a09a:	7e3a      	ldrb	r2, [r7, #24]
 800a09c:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_ITF_NBR[i] = cmd_itf;
 800a09e:	7bfb      	ldrb	r3, [r7, #15]
 800a0a0:	4919      	ldr	r1, [pc, #100]	@ (800a108 <USBD_Update_CDC_ACM_DESC+0x100>)
 800a0a2:	78fa      	ldrb	r2, [r7, #3]
 800a0a4:	54ca      	strb	r2, [r1, r3]
    CDC_COM_ITF_NBR[i] = com_itf;
 800a0a6:	7bfb      	ldrb	r3, [r7, #15]
 800a0a8:	4918      	ldr	r1, [pc, #96]	@ (800a10c <USBD_Update_CDC_ACM_DESC+0x104>)
 800a0aa:	78ba      	ldrb	r2, [r7, #2]
 800a0ac:	54ca      	strb	r2, [r1, r3]
    CDC_STR_DESC_IDX[i] = str_idx;
 800a0ae:	7bfb      	ldrb	r3, [r7, #15]
 800a0b0:	4917      	ldr	r1, [pc, #92]	@ (800a110 <USBD_Update_CDC_ACM_DESC+0x108>)
 800a0b2:	f897 2020 	ldrb.w	r2, [r7, #32]
 800a0b6:	54ca      	strb	r2, [r1, r3]

    in_ep += 2;
 800a0b8:	787b      	ldrb	r3, [r7, #1]
 800a0ba:	3302      	adds	r3, #2
 800a0bc:	707b      	strb	r3, [r7, #1]
    cmd_ep = in_ep + 1;
 800a0be:	787b      	ldrb	r3, [r7, #1]
 800a0c0:	3301      	adds	r3, #1
 800a0c2:	763b      	strb	r3, [r7, #24]
    out_ep++;
 800a0c4:	7f3b      	ldrb	r3, [r7, #28]
 800a0c6:	3301      	adds	r3, #1
 800a0c8:	773b      	strb	r3, [r7, #28]
    str_idx++;
 800a0ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a0ce:	3301      	adds	r3, #1
 800a0d0:	f887 3020 	strb.w	r3, [r7, #32]

    cmd_itf += 2;
 800a0d4:	78fb      	ldrb	r3, [r7, #3]
 800a0d6:	3302      	adds	r3, #2
 800a0d8:	70fb      	strb	r3, [r7, #3]
    com_itf = cmd_itf + 1;
 800a0da:	78fb      	ldrb	r3, [r7, #3]
 800a0dc:	3301      	adds	r3, #1
 800a0de:	70bb      	strb	r3, [r7, #2]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800a0e0:	7bfb      	ldrb	r3, [r7, #15]
 800a0e2:	3301      	adds	r3, #1
 800a0e4:	73fb      	strb	r3, [r7, #15]
 800a0e6:	7bfb      	ldrb	r3, [r7, #15]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d0a0      	beq.n	800a02e <USBD_Update_CDC_ACM_DESC+0x26>
  }
}
 800a0ec:	bf00      	nop
 800a0ee:	bf00      	nop
 800a0f0:	3714      	adds	r7, #20
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f8:	4770      	bx	lr
 800a0fa:	bf00      	nop
 800a0fc:	2000a114 	.word	0x2000a114
 800a100:	2000a118 	.word	0x2000a118
 800a104:	2000a11c 	.word	0x2000a11c
 800a108:	2000a120 	.word	0x2000a120
 800a10c:	2000a124 	.word	0x2000a124
 800a110:	2000a128 	.word	0x2000a128

0800a114 <USBD_COMPOSITE_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b082      	sub	sp, #8
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	460b      	mov	r3, r1
 800a11e:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.Init(pdev, cfgidx);
 800a120:	4b08      	ldr	r3, [pc, #32]	@ (800a144 <USBD_COMPOSITE_Init+0x30>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	78fa      	ldrb	r2, [r7, #3]
 800a126:	4611      	mov	r1, r2
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	4798      	blx	r3
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.Init(pdev, cfgidx);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.Init(pdev, cfgidx);
 800a12c:	4b06      	ldr	r3, [pc, #24]	@ (800a148 <USBD_COMPOSITE_Init+0x34>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	78fa      	ldrb	r2, [r7, #3]
 800a132:	4611      	mov	r1, r2
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.Init(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 800a138:	2300      	movs	r3, #0
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3708      	adds	r7, #8
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}
 800a142:	bf00      	nop
 800a144:	200000bc 	.word	0x200000bc
 800a148:	200001dc 	.word	0x200001dc

0800a14c <USBD_COMPOSITE_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b082      	sub	sp, #8
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
 800a154:	460b      	mov	r3, r1
 800a156:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.DeInit(pdev, cfgidx);
 800a158:	4b08      	ldr	r3, [pc, #32]	@ (800a17c <USBD_COMPOSITE_DeInit+0x30>)
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	78fa      	ldrb	r2, [r7, #3]
 800a15e:	4611      	mov	r1, r2
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	4798      	blx	r3
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.DeInit(pdev, cfgidx);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.DeInit(pdev, cfgidx);
 800a164:	4b06      	ldr	r3, [pc, #24]	@ (800a180 <USBD_COMPOSITE_DeInit+0x34>)
 800a166:	685b      	ldr	r3, [r3, #4]
 800a168:	78fa      	ldrb	r2, [r7, #3]
 800a16a:	4611      	mov	r1, r2
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.DeInit(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 800a170:	2300      	movs	r3, #0
}
 800a172:	4618      	mov	r0, r3
 800a174:	3708      	adds	r7, #8
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}
 800a17a:	bf00      	nop
 800a17c:	200000bc 	.word	0x200000bc
 800a180:	200001dc 	.word	0x200001dc

0800a184 <USBD_COMPOSITE_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Setup(USBD_HandleTypeDef *pdev,
                                    USBD_SetupReqTypedef *req)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b084      	sub	sp, #16
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	6039      	str	r1, [r7, #0]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800a18e:	2300      	movs	r3, #0
 800a190:	73fb      	strb	r3, [r7, #15]
 800a192:	e019      	b.n	800a1c8 <USBD_COMPOSITE_Setup+0x44>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	889b      	ldrh	r3, [r3, #4]
 800a198:	b2da      	uxtb	r2, r3
 800a19a:	7bfb      	ldrb	r3, [r7, #15]
 800a19c:	4915      	ldr	r1, [pc, #84]	@ (800a1f4 <USBD_COMPOSITE_Setup+0x70>)
 800a19e:	5ccb      	ldrb	r3, [r1, r3]
 800a1a0:	429a      	cmp	r2, r3
 800a1a2:	d007      	beq.n	800a1b4 <USBD_COMPOSITE_Setup+0x30>
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	889b      	ldrh	r3, [r3, #4]
 800a1a8:	b2da      	uxtb	r2, r3
 800a1aa:	7bfb      	ldrb	r3, [r7, #15]
 800a1ac:	4912      	ldr	r1, [pc, #72]	@ (800a1f8 <USBD_COMPOSITE_Setup+0x74>)
 800a1ae:	5ccb      	ldrb	r3, [r1, r3]
 800a1b0:	429a      	cmp	r2, r3
 800a1b2:	d106      	bne.n	800a1c2 <USBD_COMPOSITE_Setup+0x3e>
    {
      return USBD_CDC_ACM.Setup(pdev, req);
 800a1b4:	4b11      	ldr	r3, [pc, #68]	@ (800a1fc <USBD_COMPOSITE_Setup+0x78>)
 800a1b6:	689b      	ldr	r3, [r3, #8]
 800a1b8:	6839      	ldr	r1, [r7, #0]
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	4798      	blx	r3
 800a1be:	4603      	mov	r3, r0
 800a1c0:	e014      	b.n	800a1ec <USBD_COMPOSITE_Setup+0x68>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800a1c2:	7bfb      	ldrb	r3, [r7, #15]
 800a1c4:	3301      	adds	r3, #1
 800a1c6:	73fb      	strb	r3, [r7, #15]
 800a1c8:	7bfb      	ldrb	r3, [r7, #15]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d0e2      	beq.n	800a194 <USBD_COMPOSITE_Setup+0x10>
  {
    return USBD_HID_KEYBOARD.Setup(pdev, req);
  }
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (LOBYTE(req->wIndex) == CUSTOM_HID_ITF_NBR)
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	889b      	ldrh	r3, [r3, #4]
 800a1d2:	b2da      	uxtb	r2, r3
 800a1d4:	4b0a      	ldr	r3, [pc, #40]	@ (800a200 <USBD_COMPOSITE_Setup+0x7c>)
 800a1d6:	781b      	ldrb	r3, [r3, #0]
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	d106      	bne.n	800a1ea <USBD_COMPOSITE_Setup+0x66>
  {
    return USBD_HID_CUSTOM.Setup(pdev, req);
 800a1dc:	4b09      	ldr	r3, [pc, #36]	@ (800a204 <USBD_COMPOSITE_Setup+0x80>)
 800a1de:	689b      	ldr	r3, [r3, #8]
 800a1e0:	6839      	ldr	r1, [r7, #0]
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	4798      	blx	r3
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	e000      	b.n	800a1ec <USBD_COMPOSITE_Setup+0x68>
  {
    USBD_PRNT.Setup(pdev, req);
  }
#endif

  return USBD_FAIL;
 800a1ea:	2303      	movs	r3, #3
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	3710      	adds	r7, #16
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}
 800a1f4:	2000a120 	.word	0x2000a120
 800a1f8:	2000a124 	.word	0x2000a124
 800a1fc:	200000bc 	.word	0x200000bc
 800a200:	2000a460 	.word	0x2000a460
 800a204:	200001dc 	.word	0x200001dc

0800a208 <USBD_COMPOSITE_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b084      	sub	sp, #16
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
 800a210:	460b      	mov	r3, r1
 800a212:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800a214:	2300      	movs	r3, #0
 800a216:	73fb      	strb	r3, [r7, #15]
 800a218:	e01a      	b.n	800a250 <USBD_COMPOSITE_DataIn+0x48>
  {
    if (epnum == (CDC_IN_EP[i] & 0x7F) || epnum == (CDC_CMD_EP[i] & 0x7F))
 800a21a:	78fa      	ldrb	r2, [r7, #3]
 800a21c:	7bfb      	ldrb	r3, [r7, #15]
 800a21e:	4918      	ldr	r1, [pc, #96]	@ (800a280 <USBD_COMPOSITE_DataIn+0x78>)
 800a220:	5ccb      	ldrb	r3, [r1, r3]
 800a222:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a226:	429a      	cmp	r2, r3
 800a228:	d007      	beq.n	800a23a <USBD_COMPOSITE_DataIn+0x32>
 800a22a:	78fa      	ldrb	r2, [r7, #3]
 800a22c:	7bfb      	ldrb	r3, [r7, #15]
 800a22e:	4915      	ldr	r1, [pc, #84]	@ (800a284 <USBD_COMPOSITE_DataIn+0x7c>)
 800a230:	5ccb      	ldrb	r3, [r1, r3]
 800a232:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a236:	429a      	cmp	r2, r3
 800a238:	d107      	bne.n	800a24a <USBD_COMPOSITE_DataIn+0x42>
    {
      return USBD_CDC_ACM.DataIn(pdev, epnum);
 800a23a:	4b13      	ldr	r3, [pc, #76]	@ (800a288 <USBD_COMPOSITE_DataIn+0x80>)
 800a23c:	695b      	ldr	r3, [r3, #20]
 800a23e:	78fa      	ldrb	r2, [r7, #3]
 800a240:	4611      	mov	r1, r2
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	4798      	blx	r3
 800a246:	4603      	mov	r3, r0
 800a248:	e015      	b.n	800a276 <USBD_COMPOSITE_DataIn+0x6e>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800a24a:	7bfb      	ldrb	r3, [r7, #15]
 800a24c:	3301      	adds	r3, #1
 800a24e:	73fb      	strb	r3, [r7, #15]
 800a250:	7bfb      	ldrb	r3, [r7, #15]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d0e1      	beq.n	800a21a <USBD_COMPOSITE_DataIn+0x12>
  {
    return USBD_HID_KEYBOARD.DataIn(pdev, epnum);
  }
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (epnum == (CUSTOM_HID_IN_EP & 0x7F))
 800a256:	78fa      	ldrb	r2, [r7, #3]
 800a258:	4b0c      	ldr	r3, [pc, #48]	@ (800a28c <USBD_COMPOSITE_DataIn+0x84>)
 800a25a:	781b      	ldrb	r3, [r3, #0]
 800a25c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a260:	429a      	cmp	r2, r3
 800a262:	d107      	bne.n	800a274 <USBD_COMPOSITE_DataIn+0x6c>
  {
    return USBD_HID_CUSTOM.DataIn(pdev, epnum);
 800a264:	4b0a      	ldr	r3, [pc, #40]	@ (800a290 <USBD_COMPOSITE_DataIn+0x88>)
 800a266:	695b      	ldr	r3, [r3, #20]
 800a268:	78fa      	ldrb	r2, [r7, #3]
 800a26a:	4611      	mov	r1, r2
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	4798      	blx	r3
 800a270:	4603      	mov	r3, r0
 800a272:	e000      	b.n	800a276 <USBD_COMPOSITE_DataIn+0x6e>
  {
    USBD_PRNT.DataIn(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 800a274:	2303      	movs	r3, #3
}
 800a276:	4618      	mov	r0, r3
 800a278:	3710      	adds	r7, #16
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}
 800a27e:	bf00      	nop
 800a280:	2000a114 	.word	0x2000a114
 800a284:	2000a11c 	.word	0x2000a11c
 800a288:	200000bc 	.word	0x200000bc
 800a28c:	200001da 	.word	0x200001da
 800a290:	200001dc 	.word	0x200001dc

0800a294 <USBD_COMPOSITE_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b082      	sub	sp, #8
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.EP0_RxReady(pdev);
 800a29c:	4b06      	ldr	r3, [pc, #24]	@ (800a2b8 <USBD_COMPOSITE_EP0_RxReady+0x24>)
 800a29e:	691b      	ldr	r3, [r3, #16]
 800a2a0:	6878      	ldr	r0, [r7, #4]
 800a2a2:	4798      	blx	r3
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.EP0_RxReady(pdev);
 800a2a4:	4b05      	ldr	r3, [pc, #20]	@ (800a2bc <USBD_COMPOSITE_EP0_RxReady+0x28>)
 800a2a6:	691b      	ldr	r3, [r3, #16]
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	4798      	blx	r3
  USBD_DFU.EP0_RxReady(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800a2ac:	2300      	movs	r3, #0
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3708      	adds	r7, #8
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}
 800a2b6:	bf00      	nop
 800a2b8:	200000bc 	.word	0x200000bc
 800a2bc:	200001dc 	.word	0x200001dc

0800a2c0 <USBD_COMPOSITE_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b083      	sub	sp, #12
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
  USBD_DFU.EP0_TxSent(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800a2c8:	2300      	movs	r3, #0
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	370c      	adds	r7, #12
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d4:	4770      	bx	lr

0800a2d6 <USBD_COMPOSITE_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_SOF(USBD_HandleTypeDef *pdev)
{
 800a2d6:	b480      	push	{r7}
 800a2d8:	b083      	sub	sp, #12
 800a2da:	af00      	add	r7, sp, #0
 800a2dc:	6078      	str	r0, [r7, #4]
  USBD_DFU.SOF(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800a2de:	2300      	movs	r3, #0
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	370c      	adds	r7, #12
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ea:	4770      	bx	lr

0800a2ec <USBD_COMPOSITE_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b083      	sub	sp, #12
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
 800a2f4:	460b      	mov	r3, r1
 800a2f6:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800a2f8:	2300      	movs	r3, #0
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	370c      	adds	r7, #12
 800a2fe:	46bd      	mov	sp, r7
 800a300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a304:	4770      	bx	lr

0800a306 <USBD_COMPOSITE_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a306:	b480      	push	{r7}
 800a308:	b083      	sub	sp, #12
 800a30a:	af00      	add	r7, sp, #0
 800a30c:	6078      	str	r0, [r7, #4]
 800a30e:	460b      	mov	r3, r1
 800a310:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800a312:	2300      	movs	r3, #0
}
 800a314:	4618      	mov	r0, r3
 800a316:	370c      	adds	r7, #12
 800a318:	46bd      	mov	sp, r7
 800a31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31e:	4770      	bx	lr

0800a320 <USBD_COMPOSITE_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b084      	sub	sp, #16
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
 800a328:	460b      	mov	r3, r1
 800a32a:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800a32c:	2300      	movs	r3, #0
 800a32e:	73fb      	strb	r3, [r7, #15]
 800a330:	e010      	b.n	800a354 <USBD_COMPOSITE_DataOut+0x34>
  {
    if (epnum == CDC_OUT_EP[i])
 800a332:	7bfb      	ldrb	r3, [r7, #15]
 800a334:	4a12      	ldr	r2, [pc, #72]	@ (800a380 <USBD_COMPOSITE_DataOut+0x60>)
 800a336:	5cd3      	ldrb	r3, [r2, r3]
 800a338:	78fa      	ldrb	r2, [r7, #3]
 800a33a:	429a      	cmp	r2, r3
 800a33c:	d107      	bne.n	800a34e <USBD_COMPOSITE_DataOut+0x2e>
    {
      return USBD_CDC_ACM.DataOut(pdev, epnum);
 800a33e:	4b11      	ldr	r3, [pc, #68]	@ (800a384 <USBD_COMPOSITE_DataOut+0x64>)
 800a340:	699b      	ldr	r3, [r3, #24]
 800a342:	78fa      	ldrb	r2, [r7, #3]
 800a344:	4611      	mov	r1, r2
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	4798      	blx	r3
 800a34a:	4603      	mov	r3, r0
 800a34c:	e013      	b.n	800a376 <USBD_COMPOSITE_DataOut+0x56>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800a34e:	7bfb      	ldrb	r3, [r7, #15]
 800a350:	3301      	adds	r3, #1
 800a352:	73fb      	strb	r3, [r7, #15]
 800a354:	7bfb      	ldrb	r3, [r7, #15]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d0eb      	beq.n	800a332 <USBD_COMPOSITE_DataOut+0x12>
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (epnum == CUSTOM_HID_OUT_EP)
 800a35a:	4b0b      	ldr	r3, [pc, #44]	@ (800a388 <USBD_COMPOSITE_DataOut+0x68>)
 800a35c:	781b      	ldrb	r3, [r3, #0]
 800a35e:	78fa      	ldrb	r2, [r7, #3]
 800a360:	429a      	cmp	r2, r3
 800a362:	d107      	bne.n	800a374 <USBD_COMPOSITE_DataOut+0x54>
  {
    return USBD_HID_CUSTOM.DataOut(pdev, epnum);
 800a364:	4b09      	ldr	r3, [pc, #36]	@ (800a38c <USBD_COMPOSITE_DataOut+0x6c>)
 800a366:	699b      	ldr	r3, [r3, #24]
 800a368:	78fa      	ldrb	r2, [r7, #3]
 800a36a:	4611      	mov	r1, r2
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	4798      	blx	r3
 800a370:	4603      	mov	r3, r0
 800a372:	e000      	b.n	800a376 <USBD_COMPOSITE_DataOut+0x56>
  {
    USBD_PRNT.DataOut(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 800a374:	2303      	movs	r3, #3
}
 800a376:	4618      	mov	r0, r3
 800a378:	3710      	adds	r7, #16
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}
 800a37e:	bf00      	nop
 800a380:	2000a118 	.word	0x2000a118
 800a384:	200000bc 	.word	0x200000bc
 800a388:	200001db 	.word	0x200001db
 800a38c:	200001dc 	.word	0x200001dc

0800a390 <USBD_COMPOSITE_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetHSCfgDesc(uint16_t *length)
{
 800a390:	b480      	push	{r7}
 800a392:	b083      	sub	sp, #12
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	226b      	movs	r2, #107	@ 0x6b
 800a39c:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 800a39e:	4b03      	ldr	r3, [pc, #12]	@ (800a3ac <USBD_COMPOSITE_GetHSCfgDesc+0x1c>)
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	370c      	adds	r7, #12
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3aa:	4770      	bx	lr
 800a3ac:	2000a3b4 	.word	0x2000a3b4

0800a3b0 <USBD_COMPOSITE_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetFSCfgDesc(uint16_t *length)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b083      	sub	sp, #12
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	226b      	movs	r2, #107	@ 0x6b
 800a3bc:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
 800a3be:	4b03      	ldr	r3, [pc, #12]	@ (800a3cc <USBD_COMPOSITE_GetFSCfgDesc+0x1c>)
}
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	370c      	adds	r7, #12
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ca:	4770      	bx	lr
 800a3cc:	2000a348 	.word	0x2000a348

0800a3d0 <USBD_COMPOSITE_GetOtherSpeedCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b083      	sub	sp, #12
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
#if (USBD_USE_HS == 1)
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
#else
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	226b      	movs	r2, #107	@ 0x6b
 800a3dc:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 800a3de:	4b03      	ldr	r3, [pc, #12]	@ (800a3ec <USBD_COMPOSITE_GetOtherSpeedCfgDesc+0x1c>)
#endif
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	370c      	adds	r7, #12
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ea:	4770      	bx	lr
 800a3ec:	2000a3b4 	.word	0x2000a3b4

0800a3f0 <USBD_COMPOSITE_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_COMPOSITE_GetDeviceQualifierDesc(uint16_t *length)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b083      	sub	sp, #12
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_DeviceQualifierDesc);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	220a      	movs	r2, #10
 800a3fc:	801a      	strh	r2, [r3, #0]
  return USBD_COMPOSITE_DeviceQualifierDesc;
 800a3fe:	4b03      	ldr	r3, [pc, #12]	@ (800a40c <USBD_COMPOSITE_GetDeviceQualifierDesc+0x1c>)
}
 800a400:	4618      	mov	r0, r3
 800a402:	370c      	adds	r7, #12
 800a404:	46bd      	mov	sp, r7
 800a406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40a:	4770      	bx	lr
 800a40c:	200001d0 	.word	0x200001d0

0800a410 <USBD_COMPOSITE_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_COMPOSITE_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b08a      	sub	sp, #40	@ 0x28
 800a414:	af00      	add	r7, sp, #0
 800a416:	60f8      	str	r0, [r7, #12]
 800a418:	460b      	mov	r3, r1
 800a41a:	607a      	str	r2, [r7, #4]
 800a41c:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[64];

  /* Check if the requested string interface is supported */
  if (index <= USBD_Track_String_Index)
 800a41e:	4b20      	ldr	r3, [pc, #128]	@ (800a4a0 <USBD_COMPOSITE_GetUsrStringDesc+0x90>)
 800a420:	781b      	ldrb	r3, [r3, #0]
 800a422:	7afa      	ldrb	r2, [r7, #11]
 800a424:	429a      	cmp	r2, r3
 800a426:	d835      	bhi.n	800a494 <USBD_COMPOSITE_GetUsrStringDesc+0x84>
  {
#if (USBD_USE_CDC_ACM == 1)
    char str_buffer[16] = "";
 800a428:	f107 0314 	add.w	r3, r7, #20
 800a42c:	2200      	movs	r2, #0
 800a42e:	601a      	str	r2, [r3, #0]
 800a430:	605a      	str	r2, [r3, #4]
 800a432:	609a      	str	r2, [r3, #8]
 800a434:	60da      	str	r2, [r3, #12]
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800a436:	2300      	movs	r3, #0
 800a438:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a43c:	e01a      	b.n	800a474 <USBD_COMPOSITE_GetUsrStringDesc+0x64>
    {
      if (index == CDC_STR_DESC_IDX[i])
 800a43e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a442:	4a18      	ldr	r2, [pc, #96]	@ (800a4a4 <USBD_COMPOSITE_GetUsrStringDesc+0x94>)
 800a444:	5cd3      	ldrb	r3, [r2, r3]
 800a446:	7afa      	ldrb	r2, [r7, #11]
 800a448:	429a      	cmp	r2, r3
 800a44a:	d10e      	bne.n	800a46a <USBD_COMPOSITE_GetUsrStringDesc+0x5a>
      {
        snprintf(str_buffer, sizeof(str_buffer), CDC_ACM_STR_DESC, i);
 800a44c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a450:	f107 0014 	add.w	r0, r7, #20
 800a454:	4a14      	ldr	r2, [pc, #80]	@ (800a4a8 <USBD_COMPOSITE_GetUsrStringDesc+0x98>)
 800a456:	2110      	movs	r1, #16
 800a458:	f002 f8bc 	bl	800c5d4 <sniprintf>
        USBD_GetString((uint8_t *)str_buffer, USBD_StrDesc, length);
 800a45c:	f107 0314 	add.w	r3, r7, #20
 800a460:	687a      	ldr	r2, [r7, #4]
 800a462:	4912      	ldr	r1, [pc, #72]	@ (800a4ac <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 800a464:	4618      	mov	r0, r3
 800a466:	f001 fcf4 	bl	800be52 <USBD_GetString>
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800a46a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a46e:	3301      	adds	r3, #1
 800a470:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a474:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d0e0      	beq.n	800a43e <USBD_COMPOSITE_GetUsrStringDesc+0x2e>
    {
      USBD_GetString((uint8_t *)HID_KEYBOARD_STR_DESC, USBD_StrDesc, length);
    }
#endif
#if (USBD_USE_HID_CUSTOM == 1)
    if (index == CUSTOM_HID_STR_DESC_IDX)
 800a47c:	4b0c      	ldr	r3, [pc, #48]	@ (800a4b0 <USBD_COMPOSITE_GetUsrStringDesc+0xa0>)
 800a47e:	781b      	ldrb	r3, [r3, #0]
 800a480:	7afa      	ldrb	r2, [r7, #11]
 800a482:	429a      	cmp	r2, r3
 800a484:	d104      	bne.n	800a490 <USBD_COMPOSITE_GetUsrStringDesc+0x80>
    {
      USBD_GetString((uint8_t *)CUSTOM_HID_STR_DESC, USBD_StrDesc, length);
 800a486:	687a      	ldr	r2, [r7, #4]
 800a488:	4908      	ldr	r1, [pc, #32]	@ (800a4ac <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 800a48a:	480a      	ldr	r0, [pc, #40]	@ (800a4b4 <USBD_COMPOSITE_GetUsrStringDesc+0xa4>)
 800a48c:	f001 fce1 	bl	800be52 <USBD_GetString>
    if (index == PRINTER_STR_DESC_IDX)
    {
      USBD_GetString((uint8_t *)PRNT_STR_DESC, USBD_StrDesc, length);
    }
#endif
    return USBD_StrDesc;
 800a490:	4b06      	ldr	r3, [pc, #24]	@ (800a4ac <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 800a492:	e000      	b.n	800a496 <USBD_COMPOSITE_GetUsrStringDesc+0x86>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 800a494:	2300      	movs	r3, #0
  }
}
 800a496:	4618      	mov	r0, r3
 800a498:	3728      	adds	r7, #40	@ 0x28
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}
 800a49e:	bf00      	nop
 800a4a0:	200001cc 	.word	0x200001cc
 800a4a4:	2000a128 	.word	0x2000a128
 800a4a8:	0800cf90 	.word	0x0800cf90
 800a4ac:	2000a420 	.word	0x2000a420
 800a4b0:	2000a461 	.word	0x2000a461
 800a4b4:	0800cfa0 	.word	0x0800cfa0

0800a4b8 <USBD_COMPOSITE_Mount_Class>:
#endif

void USBD_COMPOSITE_Mount_Class(void)
{
 800a4b8:	b590      	push	{r4, r7, lr}
 800a4ba:	b089      	sub	sp, #36	@ 0x24
 800a4bc:	af04      	add	r7, sp, #16
  uint16_t len = 0;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	80bb      	strh	r3, [r7, #4]
  uint8_t *ptr = NULL;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	60fb      	str	r3, [r7, #12]

  uint8_t in_ep_track = 0x81;
 800a4c6:	2381      	movs	r3, #129	@ 0x81
 800a4c8:	72fb      	strb	r3, [r7, #11]
  uint8_t out_ep_track = 0x01;
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	72bb      	strb	r3, [r7, #10]
  uint8_t interface_no_track = 0x00;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	727b      	strb	r3, [r7, #9]
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_HID_CUSTOM == 1)
  ptr = USBD_HID_CUSTOM.GetFSConfigDescriptor(&len);
 800a4d2:	4b74      	ldr	r3, [pc, #464]	@ (800a6a4 <USBD_COMPOSITE_Mount_Class+0x1ec>)
 800a4d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4d6:	1d3a      	adds	r2, r7, #4
 800a4d8:	4610      	mov	r0, r2
 800a4da:	4798      	blx	r3
 800a4dc:	60f8      	str	r0, [r7, #12]
  USBD_Update_HID_Custom_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 800a4de:	4b72      	ldr	r3, [pc, #456]	@ (800a6a8 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800a4e0:	781b      	ldrb	r3, [r3, #0]
 800a4e2:	7ab8      	ldrb	r0, [r7, #10]
 800a4e4:	7afa      	ldrb	r2, [r7, #11]
 800a4e6:	7a79      	ldrb	r1, [r7, #9]
 800a4e8:	9300      	str	r3, [sp, #0]
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	68f8      	ldr	r0, [r7, #12]
 800a4ee:	f000 fbcf 	bl	800ac90 <USBD_Update_HID_Custom_DESC>
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_HID_CUSTOM_DESC, ptr + 0x09, len - 0x09);
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	3309      	adds	r3, #9
 800a4f6:	88ba      	ldrh	r2, [r7, #4]
 800a4f8:	3a09      	subs	r2, #9
 800a4fa:	4619      	mov	r1, r3
 800a4fc:	486b      	ldr	r0, [pc, #428]	@ (800a6ac <USBD_COMPOSITE_Mount_Class+0x1f4>)
 800a4fe:	f002 f8d3 	bl	800c6a8 <memcpy>

  ptr = USBD_HID_CUSTOM.GetHSConfigDescriptor(&len);
 800a502:	4b68      	ldr	r3, [pc, #416]	@ (800a6a4 <USBD_COMPOSITE_Mount_Class+0x1ec>)
 800a504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a506:	1d3a      	adds	r2, r7, #4
 800a508:	4610      	mov	r0, r2
 800a50a:	4798      	blx	r3
 800a50c:	60f8      	str	r0, [r7, #12]
  USBD_Update_HID_Custom_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 800a50e:	4b66      	ldr	r3, [pc, #408]	@ (800a6a8 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800a510:	781b      	ldrb	r3, [r3, #0]
 800a512:	7ab8      	ldrb	r0, [r7, #10]
 800a514:	7afa      	ldrb	r2, [r7, #11]
 800a516:	7a79      	ldrb	r1, [r7, #9]
 800a518:	9300      	str	r3, [sp, #0]
 800a51a:	4603      	mov	r3, r0
 800a51c:	68f8      	ldr	r0, [r7, #12]
 800a51e:	f000 fbb7 	bl	800ac90 <USBD_Update_HID_Custom_DESC>
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_HID_CUSTOM_DESC, ptr + 0x09, len - 0x09);
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	3309      	adds	r3, #9
 800a526:	88ba      	ldrh	r2, [r7, #4]
 800a528:	3a09      	subs	r2, #9
 800a52a:	4619      	mov	r1, r3
 800a52c:	4860      	ldr	r0, [pc, #384]	@ (800a6b0 <USBD_COMPOSITE_Mount_Class+0x1f8>)
 800a52e:	f002 f8bb 	bl	800c6a8 <memcpy>

  in_ep_track += 1;
 800a532:	7afb      	ldrb	r3, [r7, #11]
 800a534:	3301      	adds	r3, #1
 800a536:	72fb      	strb	r3, [r7, #11]
  out_ep_track += 1;
 800a538:	7abb      	ldrb	r3, [r7, #10]
 800a53a:	3301      	adds	r3, #1
 800a53c:	72bb      	strb	r3, [r7, #10]
  interface_no_track += 1;
 800a53e:	7a7b      	ldrb	r3, [r7, #9]
 800a540:	3301      	adds	r3, #1
 800a542:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += 1;
 800a544:	4b58      	ldr	r3, [pc, #352]	@ (800a6a8 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800a546:	781b      	ldrb	r3, [r3, #0]
 800a548:	3301      	adds	r3, #1
 800a54a:	b2da      	uxtb	r2, r3
 800a54c:	4b56      	ldr	r3, [pc, #344]	@ (800a6a8 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800a54e:	701a      	strb	r2, [r3, #0]
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_CDC_ACM == 1)
  ptr = USBD_CDC_ACM.GetFSConfigDescriptor(&len);
 800a550:	4b58      	ldr	r3, [pc, #352]	@ (800a6b4 <USBD_COMPOSITE_Mount_Class+0x1fc>)
 800a552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a554:	1d3a      	adds	r2, r7, #4
 800a556:	4610      	mov	r0, r2
 800a558:	4798      	blx	r3
 800a55a:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 800a55c:	7a7b      	ldrb	r3, [r7, #9]
 800a55e:	3301      	adds	r3, #1
 800a560:	b2d8      	uxtb	r0, r3
 800a562:	7afb      	ldrb	r3, [r7, #11]
 800a564:	3301      	adds	r3, #1
 800a566:	b2db      	uxtb	r3, r3
 800a568:	4a4f      	ldr	r2, [pc, #316]	@ (800a6a8 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800a56a:	7812      	ldrb	r2, [r2, #0]
 800a56c:	7afc      	ldrb	r4, [r7, #11]
 800a56e:	7a79      	ldrb	r1, [r7, #9]
 800a570:	9202      	str	r2, [sp, #8]
 800a572:	7aba      	ldrb	r2, [r7, #10]
 800a574:	9201      	str	r2, [sp, #4]
 800a576:	9300      	str	r3, [sp, #0]
 800a578:	4623      	mov	r3, r4
 800a57a:	4602      	mov	r2, r0
 800a57c:	68f8      	ldr	r0, [r7, #12]
 800a57e:	f7ff fd43 	bl	800a008 <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	3309      	adds	r3, #9
 800a586:	88ba      	ldrh	r2, [r7, #4]
 800a588:	3a09      	subs	r2, #9
 800a58a:	4619      	mov	r1, r3
 800a58c:	484a      	ldr	r0, [pc, #296]	@ (800a6b8 <USBD_COMPOSITE_Mount_Class+0x200>)
 800a58e:	f002 f88b 	bl	800c6a8 <memcpy>

  ptr = USBD_CDC_ACM.GetHSConfigDescriptor(&len);
 800a592:	4b48      	ldr	r3, [pc, #288]	@ (800a6b4 <USBD_COMPOSITE_Mount_Class+0x1fc>)
 800a594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a596:	1d3a      	adds	r2, r7, #4
 800a598:	4610      	mov	r0, r2
 800a59a:	4798      	blx	r3
 800a59c:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 800a59e:	7a7b      	ldrb	r3, [r7, #9]
 800a5a0:	3301      	adds	r3, #1
 800a5a2:	b2d8      	uxtb	r0, r3
 800a5a4:	7afb      	ldrb	r3, [r7, #11]
 800a5a6:	3301      	adds	r3, #1
 800a5a8:	b2db      	uxtb	r3, r3
 800a5aa:	4a3f      	ldr	r2, [pc, #252]	@ (800a6a8 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800a5ac:	7812      	ldrb	r2, [r2, #0]
 800a5ae:	7afc      	ldrb	r4, [r7, #11]
 800a5b0:	7a79      	ldrb	r1, [r7, #9]
 800a5b2:	9202      	str	r2, [sp, #8]
 800a5b4:	7aba      	ldrb	r2, [r7, #10]
 800a5b6:	9201      	str	r2, [sp, #4]
 800a5b8:	9300      	str	r3, [sp, #0]
 800a5ba:	4623      	mov	r3, r4
 800a5bc:	4602      	mov	r2, r0
 800a5be:	68f8      	ldr	r0, [r7, #12]
 800a5c0:	f7ff fd22 	bl	800a008 <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	3309      	adds	r3, #9
 800a5c8:	88ba      	ldrh	r2, [r7, #4]
 800a5ca:	3a09      	subs	r2, #9
 800a5cc:	4619      	mov	r1, r3
 800a5ce:	483b      	ldr	r0, [pc, #236]	@ (800a6bc <USBD_COMPOSITE_Mount_Class+0x204>)
 800a5d0:	f002 f86a 	bl	800c6a8 <memcpy>

  in_ep_track += 2 * USBD_CDC_ACM_COUNT;
 800a5d4:	7afb      	ldrb	r3, [r7, #11]
 800a5d6:	3302      	adds	r3, #2
 800a5d8:	72fb      	strb	r3, [r7, #11]
  out_ep_track += 1 * USBD_CDC_ACM_COUNT;
 800a5da:	7abb      	ldrb	r3, [r7, #10]
 800a5dc:	3301      	adds	r3, #1
 800a5de:	72bb      	strb	r3, [r7, #10]
  interface_no_track += 2 * USBD_CDC_ACM_COUNT;
 800a5e0:	7a7b      	ldrb	r3, [r7, #9]
 800a5e2:	3302      	adds	r3, #2
 800a5e4:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += USBD_CDC_ACM_COUNT;
 800a5e6:	4b30      	ldr	r3, [pc, #192]	@ (800a6a8 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800a5e8:	781b      	ldrb	r3, [r3, #0]
 800a5ea:	3301      	adds	r3, #1
 800a5ec:	b2da      	uxtb	r2, r3
 800a5ee:	4b2e      	ldr	r3, [pc, #184]	@ (800a6a8 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800a5f0:	701a      	strb	r2, [r3, #0]
#endif

  uint16_t CFG_SIZE = sizeof(USBD_COMPOSITE_CFG_DESC_t);
 800a5f2:	236b      	movs	r3, #107	@ 0x6b
 800a5f4:	80fb      	strh	r3, [r7, #6]
  ptr = USBD_COMPOSITE_HSCfgDesc.CONFIG_DESC;
 800a5f6:	4b32      	ldr	r3, [pc, #200]	@ (800a6c0 <USBD_COMPOSITE_Mount_Class+0x208>)
 800a5f8:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	2209      	movs	r2, #9
 800a5fe:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	3301      	adds	r3, #1
 800a604:	2202      	movs	r2, #2
 800a606:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	3302      	adds	r3, #2
 800a60c:	88fa      	ldrh	r2, [r7, #6]
 800a60e:	b2d2      	uxtb	r2, r2
 800a610:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 800a612:	88fb      	ldrh	r3, [r7, #6]
 800a614:	0a1b      	lsrs	r3, r3, #8
 800a616:	b29a      	uxth	r2, r3
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	3303      	adds	r3, #3
 800a61c:	b2d2      	uxtb	r2, r2
 800a61e:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	3304      	adds	r3, #4
 800a624:	7a7a      	ldrb	r2, [r7, #9]
 800a626:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	3305      	adds	r3, #5
 800a62c:	2201      	movs	r2, #1
 800a62e:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	3306      	adds	r3, #6
 800a634:	2200      	movs	r2, #0
 800a636:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	3307      	adds	r3, #7
 800a63c:	22c0      	movs	r2, #192	@ 0xc0
 800a63e:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	3308      	adds	r3, #8
 800a644:	2232      	movs	r2, #50	@ 0x32
 800a646:	701a      	strb	r2, [r3, #0]

  ptr = USBD_COMPOSITE_FSCfgDesc.CONFIG_DESC;
 800a648:	4b1e      	ldr	r3, [pc, #120]	@ (800a6c4 <USBD_COMPOSITE_Mount_Class+0x20c>)
 800a64a:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	2209      	movs	r2, #9
 800a650:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	3301      	adds	r3, #1
 800a656:	2202      	movs	r2, #2
 800a658:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	3302      	adds	r3, #2
 800a65e:	88fa      	ldrh	r2, [r7, #6]
 800a660:	b2d2      	uxtb	r2, r2
 800a662:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 800a664:	88fb      	ldrh	r3, [r7, #6]
 800a666:	0a1b      	lsrs	r3, r3, #8
 800a668:	b29a      	uxth	r2, r3
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	3303      	adds	r3, #3
 800a66e:	b2d2      	uxtb	r2, r2
 800a670:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	3304      	adds	r3, #4
 800a676:	7a7a      	ldrb	r2, [r7, #9]
 800a678:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	3305      	adds	r3, #5
 800a67e:	2201      	movs	r2, #1
 800a680:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	3306      	adds	r3, #6
 800a686:	2200      	movs	r2, #0
 800a688:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	3307      	adds	r3, #7
 800a68e:	22c0      	movs	r2, #192	@ 0xc0
 800a690:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	3308      	adds	r3, #8
 800a696:	2232      	movs	r2, #50	@ 0x32
 800a698:	701a      	strb	r2, [r3, #0]

  (void)out_ep_track;
  (void)in_ep_track;
}
 800a69a:	bf00      	nop
 800a69c:	3714      	adds	r7, #20
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd90      	pop	{r4, r7, pc}
 800a6a2:	bf00      	nop
 800a6a4:	200001dc 	.word	0x200001dc
 800a6a8:	200001cc 	.word	0x200001cc
 800a6ac:	2000a351 	.word	0x2000a351
 800a6b0:	2000a3bd 	.word	0x2000a3bd
 800a6b4:	200000bc 	.word	0x200000bc
 800a6b8:	2000a371 	.word	0x2000a371
 800a6bc:	2000a3dd 	.word	0x2000a3dd
 800a6c0:	2000a3b4 	.word	0x2000a3b4
 800a6c4:	2000a348 	.word	0x2000a348

0800a6c8 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b084      	sub	sp, #16
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
 800a6d0:	460b      	mov	r3, r1
 800a6d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = &CUSTOM_HID_Instance;
 800a6d4:	4b43      	ldr	r3, [pc, #268]	@ (800a7e4 <USBD_CUSTOM_HID_Init+0x11c>)
 800a6d6:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d105      	bne.n	800a6ea <USBD_CUSTOM_HID_Init+0x22>
  {
    pdev->pClassData_HID_Custom = NULL;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
    return (uint8_t)USBD_EMEM;
 800a6e6:	2302      	movs	r3, #2
 800a6e8:	e078      	b.n	800a7dc <USBD_CUSTOM_HID_Init+0x114>
  }

  pdev->pClassData_HID_Custom = (void *)hhid;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	68fa      	ldr	r2, [r7, #12]
 800a6ee:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	7c1b      	ldrb	r3, [r3, #16]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d11b      	bne.n	800a732 <USBD_CUSTOM_HID_Init+0x6a>
  {
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800a6fa:	4b3b      	ldr	r3, [pc, #236]	@ (800a7e8 <USBD_CUSTOM_HID_Init+0x120>)
 800a6fc:	781b      	ldrb	r3, [r3, #0]
 800a6fe:	f003 020f 	and.w	r2, r3, #15
 800a702:	6879      	ldr	r1, [r7, #4]
 800a704:	4613      	mov	r3, r2
 800a706:	009b      	lsls	r3, r3, #2
 800a708:	4413      	add	r3, r2
 800a70a:	009b      	lsls	r3, r3, #2
 800a70c:	440b      	add	r3, r1
 800a70e:	3326      	adds	r3, #38	@ 0x26
 800a710:	2205      	movs	r2, #5
 800a712:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800a714:	4b35      	ldr	r3, [pc, #212]	@ (800a7ec <USBD_CUSTOM_HID_Init+0x124>)
 800a716:	781b      	ldrb	r3, [r3, #0]
 800a718:	f003 020f 	and.w	r2, r3, #15
 800a71c:	6879      	ldr	r1, [r7, #4]
 800a71e:	4613      	mov	r3, r2
 800a720:	009b      	lsls	r3, r3, #2
 800a722:	4413      	add	r3, r2
 800a724:	009b      	lsls	r3, r3, #2
 800a726:	440b      	add	r3, r1
 800a728:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800a72c:	2205      	movs	r2, #5
 800a72e:	801a      	strh	r2, [r3, #0]
 800a730:	e01a      	b.n	800a768 <USBD_CUSTOM_HID_Init+0xa0>
  }
  else /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800a732:	4b2d      	ldr	r3, [pc, #180]	@ (800a7e8 <USBD_CUSTOM_HID_Init+0x120>)
 800a734:	781b      	ldrb	r3, [r3, #0]
 800a736:	f003 020f 	and.w	r2, r3, #15
 800a73a:	6879      	ldr	r1, [r7, #4]
 800a73c:	4613      	mov	r3, r2
 800a73e:	009b      	lsls	r3, r3, #2
 800a740:	4413      	add	r3, r2
 800a742:	009b      	lsls	r3, r3, #2
 800a744:	440b      	add	r3, r1
 800a746:	3326      	adds	r3, #38	@ 0x26
 800a748:	2201      	movs	r2, #1
 800a74a:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800a74c:	4b27      	ldr	r3, [pc, #156]	@ (800a7ec <USBD_CUSTOM_HID_Init+0x124>)
 800a74e:	781b      	ldrb	r3, [r3, #0]
 800a750:	f003 020f 	and.w	r2, r3, #15
 800a754:	6879      	ldr	r1, [r7, #4]
 800a756:	4613      	mov	r3, r2
 800a758:	009b      	lsls	r3, r3, #2
 800a75a:	4413      	add	r3, r2
 800a75c:	009b      	lsls	r3, r3, #2
 800a75e:	440b      	add	r3, r1
 800a760:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800a764:	2201      	movs	r2, #1
 800a766:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_IN_EP, USBD_EP_TYPE_INTR,
 800a768:	4b1f      	ldr	r3, [pc, #124]	@ (800a7e8 <USBD_CUSTOM_HID_Init+0x120>)
 800a76a:	7819      	ldrb	r1, [r3, #0]
 800a76c:	2320      	movs	r3, #32
 800a76e:	2203      	movs	r2, #3
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f001 fde0 	bl	800c336 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].is_used = 1U;
 800a776:	4b1c      	ldr	r3, [pc, #112]	@ (800a7e8 <USBD_CUSTOM_HID_Init+0x120>)
 800a778:	781b      	ldrb	r3, [r3, #0]
 800a77a:	f003 020f 	and.w	r2, r3, #15
 800a77e:	6879      	ldr	r1, [r7, #4]
 800a780:	4613      	mov	r3, r2
 800a782:	009b      	lsls	r3, r3, #2
 800a784:	4413      	add	r3, r2
 800a786:	009b      	lsls	r3, r3, #2
 800a788:	440b      	add	r3, r1
 800a78a:	3324      	adds	r3, #36	@ 0x24
 800a78c:	2201      	movs	r2, #1
 800a78e:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_OUT_EP, USBD_EP_TYPE_INTR,
 800a790:	4b16      	ldr	r3, [pc, #88]	@ (800a7ec <USBD_CUSTOM_HID_Init+0x124>)
 800a792:	7819      	ldrb	r1, [r3, #0]
 800a794:	2320      	movs	r3, #32
 800a796:	2203      	movs	r2, #3
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f001 fdcc 	bl	800c336 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].is_used = 1U;
 800a79e:	4b13      	ldr	r3, [pc, #76]	@ (800a7ec <USBD_CUSTOM_HID_Init+0x124>)
 800a7a0:	781b      	ldrb	r3, [r3, #0]
 800a7a2:	f003 020f 	and.w	r2, r3, #15
 800a7a6:	6879      	ldr	r1, [r7, #4]
 800a7a8:	4613      	mov	r3, r2
 800a7aa:	009b      	lsls	r3, r3, #2
 800a7ac:	4413      	add	r3, r2
 800a7ae:	009b      	lsls	r3, r3, #2
 800a7b0:	440b      	add	r3, r1
 800a7b2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	2200      	movs	r2, #0
 800a7be:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->Init();
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800a7c8:	685b      	ldr	r3, [r3, #4]
 800a7ca:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_OUT_EP, hhid->Report_buf,
 800a7cc:	4b07      	ldr	r3, [pc, #28]	@ (800a7ec <USBD_CUSTOM_HID_Init+0x124>)
 800a7ce:	7819      	ldrb	r1, [r3, #0]
 800a7d0:	68fa      	ldr	r2, [r7, #12]
 800a7d2:	2320      	movs	r3, #32
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	f001 fe9d 	bl	800c514 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 800a7da:	2300      	movs	r3, #0
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	3710      	adds	r7, #16
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}
 800a7e4:	2000a464 	.word	0x2000a464
 800a7e8:	200001da 	.word	0x200001da
 800a7ec:	200001db 	.word	0x200001db

0800a7f0 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b082      	sub	sp, #8
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
 800a7f8:	460b      	mov	r3, r1
 800a7fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_IN_EP);
 800a7fc:	4b2a      	ldr	r3, [pc, #168]	@ (800a8a8 <USBD_CUSTOM_HID_DeInit+0xb8>)
 800a7fe:	781b      	ldrb	r3, [r3, #0]
 800a800:	4619      	mov	r1, r3
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f001 fdbd 	bl	800c382 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].is_used = 0U;
 800a808:	4b27      	ldr	r3, [pc, #156]	@ (800a8a8 <USBD_CUSTOM_HID_DeInit+0xb8>)
 800a80a:	781b      	ldrb	r3, [r3, #0]
 800a80c:	f003 020f 	and.w	r2, r3, #15
 800a810:	6879      	ldr	r1, [r7, #4]
 800a812:	4613      	mov	r3, r2
 800a814:	009b      	lsls	r3, r3, #2
 800a816:	4413      	add	r3, r2
 800a818:	009b      	lsls	r3, r3, #2
 800a81a:	440b      	add	r3, r1
 800a81c:	3324      	adds	r3, #36	@ 0x24
 800a81e:	2200      	movs	r2, #0
 800a820:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = 0U;
 800a822:	4b21      	ldr	r3, [pc, #132]	@ (800a8a8 <USBD_CUSTOM_HID_DeInit+0xb8>)
 800a824:	781b      	ldrb	r3, [r3, #0]
 800a826:	f003 020f 	and.w	r2, r3, #15
 800a82a:	6879      	ldr	r1, [r7, #4]
 800a82c:	4613      	mov	r3, r2
 800a82e:	009b      	lsls	r3, r3, #2
 800a830:	4413      	add	r3, r2
 800a832:	009b      	lsls	r3, r3, #2
 800a834:	440b      	add	r3, r1
 800a836:	3326      	adds	r3, #38	@ 0x26
 800a838:	2200      	movs	r2, #0
 800a83a:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_OUT_EP);
 800a83c:	4b1b      	ldr	r3, [pc, #108]	@ (800a8ac <USBD_CUSTOM_HID_DeInit+0xbc>)
 800a83e:	781b      	ldrb	r3, [r3, #0]
 800a840:	4619      	mov	r1, r3
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f001 fd9d 	bl	800c382 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].is_used = 0U;
 800a848:	4b18      	ldr	r3, [pc, #96]	@ (800a8ac <USBD_CUSTOM_HID_DeInit+0xbc>)
 800a84a:	781b      	ldrb	r3, [r3, #0]
 800a84c:	f003 020f 	and.w	r2, r3, #15
 800a850:	6879      	ldr	r1, [r7, #4]
 800a852:	4613      	mov	r3, r2
 800a854:	009b      	lsls	r3, r3, #2
 800a856:	4413      	add	r3, r2
 800a858:	009b      	lsls	r3, r3, #2
 800a85a:	440b      	add	r3, r1
 800a85c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a860:	2200      	movs	r2, #0
 800a862:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = 0U;
 800a864:	4b11      	ldr	r3, [pc, #68]	@ (800a8ac <USBD_CUSTOM_HID_DeInit+0xbc>)
 800a866:	781b      	ldrb	r3, [r3, #0]
 800a868:	f003 020f 	and.w	r2, r3, #15
 800a86c:	6879      	ldr	r1, [r7, #4]
 800a86e:	4613      	mov	r3, r2
 800a870:	009b      	lsls	r3, r3, #2
 800a872:	4413      	add	r3, r2
 800a874:	009b      	lsls	r3, r3, #2
 800a876:	440b      	add	r3, r1
 800a878:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800a87c:	2200      	movs	r2, #0
 800a87e:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassData_HID_Custom != NULL)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a886:	2b00      	cmp	r3, #0
 800a888:	d008      	beq.n	800a89c <USBD_CUSTOM_HID_DeInit+0xac>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->DeInit();
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800a890:	689b      	ldr	r3, [r3, #8]
 800a892:	4798      	blx	r3
#if (0)
    USBD_free(pdev->pClassData_HID_Custom);
#endif
    pdev->pClassData_HID_Custom = NULL;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2200      	movs	r2, #0
 800a898:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
  }

  return (uint8_t)USBD_OK;
 800a89c:	2300      	movs	r3, #0
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3708      	adds	r7, #8
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}
 800a8a6:	bf00      	nop
 800a8a8:	200001da 	.word	0x200001da
 800a8ac:	200001db 	.word	0x200001db

0800a8b0 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b088      	sub	sp, #32
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
 800a8b8:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a8c0:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 800a8d2:	693b      	ldr	r3, [r7, #16]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d101      	bne.n	800a8dc <USBD_CUSTOM_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800a8d8:	2303      	movs	r3, #3
 800a8da:	e0ed      	b.n	800aab8 <USBD_CUSTOM_HID_Setup+0x208>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	781b      	ldrb	r3, [r3, #0]
 800a8e0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d052      	beq.n	800a98e <USBD_CUSTOM_HID_Setup+0xde>
 800a8e8:	2b20      	cmp	r3, #32
 800a8ea:	f040 80dd 	bne.w	800aaa8 <USBD_CUSTOM_HID_Setup+0x1f8>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	785b      	ldrb	r3, [r3, #1]
 800a8f2:	3b02      	subs	r3, #2
 800a8f4:	2b09      	cmp	r3, #9
 800a8f6:	d842      	bhi.n	800a97e <USBD_CUSTOM_HID_Setup+0xce>
 800a8f8:	a201      	add	r2, pc, #4	@ (adr r2, 800a900 <USBD_CUSTOM_HID_Setup+0x50>)
 800a8fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8fe:	bf00      	nop
 800a900:	0800a959 	.word	0x0800a959
 800a904:	0800a937 	.word	0x0800a937
 800a908:	0800a97f 	.word	0x0800a97f
 800a90c:	0800a97f 	.word	0x0800a97f
 800a910:	0800a97f 	.word	0x0800a97f
 800a914:	0800a97f 	.word	0x0800a97f
 800a918:	0800a97f 	.word	0x0800a97f
 800a91c:	0800a969 	.word	0x0800a969
 800a920:	0800a947 	.word	0x0800a947
 800a924:	0800a929 	.word	0x0800a929
    {
    case CUSTOM_HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	885b      	ldrh	r3, [r3, #2]
 800a92c:	b2db      	uxtb	r3, r3
 800a92e:	461a      	mov	r2, r3
 800a930:	693b      	ldr	r3, [r7, #16]
 800a932:	621a      	str	r2, [r3, #32]
      break;
 800a934:	e02a      	b.n	800a98c <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800a936:	693b      	ldr	r3, [r7, #16]
 800a938:	3320      	adds	r3, #32
 800a93a:	2201      	movs	r2, #1
 800a93c:	4619      	mov	r1, r3
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f001 fae7 	bl	800bf12 <USBD_CtlSendData>
      break;
 800a944:	e022      	b.n	800a98c <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	885b      	ldrh	r3, [r3, #2]
 800a94a:	0a1b      	lsrs	r3, r3, #8
 800a94c:	b29b      	uxth	r3, r3
 800a94e:	b2db      	uxtb	r3, r3
 800a950:	461a      	mov	r2, r3
 800a952:	693b      	ldr	r3, [r7, #16]
 800a954:	625a      	str	r2, [r3, #36]	@ 0x24
      break;
 800a956:	e019      	b.n	800a98c <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	3324      	adds	r3, #36	@ 0x24
 800a95c:	2201      	movs	r2, #1
 800a95e:	4619      	mov	r1, r3
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f001 fad6 	bl	800bf12 <USBD_CtlSendData>
      break;
 800a966:	e011      	b.n	800a98c <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_SET_REPORT:
      hhid->IsReportAvailable = 1U;
 800a968:	693b      	ldr	r3, [r7, #16]
 800a96a:	2201      	movs	r2, #1
 800a96c:	62da      	str	r2, [r3, #44]	@ 0x2c
      (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 800a96e:	6939      	ldr	r1, [r7, #16]
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	88db      	ldrh	r3, [r3, #6]
 800a974:	461a      	mov	r2, r3
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f001 faf7 	bl	800bf6a <USBD_CtlPrepareRx>
      break;
 800a97c:	e006      	b.n	800a98c <USBD_CUSTOM_HID_Setup+0xdc>

    default:
      USBD_CtlError(pdev, req);
 800a97e:	6839      	ldr	r1, [r7, #0]
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f001 fa55 	bl	800be30 <USBD_CtlError>
      ret = USBD_FAIL;
 800a986:	2303      	movs	r3, #3
 800a988:	75fb      	strb	r3, [r7, #23]
      break;
 800a98a:	bf00      	nop
    }
    break;
 800a98c:	e093      	b.n	800aab6 <USBD_CUSTOM_HID_Setup+0x206>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	785b      	ldrb	r3, [r3, #1]
 800a992:	2b0b      	cmp	r3, #11
 800a994:	d87f      	bhi.n	800aa96 <USBD_CUSTOM_HID_Setup+0x1e6>
 800a996:	a201      	add	r2, pc, #4	@ (adr r2, 800a99c <USBD_CUSTOM_HID_Setup+0xec>)
 800a998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a99c:	0800a9cd 	.word	0x0800a9cd
 800a9a0:	0800aaa5 	.word	0x0800aaa5
 800a9a4:	0800aa97 	.word	0x0800aa97
 800a9a8:	0800aa97 	.word	0x0800aa97
 800a9ac:	0800aa97 	.word	0x0800aa97
 800a9b0:	0800aa97 	.word	0x0800aa97
 800a9b4:	0800a9f7 	.word	0x0800a9f7
 800a9b8:	0800aa97 	.word	0x0800aa97
 800a9bc:	0800aa97 	.word	0x0800aa97
 800a9c0:	0800aa97 	.word	0x0800aa97
 800a9c4:	0800aa45 	.word	0x0800aa45
 800a9c8:	0800aa6f 	.word	0x0800aa6f
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9d2:	b2db      	uxtb	r3, r3
 800a9d4:	2b03      	cmp	r3, #3
 800a9d6:	d107      	bne.n	800a9e8 <USBD_CUSTOM_HID_Setup+0x138>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a9d8:	f107 030e 	add.w	r3, r7, #14
 800a9dc:	2202      	movs	r2, #2
 800a9de:	4619      	mov	r1, r3
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f001 fa96 	bl	800bf12 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a9e6:	e05e      	b.n	800aaa6 <USBD_CUSTOM_HID_Setup+0x1f6>
        USBD_CtlError(pdev, req);
 800a9e8:	6839      	ldr	r1, [r7, #0]
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	f001 fa20 	bl	800be30 <USBD_CtlError>
        ret = USBD_FAIL;
 800a9f0:	2303      	movs	r3, #3
 800a9f2:	75fb      	strb	r3, [r7, #23]
      break;
 800a9f4:	e057      	b.n	800aaa6 <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	885b      	ldrh	r3, [r3, #2]
 800a9fa:	0a1b      	lsrs	r3, r3, #8
 800a9fc:	b29b      	uxth	r3, r3
 800a9fe:	2b22      	cmp	r3, #34	@ 0x22
 800aa00:	d10b      	bne.n	800aa1a <USBD_CUSTOM_HID_Setup+0x16a>
      {
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	88db      	ldrh	r3, [r3, #6]
 800aa06:	2b21      	cmp	r3, #33	@ 0x21
 800aa08:	bf28      	it	cs
 800aa0a:	2321      	movcs	r3, #33	@ 0x21
 800aa0c:	83fb      	strh	r3, [r7, #30]
        pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->pReport;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	61bb      	str	r3, [r7, #24]
 800aa18:	e00d      	b.n	800aa36 <USBD_CUSTOM_HID_Setup+0x186>
      }
      else
      {
        if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	885b      	ldrh	r3, [r3, #2]
 800aa1e:	0a1b      	lsrs	r3, r3, #8
 800aa20:	b29b      	uxth	r3, r3
 800aa22:	2b21      	cmp	r3, #33	@ 0x21
 800aa24:	d107      	bne.n	800aa36 <USBD_CUSTOM_HID_Setup+0x186>
        {
          pbuf = USBD_CUSTOM_HID_Desc;
 800aa26:	4b26      	ldr	r3, [pc, #152]	@ (800aac0 <USBD_CUSTOM_HID_Setup+0x210>)
 800aa28:	61bb      	str	r3, [r7, #24]
          len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	88db      	ldrh	r3, [r3, #6]
 800aa2e:	2b09      	cmp	r3, #9
 800aa30:	bf28      	it	cs
 800aa32:	2309      	movcs	r3, #9
 800aa34:	83fb      	strh	r3, [r7, #30]
        }
      }

      (void)USBD_CtlSendData(pdev, pbuf, len);
 800aa36:	8bfb      	ldrh	r3, [r7, #30]
 800aa38:	461a      	mov	r2, r3
 800aa3a:	69b9      	ldr	r1, [r7, #24]
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f001 fa68 	bl	800bf12 <USBD_CtlSendData>
      break;
 800aa42:	e030      	b.n	800aaa6 <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa4a:	b2db      	uxtb	r3, r3
 800aa4c:	2b03      	cmp	r3, #3
 800aa4e:	d107      	bne.n	800aa60 <USBD_CUSTOM_HID_Setup+0x1b0>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800aa50:	693b      	ldr	r3, [r7, #16]
 800aa52:	3328      	adds	r3, #40	@ 0x28
 800aa54:	2201      	movs	r2, #1
 800aa56:	4619      	mov	r1, r3
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f001 fa5a 	bl	800bf12 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800aa5e:	e022      	b.n	800aaa6 <USBD_CUSTOM_HID_Setup+0x1f6>
        USBD_CtlError(pdev, req);
 800aa60:	6839      	ldr	r1, [r7, #0]
 800aa62:	6878      	ldr	r0, [r7, #4]
 800aa64:	f001 f9e4 	bl	800be30 <USBD_CtlError>
        ret = USBD_FAIL;
 800aa68:	2303      	movs	r3, #3
 800aa6a:	75fb      	strb	r3, [r7, #23]
      break;
 800aa6c:	e01b      	b.n	800aaa6 <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa74:	b2db      	uxtb	r3, r3
 800aa76:	2b03      	cmp	r3, #3
 800aa78:	d106      	bne.n	800aa88 <USBD_CUSTOM_HID_Setup+0x1d8>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	885b      	ldrh	r3, [r3, #2]
 800aa7e:	b2db      	uxtb	r3, r3
 800aa80:	461a      	mov	r2, r3
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	629a      	str	r2, [r3, #40]	@ 0x28
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800aa86:	e00e      	b.n	800aaa6 <USBD_CUSTOM_HID_Setup+0x1f6>
        USBD_CtlError(pdev, req);
 800aa88:	6839      	ldr	r1, [r7, #0]
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f001 f9d0 	bl	800be30 <USBD_CtlError>
        ret = USBD_FAIL;
 800aa90:	2303      	movs	r3, #3
 800aa92:	75fb      	strb	r3, [r7, #23]
      break;
 800aa94:	e007      	b.n	800aaa6 <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800aa96:	6839      	ldr	r1, [r7, #0]
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f001 f9c9 	bl	800be30 <USBD_CtlError>
      ret = USBD_FAIL;
 800aa9e:	2303      	movs	r3, #3
 800aaa0:	75fb      	strb	r3, [r7, #23]
      break;
 800aaa2:	e000      	b.n	800aaa6 <USBD_CUSTOM_HID_Setup+0x1f6>
      break;
 800aaa4:	bf00      	nop
    }
    break;
 800aaa6:	e006      	b.n	800aab6 <USBD_CUSTOM_HID_Setup+0x206>

  default:
    USBD_CtlError(pdev, req);
 800aaa8:	6839      	ldr	r1, [r7, #0]
 800aaaa:	6878      	ldr	r0, [r7, #4]
 800aaac:	f001 f9c0 	bl	800be30 <USBD_CtlError>
    ret = USBD_FAIL;
 800aab0:	2303      	movs	r3, #3
 800aab2:	75fb      	strb	r3, [r7, #23]
    break;
 800aab4:	bf00      	nop
  }
  return (uint8_t)ret;
 800aab6:	7dfb      	ldrb	r3, [r7, #23]
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3720      	adds	r7, #32
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}
 800aac0:	2000029c 	.word	0x2000029c

0800aac4 <USBD_CUSTOM_HID_SendReport>:
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b086      	sub	sp, #24
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	60f8      	str	r0, [r7, #12]
 800aacc:	60b9      	str	r1, [r7, #8]
 800aace:	4613      	mov	r3, r2
 800aad0:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData_HID_Custom == NULL)
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d101      	bne.n	800aae0 <USBD_CUSTOM_HID_SendReport+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800aadc:	2303      	movs	r3, #3
 800aade:	e01d      	b.n	800ab1c <USBD_CUSTOM_HID_SendReport+0x58>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800aae6:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aaee:	b2db      	uxtb	r3, r3
 800aaf0:	2b03      	cmp	r3, #3
 800aaf2:	d112      	bne.n	800ab1a <USBD_CUSTOM_HID_SendReport+0x56>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 800aaf4:	697b      	ldr	r3, [r7, #20]
 800aaf6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d10b      	bne.n	800ab16 <USBD_CUSTOM_HID_SendReport+0x52>
    {
      hhid->state = CUSTOM_HID_BUSY;
 800aafe:	697b      	ldr	r3, [r7, #20]
 800ab00:	2201      	movs	r2, #1
 800ab02:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      (void)USBD_LL_Transmit(pdev, CUSTOM_HID_IN_EP, report, len);
 800ab06:	4b07      	ldr	r3, [pc, #28]	@ (800ab24 <USBD_CUSTOM_HID_SendReport+0x60>)
 800ab08:	7819      	ldrb	r1, [r3, #0]
 800ab0a:	88fb      	ldrh	r3, [r7, #6]
 800ab0c:	68ba      	ldr	r2, [r7, #8]
 800ab0e:	68f8      	ldr	r0, [r7, #12]
 800ab10:	f001 fcdf 	bl	800c4d2 <USBD_LL_Transmit>
 800ab14:	e001      	b.n	800ab1a <USBD_CUSTOM_HID_SendReport+0x56>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 800ab16:	2301      	movs	r3, #1
 800ab18:	e000      	b.n	800ab1c <USBD_CUSTOM_HID_SendReport+0x58>
    }
  }
  return (uint8_t)USBD_OK;
 800ab1a:	2300      	movs	r3, #0
}
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	3718      	adds	r7, #24
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}
 800ab24:	200001da 	.word	0x200001da

0800ab28 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 800ab28:	b480      	push	{r7}
 800ab2a:	b083      	sub	sp, #12
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2229      	movs	r2, #41	@ 0x29
 800ab34:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgFSDesc;
 800ab36:	4b03      	ldr	r3, [pc, #12]	@ (800ab44 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	370c      	adds	r7, #12
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab42:	4770      	bx	lr
 800ab44:	20000218 	.word	0x20000218

0800ab48 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b083      	sub	sp, #12
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2229      	movs	r2, #41	@ 0x29
 800ab54:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgHSDesc;
 800ab56:	4b03      	ldr	r3, [pc, #12]	@ (800ab64 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	370c      	adds	r7, #12
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab62:	4770      	bx	lr
 800ab64:	20000244 	.word	0x20000244

0800ab68 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ab68:	b480      	push	{r7}
 800ab6a:	b083      	sub	sp, #12
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2229      	movs	r2, #41	@ 0x29
 800ab74:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 800ab76:	4b03      	ldr	r3, [pc, #12]	@ (800ab84 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	370c      	adds	r7, #12
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab82:	4770      	bx	lr
 800ab84:	20000270 	.word	0x20000270

0800ab88 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */

static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b083      	sub	sp, #12
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
 800ab90:	460b      	mov	r3, r1
 800ab92:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom)->state = CUSTOM_HID_IDLE;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 // HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6); // hoặc nháy LED nếu có
  return (uint8_t)USBD_OK;
 800aba0:	2300      	movs	r3, #0
}
 800aba2:	4618      	mov	r0, r3
 800aba4:	370c      	adds	r7, #12
 800aba6:	46bd      	mov	sp, r7
 800aba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abac:	4770      	bx	lr
	...

0800abb0 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b084      	sub	sp, #16
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
 800abb8:	460b      	mov	r3, r1
 800abba:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData_HID_Custom == NULL)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d101      	bne.n	800abca <USBD_CUSTOM_HID_DataOut+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800abc6:	2303      	movs	r3, #3
 800abc8:	e013      	b.n	800abf2 <USBD_CUSTOM_HID_DataOut+0x42>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800abd0:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->OutEvent(hhid->Report_buf, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800abd8:	68db      	ldr	r3, [r3, #12]
 800abda:	68fa      	ldr	r2, [r7, #12]
 800abdc:	2120      	movs	r1, #32
 800abde:	4610      	mov	r0, r2
 800abe0:	4798      	blx	r3
 // HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
  USBD_LL_PrepareReceive(pdev,CUSTOM_HID_OUT_EP,hhid->Report_buf,
 800abe2:	4b06      	ldr	r3, [pc, #24]	@ (800abfc <USBD_CUSTOM_HID_DataOut+0x4c>)
 800abe4:	7819      	ldrb	r1, [r3, #0]
 800abe6:	68fa      	ldr	r2, [r7, #12]
 800abe8:	2320      	movs	r3, #32
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	f001 fc92 	bl	800c514 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  return (uint8_t)USBD_OK;
 800abf0:	2300      	movs	r3, #0
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3710      	adds	r7, #16
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}
 800abfa:	bf00      	nop
 800abfc:	200001db 	.word	0x200001db

0800ac00 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b084      	sub	sp, #16
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ac0e:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d101      	bne.n	800ac1a <USBD_CUSTOM_HID_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800ac16:	2303      	movs	r3, #3
 800ac18:	e00f      	b.n	800ac3a <USBD_CUSTOM_HID_EP0_RxReady+0x3a>
  }

  if (hhid->IsReportAvailable == 1U)
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac1e:	2b01      	cmp	r3, #1
 800ac20:	d10a      	bne.n	800ac38 <USBD_CUSTOM_HID_EP0_RxReady+0x38>
  {
    //((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->OutEvent(hhid->Report_buf[0], hhid->Report_buf[1]);
	  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->OutEvent(hhid->Report_buf, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800ac28:	68db      	ldr	r3, [r3, #12]
 800ac2a:	68fa      	ldr	r2, [r7, #12]
 800ac2c:	2120      	movs	r1, #32
 800ac2e:	4610      	mov	r0, r2
 800ac30:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	2200      	movs	r2, #0
 800ac36:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  return (uint8_t)USBD_OK;
 800ac38:	2300      	movs	r3, #0
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3710      	adds	r7, #16
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}
	...

0800ac44 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b083      	sub	sp, #12
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	220a      	movs	r2, #10
 800ac50:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800ac52:	4b03      	ldr	r3, [pc, #12]	@ (800ac60 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 800ac54:	4618      	mov	r0, r3
 800ac56:	370c      	adds	r7, #12
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5e:	4770      	bx	lr
 800ac60:	200002a8 	.word	0x200002a8

0800ac64 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800ac64:	b480      	push	{r7}
 800ac66:	b083      	sub	sp, #12
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
 800ac6c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d101      	bne.n	800ac78 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ac74:	2303      	movs	r3, #3
 800ac76:	e004      	b.n	800ac82 <USBD_CUSTOM_HID_RegisterInterface+0x1e>
  }

  pdev->pUserData_HID_Custom = fops;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	683a      	ldr	r2, [r7, #0]
 800ac7c:	f8c3 22dc 	str.w	r2, [r3, #732]	@ 0x2dc

  return (uint8_t)USBD_OK;
 800ac80:	2300      	movs	r3, #0
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	370c      	adds	r7, #12
 800ac86:	46bd      	mov	sp, r7
 800ac88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8c:	4770      	bx	lr
	...

0800ac90 <USBD_Update_HID_Custom_DESC>:

void USBD_Update_HID_Custom_DESC(uint8_t *desc, uint8_t itf_no, uint8_t in_ep, uint8_t out_ep, uint8_t str_idx)
{
 800ac90:	b480      	push	{r7}
 800ac92:	b083      	sub	sp, #12
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
 800ac98:	4608      	mov	r0, r1
 800ac9a:	4611      	mov	r1, r2
 800ac9c:	461a      	mov	r2, r3
 800ac9e:	4603      	mov	r3, r0
 800aca0:	70fb      	strb	r3, [r7, #3]
 800aca2:	460b      	mov	r3, r1
 800aca4:	70bb      	strb	r3, [r7, #2]
 800aca6:	4613      	mov	r3, r2
 800aca8:	707b      	strb	r3, [r7, #1]
  desc[11] = itf_no;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	330b      	adds	r3, #11
 800acae:	78fa      	ldrb	r2, [r7, #3]
 800acb0:	701a      	strb	r2, [r3, #0]
  desc[17] = str_idx;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	3311      	adds	r3, #17
 800acb6:	7c3a      	ldrb	r2, [r7, #16]
 800acb8:	701a      	strb	r2, [r3, #0]
  desc[29] = in_ep;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	331d      	adds	r3, #29
 800acbe:	78ba      	ldrb	r2, [r7, #2]
 800acc0:	701a      	strb	r2, [r3, #0]
  desc[36] = out_ep;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	3324      	adds	r3, #36	@ 0x24
 800acc6:	787a      	ldrb	r2, [r7, #1]
 800acc8:	701a      	strb	r2, [r3, #0]

  CUSTOM_HID_IN_EP = in_ep;
 800acca:	4a09      	ldr	r2, [pc, #36]	@ (800acf0 <USBD_Update_HID_Custom_DESC+0x60>)
 800accc:	78bb      	ldrb	r3, [r7, #2]
 800acce:	7013      	strb	r3, [r2, #0]
  CUSTOM_HID_OUT_EP = out_ep;
 800acd0:	4a08      	ldr	r2, [pc, #32]	@ (800acf4 <USBD_Update_HID_Custom_DESC+0x64>)
 800acd2:	787b      	ldrb	r3, [r7, #1]
 800acd4:	7013      	strb	r3, [r2, #0]
  CUSTOM_HID_ITF_NBR = itf_no;
 800acd6:	4a08      	ldr	r2, [pc, #32]	@ (800acf8 <USBD_Update_HID_Custom_DESC+0x68>)
 800acd8:	78fb      	ldrb	r3, [r7, #3]
 800acda:	7013      	strb	r3, [r2, #0]
  CUSTOM_HID_STR_DESC_IDX = str_idx;
 800acdc:	4a07      	ldr	r2, [pc, #28]	@ (800acfc <USBD_Update_HID_Custom_DESC+0x6c>)
 800acde:	7c3b      	ldrb	r3, [r7, #16]
 800ace0:	7013      	strb	r3, [r2, #0]
}
 800ace2:	bf00      	nop
 800ace4:	370c      	adds	r7, #12
 800ace6:	46bd      	mov	sp, r7
 800ace8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acec:	4770      	bx	lr
 800acee:	bf00      	nop
 800acf0:	200001da 	.word	0x200001da
 800acf4:	200001db 	.word	0x200001db
 800acf8:	2000a460 	.word	0x2000a460
 800acfc:	2000a461 	.word	0x2000a461

0800ad00 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b086      	sub	sp, #24
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	60f8      	str	r0, [r7, #12]
 800ad08:	60b9      	str	r1, [r7, #8]
 800ad0a:	4613      	mov	r3, r2
 800ad0c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d101      	bne.n	800ad18 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ad14:	2303      	movs	r3, #3
 800ad16:	e01b      	b.n	800ad50 <USBD_Init+0x50>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pConfDesc = NULL;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	2200      	movs	r2, #0
 800ad24:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ad28:	68bb      	ldr	r3, [r7, #8]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d003      	beq.n	800ad36 <USBD_Init+0x36>
  {
    pdev->pDesc = pdesc;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	68ba      	ldr	r2, [r7, #8]
 800ad32:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	2201      	movs	r2, #1
 800ad3a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	79fa      	ldrb	r2, [r7, #7]
 800ad42:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ad44:	68f8      	ldr	r0, [r7, #12]
 800ad46:	f001 fa7d 	bl	800c244 <USBD_LL_Init>
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ad4e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad50:	4618      	mov	r0, r3
 800ad52:	3718      	adds	r7, #24
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}

0800ad58 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b084      	sub	sp, #16
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
 800ad60:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ad62:	2300      	movs	r3, #0
 800ad64:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d101      	bne.n	800ad70 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800ad6c:	2303      	movs	r3, #3
 800ad6e:	e02d      	b.n	800adcc <USBD_RegisterClass+0x74>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	683a      	ldr	r2, [r7, #0]
 800ad74:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  /* Get Device Configuration Descriptor */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	7c1b      	ldrb	r3, [r3, #16]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d112      	bne.n	800ada6 <USBD_RegisterClass+0x4e>
  {
	  if (pdev->pClass->GetHSConfigDescriptor != NULL)
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d01e      	beq.n	800adca <USBD_RegisterClass+0x72>
	  {
		  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad94:	f107 020e 	add.w	r2, r7, #14
 800ad98:	4610      	mov	r0, r2
 800ad9a:	4798      	blx	r3
 800ad9c:	4602      	mov	r2, r0
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318
 800ada4:	e011      	b.n	800adca <USBD_RegisterClass+0x72>
	  }
  }
  else if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800adac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d00b      	beq.n	800adca <USBD_RegisterClass+0x72>
  {
	  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800adb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adba:	f107 020e 	add.w	r2, r7, #14
 800adbe:	4610      	mov	r0, r2
 800adc0:	4798      	blx	r3
 800adc2:	4602      	mov	r2, r0
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318
  }

  return USBD_OK;
 800adca:	2300      	movs	r3, #0
}
 800adcc:	4618      	mov	r0, r3
 800adce:	3710      	adds	r7, #16
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}

0800add4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b082      	sub	sp, #8
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f001 fa8f 	bl	800c300 <USBD_LL_Start>
 800ade2:	4603      	mov	r3, r0
}
 800ade4:	4618      	mov	r0, r3
 800ade6:	3708      	adds	r7, #8
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}

0800adec <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800adec:	b480      	push	{r7}
 800adee:	b083      	sub	sp, #12
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800adf4:	2300      	movs	r3, #0
}
 800adf6:	4618      	mov	r0, r3
 800adf8:	370c      	adds	r7, #12
 800adfa:	46bd      	mov	sp, r7
 800adfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae00:	4770      	bx	lr

0800ae02 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ae02:	b580      	push	{r7, lr}
 800ae04:	b084      	sub	sp, #16
 800ae06:	af00      	add	r7, sp, #0
 800ae08:	6078      	str	r0, [r7, #4]
 800ae0a:	460b      	mov	r3, r1
 800ae0c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ae0e:	2303      	movs	r3, #3
 800ae10:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d009      	beq.n	800ae30 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	78fa      	ldrb	r2, [r7, #3]
 800ae26:	4611      	mov	r1, r2
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	4798      	blx	r3
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ae30:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae32:	4618      	mov	r0, r3
 800ae34:	3710      	adds	r7, #16
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}

0800ae3a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ae3a:	b580      	push	{r7, lr}
 800ae3c:	b082      	sub	sp, #8
 800ae3e:	af00      	add	r7, sp, #0
 800ae40:	6078      	str	r0, [r7, #4]
 800ae42:	460b      	mov	r3, r1
 800ae44:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d007      	beq.n	800ae60 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae56:	685b      	ldr	r3, [r3, #4]
 800ae58:	78fa      	ldrb	r2, [r7, #3]
 800ae5a:	4611      	mov	r1, r2
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	4798      	blx	r3
  }

  return USBD_OK;
 800ae60:	2300      	movs	r3, #0
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	3708      	adds	r7, #8
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}

0800ae6a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ae6a:	b580      	push	{r7, lr}
 800ae6c:	b084      	sub	sp, #16
 800ae6e:	af00      	add	r7, sp, #0
 800ae70:	6078      	str	r0, [r7, #4]
 800ae72:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ae7a:	6839      	ldr	r1, [r7, #0]
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	f000 ff9d 	bl	800bdbc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2201      	movs	r2, #1
 800ae86:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800ae90:	461a      	mov	r2, r3
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ae9e:	f003 031f 	and.w	r3, r3, #31
 800aea2:	2b02      	cmp	r3, #2
 800aea4:	d01a      	beq.n	800aedc <USBD_LL_SetupStage+0x72>
 800aea6:	2b02      	cmp	r3, #2
 800aea8:	d822      	bhi.n	800aef0 <USBD_LL_SetupStage+0x86>
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d002      	beq.n	800aeb4 <USBD_LL_SetupStage+0x4a>
 800aeae:	2b01      	cmp	r3, #1
 800aeb0:	d00a      	beq.n	800aec8 <USBD_LL_SetupStage+0x5e>
 800aeb2:	e01d      	b.n	800aef0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800aeba:	4619      	mov	r1, r3
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f000 fa5d 	bl	800b37c <USBD_StdDevReq>
 800aec2:	4603      	mov	r3, r0
 800aec4:	73fb      	strb	r3, [r7, #15]
      break;
 800aec6:	e020      	b.n	800af0a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800aece:	4619      	mov	r1, r3
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	f000 fac1 	bl	800b458 <USBD_StdItfReq>
 800aed6:	4603      	mov	r3, r0
 800aed8:	73fb      	strb	r3, [r7, #15]
      break;
 800aeda:	e016      	b.n	800af0a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800aee2:	4619      	mov	r1, r3
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f000 fb00 	bl	800b4ea <USBD_StdEPReq>
 800aeea:	4603      	mov	r3, r0
 800aeec:	73fb      	strb	r3, [r7, #15]
      break;
 800aeee:	e00c      	b.n	800af0a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800aef6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800aefa:	b2db      	uxtb	r3, r3
 800aefc:	4619      	mov	r1, r3
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f001 fa5e 	bl	800c3c0 <USBD_LL_StallEP>
 800af04:	4603      	mov	r3, r0
 800af06:	73fb      	strb	r3, [r7, #15]
      break;
 800af08:	bf00      	nop
  }

  return ret;
 800af0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800af0c:	4618      	mov	r0, r3
 800af0e:	3710      	adds	r7, #16
 800af10:	46bd      	mov	sp, r7
 800af12:	bd80      	pop	{r7, pc}

0800af14 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b086      	sub	sp, #24
 800af18:	af00      	add	r7, sp, #0
 800af1a:	60f8      	str	r0, [r7, #12]
 800af1c:	460b      	mov	r3, r1
 800af1e:	607a      	str	r2, [r7, #4]
 800af20:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800af22:	7afb      	ldrb	r3, [r7, #11]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d138      	bne.n	800af9a <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800af2e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800af36:	2b03      	cmp	r3, #3
 800af38:	d14a      	bne.n	800afd0 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800af3a:	693b      	ldr	r3, [r7, #16]
 800af3c:	689a      	ldr	r2, [r3, #8]
 800af3e:	693b      	ldr	r3, [r7, #16]
 800af40:	68db      	ldr	r3, [r3, #12]
 800af42:	429a      	cmp	r2, r3
 800af44:	d913      	bls.n	800af6e <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800af46:	693b      	ldr	r3, [r7, #16]
 800af48:	689a      	ldr	r2, [r3, #8]
 800af4a:	693b      	ldr	r3, [r7, #16]
 800af4c:	68db      	ldr	r3, [r3, #12]
 800af4e:	1ad2      	subs	r2, r2, r3
 800af50:	693b      	ldr	r3, [r7, #16]
 800af52:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800af54:	693b      	ldr	r3, [r7, #16]
 800af56:	68da      	ldr	r2, [r3, #12]
 800af58:	693b      	ldr	r3, [r7, #16]
 800af5a:	689b      	ldr	r3, [r3, #8]
 800af5c:	4293      	cmp	r3, r2
 800af5e:	bf28      	it	cs
 800af60:	4613      	movcs	r3, r2
 800af62:	461a      	mov	r2, r3
 800af64:	6879      	ldr	r1, [r7, #4]
 800af66:	68f8      	ldr	r0, [r7, #12]
 800af68:	f001 f81c 	bl	800bfa4 <USBD_CtlContinueRx>
 800af6c:	e030      	b.n	800afd0 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af74:	b2db      	uxtb	r3, r3
 800af76:	2b03      	cmp	r3, #3
 800af78:	d10b      	bne.n	800af92 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af80:	691b      	ldr	r3, [r3, #16]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d005      	beq.n	800af92 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af8c:	691b      	ldr	r3, [r3, #16]
 800af8e:	68f8      	ldr	r0, [r7, #12]
 800af90:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800af92:	68f8      	ldr	r0, [r7, #12]
 800af94:	f001 f817 	bl	800bfc6 <USBD_CtlSendStatus>
 800af98:	e01a      	b.n	800afd0 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800afa0:	b2db      	uxtb	r3, r3
 800afa2:	2b03      	cmp	r3, #3
 800afa4:	d114      	bne.n	800afd0 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afac:	699b      	ldr	r3, [r3, #24]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d00e      	beq.n	800afd0 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afb8:	699b      	ldr	r3, [r3, #24]
 800afba:	7afa      	ldrb	r2, [r7, #11]
 800afbc:	4611      	mov	r1, r2
 800afbe:	68f8      	ldr	r0, [r7, #12]
 800afc0:	4798      	blx	r3
 800afc2:	4603      	mov	r3, r0
 800afc4:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800afc6:	7dfb      	ldrb	r3, [r7, #23]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d001      	beq.n	800afd0 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800afcc:	7dfb      	ldrb	r3, [r7, #23]
 800afce:	e000      	b.n	800afd2 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800afd0:	2300      	movs	r3, #0
}
 800afd2:	4618      	mov	r0, r3
 800afd4:	3718      	adds	r7, #24
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}

0800afda <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800afda:	b580      	push	{r7, lr}
 800afdc:	b086      	sub	sp, #24
 800afde:	af00      	add	r7, sp, #0
 800afe0:	60f8      	str	r0, [r7, #12]
 800afe2:	460b      	mov	r3, r1
 800afe4:	607a      	str	r2, [r7, #4]
 800afe6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800afe8:	7afb      	ldrb	r3, [r7, #11]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d16b      	bne.n	800b0c6 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	3314      	adds	r3, #20
 800aff2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800affa:	2b02      	cmp	r3, #2
 800affc:	d156      	bne.n	800b0ac <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800affe:	693b      	ldr	r3, [r7, #16]
 800b000:	689a      	ldr	r2, [r3, #8]
 800b002:	693b      	ldr	r3, [r7, #16]
 800b004:	68db      	ldr	r3, [r3, #12]
 800b006:	429a      	cmp	r2, r3
 800b008:	d914      	bls.n	800b034 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b00a:	693b      	ldr	r3, [r7, #16]
 800b00c:	689a      	ldr	r2, [r3, #8]
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	68db      	ldr	r3, [r3, #12]
 800b012:	1ad2      	subs	r2, r2, r3
 800b014:	693b      	ldr	r3, [r7, #16]
 800b016:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b018:	693b      	ldr	r3, [r7, #16]
 800b01a:	689b      	ldr	r3, [r3, #8]
 800b01c:	461a      	mov	r2, r3
 800b01e:	6879      	ldr	r1, [r7, #4]
 800b020:	68f8      	ldr	r0, [r7, #12]
 800b022:	f000 ff91 	bl	800bf48 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b026:	2300      	movs	r3, #0
 800b028:	2200      	movs	r2, #0
 800b02a:	2100      	movs	r1, #0
 800b02c:	68f8      	ldr	r0, [r7, #12]
 800b02e:	f001 fa71 	bl	800c514 <USBD_LL_PrepareReceive>
 800b032:	e03b      	b.n	800b0ac <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b034:	693b      	ldr	r3, [r7, #16]
 800b036:	68da      	ldr	r2, [r3, #12]
 800b038:	693b      	ldr	r3, [r7, #16]
 800b03a:	689b      	ldr	r3, [r3, #8]
 800b03c:	429a      	cmp	r2, r3
 800b03e:	d11c      	bne.n	800b07a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b040:	693b      	ldr	r3, [r7, #16]
 800b042:	685a      	ldr	r2, [r3, #4]
 800b044:	693b      	ldr	r3, [r7, #16]
 800b046:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b048:	429a      	cmp	r2, r3
 800b04a:	d316      	bcc.n	800b07a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b04c:	693b      	ldr	r3, [r7, #16]
 800b04e:	685a      	ldr	r2, [r3, #4]
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b056:	429a      	cmp	r2, r3
 800b058:	d20f      	bcs.n	800b07a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b05a:	2200      	movs	r2, #0
 800b05c:	2100      	movs	r1, #0
 800b05e:	68f8      	ldr	r0, [r7, #12]
 800b060:	f000 ff72 	bl	800bf48 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	2200      	movs	r2, #0
 800b068:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b06c:	2300      	movs	r3, #0
 800b06e:	2200      	movs	r2, #0
 800b070:	2100      	movs	r1, #0
 800b072:	68f8      	ldr	r0, [r7, #12]
 800b074:	f001 fa4e 	bl	800c514 <USBD_LL_PrepareReceive>
 800b078:	e018      	b.n	800b0ac <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b080:	b2db      	uxtb	r3, r3
 800b082:	2b03      	cmp	r3, #3
 800b084:	d10b      	bne.n	800b09e <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b08c:	68db      	ldr	r3, [r3, #12]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d005      	beq.n	800b09e <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b098:	68db      	ldr	r3, [r3, #12]
 800b09a:	68f8      	ldr	r0, [r7, #12]
 800b09c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b09e:	2180      	movs	r1, #128	@ 0x80
 800b0a0:	68f8      	ldr	r0, [r7, #12]
 800b0a2:	f001 f98d 	bl	800c3c0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b0a6:	68f8      	ldr	r0, [r7, #12]
 800b0a8:	f000 ffa0 	bl	800bfec <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b0b2:	2b01      	cmp	r3, #1
 800b0b4:	d122      	bne.n	800b0fc <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800b0b6:	68f8      	ldr	r0, [r7, #12]
 800b0b8:	f7ff fe98 	bl	800adec <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	2200      	movs	r2, #0
 800b0c0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b0c4:	e01a      	b.n	800b0fc <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b0cc:	b2db      	uxtb	r3, r3
 800b0ce:	2b03      	cmp	r3, #3
 800b0d0:	d114      	bne.n	800b0fc <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0d8:	695b      	ldr	r3, [r3, #20]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d00e      	beq.n	800b0fc <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0e4:	695b      	ldr	r3, [r3, #20]
 800b0e6:	7afa      	ldrb	r2, [r7, #11]
 800b0e8:	4611      	mov	r1, r2
 800b0ea:	68f8      	ldr	r0, [r7, #12]
 800b0ec:	4798      	blx	r3
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b0f2:	7dfb      	ldrb	r3, [r7, #23]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d001      	beq.n	800b0fc <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800b0f8:	7dfb      	ldrb	r3, [r7, #23]
 800b0fa:	e000      	b.n	800b0fe <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800b0fc:	2300      	movs	r3, #0
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	3718      	adds	r7, #24
 800b102:	46bd      	mov	sp, r7
 800b104:	bd80      	pop	{r7, pc}

0800b106 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b106:	b580      	push	{r7, lr}
 800b108:	b082      	sub	sp, #8
 800b10a:	af00      	add	r7, sp, #0
 800b10c:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2201      	movs	r2, #1
 800b112:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2200      	movs	r2, #0
 800b11a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2200      	movs	r2, #0
 800b122:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2200      	movs	r2, #0
 800b128:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b132:	2b00      	cmp	r3, #0
 800b134:	d101      	bne.n	800b13a <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800b136:	2303      	movs	r3, #3
 800b138:	e02a      	b.n	800b190 <USBD_LL_Reset+0x8a>
  }

	if (pdev->pClass->DeInit != NULL)
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b140:	685b      	ldr	r3, [r3, #4]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d009      	beq.n	800b15a <USBD_LL_Reset+0x54>
	{
	  (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b14c:	685b      	ldr	r3, [r3, #4]
 800b14e:	687a      	ldr	r2, [r7, #4]
 800b150:	6852      	ldr	r2, [r2, #4]
 800b152:	b2d2      	uxtb	r2, r2
 800b154:	4611      	mov	r1, r2
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	4798      	blx	r3
	}

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b15a:	2340      	movs	r3, #64	@ 0x40
 800b15c:	2200      	movs	r2, #0
 800b15e:	2100      	movs	r1, #0
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	f001 f8e8 	bl	800c336 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2201      	movs	r2, #1
 800b16a:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	2240      	movs	r2, #64	@ 0x40
 800b172:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b176:	2340      	movs	r3, #64	@ 0x40
 800b178:	2200      	movs	r2, #0
 800b17a:	2180      	movs	r1, #128	@ 0x80
 800b17c:	6878      	ldr	r0, [r7, #4]
 800b17e:	f001 f8da 	bl	800c336 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2201      	movs	r2, #1
 800b186:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2240      	movs	r2, #64	@ 0x40
 800b18c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800b18e:	2300      	movs	r3, #0
}
 800b190:	4618      	mov	r0, r3
 800b192:	3708      	adds	r7, #8
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}

0800b198 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b198:	b480      	push	{r7}
 800b19a:	b083      	sub	sp, #12
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
 800b1a0:	460b      	mov	r3, r1
 800b1a2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	78fa      	ldrb	r2, [r7, #3]
 800b1a8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b1aa:	2300      	movs	r3, #0
}
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	370c      	adds	r7, #12
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b6:	4770      	bx	lr

0800b1b8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b1b8:	b480      	push	{r7}
 800b1ba:	b083      	sub	sp, #12
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b1c6:	b2da      	uxtb	r2, r3
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	2204      	movs	r2, #4
 800b1d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b1d6:	2300      	movs	r3, #0
}
 800b1d8:	4618      	mov	r0, r3
 800b1da:	370c      	adds	r7, #12
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e2:	4770      	bx	lr

0800b1e4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b083      	sub	sp, #12
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b1f2:	b2db      	uxtb	r3, r3
 800b1f4:	2b04      	cmp	r3, #4
 800b1f6:	d106      	bne.n	800b206 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b1fe:	b2da      	uxtb	r2, r3
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b206:	2300      	movs	r3, #0
}
 800b208:	4618      	mov	r0, r3
 800b20a:	370c      	adds	r7, #12
 800b20c:	46bd      	mov	sp, r7
 800b20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b212:	4770      	bx	lr

0800b214 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b082      	sub	sp, #8
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b222:	2b00      	cmp	r3, #0
 800b224:	d101      	bne.n	800b22a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800b226:	2303      	movs	r3, #3
 800b228:	e012      	b.n	800b250 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b230:	b2db      	uxtb	r3, r3
 800b232:	2b03      	cmp	r3, #3
 800b234:	d10b      	bne.n	800b24e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b23c:	69db      	ldr	r3, [r3, #28]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d005      	beq.n	800b24e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b248:	69db      	ldr	r3, [r3, #28]
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b24e:	2300      	movs	r3, #0
}
 800b250:	4618      	mov	r0, r3
 800b252:	3708      	adds	r7, #8
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}

0800b258 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b082      	sub	sp, #8
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
 800b260:	460b      	mov	r3, r1
 800b262:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d101      	bne.n	800b272 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800b26e:	2303      	movs	r3, #3
 800b270:	e014      	b.n	800b29c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b278:	b2db      	uxtb	r3, r3
 800b27a:	2b03      	cmp	r3, #3
 800b27c:	d10d      	bne.n	800b29a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b284:	6a1b      	ldr	r3, [r3, #32]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d007      	beq.n	800b29a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b290:	6a1b      	ldr	r3, [r3, #32]
 800b292:	78fa      	ldrb	r2, [r7, #3]
 800b294:	4611      	mov	r1, r2
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b29a:	2300      	movs	r3, #0
}
 800b29c:	4618      	mov	r0, r3
 800b29e:	3708      	adds	r7, #8
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	bd80      	pop	{r7, pc}

0800b2a4 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b082      	sub	sp, #8
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
 800b2ac:	460b      	mov	r3, r1
 800b2ae:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d101      	bne.n	800b2be <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800b2ba:	2303      	movs	r3, #3
 800b2bc:	e014      	b.n	800b2e8 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b2c4:	b2db      	uxtb	r3, r3
 800b2c6:	2b03      	cmp	r3, #3
 800b2c8:	d10d      	bne.n	800b2e6 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b2d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d007      	beq.n	800b2e6 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b2dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2de:	78fa      	ldrb	r2, [r7, #3]
 800b2e0:	4611      	mov	r1, r2
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b2e6:	2300      	movs	r3, #0
}
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	3708      	adds	r7, #8
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bd80      	pop	{r7, pc}

0800b2f0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b2f0:	b480      	push	{r7}
 800b2f2:	b083      	sub	sp, #12
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b2f8:	2300      	movs	r3, #0
}
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	370c      	adds	r7, #12
 800b2fe:	46bd      	mov	sp, r7
 800b300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b304:	4770      	bx	lr

0800b306 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b306:	b580      	push	{r7, lr}
 800b308:	b082      	sub	sp, #8
 800b30a:	af00      	add	r7, sp, #0
 800b30c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2201      	movs	r2, #1
 800b312:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  if (pdev->pClass != NULL)
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d009      	beq.n	800b334 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b326:	685b      	ldr	r3, [r3, #4]
 800b328:	687a      	ldr	r2, [r7, #4]
 800b32a:	6852      	ldr	r2, [r2, #4]
 800b32c:	b2d2      	uxtb	r2, r2
 800b32e:	4611      	mov	r1, r2
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	4798      	blx	r3
  }

  return USBD_OK;
 800b334:	2300      	movs	r3, #0
}
 800b336:	4618      	mov	r0, r3
 800b338:	3708      	adds	r7, #8
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}

0800b33e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b33e:	b480      	push	{r7}
 800b340:	b087      	sub	sp, #28
 800b342:	af00      	add	r7, sp, #0
 800b344:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b34a:	697b      	ldr	r3, [r7, #20]
 800b34c:	781b      	ldrb	r3, [r3, #0]
 800b34e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b350:	697b      	ldr	r3, [r7, #20]
 800b352:	3301      	adds	r3, #1
 800b354:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b356:	697b      	ldr	r3, [r7, #20]
 800b358:	781b      	ldrb	r3, [r3, #0]
 800b35a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b35c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800b360:	021b      	lsls	r3, r3, #8
 800b362:	b21a      	sxth	r2, r3
 800b364:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b368:	4313      	orrs	r3, r2
 800b36a:	b21b      	sxth	r3, r3
 800b36c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b36e:	89fb      	ldrh	r3, [r7, #14]
}
 800b370:	4618      	mov	r0, r3
 800b372:	371c      	adds	r7, #28
 800b374:	46bd      	mov	sp, r7
 800b376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37a:	4770      	bx	lr

0800b37c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b084      	sub	sp, #16
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
 800b384:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b386:	2300      	movs	r3, #0
 800b388:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	781b      	ldrb	r3, [r3, #0]
 800b38e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b392:	2b40      	cmp	r3, #64	@ 0x40
 800b394:	d005      	beq.n	800b3a2 <USBD_StdDevReq+0x26>
 800b396:	2b40      	cmp	r3, #64	@ 0x40
 800b398:	d853      	bhi.n	800b442 <USBD_StdDevReq+0xc6>
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d00b      	beq.n	800b3b6 <USBD_StdDevReq+0x3a>
 800b39e:	2b20      	cmp	r3, #32
 800b3a0:	d14f      	bne.n	800b442 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3a8:	689b      	ldr	r3, [r3, #8]
 800b3aa:	6839      	ldr	r1, [r7, #0]
 800b3ac:	6878      	ldr	r0, [r7, #4]
 800b3ae:	4798      	blx	r3
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	73fb      	strb	r3, [r7, #15]
      break;
 800b3b4:	e04a      	b.n	800b44c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	785b      	ldrb	r3, [r3, #1]
 800b3ba:	2b09      	cmp	r3, #9
 800b3bc:	d83b      	bhi.n	800b436 <USBD_StdDevReq+0xba>
 800b3be:	a201      	add	r2, pc, #4	@ (adr r2, 800b3c4 <USBD_StdDevReq+0x48>)
 800b3c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3c4:	0800b419 	.word	0x0800b419
 800b3c8:	0800b42d 	.word	0x0800b42d
 800b3cc:	0800b437 	.word	0x0800b437
 800b3d0:	0800b423 	.word	0x0800b423
 800b3d4:	0800b437 	.word	0x0800b437
 800b3d8:	0800b3f7 	.word	0x0800b3f7
 800b3dc:	0800b3ed 	.word	0x0800b3ed
 800b3e0:	0800b437 	.word	0x0800b437
 800b3e4:	0800b40f 	.word	0x0800b40f
 800b3e8:	0800b401 	.word	0x0800b401
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b3ec:	6839      	ldr	r1, [r7, #0]
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f000 f9de 	bl	800b7b0 <USBD_GetDescriptor>
          break;
 800b3f4:	e024      	b.n	800b440 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b3f6:	6839      	ldr	r1, [r7, #0]
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f000 fb55 	bl	800baa8 <USBD_SetAddress>
          break;
 800b3fe:	e01f      	b.n	800b440 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b400:	6839      	ldr	r1, [r7, #0]
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f000 fb94 	bl	800bb30 <USBD_SetConfig>
 800b408:	4603      	mov	r3, r0
 800b40a:	73fb      	strb	r3, [r7, #15]
          break;
 800b40c:	e018      	b.n	800b440 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b40e:	6839      	ldr	r1, [r7, #0]
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f000 fc33 	bl	800bc7c <USBD_GetConfig>
          break;
 800b416:	e013      	b.n	800b440 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b418:	6839      	ldr	r1, [r7, #0]
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f000 fc64 	bl	800bce8 <USBD_GetStatus>
          break;
 800b420:	e00e      	b.n	800b440 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b422:	6839      	ldr	r1, [r7, #0]
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f000 fc93 	bl	800bd50 <USBD_SetFeature>
          break;
 800b42a:	e009      	b.n	800b440 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b42c:	6839      	ldr	r1, [r7, #0]
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f000 fca2 	bl	800bd78 <USBD_ClrFeature>
          break;
 800b434:	e004      	b.n	800b440 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800b436:	6839      	ldr	r1, [r7, #0]
 800b438:	6878      	ldr	r0, [r7, #4]
 800b43a:	f000 fcf9 	bl	800be30 <USBD_CtlError>
          break;
 800b43e:	bf00      	nop
      }
      break;
 800b440:	e004      	b.n	800b44c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800b442:	6839      	ldr	r1, [r7, #0]
 800b444:	6878      	ldr	r0, [r7, #4]
 800b446:	f000 fcf3 	bl	800be30 <USBD_CtlError>
      break;
 800b44a:	bf00      	nop
  }

  return ret;
 800b44c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b44e:	4618      	mov	r0, r3
 800b450:	3710      	adds	r7, #16
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}
 800b456:	bf00      	nop

0800b458 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b084      	sub	sp, #16
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
 800b460:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b462:	2300      	movs	r3, #0
 800b464:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	781b      	ldrb	r3, [r3, #0]
 800b46a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b46e:	2b40      	cmp	r3, #64	@ 0x40
 800b470:	d005      	beq.n	800b47e <USBD_StdItfReq+0x26>
 800b472:	2b40      	cmp	r3, #64	@ 0x40
 800b474:	d82f      	bhi.n	800b4d6 <USBD_StdItfReq+0x7e>
 800b476:	2b00      	cmp	r3, #0
 800b478:	d001      	beq.n	800b47e <USBD_StdItfReq+0x26>
 800b47a:	2b20      	cmp	r3, #32
 800b47c:	d12b      	bne.n	800b4d6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b484:	b2db      	uxtb	r3, r3
 800b486:	3b01      	subs	r3, #1
 800b488:	2b02      	cmp	r3, #2
 800b48a:	d81d      	bhi.n	800b4c8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	889b      	ldrh	r3, [r3, #4]
 800b490:	b2db      	uxtb	r3, r3
 800b492:	2b0f      	cmp	r3, #15
 800b494:	d813      	bhi.n	800b4be <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b49c:	689b      	ldr	r3, [r3, #8]
 800b49e:	6839      	ldr	r1, [r7, #0]
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	4798      	blx	r3
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	88db      	ldrh	r3, [r3, #6]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d110      	bne.n	800b4d2 <USBD_StdItfReq+0x7a>
 800b4b0:	7bfb      	ldrb	r3, [r7, #15]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d10d      	bne.n	800b4d2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f000 fd85 	bl	800bfc6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b4bc:	e009      	b.n	800b4d2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800b4be:	6839      	ldr	r1, [r7, #0]
 800b4c0:	6878      	ldr	r0, [r7, #4]
 800b4c2:	f000 fcb5 	bl	800be30 <USBD_CtlError>
          break;
 800b4c6:	e004      	b.n	800b4d2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800b4c8:	6839      	ldr	r1, [r7, #0]
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f000 fcb0 	bl	800be30 <USBD_CtlError>
          break;
 800b4d0:	e000      	b.n	800b4d4 <USBD_StdItfReq+0x7c>
          break;
 800b4d2:	bf00      	nop
      }
      break;
 800b4d4:	e004      	b.n	800b4e0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800b4d6:	6839      	ldr	r1, [r7, #0]
 800b4d8:	6878      	ldr	r0, [r7, #4]
 800b4da:	f000 fca9 	bl	800be30 <USBD_CtlError>
      break;
 800b4de:	bf00      	nop
  }

  return ret;
 800b4e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3710      	adds	r7, #16
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}

0800b4ea <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4ea:	b580      	push	{r7, lr}
 800b4ec:	b084      	sub	sp, #16
 800b4ee:	af00      	add	r7, sp, #0
 800b4f0:	6078      	str	r0, [r7, #4]
 800b4f2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	889b      	ldrh	r3, [r3, #4]
 800b4fc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	781b      	ldrb	r3, [r3, #0]
 800b502:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b506:	2b40      	cmp	r3, #64	@ 0x40
 800b508:	d007      	beq.n	800b51a <USBD_StdEPReq+0x30>
 800b50a:	2b40      	cmp	r3, #64	@ 0x40
 800b50c:	f200 8145 	bhi.w	800b79a <USBD_StdEPReq+0x2b0>
 800b510:	2b00      	cmp	r3, #0
 800b512:	d00c      	beq.n	800b52e <USBD_StdEPReq+0x44>
 800b514:	2b20      	cmp	r3, #32
 800b516:	f040 8140 	bne.w	800b79a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b520:	689b      	ldr	r3, [r3, #8]
 800b522:	6839      	ldr	r1, [r7, #0]
 800b524:	6878      	ldr	r0, [r7, #4]
 800b526:	4798      	blx	r3
 800b528:	4603      	mov	r3, r0
 800b52a:	73fb      	strb	r3, [r7, #15]
      break;
 800b52c:	e13a      	b.n	800b7a4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	785b      	ldrb	r3, [r3, #1]
 800b532:	2b03      	cmp	r3, #3
 800b534:	d007      	beq.n	800b546 <USBD_StdEPReq+0x5c>
 800b536:	2b03      	cmp	r3, #3
 800b538:	f300 8129 	bgt.w	800b78e <USBD_StdEPReq+0x2a4>
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d07f      	beq.n	800b640 <USBD_StdEPReq+0x156>
 800b540:	2b01      	cmp	r3, #1
 800b542:	d03c      	beq.n	800b5be <USBD_StdEPReq+0xd4>
 800b544:	e123      	b.n	800b78e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b54c:	b2db      	uxtb	r3, r3
 800b54e:	2b02      	cmp	r3, #2
 800b550:	d002      	beq.n	800b558 <USBD_StdEPReq+0x6e>
 800b552:	2b03      	cmp	r3, #3
 800b554:	d016      	beq.n	800b584 <USBD_StdEPReq+0x9a>
 800b556:	e02c      	b.n	800b5b2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b558:	7bbb      	ldrb	r3, [r7, #14]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d00d      	beq.n	800b57a <USBD_StdEPReq+0x90>
 800b55e:	7bbb      	ldrb	r3, [r7, #14]
 800b560:	2b80      	cmp	r3, #128	@ 0x80
 800b562:	d00a      	beq.n	800b57a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b564:	7bbb      	ldrb	r3, [r7, #14]
 800b566:	4619      	mov	r1, r3
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f000 ff29 	bl	800c3c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b56e:	2180      	movs	r1, #128	@ 0x80
 800b570:	6878      	ldr	r0, [r7, #4]
 800b572:	f000 ff25 	bl	800c3c0 <USBD_LL_StallEP>
 800b576:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b578:	e020      	b.n	800b5bc <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800b57a:	6839      	ldr	r1, [r7, #0]
 800b57c:	6878      	ldr	r0, [r7, #4]
 800b57e:	f000 fc57 	bl	800be30 <USBD_CtlError>
              break;
 800b582:	e01b      	b.n	800b5bc <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	885b      	ldrh	r3, [r3, #2]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d10e      	bne.n	800b5aa <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b58c:	7bbb      	ldrb	r3, [r7, #14]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d00b      	beq.n	800b5aa <USBD_StdEPReq+0xc0>
 800b592:	7bbb      	ldrb	r3, [r7, #14]
 800b594:	2b80      	cmp	r3, #128	@ 0x80
 800b596:	d008      	beq.n	800b5aa <USBD_StdEPReq+0xc0>
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	88db      	ldrh	r3, [r3, #6]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d104      	bne.n	800b5aa <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b5a0:	7bbb      	ldrb	r3, [r7, #14]
 800b5a2:	4619      	mov	r1, r3
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	f000 ff0b 	bl	800c3c0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f000 fd0b 	bl	800bfc6 <USBD_CtlSendStatus>

              break;
 800b5b0:	e004      	b.n	800b5bc <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800b5b2:	6839      	ldr	r1, [r7, #0]
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f000 fc3b 	bl	800be30 <USBD_CtlError>
              break;
 800b5ba:	bf00      	nop
          }
          break;
 800b5bc:	e0ec      	b.n	800b798 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5c4:	b2db      	uxtb	r3, r3
 800b5c6:	2b02      	cmp	r3, #2
 800b5c8:	d002      	beq.n	800b5d0 <USBD_StdEPReq+0xe6>
 800b5ca:	2b03      	cmp	r3, #3
 800b5cc:	d016      	beq.n	800b5fc <USBD_StdEPReq+0x112>
 800b5ce:	e030      	b.n	800b632 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b5d0:	7bbb      	ldrb	r3, [r7, #14]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d00d      	beq.n	800b5f2 <USBD_StdEPReq+0x108>
 800b5d6:	7bbb      	ldrb	r3, [r7, #14]
 800b5d8:	2b80      	cmp	r3, #128	@ 0x80
 800b5da:	d00a      	beq.n	800b5f2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b5dc:	7bbb      	ldrb	r3, [r7, #14]
 800b5de:	4619      	mov	r1, r3
 800b5e0:	6878      	ldr	r0, [r7, #4]
 800b5e2:	f000 feed 	bl	800c3c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b5e6:	2180      	movs	r1, #128	@ 0x80
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f000 fee9 	bl	800c3c0 <USBD_LL_StallEP>
 800b5ee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b5f0:	e025      	b.n	800b63e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800b5f2:	6839      	ldr	r1, [r7, #0]
 800b5f4:	6878      	ldr	r0, [r7, #4]
 800b5f6:	f000 fc1b 	bl	800be30 <USBD_CtlError>
              break;
 800b5fa:	e020      	b.n	800b63e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	885b      	ldrh	r3, [r3, #2]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d11b      	bne.n	800b63c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b604:	7bbb      	ldrb	r3, [r7, #14]
 800b606:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d004      	beq.n	800b618 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b60e:	7bbb      	ldrb	r3, [r7, #14]
 800b610:	4619      	mov	r1, r3
 800b612:	6878      	ldr	r0, [r7, #4]
 800b614:	f000 fef3 	bl	800c3fe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b618:	6878      	ldr	r0, [r7, #4]
 800b61a:	f000 fcd4 	bl	800bfc6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b624:	689b      	ldr	r3, [r3, #8]
 800b626:	6839      	ldr	r1, [r7, #0]
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	4798      	blx	r3
 800b62c:	4603      	mov	r3, r0
 800b62e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800b630:	e004      	b.n	800b63c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800b632:	6839      	ldr	r1, [r7, #0]
 800b634:	6878      	ldr	r0, [r7, #4]
 800b636:	f000 fbfb 	bl	800be30 <USBD_CtlError>
              break;
 800b63a:	e000      	b.n	800b63e <USBD_StdEPReq+0x154>
              break;
 800b63c:	bf00      	nop
          }
          break;
 800b63e:	e0ab      	b.n	800b798 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b646:	b2db      	uxtb	r3, r3
 800b648:	2b02      	cmp	r3, #2
 800b64a:	d002      	beq.n	800b652 <USBD_StdEPReq+0x168>
 800b64c:	2b03      	cmp	r3, #3
 800b64e:	d032      	beq.n	800b6b6 <USBD_StdEPReq+0x1cc>
 800b650:	e097      	b.n	800b782 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b652:	7bbb      	ldrb	r3, [r7, #14]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d007      	beq.n	800b668 <USBD_StdEPReq+0x17e>
 800b658:	7bbb      	ldrb	r3, [r7, #14]
 800b65a:	2b80      	cmp	r3, #128	@ 0x80
 800b65c:	d004      	beq.n	800b668 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800b65e:	6839      	ldr	r1, [r7, #0]
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f000 fbe5 	bl	800be30 <USBD_CtlError>
                break;
 800b666:	e091      	b.n	800b78c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b668:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	da0b      	bge.n	800b688 <USBD_StdEPReq+0x19e>
 800b670:	7bbb      	ldrb	r3, [r7, #14]
 800b672:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b676:	4613      	mov	r3, r2
 800b678:	009b      	lsls	r3, r3, #2
 800b67a:	4413      	add	r3, r2
 800b67c:	009b      	lsls	r3, r3, #2
 800b67e:	3310      	adds	r3, #16
 800b680:	687a      	ldr	r2, [r7, #4]
 800b682:	4413      	add	r3, r2
 800b684:	3304      	adds	r3, #4
 800b686:	e00b      	b.n	800b6a0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b688:	7bbb      	ldrb	r3, [r7, #14]
 800b68a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b68e:	4613      	mov	r3, r2
 800b690:	009b      	lsls	r3, r3, #2
 800b692:	4413      	add	r3, r2
 800b694:	009b      	lsls	r3, r3, #2
 800b696:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b69a:	687a      	ldr	r2, [r7, #4]
 800b69c:	4413      	add	r3, r2
 800b69e:	3304      	adds	r3, #4
 800b6a0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b6a2:	68bb      	ldr	r3, [r7, #8]
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	2202      	movs	r2, #2
 800b6ac:	4619      	mov	r1, r3
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	f000 fc2f 	bl	800bf12 <USBD_CtlSendData>
              break;
 800b6b4:	e06a      	b.n	800b78c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b6b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	da11      	bge.n	800b6e2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b6be:	7bbb      	ldrb	r3, [r7, #14]
 800b6c0:	f003 020f 	and.w	r2, r3, #15
 800b6c4:	6879      	ldr	r1, [r7, #4]
 800b6c6:	4613      	mov	r3, r2
 800b6c8:	009b      	lsls	r3, r3, #2
 800b6ca:	4413      	add	r3, r2
 800b6cc:	009b      	lsls	r3, r3, #2
 800b6ce:	440b      	add	r3, r1
 800b6d0:	3324      	adds	r3, #36	@ 0x24
 800b6d2:	881b      	ldrh	r3, [r3, #0]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d117      	bne.n	800b708 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b6d8:	6839      	ldr	r1, [r7, #0]
 800b6da:	6878      	ldr	r0, [r7, #4]
 800b6dc:	f000 fba8 	bl	800be30 <USBD_CtlError>
                  break;
 800b6e0:	e054      	b.n	800b78c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b6e2:	7bbb      	ldrb	r3, [r7, #14]
 800b6e4:	f003 020f 	and.w	r2, r3, #15
 800b6e8:	6879      	ldr	r1, [r7, #4]
 800b6ea:	4613      	mov	r3, r2
 800b6ec:	009b      	lsls	r3, r3, #2
 800b6ee:	4413      	add	r3, r2
 800b6f0:	009b      	lsls	r3, r3, #2
 800b6f2:	440b      	add	r3, r1
 800b6f4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b6f8:	881b      	ldrh	r3, [r3, #0]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d104      	bne.n	800b708 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b6fe:	6839      	ldr	r1, [r7, #0]
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	f000 fb95 	bl	800be30 <USBD_CtlError>
                  break;
 800b706:	e041      	b.n	800b78c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b708:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	da0b      	bge.n	800b728 <USBD_StdEPReq+0x23e>
 800b710:	7bbb      	ldrb	r3, [r7, #14]
 800b712:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b716:	4613      	mov	r3, r2
 800b718:	009b      	lsls	r3, r3, #2
 800b71a:	4413      	add	r3, r2
 800b71c:	009b      	lsls	r3, r3, #2
 800b71e:	3310      	adds	r3, #16
 800b720:	687a      	ldr	r2, [r7, #4]
 800b722:	4413      	add	r3, r2
 800b724:	3304      	adds	r3, #4
 800b726:	e00b      	b.n	800b740 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b728:	7bbb      	ldrb	r3, [r7, #14]
 800b72a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b72e:	4613      	mov	r3, r2
 800b730:	009b      	lsls	r3, r3, #2
 800b732:	4413      	add	r3, r2
 800b734:	009b      	lsls	r3, r3, #2
 800b736:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b73a:	687a      	ldr	r2, [r7, #4]
 800b73c:	4413      	add	r3, r2
 800b73e:	3304      	adds	r3, #4
 800b740:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b742:	7bbb      	ldrb	r3, [r7, #14]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d002      	beq.n	800b74e <USBD_StdEPReq+0x264>
 800b748:	7bbb      	ldrb	r3, [r7, #14]
 800b74a:	2b80      	cmp	r3, #128	@ 0x80
 800b74c:	d103      	bne.n	800b756 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	2200      	movs	r2, #0
 800b752:	601a      	str	r2, [r3, #0]
 800b754:	e00e      	b.n	800b774 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b756:	7bbb      	ldrb	r3, [r7, #14]
 800b758:	4619      	mov	r1, r3
 800b75a:	6878      	ldr	r0, [r7, #4]
 800b75c:	f000 fe6e 	bl	800c43c <USBD_LL_IsStallEP>
 800b760:	4603      	mov	r3, r0
 800b762:	2b00      	cmp	r3, #0
 800b764:	d003      	beq.n	800b76e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	2201      	movs	r2, #1
 800b76a:	601a      	str	r2, [r3, #0]
 800b76c:	e002      	b.n	800b774 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	2200      	movs	r2, #0
 800b772:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b774:	68bb      	ldr	r3, [r7, #8]
 800b776:	2202      	movs	r2, #2
 800b778:	4619      	mov	r1, r3
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f000 fbc9 	bl	800bf12 <USBD_CtlSendData>
              break;
 800b780:	e004      	b.n	800b78c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800b782:	6839      	ldr	r1, [r7, #0]
 800b784:	6878      	ldr	r0, [r7, #4]
 800b786:	f000 fb53 	bl	800be30 <USBD_CtlError>
              break;
 800b78a:	bf00      	nop
          }
          break;
 800b78c:	e004      	b.n	800b798 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800b78e:	6839      	ldr	r1, [r7, #0]
 800b790:	6878      	ldr	r0, [r7, #4]
 800b792:	f000 fb4d 	bl	800be30 <USBD_CtlError>
          break;
 800b796:	bf00      	nop
      }
      break;
 800b798:	e004      	b.n	800b7a4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800b79a:	6839      	ldr	r1, [r7, #0]
 800b79c:	6878      	ldr	r0, [r7, #4]
 800b79e:	f000 fb47 	bl	800be30 <USBD_CtlError>
      break;
 800b7a2:	bf00      	nop
  }

  return ret;
 800b7a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	3710      	adds	r7, #16
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bd80      	pop	{r7, pc}
	...

0800b7b0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b084      	sub	sp, #16
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
 800b7b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	885b      	ldrh	r3, [r3, #2]
 800b7ca:	0a1b      	lsrs	r3, r3, #8
 800b7cc:	b29b      	uxth	r3, r3
 800b7ce:	3b01      	subs	r3, #1
 800b7d0:	2b06      	cmp	r3, #6
 800b7d2:	f200 813b 	bhi.w	800ba4c <USBD_GetDescriptor+0x29c>
 800b7d6:	a201      	add	r2, pc, #4	@ (adr r2, 800b7dc <USBD_GetDescriptor+0x2c>)
 800b7d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7dc:	0800b7f9 	.word	0x0800b7f9
 800b7e0:	0800b811 	.word	0x0800b811
 800b7e4:	0800b851 	.word	0x0800b851
 800b7e8:	0800ba4d 	.word	0x0800ba4d
 800b7ec:	0800ba4d 	.word	0x0800ba4d
 800b7f0:	0800b9ed 	.word	0x0800b9ed
 800b7f4:	0800ba19 	.word	0x0800ba19
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	687a      	ldr	r2, [r7, #4]
 800b802:	7c12      	ldrb	r2, [r2, #16]
 800b804:	f107 0108 	add.w	r1, r7, #8
 800b808:	4610      	mov	r0, r2
 800b80a:	4798      	blx	r3
 800b80c:	60f8      	str	r0, [r7, #12]
      break;
 800b80e:	e125      	b.n	800ba5c <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	7c1b      	ldrb	r3, [r3, #16]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d10d      	bne.n	800b834 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b81e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b820:	f107 0208 	add.w	r2, r7, #8
 800b824:	4610      	mov	r0, r2
 800b826:	4798      	blx	r3
 800b828:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	3301      	adds	r3, #1
 800b82e:	2202      	movs	r2, #2
 800b830:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b832:	e113      	b.n	800ba5c <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b83a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b83c:	f107 0208 	add.w	r2, r7, #8
 800b840:	4610      	mov	r0, r2
 800b842:	4798      	blx	r3
 800b844:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	3301      	adds	r3, #1
 800b84a:	2202      	movs	r2, #2
 800b84c:	701a      	strb	r2, [r3, #0]
      break;
 800b84e:	e105      	b.n	800ba5c <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	885b      	ldrh	r3, [r3, #2]
 800b854:	b2db      	uxtb	r3, r3
 800b856:	2b05      	cmp	r3, #5
 800b858:	f200 80ac 	bhi.w	800b9b4 <USBD_GetDescriptor+0x204>
 800b85c:	a201      	add	r2, pc, #4	@ (adr r2, 800b864 <USBD_GetDescriptor+0xb4>)
 800b85e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b862:	bf00      	nop
 800b864:	0800b87d 	.word	0x0800b87d
 800b868:	0800b8b1 	.word	0x0800b8b1
 800b86c:	0800b8e5 	.word	0x0800b8e5
 800b870:	0800b919 	.word	0x0800b919
 800b874:	0800b94d 	.word	0x0800b94d
 800b878:	0800b981 	.word	0x0800b981
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b882:	685b      	ldr	r3, [r3, #4]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d00b      	beq.n	800b8a0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b88e:	685b      	ldr	r3, [r3, #4]
 800b890:	687a      	ldr	r2, [r7, #4]
 800b892:	7c12      	ldrb	r2, [r2, #16]
 800b894:	f107 0108 	add.w	r1, r7, #8
 800b898:	4610      	mov	r0, r2
 800b89a:	4798      	blx	r3
 800b89c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b89e:	e0a4      	b.n	800b9ea <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800b8a0:	6839      	ldr	r1, [r7, #0]
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f000 fac4 	bl	800be30 <USBD_CtlError>
            err++;
 800b8a8:	7afb      	ldrb	r3, [r7, #11]
 800b8aa:	3301      	adds	r3, #1
 800b8ac:	72fb      	strb	r3, [r7, #11]
          break;
 800b8ae:	e09c      	b.n	800b9ea <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b8b6:	689b      	ldr	r3, [r3, #8]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d00b      	beq.n	800b8d4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b8c2:	689b      	ldr	r3, [r3, #8]
 800b8c4:	687a      	ldr	r2, [r7, #4]
 800b8c6:	7c12      	ldrb	r2, [r2, #16]
 800b8c8:	f107 0108 	add.w	r1, r7, #8
 800b8cc:	4610      	mov	r0, r2
 800b8ce:	4798      	blx	r3
 800b8d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b8d2:	e08a      	b.n	800b9ea <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800b8d4:	6839      	ldr	r1, [r7, #0]
 800b8d6:	6878      	ldr	r0, [r7, #4]
 800b8d8:	f000 faaa 	bl	800be30 <USBD_CtlError>
            err++;
 800b8dc:	7afb      	ldrb	r3, [r7, #11]
 800b8de:	3301      	adds	r3, #1
 800b8e0:	72fb      	strb	r3, [r7, #11]
          break;
 800b8e2:	e082      	b.n	800b9ea <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b8ea:	68db      	ldr	r3, [r3, #12]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d00b      	beq.n	800b908 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b8f6:	68db      	ldr	r3, [r3, #12]
 800b8f8:	687a      	ldr	r2, [r7, #4]
 800b8fa:	7c12      	ldrb	r2, [r2, #16]
 800b8fc:	f107 0108 	add.w	r1, r7, #8
 800b900:	4610      	mov	r0, r2
 800b902:	4798      	blx	r3
 800b904:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b906:	e070      	b.n	800b9ea <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800b908:	6839      	ldr	r1, [r7, #0]
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f000 fa90 	bl	800be30 <USBD_CtlError>
            err++;
 800b910:	7afb      	ldrb	r3, [r7, #11]
 800b912:	3301      	adds	r3, #1
 800b914:	72fb      	strb	r3, [r7, #11]
          break;
 800b916:	e068      	b.n	800b9ea <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b91e:	691b      	ldr	r3, [r3, #16]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d00b      	beq.n	800b93c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b92a:	691b      	ldr	r3, [r3, #16]
 800b92c:	687a      	ldr	r2, [r7, #4]
 800b92e:	7c12      	ldrb	r2, [r2, #16]
 800b930:	f107 0108 	add.w	r1, r7, #8
 800b934:	4610      	mov	r0, r2
 800b936:	4798      	blx	r3
 800b938:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b93a:	e056      	b.n	800b9ea <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800b93c:	6839      	ldr	r1, [r7, #0]
 800b93e:	6878      	ldr	r0, [r7, #4]
 800b940:	f000 fa76 	bl	800be30 <USBD_CtlError>
            err++;
 800b944:	7afb      	ldrb	r3, [r7, #11]
 800b946:	3301      	adds	r3, #1
 800b948:	72fb      	strb	r3, [r7, #11]
          break;
 800b94a:	e04e      	b.n	800b9ea <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b952:	695b      	ldr	r3, [r3, #20]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d00b      	beq.n	800b970 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b95e:	695b      	ldr	r3, [r3, #20]
 800b960:	687a      	ldr	r2, [r7, #4]
 800b962:	7c12      	ldrb	r2, [r2, #16]
 800b964:	f107 0108 	add.w	r1, r7, #8
 800b968:	4610      	mov	r0, r2
 800b96a:	4798      	blx	r3
 800b96c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b96e:	e03c      	b.n	800b9ea <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800b970:	6839      	ldr	r1, [r7, #0]
 800b972:	6878      	ldr	r0, [r7, #4]
 800b974:	f000 fa5c 	bl	800be30 <USBD_CtlError>
            err++;
 800b978:	7afb      	ldrb	r3, [r7, #11]
 800b97a:	3301      	adds	r3, #1
 800b97c:	72fb      	strb	r3, [r7, #11]
          break;
 800b97e:	e034      	b.n	800b9ea <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b986:	699b      	ldr	r3, [r3, #24]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d00b      	beq.n	800b9a4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b992:	699b      	ldr	r3, [r3, #24]
 800b994:	687a      	ldr	r2, [r7, #4]
 800b996:	7c12      	ldrb	r2, [r2, #16]
 800b998:	f107 0108 	add.w	r1, r7, #8
 800b99c:	4610      	mov	r0, r2
 800b99e:	4798      	blx	r3
 800b9a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b9a2:	e022      	b.n	800b9ea <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800b9a4:	6839      	ldr	r1, [r7, #0]
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	f000 fa42 	bl	800be30 <USBD_CtlError>
            err++;
 800b9ac:	7afb      	ldrb	r3, [r7, #11]
 800b9ae:	3301      	adds	r3, #1
 800b9b0:	72fb      	strb	r3, [r7, #11]
          break;
 800b9b2:	e01a      	b.n	800b9ea <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b9ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d00c      	beq.n	800b9da <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b9c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9c8:	683a      	ldr	r2, [r7, #0]
 800b9ca:	8852      	ldrh	r2, [r2, #2]
 800b9cc:	b2d1      	uxtb	r1, r2
 800b9ce:	f107 0208 	add.w	r2, r7, #8
 800b9d2:	6878      	ldr	r0, [r7, #4]
 800b9d4:	4798      	blx	r3
 800b9d6:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 800b9d8:	e006      	b.n	800b9e8 <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 800b9da:	6839      	ldr	r1, [r7, #0]
 800b9dc:	6878      	ldr	r0, [r7, #4]
 800b9de:	f000 fa27 	bl	800be30 <USBD_CtlError>
            err++;
 800b9e2:	7afb      	ldrb	r3, [r7, #11]
 800b9e4:	3301      	adds	r3, #1
 800b9e6:	72fb      	strb	r3, [r7, #11]
          break;
 800b9e8:	bf00      	nop
      }
      break;
 800b9ea:	e037      	b.n	800ba5c <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	7c1b      	ldrb	r3, [r3, #16]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d109      	bne.n	800ba08 <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b9fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9fc:	f107 0208 	add.w	r2, r7, #8
 800ba00:	4610      	mov	r0, r2
 800ba02:	4798      	blx	r3
 800ba04:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ba06:	e029      	b.n	800ba5c <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 800ba08:	6839      	ldr	r1, [r7, #0]
 800ba0a:	6878      	ldr	r0, [r7, #4]
 800ba0c:	f000 fa10 	bl	800be30 <USBD_CtlError>
        err++;
 800ba10:	7afb      	ldrb	r3, [r7, #11]
 800ba12:	3301      	adds	r3, #1
 800ba14:	72fb      	strb	r3, [r7, #11]
      break;
 800ba16:	e021      	b.n	800ba5c <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	7c1b      	ldrb	r3, [r3, #16]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d10d      	bne.n	800ba3c <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba28:	f107 0208 	add.w	r2, r7, #8
 800ba2c:	4610      	mov	r0, r2
 800ba2e:	4798      	blx	r3
 800ba30:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	3301      	adds	r3, #1
 800ba36:	2207      	movs	r2, #7
 800ba38:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ba3a:	e00f      	b.n	800ba5c <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 800ba3c:	6839      	ldr	r1, [r7, #0]
 800ba3e:	6878      	ldr	r0, [r7, #4]
 800ba40:	f000 f9f6 	bl	800be30 <USBD_CtlError>
        err++;
 800ba44:	7afb      	ldrb	r3, [r7, #11]
 800ba46:	3301      	adds	r3, #1
 800ba48:	72fb      	strb	r3, [r7, #11]
      break;
 800ba4a:	e007      	b.n	800ba5c <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 800ba4c:	6839      	ldr	r1, [r7, #0]
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f000 f9ee 	bl	800be30 <USBD_CtlError>
      err++;
 800ba54:	7afb      	ldrb	r3, [r7, #11]
 800ba56:	3301      	adds	r3, #1
 800ba58:	72fb      	strb	r3, [r7, #11]
      break;
 800ba5a:	bf00      	nop
  }

  if (err != 0U)
 800ba5c:	7afb      	ldrb	r3, [r7, #11]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d11e      	bne.n	800baa0 <USBD_GetDescriptor+0x2f0>
  {
    return;
  }

  if (req->wLength != 0U)
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	88db      	ldrh	r3, [r3, #6]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d016      	beq.n	800ba98 <USBD_GetDescriptor+0x2e8>
  {
    if (len != 0U)
 800ba6a:	893b      	ldrh	r3, [r7, #8]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d00e      	beq.n	800ba8e <USBD_GetDescriptor+0x2de>
    {
      len = MIN(len, req->wLength);
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	88da      	ldrh	r2, [r3, #6]
 800ba74:	893b      	ldrh	r3, [r7, #8]
 800ba76:	4293      	cmp	r3, r2
 800ba78:	bf28      	it	cs
 800ba7a:	4613      	movcs	r3, r2
 800ba7c:	b29b      	uxth	r3, r3
 800ba7e:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ba80:	893b      	ldrh	r3, [r7, #8]
 800ba82:	461a      	mov	r2, r3
 800ba84:	68f9      	ldr	r1, [r7, #12]
 800ba86:	6878      	ldr	r0, [r7, #4]
 800ba88:	f000 fa43 	bl	800bf12 <USBD_CtlSendData>
 800ba8c:	e009      	b.n	800baa2 <USBD_GetDescriptor+0x2f2>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ba8e:	6839      	ldr	r1, [r7, #0]
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f000 f9cd 	bl	800be30 <USBD_CtlError>
 800ba96:	e004      	b.n	800baa2 <USBD_GetDescriptor+0x2f2>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	f000 fa94 	bl	800bfc6 <USBD_CtlSendStatus>
 800ba9e:	e000      	b.n	800baa2 <USBD_GetDescriptor+0x2f2>
    return;
 800baa0:	bf00      	nop
  }
}
 800baa2:	3710      	adds	r7, #16
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}

0800baa8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b084      	sub	sp, #16
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
 800bab0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	889b      	ldrh	r3, [r3, #4]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d131      	bne.n	800bb1e <USBD_SetAddress+0x76>
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	88db      	ldrh	r3, [r3, #6]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d12d      	bne.n	800bb1e <USBD_SetAddress+0x76>
 800bac2:	683b      	ldr	r3, [r7, #0]
 800bac4:	885b      	ldrh	r3, [r3, #2]
 800bac6:	2b7f      	cmp	r3, #127	@ 0x7f
 800bac8:	d829      	bhi.n	800bb1e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	885b      	ldrh	r3, [r3, #2]
 800bace:	b2db      	uxtb	r3, r3
 800bad0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bad4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800badc:	b2db      	uxtb	r3, r3
 800bade:	2b03      	cmp	r3, #3
 800bae0:	d104      	bne.n	800baec <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bae2:	6839      	ldr	r1, [r7, #0]
 800bae4:	6878      	ldr	r0, [r7, #4]
 800bae6:	f000 f9a3 	bl	800be30 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800baea:	e01d      	b.n	800bb28 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	7bfa      	ldrb	r2, [r7, #15]
 800baf0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800baf4:	7bfb      	ldrb	r3, [r7, #15]
 800baf6:	4619      	mov	r1, r3
 800baf8:	6878      	ldr	r0, [r7, #4]
 800bafa:	f000 fccb 	bl	800c494 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bafe:	6878      	ldr	r0, [r7, #4]
 800bb00:	f000 fa61 	bl	800bfc6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bb04:	7bfb      	ldrb	r3, [r7, #15]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d004      	beq.n	800bb14 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	2202      	movs	r2, #2
 800bb0e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb12:	e009      	b.n	800bb28 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2201      	movs	r2, #1
 800bb18:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb1c:	e004      	b.n	800bb28 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bb1e:	6839      	ldr	r1, [r7, #0]
 800bb20:	6878      	ldr	r0, [r7, #4]
 800bb22:	f000 f985 	bl	800be30 <USBD_CtlError>
  }
}
 800bb26:	bf00      	nop
 800bb28:	bf00      	nop
 800bb2a:	3710      	adds	r7, #16
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}

0800bb30 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b084      	sub	sp, #16
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
 800bb38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	885b      	ldrh	r3, [r3, #2]
 800bb42:	b2da      	uxtb	r2, r3
 800bb44:	4b4c      	ldr	r3, [pc, #304]	@ (800bc78 <USBD_SetConfig+0x148>)
 800bb46:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bb48:	4b4b      	ldr	r3, [pc, #300]	@ (800bc78 <USBD_SetConfig+0x148>)
 800bb4a:	781b      	ldrb	r3, [r3, #0]
 800bb4c:	2b01      	cmp	r3, #1
 800bb4e:	d905      	bls.n	800bb5c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bb50:	6839      	ldr	r1, [r7, #0]
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f000 f96c 	bl	800be30 <USBD_CtlError>
    return USBD_FAIL;
 800bb58:	2303      	movs	r3, #3
 800bb5a:	e088      	b.n	800bc6e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb62:	b2db      	uxtb	r3, r3
 800bb64:	2b02      	cmp	r3, #2
 800bb66:	d002      	beq.n	800bb6e <USBD_SetConfig+0x3e>
 800bb68:	2b03      	cmp	r3, #3
 800bb6a:	d025      	beq.n	800bbb8 <USBD_SetConfig+0x88>
 800bb6c:	e071      	b.n	800bc52 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bb6e:	4b42      	ldr	r3, [pc, #264]	@ (800bc78 <USBD_SetConfig+0x148>)
 800bb70:	781b      	ldrb	r3, [r3, #0]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d01c      	beq.n	800bbb0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800bb76:	4b40      	ldr	r3, [pc, #256]	@ (800bc78 <USBD_SetConfig+0x148>)
 800bb78:	781b      	ldrb	r3, [r3, #0]
 800bb7a:	461a      	mov	r2, r3
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bb80:	4b3d      	ldr	r3, [pc, #244]	@ (800bc78 <USBD_SetConfig+0x148>)
 800bb82:	781b      	ldrb	r3, [r3, #0]
 800bb84:	4619      	mov	r1, r3
 800bb86:	6878      	ldr	r0, [r7, #4]
 800bb88:	f7ff f93b 	bl	800ae02 <USBD_SetClassConfig>
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bb90:	7bfb      	ldrb	r3, [r7, #15]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d004      	beq.n	800bba0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800bb96:	6839      	ldr	r1, [r7, #0]
 800bb98:	6878      	ldr	r0, [r7, #4]
 800bb9a:	f000 f949 	bl	800be30 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bb9e:	e065      	b.n	800bc6c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800bba0:	6878      	ldr	r0, [r7, #4]
 800bba2:	f000 fa10 	bl	800bfc6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	2203      	movs	r2, #3
 800bbaa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800bbae:	e05d      	b.n	800bc6c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800bbb0:	6878      	ldr	r0, [r7, #4]
 800bbb2:	f000 fa08 	bl	800bfc6 <USBD_CtlSendStatus>
      break;
 800bbb6:	e059      	b.n	800bc6c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bbb8:	4b2f      	ldr	r3, [pc, #188]	@ (800bc78 <USBD_SetConfig+0x148>)
 800bbba:	781b      	ldrb	r3, [r3, #0]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d112      	bne.n	800bbe6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2202      	movs	r2, #2
 800bbc4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800bbc8:	4b2b      	ldr	r3, [pc, #172]	@ (800bc78 <USBD_SetConfig+0x148>)
 800bbca:	781b      	ldrb	r3, [r3, #0]
 800bbcc:	461a      	mov	r2, r3
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bbd2:	4b29      	ldr	r3, [pc, #164]	@ (800bc78 <USBD_SetConfig+0x148>)
 800bbd4:	781b      	ldrb	r3, [r3, #0]
 800bbd6:	4619      	mov	r1, r3
 800bbd8:	6878      	ldr	r0, [r7, #4]
 800bbda:	f7ff f92e 	bl	800ae3a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	f000 f9f1 	bl	800bfc6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bbe4:	e042      	b.n	800bc6c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800bbe6:	4b24      	ldr	r3, [pc, #144]	@ (800bc78 <USBD_SetConfig+0x148>)
 800bbe8:	781b      	ldrb	r3, [r3, #0]
 800bbea:	461a      	mov	r2, r3
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	685b      	ldr	r3, [r3, #4]
 800bbf0:	429a      	cmp	r2, r3
 800bbf2:	d02a      	beq.n	800bc4a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	685b      	ldr	r3, [r3, #4]
 800bbf8:	b2db      	uxtb	r3, r3
 800bbfa:	4619      	mov	r1, r3
 800bbfc:	6878      	ldr	r0, [r7, #4]
 800bbfe:	f7ff f91c 	bl	800ae3a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bc02:	4b1d      	ldr	r3, [pc, #116]	@ (800bc78 <USBD_SetConfig+0x148>)
 800bc04:	781b      	ldrb	r3, [r3, #0]
 800bc06:	461a      	mov	r2, r3
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bc0c:	4b1a      	ldr	r3, [pc, #104]	@ (800bc78 <USBD_SetConfig+0x148>)
 800bc0e:	781b      	ldrb	r3, [r3, #0]
 800bc10:	4619      	mov	r1, r3
 800bc12:	6878      	ldr	r0, [r7, #4]
 800bc14:	f7ff f8f5 	bl	800ae02 <USBD_SetClassConfig>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bc1c:	7bfb      	ldrb	r3, [r7, #15]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d00f      	beq.n	800bc42 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800bc22:	6839      	ldr	r1, [r7, #0]
 800bc24:	6878      	ldr	r0, [r7, #4]
 800bc26:	f000 f903 	bl	800be30 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	685b      	ldr	r3, [r3, #4]
 800bc2e:	b2db      	uxtb	r3, r3
 800bc30:	4619      	mov	r1, r3
 800bc32:	6878      	ldr	r0, [r7, #4]
 800bc34:	f7ff f901 	bl	800ae3a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2202      	movs	r2, #2
 800bc3c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800bc40:	e014      	b.n	800bc6c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	f000 f9bf 	bl	800bfc6 <USBD_CtlSendStatus>
      break;
 800bc48:	e010      	b.n	800bc6c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	f000 f9bb 	bl	800bfc6 <USBD_CtlSendStatus>
      break;
 800bc50:	e00c      	b.n	800bc6c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800bc52:	6839      	ldr	r1, [r7, #0]
 800bc54:	6878      	ldr	r0, [r7, #4]
 800bc56:	f000 f8eb 	bl	800be30 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bc5a:	4b07      	ldr	r3, [pc, #28]	@ (800bc78 <USBD_SetConfig+0x148>)
 800bc5c:	781b      	ldrb	r3, [r3, #0]
 800bc5e:	4619      	mov	r1, r3
 800bc60:	6878      	ldr	r0, [r7, #4]
 800bc62:	f7ff f8ea 	bl	800ae3a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bc66:	2303      	movs	r3, #3
 800bc68:	73fb      	strb	r3, [r7, #15]
      break;
 800bc6a:	bf00      	nop
  }

  return ret;
 800bc6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3710      	adds	r7, #16
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}
 800bc76:	bf00      	nop
 800bc78:	2000a498 	.word	0x2000a498

0800bc7c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b082      	sub	sp, #8
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
 800bc84:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	88db      	ldrh	r3, [r3, #6]
 800bc8a:	2b01      	cmp	r3, #1
 800bc8c:	d004      	beq.n	800bc98 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bc8e:	6839      	ldr	r1, [r7, #0]
 800bc90:	6878      	ldr	r0, [r7, #4]
 800bc92:	f000 f8cd 	bl	800be30 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bc96:	e023      	b.n	800bce0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc9e:	b2db      	uxtb	r3, r3
 800bca0:	2b02      	cmp	r3, #2
 800bca2:	dc02      	bgt.n	800bcaa <USBD_GetConfig+0x2e>
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	dc03      	bgt.n	800bcb0 <USBD_GetConfig+0x34>
 800bca8:	e015      	b.n	800bcd6 <USBD_GetConfig+0x5a>
 800bcaa:	2b03      	cmp	r3, #3
 800bcac:	d00b      	beq.n	800bcc6 <USBD_GetConfig+0x4a>
 800bcae:	e012      	b.n	800bcd6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	3308      	adds	r3, #8
 800bcba:	2201      	movs	r2, #1
 800bcbc:	4619      	mov	r1, r3
 800bcbe:	6878      	ldr	r0, [r7, #4]
 800bcc0:	f000 f927 	bl	800bf12 <USBD_CtlSendData>
        break;
 800bcc4:	e00c      	b.n	800bce0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	3304      	adds	r3, #4
 800bcca:	2201      	movs	r2, #1
 800bccc:	4619      	mov	r1, r3
 800bcce:	6878      	ldr	r0, [r7, #4]
 800bcd0:	f000 f91f 	bl	800bf12 <USBD_CtlSendData>
        break;
 800bcd4:	e004      	b.n	800bce0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800bcd6:	6839      	ldr	r1, [r7, #0]
 800bcd8:	6878      	ldr	r0, [r7, #4]
 800bcda:	f000 f8a9 	bl	800be30 <USBD_CtlError>
        break;
 800bcde:	bf00      	nop
}
 800bce0:	bf00      	nop
 800bce2:	3708      	adds	r7, #8
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}

0800bce8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b082      	sub	sp, #8
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
 800bcf0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bcf8:	b2db      	uxtb	r3, r3
 800bcfa:	3b01      	subs	r3, #1
 800bcfc:	2b02      	cmp	r3, #2
 800bcfe:	d81e      	bhi.n	800bd3e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	88db      	ldrh	r3, [r3, #6]
 800bd04:	2b02      	cmp	r3, #2
 800bd06:	d004      	beq.n	800bd12 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800bd08:	6839      	ldr	r1, [r7, #0]
 800bd0a:	6878      	ldr	r0, [r7, #4]
 800bd0c:	f000 f890 	bl	800be30 <USBD_CtlError>
        break;
 800bd10:	e01a      	b.n	800bd48 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	2201      	movs	r2, #1
 800bd16:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d005      	beq.n	800bd2e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	68db      	ldr	r3, [r3, #12]
 800bd26:	f043 0202 	orr.w	r2, r3, #2
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	330c      	adds	r3, #12
 800bd32:	2202      	movs	r2, #2
 800bd34:	4619      	mov	r1, r3
 800bd36:	6878      	ldr	r0, [r7, #4]
 800bd38:	f000 f8eb 	bl	800bf12 <USBD_CtlSendData>
      break;
 800bd3c:	e004      	b.n	800bd48 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800bd3e:	6839      	ldr	r1, [r7, #0]
 800bd40:	6878      	ldr	r0, [r7, #4]
 800bd42:	f000 f875 	bl	800be30 <USBD_CtlError>
      break;
 800bd46:	bf00      	nop
  }
}
 800bd48:	bf00      	nop
 800bd4a:	3708      	adds	r7, #8
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	bd80      	pop	{r7, pc}

0800bd50 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b082      	sub	sp, #8
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
 800bd58:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	885b      	ldrh	r3, [r3, #2]
 800bd5e:	2b01      	cmp	r3, #1
 800bd60:	d106      	bne.n	800bd70 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	2201      	movs	r2, #1
 800bd66:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f000 f92b 	bl	800bfc6 <USBD_CtlSendStatus>
  }
}
 800bd70:	bf00      	nop
 800bd72:	3708      	adds	r7, #8
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd80      	pop	{r7, pc}

0800bd78 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b082      	sub	sp, #8
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
 800bd80:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd88:	b2db      	uxtb	r3, r3
 800bd8a:	3b01      	subs	r3, #1
 800bd8c:	2b02      	cmp	r3, #2
 800bd8e:	d80b      	bhi.n	800bda8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	885b      	ldrh	r3, [r3, #2]
 800bd94:	2b01      	cmp	r3, #1
 800bd96:	d10c      	bne.n	800bdb2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bda0:	6878      	ldr	r0, [r7, #4]
 800bda2:	f000 f910 	bl	800bfc6 <USBD_CtlSendStatus>
      }
      break;
 800bda6:	e004      	b.n	800bdb2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800bda8:	6839      	ldr	r1, [r7, #0]
 800bdaa:	6878      	ldr	r0, [r7, #4]
 800bdac:	f000 f840 	bl	800be30 <USBD_CtlError>
      break;
 800bdb0:	e000      	b.n	800bdb4 <USBD_ClrFeature+0x3c>
      break;
 800bdb2:	bf00      	nop
  }
}
 800bdb4:	bf00      	nop
 800bdb6:	3708      	adds	r7, #8
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	bd80      	pop	{r7, pc}

0800bdbc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b084      	sub	sp, #16
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
 800bdc4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	781a      	ldrb	r2, [r3, #0]
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	3301      	adds	r3, #1
 800bdd6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	781a      	ldrb	r2, [r3, #0]
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	3301      	adds	r3, #1
 800bde4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800bde6:	68f8      	ldr	r0, [r7, #12]
 800bde8:	f7ff faa9 	bl	800b33e <SWAPBYTE>
 800bdec:	4603      	mov	r3, r0
 800bdee:	461a      	mov	r2, r3
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	3301      	adds	r3, #1
 800bdf8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	3301      	adds	r3, #1
 800bdfe:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800be00:	68f8      	ldr	r0, [r7, #12]
 800be02:	f7ff fa9c 	bl	800b33e <SWAPBYTE>
 800be06:	4603      	mov	r3, r0
 800be08:	461a      	mov	r2, r3
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	3301      	adds	r3, #1
 800be12:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	3301      	adds	r3, #1
 800be18:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800be1a:	68f8      	ldr	r0, [r7, #12]
 800be1c:	f7ff fa8f 	bl	800b33e <SWAPBYTE>
 800be20:	4603      	mov	r3, r0
 800be22:	461a      	mov	r2, r3
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	80da      	strh	r2, [r3, #6]
}
 800be28:	bf00      	nop
 800be2a:	3710      	adds	r7, #16
 800be2c:	46bd      	mov	sp, r7
 800be2e:	bd80      	pop	{r7, pc}

0800be30 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b082      	sub	sp, #8
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
 800be38:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800be3a:	2180      	movs	r1, #128	@ 0x80
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f000 fabf 	bl	800c3c0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800be42:	2100      	movs	r1, #0
 800be44:	6878      	ldr	r0, [r7, #4]
 800be46:	f000 fabb 	bl	800c3c0 <USBD_LL_StallEP>
}
 800be4a:	bf00      	nop
 800be4c:	3708      	adds	r7, #8
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}

0800be52 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800be52:	b580      	push	{r7, lr}
 800be54:	b086      	sub	sp, #24
 800be56:	af00      	add	r7, sp, #0
 800be58:	60f8      	str	r0, [r7, #12]
 800be5a:	60b9      	str	r1, [r7, #8]
 800be5c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800be5e:	2300      	movs	r3, #0
 800be60:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d036      	beq.n	800bed6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800be6c:	6938      	ldr	r0, [r7, #16]
 800be6e:	f000 f836 	bl	800bede <USBD_GetLen>
 800be72:	4603      	mov	r3, r0
 800be74:	3301      	adds	r3, #1
 800be76:	b29b      	uxth	r3, r3
 800be78:	005b      	lsls	r3, r3, #1
 800be7a:	b29a      	uxth	r2, r3
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800be80:	7dfb      	ldrb	r3, [r7, #23]
 800be82:	68ba      	ldr	r2, [r7, #8]
 800be84:	4413      	add	r3, r2
 800be86:	687a      	ldr	r2, [r7, #4]
 800be88:	7812      	ldrb	r2, [r2, #0]
 800be8a:	701a      	strb	r2, [r3, #0]
  idx++;
 800be8c:	7dfb      	ldrb	r3, [r7, #23]
 800be8e:	3301      	adds	r3, #1
 800be90:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800be92:	7dfb      	ldrb	r3, [r7, #23]
 800be94:	68ba      	ldr	r2, [r7, #8]
 800be96:	4413      	add	r3, r2
 800be98:	2203      	movs	r2, #3
 800be9a:	701a      	strb	r2, [r3, #0]
  idx++;
 800be9c:	7dfb      	ldrb	r3, [r7, #23]
 800be9e:	3301      	adds	r3, #1
 800bea0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bea2:	e013      	b.n	800becc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800bea4:	7dfb      	ldrb	r3, [r7, #23]
 800bea6:	68ba      	ldr	r2, [r7, #8]
 800bea8:	4413      	add	r3, r2
 800beaa:	693a      	ldr	r2, [r7, #16]
 800beac:	7812      	ldrb	r2, [r2, #0]
 800beae:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800beb0:	693b      	ldr	r3, [r7, #16]
 800beb2:	3301      	adds	r3, #1
 800beb4:	613b      	str	r3, [r7, #16]
    idx++;
 800beb6:	7dfb      	ldrb	r3, [r7, #23]
 800beb8:	3301      	adds	r3, #1
 800beba:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bebc:	7dfb      	ldrb	r3, [r7, #23]
 800bebe:	68ba      	ldr	r2, [r7, #8]
 800bec0:	4413      	add	r3, r2
 800bec2:	2200      	movs	r2, #0
 800bec4:	701a      	strb	r2, [r3, #0]
    idx++;
 800bec6:	7dfb      	ldrb	r3, [r7, #23]
 800bec8:	3301      	adds	r3, #1
 800beca:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800becc:	693b      	ldr	r3, [r7, #16]
 800bece:	781b      	ldrb	r3, [r3, #0]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d1e7      	bne.n	800bea4 <USBD_GetString+0x52>
 800bed4:	e000      	b.n	800bed8 <USBD_GetString+0x86>
    return;
 800bed6:	bf00      	nop
  }
}
 800bed8:	3718      	adds	r7, #24
 800beda:	46bd      	mov	sp, r7
 800bedc:	bd80      	pop	{r7, pc}

0800bede <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bede:	b480      	push	{r7}
 800bee0:	b085      	sub	sp, #20
 800bee2:	af00      	add	r7, sp, #0
 800bee4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bee6:	2300      	movs	r3, #0
 800bee8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800beee:	e005      	b.n	800befc <USBD_GetLen+0x1e>
  {
    len++;
 800bef0:	7bfb      	ldrb	r3, [r7, #15]
 800bef2:	3301      	adds	r3, #1
 800bef4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bef6:	68bb      	ldr	r3, [r7, #8]
 800bef8:	3301      	adds	r3, #1
 800befa:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	781b      	ldrb	r3, [r3, #0]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d1f5      	bne.n	800bef0 <USBD_GetLen+0x12>
  }

  return len;
 800bf04:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf06:	4618      	mov	r0, r3
 800bf08:	3714      	adds	r7, #20
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf10:	4770      	bx	lr

0800bf12 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bf12:	b580      	push	{r7, lr}
 800bf14:	b084      	sub	sp, #16
 800bf16:	af00      	add	r7, sp, #0
 800bf18:	60f8      	str	r0, [r7, #12]
 800bf1a:	60b9      	str	r1, [r7, #8]
 800bf1c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	2202      	movs	r2, #2
 800bf22:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	687a      	ldr	r2, [r7, #4]
 800bf2a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	687a      	ldr	r2, [r7, #4]
 800bf30:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	68ba      	ldr	r2, [r7, #8]
 800bf36:	2100      	movs	r1, #0
 800bf38:	68f8      	ldr	r0, [r7, #12]
 800bf3a:	f000 faca 	bl	800c4d2 <USBD_LL_Transmit>

  return USBD_OK;
 800bf3e:	2300      	movs	r3, #0
}
 800bf40:	4618      	mov	r0, r3
 800bf42:	3710      	adds	r7, #16
 800bf44:	46bd      	mov	sp, r7
 800bf46:	bd80      	pop	{r7, pc}

0800bf48 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b084      	sub	sp, #16
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	60f8      	str	r0, [r7, #12]
 800bf50:	60b9      	str	r1, [r7, #8]
 800bf52:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	68ba      	ldr	r2, [r7, #8]
 800bf58:	2100      	movs	r1, #0
 800bf5a:	68f8      	ldr	r0, [r7, #12]
 800bf5c:	f000 fab9 	bl	800c4d2 <USBD_LL_Transmit>

  return USBD_OK;
 800bf60:	2300      	movs	r3, #0
}
 800bf62:	4618      	mov	r0, r3
 800bf64:	3710      	adds	r7, #16
 800bf66:	46bd      	mov	sp, r7
 800bf68:	bd80      	pop	{r7, pc}

0800bf6a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bf6a:	b580      	push	{r7, lr}
 800bf6c:	b084      	sub	sp, #16
 800bf6e:	af00      	add	r7, sp, #0
 800bf70:	60f8      	str	r0, [r7, #12]
 800bf72:	60b9      	str	r1, [r7, #8]
 800bf74:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	2203      	movs	r2, #3
 800bf7a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	687a      	ldr	r2, [r7, #4]
 800bf82:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	687a      	ldr	r2, [r7, #4]
 800bf8a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	68ba      	ldr	r2, [r7, #8]
 800bf92:	2100      	movs	r1, #0
 800bf94:	68f8      	ldr	r0, [r7, #12]
 800bf96:	f000 fabd 	bl	800c514 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bf9a:	2300      	movs	r3, #0
}
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	3710      	adds	r7, #16
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bd80      	pop	{r7, pc}

0800bfa4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b084      	sub	sp, #16
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	60f8      	str	r0, [r7, #12]
 800bfac:	60b9      	str	r1, [r7, #8]
 800bfae:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	68ba      	ldr	r2, [r7, #8]
 800bfb4:	2100      	movs	r1, #0
 800bfb6:	68f8      	ldr	r0, [r7, #12]
 800bfb8:	f000 faac 	bl	800c514 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bfbc:	2300      	movs	r3, #0
}
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	3710      	adds	r7, #16
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bd80      	pop	{r7, pc}

0800bfc6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bfc6:	b580      	push	{r7, lr}
 800bfc8:	b082      	sub	sp, #8
 800bfca:	af00      	add	r7, sp, #0
 800bfcc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	2204      	movs	r2, #4
 800bfd2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	2200      	movs	r2, #0
 800bfda:	2100      	movs	r1, #0
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	f000 fa78 	bl	800c4d2 <USBD_LL_Transmit>

  return USBD_OK;
 800bfe2:	2300      	movs	r3, #0
}
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	3708      	adds	r7, #8
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bd80      	pop	{r7, pc}

0800bfec <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b082      	sub	sp, #8
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2205      	movs	r2, #5
 800bff8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bffc:	2300      	movs	r3, #0
 800bffe:	2200      	movs	r2, #0
 800c000:	2100      	movs	r1, #0
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	f000 fa86 	bl	800c514 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c008:	2300      	movs	r3, #0
}
 800c00a:	4618      	mov	r0, r3
 800c00c:	3708      	adds	r7, #8
 800c00e:	46bd      	mov	sp, r7
 800c010:	bd80      	pop	{r7, pc}

0800c012 <HAL_PCDEx_SetTxFiFoInBytes>:
/* Private functions ---------------------------------------------------------*/

/* USER CODE BEGIN 1 */
#if(!STM32F1_DEVICE)
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFoInBytes(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800c012:	b580      	push	{r7, lr}
 800c014:	b082      	sub	sp, #8
 800c016:	af00      	add	r7, sp, #0
 800c018:	6078      	str	r0, [r7, #4]
 800c01a:	460b      	mov	r3, r1
 800c01c:	70fb      	strb	r3, [r7, #3]
 800c01e:	4613      	mov	r3, r2
 800c020:	803b      	strh	r3, [r7, #0]
	return HAL_PCDEx_SetTxFiFo(hpcd, fifo, (size/4));
 800c022:	883b      	ldrh	r3, [r7, #0]
 800c024:	089b      	lsrs	r3, r3, #2
 800c026:	b29a      	uxth	r2, r3
 800c028:	78fb      	ldrb	r3, [r7, #3]
 800c02a:	4619      	mov	r1, r3
 800c02c:	6878      	ldr	r0, [r7, #4]
 800c02e:	f7f9 f839 	bl	80050a4 <HAL_PCDEx_SetTxFiFo>
 800c032:	4603      	mov	r3, r0
}
 800c034:	4618      	mov	r0, r3
 800c036:	3708      	adds	r7, #8
 800c038:	46bd      	mov	sp, r7
 800c03a:	bd80      	pop	{r7, pc}

0800c03c <HAL_PCDEx_SetRxFiFoInBytes>:

HAL_StatusTypeDef HAL_PCDEx_SetRxFiFoInBytes(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b082      	sub	sp, #8
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
 800c044:	460b      	mov	r3, r1
 800c046:	807b      	strh	r3, [r7, #2]
	return HAL_PCDEx_SetRxFiFo(hpcd, (size/4));
 800c048:	887b      	ldrh	r3, [r7, #2]
 800c04a:	089b      	lsrs	r3, r3, #2
 800c04c:	b29b      	uxth	r3, r3
 800c04e:	4619      	mov	r1, r3
 800c050:	6878      	ldr	r0, [r7, #4]
 800c052:	f7f9 f86e 	bl	8005132 <HAL_PCDEx_SetRxFiFo>
 800c056:	4603      	mov	r3, r0
}
 800c058:	4618      	mov	r0, r3
 800c05a:	3708      	adds	r7, #8
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bd80      	pop	{r7, pc}

0800c060 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b082      	sub	sp, #8
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef *)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c074:	4619      	mov	r1, r3
 800c076:	4610      	mov	r0, r2
 800c078:	f7fe fef7 	bl	800ae6a <USBD_LL_SetupStage>
}
 800c07c:	bf00      	nop
 800c07e:	3708      	adds	r7, #8
 800c080:	46bd      	mov	sp, r7
 800c082:	bd80      	pop	{r7, pc}

0800c084 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b082      	sub	sp, #8
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
 800c08c:	460b      	mov	r3, r1
 800c08e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c096:	78fa      	ldrb	r2, [r7, #3]
 800c098:	6879      	ldr	r1, [r7, #4]
 800c09a:	4613      	mov	r3, r2
 800c09c:	00db      	lsls	r3, r3, #3
 800c09e:	4413      	add	r3, r2
 800c0a0:	009b      	lsls	r3, r3, #2
 800c0a2:	440b      	add	r3, r1
 800c0a4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c0a8:	681a      	ldr	r2, [r3, #0]
 800c0aa:	78fb      	ldrb	r3, [r7, #3]
 800c0ac:	4619      	mov	r1, r3
 800c0ae:	f7fe ff31 	bl	800af14 <USBD_LL_DataOutStage>
}
 800c0b2:	bf00      	nop
 800c0b4:	3708      	adds	r7, #8
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}

0800c0ba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0ba:	b580      	push	{r7, lr}
 800c0bc:	b082      	sub	sp, #8
 800c0be:	af00      	add	r7, sp, #0
 800c0c0:	6078      	str	r0, [r7, #4]
 800c0c2:	460b      	mov	r3, r1
 800c0c4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c0cc:	78fa      	ldrb	r2, [r7, #3]
 800c0ce:	6879      	ldr	r1, [r7, #4]
 800c0d0:	4613      	mov	r3, r2
 800c0d2:	00db      	lsls	r3, r3, #3
 800c0d4:	4413      	add	r3, r2
 800c0d6:	009b      	lsls	r3, r3, #2
 800c0d8:	440b      	add	r3, r1
 800c0da:	3320      	adds	r3, #32
 800c0dc:	681a      	ldr	r2, [r3, #0]
 800c0de:	78fb      	ldrb	r3, [r7, #3]
 800c0e0:	4619      	mov	r1, r3
 800c0e2:	f7fe ff7a 	bl	800afda <USBD_LL_DataInStage>
}
 800c0e6:	bf00      	nop
 800c0e8:	3708      	adds	r7, #8
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bd80      	pop	{r7, pc}

0800c0ee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0ee:	b580      	push	{r7, lr}
 800c0f0:	b082      	sub	sp, #8
 800c0f2:	af00      	add	r7, sp, #0
 800c0f4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef *)hpcd->pData);
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	f7ff f889 	bl	800b214 <USBD_LL_SOF>
}
 800c102:	bf00      	nop
 800c104:	3708      	adds	r7, #8
 800c106:	46bd      	mov	sp, r7
 800c108:	bd80      	pop	{r7, pc}

0800c10a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c10a:	b580      	push	{r7, lr}
 800c10c:	b084      	sub	sp, #16
 800c10e:	af00      	add	r7, sp, #0
 800c110:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c112:	2301      	movs	r3, #1
 800c114:	73fb      	strb	r3, [r7, #15]

  if (hpcd->Init.speed == PCD_SPEED_FULL)
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	79db      	ldrb	r3, [r3, #7]
 800c11a:	2b02      	cmp	r3, #2
 800c11c:	d102      	bne.n	800c124 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_FULL; 
 800c11e:	2301      	movs	r3, #1
 800c120:	73fb      	strb	r3, [r7, #15]
 800c122:	e008      	b.n	800c136 <HAL_PCD_ResetCallback+0x2c>
  }
  #if(!STM32F1_DEVICE)
  else if (hpcd->Init.speed == PCD_SPEED_HIGH)
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	79db      	ldrb	r3, [r3, #7]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d102      	bne.n	800c132 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_HIGH;
 800c12c:	2300      	movs	r3, #0
 800c12e:	73fb      	strb	r3, [r7, #15]
 800c130:	e001      	b.n	800c136 <HAL_PCD_ResetCallback+0x2c>
  }
  #endif
  else
  {
    Error_Handler();
 800c132:	f7f4 fd45 	bl	8000bc0 <Error_Handler>
  }
  /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef *)hpcd->pData, speed);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c13c:	7bfa      	ldrb	r2, [r7, #15]
 800c13e:	4611      	mov	r1, r2
 800c140:	4618      	mov	r0, r3
 800c142:	f7ff f829 	bl	800b198 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef *)hpcd->pData);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c14c:	4618      	mov	r0, r3
 800c14e:	f7fe ffda 	bl	800b106 <USBD_LL_Reset>
}
 800c152:	bf00      	nop
 800c154:	3710      	adds	r7, #16
 800c156:	46bd      	mov	sp, r7
 800c158:	bd80      	pop	{r7, pc}
	...

0800c15c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b082      	sub	sp, #8
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef *)hpcd->pData);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c16a:	4618      	mov	r0, r3
 800c16c:	f7ff f824 	bl	800b1b8 <USBD_LL_Suspend>
#if (!STM32F1_DEVICE)
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	687a      	ldr	r2, [r7, #4]
 800c17c:	6812      	ldr	r2, [r2, #0]
 800c17e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c182:	f043 0301 	orr.w	r3, r3, #1
 800c186:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	7adb      	ldrb	r3, [r3, #11]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d005      	beq.n	800c19c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c190:	4b04      	ldr	r3, [pc, #16]	@ (800c1a4 <HAL_PCD_SuspendCallback+0x48>)
 800c192:	691b      	ldr	r3, [r3, #16]
 800c194:	4a03      	ldr	r2, [pc, #12]	@ (800c1a4 <HAL_PCD_SuspendCallback+0x48>)
 800c196:	f043 0306 	orr.w	r3, r3, #6
 800c19a:	6113      	str	r3, [r2, #16]
  }
#endif
  /* USER CODE END 2 */
}
 800c19c:	bf00      	nop
 800c19e:	3708      	adds	r7, #8
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bd80      	pop	{r7, pc}
 800c1a4:	e000ed00 	.word	0xe000ed00

0800c1a8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b082      	sub	sp, #8
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef *)hpcd->pData);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	f7ff f814 	bl	800b1e4 <USBD_LL_Resume>
}
 800c1bc:	bf00      	nop
 800c1be:	3708      	adds	r7, #8
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	bd80      	pop	{r7, pc}

0800c1c4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b082      	sub	sp, #8
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
 800c1cc:	460b      	mov	r3, r1
 800c1ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c1d6:	78fa      	ldrb	r2, [r7, #3]
 800c1d8:	4611      	mov	r1, r2
 800c1da:	4618      	mov	r0, r3
 800c1dc:	f7ff f862 	bl	800b2a4 <USBD_LL_IsoOUTIncomplete>
}
 800c1e0:	bf00      	nop
 800c1e2:	3708      	adds	r7, #8
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd80      	pop	{r7, pc}

0800c1e8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b082      	sub	sp, #8
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
 800c1f0:	460b      	mov	r3, r1
 800c1f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c1fa:	78fa      	ldrb	r2, [r7, #3]
 800c1fc:	4611      	mov	r1, r2
 800c1fe:	4618      	mov	r0, r3
 800c200:	f7ff f82a 	bl	800b258 <USBD_LL_IsoINIncomplete>
}
 800c204:	bf00      	nop
 800c206:	3708      	adds	r7, #8
 800c208:	46bd      	mov	sp, r7
 800c20a:	bd80      	pop	{r7, pc}

0800c20c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b082      	sub	sp, #8
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef *)hpcd->pData);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c21a:	4618      	mov	r0, r3
 800c21c:	f7ff f868 	bl	800b2f0 <USBD_LL_DevConnected>
}
 800c220:	bf00      	nop
 800c222:	3708      	adds	r7, #8
 800c224:	46bd      	mov	sp, r7
 800c226:	bd80      	pop	{r7, pc}

0800c228 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b082      	sub	sp, #8
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef *)hpcd->pData);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c236:	4618      	mov	r0, r3
 800c238:	f7ff f865 	bl	800b306 <USBD_LL_DevDisconnected>
}
 800c23c:	bf00      	nop
 800c23e:	3708      	adds	r7, #8
 800c240:	46bd      	mov	sp, r7
 800c242:	bd80      	pop	{r7, pc}

0800c244 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b084      	sub	sp, #16
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
#else
  /**FULL SPEED USB */
#if (STM32F1_DEVICE) /** for STM32F1 or similar */
  hpcd_USB_OTG_PTR = &hpcd_USB_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
#else
  hpcd_USB_OTG_PTR = &hpcd_USB_OTG_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
 800c24c:	4b27      	ldr	r3, [pc, #156]	@ (800c2ec <USBD_LL_Init+0xa8>)
 800c24e:	4a28      	ldr	r2, [pc, #160]	@ (800c2f0 <USBD_LL_Init+0xac>)
 800c250:	601a      	str	r2, [r3, #0]
#endif

  if (pdev->id == DEVICE_FS)
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	781b      	ldrb	r3, [r3, #0]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d143      	bne.n	800c2e2 <USBD_LL_Init+0x9e>
  {
    /* Link the driver to the stack. */
    hpcd_USB_OTG_PTR->pData = pdev;
 800c25a:	4b24      	ldr	r3, [pc, #144]	@ (800c2ec <USBD_LL_Init+0xa8>)
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	687a      	ldr	r2, [r7, #4]
 800c260:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
    pdev->pData = hpcd_USB_OTG_PTR;
 800c264:	4b21      	ldr	r3, [pc, #132]	@ (800c2ec <USBD_LL_Init+0xa8>)
 800c266:	681a      	ldr	r2, [r3, #0]
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f8c3 2310 	str.w	r2, [r3, #784]	@ 0x310
      pma_track += 8;
    }
#endif
#else /** if HAL_PCDEx_SetRxFiFo() is used by HAL driver */

    HAL_PCDEx_SetRxFiFoInBytes(hpcd_USB_OTG_PTR, 512); // ALL OUT EP Buffer
 800c26e:	4b1f      	ldr	r3, [pc, #124]	@ (800c2ec <USBD_LL_Init+0xa8>)
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c276:	4618      	mov	r0, r3
 800c278:	f7ff fee0 	bl	800c03c <HAL_PCDEx_SetRxFiFoInBytes>

    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, 0, 64); // EP0 IN
 800c27c:	4b1b      	ldr	r3, [pc, #108]	@ (800c2ec <USBD_LL_Init+0xa8>)
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	2240      	movs	r2, #64	@ 0x40
 800c282:	2100      	movs	r1, #0
 800c284:	4618      	mov	r0, r3
 800c286:	f7ff fec4 	bl	800c012 <HAL_PCDEx_SetTxFiFoInBytes>
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (HID_KEYBOARD_IN_EP & 0x7F), 64);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CUSTOM_HID_IN_EP & 0x7F), 64);
 800c28a:	4b18      	ldr	r3, [pc, #96]	@ (800c2ec <USBD_LL_Init+0xa8>)
 800c28c:	6818      	ldr	r0, [r3, #0]
 800c28e:	4b19      	ldr	r3, [pc, #100]	@ (800c2f4 <USBD_LL_Init+0xb0>)
 800c290:	781b      	ldrb	r3, [r3, #0]
 800c292:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c296:	b2db      	uxtb	r3, r3
 800c298:	2240      	movs	r2, #64	@ 0x40
 800c29a:	4619      	mov	r1, r3
 800c29c:	f7ff feb9 	bl	800c012 <HAL_PCDEx_SetTxFiFoInBytes>
#endif
#if (USBD_USE_PRNTR == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (PRNT_IN_EP & 0x7F), 128);
#endif
#if (USBD_USE_CDC_ACM == 1)
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	73fb      	strb	r3, [r7, #15]
 800c2a4:	e01a      	b.n	800c2dc <USBD_LL_Init+0x98>
    {
      HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CDC_IN_EP[i] & 0x7F), 128);
 800c2a6:	4b11      	ldr	r3, [pc, #68]	@ (800c2ec <USBD_LL_Init+0xa8>)
 800c2a8:	6818      	ldr	r0, [r3, #0]
 800c2aa:	7bfb      	ldrb	r3, [r7, #15]
 800c2ac:	4a12      	ldr	r2, [pc, #72]	@ (800c2f8 <USBD_LL_Init+0xb4>)
 800c2ae:	5cd3      	ldrb	r3, [r2, r3]
 800c2b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c2b4:	b2db      	uxtb	r3, r3
 800c2b6:	2280      	movs	r2, #128	@ 0x80
 800c2b8:	4619      	mov	r1, r3
 800c2ba:	f7ff feaa 	bl	800c012 <HAL_PCDEx_SetTxFiFoInBytes>
      HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CDC_CMD_EP[i] & 0x7F), 64);
 800c2be:	4b0b      	ldr	r3, [pc, #44]	@ (800c2ec <USBD_LL_Init+0xa8>)
 800c2c0:	6818      	ldr	r0, [r3, #0]
 800c2c2:	7bfb      	ldrb	r3, [r7, #15]
 800c2c4:	4a0d      	ldr	r2, [pc, #52]	@ (800c2fc <USBD_LL_Init+0xb8>)
 800c2c6:	5cd3      	ldrb	r3, [r2, r3]
 800c2c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c2cc:	b2db      	uxtb	r3, r3
 800c2ce:	2240      	movs	r2, #64	@ 0x40
 800c2d0:	4619      	mov	r1, r3
 800c2d2:	f7ff fe9e 	bl	800c012 <HAL_PCDEx_SetTxFiFoInBytes>
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800c2d6:	7bfb      	ldrb	r3, [r7, #15]
 800c2d8:	3301      	adds	r3, #1
 800c2da:	73fb      	strb	r3, [r7, #15]
 800c2dc:	7bfb      	ldrb	r3, [r7, #15]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d0e1      	beq.n	800c2a6 <USBD_LL_Init+0x62>
  HAL_PCD_RegisterDataOutStageCallback(hpcd_USB_OTG_PTR, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(hpcd_USB_OTG_PTR, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  return USBD_OK;
 800c2e2:	2300      	movs	r3, #0
}
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	3710      	adds	r7, #16
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd80      	pop	{r7, pc}
 800c2ec:	2000a49c 	.word	0x2000a49c
 800c2f0:	20004628 	.word	0x20004628
 800c2f4:	200001da 	.word	0x200001da
 800c2f8:	2000a114 	.word	0x2000a114
 800c2fc:	2000a11c 	.word	0x2000a11c

0800c300 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b084      	sub	sp, #16
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c308:	2300      	movs	r3, #0
 800c30a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c30c:	2300      	movs	r3, #0
 800c30e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800c316:	4618      	mov	r0, r3
 800c318:	f7f7 fde5 	bl	8003ee6 <HAL_PCD_Start>
 800c31c:	4603      	mov	r3, r0
 800c31e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800c320:	7bfb      	ldrb	r3, [r7, #15]
 800c322:	4618      	mov	r0, r3
 800c324:	f000 f92a 	bl	800c57c <USBD_Get_USB_Status>
 800c328:	4603      	mov	r3, r0
 800c32a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c32c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c32e:	4618      	mov	r0, r3
 800c330:	3710      	adds	r7, #16
 800c332:	46bd      	mov	sp, r7
 800c334:	bd80      	pop	{r7, pc}

0800c336 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c336:	b580      	push	{r7, lr}
 800c338:	b084      	sub	sp, #16
 800c33a:	af00      	add	r7, sp, #0
 800c33c:	6078      	str	r0, [r7, #4]
 800c33e:	4608      	mov	r0, r1
 800c340:	4611      	mov	r1, r2
 800c342:	461a      	mov	r2, r3
 800c344:	4603      	mov	r3, r0
 800c346:	70fb      	strb	r3, [r7, #3]
 800c348:	460b      	mov	r3, r1
 800c34a:	70bb      	strb	r3, [r7, #2]
 800c34c:	4613      	mov	r3, r2
 800c34e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c350:	2300      	movs	r3, #0
 800c352:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c354:	2300      	movs	r3, #0
 800c356:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 800c35e:	78bb      	ldrb	r3, [r7, #2]
 800c360:	883a      	ldrh	r2, [r7, #0]
 800c362:	78f9      	ldrb	r1, [r7, #3]
 800c364:	f7f8 fab9 	bl	80048da <HAL_PCD_EP_Open>
 800c368:	4603      	mov	r3, r0
 800c36a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800c36c:	7bfb      	ldrb	r3, [r7, #15]
 800c36e:	4618      	mov	r0, r3
 800c370:	f000 f904 	bl	800c57c <USBD_Get_USB_Status>
 800c374:	4603      	mov	r3, r0
 800c376:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c378:	7bbb      	ldrb	r3, [r7, #14]
}
 800c37a:	4618      	mov	r0, r3
 800c37c:	3710      	adds	r7, #16
 800c37e:	46bd      	mov	sp, r7
 800c380:	bd80      	pop	{r7, pc}

0800c382 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c382:	b580      	push	{r7, lr}
 800c384:	b084      	sub	sp, #16
 800c386:	af00      	add	r7, sp, #0
 800c388:	6078      	str	r0, [r7, #4]
 800c38a:	460b      	mov	r3, r1
 800c38c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c38e:	2300      	movs	r3, #0
 800c390:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c392:	2300      	movs	r3, #0
 800c394:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800c39c:	78fa      	ldrb	r2, [r7, #3]
 800c39e:	4611      	mov	r1, r2
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	f7f8 fb04 	bl	80049ae <HAL_PCD_EP_Close>
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800c3aa:	7bfb      	ldrb	r3, [r7, #15]
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	f000 f8e5 	bl	800c57c <USBD_Get_USB_Status>
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3b6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	3710      	adds	r7, #16
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	bd80      	pop	{r7, pc}

0800c3c0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b084      	sub	sp, #16
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
 800c3c8:	460b      	mov	r3, r1
 800c3ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800c3da:	78fa      	ldrb	r2, [r7, #3]
 800c3dc:	4611      	mov	r1, r2
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f7f8 fbbc 	bl	8004b5c <HAL_PCD_EP_SetStall>
 800c3e4:	4603      	mov	r3, r0
 800c3e6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800c3e8:	7bfb      	ldrb	r3, [r7, #15]
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	f000 f8c6 	bl	800c57c <USBD_Get_USB_Status>
 800c3f0:	4603      	mov	r3, r0
 800c3f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	3710      	adds	r7, #16
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	bd80      	pop	{r7, pc}

0800c3fe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3fe:	b580      	push	{r7, lr}
 800c400:	b084      	sub	sp, #16
 800c402:	af00      	add	r7, sp, #0
 800c404:	6078      	str	r0, [r7, #4]
 800c406:	460b      	mov	r3, r1
 800c408:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c40a:	2300      	movs	r3, #0
 800c40c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c40e:	2300      	movs	r3, #0
 800c410:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800c418:	78fa      	ldrb	r2, [r7, #3]
 800c41a:	4611      	mov	r1, r2
 800c41c:	4618      	mov	r0, r3
 800c41e:	f7f8 fc00 	bl	8004c22 <HAL_PCD_EP_ClrStall>
 800c422:	4603      	mov	r3, r0
 800c424:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800c426:	7bfb      	ldrb	r3, [r7, #15]
 800c428:	4618      	mov	r0, r3
 800c42a:	f000 f8a7 	bl	800c57c <USBD_Get_USB_Status>
 800c42e:	4603      	mov	r3, r0
 800c430:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c432:	7bbb      	ldrb	r3, [r7, #14]
}
 800c434:	4618      	mov	r0, r3
 800c436:	3710      	adds	r7, #16
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd80      	pop	{r7, pc}

0800c43c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c43c:	b480      	push	{r7}
 800c43e:	b085      	sub	sp, #20
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
 800c444:	460b      	mov	r3, r1
 800c446:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800c44e:	60fb      	str	r3, [r7, #12]

  if ((ep_addr & 0x80) == 0x80)
 800c450:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c454:	2b00      	cmp	r3, #0
 800c456:	da0b      	bge.n	800c470 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c458:	78fb      	ldrb	r3, [r7, #3]
 800c45a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c45e:	68f9      	ldr	r1, [r7, #12]
 800c460:	4613      	mov	r3, r2
 800c462:	00db      	lsls	r3, r3, #3
 800c464:	4413      	add	r3, r2
 800c466:	009b      	lsls	r3, r3, #2
 800c468:	440b      	add	r3, r1
 800c46a:	3316      	adds	r3, #22
 800c46c:	781b      	ldrb	r3, [r3, #0]
 800c46e:	e00b      	b.n	800c488 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c470:	78fb      	ldrb	r3, [r7, #3]
 800c472:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c476:	68f9      	ldr	r1, [r7, #12]
 800c478:	4613      	mov	r3, r2
 800c47a:	00db      	lsls	r3, r3, #3
 800c47c:	4413      	add	r3, r2
 800c47e:	009b      	lsls	r3, r3, #2
 800c480:	440b      	add	r3, r1
 800c482:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800c486:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c488:	4618      	mov	r0, r3
 800c48a:	3714      	adds	r7, #20
 800c48c:	46bd      	mov	sp, r7
 800c48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c492:	4770      	bx	lr

0800c494 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b084      	sub	sp, #16
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
 800c49c:	460b      	mov	r3, r1
 800c49e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800c4ae:	78fa      	ldrb	r2, [r7, #3]
 800c4b0:	4611      	mov	r1, r2
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	f7f8 f9ed 	bl	8004892 <HAL_PCD_SetAddress>
 800c4b8:	4603      	mov	r3, r0
 800c4ba:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800c4bc:	7bfb      	ldrb	r3, [r7, #15]
 800c4be:	4618      	mov	r0, r3
 800c4c0:	f000 f85c 	bl	800c57c <USBD_Get_USB_Status>
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c4c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	3710      	adds	r7, #16
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}

0800c4d2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c4d2:	b580      	push	{r7, lr}
 800c4d4:	b086      	sub	sp, #24
 800c4d6:	af00      	add	r7, sp, #0
 800c4d8:	60f8      	str	r0, [r7, #12]
 800c4da:	607a      	str	r2, [r7, #4]
 800c4dc:	603b      	str	r3, [r7, #0]
 800c4de:	460b      	mov	r3, r1
 800c4e0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 800c4f0:	7af9      	ldrb	r1, [r7, #11]
 800c4f2:	683b      	ldr	r3, [r7, #0]
 800c4f4:	687a      	ldr	r2, [r7, #4]
 800c4f6:	f7f8 faf7 	bl	8004ae8 <HAL_PCD_EP_Transmit>
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 800c4fe:	7dfb      	ldrb	r3, [r7, #23]
 800c500:	4618      	mov	r0, r3
 800c502:	f000 f83b 	bl	800c57c <USBD_Get_USB_Status>
 800c506:	4603      	mov	r3, r0
 800c508:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c50a:	7dbb      	ldrb	r3, [r7, #22]
}
 800c50c:	4618      	mov	r0, r3
 800c50e:	3718      	adds	r7, #24
 800c510:	46bd      	mov	sp, r7
 800c512:	bd80      	pop	{r7, pc}

0800c514 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b086      	sub	sp, #24
 800c518:	af00      	add	r7, sp, #0
 800c51a:	60f8      	str	r0, [r7, #12]
 800c51c:	607a      	str	r2, [r7, #4]
 800c51e:	603b      	str	r3, [r7, #0]
 800c520:	460b      	mov	r3, r1
 800c522:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c524:	2300      	movs	r3, #0
 800c526:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c528:	2300      	movs	r3, #0
 800c52a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 800c532:	7af9      	ldrb	r1, [r7, #11]
 800c534:	683b      	ldr	r3, [r7, #0]
 800c536:	687a      	ldr	r2, [r7, #4]
 800c538:	f7f8 fa83 	bl	8004a42 <HAL_PCD_EP_Receive>
 800c53c:	4603      	mov	r3, r0
 800c53e:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 800c540:	7dfb      	ldrb	r3, [r7, #23]
 800c542:	4618      	mov	r0, r3
 800c544:	f000 f81a 	bl	800c57c <USBD_Get_USB_Status>
 800c548:	4603      	mov	r3, r0
 800c54a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c54c:	7dbb      	ldrb	r3, [r7, #22]
}
 800c54e:	4618      	mov	r0, r3
 800c550:	3718      	adds	r7, #24
 800c552:	46bd      	mov	sp, r7
 800c554:	bd80      	pop	{r7, pc}

0800c556 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c556:	b580      	push	{r7, lr}
 800c558:	b082      	sub	sp, #8
 800c55a:	af00      	add	r7, sp, #0
 800c55c:	6078      	str	r0, [r7, #4]
 800c55e:	460b      	mov	r3, r1
 800c560:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef *)pdev->pData, ep_addr);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800c568:	78fa      	ldrb	r2, [r7, #3]
 800c56a:	4611      	mov	r1, r2
 800c56c:	4618      	mov	r0, r3
 800c56e:	f7f8 faa3 	bl	8004ab8 <HAL_PCD_EP_GetRxCount>
 800c572:	4603      	mov	r3, r0
}
 800c574:	4618      	mov	r0, r3
 800c576:	3708      	adds	r7, #8
 800c578:	46bd      	mov	sp, r7
 800c57a:	bd80      	pop	{r7, pc}

0800c57c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c57c:	b480      	push	{r7}
 800c57e:	b085      	sub	sp, #20
 800c580:	af00      	add	r7, sp, #0
 800c582:	4603      	mov	r3, r0
 800c584:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c586:	2300      	movs	r3, #0
 800c588:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c58a:	79fb      	ldrb	r3, [r7, #7]
 800c58c:	2b03      	cmp	r3, #3
 800c58e:	d817      	bhi.n	800c5c0 <USBD_Get_USB_Status+0x44>
 800c590:	a201      	add	r2, pc, #4	@ (adr r2, 800c598 <USBD_Get_USB_Status+0x1c>)
 800c592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c596:	bf00      	nop
 800c598:	0800c5a9 	.word	0x0800c5a9
 800c59c:	0800c5af 	.word	0x0800c5af
 800c5a0:	0800c5b5 	.word	0x0800c5b5
 800c5a4:	0800c5bb 	.word	0x0800c5bb
  {
  case HAL_OK:
    usb_status = USBD_OK;
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	73fb      	strb	r3, [r7, #15]
    break;
 800c5ac:	e00b      	b.n	800c5c6 <USBD_Get_USB_Status+0x4a>
  case HAL_ERROR:
    usb_status = USBD_FAIL;
 800c5ae:	2303      	movs	r3, #3
 800c5b0:	73fb      	strb	r3, [r7, #15]
    break;
 800c5b2:	e008      	b.n	800c5c6 <USBD_Get_USB_Status+0x4a>
  case HAL_BUSY:
    usb_status = USBD_BUSY;
 800c5b4:	2301      	movs	r3, #1
 800c5b6:	73fb      	strb	r3, [r7, #15]
    break;
 800c5b8:	e005      	b.n	800c5c6 <USBD_Get_USB_Status+0x4a>
  case HAL_TIMEOUT:
    usb_status = USBD_FAIL;
 800c5ba:	2303      	movs	r3, #3
 800c5bc:	73fb      	strb	r3, [r7, #15]
    break;
 800c5be:	e002      	b.n	800c5c6 <USBD_Get_USB_Status+0x4a>
  default:
    usb_status = USBD_FAIL;
 800c5c0:	2303      	movs	r3, #3
 800c5c2:	73fb      	strb	r3, [r7, #15]
    break;
 800c5c4:	bf00      	nop
  }
  return usb_status;
 800c5c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	3714      	adds	r7, #20
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d2:	4770      	bx	lr

0800c5d4 <sniprintf>:
 800c5d4:	b40c      	push	{r2, r3}
 800c5d6:	b530      	push	{r4, r5, lr}
 800c5d8:	4b18      	ldr	r3, [pc, #96]	@ (800c63c <sniprintf+0x68>)
 800c5da:	1e0c      	subs	r4, r1, #0
 800c5dc:	681d      	ldr	r5, [r3, #0]
 800c5de:	b09d      	sub	sp, #116	@ 0x74
 800c5e0:	da08      	bge.n	800c5f4 <sniprintf+0x20>
 800c5e2:	238b      	movs	r3, #139	@ 0x8b
 800c5e4:	602b      	str	r3, [r5, #0]
 800c5e6:	f04f 30ff 	mov.w	r0, #4294967295
 800c5ea:	b01d      	add	sp, #116	@ 0x74
 800c5ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c5f0:	b002      	add	sp, #8
 800c5f2:	4770      	bx	lr
 800c5f4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c5f8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c5fc:	f04f 0300 	mov.w	r3, #0
 800c600:	931b      	str	r3, [sp, #108]	@ 0x6c
 800c602:	bf14      	ite	ne
 800c604:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c608:	4623      	moveq	r3, r4
 800c60a:	9304      	str	r3, [sp, #16]
 800c60c:	9307      	str	r3, [sp, #28]
 800c60e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c612:	9002      	str	r0, [sp, #8]
 800c614:	9006      	str	r0, [sp, #24]
 800c616:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c61a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c61c:	ab21      	add	r3, sp, #132	@ 0x84
 800c61e:	a902      	add	r1, sp, #8
 800c620:	4628      	mov	r0, r5
 800c622:	9301      	str	r3, [sp, #4]
 800c624:	f000 f9a2 	bl	800c96c <_svfiprintf_r>
 800c628:	1c43      	adds	r3, r0, #1
 800c62a:	bfbc      	itt	lt
 800c62c:	238b      	movlt	r3, #139	@ 0x8b
 800c62e:	602b      	strlt	r3, [r5, #0]
 800c630:	2c00      	cmp	r4, #0
 800c632:	d0da      	beq.n	800c5ea <sniprintf+0x16>
 800c634:	9b02      	ldr	r3, [sp, #8]
 800c636:	2200      	movs	r2, #0
 800c638:	701a      	strb	r2, [r3, #0]
 800c63a:	e7d6      	b.n	800c5ea <sniprintf+0x16>
 800c63c:	200002b4 	.word	0x200002b4

0800c640 <memset>:
 800c640:	4402      	add	r2, r0
 800c642:	4603      	mov	r3, r0
 800c644:	4293      	cmp	r3, r2
 800c646:	d100      	bne.n	800c64a <memset+0xa>
 800c648:	4770      	bx	lr
 800c64a:	f803 1b01 	strb.w	r1, [r3], #1
 800c64e:	e7f9      	b.n	800c644 <memset+0x4>

0800c650 <__errno>:
 800c650:	4b01      	ldr	r3, [pc, #4]	@ (800c658 <__errno+0x8>)
 800c652:	6818      	ldr	r0, [r3, #0]
 800c654:	4770      	bx	lr
 800c656:	bf00      	nop
 800c658:	200002b4 	.word	0x200002b4

0800c65c <__libc_init_array>:
 800c65c:	b570      	push	{r4, r5, r6, lr}
 800c65e:	4d0d      	ldr	r5, [pc, #52]	@ (800c694 <__libc_init_array+0x38>)
 800c660:	4c0d      	ldr	r4, [pc, #52]	@ (800c698 <__libc_init_array+0x3c>)
 800c662:	1b64      	subs	r4, r4, r5
 800c664:	10a4      	asrs	r4, r4, #2
 800c666:	2600      	movs	r6, #0
 800c668:	42a6      	cmp	r6, r4
 800c66a:	d109      	bne.n	800c680 <__libc_init_array+0x24>
 800c66c:	4d0b      	ldr	r5, [pc, #44]	@ (800c69c <__libc_init_array+0x40>)
 800c66e:	4c0c      	ldr	r4, [pc, #48]	@ (800c6a0 <__libc_init_array+0x44>)
 800c670:	f000 fc64 	bl	800cf3c <_init>
 800c674:	1b64      	subs	r4, r4, r5
 800c676:	10a4      	asrs	r4, r4, #2
 800c678:	2600      	movs	r6, #0
 800c67a:	42a6      	cmp	r6, r4
 800c67c:	d105      	bne.n	800c68a <__libc_init_array+0x2e>
 800c67e:	bd70      	pop	{r4, r5, r6, pc}
 800c680:	f855 3b04 	ldr.w	r3, [r5], #4
 800c684:	4798      	blx	r3
 800c686:	3601      	adds	r6, #1
 800c688:	e7ee      	b.n	800c668 <__libc_init_array+0xc>
 800c68a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c68e:	4798      	blx	r3
 800c690:	3601      	adds	r6, #1
 800c692:	e7f2      	b.n	800c67a <__libc_init_array+0x1e>
 800c694:	0800d00c 	.word	0x0800d00c
 800c698:	0800d00c 	.word	0x0800d00c
 800c69c:	0800d00c 	.word	0x0800d00c
 800c6a0:	0800d010 	.word	0x0800d010

0800c6a4 <__retarget_lock_acquire_recursive>:
 800c6a4:	4770      	bx	lr

0800c6a6 <__retarget_lock_release_recursive>:
 800c6a6:	4770      	bx	lr

0800c6a8 <memcpy>:
 800c6a8:	440a      	add	r2, r1
 800c6aa:	4291      	cmp	r1, r2
 800c6ac:	f100 33ff 	add.w	r3, r0, #4294967295
 800c6b0:	d100      	bne.n	800c6b4 <memcpy+0xc>
 800c6b2:	4770      	bx	lr
 800c6b4:	b510      	push	{r4, lr}
 800c6b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c6ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c6be:	4291      	cmp	r1, r2
 800c6c0:	d1f9      	bne.n	800c6b6 <memcpy+0xe>
 800c6c2:	bd10      	pop	{r4, pc}

0800c6c4 <_free_r>:
 800c6c4:	b538      	push	{r3, r4, r5, lr}
 800c6c6:	4605      	mov	r5, r0
 800c6c8:	2900      	cmp	r1, #0
 800c6ca:	d041      	beq.n	800c750 <_free_r+0x8c>
 800c6cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6d0:	1f0c      	subs	r4, r1, #4
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	bfb8      	it	lt
 800c6d6:	18e4      	addlt	r4, r4, r3
 800c6d8:	f000 f8e0 	bl	800c89c <__malloc_lock>
 800c6dc:	4a1d      	ldr	r2, [pc, #116]	@ (800c754 <_free_r+0x90>)
 800c6de:	6813      	ldr	r3, [r2, #0]
 800c6e0:	b933      	cbnz	r3, 800c6f0 <_free_r+0x2c>
 800c6e2:	6063      	str	r3, [r4, #4]
 800c6e4:	6014      	str	r4, [r2, #0]
 800c6e6:	4628      	mov	r0, r5
 800c6e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c6ec:	f000 b8dc 	b.w	800c8a8 <__malloc_unlock>
 800c6f0:	42a3      	cmp	r3, r4
 800c6f2:	d908      	bls.n	800c706 <_free_r+0x42>
 800c6f4:	6820      	ldr	r0, [r4, #0]
 800c6f6:	1821      	adds	r1, r4, r0
 800c6f8:	428b      	cmp	r3, r1
 800c6fa:	bf01      	itttt	eq
 800c6fc:	6819      	ldreq	r1, [r3, #0]
 800c6fe:	685b      	ldreq	r3, [r3, #4]
 800c700:	1809      	addeq	r1, r1, r0
 800c702:	6021      	streq	r1, [r4, #0]
 800c704:	e7ed      	b.n	800c6e2 <_free_r+0x1e>
 800c706:	461a      	mov	r2, r3
 800c708:	685b      	ldr	r3, [r3, #4]
 800c70a:	b10b      	cbz	r3, 800c710 <_free_r+0x4c>
 800c70c:	42a3      	cmp	r3, r4
 800c70e:	d9fa      	bls.n	800c706 <_free_r+0x42>
 800c710:	6811      	ldr	r1, [r2, #0]
 800c712:	1850      	adds	r0, r2, r1
 800c714:	42a0      	cmp	r0, r4
 800c716:	d10b      	bne.n	800c730 <_free_r+0x6c>
 800c718:	6820      	ldr	r0, [r4, #0]
 800c71a:	4401      	add	r1, r0
 800c71c:	1850      	adds	r0, r2, r1
 800c71e:	4283      	cmp	r3, r0
 800c720:	6011      	str	r1, [r2, #0]
 800c722:	d1e0      	bne.n	800c6e6 <_free_r+0x22>
 800c724:	6818      	ldr	r0, [r3, #0]
 800c726:	685b      	ldr	r3, [r3, #4]
 800c728:	6053      	str	r3, [r2, #4]
 800c72a:	4408      	add	r0, r1
 800c72c:	6010      	str	r0, [r2, #0]
 800c72e:	e7da      	b.n	800c6e6 <_free_r+0x22>
 800c730:	d902      	bls.n	800c738 <_free_r+0x74>
 800c732:	230c      	movs	r3, #12
 800c734:	602b      	str	r3, [r5, #0]
 800c736:	e7d6      	b.n	800c6e6 <_free_r+0x22>
 800c738:	6820      	ldr	r0, [r4, #0]
 800c73a:	1821      	adds	r1, r4, r0
 800c73c:	428b      	cmp	r3, r1
 800c73e:	bf04      	itt	eq
 800c740:	6819      	ldreq	r1, [r3, #0]
 800c742:	685b      	ldreq	r3, [r3, #4]
 800c744:	6063      	str	r3, [r4, #4]
 800c746:	bf04      	itt	eq
 800c748:	1809      	addeq	r1, r1, r0
 800c74a:	6021      	streq	r1, [r4, #0]
 800c74c:	6054      	str	r4, [r2, #4]
 800c74e:	e7ca      	b.n	800c6e6 <_free_r+0x22>
 800c750:	bd38      	pop	{r3, r4, r5, pc}
 800c752:	bf00      	nop
 800c754:	2000a5e4 	.word	0x2000a5e4

0800c758 <sbrk_aligned>:
 800c758:	b570      	push	{r4, r5, r6, lr}
 800c75a:	4e0f      	ldr	r6, [pc, #60]	@ (800c798 <sbrk_aligned+0x40>)
 800c75c:	460c      	mov	r4, r1
 800c75e:	6831      	ldr	r1, [r6, #0]
 800c760:	4605      	mov	r5, r0
 800c762:	b911      	cbnz	r1, 800c76a <sbrk_aligned+0x12>
 800c764:	f000 fba4 	bl	800ceb0 <_sbrk_r>
 800c768:	6030      	str	r0, [r6, #0]
 800c76a:	4621      	mov	r1, r4
 800c76c:	4628      	mov	r0, r5
 800c76e:	f000 fb9f 	bl	800ceb0 <_sbrk_r>
 800c772:	1c43      	adds	r3, r0, #1
 800c774:	d103      	bne.n	800c77e <sbrk_aligned+0x26>
 800c776:	f04f 34ff 	mov.w	r4, #4294967295
 800c77a:	4620      	mov	r0, r4
 800c77c:	bd70      	pop	{r4, r5, r6, pc}
 800c77e:	1cc4      	adds	r4, r0, #3
 800c780:	f024 0403 	bic.w	r4, r4, #3
 800c784:	42a0      	cmp	r0, r4
 800c786:	d0f8      	beq.n	800c77a <sbrk_aligned+0x22>
 800c788:	1a21      	subs	r1, r4, r0
 800c78a:	4628      	mov	r0, r5
 800c78c:	f000 fb90 	bl	800ceb0 <_sbrk_r>
 800c790:	3001      	adds	r0, #1
 800c792:	d1f2      	bne.n	800c77a <sbrk_aligned+0x22>
 800c794:	e7ef      	b.n	800c776 <sbrk_aligned+0x1e>
 800c796:	bf00      	nop
 800c798:	2000a5e0 	.word	0x2000a5e0

0800c79c <_malloc_r>:
 800c79c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7a0:	1ccd      	adds	r5, r1, #3
 800c7a2:	f025 0503 	bic.w	r5, r5, #3
 800c7a6:	3508      	adds	r5, #8
 800c7a8:	2d0c      	cmp	r5, #12
 800c7aa:	bf38      	it	cc
 800c7ac:	250c      	movcc	r5, #12
 800c7ae:	2d00      	cmp	r5, #0
 800c7b0:	4606      	mov	r6, r0
 800c7b2:	db01      	blt.n	800c7b8 <_malloc_r+0x1c>
 800c7b4:	42a9      	cmp	r1, r5
 800c7b6:	d904      	bls.n	800c7c2 <_malloc_r+0x26>
 800c7b8:	230c      	movs	r3, #12
 800c7ba:	6033      	str	r3, [r6, #0]
 800c7bc:	2000      	movs	r0, #0
 800c7be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c898 <_malloc_r+0xfc>
 800c7c6:	f000 f869 	bl	800c89c <__malloc_lock>
 800c7ca:	f8d8 3000 	ldr.w	r3, [r8]
 800c7ce:	461c      	mov	r4, r3
 800c7d0:	bb44      	cbnz	r4, 800c824 <_malloc_r+0x88>
 800c7d2:	4629      	mov	r1, r5
 800c7d4:	4630      	mov	r0, r6
 800c7d6:	f7ff ffbf 	bl	800c758 <sbrk_aligned>
 800c7da:	1c43      	adds	r3, r0, #1
 800c7dc:	4604      	mov	r4, r0
 800c7de:	d158      	bne.n	800c892 <_malloc_r+0xf6>
 800c7e0:	f8d8 4000 	ldr.w	r4, [r8]
 800c7e4:	4627      	mov	r7, r4
 800c7e6:	2f00      	cmp	r7, #0
 800c7e8:	d143      	bne.n	800c872 <_malloc_r+0xd6>
 800c7ea:	2c00      	cmp	r4, #0
 800c7ec:	d04b      	beq.n	800c886 <_malloc_r+0xea>
 800c7ee:	6823      	ldr	r3, [r4, #0]
 800c7f0:	4639      	mov	r1, r7
 800c7f2:	4630      	mov	r0, r6
 800c7f4:	eb04 0903 	add.w	r9, r4, r3
 800c7f8:	f000 fb5a 	bl	800ceb0 <_sbrk_r>
 800c7fc:	4581      	cmp	r9, r0
 800c7fe:	d142      	bne.n	800c886 <_malloc_r+0xea>
 800c800:	6821      	ldr	r1, [r4, #0]
 800c802:	1a6d      	subs	r5, r5, r1
 800c804:	4629      	mov	r1, r5
 800c806:	4630      	mov	r0, r6
 800c808:	f7ff ffa6 	bl	800c758 <sbrk_aligned>
 800c80c:	3001      	adds	r0, #1
 800c80e:	d03a      	beq.n	800c886 <_malloc_r+0xea>
 800c810:	6823      	ldr	r3, [r4, #0]
 800c812:	442b      	add	r3, r5
 800c814:	6023      	str	r3, [r4, #0]
 800c816:	f8d8 3000 	ldr.w	r3, [r8]
 800c81a:	685a      	ldr	r2, [r3, #4]
 800c81c:	bb62      	cbnz	r2, 800c878 <_malloc_r+0xdc>
 800c81e:	f8c8 7000 	str.w	r7, [r8]
 800c822:	e00f      	b.n	800c844 <_malloc_r+0xa8>
 800c824:	6822      	ldr	r2, [r4, #0]
 800c826:	1b52      	subs	r2, r2, r5
 800c828:	d420      	bmi.n	800c86c <_malloc_r+0xd0>
 800c82a:	2a0b      	cmp	r2, #11
 800c82c:	d917      	bls.n	800c85e <_malloc_r+0xc2>
 800c82e:	1961      	adds	r1, r4, r5
 800c830:	42a3      	cmp	r3, r4
 800c832:	6025      	str	r5, [r4, #0]
 800c834:	bf18      	it	ne
 800c836:	6059      	strne	r1, [r3, #4]
 800c838:	6863      	ldr	r3, [r4, #4]
 800c83a:	bf08      	it	eq
 800c83c:	f8c8 1000 	streq.w	r1, [r8]
 800c840:	5162      	str	r2, [r4, r5]
 800c842:	604b      	str	r3, [r1, #4]
 800c844:	4630      	mov	r0, r6
 800c846:	f000 f82f 	bl	800c8a8 <__malloc_unlock>
 800c84a:	f104 000b 	add.w	r0, r4, #11
 800c84e:	1d23      	adds	r3, r4, #4
 800c850:	f020 0007 	bic.w	r0, r0, #7
 800c854:	1ac2      	subs	r2, r0, r3
 800c856:	bf1c      	itt	ne
 800c858:	1a1b      	subne	r3, r3, r0
 800c85a:	50a3      	strne	r3, [r4, r2]
 800c85c:	e7af      	b.n	800c7be <_malloc_r+0x22>
 800c85e:	6862      	ldr	r2, [r4, #4]
 800c860:	42a3      	cmp	r3, r4
 800c862:	bf0c      	ite	eq
 800c864:	f8c8 2000 	streq.w	r2, [r8]
 800c868:	605a      	strne	r2, [r3, #4]
 800c86a:	e7eb      	b.n	800c844 <_malloc_r+0xa8>
 800c86c:	4623      	mov	r3, r4
 800c86e:	6864      	ldr	r4, [r4, #4]
 800c870:	e7ae      	b.n	800c7d0 <_malloc_r+0x34>
 800c872:	463c      	mov	r4, r7
 800c874:	687f      	ldr	r7, [r7, #4]
 800c876:	e7b6      	b.n	800c7e6 <_malloc_r+0x4a>
 800c878:	461a      	mov	r2, r3
 800c87a:	685b      	ldr	r3, [r3, #4]
 800c87c:	42a3      	cmp	r3, r4
 800c87e:	d1fb      	bne.n	800c878 <_malloc_r+0xdc>
 800c880:	2300      	movs	r3, #0
 800c882:	6053      	str	r3, [r2, #4]
 800c884:	e7de      	b.n	800c844 <_malloc_r+0xa8>
 800c886:	230c      	movs	r3, #12
 800c888:	6033      	str	r3, [r6, #0]
 800c88a:	4630      	mov	r0, r6
 800c88c:	f000 f80c 	bl	800c8a8 <__malloc_unlock>
 800c890:	e794      	b.n	800c7bc <_malloc_r+0x20>
 800c892:	6005      	str	r5, [r0, #0]
 800c894:	e7d6      	b.n	800c844 <_malloc_r+0xa8>
 800c896:	bf00      	nop
 800c898:	2000a5e4 	.word	0x2000a5e4

0800c89c <__malloc_lock>:
 800c89c:	4801      	ldr	r0, [pc, #4]	@ (800c8a4 <__malloc_lock+0x8>)
 800c89e:	f7ff bf01 	b.w	800c6a4 <__retarget_lock_acquire_recursive>
 800c8a2:	bf00      	nop
 800c8a4:	2000a5dc 	.word	0x2000a5dc

0800c8a8 <__malloc_unlock>:
 800c8a8:	4801      	ldr	r0, [pc, #4]	@ (800c8b0 <__malloc_unlock+0x8>)
 800c8aa:	f7ff befc 	b.w	800c6a6 <__retarget_lock_release_recursive>
 800c8ae:	bf00      	nop
 800c8b0:	2000a5dc 	.word	0x2000a5dc

0800c8b4 <__ssputs_r>:
 800c8b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8b8:	688e      	ldr	r6, [r1, #8]
 800c8ba:	461f      	mov	r7, r3
 800c8bc:	42be      	cmp	r6, r7
 800c8be:	680b      	ldr	r3, [r1, #0]
 800c8c0:	4682      	mov	sl, r0
 800c8c2:	460c      	mov	r4, r1
 800c8c4:	4690      	mov	r8, r2
 800c8c6:	d82d      	bhi.n	800c924 <__ssputs_r+0x70>
 800c8c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c8cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c8d0:	d026      	beq.n	800c920 <__ssputs_r+0x6c>
 800c8d2:	6965      	ldr	r5, [r4, #20]
 800c8d4:	6909      	ldr	r1, [r1, #16]
 800c8d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c8da:	eba3 0901 	sub.w	r9, r3, r1
 800c8de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c8e2:	1c7b      	adds	r3, r7, #1
 800c8e4:	444b      	add	r3, r9
 800c8e6:	106d      	asrs	r5, r5, #1
 800c8e8:	429d      	cmp	r5, r3
 800c8ea:	bf38      	it	cc
 800c8ec:	461d      	movcc	r5, r3
 800c8ee:	0553      	lsls	r3, r2, #21
 800c8f0:	d527      	bpl.n	800c942 <__ssputs_r+0x8e>
 800c8f2:	4629      	mov	r1, r5
 800c8f4:	f7ff ff52 	bl	800c79c <_malloc_r>
 800c8f8:	4606      	mov	r6, r0
 800c8fa:	b360      	cbz	r0, 800c956 <__ssputs_r+0xa2>
 800c8fc:	6921      	ldr	r1, [r4, #16]
 800c8fe:	464a      	mov	r2, r9
 800c900:	f7ff fed2 	bl	800c6a8 <memcpy>
 800c904:	89a3      	ldrh	r3, [r4, #12]
 800c906:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c90a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c90e:	81a3      	strh	r3, [r4, #12]
 800c910:	6126      	str	r6, [r4, #16]
 800c912:	6165      	str	r5, [r4, #20]
 800c914:	444e      	add	r6, r9
 800c916:	eba5 0509 	sub.w	r5, r5, r9
 800c91a:	6026      	str	r6, [r4, #0]
 800c91c:	60a5      	str	r5, [r4, #8]
 800c91e:	463e      	mov	r6, r7
 800c920:	42be      	cmp	r6, r7
 800c922:	d900      	bls.n	800c926 <__ssputs_r+0x72>
 800c924:	463e      	mov	r6, r7
 800c926:	6820      	ldr	r0, [r4, #0]
 800c928:	4632      	mov	r2, r6
 800c92a:	4641      	mov	r1, r8
 800c92c:	f000 faa6 	bl	800ce7c <memmove>
 800c930:	68a3      	ldr	r3, [r4, #8]
 800c932:	1b9b      	subs	r3, r3, r6
 800c934:	60a3      	str	r3, [r4, #8]
 800c936:	6823      	ldr	r3, [r4, #0]
 800c938:	4433      	add	r3, r6
 800c93a:	6023      	str	r3, [r4, #0]
 800c93c:	2000      	movs	r0, #0
 800c93e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c942:	462a      	mov	r2, r5
 800c944:	f000 fac4 	bl	800ced0 <_realloc_r>
 800c948:	4606      	mov	r6, r0
 800c94a:	2800      	cmp	r0, #0
 800c94c:	d1e0      	bne.n	800c910 <__ssputs_r+0x5c>
 800c94e:	6921      	ldr	r1, [r4, #16]
 800c950:	4650      	mov	r0, sl
 800c952:	f7ff feb7 	bl	800c6c4 <_free_r>
 800c956:	230c      	movs	r3, #12
 800c958:	f8ca 3000 	str.w	r3, [sl]
 800c95c:	89a3      	ldrh	r3, [r4, #12]
 800c95e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c962:	81a3      	strh	r3, [r4, #12]
 800c964:	f04f 30ff 	mov.w	r0, #4294967295
 800c968:	e7e9      	b.n	800c93e <__ssputs_r+0x8a>
	...

0800c96c <_svfiprintf_r>:
 800c96c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c970:	4698      	mov	r8, r3
 800c972:	898b      	ldrh	r3, [r1, #12]
 800c974:	061b      	lsls	r3, r3, #24
 800c976:	b09d      	sub	sp, #116	@ 0x74
 800c978:	4607      	mov	r7, r0
 800c97a:	460d      	mov	r5, r1
 800c97c:	4614      	mov	r4, r2
 800c97e:	d510      	bpl.n	800c9a2 <_svfiprintf_r+0x36>
 800c980:	690b      	ldr	r3, [r1, #16]
 800c982:	b973      	cbnz	r3, 800c9a2 <_svfiprintf_r+0x36>
 800c984:	2140      	movs	r1, #64	@ 0x40
 800c986:	f7ff ff09 	bl	800c79c <_malloc_r>
 800c98a:	6028      	str	r0, [r5, #0]
 800c98c:	6128      	str	r0, [r5, #16]
 800c98e:	b930      	cbnz	r0, 800c99e <_svfiprintf_r+0x32>
 800c990:	230c      	movs	r3, #12
 800c992:	603b      	str	r3, [r7, #0]
 800c994:	f04f 30ff 	mov.w	r0, #4294967295
 800c998:	b01d      	add	sp, #116	@ 0x74
 800c99a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c99e:	2340      	movs	r3, #64	@ 0x40
 800c9a0:	616b      	str	r3, [r5, #20]
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c9a6:	2320      	movs	r3, #32
 800c9a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c9ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800c9b0:	2330      	movs	r3, #48	@ 0x30
 800c9b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cb50 <_svfiprintf_r+0x1e4>
 800c9b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c9ba:	f04f 0901 	mov.w	r9, #1
 800c9be:	4623      	mov	r3, r4
 800c9c0:	469a      	mov	sl, r3
 800c9c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c9c6:	b10a      	cbz	r2, 800c9cc <_svfiprintf_r+0x60>
 800c9c8:	2a25      	cmp	r2, #37	@ 0x25
 800c9ca:	d1f9      	bne.n	800c9c0 <_svfiprintf_r+0x54>
 800c9cc:	ebba 0b04 	subs.w	fp, sl, r4
 800c9d0:	d00b      	beq.n	800c9ea <_svfiprintf_r+0x7e>
 800c9d2:	465b      	mov	r3, fp
 800c9d4:	4622      	mov	r2, r4
 800c9d6:	4629      	mov	r1, r5
 800c9d8:	4638      	mov	r0, r7
 800c9da:	f7ff ff6b 	bl	800c8b4 <__ssputs_r>
 800c9de:	3001      	adds	r0, #1
 800c9e0:	f000 80a7 	beq.w	800cb32 <_svfiprintf_r+0x1c6>
 800c9e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c9e6:	445a      	add	r2, fp
 800c9e8:	9209      	str	r2, [sp, #36]	@ 0x24
 800c9ea:	f89a 3000 	ldrb.w	r3, [sl]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	f000 809f 	beq.w	800cb32 <_svfiprintf_r+0x1c6>
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	f04f 32ff 	mov.w	r2, #4294967295
 800c9fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c9fe:	f10a 0a01 	add.w	sl, sl, #1
 800ca02:	9304      	str	r3, [sp, #16]
 800ca04:	9307      	str	r3, [sp, #28]
 800ca06:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ca0a:	931a      	str	r3, [sp, #104]	@ 0x68
 800ca0c:	4654      	mov	r4, sl
 800ca0e:	2205      	movs	r2, #5
 800ca10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca14:	484e      	ldr	r0, [pc, #312]	@ (800cb50 <_svfiprintf_r+0x1e4>)
 800ca16:	f7f3 fbdb 	bl	80001d0 <memchr>
 800ca1a:	9a04      	ldr	r2, [sp, #16]
 800ca1c:	b9d8      	cbnz	r0, 800ca56 <_svfiprintf_r+0xea>
 800ca1e:	06d0      	lsls	r0, r2, #27
 800ca20:	bf44      	itt	mi
 800ca22:	2320      	movmi	r3, #32
 800ca24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca28:	0711      	lsls	r1, r2, #28
 800ca2a:	bf44      	itt	mi
 800ca2c:	232b      	movmi	r3, #43	@ 0x2b
 800ca2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca32:	f89a 3000 	ldrb.w	r3, [sl]
 800ca36:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca38:	d015      	beq.n	800ca66 <_svfiprintf_r+0xfa>
 800ca3a:	9a07      	ldr	r2, [sp, #28]
 800ca3c:	4654      	mov	r4, sl
 800ca3e:	2000      	movs	r0, #0
 800ca40:	f04f 0c0a 	mov.w	ip, #10
 800ca44:	4621      	mov	r1, r4
 800ca46:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca4a:	3b30      	subs	r3, #48	@ 0x30
 800ca4c:	2b09      	cmp	r3, #9
 800ca4e:	d94b      	bls.n	800cae8 <_svfiprintf_r+0x17c>
 800ca50:	b1b0      	cbz	r0, 800ca80 <_svfiprintf_r+0x114>
 800ca52:	9207      	str	r2, [sp, #28]
 800ca54:	e014      	b.n	800ca80 <_svfiprintf_r+0x114>
 800ca56:	eba0 0308 	sub.w	r3, r0, r8
 800ca5a:	fa09 f303 	lsl.w	r3, r9, r3
 800ca5e:	4313      	orrs	r3, r2
 800ca60:	9304      	str	r3, [sp, #16]
 800ca62:	46a2      	mov	sl, r4
 800ca64:	e7d2      	b.n	800ca0c <_svfiprintf_r+0xa0>
 800ca66:	9b03      	ldr	r3, [sp, #12]
 800ca68:	1d19      	adds	r1, r3, #4
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	9103      	str	r1, [sp, #12]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	bfbb      	ittet	lt
 800ca72:	425b      	neglt	r3, r3
 800ca74:	f042 0202 	orrlt.w	r2, r2, #2
 800ca78:	9307      	strge	r3, [sp, #28]
 800ca7a:	9307      	strlt	r3, [sp, #28]
 800ca7c:	bfb8      	it	lt
 800ca7e:	9204      	strlt	r2, [sp, #16]
 800ca80:	7823      	ldrb	r3, [r4, #0]
 800ca82:	2b2e      	cmp	r3, #46	@ 0x2e
 800ca84:	d10a      	bne.n	800ca9c <_svfiprintf_r+0x130>
 800ca86:	7863      	ldrb	r3, [r4, #1]
 800ca88:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca8a:	d132      	bne.n	800caf2 <_svfiprintf_r+0x186>
 800ca8c:	9b03      	ldr	r3, [sp, #12]
 800ca8e:	1d1a      	adds	r2, r3, #4
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	9203      	str	r2, [sp, #12]
 800ca94:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ca98:	3402      	adds	r4, #2
 800ca9a:	9305      	str	r3, [sp, #20]
 800ca9c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800cb60 <_svfiprintf_r+0x1f4>
 800caa0:	7821      	ldrb	r1, [r4, #0]
 800caa2:	2203      	movs	r2, #3
 800caa4:	4650      	mov	r0, sl
 800caa6:	f7f3 fb93 	bl	80001d0 <memchr>
 800caaa:	b138      	cbz	r0, 800cabc <_svfiprintf_r+0x150>
 800caac:	9b04      	ldr	r3, [sp, #16]
 800caae:	eba0 000a 	sub.w	r0, r0, sl
 800cab2:	2240      	movs	r2, #64	@ 0x40
 800cab4:	4082      	lsls	r2, r0
 800cab6:	4313      	orrs	r3, r2
 800cab8:	3401      	adds	r4, #1
 800caba:	9304      	str	r3, [sp, #16]
 800cabc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cac0:	4824      	ldr	r0, [pc, #144]	@ (800cb54 <_svfiprintf_r+0x1e8>)
 800cac2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cac6:	2206      	movs	r2, #6
 800cac8:	f7f3 fb82 	bl	80001d0 <memchr>
 800cacc:	2800      	cmp	r0, #0
 800cace:	d036      	beq.n	800cb3e <_svfiprintf_r+0x1d2>
 800cad0:	4b21      	ldr	r3, [pc, #132]	@ (800cb58 <_svfiprintf_r+0x1ec>)
 800cad2:	bb1b      	cbnz	r3, 800cb1c <_svfiprintf_r+0x1b0>
 800cad4:	9b03      	ldr	r3, [sp, #12]
 800cad6:	3307      	adds	r3, #7
 800cad8:	f023 0307 	bic.w	r3, r3, #7
 800cadc:	3308      	adds	r3, #8
 800cade:	9303      	str	r3, [sp, #12]
 800cae0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cae2:	4433      	add	r3, r6
 800cae4:	9309      	str	r3, [sp, #36]	@ 0x24
 800cae6:	e76a      	b.n	800c9be <_svfiprintf_r+0x52>
 800cae8:	fb0c 3202 	mla	r2, ip, r2, r3
 800caec:	460c      	mov	r4, r1
 800caee:	2001      	movs	r0, #1
 800caf0:	e7a8      	b.n	800ca44 <_svfiprintf_r+0xd8>
 800caf2:	2300      	movs	r3, #0
 800caf4:	3401      	adds	r4, #1
 800caf6:	9305      	str	r3, [sp, #20]
 800caf8:	4619      	mov	r1, r3
 800cafa:	f04f 0c0a 	mov.w	ip, #10
 800cafe:	4620      	mov	r0, r4
 800cb00:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb04:	3a30      	subs	r2, #48	@ 0x30
 800cb06:	2a09      	cmp	r2, #9
 800cb08:	d903      	bls.n	800cb12 <_svfiprintf_r+0x1a6>
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d0c6      	beq.n	800ca9c <_svfiprintf_r+0x130>
 800cb0e:	9105      	str	r1, [sp, #20]
 800cb10:	e7c4      	b.n	800ca9c <_svfiprintf_r+0x130>
 800cb12:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb16:	4604      	mov	r4, r0
 800cb18:	2301      	movs	r3, #1
 800cb1a:	e7f0      	b.n	800cafe <_svfiprintf_r+0x192>
 800cb1c:	ab03      	add	r3, sp, #12
 800cb1e:	9300      	str	r3, [sp, #0]
 800cb20:	462a      	mov	r2, r5
 800cb22:	4b0e      	ldr	r3, [pc, #56]	@ (800cb5c <_svfiprintf_r+0x1f0>)
 800cb24:	a904      	add	r1, sp, #16
 800cb26:	4638      	mov	r0, r7
 800cb28:	f3af 8000 	nop.w
 800cb2c:	1c42      	adds	r2, r0, #1
 800cb2e:	4606      	mov	r6, r0
 800cb30:	d1d6      	bne.n	800cae0 <_svfiprintf_r+0x174>
 800cb32:	89ab      	ldrh	r3, [r5, #12]
 800cb34:	065b      	lsls	r3, r3, #25
 800cb36:	f53f af2d 	bmi.w	800c994 <_svfiprintf_r+0x28>
 800cb3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cb3c:	e72c      	b.n	800c998 <_svfiprintf_r+0x2c>
 800cb3e:	ab03      	add	r3, sp, #12
 800cb40:	9300      	str	r3, [sp, #0]
 800cb42:	462a      	mov	r2, r5
 800cb44:	4b05      	ldr	r3, [pc, #20]	@ (800cb5c <_svfiprintf_r+0x1f0>)
 800cb46:	a904      	add	r1, sp, #16
 800cb48:	4638      	mov	r0, r7
 800cb4a:	f000 f879 	bl	800cc40 <_printf_i>
 800cb4e:	e7ed      	b.n	800cb2c <_svfiprintf_r+0x1c0>
 800cb50:	0800cfd0 	.word	0x0800cfd0
 800cb54:	0800cfda 	.word	0x0800cfda
 800cb58:	00000000 	.word	0x00000000
 800cb5c:	0800c8b5 	.word	0x0800c8b5
 800cb60:	0800cfd6 	.word	0x0800cfd6

0800cb64 <_printf_common>:
 800cb64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb68:	4616      	mov	r6, r2
 800cb6a:	4698      	mov	r8, r3
 800cb6c:	688a      	ldr	r2, [r1, #8]
 800cb6e:	690b      	ldr	r3, [r1, #16]
 800cb70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cb74:	4293      	cmp	r3, r2
 800cb76:	bfb8      	it	lt
 800cb78:	4613      	movlt	r3, r2
 800cb7a:	6033      	str	r3, [r6, #0]
 800cb7c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cb80:	4607      	mov	r7, r0
 800cb82:	460c      	mov	r4, r1
 800cb84:	b10a      	cbz	r2, 800cb8a <_printf_common+0x26>
 800cb86:	3301      	adds	r3, #1
 800cb88:	6033      	str	r3, [r6, #0]
 800cb8a:	6823      	ldr	r3, [r4, #0]
 800cb8c:	0699      	lsls	r1, r3, #26
 800cb8e:	bf42      	ittt	mi
 800cb90:	6833      	ldrmi	r3, [r6, #0]
 800cb92:	3302      	addmi	r3, #2
 800cb94:	6033      	strmi	r3, [r6, #0]
 800cb96:	6825      	ldr	r5, [r4, #0]
 800cb98:	f015 0506 	ands.w	r5, r5, #6
 800cb9c:	d106      	bne.n	800cbac <_printf_common+0x48>
 800cb9e:	f104 0a19 	add.w	sl, r4, #25
 800cba2:	68e3      	ldr	r3, [r4, #12]
 800cba4:	6832      	ldr	r2, [r6, #0]
 800cba6:	1a9b      	subs	r3, r3, r2
 800cba8:	42ab      	cmp	r3, r5
 800cbaa:	dc26      	bgt.n	800cbfa <_printf_common+0x96>
 800cbac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cbb0:	6822      	ldr	r2, [r4, #0]
 800cbb2:	3b00      	subs	r3, #0
 800cbb4:	bf18      	it	ne
 800cbb6:	2301      	movne	r3, #1
 800cbb8:	0692      	lsls	r2, r2, #26
 800cbba:	d42b      	bmi.n	800cc14 <_printf_common+0xb0>
 800cbbc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cbc0:	4641      	mov	r1, r8
 800cbc2:	4638      	mov	r0, r7
 800cbc4:	47c8      	blx	r9
 800cbc6:	3001      	adds	r0, #1
 800cbc8:	d01e      	beq.n	800cc08 <_printf_common+0xa4>
 800cbca:	6823      	ldr	r3, [r4, #0]
 800cbcc:	6922      	ldr	r2, [r4, #16]
 800cbce:	f003 0306 	and.w	r3, r3, #6
 800cbd2:	2b04      	cmp	r3, #4
 800cbd4:	bf02      	ittt	eq
 800cbd6:	68e5      	ldreq	r5, [r4, #12]
 800cbd8:	6833      	ldreq	r3, [r6, #0]
 800cbda:	1aed      	subeq	r5, r5, r3
 800cbdc:	68a3      	ldr	r3, [r4, #8]
 800cbde:	bf0c      	ite	eq
 800cbe0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cbe4:	2500      	movne	r5, #0
 800cbe6:	4293      	cmp	r3, r2
 800cbe8:	bfc4      	itt	gt
 800cbea:	1a9b      	subgt	r3, r3, r2
 800cbec:	18ed      	addgt	r5, r5, r3
 800cbee:	2600      	movs	r6, #0
 800cbf0:	341a      	adds	r4, #26
 800cbf2:	42b5      	cmp	r5, r6
 800cbf4:	d11a      	bne.n	800cc2c <_printf_common+0xc8>
 800cbf6:	2000      	movs	r0, #0
 800cbf8:	e008      	b.n	800cc0c <_printf_common+0xa8>
 800cbfa:	2301      	movs	r3, #1
 800cbfc:	4652      	mov	r2, sl
 800cbfe:	4641      	mov	r1, r8
 800cc00:	4638      	mov	r0, r7
 800cc02:	47c8      	blx	r9
 800cc04:	3001      	adds	r0, #1
 800cc06:	d103      	bne.n	800cc10 <_printf_common+0xac>
 800cc08:	f04f 30ff 	mov.w	r0, #4294967295
 800cc0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc10:	3501      	adds	r5, #1
 800cc12:	e7c6      	b.n	800cba2 <_printf_common+0x3e>
 800cc14:	18e1      	adds	r1, r4, r3
 800cc16:	1c5a      	adds	r2, r3, #1
 800cc18:	2030      	movs	r0, #48	@ 0x30
 800cc1a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cc1e:	4422      	add	r2, r4
 800cc20:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cc24:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cc28:	3302      	adds	r3, #2
 800cc2a:	e7c7      	b.n	800cbbc <_printf_common+0x58>
 800cc2c:	2301      	movs	r3, #1
 800cc2e:	4622      	mov	r2, r4
 800cc30:	4641      	mov	r1, r8
 800cc32:	4638      	mov	r0, r7
 800cc34:	47c8      	blx	r9
 800cc36:	3001      	adds	r0, #1
 800cc38:	d0e6      	beq.n	800cc08 <_printf_common+0xa4>
 800cc3a:	3601      	adds	r6, #1
 800cc3c:	e7d9      	b.n	800cbf2 <_printf_common+0x8e>
	...

0800cc40 <_printf_i>:
 800cc40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cc44:	7e0f      	ldrb	r7, [r1, #24]
 800cc46:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cc48:	2f78      	cmp	r7, #120	@ 0x78
 800cc4a:	4691      	mov	r9, r2
 800cc4c:	4680      	mov	r8, r0
 800cc4e:	460c      	mov	r4, r1
 800cc50:	469a      	mov	sl, r3
 800cc52:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cc56:	d807      	bhi.n	800cc68 <_printf_i+0x28>
 800cc58:	2f62      	cmp	r7, #98	@ 0x62
 800cc5a:	d80a      	bhi.n	800cc72 <_printf_i+0x32>
 800cc5c:	2f00      	cmp	r7, #0
 800cc5e:	f000 80d1 	beq.w	800ce04 <_printf_i+0x1c4>
 800cc62:	2f58      	cmp	r7, #88	@ 0x58
 800cc64:	f000 80b8 	beq.w	800cdd8 <_printf_i+0x198>
 800cc68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cc6c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cc70:	e03a      	b.n	800cce8 <_printf_i+0xa8>
 800cc72:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cc76:	2b15      	cmp	r3, #21
 800cc78:	d8f6      	bhi.n	800cc68 <_printf_i+0x28>
 800cc7a:	a101      	add	r1, pc, #4	@ (adr r1, 800cc80 <_printf_i+0x40>)
 800cc7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cc80:	0800ccd9 	.word	0x0800ccd9
 800cc84:	0800cced 	.word	0x0800cced
 800cc88:	0800cc69 	.word	0x0800cc69
 800cc8c:	0800cc69 	.word	0x0800cc69
 800cc90:	0800cc69 	.word	0x0800cc69
 800cc94:	0800cc69 	.word	0x0800cc69
 800cc98:	0800cced 	.word	0x0800cced
 800cc9c:	0800cc69 	.word	0x0800cc69
 800cca0:	0800cc69 	.word	0x0800cc69
 800cca4:	0800cc69 	.word	0x0800cc69
 800cca8:	0800cc69 	.word	0x0800cc69
 800ccac:	0800cdeb 	.word	0x0800cdeb
 800ccb0:	0800cd17 	.word	0x0800cd17
 800ccb4:	0800cda5 	.word	0x0800cda5
 800ccb8:	0800cc69 	.word	0x0800cc69
 800ccbc:	0800cc69 	.word	0x0800cc69
 800ccc0:	0800ce0d 	.word	0x0800ce0d
 800ccc4:	0800cc69 	.word	0x0800cc69
 800ccc8:	0800cd17 	.word	0x0800cd17
 800cccc:	0800cc69 	.word	0x0800cc69
 800ccd0:	0800cc69 	.word	0x0800cc69
 800ccd4:	0800cdad 	.word	0x0800cdad
 800ccd8:	6833      	ldr	r3, [r6, #0]
 800ccda:	1d1a      	adds	r2, r3, #4
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	6032      	str	r2, [r6, #0]
 800cce0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cce4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cce8:	2301      	movs	r3, #1
 800ccea:	e09c      	b.n	800ce26 <_printf_i+0x1e6>
 800ccec:	6833      	ldr	r3, [r6, #0]
 800ccee:	6820      	ldr	r0, [r4, #0]
 800ccf0:	1d19      	adds	r1, r3, #4
 800ccf2:	6031      	str	r1, [r6, #0]
 800ccf4:	0606      	lsls	r6, r0, #24
 800ccf6:	d501      	bpl.n	800ccfc <_printf_i+0xbc>
 800ccf8:	681d      	ldr	r5, [r3, #0]
 800ccfa:	e003      	b.n	800cd04 <_printf_i+0xc4>
 800ccfc:	0645      	lsls	r5, r0, #25
 800ccfe:	d5fb      	bpl.n	800ccf8 <_printf_i+0xb8>
 800cd00:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cd04:	2d00      	cmp	r5, #0
 800cd06:	da03      	bge.n	800cd10 <_printf_i+0xd0>
 800cd08:	232d      	movs	r3, #45	@ 0x2d
 800cd0a:	426d      	negs	r5, r5
 800cd0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cd10:	4858      	ldr	r0, [pc, #352]	@ (800ce74 <_printf_i+0x234>)
 800cd12:	230a      	movs	r3, #10
 800cd14:	e011      	b.n	800cd3a <_printf_i+0xfa>
 800cd16:	6821      	ldr	r1, [r4, #0]
 800cd18:	6833      	ldr	r3, [r6, #0]
 800cd1a:	0608      	lsls	r0, r1, #24
 800cd1c:	f853 5b04 	ldr.w	r5, [r3], #4
 800cd20:	d402      	bmi.n	800cd28 <_printf_i+0xe8>
 800cd22:	0649      	lsls	r1, r1, #25
 800cd24:	bf48      	it	mi
 800cd26:	b2ad      	uxthmi	r5, r5
 800cd28:	2f6f      	cmp	r7, #111	@ 0x6f
 800cd2a:	4852      	ldr	r0, [pc, #328]	@ (800ce74 <_printf_i+0x234>)
 800cd2c:	6033      	str	r3, [r6, #0]
 800cd2e:	bf14      	ite	ne
 800cd30:	230a      	movne	r3, #10
 800cd32:	2308      	moveq	r3, #8
 800cd34:	2100      	movs	r1, #0
 800cd36:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cd3a:	6866      	ldr	r6, [r4, #4]
 800cd3c:	60a6      	str	r6, [r4, #8]
 800cd3e:	2e00      	cmp	r6, #0
 800cd40:	db05      	blt.n	800cd4e <_printf_i+0x10e>
 800cd42:	6821      	ldr	r1, [r4, #0]
 800cd44:	432e      	orrs	r6, r5
 800cd46:	f021 0104 	bic.w	r1, r1, #4
 800cd4a:	6021      	str	r1, [r4, #0]
 800cd4c:	d04b      	beq.n	800cde6 <_printf_i+0x1a6>
 800cd4e:	4616      	mov	r6, r2
 800cd50:	fbb5 f1f3 	udiv	r1, r5, r3
 800cd54:	fb03 5711 	mls	r7, r3, r1, r5
 800cd58:	5dc7      	ldrb	r7, [r0, r7]
 800cd5a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cd5e:	462f      	mov	r7, r5
 800cd60:	42bb      	cmp	r3, r7
 800cd62:	460d      	mov	r5, r1
 800cd64:	d9f4      	bls.n	800cd50 <_printf_i+0x110>
 800cd66:	2b08      	cmp	r3, #8
 800cd68:	d10b      	bne.n	800cd82 <_printf_i+0x142>
 800cd6a:	6823      	ldr	r3, [r4, #0]
 800cd6c:	07df      	lsls	r7, r3, #31
 800cd6e:	d508      	bpl.n	800cd82 <_printf_i+0x142>
 800cd70:	6923      	ldr	r3, [r4, #16]
 800cd72:	6861      	ldr	r1, [r4, #4]
 800cd74:	4299      	cmp	r1, r3
 800cd76:	bfde      	ittt	le
 800cd78:	2330      	movle	r3, #48	@ 0x30
 800cd7a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cd7e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cd82:	1b92      	subs	r2, r2, r6
 800cd84:	6122      	str	r2, [r4, #16]
 800cd86:	f8cd a000 	str.w	sl, [sp]
 800cd8a:	464b      	mov	r3, r9
 800cd8c:	aa03      	add	r2, sp, #12
 800cd8e:	4621      	mov	r1, r4
 800cd90:	4640      	mov	r0, r8
 800cd92:	f7ff fee7 	bl	800cb64 <_printf_common>
 800cd96:	3001      	adds	r0, #1
 800cd98:	d14a      	bne.n	800ce30 <_printf_i+0x1f0>
 800cd9a:	f04f 30ff 	mov.w	r0, #4294967295
 800cd9e:	b004      	add	sp, #16
 800cda0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cda4:	6823      	ldr	r3, [r4, #0]
 800cda6:	f043 0320 	orr.w	r3, r3, #32
 800cdaa:	6023      	str	r3, [r4, #0]
 800cdac:	4832      	ldr	r0, [pc, #200]	@ (800ce78 <_printf_i+0x238>)
 800cdae:	2778      	movs	r7, #120	@ 0x78
 800cdb0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cdb4:	6823      	ldr	r3, [r4, #0]
 800cdb6:	6831      	ldr	r1, [r6, #0]
 800cdb8:	061f      	lsls	r7, r3, #24
 800cdba:	f851 5b04 	ldr.w	r5, [r1], #4
 800cdbe:	d402      	bmi.n	800cdc6 <_printf_i+0x186>
 800cdc0:	065f      	lsls	r7, r3, #25
 800cdc2:	bf48      	it	mi
 800cdc4:	b2ad      	uxthmi	r5, r5
 800cdc6:	6031      	str	r1, [r6, #0]
 800cdc8:	07d9      	lsls	r1, r3, #31
 800cdca:	bf44      	itt	mi
 800cdcc:	f043 0320 	orrmi.w	r3, r3, #32
 800cdd0:	6023      	strmi	r3, [r4, #0]
 800cdd2:	b11d      	cbz	r5, 800cddc <_printf_i+0x19c>
 800cdd4:	2310      	movs	r3, #16
 800cdd6:	e7ad      	b.n	800cd34 <_printf_i+0xf4>
 800cdd8:	4826      	ldr	r0, [pc, #152]	@ (800ce74 <_printf_i+0x234>)
 800cdda:	e7e9      	b.n	800cdb0 <_printf_i+0x170>
 800cddc:	6823      	ldr	r3, [r4, #0]
 800cdde:	f023 0320 	bic.w	r3, r3, #32
 800cde2:	6023      	str	r3, [r4, #0]
 800cde4:	e7f6      	b.n	800cdd4 <_printf_i+0x194>
 800cde6:	4616      	mov	r6, r2
 800cde8:	e7bd      	b.n	800cd66 <_printf_i+0x126>
 800cdea:	6833      	ldr	r3, [r6, #0]
 800cdec:	6825      	ldr	r5, [r4, #0]
 800cdee:	6961      	ldr	r1, [r4, #20]
 800cdf0:	1d18      	adds	r0, r3, #4
 800cdf2:	6030      	str	r0, [r6, #0]
 800cdf4:	062e      	lsls	r6, r5, #24
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	d501      	bpl.n	800cdfe <_printf_i+0x1be>
 800cdfa:	6019      	str	r1, [r3, #0]
 800cdfc:	e002      	b.n	800ce04 <_printf_i+0x1c4>
 800cdfe:	0668      	lsls	r0, r5, #25
 800ce00:	d5fb      	bpl.n	800cdfa <_printf_i+0x1ba>
 800ce02:	8019      	strh	r1, [r3, #0]
 800ce04:	2300      	movs	r3, #0
 800ce06:	6123      	str	r3, [r4, #16]
 800ce08:	4616      	mov	r6, r2
 800ce0a:	e7bc      	b.n	800cd86 <_printf_i+0x146>
 800ce0c:	6833      	ldr	r3, [r6, #0]
 800ce0e:	1d1a      	adds	r2, r3, #4
 800ce10:	6032      	str	r2, [r6, #0]
 800ce12:	681e      	ldr	r6, [r3, #0]
 800ce14:	6862      	ldr	r2, [r4, #4]
 800ce16:	2100      	movs	r1, #0
 800ce18:	4630      	mov	r0, r6
 800ce1a:	f7f3 f9d9 	bl	80001d0 <memchr>
 800ce1e:	b108      	cbz	r0, 800ce24 <_printf_i+0x1e4>
 800ce20:	1b80      	subs	r0, r0, r6
 800ce22:	6060      	str	r0, [r4, #4]
 800ce24:	6863      	ldr	r3, [r4, #4]
 800ce26:	6123      	str	r3, [r4, #16]
 800ce28:	2300      	movs	r3, #0
 800ce2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ce2e:	e7aa      	b.n	800cd86 <_printf_i+0x146>
 800ce30:	6923      	ldr	r3, [r4, #16]
 800ce32:	4632      	mov	r2, r6
 800ce34:	4649      	mov	r1, r9
 800ce36:	4640      	mov	r0, r8
 800ce38:	47d0      	blx	sl
 800ce3a:	3001      	adds	r0, #1
 800ce3c:	d0ad      	beq.n	800cd9a <_printf_i+0x15a>
 800ce3e:	6823      	ldr	r3, [r4, #0]
 800ce40:	079b      	lsls	r3, r3, #30
 800ce42:	d413      	bmi.n	800ce6c <_printf_i+0x22c>
 800ce44:	68e0      	ldr	r0, [r4, #12]
 800ce46:	9b03      	ldr	r3, [sp, #12]
 800ce48:	4298      	cmp	r0, r3
 800ce4a:	bfb8      	it	lt
 800ce4c:	4618      	movlt	r0, r3
 800ce4e:	e7a6      	b.n	800cd9e <_printf_i+0x15e>
 800ce50:	2301      	movs	r3, #1
 800ce52:	4632      	mov	r2, r6
 800ce54:	4649      	mov	r1, r9
 800ce56:	4640      	mov	r0, r8
 800ce58:	47d0      	blx	sl
 800ce5a:	3001      	adds	r0, #1
 800ce5c:	d09d      	beq.n	800cd9a <_printf_i+0x15a>
 800ce5e:	3501      	adds	r5, #1
 800ce60:	68e3      	ldr	r3, [r4, #12]
 800ce62:	9903      	ldr	r1, [sp, #12]
 800ce64:	1a5b      	subs	r3, r3, r1
 800ce66:	42ab      	cmp	r3, r5
 800ce68:	dcf2      	bgt.n	800ce50 <_printf_i+0x210>
 800ce6a:	e7eb      	b.n	800ce44 <_printf_i+0x204>
 800ce6c:	2500      	movs	r5, #0
 800ce6e:	f104 0619 	add.w	r6, r4, #25
 800ce72:	e7f5      	b.n	800ce60 <_printf_i+0x220>
 800ce74:	0800cfe1 	.word	0x0800cfe1
 800ce78:	0800cff2 	.word	0x0800cff2

0800ce7c <memmove>:
 800ce7c:	4288      	cmp	r0, r1
 800ce7e:	b510      	push	{r4, lr}
 800ce80:	eb01 0402 	add.w	r4, r1, r2
 800ce84:	d902      	bls.n	800ce8c <memmove+0x10>
 800ce86:	4284      	cmp	r4, r0
 800ce88:	4623      	mov	r3, r4
 800ce8a:	d807      	bhi.n	800ce9c <memmove+0x20>
 800ce8c:	1e43      	subs	r3, r0, #1
 800ce8e:	42a1      	cmp	r1, r4
 800ce90:	d008      	beq.n	800cea4 <memmove+0x28>
 800ce92:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce96:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ce9a:	e7f8      	b.n	800ce8e <memmove+0x12>
 800ce9c:	4402      	add	r2, r0
 800ce9e:	4601      	mov	r1, r0
 800cea0:	428a      	cmp	r2, r1
 800cea2:	d100      	bne.n	800cea6 <memmove+0x2a>
 800cea4:	bd10      	pop	{r4, pc}
 800cea6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ceaa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ceae:	e7f7      	b.n	800cea0 <memmove+0x24>

0800ceb0 <_sbrk_r>:
 800ceb0:	b538      	push	{r3, r4, r5, lr}
 800ceb2:	4d06      	ldr	r5, [pc, #24]	@ (800cecc <_sbrk_r+0x1c>)
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	4604      	mov	r4, r0
 800ceb8:	4608      	mov	r0, r1
 800ceba:	602b      	str	r3, [r5, #0]
 800cebc:	f7f3 ff4c 	bl	8000d58 <_sbrk>
 800cec0:	1c43      	adds	r3, r0, #1
 800cec2:	d102      	bne.n	800ceca <_sbrk_r+0x1a>
 800cec4:	682b      	ldr	r3, [r5, #0]
 800cec6:	b103      	cbz	r3, 800ceca <_sbrk_r+0x1a>
 800cec8:	6023      	str	r3, [r4, #0]
 800ceca:	bd38      	pop	{r3, r4, r5, pc}
 800cecc:	2000a5d8 	.word	0x2000a5d8

0800ced0 <_realloc_r>:
 800ced0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ced4:	4607      	mov	r7, r0
 800ced6:	4614      	mov	r4, r2
 800ced8:	460d      	mov	r5, r1
 800ceda:	b921      	cbnz	r1, 800cee6 <_realloc_r+0x16>
 800cedc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cee0:	4611      	mov	r1, r2
 800cee2:	f7ff bc5b 	b.w	800c79c <_malloc_r>
 800cee6:	b92a      	cbnz	r2, 800cef4 <_realloc_r+0x24>
 800cee8:	f7ff fbec 	bl	800c6c4 <_free_r>
 800ceec:	4625      	mov	r5, r4
 800ceee:	4628      	mov	r0, r5
 800cef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cef4:	f000 f81a 	bl	800cf2c <_malloc_usable_size_r>
 800cef8:	4284      	cmp	r4, r0
 800cefa:	4606      	mov	r6, r0
 800cefc:	d802      	bhi.n	800cf04 <_realloc_r+0x34>
 800cefe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cf02:	d8f4      	bhi.n	800ceee <_realloc_r+0x1e>
 800cf04:	4621      	mov	r1, r4
 800cf06:	4638      	mov	r0, r7
 800cf08:	f7ff fc48 	bl	800c79c <_malloc_r>
 800cf0c:	4680      	mov	r8, r0
 800cf0e:	b908      	cbnz	r0, 800cf14 <_realloc_r+0x44>
 800cf10:	4645      	mov	r5, r8
 800cf12:	e7ec      	b.n	800ceee <_realloc_r+0x1e>
 800cf14:	42b4      	cmp	r4, r6
 800cf16:	4622      	mov	r2, r4
 800cf18:	4629      	mov	r1, r5
 800cf1a:	bf28      	it	cs
 800cf1c:	4632      	movcs	r2, r6
 800cf1e:	f7ff fbc3 	bl	800c6a8 <memcpy>
 800cf22:	4629      	mov	r1, r5
 800cf24:	4638      	mov	r0, r7
 800cf26:	f7ff fbcd 	bl	800c6c4 <_free_r>
 800cf2a:	e7f1      	b.n	800cf10 <_realloc_r+0x40>

0800cf2c <_malloc_usable_size_r>:
 800cf2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf30:	1f18      	subs	r0, r3, #4
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	bfbc      	itt	lt
 800cf36:	580b      	ldrlt	r3, [r1, r0]
 800cf38:	18c0      	addlt	r0, r0, r3
 800cf3a:	4770      	bx	lr

0800cf3c <_init>:
 800cf3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf3e:	bf00      	nop
 800cf40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf42:	bc08      	pop	{r3}
 800cf44:	469e      	mov	lr, r3
 800cf46:	4770      	bx	lr

0800cf48 <_fini>:
 800cf48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf4a:	bf00      	nop
 800cf4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf4e:	bc08      	pop	{r3}
 800cf50:	469e      	mov	lr, r3
 800cf52:	4770      	bx	lr
