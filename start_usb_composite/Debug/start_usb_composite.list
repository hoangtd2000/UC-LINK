
start_usb_composite.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba18  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800bba8  0800bba8  0000cba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc58  0800bc58  0000d338  2**0
                  CONTENTS
  4 .ARM          00000008  0800bc58  0800bc58  0000cc58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc60  0800bc60  0000d338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc60  0800bc60  0000cc60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bc64  0800bc64  0000cc64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000338  20000000  0800bc68  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d338  2**0
                  CONTENTS
 10 .bss          000021cc  20000338  20000338  0000d338  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002504  20002504  0000d338  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d338  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fa43  00000000  00000000  0000d368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004f77  00000000  00000000  0002cdab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019f0  00000000  00000000  00031d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013f9  00000000  00000000  00033718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026b95  00000000  00000000  00034b11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002511e  00000000  00000000  0005b6a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5916  00000000  00000000  000807c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001560da  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007124  00000000  00000000  00156120  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000049  00000000  00000000  0015d244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000338 	.word	0x20000338
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bb90 	.word	0x0800bb90

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000033c 	.word	0x2000033c
 80001cc:	0800bb90 	.word	0x0800bb90

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000564:	4b17      	ldr	r3, [pc, #92]	@ (80005c4 <MX_CAN1_Init+0x64>)
 8000566:	4a18      	ldr	r2, [pc, #96]	@ (80005c8 <MX_CAN1_Init+0x68>)
 8000568:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 800056a:	4b16      	ldr	r3, [pc, #88]	@ (80005c4 <MX_CAN1_Init+0x64>)
 800056c:	2206      	movs	r2, #6
 800056e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000570:	4b14      	ldr	r3, [pc, #80]	@ (80005c4 <MX_CAN1_Init+0x64>)
 8000572:	2200      	movs	r2, #0
 8000574:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000576:	4b13      	ldr	r3, [pc, #76]	@ (80005c4 <MX_CAN1_Init+0x64>)
 8000578:	2200      	movs	r2, #0
 800057a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 800057c:	4b11      	ldr	r3, [pc, #68]	@ (80005c4 <MX_CAN1_Init+0x64>)
 800057e:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 8000582:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000584:	4b0f      	ldr	r3, [pc, #60]	@ (80005c4 <MX_CAN1_Init+0x64>)
 8000586:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800058a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800058c:	4b0d      	ldr	r3, [pc, #52]	@ (80005c4 <MX_CAN1_Init+0x64>)
 800058e:	2200      	movs	r2, #0
 8000590:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000592:	4b0c      	ldr	r3, [pc, #48]	@ (80005c4 <MX_CAN1_Init+0x64>)
 8000594:	2200      	movs	r2, #0
 8000596:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000598:	4b0a      	ldr	r3, [pc, #40]	@ (80005c4 <MX_CAN1_Init+0x64>)
 800059a:	2200      	movs	r2, #0
 800059c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800059e:	4b09      	ldr	r3, [pc, #36]	@ (80005c4 <MX_CAN1_Init+0x64>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005a4:	4b07      	ldr	r3, [pc, #28]	@ (80005c4 <MX_CAN1_Init+0x64>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80005aa:	4b06      	ldr	r3, [pc, #24]	@ (80005c4 <MX_CAN1_Init+0x64>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005b0:	4804      	ldr	r0, [pc, #16]	@ (80005c4 <MX_CAN1_Init+0x64>)
 80005b2:	f000 fe55 	bl	8001260 <HAL_CAN_Init>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80005bc:	f000 fa04 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80005c0:	bf00      	nop
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	20000354 	.word	0x20000354
 80005c8:	40006400 	.word	0x40006400

080005cc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b08a      	sub	sp, #40	@ 0x28
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d4:	f107 0314 	add.w	r3, r7, #20
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a21      	ldr	r2, [pc, #132]	@ (8000670 <HAL_CAN_MspInit+0xa4>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d13b      	bne.n	8000666 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	613b      	str	r3, [r7, #16]
 80005f2:	4b20      	ldr	r3, [pc, #128]	@ (8000674 <HAL_CAN_MspInit+0xa8>)
 80005f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f6:	4a1f      	ldr	r2, [pc, #124]	@ (8000674 <HAL_CAN_MspInit+0xa8>)
 80005f8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80005fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80005fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000674 <HAL_CAN_MspInit+0xa8>)
 8000600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000602:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000606:	613b      	str	r3, [r7, #16]
 8000608:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800060a:	2300      	movs	r3, #0
 800060c:	60fb      	str	r3, [r7, #12]
 800060e:	4b19      	ldr	r3, [pc, #100]	@ (8000674 <HAL_CAN_MspInit+0xa8>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	4a18      	ldr	r2, [pc, #96]	@ (8000674 <HAL_CAN_MspInit+0xa8>)
 8000614:	f043 0308 	orr.w	r3, r3, #8
 8000618:	6313      	str	r3, [r2, #48]	@ 0x30
 800061a:	4b16      	ldr	r3, [pc, #88]	@ (8000674 <HAL_CAN_MspInit+0xa8>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061e:	f003 0308 	and.w	r3, r3, #8
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000626:	2303      	movs	r3, #3
 8000628:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800062a:	2302      	movs	r3, #2
 800062c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062e:	2300      	movs	r3, #0
 8000630:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000632:	2303      	movs	r3, #3
 8000634:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000636:	2309      	movs	r3, #9
 8000638:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800063a:	f107 0314 	add.w	r3, r7, #20
 800063e:	4619      	mov	r1, r3
 8000640:	480d      	ldr	r0, [pc, #52]	@ (8000678 <HAL_CAN_MspInit+0xac>)
 8000642:	f001 fe5f 	bl	8002304 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000646:	2200      	movs	r2, #0
 8000648:	2100      	movs	r1, #0
 800064a:	2014      	movs	r0, #20
 800064c:	f001 fa3b 	bl	8001ac6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000650:	2014      	movs	r0, #20
 8000652:	f001 fa54 	bl	8001afe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000656:	2200      	movs	r2, #0
 8000658:	2100      	movs	r1, #0
 800065a:	2015      	movs	r0, #21
 800065c:	f001 fa33 	bl	8001ac6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000660:	2015      	movs	r0, #21
 8000662:	f001 fa4c 	bl	8001afe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000666:	bf00      	nop
 8000668:	3728      	adds	r7, #40	@ 0x28
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40006400 	.word	0x40006400
 8000674:	40023800 	.word	0x40023800
 8000678:	40020c00 	.word	0x40020c00

0800067c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	4b10      	ldr	r3, [pc, #64]	@ (80006c8 <MX_DMA_Init+0x4c>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	4a0f      	ldr	r2, [pc, #60]	@ (80006c8 <MX_DMA_Init+0x4c>)
 800068c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000690:	6313      	str	r3, [r2, #48]	@ 0x30
 8000692:	4b0d      	ldr	r3, [pc, #52]	@ (80006c8 <MX_DMA_Init+0x4c>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000696:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800069e:	2200      	movs	r2, #0
 80006a0:	2100      	movs	r1, #0
 80006a2:	200b      	movs	r0, #11
 80006a4:	f001 fa0f 	bl	8001ac6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80006a8:	200b      	movs	r0, #11
 80006aa:	f001 fa28 	bl	8001afe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2100      	movs	r1, #0
 80006b2:	202f      	movs	r0, #47	@ 0x2f
 80006b4:	f001 fa07 	bl	8001ac6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80006b8:	202f      	movs	r0, #47	@ 0x2f
 80006ba:	f001 fa20 	bl	8001afe <HAL_NVIC_EnableIRQ>

}
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800

080006cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08a      	sub	sp, #40	@ 0x28
 80006d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d2:	f107 0314 	add.w	r3, r7, #20
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	613b      	str	r3, [r7, #16]
 80006e6:	4b2d      	ldr	r3, [pc, #180]	@ (800079c <MX_GPIO_Init+0xd0>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	4a2c      	ldr	r2, [pc, #176]	@ (800079c <MX_GPIO_Init+0xd0>)
 80006ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f2:	4b2a      	ldr	r3, [pc, #168]	@ (800079c <MX_GPIO_Init+0xd0>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006fa:	613b      	str	r3, [r7, #16]
 80006fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	4b26      	ldr	r3, [pc, #152]	@ (800079c <MX_GPIO_Init+0xd0>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	4a25      	ldr	r2, [pc, #148]	@ (800079c <MX_GPIO_Init+0xd0>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	6313      	str	r3, [r2, #48]	@ 0x30
 800070e:	4b23      	ldr	r3, [pc, #140]	@ (800079c <MX_GPIO_Init+0xd0>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	4b1f      	ldr	r3, [pc, #124]	@ (800079c <MX_GPIO_Init+0xd0>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000722:	4a1e      	ldr	r2, [pc, #120]	@ (800079c <MX_GPIO_Init+0xd0>)
 8000724:	f043 0304 	orr.w	r3, r3, #4
 8000728:	6313      	str	r3, [r2, #48]	@ 0x30
 800072a:	4b1c      	ldr	r3, [pc, #112]	@ (800079c <MX_GPIO_Init+0xd0>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	f003 0304 	and.w	r3, r3, #4
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	4b18      	ldr	r3, [pc, #96]	@ (800079c <MX_GPIO_Init+0xd0>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	4a17      	ldr	r2, [pc, #92]	@ (800079c <MX_GPIO_Init+0xd0>)
 8000740:	f043 0308 	orr.w	r3, r3, #8
 8000744:	6313      	str	r3, [r2, #48]	@ 0x30
 8000746:	4b15      	ldr	r3, [pc, #84]	@ (800079c <MX_GPIO_Init+0xd0>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	f003 0308 	and.w	r3, r3, #8
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	4b11      	ldr	r3, [pc, #68]	@ (800079c <MX_GPIO_Init+0xd0>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	4a10      	ldr	r2, [pc, #64]	@ (800079c <MX_GPIO_Init+0xd0>)
 800075c:	f043 0302 	orr.w	r3, r3, #2
 8000760:	6313      	str	r3, [r2, #48]	@ 0x30
 8000762:	4b0e      	ldr	r3, [pc, #56]	@ (800079c <MX_GPIO_Init+0xd0>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	f003 0302 	and.w	r3, r3, #2
 800076a:	603b      	str	r3, [r7, #0]
 800076c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	21c0      	movs	r1, #192	@ 0xc0
 8000772:	480b      	ldr	r0, [pc, #44]	@ (80007a0 <MX_GPIO_Init+0xd4>)
 8000774:	f002 f85e 	bl	8002834 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000778:	23c0      	movs	r3, #192	@ 0xc0
 800077a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077c:	2301      	movs	r3, #1
 800077e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000784:	2300      	movs	r3, #0
 8000786:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000788:	f107 0314 	add.w	r3, r7, #20
 800078c:	4619      	mov	r1, r3
 800078e:	4804      	ldr	r0, [pc, #16]	@ (80007a0 <MX_GPIO_Init+0xd4>)
 8000790:	f001 fdb8 	bl	8002304 <HAL_GPIO_Init>

}
 8000794:	bf00      	nop
 8000796:	3728      	adds	r7, #40	@ 0x28
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40023800 	.word	0x40023800
 80007a0:	40020000 	.word	0x40020000

080007a4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007a8:	4b12      	ldr	r3, [pc, #72]	@ (80007f4 <MX_I2C1_Init+0x50>)
 80007aa:	4a13      	ldr	r2, [pc, #76]	@ (80007f8 <MX_I2C1_Init+0x54>)
 80007ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80007ae:	4b11      	ldr	r3, [pc, #68]	@ (80007f4 <MX_I2C1_Init+0x50>)
 80007b0:	4a12      	ldr	r2, [pc, #72]	@ (80007fc <MX_I2C1_Init+0x58>)
 80007b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007b4:	4b0f      	ldr	r3, [pc, #60]	@ (80007f4 <MX_I2C1_Init+0x50>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007ba:	4b0e      	ldr	r3, [pc, #56]	@ (80007f4 <MX_I2C1_Init+0x50>)
 80007bc:	2200      	movs	r2, #0
 80007be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007c0:	4b0c      	ldr	r3, [pc, #48]	@ (80007f4 <MX_I2C1_Init+0x50>)
 80007c2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007c8:	4b0a      	ldr	r3, [pc, #40]	@ (80007f4 <MX_I2C1_Init+0x50>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007ce:	4b09      	ldr	r3, [pc, #36]	@ (80007f4 <MX_I2C1_Init+0x50>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007d4:	4b07      	ldr	r3, [pc, #28]	@ (80007f4 <MX_I2C1_Init+0x50>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007da:	4b06      	ldr	r3, [pc, #24]	@ (80007f4 <MX_I2C1_Init+0x50>)
 80007dc:	2200      	movs	r2, #0
 80007de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007e0:	4804      	ldr	r0, [pc, #16]	@ (80007f4 <MX_I2C1_Init+0x50>)
 80007e2:	f002 f841 	bl	8002868 <HAL_I2C_Init>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007ec:	f000 f8ec 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007f0:	bf00      	nop
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	2000037c 	.word	0x2000037c
 80007f8:	40005400 	.word	0x40005400
 80007fc:	00061a80 	.word	0x00061a80

08000800 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08a      	sub	sp, #40	@ 0x28
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a19      	ldr	r2, [pc, #100]	@ (8000884 <HAL_I2C_MspInit+0x84>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d12b      	bne.n	800087a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	613b      	str	r3, [r7, #16]
 8000826:	4b18      	ldr	r3, [pc, #96]	@ (8000888 <HAL_I2C_MspInit+0x88>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	4a17      	ldr	r2, [pc, #92]	@ (8000888 <HAL_I2C_MspInit+0x88>)
 800082c:	f043 0302 	orr.w	r3, r3, #2
 8000830:	6313      	str	r3, [r2, #48]	@ 0x30
 8000832:	4b15      	ldr	r3, [pc, #84]	@ (8000888 <HAL_I2C_MspInit+0x88>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	f003 0302 	and.w	r3, r3, #2
 800083a:	613b      	str	r3, [r7, #16]
 800083c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800083e:	23c0      	movs	r3, #192	@ 0xc0
 8000840:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000842:	2312      	movs	r3, #18
 8000844:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800084a:	2303      	movs	r3, #3
 800084c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800084e:	2304      	movs	r3, #4
 8000850:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000852:	f107 0314 	add.w	r3, r7, #20
 8000856:	4619      	mov	r1, r3
 8000858:	480c      	ldr	r0, [pc, #48]	@ (800088c <HAL_I2C_MspInit+0x8c>)
 800085a:	f001 fd53 	bl	8002304 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	60fb      	str	r3, [r7, #12]
 8000862:	4b09      	ldr	r3, [pc, #36]	@ (8000888 <HAL_I2C_MspInit+0x88>)
 8000864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000866:	4a08      	ldr	r2, [pc, #32]	@ (8000888 <HAL_I2C_MspInit+0x88>)
 8000868:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800086c:	6413      	str	r3, [r2, #64]	@ 0x40
 800086e:	4b06      	ldr	r3, [pc, #24]	@ (8000888 <HAL_I2C_MspInit+0x88>)
 8000870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000872:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800087a:	bf00      	nop
 800087c:	3728      	adds	r7, #40	@ 0x28
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40005400 	.word	0x40005400
 8000888:	40023800 	.word	0x40023800
 800088c:	40020400 	.word	0x40020400

08000890 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000894:	f000 fc4e 	bl	8001134 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000898:	f000 f82c 	bl	80008f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800089c:	f7ff ff16 	bl	80006cc <MX_GPIO_Init>
  MX_DMA_Init();
 80008a0:	f7ff feec 	bl	800067c <MX_DMA_Init>
  MX_CAN1_Init();
 80008a4:	f7ff fe5c 	bl	8000560 <MX_CAN1_Init>
  MX_USB_OTG_FS_PCD_Init();
 80008a8:	f000 fb98 	bl	8000fdc <MX_USB_OTG_FS_PCD_Init>
  MX_UART5_Init();
 80008ac:	f000 fa62 	bl	8000d74 <MX_UART5_Init>
  MX_I2C1_Init();
 80008b0:	f7ff ff78 	bl	80007a4 <MX_I2C1_Init>
  MX_TIM1_Init();
 80008b4:	f000 f97e 	bl	8000bb4 <MX_TIM1_Init>
  MX_TIM2_Init();
 80008b8:	f000 f9cc 	bl	8000c54 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_Base_Start_IT(&htim1);
//  HAL_TIM_Base_Start_IT(&htim2);
  MX_USB_DEVICE_Init();
 80008bc:	f007 f854 	bl	8007968 <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if((hUsbDevice.dev_state == USBD_STATE_CONFIGURED) ){//&& (tx_ok == 1)){
 80008c0:	4b0a      	ldr	r3, [pc, #40]	@ (80008ec <main+0x5c>)
 80008c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	2b03      	cmp	r3, #3
 80008ca:	d10a      	bne.n	80008e2 <main+0x52>
		 // tx_ok =0;
		  hoang[3]+=1;
 80008cc:	4b08      	ldr	r3, [pc, #32]	@ (80008f0 <main+0x60>)
 80008ce:	78db      	ldrb	r3, [r3, #3]
 80008d0:	3301      	adds	r3, #1
 80008d2:	b2da      	uxtb	r2, r3
 80008d4:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <main+0x60>)
 80008d6:	70da      	strb	r2, [r3, #3]
		  USBD_CUSTOM_HID_SendReport(&hUsbDevice, hoang, sizeof(hoang));
 80008d8:	2240      	movs	r2, #64	@ 0x40
 80008da:	4905      	ldr	r1, [pc, #20]	@ (80008f0 <main+0x60>)
 80008dc:	4803      	ldr	r0, [pc, #12]	@ (80008ec <main+0x5c>)
 80008de:	f008 ff1d 	bl	800971c <USBD_CUSTOM_HID_SendReport>
	  }
	  HAL_Delay(500);
 80008e2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80008e6:	f000 fc97 	bl	8001218 <HAL_Delay>
	  if((hUsbDevice.dev_state == USBD_STATE_CONFIGURED) ){//&& (tx_ok == 1)){
 80008ea:	e7e9      	b.n	80008c0 <main+0x30>
 80008ec:	20000a58 	.word	0x20000a58
 80008f0:	20000000 	.word	0x20000000

080008f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b094      	sub	sp, #80	@ 0x50
 80008f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fa:	f107 0320 	add.w	r3, r7, #32
 80008fe:	2230      	movs	r2, #48	@ 0x30
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f00a fcc4 	bl	800b290 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000908:	f107 030c 	add.w	r3, r7, #12
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000918:	2300      	movs	r3, #0
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	4b28      	ldr	r3, [pc, #160]	@ (80009c0 <SystemClock_Config+0xcc>)
 800091e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000920:	4a27      	ldr	r2, [pc, #156]	@ (80009c0 <SystemClock_Config+0xcc>)
 8000922:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000926:	6413      	str	r3, [r2, #64]	@ 0x40
 8000928:	4b25      	ldr	r3, [pc, #148]	@ (80009c0 <SystemClock_Config+0xcc>)
 800092a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000930:	60bb      	str	r3, [r7, #8]
 8000932:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000934:	2300      	movs	r3, #0
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	4b22      	ldr	r3, [pc, #136]	@ (80009c4 <SystemClock_Config+0xd0>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a21      	ldr	r2, [pc, #132]	@ (80009c4 <SystemClock_Config+0xd0>)
 800093e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000942:	6013      	str	r3, [r2, #0]
 8000944:	4b1f      	ldr	r3, [pc, #124]	@ (80009c4 <SystemClock_Config+0xd0>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000950:	2301      	movs	r3, #1
 8000952:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000954:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000958:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800095a:	2302      	movs	r3, #2
 800095c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800095e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000962:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000964:	2304      	movs	r3, #4
 8000966:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000968:	23a8      	movs	r3, #168	@ 0xa8
 800096a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800096c:	2302      	movs	r3, #2
 800096e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000970:	2307      	movs	r3, #7
 8000972:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000974:	f107 0320 	add.w	r3, r7, #32
 8000978:	4618      	mov	r0, r3
 800097a:	f003 fb0b 	bl	8003f94 <HAL_RCC_OscConfig>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000984:	f000 f820 	bl	80009c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000988:	230f      	movs	r3, #15
 800098a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800098c:	2302      	movs	r3, #2
 800098e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000990:	2300      	movs	r3, #0
 8000992:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000994:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000998:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800099a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800099e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009a0:	f107 030c 	add.w	r3, r7, #12
 80009a4:	2105      	movs	r1, #5
 80009a6:	4618      	mov	r0, r3
 80009a8:	f003 fd6c 	bl	8004484 <HAL_RCC_ClockConfig>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009b2:	f000 f809 	bl	80009c8 <Error_Handler>
  }
}
 80009b6:	bf00      	nop
 80009b8:	3750      	adds	r7, #80	@ 0x50
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40023800 	.word	0x40023800
 80009c4:	40007000 	.word	0x40007000

080009c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009cc:	b672      	cpsid	i
}
 80009ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d0:	bf00      	nop
 80009d2:	e7fd      	b.n	80009d0 <Error_Handler+0x8>

080009d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	607b      	str	r3, [r7, #4]
 80009de:	4b10      	ldr	r3, [pc, #64]	@ (8000a20 <HAL_MspInit+0x4c>)
 80009e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009e2:	4a0f      	ldr	r2, [pc, #60]	@ (8000a20 <HAL_MspInit+0x4c>)
 80009e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80009ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000a20 <HAL_MspInit+0x4c>)
 80009ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	603b      	str	r3, [r7, #0]
 80009fa:	4b09      	ldr	r3, [pc, #36]	@ (8000a20 <HAL_MspInit+0x4c>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fe:	4a08      	ldr	r2, [pc, #32]	@ (8000a20 <HAL_MspInit+0x4c>)
 8000a00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a04:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a06:	4b06      	ldr	r3, [pc, #24]	@ (8000a20 <HAL_MspInit+0x4c>)
 8000a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a0e:	603b      	str	r3, [r7, #0]
 8000a10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a12:	bf00      	nop
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	40023800 	.word	0x40023800

08000a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a28:	bf00      	nop
 8000a2a:	e7fd      	b.n	8000a28 <NMI_Handler+0x4>

08000a2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <HardFault_Handler+0x4>

08000a34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <MemManage_Handler+0x4>

08000a3c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a40:	bf00      	nop
 8000a42:	e7fd      	b.n	8000a40 <BusFault_Handler+0x4>

08000a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a48:	bf00      	nop
 8000a4a:	e7fd      	b.n	8000a48 <UsageFault_Handler+0x4>

08000a4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr

08000a5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr

08000a76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a7a:	f000 fbad 	bl	80011d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
	...

08000a84 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8000a88:	4802      	ldr	r0, [pc, #8]	@ (8000a94 <DMA1_Stream0_IRQHandler+0x10>)
 8000a8a:	f001 f9ff 	bl	8001e8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000510 	.word	0x20000510

08000a98 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000a9c:	4802      	ldr	r0, [pc, #8]	@ (8000aa8 <CAN1_RX0_IRQHandler+0x10>)
 8000a9e:	f000 fcda 	bl	8001456 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000354 	.word	0x20000354

08000aac <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000ab0:	4802      	ldr	r0, [pc, #8]	@ (8000abc <CAN1_RX1_IRQHandler+0x10>)
 8000ab2:	f000 fcd0 	bl	8001456 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000354 	.word	0x20000354

08000ac0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ac4:	4802      	ldr	r0, [pc, #8]	@ (8000ad0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000ac6:	f003 ffbd 	bl	8004a44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	200003d8 	.word	0x200003d8

08000ad4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ad8:	4802      	ldr	r0, [pc, #8]	@ (8000ae4 <TIM2_IRQHandler+0x10>)
 8000ada:	f003 ffb3 	bl	8004a44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000420 	.word	0x20000420

08000ae8 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8000aec:	4802      	ldr	r0, [pc, #8]	@ (8000af8 <DMA1_Stream7_IRQHandler+0x10>)
 8000aee:	f001 f9cd 	bl	8001e8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	200004b0 	.word	0x200004b0

08000afc <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000b00:	4802      	ldr	r0, [pc, #8]	@ (8000b0c <UART5_IRQHandler+0x10>)
 8000b02:	f004 fc81 	bl	8005408 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000468 	.word	0x20000468

08000b10 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b14:	4802      	ldr	r0, [pc, #8]	@ (8000b20 <OTG_FS_IRQHandler+0x10>)
 8000b16:	f002 f92f 	bl	8002d78 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000570 	.word	0x20000570

08000b24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b2c:	4a14      	ldr	r2, [pc, #80]	@ (8000b80 <_sbrk+0x5c>)
 8000b2e:	4b15      	ldr	r3, [pc, #84]	@ (8000b84 <_sbrk+0x60>)
 8000b30:	1ad3      	subs	r3, r2, r3
 8000b32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b38:	4b13      	ldr	r3, [pc, #76]	@ (8000b88 <_sbrk+0x64>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d102      	bne.n	8000b46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b40:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <_sbrk+0x64>)
 8000b42:	4a12      	ldr	r2, [pc, #72]	@ (8000b8c <_sbrk+0x68>)
 8000b44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b46:	4b10      	ldr	r3, [pc, #64]	@ (8000b88 <_sbrk+0x64>)
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d207      	bcs.n	8000b64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b54:	f00a fba4 	bl	800b2a0 <__errno>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	220c      	movs	r2, #12
 8000b5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b62:	e009      	b.n	8000b78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b64:	4b08      	ldr	r3, [pc, #32]	@ (8000b88 <_sbrk+0x64>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b6a:	4b07      	ldr	r3, [pc, #28]	@ (8000b88 <_sbrk+0x64>)
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4413      	add	r3, r2
 8000b72:	4a05      	ldr	r2, [pc, #20]	@ (8000b88 <_sbrk+0x64>)
 8000b74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b76:	68fb      	ldr	r3, [r7, #12]
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3718      	adds	r7, #24
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20020000 	.word	0x20020000
 8000b84:	00000400 	.word	0x00000400
 8000b88:	200003d4 	.word	0x200003d4
 8000b8c:	20002508 	.word	0x20002508

08000b90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b94:	4b06      	ldr	r3, [pc, #24]	@ (8000bb0 <SystemInit+0x20>)
 8000b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b9a:	4a05      	ldr	r2, [pc, #20]	@ (8000bb0 <SystemInit+0x20>)
 8000b9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ba0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bba:	f107 0308 	add.w	r3, r7, #8
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
 8000bc4:	609a      	str	r2, [r3, #8]
 8000bc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bc8:	463b      	mov	r3, r7
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bd0:	4b1e      	ldr	r3, [pc, #120]	@ (8000c4c <MX_TIM1_Init+0x98>)
 8000bd2:	4a1f      	ldr	r2, [pc, #124]	@ (8000c50 <MX_TIM1_Init+0x9c>)
 8000bd4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 8000bd6:	4b1d      	ldr	r3, [pc, #116]	@ (8000c4c <MX_TIM1_Init+0x98>)
 8000bd8:	22a7      	movs	r2, #167	@ 0xa7
 8000bda:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bdc:	4b1b      	ldr	r3, [pc, #108]	@ (8000c4c <MX_TIM1_Init+0x98>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8000be2:	4b1a      	ldr	r3, [pc, #104]	@ (8000c4c <MX_TIM1_Init+0x98>)
 8000be4:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000be8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bea:	4b18      	ldr	r3, [pc, #96]	@ (8000c4c <MX_TIM1_Init+0x98>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bf0:	4b16      	ldr	r3, [pc, #88]	@ (8000c4c <MX_TIM1_Init+0x98>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bf6:	4b15      	ldr	r3, [pc, #84]	@ (8000c4c <MX_TIM1_Init+0x98>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bfc:	4813      	ldr	r0, [pc, #76]	@ (8000c4c <MX_TIM1_Init+0x98>)
 8000bfe:	f003 fe61 	bl	80048c4 <HAL_TIM_Base_Init>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000c08:	f7ff fede 	bl	80009c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c12:	f107 0308 	add.w	r3, r7, #8
 8000c16:	4619      	mov	r1, r3
 8000c18:	480c      	ldr	r0, [pc, #48]	@ (8000c4c <MX_TIM1_Init+0x98>)
 8000c1a:	f004 f803 	bl	8004c24 <HAL_TIM_ConfigClockSource>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000c24:	f7ff fed0 	bl	80009c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c30:	463b      	mov	r3, r7
 8000c32:	4619      	mov	r1, r3
 8000c34:	4805      	ldr	r0, [pc, #20]	@ (8000c4c <MX_TIM1_Init+0x98>)
 8000c36:	f004 fa25 	bl	8005084 <HAL_TIMEx_MasterConfigSynchronization>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000c40:	f7ff fec2 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c44:	bf00      	nop
 8000c46:	3718      	adds	r7, #24
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	200003d8 	.word	0x200003d8
 8000c50:	40010000 	.word	0x40010000

08000c54 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c5a:	f107 0308 	add.w	r3, r7, #8
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c68:	463b      	mov	r3, r7
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c70:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce8 <MX_TIM2_Init+0x94>)
 8000c72:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8000c78:	4b1b      	ldr	r3, [pc, #108]	@ (8000ce8 <MX_TIM2_Init+0x94>)
 8000c7a:	2253      	movs	r2, #83	@ 0x53
 8000c7c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c7e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce8 <MX_TIM2_Init+0x94>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2999;
 8000c84:	4b18      	ldr	r3, [pc, #96]	@ (8000ce8 <MX_TIM2_Init+0x94>)
 8000c86:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8000c8a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c8c:	4b16      	ldr	r3, [pc, #88]	@ (8000ce8 <MX_TIM2_Init+0x94>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c92:	4b15      	ldr	r3, [pc, #84]	@ (8000ce8 <MX_TIM2_Init+0x94>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c98:	4813      	ldr	r0, [pc, #76]	@ (8000ce8 <MX_TIM2_Init+0x94>)
 8000c9a:	f003 fe13 	bl	80048c4 <HAL_TIM_Base_Init>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ca4:	f7ff fe90 	bl	80009c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ca8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cae:	f107 0308 	add.w	r3, r7, #8
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	480c      	ldr	r0, [pc, #48]	@ (8000ce8 <MX_TIM2_Init+0x94>)
 8000cb6:	f003 ffb5 	bl	8004c24 <HAL_TIM_ConfigClockSource>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000cc0:	f7ff fe82 	bl	80009c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ccc:	463b      	mov	r3, r7
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4805      	ldr	r0, [pc, #20]	@ (8000ce8 <MX_TIM2_Init+0x94>)
 8000cd2:	f004 f9d7 	bl	8005084 <HAL_TIMEx_MasterConfigSynchronization>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000cdc:	f7ff fe74 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ce0:	bf00      	nop
 8000ce2:	3718      	adds	r7, #24
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	20000420 	.word	0x20000420

08000cec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a1c      	ldr	r2, [pc, #112]	@ (8000d6c <HAL_TIM_Base_MspInit+0x80>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d116      	bne.n	8000d2c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	4b1b      	ldr	r3, [pc, #108]	@ (8000d70 <HAL_TIM_Base_MspInit+0x84>)
 8000d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d06:	4a1a      	ldr	r2, [pc, #104]	@ (8000d70 <HAL_TIM_Base_MspInit+0x84>)
 8000d08:	f043 0301 	orr.w	r3, r3, #1
 8000d0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d0e:	4b18      	ldr	r3, [pc, #96]	@ (8000d70 <HAL_TIM_Base_MspInit+0x84>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	2019      	movs	r0, #25
 8000d20:	f000 fed1 	bl	8001ac6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000d24:	2019      	movs	r0, #25
 8000d26:	f000 feea 	bl	8001afe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000d2a:	e01a      	b.n	8000d62 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM2)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d34:	d115      	bne.n	8000d62 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	60bb      	str	r3, [r7, #8]
 8000d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000d70 <HAL_TIM_Base_MspInit+0x84>)
 8000d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d3e:	4a0c      	ldr	r2, [pc, #48]	@ (8000d70 <HAL_TIM_Base_MspInit+0x84>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d46:	4b0a      	ldr	r3, [pc, #40]	@ (8000d70 <HAL_TIM_Base_MspInit+0x84>)
 8000d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	60bb      	str	r3, [r7, #8]
 8000d50:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d52:	2200      	movs	r2, #0
 8000d54:	2100      	movs	r1, #0
 8000d56:	201c      	movs	r0, #28
 8000d58:	f000 feb5 	bl	8001ac6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d5c:	201c      	movs	r0, #28
 8000d5e:	f000 fece 	bl	8001afe <HAL_NVIC_EnableIRQ>
}
 8000d62:	bf00      	nop
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40010000 	.word	0x40010000
 8000d70:	40023800 	.word	0x40023800

08000d74 <MX_UART5_Init>:
DMA_HandleTypeDef hdma_uart5_tx;
DMA_HandleTypeDef hdma_uart5_rx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000d78:	4b11      	ldr	r3, [pc, #68]	@ (8000dc0 <MX_UART5_Init+0x4c>)
 8000d7a:	4a12      	ldr	r2, [pc, #72]	@ (8000dc4 <MX_UART5_Init+0x50>)
 8000d7c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000d7e:	4b10      	ldr	r3, [pc, #64]	@ (8000dc0 <MX_UART5_Init+0x4c>)
 8000d80:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d84:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000d86:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc0 <MX_UART5_Init+0x4c>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc0 <MX_UART5_Init+0x4c>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000d92:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc0 <MX_UART5_Init+0x4c>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000d98:	4b09      	ldr	r3, [pc, #36]	@ (8000dc0 <MX_UART5_Init+0x4c>)
 8000d9a:	220c      	movs	r2, #12
 8000d9c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d9e:	4b08      	ldr	r3, [pc, #32]	@ (8000dc0 <MX_UART5_Init+0x4c>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000da4:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <MX_UART5_Init+0x4c>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000daa:	4805      	ldr	r0, [pc, #20]	@ (8000dc0 <MX_UART5_Init+0x4c>)
 8000dac:	f004 f9fa 	bl	80051a4 <HAL_UART_Init>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000db6:	f7ff fe07 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */
 // HAL_UART_Receive_IT(&huart5, &uart5_rx_byte, UART5_RX_BUF_LEN);
  /* USER CODE END UART5_Init 2 */

}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000468 	.word	0x20000468
 8000dc4:	40005000 	.word	0x40005000

08000dc8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08a      	sub	sp, #40	@ 0x28
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a5c      	ldr	r2, [pc, #368]	@ (8000f58 <HAL_UART_MspInit+0x190>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	f040 80b1 	bne.w	8000f4e <HAL_UART_MspInit+0x186>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000dec:	2300      	movs	r3, #0
 8000dee:	613b      	str	r3, [r7, #16]
 8000df0:	4b5a      	ldr	r3, [pc, #360]	@ (8000f5c <HAL_UART_MspInit+0x194>)
 8000df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df4:	4a59      	ldr	r2, [pc, #356]	@ (8000f5c <HAL_UART_MspInit+0x194>)
 8000df6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000dfa:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dfc:	4b57      	ldr	r3, [pc, #348]	@ (8000f5c <HAL_UART_MspInit+0x194>)
 8000dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e00:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e04:	613b      	str	r3, [r7, #16]
 8000e06:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e08:	2300      	movs	r3, #0
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	4b53      	ldr	r3, [pc, #332]	@ (8000f5c <HAL_UART_MspInit+0x194>)
 8000e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e10:	4a52      	ldr	r2, [pc, #328]	@ (8000f5c <HAL_UART_MspInit+0x194>)
 8000e12:	f043 0304 	orr.w	r3, r3, #4
 8000e16:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e18:	4b50      	ldr	r3, [pc, #320]	@ (8000f5c <HAL_UART_MspInit+0x194>)
 8000e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1c:	f003 0304 	and.w	r3, r3, #4
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e24:	2300      	movs	r3, #0
 8000e26:	60bb      	str	r3, [r7, #8]
 8000e28:	4b4c      	ldr	r3, [pc, #304]	@ (8000f5c <HAL_UART_MspInit+0x194>)
 8000e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2c:	4a4b      	ldr	r2, [pc, #300]	@ (8000f5c <HAL_UART_MspInit+0x194>)
 8000e2e:	f043 0308 	orr.w	r3, r3, #8
 8000e32:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e34:	4b49      	ldr	r3, [pc, #292]	@ (8000f5c <HAL_UART_MspInit+0x194>)
 8000e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e38:	f003 0308 	and.w	r3, r3, #8
 8000e3c:	60bb      	str	r3, [r7, #8]
 8000e3e:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e46:	2302      	movs	r3, #2
 8000e48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4e:	2303      	movs	r3, #3
 8000e50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000e52:	2308      	movs	r3, #8
 8000e54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e56:	f107 0314 	add.w	r3, r7, #20
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4840      	ldr	r0, [pc, #256]	@ (8000f60 <HAL_UART_MspInit+0x198>)
 8000e5e:	f001 fa51 	bl	8002304 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e62:	2304      	movs	r3, #4
 8000e64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e66:	2302      	movs	r3, #2
 8000e68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000e72:	2308      	movs	r3, #8
 8000e74:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e76:	f107 0314 	add.w	r3, r7, #20
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4839      	ldr	r0, [pc, #228]	@ (8000f64 <HAL_UART_MspInit+0x19c>)
 8000e7e:	f001 fa41 	bl	8002304 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8000e82:	4b39      	ldr	r3, [pc, #228]	@ (8000f68 <HAL_UART_MspInit+0x1a0>)
 8000e84:	4a39      	ldr	r2, [pc, #228]	@ (8000f6c <HAL_UART_MspInit+0x1a4>)
 8000e86:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8000e88:	4b37      	ldr	r3, [pc, #220]	@ (8000f68 <HAL_UART_MspInit+0x1a0>)
 8000e8a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000e8e:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e90:	4b35      	ldr	r3, [pc, #212]	@ (8000f68 <HAL_UART_MspInit+0x1a0>)
 8000e92:	2240      	movs	r2, #64	@ 0x40
 8000e94:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e96:	4b34      	ldr	r3, [pc, #208]	@ (8000f68 <HAL_UART_MspInit+0x1a0>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e9c:	4b32      	ldr	r3, [pc, #200]	@ (8000f68 <HAL_UART_MspInit+0x1a0>)
 8000e9e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ea2:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ea4:	4b30      	ldr	r3, [pc, #192]	@ (8000f68 <HAL_UART_MspInit+0x1a0>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000eaa:	4b2f      	ldr	r3, [pc, #188]	@ (8000f68 <HAL_UART_MspInit+0x1a0>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8000eb0:	4b2d      	ldr	r3, [pc, #180]	@ (8000f68 <HAL_UART_MspInit+0x1a0>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000eb6:	4b2c      	ldr	r3, [pc, #176]	@ (8000f68 <HAL_UART_MspInit+0x1a0>)
 8000eb8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000ebc:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ebe:	4b2a      	ldr	r3, [pc, #168]	@ (8000f68 <HAL_UART_MspInit+0x1a0>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8000ec4:	4828      	ldr	r0, [pc, #160]	@ (8000f68 <HAL_UART_MspInit+0x1a0>)
 8000ec6:	f000 fe43 	bl	8001b50 <HAL_DMA_Init>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8000ed0:	f7ff fd7a 	bl	80009c8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4a24      	ldr	r2, [pc, #144]	@ (8000f68 <HAL_UART_MspInit+0x1a0>)
 8000ed8:	639a      	str	r2, [r3, #56]	@ 0x38
 8000eda:	4a23      	ldr	r2, [pc, #140]	@ (8000f68 <HAL_UART_MspInit+0x1a0>)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8000ee0:	4b23      	ldr	r3, [pc, #140]	@ (8000f70 <HAL_UART_MspInit+0x1a8>)
 8000ee2:	4a24      	ldr	r2, [pc, #144]	@ (8000f74 <HAL_UART_MspInit+0x1ac>)
 8000ee4:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8000ee6:	4b22      	ldr	r3, [pc, #136]	@ (8000f70 <HAL_UART_MspInit+0x1a8>)
 8000ee8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000eec:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000eee:	4b20      	ldr	r3, [pc, #128]	@ (8000f70 <HAL_UART_MspInit+0x1a8>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ef4:	4b1e      	ldr	r3, [pc, #120]	@ (8000f70 <HAL_UART_MspInit+0x1a8>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000efa:	4b1d      	ldr	r3, [pc, #116]	@ (8000f70 <HAL_UART_MspInit+0x1a8>)
 8000efc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f00:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f02:	4b1b      	ldr	r3, [pc, #108]	@ (8000f70 <HAL_UART_MspInit+0x1a8>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f08:	4b19      	ldr	r3, [pc, #100]	@ (8000f70 <HAL_UART_MspInit+0x1a8>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8000f0e:	4b18      	ldr	r3, [pc, #96]	@ (8000f70 <HAL_UART_MspInit+0x1a8>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000f14:	4b16      	ldr	r3, [pc, #88]	@ (8000f70 <HAL_UART_MspInit+0x1a8>)
 8000f16:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000f1a:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f1c:	4b14      	ldr	r3, [pc, #80]	@ (8000f70 <HAL_UART_MspInit+0x1a8>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8000f22:	4813      	ldr	r0, [pc, #76]	@ (8000f70 <HAL_UART_MspInit+0x1a8>)
 8000f24:	f000 fe14 	bl	8001b50 <HAL_DMA_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 8000f2e:	f7ff fd4b 	bl	80009c8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a0e      	ldr	r2, [pc, #56]	@ (8000f70 <HAL_UART_MspInit+0x1a8>)
 8000f36:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f38:	4a0d      	ldr	r2, [pc, #52]	@ (8000f70 <HAL_UART_MspInit+0x1a8>)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2100      	movs	r1, #0
 8000f42:	2035      	movs	r0, #53	@ 0x35
 8000f44:	f000 fdbf 	bl	8001ac6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000f48:	2035      	movs	r0, #53	@ 0x35
 8000f4a:	f000 fdd8 	bl	8001afe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8000f4e:	bf00      	nop
 8000f50:	3728      	adds	r7, #40	@ 0x28
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40005000 	.word	0x40005000
 8000f5c:	40023800 	.word	0x40023800
 8000f60:	40020800 	.word	0x40020800
 8000f64:	40020c00 	.word	0x40020c00
 8000f68:	200004b0 	.word	0x200004b0
 8000f6c:	400260b8 	.word	0x400260b8
 8000f70:	20000510 	.word	0x20000510
 8000f74:	40026010 	.word	0x40026010

08000f78 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==UART5)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a11      	ldr	r2, [pc, #68]	@ (8000fcc <HAL_UART_MspDeInit+0x54>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d11b      	bne.n	8000fc2 <HAL_UART_MspDeInit+0x4a>
  {
  /* USER CODE BEGIN UART5_MspDeInit 0 */

  /* USER CODE END UART5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART5_CLK_DISABLE();
 8000f8a:	4b11      	ldr	r3, [pc, #68]	@ (8000fd0 <HAL_UART_MspDeInit+0x58>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8e:	4a10      	ldr	r2, [pc, #64]	@ (8000fd0 <HAL_UART_MspDeInit+0x58>)
 8000f90:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8000f94:	6413      	str	r3, [r2, #64]	@ 0x40

    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12);
 8000f96:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f9a:	480e      	ldr	r0, [pc, #56]	@ (8000fd4 <HAL_UART_MspDeInit+0x5c>)
 8000f9c:	f001 fb4e 	bl	800263c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_2);
 8000fa0:	2104      	movs	r1, #4
 8000fa2:	480d      	ldr	r0, [pc, #52]	@ (8000fd8 <HAL_UART_MspDeInit+0x60>)
 8000fa4:	f001 fb4a 	bl	800263c <HAL_GPIO_DeInit>

    /* UART5 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fac:	4618      	mov	r0, r3
 8000fae:	f000 fe7d 	bl	8001cac <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f000 fe78 	bl	8001cac <HAL_DMA_DeInit>

    /* UART5 interrupt Deinit */
    HAL_NVIC_DisableIRQ(UART5_IRQn);
 8000fbc:	2035      	movs	r0, #53	@ 0x35
 8000fbe:	f000 fdac 	bl	8001b1a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN UART5_MspDeInit 1 */

  /* USER CODE END UART5_MspDeInit 1 */
  }
}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40005000 	.word	0x40005000
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	40020800 	.word	0x40020800
 8000fd8:	40020c00 	.word	0x40020c00

08000fdc <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000fe0:	4b14      	ldr	r3, [pc, #80]	@ (8001034 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fe2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000fe6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000fe8:	4b12      	ldr	r3, [pc, #72]	@ (8001034 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fea:	2204      	movs	r2, #4
 8000fec:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000fee:	4b11      	ldr	r3, [pc, #68]	@ (8001034 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ff0:	2202      	movs	r2, #2
 8000ff2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8001034 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ffa:	4b0e      	ldr	r3, [pc, #56]	@ (8001034 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ffc:	2202      	movs	r2, #2
 8000ffe:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001000:	4b0c      	ldr	r3, [pc, #48]	@ (8001034 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001002:	2200      	movs	r2, #0
 8001004:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001006:	4b0b      	ldr	r3, [pc, #44]	@ (8001034 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001008:	2200      	movs	r2, #0
 800100a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800100c:	4b09      	ldr	r3, [pc, #36]	@ (8001034 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800100e:	2200      	movs	r2, #0
 8001010:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001012:	4b08      	ldr	r3, [pc, #32]	@ (8001034 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001014:	2200      	movs	r2, #0
 8001016:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001018:	4b06      	ldr	r3, [pc, #24]	@ (8001034 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800101a:	2200      	movs	r2, #0
 800101c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800101e:	4805      	ldr	r0, [pc, #20]	@ (8001034 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001020:	f001 fd66 	bl	8002af0 <HAL_PCD_Init>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800102a:	f7ff fccd 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000570 	.word	0x20000570

08001038 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08a      	sub	sp, #40	@ 0x28
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001058:	d13a      	bne.n	80010d0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	613b      	str	r3, [r7, #16]
 800105e:	4b1e      	ldr	r3, [pc, #120]	@ (80010d8 <HAL_PCD_MspInit+0xa0>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001062:	4a1d      	ldr	r2, [pc, #116]	@ (80010d8 <HAL_PCD_MspInit+0xa0>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6313      	str	r3, [r2, #48]	@ 0x30
 800106a:	4b1b      	ldr	r3, [pc, #108]	@ (80010d8 <HAL_PCD_MspInit+0xa0>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	613b      	str	r3, [r7, #16]
 8001074:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001076:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800107a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107c:	2302      	movs	r3, #2
 800107e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001084:	2303      	movs	r3, #3
 8001086:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001088:	230a      	movs	r3, #10
 800108a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	4619      	mov	r1, r3
 8001092:	4812      	ldr	r0, [pc, #72]	@ (80010dc <HAL_PCD_MspInit+0xa4>)
 8001094:	f001 f936 	bl	8002304 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001098:	4b0f      	ldr	r3, [pc, #60]	@ (80010d8 <HAL_PCD_MspInit+0xa0>)
 800109a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800109c:	4a0e      	ldr	r2, [pc, #56]	@ (80010d8 <HAL_PCD_MspInit+0xa0>)
 800109e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010a2:	6353      	str	r3, [r2, #52]	@ 0x34
 80010a4:	2300      	movs	r3, #0
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	4b0b      	ldr	r3, [pc, #44]	@ (80010d8 <HAL_PCD_MspInit+0xa0>)
 80010aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ac:	4a0a      	ldr	r2, [pc, #40]	@ (80010d8 <HAL_PCD_MspInit+0xa0>)
 80010ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010b2:	6453      	str	r3, [r2, #68]	@ 0x44
 80010b4:	4b08      	ldr	r3, [pc, #32]	@ (80010d8 <HAL_PCD_MspInit+0xa0>)
 80010b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	68fb      	ldr	r3, [r7, #12]

    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80010c0:	2200      	movs	r2, #0
 80010c2:	2100      	movs	r1, #0
 80010c4:	2043      	movs	r0, #67	@ 0x43
 80010c6:	f000 fcfe 	bl	8001ac6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80010ca:	2043      	movs	r0, #67	@ 0x43
 80010cc:	f000 fd17 	bl	8001afe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80010d0:	bf00      	nop
 80010d2:	3728      	adds	r7, #40	@ 0x28
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40023800 	.word	0x40023800
 80010dc:	40020000 	.word	0x40020000

080010e0 <Reset_Handler>:
 80010e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001118 <LoopFillZerobss+0xe>
 80010e4:	f7ff fd54 	bl	8000b90 <SystemInit>
 80010e8:	480c      	ldr	r0, [pc, #48]	@ (800111c <LoopFillZerobss+0x12>)
 80010ea:	490d      	ldr	r1, [pc, #52]	@ (8001120 <LoopFillZerobss+0x16>)
 80010ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001124 <LoopFillZerobss+0x1a>)
 80010ee:	2300      	movs	r3, #0
 80010f0:	e002      	b.n	80010f8 <LoopCopyDataInit>

080010f2 <CopyDataInit>:
 80010f2:	58d4      	ldr	r4, [r2, r3]
 80010f4:	50c4      	str	r4, [r0, r3]
 80010f6:	3304      	adds	r3, #4

080010f8 <LoopCopyDataInit>:
 80010f8:	18c4      	adds	r4, r0, r3
 80010fa:	428c      	cmp	r4, r1
 80010fc:	d3f9      	bcc.n	80010f2 <CopyDataInit>
 80010fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001128 <LoopFillZerobss+0x1e>)
 8001100:	4c0a      	ldr	r4, [pc, #40]	@ (800112c <LoopFillZerobss+0x22>)
 8001102:	2300      	movs	r3, #0
 8001104:	e001      	b.n	800110a <LoopFillZerobss>

08001106 <FillZerobss>:
 8001106:	6013      	str	r3, [r2, #0]
 8001108:	3204      	adds	r2, #4

0800110a <LoopFillZerobss>:
 800110a:	42a2      	cmp	r2, r4
 800110c:	d3fb      	bcc.n	8001106 <FillZerobss>
 800110e:	f00a f8cd 	bl	800b2ac <__libc_init_array>
 8001112:	f7ff fbbd 	bl	8000890 <main>
 8001116:	4770      	bx	lr
 8001118:	20020000 	.word	0x20020000
 800111c:	20000000 	.word	0x20000000
 8001120:	20000338 	.word	0x20000338
 8001124:	0800bc68 	.word	0x0800bc68
 8001128:	20000338 	.word	0x20000338
 800112c:	20002504 	.word	0x20002504

08001130 <ADC_IRQHandler>:
 8001130:	e7fe      	b.n	8001130 <ADC_IRQHandler>
	...

08001134 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001138:	4b0e      	ldr	r3, [pc, #56]	@ (8001174 <HAL_Init+0x40>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a0d      	ldr	r2, [pc, #52]	@ (8001174 <HAL_Init+0x40>)
 800113e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001142:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001144:	4b0b      	ldr	r3, [pc, #44]	@ (8001174 <HAL_Init+0x40>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a0a      	ldr	r2, [pc, #40]	@ (8001174 <HAL_Init+0x40>)
 800114a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800114e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001150:	4b08      	ldr	r3, [pc, #32]	@ (8001174 <HAL_Init+0x40>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a07      	ldr	r2, [pc, #28]	@ (8001174 <HAL_Init+0x40>)
 8001156:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800115a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800115c:	2003      	movs	r0, #3
 800115e:	f000 fca7 	bl	8001ab0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001162:	200f      	movs	r0, #15
 8001164:	f000 f808 	bl	8001178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001168:	f7ff fc34 	bl	80009d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40023c00 	.word	0x40023c00

08001178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001180:	4b12      	ldr	r3, [pc, #72]	@ (80011cc <HAL_InitTick+0x54>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	4b12      	ldr	r3, [pc, #72]	@ (80011d0 <HAL_InitTick+0x58>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	4619      	mov	r1, r3
 800118a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800118e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001192:	fbb2 f3f3 	udiv	r3, r2, r3
 8001196:	4618      	mov	r0, r3
 8001198:	f000 fccd 	bl	8001b36 <HAL_SYSTICK_Config>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e00e      	b.n	80011c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2b0f      	cmp	r3, #15
 80011aa:	d80a      	bhi.n	80011c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011ac:	2200      	movs	r2, #0
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	f04f 30ff 	mov.w	r0, #4294967295
 80011b4:	f000 fc87 	bl	8001ac6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011b8:	4a06      	ldr	r2, [pc, #24]	@ (80011d4 <HAL_InitTick+0x5c>)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011be:	2300      	movs	r3, #0
 80011c0:	e000      	b.n	80011c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000040 	.word	0x20000040
 80011d0:	20000048 	.word	0x20000048
 80011d4:	20000044 	.word	0x20000044

080011d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011dc:	4b06      	ldr	r3, [pc, #24]	@ (80011f8 <HAL_IncTick+0x20>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	461a      	mov	r2, r3
 80011e2:	4b06      	ldr	r3, [pc, #24]	@ (80011fc <HAL_IncTick+0x24>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4413      	add	r3, r2
 80011e8:	4a04      	ldr	r2, [pc, #16]	@ (80011fc <HAL_IncTick+0x24>)
 80011ea:	6013      	str	r3, [r2, #0]
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	20000048 	.word	0x20000048
 80011fc:	20000a54 	.word	0x20000a54

08001200 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  return uwTick;
 8001204:	4b03      	ldr	r3, [pc, #12]	@ (8001214 <HAL_GetTick+0x14>)
 8001206:	681b      	ldr	r3, [r3, #0]
}
 8001208:	4618      	mov	r0, r3
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	20000a54 	.word	0x20000a54

08001218 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001220:	f7ff ffee 	bl	8001200 <HAL_GetTick>
 8001224:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001230:	d005      	beq.n	800123e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001232:	4b0a      	ldr	r3, [pc, #40]	@ (800125c <HAL_Delay+0x44>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	461a      	mov	r2, r3
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	4413      	add	r3, r2
 800123c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800123e:	bf00      	nop
 8001240:	f7ff ffde 	bl	8001200 <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	68fa      	ldr	r2, [r7, #12]
 800124c:	429a      	cmp	r2, r3
 800124e:	d8f7      	bhi.n	8001240 <HAL_Delay+0x28>
  {
  }
}
 8001250:	bf00      	nop
 8001252:	bf00      	nop
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20000048 	.word	0x20000048

08001260 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d101      	bne.n	8001272 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e0ed      	b.n	800144e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001278:	b2db      	uxtb	r3, r3
 800127a:	2b00      	cmp	r3, #0
 800127c:	d102      	bne.n	8001284 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f7ff f9a4 	bl	80005cc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f042 0201 	orr.w	r2, r2, #1
 8001292:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001294:	f7ff ffb4 	bl	8001200 <HAL_GetTick>
 8001298:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800129a:	e012      	b.n	80012c2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800129c:	f7ff ffb0 	bl	8001200 <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	2b0a      	cmp	r3, #10
 80012a8:	d90b      	bls.n	80012c2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ae:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2205      	movs	r2, #5
 80012ba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e0c5      	b.n	800144e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f003 0301 	and.w	r3, r3, #1
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d0e5      	beq.n	800129c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f022 0202 	bic.w	r2, r2, #2
 80012de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012e0:	f7ff ff8e 	bl	8001200 <HAL_GetTick>
 80012e4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80012e6:	e012      	b.n	800130e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012e8:	f7ff ff8a 	bl	8001200 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b0a      	cmp	r3, #10
 80012f4:	d90b      	bls.n	800130e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012fa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2205      	movs	r2, #5
 8001306:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e09f      	b.n	800144e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f003 0302 	and.w	r3, r3, #2
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1e5      	bne.n	80012e8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	7e1b      	ldrb	r3, [r3, #24]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d108      	bne.n	8001336 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	e007      	b.n	8001346 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001344:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	7e5b      	ldrb	r3, [r3, #25]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d108      	bne.n	8001360 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	e007      	b.n	8001370 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800136e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	7e9b      	ldrb	r3, [r3, #26]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d108      	bne.n	800138a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f042 0220 	orr.w	r2, r2, #32
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	e007      	b.n	800139a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f022 0220 	bic.w	r2, r2, #32
 8001398:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	7edb      	ldrb	r3, [r3, #27]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d108      	bne.n	80013b4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f022 0210 	bic.w	r2, r2, #16
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	e007      	b.n	80013c4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f042 0210 	orr.w	r2, r2, #16
 80013c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	7f1b      	ldrb	r3, [r3, #28]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d108      	bne.n	80013de <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f042 0208 	orr.w	r2, r2, #8
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	e007      	b.n	80013ee <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f022 0208 	bic.w	r2, r2, #8
 80013ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	7f5b      	ldrb	r3, [r3, #29]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d108      	bne.n	8001408 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f042 0204 	orr.w	r2, r2, #4
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	e007      	b.n	8001418 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f022 0204 	bic.w	r2, r2, #4
 8001416:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689a      	ldr	r2, [r3, #8]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	431a      	orrs	r2, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	691b      	ldr	r3, [r3, #16]
 8001426:	431a      	orrs	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	695b      	ldr	r3, [r3, #20]
 800142c:	ea42 0103 	orr.w	r1, r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	1e5a      	subs	r2, r3, #1
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	430a      	orrs	r2, r1
 800143c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2201      	movs	r2, #1
 8001448:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b08a      	sub	sp, #40	@ 0x28
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800145e:	2300      	movs	r3, #0
 8001460:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	695b      	ldr	r3, [r3, #20]
 8001468:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	691b      	ldr	r3, [r3, #16]
 8001488:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001492:	6a3b      	ldr	r3, [r7, #32]
 8001494:	f003 0301 	and.w	r3, r3, #1
 8001498:	2b00      	cmp	r3, #0
 800149a:	d07c      	beq.n	8001596 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d023      	beq.n	80014ee <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2201      	movs	r2, #1
 80014ac:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	f003 0302 	and.w	r3, r3, #2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d003      	beq.n	80014c0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f000 f983 	bl	80017c4 <HAL_CAN_TxMailbox0CompleteCallback>
 80014be:	e016      	b.n	80014ee <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	f003 0304 	and.w	r3, r3, #4
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d004      	beq.n	80014d4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80014ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014cc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80014d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80014d2:	e00c      	b.n	80014ee <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	f003 0308 	and.w	r3, r3, #8
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d004      	beq.n	80014e8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80014de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80014e6:	e002      	b.n	80014ee <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f000 f989 	bl	8001800 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d024      	beq.n	8001542 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001500:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001508:	2b00      	cmp	r3, #0
 800150a:	d003      	beq.n	8001514 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f000 f963 	bl	80017d8 <HAL_CAN_TxMailbox1CompleteCallback>
 8001512:	e016      	b.n	8001542 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800151a:	2b00      	cmp	r3, #0
 800151c:	d004      	beq.n	8001528 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800151e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001520:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001524:	627b      	str	r3, [r7, #36]	@ 0x24
 8001526:	e00c      	b.n	8001542 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800152e:	2b00      	cmp	r3, #0
 8001530:	d004      	beq.n	800153c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001534:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001538:	627b      	str	r3, [r7, #36]	@ 0x24
 800153a:	e002      	b.n	8001542 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f000 f969 	bl	8001814 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d024      	beq.n	8001596 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001554:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d003      	beq.n	8001568 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f000 f943 	bl	80017ec <HAL_CAN_TxMailbox2CompleteCallback>
 8001566:	e016      	b.n	8001596 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d004      	beq.n	800157c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001574:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001578:	627b      	str	r3, [r7, #36]	@ 0x24
 800157a:	e00c      	b.n	8001596 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d004      	beq.n	8001590 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001588:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800158c:	627b      	str	r3, [r7, #36]	@ 0x24
 800158e:	e002      	b.n	8001596 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f000 f949 	bl	8001828 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001596:	6a3b      	ldr	r3, [r7, #32]
 8001598:	f003 0308 	and.w	r3, r3, #8
 800159c:	2b00      	cmp	r3, #0
 800159e:	d00c      	beq.n	80015ba <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	f003 0310 	and.w	r3, r3, #16
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d007      	beq.n	80015ba <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80015aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015b0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2210      	movs	r2, #16
 80015b8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80015ba:	6a3b      	ldr	r3, [r7, #32]
 80015bc:	f003 0304 	and.w	r3, r3, #4
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d00b      	beq.n	80015dc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	f003 0308 	and.w	r3, r3, #8
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d006      	beq.n	80015dc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2208      	movs	r2, #8
 80015d4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f000 f93a 	bl	8001850 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80015dc:	6a3b      	ldr	r3, [r7, #32]
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d009      	beq.n	80015fa <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	f003 0303 	and.w	r3, r3, #3
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d002      	beq.n	80015fa <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f000 f921 	bl	800183c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80015fa:	6a3b      	ldr	r3, [r7, #32]
 80015fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001600:	2b00      	cmp	r3, #0
 8001602:	d00c      	beq.n	800161e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	f003 0310 	and.w	r3, r3, #16
 800160a:	2b00      	cmp	r3, #0
 800160c:	d007      	beq.n	800161e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800160e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001610:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001614:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2210      	movs	r2, #16
 800161c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800161e:	6a3b      	ldr	r3, [r7, #32]
 8001620:	f003 0320 	and.w	r3, r3, #32
 8001624:	2b00      	cmp	r3, #0
 8001626:	d00b      	beq.n	8001640 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	f003 0308 	and.w	r3, r3, #8
 800162e:	2b00      	cmp	r3, #0
 8001630:	d006      	beq.n	8001640 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2208      	movs	r2, #8
 8001638:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f000 f91c 	bl	8001878 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001640:	6a3b      	ldr	r3, [r7, #32]
 8001642:	f003 0310 	and.w	r3, r3, #16
 8001646:	2b00      	cmp	r3, #0
 8001648:	d009      	beq.n	800165e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	691b      	ldr	r3, [r3, #16]
 8001650:	f003 0303 	and.w	r3, r3, #3
 8001654:	2b00      	cmp	r3, #0
 8001656:	d002      	beq.n	800165e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f000 f903 	bl	8001864 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800165e:	6a3b      	ldr	r3, [r7, #32]
 8001660:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d00b      	beq.n	8001680 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	f003 0310 	and.w	r3, r3, #16
 800166e:	2b00      	cmp	r3, #0
 8001670:	d006      	beq.n	8001680 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2210      	movs	r2, #16
 8001678:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f000 f906 	bl	800188c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001680:	6a3b      	ldr	r3, [r7, #32]
 8001682:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d00b      	beq.n	80016a2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	f003 0308 	and.w	r3, r3, #8
 8001690:	2b00      	cmp	r3, #0
 8001692:	d006      	beq.n	80016a2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2208      	movs	r2, #8
 800169a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f000 f8ff 	bl	80018a0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80016a2:	6a3b      	ldr	r3, [r7, #32]
 80016a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d07b      	beq.n	80017a4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	f003 0304 	and.w	r3, r3, #4
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d072      	beq.n	800179c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80016b6:	6a3b      	ldr	r3, [r7, #32]
 80016b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d008      	beq.n	80016d2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80016ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80016d2:	6a3b      	ldr	r3, [r7, #32]
 80016d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d008      	beq.n	80016ee <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80016e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e8:	f043 0302 	orr.w	r3, r3, #2
 80016ec:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80016ee:	6a3b      	ldr	r3, [r7, #32]
 80016f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d008      	beq.n	800170a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d003      	beq.n	800170a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001704:	f043 0304 	orr.w	r3, r3, #4
 8001708:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800170a:	6a3b      	ldr	r3, [r7, #32]
 800170c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001710:	2b00      	cmp	r3, #0
 8001712:	d043      	beq.n	800179c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800171a:	2b00      	cmp	r3, #0
 800171c:	d03e      	beq.n	800179c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001724:	2b60      	cmp	r3, #96	@ 0x60
 8001726:	d02b      	beq.n	8001780 <HAL_CAN_IRQHandler+0x32a>
 8001728:	2b60      	cmp	r3, #96	@ 0x60
 800172a:	d82e      	bhi.n	800178a <HAL_CAN_IRQHandler+0x334>
 800172c:	2b50      	cmp	r3, #80	@ 0x50
 800172e:	d022      	beq.n	8001776 <HAL_CAN_IRQHandler+0x320>
 8001730:	2b50      	cmp	r3, #80	@ 0x50
 8001732:	d82a      	bhi.n	800178a <HAL_CAN_IRQHandler+0x334>
 8001734:	2b40      	cmp	r3, #64	@ 0x40
 8001736:	d019      	beq.n	800176c <HAL_CAN_IRQHandler+0x316>
 8001738:	2b40      	cmp	r3, #64	@ 0x40
 800173a:	d826      	bhi.n	800178a <HAL_CAN_IRQHandler+0x334>
 800173c:	2b30      	cmp	r3, #48	@ 0x30
 800173e:	d010      	beq.n	8001762 <HAL_CAN_IRQHandler+0x30c>
 8001740:	2b30      	cmp	r3, #48	@ 0x30
 8001742:	d822      	bhi.n	800178a <HAL_CAN_IRQHandler+0x334>
 8001744:	2b10      	cmp	r3, #16
 8001746:	d002      	beq.n	800174e <HAL_CAN_IRQHandler+0x2f8>
 8001748:	2b20      	cmp	r3, #32
 800174a:	d005      	beq.n	8001758 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800174c:	e01d      	b.n	800178a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800174e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001750:	f043 0308 	orr.w	r3, r3, #8
 8001754:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001756:	e019      	b.n	800178c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800175a:	f043 0310 	orr.w	r3, r3, #16
 800175e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001760:	e014      	b.n	800178c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001764:	f043 0320 	orr.w	r3, r3, #32
 8001768:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800176a:	e00f      	b.n	800178c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800176c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800176e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001772:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001774:	e00a      	b.n	800178c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001778:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800177c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800177e:	e005      	b.n	800178c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001782:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001786:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001788:	e000      	b.n	800178c <HAL_CAN_IRQHandler+0x336>
            break;
 800178a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	699a      	ldr	r2, [r3, #24]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800179a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2204      	movs	r2, #4
 80017a2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80017a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d008      	beq.n	80017bc <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b0:	431a      	orrs	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f000 f87c 	bl	80018b4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80017bc:	bf00      	nop
 80017be:	3728      	adds	r7, #40	@ 0x28
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018d8:	4b0c      	ldr	r3, [pc, #48]	@ (800190c <__NVIC_SetPriorityGrouping+0x44>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018de:	68ba      	ldr	r2, [r7, #8]
 80018e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018e4:	4013      	ands	r3, r2
 80018e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018fa:	4a04      	ldr	r2, [pc, #16]	@ (800190c <__NVIC_SetPriorityGrouping+0x44>)
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	60d3      	str	r3, [r2, #12]
}
 8001900:	bf00      	nop
 8001902:	3714      	adds	r7, #20
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001914:	4b04      	ldr	r3, [pc, #16]	@ (8001928 <__NVIC_GetPriorityGrouping+0x18>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	0a1b      	lsrs	r3, r3, #8
 800191a:	f003 0307 	and.w	r3, r3, #7
}
 800191e:	4618      	mov	r0, r3
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193a:	2b00      	cmp	r3, #0
 800193c:	db0b      	blt.n	8001956 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800193e:	79fb      	ldrb	r3, [r7, #7]
 8001940:	f003 021f 	and.w	r2, r3, #31
 8001944:	4907      	ldr	r1, [pc, #28]	@ (8001964 <__NVIC_EnableIRQ+0x38>)
 8001946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194a:	095b      	lsrs	r3, r3, #5
 800194c:	2001      	movs	r0, #1
 800194e:	fa00 f202 	lsl.w	r2, r0, r2
 8001952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	e000e100 	.word	0xe000e100

08001968 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001976:	2b00      	cmp	r3, #0
 8001978:	db12      	blt.n	80019a0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800197a:	79fb      	ldrb	r3, [r7, #7]
 800197c:	f003 021f 	and.w	r2, r3, #31
 8001980:	490a      	ldr	r1, [pc, #40]	@ (80019ac <__NVIC_DisableIRQ+0x44>)
 8001982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001986:	095b      	lsrs	r3, r3, #5
 8001988:	2001      	movs	r0, #1
 800198a:	fa00 f202 	lsl.w	r2, r0, r2
 800198e:	3320      	adds	r3, #32
 8001990:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001994:	f3bf 8f4f 	dsb	sy
}
 8001998:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800199a:	f3bf 8f6f 	isb	sy
}
 800199e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	e000e100 	.word	0xe000e100

080019b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	6039      	str	r1, [r7, #0]
 80019ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	db0a      	blt.n	80019da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	b2da      	uxtb	r2, r3
 80019c8:	490c      	ldr	r1, [pc, #48]	@ (80019fc <__NVIC_SetPriority+0x4c>)
 80019ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ce:	0112      	lsls	r2, r2, #4
 80019d0:	b2d2      	uxtb	r2, r2
 80019d2:	440b      	add	r3, r1
 80019d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019d8:	e00a      	b.n	80019f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	b2da      	uxtb	r2, r3
 80019de:	4908      	ldr	r1, [pc, #32]	@ (8001a00 <__NVIC_SetPriority+0x50>)
 80019e0:	79fb      	ldrb	r3, [r7, #7]
 80019e2:	f003 030f 	and.w	r3, r3, #15
 80019e6:	3b04      	subs	r3, #4
 80019e8:	0112      	lsls	r2, r2, #4
 80019ea:	b2d2      	uxtb	r2, r2
 80019ec:	440b      	add	r3, r1
 80019ee:	761a      	strb	r2, [r3, #24]
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	e000e100 	.word	0xe000e100
 8001a00:	e000ed00 	.word	0xe000ed00

08001a04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b089      	sub	sp, #36	@ 0x24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f003 0307 	and.w	r3, r3, #7
 8001a16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	f1c3 0307 	rsb	r3, r3, #7
 8001a1e:	2b04      	cmp	r3, #4
 8001a20:	bf28      	it	cs
 8001a22:	2304      	movcs	r3, #4
 8001a24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	3304      	adds	r3, #4
 8001a2a:	2b06      	cmp	r3, #6
 8001a2c:	d902      	bls.n	8001a34 <NVIC_EncodePriority+0x30>
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	3b03      	subs	r3, #3
 8001a32:	e000      	b.n	8001a36 <NVIC_EncodePriority+0x32>
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a38:	f04f 32ff 	mov.w	r2, #4294967295
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	43da      	mvns	r2, r3
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	401a      	ands	r2, r3
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	fa01 f303 	lsl.w	r3, r1, r3
 8001a56:	43d9      	mvns	r1, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a5c:	4313      	orrs	r3, r2
         );
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3724      	adds	r7, #36	@ 0x24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
	...

08001a6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3b01      	subs	r3, #1
 8001a78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a7c:	d301      	bcc.n	8001a82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e00f      	b.n	8001aa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a82:	4a0a      	ldr	r2, [pc, #40]	@ (8001aac <SysTick_Config+0x40>)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3b01      	subs	r3, #1
 8001a88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a8a:	210f      	movs	r1, #15
 8001a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a90:	f7ff ff8e 	bl	80019b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a94:	4b05      	ldr	r3, [pc, #20]	@ (8001aac <SysTick_Config+0x40>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a9a:	4b04      	ldr	r3, [pc, #16]	@ (8001aac <SysTick_Config+0x40>)
 8001a9c:	2207      	movs	r2, #7
 8001a9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	e000e010 	.word	0xe000e010

08001ab0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f7ff ff05 	bl	80018c8 <__NVIC_SetPriorityGrouping>
}
 8001abe:	bf00      	nop
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b086      	sub	sp, #24
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	4603      	mov	r3, r0
 8001ace:	60b9      	str	r1, [r7, #8]
 8001ad0:	607a      	str	r2, [r7, #4]
 8001ad2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ad8:	f7ff ff1a 	bl	8001910 <__NVIC_GetPriorityGrouping>
 8001adc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	68b9      	ldr	r1, [r7, #8]
 8001ae2:	6978      	ldr	r0, [r7, #20]
 8001ae4:	f7ff ff8e 	bl	8001a04 <NVIC_EncodePriority>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aee:	4611      	mov	r1, r2
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff ff5d 	bl	80019b0 <__NVIC_SetPriority>
}
 8001af6:	bf00      	nop
 8001af8:	3718      	adds	r7, #24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b082      	sub	sp, #8
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	4603      	mov	r3, r0
 8001b06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff ff0d 	bl	800192c <__NVIC_EnableIRQ>
}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b082      	sub	sp, #8
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	4603      	mov	r3, r0
 8001b22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff ff1d 	bl	8001968 <__NVIC_DisableIRQ>
}
 8001b2e:	bf00      	nop
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b082      	sub	sp, #8
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f7ff ff94 	bl	8001a6c <SysTick_Config>
 8001b44:	4603      	mov	r3, r0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
	...

08001b50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b5c:	f7ff fb50 	bl	8001200 <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d101      	bne.n	8001b6c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e099      	b.n	8001ca0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2202      	movs	r2, #2
 8001b70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f022 0201 	bic.w	r2, r2, #1
 8001b8a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b8c:	e00f      	b.n	8001bae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b8e:	f7ff fb37 	bl	8001200 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b05      	cmp	r3, #5
 8001b9a:	d908      	bls.n	8001bae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2220      	movs	r2, #32
 8001ba0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2203      	movs	r2, #3
 8001ba6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e078      	b.n	8001ca0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1e8      	bne.n	8001b8e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	4b38      	ldr	r3, [pc, #224]	@ (8001ca8 <HAL_DMA_Init+0x158>)
 8001bc8:	4013      	ands	r3, r2
 8001bca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bda:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	691b      	ldr	r3, [r3, #16]
 8001be0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001be6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bf2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a1b      	ldr	r3, [r3, #32]
 8001bf8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bfa:	697a      	ldr	r2, [r7, #20]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c04:	2b04      	cmp	r3, #4
 8001c06:	d107      	bne.n	8001c18 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c10:	4313      	orrs	r3, r2
 8001c12:	697a      	ldr	r2, [r7, #20]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	697a      	ldr	r2, [r7, #20]
 8001c1e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	f023 0307 	bic.w	r3, r3, #7
 8001c2e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c34:	697a      	ldr	r2, [r7, #20]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	d117      	bne.n	8001c72 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d00e      	beq.n	8001c72 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f000 fad9 	bl	800220c <DMA_CheckFifoParam>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d008      	beq.n	8001c72 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2240      	movs	r2, #64	@ 0x40
 8001c64:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e016      	b.n	8001ca0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	697a      	ldr	r2, [r7, #20]
 8001c78:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 fa90 	bl	80021a0 <DMA_CalcBaseAndBitshift>
 8001c80:	4603      	mov	r3, r0
 8001c82:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c88:	223f      	movs	r2, #63	@ 0x3f
 8001c8a:	409a      	lsls	r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3718      	adds	r7, #24
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	f010803f 	.word	0xf010803f

08001cac <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d101      	bne.n	8001cbe <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e050      	b.n	8001d60 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d101      	bne.n	8001cce <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	e048      	b.n	8001d60 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f022 0201 	bic.w	r2, r2, #1
 8001cdc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2200      	movs	r2, #0
 8001cec:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2200      	movs	r2, #0
 8001d04:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2221      	movs	r2, #33	@ 0x21
 8001d0c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 fa46 	bl	80021a0 <DMA_CalcBaseAndBitshift>
 8001d14:	4603      	mov	r3, r0
 8001d16:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d40:	223f      	movs	r2, #63	@ 0x3f
 8001d42:	409a      	lsls	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d74:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d76:	f7ff fa43 	bl	8001200 <HAL_GetTick>
 8001d7a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d008      	beq.n	8001d9a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2280      	movs	r2, #128	@ 0x80
 8001d8c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e052      	b.n	8001e40 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f022 0216 	bic.w	r2, r2, #22
 8001da8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	695a      	ldr	r2, [r3, #20]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001db8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d103      	bne.n	8001dca <HAL_DMA_Abort+0x62>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d007      	beq.n	8001dda <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f022 0208 	bic.w	r2, r2, #8
 8001dd8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f022 0201 	bic.w	r2, r2, #1
 8001de8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dea:	e013      	b.n	8001e14 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dec:	f7ff fa08 	bl	8001200 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b05      	cmp	r3, #5
 8001df8:	d90c      	bls.n	8001e14 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2220      	movs	r2, #32
 8001dfe:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2203      	movs	r2, #3
 8001e04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e015      	b.n	8001e40 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1e4      	bne.n	8001dec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e26:	223f      	movs	r2, #63	@ 0x3f
 8001e28:	409a      	lsls	r2, r3
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2201      	movs	r2, #1
 8001e32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3710      	adds	r7, #16
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d004      	beq.n	8001e66 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2280      	movs	r2, #128	@ 0x80
 8001e60:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e00c      	b.n	8001e80 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2205      	movs	r2, #5
 8001e6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 0201 	bic.w	r2, r2, #1
 8001e7c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001e94:	2300      	movs	r3, #0
 8001e96:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e98:	4b8e      	ldr	r3, [pc, #568]	@ (80020d4 <HAL_DMA_IRQHandler+0x248>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a8e      	ldr	r2, [pc, #568]	@ (80020d8 <HAL_DMA_IRQHandler+0x24c>)
 8001e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea2:	0a9b      	lsrs	r3, r3, #10
 8001ea4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eaa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eb6:	2208      	movs	r2, #8
 8001eb8:	409a      	lsls	r2, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d01a      	beq.n	8001ef8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0304 	and.w	r3, r3, #4
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d013      	beq.n	8001ef8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f022 0204 	bic.w	r2, r2, #4
 8001ede:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ee4:	2208      	movs	r2, #8
 8001ee6:	409a      	lsls	r2, r3
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ef0:	f043 0201 	orr.w	r2, r3, #1
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001efc:	2201      	movs	r2, #1
 8001efe:	409a      	lsls	r2, r3
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	4013      	ands	r3, r2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d012      	beq.n	8001f2e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d00b      	beq.n	8001f2e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	409a      	lsls	r2, r3
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f26:	f043 0202 	orr.w	r2, r3, #2
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f32:	2204      	movs	r2, #4
 8001f34:	409a      	lsls	r2, r3
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d012      	beq.n	8001f64 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d00b      	beq.n	8001f64 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f50:	2204      	movs	r2, #4
 8001f52:	409a      	lsls	r2, r3
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f5c:	f043 0204 	orr.w	r2, r3, #4
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f68:	2210      	movs	r2, #16
 8001f6a:	409a      	lsls	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d043      	beq.n	8001ffc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0308 	and.w	r3, r3, #8
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d03c      	beq.n	8001ffc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f86:	2210      	movs	r2, #16
 8001f88:	409a      	lsls	r2, r3
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d018      	beq.n	8001fce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d108      	bne.n	8001fbc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d024      	beq.n	8001ffc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	4798      	blx	r3
 8001fba:	e01f      	b.n	8001ffc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d01b      	beq.n	8001ffc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	4798      	blx	r3
 8001fcc:	e016      	b.n	8001ffc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d107      	bne.n	8001fec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f022 0208 	bic.w	r2, r2, #8
 8001fea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d003      	beq.n	8001ffc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002000:	2220      	movs	r2, #32
 8002002:	409a      	lsls	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	4013      	ands	r3, r2
 8002008:	2b00      	cmp	r3, #0
 800200a:	f000 808f 	beq.w	800212c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0310 	and.w	r3, r3, #16
 8002018:	2b00      	cmp	r3, #0
 800201a:	f000 8087 	beq.w	800212c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002022:	2220      	movs	r2, #32
 8002024:	409a      	lsls	r2, r3
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b05      	cmp	r3, #5
 8002034:	d136      	bne.n	80020a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f022 0216 	bic.w	r2, r2, #22
 8002044:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	695a      	ldr	r2, [r3, #20]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002054:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205a:	2b00      	cmp	r3, #0
 800205c:	d103      	bne.n	8002066 <HAL_DMA_IRQHandler+0x1da>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002062:	2b00      	cmp	r3, #0
 8002064:	d007      	beq.n	8002076 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f022 0208 	bic.w	r2, r2, #8
 8002074:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800207a:	223f      	movs	r2, #63	@ 0x3f
 800207c:	409a      	lsls	r2, r3
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2201      	movs	r2, #1
 8002086:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002096:	2b00      	cmp	r3, #0
 8002098:	d07e      	beq.n	8002198 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	4798      	blx	r3
        }
        return;
 80020a2:	e079      	b.n	8002198 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d01d      	beq.n	80020ee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d10d      	bne.n	80020dc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d031      	beq.n	800212c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	4798      	blx	r3
 80020d0:	e02c      	b.n	800212c <HAL_DMA_IRQHandler+0x2a0>
 80020d2:	bf00      	nop
 80020d4:	20000040 	.word	0x20000040
 80020d8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d023      	beq.n	800212c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	4798      	blx	r3
 80020ec:	e01e      	b.n	800212c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d10f      	bne.n	800211c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f022 0210 	bic.w	r2, r2, #16
 800210a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002120:	2b00      	cmp	r3, #0
 8002122:	d003      	beq.n	800212c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002130:	2b00      	cmp	r3, #0
 8002132:	d032      	beq.n	800219a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002138:	f003 0301 	and.w	r3, r3, #1
 800213c:	2b00      	cmp	r3, #0
 800213e:	d022      	beq.n	8002186 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2205      	movs	r2, #5
 8002144:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f022 0201 	bic.w	r2, r2, #1
 8002156:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	3301      	adds	r3, #1
 800215c:	60bb      	str	r3, [r7, #8]
 800215e:	697a      	ldr	r2, [r7, #20]
 8002160:	429a      	cmp	r2, r3
 8002162:	d307      	bcc.n	8002174 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1f2      	bne.n	8002158 <HAL_DMA_IRQHandler+0x2cc>
 8002172:	e000      	b.n	8002176 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002174:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800218a:	2b00      	cmp	r3, #0
 800218c:	d005      	beq.n	800219a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	4798      	blx	r3
 8002196:	e000      	b.n	800219a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002198:	bf00      	nop
    }
  }
}
 800219a:	3718      	adds	r7, #24
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	3b10      	subs	r3, #16
 80021b0:	4a14      	ldr	r2, [pc, #80]	@ (8002204 <DMA_CalcBaseAndBitshift+0x64>)
 80021b2:	fba2 2303 	umull	r2, r3, r2, r3
 80021b6:	091b      	lsrs	r3, r3, #4
 80021b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80021ba:	4a13      	ldr	r2, [pc, #76]	@ (8002208 <DMA_CalcBaseAndBitshift+0x68>)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	4413      	add	r3, r2
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	461a      	mov	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2b03      	cmp	r3, #3
 80021cc:	d909      	bls.n	80021e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80021d6:	f023 0303 	bic.w	r3, r3, #3
 80021da:	1d1a      	adds	r2, r3, #4
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	659a      	str	r2, [r3, #88]	@ 0x58
 80021e0:	e007      	b.n	80021f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80021ea:	f023 0303 	bic.w	r3, r3, #3
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3714      	adds	r7, #20
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	aaaaaaab 	.word	0xaaaaaaab
 8002208:	0800bc1c 	.word	0x0800bc1c

0800220c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002214:	2300      	movs	r3, #0
 8002216:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800221c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d11f      	bne.n	8002266 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	2b03      	cmp	r3, #3
 800222a:	d856      	bhi.n	80022da <DMA_CheckFifoParam+0xce>
 800222c:	a201      	add	r2, pc, #4	@ (adr r2, 8002234 <DMA_CheckFifoParam+0x28>)
 800222e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002232:	bf00      	nop
 8002234:	08002245 	.word	0x08002245
 8002238:	08002257 	.word	0x08002257
 800223c:	08002245 	.word	0x08002245
 8002240:	080022db 	.word	0x080022db
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002248:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d046      	beq.n	80022de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002254:	e043      	b.n	80022de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800225a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800225e:	d140      	bne.n	80022e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002264:	e03d      	b.n	80022e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800226e:	d121      	bne.n	80022b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	2b03      	cmp	r3, #3
 8002274:	d837      	bhi.n	80022e6 <DMA_CheckFifoParam+0xda>
 8002276:	a201      	add	r2, pc, #4	@ (adr r2, 800227c <DMA_CheckFifoParam+0x70>)
 8002278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800227c:	0800228d 	.word	0x0800228d
 8002280:	08002293 	.word	0x08002293
 8002284:	0800228d 	.word	0x0800228d
 8002288:	080022a5 	.word	0x080022a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	73fb      	strb	r3, [r7, #15]
      break;
 8002290:	e030      	b.n	80022f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002296:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d025      	beq.n	80022ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022a2:	e022      	b.n	80022ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80022ac:	d11f      	bne.n	80022ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80022b2:	e01c      	b.n	80022ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d903      	bls.n	80022c2 <DMA_CheckFifoParam+0xb6>
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	2b03      	cmp	r3, #3
 80022be:	d003      	beq.n	80022c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80022c0:	e018      	b.n	80022f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	73fb      	strb	r3, [r7, #15]
      break;
 80022c6:	e015      	b.n	80022f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00e      	beq.n	80022f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	73fb      	strb	r3, [r7, #15]
      break;
 80022d8:	e00b      	b.n	80022f2 <DMA_CheckFifoParam+0xe6>
      break;
 80022da:	bf00      	nop
 80022dc:	e00a      	b.n	80022f4 <DMA_CheckFifoParam+0xe8>
      break;
 80022de:	bf00      	nop
 80022e0:	e008      	b.n	80022f4 <DMA_CheckFifoParam+0xe8>
      break;
 80022e2:	bf00      	nop
 80022e4:	e006      	b.n	80022f4 <DMA_CheckFifoParam+0xe8>
      break;
 80022e6:	bf00      	nop
 80022e8:	e004      	b.n	80022f4 <DMA_CheckFifoParam+0xe8>
      break;
 80022ea:	bf00      	nop
 80022ec:	e002      	b.n	80022f4 <DMA_CheckFifoParam+0xe8>
      break;   
 80022ee:	bf00      	nop
 80022f0:	e000      	b.n	80022f4 <DMA_CheckFifoParam+0xe8>
      break;
 80022f2:	bf00      	nop
    }
  } 
  
  return status; 
 80022f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3714      	adds	r7, #20
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop

08002304 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002304:	b480      	push	{r7}
 8002306:	b089      	sub	sp, #36	@ 0x24
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800230e:	2300      	movs	r3, #0
 8002310:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002312:	2300      	movs	r3, #0
 8002314:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002316:	2300      	movs	r3, #0
 8002318:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800231a:	2300      	movs	r3, #0
 800231c:	61fb      	str	r3, [r7, #28]
 800231e:	e16b      	b.n	80025f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002320:	2201      	movs	r2, #1
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	697a      	ldr	r2, [r7, #20]
 8002330:	4013      	ands	r3, r2
 8002332:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002334:	693a      	ldr	r2, [r7, #16]
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	429a      	cmp	r2, r3
 800233a:	f040 815a 	bne.w	80025f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f003 0303 	and.w	r3, r3, #3
 8002346:	2b01      	cmp	r3, #1
 8002348:	d005      	beq.n	8002356 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002352:	2b02      	cmp	r3, #2
 8002354:	d130      	bne.n	80023b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	2203      	movs	r2, #3
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	43db      	mvns	r3, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4013      	ands	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	68da      	ldr	r2, [r3, #12]
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	4313      	orrs	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800238c:	2201      	movs	r2, #1
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	43db      	mvns	r3, r3
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4013      	ands	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	091b      	lsrs	r3, r3, #4
 80023a2:	f003 0201 	and.w	r2, r3, #1
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f003 0303 	and.w	r3, r3, #3
 80023c0:	2b03      	cmp	r3, #3
 80023c2:	d017      	beq.n	80023f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	2203      	movs	r2, #3
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	43db      	mvns	r3, r3
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	4013      	ands	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	689a      	ldr	r2, [r3, #8]
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f003 0303 	and.w	r3, r3, #3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d123      	bne.n	8002448 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	08da      	lsrs	r2, r3, #3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3208      	adds	r2, #8
 8002408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800240c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	f003 0307 	and.w	r3, r3, #7
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	220f      	movs	r2, #15
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	43db      	mvns	r3, r3
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	4013      	ands	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	691a      	ldr	r2, [r3, #16]
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	4313      	orrs	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	08da      	lsrs	r2, r3, #3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	3208      	adds	r2, #8
 8002442:	69b9      	ldr	r1, [r7, #24]
 8002444:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	2203      	movs	r2, #3
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	43db      	mvns	r3, r3
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	4013      	ands	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f003 0203 	and.w	r2, r3, #3
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	4313      	orrs	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002484:	2b00      	cmp	r3, #0
 8002486:	f000 80b4 	beq.w	80025f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800248a:	2300      	movs	r3, #0
 800248c:	60fb      	str	r3, [r7, #12]
 800248e:	4b60      	ldr	r3, [pc, #384]	@ (8002610 <HAL_GPIO_Init+0x30c>)
 8002490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002492:	4a5f      	ldr	r2, [pc, #380]	@ (8002610 <HAL_GPIO_Init+0x30c>)
 8002494:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002498:	6453      	str	r3, [r2, #68]	@ 0x44
 800249a:	4b5d      	ldr	r3, [pc, #372]	@ (8002610 <HAL_GPIO_Init+0x30c>)
 800249c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800249e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024a2:	60fb      	str	r3, [r7, #12]
 80024a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024a6:	4a5b      	ldr	r2, [pc, #364]	@ (8002614 <HAL_GPIO_Init+0x310>)
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	089b      	lsrs	r3, r3, #2
 80024ac:	3302      	adds	r3, #2
 80024ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	f003 0303 	and.w	r3, r3, #3
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	220f      	movs	r2, #15
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	43db      	mvns	r3, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4013      	ands	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a52      	ldr	r2, [pc, #328]	@ (8002618 <HAL_GPIO_Init+0x314>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d02b      	beq.n	800252a <HAL_GPIO_Init+0x226>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a51      	ldr	r2, [pc, #324]	@ (800261c <HAL_GPIO_Init+0x318>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d025      	beq.n	8002526 <HAL_GPIO_Init+0x222>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a50      	ldr	r2, [pc, #320]	@ (8002620 <HAL_GPIO_Init+0x31c>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d01f      	beq.n	8002522 <HAL_GPIO_Init+0x21e>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a4f      	ldr	r2, [pc, #316]	@ (8002624 <HAL_GPIO_Init+0x320>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d019      	beq.n	800251e <HAL_GPIO_Init+0x21a>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a4e      	ldr	r2, [pc, #312]	@ (8002628 <HAL_GPIO_Init+0x324>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d013      	beq.n	800251a <HAL_GPIO_Init+0x216>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a4d      	ldr	r2, [pc, #308]	@ (800262c <HAL_GPIO_Init+0x328>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d00d      	beq.n	8002516 <HAL_GPIO_Init+0x212>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a4c      	ldr	r2, [pc, #304]	@ (8002630 <HAL_GPIO_Init+0x32c>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d007      	beq.n	8002512 <HAL_GPIO_Init+0x20e>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a4b      	ldr	r2, [pc, #300]	@ (8002634 <HAL_GPIO_Init+0x330>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d101      	bne.n	800250e <HAL_GPIO_Init+0x20a>
 800250a:	2307      	movs	r3, #7
 800250c:	e00e      	b.n	800252c <HAL_GPIO_Init+0x228>
 800250e:	2308      	movs	r3, #8
 8002510:	e00c      	b.n	800252c <HAL_GPIO_Init+0x228>
 8002512:	2306      	movs	r3, #6
 8002514:	e00a      	b.n	800252c <HAL_GPIO_Init+0x228>
 8002516:	2305      	movs	r3, #5
 8002518:	e008      	b.n	800252c <HAL_GPIO_Init+0x228>
 800251a:	2304      	movs	r3, #4
 800251c:	e006      	b.n	800252c <HAL_GPIO_Init+0x228>
 800251e:	2303      	movs	r3, #3
 8002520:	e004      	b.n	800252c <HAL_GPIO_Init+0x228>
 8002522:	2302      	movs	r3, #2
 8002524:	e002      	b.n	800252c <HAL_GPIO_Init+0x228>
 8002526:	2301      	movs	r3, #1
 8002528:	e000      	b.n	800252c <HAL_GPIO_Init+0x228>
 800252a:	2300      	movs	r3, #0
 800252c:	69fa      	ldr	r2, [r7, #28]
 800252e:	f002 0203 	and.w	r2, r2, #3
 8002532:	0092      	lsls	r2, r2, #2
 8002534:	4093      	lsls	r3, r2
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4313      	orrs	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800253c:	4935      	ldr	r1, [pc, #212]	@ (8002614 <HAL_GPIO_Init+0x310>)
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	089b      	lsrs	r3, r3, #2
 8002542:	3302      	adds	r3, #2
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800254a:	4b3b      	ldr	r3, [pc, #236]	@ (8002638 <HAL_GPIO_Init+0x334>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	43db      	mvns	r3, r3
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	4013      	ands	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d003      	beq.n	800256e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	4313      	orrs	r3, r2
 800256c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800256e:	4a32      	ldr	r2, [pc, #200]	@ (8002638 <HAL_GPIO_Init+0x334>)
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002574:	4b30      	ldr	r3, [pc, #192]	@ (8002638 <HAL_GPIO_Init+0x334>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	43db      	mvns	r3, r3
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	4013      	ands	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d003      	beq.n	8002598 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	4313      	orrs	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002598:	4a27      	ldr	r2, [pc, #156]	@ (8002638 <HAL_GPIO_Init+0x334>)
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800259e:	4b26      	ldr	r3, [pc, #152]	@ (8002638 <HAL_GPIO_Init+0x334>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	43db      	mvns	r3, r3
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	4013      	ands	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	4313      	orrs	r3, r2
 80025c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025c2:	4a1d      	ldr	r2, [pc, #116]	@ (8002638 <HAL_GPIO_Init+0x334>)
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002638 <HAL_GPIO_Init+0x334>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	43db      	mvns	r3, r3
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	4013      	ands	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d003      	beq.n	80025ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025ec:	4a12      	ldr	r2, [pc, #72]	@ (8002638 <HAL_GPIO_Init+0x334>)
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	3301      	adds	r3, #1
 80025f6:	61fb      	str	r3, [r7, #28]
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	2b0f      	cmp	r3, #15
 80025fc:	f67f ae90 	bls.w	8002320 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002600:	bf00      	nop
 8002602:	bf00      	nop
 8002604:	3724      	adds	r7, #36	@ 0x24
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	40023800 	.word	0x40023800
 8002614:	40013800 	.word	0x40013800
 8002618:	40020000 	.word	0x40020000
 800261c:	40020400 	.word	0x40020400
 8002620:	40020800 	.word	0x40020800
 8002624:	40020c00 	.word	0x40020c00
 8002628:	40021000 	.word	0x40021000
 800262c:	40021400 	.word	0x40021400
 8002630:	40021800 	.word	0x40021800
 8002634:	40021c00 	.word	0x40021c00
 8002638:	40013c00 	.word	0x40013c00

0800263c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800263c:	b480      	push	{r7}
 800263e:	b087      	sub	sp, #28
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002646:	2300      	movs	r3, #0
 8002648:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800264a:	2300      	movs	r3, #0
 800264c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800264e:	2300      	movs	r3, #0
 8002650:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002652:	2300      	movs	r3, #0
 8002654:	617b      	str	r3, [r7, #20]
 8002656:	e0cd      	b.n	80027f4 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002658:	2201      	movs	r2, #1
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	4013      	ands	r3, r2
 8002668:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	429a      	cmp	r2, r3
 8002670:	f040 80bd 	bne.w	80027ee <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002674:	4a65      	ldr	r2, [pc, #404]	@ (800280c <HAL_GPIO_DeInit+0x1d0>)
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	089b      	lsrs	r3, r3, #2
 800267a:	3302      	adds	r3, #2
 800267c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002680:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	f003 0303 	and.w	r3, r3, #3
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	220f      	movs	r2, #15
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	68ba      	ldr	r2, [r7, #8]
 8002692:	4013      	ands	r3, r2
 8002694:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a5d      	ldr	r2, [pc, #372]	@ (8002810 <HAL_GPIO_DeInit+0x1d4>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d02b      	beq.n	80026f6 <HAL_GPIO_DeInit+0xba>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a5c      	ldr	r2, [pc, #368]	@ (8002814 <HAL_GPIO_DeInit+0x1d8>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d025      	beq.n	80026f2 <HAL_GPIO_DeInit+0xb6>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a5b      	ldr	r2, [pc, #364]	@ (8002818 <HAL_GPIO_DeInit+0x1dc>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d01f      	beq.n	80026ee <HAL_GPIO_DeInit+0xb2>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a5a      	ldr	r2, [pc, #360]	@ (800281c <HAL_GPIO_DeInit+0x1e0>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d019      	beq.n	80026ea <HAL_GPIO_DeInit+0xae>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a59      	ldr	r2, [pc, #356]	@ (8002820 <HAL_GPIO_DeInit+0x1e4>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d013      	beq.n	80026e6 <HAL_GPIO_DeInit+0xaa>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a58      	ldr	r2, [pc, #352]	@ (8002824 <HAL_GPIO_DeInit+0x1e8>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d00d      	beq.n	80026e2 <HAL_GPIO_DeInit+0xa6>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a57      	ldr	r2, [pc, #348]	@ (8002828 <HAL_GPIO_DeInit+0x1ec>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d007      	beq.n	80026de <HAL_GPIO_DeInit+0xa2>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a56      	ldr	r2, [pc, #344]	@ (800282c <HAL_GPIO_DeInit+0x1f0>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d101      	bne.n	80026da <HAL_GPIO_DeInit+0x9e>
 80026d6:	2307      	movs	r3, #7
 80026d8:	e00e      	b.n	80026f8 <HAL_GPIO_DeInit+0xbc>
 80026da:	2308      	movs	r3, #8
 80026dc:	e00c      	b.n	80026f8 <HAL_GPIO_DeInit+0xbc>
 80026de:	2306      	movs	r3, #6
 80026e0:	e00a      	b.n	80026f8 <HAL_GPIO_DeInit+0xbc>
 80026e2:	2305      	movs	r3, #5
 80026e4:	e008      	b.n	80026f8 <HAL_GPIO_DeInit+0xbc>
 80026e6:	2304      	movs	r3, #4
 80026e8:	e006      	b.n	80026f8 <HAL_GPIO_DeInit+0xbc>
 80026ea:	2303      	movs	r3, #3
 80026ec:	e004      	b.n	80026f8 <HAL_GPIO_DeInit+0xbc>
 80026ee:	2302      	movs	r3, #2
 80026f0:	e002      	b.n	80026f8 <HAL_GPIO_DeInit+0xbc>
 80026f2:	2301      	movs	r3, #1
 80026f4:	e000      	b.n	80026f8 <HAL_GPIO_DeInit+0xbc>
 80026f6:	2300      	movs	r3, #0
 80026f8:	697a      	ldr	r2, [r7, #20]
 80026fa:	f002 0203 	and.w	r2, r2, #3
 80026fe:	0092      	lsls	r2, r2, #2
 8002700:	4093      	lsls	r3, r2
 8002702:	68ba      	ldr	r2, [r7, #8]
 8002704:	429a      	cmp	r2, r3
 8002706:	d132      	bne.n	800276e <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002708:	4b49      	ldr	r3, [pc, #292]	@ (8002830 <HAL_GPIO_DeInit+0x1f4>)
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	43db      	mvns	r3, r3
 8002710:	4947      	ldr	r1, [pc, #284]	@ (8002830 <HAL_GPIO_DeInit+0x1f4>)
 8002712:	4013      	ands	r3, r2
 8002714:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002716:	4b46      	ldr	r3, [pc, #280]	@ (8002830 <HAL_GPIO_DeInit+0x1f4>)
 8002718:	685a      	ldr	r2, [r3, #4]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	43db      	mvns	r3, r3
 800271e:	4944      	ldr	r1, [pc, #272]	@ (8002830 <HAL_GPIO_DeInit+0x1f4>)
 8002720:	4013      	ands	r3, r2
 8002722:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002724:	4b42      	ldr	r3, [pc, #264]	@ (8002830 <HAL_GPIO_DeInit+0x1f4>)
 8002726:	68da      	ldr	r2, [r3, #12]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	43db      	mvns	r3, r3
 800272c:	4940      	ldr	r1, [pc, #256]	@ (8002830 <HAL_GPIO_DeInit+0x1f4>)
 800272e:	4013      	ands	r3, r2
 8002730:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002732:	4b3f      	ldr	r3, [pc, #252]	@ (8002830 <HAL_GPIO_DeInit+0x1f4>)
 8002734:	689a      	ldr	r2, [r3, #8]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	43db      	mvns	r3, r3
 800273a:	493d      	ldr	r1, [pc, #244]	@ (8002830 <HAL_GPIO_DeInit+0x1f4>)
 800273c:	4013      	ands	r3, r2
 800273e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	f003 0303 	and.w	r3, r3, #3
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	220f      	movs	r2, #15
 800274a:	fa02 f303 	lsl.w	r3, r2, r3
 800274e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002750:	4a2e      	ldr	r2, [pc, #184]	@ (800280c <HAL_GPIO_DeInit+0x1d0>)
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	089b      	lsrs	r3, r3, #2
 8002756:	3302      	adds	r3, #2
 8002758:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	43da      	mvns	r2, r3
 8002760:	482a      	ldr	r0, [pc, #168]	@ (800280c <HAL_GPIO_DeInit+0x1d0>)
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	089b      	lsrs	r3, r3, #2
 8002766:	400a      	ands	r2, r1
 8002768:	3302      	adds	r3, #2
 800276a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	2103      	movs	r1, #3
 8002778:	fa01 f303 	lsl.w	r3, r1, r3
 800277c:	43db      	mvns	r3, r3
 800277e:	401a      	ands	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	08da      	lsrs	r2, r3, #3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	3208      	adds	r2, #8
 800278c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	f003 0307 	and.w	r3, r3, #7
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	220f      	movs	r2, #15
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	43db      	mvns	r3, r3
 80027a0:	697a      	ldr	r2, [r7, #20]
 80027a2:	08d2      	lsrs	r2, r2, #3
 80027a4:	4019      	ands	r1, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	3208      	adds	r2, #8
 80027aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	68da      	ldr	r2, [r3, #12]
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	2103      	movs	r1, #3
 80027b8:	fa01 f303 	lsl.w	r3, r1, r3
 80027bc:	43db      	mvns	r3, r3
 80027be:	401a      	ands	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	2101      	movs	r1, #1
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	fa01 f303 	lsl.w	r3, r1, r3
 80027d0:	43db      	mvns	r3, r3
 80027d2:	401a      	ands	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	689a      	ldr	r2, [r3, #8]
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	2103      	movs	r1, #3
 80027e2:	fa01 f303 	lsl.w	r3, r1, r3
 80027e6:	43db      	mvns	r3, r3
 80027e8:	401a      	ands	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	3301      	adds	r3, #1
 80027f2:	617b      	str	r3, [r7, #20]
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	2b0f      	cmp	r3, #15
 80027f8:	f67f af2e 	bls.w	8002658 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80027fc:	bf00      	nop
 80027fe:	bf00      	nop
 8002800:	371c      	adds	r7, #28
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	40013800 	.word	0x40013800
 8002810:	40020000 	.word	0x40020000
 8002814:	40020400 	.word	0x40020400
 8002818:	40020800 	.word	0x40020800
 800281c:	40020c00 	.word	0x40020c00
 8002820:	40021000 	.word	0x40021000
 8002824:	40021400 	.word	0x40021400
 8002828:	40021800 	.word	0x40021800
 800282c:	40021c00 	.word	0x40021c00
 8002830:	40013c00 	.word	0x40013c00

08002834 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	460b      	mov	r3, r1
 800283e:	807b      	strh	r3, [r7, #2]
 8002840:	4613      	mov	r3, r2
 8002842:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002844:	787b      	ldrb	r3, [r7, #1]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d003      	beq.n	8002852 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800284a:	887a      	ldrh	r2, [r7, #2]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002850:	e003      	b.n	800285a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002852:	887b      	ldrh	r3, [r7, #2]
 8002854:	041a      	lsls	r2, r3, #16
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	619a      	str	r2, [r3, #24]
}
 800285a:	bf00      	nop
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
	...

08002868 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e12b      	b.n	8002ad2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d106      	bne.n	8002894 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f7fd ffb6 	bl	8000800 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2224      	movs	r2, #36	@ 0x24
 8002898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f022 0201 	bic.w	r2, r2, #1
 80028aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80028ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80028ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028cc:	f001 ffd2 	bl	8004874 <HAL_RCC_GetPCLK1Freq>
 80028d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	4a81      	ldr	r2, [pc, #516]	@ (8002adc <HAL_I2C_Init+0x274>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d807      	bhi.n	80028ec <HAL_I2C_Init+0x84>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	4a80      	ldr	r2, [pc, #512]	@ (8002ae0 <HAL_I2C_Init+0x278>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	bf94      	ite	ls
 80028e4:	2301      	movls	r3, #1
 80028e6:	2300      	movhi	r3, #0
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	e006      	b.n	80028fa <HAL_I2C_Init+0x92>
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	4a7d      	ldr	r2, [pc, #500]	@ (8002ae4 <HAL_I2C_Init+0x27c>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	bf94      	ite	ls
 80028f4:	2301      	movls	r3, #1
 80028f6:	2300      	movhi	r3, #0
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e0e7      	b.n	8002ad2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	4a78      	ldr	r2, [pc, #480]	@ (8002ae8 <HAL_I2C_Init+0x280>)
 8002906:	fba2 2303 	umull	r2, r3, r2, r3
 800290a:	0c9b      	lsrs	r3, r3, #18
 800290c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68ba      	ldr	r2, [r7, #8]
 800291e:	430a      	orrs	r2, r1
 8002920:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	6a1b      	ldr	r3, [r3, #32]
 8002928:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	4a6a      	ldr	r2, [pc, #424]	@ (8002adc <HAL_I2C_Init+0x274>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d802      	bhi.n	800293c <HAL_I2C_Init+0xd4>
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	3301      	adds	r3, #1
 800293a:	e009      	b.n	8002950 <HAL_I2C_Init+0xe8>
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002942:	fb02 f303 	mul.w	r3, r2, r3
 8002946:	4a69      	ldr	r2, [pc, #420]	@ (8002aec <HAL_I2C_Init+0x284>)
 8002948:	fba2 2303 	umull	r2, r3, r2, r3
 800294c:	099b      	lsrs	r3, r3, #6
 800294e:	3301      	adds	r3, #1
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	6812      	ldr	r2, [r2, #0]
 8002954:	430b      	orrs	r3, r1
 8002956:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	69db      	ldr	r3, [r3, #28]
 800295e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002962:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	495c      	ldr	r1, [pc, #368]	@ (8002adc <HAL_I2C_Init+0x274>)
 800296c:	428b      	cmp	r3, r1
 800296e:	d819      	bhi.n	80029a4 <HAL_I2C_Init+0x13c>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	1e59      	subs	r1, r3, #1
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	fbb1 f3f3 	udiv	r3, r1, r3
 800297e:	1c59      	adds	r1, r3, #1
 8002980:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002984:	400b      	ands	r3, r1
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00a      	beq.n	80029a0 <HAL_I2C_Init+0x138>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	1e59      	subs	r1, r3, #1
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	fbb1 f3f3 	udiv	r3, r1, r3
 8002998:	3301      	adds	r3, #1
 800299a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800299e:	e051      	b.n	8002a44 <HAL_I2C_Init+0x1dc>
 80029a0:	2304      	movs	r3, #4
 80029a2:	e04f      	b.n	8002a44 <HAL_I2C_Init+0x1dc>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d111      	bne.n	80029d0 <HAL_I2C_Init+0x168>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	1e58      	subs	r0, r3, #1
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6859      	ldr	r1, [r3, #4]
 80029b4:	460b      	mov	r3, r1
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	440b      	add	r3, r1
 80029ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80029be:	3301      	adds	r3, #1
 80029c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	bf0c      	ite	eq
 80029c8:	2301      	moveq	r3, #1
 80029ca:	2300      	movne	r3, #0
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	e012      	b.n	80029f6 <HAL_I2C_Init+0x18e>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	1e58      	subs	r0, r3, #1
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6859      	ldr	r1, [r3, #4]
 80029d8:	460b      	mov	r3, r1
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	440b      	add	r3, r1
 80029de:	0099      	lsls	r1, r3, #2
 80029e0:	440b      	add	r3, r1
 80029e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80029e6:	3301      	adds	r3, #1
 80029e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	bf0c      	ite	eq
 80029f0:	2301      	moveq	r3, #1
 80029f2:	2300      	movne	r3, #0
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <HAL_I2C_Init+0x196>
 80029fa:	2301      	movs	r3, #1
 80029fc:	e022      	b.n	8002a44 <HAL_I2C_Init+0x1dc>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10e      	bne.n	8002a24 <HAL_I2C_Init+0x1bc>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	1e58      	subs	r0, r3, #1
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6859      	ldr	r1, [r3, #4]
 8002a0e:	460b      	mov	r3, r1
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	440b      	add	r3, r1
 8002a14:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a18:	3301      	adds	r3, #1
 8002a1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a22:	e00f      	b.n	8002a44 <HAL_I2C_Init+0x1dc>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	1e58      	subs	r0, r3, #1
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6859      	ldr	r1, [r3, #4]
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	440b      	add	r3, r1
 8002a32:	0099      	lsls	r1, r3, #2
 8002a34:	440b      	add	r3, r1
 8002a36:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a40:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a44:	6879      	ldr	r1, [r7, #4]
 8002a46:	6809      	ldr	r1, [r1, #0]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	69da      	ldr	r2, [r3, #28]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a1b      	ldr	r3, [r3, #32]
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	430a      	orrs	r2, r1
 8002a66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002a72:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	6911      	ldr	r1, [r2, #16]
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	68d2      	ldr	r2, [r2, #12]
 8002a7e:	4311      	orrs	r1, r2
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	6812      	ldr	r2, [r2, #0]
 8002a84:	430b      	orrs	r3, r1
 8002a86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	695a      	ldr	r2, [r3, #20]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f042 0201 	orr.w	r2, r2, #1
 8002ab2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2220      	movs	r2, #32
 8002abe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	000186a0 	.word	0x000186a0
 8002ae0:	001e847f 	.word	0x001e847f
 8002ae4:	003d08ff 	.word	0x003d08ff
 8002ae8:	431bde83 	.word	0x431bde83
 8002aec:	10624dd3 	.word	0x10624dd3

08002af0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af02      	add	r7, sp, #8
 8002af6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d101      	bne.n	8002b02 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e101      	b.n	8002d06 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d106      	bne.n	8002b22 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f7fe fa8b 	bl	8001038 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2203      	movs	r2, #3
 8002b26:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b30:	d102      	bne.n	8002b38 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f003 fcdc 	bl	80064fa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6818      	ldr	r0, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	7c1a      	ldrb	r2, [r3, #16]
 8002b4a:	f88d 2000 	strb.w	r2, [sp]
 8002b4e:	3304      	adds	r3, #4
 8002b50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b52:	f003 fbbb 	bl	80062cc <USB_CoreInit>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d005      	beq.n	8002b68 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2202      	movs	r2, #2
 8002b60:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e0ce      	b.n	8002d06 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f003 fcd4 	bl	800651c <USB_SetCurrentMode>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d005      	beq.n	8002b86 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2202      	movs	r2, #2
 8002b7e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e0bf      	b.n	8002d06 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b86:	2300      	movs	r3, #0
 8002b88:	73fb      	strb	r3, [r7, #15]
 8002b8a:	e04a      	b.n	8002c22 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b8c:	7bfa      	ldrb	r2, [r7, #15]
 8002b8e:	6879      	ldr	r1, [r7, #4]
 8002b90:	4613      	mov	r3, r2
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	4413      	add	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	440b      	add	r3, r1
 8002b9a:	3315      	adds	r3, #21
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ba0:	7bfa      	ldrb	r2, [r7, #15]
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	4413      	add	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	440b      	add	r3, r1
 8002bae:	3314      	adds	r3, #20
 8002bb0:	7bfa      	ldrb	r2, [r7, #15]
 8002bb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002bb4:	7bfa      	ldrb	r2, [r7, #15]
 8002bb6:	7bfb      	ldrb	r3, [r7, #15]
 8002bb8:	b298      	uxth	r0, r3
 8002bba:	6879      	ldr	r1, [r7, #4]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	4413      	add	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	440b      	add	r3, r1
 8002bc6:	332e      	adds	r3, #46	@ 0x2e
 8002bc8:	4602      	mov	r2, r0
 8002bca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002bcc:	7bfa      	ldrb	r2, [r7, #15]
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	4413      	add	r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	440b      	add	r3, r1
 8002bda:	3318      	adds	r3, #24
 8002bdc:	2200      	movs	r2, #0
 8002bde:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002be0:	7bfa      	ldrb	r2, [r7, #15]
 8002be2:	6879      	ldr	r1, [r7, #4]
 8002be4:	4613      	mov	r3, r2
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	4413      	add	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	440b      	add	r3, r1
 8002bee:	331c      	adds	r3, #28
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002bf4:	7bfa      	ldrb	r2, [r7, #15]
 8002bf6:	6879      	ldr	r1, [r7, #4]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	440b      	add	r3, r1
 8002c02:	3320      	adds	r3, #32
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c08:	7bfa      	ldrb	r2, [r7, #15]
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	4413      	add	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	440b      	add	r3, r1
 8002c16:	3324      	adds	r3, #36	@ 0x24
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c1c:	7bfb      	ldrb	r3, [r7, #15]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	73fb      	strb	r3, [r7, #15]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	791b      	ldrb	r3, [r3, #4]
 8002c26:	7bfa      	ldrb	r2, [r7, #15]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d3af      	bcc.n	8002b8c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	73fb      	strb	r3, [r7, #15]
 8002c30:	e044      	b.n	8002cbc <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c32:	7bfa      	ldrb	r2, [r7, #15]
 8002c34:	6879      	ldr	r1, [r7, #4]
 8002c36:	4613      	mov	r3, r2
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	4413      	add	r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	440b      	add	r3, r1
 8002c40:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002c44:	2200      	movs	r2, #0
 8002c46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c48:	7bfa      	ldrb	r2, [r7, #15]
 8002c4a:	6879      	ldr	r1, [r7, #4]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	4413      	add	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	440b      	add	r3, r1
 8002c56:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002c5a:	7bfa      	ldrb	r2, [r7, #15]
 8002c5c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c5e:	7bfa      	ldrb	r2, [r7, #15]
 8002c60:	6879      	ldr	r1, [r7, #4]
 8002c62:	4613      	mov	r3, r2
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	4413      	add	r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	440b      	add	r3, r1
 8002c6c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002c70:	2200      	movs	r2, #0
 8002c72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c74:	7bfa      	ldrb	r2, [r7, #15]
 8002c76:	6879      	ldr	r1, [r7, #4]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	4413      	add	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	440b      	add	r3, r1
 8002c82:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002c86:	2200      	movs	r2, #0
 8002c88:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c8a:	7bfa      	ldrb	r2, [r7, #15]
 8002c8c:	6879      	ldr	r1, [r7, #4]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	00db      	lsls	r3, r3, #3
 8002c92:	4413      	add	r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	440b      	add	r3, r1
 8002c98:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ca0:	7bfa      	ldrb	r2, [r7, #15]
 8002ca2:	6879      	ldr	r1, [r7, #4]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	4413      	add	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	440b      	add	r3, r1
 8002cae:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cb6:	7bfb      	ldrb	r3, [r7, #15]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	73fb      	strb	r3, [r7, #15]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	791b      	ldrb	r3, [r3, #4]
 8002cc0:	7bfa      	ldrb	r2, [r7, #15]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d3b5      	bcc.n	8002c32 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6818      	ldr	r0, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	7c1a      	ldrb	r2, [r3, #16]
 8002cce:	f88d 2000 	strb.w	r2, [sp]
 8002cd2:	3304      	adds	r3, #4
 8002cd4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cd6:	f003 fc6d 	bl	80065b4 <USB_DevInit>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d005      	beq.n	8002cec <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e00c      	b.n	8002d06 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f004 fcb7 	bl	8007672 <USB_DevDisconnect>

  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b084      	sub	sp, #16
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d101      	bne.n	8002d2a <HAL_PCD_Start+0x1c>
 8002d26:	2302      	movs	r3, #2
 8002d28:	e022      	b.n	8002d70 <HAL_PCD_Start+0x62>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d009      	beq.n	8002d52 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d105      	bne.n	8002d52 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d4a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f003 fbbe 	bl	80064d8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f004 fc65 	bl	8007630 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002d78:	b590      	push	{r4, r7, lr}
 8002d7a:	b08d      	sub	sp, #52	@ 0x34
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d86:	6a3b      	ldr	r3, [r7, #32]
 8002d88:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f004 fd23 	bl	80077da <USB_GetMode>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f040 848c 	bne.w	80036b4 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f004 fc87 	bl	80076b4 <USB_ReadInterrupts>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	f000 8482 	beq.w	80036b2 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	0a1b      	lsrs	r3, r3, #8
 8002db8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f004 fc74 	bl	80076b4 <USB_ReadInterrupts>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d107      	bne.n	8002de6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	695a      	ldr	r2, [r3, #20]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f002 0202 	and.w	r2, r2, #2
 8002de4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f004 fc62 	bl	80076b4 <USB_ReadInterrupts>
 8002df0:	4603      	mov	r3, r0
 8002df2:	f003 0310 	and.w	r3, r3, #16
 8002df6:	2b10      	cmp	r3, #16
 8002df8:	d161      	bne.n	8002ebe <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	699a      	ldr	r2, [r3, #24]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f022 0210 	bic.w	r2, r2, #16
 8002e08:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002e0a:	6a3b      	ldr	r3, [r7, #32]
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	f003 020f 	and.w	r2, r3, #15
 8002e16:	4613      	mov	r3, r2
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	4413      	add	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	4413      	add	r3, r2
 8002e26:	3304      	adds	r3, #4
 8002e28:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	0c5b      	lsrs	r3, r3, #17
 8002e2e:	f003 030f 	and.w	r3, r3, #15
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d124      	bne.n	8002e80 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d035      	beq.n	8002eae <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	091b      	lsrs	r3, r3, #4
 8002e4a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	461a      	mov	r2, r3
 8002e54:	6a38      	ldr	r0, [r7, #32]
 8002e56:	f004 fa99 	bl	800738c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	68da      	ldr	r2, [r3, #12]
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	091b      	lsrs	r3, r3, #4
 8002e62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e66:	441a      	add	r2, r3
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	695a      	ldr	r2, [r3, #20]
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	091b      	lsrs	r3, r3, #4
 8002e74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e78:	441a      	add	r2, r3
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	615a      	str	r2, [r3, #20]
 8002e7e:	e016      	b.n	8002eae <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	0c5b      	lsrs	r3, r3, #17
 8002e84:	f003 030f 	and.w	r3, r3, #15
 8002e88:	2b06      	cmp	r3, #6
 8002e8a:	d110      	bne.n	8002eae <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002e92:	2208      	movs	r2, #8
 8002e94:	4619      	mov	r1, r3
 8002e96:	6a38      	ldr	r0, [r7, #32]
 8002e98:	f004 fa78 	bl	800738c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	695a      	ldr	r2, [r3, #20]
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	091b      	lsrs	r3, r3, #4
 8002ea4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ea8:	441a      	add	r2, r3
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	699a      	ldr	r2, [r3, #24]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f042 0210 	orr.w	r2, r2, #16
 8002ebc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f004 fbf6 	bl	80076b4 <USB_ReadInterrupts>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ece:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002ed2:	f040 80a7 	bne.w	8003024 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f004 fbfb 	bl	80076da <USB_ReadDevAllOutEpInterrupt>
 8002ee4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002ee6:	e099      	b.n	800301c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f000 808e 	beq.w	8003010 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002efa:	b2d2      	uxtb	r2, r2
 8002efc:	4611      	mov	r1, r2
 8002efe:	4618      	mov	r0, r3
 8002f00:	f004 fc1f 	bl	8007742 <USB_ReadDevOutEPInterrupt>
 8002f04:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	f003 0301 	and.w	r3, r3, #1
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d00c      	beq.n	8002f2a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f12:	015a      	lsls	r2, r3, #5
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	4413      	add	r3, r2
 8002f18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	2301      	movs	r3, #1
 8002f20:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002f22:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f000 fea3 	bl	8003c70 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	f003 0308 	and.w	r3, r3, #8
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00c      	beq.n	8002f4e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f36:	015a      	lsls	r2, r3, #5
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f40:	461a      	mov	r2, r3
 8002f42:	2308      	movs	r3, #8
 8002f44:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002f46:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 ff79 	bl	8003e40 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	f003 0310 	and.w	r3, r3, #16
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d008      	beq.n	8002f6a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f5a:	015a      	lsls	r2, r3, #5
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	4413      	add	r3, r2
 8002f60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f64:	461a      	mov	r2, r3
 8002f66:	2310      	movs	r3, #16
 8002f68:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d030      	beq.n	8002fd6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002f74:	6a3b      	ldr	r3, [r7, #32]
 8002f76:	695b      	ldr	r3, [r3, #20]
 8002f78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f7c:	2b80      	cmp	r3, #128	@ 0x80
 8002f7e:	d109      	bne.n	8002f94 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	69fa      	ldr	r2, [r7, #28]
 8002f8a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f8e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f92:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002f94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f96:	4613      	mov	r3, r2
 8002f98:	00db      	lsls	r3, r3, #3
 8002f9a:	4413      	add	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	3304      	adds	r3, #4
 8002fa8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	78db      	ldrb	r3, [r3, #3]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d108      	bne.n	8002fc4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f007 ff2a 	bl	800ae18 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc6:	015a      	lsls	r2, r3, #5
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	4413      	add	r3, r2
 8002fcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	f003 0320 	and.w	r3, r3, #32
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d008      	beq.n	8002ff2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe2:	015a      	lsls	r2, r3, #5
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fec:	461a      	mov	r2, r3
 8002fee:	2320      	movs	r3, #32
 8002ff0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d009      	beq.n	8003010 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ffe:	015a      	lsls	r2, r3, #5
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	4413      	add	r3, r2
 8003004:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003008:	461a      	mov	r2, r3
 800300a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800300e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003012:	3301      	adds	r3, #1
 8003014:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003018:	085b      	lsrs	r3, r3, #1
 800301a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800301c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800301e:	2b00      	cmp	r3, #0
 8003020:	f47f af62 	bne.w	8002ee8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4618      	mov	r0, r3
 800302a:	f004 fb43 	bl	80076b4 <USB_ReadInterrupts>
 800302e:	4603      	mov	r3, r0
 8003030:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003034:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003038:	f040 80db 	bne.w	80031f2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4618      	mov	r0, r3
 8003042:	f004 fb64 	bl	800770e <USB_ReadDevAllInEpInterrupt>
 8003046:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003048:	2300      	movs	r3, #0
 800304a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800304c:	e0cd      	b.n	80031ea <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800304e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003050:	f003 0301 	and.w	r3, r3, #1
 8003054:	2b00      	cmp	r3, #0
 8003056:	f000 80c2 	beq.w	80031de <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003060:	b2d2      	uxtb	r2, r2
 8003062:	4611      	mov	r1, r2
 8003064:	4618      	mov	r0, r3
 8003066:	f004 fb8a 	bl	800777e <USB_ReadDevInEPInterrupt>
 800306a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	2b00      	cmp	r3, #0
 8003074:	d057      	beq.n	8003126 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003078:	f003 030f 	and.w	r3, r3, #15
 800307c:	2201      	movs	r2, #1
 800307e:	fa02 f303 	lsl.w	r3, r2, r3
 8003082:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800308a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	43db      	mvns	r3, r3
 8003090:	69f9      	ldr	r1, [r7, #28]
 8003092:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003096:	4013      	ands	r3, r2
 8003098:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800309a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800309c:	015a      	lsls	r2, r3, #5
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	4413      	add	r3, r2
 80030a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030a6:	461a      	mov	r2, r3
 80030a8:	2301      	movs	r3, #1
 80030aa:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	799b      	ldrb	r3, [r3, #6]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d132      	bne.n	800311a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80030b4:	6879      	ldr	r1, [r7, #4]
 80030b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030b8:	4613      	mov	r3, r2
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	4413      	add	r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	440b      	add	r3, r1
 80030c2:	3320      	adds	r3, #32
 80030c4:	6819      	ldr	r1, [r3, #0]
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030ca:	4613      	mov	r3, r2
 80030cc:	00db      	lsls	r3, r3, #3
 80030ce:	4413      	add	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	4403      	add	r3, r0
 80030d4:	331c      	adds	r3, #28
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4419      	add	r1, r3
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030de:	4613      	mov	r3, r2
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	4413      	add	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4403      	add	r3, r0
 80030e8:	3320      	adds	r3, #32
 80030ea:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80030ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d113      	bne.n	800311a <HAL_PCD_IRQHandler+0x3a2>
 80030f2:	6879      	ldr	r1, [r7, #4]
 80030f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030f6:	4613      	mov	r3, r2
 80030f8:	00db      	lsls	r3, r3, #3
 80030fa:	4413      	add	r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	440b      	add	r3, r1
 8003100:	3324      	adds	r3, #36	@ 0x24
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d108      	bne.n	800311a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6818      	ldr	r0, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003112:	461a      	mov	r2, r3
 8003114:	2101      	movs	r1, #1
 8003116:	f004 fb91 	bl	800783c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800311a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800311c:	b2db      	uxtb	r3, r3
 800311e:	4619      	mov	r1, r3
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f007 fdf4 	bl	800ad0e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	f003 0308 	and.w	r3, r3, #8
 800312c:	2b00      	cmp	r3, #0
 800312e:	d008      	beq.n	8003142 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003132:	015a      	lsls	r2, r3, #5
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	4413      	add	r3, r2
 8003138:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800313c:	461a      	mov	r2, r3
 800313e:	2308      	movs	r3, #8
 8003140:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	f003 0310 	and.w	r3, r3, #16
 8003148:	2b00      	cmp	r3, #0
 800314a:	d008      	beq.n	800315e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800314c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800314e:	015a      	lsls	r2, r3, #5
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	4413      	add	r3, r2
 8003154:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003158:	461a      	mov	r2, r3
 800315a:	2310      	movs	r3, #16
 800315c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003164:	2b00      	cmp	r3, #0
 8003166:	d008      	beq.n	800317a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800316a:	015a      	lsls	r2, r3, #5
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	4413      	add	r3, r2
 8003170:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003174:	461a      	mov	r2, r3
 8003176:	2340      	movs	r3, #64	@ 0x40
 8003178:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d023      	beq.n	80031cc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003184:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003186:	6a38      	ldr	r0, [r7, #32]
 8003188:	f003 fb78 	bl	800687c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800318c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800318e:	4613      	mov	r3, r2
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	4413      	add	r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	3310      	adds	r3, #16
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	4413      	add	r3, r2
 800319c:	3304      	adds	r3, #4
 800319e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	78db      	ldrb	r3, [r3, #3]
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d108      	bne.n	80031ba <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	2200      	movs	r2, #0
 80031ac:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80031ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	4619      	mov	r1, r3
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f007 fe41 	bl	800ae3c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80031ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031bc:	015a      	lsls	r2, r3, #5
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	4413      	add	r3, r2
 80031c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031c6:	461a      	mov	r2, r3
 80031c8:	2302      	movs	r3, #2
 80031ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d003      	beq.n	80031de <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80031d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 fcbd 	bl	8003b58 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80031de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e0:	3301      	adds	r3, #1
 80031e2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80031e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031e6:	085b      	lsrs	r3, r3, #1
 80031e8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80031ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f47f af2e 	bne.w	800304e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f004 fa5c 	bl	80076b4 <USB_ReadInterrupts>
 80031fc:	4603      	mov	r3, r0
 80031fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003202:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003206:	d122      	bne.n	800324e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	69fa      	ldr	r2, [r7, #28]
 8003212:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003216:	f023 0301 	bic.w	r3, r3, #1
 800321a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003222:	2b01      	cmp	r3, #1
 8003224:	d108      	bne.n	8003238 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800322e:	2100      	movs	r1, #0
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f000 fea3 	bl	8003f7c <HAL_PCDEx_LPM_Callback>
 8003236:	e002      	b.n	800323e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f007 fddf 	bl	800adfc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	695a      	ldr	r2, [r3, #20]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800324c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4618      	mov	r0, r3
 8003254:	f004 fa2e 	bl	80076b4 <USB_ReadInterrupts>
 8003258:	4603      	mov	r3, r0
 800325a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800325e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003262:	d112      	bne.n	800328a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	2b01      	cmp	r3, #1
 8003272:	d102      	bne.n	800327a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f007 fd9b 	bl	800adb0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	695a      	ldr	r2, [r3, #20]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003288:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4618      	mov	r0, r3
 8003290:	f004 fa10 	bl	80076b4 <USB_ReadInterrupts>
 8003294:	4603      	mov	r3, r0
 8003296:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800329a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800329e:	f040 80b7 	bne.w	8003410 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	69fa      	ldr	r2, [r7, #28]
 80032ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80032b0:	f023 0301 	bic.w	r3, r3, #1
 80032b4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2110      	movs	r1, #16
 80032bc:	4618      	mov	r0, r3
 80032be:	f003 fadd 	bl	800687c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032c2:	2300      	movs	r3, #0
 80032c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032c6:	e046      	b.n	8003356 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80032c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032ca:	015a      	lsls	r2, r3, #5
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	4413      	add	r3, r2
 80032d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032d4:	461a      	mov	r2, r3
 80032d6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80032da:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80032dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032de:	015a      	lsls	r2, r3, #5
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	4413      	add	r3, r2
 80032e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80032ec:	0151      	lsls	r1, r2, #5
 80032ee:	69fa      	ldr	r2, [r7, #28]
 80032f0:	440a      	add	r2, r1
 80032f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80032f6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80032fa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80032fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032fe:	015a      	lsls	r2, r3, #5
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	4413      	add	r3, r2
 8003304:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003308:	461a      	mov	r2, r3
 800330a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800330e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003312:	015a      	lsls	r2, r3, #5
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	4413      	add	r3, r2
 8003318:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003320:	0151      	lsls	r1, r2, #5
 8003322:	69fa      	ldr	r2, [r7, #28]
 8003324:	440a      	add	r2, r1
 8003326:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800332a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800332e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003332:	015a      	lsls	r2, r3, #5
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	4413      	add	r3, r2
 8003338:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003340:	0151      	lsls	r1, r2, #5
 8003342:	69fa      	ldr	r2, [r7, #28]
 8003344:	440a      	add	r2, r1
 8003346:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800334a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800334e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003352:	3301      	adds	r3, #1
 8003354:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	791b      	ldrb	r3, [r3, #4]
 800335a:	461a      	mov	r2, r3
 800335c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800335e:	4293      	cmp	r3, r2
 8003360:	d3b2      	bcc.n	80032c8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	69fa      	ldr	r2, [r7, #28]
 800336c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003370:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003374:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	7bdb      	ldrb	r3, [r3, #15]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d016      	beq.n	80033ac <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003384:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003388:	69fa      	ldr	r2, [r7, #28]
 800338a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800338e:	f043 030b 	orr.w	r3, r3, #11
 8003392:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800339c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800339e:	69fa      	ldr	r2, [r7, #28]
 80033a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80033a4:	f043 030b 	orr.w	r3, r3, #11
 80033a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80033aa:	e015      	b.n	80033d8 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	69fa      	ldr	r2, [r7, #28]
 80033b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80033ba:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80033be:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80033c2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	69fa      	ldr	r2, [r7, #28]
 80033ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80033d2:	f043 030b 	orr.w	r3, r3, #11
 80033d6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	69fa      	ldr	r2, [r7, #28]
 80033e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80033e6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80033ea:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6818      	ldr	r0, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80033fa:	461a      	mov	r2, r3
 80033fc:	f004 fa1e 	bl	800783c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	695a      	ldr	r2, [r3, #20]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800340e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4618      	mov	r0, r3
 8003416:	f004 f94d 	bl	80076b4 <USB_ReadInterrupts>
 800341a:	4603      	mov	r3, r0
 800341c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003420:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003424:	d123      	bne.n	800346e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4618      	mov	r0, r3
 800342c:	f004 f9e3 	bl	80077f6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4618      	mov	r0, r3
 8003436:	f003 fa9a 	bl	800696e <USB_GetDevSpeed>
 800343a:	4603      	mov	r3, r0
 800343c:	461a      	mov	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681c      	ldr	r4, [r3, #0]
 8003446:	f001 fa09 	bl	800485c <HAL_RCC_GetHCLKFreq>
 800344a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003450:	461a      	mov	r2, r3
 8003452:	4620      	mov	r0, r4
 8003454:	f002 ff9e 	bl	8006394 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f007 fc80 	bl	800ad5e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	695a      	ldr	r2, [r3, #20]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800346c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4618      	mov	r0, r3
 8003474:	f004 f91e 	bl	80076b4 <USB_ReadInterrupts>
 8003478:	4603      	mov	r3, r0
 800347a:	f003 0308 	and.w	r3, r3, #8
 800347e:	2b08      	cmp	r3, #8
 8003480:	d10a      	bne.n	8003498 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f007 fc5d 	bl	800ad42 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	695a      	ldr	r2, [r3, #20]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f002 0208 	and.w	r2, r2, #8
 8003496:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4618      	mov	r0, r3
 800349e:	f004 f909 	bl	80076b4 <USB_ReadInterrupts>
 80034a2:	4603      	mov	r3, r0
 80034a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034a8:	2b80      	cmp	r3, #128	@ 0x80
 80034aa:	d123      	bne.n	80034f4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80034ac:	6a3b      	ldr	r3, [r7, #32]
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80034b4:	6a3b      	ldr	r3, [r7, #32]
 80034b6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034b8:	2301      	movs	r3, #1
 80034ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80034bc:	e014      	b.n	80034e8 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80034be:	6879      	ldr	r1, [r7, #4]
 80034c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034c2:	4613      	mov	r3, r2
 80034c4:	00db      	lsls	r3, r3, #3
 80034c6:	4413      	add	r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	440b      	add	r3, r1
 80034cc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d105      	bne.n	80034e2 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80034d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	4619      	mov	r1, r3
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f000 fb0a 	bl	8003af6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e4:	3301      	adds	r3, #1
 80034e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	791b      	ldrb	r3, [r3, #4]
 80034ec:	461a      	mov	r2, r3
 80034ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d3e4      	bcc.n	80034be <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f004 f8db 	bl	80076b4 <USB_ReadInterrupts>
 80034fe:	4603      	mov	r3, r0
 8003500:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003504:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003508:	d13c      	bne.n	8003584 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800350a:	2301      	movs	r3, #1
 800350c:	627b      	str	r3, [r7, #36]	@ 0x24
 800350e:	e02b      	b.n	8003568 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003512:	015a      	lsls	r2, r3, #5
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	4413      	add	r3, r2
 8003518:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003520:	6879      	ldr	r1, [r7, #4]
 8003522:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003524:	4613      	mov	r3, r2
 8003526:	00db      	lsls	r3, r3, #3
 8003528:	4413      	add	r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	440b      	add	r3, r1
 800352e:	3318      	adds	r3, #24
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d115      	bne.n	8003562 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003536:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003538:	2b00      	cmp	r3, #0
 800353a:	da12      	bge.n	8003562 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800353c:	6879      	ldr	r1, [r7, #4]
 800353e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003540:	4613      	mov	r3, r2
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	4413      	add	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	440b      	add	r3, r1
 800354a:	3317      	adds	r3, #23
 800354c:	2201      	movs	r2, #1
 800354e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003552:	b2db      	uxtb	r3, r3
 8003554:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003558:	b2db      	uxtb	r3, r3
 800355a:	4619      	mov	r1, r3
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 faca 	bl	8003af6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003564:	3301      	adds	r3, #1
 8003566:	627b      	str	r3, [r7, #36]	@ 0x24
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	791b      	ldrb	r3, [r3, #4]
 800356c:	461a      	mov	r2, r3
 800356e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003570:	4293      	cmp	r3, r2
 8003572:	d3cd      	bcc.n	8003510 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	695a      	ldr	r2, [r3, #20]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003582:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4618      	mov	r0, r3
 800358a:	f004 f893 	bl	80076b4 <USB_ReadInterrupts>
 800358e:	4603      	mov	r3, r0
 8003590:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003594:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003598:	d156      	bne.n	8003648 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800359a:	2301      	movs	r3, #1
 800359c:	627b      	str	r3, [r7, #36]	@ 0x24
 800359e:	e045      	b.n	800362c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80035a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a2:	015a      	lsls	r2, r3, #5
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	4413      	add	r3, r2
 80035a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80035b0:	6879      	ldr	r1, [r7, #4]
 80035b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035b4:	4613      	mov	r3, r2
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	4413      	add	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	440b      	add	r3, r1
 80035be:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d12e      	bne.n	8003626 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80035c8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	da2b      	bge.n	8003626 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	0c1a      	lsrs	r2, r3, #16
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80035d8:	4053      	eors	r3, r2
 80035da:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d121      	bne.n	8003626 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80035e2:	6879      	ldr	r1, [r7, #4]
 80035e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035e6:	4613      	mov	r3, r2
 80035e8:	00db      	lsls	r3, r3, #3
 80035ea:	4413      	add	r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	440b      	add	r3, r1
 80035f0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80035f4:	2201      	movs	r2, #1
 80035f6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80035f8:	6a3b      	ldr	r3, [r7, #32]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003600:	6a3b      	ldr	r3, [r7, #32]
 8003602:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003604:	6a3b      	ldr	r3, [r7, #32]
 8003606:	695b      	ldr	r3, [r3, #20]
 8003608:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800360c:	2b00      	cmp	r3, #0
 800360e:	d10a      	bne.n	8003626 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	69fa      	ldr	r2, [r7, #28]
 800361a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800361e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003622:	6053      	str	r3, [r2, #4]
            break;
 8003624:	e008      	b.n	8003638 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003628:	3301      	adds	r3, #1
 800362a:	627b      	str	r3, [r7, #36]	@ 0x24
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	791b      	ldrb	r3, [r3, #4]
 8003630:	461a      	mov	r2, r3
 8003632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003634:	4293      	cmp	r3, r2
 8003636:	d3b3      	bcc.n	80035a0 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	695a      	ldr	r2, [r3, #20]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003646:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4618      	mov	r0, r3
 800364e:	f004 f831 	bl	80076b4 <USB_ReadInterrupts>
 8003652:	4603      	mov	r3, r0
 8003654:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003658:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800365c:	d10a      	bne.n	8003674 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f007 fbfe 	bl	800ae60 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	695a      	ldr	r2, [r3, #20]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003672:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4618      	mov	r0, r3
 800367a:	f004 f81b 	bl	80076b4 <USB_ReadInterrupts>
 800367e:	4603      	mov	r3, r0
 8003680:	f003 0304 	and.w	r3, r3, #4
 8003684:	2b04      	cmp	r3, #4
 8003686:	d115      	bne.n	80036b4 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	f003 0304 	and.w	r3, r3, #4
 8003696:	2b00      	cmp	r3, #0
 8003698:	d002      	beq.n	80036a0 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f007 fbee 	bl	800ae7c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	6859      	ldr	r1, [r3, #4]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	69ba      	ldr	r2, [r7, #24]
 80036ac:	430a      	orrs	r2, r1
 80036ae:	605a      	str	r2, [r3, #4]
 80036b0:	e000      	b.n	80036b4 <HAL_PCD_IRQHandler+0x93c>
      return;
 80036b2:	bf00      	nop
    }
  }
}
 80036b4:	3734      	adds	r7, #52	@ 0x34
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd90      	pop	{r4, r7, pc}

080036ba <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b082      	sub	sp, #8
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
 80036c2:	460b      	mov	r3, r1
 80036c4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d101      	bne.n	80036d4 <HAL_PCD_SetAddress+0x1a>
 80036d0:	2302      	movs	r3, #2
 80036d2:	e012      	b.n	80036fa <HAL_PCD_SetAddress+0x40>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	78fa      	ldrb	r2, [r7, #3]
 80036e0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	78fa      	ldrb	r2, [r7, #3]
 80036e8:	4611      	mov	r1, r2
 80036ea:	4618      	mov	r0, r3
 80036ec:	f003 ff7a 	bl	80075e4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b084      	sub	sp, #16
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
 800370a:	4608      	mov	r0, r1
 800370c:	4611      	mov	r1, r2
 800370e:	461a      	mov	r2, r3
 8003710:	4603      	mov	r3, r0
 8003712:	70fb      	strb	r3, [r7, #3]
 8003714:	460b      	mov	r3, r1
 8003716:	803b      	strh	r3, [r7, #0]
 8003718:	4613      	mov	r3, r2
 800371a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800371c:	2300      	movs	r3, #0
 800371e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003720:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003724:	2b00      	cmp	r3, #0
 8003726:	da0f      	bge.n	8003748 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003728:	78fb      	ldrb	r3, [r7, #3]
 800372a:	f003 020f 	and.w	r2, r3, #15
 800372e:	4613      	mov	r3, r2
 8003730:	00db      	lsls	r3, r3, #3
 8003732:	4413      	add	r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	3310      	adds	r3, #16
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	4413      	add	r3, r2
 800373c:	3304      	adds	r3, #4
 800373e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2201      	movs	r2, #1
 8003744:	705a      	strb	r2, [r3, #1]
 8003746:	e00f      	b.n	8003768 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003748:	78fb      	ldrb	r3, [r7, #3]
 800374a:	f003 020f 	and.w	r2, r3, #15
 800374e:	4613      	mov	r3, r2
 8003750:	00db      	lsls	r3, r3, #3
 8003752:	4413      	add	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	4413      	add	r3, r2
 800375e:	3304      	adds	r3, #4
 8003760:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003768:	78fb      	ldrb	r3, [r7, #3]
 800376a:	f003 030f 	and.w	r3, r3, #15
 800376e:	b2da      	uxtb	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003774:	883b      	ldrh	r3, [r7, #0]
 8003776:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	78ba      	ldrb	r2, [r7, #2]
 8003782:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	785b      	ldrb	r3, [r3, #1]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d004      	beq.n	8003796 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	461a      	mov	r2, r3
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003796:	78bb      	ldrb	r3, [r7, #2]
 8003798:	2b02      	cmp	r3, #2
 800379a:	d102      	bne.n	80037a2 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2200      	movs	r2, #0
 80037a0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d101      	bne.n	80037b0 <HAL_PCD_EP_Open+0xae>
 80037ac:	2302      	movs	r3, #2
 80037ae:	e00e      	b.n	80037ce <HAL_PCD_EP_Open+0xcc>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68f9      	ldr	r1, [r7, #12]
 80037be:	4618      	mov	r0, r3
 80037c0:	f003 f8fa 	bl	80069b8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80037cc:	7afb      	ldrb	r3, [r7, #11]
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b084      	sub	sp, #16
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
 80037de:	460b      	mov	r3, r1
 80037e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80037e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	da0f      	bge.n	800380a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037ea:	78fb      	ldrb	r3, [r7, #3]
 80037ec:	f003 020f 	and.w	r2, r3, #15
 80037f0:	4613      	mov	r3, r2
 80037f2:	00db      	lsls	r3, r3, #3
 80037f4:	4413      	add	r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	3310      	adds	r3, #16
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	4413      	add	r3, r2
 80037fe:	3304      	adds	r3, #4
 8003800:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2201      	movs	r2, #1
 8003806:	705a      	strb	r2, [r3, #1]
 8003808:	e00f      	b.n	800382a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800380a:	78fb      	ldrb	r3, [r7, #3]
 800380c:	f003 020f 	and.w	r2, r3, #15
 8003810:	4613      	mov	r3, r2
 8003812:	00db      	lsls	r3, r3, #3
 8003814:	4413      	add	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	4413      	add	r3, r2
 8003820:	3304      	adds	r3, #4
 8003822:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800382a:	78fb      	ldrb	r3, [r7, #3]
 800382c:	f003 030f 	and.w	r3, r3, #15
 8003830:	b2da      	uxtb	r2, r3
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800383c:	2b01      	cmp	r3, #1
 800383e:	d101      	bne.n	8003844 <HAL_PCD_EP_Close+0x6e>
 8003840:	2302      	movs	r3, #2
 8003842:	e00e      	b.n	8003862 <HAL_PCD_EP_Close+0x8c>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68f9      	ldr	r1, [r7, #12]
 8003852:	4618      	mov	r0, r3
 8003854:	f003 f938 	bl	8006ac8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b086      	sub	sp, #24
 800386e:	af00      	add	r7, sp, #0
 8003870:	60f8      	str	r0, [r7, #12]
 8003872:	607a      	str	r2, [r7, #4]
 8003874:	603b      	str	r3, [r7, #0]
 8003876:	460b      	mov	r3, r1
 8003878:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800387a:	7afb      	ldrb	r3, [r7, #11]
 800387c:	f003 020f 	and.w	r2, r3, #15
 8003880:	4613      	mov	r3, r2
 8003882:	00db      	lsls	r3, r3, #3
 8003884:	4413      	add	r3, r2
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	4413      	add	r3, r2
 8003890:	3304      	adds	r3, #4
 8003892:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	683a      	ldr	r2, [r7, #0]
 800389e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	2200      	movs	r2, #0
 80038a4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	2200      	movs	r2, #0
 80038aa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038ac:	7afb      	ldrb	r3, [r7, #11]
 80038ae:	f003 030f 	and.w	r3, r3, #15
 80038b2:	b2da      	uxtb	r2, r3
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	799b      	ldrb	r3, [r3, #6]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d102      	bne.n	80038c6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6818      	ldr	r0, [r3, #0]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	799b      	ldrb	r3, [r3, #6]
 80038ce:	461a      	mov	r2, r3
 80038d0:	6979      	ldr	r1, [r7, #20]
 80038d2:	f003 f9d5 	bl	8006c80 <USB_EPStartXfer>

  return HAL_OK;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3718      	adds	r7, #24
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	460b      	mov	r3, r1
 80038ea:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80038ec:	78fb      	ldrb	r3, [r7, #3]
 80038ee:	f003 020f 	and.w	r2, r3, #15
 80038f2:	6879      	ldr	r1, [r7, #4]
 80038f4:	4613      	mov	r3, r2
 80038f6:	00db      	lsls	r3, r3, #3
 80038f8:	4413      	add	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	440b      	add	r3, r1
 80038fe:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003902:	681b      	ldr	r3, [r3, #0]
}
 8003904:	4618      	mov	r0, r3
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b086      	sub	sp, #24
 8003914:	af00      	add	r7, sp, #0
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	607a      	str	r2, [r7, #4]
 800391a:	603b      	str	r3, [r7, #0]
 800391c:	460b      	mov	r3, r1
 800391e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003920:	7afb      	ldrb	r3, [r7, #11]
 8003922:	f003 020f 	and.w	r2, r3, #15
 8003926:	4613      	mov	r3, r2
 8003928:	00db      	lsls	r3, r3, #3
 800392a:	4413      	add	r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	3310      	adds	r3, #16
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	4413      	add	r3, r2
 8003934:	3304      	adds	r3, #4
 8003936:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	683a      	ldr	r2, [r7, #0]
 8003942:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	2200      	movs	r2, #0
 8003948:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	2201      	movs	r2, #1
 800394e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003950:	7afb      	ldrb	r3, [r7, #11]
 8003952:	f003 030f 	and.w	r3, r3, #15
 8003956:	b2da      	uxtb	r2, r3
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	799b      	ldrb	r3, [r3, #6]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d102      	bne.n	800396a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6818      	ldr	r0, [r3, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	799b      	ldrb	r3, [r3, #6]
 8003972:	461a      	mov	r2, r3
 8003974:	6979      	ldr	r1, [r7, #20]
 8003976:	f003 f983 	bl	8006c80 <USB_EPStartXfer>

  return HAL_OK;
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	3718      	adds	r7, #24
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	460b      	mov	r3, r1
 800398e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003990:	78fb      	ldrb	r3, [r7, #3]
 8003992:	f003 030f 	and.w	r3, r3, #15
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	7912      	ldrb	r2, [r2, #4]
 800399a:	4293      	cmp	r3, r2
 800399c:	d901      	bls.n	80039a2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e04f      	b.n	8003a42 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80039a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	da0f      	bge.n	80039ca <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039aa:	78fb      	ldrb	r3, [r7, #3]
 80039ac:	f003 020f 	and.w	r2, r3, #15
 80039b0:	4613      	mov	r3, r2
 80039b2:	00db      	lsls	r3, r3, #3
 80039b4:	4413      	add	r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	3310      	adds	r3, #16
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	4413      	add	r3, r2
 80039be:	3304      	adds	r3, #4
 80039c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2201      	movs	r2, #1
 80039c6:	705a      	strb	r2, [r3, #1]
 80039c8:	e00d      	b.n	80039e6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80039ca:	78fa      	ldrb	r2, [r7, #3]
 80039cc:	4613      	mov	r3, r2
 80039ce:	00db      	lsls	r3, r3, #3
 80039d0:	4413      	add	r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	4413      	add	r3, r2
 80039dc:	3304      	adds	r3, #4
 80039de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2201      	movs	r2, #1
 80039ea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039ec:	78fb      	ldrb	r3, [r7, #3]
 80039ee:	f003 030f 	and.w	r3, r3, #15
 80039f2:	b2da      	uxtb	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d101      	bne.n	8003a06 <HAL_PCD_EP_SetStall+0x82>
 8003a02:	2302      	movs	r3, #2
 8003a04:	e01d      	b.n	8003a42 <HAL_PCD_EP_SetStall+0xbe>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68f9      	ldr	r1, [r7, #12]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f003 fd11 	bl	800743c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a1a:	78fb      	ldrb	r3, [r7, #3]
 8003a1c:	f003 030f 	and.w	r3, r3, #15
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d109      	bne.n	8003a38 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6818      	ldr	r0, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	7999      	ldrb	r1, [r3, #6]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003a32:	461a      	mov	r2, r3
 8003a34:	f003 ff02 	bl	800783c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b084      	sub	sp, #16
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
 8003a52:	460b      	mov	r3, r1
 8003a54:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003a56:	78fb      	ldrb	r3, [r7, #3]
 8003a58:	f003 030f 	and.w	r3, r3, #15
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	7912      	ldrb	r2, [r2, #4]
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d901      	bls.n	8003a68 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e042      	b.n	8003aee <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	da0f      	bge.n	8003a90 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a70:	78fb      	ldrb	r3, [r7, #3]
 8003a72:	f003 020f 	and.w	r2, r3, #15
 8003a76:	4613      	mov	r3, r2
 8003a78:	00db      	lsls	r3, r3, #3
 8003a7a:	4413      	add	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	3310      	adds	r3, #16
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	4413      	add	r3, r2
 8003a84:	3304      	adds	r3, #4
 8003a86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	705a      	strb	r2, [r3, #1]
 8003a8e:	e00f      	b.n	8003ab0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a90:	78fb      	ldrb	r3, [r7, #3]
 8003a92:	f003 020f 	and.w	r2, r3, #15
 8003a96:	4613      	mov	r3, r2
 8003a98:	00db      	lsls	r3, r3, #3
 8003a9a:	4413      	add	r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	3304      	adds	r3, #4
 8003aa8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2200      	movs	r2, #0
 8003aae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ab6:	78fb      	ldrb	r3, [r7, #3]
 8003ab8:	f003 030f 	and.w	r3, r3, #15
 8003abc:	b2da      	uxtb	r2, r3
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d101      	bne.n	8003ad0 <HAL_PCD_EP_ClrStall+0x86>
 8003acc:	2302      	movs	r3, #2
 8003ace:	e00e      	b.n	8003aee <HAL_PCD_EP_ClrStall+0xa4>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68f9      	ldr	r1, [r7, #12]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f003 fd1a 	bl	8007518 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b084      	sub	sp, #16
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
 8003afe:	460b      	mov	r3, r1
 8003b00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003b02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	da0c      	bge.n	8003b24 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b0a:	78fb      	ldrb	r3, [r7, #3]
 8003b0c:	f003 020f 	and.w	r2, r3, #15
 8003b10:	4613      	mov	r3, r2
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	4413      	add	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	3310      	adds	r3, #16
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	3304      	adds	r3, #4
 8003b20:	60fb      	str	r3, [r7, #12]
 8003b22:	e00c      	b.n	8003b3e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b24:	78fb      	ldrb	r3, [r7, #3]
 8003b26:	f003 020f 	and.w	r2, r3, #15
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	00db      	lsls	r3, r3, #3
 8003b2e:	4413      	add	r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	4413      	add	r3, r2
 8003b3a:	3304      	adds	r3, #4
 8003b3c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68f9      	ldr	r1, [r7, #12]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f003 fb39 	bl	80071bc <USB_EPStopXfer>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003b4e:	7afb      	ldrb	r3, [r7, #11]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3710      	adds	r7, #16
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b08a      	sub	sp, #40	@ 0x28
 8003b5c:	af02      	add	r7, sp, #8
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003b6c:	683a      	ldr	r2, [r7, #0]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	00db      	lsls	r3, r3, #3
 8003b72:	4413      	add	r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	3310      	adds	r3, #16
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	3304      	adds	r3, #4
 8003b7e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	695a      	ldr	r2, [r3, #20]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d901      	bls.n	8003b90 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e06b      	b.n	8003c68 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	691a      	ldr	r2, [r3, #16]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	695b      	ldr	r3, [r3, #20]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	69fa      	ldr	r2, [r7, #28]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d902      	bls.n	8003bac <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	3303      	adds	r3, #3
 8003bb0:	089b      	lsrs	r3, r3, #2
 8003bb2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003bb4:	e02a      	b.n	8003c0c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	691a      	ldr	r2, [r3, #16]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	69fa      	ldr	r2, [r7, #28]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d902      	bls.n	8003bd2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	3303      	adds	r3, #3
 8003bd6:	089b      	lsrs	r3, r3, #2
 8003bd8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	68d9      	ldr	r1, [r3, #12]
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	b2da      	uxtb	r2, r3
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003bea:	9300      	str	r3, [sp, #0]
 8003bec:	4603      	mov	r3, r0
 8003bee:	6978      	ldr	r0, [r7, #20]
 8003bf0:	f003 fb8e 	bl	8007310 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	68da      	ldr	r2, [r3, #12]
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	441a      	add	r2, r3
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	695a      	ldr	r2, [r3, #20]
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	441a      	add	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	015a      	lsls	r2, r3, #5
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	4413      	add	r3, r2
 8003c14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c1c:	69ba      	ldr	r2, [r7, #24]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d809      	bhi.n	8003c36 <PCD_WriteEmptyTxFifo+0xde>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	695a      	ldr	r2, [r3, #20]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d203      	bcs.n	8003c36 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1bf      	bne.n	8003bb6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	691a      	ldr	r2, [r3, #16]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d811      	bhi.n	8003c66 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	f003 030f 	and.w	r3, r3, #15
 8003c48:	2201      	movs	r2, #1
 8003c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	43db      	mvns	r3, r3
 8003c5c:	6939      	ldr	r1, [r7, #16]
 8003c5e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003c62:	4013      	ands	r3, r2
 8003c64:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3720      	adds	r7, #32
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b088      	sub	sp, #32
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	333c      	adds	r3, #60	@ 0x3c
 8003c88:	3304      	adds	r3, #4
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	015a      	lsls	r2, r3, #5
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	4413      	add	r3, r2
 8003c96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	799b      	ldrb	r3, [r3, #6]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d17b      	bne.n	8003d9e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	f003 0308 	and.w	r3, r3, #8
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d015      	beq.n	8003cdc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	4a61      	ldr	r2, [pc, #388]	@ (8003e38 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	f240 80b9 	bls.w	8003e2c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f000 80b3 	beq.w	8003e2c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	015a      	lsls	r2, r3, #5
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	4413      	add	r3, r2
 8003cce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cd8:	6093      	str	r3, [r2, #8]
 8003cda:	e0a7      	b.n	8003e2c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	f003 0320 	and.w	r3, r3, #32
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d009      	beq.n	8003cfa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	015a      	lsls	r2, r3, #5
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	4413      	add	r3, r2
 8003cee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	2320      	movs	r3, #32
 8003cf6:	6093      	str	r3, [r2, #8]
 8003cf8:	e098      	b.n	8003e2c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f040 8093 	bne.w	8003e2c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	4a4b      	ldr	r2, [pc, #300]	@ (8003e38 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d90f      	bls.n	8003d2e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00a      	beq.n	8003d2e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	015a      	lsls	r2, r3, #5
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	4413      	add	r3, r2
 8003d20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d24:	461a      	mov	r2, r3
 8003d26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d2a:	6093      	str	r3, [r2, #8]
 8003d2c:	e07e      	b.n	8003e2c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003d2e:	683a      	ldr	r2, [r7, #0]
 8003d30:	4613      	mov	r3, r2
 8003d32:	00db      	lsls	r3, r3, #3
 8003d34:	4413      	add	r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	4413      	add	r3, r2
 8003d40:	3304      	adds	r3, #4
 8003d42:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6a1a      	ldr	r2, [r3, #32]
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	0159      	lsls	r1, r3, #5
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	440b      	add	r3, r1
 8003d50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d5a:	1ad2      	subs	r2, r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d114      	bne.n	8003d90 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d109      	bne.n	8003d82 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6818      	ldr	r0, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003d78:	461a      	mov	r2, r3
 8003d7a:	2101      	movs	r1, #1
 8003d7c:	f003 fd5e 	bl	800783c <USB_EP0_OutStart>
 8003d80:	e006      	b.n	8003d90 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	68da      	ldr	r2, [r3, #12]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	441a      	add	r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	4619      	mov	r1, r3
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f006 ff9e 	bl	800acd8 <HAL_PCD_DataOutStageCallback>
 8003d9c:	e046      	b.n	8003e2c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	4a26      	ldr	r2, [pc, #152]	@ (8003e3c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d124      	bne.n	8003df0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d00a      	beq.n	8003dc6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	015a      	lsls	r2, r3, #5
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	4413      	add	r3, r2
 8003db8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003dc2:	6093      	str	r3, [r2, #8]
 8003dc4:	e032      	b.n	8003e2c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	f003 0320 	and.w	r3, r3, #32
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d008      	beq.n	8003de2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	015a      	lsls	r2, r3, #5
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ddc:	461a      	mov	r2, r3
 8003dde:	2320      	movs	r3, #32
 8003de0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	4619      	mov	r1, r3
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f006 ff75 	bl	800acd8 <HAL_PCD_DataOutStageCallback>
 8003dee:	e01d      	b.n	8003e2c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d114      	bne.n	8003e20 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003df6:	6879      	ldr	r1, [r7, #4]
 8003df8:	683a      	ldr	r2, [r7, #0]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	00db      	lsls	r3, r3, #3
 8003dfe:	4413      	add	r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	440b      	add	r3, r1
 8003e04:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d108      	bne.n	8003e20 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6818      	ldr	r0, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003e18:	461a      	mov	r2, r3
 8003e1a:	2100      	movs	r1, #0
 8003e1c:	f003 fd0e 	bl	800783c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	4619      	mov	r1, r3
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f006 ff56 	bl	800acd8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3720      	adds	r7, #32
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	4f54300a 	.word	0x4f54300a
 8003e3c:	4f54310a 	.word	0x4f54310a

08003e40 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	333c      	adds	r3, #60	@ 0x3c
 8003e58:	3304      	adds	r3, #4
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	015a      	lsls	r2, r3, #5
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	4413      	add	r3, r2
 8003e66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	4a15      	ldr	r2, [pc, #84]	@ (8003ec8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d90e      	bls.n	8003e94 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d009      	beq.n	8003e94 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	015a      	lsls	r2, r3, #5
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	4413      	add	r3, r2
 8003e88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e92:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f006 ff0d 	bl	800acb4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	4a0a      	ldr	r2, [pc, #40]	@ (8003ec8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d90c      	bls.n	8003ebc <PCD_EP_OutSetupPacket_int+0x7c>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	799b      	ldrb	r3, [r3, #6]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d108      	bne.n	8003ebc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6818      	ldr	r0, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	2101      	movs	r1, #1
 8003eb8:	f003 fcc0 	bl	800783c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3718      	adds	r7, #24
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	4f54300a 	.word	0x4f54300a

08003ecc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b085      	sub	sp, #20
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	70fb      	strb	r3, [r7, #3]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003ee4:	78fb      	ldrb	r3, [r7, #3]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d107      	bne.n	8003efa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003eea:	883b      	ldrh	r3, [r7, #0]
 8003eec:	0419      	lsls	r1, r3, #16
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68ba      	ldr	r2, [r7, #8]
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ef8:	e028      	b.n	8003f4c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f00:	0c1b      	lsrs	r3, r3, #16
 8003f02:	68ba      	ldr	r2, [r7, #8]
 8003f04:	4413      	add	r3, r2
 8003f06:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f08:	2300      	movs	r3, #0
 8003f0a:	73fb      	strb	r3, [r7, #15]
 8003f0c:	e00d      	b.n	8003f2a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	7bfb      	ldrb	r3, [r7, #15]
 8003f14:	3340      	adds	r3, #64	@ 0x40
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	4413      	add	r3, r2
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	0c1b      	lsrs	r3, r3, #16
 8003f1e:	68ba      	ldr	r2, [r7, #8]
 8003f20:	4413      	add	r3, r2
 8003f22:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f24:	7bfb      	ldrb	r3, [r7, #15]
 8003f26:	3301      	adds	r3, #1
 8003f28:	73fb      	strb	r3, [r7, #15]
 8003f2a:	7bfa      	ldrb	r2, [r7, #15]
 8003f2c:	78fb      	ldrb	r3, [r7, #3]
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d3ec      	bcc.n	8003f0e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003f34:	883b      	ldrh	r3, [r7, #0]
 8003f36:	0418      	lsls	r0, r3, #16
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6819      	ldr	r1, [r3, #0]
 8003f3c:	78fb      	ldrb	r3, [r7, #3]
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	68ba      	ldr	r2, [r7, #8]
 8003f42:	4302      	orrs	r2, r0
 8003f44:	3340      	adds	r3, #64	@ 0x40
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	440b      	add	r3, r1
 8003f4a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3714      	adds	r7, #20
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr

08003f5a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	b083      	sub	sp, #12
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
 8003f62:	460b      	mov	r3, r1
 8003f64:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	887a      	ldrh	r2, [r7, #2]
 8003f6c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	460b      	mov	r3, r1
 8003f86:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b086      	sub	sp, #24
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e267      	b.n	8004476 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d075      	beq.n	800409e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003fb2:	4b88      	ldr	r3, [pc, #544]	@ (80041d4 <HAL_RCC_OscConfig+0x240>)
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f003 030c 	and.w	r3, r3, #12
 8003fba:	2b04      	cmp	r3, #4
 8003fbc:	d00c      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fbe:	4b85      	ldr	r3, [pc, #532]	@ (80041d4 <HAL_RCC_OscConfig+0x240>)
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003fc6:	2b08      	cmp	r3, #8
 8003fc8:	d112      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fca:	4b82      	ldr	r3, [pc, #520]	@ (80041d4 <HAL_RCC_OscConfig+0x240>)
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fd2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fd6:	d10b      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fd8:	4b7e      	ldr	r3, [pc, #504]	@ (80041d4 <HAL_RCC_OscConfig+0x240>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d05b      	beq.n	800409c <HAL_RCC_OscConfig+0x108>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d157      	bne.n	800409c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e242      	b.n	8004476 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ff8:	d106      	bne.n	8004008 <HAL_RCC_OscConfig+0x74>
 8003ffa:	4b76      	ldr	r3, [pc, #472]	@ (80041d4 <HAL_RCC_OscConfig+0x240>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a75      	ldr	r2, [pc, #468]	@ (80041d4 <HAL_RCC_OscConfig+0x240>)
 8004000:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004004:	6013      	str	r3, [r2, #0]
 8004006:	e01d      	b.n	8004044 <HAL_RCC_OscConfig+0xb0>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004010:	d10c      	bne.n	800402c <HAL_RCC_OscConfig+0x98>
 8004012:	4b70      	ldr	r3, [pc, #448]	@ (80041d4 <HAL_RCC_OscConfig+0x240>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a6f      	ldr	r2, [pc, #444]	@ (80041d4 <HAL_RCC_OscConfig+0x240>)
 8004018:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800401c:	6013      	str	r3, [r2, #0]
 800401e:	4b6d      	ldr	r3, [pc, #436]	@ (80041d4 <HAL_RCC_OscConfig+0x240>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a6c      	ldr	r2, [pc, #432]	@ (80041d4 <HAL_RCC_OscConfig+0x240>)
 8004024:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004028:	6013      	str	r3, [r2, #0]
 800402a:	e00b      	b.n	8004044 <HAL_RCC_OscConfig+0xb0>
 800402c:	4b69      	ldr	r3, [pc, #420]	@ (80041d4 <HAL_RCC_OscConfig+0x240>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a68      	ldr	r2, [pc, #416]	@ (80041d4 <HAL_RCC_OscConfig+0x240>)
 8004032:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004036:	6013      	str	r3, [r2, #0]
 8004038:	4b66      	ldr	r3, [pc, #408]	@ (80041d4 <HAL_RCC_OscConfig+0x240>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a65      	ldr	r2, [pc, #404]	@ (80041d4 <HAL_RCC_OscConfig+0x240>)
 800403e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004042:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d013      	beq.n	8004074 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800404c:	f7fd f8d8 	bl	8001200 <HAL_GetTick>
 8004050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004052:	e008      	b.n	8004066 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004054:	f7fd f8d4 	bl	8001200 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b64      	cmp	r3, #100	@ 0x64
 8004060:	d901      	bls.n	8004066 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e207      	b.n	8004476 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004066:	4b5b      	ldr	r3, [pc, #364]	@ (80041d4 <HAL_RCC_OscConfig+0x240>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d0f0      	beq.n	8004054 <HAL_RCC_OscConfig+0xc0>
 8004072:	e014      	b.n	800409e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004074:	f7fd f8c4 	bl	8001200 <HAL_GetTick>
 8004078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800407a:	e008      	b.n	800408e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800407c:	f7fd f8c0 	bl	8001200 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	2b64      	cmp	r3, #100	@ 0x64
 8004088:	d901      	bls.n	800408e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e1f3      	b.n	8004476 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800408e:	4b51      	ldr	r3, [pc, #324]	@ (80041d4 <HAL_RCC_OscConfig+0x240>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1f0      	bne.n	800407c <HAL_RCC_OscConfig+0xe8>
 800409a:	e000      	b.n	800409e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800409c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d063      	beq.n	8004172 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80040aa:	4b4a      	ldr	r3, [pc, #296]	@ (80041d4 <HAL_RCC_OscConfig+0x240>)
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f003 030c 	and.w	r3, r3, #12
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00b      	beq.n	80040ce <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040b6:	4b47      	ldr	r3, [pc, #284]	@ (80041d4 <HAL_RCC_OscConfig+0x240>)
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80040be:	2b08      	cmp	r3, #8
 80040c0:	d11c      	bne.n	80040fc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040c2:	4b44      	ldr	r3, [pc, #272]	@ (80041d4 <HAL_RCC_OscConfig+0x240>)
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d116      	bne.n	80040fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ce:	4b41      	ldr	r3, [pc, #260]	@ (80041d4 <HAL_RCC_OscConfig+0x240>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d005      	beq.n	80040e6 <HAL_RCC_OscConfig+0x152>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d001      	beq.n	80040e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e1c7      	b.n	8004476 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040e6:	4b3b      	ldr	r3, [pc, #236]	@ (80041d4 <HAL_RCC_OscConfig+0x240>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	00db      	lsls	r3, r3, #3
 80040f4:	4937      	ldr	r1, [pc, #220]	@ (80041d4 <HAL_RCC_OscConfig+0x240>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040fa:	e03a      	b.n	8004172 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d020      	beq.n	8004146 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004104:	4b34      	ldr	r3, [pc, #208]	@ (80041d8 <HAL_RCC_OscConfig+0x244>)
 8004106:	2201      	movs	r2, #1
 8004108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800410a:	f7fd f879 	bl	8001200 <HAL_GetTick>
 800410e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004110:	e008      	b.n	8004124 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004112:	f7fd f875 	bl	8001200 <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	2b02      	cmp	r3, #2
 800411e:	d901      	bls.n	8004124 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e1a8      	b.n	8004476 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004124:	4b2b      	ldr	r3, [pc, #172]	@ (80041d4 <HAL_RCC_OscConfig+0x240>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d0f0      	beq.n	8004112 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004130:	4b28      	ldr	r3, [pc, #160]	@ (80041d4 <HAL_RCC_OscConfig+0x240>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	00db      	lsls	r3, r3, #3
 800413e:	4925      	ldr	r1, [pc, #148]	@ (80041d4 <HAL_RCC_OscConfig+0x240>)
 8004140:	4313      	orrs	r3, r2
 8004142:	600b      	str	r3, [r1, #0]
 8004144:	e015      	b.n	8004172 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004146:	4b24      	ldr	r3, [pc, #144]	@ (80041d8 <HAL_RCC_OscConfig+0x244>)
 8004148:	2200      	movs	r2, #0
 800414a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800414c:	f7fd f858 	bl	8001200 <HAL_GetTick>
 8004150:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004152:	e008      	b.n	8004166 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004154:	f7fd f854 	bl	8001200 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	2b02      	cmp	r3, #2
 8004160:	d901      	bls.n	8004166 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e187      	b.n	8004476 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004166:	4b1b      	ldr	r3, [pc, #108]	@ (80041d4 <HAL_RCC_OscConfig+0x240>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d1f0      	bne.n	8004154 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0308 	and.w	r3, r3, #8
 800417a:	2b00      	cmp	r3, #0
 800417c:	d036      	beq.n	80041ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d016      	beq.n	80041b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004186:	4b15      	ldr	r3, [pc, #84]	@ (80041dc <HAL_RCC_OscConfig+0x248>)
 8004188:	2201      	movs	r2, #1
 800418a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800418c:	f7fd f838 	bl	8001200 <HAL_GetTick>
 8004190:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004192:	e008      	b.n	80041a6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004194:	f7fd f834 	bl	8001200 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e167      	b.n	8004476 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041a6:	4b0b      	ldr	r3, [pc, #44]	@ (80041d4 <HAL_RCC_OscConfig+0x240>)
 80041a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d0f0      	beq.n	8004194 <HAL_RCC_OscConfig+0x200>
 80041b2:	e01b      	b.n	80041ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041b4:	4b09      	ldr	r3, [pc, #36]	@ (80041dc <HAL_RCC_OscConfig+0x248>)
 80041b6:	2200      	movs	r2, #0
 80041b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041ba:	f7fd f821 	bl	8001200 <HAL_GetTick>
 80041be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041c0:	e00e      	b.n	80041e0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041c2:	f7fd f81d 	bl	8001200 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d907      	bls.n	80041e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e150      	b.n	8004476 <HAL_RCC_OscConfig+0x4e2>
 80041d4:	40023800 	.word	0x40023800
 80041d8:	42470000 	.word	0x42470000
 80041dc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041e0:	4b88      	ldr	r3, [pc, #544]	@ (8004404 <HAL_RCC_OscConfig+0x470>)
 80041e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041e4:	f003 0302 	and.w	r3, r3, #2
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1ea      	bne.n	80041c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0304 	and.w	r3, r3, #4
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f000 8097 	beq.w	8004328 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041fa:	2300      	movs	r3, #0
 80041fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041fe:	4b81      	ldr	r3, [pc, #516]	@ (8004404 <HAL_RCC_OscConfig+0x470>)
 8004200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004202:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10f      	bne.n	800422a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800420a:	2300      	movs	r3, #0
 800420c:	60bb      	str	r3, [r7, #8]
 800420e:	4b7d      	ldr	r3, [pc, #500]	@ (8004404 <HAL_RCC_OscConfig+0x470>)
 8004210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004212:	4a7c      	ldr	r2, [pc, #496]	@ (8004404 <HAL_RCC_OscConfig+0x470>)
 8004214:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004218:	6413      	str	r3, [r2, #64]	@ 0x40
 800421a:	4b7a      	ldr	r3, [pc, #488]	@ (8004404 <HAL_RCC_OscConfig+0x470>)
 800421c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800421e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004222:	60bb      	str	r3, [r7, #8]
 8004224:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004226:	2301      	movs	r3, #1
 8004228:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800422a:	4b77      	ldr	r3, [pc, #476]	@ (8004408 <HAL_RCC_OscConfig+0x474>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004232:	2b00      	cmp	r3, #0
 8004234:	d118      	bne.n	8004268 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004236:	4b74      	ldr	r3, [pc, #464]	@ (8004408 <HAL_RCC_OscConfig+0x474>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a73      	ldr	r2, [pc, #460]	@ (8004408 <HAL_RCC_OscConfig+0x474>)
 800423c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004240:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004242:	f7fc ffdd 	bl	8001200 <HAL_GetTick>
 8004246:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004248:	e008      	b.n	800425c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800424a:	f7fc ffd9 	bl	8001200 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	2b02      	cmp	r3, #2
 8004256:	d901      	bls.n	800425c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e10c      	b.n	8004476 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800425c:	4b6a      	ldr	r3, [pc, #424]	@ (8004408 <HAL_RCC_OscConfig+0x474>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004264:	2b00      	cmp	r3, #0
 8004266:	d0f0      	beq.n	800424a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d106      	bne.n	800427e <HAL_RCC_OscConfig+0x2ea>
 8004270:	4b64      	ldr	r3, [pc, #400]	@ (8004404 <HAL_RCC_OscConfig+0x470>)
 8004272:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004274:	4a63      	ldr	r2, [pc, #396]	@ (8004404 <HAL_RCC_OscConfig+0x470>)
 8004276:	f043 0301 	orr.w	r3, r3, #1
 800427a:	6713      	str	r3, [r2, #112]	@ 0x70
 800427c:	e01c      	b.n	80042b8 <HAL_RCC_OscConfig+0x324>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	2b05      	cmp	r3, #5
 8004284:	d10c      	bne.n	80042a0 <HAL_RCC_OscConfig+0x30c>
 8004286:	4b5f      	ldr	r3, [pc, #380]	@ (8004404 <HAL_RCC_OscConfig+0x470>)
 8004288:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800428a:	4a5e      	ldr	r2, [pc, #376]	@ (8004404 <HAL_RCC_OscConfig+0x470>)
 800428c:	f043 0304 	orr.w	r3, r3, #4
 8004290:	6713      	str	r3, [r2, #112]	@ 0x70
 8004292:	4b5c      	ldr	r3, [pc, #368]	@ (8004404 <HAL_RCC_OscConfig+0x470>)
 8004294:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004296:	4a5b      	ldr	r2, [pc, #364]	@ (8004404 <HAL_RCC_OscConfig+0x470>)
 8004298:	f043 0301 	orr.w	r3, r3, #1
 800429c:	6713      	str	r3, [r2, #112]	@ 0x70
 800429e:	e00b      	b.n	80042b8 <HAL_RCC_OscConfig+0x324>
 80042a0:	4b58      	ldr	r3, [pc, #352]	@ (8004404 <HAL_RCC_OscConfig+0x470>)
 80042a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042a4:	4a57      	ldr	r2, [pc, #348]	@ (8004404 <HAL_RCC_OscConfig+0x470>)
 80042a6:	f023 0301 	bic.w	r3, r3, #1
 80042aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80042ac:	4b55      	ldr	r3, [pc, #340]	@ (8004404 <HAL_RCC_OscConfig+0x470>)
 80042ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042b0:	4a54      	ldr	r2, [pc, #336]	@ (8004404 <HAL_RCC_OscConfig+0x470>)
 80042b2:	f023 0304 	bic.w	r3, r3, #4
 80042b6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d015      	beq.n	80042ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c0:	f7fc ff9e 	bl	8001200 <HAL_GetTick>
 80042c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042c6:	e00a      	b.n	80042de <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042c8:	f7fc ff9a 	bl	8001200 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d901      	bls.n	80042de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e0cb      	b.n	8004476 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042de:	4b49      	ldr	r3, [pc, #292]	@ (8004404 <HAL_RCC_OscConfig+0x470>)
 80042e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042e2:	f003 0302 	and.w	r3, r3, #2
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d0ee      	beq.n	80042c8 <HAL_RCC_OscConfig+0x334>
 80042ea:	e014      	b.n	8004316 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042ec:	f7fc ff88 	bl	8001200 <HAL_GetTick>
 80042f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042f2:	e00a      	b.n	800430a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042f4:	f7fc ff84 	bl	8001200 <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004302:	4293      	cmp	r3, r2
 8004304:	d901      	bls.n	800430a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e0b5      	b.n	8004476 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800430a:	4b3e      	ldr	r3, [pc, #248]	@ (8004404 <HAL_RCC_OscConfig+0x470>)
 800430c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800430e:	f003 0302 	and.w	r3, r3, #2
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1ee      	bne.n	80042f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004316:	7dfb      	ldrb	r3, [r7, #23]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d105      	bne.n	8004328 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800431c:	4b39      	ldr	r3, [pc, #228]	@ (8004404 <HAL_RCC_OscConfig+0x470>)
 800431e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004320:	4a38      	ldr	r2, [pc, #224]	@ (8004404 <HAL_RCC_OscConfig+0x470>)
 8004322:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004326:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	2b00      	cmp	r3, #0
 800432e:	f000 80a1 	beq.w	8004474 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004332:	4b34      	ldr	r3, [pc, #208]	@ (8004404 <HAL_RCC_OscConfig+0x470>)
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f003 030c 	and.w	r3, r3, #12
 800433a:	2b08      	cmp	r3, #8
 800433c:	d05c      	beq.n	80043f8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	2b02      	cmp	r3, #2
 8004344:	d141      	bne.n	80043ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004346:	4b31      	ldr	r3, [pc, #196]	@ (800440c <HAL_RCC_OscConfig+0x478>)
 8004348:	2200      	movs	r2, #0
 800434a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800434c:	f7fc ff58 	bl	8001200 <HAL_GetTick>
 8004350:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004352:	e008      	b.n	8004366 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004354:	f7fc ff54 	bl	8001200 <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	2b02      	cmp	r3, #2
 8004360:	d901      	bls.n	8004366 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e087      	b.n	8004476 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004366:	4b27      	ldr	r3, [pc, #156]	@ (8004404 <HAL_RCC_OscConfig+0x470>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d1f0      	bne.n	8004354 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	69da      	ldr	r2, [r3, #28]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	431a      	orrs	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004380:	019b      	lsls	r3, r3, #6
 8004382:	431a      	orrs	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004388:	085b      	lsrs	r3, r3, #1
 800438a:	3b01      	subs	r3, #1
 800438c:	041b      	lsls	r3, r3, #16
 800438e:	431a      	orrs	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004394:	061b      	lsls	r3, r3, #24
 8004396:	491b      	ldr	r1, [pc, #108]	@ (8004404 <HAL_RCC_OscConfig+0x470>)
 8004398:	4313      	orrs	r3, r2
 800439a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800439c:	4b1b      	ldr	r3, [pc, #108]	@ (800440c <HAL_RCC_OscConfig+0x478>)
 800439e:	2201      	movs	r2, #1
 80043a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a2:	f7fc ff2d 	bl	8001200 <HAL_GetTick>
 80043a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043a8:	e008      	b.n	80043bc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043aa:	f7fc ff29 	bl	8001200 <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d901      	bls.n	80043bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e05c      	b.n	8004476 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043bc:	4b11      	ldr	r3, [pc, #68]	@ (8004404 <HAL_RCC_OscConfig+0x470>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d0f0      	beq.n	80043aa <HAL_RCC_OscConfig+0x416>
 80043c8:	e054      	b.n	8004474 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ca:	4b10      	ldr	r3, [pc, #64]	@ (800440c <HAL_RCC_OscConfig+0x478>)
 80043cc:	2200      	movs	r2, #0
 80043ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043d0:	f7fc ff16 	bl	8001200 <HAL_GetTick>
 80043d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043d6:	e008      	b.n	80043ea <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043d8:	f7fc ff12 	bl	8001200 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e045      	b.n	8004476 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ea:	4b06      	ldr	r3, [pc, #24]	@ (8004404 <HAL_RCC_OscConfig+0x470>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1f0      	bne.n	80043d8 <HAL_RCC_OscConfig+0x444>
 80043f6:	e03d      	b.n	8004474 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	699b      	ldr	r3, [r3, #24]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d107      	bne.n	8004410 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e038      	b.n	8004476 <HAL_RCC_OscConfig+0x4e2>
 8004404:	40023800 	.word	0x40023800
 8004408:	40007000 	.word	0x40007000
 800440c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004410:	4b1b      	ldr	r3, [pc, #108]	@ (8004480 <HAL_RCC_OscConfig+0x4ec>)
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	2b01      	cmp	r3, #1
 800441c:	d028      	beq.n	8004470 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004428:	429a      	cmp	r2, r3
 800442a:	d121      	bne.n	8004470 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004436:	429a      	cmp	r2, r3
 8004438:	d11a      	bne.n	8004470 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004440:	4013      	ands	r3, r2
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004446:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004448:	4293      	cmp	r3, r2
 800444a:	d111      	bne.n	8004470 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004456:	085b      	lsrs	r3, r3, #1
 8004458:	3b01      	subs	r3, #1
 800445a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800445c:	429a      	cmp	r2, r3
 800445e:	d107      	bne.n	8004470 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800446a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800446c:	429a      	cmp	r2, r3
 800446e:	d001      	beq.n	8004474 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e000      	b.n	8004476 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3718      	adds	r7, #24
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	40023800 	.word	0x40023800

08004484 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d101      	bne.n	8004498 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e0cc      	b.n	8004632 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004498:	4b68      	ldr	r3, [pc, #416]	@ (800463c <HAL_RCC_ClockConfig+0x1b8>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0307 	and.w	r3, r3, #7
 80044a0:	683a      	ldr	r2, [r7, #0]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d90c      	bls.n	80044c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044a6:	4b65      	ldr	r3, [pc, #404]	@ (800463c <HAL_RCC_ClockConfig+0x1b8>)
 80044a8:	683a      	ldr	r2, [r7, #0]
 80044aa:	b2d2      	uxtb	r2, r2
 80044ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ae:	4b63      	ldr	r3, [pc, #396]	@ (800463c <HAL_RCC_ClockConfig+0x1b8>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0307 	and.w	r3, r3, #7
 80044b6:	683a      	ldr	r2, [r7, #0]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d001      	beq.n	80044c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e0b8      	b.n	8004632 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0302 	and.w	r3, r3, #2
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d020      	beq.n	800450e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0304 	and.w	r3, r3, #4
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d005      	beq.n	80044e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044d8:	4b59      	ldr	r3, [pc, #356]	@ (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	4a58      	ldr	r2, [pc, #352]	@ (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 80044de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80044e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0308 	and.w	r3, r3, #8
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d005      	beq.n	80044fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044f0:	4b53      	ldr	r3, [pc, #332]	@ (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	4a52      	ldr	r2, [pc, #328]	@ (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 80044f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80044fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044fc:	4b50      	ldr	r3, [pc, #320]	@ (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	494d      	ldr	r1, [pc, #308]	@ (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 800450a:	4313      	orrs	r3, r2
 800450c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	2b00      	cmp	r3, #0
 8004518:	d044      	beq.n	80045a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	2b01      	cmp	r3, #1
 8004520:	d107      	bne.n	8004532 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004522:	4b47      	ldr	r3, [pc, #284]	@ (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d119      	bne.n	8004562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e07f      	b.n	8004632 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	2b02      	cmp	r3, #2
 8004538:	d003      	beq.n	8004542 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800453e:	2b03      	cmp	r3, #3
 8004540:	d107      	bne.n	8004552 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004542:	4b3f      	ldr	r3, [pc, #252]	@ (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d109      	bne.n	8004562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e06f      	b.n	8004632 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004552:	4b3b      	ldr	r3, [pc, #236]	@ (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e067      	b.n	8004632 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004562:	4b37      	ldr	r3, [pc, #220]	@ (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f023 0203 	bic.w	r2, r3, #3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	4934      	ldr	r1, [pc, #208]	@ (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 8004570:	4313      	orrs	r3, r2
 8004572:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004574:	f7fc fe44 	bl	8001200 <HAL_GetTick>
 8004578:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800457a:	e00a      	b.n	8004592 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800457c:	f7fc fe40 	bl	8001200 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	f241 3288 	movw	r2, #5000	@ 0x1388
 800458a:	4293      	cmp	r3, r2
 800458c:	d901      	bls.n	8004592 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e04f      	b.n	8004632 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004592:	4b2b      	ldr	r3, [pc, #172]	@ (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f003 020c 	and.w	r2, r3, #12
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d1eb      	bne.n	800457c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045a4:	4b25      	ldr	r3, [pc, #148]	@ (800463c <HAL_RCC_ClockConfig+0x1b8>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0307 	and.w	r3, r3, #7
 80045ac:	683a      	ldr	r2, [r7, #0]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d20c      	bcs.n	80045cc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045b2:	4b22      	ldr	r3, [pc, #136]	@ (800463c <HAL_RCC_ClockConfig+0x1b8>)
 80045b4:	683a      	ldr	r2, [r7, #0]
 80045b6:	b2d2      	uxtb	r2, r2
 80045b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ba:	4b20      	ldr	r3, [pc, #128]	@ (800463c <HAL_RCC_ClockConfig+0x1b8>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0307 	and.w	r3, r3, #7
 80045c2:	683a      	ldr	r2, [r7, #0]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d001      	beq.n	80045cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e032      	b.n	8004632 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0304 	and.w	r3, r3, #4
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d008      	beq.n	80045ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045d8:	4b19      	ldr	r3, [pc, #100]	@ (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	4916      	ldr	r1, [pc, #88]	@ (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0308 	and.w	r3, r3, #8
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d009      	beq.n	800460a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045f6:	4b12      	ldr	r3, [pc, #72]	@ (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	00db      	lsls	r3, r3, #3
 8004604:	490e      	ldr	r1, [pc, #56]	@ (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 8004606:	4313      	orrs	r3, r2
 8004608:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800460a:	f000 f821 	bl	8004650 <HAL_RCC_GetSysClockFreq>
 800460e:	4602      	mov	r2, r0
 8004610:	4b0b      	ldr	r3, [pc, #44]	@ (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	091b      	lsrs	r3, r3, #4
 8004616:	f003 030f 	and.w	r3, r3, #15
 800461a:	490a      	ldr	r1, [pc, #40]	@ (8004644 <HAL_RCC_ClockConfig+0x1c0>)
 800461c:	5ccb      	ldrb	r3, [r1, r3]
 800461e:	fa22 f303 	lsr.w	r3, r2, r3
 8004622:	4a09      	ldr	r2, [pc, #36]	@ (8004648 <HAL_RCC_ClockConfig+0x1c4>)
 8004624:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004626:	4b09      	ldr	r3, [pc, #36]	@ (800464c <HAL_RCC_ClockConfig+0x1c8>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4618      	mov	r0, r3
 800462c:	f7fc fda4 	bl	8001178 <HAL_InitTick>

  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3710      	adds	r7, #16
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	40023c00 	.word	0x40023c00
 8004640:	40023800 	.word	0x40023800
 8004644:	0800bc04 	.word	0x0800bc04
 8004648:	20000040 	.word	0x20000040
 800464c:	20000044 	.word	0x20000044

08004650 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004650:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004654:	b094      	sub	sp, #80	@ 0x50
 8004656:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004658:	2300      	movs	r3, #0
 800465a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800465c:	2300      	movs	r3, #0
 800465e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004660:	2300      	movs	r3, #0
 8004662:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004664:	2300      	movs	r3, #0
 8004666:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004668:	4b79      	ldr	r3, [pc, #484]	@ (8004850 <HAL_RCC_GetSysClockFreq+0x200>)
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	f003 030c 	and.w	r3, r3, #12
 8004670:	2b08      	cmp	r3, #8
 8004672:	d00d      	beq.n	8004690 <HAL_RCC_GetSysClockFreq+0x40>
 8004674:	2b08      	cmp	r3, #8
 8004676:	f200 80e1 	bhi.w	800483c <HAL_RCC_GetSysClockFreq+0x1ec>
 800467a:	2b00      	cmp	r3, #0
 800467c:	d002      	beq.n	8004684 <HAL_RCC_GetSysClockFreq+0x34>
 800467e:	2b04      	cmp	r3, #4
 8004680:	d003      	beq.n	800468a <HAL_RCC_GetSysClockFreq+0x3a>
 8004682:	e0db      	b.n	800483c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004684:	4b73      	ldr	r3, [pc, #460]	@ (8004854 <HAL_RCC_GetSysClockFreq+0x204>)
 8004686:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004688:	e0db      	b.n	8004842 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800468a:	4b73      	ldr	r3, [pc, #460]	@ (8004858 <HAL_RCC_GetSysClockFreq+0x208>)
 800468c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800468e:	e0d8      	b.n	8004842 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004690:	4b6f      	ldr	r3, [pc, #444]	@ (8004850 <HAL_RCC_GetSysClockFreq+0x200>)
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004698:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800469a:	4b6d      	ldr	r3, [pc, #436]	@ (8004850 <HAL_RCC_GetSysClockFreq+0x200>)
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d063      	beq.n	800476e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046a6:	4b6a      	ldr	r3, [pc, #424]	@ (8004850 <HAL_RCC_GetSysClockFreq+0x200>)
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	099b      	lsrs	r3, r3, #6
 80046ac:	2200      	movs	r2, #0
 80046ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80046b0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80046b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80046ba:	2300      	movs	r3, #0
 80046bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80046be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80046c2:	4622      	mov	r2, r4
 80046c4:	462b      	mov	r3, r5
 80046c6:	f04f 0000 	mov.w	r0, #0
 80046ca:	f04f 0100 	mov.w	r1, #0
 80046ce:	0159      	lsls	r1, r3, #5
 80046d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046d4:	0150      	lsls	r0, r2, #5
 80046d6:	4602      	mov	r2, r0
 80046d8:	460b      	mov	r3, r1
 80046da:	4621      	mov	r1, r4
 80046dc:	1a51      	subs	r1, r2, r1
 80046de:	6139      	str	r1, [r7, #16]
 80046e0:	4629      	mov	r1, r5
 80046e2:	eb63 0301 	sbc.w	r3, r3, r1
 80046e6:	617b      	str	r3, [r7, #20]
 80046e8:	f04f 0200 	mov.w	r2, #0
 80046ec:	f04f 0300 	mov.w	r3, #0
 80046f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046f4:	4659      	mov	r1, fp
 80046f6:	018b      	lsls	r3, r1, #6
 80046f8:	4651      	mov	r1, sl
 80046fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80046fe:	4651      	mov	r1, sl
 8004700:	018a      	lsls	r2, r1, #6
 8004702:	4651      	mov	r1, sl
 8004704:	ebb2 0801 	subs.w	r8, r2, r1
 8004708:	4659      	mov	r1, fp
 800470a:	eb63 0901 	sbc.w	r9, r3, r1
 800470e:	f04f 0200 	mov.w	r2, #0
 8004712:	f04f 0300 	mov.w	r3, #0
 8004716:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800471a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800471e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004722:	4690      	mov	r8, r2
 8004724:	4699      	mov	r9, r3
 8004726:	4623      	mov	r3, r4
 8004728:	eb18 0303 	adds.w	r3, r8, r3
 800472c:	60bb      	str	r3, [r7, #8]
 800472e:	462b      	mov	r3, r5
 8004730:	eb49 0303 	adc.w	r3, r9, r3
 8004734:	60fb      	str	r3, [r7, #12]
 8004736:	f04f 0200 	mov.w	r2, #0
 800473a:	f04f 0300 	mov.w	r3, #0
 800473e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004742:	4629      	mov	r1, r5
 8004744:	024b      	lsls	r3, r1, #9
 8004746:	4621      	mov	r1, r4
 8004748:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800474c:	4621      	mov	r1, r4
 800474e:	024a      	lsls	r2, r1, #9
 8004750:	4610      	mov	r0, r2
 8004752:	4619      	mov	r1, r3
 8004754:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004756:	2200      	movs	r2, #0
 8004758:	62bb      	str	r3, [r7, #40]	@ 0x28
 800475a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800475c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004760:	f7fb fd86 	bl	8000270 <__aeabi_uldivmod>
 8004764:	4602      	mov	r2, r0
 8004766:	460b      	mov	r3, r1
 8004768:	4613      	mov	r3, r2
 800476a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800476c:	e058      	b.n	8004820 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800476e:	4b38      	ldr	r3, [pc, #224]	@ (8004850 <HAL_RCC_GetSysClockFreq+0x200>)
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	099b      	lsrs	r3, r3, #6
 8004774:	2200      	movs	r2, #0
 8004776:	4618      	mov	r0, r3
 8004778:	4611      	mov	r1, r2
 800477a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800477e:	623b      	str	r3, [r7, #32]
 8004780:	2300      	movs	r3, #0
 8004782:	627b      	str	r3, [r7, #36]	@ 0x24
 8004784:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004788:	4642      	mov	r2, r8
 800478a:	464b      	mov	r3, r9
 800478c:	f04f 0000 	mov.w	r0, #0
 8004790:	f04f 0100 	mov.w	r1, #0
 8004794:	0159      	lsls	r1, r3, #5
 8004796:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800479a:	0150      	lsls	r0, r2, #5
 800479c:	4602      	mov	r2, r0
 800479e:	460b      	mov	r3, r1
 80047a0:	4641      	mov	r1, r8
 80047a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80047a6:	4649      	mov	r1, r9
 80047a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80047ac:	f04f 0200 	mov.w	r2, #0
 80047b0:	f04f 0300 	mov.w	r3, #0
 80047b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80047b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80047bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80047c0:	ebb2 040a 	subs.w	r4, r2, sl
 80047c4:	eb63 050b 	sbc.w	r5, r3, fp
 80047c8:	f04f 0200 	mov.w	r2, #0
 80047cc:	f04f 0300 	mov.w	r3, #0
 80047d0:	00eb      	lsls	r3, r5, #3
 80047d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047d6:	00e2      	lsls	r2, r4, #3
 80047d8:	4614      	mov	r4, r2
 80047da:	461d      	mov	r5, r3
 80047dc:	4643      	mov	r3, r8
 80047de:	18e3      	adds	r3, r4, r3
 80047e0:	603b      	str	r3, [r7, #0]
 80047e2:	464b      	mov	r3, r9
 80047e4:	eb45 0303 	adc.w	r3, r5, r3
 80047e8:	607b      	str	r3, [r7, #4]
 80047ea:	f04f 0200 	mov.w	r2, #0
 80047ee:	f04f 0300 	mov.w	r3, #0
 80047f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80047f6:	4629      	mov	r1, r5
 80047f8:	028b      	lsls	r3, r1, #10
 80047fa:	4621      	mov	r1, r4
 80047fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004800:	4621      	mov	r1, r4
 8004802:	028a      	lsls	r2, r1, #10
 8004804:	4610      	mov	r0, r2
 8004806:	4619      	mov	r1, r3
 8004808:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800480a:	2200      	movs	r2, #0
 800480c:	61bb      	str	r3, [r7, #24]
 800480e:	61fa      	str	r2, [r7, #28]
 8004810:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004814:	f7fb fd2c 	bl	8000270 <__aeabi_uldivmod>
 8004818:	4602      	mov	r2, r0
 800481a:	460b      	mov	r3, r1
 800481c:	4613      	mov	r3, r2
 800481e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004820:	4b0b      	ldr	r3, [pc, #44]	@ (8004850 <HAL_RCC_GetSysClockFreq+0x200>)
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	0c1b      	lsrs	r3, r3, #16
 8004826:	f003 0303 	and.w	r3, r3, #3
 800482a:	3301      	adds	r3, #1
 800482c:	005b      	lsls	r3, r3, #1
 800482e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004830:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004832:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004834:	fbb2 f3f3 	udiv	r3, r2, r3
 8004838:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800483a:	e002      	b.n	8004842 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800483c:	4b05      	ldr	r3, [pc, #20]	@ (8004854 <HAL_RCC_GetSysClockFreq+0x204>)
 800483e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004840:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004842:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004844:	4618      	mov	r0, r3
 8004846:	3750      	adds	r7, #80	@ 0x50
 8004848:	46bd      	mov	sp, r7
 800484a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800484e:	bf00      	nop
 8004850:	40023800 	.word	0x40023800
 8004854:	00f42400 	.word	0x00f42400
 8004858:	007a1200 	.word	0x007a1200

0800485c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800485c:	b480      	push	{r7}
 800485e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004860:	4b03      	ldr	r3, [pc, #12]	@ (8004870 <HAL_RCC_GetHCLKFreq+0x14>)
 8004862:	681b      	ldr	r3, [r3, #0]
}
 8004864:	4618      	mov	r0, r3
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	20000040 	.word	0x20000040

08004874 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004878:	f7ff fff0 	bl	800485c <HAL_RCC_GetHCLKFreq>
 800487c:	4602      	mov	r2, r0
 800487e:	4b05      	ldr	r3, [pc, #20]	@ (8004894 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	0a9b      	lsrs	r3, r3, #10
 8004884:	f003 0307 	and.w	r3, r3, #7
 8004888:	4903      	ldr	r1, [pc, #12]	@ (8004898 <HAL_RCC_GetPCLK1Freq+0x24>)
 800488a:	5ccb      	ldrb	r3, [r1, r3]
 800488c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004890:	4618      	mov	r0, r3
 8004892:	bd80      	pop	{r7, pc}
 8004894:	40023800 	.word	0x40023800
 8004898:	0800bc14 	.word	0x0800bc14

0800489c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80048a0:	f7ff ffdc 	bl	800485c <HAL_RCC_GetHCLKFreq>
 80048a4:	4602      	mov	r2, r0
 80048a6:	4b05      	ldr	r3, [pc, #20]	@ (80048bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	0b5b      	lsrs	r3, r3, #13
 80048ac:	f003 0307 	and.w	r3, r3, #7
 80048b0:	4903      	ldr	r1, [pc, #12]	@ (80048c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048b2:	5ccb      	ldrb	r3, [r1, r3]
 80048b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	40023800 	.word	0x40023800
 80048c0:	0800bc14 	.word	0x0800bc14

080048c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d101      	bne.n	80048d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e041      	b.n	800495a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d106      	bne.n	80048f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f7fc f9fe 	bl	8000cec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2202      	movs	r2, #2
 80048f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	3304      	adds	r3, #4
 8004900:	4619      	mov	r1, r3
 8004902:	4610      	mov	r0, r2
 8004904:	f000 fa7e 	bl	8004e04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3708      	adds	r7, #8
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
	...

08004964 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004964:	b480      	push	{r7}
 8004966:	b085      	sub	sp, #20
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004972:	b2db      	uxtb	r3, r3
 8004974:	2b01      	cmp	r3, #1
 8004976:	d001      	beq.n	800497c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e04e      	b.n	8004a1a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2202      	movs	r2, #2
 8004980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68da      	ldr	r2, [r3, #12]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f042 0201 	orr.w	r2, r2, #1
 8004992:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a23      	ldr	r2, [pc, #140]	@ (8004a28 <HAL_TIM_Base_Start_IT+0xc4>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d022      	beq.n	80049e4 <HAL_TIM_Base_Start_IT+0x80>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049a6:	d01d      	beq.n	80049e4 <HAL_TIM_Base_Start_IT+0x80>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a1f      	ldr	r2, [pc, #124]	@ (8004a2c <HAL_TIM_Base_Start_IT+0xc8>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d018      	beq.n	80049e4 <HAL_TIM_Base_Start_IT+0x80>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a1e      	ldr	r2, [pc, #120]	@ (8004a30 <HAL_TIM_Base_Start_IT+0xcc>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d013      	beq.n	80049e4 <HAL_TIM_Base_Start_IT+0x80>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a1c      	ldr	r2, [pc, #112]	@ (8004a34 <HAL_TIM_Base_Start_IT+0xd0>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d00e      	beq.n	80049e4 <HAL_TIM_Base_Start_IT+0x80>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a1b      	ldr	r2, [pc, #108]	@ (8004a38 <HAL_TIM_Base_Start_IT+0xd4>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d009      	beq.n	80049e4 <HAL_TIM_Base_Start_IT+0x80>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a19      	ldr	r2, [pc, #100]	@ (8004a3c <HAL_TIM_Base_Start_IT+0xd8>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d004      	beq.n	80049e4 <HAL_TIM_Base_Start_IT+0x80>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a18      	ldr	r2, [pc, #96]	@ (8004a40 <HAL_TIM_Base_Start_IT+0xdc>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d111      	bne.n	8004a08 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f003 0307 	and.w	r3, r3, #7
 80049ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2b06      	cmp	r3, #6
 80049f4:	d010      	beq.n	8004a18 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f042 0201 	orr.w	r2, r2, #1
 8004a04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a06:	e007      	b.n	8004a18 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f042 0201 	orr.w	r2, r2, #1
 8004a16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3714      	adds	r7, #20
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	40010000 	.word	0x40010000
 8004a2c:	40000400 	.word	0x40000400
 8004a30:	40000800 	.word	0x40000800
 8004a34:	40000c00 	.word	0x40000c00
 8004a38:	40010400 	.word	0x40010400
 8004a3c:	40014000 	.word	0x40014000
 8004a40:	40001800 	.word	0x40001800

08004a44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	f003 0302 	and.w	r3, r3, #2
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d020      	beq.n	8004aa8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d01b      	beq.n	8004aa8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f06f 0202 	mvn.w	r2, #2
 8004a78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	f003 0303 	and.w	r3, r3, #3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d003      	beq.n	8004a96 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 f999 	bl	8004dc6 <HAL_TIM_IC_CaptureCallback>
 8004a94:	e005      	b.n	8004aa2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 f98b 	bl	8004db2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f000 f99c 	bl	8004dda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	f003 0304 	and.w	r3, r3, #4
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d020      	beq.n	8004af4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f003 0304 	and.w	r3, r3, #4
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d01b      	beq.n	8004af4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f06f 0204 	mvn.w	r2, #4
 8004ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2202      	movs	r2, #2
 8004aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d003      	beq.n	8004ae2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 f973 	bl	8004dc6 <HAL_TIM_IC_CaptureCallback>
 8004ae0:	e005      	b.n	8004aee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 f965 	bl	8004db2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f000 f976 	bl	8004dda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	f003 0308 	and.w	r3, r3, #8
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d020      	beq.n	8004b40 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f003 0308 	and.w	r3, r3, #8
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d01b      	beq.n	8004b40 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f06f 0208 	mvn.w	r2, #8
 8004b10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2204      	movs	r2, #4
 8004b16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	69db      	ldr	r3, [r3, #28]
 8004b1e:	f003 0303 	and.w	r3, r3, #3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d003      	beq.n	8004b2e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 f94d 	bl	8004dc6 <HAL_TIM_IC_CaptureCallback>
 8004b2c:	e005      	b.n	8004b3a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f93f 	bl	8004db2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 f950 	bl	8004dda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	f003 0310 	and.w	r3, r3, #16
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d020      	beq.n	8004b8c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f003 0310 	and.w	r3, r3, #16
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d01b      	beq.n	8004b8c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f06f 0210 	mvn.w	r2, #16
 8004b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2208      	movs	r2, #8
 8004b62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	69db      	ldr	r3, [r3, #28]
 8004b6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d003      	beq.n	8004b7a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f927 	bl	8004dc6 <HAL_TIM_IC_CaptureCallback>
 8004b78:	e005      	b.n	8004b86 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f919 	bl	8004db2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 f92a 	bl	8004dda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00c      	beq.n	8004bb0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f003 0301 	and.w	r3, r3, #1
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d007      	beq.n	8004bb0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f06f 0201 	mvn.w	r2, #1
 8004ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f003 f9bc 	bl	8007f28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00c      	beq.n	8004bd4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d007      	beq.n	8004bd4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004bcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 fade 	bl	8005190 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00c      	beq.n	8004bf8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d007      	beq.n	8004bf8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 f8fb 	bl	8004dee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	f003 0320 	and.w	r3, r3, #32
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00c      	beq.n	8004c1c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f003 0320 	and.w	r3, r3, #32
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d007      	beq.n	8004c1c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f06f 0220 	mvn.w	r2, #32
 8004c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 fab0 	bl	800517c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c1c:	bf00      	nop
 8004c1e:	3710      	adds	r7, #16
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d101      	bne.n	8004c40 <HAL_TIM_ConfigClockSource+0x1c>
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	e0b4      	b.n	8004daa <HAL_TIM_ConfigClockSource+0x186>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2202      	movs	r2, #2
 8004c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004c5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68ba      	ldr	r2, [r7, #8]
 8004c6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c78:	d03e      	beq.n	8004cf8 <HAL_TIM_ConfigClockSource+0xd4>
 8004c7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c7e:	f200 8087 	bhi.w	8004d90 <HAL_TIM_ConfigClockSource+0x16c>
 8004c82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c86:	f000 8086 	beq.w	8004d96 <HAL_TIM_ConfigClockSource+0x172>
 8004c8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c8e:	d87f      	bhi.n	8004d90 <HAL_TIM_ConfigClockSource+0x16c>
 8004c90:	2b70      	cmp	r3, #112	@ 0x70
 8004c92:	d01a      	beq.n	8004cca <HAL_TIM_ConfigClockSource+0xa6>
 8004c94:	2b70      	cmp	r3, #112	@ 0x70
 8004c96:	d87b      	bhi.n	8004d90 <HAL_TIM_ConfigClockSource+0x16c>
 8004c98:	2b60      	cmp	r3, #96	@ 0x60
 8004c9a:	d050      	beq.n	8004d3e <HAL_TIM_ConfigClockSource+0x11a>
 8004c9c:	2b60      	cmp	r3, #96	@ 0x60
 8004c9e:	d877      	bhi.n	8004d90 <HAL_TIM_ConfigClockSource+0x16c>
 8004ca0:	2b50      	cmp	r3, #80	@ 0x50
 8004ca2:	d03c      	beq.n	8004d1e <HAL_TIM_ConfigClockSource+0xfa>
 8004ca4:	2b50      	cmp	r3, #80	@ 0x50
 8004ca6:	d873      	bhi.n	8004d90 <HAL_TIM_ConfigClockSource+0x16c>
 8004ca8:	2b40      	cmp	r3, #64	@ 0x40
 8004caa:	d058      	beq.n	8004d5e <HAL_TIM_ConfigClockSource+0x13a>
 8004cac:	2b40      	cmp	r3, #64	@ 0x40
 8004cae:	d86f      	bhi.n	8004d90 <HAL_TIM_ConfigClockSource+0x16c>
 8004cb0:	2b30      	cmp	r3, #48	@ 0x30
 8004cb2:	d064      	beq.n	8004d7e <HAL_TIM_ConfigClockSource+0x15a>
 8004cb4:	2b30      	cmp	r3, #48	@ 0x30
 8004cb6:	d86b      	bhi.n	8004d90 <HAL_TIM_ConfigClockSource+0x16c>
 8004cb8:	2b20      	cmp	r3, #32
 8004cba:	d060      	beq.n	8004d7e <HAL_TIM_ConfigClockSource+0x15a>
 8004cbc:	2b20      	cmp	r3, #32
 8004cbe:	d867      	bhi.n	8004d90 <HAL_TIM_ConfigClockSource+0x16c>
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d05c      	beq.n	8004d7e <HAL_TIM_ConfigClockSource+0x15a>
 8004cc4:	2b10      	cmp	r3, #16
 8004cc6:	d05a      	beq.n	8004d7e <HAL_TIM_ConfigClockSource+0x15a>
 8004cc8:	e062      	b.n	8004d90 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cda:	f000 f9b3 	bl	8005044 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004cec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68ba      	ldr	r2, [r7, #8]
 8004cf4:	609a      	str	r2, [r3, #8]
      break;
 8004cf6:	e04f      	b.n	8004d98 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d08:	f000 f99c 	bl	8005044 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	689a      	ldr	r2, [r3, #8]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d1a:	609a      	str	r2, [r3, #8]
      break;
 8004d1c:	e03c      	b.n	8004d98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	f000 f910 	bl	8004f50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2150      	movs	r1, #80	@ 0x50
 8004d36:	4618      	mov	r0, r3
 8004d38:	f000 f969 	bl	800500e <TIM_ITRx_SetConfig>
      break;
 8004d3c:	e02c      	b.n	8004d98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	f000 f92f 	bl	8004fae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2160      	movs	r1, #96	@ 0x60
 8004d56:	4618      	mov	r0, r3
 8004d58:	f000 f959 	bl	800500e <TIM_ITRx_SetConfig>
      break;
 8004d5c:	e01c      	b.n	8004d98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	f000 f8f0 	bl	8004f50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2140      	movs	r1, #64	@ 0x40
 8004d76:	4618      	mov	r0, r3
 8004d78:	f000 f949 	bl	800500e <TIM_ITRx_SetConfig>
      break;
 8004d7c:	e00c      	b.n	8004d98 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4619      	mov	r1, r3
 8004d88:	4610      	mov	r0, r2
 8004d8a:	f000 f940 	bl	800500e <TIM_ITRx_SetConfig>
      break;
 8004d8e:	e003      	b.n	8004d98 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	73fb      	strb	r3, [r7, #15]
      break;
 8004d94:	e000      	b.n	8004d98 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3710      	adds	r7, #16
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004db2:	b480      	push	{r7}
 8004db4:	b083      	sub	sp, #12
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004dba:	bf00      	nop
 8004dbc:	370c      	adds	r7, #12
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr

08004dc6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004dc6:	b480      	push	{r7}
 8004dc8:	b083      	sub	sp, #12
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004dce:	bf00      	nop
 8004dd0:	370c      	adds	r7, #12
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr

08004dda <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004dda:	b480      	push	{r7}
 8004ddc:	b083      	sub	sp, #12
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004de2:	bf00      	nop
 8004de4:	370c      	adds	r7, #12
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr

08004dee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004dee:	b480      	push	{r7}
 8004df0:	b083      	sub	sp, #12
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004df6:	bf00      	nop
 8004df8:	370c      	adds	r7, #12
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
	...

08004e04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b085      	sub	sp, #20
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a43      	ldr	r2, [pc, #268]	@ (8004f24 <TIM_Base_SetConfig+0x120>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d013      	beq.n	8004e44 <TIM_Base_SetConfig+0x40>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e22:	d00f      	beq.n	8004e44 <TIM_Base_SetConfig+0x40>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a40      	ldr	r2, [pc, #256]	@ (8004f28 <TIM_Base_SetConfig+0x124>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d00b      	beq.n	8004e44 <TIM_Base_SetConfig+0x40>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a3f      	ldr	r2, [pc, #252]	@ (8004f2c <TIM_Base_SetConfig+0x128>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d007      	beq.n	8004e44 <TIM_Base_SetConfig+0x40>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4a3e      	ldr	r2, [pc, #248]	@ (8004f30 <TIM_Base_SetConfig+0x12c>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d003      	beq.n	8004e44 <TIM_Base_SetConfig+0x40>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a3d      	ldr	r2, [pc, #244]	@ (8004f34 <TIM_Base_SetConfig+0x130>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d108      	bne.n	8004e56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a32      	ldr	r2, [pc, #200]	@ (8004f24 <TIM_Base_SetConfig+0x120>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d02b      	beq.n	8004eb6 <TIM_Base_SetConfig+0xb2>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e64:	d027      	beq.n	8004eb6 <TIM_Base_SetConfig+0xb2>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a2f      	ldr	r2, [pc, #188]	@ (8004f28 <TIM_Base_SetConfig+0x124>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d023      	beq.n	8004eb6 <TIM_Base_SetConfig+0xb2>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a2e      	ldr	r2, [pc, #184]	@ (8004f2c <TIM_Base_SetConfig+0x128>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d01f      	beq.n	8004eb6 <TIM_Base_SetConfig+0xb2>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a2d      	ldr	r2, [pc, #180]	@ (8004f30 <TIM_Base_SetConfig+0x12c>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d01b      	beq.n	8004eb6 <TIM_Base_SetConfig+0xb2>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a2c      	ldr	r2, [pc, #176]	@ (8004f34 <TIM_Base_SetConfig+0x130>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d017      	beq.n	8004eb6 <TIM_Base_SetConfig+0xb2>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a2b      	ldr	r2, [pc, #172]	@ (8004f38 <TIM_Base_SetConfig+0x134>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d013      	beq.n	8004eb6 <TIM_Base_SetConfig+0xb2>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a2a      	ldr	r2, [pc, #168]	@ (8004f3c <TIM_Base_SetConfig+0x138>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d00f      	beq.n	8004eb6 <TIM_Base_SetConfig+0xb2>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a29      	ldr	r2, [pc, #164]	@ (8004f40 <TIM_Base_SetConfig+0x13c>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d00b      	beq.n	8004eb6 <TIM_Base_SetConfig+0xb2>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a28      	ldr	r2, [pc, #160]	@ (8004f44 <TIM_Base_SetConfig+0x140>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d007      	beq.n	8004eb6 <TIM_Base_SetConfig+0xb2>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a27      	ldr	r2, [pc, #156]	@ (8004f48 <TIM_Base_SetConfig+0x144>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d003      	beq.n	8004eb6 <TIM_Base_SetConfig+0xb2>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a26      	ldr	r2, [pc, #152]	@ (8004f4c <TIM_Base_SetConfig+0x148>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d108      	bne.n	8004ec8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ebc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	689a      	ldr	r2, [r3, #8]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a0e      	ldr	r2, [pc, #56]	@ (8004f24 <TIM_Base_SetConfig+0x120>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d003      	beq.n	8004ef6 <TIM_Base_SetConfig+0xf2>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a10      	ldr	r2, [pc, #64]	@ (8004f34 <TIM_Base_SetConfig+0x130>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d103      	bne.n	8004efe <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	691a      	ldr	r2, [r3, #16]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f043 0204 	orr.w	r2, r3, #4
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	601a      	str	r2, [r3, #0]
}
 8004f16:	bf00      	nop
 8004f18:	3714      	adds	r7, #20
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop
 8004f24:	40010000 	.word	0x40010000
 8004f28:	40000400 	.word	0x40000400
 8004f2c:	40000800 	.word	0x40000800
 8004f30:	40000c00 	.word	0x40000c00
 8004f34:	40010400 	.word	0x40010400
 8004f38:	40014000 	.word	0x40014000
 8004f3c:	40014400 	.word	0x40014400
 8004f40:	40014800 	.word	0x40014800
 8004f44:	40001800 	.word	0x40001800
 8004f48:	40001c00 	.word	0x40001c00
 8004f4c:	40002000 	.word	0x40002000

08004f50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b087      	sub	sp, #28
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6a1b      	ldr	r3, [r3, #32]
 8004f60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	f023 0201 	bic.w	r2, r3, #1
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	699b      	ldr	r3, [r3, #24]
 8004f72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	011b      	lsls	r3, r3, #4
 8004f80:	693a      	ldr	r2, [r7, #16]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	f023 030a 	bic.w	r3, r3, #10
 8004f8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	693a      	ldr	r2, [r7, #16]
 8004f9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	697a      	ldr	r2, [r7, #20]
 8004fa0:	621a      	str	r2, [r3, #32]
}
 8004fa2:	bf00      	nop
 8004fa4:	371c      	adds	r7, #28
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr

08004fae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fae:	b480      	push	{r7}
 8004fb0:	b087      	sub	sp, #28
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	60f8      	str	r0, [r7, #12]
 8004fb6:	60b9      	str	r1, [r7, #8]
 8004fb8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
 8004fbe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6a1b      	ldr	r3, [r3, #32]
 8004fc4:	f023 0210 	bic.w	r2, r3, #16
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	699b      	ldr	r3, [r3, #24]
 8004fd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004fd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	031b      	lsls	r3, r3, #12
 8004fde:	693a      	ldr	r2, [r7, #16]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004fea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	011b      	lsls	r3, r3, #4
 8004ff0:	697a      	ldr	r2, [r7, #20]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	693a      	ldr	r2, [r7, #16]
 8004ffa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	621a      	str	r2, [r3, #32]
}
 8005002:	bf00      	nop
 8005004:	371c      	adds	r7, #28
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr

0800500e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800500e:	b480      	push	{r7}
 8005010:	b085      	sub	sp, #20
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
 8005016:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005024:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005026:	683a      	ldr	r2, [r7, #0]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	4313      	orrs	r3, r2
 800502c:	f043 0307 	orr.w	r3, r3, #7
 8005030:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	609a      	str	r2, [r3, #8]
}
 8005038:	bf00      	nop
 800503a:	3714      	adds	r7, #20
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005044:	b480      	push	{r7}
 8005046:	b087      	sub	sp, #28
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	607a      	str	r2, [r7, #4]
 8005050:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800505e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	021a      	lsls	r2, r3, #8
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	431a      	orrs	r2, r3
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	4313      	orrs	r3, r2
 800506c:	697a      	ldr	r2, [r7, #20]
 800506e:	4313      	orrs	r3, r2
 8005070:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	697a      	ldr	r2, [r7, #20]
 8005076:	609a      	str	r2, [r3, #8]
}
 8005078:	bf00      	nop
 800507a:	371c      	adds	r7, #28
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005084:	b480      	push	{r7}
 8005086:	b085      	sub	sp, #20
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005094:	2b01      	cmp	r3, #1
 8005096:	d101      	bne.n	800509c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005098:	2302      	movs	r3, #2
 800509a:	e05a      	b.n	8005152 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2202      	movs	r2, #2
 80050a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a21      	ldr	r2, [pc, #132]	@ (8005160 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d022      	beq.n	8005126 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050e8:	d01d      	beq.n	8005126 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a1d      	ldr	r2, [pc, #116]	@ (8005164 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d018      	beq.n	8005126 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a1b      	ldr	r2, [pc, #108]	@ (8005168 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d013      	beq.n	8005126 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a1a      	ldr	r2, [pc, #104]	@ (800516c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d00e      	beq.n	8005126 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a18      	ldr	r2, [pc, #96]	@ (8005170 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d009      	beq.n	8005126 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a17      	ldr	r2, [pc, #92]	@ (8005174 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d004      	beq.n	8005126 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a15      	ldr	r2, [pc, #84]	@ (8005178 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d10c      	bne.n	8005140 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800512c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	68ba      	ldr	r2, [r7, #8]
 8005134:	4313      	orrs	r3, r2
 8005136:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68ba      	ldr	r2, [r7, #8]
 800513e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3714      	adds	r7, #20
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
 800515e:	bf00      	nop
 8005160:	40010000 	.word	0x40010000
 8005164:	40000400 	.word	0x40000400
 8005168:	40000800 	.word	0x40000800
 800516c:	40000c00 	.word	0x40000c00
 8005170:	40010400 	.word	0x40010400
 8005174:	40014000 	.word	0x40014000
 8005178:	40001800 	.word	0x40001800

0800517c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005184:	bf00      	nop
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005198:	bf00      	nop
 800519a:	370c      	adds	r7, #12
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b082      	sub	sp, #8
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d101      	bne.n	80051b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e042      	b.n	800523c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d106      	bne.n	80051d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f7fb fdfc 	bl	8000dc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2224      	movs	r2, #36	@ 0x24
 80051d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68da      	ldr	r2, [r3, #12]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80051e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 fdfb 	bl	8005de4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	691a      	ldr	r2, [r3, #16]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80051fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	695a      	ldr	r2, [r3, #20]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800520c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68da      	ldr	r2, [r3, #12]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800521c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2220      	movs	r2, #32
 8005228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2220      	movs	r2, #32
 8005230:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800523a:	2300      	movs	r3, #0
}
 800523c:	4618      	mov	r0, r3
 800523e:	3708      	adds	r7, #8
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d101      	bne.n	8005256 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e024      	b.n	80052a0 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2224      	movs	r2, #36	@ 0x24
 800525a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68da      	ldr	r2, [r3, #12]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800526c:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f7fb fe82 	bl	8000f78 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3708      	adds	r7, #8
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b08a      	sub	sp, #40	@ 0x28
 80052ac:	af02      	add	r7, sp, #8
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	603b      	str	r3, [r7, #0]
 80052b4:	4613      	mov	r3, r2
 80052b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80052b8:	2300      	movs	r3, #0
 80052ba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	2b20      	cmp	r3, #32
 80052c6:	d175      	bne.n	80053b4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d002      	beq.n	80052d4 <HAL_UART_Transmit+0x2c>
 80052ce:	88fb      	ldrh	r3, [r7, #6]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d101      	bne.n	80052d8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e06e      	b.n	80053b6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2200      	movs	r2, #0
 80052dc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2221      	movs	r2, #33	@ 0x21
 80052e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052e6:	f7fb ff8b 	bl	8001200 <HAL_GetTick>
 80052ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	88fa      	ldrh	r2, [r7, #6]
 80052f0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	88fa      	ldrh	r2, [r7, #6]
 80052f6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005300:	d108      	bne.n	8005314 <HAL_UART_Transmit+0x6c>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d104      	bne.n	8005314 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800530a:	2300      	movs	r3, #0
 800530c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	61bb      	str	r3, [r7, #24]
 8005312:	e003      	b.n	800531c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005318:	2300      	movs	r3, #0
 800531a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800531c:	e02e      	b.n	800537c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	9300      	str	r3, [sp, #0]
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	2200      	movs	r2, #0
 8005326:	2180      	movs	r1, #128	@ 0x80
 8005328:	68f8      	ldr	r0, [r7, #12]
 800532a:	f000 fb2d 	bl	8005988 <UART_WaitOnFlagUntilTimeout>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d005      	beq.n	8005340 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2220      	movs	r2, #32
 8005338:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e03a      	b.n	80053b6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d10b      	bne.n	800535e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	881b      	ldrh	r3, [r3, #0]
 800534a:	461a      	mov	r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005354:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	3302      	adds	r3, #2
 800535a:	61bb      	str	r3, [r7, #24]
 800535c:	e007      	b.n	800536e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	781a      	ldrb	r2, [r3, #0]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	3301      	adds	r3, #1
 800536c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005372:	b29b      	uxth	r3, r3
 8005374:	3b01      	subs	r3, #1
 8005376:	b29a      	uxth	r2, r3
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005380:	b29b      	uxth	r3, r3
 8005382:	2b00      	cmp	r3, #0
 8005384:	d1cb      	bne.n	800531e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	9300      	str	r3, [sp, #0]
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	2200      	movs	r2, #0
 800538e:	2140      	movs	r1, #64	@ 0x40
 8005390:	68f8      	ldr	r0, [r7, #12]
 8005392:	f000 faf9 	bl	8005988 <UART_WaitOnFlagUntilTimeout>
 8005396:	4603      	mov	r3, r0
 8005398:	2b00      	cmp	r3, #0
 800539a:	d005      	beq.n	80053a8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2220      	movs	r2, #32
 80053a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80053a4:	2303      	movs	r3, #3
 80053a6:	e006      	b.n	80053b6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2220      	movs	r2, #32
 80053ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80053b0:	2300      	movs	r3, #0
 80053b2:	e000      	b.n	80053b6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80053b4:	2302      	movs	r3, #2
  }
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3720      	adds	r7, #32
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}

080053be <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053be:	b580      	push	{r7, lr}
 80053c0:	b084      	sub	sp, #16
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	60f8      	str	r0, [r7, #12]
 80053c6:	60b9      	str	r1, [r7, #8]
 80053c8:	4613      	mov	r3, r2
 80053ca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	2b20      	cmp	r3, #32
 80053d6:	d112      	bne.n	80053fe <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d002      	beq.n	80053e4 <HAL_UART_Receive_IT+0x26>
 80053de:	88fb      	ldrh	r3, [r7, #6]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d101      	bne.n	80053e8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e00b      	b.n	8005400 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2200      	movs	r2, #0
 80053ec:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80053ee:	88fb      	ldrh	r3, [r7, #6]
 80053f0:	461a      	mov	r2, r3
 80053f2:	68b9      	ldr	r1, [r7, #8]
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	f000 fb20 	bl	8005a3a <UART_Start_Receive_IT>
 80053fa:	4603      	mov	r3, r0
 80053fc:	e000      	b.n	8005400 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80053fe:	2302      	movs	r3, #2
  }
}
 8005400:	4618      	mov	r0, r3
 8005402:	3710      	adds	r7, #16
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b0ba      	sub	sp, #232	@ 0xe8
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	695b      	ldr	r3, [r3, #20]
 800542a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800542e:	2300      	movs	r3, #0
 8005430:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005434:	2300      	movs	r3, #0
 8005436:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800543a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800543e:	f003 030f 	and.w	r3, r3, #15
 8005442:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005446:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800544a:	2b00      	cmp	r3, #0
 800544c:	d10f      	bne.n	800546e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800544e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005452:	f003 0320 	and.w	r3, r3, #32
 8005456:	2b00      	cmp	r3, #0
 8005458:	d009      	beq.n	800546e <HAL_UART_IRQHandler+0x66>
 800545a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800545e:	f003 0320 	and.w	r3, r3, #32
 8005462:	2b00      	cmp	r3, #0
 8005464:	d003      	beq.n	800546e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 fbfd 	bl	8005c66 <UART_Receive_IT>
      return;
 800546c:	e273      	b.n	8005956 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800546e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005472:	2b00      	cmp	r3, #0
 8005474:	f000 80de 	beq.w	8005634 <HAL_UART_IRQHandler+0x22c>
 8005478:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800547c:	f003 0301 	and.w	r3, r3, #1
 8005480:	2b00      	cmp	r3, #0
 8005482:	d106      	bne.n	8005492 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005488:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800548c:	2b00      	cmp	r3, #0
 800548e:	f000 80d1 	beq.w	8005634 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005496:	f003 0301 	and.w	r3, r3, #1
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00b      	beq.n	80054b6 <HAL_UART_IRQHandler+0xae>
 800549e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d005      	beq.n	80054b6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ae:	f043 0201 	orr.w	r2, r3, #1
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054ba:	f003 0304 	and.w	r3, r3, #4
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00b      	beq.n	80054da <HAL_UART_IRQHandler+0xd2>
 80054c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054c6:	f003 0301 	and.w	r3, r3, #1
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d005      	beq.n	80054da <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054d2:	f043 0202 	orr.w	r2, r3, #2
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054de:	f003 0302 	and.w	r3, r3, #2
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00b      	beq.n	80054fe <HAL_UART_IRQHandler+0xf6>
 80054e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054ea:	f003 0301 	and.w	r3, r3, #1
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d005      	beq.n	80054fe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054f6:	f043 0204 	orr.w	r2, r3, #4
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80054fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005502:	f003 0308 	and.w	r3, r3, #8
 8005506:	2b00      	cmp	r3, #0
 8005508:	d011      	beq.n	800552e <HAL_UART_IRQHandler+0x126>
 800550a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800550e:	f003 0320 	and.w	r3, r3, #32
 8005512:	2b00      	cmp	r3, #0
 8005514:	d105      	bne.n	8005522 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005516:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800551a:	f003 0301 	and.w	r3, r3, #1
 800551e:	2b00      	cmp	r3, #0
 8005520:	d005      	beq.n	800552e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005526:	f043 0208 	orr.w	r2, r3, #8
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005532:	2b00      	cmp	r3, #0
 8005534:	f000 820a 	beq.w	800594c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005538:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800553c:	f003 0320 	and.w	r3, r3, #32
 8005540:	2b00      	cmp	r3, #0
 8005542:	d008      	beq.n	8005556 <HAL_UART_IRQHandler+0x14e>
 8005544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005548:	f003 0320 	and.w	r3, r3, #32
 800554c:	2b00      	cmp	r3, #0
 800554e:	d002      	beq.n	8005556 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f000 fb88 	bl	8005c66 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	695b      	ldr	r3, [r3, #20]
 800555c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005560:	2b40      	cmp	r3, #64	@ 0x40
 8005562:	bf0c      	ite	eq
 8005564:	2301      	moveq	r3, #1
 8005566:	2300      	movne	r3, #0
 8005568:	b2db      	uxtb	r3, r3
 800556a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005572:	f003 0308 	and.w	r3, r3, #8
 8005576:	2b00      	cmp	r3, #0
 8005578:	d103      	bne.n	8005582 <HAL_UART_IRQHandler+0x17a>
 800557a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800557e:	2b00      	cmp	r3, #0
 8005580:	d04f      	beq.n	8005622 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 fa93 	bl	8005aae <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	695b      	ldr	r3, [r3, #20]
 800558e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005592:	2b40      	cmp	r3, #64	@ 0x40
 8005594:	d141      	bne.n	800561a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	3314      	adds	r3, #20
 800559c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80055a4:	e853 3f00 	ldrex	r3, [r3]
 80055a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80055ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80055b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	3314      	adds	r3, #20
 80055be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80055c2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80055c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80055ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80055d2:	e841 2300 	strex	r3, r2, [r1]
 80055d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80055da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d1d9      	bne.n	8005596 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d013      	beq.n	8005612 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055ee:	4a8a      	ldr	r2, [pc, #552]	@ (8005818 <HAL_UART_IRQHandler+0x410>)
 80055f0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055f6:	4618      	mov	r0, r3
 80055f8:	f7fc fc26 	bl	8001e48 <HAL_DMA_Abort_IT>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d016      	beq.n	8005630 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005606:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800560c:	4610      	mov	r0, r2
 800560e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005610:	e00e      	b.n	8005630 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 f9a2 	bl	800595c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005618:	e00a      	b.n	8005630 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 f99e 	bl	800595c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005620:	e006      	b.n	8005630 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 f99a 	bl	800595c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800562e:	e18d      	b.n	800594c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005630:	bf00      	nop
    return;
 8005632:	e18b      	b.n	800594c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005638:	2b01      	cmp	r3, #1
 800563a:	f040 8167 	bne.w	800590c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800563e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005642:	f003 0310 	and.w	r3, r3, #16
 8005646:	2b00      	cmp	r3, #0
 8005648:	f000 8160 	beq.w	800590c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800564c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005650:	f003 0310 	and.w	r3, r3, #16
 8005654:	2b00      	cmp	r3, #0
 8005656:	f000 8159 	beq.w	800590c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800565a:	2300      	movs	r3, #0
 800565c:	60bb      	str	r3, [r7, #8]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	60bb      	str	r3, [r7, #8]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	60bb      	str	r3, [r7, #8]
 800566e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	695b      	ldr	r3, [r3, #20]
 8005676:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800567a:	2b40      	cmp	r3, #64	@ 0x40
 800567c:	f040 80ce 	bne.w	800581c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800568c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005690:	2b00      	cmp	r3, #0
 8005692:	f000 80a9 	beq.w	80057e8 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800569a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800569e:	429a      	cmp	r2, r3
 80056a0:	f080 80a2 	bcs.w	80057e8 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80056aa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056b0:	69db      	ldr	r3, [r3, #28]
 80056b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056b6:	f000 8088 	beq.w	80057ca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	330c      	adds	r3, #12
 80056c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80056c8:	e853 3f00 	ldrex	r3, [r3]
 80056cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80056d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80056d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	330c      	adds	r3, #12
 80056e2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80056e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80056ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80056f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80056f6:	e841 2300 	strex	r3, r2, [r1]
 80056fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80056fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005702:	2b00      	cmp	r3, #0
 8005704:	d1d9      	bne.n	80056ba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	3314      	adds	r3, #20
 800570c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800570e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005710:	e853 3f00 	ldrex	r3, [r3]
 8005714:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005716:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005718:	f023 0301 	bic.w	r3, r3, #1
 800571c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	3314      	adds	r3, #20
 8005726:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800572a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800572e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005730:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005732:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005736:	e841 2300 	strex	r3, r2, [r1]
 800573a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800573c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1e1      	bne.n	8005706 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	3314      	adds	r3, #20
 8005748:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800574a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800574c:	e853 3f00 	ldrex	r3, [r3]
 8005750:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005752:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005754:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005758:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	3314      	adds	r3, #20
 8005762:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005766:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005768:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800576a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800576c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800576e:	e841 2300 	strex	r3, r2, [r1]
 8005772:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005774:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005776:	2b00      	cmp	r3, #0
 8005778:	d1e3      	bne.n	8005742 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2220      	movs	r2, #32
 800577e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	330c      	adds	r3, #12
 800578e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005790:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005792:	e853 3f00 	ldrex	r3, [r3]
 8005796:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005798:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800579a:	f023 0310 	bic.w	r3, r3, #16
 800579e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	330c      	adds	r3, #12
 80057a8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80057ac:	65ba      	str	r2, [r7, #88]	@ 0x58
 80057ae:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80057b2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80057b4:	e841 2300 	strex	r3, r2, [r1]
 80057b8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80057ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d1e3      	bne.n	8005788 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057c4:	4618      	mov	r0, r3
 80057c6:	f7fc facf 	bl	8001d68 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2202      	movs	r2, #2
 80057ce:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80057d8:	b29b      	uxth	r3, r3
 80057da:	1ad3      	subs	r3, r2, r3
 80057dc:	b29b      	uxth	r3, r3
 80057de:	4619      	mov	r1, r3
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f000 f8c5 	bl	8005970 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80057e6:	e0b3      	b.n	8005950 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80057ec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80057f0:	429a      	cmp	r2, r3
 80057f2:	f040 80ad 	bne.w	8005950 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057fa:	69db      	ldr	r3, [r3, #28]
 80057fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005800:	f040 80a6 	bne.w	8005950 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2202      	movs	r2, #2
 8005808:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800580e:	4619      	mov	r1, r3
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f000 f8ad 	bl	8005970 <HAL_UARTEx_RxEventCallback>
      return;
 8005816:	e09b      	b.n	8005950 <HAL_UART_IRQHandler+0x548>
 8005818:	08005b75 	.word	0x08005b75
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005824:	b29b      	uxth	r3, r3
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005830:	b29b      	uxth	r3, r3
 8005832:	2b00      	cmp	r3, #0
 8005834:	f000 808e 	beq.w	8005954 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8005838:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800583c:	2b00      	cmp	r3, #0
 800583e:	f000 8089 	beq.w	8005954 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	330c      	adds	r3, #12
 8005848:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800584c:	e853 3f00 	ldrex	r3, [r3]
 8005850:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005852:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005854:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005858:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	330c      	adds	r3, #12
 8005862:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005866:	647a      	str	r2, [r7, #68]	@ 0x44
 8005868:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800586c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800586e:	e841 2300 	strex	r3, r2, [r1]
 8005872:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005874:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005876:	2b00      	cmp	r3, #0
 8005878:	d1e3      	bne.n	8005842 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	3314      	adds	r3, #20
 8005880:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005884:	e853 3f00 	ldrex	r3, [r3]
 8005888:	623b      	str	r3, [r7, #32]
   return(result);
 800588a:	6a3b      	ldr	r3, [r7, #32]
 800588c:	f023 0301 	bic.w	r3, r3, #1
 8005890:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	3314      	adds	r3, #20
 800589a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800589e:	633a      	str	r2, [r7, #48]	@ 0x30
 80058a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80058a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058a6:	e841 2300 	strex	r3, r2, [r1]
 80058aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80058ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d1e3      	bne.n	800587a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2220      	movs	r2, #32
 80058b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	330c      	adds	r3, #12
 80058c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	e853 3f00 	ldrex	r3, [r3]
 80058ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f023 0310 	bic.w	r3, r3, #16
 80058d6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	330c      	adds	r3, #12
 80058e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80058e4:	61fa      	str	r2, [r7, #28]
 80058e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e8:	69b9      	ldr	r1, [r7, #24]
 80058ea:	69fa      	ldr	r2, [r7, #28]
 80058ec:	e841 2300 	strex	r3, r2, [r1]
 80058f0:	617b      	str	r3, [r7, #20]
   return(result);
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d1e3      	bne.n	80058c0 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2202      	movs	r2, #2
 80058fc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80058fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005902:	4619      	mov	r1, r3
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 f833 	bl	8005970 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800590a:	e023      	b.n	8005954 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800590c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005910:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005914:	2b00      	cmp	r3, #0
 8005916:	d009      	beq.n	800592c <HAL_UART_IRQHandler+0x524>
 8005918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800591c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005920:	2b00      	cmp	r3, #0
 8005922:	d003      	beq.n	800592c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f000 f936 	bl	8005b96 <UART_Transmit_IT>
    return;
 800592a:	e014      	b.n	8005956 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800592c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005930:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005934:	2b00      	cmp	r3, #0
 8005936:	d00e      	beq.n	8005956 <HAL_UART_IRQHandler+0x54e>
 8005938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800593c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005940:	2b00      	cmp	r3, #0
 8005942:	d008      	beq.n	8005956 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 f976 	bl	8005c36 <UART_EndTransmit_IT>
    return;
 800594a:	e004      	b.n	8005956 <HAL_UART_IRQHandler+0x54e>
    return;
 800594c:	bf00      	nop
 800594e:	e002      	b.n	8005956 <HAL_UART_IRQHandler+0x54e>
      return;
 8005950:	bf00      	nop
 8005952:	e000      	b.n	8005956 <HAL_UART_IRQHandler+0x54e>
      return;
 8005954:	bf00      	nop
  }
}
 8005956:	37e8      	adds	r7, #232	@ 0xe8
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005964:	bf00      	nop
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	460b      	mov	r3, r1
 800597a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800597c:	bf00      	nop
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b086      	sub	sp, #24
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	603b      	str	r3, [r7, #0]
 8005994:	4613      	mov	r3, r2
 8005996:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005998:	e03b      	b.n	8005a12 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800599a:	6a3b      	ldr	r3, [r7, #32]
 800599c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059a0:	d037      	beq.n	8005a12 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059a2:	f7fb fc2d 	bl	8001200 <HAL_GetTick>
 80059a6:	4602      	mov	r2, r0
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	1ad3      	subs	r3, r2, r3
 80059ac:	6a3a      	ldr	r2, [r7, #32]
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d302      	bcc.n	80059b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80059b2:	6a3b      	ldr	r3, [r7, #32]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d101      	bne.n	80059bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80059b8:	2303      	movs	r3, #3
 80059ba:	e03a      	b.n	8005a32 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	f003 0304 	and.w	r3, r3, #4
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d023      	beq.n	8005a12 <UART_WaitOnFlagUntilTimeout+0x8a>
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	2b80      	cmp	r3, #128	@ 0x80
 80059ce:	d020      	beq.n	8005a12 <UART_WaitOnFlagUntilTimeout+0x8a>
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	2b40      	cmp	r3, #64	@ 0x40
 80059d4:	d01d      	beq.n	8005a12 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0308 	and.w	r3, r3, #8
 80059e0:	2b08      	cmp	r3, #8
 80059e2:	d116      	bne.n	8005a12 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80059e4:	2300      	movs	r3, #0
 80059e6:	617b      	str	r3, [r7, #20]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	617b      	str	r3, [r7, #20]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	617b      	str	r3, [r7, #20]
 80059f8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059fa:	68f8      	ldr	r0, [r7, #12]
 80059fc:	f000 f857 	bl	8005aae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2208      	movs	r2, #8
 8005a04:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e00f      	b.n	8005a32 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	68ba      	ldr	r2, [r7, #8]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	bf0c      	ite	eq
 8005a22:	2301      	moveq	r3, #1
 8005a24:	2300      	movne	r3, #0
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	461a      	mov	r2, r3
 8005a2a:	79fb      	ldrb	r3, [r7, #7]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d0b4      	beq.n	800599a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3718      	adds	r7, #24
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}

08005a3a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a3a:	b480      	push	{r7}
 8005a3c:	b085      	sub	sp, #20
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	60f8      	str	r0, [r7, #12]
 8005a42:	60b9      	str	r1, [r7, #8]
 8005a44:	4613      	mov	r3, r2
 8005a46:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	68ba      	ldr	r2, [r7, #8]
 8005a4c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	88fa      	ldrh	r2, [r7, #6]
 8005a52:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	88fa      	ldrh	r2, [r7, #6]
 8005a58:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2222      	movs	r2, #34	@ 0x22
 8005a64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d007      	beq.n	8005a80 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68da      	ldr	r2, [r3, #12]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a7e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	695a      	ldr	r2, [r3, #20]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f042 0201 	orr.w	r2, r2, #1
 8005a8e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68da      	ldr	r2, [r3, #12]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f042 0220 	orr.w	r2, r2, #32
 8005a9e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3714      	adds	r7, #20
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr

08005aae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005aae:	b480      	push	{r7}
 8005ab0:	b095      	sub	sp, #84	@ 0x54
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	330c      	adds	r3, #12
 8005abc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005abe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ac0:	e853 3f00 	ldrex	r3, [r3]
 8005ac4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ac8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005acc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	330c      	adds	r3, #12
 8005ad4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005ad6:	643a      	str	r2, [r7, #64]	@ 0x40
 8005ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ada:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005adc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ade:	e841 2300 	strex	r3, r2, [r1]
 8005ae2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d1e5      	bne.n	8005ab6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	3314      	adds	r3, #20
 8005af0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af2:	6a3b      	ldr	r3, [r7, #32]
 8005af4:	e853 3f00 	ldrex	r3, [r3]
 8005af8:	61fb      	str	r3, [r7, #28]
   return(result);
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	f023 0301 	bic.w	r3, r3, #1
 8005b00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	3314      	adds	r3, #20
 8005b08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b12:	e841 2300 	strex	r3, r2, [r1]
 8005b16:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d1e5      	bne.n	8005aea <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d119      	bne.n	8005b5a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	330c      	adds	r3, #12
 8005b2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	e853 3f00 	ldrex	r3, [r3]
 8005b34:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	f023 0310 	bic.w	r3, r3, #16
 8005b3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	330c      	adds	r3, #12
 8005b44:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b46:	61ba      	str	r2, [r7, #24]
 8005b48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b4a:	6979      	ldr	r1, [r7, #20]
 8005b4c:	69ba      	ldr	r2, [r7, #24]
 8005b4e:	e841 2300 	strex	r3, r2, [r1]
 8005b52:	613b      	str	r3, [r7, #16]
   return(result);
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d1e5      	bne.n	8005b26 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2220      	movs	r2, #32
 8005b5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005b68:	bf00      	nop
 8005b6a:	3754      	adds	r7, #84	@ 0x54
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b80:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2200      	movs	r2, #0
 8005b86:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b88:	68f8      	ldr	r0, [r7, #12]
 8005b8a:	f7ff fee7 	bl	800595c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b8e:	bf00      	nop
 8005b90:	3710      	adds	r7, #16
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}

08005b96 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005b96:	b480      	push	{r7}
 8005b98:	b085      	sub	sp, #20
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	2b21      	cmp	r3, #33	@ 0x21
 8005ba8:	d13e      	bne.n	8005c28 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bb2:	d114      	bne.n	8005bde <UART_Transmit_IT+0x48>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d110      	bne.n	8005bde <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6a1b      	ldr	r3, [r3, #32]
 8005bc0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	881b      	ldrh	r3, [r3, #0]
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bd0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a1b      	ldr	r3, [r3, #32]
 8005bd6:	1c9a      	adds	r2, r3, #2
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	621a      	str	r2, [r3, #32]
 8005bdc:	e008      	b.n	8005bf0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a1b      	ldr	r3, [r3, #32]
 8005be2:	1c59      	adds	r1, r3, #1
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	6211      	str	r1, [r2, #32]
 8005be8:	781a      	ldrb	r2, [r3, #0]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	3b01      	subs	r3, #1
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d10f      	bne.n	8005c24 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	68da      	ldr	r2, [r3, #12]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005c12:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	68da      	ldr	r2, [r3, #12]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c22:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005c24:	2300      	movs	r3, #0
 8005c26:	e000      	b.n	8005c2a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005c28:	2302      	movs	r3, #2
  }
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3714      	adds	r7, #20
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr

08005c36 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c36:	b580      	push	{r7, lr}
 8005c38:	b082      	sub	sp, #8
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	68da      	ldr	r2, [r3, #12]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c4c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2220      	movs	r2, #32
 8005c52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f002 f932 	bl	8007ec0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3708      	adds	r7, #8
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}

08005c66 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005c66:	b580      	push	{r7, lr}
 8005c68:	b08c      	sub	sp, #48	@ 0x30
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8005c72:	2300      	movs	r3, #0
 8005c74:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	2b22      	cmp	r3, #34	@ 0x22
 8005c80:	f040 80aa 	bne.w	8005dd8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c8c:	d115      	bne.n	8005cba <UART_Receive_IT+0x54>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d111      	bne.n	8005cba <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ca8:	b29a      	uxth	r2, r3
 8005caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cb2:	1c9a      	adds	r2, r3, #2
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	629a      	str	r2, [r3, #40]	@ 0x28
 8005cb8:	e024      	b.n	8005d04 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cc8:	d007      	beq.n	8005cda <UART_Receive_IT+0x74>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d10a      	bne.n	8005ce8 <UART_Receive_IT+0x82>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d106      	bne.n	8005ce8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	b2da      	uxtb	r2, r3
 8005ce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ce4:	701a      	strb	r2, [r3, #0]
 8005ce6:	e008      	b.n	8005cfa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005cf4:	b2da      	uxtb	r2, r3
 8005cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cf8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cfe:	1c5a      	adds	r2, r3, #1
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	3b01      	subs	r3, #1
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	4619      	mov	r1, r3
 8005d12:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d15d      	bne.n	8005dd4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68da      	ldr	r2, [r3, #12]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f022 0220 	bic.w	r2, r2, #32
 8005d26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68da      	ldr	r2, [r3, #12]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	695a      	ldr	r2, [r3, #20]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f022 0201 	bic.w	r2, r2, #1
 8005d46:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2220      	movs	r2, #32
 8005d4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d135      	bne.n	8005dca <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	330c      	adds	r3, #12
 8005d6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	e853 3f00 	ldrex	r3, [r3]
 8005d72:	613b      	str	r3, [r7, #16]
   return(result);
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	f023 0310 	bic.w	r3, r3, #16
 8005d7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	330c      	adds	r3, #12
 8005d82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d84:	623a      	str	r2, [r7, #32]
 8005d86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d88:	69f9      	ldr	r1, [r7, #28]
 8005d8a:	6a3a      	ldr	r2, [r7, #32]
 8005d8c:	e841 2300 	strex	r3, r2, [r1]
 8005d90:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d1e5      	bne.n	8005d64 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 0310 	and.w	r3, r3, #16
 8005da2:	2b10      	cmp	r3, #16
 8005da4:	d10a      	bne.n	8005dbc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005da6:	2300      	movs	r3, #0
 8005da8:	60fb      	str	r3, [r7, #12]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	60fb      	str	r3, [r7, #12]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	60fb      	str	r3, [r7, #12]
 8005dba:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005dc0:	4619      	mov	r1, r3
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f7ff fdd4 	bl	8005970 <HAL_UARTEx_RxEventCallback>
 8005dc8:	e002      	b.n	8005dd0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f002 f98a 	bl	80080e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	e002      	b.n	8005dda <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	e000      	b.n	8005dda <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005dd8:	2302      	movs	r3, #2
  }
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3730      	adds	r7, #48	@ 0x30
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
	...

08005de4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005de4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005de8:	b0c0      	sub	sp, #256	@ 0x100
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e00:	68d9      	ldr	r1, [r3, #12]
 8005e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	ea40 0301 	orr.w	r3, r0, r1
 8005e0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e12:	689a      	ldr	r2, [r3, #8]
 8005e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	431a      	orrs	r2, r3
 8005e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e20:	695b      	ldr	r3, [r3, #20]
 8005e22:	431a      	orrs	r2, r3
 8005e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e28:	69db      	ldr	r3, [r3, #28]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005e3c:	f021 010c 	bic.w	r1, r1, #12
 8005e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005e4a:	430b      	orrs	r3, r1
 8005e4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	695b      	ldr	r3, [r3, #20]
 8005e56:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e5e:	6999      	ldr	r1, [r3, #24]
 8005e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	ea40 0301 	orr.w	r3, r0, r1
 8005e6a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	4b8f      	ldr	r3, [pc, #572]	@ (80060b0 <UART_SetConfig+0x2cc>)
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d005      	beq.n	8005e84 <UART_SetConfig+0xa0>
 8005e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	4b8d      	ldr	r3, [pc, #564]	@ (80060b4 <UART_SetConfig+0x2d0>)
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d104      	bne.n	8005e8e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e84:	f7fe fd0a 	bl	800489c <HAL_RCC_GetPCLK2Freq>
 8005e88:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005e8c:	e003      	b.n	8005e96 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e8e:	f7fe fcf1 	bl	8004874 <HAL_RCC_GetPCLK1Freq>
 8005e92:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e9a:	69db      	ldr	r3, [r3, #28]
 8005e9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ea0:	f040 810c 	bne.w	80060bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ea4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005eae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005eb2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005eb6:	4622      	mov	r2, r4
 8005eb8:	462b      	mov	r3, r5
 8005eba:	1891      	adds	r1, r2, r2
 8005ebc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005ebe:	415b      	adcs	r3, r3
 8005ec0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ec2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005ec6:	4621      	mov	r1, r4
 8005ec8:	eb12 0801 	adds.w	r8, r2, r1
 8005ecc:	4629      	mov	r1, r5
 8005ece:	eb43 0901 	adc.w	r9, r3, r1
 8005ed2:	f04f 0200 	mov.w	r2, #0
 8005ed6:	f04f 0300 	mov.w	r3, #0
 8005eda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ede:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ee2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ee6:	4690      	mov	r8, r2
 8005ee8:	4699      	mov	r9, r3
 8005eea:	4623      	mov	r3, r4
 8005eec:	eb18 0303 	adds.w	r3, r8, r3
 8005ef0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005ef4:	462b      	mov	r3, r5
 8005ef6:	eb49 0303 	adc.w	r3, r9, r3
 8005efa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005f0a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005f0e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005f12:	460b      	mov	r3, r1
 8005f14:	18db      	adds	r3, r3, r3
 8005f16:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f18:	4613      	mov	r3, r2
 8005f1a:	eb42 0303 	adc.w	r3, r2, r3
 8005f1e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005f20:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005f24:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005f28:	f7fa f9a2 	bl	8000270 <__aeabi_uldivmod>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	460b      	mov	r3, r1
 8005f30:	4b61      	ldr	r3, [pc, #388]	@ (80060b8 <UART_SetConfig+0x2d4>)
 8005f32:	fba3 2302 	umull	r2, r3, r3, r2
 8005f36:	095b      	lsrs	r3, r3, #5
 8005f38:	011c      	lsls	r4, r3, #4
 8005f3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005f44:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005f48:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005f4c:	4642      	mov	r2, r8
 8005f4e:	464b      	mov	r3, r9
 8005f50:	1891      	adds	r1, r2, r2
 8005f52:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005f54:	415b      	adcs	r3, r3
 8005f56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f58:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005f5c:	4641      	mov	r1, r8
 8005f5e:	eb12 0a01 	adds.w	sl, r2, r1
 8005f62:	4649      	mov	r1, r9
 8005f64:	eb43 0b01 	adc.w	fp, r3, r1
 8005f68:	f04f 0200 	mov.w	r2, #0
 8005f6c:	f04f 0300 	mov.w	r3, #0
 8005f70:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005f74:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005f78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f7c:	4692      	mov	sl, r2
 8005f7e:	469b      	mov	fp, r3
 8005f80:	4643      	mov	r3, r8
 8005f82:	eb1a 0303 	adds.w	r3, sl, r3
 8005f86:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005f8a:	464b      	mov	r3, r9
 8005f8c:	eb4b 0303 	adc.w	r3, fp, r3
 8005f90:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005fa0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005fa4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005fa8:	460b      	mov	r3, r1
 8005faa:	18db      	adds	r3, r3, r3
 8005fac:	643b      	str	r3, [r7, #64]	@ 0x40
 8005fae:	4613      	mov	r3, r2
 8005fb0:	eb42 0303 	adc.w	r3, r2, r3
 8005fb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fb6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005fba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005fbe:	f7fa f957 	bl	8000270 <__aeabi_uldivmod>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	4611      	mov	r1, r2
 8005fc8:	4b3b      	ldr	r3, [pc, #236]	@ (80060b8 <UART_SetConfig+0x2d4>)
 8005fca:	fba3 2301 	umull	r2, r3, r3, r1
 8005fce:	095b      	lsrs	r3, r3, #5
 8005fd0:	2264      	movs	r2, #100	@ 0x64
 8005fd2:	fb02 f303 	mul.w	r3, r2, r3
 8005fd6:	1acb      	subs	r3, r1, r3
 8005fd8:	00db      	lsls	r3, r3, #3
 8005fda:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005fde:	4b36      	ldr	r3, [pc, #216]	@ (80060b8 <UART_SetConfig+0x2d4>)
 8005fe0:	fba3 2302 	umull	r2, r3, r3, r2
 8005fe4:	095b      	lsrs	r3, r3, #5
 8005fe6:	005b      	lsls	r3, r3, #1
 8005fe8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005fec:	441c      	add	r4, r3
 8005fee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ff8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005ffc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006000:	4642      	mov	r2, r8
 8006002:	464b      	mov	r3, r9
 8006004:	1891      	adds	r1, r2, r2
 8006006:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006008:	415b      	adcs	r3, r3
 800600a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800600c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006010:	4641      	mov	r1, r8
 8006012:	1851      	adds	r1, r2, r1
 8006014:	6339      	str	r1, [r7, #48]	@ 0x30
 8006016:	4649      	mov	r1, r9
 8006018:	414b      	adcs	r3, r1
 800601a:	637b      	str	r3, [r7, #52]	@ 0x34
 800601c:	f04f 0200 	mov.w	r2, #0
 8006020:	f04f 0300 	mov.w	r3, #0
 8006024:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006028:	4659      	mov	r1, fp
 800602a:	00cb      	lsls	r3, r1, #3
 800602c:	4651      	mov	r1, sl
 800602e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006032:	4651      	mov	r1, sl
 8006034:	00ca      	lsls	r2, r1, #3
 8006036:	4610      	mov	r0, r2
 8006038:	4619      	mov	r1, r3
 800603a:	4603      	mov	r3, r0
 800603c:	4642      	mov	r2, r8
 800603e:	189b      	adds	r3, r3, r2
 8006040:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006044:	464b      	mov	r3, r9
 8006046:	460a      	mov	r2, r1
 8006048:	eb42 0303 	adc.w	r3, r2, r3
 800604c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800605c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006060:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006064:	460b      	mov	r3, r1
 8006066:	18db      	adds	r3, r3, r3
 8006068:	62bb      	str	r3, [r7, #40]	@ 0x28
 800606a:	4613      	mov	r3, r2
 800606c:	eb42 0303 	adc.w	r3, r2, r3
 8006070:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006072:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006076:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800607a:	f7fa f8f9 	bl	8000270 <__aeabi_uldivmod>
 800607e:	4602      	mov	r2, r0
 8006080:	460b      	mov	r3, r1
 8006082:	4b0d      	ldr	r3, [pc, #52]	@ (80060b8 <UART_SetConfig+0x2d4>)
 8006084:	fba3 1302 	umull	r1, r3, r3, r2
 8006088:	095b      	lsrs	r3, r3, #5
 800608a:	2164      	movs	r1, #100	@ 0x64
 800608c:	fb01 f303 	mul.w	r3, r1, r3
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	00db      	lsls	r3, r3, #3
 8006094:	3332      	adds	r3, #50	@ 0x32
 8006096:	4a08      	ldr	r2, [pc, #32]	@ (80060b8 <UART_SetConfig+0x2d4>)
 8006098:	fba2 2303 	umull	r2, r3, r2, r3
 800609c:	095b      	lsrs	r3, r3, #5
 800609e:	f003 0207 	and.w	r2, r3, #7
 80060a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4422      	add	r2, r4
 80060aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80060ac:	e106      	b.n	80062bc <UART_SetConfig+0x4d8>
 80060ae:	bf00      	nop
 80060b0:	40011000 	.word	0x40011000
 80060b4:	40011400 	.word	0x40011400
 80060b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80060bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060c0:	2200      	movs	r2, #0
 80060c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80060c6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80060ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80060ce:	4642      	mov	r2, r8
 80060d0:	464b      	mov	r3, r9
 80060d2:	1891      	adds	r1, r2, r2
 80060d4:	6239      	str	r1, [r7, #32]
 80060d6:	415b      	adcs	r3, r3
 80060d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80060da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80060de:	4641      	mov	r1, r8
 80060e0:	1854      	adds	r4, r2, r1
 80060e2:	4649      	mov	r1, r9
 80060e4:	eb43 0501 	adc.w	r5, r3, r1
 80060e8:	f04f 0200 	mov.w	r2, #0
 80060ec:	f04f 0300 	mov.w	r3, #0
 80060f0:	00eb      	lsls	r3, r5, #3
 80060f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80060f6:	00e2      	lsls	r2, r4, #3
 80060f8:	4614      	mov	r4, r2
 80060fa:	461d      	mov	r5, r3
 80060fc:	4643      	mov	r3, r8
 80060fe:	18e3      	adds	r3, r4, r3
 8006100:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006104:	464b      	mov	r3, r9
 8006106:	eb45 0303 	adc.w	r3, r5, r3
 800610a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800610e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800611a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800611e:	f04f 0200 	mov.w	r2, #0
 8006122:	f04f 0300 	mov.w	r3, #0
 8006126:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800612a:	4629      	mov	r1, r5
 800612c:	008b      	lsls	r3, r1, #2
 800612e:	4621      	mov	r1, r4
 8006130:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006134:	4621      	mov	r1, r4
 8006136:	008a      	lsls	r2, r1, #2
 8006138:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800613c:	f7fa f898 	bl	8000270 <__aeabi_uldivmod>
 8006140:	4602      	mov	r2, r0
 8006142:	460b      	mov	r3, r1
 8006144:	4b60      	ldr	r3, [pc, #384]	@ (80062c8 <UART_SetConfig+0x4e4>)
 8006146:	fba3 2302 	umull	r2, r3, r3, r2
 800614a:	095b      	lsrs	r3, r3, #5
 800614c:	011c      	lsls	r4, r3, #4
 800614e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006152:	2200      	movs	r2, #0
 8006154:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006158:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800615c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006160:	4642      	mov	r2, r8
 8006162:	464b      	mov	r3, r9
 8006164:	1891      	adds	r1, r2, r2
 8006166:	61b9      	str	r1, [r7, #24]
 8006168:	415b      	adcs	r3, r3
 800616a:	61fb      	str	r3, [r7, #28]
 800616c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006170:	4641      	mov	r1, r8
 8006172:	1851      	adds	r1, r2, r1
 8006174:	6139      	str	r1, [r7, #16]
 8006176:	4649      	mov	r1, r9
 8006178:	414b      	adcs	r3, r1
 800617a:	617b      	str	r3, [r7, #20]
 800617c:	f04f 0200 	mov.w	r2, #0
 8006180:	f04f 0300 	mov.w	r3, #0
 8006184:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006188:	4659      	mov	r1, fp
 800618a:	00cb      	lsls	r3, r1, #3
 800618c:	4651      	mov	r1, sl
 800618e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006192:	4651      	mov	r1, sl
 8006194:	00ca      	lsls	r2, r1, #3
 8006196:	4610      	mov	r0, r2
 8006198:	4619      	mov	r1, r3
 800619a:	4603      	mov	r3, r0
 800619c:	4642      	mov	r2, r8
 800619e:	189b      	adds	r3, r3, r2
 80061a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80061a4:	464b      	mov	r3, r9
 80061a6:	460a      	mov	r2, r1
 80061a8:	eb42 0303 	adc.w	r3, r2, r3
 80061ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80061b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80061ba:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80061bc:	f04f 0200 	mov.w	r2, #0
 80061c0:	f04f 0300 	mov.w	r3, #0
 80061c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80061c8:	4649      	mov	r1, r9
 80061ca:	008b      	lsls	r3, r1, #2
 80061cc:	4641      	mov	r1, r8
 80061ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061d2:	4641      	mov	r1, r8
 80061d4:	008a      	lsls	r2, r1, #2
 80061d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80061da:	f7fa f849 	bl	8000270 <__aeabi_uldivmod>
 80061de:	4602      	mov	r2, r0
 80061e0:	460b      	mov	r3, r1
 80061e2:	4611      	mov	r1, r2
 80061e4:	4b38      	ldr	r3, [pc, #224]	@ (80062c8 <UART_SetConfig+0x4e4>)
 80061e6:	fba3 2301 	umull	r2, r3, r3, r1
 80061ea:	095b      	lsrs	r3, r3, #5
 80061ec:	2264      	movs	r2, #100	@ 0x64
 80061ee:	fb02 f303 	mul.w	r3, r2, r3
 80061f2:	1acb      	subs	r3, r1, r3
 80061f4:	011b      	lsls	r3, r3, #4
 80061f6:	3332      	adds	r3, #50	@ 0x32
 80061f8:	4a33      	ldr	r2, [pc, #204]	@ (80062c8 <UART_SetConfig+0x4e4>)
 80061fa:	fba2 2303 	umull	r2, r3, r2, r3
 80061fe:	095b      	lsrs	r3, r3, #5
 8006200:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006204:	441c      	add	r4, r3
 8006206:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800620a:	2200      	movs	r2, #0
 800620c:	673b      	str	r3, [r7, #112]	@ 0x70
 800620e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006210:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006214:	4642      	mov	r2, r8
 8006216:	464b      	mov	r3, r9
 8006218:	1891      	adds	r1, r2, r2
 800621a:	60b9      	str	r1, [r7, #8]
 800621c:	415b      	adcs	r3, r3
 800621e:	60fb      	str	r3, [r7, #12]
 8006220:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006224:	4641      	mov	r1, r8
 8006226:	1851      	adds	r1, r2, r1
 8006228:	6039      	str	r1, [r7, #0]
 800622a:	4649      	mov	r1, r9
 800622c:	414b      	adcs	r3, r1
 800622e:	607b      	str	r3, [r7, #4]
 8006230:	f04f 0200 	mov.w	r2, #0
 8006234:	f04f 0300 	mov.w	r3, #0
 8006238:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800623c:	4659      	mov	r1, fp
 800623e:	00cb      	lsls	r3, r1, #3
 8006240:	4651      	mov	r1, sl
 8006242:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006246:	4651      	mov	r1, sl
 8006248:	00ca      	lsls	r2, r1, #3
 800624a:	4610      	mov	r0, r2
 800624c:	4619      	mov	r1, r3
 800624e:	4603      	mov	r3, r0
 8006250:	4642      	mov	r2, r8
 8006252:	189b      	adds	r3, r3, r2
 8006254:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006256:	464b      	mov	r3, r9
 8006258:	460a      	mov	r2, r1
 800625a:	eb42 0303 	adc.w	r3, r2, r3
 800625e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	663b      	str	r3, [r7, #96]	@ 0x60
 800626a:	667a      	str	r2, [r7, #100]	@ 0x64
 800626c:	f04f 0200 	mov.w	r2, #0
 8006270:	f04f 0300 	mov.w	r3, #0
 8006274:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006278:	4649      	mov	r1, r9
 800627a:	008b      	lsls	r3, r1, #2
 800627c:	4641      	mov	r1, r8
 800627e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006282:	4641      	mov	r1, r8
 8006284:	008a      	lsls	r2, r1, #2
 8006286:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800628a:	f7f9 fff1 	bl	8000270 <__aeabi_uldivmod>
 800628e:	4602      	mov	r2, r0
 8006290:	460b      	mov	r3, r1
 8006292:	4b0d      	ldr	r3, [pc, #52]	@ (80062c8 <UART_SetConfig+0x4e4>)
 8006294:	fba3 1302 	umull	r1, r3, r3, r2
 8006298:	095b      	lsrs	r3, r3, #5
 800629a:	2164      	movs	r1, #100	@ 0x64
 800629c:	fb01 f303 	mul.w	r3, r1, r3
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	011b      	lsls	r3, r3, #4
 80062a4:	3332      	adds	r3, #50	@ 0x32
 80062a6:	4a08      	ldr	r2, [pc, #32]	@ (80062c8 <UART_SetConfig+0x4e4>)
 80062a8:	fba2 2303 	umull	r2, r3, r2, r3
 80062ac:	095b      	lsrs	r3, r3, #5
 80062ae:	f003 020f 	and.w	r2, r3, #15
 80062b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4422      	add	r2, r4
 80062ba:	609a      	str	r2, [r3, #8]
}
 80062bc:	bf00      	nop
 80062be:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80062c2:	46bd      	mov	sp, r7
 80062c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062c8:	51eb851f 	.word	0x51eb851f

080062cc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80062cc:	b084      	sub	sp, #16
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b084      	sub	sp, #16
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
 80062d6:	f107 001c 	add.w	r0, r7, #28
 80062da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80062de:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d123      	bne.n	800632e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062ea:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80062fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800630e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006312:	2b01      	cmp	r3, #1
 8006314:	d105      	bne.n	8006322 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f001 fae8 	bl	80078f8 <USB_CoreReset>
 8006328:	4603      	mov	r3, r0
 800632a:	73fb      	strb	r3, [r7, #15]
 800632c:	e01b      	b.n	8006366 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f001 fadc 	bl	80078f8 <USB_CoreReset>
 8006340:	4603      	mov	r3, r0
 8006342:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006344:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006348:	2b00      	cmp	r3, #0
 800634a:	d106      	bne.n	800635a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006350:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	639a      	str	r2, [r3, #56]	@ 0x38
 8006358:	e005      	b.n	8006366 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800635e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006366:	7fbb      	ldrb	r3, [r7, #30]
 8006368:	2b01      	cmp	r3, #1
 800636a:	d10b      	bne.n	8006384 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	f043 0206 	orr.w	r2, r3, #6
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	f043 0220 	orr.w	r2, r3, #32
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006384:	7bfb      	ldrb	r3, [r7, #15]
}
 8006386:	4618      	mov	r0, r3
 8006388:	3710      	adds	r7, #16
 800638a:	46bd      	mov	sp, r7
 800638c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006390:	b004      	add	sp, #16
 8006392:	4770      	bx	lr

08006394 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006394:	b480      	push	{r7}
 8006396:	b087      	sub	sp, #28
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	4613      	mov	r3, r2
 80063a0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80063a2:	79fb      	ldrb	r3, [r7, #7]
 80063a4:	2b02      	cmp	r3, #2
 80063a6:	d165      	bne.n	8006474 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	4a41      	ldr	r2, [pc, #260]	@ (80064b0 <USB_SetTurnaroundTime+0x11c>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d906      	bls.n	80063be <USB_SetTurnaroundTime+0x2a>
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	4a40      	ldr	r2, [pc, #256]	@ (80064b4 <USB_SetTurnaroundTime+0x120>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d202      	bcs.n	80063be <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80063b8:	230f      	movs	r3, #15
 80063ba:	617b      	str	r3, [r7, #20]
 80063bc:	e062      	b.n	8006484 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	4a3c      	ldr	r2, [pc, #240]	@ (80064b4 <USB_SetTurnaroundTime+0x120>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d306      	bcc.n	80063d4 <USB_SetTurnaroundTime+0x40>
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	4a3b      	ldr	r2, [pc, #236]	@ (80064b8 <USB_SetTurnaroundTime+0x124>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d202      	bcs.n	80063d4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80063ce:	230e      	movs	r3, #14
 80063d0:	617b      	str	r3, [r7, #20]
 80063d2:	e057      	b.n	8006484 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	4a38      	ldr	r2, [pc, #224]	@ (80064b8 <USB_SetTurnaroundTime+0x124>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d306      	bcc.n	80063ea <USB_SetTurnaroundTime+0x56>
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	4a37      	ldr	r2, [pc, #220]	@ (80064bc <USB_SetTurnaroundTime+0x128>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d202      	bcs.n	80063ea <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80063e4:	230d      	movs	r3, #13
 80063e6:	617b      	str	r3, [r7, #20]
 80063e8:	e04c      	b.n	8006484 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	4a33      	ldr	r2, [pc, #204]	@ (80064bc <USB_SetTurnaroundTime+0x128>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d306      	bcc.n	8006400 <USB_SetTurnaroundTime+0x6c>
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	4a32      	ldr	r2, [pc, #200]	@ (80064c0 <USB_SetTurnaroundTime+0x12c>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d802      	bhi.n	8006400 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80063fa:	230c      	movs	r3, #12
 80063fc:	617b      	str	r3, [r7, #20]
 80063fe:	e041      	b.n	8006484 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	4a2f      	ldr	r2, [pc, #188]	@ (80064c0 <USB_SetTurnaroundTime+0x12c>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d906      	bls.n	8006416 <USB_SetTurnaroundTime+0x82>
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	4a2e      	ldr	r2, [pc, #184]	@ (80064c4 <USB_SetTurnaroundTime+0x130>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d802      	bhi.n	8006416 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006410:	230b      	movs	r3, #11
 8006412:	617b      	str	r3, [r7, #20]
 8006414:	e036      	b.n	8006484 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	4a2a      	ldr	r2, [pc, #168]	@ (80064c4 <USB_SetTurnaroundTime+0x130>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d906      	bls.n	800642c <USB_SetTurnaroundTime+0x98>
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	4a29      	ldr	r2, [pc, #164]	@ (80064c8 <USB_SetTurnaroundTime+0x134>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d802      	bhi.n	800642c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006426:	230a      	movs	r3, #10
 8006428:	617b      	str	r3, [r7, #20]
 800642a:	e02b      	b.n	8006484 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	4a26      	ldr	r2, [pc, #152]	@ (80064c8 <USB_SetTurnaroundTime+0x134>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d906      	bls.n	8006442 <USB_SetTurnaroundTime+0xae>
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	4a25      	ldr	r2, [pc, #148]	@ (80064cc <USB_SetTurnaroundTime+0x138>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d202      	bcs.n	8006442 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800643c:	2309      	movs	r3, #9
 800643e:	617b      	str	r3, [r7, #20]
 8006440:	e020      	b.n	8006484 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	4a21      	ldr	r2, [pc, #132]	@ (80064cc <USB_SetTurnaroundTime+0x138>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d306      	bcc.n	8006458 <USB_SetTurnaroundTime+0xc4>
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	4a20      	ldr	r2, [pc, #128]	@ (80064d0 <USB_SetTurnaroundTime+0x13c>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d802      	bhi.n	8006458 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006452:	2308      	movs	r3, #8
 8006454:	617b      	str	r3, [r7, #20]
 8006456:	e015      	b.n	8006484 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	4a1d      	ldr	r2, [pc, #116]	@ (80064d0 <USB_SetTurnaroundTime+0x13c>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d906      	bls.n	800646e <USB_SetTurnaroundTime+0xda>
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	4a1c      	ldr	r2, [pc, #112]	@ (80064d4 <USB_SetTurnaroundTime+0x140>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d202      	bcs.n	800646e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006468:	2307      	movs	r3, #7
 800646a:	617b      	str	r3, [r7, #20]
 800646c:	e00a      	b.n	8006484 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800646e:	2306      	movs	r3, #6
 8006470:	617b      	str	r3, [r7, #20]
 8006472:	e007      	b.n	8006484 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006474:	79fb      	ldrb	r3, [r7, #7]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d102      	bne.n	8006480 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800647a:	2309      	movs	r3, #9
 800647c:	617b      	str	r3, [r7, #20]
 800647e:	e001      	b.n	8006484 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006480:	2309      	movs	r3, #9
 8006482:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	68da      	ldr	r2, [r3, #12]
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	029b      	lsls	r3, r3, #10
 8006498:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800649c:	431a      	orrs	r2, r3
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80064a2:	2300      	movs	r3, #0
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	371c      	adds	r7, #28
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr
 80064b0:	00d8acbf 	.word	0x00d8acbf
 80064b4:	00e4e1c0 	.word	0x00e4e1c0
 80064b8:	00f42400 	.word	0x00f42400
 80064bc:	01067380 	.word	0x01067380
 80064c0:	011a499f 	.word	0x011a499f
 80064c4:	01312cff 	.word	0x01312cff
 80064c8:	014ca43f 	.word	0x014ca43f
 80064cc:	016e3600 	.word	0x016e3600
 80064d0:	01a6ab1f 	.word	0x01a6ab1f
 80064d4:	01e84800 	.word	0x01e84800

080064d8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	f043 0201 	orr.w	r2, r3, #1
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	370c      	adds	r7, #12
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr

080064fa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80064fa:	b480      	push	{r7}
 80064fc:	b083      	sub	sp, #12
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	f023 0201 	bic.w	r2, r3, #1
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800650e:	2300      	movs	r3, #0
}
 8006510:	4618      	mov	r0, r3
 8006512:	370c      	adds	r7, #12
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	460b      	mov	r3, r1
 8006526:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006528:	2300      	movs	r3, #0
 800652a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006538:	78fb      	ldrb	r3, [r7, #3]
 800653a:	2b01      	cmp	r3, #1
 800653c:	d115      	bne.n	800656a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800654a:	200a      	movs	r0, #10
 800654c:	f7fa fe64 	bl	8001218 <HAL_Delay>
      ms += 10U;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	330a      	adds	r3, #10
 8006554:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f001 f93f 	bl	80077da <USB_GetMode>
 800655c:	4603      	mov	r3, r0
 800655e:	2b01      	cmp	r3, #1
 8006560:	d01e      	beq.n	80065a0 <USB_SetCurrentMode+0x84>
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2bc7      	cmp	r3, #199	@ 0xc7
 8006566:	d9f0      	bls.n	800654a <USB_SetCurrentMode+0x2e>
 8006568:	e01a      	b.n	80065a0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800656a:	78fb      	ldrb	r3, [r7, #3]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d115      	bne.n	800659c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800657c:	200a      	movs	r0, #10
 800657e:	f7fa fe4b 	bl	8001218 <HAL_Delay>
      ms += 10U;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	330a      	adds	r3, #10
 8006586:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f001 f926 	bl	80077da <USB_GetMode>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d005      	beq.n	80065a0 <USB_SetCurrentMode+0x84>
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2bc7      	cmp	r3, #199	@ 0xc7
 8006598:	d9f0      	bls.n	800657c <USB_SetCurrentMode+0x60>
 800659a:	e001      	b.n	80065a0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	e005      	b.n	80065ac <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2bc8      	cmp	r3, #200	@ 0xc8
 80065a4:	d101      	bne.n	80065aa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e000      	b.n	80065ac <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80065aa:	2300      	movs	r3, #0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3710      	adds	r7, #16
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80065b4:	b084      	sub	sp, #16
 80065b6:	b580      	push	{r7, lr}
 80065b8:	b086      	sub	sp, #24
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
 80065be:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80065c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80065c6:	2300      	movs	r3, #0
 80065c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80065ce:	2300      	movs	r3, #0
 80065d0:	613b      	str	r3, [r7, #16]
 80065d2:	e009      	b.n	80065e8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	3340      	adds	r3, #64	@ 0x40
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	4413      	add	r3, r2
 80065de:	2200      	movs	r2, #0
 80065e0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	3301      	adds	r3, #1
 80065e6:	613b      	str	r3, [r7, #16]
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	2b0e      	cmp	r3, #14
 80065ec:	d9f2      	bls.n	80065d4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80065ee:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d11c      	bne.n	8006630 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	68fa      	ldr	r2, [r7, #12]
 8006600:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006604:	f043 0302 	orr.w	r3, r3, #2
 8006608:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800660e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800661a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006626:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	639a      	str	r2, [r3, #56]	@ 0x38
 800662e:	e00b      	b.n	8006648 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006634:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006640:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800664e:	461a      	mov	r2, r3
 8006650:	2300      	movs	r3, #0
 8006652:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006654:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006658:	2b01      	cmp	r3, #1
 800665a:	d10d      	bne.n	8006678 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800665c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006660:	2b00      	cmp	r3, #0
 8006662:	d104      	bne.n	800666e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006664:	2100      	movs	r1, #0
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 f968 	bl	800693c <USB_SetDevSpeed>
 800666c:	e008      	b.n	8006680 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800666e:	2101      	movs	r1, #1
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 f963 	bl	800693c <USB_SetDevSpeed>
 8006676:	e003      	b.n	8006680 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006678:	2103      	movs	r1, #3
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 f95e 	bl	800693c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006680:	2110      	movs	r1, #16
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 f8fa 	bl	800687c <USB_FlushTxFifo>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d001      	beq.n	8006692 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 f924 	bl	80068e0 <USB_FlushRxFifo>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d001      	beq.n	80066a2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066a8:	461a      	mov	r2, r3
 80066aa:	2300      	movs	r3, #0
 80066ac:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066b4:	461a      	mov	r2, r3
 80066b6:	2300      	movs	r3, #0
 80066b8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066c0:	461a      	mov	r2, r3
 80066c2:	2300      	movs	r3, #0
 80066c4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066c6:	2300      	movs	r3, #0
 80066c8:	613b      	str	r3, [r7, #16]
 80066ca:	e043      	b.n	8006754 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	015a      	lsls	r2, r3, #5
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	4413      	add	r3, r2
 80066d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80066de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066e2:	d118      	bne.n	8006716 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d10a      	bne.n	8006700 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	015a      	lsls	r2, r3, #5
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	4413      	add	r3, r2
 80066f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066f6:	461a      	mov	r2, r3
 80066f8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80066fc:	6013      	str	r3, [r2, #0]
 80066fe:	e013      	b.n	8006728 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	015a      	lsls	r2, r3, #5
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	4413      	add	r3, r2
 8006708:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800670c:	461a      	mov	r2, r3
 800670e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006712:	6013      	str	r3, [r2, #0]
 8006714:	e008      	b.n	8006728 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	015a      	lsls	r2, r3, #5
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	4413      	add	r3, r2
 800671e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006722:	461a      	mov	r2, r3
 8006724:	2300      	movs	r3, #0
 8006726:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	015a      	lsls	r2, r3, #5
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	4413      	add	r3, r2
 8006730:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006734:	461a      	mov	r2, r3
 8006736:	2300      	movs	r3, #0
 8006738:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	015a      	lsls	r2, r3, #5
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	4413      	add	r3, r2
 8006742:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006746:	461a      	mov	r2, r3
 8006748:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800674c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	3301      	adds	r3, #1
 8006752:	613b      	str	r3, [r7, #16]
 8006754:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006758:	461a      	mov	r2, r3
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	4293      	cmp	r3, r2
 800675e:	d3b5      	bcc.n	80066cc <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006760:	2300      	movs	r3, #0
 8006762:	613b      	str	r3, [r7, #16]
 8006764:	e043      	b.n	80067ee <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	015a      	lsls	r2, r3, #5
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	4413      	add	r3, r2
 800676e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006778:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800677c:	d118      	bne.n	80067b0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d10a      	bne.n	800679a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	015a      	lsls	r2, r3, #5
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	4413      	add	r3, r2
 800678c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006790:	461a      	mov	r2, r3
 8006792:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006796:	6013      	str	r3, [r2, #0]
 8006798:	e013      	b.n	80067c2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	015a      	lsls	r2, r3, #5
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	4413      	add	r3, r2
 80067a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067a6:	461a      	mov	r2, r3
 80067a8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80067ac:	6013      	str	r3, [r2, #0]
 80067ae:	e008      	b.n	80067c2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	015a      	lsls	r2, r3, #5
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	4413      	add	r3, r2
 80067b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067bc:	461a      	mov	r2, r3
 80067be:	2300      	movs	r3, #0
 80067c0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	015a      	lsls	r2, r3, #5
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	4413      	add	r3, r2
 80067ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067ce:	461a      	mov	r2, r3
 80067d0:	2300      	movs	r3, #0
 80067d2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	015a      	lsls	r2, r3, #5
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	4413      	add	r3, r2
 80067dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067e0:	461a      	mov	r2, r3
 80067e2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80067e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	3301      	adds	r3, #1
 80067ec:	613b      	str	r3, [r7, #16]
 80067ee:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80067f2:	461a      	mov	r2, r3
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d3b5      	bcc.n	8006766 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	68fa      	ldr	r2, [r7, #12]
 8006804:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006808:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800680c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800681a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800681c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006820:	2b00      	cmp	r3, #0
 8006822:	d105      	bne.n	8006830 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	699b      	ldr	r3, [r3, #24]
 8006828:	f043 0210 	orr.w	r2, r3, #16
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	699a      	ldr	r2, [r3, #24]
 8006834:	4b10      	ldr	r3, [pc, #64]	@ (8006878 <USB_DevInit+0x2c4>)
 8006836:	4313      	orrs	r3, r2
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800683c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006840:	2b00      	cmp	r3, #0
 8006842:	d005      	beq.n	8006850 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	699b      	ldr	r3, [r3, #24]
 8006848:	f043 0208 	orr.w	r2, r3, #8
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006850:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006854:	2b01      	cmp	r3, #1
 8006856:	d107      	bne.n	8006868 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	699b      	ldr	r3, [r3, #24]
 800685c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006860:	f043 0304 	orr.w	r3, r3, #4
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006868:	7dfb      	ldrb	r3, [r7, #23]
}
 800686a:	4618      	mov	r0, r3
 800686c:	3718      	adds	r7, #24
 800686e:	46bd      	mov	sp, r7
 8006870:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006874:	b004      	add	sp, #16
 8006876:	4770      	bx	lr
 8006878:	803c3800 	.word	0x803c3800

0800687c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800687c:	b480      	push	{r7}
 800687e:	b085      	sub	sp, #20
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006886:	2300      	movs	r3, #0
 8006888:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	3301      	adds	r3, #1
 800688e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006896:	d901      	bls.n	800689c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006898:	2303      	movs	r3, #3
 800689a:	e01b      	b.n	80068d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	691b      	ldr	r3, [r3, #16]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	daf2      	bge.n	800688a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80068a4:	2300      	movs	r3, #0
 80068a6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	019b      	lsls	r3, r3, #6
 80068ac:	f043 0220 	orr.w	r2, r3, #32
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	3301      	adds	r3, #1
 80068b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80068c0:	d901      	bls.n	80068c6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80068c2:	2303      	movs	r3, #3
 80068c4:	e006      	b.n	80068d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	f003 0320 	and.w	r3, r3, #32
 80068ce:	2b20      	cmp	r3, #32
 80068d0:	d0f0      	beq.n	80068b4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80068d2:	2300      	movs	r3, #0
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3714      	adds	r7, #20
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b085      	sub	sp, #20
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80068e8:	2300      	movs	r3, #0
 80068ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	3301      	adds	r3, #1
 80068f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80068f8:	d901      	bls.n	80068fe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80068fa:	2303      	movs	r3, #3
 80068fc:	e018      	b.n	8006930 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	691b      	ldr	r3, [r3, #16]
 8006902:	2b00      	cmp	r3, #0
 8006904:	daf2      	bge.n	80068ec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006906:	2300      	movs	r3, #0
 8006908:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2210      	movs	r2, #16
 800690e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	3301      	adds	r3, #1
 8006914:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800691c:	d901      	bls.n	8006922 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800691e:	2303      	movs	r3, #3
 8006920:	e006      	b.n	8006930 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	f003 0310 	and.w	r3, r3, #16
 800692a:	2b10      	cmp	r3, #16
 800692c:	d0f0      	beq.n	8006910 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800692e:	2300      	movs	r3, #0
}
 8006930:	4618      	mov	r0, r3
 8006932:	3714      	adds	r7, #20
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800693c:	b480      	push	{r7}
 800693e:	b085      	sub	sp, #20
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	460b      	mov	r3, r1
 8006946:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	78fb      	ldrb	r3, [r7, #3]
 8006956:	68f9      	ldr	r1, [r7, #12]
 8006958:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800695c:	4313      	orrs	r3, r2
 800695e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006960:	2300      	movs	r3, #0
}
 8006962:	4618      	mov	r0, r3
 8006964:	3714      	adds	r7, #20
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr

0800696e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800696e:	b480      	push	{r7}
 8006970:	b087      	sub	sp, #28
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	f003 0306 	and.w	r3, r3, #6
 8006986:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d102      	bne.n	8006994 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800698e:	2300      	movs	r3, #0
 8006990:	75fb      	strb	r3, [r7, #23]
 8006992:	e00a      	b.n	80069aa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2b02      	cmp	r3, #2
 8006998:	d002      	beq.n	80069a0 <USB_GetDevSpeed+0x32>
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2b06      	cmp	r3, #6
 800699e:	d102      	bne.n	80069a6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80069a0:	2302      	movs	r3, #2
 80069a2:	75fb      	strb	r3, [r7, #23]
 80069a4:	e001      	b.n	80069aa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80069a6:	230f      	movs	r3, #15
 80069a8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80069aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	371c      	adds	r7, #28
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr

080069b8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b085      	sub	sp, #20
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	785b      	ldrb	r3, [r3, #1]
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d13a      	bne.n	8006a4a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069da:	69da      	ldr	r2, [r3, #28]
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	f003 030f 	and.w	r3, r3, #15
 80069e4:	2101      	movs	r1, #1
 80069e6:	fa01 f303 	lsl.w	r3, r1, r3
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	68f9      	ldr	r1, [r7, #12]
 80069ee:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80069f2:	4313      	orrs	r3, r2
 80069f4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	015a      	lsls	r2, r3, #5
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	4413      	add	r3, r2
 80069fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d155      	bne.n	8006ab8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	015a      	lsls	r2, r3, #5
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	4413      	add	r3, r2
 8006a14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	791b      	ldrb	r3, [r3, #4]
 8006a26:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006a28:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	059b      	lsls	r3, r3, #22
 8006a2e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006a30:	4313      	orrs	r3, r2
 8006a32:	68ba      	ldr	r2, [r7, #8]
 8006a34:	0151      	lsls	r1, r2, #5
 8006a36:	68fa      	ldr	r2, [r7, #12]
 8006a38:	440a      	add	r2, r1
 8006a3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a46:	6013      	str	r3, [r2, #0]
 8006a48:	e036      	b.n	8006ab8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a50:	69da      	ldr	r2, [r3, #28]
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	f003 030f 	and.w	r3, r3, #15
 8006a5a:	2101      	movs	r1, #1
 8006a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8006a60:	041b      	lsls	r3, r3, #16
 8006a62:	68f9      	ldr	r1, [r7, #12]
 8006a64:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	015a      	lsls	r2, r3, #5
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	4413      	add	r3, r2
 8006a74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d11a      	bne.n	8006ab8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	015a      	lsls	r2, r3, #5
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	4413      	add	r3, r2
 8006a8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	791b      	ldrb	r3, [r3, #4]
 8006a9c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006a9e:	430b      	orrs	r3, r1
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	68ba      	ldr	r2, [r7, #8]
 8006aa4:	0151      	lsls	r1, r2, #5
 8006aa6:	68fa      	ldr	r2, [r7, #12]
 8006aa8:	440a      	add	r2, r1
 8006aaa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006aae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ab2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ab6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006ab8:	2300      	movs	r3, #0
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3714      	adds	r7, #20
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr
	...

08006ac8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b085      	sub	sp, #20
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	785b      	ldrb	r3, [r3, #1]
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d161      	bne.n	8006ba8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	015a      	lsls	r2, r3, #5
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	4413      	add	r3, r2
 8006aec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006af6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006afa:	d11f      	bne.n	8006b3c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	015a      	lsls	r2, r3, #5
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	4413      	add	r3, r2
 8006b04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	68ba      	ldr	r2, [r7, #8]
 8006b0c:	0151      	lsls	r1, r2, #5
 8006b0e:	68fa      	ldr	r2, [r7, #12]
 8006b10:	440a      	add	r2, r1
 8006b12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b16:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006b1a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	015a      	lsls	r2, r3, #5
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	4413      	add	r3, r2
 8006b24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	68ba      	ldr	r2, [r7, #8]
 8006b2c:	0151      	lsls	r1, r2, #5
 8006b2e:	68fa      	ldr	r2, [r7, #12]
 8006b30:	440a      	add	r2, r1
 8006b32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b36:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b3a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b42:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	f003 030f 	and.w	r3, r3, #15
 8006b4c:	2101      	movs	r1, #1
 8006b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	43db      	mvns	r3, r3
 8006b56:	68f9      	ldr	r1, [r7, #12]
 8006b58:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b5c:	4013      	ands	r3, r2
 8006b5e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b66:	69da      	ldr	r2, [r3, #28]
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	f003 030f 	and.w	r3, r3, #15
 8006b70:	2101      	movs	r1, #1
 8006b72:	fa01 f303 	lsl.w	r3, r1, r3
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	43db      	mvns	r3, r3
 8006b7a:	68f9      	ldr	r1, [r7, #12]
 8006b7c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b80:	4013      	ands	r3, r2
 8006b82:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	015a      	lsls	r2, r3, #5
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	4413      	add	r3, r2
 8006b8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	0159      	lsls	r1, r3, #5
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	440b      	add	r3, r1
 8006b9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	4b35      	ldr	r3, [pc, #212]	@ (8006c78 <USB_DeactivateEndpoint+0x1b0>)
 8006ba2:	4013      	ands	r3, r2
 8006ba4:	600b      	str	r3, [r1, #0]
 8006ba6:	e060      	b.n	8006c6a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	015a      	lsls	r2, r3, #5
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	4413      	add	r3, r2
 8006bb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006bba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006bbe:	d11f      	bne.n	8006c00 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	015a      	lsls	r2, r3, #5
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	4413      	add	r3, r2
 8006bc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	68ba      	ldr	r2, [r7, #8]
 8006bd0:	0151      	lsls	r1, r2, #5
 8006bd2:	68fa      	ldr	r2, [r7, #12]
 8006bd4:	440a      	add	r2, r1
 8006bd6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006bda:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006bde:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	015a      	lsls	r2, r3, #5
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	4413      	add	r3, r2
 8006be8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	68ba      	ldr	r2, [r7, #8]
 8006bf0:	0151      	lsls	r1, r2, #5
 8006bf2:	68fa      	ldr	r2, [r7, #12]
 8006bf4:	440a      	add	r2, r1
 8006bf6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006bfa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006bfe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	f003 030f 	and.w	r3, r3, #15
 8006c10:	2101      	movs	r1, #1
 8006c12:	fa01 f303 	lsl.w	r3, r1, r3
 8006c16:	041b      	lsls	r3, r3, #16
 8006c18:	43db      	mvns	r3, r3
 8006c1a:	68f9      	ldr	r1, [r7, #12]
 8006c1c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006c20:	4013      	ands	r3, r2
 8006c22:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c2a:	69da      	ldr	r2, [r3, #28]
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	f003 030f 	and.w	r3, r3, #15
 8006c34:	2101      	movs	r1, #1
 8006c36:	fa01 f303 	lsl.w	r3, r1, r3
 8006c3a:	041b      	lsls	r3, r3, #16
 8006c3c:	43db      	mvns	r3, r3
 8006c3e:	68f9      	ldr	r1, [r7, #12]
 8006c40:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006c44:	4013      	ands	r3, r2
 8006c46:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	015a      	lsls	r2, r3, #5
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	4413      	add	r3, r2
 8006c50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	0159      	lsls	r1, r3, #5
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	440b      	add	r3, r1
 8006c5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c62:	4619      	mov	r1, r3
 8006c64:	4b05      	ldr	r3, [pc, #20]	@ (8006c7c <USB_DeactivateEndpoint+0x1b4>)
 8006c66:	4013      	ands	r3, r2
 8006c68:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006c6a:	2300      	movs	r3, #0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3714      	adds	r7, #20
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr
 8006c78:	ec337800 	.word	0xec337800
 8006c7c:	eff37800 	.word	0xeff37800

08006c80 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b08a      	sub	sp, #40	@ 0x28
 8006c84:	af02      	add	r7, sp, #8
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	4613      	mov	r3, r2
 8006c8c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	785b      	ldrb	r3, [r3, #1]
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	f040 817f 	bne.w	8006fa0 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	691b      	ldr	r3, [r3, #16]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d132      	bne.n	8006d10 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006caa:	69bb      	ldr	r3, [r7, #24]
 8006cac:	015a      	lsls	r2, r3, #5
 8006cae:	69fb      	ldr	r3, [r7, #28]
 8006cb0:	4413      	add	r3, r2
 8006cb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cb6:	691b      	ldr	r3, [r3, #16]
 8006cb8:	69ba      	ldr	r2, [r7, #24]
 8006cba:	0151      	lsls	r1, r2, #5
 8006cbc:	69fa      	ldr	r2, [r7, #28]
 8006cbe:	440a      	add	r2, r1
 8006cc0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006cc4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006cc8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006ccc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006cce:	69bb      	ldr	r3, [r7, #24]
 8006cd0:	015a      	lsls	r2, r3, #5
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	4413      	add	r3, r2
 8006cd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cda:	691b      	ldr	r3, [r3, #16]
 8006cdc:	69ba      	ldr	r2, [r7, #24]
 8006cde:	0151      	lsls	r1, r2, #5
 8006ce0:	69fa      	ldr	r2, [r7, #28]
 8006ce2:	440a      	add	r2, r1
 8006ce4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ce8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006cec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006cee:	69bb      	ldr	r3, [r7, #24]
 8006cf0:	015a      	lsls	r2, r3, #5
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	4413      	add	r3, r2
 8006cf6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cfa:	691b      	ldr	r3, [r3, #16]
 8006cfc:	69ba      	ldr	r2, [r7, #24]
 8006cfe:	0151      	lsls	r1, r2, #5
 8006d00:	69fa      	ldr	r2, [r7, #28]
 8006d02:	440a      	add	r2, r1
 8006d04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d08:	0cdb      	lsrs	r3, r3, #19
 8006d0a:	04db      	lsls	r3, r3, #19
 8006d0c:	6113      	str	r3, [r2, #16]
 8006d0e:	e097      	b.n	8006e40 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006d10:	69bb      	ldr	r3, [r7, #24]
 8006d12:	015a      	lsls	r2, r3, #5
 8006d14:	69fb      	ldr	r3, [r7, #28]
 8006d16:	4413      	add	r3, r2
 8006d18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d1c:	691b      	ldr	r3, [r3, #16]
 8006d1e:	69ba      	ldr	r2, [r7, #24]
 8006d20:	0151      	lsls	r1, r2, #5
 8006d22:	69fa      	ldr	r2, [r7, #28]
 8006d24:	440a      	add	r2, r1
 8006d26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d2a:	0cdb      	lsrs	r3, r3, #19
 8006d2c:	04db      	lsls	r3, r3, #19
 8006d2e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006d30:	69bb      	ldr	r3, [r7, #24]
 8006d32:	015a      	lsls	r2, r3, #5
 8006d34:	69fb      	ldr	r3, [r7, #28]
 8006d36:	4413      	add	r3, r2
 8006d38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d3c:	691b      	ldr	r3, [r3, #16]
 8006d3e:	69ba      	ldr	r2, [r7, #24]
 8006d40:	0151      	lsls	r1, r2, #5
 8006d42:	69fa      	ldr	r2, [r7, #28]
 8006d44:	440a      	add	r2, r1
 8006d46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d4a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006d4e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006d52:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006d54:	69bb      	ldr	r3, [r7, #24]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d11a      	bne.n	8006d90 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	691a      	ldr	r2, [r3, #16]
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d903      	bls.n	8006d6e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	689a      	ldr	r2, [r3, #8]
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	015a      	lsls	r2, r3, #5
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	4413      	add	r3, r2
 8006d76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d7a:	691b      	ldr	r3, [r3, #16]
 8006d7c:	69ba      	ldr	r2, [r7, #24]
 8006d7e:	0151      	lsls	r1, r2, #5
 8006d80:	69fa      	ldr	r2, [r7, #28]
 8006d82:	440a      	add	r2, r1
 8006d84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d88:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006d8c:	6113      	str	r3, [r2, #16]
 8006d8e:	e044      	b.n	8006e1a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	691a      	ldr	r2, [r3, #16]
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	4413      	add	r3, r2
 8006d9a:	1e5a      	subs	r2, r3, #1
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006da4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	015a      	lsls	r2, r3, #5
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	4413      	add	r3, r2
 8006dae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006db2:	691a      	ldr	r2, [r3, #16]
 8006db4:	8afb      	ldrh	r3, [r7, #22]
 8006db6:	04d9      	lsls	r1, r3, #19
 8006db8:	4ba4      	ldr	r3, [pc, #656]	@ (800704c <USB_EPStartXfer+0x3cc>)
 8006dba:	400b      	ands	r3, r1
 8006dbc:	69b9      	ldr	r1, [r7, #24]
 8006dbe:	0148      	lsls	r0, r1, #5
 8006dc0:	69f9      	ldr	r1, [r7, #28]
 8006dc2:	4401      	add	r1, r0
 8006dc4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	791b      	ldrb	r3, [r3, #4]
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d122      	bne.n	8006e1a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006dd4:	69bb      	ldr	r3, [r7, #24]
 8006dd6:	015a      	lsls	r2, r3, #5
 8006dd8:	69fb      	ldr	r3, [r7, #28]
 8006dda:	4413      	add	r3, r2
 8006ddc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006de0:	691b      	ldr	r3, [r3, #16]
 8006de2:	69ba      	ldr	r2, [r7, #24]
 8006de4:	0151      	lsls	r1, r2, #5
 8006de6:	69fa      	ldr	r2, [r7, #28]
 8006de8:	440a      	add	r2, r1
 8006dea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006dee:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006df2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8006df4:	69bb      	ldr	r3, [r7, #24]
 8006df6:	015a      	lsls	r2, r3, #5
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	4413      	add	r3, r2
 8006dfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e00:	691a      	ldr	r2, [r3, #16]
 8006e02:	8afb      	ldrh	r3, [r7, #22]
 8006e04:	075b      	lsls	r3, r3, #29
 8006e06:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006e0a:	69b9      	ldr	r1, [r7, #24]
 8006e0c:	0148      	lsls	r0, r1, #5
 8006e0e:	69f9      	ldr	r1, [r7, #28]
 8006e10:	4401      	add	r1, r0
 8006e12:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006e16:	4313      	orrs	r3, r2
 8006e18:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006e1a:	69bb      	ldr	r3, [r7, #24]
 8006e1c:	015a      	lsls	r2, r3, #5
 8006e1e:	69fb      	ldr	r3, [r7, #28]
 8006e20:	4413      	add	r3, r2
 8006e22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e26:	691a      	ldr	r2, [r3, #16]
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	691b      	ldr	r3, [r3, #16]
 8006e2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e30:	69b9      	ldr	r1, [r7, #24]
 8006e32:	0148      	lsls	r0, r1, #5
 8006e34:	69f9      	ldr	r1, [r7, #28]
 8006e36:	4401      	add	r1, r0
 8006e38:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006e40:	79fb      	ldrb	r3, [r7, #7]
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d14b      	bne.n	8006ede <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	69db      	ldr	r3, [r3, #28]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d009      	beq.n	8006e62 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006e4e:	69bb      	ldr	r3, [r7, #24]
 8006e50:	015a      	lsls	r2, r3, #5
 8006e52:	69fb      	ldr	r3, [r7, #28]
 8006e54:	4413      	add	r3, r2
 8006e56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	69db      	ldr	r3, [r3, #28]
 8006e60:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	791b      	ldrb	r3, [r3, #4]
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d128      	bne.n	8006ebc <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006e6a:	69fb      	ldr	r3, [r7, #28]
 8006e6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d110      	bne.n	8006e9c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006e7a:	69bb      	ldr	r3, [r7, #24]
 8006e7c:	015a      	lsls	r2, r3, #5
 8006e7e:	69fb      	ldr	r3, [r7, #28]
 8006e80:	4413      	add	r3, r2
 8006e82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	69ba      	ldr	r2, [r7, #24]
 8006e8a:	0151      	lsls	r1, r2, #5
 8006e8c:	69fa      	ldr	r2, [r7, #28]
 8006e8e:	440a      	add	r2, r1
 8006e90:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e94:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006e98:	6013      	str	r3, [r2, #0]
 8006e9a:	e00f      	b.n	8006ebc <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006e9c:	69bb      	ldr	r3, [r7, #24]
 8006e9e:	015a      	lsls	r2, r3, #5
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	4413      	add	r3, r2
 8006ea4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	69ba      	ldr	r2, [r7, #24]
 8006eac:	0151      	lsls	r1, r2, #5
 8006eae:	69fa      	ldr	r2, [r7, #28]
 8006eb0:	440a      	add	r2, r1
 8006eb2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006eb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006eba:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006ebc:	69bb      	ldr	r3, [r7, #24]
 8006ebe:	015a      	lsls	r2, r3, #5
 8006ec0:	69fb      	ldr	r3, [r7, #28]
 8006ec2:	4413      	add	r3, r2
 8006ec4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	69ba      	ldr	r2, [r7, #24]
 8006ecc:	0151      	lsls	r1, r2, #5
 8006ece:	69fa      	ldr	r2, [r7, #28]
 8006ed0:	440a      	add	r2, r1
 8006ed2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ed6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006eda:	6013      	str	r3, [r2, #0]
 8006edc:	e166      	b.n	80071ac <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	015a      	lsls	r2, r3, #5
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	69ba      	ldr	r2, [r7, #24]
 8006eee:	0151      	lsls	r1, r2, #5
 8006ef0:	69fa      	ldr	r2, [r7, #28]
 8006ef2:	440a      	add	r2, r1
 8006ef4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ef8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006efc:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	791b      	ldrb	r3, [r3, #4]
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d015      	beq.n	8006f32 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	691b      	ldr	r3, [r3, #16]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	f000 814e 	beq.w	80071ac <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006f10:	69fb      	ldr	r3, [r7, #28]
 8006f12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	f003 030f 	and.w	r3, r3, #15
 8006f20:	2101      	movs	r1, #1
 8006f22:	fa01 f303 	lsl.w	r3, r1, r3
 8006f26:	69f9      	ldr	r1, [r7, #28]
 8006f28:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	634b      	str	r3, [r1, #52]	@ 0x34
 8006f30:	e13c      	b.n	80071ac <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006f32:	69fb      	ldr	r3, [r7, #28]
 8006f34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d110      	bne.n	8006f64 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006f42:	69bb      	ldr	r3, [r7, #24]
 8006f44:	015a      	lsls	r2, r3, #5
 8006f46:	69fb      	ldr	r3, [r7, #28]
 8006f48:	4413      	add	r3, r2
 8006f4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	69ba      	ldr	r2, [r7, #24]
 8006f52:	0151      	lsls	r1, r2, #5
 8006f54:	69fa      	ldr	r2, [r7, #28]
 8006f56:	440a      	add	r2, r1
 8006f58:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f5c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006f60:	6013      	str	r3, [r2, #0]
 8006f62:	e00f      	b.n	8006f84 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006f64:	69bb      	ldr	r3, [r7, #24]
 8006f66:	015a      	lsls	r2, r3, #5
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	4413      	add	r3, r2
 8006f6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	69ba      	ldr	r2, [r7, #24]
 8006f74:	0151      	lsls	r1, r2, #5
 8006f76:	69fa      	ldr	r2, [r7, #28]
 8006f78:	440a      	add	r2, r1
 8006f7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f82:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	68d9      	ldr	r1, [r3, #12]
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	781a      	ldrb	r2, [r3, #0]
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	691b      	ldr	r3, [r3, #16]
 8006f90:	b298      	uxth	r0, r3
 8006f92:	79fb      	ldrb	r3, [r7, #7]
 8006f94:	9300      	str	r3, [sp, #0]
 8006f96:	4603      	mov	r3, r0
 8006f98:	68f8      	ldr	r0, [r7, #12]
 8006f9a:	f000 f9b9 	bl	8007310 <USB_WritePacket>
 8006f9e:	e105      	b.n	80071ac <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006fa0:	69bb      	ldr	r3, [r7, #24]
 8006fa2:	015a      	lsls	r2, r3, #5
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	4413      	add	r3, r2
 8006fa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fac:	691b      	ldr	r3, [r3, #16]
 8006fae:	69ba      	ldr	r2, [r7, #24]
 8006fb0:	0151      	lsls	r1, r2, #5
 8006fb2:	69fa      	ldr	r2, [r7, #28]
 8006fb4:	440a      	add	r2, r1
 8006fb6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006fba:	0cdb      	lsrs	r3, r3, #19
 8006fbc:	04db      	lsls	r3, r3, #19
 8006fbe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	015a      	lsls	r2, r3, #5
 8006fc4:	69fb      	ldr	r3, [r7, #28]
 8006fc6:	4413      	add	r3, r2
 8006fc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fcc:	691b      	ldr	r3, [r3, #16]
 8006fce:	69ba      	ldr	r2, [r7, #24]
 8006fd0:	0151      	lsls	r1, r2, #5
 8006fd2:	69fa      	ldr	r2, [r7, #28]
 8006fd4:	440a      	add	r2, r1
 8006fd6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006fda:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006fde:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006fe2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006fe4:	69bb      	ldr	r3, [r7, #24]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d132      	bne.n	8007050 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d003      	beq.n	8006ffa <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	689a      	ldr	r2, [r3, #8]
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	689a      	ldr	r2, [r3, #8]
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007002:	69bb      	ldr	r3, [r7, #24]
 8007004:	015a      	lsls	r2, r3, #5
 8007006:	69fb      	ldr	r3, [r7, #28]
 8007008:	4413      	add	r3, r2
 800700a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800700e:	691a      	ldr	r2, [r3, #16]
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	6a1b      	ldr	r3, [r3, #32]
 8007014:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007018:	69b9      	ldr	r1, [r7, #24]
 800701a:	0148      	lsls	r0, r1, #5
 800701c:	69f9      	ldr	r1, [r7, #28]
 800701e:	4401      	add	r1, r0
 8007020:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007024:	4313      	orrs	r3, r2
 8007026:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007028:	69bb      	ldr	r3, [r7, #24]
 800702a:	015a      	lsls	r2, r3, #5
 800702c:	69fb      	ldr	r3, [r7, #28]
 800702e:	4413      	add	r3, r2
 8007030:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007034:	691b      	ldr	r3, [r3, #16]
 8007036:	69ba      	ldr	r2, [r7, #24]
 8007038:	0151      	lsls	r1, r2, #5
 800703a:	69fa      	ldr	r2, [r7, #28]
 800703c:	440a      	add	r2, r1
 800703e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007042:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007046:	6113      	str	r3, [r2, #16]
 8007048:	e062      	b.n	8007110 <USB_EPStartXfer+0x490>
 800704a:	bf00      	nop
 800704c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	691b      	ldr	r3, [r3, #16]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d123      	bne.n	80070a0 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007058:	69bb      	ldr	r3, [r7, #24]
 800705a:	015a      	lsls	r2, r3, #5
 800705c:	69fb      	ldr	r3, [r7, #28]
 800705e:	4413      	add	r3, r2
 8007060:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007064:	691a      	ldr	r2, [r3, #16]
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800706e:	69b9      	ldr	r1, [r7, #24]
 8007070:	0148      	lsls	r0, r1, #5
 8007072:	69f9      	ldr	r1, [r7, #28]
 8007074:	4401      	add	r1, r0
 8007076:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800707a:	4313      	orrs	r3, r2
 800707c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800707e:	69bb      	ldr	r3, [r7, #24]
 8007080:	015a      	lsls	r2, r3, #5
 8007082:	69fb      	ldr	r3, [r7, #28]
 8007084:	4413      	add	r3, r2
 8007086:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800708a:	691b      	ldr	r3, [r3, #16]
 800708c:	69ba      	ldr	r2, [r7, #24]
 800708e:	0151      	lsls	r1, r2, #5
 8007090:	69fa      	ldr	r2, [r7, #28]
 8007092:	440a      	add	r2, r1
 8007094:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007098:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800709c:	6113      	str	r3, [r2, #16]
 800709e:	e037      	b.n	8007110 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	691a      	ldr	r2, [r3, #16]
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	4413      	add	r3, r2
 80070aa:	1e5a      	subs	r2, r3, #1
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80070b4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	8afa      	ldrh	r2, [r7, #22]
 80070bc:	fb03 f202 	mul.w	r2, r3, r2
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80070c4:	69bb      	ldr	r3, [r7, #24]
 80070c6:	015a      	lsls	r2, r3, #5
 80070c8:	69fb      	ldr	r3, [r7, #28]
 80070ca:	4413      	add	r3, r2
 80070cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070d0:	691a      	ldr	r2, [r3, #16]
 80070d2:	8afb      	ldrh	r3, [r7, #22]
 80070d4:	04d9      	lsls	r1, r3, #19
 80070d6:	4b38      	ldr	r3, [pc, #224]	@ (80071b8 <USB_EPStartXfer+0x538>)
 80070d8:	400b      	ands	r3, r1
 80070da:	69b9      	ldr	r1, [r7, #24]
 80070dc:	0148      	lsls	r0, r1, #5
 80070de:	69f9      	ldr	r1, [r7, #28]
 80070e0:	4401      	add	r1, r0
 80070e2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80070e6:	4313      	orrs	r3, r2
 80070e8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80070ea:	69bb      	ldr	r3, [r7, #24]
 80070ec:	015a      	lsls	r2, r3, #5
 80070ee:	69fb      	ldr	r3, [r7, #28]
 80070f0:	4413      	add	r3, r2
 80070f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070f6:	691a      	ldr	r2, [r3, #16]
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	6a1b      	ldr	r3, [r3, #32]
 80070fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007100:	69b9      	ldr	r1, [r7, #24]
 8007102:	0148      	lsls	r0, r1, #5
 8007104:	69f9      	ldr	r1, [r7, #28]
 8007106:	4401      	add	r1, r0
 8007108:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800710c:	4313      	orrs	r3, r2
 800710e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007110:	79fb      	ldrb	r3, [r7, #7]
 8007112:	2b01      	cmp	r3, #1
 8007114:	d10d      	bne.n	8007132 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	68db      	ldr	r3, [r3, #12]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d009      	beq.n	8007132 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	68d9      	ldr	r1, [r3, #12]
 8007122:	69bb      	ldr	r3, [r7, #24]
 8007124:	015a      	lsls	r2, r3, #5
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	4413      	add	r3, r2
 800712a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800712e:	460a      	mov	r2, r1
 8007130:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	791b      	ldrb	r3, [r3, #4]
 8007136:	2b01      	cmp	r3, #1
 8007138:	d128      	bne.n	800718c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800713a:	69fb      	ldr	r3, [r7, #28]
 800713c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007146:	2b00      	cmp	r3, #0
 8007148:	d110      	bne.n	800716c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800714a:	69bb      	ldr	r3, [r7, #24]
 800714c:	015a      	lsls	r2, r3, #5
 800714e:	69fb      	ldr	r3, [r7, #28]
 8007150:	4413      	add	r3, r2
 8007152:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	69ba      	ldr	r2, [r7, #24]
 800715a:	0151      	lsls	r1, r2, #5
 800715c:	69fa      	ldr	r2, [r7, #28]
 800715e:	440a      	add	r2, r1
 8007160:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007164:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007168:	6013      	str	r3, [r2, #0]
 800716a:	e00f      	b.n	800718c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800716c:	69bb      	ldr	r3, [r7, #24]
 800716e:	015a      	lsls	r2, r3, #5
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	4413      	add	r3, r2
 8007174:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	69ba      	ldr	r2, [r7, #24]
 800717c:	0151      	lsls	r1, r2, #5
 800717e:	69fa      	ldr	r2, [r7, #28]
 8007180:	440a      	add	r2, r1
 8007182:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007186:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800718a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800718c:	69bb      	ldr	r3, [r7, #24]
 800718e:	015a      	lsls	r2, r3, #5
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	4413      	add	r3, r2
 8007194:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	69ba      	ldr	r2, [r7, #24]
 800719c:	0151      	lsls	r1, r2, #5
 800719e:	69fa      	ldr	r2, [r7, #28]
 80071a0:	440a      	add	r2, r1
 80071a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80071a6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80071aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80071ac:	2300      	movs	r3, #0
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3720      	adds	r7, #32
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	bf00      	nop
 80071b8:	1ff80000 	.word	0x1ff80000

080071bc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80071bc:	b480      	push	{r7}
 80071be:	b087      	sub	sp, #28
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80071c6:	2300      	movs	r3, #0
 80071c8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80071ca:	2300      	movs	r3, #0
 80071cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	785b      	ldrb	r3, [r3, #1]
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d14a      	bne.n	8007270 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	015a      	lsls	r2, r3, #5
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	4413      	add	r3, r2
 80071e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80071ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80071f2:	f040 8086 	bne.w	8007302 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	015a      	lsls	r2, r3, #5
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	4413      	add	r3, r2
 8007200:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	683a      	ldr	r2, [r7, #0]
 8007208:	7812      	ldrb	r2, [r2, #0]
 800720a:	0151      	lsls	r1, r2, #5
 800720c:	693a      	ldr	r2, [r7, #16]
 800720e:	440a      	add	r2, r1
 8007210:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007214:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007218:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	015a      	lsls	r2, r3, #5
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	4413      	add	r3, r2
 8007224:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	683a      	ldr	r2, [r7, #0]
 800722c:	7812      	ldrb	r2, [r2, #0]
 800722e:	0151      	lsls	r1, r2, #5
 8007230:	693a      	ldr	r2, [r7, #16]
 8007232:	440a      	add	r2, r1
 8007234:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007238:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800723c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	3301      	adds	r3, #1
 8007242:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f242 7210 	movw	r2, #10000	@ 0x2710
 800724a:	4293      	cmp	r3, r2
 800724c:	d902      	bls.n	8007254 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	75fb      	strb	r3, [r7, #23]
          break;
 8007252:	e056      	b.n	8007302 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	015a      	lsls	r2, r3, #5
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	4413      	add	r3, r2
 800725e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007268:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800726c:	d0e7      	beq.n	800723e <USB_EPStopXfer+0x82>
 800726e:	e048      	b.n	8007302 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	015a      	lsls	r2, r3, #5
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	4413      	add	r3, r2
 800727a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007284:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007288:	d13b      	bne.n	8007302 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	015a      	lsls	r2, r3, #5
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	4413      	add	r3, r2
 8007294:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	683a      	ldr	r2, [r7, #0]
 800729c:	7812      	ldrb	r2, [r2, #0]
 800729e:	0151      	lsls	r1, r2, #5
 80072a0:	693a      	ldr	r2, [r7, #16]
 80072a2:	440a      	add	r2, r1
 80072a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072a8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80072ac:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	015a      	lsls	r2, r3, #5
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	4413      	add	r3, r2
 80072b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	683a      	ldr	r2, [r7, #0]
 80072c0:	7812      	ldrb	r2, [r2, #0]
 80072c2:	0151      	lsls	r1, r2, #5
 80072c4:	693a      	ldr	r2, [r7, #16]
 80072c6:	440a      	add	r2, r1
 80072c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072cc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80072d0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	3301      	adds	r3, #1
 80072d6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f242 7210 	movw	r2, #10000	@ 0x2710
 80072de:	4293      	cmp	r3, r2
 80072e0:	d902      	bls.n	80072e8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	75fb      	strb	r3, [r7, #23]
          break;
 80072e6:	e00c      	b.n	8007302 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	015a      	lsls	r2, r3, #5
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	4413      	add	r3, r2
 80072f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80072fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007300:	d0e7      	beq.n	80072d2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007302:	7dfb      	ldrb	r3, [r7, #23]
}
 8007304:	4618      	mov	r0, r3
 8007306:	371c      	adds	r7, #28
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007310:	b480      	push	{r7}
 8007312:	b089      	sub	sp, #36	@ 0x24
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	4611      	mov	r1, r2
 800731c:	461a      	mov	r2, r3
 800731e:	460b      	mov	r3, r1
 8007320:	71fb      	strb	r3, [r7, #7]
 8007322:	4613      	mov	r3, r2
 8007324:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800732e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007332:	2b00      	cmp	r3, #0
 8007334:	d123      	bne.n	800737e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007336:	88bb      	ldrh	r3, [r7, #4]
 8007338:	3303      	adds	r3, #3
 800733a:	089b      	lsrs	r3, r3, #2
 800733c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800733e:	2300      	movs	r3, #0
 8007340:	61bb      	str	r3, [r7, #24]
 8007342:	e018      	b.n	8007376 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007344:	79fb      	ldrb	r3, [r7, #7]
 8007346:	031a      	lsls	r2, r3, #12
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	4413      	add	r3, r2
 800734c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007350:	461a      	mov	r2, r3
 8007352:	69fb      	ldr	r3, [r7, #28]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007358:	69fb      	ldr	r3, [r7, #28]
 800735a:	3301      	adds	r3, #1
 800735c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800735e:	69fb      	ldr	r3, [r7, #28]
 8007360:	3301      	adds	r3, #1
 8007362:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	3301      	adds	r3, #1
 8007368:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800736a:	69fb      	ldr	r3, [r7, #28]
 800736c:	3301      	adds	r3, #1
 800736e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	3301      	adds	r3, #1
 8007374:	61bb      	str	r3, [r7, #24]
 8007376:	69ba      	ldr	r2, [r7, #24]
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	429a      	cmp	r2, r3
 800737c:	d3e2      	bcc.n	8007344 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800737e:	2300      	movs	r3, #0
}
 8007380:	4618      	mov	r0, r3
 8007382:	3724      	adds	r7, #36	@ 0x24
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr

0800738c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800738c:	b480      	push	{r7}
 800738e:	b08b      	sub	sp, #44	@ 0x2c
 8007390:	af00      	add	r7, sp, #0
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	60b9      	str	r1, [r7, #8]
 8007396:	4613      	mov	r3, r2
 8007398:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80073a2:	88fb      	ldrh	r3, [r7, #6]
 80073a4:	089b      	lsrs	r3, r3, #2
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80073aa:	88fb      	ldrh	r3, [r7, #6]
 80073ac:	f003 0303 	and.w	r3, r3, #3
 80073b0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80073b2:	2300      	movs	r3, #0
 80073b4:	623b      	str	r3, [r7, #32]
 80073b6:	e014      	b.n	80073e2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80073b8:	69bb      	ldr	r3, [r7, #24]
 80073ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073c2:	601a      	str	r2, [r3, #0]
    pDest++;
 80073c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073c6:	3301      	adds	r3, #1
 80073c8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80073ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073cc:	3301      	adds	r3, #1
 80073ce:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80073d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d2:	3301      	adds	r3, #1
 80073d4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80073d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d8:	3301      	adds	r3, #1
 80073da:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80073dc:	6a3b      	ldr	r3, [r7, #32]
 80073de:	3301      	adds	r3, #1
 80073e0:	623b      	str	r3, [r7, #32]
 80073e2:	6a3a      	ldr	r2, [r7, #32]
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d3e6      	bcc.n	80073b8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80073ea:	8bfb      	ldrh	r3, [r7, #30]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d01e      	beq.n	800742e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80073f0:	2300      	movs	r3, #0
 80073f2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80073f4:	69bb      	ldr	r3, [r7, #24]
 80073f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80073fa:	461a      	mov	r2, r3
 80073fc:	f107 0310 	add.w	r3, r7, #16
 8007400:	6812      	ldr	r2, [r2, #0]
 8007402:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007404:	693a      	ldr	r2, [r7, #16]
 8007406:	6a3b      	ldr	r3, [r7, #32]
 8007408:	b2db      	uxtb	r3, r3
 800740a:	00db      	lsls	r3, r3, #3
 800740c:	fa22 f303 	lsr.w	r3, r2, r3
 8007410:	b2da      	uxtb	r2, r3
 8007412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007414:	701a      	strb	r2, [r3, #0]
      i++;
 8007416:	6a3b      	ldr	r3, [r7, #32]
 8007418:	3301      	adds	r3, #1
 800741a:	623b      	str	r3, [r7, #32]
      pDest++;
 800741c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800741e:	3301      	adds	r3, #1
 8007420:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007422:	8bfb      	ldrh	r3, [r7, #30]
 8007424:	3b01      	subs	r3, #1
 8007426:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007428:	8bfb      	ldrh	r3, [r7, #30]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d1ea      	bne.n	8007404 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800742e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007430:	4618      	mov	r0, r3
 8007432:	372c      	adds	r7, #44	@ 0x2c
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr

0800743c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800743c:	b480      	push	{r7}
 800743e:	b085      	sub	sp, #20
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	781b      	ldrb	r3, [r3, #0]
 800744e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	785b      	ldrb	r3, [r3, #1]
 8007454:	2b01      	cmp	r3, #1
 8007456:	d12c      	bne.n	80074b2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	015a      	lsls	r2, r3, #5
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	4413      	add	r3, r2
 8007460:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	2b00      	cmp	r3, #0
 8007468:	db12      	blt.n	8007490 <USB_EPSetStall+0x54>
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d00f      	beq.n	8007490 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	015a      	lsls	r2, r3, #5
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	4413      	add	r3, r2
 8007478:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	68ba      	ldr	r2, [r7, #8]
 8007480:	0151      	lsls	r1, r2, #5
 8007482:	68fa      	ldr	r2, [r7, #12]
 8007484:	440a      	add	r2, r1
 8007486:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800748a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800748e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	015a      	lsls	r2, r3, #5
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	4413      	add	r3, r2
 8007498:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	68ba      	ldr	r2, [r7, #8]
 80074a0:	0151      	lsls	r1, r2, #5
 80074a2:	68fa      	ldr	r2, [r7, #12]
 80074a4:	440a      	add	r2, r1
 80074a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074aa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80074ae:	6013      	str	r3, [r2, #0]
 80074b0:	e02b      	b.n	800750a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	015a      	lsls	r2, r3, #5
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	4413      	add	r3, r2
 80074ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	db12      	blt.n	80074ea <USB_EPSetStall+0xae>
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d00f      	beq.n	80074ea <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	015a      	lsls	r2, r3, #5
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	4413      	add	r3, r2
 80074d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	68ba      	ldr	r2, [r7, #8]
 80074da:	0151      	lsls	r1, r2, #5
 80074dc:	68fa      	ldr	r2, [r7, #12]
 80074de:	440a      	add	r2, r1
 80074e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074e4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80074e8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	015a      	lsls	r2, r3, #5
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	4413      	add	r3, r2
 80074f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	68ba      	ldr	r2, [r7, #8]
 80074fa:	0151      	lsls	r1, r2, #5
 80074fc:	68fa      	ldr	r2, [r7, #12]
 80074fe:	440a      	add	r2, r1
 8007500:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007504:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007508:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800750a:	2300      	movs	r3, #0
}
 800750c:	4618      	mov	r0, r3
 800750e:	3714      	adds	r7, #20
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007518:	b480      	push	{r7}
 800751a:	b085      	sub	sp, #20
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	785b      	ldrb	r3, [r3, #1]
 8007530:	2b01      	cmp	r3, #1
 8007532:	d128      	bne.n	8007586 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	015a      	lsls	r2, r3, #5
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	4413      	add	r3, r2
 800753c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	68ba      	ldr	r2, [r7, #8]
 8007544:	0151      	lsls	r1, r2, #5
 8007546:	68fa      	ldr	r2, [r7, #12]
 8007548:	440a      	add	r2, r1
 800754a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800754e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007552:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	791b      	ldrb	r3, [r3, #4]
 8007558:	2b03      	cmp	r3, #3
 800755a:	d003      	beq.n	8007564 <USB_EPClearStall+0x4c>
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	791b      	ldrb	r3, [r3, #4]
 8007560:	2b02      	cmp	r3, #2
 8007562:	d138      	bne.n	80075d6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	015a      	lsls	r2, r3, #5
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	4413      	add	r3, r2
 800756c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	68ba      	ldr	r2, [r7, #8]
 8007574:	0151      	lsls	r1, r2, #5
 8007576:	68fa      	ldr	r2, [r7, #12]
 8007578:	440a      	add	r2, r1
 800757a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800757e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007582:	6013      	str	r3, [r2, #0]
 8007584:	e027      	b.n	80075d6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	015a      	lsls	r2, r3, #5
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	4413      	add	r3, r2
 800758e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	68ba      	ldr	r2, [r7, #8]
 8007596:	0151      	lsls	r1, r2, #5
 8007598:	68fa      	ldr	r2, [r7, #12]
 800759a:	440a      	add	r2, r1
 800759c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80075a0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80075a4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	791b      	ldrb	r3, [r3, #4]
 80075aa:	2b03      	cmp	r3, #3
 80075ac:	d003      	beq.n	80075b6 <USB_EPClearStall+0x9e>
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	791b      	ldrb	r3, [r3, #4]
 80075b2:	2b02      	cmp	r3, #2
 80075b4:	d10f      	bne.n	80075d6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	015a      	lsls	r2, r3, #5
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	4413      	add	r3, r2
 80075be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	68ba      	ldr	r2, [r7, #8]
 80075c6:	0151      	lsls	r1, r2, #5
 80075c8:	68fa      	ldr	r2, [r7, #12]
 80075ca:	440a      	add	r2, r1
 80075cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80075d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075d4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80075d6:	2300      	movs	r3, #0
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3714      	adds	r7, #20
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr

080075e4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b085      	sub	sp, #20
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	460b      	mov	r3, r1
 80075ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	68fa      	ldr	r2, [r7, #12]
 80075fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007602:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007606:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800760e:	681a      	ldr	r2, [r3, #0]
 8007610:	78fb      	ldrb	r3, [r7, #3]
 8007612:	011b      	lsls	r3, r3, #4
 8007614:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007618:	68f9      	ldr	r1, [r7, #12]
 800761a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800761e:	4313      	orrs	r3, r2
 8007620:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007622:	2300      	movs	r3, #0
}
 8007624:	4618      	mov	r0, r3
 8007626:	3714      	adds	r7, #20
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr

08007630 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007630:	b480      	push	{r7}
 8007632:	b085      	sub	sp, #20
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	68fa      	ldr	r2, [r7, #12]
 8007646:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800764a:	f023 0303 	bic.w	r3, r3, #3
 800764e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	68fa      	ldr	r2, [r7, #12]
 800765a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800765e:	f023 0302 	bic.w	r3, r3, #2
 8007662:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	3714      	adds	r7, #20
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr

08007672 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007672:	b480      	push	{r7}
 8007674:	b085      	sub	sp, #20
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	68fa      	ldr	r2, [r7, #12]
 8007688:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800768c:	f023 0303 	bic.w	r3, r3, #3
 8007690:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	68fa      	ldr	r2, [r7, #12]
 800769c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80076a0:	f043 0302 	orr.w	r3, r3, #2
 80076a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80076a6:	2300      	movs	r3, #0
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3714      	adds	r7, #20
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b085      	sub	sp, #20
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	695b      	ldr	r3, [r3, #20]
 80076c0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	699b      	ldr	r3, [r3, #24]
 80076c6:	68fa      	ldr	r2, [r7, #12]
 80076c8:	4013      	ands	r3, r2
 80076ca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80076cc:	68fb      	ldr	r3, [r7, #12]
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3714      	adds	r7, #20
 80076d2:	46bd      	mov	sp, r7
 80076d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d8:	4770      	bx	lr

080076da <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80076da:	b480      	push	{r7}
 80076dc:	b085      	sub	sp, #20
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076ec:	699b      	ldr	r3, [r3, #24]
 80076ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076f6:	69db      	ldr	r3, [r3, #28]
 80076f8:	68ba      	ldr	r2, [r7, #8]
 80076fa:	4013      	ands	r3, r2
 80076fc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	0c1b      	lsrs	r3, r3, #16
}
 8007702:	4618      	mov	r0, r3
 8007704:	3714      	adds	r7, #20
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr

0800770e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800770e:	b480      	push	{r7}
 8007710:	b085      	sub	sp, #20
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007720:	699b      	ldr	r3, [r3, #24]
 8007722:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800772a:	69db      	ldr	r3, [r3, #28]
 800772c:	68ba      	ldr	r2, [r7, #8]
 800772e:	4013      	ands	r3, r2
 8007730:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	b29b      	uxth	r3, r3
}
 8007736:	4618      	mov	r0, r3
 8007738:	3714      	adds	r7, #20
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr

08007742 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007742:	b480      	push	{r7}
 8007744:	b085      	sub	sp, #20
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
 800774a:	460b      	mov	r3, r1
 800774c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007752:	78fb      	ldrb	r3, [r7, #3]
 8007754:	015a      	lsls	r2, r3, #5
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	4413      	add	r3, r2
 800775a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007768:	695b      	ldr	r3, [r3, #20]
 800776a:	68ba      	ldr	r2, [r7, #8]
 800776c:	4013      	ands	r3, r2
 800776e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007770:	68bb      	ldr	r3, [r7, #8]
}
 8007772:	4618      	mov	r0, r3
 8007774:	3714      	adds	r7, #20
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr

0800777e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800777e:	b480      	push	{r7}
 8007780:	b087      	sub	sp, #28
 8007782:	af00      	add	r7, sp, #0
 8007784:	6078      	str	r0, [r7, #4]
 8007786:	460b      	mov	r3, r1
 8007788:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007794:	691b      	ldr	r3, [r3, #16]
 8007796:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800779e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077a0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80077a2:	78fb      	ldrb	r3, [r7, #3]
 80077a4:	f003 030f 	and.w	r3, r3, #15
 80077a8:	68fa      	ldr	r2, [r7, #12]
 80077aa:	fa22 f303 	lsr.w	r3, r2, r3
 80077ae:	01db      	lsls	r3, r3, #7
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	693a      	ldr	r2, [r7, #16]
 80077b4:	4313      	orrs	r3, r2
 80077b6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80077b8:	78fb      	ldrb	r3, [r7, #3]
 80077ba:	015a      	lsls	r2, r3, #5
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	4413      	add	r3, r2
 80077c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	693a      	ldr	r2, [r7, #16]
 80077c8:	4013      	ands	r3, r2
 80077ca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80077cc:	68bb      	ldr	r3, [r7, #8]
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	371c      	adds	r7, #28
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr

080077da <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80077da:	b480      	push	{r7}
 80077dc:	b083      	sub	sp, #12
 80077de:	af00      	add	r7, sp, #0
 80077e0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	695b      	ldr	r3, [r3, #20]
 80077e6:	f003 0301 	and.w	r3, r3, #1
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	370c      	adds	r7, #12
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr

080077f6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80077f6:	b480      	push	{r7}
 80077f8:	b085      	sub	sp, #20
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	68fa      	ldr	r2, [r7, #12]
 800780c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007810:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007814:	f023 0307 	bic.w	r3, r3, #7
 8007818:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	68fa      	ldr	r2, [r7, #12]
 8007824:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007828:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800782c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800782e:	2300      	movs	r3, #0
}
 8007830:	4618      	mov	r0, r3
 8007832:	3714      	adds	r7, #20
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr

0800783c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800783c:	b480      	push	{r7}
 800783e:	b087      	sub	sp, #28
 8007840:	af00      	add	r7, sp, #0
 8007842:	60f8      	str	r0, [r7, #12]
 8007844:	460b      	mov	r3, r1
 8007846:	607a      	str	r2, [r7, #4]
 8007848:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	333c      	adds	r3, #60	@ 0x3c
 8007852:	3304      	adds	r3, #4
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	4a26      	ldr	r2, [pc, #152]	@ (80078f4 <USB_EP0_OutStart+0xb8>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d90a      	bls.n	8007876 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800786c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007870:	d101      	bne.n	8007876 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007872:	2300      	movs	r3, #0
 8007874:	e037      	b.n	80078e6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800787c:	461a      	mov	r2, r3
 800787e:	2300      	movs	r3, #0
 8007880:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007888:	691b      	ldr	r3, [r3, #16]
 800788a:	697a      	ldr	r2, [r7, #20]
 800788c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007890:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007894:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800789c:	691b      	ldr	r3, [r3, #16]
 800789e:	697a      	ldr	r2, [r7, #20]
 80078a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80078a4:	f043 0318 	orr.w	r3, r3, #24
 80078a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078b0:	691b      	ldr	r3, [r3, #16]
 80078b2:	697a      	ldr	r2, [r7, #20]
 80078b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80078b8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80078bc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80078be:	7afb      	ldrb	r3, [r7, #11]
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d10f      	bne.n	80078e4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078ca:	461a      	mov	r2, r3
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	697a      	ldr	r2, [r7, #20]
 80078da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80078de:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80078e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80078e4:	2300      	movs	r3, #0
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	371c      	adds	r7, #28
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr
 80078f2:	bf00      	nop
 80078f4:	4f54300a 	.word	0x4f54300a

080078f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b085      	sub	sp, #20
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007900:	2300      	movs	r3, #0
 8007902:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	3301      	adds	r3, #1
 8007908:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007910:	d901      	bls.n	8007916 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007912:	2303      	movs	r3, #3
 8007914:	e022      	b.n	800795c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	691b      	ldr	r3, [r3, #16]
 800791a:	2b00      	cmp	r3, #0
 800791c:	daf2      	bge.n	8007904 <USB_CoreReset+0xc>

  count = 10U;
 800791e:	230a      	movs	r3, #10
 8007920:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8007922:	e002      	b.n	800792a <USB_CoreReset+0x32>
  {
    count--;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	3b01      	subs	r3, #1
 8007928:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d1f9      	bne.n	8007924 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	691b      	ldr	r3, [r3, #16]
 8007934:	f043 0201 	orr.w	r2, r3, #1
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	3301      	adds	r3, #1
 8007940:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007948:	d901      	bls.n	800794e <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800794a:	2303      	movs	r3, #3
 800794c:	e006      	b.n	800795c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	f003 0301 	and.w	r3, r3, #1
 8007956:	2b01      	cmp	r3, #1
 8007958:	d0f0      	beq.n	800793c <USB_CoreReset+0x44>

  return HAL_OK;
 800795a:	2300      	movs	r3, #0
}
 800795c:	4618      	mov	r0, r3
 800795e:	3714      	adds	r7, #20
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr

08007968 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  USBD_COMPOSITE_Mount_Class();
 800796c:	f001 fbd0 	bl	8009110 <USBD_COMPOSITE_Mount_Class>
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_HS) != USBD_OK)
  {
    Error_Handler();
  }
#else
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_FS) != USBD_OK)
 8007970:	2200      	movs	r2, #0
 8007972:	4917      	ldr	r1, [pc, #92]	@ (80079d0 <MX_USB_DEVICE_Init+0x68>)
 8007974:	4817      	ldr	r0, [pc, #92]	@ (80079d4 <MX_USB_DEVICE_Init+0x6c>)
 8007976:	f001 ffed 	bl	8009954 <USBD_Init>
 800797a:	4603      	mov	r3, r0
 800797c:	2b00      	cmp	r3, #0
 800797e:	d001      	beq.n	8007984 <MX_USB_DEVICE_Init+0x1c>
  {
    Error_Handler();
 8007980:	f7f9 f822 	bl	80009c8 <Error_Handler>
  }
#endif
  if (USBD_RegisterClass(&hUsbDevice, &USBD_COMPOSITE) != USBD_OK)
 8007984:	4914      	ldr	r1, [pc, #80]	@ (80079d8 <MX_USB_DEVICE_Init+0x70>)
 8007986:	4813      	ldr	r0, [pc, #76]	@ (80079d4 <MX_USB_DEVICE_Init+0x6c>)
 8007988:	f002 f810 	bl	80099ac <USBD_RegisterClass>
 800798c:	4603      	mov	r3, r0
 800798e:	2b00      	cmp	r3, #0
 8007990:	d001      	beq.n	8007996 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8007992:	f7f9 f819 	bl	80009c8 <Error_Handler>
  }
#if (USBD_USE_CDC_ACM == 1)
  if (USBD_CDC_ACM_RegisterInterface(&hUsbDevice, &USBD_CDC_ACM_fops) != USBD_OK)
 8007996:	4911      	ldr	r1, [pc, #68]	@ (80079dc <MX_USB_DEVICE_Init+0x74>)
 8007998:	480e      	ldr	r0, [pc, #56]	@ (80079d4 <MX_USB_DEVICE_Init+0x6c>)
 800799a:	f001 f893 	bl	8008ac4 <USBD_CDC_ACM_RegisterInterface>
 800799e:	4603      	mov	r3, r0
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d001      	beq.n	80079a8 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 80079a4:	f7f9 f810 	bl	80009c8 <Error_Handler>
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDevice, &USBD_CustomHID_fops) != USBD_OK)
 80079a8:	490d      	ldr	r1, [pc, #52]	@ (80079e0 <MX_USB_DEVICE_Init+0x78>)
 80079aa:	480a      	ldr	r0, [pc, #40]	@ (80079d4 <MX_USB_DEVICE_Init+0x6c>)
 80079ac:	f001 ff84 	bl	80098b8 <USBD_CUSTOM_HID_RegisterInterface>
 80079b0:	4603      	mov	r3, r0
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d001      	beq.n	80079ba <MX_USB_DEVICE_Init+0x52>
  {
    Error_Handler();
 80079b6:	f7f9 f807 	bl	80009c8 <Error_Handler>
  if (USBD_PRNT_RegisterInterface(&hUsbDevice, &USBD_PRNT_fops) != USBD_OK)
  {
    Error_Handler();
  }
#endif
  if (USBD_Start(&hUsbDevice) != USBD_OK)
 80079ba:	4806      	ldr	r0, [pc, #24]	@ (80079d4 <MX_USB_DEVICE_Init+0x6c>)
 80079bc:	f002 f834 	bl	8009a28 <USBD_Start>
 80079c0:	4603      	mov	r3, r0
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d001      	beq.n	80079ca <MX_USB_DEVICE_Init+0x62>
  {
    Error_Handler();
 80079c6:	f7f8 ffff 	bl	80009c8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80079ca:	bf00      	nop
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	bf00      	nop
 80079d0:	20000060 	.word	0x20000060
 80079d4:	20000a58 	.word	0x20000a58
 80079d8:	200001c4 	.word	0x200001c4
 80079dc:	2000004c 	.word	0x2000004c
 80079e0:	200000d4 	.word	0x200000d4

080079e4 <CDC_CH_To_UART_Handle>:
static int8_t CDC_Receive(uint8_t cdc_ch, uint8_t *pbuf, uint32_t *Len);
static int8_t CDC_TransmitCplt(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len, uint8_t epnum);

/* USER CODE BEGIN PRIVATE_FUNCTIONS_DECLARATION */
UART_HandleTypeDef *CDC_CH_To_UART_Handle(uint8_t cdc_ch)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b085      	sub	sp, #20
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	4603      	mov	r3, r0
 80079ec:	71fb      	strb	r3, [r7, #7]
  UART_HandleTypeDef *handle = NULL;
 80079ee:	2300      	movs	r3, #0
 80079f0:	60fb      	str	r3, [r7, #12]

  if (cdc_ch == 0)
 80079f2:	79fb      	ldrb	r3, [r7, #7]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d101      	bne.n	80079fc <CDC_CH_To_UART_Handle+0x18>
  {
    handle = &huart5;
 80079f8:	4b04      	ldr	r3, [pc, #16]	@ (8007a0c <CDC_CH_To_UART_Handle+0x28>)
 80079fa:	60fb      	str	r3, [r7, #12]
  else if (cdc_ch == 2)
  {
    handle = &huart3;
  }
#endif
  return handle;
 80079fc:	68fb      	ldr	r3, [r7, #12]
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3714      	adds	r7, #20
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr
 8007a0a:	bf00      	nop
 8007a0c:	20000468 	.word	0x20000468

08007a10 <UART_Handle_TO_CDC_CH>:

uint8_t UART_Handle_TO_CDC_CH(UART_HandleTypeDef *handle)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b085      	sub	sp, #20
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  uint8_t cdc_ch = 0;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	73fb      	strb	r3, [r7, #15]

  if (handle == &huart5)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	4a06      	ldr	r2, [pc, #24]	@ (8007a38 <UART_Handle_TO_CDC_CH+0x28>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d101      	bne.n	8007a28 <UART_Handle_TO_CDC_CH+0x18>
  {
    cdc_ch = 0;
 8007a24:	2300      	movs	r3, #0
 8007a26:	73fb      	strb	r3, [r7, #15]
  else if (handle == &huart3)
  {
    cdc_ch = 2;
  }
#endif
  return cdc_ch;
 8007a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3714      	adds	r7, #20
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr
 8007a36:	bf00      	nop
 8007a38:	20000468 	.word	0x20000468

08007a3c <Change_UART_Setting>:
//
void Change_UART_Setting(uint8_t cdc_ch)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b086      	sub	sp, #24
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	4603      	mov	r3, r0
 8007a44:	71fb      	strb	r3, [r7, #7]
  UART_HandleTypeDef *handle = CDC_CH_To_UART_Handle(cdc_ch);
 8007a46:	79fb      	ldrb	r3, [r7, #7]
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f7ff ffcb 	bl	80079e4 <CDC_CH_To_UART_Handle>
 8007a4e:	6178      	str	r0, [r7, #20]

  if (HAL_UART_DeInit(handle) != HAL_OK)
 8007a50:	6978      	ldr	r0, [r7, #20]
 8007a52:	f7fd fbf7 	bl	8005244 <HAL_UART_DeInit>
 8007a56:	4603      	mov	r3, r0
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d001      	beq.n	8007a60 <Change_UART_Setting+0x24>
  {
    /* Initialization Error */
    Error_Handler();
 8007a5c:	f7f8 ffb4 	bl	80009c8 <Error_Handler>
  }
  /* set the Stop bit */
  switch (Line_Coding[cdc_ch].format)
 8007a60:	79fb      	ldrb	r3, [r7, #7]
 8007a62:	4a5c      	ldr	r2, [pc, #368]	@ (8007bd4 <Change_UART_Setting+0x198>)
 8007a64:	00db      	lsls	r3, r3, #3
 8007a66:	4413      	add	r3, r2
 8007a68:	791b      	ldrb	r3, [r3, #4]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d002      	beq.n	8007a74 <Change_UART_Setting+0x38>
 8007a6e:	2b02      	cmp	r3, #2
 8007a70:	d004      	beq.n	8007a7c <Change_UART_Setting+0x40>
 8007a72:	e008      	b.n	8007a86 <Change_UART_Setting+0x4a>
  {
  case 0:
    handle->Init.StopBits = UART_STOPBITS_1;
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	2200      	movs	r2, #0
 8007a78:	60da      	str	r2, [r3, #12]
    break;
 8007a7a:	e008      	b.n	8007a8e <Change_UART_Setting+0x52>
  case 2:
    handle->Init.StopBits = UART_STOPBITS_2;
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007a82:	60da      	str	r2, [r3, #12]
    break;
 8007a84:	e003      	b.n	8007a8e <Change_UART_Setting+0x52>
  default:
    handle->Init.StopBits = UART_STOPBITS_1;
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	60da      	str	r2, [r3, #12]
    break;
 8007a8c:	bf00      	nop
  }

  /* set the parity bit*/
  switch (Line_Coding[cdc_ch].paritytype)
 8007a8e:	79fb      	ldrb	r3, [r7, #7]
 8007a90:	4a50      	ldr	r2, [pc, #320]	@ (8007bd4 <Change_UART_Setting+0x198>)
 8007a92:	00db      	lsls	r3, r3, #3
 8007a94:	4413      	add	r3, r2
 8007a96:	795b      	ldrb	r3, [r3, #5]
 8007a98:	2b02      	cmp	r3, #2
 8007a9a:	d00f      	beq.n	8007abc <Change_UART_Setting+0x80>
 8007a9c:	2b02      	cmp	r3, #2
 8007a9e:	dc12      	bgt.n	8007ac6 <Change_UART_Setting+0x8a>
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d002      	beq.n	8007aaa <Change_UART_Setting+0x6e>
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d004      	beq.n	8007ab2 <Change_UART_Setting+0x76>
 8007aa8:	e00d      	b.n	8007ac6 <Change_UART_Setting+0x8a>
  {
  case 0:
    handle->Init.Parity = UART_PARITY_NONE;
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	2200      	movs	r2, #0
 8007aae:	611a      	str	r2, [r3, #16]
    break;
 8007ab0:	e00d      	b.n	8007ace <Change_UART_Setting+0x92>
  case 1:
    handle->Init.Parity = UART_PARITY_ODD;
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8007ab8:	611a      	str	r2, [r3, #16]
    break;
 8007aba:	e008      	b.n	8007ace <Change_UART_Setting+0x92>
  case 2:
    handle->Init.Parity = UART_PARITY_EVEN;
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007ac2:	611a      	str	r2, [r3, #16]
    break;
 8007ac4:	e003      	b.n	8007ace <Change_UART_Setting+0x92>
  default:
    handle->Init.Parity = UART_PARITY_NONE;
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	611a      	str	r2, [r3, #16]
    break;
 8007acc:	bf00      	nop
  }

  /*set the data type : only 8bits and 9bits is supported */
  switch (Line_Coding[cdc_ch].datatype)
 8007ace:	79fb      	ldrb	r3, [r7, #7]
 8007ad0:	4a40      	ldr	r2, [pc, #256]	@ (8007bd4 <Change_UART_Setting+0x198>)
 8007ad2:	00db      	lsls	r3, r3, #3
 8007ad4:	4413      	add	r3, r2
 8007ad6:	799b      	ldrb	r3, [r3, #6]
 8007ad8:	2b07      	cmp	r3, #7
 8007ada:	d002      	beq.n	8007ae2 <Change_UART_Setting+0xa6>
 8007adc:	2b08      	cmp	r3, #8
 8007ade:	d004      	beq.n	8007aea <Change_UART_Setting+0xae>
 8007ae0:	e010      	b.n	8007b04 <Change_UART_Setting+0xc8>
  {
  case 0x07:
    /* With this configuration a parity (Even or Odd) must be set */
    handle->Init.WordLength = UART_WORDLENGTH_8B;
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	609a      	str	r2, [r3, #8]
    break;
 8007ae8:	e010      	b.n	8007b0c <Change_UART_Setting+0xd0>
  case 0x08:
    if (handle->Init.Parity == UART_PARITY_NONE)
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	691b      	ldr	r3, [r3, #16]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d103      	bne.n	8007afa <Change_UART_Setting+0xbe>
    {
      handle->Init.WordLength = UART_WORDLENGTH_8B;
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	2200      	movs	r2, #0
 8007af6:	609a      	str	r2, [r3, #8]
    else
    {
      handle->Init.WordLength = UART_WORDLENGTH_9B;
    }

    break;
 8007af8:	e008      	b.n	8007b0c <Change_UART_Setting+0xd0>
      handle->Init.WordLength = UART_WORDLENGTH_9B;
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007b00:	609a      	str	r2, [r3, #8]
    break;
 8007b02:	e003      	b.n	8007b0c <Change_UART_Setting+0xd0>
  default:
    handle->Init.WordLength = UART_WORDLENGTH_8B;
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	2200      	movs	r2, #0
 8007b08:	609a      	str	r2, [r3, #8]
    break;
 8007b0a:	bf00      	nop
  }

  if (Line_Coding[cdc_ch].bitrate == 0)
 8007b0c:	79fb      	ldrb	r3, [r7, #7]
 8007b0e:	4a31      	ldr	r2, [pc, #196]	@ (8007bd4 <Change_UART_Setting+0x198>)
 8007b10:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d105      	bne.n	8007b24 <Change_UART_Setting+0xe8>
  {
    Line_Coding[cdc_ch].bitrate = 115200;
 8007b18:	79fb      	ldrb	r3, [r7, #7]
 8007b1a:	4a2e      	ldr	r2, [pc, #184]	@ (8007bd4 <Change_UART_Setting+0x198>)
 8007b1c:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8007b20:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
  }

  handle->Init.BaudRate = Line_Coding[cdc_ch].bitrate;
 8007b24:	79fb      	ldrb	r3, [r7, #7]
 8007b26:	4a2b      	ldr	r2, [pc, #172]	@ (8007bd4 <Change_UART_Setting+0x198>)
 8007b28:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	605a      	str	r2, [r3, #4]
  handle->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	2200      	movs	r2, #0
 8007b34:	619a      	str	r2, [r3, #24]
  handle->Init.Mode = UART_MODE_TX_RX;
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	220c      	movs	r2, #12
 8007b3a:	615a      	str	r2, [r3, #20]
  handle->Init.OverSampling = UART_OVERSAMPLING_16;
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	61da      	str	r2, [r3, #28]

  if (HAL_UART_Init(handle) != HAL_OK)
 8007b42:	6978      	ldr	r0, [r7, #20]
 8007b44:	f7fd fb2e 	bl	80051a4 <HAL_UART_Init>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d001      	beq.n	8007b52 <Change_UART_Setting+0x116>
  {
    /* Initialization Error */
    Error_Handler();
 8007b4e:	f7f8 ff3b 	bl	80009c8 <Error_Handler>
  }

  /** rx for uart and tx buffer of usb */
  if (HAL_UART_Receive_IT(handle, TX_Buffer[cdc_ch], 1) != HAL_OK)
 8007b52:	79fb      	ldrb	r3, [r7, #7]
 8007b54:	019b      	lsls	r3, r3, #6
 8007b56:	4a20      	ldr	r2, [pc, #128]	@ (8007bd8 <Change_UART_Setting+0x19c>)
 8007b58:	4413      	add	r3, r2
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	6978      	ldr	r0, [r7, #20]
 8007b60:	f7fd fc2d 	bl	80053be <HAL_UART_Receive_IT>
 8007b64:	4603      	mov	r3, r0
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d001      	beq.n	8007b6e <Change_UART_Setting+0x132>
  {
    /* Transfer error in reception process */
    Error_Handler();
 8007b6a:	f7f8 ff2d 	bl	80009c8 <Error_Handler>
  }
  __HAL_UART_CLEAR_OREFLAG(handle);
 8007b6e:	2300      	movs	r3, #0
 8007b70:	613b      	str	r3, [r7, #16]
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	613b      	str	r3, [r7, #16]
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	613b      	str	r3, [r7, #16]
 8007b82:	693b      	ldr	r3, [r7, #16]
  __HAL_UART_CLEAR_NEFLAG(handle);
 8007b84:	2300      	movs	r3, #0
 8007b86:	60fb      	str	r3, [r7, #12]
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	60fb      	str	r3, [r7, #12]
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	60fb      	str	r3, [r7, #12]
 8007b98:	68fb      	ldr	r3, [r7, #12]
  __HAL_UART_CLEAR_FEFLAG(handle);
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	60bb      	str	r3, [r7, #8]
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	60bb      	str	r3, [r7, #8]
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	60bb      	str	r3, [r7, #8]
 8007bae:	68bb      	ldr	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8007bb0:	f3bf 8f4f 	dsb	sy
}
 8007bb4:	bf00      	nop
  __DSB();  // Ensure instruction completion
  Write_Index[cdc_ch] = 0;
 8007bb6:	79fb      	ldrb	r3, [r7, #7]
 8007bb8:	4a08      	ldr	r2, [pc, #32]	@ (8007bdc <Change_UART_Setting+0x1a0>)
 8007bba:	2100      	movs	r1, #0
 8007bbc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  Read_Index[cdc_ch] = 0;
 8007bc0:	79fb      	ldrb	r3, [r7, #7]
 8007bc2:	4a07      	ldr	r2, [pc, #28]	@ (8007be0 <Change_UART_Setting+0x1a4>)
 8007bc4:	2100      	movs	r1, #0
 8007bc6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8007bca:	bf00      	nop
 8007bcc:	3718      	adds	r7, #24
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}
 8007bd2:	bf00      	nop
 8007bd4:	20000df4 	.word	0x20000df4
 8007bd8:	20000db4 	.word	0x20000db4
 8007bdc:	20000dfc 	.word	0x20000dfc
 8007be0:	20000e00 	.word	0x20000e00

08007be4 <CDC_Init>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init(uint8_t cdc_ch)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b082      	sub	sp, #8
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	4603      	mov	r3, r0
 8007bec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */

  /* ##-1- Set Application Buffers */
  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, RX_Buffer[cdc_ch]);
 8007bee:	79fb      	ldrb	r3, [r7, #7]
 8007bf0:	019b      	lsls	r3, r3, #6
 8007bf2:	4a0d      	ldr	r2, [pc, #52]	@ (8007c28 <CDC_Init+0x44>)
 8007bf4:	441a      	add	r2, r3
 8007bf6:	79fb      	ldrb	r3, [r7, #7]
 8007bf8:	490c      	ldr	r1, [pc, #48]	@ (8007c2c <CDC_Init+0x48>)
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f000 ff9c 	bl	8008b38 <USBD_CDC_SetRxBuffer>

  //  /*##-2- Start the TIM Base generation in interrupt mode ####################*/
  //  /* Start Channel1 */
    if ((HAL_TIM_Base_Start_IT(&htim1) != HAL_OK )||(HAL_TIM_Base_Start_IT(&htim2) != HAL_OK ))
 8007c00:	480b      	ldr	r0, [pc, #44]	@ (8007c30 <CDC_Init+0x4c>)
 8007c02:	f7fc feaf 	bl	8004964 <HAL_TIM_Base_Start_IT>
 8007c06:	4603      	mov	r3, r0
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d105      	bne.n	8007c18 <CDC_Init+0x34>
 8007c0c:	4809      	ldr	r0, [pc, #36]	@ (8007c34 <CDC_Init+0x50>)
 8007c0e:	f7fc fea9 	bl	8004964 <HAL_TIM_Base_Start_IT>
 8007c12:	4603      	mov	r3, r0
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d001      	beq.n	8007c1c <CDC_Init+0x38>
    {
      /* Starting Error */
      Error_Handler();
 8007c18:	f7f8 fed6 	bl	80009c8 <Error_Handler>
    }

  return (USBD_OK);
 8007c1c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3708      	adds	r7, #8
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	bf00      	nop
 8007c28:	20000d74 	.word	0x20000d74
 8007c2c:	20000a58 	.word	0x20000a58
 8007c30:	200003d8 	.word	0x200003d8
 8007c34:	20000420 	.word	0x20000420

08007c38 <CDC_DeInit>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit(uint8_t cdc_ch)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b082      	sub	sp, #8
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	4603      	mov	r3, r0
 8007c40:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  /* DeInitialize the UART peripheral */
    if (HAL_UART_DeInit(CDC_CH_To_UART_Handle(cdc_ch)) != HAL_OK)
 8007c42:	79fb      	ldrb	r3, [r7, #7]
 8007c44:	4618      	mov	r0, r3
 8007c46:	f7ff fecd 	bl	80079e4 <CDC_CH_To_UART_Handle>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f7fd faf9 	bl	8005244 <HAL_UART_DeInit>
 8007c52:	4603      	mov	r3, r0
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d001      	beq.n	8007c5c <CDC_DeInit+0x24>
    {
      /* Initialization Error */
      Error_Handler();
 8007c58:	f7f8 feb6 	bl	80009c8 <Error_Handler>
    }
  return (USBD_OK);
 8007c5c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3708      	adds	r7, #8
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
	...

08007c68 <CDC_Control>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control(uint8_t cdc_ch, uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	603a      	str	r2, [r7, #0]
 8007c70:	461a      	mov	r2, r3
 8007c72:	4603      	mov	r3, r0
 8007c74:	71fb      	strb	r3, [r7, #7]
 8007c76:	460b      	mov	r3, r1
 8007c78:	71bb      	strb	r3, [r7, #6]
 8007c7a:	4613      	mov	r3, r2
 8007c7c:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd)
 8007c7e:	79bb      	ldrb	r3, [r7, #6]
 8007c80:	2b23      	cmp	r3, #35	@ 0x23
 8007c82:	f200 80ba 	bhi.w	8007dfa <CDC_Control+0x192>
 8007c86:	a201      	add	r2, pc, #4	@ (adr r2, 8007c8c <CDC_Control+0x24>)
 8007c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c8c:	08007dfb 	.word	0x08007dfb
 8007c90:	08007dfb 	.word	0x08007dfb
 8007c94:	08007dfb 	.word	0x08007dfb
 8007c98:	08007dfb 	.word	0x08007dfb
 8007c9c:	08007dfb 	.word	0x08007dfb
 8007ca0:	08007dfb 	.word	0x08007dfb
 8007ca4:	08007dfb 	.word	0x08007dfb
 8007ca8:	08007dfb 	.word	0x08007dfb
 8007cac:	08007dfb 	.word	0x08007dfb
 8007cb0:	08007dfb 	.word	0x08007dfb
 8007cb4:	08007dfb 	.word	0x08007dfb
 8007cb8:	08007dfb 	.word	0x08007dfb
 8007cbc:	08007dfb 	.word	0x08007dfb
 8007cc0:	08007dfb 	.word	0x08007dfb
 8007cc4:	08007dfb 	.word	0x08007dfb
 8007cc8:	08007dfb 	.word	0x08007dfb
 8007ccc:	08007dfb 	.word	0x08007dfb
 8007cd0:	08007dfb 	.word	0x08007dfb
 8007cd4:	08007dfb 	.word	0x08007dfb
 8007cd8:	08007dfb 	.word	0x08007dfb
 8007cdc:	08007dfb 	.word	0x08007dfb
 8007ce0:	08007dfb 	.word	0x08007dfb
 8007ce4:	08007dfb 	.word	0x08007dfb
 8007ce8:	08007dfb 	.word	0x08007dfb
 8007cec:	08007dfb 	.word	0x08007dfb
 8007cf0:	08007dfb 	.word	0x08007dfb
 8007cf4:	08007dfb 	.word	0x08007dfb
 8007cf8:	08007dfb 	.word	0x08007dfb
 8007cfc:	08007dfb 	.word	0x08007dfb
 8007d00:	08007dfb 	.word	0x08007dfb
 8007d04:	08007dfb 	.word	0x08007dfb
 8007d08:	08007dfb 	.word	0x08007dfb
 8007d0c:	08007d1d 	.word	0x08007d1d
 8007d10:	08007d85 	.word	0x08007d85
 8007d14:	08007dfb 	.word	0x08007dfb
 8007d18:	08007dfb 	.word	0x08007dfb
    /*                                        3 - Mark                             */
    /*                                        4 - Space                            */
    /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
    /*******************************************************************************/
  case CDC_SET_LINE_CODING:
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	461a      	mov	r2, r3
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	3301      	adds	r3, #1
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	021b      	lsls	r3, r3, #8
 8007d2a:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	3302      	adds	r3, #2
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	041b      	lsls	r3, r3, #16
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8007d34:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	3303      	adds	r3, #3
 8007d3a:	781b      	ldrb	r3, [r3, #0]
 8007d3c:	061b      	lsls	r3, r3, #24
 8007d3e:	431a      	orrs	r2, r3
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8007d40:	79fb      	ldrb	r3, [r7, #7]
 8007d42:	4611      	mov	r1, r2
 8007d44:	4a30      	ldr	r2, [pc, #192]	@ (8007e08 <CDC_Control+0x1a0>)
 8007d46:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    Line_Coding[cdc_ch].format = pbuf[4];
 8007d4a:	79fb      	ldrb	r3, [r7, #7]
 8007d4c:	683a      	ldr	r2, [r7, #0]
 8007d4e:	7911      	ldrb	r1, [r2, #4]
 8007d50:	4a2d      	ldr	r2, [pc, #180]	@ (8007e08 <CDC_Control+0x1a0>)
 8007d52:	00db      	lsls	r3, r3, #3
 8007d54:	4413      	add	r3, r2
 8007d56:	460a      	mov	r2, r1
 8007d58:	711a      	strb	r2, [r3, #4]
    Line_Coding[cdc_ch].paritytype = pbuf[5];
 8007d5a:	79fb      	ldrb	r3, [r7, #7]
 8007d5c:	683a      	ldr	r2, [r7, #0]
 8007d5e:	7951      	ldrb	r1, [r2, #5]
 8007d60:	4a29      	ldr	r2, [pc, #164]	@ (8007e08 <CDC_Control+0x1a0>)
 8007d62:	00db      	lsls	r3, r3, #3
 8007d64:	4413      	add	r3, r2
 8007d66:	460a      	mov	r2, r1
 8007d68:	715a      	strb	r2, [r3, #5]
    Line_Coding[cdc_ch].datatype = pbuf[6];
 8007d6a:	79fb      	ldrb	r3, [r7, #7]
 8007d6c:	683a      	ldr	r2, [r7, #0]
 8007d6e:	7991      	ldrb	r1, [r2, #6]
 8007d70:	4a25      	ldr	r2, [pc, #148]	@ (8007e08 <CDC_Control+0x1a0>)
 8007d72:	00db      	lsls	r3, r3, #3
 8007d74:	4413      	add	r3, r2
 8007d76:	460a      	mov	r2, r1
 8007d78:	719a      	strb	r2, [r3, #6]

    Change_UART_Setting(cdc_ch);
 8007d7a:	79fb      	ldrb	r3, [r7, #7]
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f7ff fe5d 	bl	8007a3c <Change_UART_Setting>
    break;
 8007d82:	e03b      	b.n	8007dfc <CDC_Control+0x194>

  case CDC_GET_LINE_CODING:
    pbuf[0] = (uint8_t)(Line_Coding[cdc_ch].bitrate);
 8007d84:	79fb      	ldrb	r3, [r7, #7]
 8007d86:	4a20      	ldr	r2, [pc, #128]	@ (8007e08 <CDC_Control+0x1a0>)
 8007d88:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007d8c:	b2da      	uxtb	r2, r3
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	701a      	strb	r2, [r3, #0]
    pbuf[1] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 8);
 8007d92:	79fb      	ldrb	r3, [r7, #7]
 8007d94:	4a1c      	ldr	r2, [pc, #112]	@ (8007e08 <CDC_Control+0x1a0>)
 8007d96:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007d9a:	0a1a      	lsrs	r2, r3, #8
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	3301      	adds	r3, #1
 8007da0:	b2d2      	uxtb	r2, r2
 8007da2:	701a      	strb	r2, [r3, #0]
    pbuf[2] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 16);
 8007da4:	79fb      	ldrb	r3, [r7, #7]
 8007da6:	4a18      	ldr	r2, [pc, #96]	@ (8007e08 <CDC_Control+0x1a0>)
 8007da8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007dac:	0c1a      	lsrs	r2, r3, #16
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	3302      	adds	r3, #2
 8007db2:	b2d2      	uxtb	r2, r2
 8007db4:	701a      	strb	r2, [r3, #0]
    pbuf[3] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 24);
 8007db6:	79fb      	ldrb	r3, [r7, #7]
 8007db8:	4a13      	ldr	r2, [pc, #76]	@ (8007e08 <CDC_Control+0x1a0>)
 8007dba:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007dbe:	0e1a      	lsrs	r2, r3, #24
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	3303      	adds	r3, #3
 8007dc4:	b2d2      	uxtb	r2, r2
 8007dc6:	701a      	strb	r2, [r3, #0]
    pbuf[4] = Line_Coding[cdc_ch].format;
 8007dc8:	79fb      	ldrb	r3, [r7, #7]
 8007dca:	683a      	ldr	r2, [r7, #0]
 8007dcc:	3204      	adds	r2, #4
 8007dce:	490e      	ldr	r1, [pc, #56]	@ (8007e08 <CDC_Control+0x1a0>)
 8007dd0:	00db      	lsls	r3, r3, #3
 8007dd2:	440b      	add	r3, r1
 8007dd4:	791b      	ldrb	r3, [r3, #4]
 8007dd6:	7013      	strb	r3, [r2, #0]
    pbuf[5] = Line_Coding[cdc_ch].paritytype;
 8007dd8:	79fb      	ldrb	r3, [r7, #7]
 8007dda:	683a      	ldr	r2, [r7, #0]
 8007ddc:	3205      	adds	r2, #5
 8007dde:	490a      	ldr	r1, [pc, #40]	@ (8007e08 <CDC_Control+0x1a0>)
 8007de0:	00db      	lsls	r3, r3, #3
 8007de2:	440b      	add	r3, r1
 8007de4:	795b      	ldrb	r3, [r3, #5]
 8007de6:	7013      	strb	r3, [r2, #0]
    pbuf[6] = Line_Coding[cdc_ch].datatype;
 8007de8:	79fb      	ldrb	r3, [r7, #7]
 8007dea:	683a      	ldr	r2, [r7, #0]
 8007dec:	3206      	adds	r2, #6
 8007dee:	4906      	ldr	r1, [pc, #24]	@ (8007e08 <CDC_Control+0x1a0>)
 8007df0:	00db      	lsls	r3, r3, #3
 8007df2:	440b      	add	r3, r1
 8007df4:	799b      	ldrb	r3, [r3, #6]
 8007df6:	7013      	strb	r3, [r2, #0]
    break;
 8007df8:	e000      	b.n	8007dfc <CDC_Control+0x194>
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007dfa:	bf00      	nop
  }

  return (USBD_OK);
 8007dfc:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3708      	adds	r7, #8
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	20000df4 	.word	0x20000df4

08007e0c <CDC_Receive>:
//  USBD_CDC_ReceivePacket(cdc_ch, &hUsbDevice);
//  return (USBD_OK);
//  /* USER CODE END 6 */
//}
static int8_t CDC_Receive(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len)
{
 8007e0c:	b5b0      	push	{r4, r5, r7, lr}
 8007e0e:	b086      	sub	sp, #24
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	4603      	mov	r3, r0
 8007e14:	60b9      	str	r1, [r7, #8]
 8007e16:	607a      	str	r2, [r7, #4]
 8007e18:	73fb      	strb	r3, [r7, #15]
  for (uint32_t i = 0; i < *Len; i++)
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	617b      	str	r3, [r7, #20]
 8007e1e:	e021      	b.n	8007e64 <CDC_Receive+0x58>
  {
    CDC_RX_Buffer[cdc_ch][CDC_RX_WriteIndex[cdc_ch]++] = Buf[i];
 8007e20:	68ba      	ldr	r2, [r7, #8]
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	18d0      	adds	r0, r2, r3
 8007e26:	7bf9      	ldrb	r1, [r7, #15]
 8007e28:	7bfa      	ldrb	r2, [r7, #15]
 8007e2a:	4b19      	ldr	r3, [pc, #100]	@ (8007e90 <CDC_Receive+0x84>)
 8007e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e30:	1c5c      	adds	r4, r3, #1
 8007e32:	4d17      	ldr	r5, [pc, #92]	@ (8007e90 <CDC_Receive+0x84>)
 8007e34:	f845 4022 	str.w	r4, [r5, r2, lsl #2]
 8007e38:	7804      	ldrb	r4, [r0, #0]
 8007e3a:	4816      	ldr	r0, [pc, #88]	@ (8007e94 <CDC_Receive+0x88>)
 8007e3c:	030a      	lsls	r2, r1, #12
 8007e3e:	4402      	add	r2, r0
 8007e40:	4413      	add	r3, r2
 8007e42:	4622      	mov	r2, r4
 8007e44:	701a      	strb	r2, [r3, #0]
    if (CDC_RX_WriteIndex[cdc_ch] >= CDC_RX_BUFFER_SIZE)
 8007e46:	7bfb      	ldrb	r3, [r7, #15]
 8007e48:	4a11      	ldr	r2, [pc, #68]	@ (8007e90 <CDC_Receive+0x84>)
 8007e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e52:	d304      	bcc.n	8007e5e <CDC_Receive+0x52>
      CDC_RX_WriteIndex[cdc_ch] = 0;
 8007e54:	7bfb      	ldrb	r3, [r7, #15]
 8007e56:	4a0e      	ldr	r2, [pc, #56]	@ (8007e90 <CDC_Receive+0x84>)
 8007e58:	2100      	movs	r1, #0
 8007e5a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (uint32_t i = 0; i < *Len; i++)
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	3301      	adds	r3, #1
 8007e62:	617b      	str	r3, [r7, #20]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	697a      	ldr	r2, [r7, #20]
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d3d8      	bcc.n	8007e20 <CDC_Receive+0x14>
  }

  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, Buf);
 8007e6e:	7bfb      	ldrb	r3, [r7, #15]
 8007e70:	68ba      	ldr	r2, [r7, #8]
 8007e72:	4909      	ldr	r1, [pc, #36]	@ (8007e98 <CDC_Receive+0x8c>)
 8007e74:	4618      	mov	r0, r3
 8007e76:	f000 fe5f 	bl	8008b38 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(cdc_ch, &hUsbDevice);
 8007e7a:	7bfb      	ldrb	r3, [r7, #15]
 8007e7c:	4906      	ldr	r1, [pc, #24]	@ (8007e98 <CDC_Receive+0x8c>)
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f000 feba 	bl	8008bf8 <USBD_CDC_ReceivePacket>
  return USBD_OK;
 8007e84:	2300      	movs	r3, #0
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3718      	adds	r7, #24
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bdb0      	pop	{r4, r5, r7, pc}
 8007e8e:	bf00      	nop
 8007e90:	20001e04 	.word	0x20001e04
 8007e94:	20000e04 	.word	0x20000e04
 8007e98:	20000a58 	.word	0x20000a58

08007e9c <CDC_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b085      	sub	sp, #20
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	60b9      	str	r1, [r7, #8]
 8007ea4:	607a      	str	r2, [r7, #4]
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	73fb      	strb	r3, [r7, #15]
 8007eac:	4613      	mov	r3, r2
 8007eae:	73bb      	strb	r3, [r7, #14]
  return (USBD_OK);
 8007eb0:	2300      	movs	r3, #0
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3714      	adds	r7, #20
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr
	...

08007ec0 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b084      	sub	sp, #16
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  uint8_t ch = UART_Handle_TO_CDC_CH(huart);
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f7ff fda1 	bl	8007a10 <UART_Handle_TO_CDC_CH>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	73fb      	strb	r3, [r7, #15]
  if (ch >= NUMBER_OF_CDC) return;
 8007ed2:	7bfb      	ldrb	r3, [r7, #15]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d11c      	bne.n	8007f12 <HAL_UART_TxCpltCallback+0x52>

  // Cập nhật ReadIndex sau khi truyền xong
  if (CDC_RX_ReadIndex[ch] > CDC_RX_WriteIndex[ch])
 8007ed8:	7bfb      	ldrb	r3, [r7, #15]
 8007eda:	4a10      	ldr	r2, [pc, #64]	@ (8007f1c <HAL_UART_TxCpltCallback+0x5c>)
 8007edc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007ee0:	7bfb      	ldrb	r3, [r7, #15]
 8007ee2:	490f      	ldr	r1, [pc, #60]	@ (8007f20 <HAL_UART_TxCpltCallback+0x60>)
 8007ee4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d905      	bls.n	8007ef8 <HAL_UART_TxCpltCallback+0x38>
  {
    CDC_RX_ReadIndex[ch] = 0;
 8007eec:	7bfb      	ldrb	r3, [r7, #15]
 8007eee:	4a0b      	ldr	r2, [pc, #44]	@ (8007f1c <HAL_UART_TxCpltCallback+0x5c>)
 8007ef0:	2100      	movs	r1, #0
 8007ef2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8007ef6:	e007      	b.n	8007f08 <HAL_UART_TxCpltCallback+0x48>
  }
  else
  {
    CDC_RX_ReadIndex[ch] = CDC_RX_WriteIndex[ch];
 8007ef8:	7bfa      	ldrb	r2, [r7, #15]
 8007efa:	7bfb      	ldrb	r3, [r7, #15]
 8007efc:	4908      	ldr	r1, [pc, #32]	@ (8007f20 <HAL_UART_TxCpltCallback+0x60>)
 8007efe:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007f02:	4906      	ldr	r1, [pc, #24]	@ (8007f1c <HAL_UART_TxCpltCallback+0x5c>)
 8007f04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }

  uart_tx_busy[ch] = 0;
 8007f08:	7bfb      	ldrb	r3, [r7, #15]
 8007f0a:	4a06      	ldr	r2, [pc, #24]	@ (8007f24 <HAL_UART_TxCpltCallback+0x64>)
 8007f0c:	2100      	movs	r1, #0
 8007f0e:	54d1      	strb	r1, [r2, r3]
 8007f10:	e000      	b.n	8007f14 <HAL_UART_TxCpltCallback+0x54>
  if (ch >= NUMBER_OF_CDC) return;
 8007f12:	bf00      	nop
}
 8007f14:	3710      	adds	r7, #16
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
 8007f1a:	bf00      	nop
 8007f1c:	20001e08 	.word	0x20001e08
 8007f20:	20001e04 	.word	0x20001e04
 8007f24:	20001e0c 	.word	0x20001e0c

08007f28 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b088      	sub	sp, #32
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	4a63      	ldr	r2, [pc, #396]	@ (80080c0 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d15e      	bne.n	8007ff6 <HAL_TIM_PeriodElapsedCallback+0xce>
	{
	  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8007f38:	2300      	movs	r3, #0
 8007f3a:	77fb      	strb	r3, [r7, #31]
 8007f3c:	e058      	b.n	8007ff0 <HAL_TIM_PeriodElapsedCallback+0xc8>
	  {
	    if (CDC_RX_ReadIndex[i] != CDC_RX_WriteIndex[i])
 8007f3e:	7ffb      	ldrb	r3, [r7, #31]
 8007f40:	4a60      	ldr	r2, [pc, #384]	@ (80080c4 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8007f42:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007f46:	7ffb      	ldrb	r3, [r7, #31]
 8007f48:	495f      	ldr	r1, [pc, #380]	@ (80080c8 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8007f4a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d04b      	beq.n	8007fea <HAL_TIM_PeriodElapsedCallback+0xc2>
	    {
	      uint32_t buffptr = CDC_RX_ReadIndex[i];
 8007f52:	7ffb      	ldrb	r3, [r7, #31]
 8007f54:	4a5b      	ldr	r2, [pc, #364]	@ (80080c4 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8007f56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f5a:	60fb      	str	r3, [r7, #12]
	      uint32_t buffsize;

	      if (CDC_RX_ReadIndex[i] > CDC_RX_WriteIndex[i])
 8007f5c:	7ffb      	ldrb	r3, [r7, #31]
 8007f5e:	4a59      	ldr	r2, [pc, #356]	@ (80080c4 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8007f60:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007f64:	7ffb      	ldrb	r3, [r7, #31]
 8007f66:	4958      	ldr	r1, [pc, #352]	@ (80080c8 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8007f68:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d907      	bls.n	8007f80 <HAL_TIM_PeriodElapsedCallback+0x58>
	        buffsize = CDC_RX_BUFFER_SIZE - CDC_RX_ReadIndex[i];
 8007f70:	7ffb      	ldrb	r3, [r7, #31]
 8007f72:	4a54      	ldr	r2, [pc, #336]	@ (80080c4 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8007f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f78:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8007f7c:	61bb      	str	r3, [r7, #24]
 8007f7e:	e009      	b.n	8007f94 <HAL_TIM_PeriodElapsedCallback+0x6c>
	      else
	        buffsize = CDC_RX_WriteIndex[i] - CDC_RX_ReadIndex[i];
 8007f80:	7ffb      	ldrb	r3, [r7, #31]
 8007f82:	4a51      	ldr	r2, [pc, #324]	@ (80080c8 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8007f84:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007f88:	7ffb      	ldrb	r3, [r7, #31]
 8007f8a:	494e      	ldr	r1, [pc, #312]	@ (80080c4 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8007f8c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007f90:	1ad3      	subs	r3, r2, r3
 8007f92:	61bb      	str	r3, [r7, #24]

	      // Chặn kích thước nếu quá lớn (optional)
	      if (buffsize > 64) buffsize = 64;
 8007f94:	69bb      	ldr	r3, [r7, #24]
 8007f96:	2b40      	cmp	r3, #64	@ 0x40
 8007f98:	d901      	bls.n	8007f9e <HAL_TIM_PeriodElapsedCallback+0x76>
 8007f9a:	2340      	movs	r3, #64	@ 0x40
 8007f9c:	61bb      	str	r3, [r7, #24]

	      HAL_UART_Transmit(CDC_CH_To_UART_Handle(i), &CDC_RX_Buffer[i][buffptr], buffsize, HAL_MAX_DELAY);
 8007f9e:	7ffb      	ldrb	r3, [r7, #31]
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f7ff fd1f 	bl	80079e4 <CDC_CH_To_UART_Handle>
 8007fa6:	7ffb      	ldrb	r3, [r7, #31]
 8007fa8:	031a      	lsls	r2, r3, #12
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	4413      	add	r3, r2
 8007fae:	4a47      	ldr	r2, [pc, #284]	@ (80080cc <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8007fb0:	1899      	adds	r1, r3, r2
 8007fb2:	69bb      	ldr	r3, [r7, #24]
 8007fb4:	b29a      	uxth	r2, r3
 8007fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8007fba:	f7fd f975 	bl	80052a8 <HAL_UART_Transmit>

	      CDC_RX_ReadIndex[i] += buffsize;
 8007fbe:	7ffb      	ldrb	r3, [r7, #31]
 8007fc0:	4a40      	ldr	r2, [pc, #256]	@ (80080c4 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8007fc2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007fc6:	7ffb      	ldrb	r3, [r7, #31]
 8007fc8:	69ba      	ldr	r2, [r7, #24]
 8007fca:	440a      	add	r2, r1
 8007fcc:	493d      	ldr	r1, [pc, #244]	@ (80080c4 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8007fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	      if (CDC_RX_ReadIndex[i] >= CDC_RX_BUFFER_SIZE)
 8007fd2:	7ffb      	ldrb	r3, [r7, #31]
 8007fd4:	4a3b      	ldr	r2, [pc, #236]	@ (80080c4 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8007fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fde:	d304      	bcc.n	8007fea <HAL_TIM_PeriodElapsedCallback+0xc2>
	        CDC_RX_ReadIndex[i] = 0;
 8007fe0:	7ffb      	ldrb	r3, [r7, #31]
 8007fe2:	4a38      	ldr	r2, [pc, #224]	@ (80080c4 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8007fe4:	2100      	movs	r1, #0
 8007fe6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8007fea:	7ffb      	ldrb	r3, [r7, #31]
 8007fec:	3301      	adds	r3, #1
 8007fee:	77fb      	strb	r3, [r7, #31]
 8007ff0:	7ffb      	ldrb	r3, [r7, #31]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d0a3      	beq.n	8007f3e <HAL_TIM_PeriodElapsedCallback+0x16>
	    }
	  }
	}

if (htim == &htim1){
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	4a35      	ldr	r2, [pc, #212]	@ (80080d0 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d15b      	bne.n	80080b6 <HAL_TIM_PeriodElapsedCallback+0x18e>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8007ffe:	2300      	movs	r3, #0
 8008000:	75fb      	strb	r3, [r7, #23]
 8008002:	e055      	b.n	80080b0 <HAL_TIM_PeriodElapsedCallback+0x188>
  {
    uint32_t buffptr;
    uint32_t buffsize;

    if (Read_Index[i] != Write_Index[i])
 8008004:	7dfb      	ldrb	r3, [r7, #23]
 8008006:	4a33      	ldr	r2, [pc, #204]	@ (80080d4 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8008008:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800800c:	7dfb      	ldrb	r3, [r7, #23]
 800800e:	4932      	ldr	r1, [pc, #200]	@ (80080d8 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8008010:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008014:	429a      	cmp	r2, r3
 8008016:	d048      	beq.n	80080aa <HAL_TIM_PeriodElapsedCallback+0x182>
    {
      if (Read_Index[i] > Write_Index[i]) /* Rollback */
 8008018:	7dfb      	ldrb	r3, [r7, #23]
 800801a:	4a2e      	ldr	r2, [pc, #184]	@ (80080d4 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 800801c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008020:	7dfb      	ldrb	r3, [r7, #23]
 8008022:	492d      	ldr	r1, [pc, #180]	@ (80080d8 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8008024:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008028:	429a      	cmp	r2, r3
 800802a:	d907      	bls.n	800803c <HAL_TIM_PeriodElapsedCallback+0x114>
      {
        buffsize = APP_TX_DATA_SIZE - Read_Index[i];
 800802c:	7dfb      	ldrb	r3, [r7, #23]
 800802e:	4a29      	ldr	r2, [pc, #164]	@ (80080d4 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8008030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008034:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8008038:	613b      	str	r3, [r7, #16]
 800803a:	e009      	b.n	8008050 <HAL_TIM_PeriodElapsedCallback+0x128>
      }
      else
      {
        buffsize = Write_Index[i] - Read_Index[i];
 800803c:	7dfb      	ldrb	r3, [r7, #23]
 800803e:	4a26      	ldr	r2, [pc, #152]	@ (80080d8 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8008040:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008044:	7dfb      	ldrb	r3, [r7, #23]
 8008046:	4923      	ldr	r1, [pc, #140]	@ (80080d4 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8008048:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800804c:	1ad3      	subs	r3, r2, r3
 800804e:	613b      	str	r3, [r7, #16]
      }

      buffptr = Read_Index[i];
 8008050:	7dfb      	ldrb	r3, [r7, #23]
 8008052:	4a20      	ldr	r2, [pc, #128]	@ (80080d4 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8008054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008058:	60bb      	str	r3, [r7, #8]

      USBD_CDC_SetTxBuffer(i, &hUsbDevice, &TX_Buffer[i][buffptr], buffsize);
 800805a:	7dfb      	ldrb	r3, [r7, #23]
 800805c:	019a      	lsls	r2, r3, #6
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	4413      	add	r3, r2
 8008062:	4a1e      	ldr	r2, [pc, #120]	@ (80080dc <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8008064:	441a      	add	r2, r3
 8008066:	7df8      	ldrb	r0, [r7, #23]
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	491d      	ldr	r1, [pc, #116]	@ (80080e0 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 800806c:	f000 fd40 	bl	8008af0 <USBD_CDC_SetTxBuffer>

      if (USBD_CDC_TransmitPacket(i, &hUsbDevice) == USBD_OK)
 8008070:	7dfb      	ldrb	r3, [r7, #23]
 8008072:	491b      	ldr	r1, [pc, #108]	@ (80080e0 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8008074:	4618      	mov	r0, r3
 8008076:	f000 fd7d 	bl	8008b74 <USBD_CDC_TransmitPacket>
 800807a:	4603      	mov	r3, r0
 800807c:	2b00      	cmp	r3, #0
 800807e:	d114      	bne.n	80080aa <HAL_TIM_PeriodElapsedCallback+0x182>
      {
        Read_Index[i] += buffsize;
 8008080:	7dfb      	ldrb	r3, [r7, #23]
 8008082:	4a14      	ldr	r2, [pc, #80]	@ (80080d4 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8008084:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008088:	7dfb      	ldrb	r3, [r7, #23]
 800808a:	693a      	ldr	r2, [r7, #16]
 800808c:	440a      	add	r2, r1
 800808e:	4911      	ldr	r1, [pc, #68]	@ (80080d4 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8008090:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if (Read_Index[i] == APP_RX_DATA_SIZE)
 8008094:	7dfb      	ldrb	r3, [r7, #23]
 8008096:	4a0f      	ldr	r2, [pc, #60]	@ (80080d4 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8008098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800809c:	2b40      	cmp	r3, #64	@ 0x40
 800809e:	d104      	bne.n	80080aa <HAL_TIM_PeriodElapsedCallback+0x182>
        {
          Read_Index[i] = 0;
 80080a0:	7dfb      	ldrb	r3, [r7, #23]
 80080a2:	4a0c      	ldr	r2, [pc, #48]	@ (80080d4 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80080a4:	2100      	movs	r1, #0
 80080a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80080aa:	7dfb      	ldrb	r3, [r7, #23]
 80080ac:	3301      	adds	r3, #1
 80080ae:	75fb      	strb	r3, [r7, #23]
 80080b0:	7dfb      	ldrb	r3, [r7, #23]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d0a6      	beq.n	8008004 <HAL_TIM_PeriodElapsedCallback+0xdc>
      }
    }
  }
	}

}
 80080b6:	bf00      	nop
 80080b8:	3720      	adds	r7, #32
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
 80080be:	bf00      	nop
 80080c0:	20000420 	.word	0x20000420
 80080c4:	20001e08 	.word	0x20001e08
 80080c8:	20001e04 	.word	0x20001e04
 80080cc:	20000e04 	.word	0x20000e04
 80080d0:	200003d8 	.word	0x200003d8
 80080d4:	20000e00 	.word	0x20000e00
 80080d8:	20000dfc 	.word	0x20000dfc
 80080dc:	20000db4 	.word	0x20000db4
 80080e0:	20000a58 	.word	0x20000a58

080080e4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b084      	sub	sp, #16
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  uint8_t cdc_ch = UART_Handle_TO_CDC_CH(huart);
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f7ff fc8f 	bl	8007a10 <UART_Handle_TO_CDC_CH>
 80080f2:	4603      	mov	r3, r0
 80080f4:	73fb      	strb	r3, [r7, #15]
  //CDC_Transmit(cdc_ch, (TX_Buffer[cdc_ch] + Write_Index[cdc_ch]), 1);
  /* Increment Index for buffer writing */
  Write_Index[cdc_ch]++;
 80080f6:	7bfb      	ldrb	r3, [r7, #15]
 80080f8:	4a11      	ldr	r2, [pc, #68]	@ (8008140 <HAL_UART_RxCpltCallback+0x5c>)
 80080fa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80080fe:	3201      	adds	r2, #1
 8008100:	490f      	ldr	r1, [pc, #60]	@ (8008140 <HAL_UART_RxCpltCallback+0x5c>)
 8008102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  /* To avoid buffer overflow */
  if (Write_Index[cdc_ch] == APP_RX_DATA_SIZE)
 8008106:	7bfb      	ldrb	r3, [r7, #15]
 8008108:	4a0d      	ldr	r2, [pc, #52]	@ (8008140 <HAL_UART_RxCpltCallback+0x5c>)
 800810a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800810e:	2b40      	cmp	r3, #64	@ 0x40
 8008110:	d104      	bne.n	800811c <HAL_UART_RxCpltCallback+0x38>
  {
    Write_Index[cdc_ch] = 0;
 8008112:	7bfb      	ldrb	r3, [r7, #15]
 8008114:	4a0a      	ldr	r2, [pc, #40]	@ (8008140 <HAL_UART_RxCpltCallback+0x5c>)
 8008116:	2100      	movs	r1, #0
 8008118:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  }

  /* Start another reception: provide the buffer pointer with offset and the buffer size */
  HAL_UART_Receive_IT(huart, (TX_Buffer[cdc_ch] + Write_Index[cdc_ch]), 1);
 800811c:	7bfb      	ldrb	r3, [r7, #15]
 800811e:	019b      	lsls	r3, r3, #6
 8008120:	4a08      	ldr	r2, [pc, #32]	@ (8008144 <HAL_UART_RxCpltCallback+0x60>)
 8008122:	441a      	add	r2, r3
 8008124:	7bfb      	ldrb	r3, [r7, #15]
 8008126:	4906      	ldr	r1, [pc, #24]	@ (8008140 <HAL_UART_RxCpltCallback+0x5c>)
 8008128:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800812c:	4413      	add	r3, r2
 800812e:	2201      	movs	r2, #1
 8008130:	4619      	mov	r1, r3
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f7fd f943 	bl	80053be <HAL_UART_Receive_IT>
}
 8008138:	bf00      	nop
 800813a:	3710      	adds	r7, #16
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}
 8008140:	20000dfc 	.word	0x20000dfc
 8008144:	20000db4 	.word	0x20000db4

08008148 <USBD_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008148:	b480      	push	{r7}
 800814a:	b083      	sub	sp, #12
 800814c:	af00      	add	r7, sp, #0
 800814e:	4603      	mov	r3, r0
 8008150:	6039      	str	r1, [r7, #0]
 8008152:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_DeviceDesc);
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	2212      	movs	r2, #18
 8008158:	801a      	strh	r2, [r3, #0]
  return USBD_DeviceDesc;
 800815a:	4b03      	ldr	r3, [pc, #12]	@ (8008168 <USBD_DeviceDescriptor+0x20>)
}
 800815c:	4618      	mov	r0, r3
 800815e:	370c      	adds	r7, #12
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr
 8008168:	2000007c 	.word	0x2000007c

0800816c <USBD_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800816c:	b480      	push	{r7}
 800816e:	b083      	sub	sp, #12
 8008170:	af00      	add	r7, sp, #0
 8008172:	4603      	mov	r3, r0
 8008174:	6039      	str	r1, [r7, #0]
 8008176:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	2204      	movs	r2, #4
 800817c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800817e:	4b03      	ldr	r3, [pc, #12]	@ (800818c <USBD_LangIDStrDescriptor+0x20>)
}
 8008180:	4618      	mov	r0, r3
 8008182:	370c      	adds	r7, #12
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr
 800818c:	20000090 	.word	0x20000090

08008190 <USBD_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b082      	sub	sp, #8
 8008194:	af00      	add	r7, sp, #0
 8008196:	4603      	mov	r3, r0
 8008198:	6039      	str	r1, [r7, #0]
 800819a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800819c:	79fb      	ldrb	r3, [r7, #7]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d105      	bne.n	80081ae <USBD_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80081a2:	683a      	ldr	r2, [r7, #0]
 80081a4:	4907      	ldr	r1, [pc, #28]	@ (80081c4 <USBD_ProductStrDescriptor+0x34>)
 80081a6:	4808      	ldr	r0, [pc, #32]	@ (80081c8 <USBD_ProductStrDescriptor+0x38>)
 80081a8:	f002 fc7d 	bl	800aaa6 <USBD_GetString>
 80081ac:	e004      	b.n	80081b8 <USBD_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80081ae:	683a      	ldr	r2, [r7, #0]
 80081b0:	4904      	ldr	r1, [pc, #16]	@ (80081c4 <USBD_ProductStrDescriptor+0x34>)
 80081b2:	4805      	ldr	r0, [pc, #20]	@ (80081c8 <USBD_ProductStrDescriptor+0x38>)
 80081b4:	f002 fc77 	bl	800aaa6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80081b8:	4b02      	ldr	r3, [pc, #8]	@ (80081c4 <USBD_ProductStrDescriptor+0x34>)
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3708      	adds	r7, #8
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
 80081c2:	bf00      	nop
 80081c4:	20001e10 	.word	0x20001e10
 80081c8:	0800bba8 	.word	0x0800bba8

080081cc <USBD_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b082      	sub	sp, #8
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	4603      	mov	r3, r0
 80081d4:	6039      	str	r1, [r7, #0]
 80081d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80081d8:	683a      	ldr	r2, [r7, #0]
 80081da:	4904      	ldr	r1, [pc, #16]	@ (80081ec <USBD_ManufacturerStrDescriptor+0x20>)
 80081dc:	4804      	ldr	r0, [pc, #16]	@ (80081f0 <USBD_ManufacturerStrDescriptor+0x24>)
 80081de:	f002 fc62 	bl	800aaa6 <USBD_GetString>
  return USBD_StrDesc;
 80081e2:	4b02      	ldr	r3, [pc, #8]	@ (80081ec <USBD_ManufacturerStrDescriptor+0x20>)
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3708      	adds	r7, #8
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}
 80081ec:	20001e10 	.word	0x20001e10
 80081f0:	0800bbb8 	.word	0x0800bbb8

080081f4 <USBD_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b082      	sub	sp, #8
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	4603      	mov	r3, r0
 80081fc:	6039      	str	r1, [r7, #0]
 80081fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	221a      	movs	r2, #26
 8008204:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008206:	f000 f843 	bl	8008290 <Get_SerialNum>
  /* USER CODE BEGIN USBD_SerialStrDescriptor */

  /* USER CODE END USBD_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800820a:	4b02      	ldr	r3, [pc, #8]	@ (8008214 <USBD_SerialStrDescriptor+0x20>)
}
 800820c:	4618      	mov	r0, r3
 800820e:	3708      	adds	r7, #8
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}
 8008214:	20000094 	.word	0x20000094

08008218 <USBD_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b082      	sub	sp, #8
 800821c:	af00      	add	r7, sp, #0
 800821e:	4603      	mov	r3, r0
 8008220:	6039      	str	r1, [r7, #0]
 8008222:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008224:	79fb      	ldrb	r3, [r7, #7]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d105      	bne.n	8008236 <USBD_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800822a:	683a      	ldr	r2, [r7, #0]
 800822c:	4907      	ldr	r1, [pc, #28]	@ (800824c <USBD_ConfigStrDescriptor+0x34>)
 800822e:	4808      	ldr	r0, [pc, #32]	@ (8008250 <USBD_ConfigStrDescriptor+0x38>)
 8008230:	f002 fc39 	bl	800aaa6 <USBD_GetString>
 8008234:	e004      	b.n	8008240 <USBD_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8008236:	683a      	ldr	r2, [r7, #0]
 8008238:	4904      	ldr	r1, [pc, #16]	@ (800824c <USBD_ConfigStrDescriptor+0x34>)
 800823a:	4805      	ldr	r0, [pc, #20]	@ (8008250 <USBD_ConfigStrDescriptor+0x38>)
 800823c:	f002 fc33 	bl	800aaa6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008240:	4b02      	ldr	r3, [pc, #8]	@ (800824c <USBD_ConfigStrDescriptor+0x34>)
}
 8008242:	4618      	mov	r0, r3
 8008244:	3708      	adds	r7, #8
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}
 800824a:	bf00      	nop
 800824c:	20001e10 	.word	0x20001e10
 8008250:	0800bbc0 	.word	0x0800bbc0

08008254 <USBD_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b082      	sub	sp, #8
 8008258:	af00      	add	r7, sp, #0
 800825a:	4603      	mov	r3, r0
 800825c:	6039      	str	r1, [r7, #0]
 800825e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008260:	79fb      	ldrb	r3, [r7, #7]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d105      	bne.n	8008272 <USBD_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008266:	683a      	ldr	r2, [r7, #0]
 8008268:	4907      	ldr	r1, [pc, #28]	@ (8008288 <USBD_InterfaceStrDescriptor+0x34>)
 800826a:	4808      	ldr	r0, [pc, #32]	@ (800828c <USBD_InterfaceStrDescriptor+0x38>)
 800826c:	f002 fc1b 	bl	800aaa6 <USBD_GetString>
 8008270:	e004      	b.n	800827c <USBD_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008272:	683a      	ldr	r2, [r7, #0]
 8008274:	4904      	ldr	r1, [pc, #16]	@ (8008288 <USBD_InterfaceStrDescriptor+0x34>)
 8008276:	4805      	ldr	r0, [pc, #20]	@ (800828c <USBD_InterfaceStrDescriptor+0x38>)
 8008278:	f002 fc15 	bl	800aaa6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800827c:	4b02      	ldr	r3, [pc, #8]	@ (8008288 <USBD_InterfaceStrDescriptor+0x34>)
}
 800827e:	4618      	mov	r0, r3
 8008280:	3708      	adds	r7, #8
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop
 8008288:	20001e10 	.word	0x20001e10
 800828c:	0800bbd0 	.word	0x0800bbd0

08008290 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b084      	sub	sp, #16
 8008294:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008296:	4b0f      	ldr	r3, [pc, #60]	@ (80082d4 <Get_SerialNum+0x44>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800829c:	4b0e      	ldr	r3, [pc, #56]	@ (80082d8 <Get_SerialNum+0x48>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80082a2:	4b0e      	ldr	r3, [pc, #56]	@ (80082dc <Get_SerialNum+0x4c>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80082a8:	68fa      	ldr	r2, [r7, #12]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	4413      	add	r3, r2
 80082ae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d009      	beq.n	80082ca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80082b6:	2208      	movs	r2, #8
 80082b8:	4909      	ldr	r1, [pc, #36]	@ (80082e0 <Get_SerialNum+0x50>)
 80082ba:	68f8      	ldr	r0, [r7, #12]
 80082bc:	f000 f814 	bl	80082e8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80082c0:	2204      	movs	r2, #4
 80082c2:	4908      	ldr	r1, [pc, #32]	@ (80082e4 <Get_SerialNum+0x54>)
 80082c4:	68b8      	ldr	r0, [r7, #8]
 80082c6:	f000 f80f 	bl	80082e8 <IntToUnicode>
  }
}
 80082ca:	bf00      	nop
 80082cc:	3710      	adds	r7, #16
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	1fff7a10 	.word	0x1fff7a10
 80082d8:	1fff7a14 	.word	0x1fff7a14
 80082dc:	1fff7a18 	.word	0x1fff7a18
 80082e0:	20000096 	.word	0x20000096
 80082e4:	200000a6 	.word	0x200000a6

080082e8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b087      	sub	sp, #28
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	60f8      	str	r0, [r7, #12]
 80082f0:	60b9      	str	r1, [r7, #8]
 80082f2:	4613      	mov	r3, r2
 80082f4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80082f6:	2300      	movs	r3, #0
 80082f8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80082fa:	2300      	movs	r3, #0
 80082fc:	75fb      	strb	r3, [r7, #23]
 80082fe:	e027      	b.n	8008350 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	0f1b      	lsrs	r3, r3, #28
 8008304:	2b09      	cmp	r3, #9
 8008306:	d80b      	bhi.n	8008320 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	0f1b      	lsrs	r3, r3, #28
 800830c:	b2da      	uxtb	r2, r3
 800830e:	7dfb      	ldrb	r3, [r7, #23]
 8008310:	005b      	lsls	r3, r3, #1
 8008312:	4619      	mov	r1, r3
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	440b      	add	r3, r1
 8008318:	3230      	adds	r2, #48	@ 0x30
 800831a:	b2d2      	uxtb	r2, r2
 800831c:	701a      	strb	r2, [r3, #0]
 800831e:	e00a      	b.n	8008336 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	0f1b      	lsrs	r3, r3, #28
 8008324:	b2da      	uxtb	r2, r3
 8008326:	7dfb      	ldrb	r3, [r7, #23]
 8008328:	005b      	lsls	r3, r3, #1
 800832a:	4619      	mov	r1, r3
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	440b      	add	r3, r1
 8008330:	3237      	adds	r2, #55	@ 0x37
 8008332:	b2d2      	uxtb	r2, r2
 8008334:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	011b      	lsls	r3, r3, #4
 800833a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800833c:	7dfb      	ldrb	r3, [r7, #23]
 800833e:	005b      	lsls	r3, r3, #1
 8008340:	3301      	adds	r3, #1
 8008342:	68ba      	ldr	r2, [r7, #8]
 8008344:	4413      	add	r3, r2
 8008346:	2200      	movs	r2, #0
 8008348:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800834a:	7dfb      	ldrb	r3, [r7, #23]
 800834c:	3301      	adds	r3, #1
 800834e:	75fb      	strb	r3, [r7, #23]
 8008350:	7dfa      	ldrb	r2, [r7, #23]
 8008352:	79fb      	ldrb	r3, [r7, #7]
 8008354:	429a      	cmp	r2, r3
 8008356:	d3d3      	bcc.n	8008300 <IntToUnicode+0x18>
  }
}
 8008358:	bf00      	nop
 800835a:	bf00      	nop
 800835c:	371c      	adds	r7, #28
 800835e:	46bd      	mov	sp, r7
 8008360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008364:	4770      	bx	lr

08008366 <CUSTOM_HID_Init>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init(void)
{
 8008366:	b480      	push	{r7}
 8008368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800836a:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800836c:	4618      	mov	r0, r3
 800836e:	46bd      	mov	sp, r7
 8008370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008374:	4770      	bx	lr

08008376 <CUSTOM_HID_DeInit>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit(void)
{
 8008376:	b480      	push	{r7}
 8008378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800837a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800837c:	4618      	mov	r0, r3
 800837e:	46bd      	mov	sp, r7
 8008380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008384:	4770      	bx	lr

08008386 <CUSTOM_HID_OutEvent>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent(uint8_t event_idx, uint8_t state)
{
 8008386:	b480      	push	{r7}
 8008388:	b083      	sub	sp, #12
 800838a:	af00      	add	r7, sp, #0
 800838c:	4603      	mov	r3, r0
 800838e:	460a      	mov	r2, r1
 8008390:	71fb      	strb	r3, [r7, #7]
 8008392:	4613      	mov	r3, r2
 8008394:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  //memcpy(buffer, state, 0x40);
  //USBD_CUSTOM_HID_SendReport(&hUsbDevice, (uint8_t *)buffer, 0x40);
  return (USBD_OK);
 8008396:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008398:	4618      	mov	r0, r3
 800839a:	370c      	adds	r7, #12
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr

080083a4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b084      	sub	sp, #16
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	460b      	mov	r3, r1
 80083ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 80083b0:	2300      	movs	r3, #0
 80083b2:	60bb      	str	r3, [r7, #8]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80083b4:	2300      	movs	r3, #0
 80083b6:	73fb      	strb	r3, [r7, #15]
 80083b8:	e0c6      	b.n	8008548 <USBD_CDC_Init+0x1a4>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 80083ba:	7bfb      	ldrb	r3, [r7, #15]
 80083bc:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80083c0:	fb02 f303 	mul.w	r3, r2, r3
 80083c4:	4a65      	ldr	r2, [pc, #404]	@ (800855c <USBD_CDC_Init+0x1b8>)
 80083c6:	4413      	add	r3, r2
 80083c8:	60bb      	str	r3, [r7, #8]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	7c1b      	ldrb	r3, [r3, #16]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d13d      	bne.n	800844e <USBD_CDC_Init+0xaa>
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 80083d2:	7bfb      	ldrb	r3, [r7, #15]
 80083d4:	4a62      	ldr	r2, [pc, #392]	@ (8008560 <USBD_CDC_Init+0x1bc>)
 80083d6:	5cd1      	ldrb	r1, [r2, r3]
 80083d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80083dc:	2202      	movs	r2, #2
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f002 fdd3 	bl	800af8a <USBD_LL_OpenEP>
                           CDC_DATA_HS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 80083e4:	7bfb      	ldrb	r3, [r7, #15]
 80083e6:	4a5e      	ldr	r2, [pc, #376]	@ (8008560 <USBD_CDC_Init+0x1bc>)
 80083e8:	5cd3      	ldrb	r3, [r2, r3]
 80083ea:	f003 020f 	and.w	r2, r3, #15
 80083ee:	6879      	ldr	r1, [r7, #4]
 80083f0:	4613      	mov	r3, r2
 80083f2:	009b      	lsls	r3, r3, #2
 80083f4:	4413      	add	r3, r2
 80083f6:	009b      	lsls	r3, r3, #2
 80083f8:	440b      	add	r3, r1
 80083fa:	3324      	adds	r3, #36	@ 0x24
 80083fc:	2201      	movs	r2, #1
 80083fe:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 8008400:	7bfb      	ldrb	r3, [r7, #15]
 8008402:	4a58      	ldr	r2, [pc, #352]	@ (8008564 <USBD_CDC_Init+0x1c0>)
 8008404:	5cd1      	ldrb	r1, [r2, r3]
 8008406:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800840a:	2202      	movs	r2, #2
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f002 fdbc 	bl	800af8a <USBD_LL_OpenEP>
                           CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 8008412:	7bfb      	ldrb	r3, [r7, #15]
 8008414:	4a53      	ldr	r2, [pc, #332]	@ (8008564 <USBD_CDC_Init+0x1c0>)
 8008416:	5cd3      	ldrb	r3, [r2, r3]
 8008418:	f003 020f 	and.w	r2, r3, #15
 800841c:	6879      	ldr	r1, [r7, #4]
 800841e:	4613      	mov	r3, r2
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	4413      	add	r3, r2
 8008424:	009b      	lsls	r3, r3, #2
 8008426:	440b      	add	r3, r1
 8008428:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800842c:	2201      	movs	r2, #1
 800842e:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008430:	7bfb      	ldrb	r3, [r7, #15]
 8008432:	4a4d      	ldr	r2, [pc, #308]	@ (8008568 <USBD_CDC_Init+0x1c4>)
 8008434:	5cd3      	ldrb	r3, [r2, r3]
 8008436:	f003 020f 	and.w	r2, r3, #15
 800843a:	6879      	ldr	r1, [r7, #4]
 800843c:	4613      	mov	r3, r2
 800843e:	009b      	lsls	r3, r3, #2
 8008440:	4413      	add	r3, r2
 8008442:	009b      	lsls	r3, r3, #2
 8008444:	440b      	add	r3, r1
 8008446:	3326      	adds	r3, #38	@ 0x26
 8008448:	2210      	movs	r2, #16
 800844a:	801a      	strh	r2, [r3, #0]
 800844c:	e03a      	b.n	80084c4 <USBD_CDC_Init+0x120>
    }
    else
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 800844e:	7bfb      	ldrb	r3, [r7, #15]
 8008450:	4a43      	ldr	r2, [pc, #268]	@ (8008560 <USBD_CDC_Init+0x1bc>)
 8008452:	5cd1      	ldrb	r1, [r2, r3]
 8008454:	2340      	movs	r3, #64	@ 0x40
 8008456:	2202      	movs	r2, #2
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f002 fd96 	bl	800af8a <USBD_LL_OpenEP>
                           CDC_DATA_FS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 800845e:	7bfb      	ldrb	r3, [r7, #15]
 8008460:	4a3f      	ldr	r2, [pc, #252]	@ (8008560 <USBD_CDC_Init+0x1bc>)
 8008462:	5cd3      	ldrb	r3, [r2, r3]
 8008464:	f003 020f 	and.w	r2, r3, #15
 8008468:	6879      	ldr	r1, [r7, #4]
 800846a:	4613      	mov	r3, r2
 800846c:	009b      	lsls	r3, r3, #2
 800846e:	4413      	add	r3, r2
 8008470:	009b      	lsls	r3, r3, #2
 8008472:	440b      	add	r3, r1
 8008474:	3324      	adds	r3, #36	@ 0x24
 8008476:	2201      	movs	r2, #1
 8008478:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 800847a:	7bfb      	ldrb	r3, [r7, #15]
 800847c:	4a39      	ldr	r2, [pc, #228]	@ (8008564 <USBD_CDC_Init+0x1c0>)
 800847e:	5cd1      	ldrb	r1, [r2, r3]
 8008480:	2340      	movs	r3, #64	@ 0x40
 8008482:	2202      	movs	r2, #2
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f002 fd80 	bl	800af8a <USBD_LL_OpenEP>
                           CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 800848a:	7bfb      	ldrb	r3, [r7, #15]
 800848c:	4a35      	ldr	r2, [pc, #212]	@ (8008564 <USBD_CDC_Init+0x1c0>)
 800848e:	5cd3      	ldrb	r3, [r2, r3]
 8008490:	f003 020f 	and.w	r2, r3, #15
 8008494:	6879      	ldr	r1, [r7, #4]
 8008496:	4613      	mov	r3, r2
 8008498:	009b      	lsls	r3, r3, #2
 800849a:	4413      	add	r3, r2
 800849c:	009b      	lsls	r3, r3, #2
 800849e:	440b      	add	r3, r1
 80084a0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80084a4:	2201      	movs	r2, #1
 80084a6:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80084a8:	7bfb      	ldrb	r3, [r7, #15]
 80084aa:	4a2f      	ldr	r2, [pc, #188]	@ (8008568 <USBD_CDC_Init+0x1c4>)
 80084ac:	5cd3      	ldrb	r3, [r2, r3]
 80084ae:	f003 020f 	and.w	r2, r3, #15
 80084b2:	6879      	ldr	r1, [r7, #4]
 80084b4:	4613      	mov	r3, r2
 80084b6:	009b      	lsls	r3, r3, #2
 80084b8:	4413      	add	r3, r2
 80084ba:	009b      	lsls	r3, r3, #2
 80084bc:	440b      	add	r3, r1
 80084be:	3326      	adds	r3, #38	@ 0x26
 80084c0:	2210      	movs	r2, #16
 80084c2:	801a      	strh	r2, [r3, #0]
    }

    /* Open Command IN EP */
    (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP[i], USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80084c4:	7bfb      	ldrb	r3, [r7, #15]
 80084c6:	4a28      	ldr	r2, [pc, #160]	@ (8008568 <USBD_CDC_Init+0x1c4>)
 80084c8:	5cd1      	ldrb	r1, [r2, r3]
 80084ca:	2308      	movs	r3, #8
 80084cc:	2203      	movs	r2, #3
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f002 fd5b 	bl	800af8a <USBD_LL_OpenEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 1U;
 80084d4:	7bfb      	ldrb	r3, [r7, #15]
 80084d6:	4a24      	ldr	r2, [pc, #144]	@ (8008568 <USBD_CDC_Init+0x1c4>)
 80084d8:	5cd3      	ldrb	r3, [r2, r3]
 80084da:	f003 020f 	and.w	r2, r3, #15
 80084de:	6879      	ldr	r1, [r7, #4]
 80084e0:	4613      	mov	r3, r2
 80084e2:	009b      	lsls	r3, r3, #2
 80084e4:	4413      	add	r3, r2
 80084e6:	009b      	lsls	r3, r3, #2
 80084e8:	440b      	add	r3, r1
 80084ea:	3324      	adds	r3, #36	@ 0x24
 80084ec:	2201      	movs	r2, #1
 80084ee:	801a      	strh	r2, [r3, #0]

    /* Init  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Init(i);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	7bfa      	ldrb	r2, [r7, #15]
 80084fa:	4610      	mov	r0, r2
 80084fc:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	2200      	movs	r2, #0
 8008502:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	2200      	movs	r2, #0
 800850a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	7c1b      	ldrb	r3, [r3, #16]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d10b      	bne.n	800852e <USBD_CDC_Init+0x18a>
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 8008516:	7bfb      	ldrb	r3, [r7, #15]
 8008518:	4a12      	ldr	r2, [pc, #72]	@ (8008564 <USBD_CDC_Init+0x1c0>)
 800851a:	5cd1      	ldrb	r1, [r2, r3]
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008522:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f002 fe1e 	bl	800b168 <USBD_LL_PrepareReceive>
 800852c:	e009      	b.n	8008542 <USBD_CDC_Init+0x19e>
                                   CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 800852e:	7bfb      	ldrb	r3, [r7, #15]
 8008530:	4a0c      	ldr	r2, [pc, #48]	@ (8008564 <USBD_CDC_Init+0x1c0>)
 8008532:	5cd1      	ldrb	r1, [r2, r3]
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800853a:	2340      	movs	r3, #64	@ 0x40
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f002 fe13 	bl	800b168 <USBD_LL_PrepareReceive>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8008542:	7bfb      	ldrb	r3, [r7, #15]
 8008544:	3301      	adds	r3, #1
 8008546:	73fb      	strb	r3, [r7, #15]
 8008548:	7bfb      	ldrb	r3, [r7, #15]
 800854a:	2b00      	cmp	r3, #0
 800854c:	f43f af35 	beq.w	80083ba <USBD_CDC_Init+0x16>
                                   CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return (uint8_t)USBD_OK;
 8008550:	2300      	movs	r3, #0
}
 8008552:	4618      	mov	r0, r3
 8008554:	3710      	adds	r7, #16
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
 800855a:	bf00      	nop
 800855c:	20002028 	.word	0x20002028
 8008560:	20002010 	.word	0x20002010
 8008564:	20002014 	.word	0x20002014
 8008568:	20002018 	.word	0x20002018

0800856c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b084      	sub	sp, #16
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	460b      	mov	r3, r1
 8008576:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8008578:	2300      	movs	r3, #0
 800857a:	73fb      	strb	r3, [r7, #15]
 800857c:	e057      	b.n	800862e <USBD_CDC_DeInit+0xc2>
  {
    /* Close EP IN */
    (void)USBD_LL_CloseEP(pdev, CDC_IN_EP[i]);
 800857e:	7bfb      	ldrb	r3, [r7, #15]
 8008580:	4a2f      	ldr	r2, [pc, #188]	@ (8008640 <USBD_CDC_DeInit+0xd4>)
 8008582:	5cd3      	ldrb	r3, [r2, r3]
 8008584:	4619      	mov	r1, r3
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f002 fd25 	bl	800afd6 <USBD_LL_CloseEP>
    pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 0U;
 800858c:	7bfb      	ldrb	r3, [r7, #15]
 800858e:	4a2c      	ldr	r2, [pc, #176]	@ (8008640 <USBD_CDC_DeInit+0xd4>)
 8008590:	5cd3      	ldrb	r3, [r2, r3]
 8008592:	f003 020f 	and.w	r2, r3, #15
 8008596:	6879      	ldr	r1, [r7, #4]
 8008598:	4613      	mov	r3, r2
 800859a:	009b      	lsls	r3, r3, #2
 800859c:	4413      	add	r3, r2
 800859e:	009b      	lsls	r3, r3, #2
 80085a0:	440b      	add	r3, r1
 80085a2:	3324      	adds	r3, #36	@ 0x24
 80085a4:	2200      	movs	r2, #0
 80085a6:	801a      	strh	r2, [r3, #0]

    /* Close EP OUT */
    (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP[i]);
 80085a8:	7bfb      	ldrb	r3, [r7, #15]
 80085aa:	4a26      	ldr	r2, [pc, #152]	@ (8008644 <USBD_CDC_DeInit+0xd8>)
 80085ac:	5cd3      	ldrb	r3, [r2, r3]
 80085ae:	4619      	mov	r1, r3
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f002 fd10 	bl	800afd6 <USBD_LL_CloseEP>
    pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 0U;
 80085b6:	7bfb      	ldrb	r3, [r7, #15]
 80085b8:	4a22      	ldr	r2, [pc, #136]	@ (8008644 <USBD_CDC_DeInit+0xd8>)
 80085ba:	5cd3      	ldrb	r3, [r2, r3]
 80085bc:	f003 020f 	and.w	r2, r3, #15
 80085c0:	6879      	ldr	r1, [r7, #4]
 80085c2:	4613      	mov	r3, r2
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	4413      	add	r3, r2
 80085c8:	009b      	lsls	r3, r3, #2
 80085ca:	440b      	add	r3, r1
 80085cc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80085d0:	2200      	movs	r2, #0
 80085d2:	801a      	strh	r2, [r3, #0]

    /* Close Command IN EP */
    (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP[i]);
 80085d4:	7bfb      	ldrb	r3, [r7, #15]
 80085d6:	4a1c      	ldr	r2, [pc, #112]	@ (8008648 <USBD_CDC_DeInit+0xdc>)
 80085d8:	5cd3      	ldrb	r3, [r2, r3]
 80085da:	4619      	mov	r1, r3
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f002 fcfa 	bl	800afd6 <USBD_LL_CloseEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 0U;
 80085e2:	7bfb      	ldrb	r3, [r7, #15]
 80085e4:	4a18      	ldr	r2, [pc, #96]	@ (8008648 <USBD_CDC_DeInit+0xdc>)
 80085e6:	5cd3      	ldrb	r3, [r2, r3]
 80085e8:	f003 020f 	and.w	r2, r3, #15
 80085ec:	6879      	ldr	r1, [r7, #4]
 80085ee:	4613      	mov	r3, r2
 80085f0:	009b      	lsls	r3, r3, #2
 80085f2:	4413      	add	r3, r2
 80085f4:	009b      	lsls	r3, r3, #2
 80085f6:	440b      	add	r3, r1
 80085f8:	3324      	adds	r3, #36	@ 0x24
 80085fa:	2200      	movs	r2, #0
 80085fc:	801a      	strh	r2, [r3, #0]
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = 0U;
 80085fe:	7bfb      	ldrb	r3, [r7, #15]
 8008600:	4a11      	ldr	r2, [pc, #68]	@ (8008648 <USBD_CDC_DeInit+0xdc>)
 8008602:	5cd3      	ldrb	r3, [r2, r3]
 8008604:	f003 020f 	and.w	r2, r3, #15
 8008608:	6879      	ldr	r1, [r7, #4]
 800860a:	4613      	mov	r3, r2
 800860c:	009b      	lsls	r3, r3, #2
 800860e:	4413      	add	r3, r2
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	440b      	add	r3, r1
 8008614:	3326      	adds	r3, #38	@ 0x26
 8008616:	2200      	movs	r2, #0
 8008618:	801a      	strh	r2, [r3, #0]

    /* DeInit  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->DeInit(i);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	7bfa      	ldrb	r2, [r7, #15]
 8008624:	4610      	mov	r0, r2
 8008626:	4798      	blx	r3
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8008628:	7bfb      	ldrb	r3, [r7, #15]
 800862a:	3301      	adds	r3, #1
 800862c:	73fb      	strb	r3, [r7, #15]
 800862e:	7bfb      	ldrb	r3, [r7, #15]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d0a4      	beq.n	800857e <USBD_CDC_DeInit+0x12>
  }
  return (uint8_t)USBD_OK;
 8008634:	2300      	movs	r3, #0
}
 8008636:	4618      	mov	r0, r3
 8008638:	3710      	adds	r7, #16
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}
 800863e:	bf00      	nop
 8008640:	20002010 	.word	0x20002010
 8008644:	20002014 	.word	0x20002014
 8008648:	20002018 	.word	0x20002018

0800864c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800864c:	b590      	push	{r4, r7, lr}
 800864e:	b087      	sub	sp, #28
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	6039      	str	r1, [r7, #0]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8008656:	2300      	movs	r3, #0
 8008658:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800865a:	2300      	movs	r3, #0
 800865c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800865e:	2300      	movs	r3, #0
 8008660:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008662:	2300      	movs	r3, #0
 8008664:	75fb      	strb	r3, [r7, #23]

  uint8_t windex_to_ch = 0;
 8008666:	2300      	movs	r3, #0
 8008668:	75bb      	strb	r3, [r7, #22]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800866a:	2300      	movs	r3, #0
 800866c:	757b      	strb	r3, [r7, #21]
 800866e:	e015      	b.n	800869c <USBD_CDC_Setup+0x50>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	889b      	ldrh	r3, [r3, #4]
 8008674:	b2da      	uxtb	r2, r3
 8008676:	7d7b      	ldrb	r3, [r7, #21]
 8008678:	496d      	ldr	r1, [pc, #436]	@ (8008830 <USBD_CDC_Setup+0x1e4>)
 800867a:	5ccb      	ldrb	r3, [r1, r3]
 800867c:	429a      	cmp	r2, r3
 800867e:	d007      	beq.n	8008690 <USBD_CDC_Setup+0x44>
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	889b      	ldrh	r3, [r3, #4]
 8008684:	b2da      	uxtb	r2, r3
 8008686:	7d7b      	ldrb	r3, [r7, #21]
 8008688:	496a      	ldr	r1, [pc, #424]	@ (8008834 <USBD_CDC_Setup+0x1e8>)
 800868a:	5ccb      	ldrb	r3, [r1, r3]
 800868c:	429a      	cmp	r2, r3
 800868e:	d102      	bne.n	8008696 <USBD_CDC_Setup+0x4a>
    {
      windex_to_ch = i;
 8008690:	7d7b      	ldrb	r3, [r7, #21]
 8008692:	75bb      	strb	r3, [r7, #22]
      break;
 8008694:	e005      	b.n	80086a2 <USBD_CDC_Setup+0x56>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8008696:	7d7b      	ldrb	r3, [r7, #21]
 8008698:	3301      	adds	r3, #1
 800869a:	757b      	strb	r3, [r7, #21]
 800869c:	7d7b      	ldrb	r3, [r7, #21]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d0e6      	beq.n	8008670 <USBD_CDC_Setup+0x24>
    }
  }

  hcdc = &CDC_ACM_Class_Data[windex_to_ch];
 80086a2:	7dbb      	ldrb	r3, [r7, #22]
 80086a4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80086a8:	fb02 f303 	mul.w	r3, r2, r3
 80086ac:	4a62      	ldr	r2, [pc, #392]	@ (8008838 <USBD_CDC_Setup+0x1ec>)
 80086ae:	4413      	add	r3, r2
 80086b0:	613b      	str	r3, [r7, #16]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	781b      	ldrb	r3, [r3, #0]
 80086b6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d04a      	beq.n	8008754 <USBD_CDC_Setup+0x108>
 80086be:	2b20      	cmp	r3, #32
 80086c0:	f040 80aa 	bne.w	8008818 <USBD_CDC_Setup+0x1cc>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	88db      	ldrh	r3, [r3, #6]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d038      	beq.n	800873e <USBD_CDC_Setup+0xf2>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	781b      	ldrb	r3, [r3, #0]
 80086d0:	b25b      	sxtb	r3, r3
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	da1d      	bge.n	8008712 <USBD_CDC_Setup+0xc6>
      {
        ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80086dc:	689c      	ldr	r4, [r3, #8]
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	7859      	ldrb	r1, [r3, #1]
 80086e2:	7dbb      	ldrb	r3, [r7, #22]
 80086e4:	025b      	lsls	r3, r3, #9
 80086e6:	693a      	ldr	r2, [r7, #16]
 80086e8:	441a      	add	r2, r3
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	88db      	ldrh	r3, [r3, #6]
 80086ee:	7db8      	ldrb	r0, [r7, #22]
 80086f0:	47a0      	blx	r4

        len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	88db      	ldrh	r3, [r3, #6]
 80086f6:	2b07      	cmp	r3, #7
 80086f8:	bf28      	it	cs
 80086fa:	2307      	movcs	r3, #7
 80086fc:	81fb      	strh	r3, [r7, #14]
        (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data[windex_to_ch], len);
 80086fe:	7dbb      	ldrb	r3, [r7, #22]
 8008700:	025b      	lsls	r3, r3, #9
 8008702:	693a      	ldr	r2, [r7, #16]
 8008704:	4413      	add	r3, r2
 8008706:	89fa      	ldrh	r2, [r7, #14]
 8008708:	4619      	mov	r1, r3
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f002 fa2b 	bl	800ab66 <USBD_CtlSendData>
    }
    else
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
    }
    break;
 8008710:	e089      	b.n	8008826 <USBD_CDC_Setup+0x1da>
        hcdc->CmdOpCode = req->bRequest;
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	785a      	ldrb	r2, [r3, #1]
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	88db      	ldrh	r3, [r3, #6]
 8008720:	b2da      	uxtb	r2, r3
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 8008728:	7dbb      	ldrb	r3, [r7, #22]
 800872a:	025b      	lsls	r3, r3, #9
 800872c:	693a      	ldr	r2, [r7, #16]
 800872e:	18d1      	adds	r1, r2, r3
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	88db      	ldrh	r3, [r3, #6]
 8008734:	461a      	mov	r2, r3
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f002 fa41 	bl	800abbe <USBD_CtlPrepareRx>
    break;
 800873c:	e073      	b.n	8008826 <USBD_CDC_Setup+0x1da>
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008744:	689c      	ldr	r4, [r3, #8]
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	7859      	ldrb	r1, [r3, #1]
 800874a:	7db8      	ldrb	r0, [r7, #22]
 800874c:	2300      	movs	r3, #0
 800874e:	683a      	ldr	r2, [r7, #0]
 8008750:	47a0      	blx	r4
    break;
 8008752:	e068      	b.n	8008826 <USBD_CDC_Setup+0x1da>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	785b      	ldrb	r3, [r3, #1]
 8008758:	2b0b      	cmp	r3, #11
 800875a:	d852      	bhi.n	8008802 <USBD_CDC_Setup+0x1b6>
 800875c:	a201      	add	r2, pc, #4	@ (adr r2, 8008764 <USBD_CDC_Setup+0x118>)
 800875e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008762:	bf00      	nop
 8008764:	08008795 	.word	0x08008795
 8008768:	08008811 	.word	0x08008811
 800876c:	08008803 	.word	0x08008803
 8008770:	08008803 	.word	0x08008803
 8008774:	08008803 	.word	0x08008803
 8008778:	08008803 	.word	0x08008803
 800877c:	08008803 	.word	0x08008803
 8008780:	08008803 	.word	0x08008803
 8008784:	08008803 	.word	0x08008803
 8008788:	08008803 	.word	0x08008803
 800878c:	080087bf 	.word	0x080087bf
 8008790:	080087e9 	.word	0x080087e9
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800879a:	b2db      	uxtb	r3, r3
 800879c:	2b03      	cmp	r3, #3
 800879e:	d107      	bne.n	80087b0 <USBD_CDC_Setup+0x164>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80087a0:	f107 030a 	add.w	r3, r7, #10
 80087a4:	2202      	movs	r2, #2
 80087a6:	4619      	mov	r1, r3
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f002 f9dc 	bl	800ab66 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80087ae:	e032      	b.n	8008816 <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 80087b0:	6839      	ldr	r1, [r7, #0]
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f002 f966 	bl	800aa84 <USBD_CtlError>
        ret = USBD_FAIL;
 80087b8:	2303      	movs	r3, #3
 80087ba:	75fb      	strb	r3, [r7, #23]
      break;
 80087bc:	e02b      	b.n	8008816 <USBD_CDC_Setup+0x1ca>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087c4:	b2db      	uxtb	r3, r3
 80087c6:	2b03      	cmp	r3, #3
 80087c8:	d107      	bne.n	80087da <USBD_CDC_Setup+0x18e>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80087ca:	f107 030d 	add.w	r3, r7, #13
 80087ce:	2201      	movs	r2, #1
 80087d0:	4619      	mov	r1, r3
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f002 f9c7 	bl	800ab66 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80087d8:	e01d      	b.n	8008816 <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 80087da:	6839      	ldr	r1, [r7, #0]
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f002 f951 	bl	800aa84 <USBD_CtlError>
        ret = USBD_FAIL;
 80087e2:	2303      	movs	r3, #3
 80087e4:	75fb      	strb	r3, [r7, #23]
      break;
 80087e6:	e016      	b.n	8008816 <USBD_CDC_Setup+0x1ca>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087ee:	b2db      	uxtb	r3, r3
 80087f0:	2b03      	cmp	r3, #3
 80087f2:	d00f      	beq.n	8008814 <USBD_CDC_Setup+0x1c8>
      {
        USBD_CtlError(pdev, req);
 80087f4:	6839      	ldr	r1, [r7, #0]
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f002 f944 	bl	800aa84 <USBD_CtlError>
        ret = USBD_FAIL;
 80087fc:	2303      	movs	r3, #3
 80087fe:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8008800:	e008      	b.n	8008814 <USBD_CDC_Setup+0x1c8>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8008802:	6839      	ldr	r1, [r7, #0]
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f002 f93d 	bl	800aa84 <USBD_CtlError>
      ret = USBD_FAIL;
 800880a:	2303      	movs	r3, #3
 800880c:	75fb      	strb	r3, [r7, #23]
      break;
 800880e:	e002      	b.n	8008816 <USBD_CDC_Setup+0x1ca>
      break;
 8008810:	bf00      	nop
 8008812:	e008      	b.n	8008826 <USBD_CDC_Setup+0x1da>
      break;
 8008814:	bf00      	nop
    }
    break;
 8008816:	e006      	b.n	8008826 <USBD_CDC_Setup+0x1da>

  default:
    USBD_CtlError(pdev, req);
 8008818:	6839      	ldr	r1, [r7, #0]
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f002 f932 	bl	800aa84 <USBD_CtlError>
    ret = USBD_FAIL;
 8008820:	2303      	movs	r3, #3
 8008822:	75fb      	strb	r3, [r7, #23]
    break;
 8008824:	bf00      	nop
  }

  return (uint8_t)ret;
 8008826:	7dfb      	ldrb	r3, [r7, #23]
}
 8008828:	4618      	mov	r0, r3
 800882a:	371c      	adds	r7, #28
 800882c:	46bd      	mov	sp, r7
 800882e:	bd90      	pop	{r4, r7, pc}
 8008830:	2000201c 	.word	0x2000201c
 8008834:	20002020 	.word	0x20002020
 8008838:	20002028 	.word	0x20002028

0800883c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800883c:	b590      	push	{r4, r7, lr}
 800883e:	b087      	sub	sp, #28
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	460b      	mov	r3, r1
 8008846:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8008848:	2300      	movs	r3, #0
 800884a:	613b      	str	r3, [r7, #16]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 8008852:	60fb      	str	r3, [r7, #12]
  uint8_t ep_to_ch = 0;
 8008854:	2300      	movs	r3, #0
 8008856:	75fb      	strb	r3, [r7, #23]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8008858:	2300      	movs	r3, #0
 800885a:	75bb      	strb	r3, [r7, #22]
 800885c:	e00d      	b.n	800887a <USBD_CDC_DataIn+0x3e>
  {
    if (epnum == (CDC_IN_EP[i] & 0x0F))
 800885e:	78fa      	ldrb	r2, [r7, #3]
 8008860:	7dbb      	ldrb	r3, [r7, #22]
 8008862:	4934      	ldr	r1, [pc, #208]	@ (8008934 <USBD_CDC_DataIn+0xf8>)
 8008864:	5ccb      	ldrb	r3, [r1, r3]
 8008866:	f003 030f 	and.w	r3, r3, #15
 800886a:	429a      	cmp	r2, r3
 800886c:	d102      	bne.n	8008874 <USBD_CDC_DataIn+0x38>
    {
      ep_to_ch = i;
 800886e:	7dbb      	ldrb	r3, [r7, #22]
 8008870:	75fb      	strb	r3, [r7, #23]
      break;
 8008872:	e005      	b.n	8008880 <USBD_CDC_DataIn+0x44>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8008874:	7dbb      	ldrb	r3, [r7, #22]
 8008876:	3301      	adds	r3, #1
 8008878:	75bb      	strb	r3, [r7, #22]
 800887a:	7dbb      	ldrb	r3, [r7, #22]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d0ee      	beq.n	800885e <USBD_CDC_DataIn+0x22>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 8008880:	7dfb      	ldrb	r3, [r7, #23]
 8008882:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008886:	fb02 f303 	mul.w	r3, r2, r3
 800888a:	4a2b      	ldr	r2, [pc, #172]	@ (8008938 <USBD_CDC_DataIn+0xfc>)
 800888c:	4413      	add	r3, r2
 800888e:	613b      	str	r3, [r7, #16]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008890:	78fa      	ldrb	r2, [r7, #3]
 8008892:	6879      	ldr	r1, [r7, #4]
 8008894:	4613      	mov	r3, r2
 8008896:	009b      	lsls	r3, r3, #2
 8008898:	4413      	add	r3, r2
 800889a:	009b      	lsls	r3, r3, #2
 800889c:	440b      	add	r3, r1
 800889e:	3318      	adds	r3, #24
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d029      	beq.n	80088fa <USBD_CDC_DataIn+0xbe>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80088a6:	78fa      	ldrb	r2, [r7, #3]
 80088a8:	6879      	ldr	r1, [r7, #4]
 80088aa:	4613      	mov	r3, r2
 80088ac:	009b      	lsls	r3, r3, #2
 80088ae:	4413      	add	r3, r2
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	440b      	add	r3, r1
 80088b4:	3318      	adds	r3, #24
 80088b6:	681a      	ldr	r2, [r3, #0]
 80088b8:	78f9      	ldrb	r1, [r7, #3]
 80088ba:	68f8      	ldr	r0, [r7, #12]
 80088bc:	460b      	mov	r3, r1
 80088be:	00db      	lsls	r3, r3, #3
 80088c0:	440b      	add	r3, r1
 80088c2:	009b      	lsls	r3, r3, #2
 80088c4:	4403      	add	r3, r0
 80088c6:	331c      	adds	r3, #28
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	fbb2 f1f3 	udiv	r1, r2, r3
 80088ce:	fb01 f303 	mul.w	r3, r1, r3
 80088d2:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d110      	bne.n	80088fa <USBD_CDC_DataIn+0xbe>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80088d8:	78fa      	ldrb	r2, [r7, #3]
 80088da:	6879      	ldr	r1, [r7, #4]
 80088dc:	4613      	mov	r3, r2
 80088de:	009b      	lsls	r3, r3, #2
 80088e0:	4413      	add	r3, r2
 80088e2:	009b      	lsls	r3, r3, #2
 80088e4:	440b      	add	r3, r1
 80088e6:	3318      	adds	r3, #24
 80088e8:	2200      	movs	r2, #0
 80088ea:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80088ec:	78f9      	ldrb	r1, [r7, #3]
 80088ee:	2300      	movs	r3, #0
 80088f0:	2200      	movs	r2, #0
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f002 fc17 	bl	800b126 <USBD_LL_Transmit>
 80088f8:	e016      	b.n	8008928 <USBD_CDC_DataIn+0xec>
  }
  else
  {
    hcdc->TxState = 0U;
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	2200      	movs	r2, #0
 80088fe:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt != NULL)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008908:	691b      	ldr	r3, [r3, #16]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d00c      	beq.n	8008928 <USBD_CDC_DataIn+0xec>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt(ep_to_ch, hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008914:	691c      	ldr	r4, [r3, #16]
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	f8d3 1208 	ldr.w	r1, [r3, #520]	@ 0x208
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8008922:	78fb      	ldrb	r3, [r7, #3]
 8008924:	7df8      	ldrb	r0, [r7, #23]
 8008926:	47a0      	blx	r4
    }
  }

  return (uint8_t)USBD_OK;
 8008928:	2300      	movs	r3, #0
}
 800892a:	4618      	mov	r0, r3
 800892c:	371c      	adds	r7, #28
 800892e:	46bd      	mov	sp, r7
 8008930:	bd90      	pop	{r4, r7, pc}
 8008932:	bf00      	nop
 8008934:	20002010 	.word	0x20002010
 8008938:	20002028 	.word	0x20002028

0800893c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b084      	sub	sp, #16
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	460b      	mov	r3, r1
 8008946:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8008948:	2300      	movs	r3, #0
 800894a:	60bb      	str	r3, [r7, #8]
  uint8_t ep_to_ch = 0;
 800894c:	2300      	movs	r3, #0
 800894e:	73fb      	strb	r3, [r7, #15]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8008950:	2300      	movs	r3, #0
 8008952:	73bb      	strb	r3, [r7, #14]
 8008954:	e00b      	b.n	800896e <USBD_CDC_DataOut+0x32>
  {
    if (epnum == CDC_OUT_EP[i])
 8008956:	7bbb      	ldrb	r3, [r7, #14]
 8008958:	4a17      	ldr	r2, [pc, #92]	@ (80089b8 <USBD_CDC_DataOut+0x7c>)
 800895a:	5cd3      	ldrb	r3, [r2, r3]
 800895c:	78fa      	ldrb	r2, [r7, #3]
 800895e:	429a      	cmp	r2, r3
 8008960:	d102      	bne.n	8008968 <USBD_CDC_DataOut+0x2c>
    {
      ep_to_ch = i;
 8008962:	7bbb      	ldrb	r3, [r7, #14]
 8008964:	73fb      	strb	r3, [r7, #15]
      break;
 8008966:	e005      	b.n	8008974 <USBD_CDC_DataOut+0x38>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8008968:	7bbb      	ldrb	r3, [r7, #14]
 800896a:	3301      	adds	r3, #1
 800896c:	73bb      	strb	r3, [r7, #14]
 800896e:	7bbb      	ldrb	r3, [r7, #14]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d0f0      	beq.n	8008956 <USBD_CDC_DataOut+0x1a>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 8008974:	7bfb      	ldrb	r3, [r7, #15]
 8008976:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800897a:	fb02 f303 	mul.w	r3, r2, r3
 800897e:	4a0f      	ldr	r2, [pc, #60]	@ (80089bc <USBD_CDC_DataOut+0x80>)
 8008980:	4413      	add	r3, r2
 8008982:	60bb      	str	r3, [r7, #8]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008984:	78fb      	ldrb	r3, [r7, #3]
 8008986:	4619      	mov	r1, r3
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f002 fc0e 	bl	800b1aa <USBD_LL_GetRxDataSize>
 800898e:	4602      	mov	r2, r0
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Receive(ep_to_ch, hcdc->RxBuffer, &hcdc->RxLength);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800899c:	68db      	ldr	r3, [r3, #12]
 800899e:	68ba      	ldr	r2, [r7, #8]
 80089a0:	f8d2 1204 	ldr.w	r1, [r2, #516]	@ 0x204
 80089a4:	68ba      	ldr	r2, [r7, #8]
 80089a6:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80089aa:	7bf8      	ldrb	r0, [r7, #15]
 80089ac:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80089ae:	2300      	movs	r3, #0
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3710      	adds	r7, #16
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}
 80089b8:	20002014 	.word	0x20002014
 80089bc:	20002028 	.word	0x20002028

080089c0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80089c0:	b590      	push	{r4, r7, lr}
 80089c2:	b085      	sub	sp, #20
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 80089c8:	2300      	movs	r3, #0
 80089ca:	60bb      	str	r3, [r7, #8]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80089cc:	2300      	movs	r3, #0
 80089ce:	73fb      	strb	r3, [r7, #15]
 80089d0:	e02d      	b.n	8008a2e <USBD_CDC_EP0_RxReady+0x6e>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 80089d2:	7bfb      	ldrb	r3, [r7, #15]
 80089d4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80089d8:	fb02 f303 	mul.w	r3, r2, r3
 80089dc:	4a18      	ldr	r2, [pc, #96]	@ (8008a40 <USBD_CDC_EP0_RxReady+0x80>)
 80089de:	4413      	add	r3, r2
 80089e0:	60bb      	str	r3, [r7, #8]

    if (hcdc == NULL)
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d101      	bne.n	80089ec <USBD_CDC_EP0_RxReady+0x2c>
    {
      return (uint8_t)USBD_FAIL;
 80089e8:	2303      	movs	r3, #3
 80089ea:	e024      	b.n	8008a36 <USBD_CDC_EP0_RxReady+0x76>
    }

    if ((pdev->pUserData_CDC_ACM != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d018      	beq.n	8008a28 <USBD_CDC_EP0_RxReady+0x68>
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80089fc:	2bff      	cmp	r3, #255	@ 0xff
 80089fe:	d013      	beq.n	8008a28 <USBD_CDC_EP0_RxReady+0x68>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(i, hcdc->CmdOpCode, (uint8_t *)hcdc->data[i], (uint16_t)hcdc->CmdLength);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008a06:	689c      	ldr	r4, [r3, #8]
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	f893 1200 	ldrb.w	r1, [r3, #512]	@ 0x200
 8008a0e:	7bfb      	ldrb	r3, [r7, #15]
 8008a10:	025b      	lsls	r3, r3, #9
 8008a12:	68ba      	ldr	r2, [r7, #8]
 8008a14:	441a      	add	r2, r3
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8008a1c:	7bf8      	ldrb	r0, [r7, #15]
 8008a1e:	47a0      	blx	r4
      hcdc->CmdOpCode = 0xFFU;
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	22ff      	movs	r2, #255	@ 0xff
 8008a24:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8008a28:	7bfb      	ldrb	r3, [r7, #15]
 8008a2a:	3301      	adds	r3, #1
 8008a2c:	73fb      	strb	r3, [r7, #15]
 8008a2e:	7bfb      	ldrb	r3, [r7, #15]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d0ce      	beq.n	80089d2 <USBD_CDC_EP0_RxReady+0x12>
    }
  }

  return (uint8_t)USBD_OK;
 8008a34:	2300      	movs	r3, #0
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3714      	adds	r7, #20
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd90      	pop	{r4, r7, pc}
 8008a3e:	bf00      	nop
 8008a40:	20002028 	.word	0x20002028

08008a44 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b083      	sub	sp, #12
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	224b      	movs	r2, #75	@ 0x4b
 8008a50:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8008a52:	4b03      	ldr	r3, [pc, #12]	@ (8008a60 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	370c      	adds	r7, #12
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5e:	4770      	bx	lr
 8008a60:	20000178 	.word	0x20000178

08008a64 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b083      	sub	sp, #12
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	224b      	movs	r2, #75	@ 0x4b
 8008a70:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8008a72:	4b03      	ldr	r3, [pc, #12]	@ (8008a80 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	370c      	adds	r7, #12
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr
 8008a80:	2000012c 	.word	0x2000012c

08008a84 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b083      	sub	sp, #12
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	224b      	movs	r2, #75	@ 0x4b
 8008a90:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8008a92:	4b03      	ldr	r3, [pc, #12]	@ (8008aa0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	370c      	adds	r7, #12
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr
 8008aa0:	20000178 	.word	0x20000178

08008aa4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b083      	sub	sp, #12
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	220a      	movs	r2, #10
 8008ab0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008ab2:	4b03      	ldr	r3, [pc, #12]	@ (8008ac0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	370c      	adds	r7, #12
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abe:	4770      	bx	lr
 8008ac0:	200000e4 	.word	0x200000e4

08008ac4 <USBD_CDC_ACM_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_ACM_RegisterInterface(USBD_HandleTypeDef *pdev,
                                       USBD_CDC_ACM_ItfTypeDef *fops)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b083      	sub	sp, #12
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d101      	bne.n	8008ad8 <USBD_CDC_ACM_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008ad4:	2303      	movs	r3, #3
 8008ad6:	e004      	b.n	8008ae2 <USBD_CDC_ACM_RegisterInterface+0x1e>
  }

  pdev->pUserData_CDC_ACM = fops;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	683a      	ldr	r2, [r7, #0]
 8008adc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  return (uint8_t)USBD_OK;
 8008ae0:	2300      	movs	r3, #0
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	370c      	adds	r7, #12
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aec:	4770      	bx	lr
	...

08008af0 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b087      	sub	sp, #28
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	60b9      	str	r1, [r7, #8]
 8008af8:	607a      	str	r2, [r7, #4]
 8008afa:	603b      	str	r3, [r7, #0]
 8008afc:	4603      	mov	r3, r0
 8008afe:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8008b00:	2300      	movs	r3, #0
 8008b02:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 8008b04:	7bfb      	ldrb	r3, [r7, #15]
 8008b06:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008b0a:	fb02 f303 	mul.w	r3, r2, r3
 8008b0e:	4a09      	ldr	r2, [pc, #36]	@ (8008b34 <USBD_CDC_SetTxBuffer+0x44>)
 8008b10:	4413      	add	r3, r2
 8008b12:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	687a      	ldr	r2, [r7, #4]
 8008b18:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	683a      	ldr	r2, [r7, #0]
 8008b20:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008b24:	2300      	movs	r3, #0
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	371c      	adds	r7, #28
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b30:	4770      	bx	lr
 8008b32:	bf00      	nop
 8008b34:	20002028 	.word	0x20002028

08008b38 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b087      	sub	sp, #28
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	4603      	mov	r3, r0
 8008b40:	60b9      	str	r1, [r7, #8]
 8008b42:	607a      	str	r2, [r7, #4]
 8008b44:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8008b46:	2300      	movs	r3, #0
 8008b48:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 8008b4a:	7bfb      	ldrb	r3, [r7, #15]
 8008b4c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008b50:	fb02 f303 	mul.w	r3, r2, r3
 8008b54:	4a06      	ldr	r2, [pc, #24]	@ (8008b70 <USBD_CDC_SetRxBuffer+0x38>)
 8008b56:	4413      	add	r3, r2
 8008b58:	617b      	str	r3, [r7, #20]

  hcdc->RxBuffer = pbuff;
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	687a      	ldr	r2, [r7, #4]
 8008b5e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008b62:	2300      	movs	r3, #0
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	371c      	adds	r7, #28
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6e:	4770      	bx	lr
 8008b70:	20002028 	.word	0x20002028

08008b74 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	6039      	str	r1, [r7, #0]
 8008b7e:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8008b80:	2300      	movs	r3, #0
 8008b82:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008b84:	2301      	movs	r3, #1
 8008b86:	73fb      	strb	r3, [r7, #15]

  hcdc = &CDC_ACM_Class_Data[ch];
 8008b88:	79fb      	ldrb	r3, [r7, #7]
 8008b8a:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008b8e:	fb02 f303 	mul.w	r3, r2, r3
 8008b92:	4a17      	ldr	r2, [pc, #92]	@ (8008bf0 <USBD_CDC_TransmitPacket+0x7c>)
 8008b94:	4413      	add	r3, r2
 8008b96:	60bb      	str	r3, [r7, #8]

  if (hcdc->TxState == 0U)
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d121      	bne.n	8008be6 <USBD_CDC_TransmitPacket+0x72>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	2201      	movs	r2, #1
 8008ba6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP[ch] & 0xFU].total_length = hcdc->TxLength;
 8008baa:	79fb      	ldrb	r3, [r7, #7]
 8008bac:	4a11      	ldr	r2, [pc, #68]	@ (8008bf4 <USBD_CDC_TransmitPacket+0x80>)
 8008bae:	5cd3      	ldrb	r3, [r2, r3]
 8008bb0:	f003 020f 	and.w	r2, r3, #15
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8008bba:	6838      	ldr	r0, [r7, #0]
 8008bbc:	4613      	mov	r3, r2
 8008bbe:	009b      	lsls	r3, r3, #2
 8008bc0:	4413      	add	r3, r2
 8008bc2:	009b      	lsls	r3, r3, #2
 8008bc4:	4403      	add	r3, r0
 8008bc6:	3318      	adds	r3, #24
 8008bc8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP[ch], hcdc->TxBuffer, hcdc->TxLength);
 8008bca:	79fb      	ldrb	r3, [r7, #7]
 8008bcc:	4a09      	ldr	r2, [pc, #36]	@ (8008bf4 <USBD_CDC_TransmitPacket+0x80>)
 8008bce:	5cd1      	ldrb	r1, [r2, r3]
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008bdc:	6838      	ldr	r0, [r7, #0]
 8008bde:	f002 faa2 	bl	800b126 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008be2:	2300      	movs	r3, #0
 8008be4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3710      	adds	r7, #16
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}
 8008bf0:	20002028 	.word	0x20002028
 8008bf4:	20002010 	.word	0x20002010

08008bf8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b084      	sub	sp, #16
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	4603      	mov	r3, r0
 8008c00:	6039      	str	r1, [r7, #0]
 8008c02:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8008c04:	2300      	movs	r3, #0
 8008c06:	60fb      	str	r3, [r7, #12]

  hcdc = &CDC_ACM_Class_Data[ch];
 8008c08:	79fb      	ldrb	r3, [r7, #7]
 8008c0a:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008c0e:	fb02 f303 	mul.w	r3, r2, r3
 8008c12:	4a11      	ldr	r2, [pc, #68]	@ (8008c58 <USBD_CDC_ReceivePacket+0x60>)
 8008c14:	4413      	add	r3, r2
 8008c16:	60fb      	str	r3, [r7, #12]

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	7c1b      	ldrb	r3, [r3, #16]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d10b      	bne.n	8008c38 <USBD_CDC_ReceivePacket+0x40>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 8008c20:	79fb      	ldrb	r3, [r7, #7]
 8008c22:	4a0e      	ldr	r2, [pc, #56]	@ (8008c5c <USBD_CDC_ReceivePacket+0x64>)
 8008c24:	5cd1      	ldrb	r1, [r2, r3]
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008c2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008c30:	6838      	ldr	r0, [r7, #0]
 8008c32:	f002 fa99 	bl	800b168 <USBD_LL_PrepareReceive>
 8008c36:	e009      	b.n	8008c4c <USBD_CDC_ReceivePacket+0x54>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 8008c38:	79fb      	ldrb	r3, [r7, #7]
 8008c3a:	4a08      	ldr	r2, [pc, #32]	@ (8008c5c <USBD_CDC_ReceivePacket+0x64>)
 8008c3c:	5cd1      	ldrb	r1, [r2, r3]
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008c44:	2340      	movs	r3, #64	@ 0x40
 8008c46:	6838      	ldr	r0, [r7, #0]
 8008c48:	f002 fa8e 	bl	800b168 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008c4c:	2300      	movs	r3, #0
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3710      	adds	r7, #16
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
 8008c56:	bf00      	nop
 8008c58:	20002028 	.word	0x20002028
 8008c5c:	20002014 	.word	0x20002014

08008c60 <USBD_Update_CDC_ACM_DESC>:
                              uint8_t com_itf,
                              uint8_t in_ep,
                              uint8_t cmd_ep,
                              uint8_t out_ep,
                              uint8_t str_idx)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b085      	sub	sp, #20
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	4608      	mov	r0, r1
 8008c6a:	4611      	mov	r1, r2
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	4603      	mov	r3, r0
 8008c70:	70fb      	strb	r3, [r7, #3]
 8008c72:	460b      	mov	r3, r1
 8008c74:	70bb      	strb	r3, [r7, #2]
 8008c76:	4613      	mov	r3, r2
 8008c78:	707b      	strb	r3, [r7, #1]
  desc += 9;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	3309      	adds	r3, #9
 8008c7e:	607b      	str	r3, [r7, #4]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8008c80:	2300      	movs	r3, #0
 8008c82:	73fb      	strb	r3, [r7, #15]
 8008c84:	e05b      	b.n	8008d3e <USBD_Update_CDC_ACM_DESC+0xde>
  {
    desc[2] = cmd_itf;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	3302      	adds	r3, #2
 8008c8a:	78fa      	ldrb	r2, [r7, #3]
 8008c8c:	701a      	strb	r2, [r3, #0]
    desc[16] = str_idx;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	3310      	adds	r3, #16
 8008c92:	f897 2020 	ldrb.w	r2, [r7, #32]
 8008c96:	701a      	strb	r2, [r3, #0]
    desc[10] = cmd_itf;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	330a      	adds	r3, #10
 8008c9c:	78fa      	ldrb	r2, [r7, #3]
 8008c9e:	701a      	strb	r2, [r3, #0]
    desc[26] = com_itf;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	331a      	adds	r3, #26
 8008ca4:	78ba      	ldrb	r2, [r7, #2]
 8008ca6:	701a      	strb	r2, [r3, #0]
    desc[34] = cmd_itf;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	3322      	adds	r3, #34	@ 0x22
 8008cac:	78fa      	ldrb	r2, [r7, #3]
 8008cae:	701a      	strb	r2, [r3, #0]
    desc[35] = com_itf;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	3323      	adds	r3, #35	@ 0x23
 8008cb4:	78ba      	ldrb	r2, [r7, #2]
 8008cb6:	701a      	strb	r2, [r3, #0]
    desc[38] = cmd_ep;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	3326      	adds	r3, #38	@ 0x26
 8008cbc:	7e3a      	ldrb	r2, [r7, #24]
 8008cbe:	701a      	strb	r2, [r3, #0]
    desc[45] = com_itf;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	332d      	adds	r3, #45	@ 0x2d
 8008cc4:	78ba      	ldrb	r2, [r7, #2]
 8008cc6:	701a      	strb	r2, [r3, #0]
    desc[54] = out_ep;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	3336      	adds	r3, #54	@ 0x36
 8008ccc:	7f3a      	ldrb	r2, [r7, #28]
 8008cce:	701a      	strb	r2, [r3, #0]
    desc[61] = in_ep;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	333d      	adds	r3, #61	@ 0x3d
 8008cd4:	787a      	ldrb	r2, [r7, #1]
 8008cd6:	701a      	strb	r2, [r3, #0]

    desc += 66;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	3342      	adds	r3, #66	@ 0x42
 8008cdc:	607b      	str	r3, [r7, #4]
    CDC_IN_EP[i] = in_ep;
 8008cde:	7bfb      	ldrb	r3, [r7, #15]
 8008ce0:	491c      	ldr	r1, [pc, #112]	@ (8008d54 <USBD_Update_CDC_ACM_DESC+0xf4>)
 8008ce2:	787a      	ldrb	r2, [r7, #1]
 8008ce4:	54ca      	strb	r2, [r1, r3]
    CDC_OUT_EP[i] = out_ep;
 8008ce6:	7bfb      	ldrb	r3, [r7, #15]
 8008ce8:	491b      	ldr	r1, [pc, #108]	@ (8008d58 <USBD_Update_CDC_ACM_DESC+0xf8>)
 8008cea:	7f3a      	ldrb	r2, [r7, #28]
 8008cec:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_EP[i] = cmd_ep;
 8008cee:	7bfb      	ldrb	r3, [r7, #15]
 8008cf0:	491a      	ldr	r1, [pc, #104]	@ (8008d5c <USBD_Update_CDC_ACM_DESC+0xfc>)
 8008cf2:	7e3a      	ldrb	r2, [r7, #24]
 8008cf4:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_ITF_NBR[i] = cmd_itf;
 8008cf6:	7bfb      	ldrb	r3, [r7, #15]
 8008cf8:	4919      	ldr	r1, [pc, #100]	@ (8008d60 <USBD_Update_CDC_ACM_DESC+0x100>)
 8008cfa:	78fa      	ldrb	r2, [r7, #3]
 8008cfc:	54ca      	strb	r2, [r1, r3]
    CDC_COM_ITF_NBR[i] = com_itf;
 8008cfe:	7bfb      	ldrb	r3, [r7, #15]
 8008d00:	4918      	ldr	r1, [pc, #96]	@ (8008d64 <USBD_Update_CDC_ACM_DESC+0x104>)
 8008d02:	78ba      	ldrb	r2, [r7, #2]
 8008d04:	54ca      	strb	r2, [r1, r3]
    CDC_STR_DESC_IDX[i] = str_idx;
 8008d06:	7bfb      	ldrb	r3, [r7, #15]
 8008d08:	4917      	ldr	r1, [pc, #92]	@ (8008d68 <USBD_Update_CDC_ACM_DESC+0x108>)
 8008d0a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8008d0e:	54ca      	strb	r2, [r1, r3]

    in_ep += 2;
 8008d10:	787b      	ldrb	r3, [r7, #1]
 8008d12:	3302      	adds	r3, #2
 8008d14:	707b      	strb	r3, [r7, #1]
    cmd_ep = in_ep + 1;
 8008d16:	787b      	ldrb	r3, [r7, #1]
 8008d18:	3301      	adds	r3, #1
 8008d1a:	763b      	strb	r3, [r7, #24]
    out_ep++;
 8008d1c:	7f3b      	ldrb	r3, [r7, #28]
 8008d1e:	3301      	adds	r3, #1
 8008d20:	773b      	strb	r3, [r7, #28]
    str_idx++;
 8008d22:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008d26:	3301      	adds	r3, #1
 8008d28:	f887 3020 	strb.w	r3, [r7, #32]

    cmd_itf += 2;
 8008d2c:	78fb      	ldrb	r3, [r7, #3]
 8008d2e:	3302      	adds	r3, #2
 8008d30:	70fb      	strb	r3, [r7, #3]
    com_itf = cmd_itf + 1;
 8008d32:	78fb      	ldrb	r3, [r7, #3]
 8008d34:	3301      	adds	r3, #1
 8008d36:	70bb      	strb	r3, [r7, #2]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8008d38:	7bfb      	ldrb	r3, [r7, #15]
 8008d3a:	3301      	adds	r3, #1
 8008d3c:	73fb      	strb	r3, [r7, #15]
 8008d3e:	7bfb      	ldrb	r3, [r7, #15]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d0a0      	beq.n	8008c86 <USBD_Update_CDC_ACM_DESC+0x26>
  }
}
 8008d44:	bf00      	nop
 8008d46:	bf00      	nop
 8008d48:	3714      	adds	r7, #20
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d50:	4770      	bx	lr
 8008d52:	bf00      	nop
 8008d54:	20002010 	.word	0x20002010
 8008d58:	20002014 	.word	0x20002014
 8008d5c:	20002018 	.word	0x20002018
 8008d60:	2000201c 	.word	0x2000201c
 8008d64:	20002020 	.word	0x20002020
 8008d68:	20002024 	.word	0x20002024

08008d6c <USBD_COMPOSITE_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b082      	sub	sp, #8
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	460b      	mov	r3, r1
 8008d76:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.Init(pdev, cfgidx);
 8008d78:	4b08      	ldr	r3, [pc, #32]	@ (8008d9c <USBD_COMPOSITE_Init+0x30>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	78fa      	ldrb	r2, [r7, #3]
 8008d7e:	4611      	mov	r1, r2
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	4798      	blx	r3
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.Init(pdev, cfgidx);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.Init(pdev, cfgidx);
 8008d84:	4b06      	ldr	r3, [pc, #24]	@ (8008da0 <USBD_COMPOSITE_Init+0x34>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	78fa      	ldrb	r2, [r7, #3]
 8008d8a:	4611      	mov	r1, r2
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.Init(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 8008d90:	2300      	movs	r3, #0
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3708      	adds	r7, #8
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
 8008d9a:	bf00      	nop
 8008d9c:	200000f0 	.word	0x200000f0
 8008da0:	20000210 	.word	0x20000210

08008da4 <USBD_COMPOSITE_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b082      	sub	sp, #8
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	460b      	mov	r3, r1
 8008dae:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.DeInit(pdev, cfgidx);
 8008db0:	4b08      	ldr	r3, [pc, #32]	@ (8008dd4 <USBD_COMPOSITE_DeInit+0x30>)
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	78fa      	ldrb	r2, [r7, #3]
 8008db6:	4611      	mov	r1, r2
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	4798      	blx	r3
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.DeInit(pdev, cfgidx);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.DeInit(pdev, cfgidx);
 8008dbc:	4b06      	ldr	r3, [pc, #24]	@ (8008dd8 <USBD_COMPOSITE_DeInit+0x34>)
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	78fa      	ldrb	r2, [r7, #3]
 8008dc2:	4611      	mov	r1, r2
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.DeInit(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 8008dc8:	2300      	movs	r3, #0
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3708      	adds	r7, #8
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
 8008dd2:	bf00      	nop
 8008dd4:	200000f0 	.word	0x200000f0
 8008dd8:	20000210 	.word	0x20000210

08008ddc <USBD_COMPOSITE_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Setup(USBD_HandleTypeDef *pdev,
                                    USBD_SetupReqTypedef *req)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b084      	sub	sp, #16
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8008de6:	2300      	movs	r3, #0
 8008de8:	73fb      	strb	r3, [r7, #15]
 8008dea:	e019      	b.n	8008e20 <USBD_COMPOSITE_Setup+0x44>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	889b      	ldrh	r3, [r3, #4]
 8008df0:	b2da      	uxtb	r2, r3
 8008df2:	7bfb      	ldrb	r3, [r7, #15]
 8008df4:	4915      	ldr	r1, [pc, #84]	@ (8008e4c <USBD_COMPOSITE_Setup+0x70>)
 8008df6:	5ccb      	ldrb	r3, [r1, r3]
 8008df8:	429a      	cmp	r2, r3
 8008dfa:	d007      	beq.n	8008e0c <USBD_COMPOSITE_Setup+0x30>
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	889b      	ldrh	r3, [r3, #4]
 8008e00:	b2da      	uxtb	r2, r3
 8008e02:	7bfb      	ldrb	r3, [r7, #15]
 8008e04:	4912      	ldr	r1, [pc, #72]	@ (8008e50 <USBD_COMPOSITE_Setup+0x74>)
 8008e06:	5ccb      	ldrb	r3, [r1, r3]
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	d106      	bne.n	8008e1a <USBD_COMPOSITE_Setup+0x3e>
    {
      return USBD_CDC_ACM.Setup(pdev, req);
 8008e0c:	4b11      	ldr	r3, [pc, #68]	@ (8008e54 <USBD_COMPOSITE_Setup+0x78>)
 8008e0e:	689b      	ldr	r3, [r3, #8]
 8008e10:	6839      	ldr	r1, [r7, #0]
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	4798      	blx	r3
 8008e16:	4603      	mov	r3, r0
 8008e18:	e014      	b.n	8008e44 <USBD_COMPOSITE_Setup+0x68>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8008e1a:	7bfb      	ldrb	r3, [r7, #15]
 8008e1c:	3301      	adds	r3, #1
 8008e1e:	73fb      	strb	r3, [r7, #15]
 8008e20:	7bfb      	ldrb	r3, [r7, #15]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d0e2      	beq.n	8008dec <USBD_COMPOSITE_Setup+0x10>
  {
    return USBD_HID_KEYBOARD.Setup(pdev, req);
  }
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (LOBYTE(req->wIndex) == CUSTOM_HID_ITF_NBR)
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	889b      	ldrh	r3, [r3, #4]
 8008e2a:	b2da      	uxtb	r2, r3
 8008e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8008e58 <USBD_COMPOSITE_Setup+0x7c>)
 8008e2e:	781b      	ldrb	r3, [r3, #0]
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d106      	bne.n	8008e42 <USBD_COMPOSITE_Setup+0x66>
  {
    return USBD_HID_CUSTOM.Setup(pdev, req);
 8008e34:	4b09      	ldr	r3, [pc, #36]	@ (8008e5c <USBD_COMPOSITE_Setup+0x80>)
 8008e36:	689b      	ldr	r3, [r3, #8]
 8008e38:	6839      	ldr	r1, [r7, #0]
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	4798      	blx	r3
 8008e3e:	4603      	mov	r3, r0
 8008e40:	e000      	b.n	8008e44 <USBD_COMPOSITE_Setup+0x68>
  {
    USBD_PRNT.Setup(pdev, req);
  }
#endif

  return USBD_FAIL;
 8008e42:	2303      	movs	r3, #3
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3710      	adds	r7, #16
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}
 8008e4c:	2000201c 	.word	0x2000201c
 8008e50:	20002020 	.word	0x20002020
 8008e54:	200000f0 	.word	0x200000f0
 8008e58:	2000235c 	.word	0x2000235c
 8008e5c:	20000210 	.word	0x20000210

08008e60 <USBD_COMPOSITE_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b084      	sub	sp, #16
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	460b      	mov	r3, r1
 8008e6a:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	73fb      	strb	r3, [r7, #15]
 8008e70:	e01a      	b.n	8008ea8 <USBD_COMPOSITE_DataIn+0x48>
  {
    if (epnum == (CDC_IN_EP[i] & 0x7F) || epnum == (CDC_CMD_EP[i] & 0x7F))
 8008e72:	78fa      	ldrb	r2, [r7, #3]
 8008e74:	7bfb      	ldrb	r3, [r7, #15]
 8008e76:	4918      	ldr	r1, [pc, #96]	@ (8008ed8 <USBD_COMPOSITE_DataIn+0x78>)
 8008e78:	5ccb      	ldrb	r3, [r1, r3]
 8008e7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	d007      	beq.n	8008e92 <USBD_COMPOSITE_DataIn+0x32>
 8008e82:	78fa      	ldrb	r2, [r7, #3]
 8008e84:	7bfb      	ldrb	r3, [r7, #15]
 8008e86:	4915      	ldr	r1, [pc, #84]	@ (8008edc <USBD_COMPOSITE_DataIn+0x7c>)
 8008e88:	5ccb      	ldrb	r3, [r1, r3]
 8008e8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	d107      	bne.n	8008ea2 <USBD_COMPOSITE_DataIn+0x42>
    {
      return USBD_CDC_ACM.DataIn(pdev, epnum);
 8008e92:	4b13      	ldr	r3, [pc, #76]	@ (8008ee0 <USBD_COMPOSITE_DataIn+0x80>)
 8008e94:	695b      	ldr	r3, [r3, #20]
 8008e96:	78fa      	ldrb	r2, [r7, #3]
 8008e98:	4611      	mov	r1, r2
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	4798      	blx	r3
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	e015      	b.n	8008ece <USBD_COMPOSITE_DataIn+0x6e>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8008ea2:	7bfb      	ldrb	r3, [r7, #15]
 8008ea4:	3301      	adds	r3, #1
 8008ea6:	73fb      	strb	r3, [r7, #15]
 8008ea8:	7bfb      	ldrb	r3, [r7, #15]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d0e1      	beq.n	8008e72 <USBD_COMPOSITE_DataIn+0x12>
  {
    return USBD_HID_KEYBOARD.DataIn(pdev, epnum);
  }
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (epnum == (CUSTOM_HID_IN_EP & 0x7F))
 8008eae:	78fa      	ldrb	r2, [r7, #3]
 8008eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8008ee4 <USBD_COMPOSITE_DataIn+0x84>)
 8008eb2:	781b      	ldrb	r3, [r3, #0]
 8008eb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d107      	bne.n	8008ecc <USBD_COMPOSITE_DataIn+0x6c>
  {
    return USBD_HID_CUSTOM.DataIn(pdev, epnum);
 8008ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8008ee8 <USBD_COMPOSITE_DataIn+0x88>)
 8008ebe:	695b      	ldr	r3, [r3, #20]
 8008ec0:	78fa      	ldrb	r2, [r7, #3]
 8008ec2:	4611      	mov	r1, r2
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	4798      	blx	r3
 8008ec8:	4603      	mov	r3, r0
 8008eca:	e000      	b.n	8008ece <USBD_COMPOSITE_DataIn+0x6e>
  {
    USBD_PRNT.DataIn(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 8008ecc:	2303      	movs	r3, #3
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3710      	adds	r7, #16
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}
 8008ed6:	bf00      	nop
 8008ed8:	20002010 	.word	0x20002010
 8008edc:	20002018 	.word	0x20002018
 8008ee0:	200000f0 	.word	0x200000f0
 8008ee4:	2000020e 	.word	0x2000020e
 8008ee8:	20000210 	.word	0x20000210

08008eec <USBD_COMPOSITE_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b082      	sub	sp, #8
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.EP0_RxReady(pdev);
 8008ef4:	4b06      	ldr	r3, [pc, #24]	@ (8008f10 <USBD_COMPOSITE_EP0_RxReady+0x24>)
 8008ef6:	691b      	ldr	r3, [r3, #16]
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	4798      	blx	r3
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.EP0_RxReady(pdev);
 8008efc:	4b05      	ldr	r3, [pc, #20]	@ (8008f14 <USBD_COMPOSITE_EP0_RxReady+0x28>)
 8008efe:	691b      	ldr	r3, [r3, #16]
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	4798      	blx	r3
  USBD_DFU.EP0_RxReady(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8008f04:	2300      	movs	r3, #0
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3708      	adds	r7, #8
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}
 8008f0e:	bf00      	nop
 8008f10:	200000f0 	.word	0x200000f0
 8008f14:	20000210 	.word	0x20000210

08008f18 <USBD_COMPOSITE_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b083      	sub	sp, #12
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  USBD_DFU.EP0_TxSent(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8008f20:	2300      	movs	r3, #0
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	370c      	adds	r7, #12
 8008f26:	46bd      	mov	sp, r7
 8008f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2c:	4770      	bx	lr

08008f2e <USBD_COMPOSITE_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_SOF(USBD_HandleTypeDef *pdev)
{
 8008f2e:	b480      	push	{r7}
 8008f30:	b083      	sub	sp, #12
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	6078      	str	r0, [r7, #4]
  USBD_DFU.SOF(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8008f36:	2300      	movs	r3, #0
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	370c      	adds	r7, #12
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f42:	4770      	bx	lr

08008f44 <USBD_COMPOSITE_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b083      	sub	sp, #12
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	460b      	mov	r3, r1
 8008f4e:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8008f50:	2300      	movs	r3, #0
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	370c      	adds	r7, #12
 8008f56:	46bd      	mov	sp, r7
 8008f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5c:	4770      	bx	lr

08008f5e <USBD_COMPOSITE_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008f5e:	b480      	push	{r7}
 8008f60:	b083      	sub	sp, #12
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	6078      	str	r0, [r7, #4]
 8008f66:	460b      	mov	r3, r1
 8008f68:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8008f6a:	2300      	movs	r3, #0
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	370c      	adds	r7, #12
 8008f70:	46bd      	mov	sp, r7
 8008f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f76:	4770      	bx	lr

08008f78 <USBD_COMPOSITE_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b084      	sub	sp, #16
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
 8008f80:	460b      	mov	r3, r1
 8008f82:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8008f84:	2300      	movs	r3, #0
 8008f86:	73fb      	strb	r3, [r7, #15]
 8008f88:	e010      	b.n	8008fac <USBD_COMPOSITE_DataOut+0x34>
  {
    if (epnum == CDC_OUT_EP[i])
 8008f8a:	7bfb      	ldrb	r3, [r7, #15]
 8008f8c:	4a12      	ldr	r2, [pc, #72]	@ (8008fd8 <USBD_COMPOSITE_DataOut+0x60>)
 8008f8e:	5cd3      	ldrb	r3, [r2, r3]
 8008f90:	78fa      	ldrb	r2, [r7, #3]
 8008f92:	429a      	cmp	r2, r3
 8008f94:	d107      	bne.n	8008fa6 <USBD_COMPOSITE_DataOut+0x2e>
    {
      return USBD_CDC_ACM.DataOut(pdev, epnum);
 8008f96:	4b11      	ldr	r3, [pc, #68]	@ (8008fdc <USBD_COMPOSITE_DataOut+0x64>)
 8008f98:	699b      	ldr	r3, [r3, #24]
 8008f9a:	78fa      	ldrb	r2, [r7, #3]
 8008f9c:	4611      	mov	r1, r2
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	4798      	blx	r3
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	e013      	b.n	8008fce <USBD_COMPOSITE_DataOut+0x56>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8008fa6:	7bfb      	ldrb	r3, [r7, #15]
 8008fa8:	3301      	adds	r3, #1
 8008faa:	73fb      	strb	r3, [r7, #15]
 8008fac:	7bfb      	ldrb	r3, [r7, #15]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d0eb      	beq.n	8008f8a <USBD_COMPOSITE_DataOut+0x12>
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (epnum == CUSTOM_HID_OUT_EP)
 8008fb2:	4b0b      	ldr	r3, [pc, #44]	@ (8008fe0 <USBD_COMPOSITE_DataOut+0x68>)
 8008fb4:	781b      	ldrb	r3, [r3, #0]
 8008fb6:	78fa      	ldrb	r2, [r7, #3]
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	d107      	bne.n	8008fcc <USBD_COMPOSITE_DataOut+0x54>
  {
    return USBD_HID_CUSTOM.DataOut(pdev, epnum);
 8008fbc:	4b09      	ldr	r3, [pc, #36]	@ (8008fe4 <USBD_COMPOSITE_DataOut+0x6c>)
 8008fbe:	699b      	ldr	r3, [r3, #24]
 8008fc0:	78fa      	ldrb	r2, [r7, #3]
 8008fc2:	4611      	mov	r1, r2
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	4798      	blx	r3
 8008fc8:	4603      	mov	r3, r0
 8008fca:	e000      	b.n	8008fce <USBD_COMPOSITE_DataOut+0x56>
  {
    USBD_PRNT.DataOut(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 8008fcc:	2303      	movs	r3, #3
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3710      	adds	r7, #16
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
 8008fd6:	bf00      	nop
 8008fd8:	20002014 	.word	0x20002014
 8008fdc:	200000f0 	.word	0x200000f0
 8008fe0:	2000020f 	.word	0x2000020f
 8008fe4:	20000210 	.word	0x20000210

08008fe8 <USBD_COMPOSITE_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetHSCfgDesc(uint16_t *length)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b083      	sub	sp, #12
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	226b      	movs	r2, #107	@ 0x6b
 8008ff4:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 8008ff6:	4b03      	ldr	r3, [pc, #12]	@ (8009004 <USBD_COMPOSITE_GetHSCfgDesc+0x1c>)
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	370c      	adds	r7, #12
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr
 8009004:	200022b0 	.word	0x200022b0

08009008 <USBD_COMPOSITE_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetFSCfgDesc(uint16_t *length)
{
 8009008:	b480      	push	{r7}
 800900a:	b083      	sub	sp, #12
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	226b      	movs	r2, #107	@ 0x6b
 8009014:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
 8009016:	4b03      	ldr	r3, [pc, #12]	@ (8009024 <USBD_COMPOSITE_GetFSCfgDesc+0x1c>)
}
 8009018:	4618      	mov	r0, r3
 800901a:	370c      	adds	r7, #12
 800901c:	46bd      	mov	sp, r7
 800901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009022:	4770      	bx	lr
 8009024:	20002244 	.word	0x20002244

08009028 <USBD_COMPOSITE_GetOtherSpeedCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009028:	b480      	push	{r7}
 800902a:	b083      	sub	sp, #12
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
#if (USBD_USE_HS == 1)
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
#else
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	226b      	movs	r2, #107	@ 0x6b
 8009034:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 8009036:	4b03      	ldr	r3, [pc, #12]	@ (8009044 <USBD_COMPOSITE_GetOtherSpeedCfgDesc+0x1c>)
#endif
}
 8009038:	4618      	mov	r0, r3
 800903a:	370c      	adds	r7, #12
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr
 8009044:	200022b0 	.word	0x200022b0

08009048 <USBD_COMPOSITE_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_COMPOSITE_GetDeviceQualifierDesc(uint16_t *length)
{
 8009048:	b480      	push	{r7}
 800904a:	b083      	sub	sp, #12
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_DeviceQualifierDesc);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	220a      	movs	r2, #10
 8009054:	801a      	strh	r2, [r3, #0]
  return USBD_COMPOSITE_DeviceQualifierDesc;
 8009056:	4b03      	ldr	r3, [pc, #12]	@ (8009064 <USBD_COMPOSITE_GetDeviceQualifierDesc+0x1c>)
}
 8009058:	4618      	mov	r0, r3
 800905a:	370c      	adds	r7, #12
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	4770      	bx	lr
 8009064:	20000204 	.word	0x20000204

08009068 <USBD_COMPOSITE_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_COMPOSITE_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b08a      	sub	sp, #40	@ 0x28
 800906c:	af00      	add	r7, sp, #0
 800906e:	60f8      	str	r0, [r7, #12]
 8009070:	460b      	mov	r3, r1
 8009072:	607a      	str	r2, [r7, #4]
 8009074:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[64];

  /* Check if the requested string interface is supported */
  if (index <= USBD_Track_String_Index)
 8009076:	4b20      	ldr	r3, [pc, #128]	@ (80090f8 <USBD_COMPOSITE_GetUsrStringDesc+0x90>)
 8009078:	781b      	ldrb	r3, [r3, #0]
 800907a:	7afa      	ldrb	r2, [r7, #11]
 800907c:	429a      	cmp	r2, r3
 800907e:	d836      	bhi.n	80090ee <USBD_COMPOSITE_GetUsrStringDesc+0x86>
  {
#if (USBD_USE_CDC_ACM == 1)
    char str_buffer[16] = "";
 8009080:	2300      	movs	r3, #0
 8009082:	617b      	str	r3, [r7, #20]
 8009084:	f107 0318 	add.w	r3, r7, #24
 8009088:	2200      	movs	r2, #0
 800908a:	601a      	str	r2, [r3, #0]
 800908c:	605a      	str	r2, [r3, #4]
 800908e:	609a      	str	r2, [r3, #8]
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8009090:	2300      	movs	r3, #0
 8009092:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009096:	e01a      	b.n	80090ce <USBD_COMPOSITE_GetUsrStringDesc+0x66>
    {
      if (index == CDC_STR_DESC_IDX[i])
 8009098:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800909c:	4a17      	ldr	r2, [pc, #92]	@ (80090fc <USBD_COMPOSITE_GetUsrStringDesc+0x94>)
 800909e:	5cd3      	ldrb	r3, [r2, r3]
 80090a0:	7afa      	ldrb	r2, [r7, #11]
 80090a2:	429a      	cmp	r2, r3
 80090a4:	d10e      	bne.n	80090c4 <USBD_COMPOSITE_GetUsrStringDesc+0x5c>
      {
        snprintf(str_buffer, sizeof(str_buffer), CDC_ACM_STR_DESC, i);
 80090a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80090aa:	f107 0014 	add.w	r0, r7, #20
 80090ae:	4a14      	ldr	r2, [pc, #80]	@ (8009100 <USBD_COMPOSITE_GetUsrStringDesc+0x98>)
 80090b0:	2110      	movs	r1, #16
 80090b2:	f002 f8b9 	bl	800b228 <sniprintf>
        USBD_GetString((uint8_t *)str_buffer, USBD_StrDesc, length);
 80090b6:	f107 0314 	add.w	r3, r7, #20
 80090ba:	687a      	ldr	r2, [r7, #4]
 80090bc:	4911      	ldr	r1, [pc, #68]	@ (8009104 <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 80090be:	4618      	mov	r0, r3
 80090c0:	f001 fcf1 	bl	800aaa6 <USBD_GetString>
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 80090c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80090c8:	3301      	adds	r3, #1
 80090ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80090ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d0e0      	beq.n	8009098 <USBD_COMPOSITE_GetUsrStringDesc+0x30>
    {
      USBD_GetString((uint8_t *)HID_KEYBOARD_STR_DESC, USBD_StrDesc, length);
    }
#endif
#if (USBD_USE_HID_CUSTOM == 1)
    if (index == CUSTOM_HID_STR_DESC_IDX)
 80090d6:	4b0c      	ldr	r3, [pc, #48]	@ (8009108 <USBD_COMPOSITE_GetUsrStringDesc+0xa0>)
 80090d8:	781b      	ldrb	r3, [r3, #0]
 80090da:	7afa      	ldrb	r2, [r7, #11]
 80090dc:	429a      	cmp	r2, r3
 80090de:	d104      	bne.n	80090ea <USBD_COMPOSITE_GetUsrStringDesc+0x82>
    {
      USBD_GetString((uint8_t *)CUSTOM_HID_STR_DESC, USBD_StrDesc, length);
 80090e0:	687a      	ldr	r2, [r7, #4]
 80090e2:	4908      	ldr	r1, [pc, #32]	@ (8009104 <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 80090e4:	4809      	ldr	r0, [pc, #36]	@ (800910c <USBD_COMPOSITE_GetUsrStringDesc+0xa4>)
 80090e6:	f001 fcde 	bl	800aaa6 <USBD_GetString>
    if (index == PRINTER_STR_DESC_IDX)
    {
      USBD_GetString((uint8_t *)PRNT_STR_DESC, USBD_StrDesc, length);
    }
#endif
    return USBD_StrDesc;
 80090ea:	4b06      	ldr	r3, [pc, #24]	@ (8009104 <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 80090ec:	e000      	b.n	80090f0 <USBD_COMPOSITE_GetUsrStringDesc+0x88>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 80090ee:	2300      	movs	r3, #0
  }
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3728      	adds	r7, #40	@ 0x28
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}
 80090f8:	20000200 	.word	0x20000200
 80090fc:	20002024 	.word	0x20002024
 8009100:	0800bbe4 	.word	0x0800bbe4
 8009104:	2000231c 	.word	0x2000231c
 8009108:	2000235d 	.word	0x2000235d
 800910c:	0800bbf4 	.word	0x0800bbf4

08009110 <USBD_COMPOSITE_Mount_Class>:
#endif

void USBD_COMPOSITE_Mount_Class(void)
{
 8009110:	b590      	push	{r4, r7, lr}
 8009112:	b089      	sub	sp, #36	@ 0x24
 8009114:	af04      	add	r7, sp, #16
  uint16_t len = 0;
 8009116:	2300      	movs	r3, #0
 8009118:	80bb      	strh	r3, [r7, #4]
  uint8_t *ptr = NULL;
 800911a:	2300      	movs	r3, #0
 800911c:	60fb      	str	r3, [r7, #12]

  uint8_t in_ep_track = 0x81;
 800911e:	2381      	movs	r3, #129	@ 0x81
 8009120:	72fb      	strb	r3, [r7, #11]
  uint8_t out_ep_track = 0x01;
 8009122:	2301      	movs	r3, #1
 8009124:	72bb      	strb	r3, [r7, #10]
  uint8_t interface_no_track = 0x00;
 8009126:	2300      	movs	r3, #0
 8009128:	727b      	strb	r3, [r7, #9]
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_HID_CUSTOM == 1)
  ptr = USBD_HID_CUSTOM.GetFSConfigDescriptor(&len);
 800912a:	4b74      	ldr	r3, [pc, #464]	@ (80092fc <USBD_COMPOSITE_Mount_Class+0x1ec>)
 800912c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800912e:	1d3a      	adds	r2, r7, #4
 8009130:	4610      	mov	r0, r2
 8009132:	4798      	blx	r3
 8009134:	60f8      	str	r0, [r7, #12]
  USBD_Update_HID_Custom_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 8009136:	4b72      	ldr	r3, [pc, #456]	@ (8009300 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8009138:	781b      	ldrb	r3, [r3, #0]
 800913a:	7ab8      	ldrb	r0, [r7, #10]
 800913c:	7afa      	ldrb	r2, [r7, #11]
 800913e:	7a79      	ldrb	r1, [r7, #9]
 8009140:	9300      	str	r3, [sp, #0]
 8009142:	4603      	mov	r3, r0
 8009144:	68f8      	ldr	r0, [r7, #12]
 8009146:	f000 fbcd 	bl	80098e4 <USBD_Update_HID_Custom_DESC>
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_HID_CUSTOM_DESC, ptr + 0x09, len - 0x09);
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	3309      	adds	r3, #9
 800914e:	88ba      	ldrh	r2, [r7, #4]
 8009150:	3a09      	subs	r2, #9
 8009152:	4619      	mov	r1, r3
 8009154:	486b      	ldr	r0, [pc, #428]	@ (8009304 <USBD_COMPOSITE_Mount_Class+0x1f4>)
 8009156:	f002 f8cf 	bl	800b2f8 <memcpy>

  ptr = USBD_HID_CUSTOM.GetHSConfigDescriptor(&len);
 800915a:	4b68      	ldr	r3, [pc, #416]	@ (80092fc <USBD_COMPOSITE_Mount_Class+0x1ec>)
 800915c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800915e:	1d3a      	adds	r2, r7, #4
 8009160:	4610      	mov	r0, r2
 8009162:	4798      	blx	r3
 8009164:	60f8      	str	r0, [r7, #12]
  USBD_Update_HID_Custom_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 8009166:	4b66      	ldr	r3, [pc, #408]	@ (8009300 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8009168:	781b      	ldrb	r3, [r3, #0]
 800916a:	7ab8      	ldrb	r0, [r7, #10]
 800916c:	7afa      	ldrb	r2, [r7, #11]
 800916e:	7a79      	ldrb	r1, [r7, #9]
 8009170:	9300      	str	r3, [sp, #0]
 8009172:	4603      	mov	r3, r0
 8009174:	68f8      	ldr	r0, [r7, #12]
 8009176:	f000 fbb5 	bl	80098e4 <USBD_Update_HID_Custom_DESC>
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_HID_CUSTOM_DESC, ptr + 0x09, len - 0x09);
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	3309      	adds	r3, #9
 800917e:	88ba      	ldrh	r2, [r7, #4]
 8009180:	3a09      	subs	r2, #9
 8009182:	4619      	mov	r1, r3
 8009184:	4860      	ldr	r0, [pc, #384]	@ (8009308 <USBD_COMPOSITE_Mount_Class+0x1f8>)
 8009186:	f002 f8b7 	bl	800b2f8 <memcpy>

  in_ep_track += 1;
 800918a:	7afb      	ldrb	r3, [r7, #11]
 800918c:	3301      	adds	r3, #1
 800918e:	72fb      	strb	r3, [r7, #11]
  out_ep_track += 1;
 8009190:	7abb      	ldrb	r3, [r7, #10]
 8009192:	3301      	adds	r3, #1
 8009194:	72bb      	strb	r3, [r7, #10]
  interface_no_track += 1;
 8009196:	7a7b      	ldrb	r3, [r7, #9]
 8009198:	3301      	adds	r3, #1
 800919a:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += 1;
 800919c:	4b58      	ldr	r3, [pc, #352]	@ (8009300 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800919e:	781b      	ldrb	r3, [r3, #0]
 80091a0:	3301      	adds	r3, #1
 80091a2:	b2da      	uxtb	r2, r3
 80091a4:	4b56      	ldr	r3, [pc, #344]	@ (8009300 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 80091a6:	701a      	strb	r2, [r3, #0]
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_CDC_ACM == 1)
  ptr = USBD_CDC_ACM.GetFSConfigDescriptor(&len);
 80091a8:	4b58      	ldr	r3, [pc, #352]	@ (800930c <USBD_COMPOSITE_Mount_Class+0x1fc>)
 80091aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091ac:	1d3a      	adds	r2, r7, #4
 80091ae:	4610      	mov	r0, r2
 80091b0:	4798      	blx	r3
 80091b2:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 80091b4:	7a7b      	ldrb	r3, [r7, #9]
 80091b6:	3301      	adds	r3, #1
 80091b8:	b2d8      	uxtb	r0, r3
 80091ba:	7afb      	ldrb	r3, [r7, #11]
 80091bc:	3301      	adds	r3, #1
 80091be:	b2db      	uxtb	r3, r3
 80091c0:	4a4f      	ldr	r2, [pc, #316]	@ (8009300 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 80091c2:	7812      	ldrb	r2, [r2, #0]
 80091c4:	7afc      	ldrb	r4, [r7, #11]
 80091c6:	7a79      	ldrb	r1, [r7, #9]
 80091c8:	9202      	str	r2, [sp, #8]
 80091ca:	7aba      	ldrb	r2, [r7, #10]
 80091cc:	9201      	str	r2, [sp, #4]
 80091ce:	9300      	str	r3, [sp, #0]
 80091d0:	4623      	mov	r3, r4
 80091d2:	4602      	mov	r2, r0
 80091d4:	68f8      	ldr	r0, [r7, #12]
 80091d6:	f7ff fd43 	bl	8008c60 <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	3309      	adds	r3, #9
 80091de:	88ba      	ldrh	r2, [r7, #4]
 80091e0:	3a09      	subs	r2, #9
 80091e2:	4619      	mov	r1, r3
 80091e4:	484a      	ldr	r0, [pc, #296]	@ (8009310 <USBD_COMPOSITE_Mount_Class+0x200>)
 80091e6:	f002 f887 	bl	800b2f8 <memcpy>

  ptr = USBD_CDC_ACM.GetHSConfigDescriptor(&len);
 80091ea:	4b48      	ldr	r3, [pc, #288]	@ (800930c <USBD_COMPOSITE_Mount_Class+0x1fc>)
 80091ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091ee:	1d3a      	adds	r2, r7, #4
 80091f0:	4610      	mov	r0, r2
 80091f2:	4798      	blx	r3
 80091f4:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 80091f6:	7a7b      	ldrb	r3, [r7, #9]
 80091f8:	3301      	adds	r3, #1
 80091fa:	b2d8      	uxtb	r0, r3
 80091fc:	7afb      	ldrb	r3, [r7, #11]
 80091fe:	3301      	adds	r3, #1
 8009200:	b2db      	uxtb	r3, r3
 8009202:	4a3f      	ldr	r2, [pc, #252]	@ (8009300 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8009204:	7812      	ldrb	r2, [r2, #0]
 8009206:	7afc      	ldrb	r4, [r7, #11]
 8009208:	7a79      	ldrb	r1, [r7, #9]
 800920a:	9202      	str	r2, [sp, #8]
 800920c:	7aba      	ldrb	r2, [r7, #10]
 800920e:	9201      	str	r2, [sp, #4]
 8009210:	9300      	str	r3, [sp, #0]
 8009212:	4623      	mov	r3, r4
 8009214:	4602      	mov	r2, r0
 8009216:	68f8      	ldr	r0, [r7, #12]
 8009218:	f7ff fd22 	bl	8008c60 <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	3309      	adds	r3, #9
 8009220:	88ba      	ldrh	r2, [r7, #4]
 8009222:	3a09      	subs	r2, #9
 8009224:	4619      	mov	r1, r3
 8009226:	483b      	ldr	r0, [pc, #236]	@ (8009314 <USBD_COMPOSITE_Mount_Class+0x204>)
 8009228:	f002 f866 	bl	800b2f8 <memcpy>

  in_ep_track += 2 * USBD_CDC_ACM_COUNT;
 800922c:	7afb      	ldrb	r3, [r7, #11]
 800922e:	3302      	adds	r3, #2
 8009230:	72fb      	strb	r3, [r7, #11]
  out_ep_track += 1 * USBD_CDC_ACM_COUNT;
 8009232:	7abb      	ldrb	r3, [r7, #10]
 8009234:	3301      	adds	r3, #1
 8009236:	72bb      	strb	r3, [r7, #10]
  interface_no_track += 2 * USBD_CDC_ACM_COUNT;
 8009238:	7a7b      	ldrb	r3, [r7, #9]
 800923a:	3302      	adds	r3, #2
 800923c:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += USBD_CDC_ACM_COUNT;
 800923e:	4b30      	ldr	r3, [pc, #192]	@ (8009300 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8009240:	781b      	ldrb	r3, [r3, #0]
 8009242:	3301      	adds	r3, #1
 8009244:	b2da      	uxtb	r2, r3
 8009246:	4b2e      	ldr	r3, [pc, #184]	@ (8009300 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8009248:	701a      	strb	r2, [r3, #0]
#endif

  uint16_t CFG_SIZE = sizeof(USBD_COMPOSITE_CFG_DESC_t);
 800924a:	236b      	movs	r3, #107	@ 0x6b
 800924c:	80fb      	strh	r3, [r7, #6]
  ptr = USBD_COMPOSITE_HSCfgDesc.CONFIG_DESC;
 800924e:	4b32      	ldr	r3, [pc, #200]	@ (8009318 <USBD_COMPOSITE_Mount_Class+0x208>)
 8009250:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	2209      	movs	r2, #9
 8009256:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	3301      	adds	r3, #1
 800925c:	2202      	movs	r2, #2
 800925e:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	3302      	adds	r3, #2
 8009264:	88fa      	ldrh	r2, [r7, #6]
 8009266:	b2d2      	uxtb	r2, r2
 8009268:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 800926a:	88fb      	ldrh	r3, [r7, #6]
 800926c:	0a1b      	lsrs	r3, r3, #8
 800926e:	b29a      	uxth	r2, r3
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	3303      	adds	r3, #3
 8009274:	b2d2      	uxtb	r2, r2
 8009276:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	3304      	adds	r3, #4
 800927c:	7a7a      	ldrb	r2, [r7, #9]
 800927e:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	3305      	adds	r3, #5
 8009284:	2201      	movs	r2, #1
 8009286:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	3306      	adds	r3, #6
 800928c:	2200      	movs	r2, #0
 800928e:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	3307      	adds	r3, #7
 8009294:	22c0      	movs	r2, #192	@ 0xc0
 8009296:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	3308      	adds	r3, #8
 800929c:	2232      	movs	r2, #50	@ 0x32
 800929e:	701a      	strb	r2, [r3, #0]

  ptr = USBD_COMPOSITE_FSCfgDesc.CONFIG_DESC;
 80092a0:	4b1e      	ldr	r3, [pc, #120]	@ (800931c <USBD_COMPOSITE_Mount_Class+0x20c>)
 80092a2:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2209      	movs	r2, #9
 80092a8:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	3301      	adds	r3, #1
 80092ae:	2202      	movs	r2, #2
 80092b0:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	3302      	adds	r3, #2
 80092b6:	88fa      	ldrh	r2, [r7, #6]
 80092b8:	b2d2      	uxtb	r2, r2
 80092ba:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 80092bc:	88fb      	ldrh	r3, [r7, #6]
 80092be:	0a1b      	lsrs	r3, r3, #8
 80092c0:	b29a      	uxth	r2, r3
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	3303      	adds	r3, #3
 80092c6:	b2d2      	uxtb	r2, r2
 80092c8:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	3304      	adds	r3, #4
 80092ce:	7a7a      	ldrb	r2, [r7, #9]
 80092d0:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	3305      	adds	r3, #5
 80092d6:	2201      	movs	r2, #1
 80092d8:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	3306      	adds	r3, #6
 80092de:	2200      	movs	r2, #0
 80092e0:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	3307      	adds	r3, #7
 80092e6:	22c0      	movs	r2, #192	@ 0xc0
 80092e8:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	3308      	adds	r3, #8
 80092ee:	2232      	movs	r2, #50	@ 0x32
 80092f0:	701a      	strb	r2, [r3, #0]

  (void)out_ep_track;
  (void)in_ep_track;
}
 80092f2:	bf00      	nop
 80092f4:	3714      	adds	r7, #20
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd90      	pop	{r4, r7, pc}
 80092fa:	bf00      	nop
 80092fc:	20000210 	.word	0x20000210
 8009300:	20000200 	.word	0x20000200
 8009304:	2000224d 	.word	0x2000224d
 8009308:	200022b9 	.word	0x200022b9
 800930c:	200000f0 	.word	0x200000f0
 8009310:	2000226d 	.word	0x2000226d
 8009314:	200022d9 	.word	0x200022d9
 8009318:	200022b0 	.word	0x200022b0
 800931c:	20002244 	.word	0x20002244

08009320 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b084      	sub	sp, #16
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
 8009328:	460b      	mov	r3, r1
 800932a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = &CUSTOM_HID_Instance;
 800932c:	4b43      	ldr	r3, [pc, #268]	@ (800943c <USBD_CUSTOM_HID_Init+0x11c>)
 800932e:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d105      	bne.n	8009342 <USBD_CUSTOM_HID_Init+0x22>
  {
    pdev->pClassData_HID_Custom = NULL;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2200      	movs	r2, #0
 800933a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
    return (uint8_t)USBD_EMEM;
 800933e:	2302      	movs	r3, #2
 8009340:	e078      	b.n	8009434 <USBD_CUSTOM_HID_Init+0x114>
  }

  pdev->pClassData_HID_Custom = (void *)hhid;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	68fa      	ldr	r2, [r7, #12]
 8009346:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	7c1b      	ldrb	r3, [r3, #16]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d11b      	bne.n	800938a <USBD_CUSTOM_HID_Init+0x6a>
  {
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8009352:	4b3b      	ldr	r3, [pc, #236]	@ (8009440 <USBD_CUSTOM_HID_Init+0x120>)
 8009354:	781b      	ldrb	r3, [r3, #0]
 8009356:	f003 020f 	and.w	r2, r3, #15
 800935a:	6879      	ldr	r1, [r7, #4]
 800935c:	4613      	mov	r3, r2
 800935e:	009b      	lsls	r3, r3, #2
 8009360:	4413      	add	r3, r2
 8009362:	009b      	lsls	r3, r3, #2
 8009364:	440b      	add	r3, r1
 8009366:	3326      	adds	r3, #38	@ 0x26
 8009368:	2205      	movs	r2, #5
 800936a:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800936c:	4b35      	ldr	r3, [pc, #212]	@ (8009444 <USBD_CUSTOM_HID_Init+0x124>)
 800936e:	781b      	ldrb	r3, [r3, #0]
 8009370:	f003 020f 	and.w	r2, r3, #15
 8009374:	6879      	ldr	r1, [r7, #4]
 8009376:	4613      	mov	r3, r2
 8009378:	009b      	lsls	r3, r3, #2
 800937a:	4413      	add	r3, r2
 800937c:	009b      	lsls	r3, r3, #2
 800937e:	440b      	add	r3, r1
 8009380:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8009384:	2205      	movs	r2, #5
 8009386:	801a      	strh	r2, [r3, #0]
 8009388:	e01a      	b.n	80093c0 <USBD_CUSTOM_HID_Init+0xa0>
  }
  else /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800938a:	4b2d      	ldr	r3, [pc, #180]	@ (8009440 <USBD_CUSTOM_HID_Init+0x120>)
 800938c:	781b      	ldrb	r3, [r3, #0]
 800938e:	f003 020f 	and.w	r2, r3, #15
 8009392:	6879      	ldr	r1, [r7, #4]
 8009394:	4613      	mov	r3, r2
 8009396:	009b      	lsls	r3, r3, #2
 8009398:	4413      	add	r3, r2
 800939a:	009b      	lsls	r3, r3, #2
 800939c:	440b      	add	r3, r1
 800939e:	3326      	adds	r3, #38	@ 0x26
 80093a0:	2201      	movs	r2, #1
 80093a2:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80093a4:	4b27      	ldr	r3, [pc, #156]	@ (8009444 <USBD_CUSTOM_HID_Init+0x124>)
 80093a6:	781b      	ldrb	r3, [r3, #0]
 80093a8:	f003 020f 	and.w	r2, r3, #15
 80093ac:	6879      	ldr	r1, [r7, #4]
 80093ae:	4613      	mov	r3, r2
 80093b0:	009b      	lsls	r3, r3, #2
 80093b2:	4413      	add	r3, r2
 80093b4:	009b      	lsls	r3, r3, #2
 80093b6:	440b      	add	r3, r1
 80093b8:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 80093bc:	2201      	movs	r2, #1
 80093be:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_IN_EP, USBD_EP_TYPE_INTR,
 80093c0:	4b1f      	ldr	r3, [pc, #124]	@ (8009440 <USBD_CUSTOM_HID_Init+0x120>)
 80093c2:	7819      	ldrb	r1, [r3, #0]
 80093c4:	2340      	movs	r3, #64	@ 0x40
 80093c6:	2203      	movs	r2, #3
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f001 fdde 	bl	800af8a <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].is_used = 1U;
 80093ce:	4b1c      	ldr	r3, [pc, #112]	@ (8009440 <USBD_CUSTOM_HID_Init+0x120>)
 80093d0:	781b      	ldrb	r3, [r3, #0]
 80093d2:	f003 020f 	and.w	r2, r3, #15
 80093d6:	6879      	ldr	r1, [r7, #4]
 80093d8:	4613      	mov	r3, r2
 80093da:	009b      	lsls	r3, r3, #2
 80093dc:	4413      	add	r3, r2
 80093de:	009b      	lsls	r3, r3, #2
 80093e0:	440b      	add	r3, r1
 80093e2:	3324      	adds	r3, #36	@ 0x24
 80093e4:	2201      	movs	r2, #1
 80093e6:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_OUT_EP, USBD_EP_TYPE_INTR,
 80093e8:	4b16      	ldr	r3, [pc, #88]	@ (8009444 <USBD_CUSTOM_HID_Init+0x124>)
 80093ea:	7819      	ldrb	r1, [r3, #0]
 80093ec:	2340      	movs	r3, #64	@ 0x40
 80093ee:	2203      	movs	r2, #3
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f001 fdca 	bl	800af8a <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].is_used = 1U;
 80093f6:	4b13      	ldr	r3, [pc, #76]	@ (8009444 <USBD_CUSTOM_HID_Init+0x124>)
 80093f8:	781b      	ldrb	r3, [r3, #0]
 80093fa:	f003 020f 	and.w	r2, r3, #15
 80093fe:	6879      	ldr	r1, [r7, #4]
 8009400:	4613      	mov	r3, r2
 8009402:	009b      	lsls	r3, r3, #2
 8009404:	4413      	add	r3, r2
 8009406:	009b      	lsls	r3, r3, #2
 8009408:	440b      	add	r3, r1
 800940a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800940e:	2201      	movs	r2, #1
 8009410:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	2200      	movs	r2, #0
 8009416:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->Init();
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 8009420:	685b      	ldr	r3, [r3, #4]
 8009422:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_OUT_EP, hhid->Report_buf,
 8009424:	4b07      	ldr	r3, [pc, #28]	@ (8009444 <USBD_CUSTOM_HID_Init+0x124>)
 8009426:	7819      	ldrb	r1, [r3, #0]
 8009428:	68fa      	ldr	r2, [r7, #12]
 800942a:	2340      	movs	r3, #64	@ 0x40
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f001 fe9b 	bl	800b168 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8009432:	2300      	movs	r3, #0
}
 8009434:	4618      	mov	r0, r3
 8009436:	3710      	adds	r7, #16
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}
 800943c:	20002360 	.word	0x20002360
 8009440:	2000020e 	.word	0x2000020e
 8009444:	2000020f 	.word	0x2000020f

08009448 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b082      	sub	sp, #8
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	460b      	mov	r3, r1
 8009452:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_IN_EP);
 8009454:	4b2a      	ldr	r3, [pc, #168]	@ (8009500 <USBD_CUSTOM_HID_DeInit+0xb8>)
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	4619      	mov	r1, r3
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f001 fdbb 	bl	800afd6 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].is_used = 0U;
 8009460:	4b27      	ldr	r3, [pc, #156]	@ (8009500 <USBD_CUSTOM_HID_DeInit+0xb8>)
 8009462:	781b      	ldrb	r3, [r3, #0]
 8009464:	f003 020f 	and.w	r2, r3, #15
 8009468:	6879      	ldr	r1, [r7, #4]
 800946a:	4613      	mov	r3, r2
 800946c:	009b      	lsls	r3, r3, #2
 800946e:	4413      	add	r3, r2
 8009470:	009b      	lsls	r3, r3, #2
 8009472:	440b      	add	r3, r1
 8009474:	3324      	adds	r3, #36	@ 0x24
 8009476:	2200      	movs	r2, #0
 8009478:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = 0U;
 800947a:	4b21      	ldr	r3, [pc, #132]	@ (8009500 <USBD_CUSTOM_HID_DeInit+0xb8>)
 800947c:	781b      	ldrb	r3, [r3, #0]
 800947e:	f003 020f 	and.w	r2, r3, #15
 8009482:	6879      	ldr	r1, [r7, #4]
 8009484:	4613      	mov	r3, r2
 8009486:	009b      	lsls	r3, r3, #2
 8009488:	4413      	add	r3, r2
 800948a:	009b      	lsls	r3, r3, #2
 800948c:	440b      	add	r3, r1
 800948e:	3326      	adds	r3, #38	@ 0x26
 8009490:	2200      	movs	r2, #0
 8009492:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_OUT_EP);
 8009494:	4b1b      	ldr	r3, [pc, #108]	@ (8009504 <USBD_CUSTOM_HID_DeInit+0xbc>)
 8009496:	781b      	ldrb	r3, [r3, #0]
 8009498:	4619      	mov	r1, r3
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f001 fd9b 	bl	800afd6 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].is_used = 0U;
 80094a0:	4b18      	ldr	r3, [pc, #96]	@ (8009504 <USBD_CUSTOM_HID_DeInit+0xbc>)
 80094a2:	781b      	ldrb	r3, [r3, #0]
 80094a4:	f003 020f 	and.w	r2, r3, #15
 80094a8:	6879      	ldr	r1, [r7, #4]
 80094aa:	4613      	mov	r3, r2
 80094ac:	009b      	lsls	r3, r3, #2
 80094ae:	4413      	add	r3, r2
 80094b0:	009b      	lsls	r3, r3, #2
 80094b2:	440b      	add	r3, r1
 80094b4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80094b8:	2200      	movs	r2, #0
 80094ba:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = 0U;
 80094bc:	4b11      	ldr	r3, [pc, #68]	@ (8009504 <USBD_CUSTOM_HID_DeInit+0xbc>)
 80094be:	781b      	ldrb	r3, [r3, #0]
 80094c0:	f003 020f 	and.w	r2, r3, #15
 80094c4:	6879      	ldr	r1, [r7, #4]
 80094c6:	4613      	mov	r3, r2
 80094c8:	009b      	lsls	r3, r3, #2
 80094ca:	4413      	add	r3, r2
 80094cc:	009b      	lsls	r3, r3, #2
 80094ce:	440b      	add	r3, r1
 80094d0:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 80094d4:	2200      	movs	r2, #0
 80094d6:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassData_HID_Custom != NULL)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d008      	beq.n	80094f4 <USBD_CUSTOM_HID_DeInit+0xac>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->DeInit();
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 80094e8:	689b      	ldr	r3, [r3, #8]
 80094ea:	4798      	blx	r3
#if (0)
    USBD_free(pdev->pClassData_HID_Custom);
#endif
    pdev->pClassData_HID_Custom = NULL;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2200      	movs	r2, #0
 80094f0:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
  }

  return (uint8_t)USBD_OK;
 80094f4:	2300      	movs	r3, #0
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3708      	adds	r7, #8
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}
 80094fe:	bf00      	nop
 8009500:	2000020e 	.word	0x2000020e
 8009504:	2000020f 	.word	0x2000020f

08009508 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b088      	sub	sp, #32
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009518:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800951a:	2300      	movs	r3, #0
 800951c:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 800951e:	2300      	movs	r3, #0
 8009520:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8009522:	2300      	movs	r3, #0
 8009524:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8009526:	2300      	movs	r3, #0
 8009528:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 800952a:	693b      	ldr	r3, [r7, #16]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d101      	bne.n	8009534 <USBD_CUSTOM_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8009530:	2303      	movs	r3, #3
 8009532:	e0ed      	b.n	8009710 <USBD_CUSTOM_HID_Setup+0x208>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800953c:	2b00      	cmp	r3, #0
 800953e:	d052      	beq.n	80095e6 <USBD_CUSTOM_HID_Setup+0xde>
 8009540:	2b20      	cmp	r3, #32
 8009542:	f040 80dd 	bne.w	8009700 <USBD_CUSTOM_HID_Setup+0x1f8>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	785b      	ldrb	r3, [r3, #1]
 800954a:	3b02      	subs	r3, #2
 800954c:	2b09      	cmp	r3, #9
 800954e:	d842      	bhi.n	80095d6 <USBD_CUSTOM_HID_Setup+0xce>
 8009550:	a201      	add	r2, pc, #4	@ (adr r2, 8009558 <USBD_CUSTOM_HID_Setup+0x50>)
 8009552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009556:	bf00      	nop
 8009558:	080095b1 	.word	0x080095b1
 800955c:	0800958f 	.word	0x0800958f
 8009560:	080095d7 	.word	0x080095d7
 8009564:	080095d7 	.word	0x080095d7
 8009568:	080095d7 	.word	0x080095d7
 800956c:	080095d7 	.word	0x080095d7
 8009570:	080095d7 	.word	0x080095d7
 8009574:	080095c1 	.word	0x080095c1
 8009578:	0800959f 	.word	0x0800959f
 800957c:	08009581 	.word	0x08009581
    {
    case CUSTOM_HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	885b      	ldrh	r3, [r3, #2]
 8009584:	b2db      	uxtb	r3, r3
 8009586:	461a      	mov	r2, r3
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800958c:	e02a      	b.n	80095e4 <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	3340      	adds	r3, #64	@ 0x40
 8009592:	2201      	movs	r2, #1
 8009594:	4619      	mov	r1, r3
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f001 fae5 	bl	800ab66 <USBD_CtlSendData>
      break;
 800959c:	e022      	b.n	80095e4 <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	885b      	ldrh	r3, [r3, #2]
 80095a2:	0a1b      	lsrs	r3, r3, #8
 80095a4:	b29b      	uxth	r3, r3
 80095a6:	b2db      	uxtb	r3, r3
 80095a8:	461a      	mov	r2, r3
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	645a      	str	r2, [r3, #68]	@ 0x44
      break;
 80095ae:	e019      	b.n	80095e4 <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	3344      	adds	r3, #68	@ 0x44
 80095b4:	2201      	movs	r2, #1
 80095b6:	4619      	mov	r1, r3
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f001 fad4 	bl	800ab66 <USBD_CtlSendData>
      break;
 80095be:	e011      	b.n	80095e4 <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_SET_REPORT:
      hhid->IsReportAvailable = 1U;
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	2201      	movs	r2, #1
 80095c4:	64da      	str	r2, [r3, #76]	@ 0x4c
      (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 80095c6:	6939      	ldr	r1, [r7, #16]
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	88db      	ldrh	r3, [r3, #6]
 80095cc:	461a      	mov	r2, r3
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f001 faf5 	bl	800abbe <USBD_CtlPrepareRx>
      break;
 80095d4:	e006      	b.n	80095e4 <USBD_CUSTOM_HID_Setup+0xdc>

    default:
      USBD_CtlError(pdev, req);
 80095d6:	6839      	ldr	r1, [r7, #0]
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f001 fa53 	bl	800aa84 <USBD_CtlError>
      ret = USBD_FAIL;
 80095de:	2303      	movs	r3, #3
 80095e0:	75fb      	strb	r3, [r7, #23]
      break;
 80095e2:	bf00      	nop
    }
    break;
 80095e4:	e093      	b.n	800970e <USBD_CUSTOM_HID_Setup+0x206>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	785b      	ldrb	r3, [r3, #1]
 80095ea:	2b0b      	cmp	r3, #11
 80095ec:	d87f      	bhi.n	80096ee <USBD_CUSTOM_HID_Setup+0x1e6>
 80095ee:	a201      	add	r2, pc, #4	@ (adr r2, 80095f4 <USBD_CUSTOM_HID_Setup+0xec>)
 80095f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095f4:	08009625 	.word	0x08009625
 80095f8:	080096fd 	.word	0x080096fd
 80095fc:	080096ef 	.word	0x080096ef
 8009600:	080096ef 	.word	0x080096ef
 8009604:	080096ef 	.word	0x080096ef
 8009608:	080096ef 	.word	0x080096ef
 800960c:	0800964f 	.word	0x0800964f
 8009610:	080096ef 	.word	0x080096ef
 8009614:	080096ef 	.word	0x080096ef
 8009618:	080096ef 	.word	0x080096ef
 800961c:	0800969d 	.word	0x0800969d
 8009620:	080096c7 	.word	0x080096c7
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800962a:	b2db      	uxtb	r3, r3
 800962c:	2b03      	cmp	r3, #3
 800962e:	d107      	bne.n	8009640 <USBD_CUSTOM_HID_Setup+0x138>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009630:	f107 030e 	add.w	r3, r7, #14
 8009634:	2202      	movs	r2, #2
 8009636:	4619      	mov	r1, r3
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f001 fa94 	bl	800ab66 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800963e:	e05e      	b.n	80096fe <USBD_CUSTOM_HID_Setup+0x1f6>
        USBD_CtlError(pdev, req);
 8009640:	6839      	ldr	r1, [r7, #0]
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f001 fa1e 	bl	800aa84 <USBD_CtlError>
        ret = USBD_FAIL;
 8009648:	2303      	movs	r3, #3
 800964a:	75fb      	strb	r3, [r7, #23]
      break;
 800964c:	e057      	b.n	80096fe <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	885b      	ldrh	r3, [r3, #2]
 8009652:	0a1b      	lsrs	r3, r3, #8
 8009654:	b29b      	uxth	r3, r3
 8009656:	2b22      	cmp	r3, #34	@ 0x22
 8009658:	d10b      	bne.n	8009672 <USBD_CUSTOM_HID_Setup+0x16a>
      {
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	88db      	ldrh	r3, [r3, #6]
 800965e:	2b21      	cmp	r3, #33	@ 0x21
 8009660:	bf28      	it	cs
 8009662:	2321      	movcs	r3, #33	@ 0x21
 8009664:	83fb      	strh	r3, [r7, #30]
        pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->pReport;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	61bb      	str	r3, [r7, #24]
 8009670:	e00d      	b.n	800968e <USBD_CUSTOM_HID_Setup+0x186>
      }
      else
      {
        if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	885b      	ldrh	r3, [r3, #2]
 8009676:	0a1b      	lsrs	r3, r3, #8
 8009678:	b29b      	uxth	r3, r3
 800967a:	2b21      	cmp	r3, #33	@ 0x21
 800967c:	d107      	bne.n	800968e <USBD_CUSTOM_HID_Setup+0x186>
        {
          pbuf = USBD_CUSTOM_HID_Desc;
 800967e:	4b26      	ldr	r3, [pc, #152]	@ (8009718 <USBD_CUSTOM_HID_Setup+0x210>)
 8009680:	61bb      	str	r3, [r7, #24]
          len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	88db      	ldrh	r3, [r3, #6]
 8009686:	2b09      	cmp	r3, #9
 8009688:	bf28      	it	cs
 800968a:	2309      	movcs	r3, #9
 800968c:	83fb      	strh	r3, [r7, #30]
        }
      }

      (void)USBD_CtlSendData(pdev, pbuf, len);
 800968e:	8bfb      	ldrh	r3, [r7, #30]
 8009690:	461a      	mov	r2, r3
 8009692:	69b9      	ldr	r1, [r7, #24]
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f001 fa66 	bl	800ab66 <USBD_CtlSendData>
      break;
 800969a:	e030      	b.n	80096fe <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096a2:	b2db      	uxtb	r3, r3
 80096a4:	2b03      	cmp	r3, #3
 80096a6:	d107      	bne.n	80096b8 <USBD_CUSTOM_HID_Setup+0x1b0>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80096a8:	693b      	ldr	r3, [r7, #16]
 80096aa:	3348      	adds	r3, #72	@ 0x48
 80096ac:	2201      	movs	r2, #1
 80096ae:	4619      	mov	r1, r3
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f001 fa58 	bl	800ab66 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80096b6:	e022      	b.n	80096fe <USBD_CUSTOM_HID_Setup+0x1f6>
        USBD_CtlError(pdev, req);
 80096b8:	6839      	ldr	r1, [r7, #0]
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f001 f9e2 	bl	800aa84 <USBD_CtlError>
        ret = USBD_FAIL;
 80096c0:	2303      	movs	r3, #3
 80096c2:	75fb      	strb	r3, [r7, #23]
      break;
 80096c4:	e01b      	b.n	80096fe <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096cc:	b2db      	uxtb	r3, r3
 80096ce:	2b03      	cmp	r3, #3
 80096d0:	d106      	bne.n	80096e0 <USBD_CUSTOM_HID_Setup+0x1d8>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	885b      	ldrh	r3, [r3, #2]
 80096d6:	b2db      	uxtb	r3, r3
 80096d8:	461a      	mov	r2, r3
 80096da:	693b      	ldr	r3, [r7, #16]
 80096dc:	649a      	str	r2, [r3, #72]	@ 0x48
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80096de:	e00e      	b.n	80096fe <USBD_CUSTOM_HID_Setup+0x1f6>
        USBD_CtlError(pdev, req);
 80096e0:	6839      	ldr	r1, [r7, #0]
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f001 f9ce 	bl	800aa84 <USBD_CtlError>
        ret = USBD_FAIL;
 80096e8:	2303      	movs	r3, #3
 80096ea:	75fb      	strb	r3, [r7, #23]
      break;
 80096ec:	e007      	b.n	80096fe <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80096ee:	6839      	ldr	r1, [r7, #0]
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f001 f9c7 	bl	800aa84 <USBD_CtlError>
      ret = USBD_FAIL;
 80096f6:	2303      	movs	r3, #3
 80096f8:	75fb      	strb	r3, [r7, #23]
      break;
 80096fa:	e000      	b.n	80096fe <USBD_CUSTOM_HID_Setup+0x1f6>
      break;
 80096fc:	bf00      	nop
    }
    break;
 80096fe:	e006      	b.n	800970e <USBD_CUSTOM_HID_Setup+0x206>

  default:
    USBD_CtlError(pdev, req);
 8009700:	6839      	ldr	r1, [r7, #0]
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f001 f9be 	bl	800aa84 <USBD_CtlError>
    ret = USBD_FAIL;
 8009708:	2303      	movs	r3, #3
 800970a:	75fb      	strb	r3, [r7, #23]
    break;
 800970c:	bf00      	nop
  }
  return (uint8_t)ret;
 800970e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009710:	4618      	mov	r0, r3
 8009712:	3720      	adds	r7, #32
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}
 8009718:	200002d0 	.word	0x200002d0

0800971c <USBD_CUSTOM_HID_SendReport>:
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b086      	sub	sp, #24
 8009720:	af00      	add	r7, sp, #0
 8009722:	60f8      	str	r0, [r7, #12]
 8009724:	60b9      	str	r1, [r7, #8]
 8009726:	4613      	mov	r3, r2
 8009728:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData_HID_Custom == NULL)
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009730:	2b00      	cmp	r3, #0
 8009732:	d101      	bne.n	8009738 <USBD_CUSTOM_HID_SendReport+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8009734:	2303      	movs	r3, #3
 8009736:	e01d      	b.n	8009774 <USBD_CUSTOM_HID_SendReport+0x58>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800973e:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009746:	b2db      	uxtb	r3, r3
 8009748:	2b03      	cmp	r3, #3
 800974a:	d112      	bne.n	8009772 <USBD_CUSTOM_HID_SendReport+0x56>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009752:	2b00      	cmp	r3, #0
 8009754:	d10b      	bne.n	800976e <USBD_CUSTOM_HID_SendReport+0x52>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	2201      	movs	r2, #1
 800975a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      (void)USBD_LL_Transmit(pdev, CUSTOM_HID_IN_EP, report, len);
 800975e:	4b07      	ldr	r3, [pc, #28]	@ (800977c <USBD_CUSTOM_HID_SendReport+0x60>)
 8009760:	7819      	ldrb	r1, [r3, #0]
 8009762:	88fb      	ldrh	r3, [r7, #6]
 8009764:	68ba      	ldr	r2, [r7, #8]
 8009766:	68f8      	ldr	r0, [r7, #12]
 8009768:	f001 fcdd 	bl	800b126 <USBD_LL_Transmit>
 800976c:	e001      	b.n	8009772 <USBD_CUSTOM_HID_SendReport+0x56>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 800976e:	2301      	movs	r3, #1
 8009770:	e000      	b.n	8009774 <USBD_CUSTOM_HID_SendReport+0x58>
    }
  }
  return (uint8_t)USBD_OK;
 8009772:	2300      	movs	r3, #0
}
 8009774:	4618      	mov	r0, r3
 8009776:	3718      	adds	r7, #24
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}
 800977c:	2000020e 	.word	0x2000020e

08009780 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8009780:	b480      	push	{r7}
 8009782:	b083      	sub	sp, #12
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2229      	movs	r2, #41	@ 0x29
 800978c:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgFSDesc;
 800978e:	4b03      	ldr	r3, [pc, #12]	@ (800979c <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8009790:	4618      	mov	r0, r3
 8009792:	370c      	adds	r7, #12
 8009794:	46bd      	mov	sp, r7
 8009796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979a:	4770      	bx	lr
 800979c:	2000024c 	.word	0x2000024c

080097a0 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 80097a0:	b480      	push	{r7}
 80097a2:	b083      	sub	sp, #12
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2229      	movs	r2, #41	@ 0x29
 80097ac:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgHSDesc;
 80097ae:	4b03      	ldr	r3, [pc, #12]	@ (80097bc <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	370c      	adds	r7, #12
 80097b4:	46bd      	mov	sp, r7
 80097b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ba:	4770      	bx	lr
 80097bc:	20000278 	.word	0x20000278

080097c0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b083      	sub	sp, #12
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2229      	movs	r2, #41	@ 0x29
 80097cc:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 80097ce:	4b03      	ldr	r3, [pc, #12]	@ (80097dc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	370c      	adds	r7, #12
 80097d4:	46bd      	mov	sp, r7
 80097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097da:	4770      	bx	lr
 80097dc:	200002a4 	.word	0x200002a4

080097e0 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
extern volatile uint8_t tx_ok ;
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b083      	sub	sp, #12
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
 80097e8:	460b      	mov	r3, r1
 80097ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom)->state = CUSTOM_HID_IDLE;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80097f2:	2200      	movs	r2, #0
 80097f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  tx_ok = 1 ;
 80097f8:	4b04      	ldr	r3, [pc, #16]	@ (800980c <USBD_CUSTOM_HID_DataIn+0x2c>)
 80097fa:	2201      	movs	r2, #1
 80097fc:	701a      	strb	r2, [r3, #0]
  return (uint8_t)USBD_OK;
 80097fe:	2300      	movs	r3, #0
}
 8009800:	4618      	mov	r0, r3
 8009802:	370c      	adds	r7, #12
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr
 800980c:	200003d0 	.word	0x200003d0

08009810 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b084      	sub	sp, #16
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	460b      	mov	r3, r1
 800981a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData_HID_Custom == NULL)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009822:	2b00      	cmp	r3, #0
 8009824:	d101      	bne.n	800982a <USBD_CUSTOM_HID_DataOut+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8009826:	2303      	movs	r3, #3
 8009828:	e00e      	b.n	8009848 <USBD_CUSTOM_HID_DataOut+0x38>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009830:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->OutEvent(hhid->Report_buf[0], hhid->Report_buf[1]);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 8009838:	68db      	ldr	r3, [r3, #12]
 800983a:	68fa      	ldr	r2, [r7, #12]
 800983c:	7810      	ldrb	r0, [r2, #0]
 800983e:	68fa      	ldr	r2, [r7, #12]
 8009840:	7852      	ldrb	r2, [r2, #1]
 8009842:	4611      	mov	r1, r2
 8009844:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009846:	2300      	movs	r3, #0
}
 8009848:	4618      	mov	r0, r3
 800984a:	3710      	adds	r7, #16
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}

08009850 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b084      	sub	sp, #16
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800985e:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d101      	bne.n	800986a <USBD_CUSTOM_HID_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8009866:	2303      	movs	r3, #3
 8009868:	e011      	b.n	800988e <USBD_CUSTOM_HID_EP0_RxReady+0x3e>
  }

  if (hhid->IsReportAvailable == 1U)
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800986e:	2b01      	cmp	r3, #1
 8009870:	d10c      	bne.n	800988c <USBD_CUSTOM_HID_EP0_RxReady+0x3c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->OutEvent(hhid->Report_buf[0], hhid->Report_buf[1]);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 8009878:	68db      	ldr	r3, [r3, #12]
 800987a:	68fa      	ldr	r2, [r7, #12]
 800987c:	7810      	ldrb	r0, [r2, #0]
 800987e:	68fa      	ldr	r2, [r7, #12]
 8009880:	7852      	ldrb	r2, [r2, #1]
 8009882:	4611      	mov	r1, r2
 8009884:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2200      	movs	r2, #0
 800988a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return (uint8_t)USBD_OK;
 800988c:	2300      	movs	r3, #0
}
 800988e:	4618      	mov	r0, r3
 8009890:	3710      	adds	r7, #16
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}
	...

08009898 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8009898:	b480      	push	{r7}
 800989a:	b083      	sub	sp, #12
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	220a      	movs	r2, #10
 80098a4:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 80098a6:	4b03      	ldr	r3, [pc, #12]	@ (80098b4 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	370c      	adds	r7, #12
 80098ac:	46bd      	mov	sp, r7
 80098ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b2:	4770      	bx	lr
 80098b4:	200002dc 	.word	0x200002dc

080098b8 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b083      	sub	sp, #12
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d101      	bne.n	80098cc <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80098c8:	2303      	movs	r3, #3
 80098ca:	e004      	b.n	80098d6 <USBD_CUSTOM_HID_RegisterInterface+0x1e>
  }

  pdev->pUserData_HID_Custom = fops;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	683a      	ldr	r2, [r7, #0]
 80098d0:	f8c3 22dc 	str.w	r2, [r3, #732]	@ 0x2dc

  return (uint8_t)USBD_OK;
 80098d4:	2300      	movs	r3, #0
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	370c      	adds	r7, #12
 80098da:	46bd      	mov	sp, r7
 80098dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e0:	4770      	bx	lr
	...

080098e4 <USBD_Update_HID_Custom_DESC>:

void USBD_Update_HID_Custom_DESC(uint8_t *desc, uint8_t itf_no, uint8_t in_ep, uint8_t out_ep, uint8_t str_idx)
{
 80098e4:	b480      	push	{r7}
 80098e6:	b083      	sub	sp, #12
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
 80098ec:	4608      	mov	r0, r1
 80098ee:	4611      	mov	r1, r2
 80098f0:	461a      	mov	r2, r3
 80098f2:	4603      	mov	r3, r0
 80098f4:	70fb      	strb	r3, [r7, #3]
 80098f6:	460b      	mov	r3, r1
 80098f8:	70bb      	strb	r3, [r7, #2]
 80098fa:	4613      	mov	r3, r2
 80098fc:	707b      	strb	r3, [r7, #1]
  desc[11] = itf_no;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	330b      	adds	r3, #11
 8009902:	78fa      	ldrb	r2, [r7, #3]
 8009904:	701a      	strb	r2, [r3, #0]
  desc[17] = str_idx;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	3311      	adds	r3, #17
 800990a:	7c3a      	ldrb	r2, [r7, #16]
 800990c:	701a      	strb	r2, [r3, #0]
  desc[29] = in_ep;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	331d      	adds	r3, #29
 8009912:	78ba      	ldrb	r2, [r7, #2]
 8009914:	701a      	strb	r2, [r3, #0]
  desc[36] = out_ep;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	3324      	adds	r3, #36	@ 0x24
 800991a:	787a      	ldrb	r2, [r7, #1]
 800991c:	701a      	strb	r2, [r3, #0]

  CUSTOM_HID_IN_EP = in_ep;
 800991e:	4a09      	ldr	r2, [pc, #36]	@ (8009944 <USBD_Update_HID_Custom_DESC+0x60>)
 8009920:	78bb      	ldrb	r3, [r7, #2]
 8009922:	7013      	strb	r3, [r2, #0]
  CUSTOM_HID_OUT_EP = out_ep;
 8009924:	4a08      	ldr	r2, [pc, #32]	@ (8009948 <USBD_Update_HID_Custom_DESC+0x64>)
 8009926:	787b      	ldrb	r3, [r7, #1]
 8009928:	7013      	strb	r3, [r2, #0]
  CUSTOM_HID_ITF_NBR = itf_no;
 800992a:	4a08      	ldr	r2, [pc, #32]	@ (800994c <USBD_Update_HID_Custom_DESC+0x68>)
 800992c:	78fb      	ldrb	r3, [r7, #3]
 800992e:	7013      	strb	r3, [r2, #0]
  CUSTOM_HID_STR_DESC_IDX = str_idx;
 8009930:	4a07      	ldr	r2, [pc, #28]	@ (8009950 <USBD_Update_HID_Custom_DESC+0x6c>)
 8009932:	7c3b      	ldrb	r3, [r7, #16]
 8009934:	7013      	strb	r3, [r2, #0]
}
 8009936:	bf00      	nop
 8009938:	370c      	adds	r7, #12
 800993a:	46bd      	mov	sp, r7
 800993c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009940:	4770      	bx	lr
 8009942:	bf00      	nop
 8009944:	2000020e 	.word	0x2000020e
 8009948:	2000020f 	.word	0x2000020f
 800994c:	2000235c 	.word	0x2000235c
 8009950:	2000235d 	.word	0x2000235d

08009954 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b086      	sub	sp, #24
 8009958:	af00      	add	r7, sp, #0
 800995a:	60f8      	str	r0, [r7, #12]
 800995c:	60b9      	str	r1, [r7, #8]
 800995e:	4613      	mov	r3, r2
 8009960:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d101      	bne.n	800996c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009968:	2303      	movs	r3, #3
 800996a:	e01b      	b.n	80099a4 <USBD_Init+0x50>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	2200      	movs	r2, #0
 8009970:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pConfDesc = NULL;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	2200      	movs	r2, #0
 8009978:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d003      	beq.n	800998a <USBD_Init+0x36>
  {
    pdev->pDesc = pdesc;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	68ba      	ldr	r2, [r7, #8]
 8009986:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	2201      	movs	r2, #1
 800998e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	79fa      	ldrb	r2, [r7, #7]
 8009996:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009998:	68f8      	ldr	r0, [r7, #12]
 800999a:	f001 fa7d 	bl	800ae98 <USBD_LL_Init>
 800999e:	4603      	mov	r3, r0
 80099a0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80099a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3718      	adds	r7, #24
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}

080099ac <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b084      	sub	sp, #16
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
 80099b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80099b6:	2300      	movs	r3, #0
 80099b8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d101      	bne.n	80099c4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80099c0:	2303      	movs	r3, #3
 80099c2:	e02d      	b.n	8009a20 <USBD_RegisterClass+0x74>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	683a      	ldr	r2, [r7, #0]
 80099c8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  /* Get Device Configuration Descriptor */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	7c1b      	ldrb	r3, [r3, #16]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d112      	bne.n	80099fa <USBD_RegisterClass+0x4e>
  {
	  if (pdev->pClass->GetHSConfigDescriptor != NULL)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d01e      	beq.n	8009a1e <USBD_RegisterClass+0x72>
	  {
		  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099e8:	f107 020e 	add.w	r2, r7, #14
 80099ec:	4610      	mov	r0, r2
 80099ee:	4798      	blx	r3
 80099f0:	4602      	mov	r2, r0
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318
 80099f8:	e011      	b.n	8009a1e <USBD_RegisterClass+0x72>
	  }
  }
  else if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d00b      	beq.n	8009a1e <USBD_RegisterClass+0x72>
  {
	  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a0e:	f107 020e 	add.w	r2, r7, #14
 8009a12:	4610      	mov	r0, r2
 8009a14:	4798      	blx	r3
 8009a16:	4602      	mov	r2, r0
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318
  }

  return USBD_OK;
 8009a1e:	2300      	movs	r3, #0
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	3710      	adds	r7, #16
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}

08009a28 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b082      	sub	sp, #8
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f001 fa8f 	bl	800af54 <USBD_LL_Start>
 8009a36:	4603      	mov	r3, r0
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3708      	adds	r7, #8
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}

08009a40 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009a40:	b480      	push	{r7}
 8009a42:	b083      	sub	sp, #12
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009a48:	2300      	movs	r3, #0
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	370c      	adds	r7, #12
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a54:	4770      	bx	lr

08009a56 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009a56:	b580      	push	{r7, lr}
 8009a58:	b084      	sub	sp, #16
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	6078      	str	r0, [r7, #4]
 8009a5e:	460b      	mov	r3, r1
 8009a60:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009a62:	2303      	movs	r3, #3
 8009a64:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d009      	beq.n	8009a84 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	78fa      	ldrb	r2, [r7, #3]
 8009a7a:	4611      	mov	r1, r2
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	4798      	blx	r3
 8009a80:	4603      	mov	r3, r0
 8009a82:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3710      	adds	r7, #16
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}

08009a8e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009a8e:	b580      	push	{r7, lr}
 8009a90:	b082      	sub	sp, #8
 8009a92:	af00      	add	r7, sp, #0
 8009a94:	6078      	str	r0, [r7, #4]
 8009a96:	460b      	mov	r3, r1
 8009a98:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d007      	beq.n	8009ab4 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009aaa:	685b      	ldr	r3, [r3, #4]
 8009aac:	78fa      	ldrb	r2, [r7, #3]
 8009aae:	4611      	mov	r1, r2
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	4798      	blx	r3
  }

  return USBD_OK;
 8009ab4:	2300      	movs	r3, #0
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3708      	adds	r7, #8
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}

08009abe <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009abe:	b580      	push	{r7, lr}
 8009ac0:	b084      	sub	sp, #16
 8009ac2:	af00      	add	r7, sp, #0
 8009ac4:	6078      	str	r0, [r7, #4]
 8009ac6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009ace:	6839      	ldr	r1, [r7, #0]
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f000 ff9d 	bl	800aa10 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2201      	movs	r2, #1
 8009ada:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009ae4:	461a      	mov	r2, r3
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009af2:	f003 031f 	and.w	r3, r3, #31
 8009af6:	2b02      	cmp	r3, #2
 8009af8:	d01a      	beq.n	8009b30 <USBD_LL_SetupStage+0x72>
 8009afa:	2b02      	cmp	r3, #2
 8009afc:	d822      	bhi.n	8009b44 <USBD_LL_SetupStage+0x86>
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d002      	beq.n	8009b08 <USBD_LL_SetupStage+0x4a>
 8009b02:	2b01      	cmp	r3, #1
 8009b04:	d00a      	beq.n	8009b1c <USBD_LL_SetupStage+0x5e>
 8009b06:	e01d      	b.n	8009b44 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009b0e:	4619      	mov	r1, r3
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f000 fa5d 	bl	8009fd0 <USBD_StdDevReq>
 8009b16:	4603      	mov	r3, r0
 8009b18:	73fb      	strb	r3, [r7, #15]
      break;
 8009b1a:	e020      	b.n	8009b5e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009b22:	4619      	mov	r1, r3
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f000 fac1 	bl	800a0ac <USBD_StdItfReq>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	73fb      	strb	r3, [r7, #15]
      break;
 8009b2e:	e016      	b.n	8009b5e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009b36:	4619      	mov	r1, r3
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f000 fb00 	bl	800a13e <USBD_StdEPReq>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	73fb      	strb	r3, [r7, #15]
      break;
 8009b42:	e00c      	b.n	8009b5e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009b4a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009b4e:	b2db      	uxtb	r3, r3
 8009b50:	4619      	mov	r1, r3
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f001 fa5e 	bl	800b014 <USBD_LL_StallEP>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	73fb      	strb	r3, [r7, #15]
      break;
 8009b5c:	bf00      	nop
  }

  return ret;
 8009b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3710      	adds	r7, #16
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b086      	sub	sp, #24
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	60f8      	str	r0, [r7, #12]
 8009b70:	460b      	mov	r3, r1
 8009b72:	607a      	str	r2, [r7, #4]
 8009b74:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009b76:	7afb      	ldrb	r3, [r7, #11]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d138      	bne.n	8009bee <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009b82:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009b8a:	2b03      	cmp	r3, #3
 8009b8c:	d14a      	bne.n	8009c24 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	689a      	ldr	r2, [r3, #8]
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	68db      	ldr	r3, [r3, #12]
 8009b96:	429a      	cmp	r2, r3
 8009b98:	d913      	bls.n	8009bc2 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009b9a:	693b      	ldr	r3, [r7, #16]
 8009b9c:	689a      	ldr	r2, [r3, #8]
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	68db      	ldr	r3, [r3, #12]
 8009ba2:	1ad2      	subs	r2, r2, r3
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	68da      	ldr	r2, [r3, #12]
 8009bac:	693b      	ldr	r3, [r7, #16]
 8009bae:	689b      	ldr	r3, [r3, #8]
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	bf28      	it	cs
 8009bb4:	4613      	movcs	r3, r2
 8009bb6:	461a      	mov	r2, r3
 8009bb8:	6879      	ldr	r1, [r7, #4]
 8009bba:	68f8      	ldr	r0, [r7, #12]
 8009bbc:	f001 f81c 	bl	800abf8 <USBD_CtlContinueRx>
 8009bc0:	e030      	b.n	8009c24 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bc8:	b2db      	uxtb	r3, r3
 8009bca:	2b03      	cmp	r3, #3
 8009bcc:	d10b      	bne.n	8009be6 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009bd4:	691b      	ldr	r3, [r3, #16]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d005      	beq.n	8009be6 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009be0:	691b      	ldr	r3, [r3, #16]
 8009be2:	68f8      	ldr	r0, [r7, #12]
 8009be4:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009be6:	68f8      	ldr	r0, [r7, #12]
 8009be8:	f001 f817 	bl	800ac1a <USBD_CtlSendStatus>
 8009bec:	e01a      	b.n	8009c24 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bf4:	b2db      	uxtb	r3, r3
 8009bf6:	2b03      	cmp	r3, #3
 8009bf8:	d114      	bne.n	8009c24 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c00:	699b      	ldr	r3, [r3, #24]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d00e      	beq.n	8009c24 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c0c:	699b      	ldr	r3, [r3, #24]
 8009c0e:	7afa      	ldrb	r2, [r7, #11]
 8009c10:	4611      	mov	r1, r2
 8009c12:	68f8      	ldr	r0, [r7, #12]
 8009c14:	4798      	blx	r3
 8009c16:	4603      	mov	r3, r0
 8009c18:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009c1a:	7dfb      	ldrb	r3, [r7, #23]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d001      	beq.n	8009c24 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8009c20:	7dfb      	ldrb	r3, [r7, #23]
 8009c22:	e000      	b.n	8009c26 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8009c24:	2300      	movs	r3, #0
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3718      	adds	r7, #24
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}

08009c2e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009c2e:	b580      	push	{r7, lr}
 8009c30:	b086      	sub	sp, #24
 8009c32:	af00      	add	r7, sp, #0
 8009c34:	60f8      	str	r0, [r7, #12]
 8009c36:	460b      	mov	r3, r1
 8009c38:	607a      	str	r2, [r7, #4]
 8009c3a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009c3c:	7afb      	ldrb	r3, [r7, #11]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d16b      	bne.n	8009d1a <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	3314      	adds	r3, #20
 8009c46:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009c4e:	2b02      	cmp	r3, #2
 8009c50:	d156      	bne.n	8009d00 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	689a      	ldr	r2, [r3, #8]
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	68db      	ldr	r3, [r3, #12]
 8009c5a:	429a      	cmp	r2, r3
 8009c5c:	d914      	bls.n	8009c88 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	689a      	ldr	r2, [r3, #8]
 8009c62:	693b      	ldr	r3, [r7, #16]
 8009c64:	68db      	ldr	r3, [r3, #12]
 8009c66:	1ad2      	subs	r2, r2, r3
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009c6c:	693b      	ldr	r3, [r7, #16]
 8009c6e:	689b      	ldr	r3, [r3, #8]
 8009c70:	461a      	mov	r2, r3
 8009c72:	6879      	ldr	r1, [r7, #4]
 8009c74:	68f8      	ldr	r0, [r7, #12]
 8009c76:	f000 ff91 	bl	800ab9c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	2100      	movs	r1, #0
 8009c80:	68f8      	ldr	r0, [r7, #12]
 8009c82:	f001 fa71 	bl	800b168 <USBD_LL_PrepareReceive>
 8009c86:	e03b      	b.n	8009d00 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009c88:	693b      	ldr	r3, [r7, #16]
 8009c8a:	68da      	ldr	r2, [r3, #12]
 8009c8c:	693b      	ldr	r3, [r7, #16]
 8009c8e:	689b      	ldr	r3, [r3, #8]
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d11c      	bne.n	8009cce <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	685a      	ldr	r2, [r3, #4]
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009c9c:	429a      	cmp	r2, r3
 8009c9e:	d316      	bcc.n	8009cce <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	685a      	ldr	r2, [r3, #4]
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009caa:	429a      	cmp	r2, r3
 8009cac:	d20f      	bcs.n	8009cce <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009cae:	2200      	movs	r2, #0
 8009cb0:	2100      	movs	r1, #0
 8009cb2:	68f8      	ldr	r0, [r7, #12]
 8009cb4:	f000 ff72 	bl	800ab9c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	2100      	movs	r1, #0
 8009cc6:	68f8      	ldr	r0, [r7, #12]
 8009cc8:	f001 fa4e 	bl	800b168 <USBD_LL_PrepareReceive>
 8009ccc:	e018      	b.n	8009d00 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009cd4:	b2db      	uxtb	r3, r3
 8009cd6:	2b03      	cmp	r3, #3
 8009cd8:	d10b      	bne.n	8009cf2 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ce0:	68db      	ldr	r3, [r3, #12]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d005      	beq.n	8009cf2 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009cec:	68db      	ldr	r3, [r3, #12]
 8009cee:	68f8      	ldr	r0, [r7, #12]
 8009cf0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009cf2:	2180      	movs	r1, #128	@ 0x80
 8009cf4:	68f8      	ldr	r0, [r7, #12]
 8009cf6:	f001 f98d 	bl	800b014 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009cfa:	68f8      	ldr	r0, [r7, #12]
 8009cfc:	f000 ffa0 	bl	800ac40 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009d06:	2b01      	cmp	r3, #1
 8009d08:	d122      	bne.n	8009d50 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009d0a:	68f8      	ldr	r0, [r7, #12]
 8009d0c:	f7ff fe98 	bl	8009a40 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	2200      	movs	r2, #0
 8009d14:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009d18:	e01a      	b.n	8009d50 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d20:	b2db      	uxtb	r3, r3
 8009d22:	2b03      	cmp	r3, #3
 8009d24:	d114      	bne.n	8009d50 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d2c:	695b      	ldr	r3, [r3, #20]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d00e      	beq.n	8009d50 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d38:	695b      	ldr	r3, [r3, #20]
 8009d3a:	7afa      	ldrb	r2, [r7, #11]
 8009d3c:	4611      	mov	r1, r2
 8009d3e:	68f8      	ldr	r0, [r7, #12]
 8009d40:	4798      	blx	r3
 8009d42:	4603      	mov	r3, r0
 8009d44:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009d46:	7dfb      	ldrb	r3, [r7, #23]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d001      	beq.n	8009d50 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8009d4c:	7dfb      	ldrb	r3, [r7, #23]
 8009d4e:	e000      	b.n	8009d52 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8009d50:	2300      	movs	r3, #0
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3718      	adds	r7, #24
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}

08009d5a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009d5a:	b580      	push	{r7, lr}
 8009d5c:	b082      	sub	sp, #8
 8009d5e:	af00      	add	r7, sp, #0
 8009d60:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2201      	movs	r2, #1
 8009d66:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2200      	movs	r2, #0
 8009d76:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d101      	bne.n	8009d8e <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009d8a:	2303      	movs	r3, #3
 8009d8c:	e02a      	b.n	8009de4 <USBD_LL_Reset+0x8a>
  }

	if (pdev->pClass->DeInit != NULL)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d94:	685b      	ldr	r3, [r3, #4]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d009      	beq.n	8009dae <USBD_LL_Reset+0x54>
	{
	  (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009da0:	685b      	ldr	r3, [r3, #4]
 8009da2:	687a      	ldr	r2, [r7, #4]
 8009da4:	6852      	ldr	r2, [r2, #4]
 8009da6:	b2d2      	uxtb	r2, r2
 8009da8:	4611      	mov	r1, r2
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	4798      	blx	r3
	}

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009dae:	2340      	movs	r3, #64	@ 0x40
 8009db0:	2200      	movs	r2, #0
 8009db2:	2100      	movs	r1, #0
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f001 f8e8 	bl	800af8a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2201      	movs	r2, #1
 8009dbe:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2240      	movs	r2, #64	@ 0x40
 8009dc6:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009dca:	2340      	movs	r3, #64	@ 0x40
 8009dcc:	2200      	movs	r2, #0
 8009dce:	2180      	movs	r1, #128	@ 0x80
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f001 f8da 	bl	800af8a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2201      	movs	r2, #1
 8009dda:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2240      	movs	r2, #64	@ 0x40
 8009de0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009de2:	2300      	movs	r3, #0
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3708      	adds	r7, #8
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}

08009dec <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009dec:	b480      	push	{r7}
 8009dee:	b083      	sub	sp, #12
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	460b      	mov	r3, r1
 8009df6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	78fa      	ldrb	r2, [r7, #3]
 8009dfc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009dfe:	2300      	movs	r3, #0
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	370c      	adds	r7, #12
 8009e04:	46bd      	mov	sp, r7
 8009e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0a:	4770      	bx	lr

08009e0c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b083      	sub	sp, #12
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e1a:	b2da      	uxtb	r2, r3
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2204      	movs	r2, #4
 8009e26:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009e2a:	2300      	movs	r3, #0
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	370c      	adds	r7, #12
 8009e30:	46bd      	mov	sp, r7
 8009e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e36:	4770      	bx	lr

08009e38 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b083      	sub	sp, #12
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e46:	b2db      	uxtb	r3, r3
 8009e48:	2b04      	cmp	r3, #4
 8009e4a:	d106      	bne.n	8009e5a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009e52:	b2da      	uxtb	r2, r3
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009e5a:	2300      	movs	r3, #0
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	370c      	adds	r7, #12
 8009e60:	46bd      	mov	sp, r7
 8009e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e66:	4770      	bx	lr

08009e68 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b082      	sub	sp, #8
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d101      	bne.n	8009e7e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009e7a:	2303      	movs	r3, #3
 8009e7c:	e012      	b.n	8009ea4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e84:	b2db      	uxtb	r3, r3
 8009e86:	2b03      	cmp	r3, #3
 8009e88:	d10b      	bne.n	8009ea2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e90:	69db      	ldr	r3, [r3, #28]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d005      	beq.n	8009ea2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e9c:	69db      	ldr	r3, [r3, #28]
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009ea2:	2300      	movs	r3, #0
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3708      	adds	r7, #8
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}

08009eac <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b082      	sub	sp, #8
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
 8009eb4:	460b      	mov	r3, r1
 8009eb6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d101      	bne.n	8009ec6 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8009ec2:	2303      	movs	r3, #3
 8009ec4:	e014      	b.n	8009ef0 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ecc:	b2db      	uxtb	r3, r3
 8009ece:	2b03      	cmp	r3, #3
 8009ed0:	d10d      	bne.n	8009eee <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ed8:	6a1b      	ldr	r3, [r3, #32]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d007      	beq.n	8009eee <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ee4:	6a1b      	ldr	r3, [r3, #32]
 8009ee6:	78fa      	ldrb	r2, [r7, #3]
 8009ee8:	4611      	mov	r1, r2
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009eee:	2300      	movs	r3, #0
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3708      	adds	r7, #8
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}

08009ef8 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b082      	sub	sp, #8
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
 8009f00:	460b      	mov	r3, r1
 8009f02:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d101      	bne.n	8009f12 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8009f0e:	2303      	movs	r3, #3
 8009f10:	e014      	b.n	8009f3c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f18:	b2db      	uxtb	r3, r3
 8009f1a:	2b03      	cmp	r3, #3
 8009f1c:	d10d      	bne.n	8009f3a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d007      	beq.n	8009f3a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f32:	78fa      	ldrb	r2, [r7, #3]
 8009f34:	4611      	mov	r1, r2
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009f3a:	2300      	movs	r3, #0
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	3708      	adds	r7, #8
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}

08009f44 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b083      	sub	sp, #12
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009f4c:	2300      	movs	r3, #0
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	370c      	adds	r7, #12
 8009f52:	46bd      	mov	sp, r7
 8009f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f58:	4770      	bx	lr

08009f5a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009f5a:	b580      	push	{r7, lr}
 8009f5c:	b082      	sub	sp, #8
 8009f5e:	af00      	add	r7, sp, #0
 8009f60:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2201      	movs	r2, #1
 8009f66:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  if (pdev->pClass != NULL)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d009      	beq.n	8009f88 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f7a:	685b      	ldr	r3, [r3, #4]
 8009f7c:	687a      	ldr	r2, [r7, #4]
 8009f7e:	6852      	ldr	r2, [r2, #4]
 8009f80:	b2d2      	uxtb	r2, r2
 8009f82:	4611      	mov	r1, r2
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	4798      	blx	r3
  }

  return USBD_OK;
 8009f88:	2300      	movs	r3, #0
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	3708      	adds	r7, #8
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}

08009f92 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009f92:	b480      	push	{r7}
 8009f94:	b087      	sub	sp, #28
 8009f96:	af00      	add	r7, sp, #0
 8009f98:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	781b      	ldrb	r3, [r3, #0]
 8009fa2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	3301      	adds	r3, #1
 8009fa8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	781b      	ldrb	r3, [r3, #0]
 8009fae:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009fb0:	8a3b      	ldrh	r3, [r7, #16]
 8009fb2:	021b      	lsls	r3, r3, #8
 8009fb4:	b21a      	sxth	r2, r3
 8009fb6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	b21b      	sxth	r3, r3
 8009fbe:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009fc0:	89fb      	ldrh	r3, [r7, #14]
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	371c      	adds	r7, #28
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fcc:	4770      	bx	lr
	...

08009fd0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b084      	sub	sp, #16
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
 8009fd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009fda:	2300      	movs	r3, #0
 8009fdc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	781b      	ldrb	r3, [r3, #0]
 8009fe2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009fe6:	2b40      	cmp	r3, #64	@ 0x40
 8009fe8:	d005      	beq.n	8009ff6 <USBD_StdDevReq+0x26>
 8009fea:	2b40      	cmp	r3, #64	@ 0x40
 8009fec:	d853      	bhi.n	800a096 <USBD_StdDevReq+0xc6>
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d00b      	beq.n	800a00a <USBD_StdDevReq+0x3a>
 8009ff2:	2b20      	cmp	r3, #32
 8009ff4:	d14f      	bne.n	800a096 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ffc:	689b      	ldr	r3, [r3, #8]
 8009ffe:	6839      	ldr	r1, [r7, #0]
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	4798      	blx	r3
 800a004:	4603      	mov	r3, r0
 800a006:	73fb      	strb	r3, [r7, #15]
      break;
 800a008:	e04a      	b.n	800a0a0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	785b      	ldrb	r3, [r3, #1]
 800a00e:	2b09      	cmp	r3, #9
 800a010:	d83b      	bhi.n	800a08a <USBD_StdDevReq+0xba>
 800a012:	a201      	add	r2, pc, #4	@ (adr r2, 800a018 <USBD_StdDevReq+0x48>)
 800a014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a018:	0800a06d 	.word	0x0800a06d
 800a01c:	0800a081 	.word	0x0800a081
 800a020:	0800a08b 	.word	0x0800a08b
 800a024:	0800a077 	.word	0x0800a077
 800a028:	0800a08b 	.word	0x0800a08b
 800a02c:	0800a04b 	.word	0x0800a04b
 800a030:	0800a041 	.word	0x0800a041
 800a034:	0800a08b 	.word	0x0800a08b
 800a038:	0800a063 	.word	0x0800a063
 800a03c:	0800a055 	.word	0x0800a055
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a040:	6839      	ldr	r1, [r7, #0]
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f000 f9de 	bl	800a404 <USBD_GetDescriptor>
          break;
 800a048:	e024      	b.n	800a094 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a04a:	6839      	ldr	r1, [r7, #0]
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	f000 fb55 	bl	800a6fc <USBD_SetAddress>
          break;
 800a052:	e01f      	b.n	800a094 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a054:	6839      	ldr	r1, [r7, #0]
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f000 fb94 	bl	800a784 <USBD_SetConfig>
 800a05c:	4603      	mov	r3, r0
 800a05e:	73fb      	strb	r3, [r7, #15]
          break;
 800a060:	e018      	b.n	800a094 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a062:	6839      	ldr	r1, [r7, #0]
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f000 fc33 	bl	800a8d0 <USBD_GetConfig>
          break;
 800a06a:	e013      	b.n	800a094 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a06c:	6839      	ldr	r1, [r7, #0]
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f000 fc64 	bl	800a93c <USBD_GetStatus>
          break;
 800a074:	e00e      	b.n	800a094 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a076:	6839      	ldr	r1, [r7, #0]
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f000 fc93 	bl	800a9a4 <USBD_SetFeature>
          break;
 800a07e:	e009      	b.n	800a094 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a080:	6839      	ldr	r1, [r7, #0]
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f000 fca2 	bl	800a9cc <USBD_ClrFeature>
          break;
 800a088:	e004      	b.n	800a094 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800a08a:	6839      	ldr	r1, [r7, #0]
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f000 fcf9 	bl	800aa84 <USBD_CtlError>
          break;
 800a092:	bf00      	nop
      }
      break;
 800a094:	e004      	b.n	800a0a0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800a096:	6839      	ldr	r1, [r7, #0]
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	f000 fcf3 	bl	800aa84 <USBD_CtlError>
      break;
 800a09e:	bf00      	nop
  }

  return ret;
 800a0a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3710      	adds	r7, #16
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}
 800a0aa:	bf00      	nop

0800a0ac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b084      	sub	sp, #16
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
 800a0b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	781b      	ldrb	r3, [r3, #0]
 800a0be:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a0c2:	2b40      	cmp	r3, #64	@ 0x40
 800a0c4:	d005      	beq.n	800a0d2 <USBD_StdItfReq+0x26>
 800a0c6:	2b40      	cmp	r3, #64	@ 0x40
 800a0c8:	d82f      	bhi.n	800a12a <USBD_StdItfReq+0x7e>
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d001      	beq.n	800a0d2 <USBD_StdItfReq+0x26>
 800a0ce:	2b20      	cmp	r3, #32
 800a0d0:	d12b      	bne.n	800a12a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a0d8:	b2db      	uxtb	r3, r3
 800a0da:	3b01      	subs	r3, #1
 800a0dc:	2b02      	cmp	r3, #2
 800a0de:	d81d      	bhi.n	800a11c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	889b      	ldrh	r3, [r3, #4]
 800a0e4:	b2db      	uxtb	r3, r3
 800a0e6:	2b0f      	cmp	r3, #15
 800a0e8:	d813      	bhi.n	800a112 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a0f0:	689b      	ldr	r3, [r3, #8]
 800a0f2:	6839      	ldr	r1, [r7, #0]
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	4798      	blx	r3
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	88db      	ldrh	r3, [r3, #6]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d110      	bne.n	800a126 <USBD_StdItfReq+0x7a>
 800a104:	7bfb      	ldrb	r3, [r7, #15]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d10d      	bne.n	800a126 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f000 fd85 	bl	800ac1a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a110:	e009      	b.n	800a126 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800a112:	6839      	ldr	r1, [r7, #0]
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f000 fcb5 	bl	800aa84 <USBD_CtlError>
          break;
 800a11a:	e004      	b.n	800a126 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800a11c:	6839      	ldr	r1, [r7, #0]
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f000 fcb0 	bl	800aa84 <USBD_CtlError>
          break;
 800a124:	e000      	b.n	800a128 <USBD_StdItfReq+0x7c>
          break;
 800a126:	bf00      	nop
      }
      break;
 800a128:	e004      	b.n	800a134 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800a12a:	6839      	ldr	r1, [r7, #0]
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f000 fca9 	bl	800aa84 <USBD_CtlError>
      break;
 800a132:	bf00      	nop
  }

  return ret;
 800a134:	7bfb      	ldrb	r3, [r7, #15]
}
 800a136:	4618      	mov	r0, r3
 800a138:	3710      	adds	r7, #16
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}

0800a13e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a13e:	b580      	push	{r7, lr}
 800a140:	b084      	sub	sp, #16
 800a142:	af00      	add	r7, sp, #0
 800a144:	6078      	str	r0, [r7, #4]
 800a146:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a148:	2300      	movs	r3, #0
 800a14a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	889b      	ldrh	r3, [r3, #4]
 800a150:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	781b      	ldrb	r3, [r3, #0]
 800a156:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a15a:	2b40      	cmp	r3, #64	@ 0x40
 800a15c:	d007      	beq.n	800a16e <USBD_StdEPReq+0x30>
 800a15e:	2b40      	cmp	r3, #64	@ 0x40
 800a160:	f200 8145 	bhi.w	800a3ee <USBD_StdEPReq+0x2b0>
 800a164:	2b00      	cmp	r3, #0
 800a166:	d00c      	beq.n	800a182 <USBD_StdEPReq+0x44>
 800a168:	2b20      	cmp	r3, #32
 800a16a:	f040 8140 	bne.w	800a3ee <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a174:	689b      	ldr	r3, [r3, #8]
 800a176:	6839      	ldr	r1, [r7, #0]
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	4798      	blx	r3
 800a17c:	4603      	mov	r3, r0
 800a17e:	73fb      	strb	r3, [r7, #15]
      break;
 800a180:	e13a      	b.n	800a3f8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	785b      	ldrb	r3, [r3, #1]
 800a186:	2b03      	cmp	r3, #3
 800a188:	d007      	beq.n	800a19a <USBD_StdEPReq+0x5c>
 800a18a:	2b03      	cmp	r3, #3
 800a18c:	f300 8129 	bgt.w	800a3e2 <USBD_StdEPReq+0x2a4>
 800a190:	2b00      	cmp	r3, #0
 800a192:	d07f      	beq.n	800a294 <USBD_StdEPReq+0x156>
 800a194:	2b01      	cmp	r3, #1
 800a196:	d03c      	beq.n	800a212 <USBD_StdEPReq+0xd4>
 800a198:	e123      	b.n	800a3e2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1a0:	b2db      	uxtb	r3, r3
 800a1a2:	2b02      	cmp	r3, #2
 800a1a4:	d002      	beq.n	800a1ac <USBD_StdEPReq+0x6e>
 800a1a6:	2b03      	cmp	r3, #3
 800a1a8:	d016      	beq.n	800a1d8 <USBD_StdEPReq+0x9a>
 800a1aa:	e02c      	b.n	800a206 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a1ac:	7bbb      	ldrb	r3, [r7, #14]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d00d      	beq.n	800a1ce <USBD_StdEPReq+0x90>
 800a1b2:	7bbb      	ldrb	r3, [r7, #14]
 800a1b4:	2b80      	cmp	r3, #128	@ 0x80
 800a1b6:	d00a      	beq.n	800a1ce <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a1b8:	7bbb      	ldrb	r3, [r7, #14]
 800a1ba:	4619      	mov	r1, r3
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f000 ff29 	bl	800b014 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a1c2:	2180      	movs	r1, #128	@ 0x80
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f000 ff25 	bl	800b014 <USBD_LL_StallEP>
 800a1ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a1cc:	e020      	b.n	800a210 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800a1ce:	6839      	ldr	r1, [r7, #0]
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f000 fc57 	bl	800aa84 <USBD_CtlError>
              break;
 800a1d6:	e01b      	b.n	800a210 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	885b      	ldrh	r3, [r3, #2]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d10e      	bne.n	800a1fe <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a1e0:	7bbb      	ldrb	r3, [r7, #14]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d00b      	beq.n	800a1fe <USBD_StdEPReq+0xc0>
 800a1e6:	7bbb      	ldrb	r3, [r7, #14]
 800a1e8:	2b80      	cmp	r3, #128	@ 0x80
 800a1ea:	d008      	beq.n	800a1fe <USBD_StdEPReq+0xc0>
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	88db      	ldrh	r3, [r3, #6]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d104      	bne.n	800a1fe <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a1f4:	7bbb      	ldrb	r3, [r7, #14]
 800a1f6:	4619      	mov	r1, r3
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f000 ff0b 	bl	800b014 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f000 fd0b 	bl	800ac1a <USBD_CtlSendStatus>

              break;
 800a204:	e004      	b.n	800a210 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800a206:	6839      	ldr	r1, [r7, #0]
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f000 fc3b 	bl	800aa84 <USBD_CtlError>
              break;
 800a20e:	bf00      	nop
          }
          break;
 800a210:	e0ec      	b.n	800a3ec <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a218:	b2db      	uxtb	r3, r3
 800a21a:	2b02      	cmp	r3, #2
 800a21c:	d002      	beq.n	800a224 <USBD_StdEPReq+0xe6>
 800a21e:	2b03      	cmp	r3, #3
 800a220:	d016      	beq.n	800a250 <USBD_StdEPReq+0x112>
 800a222:	e030      	b.n	800a286 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a224:	7bbb      	ldrb	r3, [r7, #14]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d00d      	beq.n	800a246 <USBD_StdEPReq+0x108>
 800a22a:	7bbb      	ldrb	r3, [r7, #14]
 800a22c:	2b80      	cmp	r3, #128	@ 0x80
 800a22e:	d00a      	beq.n	800a246 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a230:	7bbb      	ldrb	r3, [r7, #14]
 800a232:	4619      	mov	r1, r3
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f000 feed 	bl	800b014 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a23a:	2180      	movs	r1, #128	@ 0x80
 800a23c:	6878      	ldr	r0, [r7, #4]
 800a23e:	f000 fee9 	bl	800b014 <USBD_LL_StallEP>
 800a242:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a244:	e025      	b.n	800a292 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800a246:	6839      	ldr	r1, [r7, #0]
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	f000 fc1b 	bl	800aa84 <USBD_CtlError>
              break;
 800a24e:	e020      	b.n	800a292 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	885b      	ldrh	r3, [r3, #2]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d11b      	bne.n	800a290 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a258:	7bbb      	ldrb	r3, [r7, #14]
 800a25a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d004      	beq.n	800a26c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a262:	7bbb      	ldrb	r3, [r7, #14]
 800a264:	4619      	mov	r1, r3
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f000 fef3 	bl	800b052 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f000 fcd4 	bl	800ac1a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a278:	689b      	ldr	r3, [r3, #8]
 800a27a:	6839      	ldr	r1, [r7, #0]
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	4798      	blx	r3
 800a280:	4603      	mov	r3, r0
 800a282:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800a284:	e004      	b.n	800a290 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800a286:	6839      	ldr	r1, [r7, #0]
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f000 fbfb 	bl	800aa84 <USBD_CtlError>
              break;
 800a28e:	e000      	b.n	800a292 <USBD_StdEPReq+0x154>
              break;
 800a290:	bf00      	nop
          }
          break;
 800a292:	e0ab      	b.n	800a3ec <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a29a:	b2db      	uxtb	r3, r3
 800a29c:	2b02      	cmp	r3, #2
 800a29e:	d002      	beq.n	800a2a6 <USBD_StdEPReq+0x168>
 800a2a0:	2b03      	cmp	r3, #3
 800a2a2:	d032      	beq.n	800a30a <USBD_StdEPReq+0x1cc>
 800a2a4:	e097      	b.n	800a3d6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a2a6:	7bbb      	ldrb	r3, [r7, #14]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d007      	beq.n	800a2bc <USBD_StdEPReq+0x17e>
 800a2ac:	7bbb      	ldrb	r3, [r7, #14]
 800a2ae:	2b80      	cmp	r3, #128	@ 0x80
 800a2b0:	d004      	beq.n	800a2bc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800a2b2:	6839      	ldr	r1, [r7, #0]
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f000 fbe5 	bl	800aa84 <USBD_CtlError>
                break;
 800a2ba:	e091      	b.n	800a3e0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a2bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	da0b      	bge.n	800a2dc <USBD_StdEPReq+0x19e>
 800a2c4:	7bbb      	ldrb	r3, [r7, #14]
 800a2c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a2ca:	4613      	mov	r3, r2
 800a2cc:	009b      	lsls	r3, r3, #2
 800a2ce:	4413      	add	r3, r2
 800a2d0:	009b      	lsls	r3, r3, #2
 800a2d2:	3310      	adds	r3, #16
 800a2d4:	687a      	ldr	r2, [r7, #4]
 800a2d6:	4413      	add	r3, r2
 800a2d8:	3304      	adds	r3, #4
 800a2da:	e00b      	b.n	800a2f4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a2dc:	7bbb      	ldrb	r3, [r7, #14]
 800a2de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a2e2:	4613      	mov	r3, r2
 800a2e4:	009b      	lsls	r3, r3, #2
 800a2e6:	4413      	add	r3, r2
 800a2e8:	009b      	lsls	r3, r3, #2
 800a2ea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a2ee:	687a      	ldr	r2, [r7, #4]
 800a2f0:	4413      	add	r3, r2
 800a2f2:	3304      	adds	r3, #4
 800a2f4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	2202      	movs	r2, #2
 800a300:	4619      	mov	r1, r3
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	f000 fc2f 	bl	800ab66 <USBD_CtlSendData>
              break;
 800a308:	e06a      	b.n	800a3e0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a30a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	da11      	bge.n	800a336 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a312:	7bbb      	ldrb	r3, [r7, #14]
 800a314:	f003 020f 	and.w	r2, r3, #15
 800a318:	6879      	ldr	r1, [r7, #4]
 800a31a:	4613      	mov	r3, r2
 800a31c:	009b      	lsls	r3, r3, #2
 800a31e:	4413      	add	r3, r2
 800a320:	009b      	lsls	r3, r3, #2
 800a322:	440b      	add	r3, r1
 800a324:	3324      	adds	r3, #36	@ 0x24
 800a326:	881b      	ldrh	r3, [r3, #0]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d117      	bne.n	800a35c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a32c:	6839      	ldr	r1, [r7, #0]
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f000 fba8 	bl	800aa84 <USBD_CtlError>
                  break;
 800a334:	e054      	b.n	800a3e0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a336:	7bbb      	ldrb	r3, [r7, #14]
 800a338:	f003 020f 	and.w	r2, r3, #15
 800a33c:	6879      	ldr	r1, [r7, #4]
 800a33e:	4613      	mov	r3, r2
 800a340:	009b      	lsls	r3, r3, #2
 800a342:	4413      	add	r3, r2
 800a344:	009b      	lsls	r3, r3, #2
 800a346:	440b      	add	r3, r1
 800a348:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a34c:	881b      	ldrh	r3, [r3, #0]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d104      	bne.n	800a35c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a352:	6839      	ldr	r1, [r7, #0]
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f000 fb95 	bl	800aa84 <USBD_CtlError>
                  break;
 800a35a:	e041      	b.n	800a3e0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a35c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a360:	2b00      	cmp	r3, #0
 800a362:	da0b      	bge.n	800a37c <USBD_StdEPReq+0x23e>
 800a364:	7bbb      	ldrb	r3, [r7, #14]
 800a366:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a36a:	4613      	mov	r3, r2
 800a36c:	009b      	lsls	r3, r3, #2
 800a36e:	4413      	add	r3, r2
 800a370:	009b      	lsls	r3, r3, #2
 800a372:	3310      	adds	r3, #16
 800a374:	687a      	ldr	r2, [r7, #4]
 800a376:	4413      	add	r3, r2
 800a378:	3304      	adds	r3, #4
 800a37a:	e00b      	b.n	800a394 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a37c:	7bbb      	ldrb	r3, [r7, #14]
 800a37e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a382:	4613      	mov	r3, r2
 800a384:	009b      	lsls	r3, r3, #2
 800a386:	4413      	add	r3, r2
 800a388:	009b      	lsls	r3, r3, #2
 800a38a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a38e:	687a      	ldr	r2, [r7, #4]
 800a390:	4413      	add	r3, r2
 800a392:	3304      	adds	r3, #4
 800a394:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a396:	7bbb      	ldrb	r3, [r7, #14]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d002      	beq.n	800a3a2 <USBD_StdEPReq+0x264>
 800a39c:	7bbb      	ldrb	r3, [r7, #14]
 800a39e:	2b80      	cmp	r3, #128	@ 0x80
 800a3a0:	d103      	bne.n	800a3aa <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	601a      	str	r2, [r3, #0]
 800a3a8:	e00e      	b.n	800a3c8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a3aa:	7bbb      	ldrb	r3, [r7, #14]
 800a3ac:	4619      	mov	r1, r3
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f000 fe6e 	bl	800b090 <USBD_LL_IsStallEP>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d003      	beq.n	800a3c2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	2201      	movs	r2, #1
 800a3be:	601a      	str	r2, [r3, #0]
 800a3c0:	e002      	b.n	800a3c8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	2202      	movs	r2, #2
 800a3cc:	4619      	mov	r1, r3
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f000 fbc9 	bl	800ab66 <USBD_CtlSendData>
              break;
 800a3d4:	e004      	b.n	800a3e0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800a3d6:	6839      	ldr	r1, [r7, #0]
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f000 fb53 	bl	800aa84 <USBD_CtlError>
              break;
 800a3de:	bf00      	nop
          }
          break;
 800a3e0:	e004      	b.n	800a3ec <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800a3e2:	6839      	ldr	r1, [r7, #0]
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f000 fb4d 	bl	800aa84 <USBD_CtlError>
          break;
 800a3ea:	bf00      	nop
      }
      break;
 800a3ec:	e004      	b.n	800a3f8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800a3ee:	6839      	ldr	r1, [r7, #0]
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f000 fb47 	bl	800aa84 <USBD_CtlError>
      break;
 800a3f6:	bf00      	nop
  }

  return ret;
 800a3f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3710      	adds	r7, #16
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}
	...

0800a404 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b084      	sub	sp, #16
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
 800a40c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a40e:	2300      	movs	r3, #0
 800a410:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a412:	2300      	movs	r3, #0
 800a414:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a416:	2300      	movs	r3, #0
 800a418:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	885b      	ldrh	r3, [r3, #2]
 800a41e:	0a1b      	lsrs	r3, r3, #8
 800a420:	b29b      	uxth	r3, r3
 800a422:	3b01      	subs	r3, #1
 800a424:	2b06      	cmp	r3, #6
 800a426:	f200 813b 	bhi.w	800a6a0 <USBD_GetDescriptor+0x29c>
 800a42a:	a201      	add	r2, pc, #4	@ (adr r2, 800a430 <USBD_GetDescriptor+0x2c>)
 800a42c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a430:	0800a44d 	.word	0x0800a44d
 800a434:	0800a465 	.word	0x0800a465
 800a438:	0800a4a5 	.word	0x0800a4a5
 800a43c:	0800a6a1 	.word	0x0800a6a1
 800a440:	0800a6a1 	.word	0x0800a6a1
 800a444:	0800a641 	.word	0x0800a641
 800a448:	0800a66d 	.word	0x0800a66d
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	687a      	ldr	r2, [r7, #4]
 800a456:	7c12      	ldrb	r2, [r2, #16]
 800a458:	f107 0108 	add.w	r1, r7, #8
 800a45c:	4610      	mov	r0, r2
 800a45e:	4798      	blx	r3
 800a460:	60f8      	str	r0, [r7, #12]
      break;
 800a462:	e125      	b.n	800a6b0 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	7c1b      	ldrb	r3, [r3, #16]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d10d      	bne.n	800a488 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a474:	f107 0208 	add.w	r2, r7, #8
 800a478:	4610      	mov	r0, r2
 800a47a:	4798      	blx	r3
 800a47c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	3301      	adds	r3, #1
 800a482:	2202      	movs	r2, #2
 800a484:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a486:	e113      	b.n	800a6b0 <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a48e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a490:	f107 0208 	add.w	r2, r7, #8
 800a494:	4610      	mov	r0, r2
 800a496:	4798      	blx	r3
 800a498:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	3301      	adds	r3, #1
 800a49e:	2202      	movs	r2, #2
 800a4a0:	701a      	strb	r2, [r3, #0]
      break;
 800a4a2:	e105      	b.n	800a6b0 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	885b      	ldrh	r3, [r3, #2]
 800a4a8:	b2db      	uxtb	r3, r3
 800a4aa:	2b05      	cmp	r3, #5
 800a4ac:	f200 80ac 	bhi.w	800a608 <USBD_GetDescriptor+0x204>
 800a4b0:	a201      	add	r2, pc, #4	@ (adr r2, 800a4b8 <USBD_GetDescriptor+0xb4>)
 800a4b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4b6:	bf00      	nop
 800a4b8:	0800a4d1 	.word	0x0800a4d1
 800a4bc:	0800a505 	.word	0x0800a505
 800a4c0:	0800a539 	.word	0x0800a539
 800a4c4:	0800a56d 	.word	0x0800a56d
 800a4c8:	0800a5a1 	.word	0x0800a5a1
 800a4cc:	0800a5d5 	.word	0x0800a5d5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a4d6:	685b      	ldr	r3, [r3, #4]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d00b      	beq.n	800a4f4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a4e2:	685b      	ldr	r3, [r3, #4]
 800a4e4:	687a      	ldr	r2, [r7, #4]
 800a4e6:	7c12      	ldrb	r2, [r2, #16]
 800a4e8:	f107 0108 	add.w	r1, r7, #8
 800a4ec:	4610      	mov	r0, r2
 800a4ee:	4798      	blx	r3
 800a4f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a4f2:	e0a4      	b.n	800a63e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800a4f4:	6839      	ldr	r1, [r7, #0]
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f000 fac4 	bl	800aa84 <USBD_CtlError>
            err++;
 800a4fc:	7afb      	ldrb	r3, [r7, #11]
 800a4fe:	3301      	adds	r3, #1
 800a500:	72fb      	strb	r3, [r7, #11]
          break;
 800a502:	e09c      	b.n	800a63e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a50a:	689b      	ldr	r3, [r3, #8]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d00b      	beq.n	800a528 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a516:	689b      	ldr	r3, [r3, #8]
 800a518:	687a      	ldr	r2, [r7, #4]
 800a51a:	7c12      	ldrb	r2, [r2, #16]
 800a51c:	f107 0108 	add.w	r1, r7, #8
 800a520:	4610      	mov	r0, r2
 800a522:	4798      	blx	r3
 800a524:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a526:	e08a      	b.n	800a63e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800a528:	6839      	ldr	r1, [r7, #0]
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f000 faaa 	bl	800aa84 <USBD_CtlError>
            err++;
 800a530:	7afb      	ldrb	r3, [r7, #11]
 800a532:	3301      	adds	r3, #1
 800a534:	72fb      	strb	r3, [r7, #11]
          break;
 800a536:	e082      	b.n	800a63e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a53e:	68db      	ldr	r3, [r3, #12]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d00b      	beq.n	800a55c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a54a:	68db      	ldr	r3, [r3, #12]
 800a54c:	687a      	ldr	r2, [r7, #4]
 800a54e:	7c12      	ldrb	r2, [r2, #16]
 800a550:	f107 0108 	add.w	r1, r7, #8
 800a554:	4610      	mov	r0, r2
 800a556:	4798      	blx	r3
 800a558:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a55a:	e070      	b.n	800a63e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800a55c:	6839      	ldr	r1, [r7, #0]
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f000 fa90 	bl	800aa84 <USBD_CtlError>
            err++;
 800a564:	7afb      	ldrb	r3, [r7, #11]
 800a566:	3301      	adds	r3, #1
 800a568:	72fb      	strb	r3, [r7, #11]
          break;
 800a56a:	e068      	b.n	800a63e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a572:	691b      	ldr	r3, [r3, #16]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d00b      	beq.n	800a590 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a57e:	691b      	ldr	r3, [r3, #16]
 800a580:	687a      	ldr	r2, [r7, #4]
 800a582:	7c12      	ldrb	r2, [r2, #16]
 800a584:	f107 0108 	add.w	r1, r7, #8
 800a588:	4610      	mov	r0, r2
 800a58a:	4798      	blx	r3
 800a58c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a58e:	e056      	b.n	800a63e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800a590:	6839      	ldr	r1, [r7, #0]
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f000 fa76 	bl	800aa84 <USBD_CtlError>
            err++;
 800a598:	7afb      	ldrb	r3, [r7, #11]
 800a59a:	3301      	adds	r3, #1
 800a59c:	72fb      	strb	r3, [r7, #11]
          break;
 800a59e:	e04e      	b.n	800a63e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a5a6:	695b      	ldr	r3, [r3, #20]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d00b      	beq.n	800a5c4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a5b2:	695b      	ldr	r3, [r3, #20]
 800a5b4:	687a      	ldr	r2, [r7, #4]
 800a5b6:	7c12      	ldrb	r2, [r2, #16]
 800a5b8:	f107 0108 	add.w	r1, r7, #8
 800a5bc:	4610      	mov	r0, r2
 800a5be:	4798      	blx	r3
 800a5c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a5c2:	e03c      	b.n	800a63e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800a5c4:	6839      	ldr	r1, [r7, #0]
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	f000 fa5c 	bl	800aa84 <USBD_CtlError>
            err++;
 800a5cc:	7afb      	ldrb	r3, [r7, #11]
 800a5ce:	3301      	adds	r3, #1
 800a5d0:	72fb      	strb	r3, [r7, #11]
          break;
 800a5d2:	e034      	b.n	800a63e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a5da:	699b      	ldr	r3, [r3, #24]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d00b      	beq.n	800a5f8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a5e6:	699b      	ldr	r3, [r3, #24]
 800a5e8:	687a      	ldr	r2, [r7, #4]
 800a5ea:	7c12      	ldrb	r2, [r2, #16]
 800a5ec:	f107 0108 	add.w	r1, r7, #8
 800a5f0:	4610      	mov	r0, r2
 800a5f2:	4798      	blx	r3
 800a5f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a5f6:	e022      	b.n	800a63e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800a5f8:	6839      	ldr	r1, [r7, #0]
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f000 fa42 	bl	800aa84 <USBD_CtlError>
            err++;
 800a600:	7afb      	ldrb	r3, [r7, #11]
 800a602:	3301      	adds	r3, #1
 800a604:	72fb      	strb	r3, [r7, #11]
          break;
 800a606:	e01a      	b.n	800a63e <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a60e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a610:	2b00      	cmp	r3, #0
 800a612:	d00c      	beq.n	800a62e <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a61a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a61c:	683a      	ldr	r2, [r7, #0]
 800a61e:	8852      	ldrh	r2, [r2, #2]
 800a620:	b2d1      	uxtb	r1, r2
 800a622:	f107 0208 	add.w	r2, r7, #8
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	4798      	blx	r3
 800a62a:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 800a62c:	e006      	b.n	800a63c <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 800a62e:	6839      	ldr	r1, [r7, #0]
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f000 fa27 	bl	800aa84 <USBD_CtlError>
            err++;
 800a636:	7afb      	ldrb	r3, [r7, #11]
 800a638:	3301      	adds	r3, #1
 800a63a:	72fb      	strb	r3, [r7, #11]
          break;
 800a63c:	bf00      	nop
      }
      break;
 800a63e:	e037      	b.n	800a6b0 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	7c1b      	ldrb	r3, [r3, #16]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d109      	bne.n	800a65c <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a64e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a650:	f107 0208 	add.w	r2, r7, #8
 800a654:	4610      	mov	r0, r2
 800a656:	4798      	blx	r3
 800a658:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a65a:	e029      	b.n	800a6b0 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 800a65c:	6839      	ldr	r1, [r7, #0]
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f000 fa10 	bl	800aa84 <USBD_CtlError>
        err++;
 800a664:	7afb      	ldrb	r3, [r7, #11]
 800a666:	3301      	adds	r3, #1
 800a668:	72fb      	strb	r3, [r7, #11]
      break;
 800a66a:	e021      	b.n	800a6b0 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	7c1b      	ldrb	r3, [r3, #16]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d10d      	bne.n	800a690 <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a67a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a67c:	f107 0208 	add.w	r2, r7, #8
 800a680:	4610      	mov	r0, r2
 800a682:	4798      	blx	r3
 800a684:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	3301      	adds	r3, #1
 800a68a:	2207      	movs	r2, #7
 800a68c:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a68e:	e00f      	b.n	800a6b0 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 800a690:	6839      	ldr	r1, [r7, #0]
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f000 f9f6 	bl	800aa84 <USBD_CtlError>
        err++;
 800a698:	7afb      	ldrb	r3, [r7, #11]
 800a69a:	3301      	adds	r3, #1
 800a69c:	72fb      	strb	r3, [r7, #11]
      break;
 800a69e:	e007      	b.n	800a6b0 <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 800a6a0:	6839      	ldr	r1, [r7, #0]
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f000 f9ee 	bl	800aa84 <USBD_CtlError>
      err++;
 800a6a8:	7afb      	ldrb	r3, [r7, #11]
 800a6aa:	3301      	adds	r3, #1
 800a6ac:	72fb      	strb	r3, [r7, #11]
      break;
 800a6ae:	bf00      	nop
  }

  if (err != 0U)
 800a6b0:	7afb      	ldrb	r3, [r7, #11]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d11e      	bne.n	800a6f4 <USBD_GetDescriptor+0x2f0>
  {
    return;
  }

  if (req->wLength != 0U)
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	88db      	ldrh	r3, [r3, #6]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d016      	beq.n	800a6ec <USBD_GetDescriptor+0x2e8>
  {
    if (len != 0U)
 800a6be:	893b      	ldrh	r3, [r7, #8]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d00e      	beq.n	800a6e2 <USBD_GetDescriptor+0x2de>
    {
      len = MIN(len, req->wLength);
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	88da      	ldrh	r2, [r3, #6]
 800a6c8:	893b      	ldrh	r3, [r7, #8]
 800a6ca:	4293      	cmp	r3, r2
 800a6cc:	bf28      	it	cs
 800a6ce:	4613      	movcs	r3, r2
 800a6d0:	b29b      	uxth	r3, r3
 800a6d2:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a6d4:	893b      	ldrh	r3, [r7, #8]
 800a6d6:	461a      	mov	r2, r3
 800a6d8:	68f9      	ldr	r1, [r7, #12]
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f000 fa43 	bl	800ab66 <USBD_CtlSendData>
 800a6e0:	e009      	b.n	800a6f6 <USBD_GetDescriptor+0x2f2>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a6e2:	6839      	ldr	r1, [r7, #0]
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f000 f9cd 	bl	800aa84 <USBD_CtlError>
 800a6ea:	e004      	b.n	800a6f6 <USBD_GetDescriptor+0x2f2>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f000 fa94 	bl	800ac1a <USBD_CtlSendStatus>
 800a6f2:	e000      	b.n	800a6f6 <USBD_GetDescriptor+0x2f2>
    return;
 800a6f4:	bf00      	nop
  }
}
 800a6f6:	3710      	adds	r7, #16
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}

0800a6fc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b084      	sub	sp, #16
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
 800a704:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	889b      	ldrh	r3, [r3, #4]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d131      	bne.n	800a772 <USBD_SetAddress+0x76>
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	88db      	ldrh	r3, [r3, #6]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d12d      	bne.n	800a772 <USBD_SetAddress+0x76>
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	885b      	ldrh	r3, [r3, #2]
 800a71a:	2b7f      	cmp	r3, #127	@ 0x7f
 800a71c:	d829      	bhi.n	800a772 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	885b      	ldrh	r3, [r3, #2]
 800a722:	b2db      	uxtb	r3, r3
 800a724:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a728:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a730:	b2db      	uxtb	r3, r3
 800a732:	2b03      	cmp	r3, #3
 800a734:	d104      	bne.n	800a740 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a736:	6839      	ldr	r1, [r7, #0]
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f000 f9a3 	bl	800aa84 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a73e:	e01d      	b.n	800a77c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	7bfa      	ldrb	r2, [r7, #15]
 800a744:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a748:	7bfb      	ldrb	r3, [r7, #15]
 800a74a:	4619      	mov	r1, r3
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	f000 fccb 	bl	800b0e8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	f000 fa61 	bl	800ac1a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a758:	7bfb      	ldrb	r3, [r7, #15]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d004      	beq.n	800a768 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2202      	movs	r2, #2
 800a762:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a766:	e009      	b.n	800a77c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2201      	movs	r2, #1
 800a76c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a770:	e004      	b.n	800a77c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a772:	6839      	ldr	r1, [r7, #0]
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	f000 f985 	bl	800aa84 <USBD_CtlError>
  }
}
 800a77a:	bf00      	nop
 800a77c:	bf00      	nop
 800a77e:	3710      	adds	r7, #16
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}

0800a784 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b084      	sub	sp, #16
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
 800a78c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a78e:	2300      	movs	r3, #0
 800a790:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	885b      	ldrh	r3, [r3, #2]
 800a796:	b2da      	uxtb	r2, r3
 800a798:	4b4c      	ldr	r3, [pc, #304]	@ (800a8cc <USBD_SetConfig+0x148>)
 800a79a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a79c:	4b4b      	ldr	r3, [pc, #300]	@ (800a8cc <USBD_SetConfig+0x148>)
 800a79e:	781b      	ldrb	r3, [r3, #0]
 800a7a0:	2b01      	cmp	r3, #1
 800a7a2:	d905      	bls.n	800a7b0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a7a4:	6839      	ldr	r1, [r7, #0]
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f000 f96c 	bl	800aa84 <USBD_CtlError>
    return USBD_FAIL;
 800a7ac:	2303      	movs	r3, #3
 800a7ae:	e088      	b.n	800a8c2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a7b6:	b2db      	uxtb	r3, r3
 800a7b8:	2b02      	cmp	r3, #2
 800a7ba:	d002      	beq.n	800a7c2 <USBD_SetConfig+0x3e>
 800a7bc:	2b03      	cmp	r3, #3
 800a7be:	d025      	beq.n	800a80c <USBD_SetConfig+0x88>
 800a7c0:	e071      	b.n	800a8a6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a7c2:	4b42      	ldr	r3, [pc, #264]	@ (800a8cc <USBD_SetConfig+0x148>)
 800a7c4:	781b      	ldrb	r3, [r3, #0]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d01c      	beq.n	800a804 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800a7ca:	4b40      	ldr	r3, [pc, #256]	@ (800a8cc <USBD_SetConfig+0x148>)
 800a7cc:	781b      	ldrb	r3, [r3, #0]
 800a7ce:	461a      	mov	r2, r3
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a7d4:	4b3d      	ldr	r3, [pc, #244]	@ (800a8cc <USBD_SetConfig+0x148>)
 800a7d6:	781b      	ldrb	r3, [r3, #0]
 800a7d8:	4619      	mov	r1, r3
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f7ff f93b 	bl	8009a56 <USBD_SetClassConfig>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a7e4:	7bfb      	ldrb	r3, [r7, #15]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d004      	beq.n	800a7f4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800a7ea:	6839      	ldr	r1, [r7, #0]
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f000 f949 	bl	800aa84 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a7f2:	e065      	b.n	800a8c0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f000 fa10 	bl	800ac1a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2203      	movs	r2, #3
 800a7fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a802:	e05d      	b.n	800a8c0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a804:	6878      	ldr	r0, [r7, #4]
 800a806:	f000 fa08 	bl	800ac1a <USBD_CtlSendStatus>
      break;
 800a80a:	e059      	b.n	800a8c0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a80c:	4b2f      	ldr	r3, [pc, #188]	@ (800a8cc <USBD_SetConfig+0x148>)
 800a80e:	781b      	ldrb	r3, [r3, #0]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d112      	bne.n	800a83a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2202      	movs	r2, #2
 800a818:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a81c:	4b2b      	ldr	r3, [pc, #172]	@ (800a8cc <USBD_SetConfig+0x148>)
 800a81e:	781b      	ldrb	r3, [r3, #0]
 800a820:	461a      	mov	r2, r3
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a826:	4b29      	ldr	r3, [pc, #164]	@ (800a8cc <USBD_SetConfig+0x148>)
 800a828:	781b      	ldrb	r3, [r3, #0]
 800a82a:	4619      	mov	r1, r3
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f7ff f92e 	bl	8009a8e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	f000 f9f1 	bl	800ac1a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a838:	e042      	b.n	800a8c0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800a83a:	4b24      	ldr	r3, [pc, #144]	@ (800a8cc <USBD_SetConfig+0x148>)
 800a83c:	781b      	ldrb	r3, [r3, #0]
 800a83e:	461a      	mov	r2, r3
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	685b      	ldr	r3, [r3, #4]
 800a844:	429a      	cmp	r2, r3
 800a846:	d02a      	beq.n	800a89e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	685b      	ldr	r3, [r3, #4]
 800a84c:	b2db      	uxtb	r3, r3
 800a84e:	4619      	mov	r1, r3
 800a850:	6878      	ldr	r0, [r7, #4]
 800a852:	f7ff f91c 	bl	8009a8e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a856:	4b1d      	ldr	r3, [pc, #116]	@ (800a8cc <USBD_SetConfig+0x148>)
 800a858:	781b      	ldrb	r3, [r3, #0]
 800a85a:	461a      	mov	r2, r3
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a860:	4b1a      	ldr	r3, [pc, #104]	@ (800a8cc <USBD_SetConfig+0x148>)
 800a862:	781b      	ldrb	r3, [r3, #0]
 800a864:	4619      	mov	r1, r3
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f7ff f8f5 	bl	8009a56 <USBD_SetClassConfig>
 800a86c:	4603      	mov	r3, r0
 800a86e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a870:	7bfb      	ldrb	r3, [r7, #15]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d00f      	beq.n	800a896 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800a876:	6839      	ldr	r1, [r7, #0]
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f000 f903 	bl	800aa84 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	685b      	ldr	r3, [r3, #4]
 800a882:	b2db      	uxtb	r3, r3
 800a884:	4619      	mov	r1, r3
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f7ff f901 	bl	8009a8e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2202      	movs	r2, #2
 800a890:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a894:	e014      	b.n	800a8c0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f000 f9bf 	bl	800ac1a <USBD_CtlSendStatus>
      break;
 800a89c:	e010      	b.n	800a8c0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f000 f9bb 	bl	800ac1a <USBD_CtlSendStatus>
      break;
 800a8a4:	e00c      	b.n	800a8c0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a8a6:	6839      	ldr	r1, [r7, #0]
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f000 f8eb 	bl	800aa84 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a8ae:	4b07      	ldr	r3, [pc, #28]	@ (800a8cc <USBD_SetConfig+0x148>)
 800a8b0:	781b      	ldrb	r3, [r3, #0]
 800a8b2:	4619      	mov	r1, r3
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f7ff f8ea 	bl	8009a8e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a8ba:	2303      	movs	r3, #3
 800a8bc:	73fb      	strb	r3, [r7, #15]
      break;
 800a8be:	bf00      	nop
  }

  return ret;
 800a8c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	3710      	adds	r7, #16
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}
 800a8ca:	bf00      	nop
 800a8cc:	200023b4 	.word	0x200023b4

0800a8d0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b082      	sub	sp, #8
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
 800a8d8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	88db      	ldrh	r3, [r3, #6]
 800a8de:	2b01      	cmp	r3, #1
 800a8e0:	d004      	beq.n	800a8ec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a8e2:	6839      	ldr	r1, [r7, #0]
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f000 f8cd 	bl	800aa84 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a8ea:	e023      	b.n	800a934 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8f2:	b2db      	uxtb	r3, r3
 800a8f4:	2b02      	cmp	r3, #2
 800a8f6:	dc02      	bgt.n	800a8fe <USBD_GetConfig+0x2e>
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	dc03      	bgt.n	800a904 <USBD_GetConfig+0x34>
 800a8fc:	e015      	b.n	800a92a <USBD_GetConfig+0x5a>
 800a8fe:	2b03      	cmp	r3, #3
 800a900:	d00b      	beq.n	800a91a <USBD_GetConfig+0x4a>
 800a902:	e012      	b.n	800a92a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2200      	movs	r2, #0
 800a908:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	3308      	adds	r3, #8
 800a90e:	2201      	movs	r2, #1
 800a910:	4619      	mov	r1, r3
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	f000 f927 	bl	800ab66 <USBD_CtlSendData>
        break;
 800a918:	e00c      	b.n	800a934 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	3304      	adds	r3, #4
 800a91e:	2201      	movs	r2, #1
 800a920:	4619      	mov	r1, r3
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f000 f91f 	bl	800ab66 <USBD_CtlSendData>
        break;
 800a928:	e004      	b.n	800a934 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a92a:	6839      	ldr	r1, [r7, #0]
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f000 f8a9 	bl	800aa84 <USBD_CtlError>
        break;
 800a932:	bf00      	nop
}
 800a934:	bf00      	nop
 800a936:	3708      	adds	r7, #8
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}

0800a93c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b082      	sub	sp, #8
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
 800a944:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a94c:	b2db      	uxtb	r3, r3
 800a94e:	3b01      	subs	r3, #1
 800a950:	2b02      	cmp	r3, #2
 800a952:	d81e      	bhi.n	800a992 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	88db      	ldrh	r3, [r3, #6]
 800a958:	2b02      	cmp	r3, #2
 800a95a:	d004      	beq.n	800a966 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a95c:	6839      	ldr	r1, [r7, #0]
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f000 f890 	bl	800aa84 <USBD_CtlError>
        break;
 800a964:	e01a      	b.n	800a99c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2201      	movs	r2, #1
 800a96a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a972:	2b00      	cmp	r3, #0
 800a974:	d005      	beq.n	800a982 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	68db      	ldr	r3, [r3, #12]
 800a97a:	f043 0202 	orr.w	r2, r3, #2
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	330c      	adds	r3, #12
 800a986:	2202      	movs	r2, #2
 800a988:	4619      	mov	r1, r3
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f000 f8eb 	bl	800ab66 <USBD_CtlSendData>
      break;
 800a990:	e004      	b.n	800a99c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a992:	6839      	ldr	r1, [r7, #0]
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	f000 f875 	bl	800aa84 <USBD_CtlError>
      break;
 800a99a:	bf00      	nop
  }
}
 800a99c:	bf00      	nop
 800a99e:	3708      	adds	r7, #8
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}

0800a9a4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b082      	sub	sp, #8
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
 800a9ac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	885b      	ldrh	r3, [r3, #2]
 800a9b2:	2b01      	cmp	r3, #1
 800a9b4:	d106      	bne.n	800a9c4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2201      	movs	r2, #1
 800a9ba:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f000 f92b 	bl	800ac1a <USBD_CtlSendStatus>
  }
}
 800a9c4:	bf00      	nop
 800a9c6:	3708      	adds	r7, #8
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}

0800a9cc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b082      	sub	sp, #8
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
 800a9d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9dc:	b2db      	uxtb	r3, r3
 800a9de:	3b01      	subs	r3, #1
 800a9e0:	2b02      	cmp	r3, #2
 800a9e2:	d80b      	bhi.n	800a9fc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	885b      	ldrh	r3, [r3, #2]
 800a9e8:	2b01      	cmp	r3, #1
 800a9ea:	d10c      	bne.n	800aa06 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	f000 f910 	bl	800ac1a <USBD_CtlSendStatus>
      }
      break;
 800a9fa:	e004      	b.n	800aa06 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a9fc:	6839      	ldr	r1, [r7, #0]
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f000 f840 	bl	800aa84 <USBD_CtlError>
      break;
 800aa04:	e000      	b.n	800aa08 <USBD_ClrFeature+0x3c>
      break;
 800aa06:	bf00      	nop
  }
}
 800aa08:	bf00      	nop
 800aa0a:	3708      	adds	r7, #8
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd80      	pop	{r7, pc}

0800aa10 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b084      	sub	sp, #16
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
 800aa18:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	781a      	ldrb	r2, [r3, #0]
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	3301      	adds	r3, #1
 800aa2a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	781a      	ldrb	r2, [r3, #0]
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	3301      	adds	r3, #1
 800aa38:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800aa3a:	68f8      	ldr	r0, [r7, #12]
 800aa3c:	f7ff faa9 	bl	8009f92 <SWAPBYTE>
 800aa40:	4603      	mov	r3, r0
 800aa42:	461a      	mov	r2, r3
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	3301      	adds	r3, #1
 800aa4c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	3301      	adds	r3, #1
 800aa52:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800aa54:	68f8      	ldr	r0, [r7, #12]
 800aa56:	f7ff fa9c 	bl	8009f92 <SWAPBYTE>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	461a      	mov	r2, r3
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	3301      	adds	r3, #1
 800aa66:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	3301      	adds	r3, #1
 800aa6c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800aa6e:	68f8      	ldr	r0, [r7, #12]
 800aa70:	f7ff fa8f 	bl	8009f92 <SWAPBYTE>
 800aa74:	4603      	mov	r3, r0
 800aa76:	461a      	mov	r2, r3
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	80da      	strh	r2, [r3, #6]
}
 800aa7c:	bf00      	nop
 800aa7e:	3710      	adds	r7, #16
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd80      	pop	{r7, pc}

0800aa84 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b082      	sub	sp, #8
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
 800aa8c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800aa8e:	2180      	movs	r1, #128	@ 0x80
 800aa90:	6878      	ldr	r0, [r7, #4]
 800aa92:	f000 fabf 	bl	800b014 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800aa96:	2100      	movs	r1, #0
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f000 fabb 	bl	800b014 <USBD_LL_StallEP>
}
 800aa9e:	bf00      	nop
 800aaa0:	3708      	adds	r7, #8
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}

0800aaa6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800aaa6:	b580      	push	{r7, lr}
 800aaa8:	b086      	sub	sp, #24
 800aaaa:	af00      	add	r7, sp, #0
 800aaac:	60f8      	str	r0, [r7, #12]
 800aaae:	60b9      	str	r1, [r7, #8]
 800aab0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800aab2:	2300      	movs	r3, #0
 800aab4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d036      	beq.n	800ab2a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800aac0:	6938      	ldr	r0, [r7, #16]
 800aac2:	f000 f836 	bl	800ab32 <USBD_GetLen>
 800aac6:	4603      	mov	r3, r0
 800aac8:	3301      	adds	r3, #1
 800aaca:	b29b      	uxth	r3, r3
 800aacc:	005b      	lsls	r3, r3, #1
 800aace:	b29a      	uxth	r2, r3
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800aad4:	7dfb      	ldrb	r3, [r7, #23]
 800aad6:	68ba      	ldr	r2, [r7, #8]
 800aad8:	4413      	add	r3, r2
 800aada:	687a      	ldr	r2, [r7, #4]
 800aadc:	7812      	ldrb	r2, [r2, #0]
 800aade:	701a      	strb	r2, [r3, #0]
  idx++;
 800aae0:	7dfb      	ldrb	r3, [r7, #23]
 800aae2:	3301      	adds	r3, #1
 800aae4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800aae6:	7dfb      	ldrb	r3, [r7, #23]
 800aae8:	68ba      	ldr	r2, [r7, #8]
 800aaea:	4413      	add	r3, r2
 800aaec:	2203      	movs	r2, #3
 800aaee:	701a      	strb	r2, [r3, #0]
  idx++;
 800aaf0:	7dfb      	ldrb	r3, [r7, #23]
 800aaf2:	3301      	adds	r3, #1
 800aaf4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800aaf6:	e013      	b.n	800ab20 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800aaf8:	7dfb      	ldrb	r3, [r7, #23]
 800aafa:	68ba      	ldr	r2, [r7, #8]
 800aafc:	4413      	add	r3, r2
 800aafe:	693a      	ldr	r2, [r7, #16]
 800ab00:	7812      	ldrb	r2, [r2, #0]
 800ab02:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ab04:	693b      	ldr	r3, [r7, #16]
 800ab06:	3301      	adds	r3, #1
 800ab08:	613b      	str	r3, [r7, #16]
    idx++;
 800ab0a:	7dfb      	ldrb	r3, [r7, #23]
 800ab0c:	3301      	adds	r3, #1
 800ab0e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ab10:	7dfb      	ldrb	r3, [r7, #23]
 800ab12:	68ba      	ldr	r2, [r7, #8]
 800ab14:	4413      	add	r3, r2
 800ab16:	2200      	movs	r2, #0
 800ab18:	701a      	strb	r2, [r3, #0]
    idx++;
 800ab1a:	7dfb      	ldrb	r3, [r7, #23]
 800ab1c:	3301      	adds	r3, #1
 800ab1e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	781b      	ldrb	r3, [r3, #0]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d1e7      	bne.n	800aaf8 <USBD_GetString+0x52>
 800ab28:	e000      	b.n	800ab2c <USBD_GetString+0x86>
    return;
 800ab2a:	bf00      	nop
  }
}
 800ab2c:	3718      	adds	r7, #24
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}

0800ab32 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ab32:	b480      	push	{r7}
 800ab34:	b085      	sub	sp, #20
 800ab36:	af00      	add	r7, sp, #0
 800ab38:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ab42:	e005      	b.n	800ab50 <USBD_GetLen+0x1e>
  {
    len++;
 800ab44:	7bfb      	ldrb	r3, [r7, #15]
 800ab46:	3301      	adds	r3, #1
 800ab48:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	3301      	adds	r3, #1
 800ab4e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	781b      	ldrb	r3, [r3, #0]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d1f5      	bne.n	800ab44 <USBD_GetLen+0x12>
  }

  return len;
 800ab58:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3714      	adds	r7, #20
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab64:	4770      	bx	lr

0800ab66 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ab66:	b580      	push	{r7, lr}
 800ab68:	b084      	sub	sp, #16
 800ab6a:	af00      	add	r7, sp, #0
 800ab6c:	60f8      	str	r0, [r7, #12]
 800ab6e:	60b9      	str	r1, [r7, #8]
 800ab70:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	2202      	movs	r2, #2
 800ab76:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	687a      	ldr	r2, [r7, #4]
 800ab7e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	687a      	ldr	r2, [r7, #4]
 800ab84:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	68ba      	ldr	r2, [r7, #8]
 800ab8a:	2100      	movs	r1, #0
 800ab8c:	68f8      	ldr	r0, [r7, #12]
 800ab8e:	f000 faca 	bl	800b126 <USBD_LL_Transmit>

  return USBD_OK;
 800ab92:	2300      	movs	r3, #0
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	3710      	adds	r7, #16
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bd80      	pop	{r7, pc}

0800ab9c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b084      	sub	sp, #16
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	60f8      	str	r0, [r7, #12]
 800aba4:	60b9      	str	r1, [r7, #8]
 800aba6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	68ba      	ldr	r2, [r7, #8]
 800abac:	2100      	movs	r1, #0
 800abae:	68f8      	ldr	r0, [r7, #12]
 800abb0:	f000 fab9 	bl	800b126 <USBD_LL_Transmit>

  return USBD_OK;
 800abb4:	2300      	movs	r3, #0
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3710      	adds	r7, #16
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}

0800abbe <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800abbe:	b580      	push	{r7, lr}
 800abc0:	b084      	sub	sp, #16
 800abc2:	af00      	add	r7, sp, #0
 800abc4:	60f8      	str	r0, [r7, #12]
 800abc6:	60b9      	str	r1, [r7, #8]
 800abc8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	2203      	movs	r2, #3
 800abce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	687a      	ldr	r2, [r7, #4]
 800abd6:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	687a      	ldr	r2, [r7, #4]
 800abde:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	68ba      	ldr	r2, [r7, #8]
 800abe6:	2100      	movs	r1, #0
 800abe8:	68f8      	ldr	r0, [r7, #12]
 800abea:	f000 fabd 	bl	800b168 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800abee:	2300      	movs	r3, #0
}
 800abf0:	4618      	mov	r0, r3
 800abf2:	3710      	adds	r7, #16
 800abf4:	46bd      	mov	sp, r7
 800abf6:	bd80      	pop	{r7, pc}

0800abf8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b084      	sub	sp, #16
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	60f8      	str	r0, [r7, #12]
 800ac00:	60b9      	str	r1, [r7, #8]
 800ac02:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	68ba      	ldr	r2, [r7, #8]
 800ac08:	2100      	movs	r1, #0
 800ac0a:	68f8      	ldr	r0, [r7, #12]
 800ac0c:	f000 faac 	bl	800b168 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ac10:	2300      	movs	r3, #0
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	3710      	adds	r7, #16
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd80      	pop	{r7, pc}

0800ac1a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ac1a:	b580      	push	{r7, lr}
 800ac1c:	b082      	sub	sp, #8
 800ac1e:	af00      	add	r7, sp, #0
 800ac20:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2204      	movs	r2, #4
 800ac26:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	2100      	movs	r1, #0
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f000 fa78 	bl	800b126 <USBD_LL_Transmit>

  return USBD_OK;
 800ac36:	2300      	movs	r3, #0
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3708      	adds	r7, #8
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}

0800ac40 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b082      	sub	sp, #8
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2205      	movs	r2, #5
 800ac4c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ac50:	2300      	movs	r3, #0
 800ac52:	2200      	movs	r2, #0
 800ac54:	2100      	movs	r1, #0
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	f000 fa86 	bl	800b168 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ac5c:	2300      	movs	r3, #0
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	3708      	adds	r7, #8
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}

0800ac66 <HAL_PCDEx_SetTxFiFoInBytes>:
/* Private functions ---------------------------------------------------------*/

/* USER CODE BEGIN 1 */
#if(!STM32F1_DEVICE)
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFoInBytes(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800ac66:	b580      	push	{r7, lr}
 800ac68:	b082      	sub	sp, #8
 800ac6a:	af00      	add	r7, sp, #0
 800ac6c:	6078      	str	r0, [r7, #4]
 800ac6e:	460b      	mov	r3, r1
 800ac70:	70fb      	strb	r3, [r7, #3]
 800ac72:	4613      	mov	r3, r2
 800ac74:	803b      	strh	r3, [r7, #0]
	return HAL_PCDEx_SetTxFiFo(hpcd, fifo, (size/4));
 800ac76:	883b      	ldrh	r3, [r7, #0]
 800ac78:	089b      	lsrs	r3, r3, #2
 800ac7a:	b29a      	uxth	r2, r3
 800ac7c:	78fb      	ldrb	r3, [r7, #3]
 800ac7e:	4619      	mov	r1, r3
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f7f9 f923 	bl	8003ecc <HAL_PCDEx_SetTxFiFo>
 800ac86:	4603      	mov	r3, r0
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	3708      	adds	r7, #8
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}

0800ac90 <HAL_PCDEx_SetRxFiFoInBytes>:

HAL_StatusTypeDef HAL_PCDEx_SetRxFiFoInBytes(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b082      	sub	sp, #8
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
 800ac98:	460b      	mov	r3, r1
 800ac9a:	807b      	strh	r3, [r7, #2]
	return HAL_PCDEx_SetRxFiFo(hpcd, (size/4));
 800ac9c:	887b      	ldrh	r3, [r7, #2]
 800ac9e:	089b      	lsrs	r3, r3, #2
 800aca0:	b29b      	uxth	r3, r3
 800aca2:	4619      	mov	r1, r3
 800aca4:	6878      	ldr	r0, [r7, #4]
 800aca6:	f7f9 f958 	bl	8003f5a <HAL_PCDEx_SetRxFiFo>
 800acaa:	4603      	mov	r3, r0
}
 800acac:	4618      	mov	r0, r3
 800acae:	3708      	adds	r7, #8
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}

0800acb4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b082      	sub	sp, #8
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef *)hpcd->pData, (uint8_t *)hpcd->Setup);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800acc8:	4619      	mov	r1, r3
 800acca:	4610      	mov	r0, r2
 800accc:	f7fe fef7 	bl	8009abe <USBD_LL_SetupStage>
}
 800acd0:	bf00      	nop
 800acd2:	3708      	adds	r7, #8
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd80      	pop	{r7, pc}

0800acd8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b082      	sub	sp, #8
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
 800ace0:	460b      	mov	r3, r1
 800ace2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800acea:	78fa      	ldrb	r2, [r7, #3]
 800acec:	6879      	ldr	r1, [r7, #4]
 800acee:	4613      	mov	r3, r2
 800acf0:	00db      	lsls	r3, r3, #3
 800acf2:	4413      	add	r3, r2
 800acf4:	009b      	lsls	r3, r3, #2
 800acf6:	440b      	add	r3, r1
 800acf8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800acfc:	681a      	ldr	r2, [r3, #0]
 800acfe:	78fb      	ldrb	r3, [r7, #3]
 800ad00:	4619      	mov	r1, r3
 800ad02:	f7fe ff31 	bl	8009b68 <USBD_LL_DataOutStage>
}
 800ad06:	bf00      	nop
 800ad08:	3708      	adds	r7, #8
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}

0800ad0e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad0e:	b580      	push	{r7, lr}
 800ad10:	b082      	sub	sp, #8
 800ad12:	af00      	add	r7, sp, #0
 800ad14:	6078      	str	r0, [r7, #4]
 800ad16:	460b      	mov	r3, r1
 800ad18:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ad20:	78fa      	ldrb	r2, [r7, #3]
 800ad22:	6879      	ldr	r1, [r7, #4]
 800ad24:	4613      	mov	r3, r2
 800ad26:	00db      	lsls	r3, r3, #3
 800ad28:	4413      	add	r3, r2
 800ad2a:	009b      	lsls	r3, r3, #2
 800ad2c:	440b      	add	r3, r1
 800ad2e:	3320      	adds	r3, #32
 800ad30:	681a      	ldr	r2, [r3, #0]
 800ad32:	78fb      	ldrb	r3, [r7, #3]
 800ad34:	4619      	mov	r1, r3
 800ad36:	f7fe ff7a 	bl	8009c2e <USBD_LL_DataInStage>
}
 800ad3a:	bf00      	nop
 800ad3c:	3708      	adds	r7, #8
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd80      	pop	{r7, pc}

0800ad42 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad42:	b580      	push	{r7, lr}
 800ad44:	b082      	sub	sp, #8
 800ad46:	af00      	add	r7, sp, #0
 800ad48:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef *)hpcd->pData);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ad50:	4618      	mov	r0, r3
 800ad52:	f7ff f889 	bl	8009e68 <USBD_LL_SOF>
}
 800ad56:	bf00      	nop
 800ad58:	3708      	adds	r7, #8
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bd80      	pop	{r7, pc}

0800ad5e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad5e:	b580      	push	{r7, lr}
 800ad60:	b084      	sub	sp, #16
 800ad62:	af00      	add	r7, sp, #0
 800ad64:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ad66:	2301      	movs	r3, #1
 800ad68:	73fb      	strb	r3, [r7, #15]

  if (hpcd->Init.speed == PCD_SPEED_FULL)
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	79db      	ldrb	r3, [r3, #7]
 800ad6e:	2b02      	cmp	r3, #2
 800ad70:	d102      	bne.n	800ad78 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_FULL; 
 800ad72:	2301      	movs	r3, #1
 800ad74:	73fb      	strb	r3, [r7, #15]
 800ad76:	e008      	b.n	800ad8a <HAL_PCD_ResetCallback+0x2c>
  }
  #if(!STM32F1_DEVICE)
  else if (hpcd->Init.speed == PCD_SPEED_HIGH)
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	79db      	ldrb	r3, [r3, #7]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d102      	bne.n	800ad86 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_HIGH;
 800ad80:	2300      	movs	r3, #0
 800ad82:	73fb      	strb	r3, [r7, #15]
 800ad84:	e001      	b.n	800ad8a <HAL_PCD_ResetCallback+0x2c>
  }
  #endif
  else
  {
    Error_Handler();
 800ad86:	f7f5 fe1f 	bl	80009c8 <Error_Handler>
  }
  /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef *)hpcd->pData, speed);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ad90:	7bfa      	ldrb	r2, [r7, #15]
 800ad92:	4611      	mov	r1, r2
 800ad94:	4618      	mov	r0, r3
 800ad96:	f7ff f829 	bl	8009dec <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef *)hpcd->pData);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ada0:	4618      	mov	r0, r3
 800ada2:	f7fe ffda 	bl	8009d5a <USBD_LL_Reset>
}
 800ada6:	bf00      	nop
 800ada8:	3710      	adds	r7, #16
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}
	...

0800adb0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b082      	sub	sp, #8
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef *)hpcd->pData);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800adbe:	4618      	mov	r0, r3
 800adc0:	f7ff f824 	bl	8009e0c <USBD_LL_Suspend>
#if (!STM32F1_DEVICE)
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	687a      	ldr	r2, [r7, #4]
 800add0:	6812      	ldr	r2, [r2, #0]
 800add2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800add6:	f043 0301 	orr.w	r3, r3, #1
 800adda:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	7adb      	ldrb	r3, [r3, #11]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d005      	beq.n	800adf0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ade4:	4b04      	ldr	r3, [pc, #16]	@ (800adf8 <HAL_PCD_SuspendCallback+0x48>)
 800ade6:	691b      	ldr	r3, [r3, #16]
 800ade8:	4a03      	ldr	r2, [pc, #12]	@ (800adf8 <HAL_PCD_SuspendCallback+0x48>)
 800adea:	f043 0306 	orr.w	r3, r3, #6
 800adee:	6113      	str	r3, [r2, #16]
  }
#endif
  /* USER CODE END 2 */
}
 800adf0:	bf00      	nop
 800adf2:	3708      	adds	r7, #8
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}
 800adf8:	e000ed00 	.word	0xe000ed00

0800adfc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b082      	sub	sp, #8
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef *)hpcd->pData);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f7ff f814 	bl	8009e38 <USBD_LL_Resume>
}
 800ae10:	bf00      	nop
 800ae12:	3708      	adds	r7, #8
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bd80      	pop	{r7, pc}

0800ae18 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b082      	sub	sp, #8
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	460b      	mov	r3, r1
 800ae22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ae2a:	78fa      	ldrb	r2, [r7, #3]
 800ae2c:	4611      	mov	r1, r2
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f7ff f862 	bl	8009ef8 <USBD_LL_IsoOUTIncomplete>
}
 800ae34:	bf00      	nop
 800ae36:	3708      	adds	r7, #8
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}

0800ae3c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b082      	sub	sp, #8
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
 800ae44:	460b      	mov	r3, r1
 800ae46:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ae4e:	78fa      	ldrb	r2, [r7, #3]
 800ae50:	4611      	mov	r1, r2
 800ae52:	4618      	mov	r0, r3
 800ae54:	f7ff f82a 	bl	8009eac <USBD_LL_IsoINIncomplete>
}
 800ae58:	bf00      	nop
 800ae5a:	3708      	adds	r7, #8
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bd80      	pop	{r7, pc}

0800ae60 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b082      	sub	sp, #8
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef *)hpcd->pData);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f7ff f868 	bl	8009f44 <USBD_LL_DevConnected>
}
 800ae74:	bf00      	nop
 800ae76:	3708      	adds	r7, #8
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}

0800ae7c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b082      	sub	sp, #8
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef *)hpcd->pData);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f7ff f865 	bl	8009f5a <USBD_LL_DevDisconnected>
}
 800ae90:	bf00      	nop
 800ae92:	3708      	adds	r7, #8
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}

0800ae98 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b084      	sub	sp, #16
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
#else
  /**FULL SPEED USB */
#if (STM32F1_DEVICE) /** for STM32F1 or similar */
  hpcd_USB_OTG_PTR = &hpcd_USB_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
#else
  hpcd_USB_OTG_PTR = &hpcd_USB_OTG_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
 800aea0:	4b27      	ldr	r3, [pc, #156]	@ (800af40 <USBD_LL_Init+0xa8>)
 800aea2:	4a28      	ldr	r2, [pc, #160]	@ (800af44 <USBD_LL_Init+0xac>)
 800aea4:	601a      	str	r2, [r3, #0]
#endif

  if (pdev->id == DEVICE_FS)
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	781b      	ldrb	r3, [r3, #0]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d143      	bne.n	800af36 <USBD_LL_Init+0x9e>
  {
    /* Link the driver to the stack. */
    hpcd_USB_OTG_PTR->pData = pdev;
 800aeae:	4b24      	ldr	r3, [pc, #144]	@ (800af40 <USBD_LL_Init+0xa8>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	687a      	ldr	r2, [r7, #4]
 800aeb4:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
    pdev->pData = hpcd_USB_OTG_PTR;
 800aeb8:	4b21      	ldr	r3, [pc, #132]	@ (800af40 <USBD_LL_Init+0xa8>)
 800aeba:	681a      	ldr	r2, [r3, #0]
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f8c3 2310 	str.w	r2, [r3, #784]	@ 0x310
      pma_track += 8;
    }
#endif
#else /** if HAL_PCDEx_SetRxFiFo() is used by HAL driver */

    HAL_PCDEx_SetRxFiFoInBytes(hpcd_USB_OTG_PTR, 512); // ALL OUT EP Buffer
 800aec2:	4b1f      	ldr	r3, [pc, #124]	@ (800af40 <USBD_LL_Init+0xa8>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800aeca:	4618      	mov	r0, r3
 800aecc:	f7ff fee0 	bl	800ac90 <HAL_PCDEx_SetRxFiFoInBytes>

    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, 0, 64); // EP0 IN
 800aed0:	4b1b      	ldr	r3, [pc, #108]	@ (800af40 <USBD_LL_Init+0xa8>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	2240      	movs	r2, #64	@ 0x40
 800aed6:	2100      	movs	r1, #0
 800aed8:	4618      	mov	r0, r3
 800aeda:	f7ff fec4 	bl	800ac66 <HAL_PCDEx_SetTxFiFoInBytes>
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (HID_KEYBOARD_IN_EP & 0x7F), 64);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CUSTOM_HID_IN_EP & 0x7F), 64);
 800aede:	4b18      	ldr	r3, [pc, #96]	@ (800af40 <USBD_LL_Init+0xa8>)
 800aee0:	6818      	ldr	r0, [r3, #0]
 800aee2:	4b19      	ldr	r3, [pc, #100]	@ (800af48 <USBD_LL_Init+0xb0>)
 800aee4:	781b      	ldrb	r3, [r3, #0]
 800aee6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aeea:	b2db      	uxtb	r3, r3
 800aeec:	2240      	movs	r2, #64	@ 0x40
 800aeee:	4619      	mov	r1, r3
 800aef0:	f7ff feb9 	bl	800ac66 <HAL_PCDEx_SetTxFiFoInBytes>
#endif
#if (USBD_USE_PRNTR == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (PRNT_IN_EP & 0x7F), 128);
#endif
#if (USBD_USE_CDC_ACM == 1)
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800aef4:	2300      	movs	r3, #0
 800aef6:	73fb      	strb	r3, [r7, #15]
 800aef8:	e01a      	b.n	800af30 <USBD_LL_Init+0x98>
    {
      HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CDC_IN_EP[i] & 0x7F), 128);
 800aefa:	4b11      	ldr	r3, [pc, #68]	@ (800af40 <USBD_LL_Init+0xa8>)
 800aefc:	6818      	ldr	r0, [r3, #0]
 800aefe:	7bfb      	ldrb	r3, [r7, #15]
 800af00:	4a12      	ldr	r2, [pc, #72]	@ (800af4c <USBD_LL_Init+0xb4>)
 800af02:	5cd3      	ldrb	r3, [r2, r3]
 800af04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af08:	b2db      	uxtb	r3, r3
 800af0a:	2280      	movs	r2, #128	@ 0x80
 800af0c:	4619      	mov	r1, r3
 800af0e:	f7ff feaa 	bl	800ac66 <HAL_PCDEx_SetTxFiFoInBytes>
      HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CDC_CMD_EP[i] & 0x7F), 64);
 800af12:	4b0b      	ldr	r3, [pc, #44]	@ (800af40 <USBD_LL_Init+0xa8>)
 800af14:	6818      	ldr	r0, [r3, #0]
 800af16:	7bfb      	ldrb	r3, [r7, #15]
 800af18:	4a0d      	ldr	r2, [pc, #52]	@ (800af50 <USBD_LL_Init+0xb8>)
 800af1a:	5cd3      	ldrb	r3, [r2, r3]
 800af1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af20:	b2db      	uxtb	r3, r3
 800af22:	2240      	movs	r2, #64	@ 0x40
 800af24:	4619      	mov	r1, r3
 800af26:	f7ff fe9e 	bl	800ac66 <HAL_PCDEx_SetTxFiFoInBytes>
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800af2a:	7bfb      	ldrb	r3, [r7, #15]
 800af2c:	3301      	adds	r3, #1
 800af2e:	73fb      	strb	r3, [r7, #15]
 800af30:	7bfb      	ldrb	r3, [r7, #15]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d0e1      	beq.n	800aefa <USBD_LL_Init+0x62>
  HAL_PCD_RegisterDataOutStageCallback(hpcd_USB_OTG_PTR, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(hpcd_USB_OTG_PTR, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  return USBD_OK;
 800af36:	2300      	movs	r3, #0
}
 800af38:	4618      	mov	r0, r3
 800af3a:	3710      	adds	r7, #16
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}
 800af40:	200023b8 	.word	0x200023b8
 800af44:	20000570 	.word	0x20000570
 800af48:	2000020e 	.word	0x2000020e
 800af4c:	20002010 	.word	0x20002010
 800af50:	20002018 	.word	0x20002018

0800af54 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b084      	sub	sp, #16
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af5c:	2300      	movs	r3, #0
 800af5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af60:	2300      	movs	r3, #0
 800af62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800af6a:	4618      	mov	r0, r3
 800af6c:	f7f7 fecf 	bl	8002d0e <HAL_PCD_Start>
 800af70:	4603      	mov	r3, r0
 800af72:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800af74:	7bfb      	ldrb	r3, [r7, #15]
 800af76:	4618      	mov	r0, r3
 800af78:	f000 f92a 	bl	800b1d0 <USBD_Get_USB_Status>
 800af7c:	4603      	mov	r3, r0
 800af7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af80:	7bbb      	ldrb	r3, [r7, #14]
}
 800af82:	4618      	mov	r0, r3
 800af84:	3710      	adds	r7, #16
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}

0800af8a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800af8a:	b580      	push	{r7, lr}
 800af8c:	b084      	sub	sp, #16
 800af8e:	af00      	add	r7, sp, #0
 800af90:	6078      	str	r0, [r7, #4]
 800af92:	4608      	mov	r0, r1
 800af94:	4611      	mov	r1, r2
 800af96:	461a      	mov	r2, r3
 800af98:	4603      	mov	r3, r0
 800af9a:	70fb      	strb	r3, [r7, #3]
 800af9c:	460b      	mov	r3, r1
 800af9e:	70bb      	strb	r3, [r7, #2]
 800afa0:	4613      	mov	r3, r2
 800afa2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afa4:	2300      	movs	r3, #0
 800afa6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afa8:	2300      	movs	r3, #0
 800afaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 800afb2:	78bb      	ldrb	r3, [r7, #2]
 800afb4:	883a      	ldrh	r2, [r7, #0]
 800afb6:	78f9      	ldrb	r1, [r7, #3]
 800afb8:	f7f8 fba3 	bl	8003702 <HAL_PCD_EP_Open>
 800afbc:	4603      	mov	r3, r0
 800afbe:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800afc0:	7bfb      	ldrb	r3, [r7, #15]
 800afc2:	4618      	mov	r0, r3
 800afc4:	f000 f904 	bl	800b1d0 <USBD_Get_USB_Status>
 800afc8:	4603      	mov	r3, r0
 800afca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800afcc:	7bbb      	ldrb	r3, [r7, #14]
}
 800afce:	4618      	mov	r0, r3
 800afd0:	3710      	adds	r7, #16
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd80      	pop	{r7, pc}

0800afd6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800afd6:	b580      	push	{r7, lr}
 800afd8:	b084      	sub	sp, #16
 800afda:	af00      	add	r7, sp, #0
 800afdc:	6078      	str	r0, [r7, #4]
 800afde:	460b      	mov	r3, r1
 800afe0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afe2:	2300      	movs	r3, #0
 800afe4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afe6:	2300      	movs	r3, #0
 800afe8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800aff0:	78fa      	ldrb	r2, [r7, #3]
 800aff2:	4611      	mov	r1, r2
 800aff4:	4618      	mov	r0, r3
 800aff6:	f7f8 fbee 	bl	80037d6 <HAL_PCD_EP_Close>
 800affa:	4603      	mov	r3, r0
 800affc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800affe:	7bfb      	ldrb	r3, [r7, #15]
 800b000:	4618      	mov	r0, r3
 800b002:	f000 f8e5 	bl	800b1d0 <USBD_Get_USB_Status>
 800b006:	4603      	mov	r3, r0
 800b008:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b00a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b00c:	4618      	mov	r0, r3
 800b00e:	3710      	adds	r7, #16
 800b010:	46bd      	mov	sp, r7
 800b012:	bd80      	pop	{r7, pc}

0800b014 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b084      	sub	sp, #16
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
 800b01c:	460b      	mov	r3, r1
 800b01e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b020:	2300      	movs	r3, #0
 800b022:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b024:	2300      	movs	r3, #0
 800b026:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800b02e:	78fa      	ldrb	r2, [r7, #3]
 800b030:	4611      	mov	r1, r2
 800b032:	4618      	mov	r0, r3
 800b034:	f7f8 fca6 	bl	8003984 <HAL_PCD_EP_SetStall>
 800b038:	4603      	mov	r3, r0
 800b03a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800b03c:	7bfb      	ldrb	r3, [r7, #15]
 800b03e:	4618      	mov	r0, r3
 800b040:	f000 f8c6 	bl	800b1d0 <USBD_Get_USB_Status>
 800b044:	4603      	mov	r3, r0
 800b046:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b048:	7bbb      	ldrb	r3, [r7, #14]
}
 800b04a:	4618      	mov	r0, r3
 800b04c:	3710      	adds	r7, #16
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}

0800b052 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b052:	b580      	push	{r7, lr}
 800b054:	b084      	sub	sp, #16
 800b056:	af00      	add	r7, sp, #0
 800b058:	6078      	str	r0, [r7, #4]
 800b05a:	460b      	mov	r3, r1
 800b05c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b05e:	2300      	movs	r3, #0
 800b060:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b062:	2300      	movs	r3, #0
 800b064:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800b06c:	78fa      	ldrb	r2, [r7, #3]
 800b06e:	4611      	mov	r1, r2
 800b070:	4618      	mov	r0, r3
 800b072:	f7f8 fcea 	bl	8003a4a <HAL_PCD_EP_ClrStall>
 800b076:	4603      	mov	r3, r0
 800b078:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800b07a:	7bfb      	ldrb	r3, [r7, #15]
 800b07c:	4618      	mov	r0, r3
 800b07e:	f000 f8a7 	bl	800b1d0 <USBD_Get_USB_Status>
 800b082:	4603      	mov	r3, r0
 800b084:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b086:	7bbb      	ldrb	r3, [r7, #14]
}
 800b088:	4618      	mov	r0, r3
 800b08a:	3710      	adds	r7, #16
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}

0800b090 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b090:	b480      	push	{r7}
 800b092:	b085      	sub	sp, #20
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
 800b098:	460b      	mov	r3, r1
 800b09a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800b0a2:	60fb      	str	r3, [r7, #12]

  if ((ep_addr & 0x80) == 0x80)
 800b0a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	da0b      	bge.n	800b0c4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b0ac:	78fb      	ldrb	r3, [r7, #3]
 800b0ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b0b2:	68f9      	ldr	r1, [r7, #12]
 800b0b4:	4613      	mov	r3, r2
 800b0b6:	00db      	lsls	r3, r3, #3
 800b0b8:	4413      	add	r3, r2
 800b0ba:	009b      	lsls	r3, r3, #2
 800b0bc:	440b      	add	r3, r1
 800b0be:	3316      	adds	r3, #22
 800b0c0:	781b      	ldrb	r3, [r3, #0]
 800b0c2:	e00b      	b.n	800b0dc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b0c4:	78fb      	ldrb	r3, [r7, #3]
 800b0c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b0ca:	68f9      	ldr	r1, [r7, #12]
 800b0cc:	4613      	mov	r3, r2
 800b0ce:	00db      	lsls	r3, r3, #3
 800b0d0:	4413      	add	r3, r2
 800b0d2:	009b      	lsls	r3, r3, #2
 800b0d4:	440b      	add	r3, r1
 800b0d6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800b0da:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	3714      	adds	r7, #20
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e6:	4770      	bx	lr

0800b0e8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b084      	sub	sp, #16
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
 800b0f0:	460b      	mov	r3, r1
 800b0f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800b102:	78fa      	ldrb	r2, [r7, #3]
 800b104:	4611      	mov	r1, r2
 800b106:	4618      	mov	r0, r3
 800b108:	f7f8 fad7 	bl	80036ba <HAL_PCD_SetAddress>
 800b10c:	4603      	mov	r3, r0
 800b10e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800b110:	7bfb      	ldrb	r3, [r7, #15]
 800b112:	4618      	mov	r0, r3
 800b114:	f000 f85c 	bl	800b1d0 <USBD_Get_USB_Status>
 800b118:	4603      	mov	r3, r0
 800b11a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b11c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b11e:	4618      	mov	r0, r3
 800b120:	3710      	adds	r7, #16
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}

0800b126 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b126:	b580      	push	{r7, lr}
 800b128:	b086      	sub	sp, #24
 800b12a:	af00      	add	r7, sp, #0
 800b12c:	60f8      	str	r0, [r7, #12]
 800b12e:	607a      	str	r2, [r7, #4]
 800b130:	603b      	str	r3, [r7, #0]
 800b132:	460b      	mov	r3, r1
 800b134:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b136:	2300      	movs	r3, #0
 800b138:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b13a:	2300      	movs	r3, #0
 800b13c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 800b144:	7af9      	ldrb	r1, [r7, #11]
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	687a      	ldr	r2, [r7, #4]
 800b14a:	f7f8 fbe1 	bl	8003910 <HAL_PCD_EP_Transmit>
 800b14e:	4603      	mov	r3, r0
 800b150:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 800b152:	7dfb      	ldrb	r3, [r7, #23]
 800b154:	4618      	mov	r0, r3
 800b156:	f000 f83b 	bl	800b1d0 <USBD_Get_USB_Status>
 800b15a:	4603      	mov	r3, r0
 800b15c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b15e:	7dbb      	ldrb	r3, [r7, #22]
}
 800b160:	4618      	mov	r0, r3
 800b162:	3718      	adds	r7, #24
 800b164:	46bd      	mov	sp, r7
 800b166:	bd80      	pop	{r7, pc}

0800b168 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b086      	sub	sp, #24
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	60f8      	str	r0, [r7, #12]
 800b170:	607a      	str	r2, [r7, #4]
 800b172:	603b      	str	r3, [r7, #0]
 800b174:	460b      	mov	r3, r1
 800b176:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b178:	2300      	movs	r3, #0
 800b17a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b17c:	2300      	movs	r3, #0
 800b17e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 800b186:	7af9      	ldrb	r1, [r7, #11]
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	687a      	ldr	r2, [r7, #4]
 800b18c:	f7f8 fb6d 	bl	800386a <HAL_PCD_EP_Receive>
 800b190:	4603      	mov	r3, r0
 800b192:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 800b194:	7dfb      	ldrb	r3, [r7, #23]
 800b196:	4618      	mov	r0, r3
 800b198:	f000 f81a 	bl	800b1d0 <USBD_Get_USB_Status>
 800b19c:	4603      	mov	r3, r0
 800b19e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b1a0:	7dbb      	ldrb	r3, [r7, #22]
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3718      	adds	r7, #24
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}

0800b1aa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b1aa:	b580      	push	{r7, lr}
 800b1ac:	b082      	sub	sp, #8
 800b1ae:	af00      	add	r7, sp, #0
 800b1b0:	6078      	str	r0, [r7, #4]
 800b1b2:	460b      	mov	r3, r1
 800b1b4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef *)pdev->pData, ep_addr);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800b1bc:	78fa      	ldrb	r2, [r7, #3]
 800b1be:	4611      	mov	r1, r2
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f7f8 fb8d 	bl	80038e0 <HAL_PCD_EP_GetRxCount>
 800b1c6:	4603      	mov	r3, r0
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	3708      	adds	r7, #8
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd80      	pop	{r7, pc}

0800b1d0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b1d0:	b480      	push	{r7}
 800b1d2:	b085      	sub	sp, #20
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1da:	2300      	movs	r3, #0
 800b1dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b1de:	79fb      	ldrb	r3, [r7, #7]
 800b1e0:	2b03      	cmp	r3, #3
 800b1e2:	d817      	bhi.n	800b214 <USBD_Get_USB_Status+0x44>
 800b1e4:	a201      	add	r2, pc, #4	@ (adr r2, 800b1ec <USBD_Get_USB_Status+0x1c>)
 800b1e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1ea:	bf00      	nop
 800b1ec:	0800b1fd 	.word	0x0800b1fd
 800b1f0:	0800b203 	.word	0x0800b203
 800b1f4:	0800b209 	.word	0x0800b209
 800b1f8:	0800b20f 	.word	0x0800b20f
  {
  case HAL_OK:
    usb_status = USBD_OK;
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	73fb      	strb	r3, [r7, #15]
    break;
 800b200:	e00b      	b.n	800b21a <USBD_Get_USB_Status+0x4a>
  case HAL_ERROR:
    usb_status = USBD_FAIL;
 800b202:	2303      	movs	r3, #3
 800b204:	73fb      	strb	r3, [r7, #15]
    break;
 800b206:	e008      	b.n	800b21a <USBD_Get_USB_Status+0x4a>
  case HAL_BUSY:
    usb_status = USBD_BUSY;
 800b208:	2301      	movs	r3, #1
 800b20a:	73fb      	strb	r3, [r7, #15]
    break;
 800b20c:	e005      	b.n	800b21a <USBD_Get_USB_Status+0x4a>
  case HAL_TIMEOUT:
    usb_status = USBD_FAIL;
 800b20e:	2303      	movs	r3, #3
 800b210:	73fb      	strb	r3, [r7, #15]
    break;
 800b212:	e002      	b.n	800b21a <USBD_Get_USB_Status+0x4a>
  default:
    usb_status = USBD_FAIL;
 800b214:	2303      	movs	r3, #3
 800b216:	73fb      	strb	r3, [r7, #15]
    break;
 800b218:	bf00      	nop
  }
  return usb_status;
 800b21a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b21c:	4618      	mov	r0, r3
 800b21e:	3714      	adds	r7, #20
 800b220:	46bd      	mov	sp, r7
 800b222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b226:	4770      	bx	lr

0800b228 <sniprintf>:
 800b228:	b40c      	push	{r2, r3}
 800b22a:	b530      	push	{r4, r5, lr}
 800b22c:	4b17      	ldr	r3, [pc, #92]	@ (800b28c <sniprintf+0x64>)
 800b22e:	1e0c      	subs	r4, r1, #0
 800b230:	681d      	ldr	r5, [r3, #0]
 800b232:	b09d      	sub	sp, #116	@ 0x74
 800b234:	da08      	bge.n	800b248 <sniprintf+0x20>
 800b236:	238b      	movs	r3, #139	@ 0x8b
 800b238:	602b      	str	r3, [r5, #0]
 800b23a:	f04f 30ff 	mov.w	r0, #4294967295
 800b23e:	b01d      	add	sp, #116	@ 0x74
 800b240:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b244:	b002      	add	sp, #8
 800b246:	4770      	bx	lr
 800b248:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b24c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b250:	bf14      	ite	ne
 800b252:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b256:	4623      	moveq	r3, r4
 800b258:	9304      	str	r3, [sp, #16]
 800b25a:	9307      	str	r3, [sp, #28]
 800b25c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b260:	9002      	str	r0, [sp, #8]
 800b262:	9006      	str	r0, [sp, #24]
 800b264:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b268:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b26a:	ab21      	add	r3, sp, #132	@ 0x84
 800b26c:	a902      	add	r1, sp, #8
 800b26e:	4628      	mov	r0, r5
 800b270:	9301      	str	r3, [sp, #4]
 800b272:	f000 f9a3 	bl	800b5bc <_svfiprintf_r>
 800b276:	1c43      	adds	r3, r0, #1
 800b278:	bfbc      	itt	lt
 800b27a:	238b      	movlt	r3, #139	@ 0x8b
 800b27c:	602b      	strlt	r3, [r5, #0]
 800b27e:	2c00      	cmp	r4, #0
 800b280:	d0dd      	beq.n	800b23e <sniprintf+0x16>
 800b282:	9b02      	ldr	r3, [sp, #8]
 800b284:	2200      	movs	r2, #0
 800b286:	701a      	strb	r2, [r3, #0]
 800b288:	e7d9      	b.n	800b23e <sniprintf+0x16>
 800b28a:	bf00      	nop
 800b28c:	200002e8 	.word	0x200002e8

0800b290 <memset>:
 800b290:	4402      	add	r2, r0
 800b292:	4603      	mov	r3, r0
 800b294:	4293      	cmp	r3, r2
 800b296:	d100      	bne.n	800b29a <memset+0xa>
 800b298:	4770      	bx	lr
 800b29a:	f803 1b01 	strb.w	r1, [r3], #1
 800b29e:	e7f9      	b.n	800b294 <memset+0x4>

0800b2a0 <__errno>:
 800b2a0:	4b01      	ldr	r3, [pc, #4]	@ (800b2a8 <__errno+0x8>)
 800b2a2:	6818      	ldr	r0, [r3, #0]
 800b2a4:	4770      	bx	lr
 800b2a6:	bf00      	nop
 800b2a8:	200002e8 	.word	0x200002e8

0800b2ac <__libc_init_array>:
 800b2ac:	b570      	push	{r4, r5, r6, lr}
 800b2ae:	4d0d      	ldr	r5, [pc, #52]	@ (800b2e4 <__libc_init_array+0x38>)
 800b2b0:	4c0d      	ldr	r4, [pc, #52]	@ (800b2e8 <__libc_init_array+0x3c>)
 800b2b2:	1b64      	subs	r4, r4, r5
 800b2b4:	10a4      	asrs	r4, r4, #2
 800b2b6:	2600      	movs	r6, #0
 800b2b8:	42a6      	cmp	r6, r4
 800b2ba:	d109      	bne.n	800b2d0 <__libc_init_array+0x24>
 800b2bc:	4d0b      	ldr	r5, [pc, #44]	@ (800b2ec <__libc_init_array+0x40>)
 800b2be:	4c0c      	ldr	r4, [pc, #48]	@ (800b2f0 <__libc_init_array+0x44>)
 800b2c0:	f000 fc66 	bl	800bb90 <_init>
 800b2c4:	1b64      	subs	r4, r4, r5
 800b2c6:	10a4      	asrs	r4, r4, #2
 800b2c8:	2600      	movs	r6, #0
 800b2ca:	42a6      	cmp	r6, r4
 800b2cc:	d105      	bne.n	800b2da <__libc_init_array+0x2e>
 800b2ce:	bd70      	pop	{r4, r5, r6, pc}
 800b2d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2d4:	4798      	blx	r3
 800b2d6:	3601      	adds	r6, #1
 800b2d8:	e7ee      	b.n	800b2b8 <__libc_init_array+0xc>
 800b2da:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2de:	4798      	blx	r3
 800b2e0:	3601      	adds	r6, #1
 800b2e2:	e7f2      	b.n	800b2ca <__libc_init_array+0x1e>
 800b2e4:	0800bc60 	.word	0x0800bc60
 800b2e8:	0800bc60 	.word	0x0800bc60
 800b2ec:	0800bc60 	.word	0x0800bc60
 800b2f0:	0800bc64 	.word	0x0800bc64

0800b2f4 <__retarget_lock_acquire_recursive>:
 800b2f4:	4770      	bx	lr

0800b2f6 <__retarget_lock_release_recursive>:
 800b2f6:	4770      	bx	lr

0800b2f8 <memcpy>:
 800b2f8:	440a      	add	r2, r1
 800b2fa:	4291      	cmp	r1, r2
 800b2fc:	f100 33ff 	add.w	r3, r0, #4294967295
 800b300:	d100      	bne.n	800b304 <memcpy+0xc>
 800b302:	4770      	bx	lr
 800b304:	b510      	push	{r4, lr}
 800b306:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b30a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b30e:	4291      	cmp	r1, r2
 800b310:	d1f9      	bne.n	800b306 <memcpy+0xe>
 800b312:	bd10      	pop	{r4, pc}

0800b314 <_free_r>:
 800b314:	b538      	push	{r3, r4, r5, lr}
 800b316:	4605      	mov	r5, r0
 800b318:	2900      	cmp	r1, #0
 800b31a:	d041      	beq.n	800b3a0 <_free_r+0x8c>
 800b31c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b320:	1f0c      	subs	r4, r1, #4
 800b322:	2b00      	cmp	r3, #0
 800b324:	bfb8      	it	lt
 800b326:	18e4      	addlt	r4, r4, r3
 800b328:	f000 f8e0 	bl	800b4ec <__malloc_lock>
 800b32c:	4a1d      	ldr	r2, [pc, #116]	@ (800b3a4 <_free_r+0x90>)
 800b32e:	6813      	ldr	r3, [r2, #0]
 800b330:	b933      	cbnz	r3, 800b340 <_free_r+0x2c>
 800b332:	6063      	str	r3, [r4, #4]
 800b334:	6014      	str	r4, [r2, #0]
 800b336:	4628      	mov	r0, r5
 800b338:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b33c:	f000 b8dc 	b.w	800b4f8 <__malloc_unlock>
 800b340:	42a3      	cmp	r3, r4
 800b342:	d908      	bls.n	800b356 <_free_r+0x42>
 800b344:	6820      	ldr	r0, [r4, #0]
 800b346:	1821      	adds	r1, r4, r0
 800b348:	428b      	cmp	r3, r1
 800b34a:	bf01      	itttt	eq
 800b34c:	6819      	ldreq	r1, [r3, #0]
 800b34e:	685b      	ldreq	r3, [r3, #4]
 800b350:	1809      	addeq	r1, r1, r0
 800b352:	6021      	streq	r1, [r4, #0]
 800b354:	e7ed      	b.n	800b332 <_free_r+0x1e>
 800b356:	461a      	mov	r2, r3
 800b358:	685b      	ldr	r3, [r3, #4]
 800b35a:	b10b      	cbz	r3, 800b360 <_free_r+0x4c>
 800b35c:	42a3      	cmp	r3, r4
 800b35e:	d9fa      	bls.n	800b356 <_free_r+0x42>
 800b360:	6811      	ldr	r1, [r2, #0]
 800b362:	1850      	adds	r0, r2, r1
 800b364:	42a0      	cmp	r0, r4
 800b366:	d10b      	bne.n	800b380 <_free_r+0x6c>
 800b368:	6820      	ldr	r0, [r4, #0]
 800b36a:	4401      	add	r1, r0
 800b36c:	1850      	adds	r0, r2, r1
 800b36e:	4283      	cmp	r3, r0
 800b370:	6011      	str	r1, [r2, #0]
 800b372:	d1e0      	bne.n	800b336 <_free_r+0x22>
 800b374:	6818      	ldr	r0, [r3, #0]
 800b376:	685b      	ldr	r3, [r3, #4]
 800b378:	6053      	str	r3, [r2, #4]
 800b37a:	4408      	add	r0, r1
 800b37c:	6010      	str	r0, [r2, #0]
 800b37e:	e7da      	b.n	800b336 <_free_r+0x22>
 800b380:	d902      	bls.n	800b388 <_free_r+0x74>
 800b382:	230c      	movs	r3, #12
 800b384:	602b      	str	r3, [r5, #0]
 800b386:	e7d6      	b.n	800b336 <_free_r+0x22>
 800b388:	6820      	ldr	r0, [r4, #0]
 800b38a:	1821      	adds	r1, r4, r0
 800b38c:	428b      	cmp	r3, r1
 800b38e:	bf04      	itt	eq
 800b390:	6819      	ldreq	r1, [r3, #0]
 800b392:	685b      	ldreq	r3, [r3, #4]
 800b394:	6063      	str	r3, [r4, #4]
 800b396:	bf04      	itt	eq
 800b398:	1809      	addeq	r1, r1, r0
 800b39a:	6021      	streq	r1, [r4, #0]
 800b39c:	6054      	str	r4, [r2, #4]
 800b39e:	e7ca      	b.n	800b336 <_free_r+0x22>
 800b3a0:	bd38      	pop	{r3, r4, r5, pc}
 800b3a2:	bf00      	nop
 800b3a4:	20002500 	.word	0x20002500

0800b3a8 <sbrk_aligned>:
 800b3a8:	b570      	push	{r4, r5, r6, lr}
 800b3aa:	4e0f      	ldr	r6, [pc, #60]	@ (800b3e8 <sbrk_aligned+0x40>)
 800b3ac:	460c      	mov	r4, r1
 800b3ae:	6831      	ldr	r1, [r6, #0]
 800b3b0:	4605      	mov	r5, r0
 800b3b2:	b911      	cbnz	r1, 800b3ba <sbrk_aligned+0x12>
 800b3b4:	f000 fba6 	bl	800bb04 <_sbrk_r>
 800b3b8:	6030      	str	r0, [r6, #0]
 800b3ba:	4621      	mov	r1, r4
 800b3bc:	4628      	mov	r0, r5
 800b3be:	f000 fba1 	bl	800bb04 <_sbrk_r>
 800b3c2:	1c43      	adds	r3, r0, #1
 800b3c4:	d103      	bne.n	800b3ce <sbrk_aligned+0x26>
 800b3c6:	f04f 34ff 	mov.w	r4, #4294967295
 800b3ca:	4620      	mov	r0, r4
 800b3cc:	bd70      	pop	{r4, r5, r6, pc}
 800b3ce:	1cc4      	adds	r4, r0, #3
 800b3d0:	f024 0403 	bic.w	r4, r4, #3
 800b3d4:	42a0      	cmp	r0, r4
 800b3d6:	d0f8      	beq.n	800b3ca <sbrk_aligned+0x22>
 800b3d8:	1a21      	subs	r1, r4, r0
 800b3da:	4628      	mov	r0, r5
 800b3dc:	f000 fb92 	bl	800bb04 <_sbrk_r>
 800b3e0:	3001      	adds	r0, #1
 800b3e2:	d1f2      	bne.n	800b3ca <sbrk_aligned+0x22>
 800b3e4:	e7ef      	b.n	800b3c6 <sbrk_aligned+0x1e>
 800b3e6:	bf00      	nop
 800b3e8:	200024fc 	.word	0x200024fc

0800b3ec <_malloc_r>:
 800b3ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3f0:	1ccd      	adds	r5, r1, #3
 800b3f2:	f025 0503 	bic.w	r5, r5, #3
 800b3f6:	3508      	adds	r5, #8
 800b3f8:	2d0c      	cmp	r5, #12
 800b3fa:	bf38      	it	cc
 800b3fc:	250c      	movcc	r5, #12
 800b3fe:	2d00      	cmp	r5, #0
 800b400:	4606      	mov	r6, r0
 800b402:	db01      	blt.n	800b408 <_malloc_r+0x1c>
 800b404:	42a9      	cmp	r1, r5
 800b406:	d904      	bls.n	800b412 <_malloc_r+0x26>
 800b408:	230c      	movs	r3, #12
 800b40a:	6033      	str	r3, [r6, #0]
 800b40c:	2000      	movs	r0, #0
 800b40e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b412:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b4e8 <_malloc_r+0xfc>
 800b416:	f000 f869 	bl	800b4ec <__malloc_lock>
 800b41a:	f8d8 3000 	ldr.w	r3, [r8]
 800b41e:	461c      	mov	r4, r3
 800b420:	bb44      	cbnz	r4, 800b474 <_malloc_r+0x88>
 800b422:	4629      	mov	r1, r5
 800b424:	4630      	mov	r0, r6
 800b426:	f7ff ffbf 	bl	800b3a8 <sbrk_aligned>
 800b42a:	1c43      	adds	r3, r0, #1
 800b42c:	4604      	mov	r4, r0
 800b42e:	d158      	bne.n	800b4e2 <_malloc_r+0xf6>
 800b430:	f8d8 4000 	ldr.w	r4, [r8]
 800b434:	4627      	mov	r7, r4
 800b436:	2f00      	cmp	r7, #0
 800b438:	d143      	bne.n	800b4c2 <_malloc_r+0xd6>
 800b43a:	2c00      	cmp	r4, #0
 800b43c:	d04b      	beq.n	800b4d6 <_malloc_r+0xea>
 800b43e:	6823      	ldr	r3, [r4, #0]
 800b440:	4639      	mov	r1, r7
 800b442:	4630      	mov	r0, r6
 800b444:	eb04 0903 	add.w	r9, r4, r3
 800b448:	f000 fb5c 	bl	800bb04 <_sbrk_r>
 800b44c:	4581      	cmp	r9, r0
 800b44e:	d142      	bne.n	800b4d6 <_malloc_r+0xea>
 800b450:	6821      	ldr	r1, [r4, #0]
 800b452:	1a6d      	subs	r5, r5, r1
 800b454:	4629      	mov	r1, r5
 800b456:	4630      	mov	r0, r6
 800b458:	f7ff ffa6 	bl	800b3a8 <sbrk_aligned>
 800b45c:	3001      	adds	r0, #1
 800b45e:	d03a      	beq.n	800b4d6 <_malloc_r+0xea>
 800b460:	6823      	ldr	r3, [r4, #0]
 800b462:	442b      	add	r3, r5
 800b464:	6023      	str	r3, [r4, #0]
 800b466:	f8d8 3000 	ldr.w	r3, [r8]
 800b46a:	685a      	ldr	r2, [r3, #4]
 800b46c:	bb62      	cbnz	r2, 800b4c8 <_malloc_r+0xdc>
 800b46e:	f8c8 7000 	str.w	r7, [r8]
 800b472:	e00f      	b.n	800b494 <_malloc_r+0xa8>
 800b474:	6822      	ldr	r2, [r4, #0]
 800b476:	1b52      	subs	r2, r2, r5
 800b478:	d420      	bmi.n	800b4bc <_malloc_r+0xd0>
 800b47a:	2a0b      	cmp	r2, #11
 800b47c:	d917      	bls.n	800b4ae <_malloc_r+0xc2>
 800b47e:	1961      	adds	r1, r4, r5
 800b480:	42a3      	cmp	r3, r4
 800b482:	6025      	str	r5, [r4, #0]
 800b484:	bf18      	it	ne
 800b486:	6059      	strne	r1, [r3, #4]
 800b488:	6863      	ldr	r3, [r4, #4]
 800b48a:	bf08      	it	eq
 800b48c:	f8c8 1000 	streq.w	r1, [r8]
 800b490:	5162      	str	r2, [r4, r5]
 800b492:	604b      	str	r3, [r1, #4]
 800b494:	4630      	mov	r0, r6
 800b496:	f000 f82f 	bl	800b4f8 <__malloc_unlock>
 800b49a:	f104 000b 	add.w	r0, r4, #11
 800b49e:	1d23      	adds	r3, r4, #4
 800b4a0:	f020 0007 	bic.w	r0, r0, #7
 800b4a4:	1ac2      	subs	r2, r0, r3
 800b4a6:	bf1c      	itt	ne
 800b4a8:	1a1b      	subne	r3, r3, r0
 800b4aa:	50a3      	strne	r3, [r4, r2]
 800b4ac:	e7af      	b.n	800b40e <_malloc_r+0x22>
 800b4ae:	6862      	ldr	r2, [r4, #4]
 800b4b0:	42a3      	cmp	r3, r4
 800b4b2:	bf0c      	ite	eq
 800b4b4:	f8c8 2000 	streq.w	r2, [r8]
 800b4b8:	605a      	strne	r2, [r3, #4]
 800b4ba:	e7eb      	b.n	800b494 <_malloc_r+0xa8>
 800b4bc:	4623      	mov	r3, r4
 800b4be:	6864      	ldr	r4, [r4, #4]
 800b4c0:	e7ae      	b.n	800b420 <_malloc_r+0x34>
 800b4c2:	463c      	mov	r4, r7
 800b4c4:	687f      	ldr	r7, [r7, #4]
 800b4c6:	e7b6      	b.n	800b436 <_malloc_r+0x4a>
 800b4c8:	461a      	mov	r2, r3
 800b4ca:	685b      	ldr	r3, [r3, #4]
 800b4cc:	42a3      	cmp	r3, r4
 800b4ce:	d1fb      	bne.n	800b4c8 <_malloc_r+0xdc>
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	6053      	str	r3, [r2, #4]
 800b4d4:	e7de      	b.n	800b494 <_malloc_r+0xa8>
 800b4d6:	230c      	movs	r3, #12
 800b4d8:	6033      	str	r3, [r6, #0]
 800b4da:	4630      	mov	r0, r6
 800b4dc:	f000 f80c 	bl	800b4f8 <__malloc_unlock>
 800b4e0:	e794      	b.n	800b40c <_malloc_r+0x20>
 800b4e2:	6005      	str	r5, [r0, #0]
 800b4e4:	e7d6      	b.n	800b494 <_malloc_r+0xa8>
 800b4e6:	bf00      	nop
 800b4e8:	20002500 	.word	0x20002500

0800b4ec <__malloc_lock>:
 800b4ec:	4801      	ldr	r0, [pc, #4]	@ (800b4f4 <__malloc_lock+0x8>)
 800b4ee:	f7ff bf01 	b.w	800b2f4 <__retarget_lock_acquire_recursive>
 800b4f2:	bf00      	nop
 800b4f4:	200024f8 	.word	0x200024f8

0800b4f8 <__malloc_unlock>:
 800b4f8:	4801      	ldr	r0, [pc, #4]	@ (800b500 <__malloc_unlock+0x8>)
 800b4fa:	f7ff befc 	b.w	800b2f6 <__retarget_lock_release_recursive>
 800b4fe:	bf00      	nop
 800b500:	200024f8 	.word	0x200024f8

0800b504 <__ssputs_r>:
 800b504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b508:	688e      	ldr	r6, [r1, #8]
 800b50a:	461f      	mov	r7, r3
 800b50c:	42be      	cmp	r6, r7
 800b50e:	680b      	ldr	r3, [r1, #0]
 800b510:	4682      	mov	sl, r0
 800b512:	460c      	mov	r4, r1
 800b514:	4690      	mov	r8, r2
 800b516:	d82d      	bhi.n	800b574 <__ssputs_r+0x70>
 800b518:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b51c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b520:	d026      	beq.n	800b570 <__ssputs_r+0x6c>
 800b522:	6965      	ldr	r5, [r4, #20]
 800b524:	6909      	ldr	r1, [r1, #16]
 800b526:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b52a:	eba3 0901 	sub.w	r9, r3, r1
 800b52e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b532:	1c7b      	adds	r3, r7, #1
 800b534:	444b      	add	r3, r9
 800b536:	106d      	asrs	r5, r5, #1
 800b538:	429d      	cmp	r5, r3
 800b53a:	bf38      	it	cc
 800b53c:	461d      	movcc	r5, r3
 800b53e:	0553      	lsls	r3, r2, #21
 800b540:	d527      	bpl.n	800b592 <__ssputs_r+0x8e>
 800b542:	4629      	mov	r1, r5
 800b544:	f7ff ff52 	bl	800b3ec <_malloc_r>
 800b548:	4606      	mov	r6, r0
 800b54a:	b360      	cbz	r0, 800b5a6 <__ssputs_r+0xa2>
 800b54c:	6921      	ldr	r1, [r4, #16]
 800b54e:	464a      	mov	r2, r9
 800b550:	f7ff fed2 	bl	800b2f8 <memcpy>
 800b554:	89a3      	ldrh	r3, [r4, #12]
 800b556:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b55a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b55e:	81a3      	strh	r3, [r4, #12]
 800b560:	6126      	str	r6, [r4, #16]
 800b562:	6165      	str	r5, [r4, #20]
 800b564:	444e      	add	r6, r9
 800b566:	eba5 0509 	sub.w	r5, r5, r9
 800b56a:	6026      	str	r6, [r4, #0]
 800b56c:	60a5      	str	r5, [r4, #8]
 800b56e:	463e      	mov	r6, r7
 800b570:	42be      	cmp	r6, r7
 800b572:	d900      	bls.n	800b576 <__ssputs_r+0x72>
 800b574:	463e      	mov	r6, r7
 800b576:	6820      	ldr	r0, [r4, #0]
 800b578:	4632      	mov	r2, r6
 800b57a:	4641      	mov	r1, r8
 800b57c:	f000 faa8 	bl	800bad0 <memmove>
 800b580:	68a3      	ldr	r3, [r4, #8]
 800b582:	1b9b      	subs	r3, r3, r6
 800b584:	60a3      	str	r3, [r4, #8]
 800b586:	6823      	ldr	r3, [r4, #0]
 800b588:	4433      	add	r3, r6
 800b58a:	6023      	str	r3, [r4, #0]
 800b58c:	2000      	movs	r0, #0
 800b58e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b592:	462a      	mov	r2, r5
 800b594:	f000 fac6 	bl	800bb24 <_realloc_r>
 800b598:	4606      	mov	r6, r0
 800b59a:	2800      	cmp	r0, #0
 800b59c:	d1e0      	bne.n	800b560 <__ssputs_r+0x5c>
 800b59e:	6921      	ldr	r1, [r4, #16]
 800b5a0:	4650      	mov	r0, sl
 800b5a2:	f7ff feb7 	bl	800b314 <_free_r>
 800b5a6:	230c      	movs	r3, #12
 800b5a8:	f8ca 3000 	str.w	r3, [sl]
 800b5ac:	89a3      	ldrh	r3, [r4, #12]
 800b5ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b5b2:	81a3      	strh	r3, [r4, #12]
 800b5b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b5b8:	e7e9      	b.n	800b58e <__ssputs_r+0x8a>
	...

0800b5bc <_svfiprintf_r>:
 800b5bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5c0:	4698      	mov	r8, r3
 800b5c2:	898b      	ldrh	r3, [r1, #12]
 800b5c4:	061b      	lsls	r3, r3, #24
 800b5c6:	b09d      	sub	sp, #116	@ 0x74
 800b5c8:	4607      	mov	r7, r0
 800b5ca:	460d      	mov	r5, r1
 800b5cc:	4614      	mov	r4, r2
 800b5ce:	d510      	bpl.n	800b5f2 <_svfiprintf_r+0x36>
 800b5d0:	690b      	ldr	r3, [r1, #16]
 800b5d2:	b973      	cbnz	r3, 800b5f2 <_svfiprintf_r+0x36>
 800b5d4:	2140      	movs	r1, #64	@ 0x40
 800b5d6:	f7ff ff09 	bl	800b3ec <_malloc_r>
 800b5da:	6028      	str	r0, [r5, #0]
 800b5dc:	6128      	str	r0, [r5, #16]
 800b5de:	b930      	cbnz	r0, 800b5ee <_svfiprintf_r+0x32>
 800b5e0:	230c      	movs	r3, #12
 800b5e2:	603b      	str	r3, [r7, #0]
 800b5e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b5e8:	b01d      	add	sp, #116	@ 0x74
 800b5ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5ee:	2340      	movs	r3, #64	@ 0x40
 800b5f0:	616b      	str	r3, [r5, #20]
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b5f6:	2320      	movs	r3, #32
 800b5f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b5fc:	f8cd 800c 	str.w	r8, [sp, #12]
 800b600:	2330      	movs	r3, #48	@ 0x30
 800b602:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b7a0 <_svfiprintf_r+0x1e4>
 800b606:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b60a:	f04f 0901 	mov.w	r9, #1
 800b60e:	4623      	mov	r3, r4
 800b610:	469a      	mov	sl, r3
 800b612:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b616:	b10a      	cbz	r2, 800b61c <_svfiprintf_r+0x60>
 800b618:	2a25      	cmp	r2, #37	@ 0x25
 800b61a:	d1f9      	bne.n	800b610 <_svfiprintf_r+0x54>
 800b61c:	ebba 0b04 	subs.w	fp, sl, r4
 800b620:	d00b      	beq.n	800b63a <_svfiprintf_r+0x7e>
 800b622:	465b      	mov	r3, fp
 800b624:	4622      	mov	r2, r4
 800b626:	4629      	mov	r1, r5
 800b628:	4638      	mov	r0, r7
 800b62a:	f7ff ff6b 	bl	800b504 <__ssputs_r>
 800b62e:	3001      	adds	r0, #1
 800b630:	f000 80a7 	beq.w	800b782 <_svfiprintf_r+0x1c6>
 800b634:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b636:	445a      	add	r2, fp
 800b638:	9209      	str	r2, [sp, #36]	@ 0x24
 800b63a:	f89a 3000 	ldrb.w	r3, [sl]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	f000 809f 	beq.w	800b782 <_svfiprintf_r+0x1c6>
 800b644:	2300      	movs	r3, #0
 800b646:	f04f 32ff 	mov.w	r2, #4294967295
 800b64a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b64e:	f10a 0a01 	add.w	sl, sl, #1
 800b652:	9304      	str	r3, [sp, #16]
 800b654:	9307      	str	r3, [sp, #28]
 800b656:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b65a:	931a      	str	r3, [sp, #104]	@ 0x68
 800b65c:	4654      	mov	r4, sl
 800b65e:	2205      	movs	r2, #5
 800b660:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b664:	484e      	ldr	r0, [pc, #312]	@ (800b7a0 <_svfiprintf_r+0x1e4>)
 800b666:	f7f4 fdb3 	bl	80001d0 <memchr>
 800b66a:	9a04      	ldr	r2, [sp, #16]
 800b66c:	b9d8      	cbnz	r0, 800b6a6 <_svfiprintf_r+0xea>
 800b66e:	06d0      	lsls	r0, r2, #27
 800b670:	bf44      	itt	mi
 800b672:	2320      	movmi	r3, #32
 800b674:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b678:	0711      	lsls	r1, r2, #28
 800b67a:	bf44      	itt	mi
 800b67c:	232b      	movmi	r3, #43	@ 0x2b
 800b67e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b682:	f89a 3000 	ldrb.w	r3, [sl]
 800b686:	2b2a      	cmp	r3, #42	@ 0x2a
 800b688:	d015      	beq.n	800b6b6 <_svfiprintf_r+0xfa>
 800b68a:	9a07      	ldr	r2, [sp, #28]
 800b68c:	4654      	mov	r4, sl
 800b68e:	2000      	movs	r0, #0
 800b690:	f04f 0c0a 	mov.w	ip, #10
 800b694:	4621      	mov	r1, r4
 800b696:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b69a:	3b30      	subs	r3, #48	@ 0x30
 800b69c:	2b09      	cmp	r3, #9
 800b69e:	d94b      	bls.n	800b738 <_svfiprintf_r+0x17c>
 800b6a0:	b1b0      	cbz	r0, 800b6d0 <_svfiprintf_r+0x114>
 800b6a2:	9207      	str	r2, [sp, #28]
 800b6a4:	e014      	b.n	800b6d0 <_svfiprintf_r+0x114>
 800b6a6:	eba0 0308 	sub.w	r3, r0, r8
 800b6aa:	fa09 f303 	lsl.w	r3, r9, r3
 800b6ae:	4313      	orrs	r3, r2
 800b6b0:	9304      	str	r3, [sp, #16]
 800b6b2:	46a2      	mov	sl, r4
 800b6b4:	e7d2      	b.n	800b65c <_svfiprintf_r+0xa0>
 800b6b6:	9b03      	ldr	r3, [sp, #12]
 800b6b8:	1d19      	adds	r1, r3, #4
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	9103      	str	r1, [sp, #12]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	bfbb      	ittet	lt
 800b6c2:	425b      	neglt	r3, r3
 800b6c4:	f042 0202 	orrlt.w	r2, r2, #2
 800b6c8:	9307      	strge	r3, [sp, #28]
 800b6ca:	9307      	strlt	r3, [sp, #28]
 800b6cc:	bfb8      	it	lt
 800b6ce:	9204      	strlt	r2, [sp, #16]
 800b6d0:	7823      	ldrb	r3, [r4, #0]
 800b6d2:	2b2e      	cmp	r3, #46	@ 0x2e
 800b6d4:	d10a      	bne.n	800b6ec <_svfiprintf_r+0x130>
 800b6d6:	7863      	ldrb	r3, [r4, #1]
 800b6d8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b6da:	d132      	bne.n	800b742 <_svfiprintf_r+0x186>
 800b6dc:	9b03      	ldr	r3, [sp, #12]
 800b6de:	1d1a      	adds	r2, r3, #4
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	9203      	str	r2, [sp, #12]
 800b6e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b6e8:	3402      	adds	r4, #2
 800b6ea:	9305      	str	r3, [sp, #20]
 800b6ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b7b0 <_svfiprintf_r+0x1f4>
 800b6f0:	7821      	ldrb	r1, [r4, #0]
 800b6f2:	2203      	movs	r2, #3
 800b6f4:	4650      	mov	r0, sl
 800b6f6:	f7f4 fd6b 	bl	80001d0 <memchr>
 800b6fa:	b138      	cbz	r0, 800b70c <_svfiprintf_r+0x150>
 800b6fc:	9b04      	ldr	r3, [sp, #16]
 800b6fe:	eba0 000a 	sub.w	r0, r0, sl
 800b702:	2240      	movs	r2, #64	@ 0x40
 800b704:	4082      	lsls	r2, r0
 800b706:	4313      	orrs	r3, r2
 800b708:	3401      	adds	r4, #1
 800b70a:	9304      	str	r3, [sp, #16]
 800b70c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b710:	4824      	ldr	r0, [pc, #144]	@ (800b7a4 <_svfiprintf_r+0x1e8>)
 800b712:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b716:	2206      	movs	r2, #6
 800b718:	f7f4 fd5a 	bl	80001d0 <memchr>
 800b71c:	2800      	cmp	r0, #0
 800b71e:	d036      	beq.n	800b78e <_svfiprintf_r+0x1d2>
 800b720:	4b21      	ldr	r3, [pc, #132]	@ (800b7a8 <_svfiprintf_r+0x1ec>)
 800b722:	bb1b      	cbnz	r3, 800b76c <_svfiprintf_r+0x1b0>
 800b724:	9b03      	ldr	r3, [sp, #12]
 800b726:	3307      	adds	r3, #7
 800b728:	f023 0307 	bic.w	r3, r3, #7
 800b72c:	3308      	adds	r3, #8
 800b72e:	9303      	str	r3, [sp, #12]
 800b730:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b732:	4433      	add	r3, r6
 800b734:	9309      	str	r3, [sp, #36]	@ 0x24
 800b736:	e76a      	b.n	800b60e <_svfiprintf_r+0x52>
 800b738:	fb0c 3202 	mla	r2, ip, r2, r3
 800b73c:	460c      	mov	r4, r1
 800b73e:	2001      	movs	r0, #1
 800b740:	e7a8      	b.n	800b694 <_svfiprintf_r+0xd8>
 800b742:	2300      	movs	r3, #0
 800b744:	3401      	adds	r4, #1
 800b746:	9305      	str	r3, [sp, #20]
 800b748:	4619      	mov	r1, r3
 800b74a:	f04f 0c0a 	mov.w	ip, #10
 800b74e:	4620      	mov	r0, r4
 800b750:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b754:	3a30      	subs	r2, #48	@ 0x30
 800b756:	2a09      	cmp	r2, #9
 800b758:	d903      	bls.n	800b762 <_svfiprintf_r+0x1a6>
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d0c6      	beq.n	800b6ec <_svfiprintf_r+0x130>
 800b75e:	9105      	str	r1, [sp, #20]
 800b760:	e7c4      	b.n	800b6ec <_svfiprintf_r+0x130>
 800b762:	fb0c 2101 	mla	r1, ip, r1, r2
 800b766:	4604      	mov	r4, r0
 800b768:	2301      	movs	r3, #1
 800b76a:	e7f0      	b.n	800b74e <_svfiprintf_r+0x192>
 800b76c:	ab03      	add	r3, sp, #12
 800b76e:	9300      	str	r3, [sp, #0]
 800b770:	462a      	mov	r2, r5
 800b772:	4b0e      	ldr	r3, [pc, #56]	@ (800b7ac <_svfiprintf_r+0x1f0>)
 800b774:	a904      	add	r1, sp, #16
 800b776:	4638      	mov	r0, r7
 800b778:	f3af 8000 	nop.w
 800b77c:	1c42      	adds	r2, r0, #1
 800b77e:	4606      	mov	r6, r0
 800b780:	d1d6      	bne.n	800b730 <_svfiprintf_r+0x174>
 800b782:	89ab      	ldrh	r3, [r5, #12]
 800b784:	065b      	lsls	r3, r3, #25
 800b786:	f53f af2d 	bmi.w	800b5e4 <_svfiprintf_r+0x28>
 800b78a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b78c:	e72c      	b.n	800b5e8 <_svfiprintf_r+0x2c>
 800b78e:	ab03      	add	r3, sp, #12
 800b790:	9300      	str	r3, [sp, #0]
 800b792:	462a      	mov	r2, r5
 800b794:	4b05      	ldr	r3, [pc, #20]	@ (800b7ac <_svfiprintf_r+0x1f0>)
 800b796:	a904      	add	r1, sp, #16
 800b798:	4638      	mov	r0, r7
 800b79a:	f000 f879 	bl	800b890 <_printf_i>
 800b79e:	e7ed      	b.n	800b77c <_svfiprintf_r+0x1c0>
 800b7a0:	0800bc24 	.word	0x0800bc24
 800b7a4:	0800bc2e 	.word	0x0800bc2e
 800b7a8:	00000000 	.word	0x00000000
 800b7ac:	0800b505 	.word	0x0800b505
 800b7b0:	0800bc2a 	.word	0x0800bc2a

0800b7b4 <_printf_common>:
 800b7b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7b8:	4616      	mov	r6, r2
 800b7ba:	4698      	mov	r8, r3
 800b7bc:	688a      	ldr	r2, [r1, #8]
 800b7be:	690b      	ldr	r3, [r1, #16]
 800b7c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b7c4:	4293      	cmp	r3, r2
 800b7c6:	bfb8      	it	lt
 800b7c8:	4613      	movlt	r3, r2
 800b7ca:	6033      	str	r3, [r6, #0]
 800b7cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b7d0:	4607      	mov	r7, r0
 800b7d2:	460c      	mov	r4, r1
 800b7d4:	b10a      	cbz	r2, 800b7da <_printf_common+0x26>
 800b7d6:	3301      	adds	r3, #1
 800b7d8:	6033      	str	r3, [r6, #0]
 800b7da:	6823      	ldr	r3, [r4, #0]
 800b7dc:	0699      	lsls	r1, r3, #26
 800b7de:	bf42      	ittt	mi
 800b7e0:	6833      	ldrmi	r3, [r6, #0]
 800b7e2:	3302      	addmi	r3, #2
 800b7e4:	6033      	strmi	r3, [r6, #0]
 800b7e6:	6825      	ldr	r5, [r4, #0]
 800b7e8:	f015 0506 	ands.w	r5, r5, #6
 800b7ec:	d106      	bne.n	800b7fc <_printf_common+0x48>
 800b7ee:	f104 0a19 	add.w	sl, r4, #25
 800b7f2:	68e3      	ldr	r3, [r4, #12]
 800b7f4:	6832      	ldr	r2, [r6, #0]
 800b7f6:	1a9b      	subs	r3, r3, r2
 800b7f8:	42ab      	cmp	r3, r5
 800b7fa:	dc26      	bgt.n	800b84a <_printf_common+0x96>
 800b7fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b800:	6822      	ldr	r2, [r4, #0]
 800b802:	3b00      	subs	r3, #0
 800b804:	bf18      	it	ne
 800b806:	2301      	movne	r3, #1
 800b808:	0692      	lsls	r2, r2, #26
 800b80a:	d42b      	bmi.n	800b864 <_printf_common+0xb0>
 800b80c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b810:	4641      	mov	r1, r8
 800b812:	4638      	mov	r0, r7
 800b814:	47c8      	blx	r9
 800b816:	3001      	adds	r0, #1
 800b818:	d01e      	beq.n	800b858 <_printf_common+0xa4>
 800b81a:	6823      	ldr	r3, [r4, #0]
 800b81c:	6922      	ldr	r2, [r4, #16]
 800b81e:	f003 0306 	and.w	r3, r3, #6
 800b822:	2b04      	cmp	r3, #4
 800b824:	bf02      	ittt	eq
 800b826:	68e5      	ldreq	r5, [r4, #12]
 800b828:	6833      	ldreq	r3, [r6, #0]
 800b82a:	1aed      	subeq	r5, r5, r3
 800b82c:	68a3      	ldr	r3, [r4, #8]
 800b82e:	bf0c      	ite	eq
 800b830:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b834:	2500      	movne	r5, #0
 800b836:	4293      	cmp	r3, r2
 800b838:	bfc4      	itt	gt
 800b83a:	1a9b      	subgt	r3, r3, r2
 800b83c:	18ed      	addgt	r5, r5, r3
 800b83e:	2600      	movs	r6, #0
 800b840:	341a      	adds	r4, #26
 800b842:	42b5      	cmp	r5, r6
 800b844:	d11a      	bne.n	800b87c <_printf_common+0xc8>
 800b846:	2000      	movs	r0, #0
 800b848:	e008      	b.n	800b85c <_printf_common+0xa8>
 800b84a:	2301      	movs	r3, #1
 800b84c:	4652      	mov	r2, sl
 800b84e:	4641      	mov	r1, r8
 800b850:	4638      	mov	r0, r7
 800b852:	47c8      	blx	r9
 800b854:	3001      	adds	r0, #1
 800b856:	d103      	bne.n	800b860 <_printf_common+0xac>
 800b858:	f04f 30ff 	mov.w	r0, #4294967295
 800b85c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b860:	3501      	adds	r5, #1
 800b862:	e7c6      	b.n	800b7f2 <_printf_common+0x3e>
 800b864:	18e1      	adds	r1, r4, r3
 800b866:	1c5a      	adds	r2, r3, #1
 800b868:	2030      	movs	r0, #48	@ 0x30
 800b86a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b86e:	4422      	add	r2, r4
 800b870:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b874:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b878:	3302      	adds	r3, #2
 800b87a:	e7c7      	b.n	800b80c <_printf_common+0x58>
 800b87c:	2301      	movs	r3, #1
 800b87e:	4622      	mov	r2, r4
 800b880:	4641      	mov	r1, r8
 800b882:	4638      	mov	r0, r7
 800b884:	47c8      	blx	r9
 800b886:	3001      	adds	r0, #1
 800b888:	d0e6      	beq.n	800b858 <_printf_common+0xa4>
 800b88a:	3601      	adds	r6, #1
 800b88c:	e7d9      	b.n	800b842 <_printf_common+0x8e>
	...

0800b890 <_printf_i>:
 800b890:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b894:	7e0f      	ldrb	r7, [r1, #24]
 800b896:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b898:	2f78      	cmp	r7, #120	@ 0x78
 800b89a:	4691      	mov	r9, r2
 800b89c:	4680      	mov	r8, r0
 800b89e:	460c      	mov	r4, r1
 800b8a0:	469a      	mov	sl, r3
 800b8a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b8a6:	d807      	bhi.n	800b8b8 <_printf_i+0x28>
 800b8a8:	2f62      	cmp	r7, #98	@ 0x62
 800b8aa:	d80a      	bhi.n	800b8c2 <_printf_i+0x32>
 800b8ac:	2f00      	cmp	r7, #0
 800b8ae:	f000 80d2 	beq.w	800ba56 <_printf_i+0x1c6>
 800b8b2:	2f58      	cmp	r7, #88	@ 0x58
 800b8b4:	f000 80b9 	beq.w	800ba2a <_printf_i+0x19a>
 800b8b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b8bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b8c0:	e03a      	b.n	800b938 <_printf_i+0xa8>
 800b8c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b8c6:	2b15      	cmp	r3, #21
 800b8c8:	d8f6      	bhi.n	800b8b8 <_printf_i+0x28>
 800b8ca:	a101      	add	r1, pc, #4	@ (adr r1, 800b8d0 <_printf_i+0x40>)
 800b8cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b8d0:	0800b929 	.word	0x0800b929
 800b8d4:	0800b93d 	.word	0x0800b93d
 800b8d8:	0800b8b9 	.word	0x0800b8b9
 800b8dc:	0800b8b9 	.word	0x0800b8b9
 800b8e0:	0800b8b9 	.word	0x0800b8b9
 800b8e4:	0800b8b9 	.word	0x0800b8b9
 800b8e8:	0800b93d 	.word	0x0800b93d
 800b8ec:	0800b8b9 	.word	0x0800b8b9
 800b8f0:	0800b8b9 	.word	0x0800b8b9
 800b8f4:	0800b8b9 	.word	0x0800b8b9
 800b8f8:	0800b8b9 	.word	0x0800b8b9
 800b8fc:	0800ba3d 	.word	0x0800ba3d
 800b900:	0800b967 	.word	0x0800b967
 800b904:	0800b9f7 	.word	0x0800b9f7
 800b908:	0800b8b9 	.word	0x0800b8b9
 800b90c:	0800b8b9 	.word	0x0800b8b9
 800b910:	0800ba5f 	.word	0x0800ba5f
 800b914:	0800b8b9 	.word	0x0800b8b9
 800b918:	0800b967 	.word	0x0800b967
 800b91c:	0800b8b9 	.word	0x0800b8b9
 800b920:	0800b8b9 	.word	0x0800b8b9
 800b924:	0800b9ff 	.word	0x0800b9ff
 800b928:	6833      	ldr	r3, [r6, #0]
 800b92a:	1d1a      	adds	r2, r3, #4
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	6032      	str	r2, [r6, #0]
 800b930:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b934:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b938:	2301      	movs	r3, #1
 800b93a:	e09d      	b.n	800ba78 <_printf_i+0x1e8>
 800b93c:	6833      	ldr	r3, [r6, #0]
 800b93e:	6820      	ldr	r0, [r4, #0]
 800b940:	1d19      	adds	r1, r3, #4
 800b942:	6031      	str	r1, [r6, #0]
 800b944:	0606      	lsls	r6, r0, #24
 800b946:	d501      	bpl.n	800b94c <_printf_i+0xbc>
 800b948:	681d      	ldr	r5, [r3, #0]
 800b94a:	e003      	b.n	800b954 <_printf_i+0xc4>
 800b94c:	0645      	lsls	r5, r0, #25
 800b94e:	d5fb      	bpl.n	800b948 <_printf_i+0xb8>
 800b950:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b954:	2d00      	cmp	r5, #0
 800b956:	da03      	bge.n	800b960 <_printf_i+0xd0>
 800b958:	232d      	movs	r3, #45	@ 0x2d
 800b95a:	426d      	negs	r5, r5
 800b95c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b960:	4859      	ldr	r0, [pc, #356]	@ (800bac8 <_printf_i+0x238>)
 800b962:	230a      	movs	r3, #10
 800b964:	e011      	b.n	800b98a <_printf_i+0xfa>
 800b966:	6821      	ldr	r1, [r4, #0]
 800b968:	6833      	ldr	r3, [r6, #0]
 800b96a:	0608      	lsls	r0, r1, #24
 800b96c:	f853 5b04 	ldr.w	r5, [r3], #4
 800b970:	d402      	bmi.n	800b978 <_printf_i+0xe8>
 800b972:	0649      	lsls	r1, r1, #25
 800b974:	bf48      	it	mi
 800b976:	b2ad      	uxthmi	r5, r5
 800b978:	2f6f      	cmp	r7, #111	@ 0x6f
 800b97a:	4853      	ldr	r0, [pc, #332]	@ (800bac8 <_printf_i+0x238>)
 800b97c:	6033      	str	r3, [r6, #0]
 800b97e:	bf14      	ite	ne
 800b980:	230a      	movne	r3, #10
 800b982:	2308      	moveq	r3, #8
 800b984:	2100      	movs	r1, #0
 800b986:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b98a:	6866      	ldr	r6, [r4, #4]
 800b98c:	60a6      	str	r6, [r4, #8]
 800b98e:	2e00      	cmp	r6, #0
 800b990:	bfa2      	ittt	ge
 800b992:	6821      	ldrge	r1, [r4, #0]
 800b994:	f021 0104 	bicge.w	r1, r1, #4
 800b998:	6021      	strge	r1, [r4, #0]
 800b99a:	b90d      	cbnz	r5, 800b9a0 <_printf_i+0x110>
 800b99c:	2e00      	cmp	r6, #0
 800b99e:	d04b      	beq.n	800ba38 <_printf_i+0x1a8>
 800b9a0:	4616      	mov	r6, r2
 800b9a2:	fbb5 f1f3 	udiv	r1, r5, r3
 800b9a6:	fb03 5711 	mls	r7, r3, r1, r5
 800b9aa:	5dc7      	ldrb	r7, [r0, r7]
 800b9ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b9b0:	462f      	mov	r7, r5
 800b9b2:	42bb      	cmp	r3, r7
 800b9b4:	460d      	mov	r5, r1
 800b9b6:	d9f4      	bls.n	800b9a2 <_printf_i+0x112>
 800b9b8:	2b08      	cmp	r3, #8
 800b9ba:	d10b      	bne.n	800b9d4 <_printf_i+0x144>
 800b9bc:	6823      	ldr	r3, [r4, #0]
 800b9be:	07df      	lsls	r7, r3, #31
 800b9c0:	d508      	bpl.n	800b9d4 <_printf_i+0x144>
 800b9c2:	6923      	ldr	r3, [r4, #16]
 800b9c4:	6861      	ldr	r1, [r4, #4]
 800b9c6:	4299      	cmp	r1, r3
 800b9c8:	bfde      	ittt	le
 800b9ca:	2330      	movle	r3, #48	@ 0x30
 800b9cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b9d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b9d4:	1b92      	subs	r2, r2, r6
 800b9d6:	6122      	str	r2, [r4, #16]
 800b9d8:	f8cd a000 	str.w	sl, [sp]
 800b9dc:	464b      	mov	r3, r9
 800b9de:	aa03      	add	r2, sp, #12
 800b9e0:	4621      	mov	r1, r4
 800b9e2:	4640      	mov	r0, r8
 800b9e4:	f7ff fee6 	bl	800b7b4 <_printf_common>
 800b9e8:	3001      	adds	r0, #1
 800b9ea:	d14a      	bne.n	800ba82 <_printf_i+0x1f2>
 800b9ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b9f0:	b004      	add	sp, #16
 800b9f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9f6:	6823      	ldr	r3, [r4, #0]
 800b9f8:	f043 0320 	orr.w	r3, r3, #32
 800b9fc:	6023      	str	r3, [r4, #0]
 800b9fe:	4833      	ldr	r0, [pc, #204]	@ (800bacc <_printf_i+0x23c>)
 800ba00:	2778      	movs	r7, #120	@ 0x78
 800ba02:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ba06:	6823      	ldr	r3, [r4, #0]
 800ba08:	6831      	ldr	r1, [r6, #0]
 800ba0a:	061f      	lsls	r7, r3, #24
 800ba0c:	f851 5b04 	ldr.w	r5, [r1], #4
 800ba10:	d402      	bmi.n	800ba18 <_printf_i+0x188>
 800ba12:	065f      	lsls	r7, r3, #25
 800ba14:	bf48      	it	mi
 800ba16:	b2ad      	uxthmi	r5, r5
 800ba18:	6031      	str	r1, [r6, #0]
 800ba1a:	07d9      	lsls	r1, r3, #31
 800ba1c:	bf44      	itt	mi
 800ba1e:	f043 0320 	orrmi.w	r3, r3, #32
 800ba22:	6023      	strmi	r3, [r4, #0]
 800ba24:	b11d      	cbz	r5, 800ba2e <_printf_i+0x19e>
 800ba26:	2310      	movs	r3, #16
 800ba28:	e7ac      	b.n	800b984 <_printf_i+0xf4>
 800ba2a:	4827      	ldr	r0, [pc, #156]	@ (800bac8 <_printf_i+0x238>)
 800ba2c:	e7e9      	b.n	800ba02 <_printf_i+0x172>
 800ba2e:	6823      	ldr	r3, [r4, #0]
 800ba30:	f023 0320 	bic.w	r3, r3, #32
 800ba34:	6023      	str	r3, [r4, #0]
 800ba36:	e7f6      	b.n	800ba26 <_printf_i+0x196>
 800ba38:	4616      	mov	r6, r2
 800ba3a:	e7bd      	b.n	800b9b8 <_printf_i+0x128>
 800ba3c:	6833      	ldr	r3, [r6, #0]
 800ba3e:	6825      	ldr	r5, [r4, #0]
 800ba40:	6961      	ldr	r1, [r4, #20]
 800ba42:	1d18      	adds	r0, r3, #4
 800ba44:	6030      	str	r0, [r6, #0]
 800ba46:	062e      	lsls	r6, r5, #24
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	d501      	bpl.n	800ba50 <_printf_i+0x1c0>
 800ba4c:	6019      	str	r1, [r3, #0]
 800ba4e:	e002      	b.n	800ba56 <_printf_i+0x1c6>
 800ba50:	0668      	lsls	r0, r5, #25
 800ba52:	d5fb      	bpl.n	800ba4c <_printf_i+0x1bc>
 800ba54:	8019      	strh	r1, [r3, #0]
 800ba56:	2300      	movs	r3, #0
 800ba58:	6123      	str	r3, [r4, #16]
 800ba5a:	4616      	mov	r6, r2
 800ba5c:	e7bc      	b.n	800b9d8 <_printf_i+0x148>
 800ba5e:	6833      	ldr	r3, [r6, #0]
 800ba60:	1d1a      	adds	r2, r3, #4
 800ba62:	6032      	str	r2, [r6, #0]
 800ba64:	681e      	ldr	r6, [r3, #0]
 800ba66:	6862      	ldr	r2, [r4, #4]
 800ba68:	2100      	movs	r1, #0
 800ba6a:	4630      	mov	r0, r6
 800ba6c:	f7f4 fbb0 	bl	80001d0 <memchr>
 800ba70:	b108      	cbz	r0, 800ba76 <_printf_i+0x1e6>
 800ba72:	1b80      	subs	r0, r0, r6
 800ba74:	6060      	str	r0, [r4, #4]
 800ba76:	6863      	ldr	r3, [r4, #4]
 800ba78:	6123      	str	r3, [r4, #16]
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ba80:	e7aa      	b.n	800b9d8 <_printf_i+0x148>
 800ba82:	6923      	ldr	r3, [r4, #16]
 800ba84:	4632      	mov	r2, r6
 800ba86:	4649      	mov	r1, r9
 800ba88:	4640      	mov	r0, r8
 800ba8a:	47d0      	blx	sl
 800ba8c:	3001      	adds	r0, #1
 800ba8e:	d0ad      	beq.n	800b9ec <_printf_i+0x15c>
 800ba90:	6823      	ldr	r3, [r4, #0]
 800ba92:	079b      	lsls	r3, r3, #30
 800ba94:	d413      	bmi.n	800babe <_printf_i+0x22e>
 800ba96:	68e0      	ldr	r0, [r4, #12]
 800ba98:	9b03      	ldr	r3, [sp, #12]
 800ba9a:	4298      	cmp	r0, r3
 800ba9c:	bfb8      	it	lt
 800ba9e:	4618      	movlt	r0, r3
 800baa0:	e7a6      	b.n	800b9f0 <_printf_i+0x160>
 800baa2:	2301      	movs	r3, #1
 800baa4:	4632      	mov	r2, r6
 800baa6:	4649      	mov	r1, r9
 800baa8:	4640      	mov	r0, r8
 800baaa:	47d0      	blx	sl
 800baac:	3001      	adds	r0, #1
 800baae:	d09d      	beq.n	800b9ec <_printf_i+0x15c>
 800bab0:	3501      	adds	r5, #1
 800bab2:	68e3      	ldr	r3, [r4, #12]
 800bab4:	9903      	ldr	r1, [sp, #12]
 800bab6:	1a5b      	subs	r3, r3, r1
 800bab8:	42ab      	cmp	r3, r5
 800baba:	dcf2      	bgt.n	800baa2 <_printf_i+0x212>
 800babc:	e7eb      	b.n	800ba96 <_printf_i+0x206>
 800babe:	2500      	movs	r5, #0
 800bac0:	f104 0619 	add.w	r6, r4, #25
 800bac4:	e7f5      	b.n	800bab2 <_printf_i+0x222>
 800bac6:	bf00      	nop
 800bac8:	0800bc35 	.word	0x0800bc35
 800bacc:	0800bc46 	.word	0x0800bc46

0800bad0 <memmove>:
 800bad0:	4288      	cmp	r0, r1
 800bad2:	b510      	push	{r4, lr}
 800bad4:	eb01 0402 	add.w	r4, r1, r2
 800bad8:	d902      	bls.n	800bae0 <memmove+0x10>
 800bada:	4284      	cmp	r4, r0
 800badc:	4623      	mov	r3, r4
 800bade:	d807      	bhi.n	800baf0 <memmove+0x20>
 800bae0:	1e43      	subs	r3, r0, #1
 800bae2:	42a1      	cmp	r1, r4
 800bae4:	d008      	beq.n	800baf8 <memmove+0x28>
 800bae6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800baea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800baee:	e7f8      	b.n	800bae2 <memmove+0x12>
 800baf0:	4402      	add	r2, r0
 800baf2:	4601      	mov	r1, r0
 800baf4:	428a      	cmp	r2, r1
 800baf6:	d100      	bne.n	800bafa <memmove+0x2a>
 800baf8:	bd10      	pop	{r4, pc}
 800bafa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bafe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bb02:	e7f7      	b.n	800baf4 <memmove+0x24>

0800bb04 <_sbrk_r>:
 800bb04:	b538      	push	{r3, r4, r5, lr}
 800bb06:	4d06      	ldr	r5, [pc, #24]	@ (800bb20 <_sbrk_r+0x1c>)
 800bb08:	2300      	movs	r3, #0
 800bb0a:	4604      	mov	r4, r0
 800bb0c:	4608      	mov	r0, r1
 800bb0e:	602b      	str	r3, [r5, #0]
 800bb10:	f7f5 f808 	bl	8000b24 <_sbrk>
 800bb14:	1c43      	adds	r3, r0, #1
 800bb16:	d102      	bne.n	800bb1e <_sbrk_r+0x1a>
 800bb18:	682b      	ldr	r3, [r5, #0]
 800bb1a:	b103      	cbz	r3, 800bb1e <_sbrk_r+0x1a>
 800bb1c:	6023      	str	r3, [r4, #0]
 800bb1e:	bd38      	pop	{r3, r4, r5, pc}
 800bb20:	200024f4 	.word	0x200024f4

0800bb24 <_realloc_r>:
 800bb24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb28:	4680      	mov	r8, r0
 800bb2a:	4615      	mov	r5, r2
 800bb2c:	460c      	mov	r4, r1
 800bb2e:	b921      	cbnz	r1, 800bb3a <_realloc_r+0x16>
 800bb30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb34:	4611      	mov	r1, r2
 800bb36:	f7ff bc59 	b.w	800b3ec <_malloc_r>
 800bb3a:	b92a      	cbnz	r2, 800bb48 <_realloc_r+0x24>
 800bb3c:	f7ff fbea 	bl	800b314 <_free_r>
 800bb40:	2400      	movs	r4, #0
 800bb42:	4620      	mov	r0, r4
 800bb44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb48:	f000 f81a 	bl	800bb80 <_malloc_usable_size_r>
 800bb4c:	4285      	cmp	r5, r0
 800bb4e:	4606      	mov	r6, r0
 800bb50:	d802      	bhi.n	800bb58 <_realloc_r+0x34>
 800bb52:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bb56:	d8f4      	bhi.n	800bb42 <_realloc_r+0x1e>
 800bb58:	4629      	mov	r1, r5
 800bb5a:	4640      	mov	r0, r8
 800bb5c:	f7ff fc46 	bl	800b3ec <_malloc_r>
 800bb60:	4607      	mov	r7, r0
 800bb62:	2800      	cmp	r0, #0
 800bb64:	d0ec      	beq.n	800bb40 <_realloc_r+0x1c>
 800bb66:	42b5      	cmp	r5, r6
 800bb68:	462a      	mov	r2, r5
 800bb6a:	4621      	mov	r1, r4
 800bb6c:	bf28      	it	cs
 800bb6e:	4632      	movcs	r2, r6
 800bb70:	f7ff fbc2 	bl	800b2f8 <memcpy>
 800bb74:	4621      	mov	r1, r4
 800bb76:	4640      	mov	r0, r8
 800bb78:	f7ff fbcc 	bl	800b314 <_free_r>
 800bb7c:	463c      	mov	r4, r7
 800bb7e:	e7e0      	b.n	800bb42 <_realloc_r+0x1e>

0800bb80 <_malloc_usable_size_r>:
 800bb80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb84:	1f18      	subs	r0, r3, #4
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	bfbc      	itt	lt
 800bb8a:	580b      	ldrlt	r3, [r1, r0]
 800bb8c:	18c0      	addlt	r0, r0, r3
 800bb8e:	4770      	bx	lr

0800bb90 <_init>:
 800bb90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb92:	bf00      	nop
 800bb94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb96:	bc08      	pop	{r3}
 800bb98:	469e      	mov	lr, r3
 800bb9a:	4770      	bx	lr

0800bb9c <_fini>:
 800bb9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb9e:	bf00      	nop
 800bba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bba2:	bc08      	pop	{r3}
 800bba4:	469e      	mov	lr, r3
 800bba6:	4770      	bx	lr
